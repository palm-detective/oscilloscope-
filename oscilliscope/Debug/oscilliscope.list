
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e78  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022e78  08022e78  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022e78  08022e78  00032e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022e80  08022e80  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022e80  08022e80  00032e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022e84  08022e84  00032e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022e88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dc4  20000760  080235e8  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20007524  080235e8  00047524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003adff  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000687e  00000000  00000000  0007b58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d60  00000000  00000000  00081e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  00083b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad1  00000000  00000000  000855f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a036  00000000  00000000  000b00c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e518b  00000000  00000000  000da0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007948  00000000  00000000  001bf2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022e60 	.word	0x08022e60

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022e60 	.word	0x08022e60

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <BIOS_Info+0x28>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	e000      	b.n	800c362 <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c360:	2300      	movs	r3, #0
  }
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20006b0c 	.word	0x20006b0c

0800c374 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b08      	cmp	r3, #8
 800c384:	f200 8150 	bhi.w	800c628 <BIOS_Ctrl+0x2b4>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <BIOS_Ctrl+0x1c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c52b 	.word	0x0800c52b
 800c394:	0800c4d9 	.word	0x0800c4d9
 800c398:	0800c51f 	.word	0x0800c51f
 800c39c:	0800c4e9 	.word	0x0800c4e9
 800c3a0:	0800c3b5 	.word	0x0800c3b5
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	0800c441 	.word	0x0800c441
 800c3ac:	0800c469 	.word	0x0800c469
 800c3b0:	0800c4cb 	.word	0x0800c4cb
    case SMPL_ST: if(Val == DISABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3ba:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ca:	e12f      	b.n	800c62c <BIOS_Ctrl+0x2b8>
    				  if(Val == ENABLE)
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	f040 812c 	bne.w	800c62c <BIOS_Ctrl+0x2b8>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3d4:	4b99      	ldr	r3, [pc, #612]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b98      	ldr	r3, [pc, #608]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f042 0201 	orr.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3e4:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689a      	ldr	r2, [r3, #8]
 800c3ea:	4b95      	ldr	r3, [pc, #596]	; (800c640 <BIOS_Ctrl+0x2cc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 0201 	orr.w	r2, r2, #1
 800c3f2:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3f4:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689a      	ldr	r2, [r3, #8]
 800c3fa:	4b92      	ldr	r3, [pc, #584]	; (800c644 <BIOS_Ctrl+0x2d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c404:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	4b8f      	ldr	r3, [pc, #572]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0201 	orr.w	r2, r2, #1
 800c412:	601a      	str	r2, [r3, #0]
    			  break;
 800c414:	e10a      	b.n	800c62c <BIOS_Ctrl+0x2b8>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	4a8b      	ldr	r2, [pc, #556]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c41e:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c420:	2201      	movs	r2, #1
 800c422:	498a      	ldr	r1, [pc, #552]	; (800c64c <BIOS_Ctrl+0x2d8>)
 800c424:	4888      	ldr	r0, [pc, #544]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c426:	f010 ff0d 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c42a:	4b87      	ldr	r3, [pc, #540]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	3b01      	subs	r3, #1
 800c434:	4a84      	ldr	r2, [pc, #528]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c436:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c438:	4883      	ldr	r0, [pc, #524]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c43a:	f010 fd3b 	bl	801ceb4 <HAL_TIM_Base_Init>
                  break;
 800c43e:	e0f8      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c440:	4b81      	ldr	r3, [pc, #516]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b80      	ldr	r3, [pc, #512]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f022 0204 	bic.w	r2, r2, #4
 800c44e:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c456:	487c      	ldr	r0, [pc, #496]	; (800c648 <BIOS_Ctrl+0x2d4>)
 800c458:	f010 fd2c 	bl	801ceb4 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	b29a      	uxth	r2, r3
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <BIOS_Ctrl+0x2c8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	605a      	str	r2, [r3, #4]
                  break;
 800c466:	e0e4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AiRANGE: if(Val & DC)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d005      	beq.n	800c47e <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c472:	2201      	movs	r2, #1
 800c474:	2110      	movs	r1, #16
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c478:	f00d fbcc 	bl	8019c14 <HAL_GPIO_WritePin>
 800c47c:	e004      	b.n	800c488 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c47e:	2200      	movs	r2, #0
 800c480:	2110      	movs	r1, #16
 800c482:	4873      	ldr	r0, [pc, #460]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c484:	f00d fbc6 	bl	8019c14 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c492:	2201      	movs	r2, #1
 800c494:	2120      	movs	r1, #32
 800c496:	486e      	ldr	r0, [pc, #440]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c498:	f00d fbbc 	bl	8019c14 <HAL_GPIO_WritePin>
 800c49c:	e004      	b.n	800c4a8 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486b      	ldr	r0, [pc, #428]	; (800c650 <BIOS_Ctrl+0x2dc>)
 800c4a4:	f00d fbb6 	bl	8019c14 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f003 0304 	and.w	r3, r3, #4
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4867      	ldr	r0, [pc, #412]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4b8:	f00d fbac 	bl	8019c14 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4bc:	e0b9      	b.n	800c632 <BIOS_Ctrl+0x2be>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4864      	ldr	r0, [pc, #400]	; (800c654 <BIOS_Ctrl+0x2e0>)
 800c4c4:	f00d fba6 	bl	8019c14 <HAL_GPIO_WritePin>
                  break;
 800c4c8:	e0b3      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2110      	movs	r1, #16
 800c4d0:	4861      	ldr	r0, [pc, #388]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c4d2:	f00c fb8a 	bl	8018bea <HAL_DAC_SetValue>
                  break;
 800c4d6:	e0ac      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4de:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4e0:	485e      	ldr	r0, [pc, #376]	; (800c65c <BIOS_Ctrl+0x2e8>)
 800c4e2:	f010 fce7 	bl	801ceb4 <HAL_TIM_Base_Init>
    			  break;
 800c4e6:	e0a4      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4e8:	4b5d      	ldr	r3, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <BIOS_Ctrl+0x2f0>)
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c4fe:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c500:	4b57      	ldr	r3, [pc, #348]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c508:	4b53      	ldr	r3, [pc, #332]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4b54      	ldr	r3, [pc, #336]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6892      	ldr	r2, [r2, #8]
 800c512:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c514:	4b52      	ldr	r3, [pc, #328]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	60da      	str	r2, [r3, #12]
                  break;
 800c51c:	e089      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	b29a      	uxth	r2, r3
 800c522:	4b4f      	ldr	r3, [pc, #316]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	605a      	str	r2, [r3, #4]
    			  break;
 800c528:	e083      	b.n	800c632 <BIOS_Ctrl+0x2be>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b04      	cmp	r3, #4
 800c532:	d009      	beq.n	800c548 <BIOS_Ctrl+0x1d4>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d87a      	bhi.n	800c630 <BIOS_Ctrl+0x2bc>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d04d      	beq.n	800c5dc <BIOS_Ctrl+0x268>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d025      	beq.n	800c592 <BIOS_Ctrl+0x21e>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c546:	e073      	b.n	800c630 <BIOS_Ctrl+0x2bc>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c548:	4b45      	ldr	r3, [pc, #276]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b44      	ldr	r3, [pc, #272]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	4b3e      	ldr	r3, [pc, #248]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 0201 	bic.w	r2, r2, #1
 800c566:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c568:	2304      	movs	r3, #4
 800c56a:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c56c:	2302      	movs	r3, #2
 800c56e:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c570:	f107 0308 	add.w	r3, r7, #8
 800c574:	4619      	mov	r1, r3
 800c576:	483c      	ldr	r0, [pc, #240]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c578:	f00d f9a0 	bl	80198bc <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c57c:	2310      	movs	r3, #16
 800c57e:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c580:	2300      	movs	r3, #0
 800c582:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4619      	mov	r1, r3
 800c58a:	4837      	ldr	r0, [pc, #220]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c58c:	f00d f996 	bl	80198bc <HAL_GPIO_Init>
                                  break;
 800c590:	e049      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c592:	2304      	movs	r3, #4
 800c594:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4831      	ldr	r0, [pc, #196]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5a2:	f00d f98b 	bl	80198bc <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5a6:	2310      	movs	r3, #16
 800c5a8:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	482c      	ldr	r0, [pc, #176]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c5b6:	f00d f981 	bl	80198bc <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5ba:	4b29      	ldr	r3, [pc, #164]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b27      	ldr	r3, [pc, #156]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5ca:	4b23      	ldr	r3, [pc, #140]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b21      	ldr	r3, [pc, #132]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0201 	orr.w	r2, r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
                                  break;
 800c5da:	e024      	b.n	800c626 <BIOS_Ctrl+0x2b2>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5dc:	4b20      	ldr	r3, [pc, #128]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4b1f      	ldr	r3, [pc, #124]	; (800c660 <BIOS_Ctrl+0x2ec>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0201 	bic.w	r2, r2, #1
 800c5ea:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b19      	ldr	r3, [pc, #100]	; (800c658 <BIOS_Ctrl+0x2e4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f022 0201 	bic.w	r2, r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c600:	2302      	movs	r3, #2
 800c602:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4619      	mov	r1, r3
 800c60a:	4817      	ldr	r0, [pc, #92]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c60c:	f00d f956 	bl	80198bc <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c610:	2310      	movs	r3, #16
 800c612:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c614:	2300      	movs	r3, #0
 800c616:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	4619      	mov	r1, r3
 800c61e:	4812      	ldr	r0, [pc, #72]	; (800c668 <BIOS_Ctrl+0x2f4>)
 800c620:	f00d f94c 	bl	80198bc <HAL_GPIO_Init>
                                  break;
 800c624:	bf00      	nop
                  break;
 800c626:	e003      	b.n	800c630 <BIOS_Ctrl+0x2bc>

    default: break;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <BIOS_Ctrl+0x2be>
    			  break;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <BIOS_Ctrl+0x2be>
                  break;
 800c630:	bf00      	nop
  }
}
 800c632:	bf00      	nop
 800c634:	3720      	adds	r7, #32
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20006b0c 	.word	0x20006b0c
 800c640:	20006a78 	.word	0x20006a78
 800c644:	200068e8 	.word	0x200068e8
 800c648:	20006b88 	.word	0x20006b88
 800c64c:	20006b6c 	.word	0x20006b6c
 800c650:	40020800 	.word	0x40020800
 800c654:	40020400 	.word	0x40020400
 800c658:	20006af8 	.word	0x20006af8
 800c65c:	20006bd0 	.word	0x20006bd0
 800c660:	20006a18 	.word	0x20006a18
 800c664:	0ffffede 	.word	0x0ffffede
 800c668:	40020000 	.word	0x40020000

0800c66c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c67a:	4a13      	ldr	r2, [pc, #76]	; (800c6c8 <Set_Base+0x5c>)
 800c67c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c680:	3301      	adds	r3, #1
 800c682:	0fda      	lsrs	r2, r3, #31
 800c684:	4413      	add	r3, r2
 800c686:	105b      	asrs	r3, r3, #1
 800c688:	461a      	mov	r2, r3
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <Set_Base+0x60>)
 800c68c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c68e:	2201      	movs	r2, #1
 800c690:	490e      	ldr	r1, [pc, #56]	; (800c6cc <Set_Base+0x60>)
 800c692:	480f      	ldr	r0, [pc, #60]	; (800c6d0 <Set_Base+0x64>)
 800c694:	f010 fdd6 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <Set_Base+0x68>)
 800c69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <Set_Base+0x64>)
 800c6a6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <Set_Base+0x5c>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <Set_Base+0x64>)
 800c6b6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <Set_Base+0x64>)
 800c6ba:	f010 fbfb 	bl	801ceb4 <HAL_TIM_Base_Init>
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08000b30 	.word	0x08000b30
 800c6cc:	20006b6c 	.word	0x20006b6c
 800c6d0:	20006b88 	.word	0x20006b88
 800c6d4:	08000b08 	.word	0x08000b08

0800c6d8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <Set_Duty+0x44>)
 800c6de:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <Set_Duty+0x48>)
 800c6e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <Set_Duty+0x44>)
 800c6ee:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c6f2:	f1c2 020a 	rsb	r2, r2, #10
 800c6f6:	fb02 f303 	mul.w	r3, r2, r3
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	; (800c724 <Set_Duty+0x4c>)
 800c6fc:	fb82 1203 	smull	r1, r2, r2, r3
 800c700:	1092      	asrs	r2, r2, #2
 800c702:	17db      	asrs	r3, r3, #31
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	4b07      	ldr	r3, [pc, #28]	; (800c728 <Set_Duty+0x50>)
 800c70a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c70c:	2203      	movs	r2, #3
 800c70e:	4906      	ldr	r1, [pc, #24]	; (800c728 <Set_Duty+0x50>)
 800c710:	4806      	ldr	r0, [pc, #24]	; (800c72c <Set_Duty+0x54>)
 800c712:	f010 fd97 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
}
 800c716:	bf00      	nop
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000298 	.word	0x20000298
 800c720:	08000ae8 	.word	0x08000ae8
 800c724:	66666667 	.word	0x66666667
 800c728:	20006adc 	.word	0x20006adc
 800c72c:	20006930 	.word	0x20006930

0800c730 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	4a13      	ldr	r2, [pc, #76]	; (800c78c <Set_Fout+0x5c>)
 800c740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c744:	3301      	adds	r3, #1
 800c746:	0fda      	lsrs	r2, r3, #31
 800c748:	4413      	add	r3, r2
 800c74a:	105b      	asrs	r3, r3, #1
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <Set_Fout+0x60>)
 800c750:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c752:	2203      	movs	r2, #3
 800c754:	490e      	ldr	r1, [pc, #56]	; (800c790 <Set_Fout+0x60>)
 800c756:	480f      	ldr	r0, [pc, #60]	; (800c794 <Set_Fout+0x64>)
 800c758:	f010 fd74 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c75c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c760:	4a0d      	ldr	r2, [pc, #52]	; (800c798 <Set_Fout+0x68>)
 800c762:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c766:	461a      	mov	r2, r3
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <Set_Fout+0x64>)
 800c76a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <Set_Fout+0x5c>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <Set_Fout+0x64>)
 800c77a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <Set_Fout+0x64>)
 800c77e:	f010 fb99 	bl	801ceb4 <HAL_TIM_Base_Init>
}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08000ae8 	.word	0x08000ae8
 800c790:	20006adc 	.word	0x20006adc
 800c794:	20006930 	.word	0x20006930
 800c798:	08000ac8 	.word	0x08000ac8

0800c79c <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7a0:	4b20      	ldr	r3, [pc, #128]	; (800c824 <ADC_Start+0x88>)
 800c7a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7a6:	4b20      	ldr	r3, [pc, #128]	; (800c828 <ADC_Start+0x8c>)
 800c7a8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7aa:	4b20      	ldr	r3, [pc, #128]	; (800c82c <ADC_Start+0x90>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b1e      	ldr	r3, [pc, #120]	; (800c82c <ADC_Start+0x90>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f022 0201 	bic.w	r2, r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ba:	4b1c      	ldr	r3, [pc, #112]	; (800c82c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1c      	ldr	r2, [pc, #112]	; (800c830 <ADC_Start+0x94>)
 800c7c0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <ADC_Start+0x88>)
 800c7c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7c8:	2b05      	cmp	r3, #5
 800c7ca:	d004      	beq.n	800c7d6 <ADC_Start+0x3a>
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <ADC_Start+0x88>)
 800c7ce:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d10e      	bne.n	800c7f4 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7d6:	4b13      	ldr	r3, [pc, #76]	; (800c824 <ADC_Start+0x88>)
 800c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7dc:	2b0b      	cmp	r3, #11
 800c7de:	dd09      	ble.n	800c7f4 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7e0:	4b12      	ldr	r3, [pc, #72]	; (800c82c <ADC_Start+0x90>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7e8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <ADC_Start+0x88>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c7f2:	e00a      	b.n	800c80a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c7f4:	4b0b      	ldr	r3, [pc, #44]	; (800c824 <ADC_Start+0x88>)
 800c7f6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <ADC_Start+0x98>)
 800c7fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b09      	ldr	r3, [pc, #36]	; (800c82c <ADC_Start+0x90>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <ADC_Start+0x90>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b06      	ldr	r3, [pc, #24]	; (800c82c <ADC_Start+0x90>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	601a      	str	r2, [r3, #0]
}
 800c81a:	bf00      	nop
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20000298 	.word	0x20000298
 800c828:	20002870 	.word	0x20002870
 800c82c:	20006b0c 	.word	0x20006b0c
 800c830:	20002874 	.word	0x20002874
 800c834:	08002270 	.word	0x08002270

0800c838 <touchscan>:

//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan()
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
	short x,y;
	char code;

	code =0;
 800c83e:	2300      	movs	r3, #0
 800c840:	71fb      	strb	r3, [r7, #7]

	return code;
 800c842:	79fb      	ldrb	r3, [r7, #7]
}
 800c844:	4618      	mov	r0, r3
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800c856:	4b73      	ldr	r3, [pc, #460]	; (800ca24 <Tim3_ISP+0x1d4>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d008      	beq.n	800c870 <Tim3_ISP+0x20>
 800c85e:	4b72      	ldr	r3, [pc, #456]	; (800ca28 <Tim3_ISP+0x1d8>)
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	b21b      	sxth	r3, r3
 800c864:	b29b      	uxth	r3, r3
 800c866:	3301      	adds	r3, #1
 800c868:	b29b      	uxth	r3, r3
 800c86a:	b21a      	sxth	r2, r3
 800c86c:	4b6e      	ldr	r3, [pc, #440]	; (800ca28 <Tim3_ISP+0x1d8>)
 800c86e:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800c870:	4b6e      	ldr	r3, [pc, #440]	; (800ca2c <Tim3_ISP+0x1dc>)
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	b21b      	sxth	r3, r3
 800c876:	b29b      	uxth	r3, r3
 800c878:	3301      	adds	r3, #1
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	b21a      	sxth	r2, r3
 800c87e:	4b6b      	ldr	r3, [pc, #428]	; (800ca2c <Tim3_ISP+0x1dc>)
 800c880:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800c882:	4b6b      	ldr	r3, [pc, #428]	; (800ca30 <Tim3_ISP+0x1e0>)
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	b21b      	sxth	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	dd08      	ble.n	800c89e <Tim3_ISP+0x4e>
 800c88c:	4b68      	ldr	r3, [pc, #416]	; (800ca30 <Tim3_ISP+0x1e0>)
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	b21b      	sxth	r3, r3
 800c892:	b29b      	uxth	r3, r3
 800c894:	3b01      	subs	r3, #1
 800c896:	b29b      	uxth	r3, r3
 800c898:	b21a      	sxth	r2, r3
 800c89a:	4b65      	ldr	r3, [pc, #404]	; (800ca30 <Tim3_ISP+0x1e0>)
 800c89c:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c89e:	4b65      	ldr	r3, [pc, #404]	; (800ca34 <Tim3_ISP+0x1e4>)
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f340 8081 	ble.w	800c9ac <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800c8aa:	4b62      	ldr	r3, [pc, #392]	; (800ca34 <Tim3_ISP+0x1e4>)
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b21b      	sxth	r3, r3
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	b21a      	sxth	r2, r3
 800c8b8:	4b5e      	ldr	r3, [pc, #376]	; (800ca34 <Tim3_ISP+0x1e4>)
 800c8ba:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c8bc:	4b5d      	ldr	r3, [pc, #372]	; (800ca34 <Tim3_ISP+0x1e4>)
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	b21a      	sxth	r2, r3
 800c8c2:	4b5d      	ldr	r3, [pc, #372]	; (800ca38 <Tim3_ISP+0x1e8>)
 800c8c4:	fb83 1302 	smull	r1, r3, r3, r2
 800c8c8:	10d9      	asrs	r1, r3, #3
 800c8ca:	17d3      	asrs	r3, r2, #31
 800c8cc:	1ac9      	subs	r1, r1, r3
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	440b      	add	r3, r1
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	b21b      	sxth	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f040 809d 	bne.w	800ca1a <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800c8e0:	4b56      	ldr	r3, [pc, #344]	; (800ca3c <Tim3_ISP+0x1ec>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d006      	beq.n	800c8f8 <Tim3_ISP+0xa8>
 800c8ea:	4b54      	ldr	r3, [pc, #336]	; (800ca3c <Tim3_ISP+0x1ec>)
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	4b51      	ldr	r3, [pc, #324]	; (800ca3c <Tim3_ISP+0x1ec>)
 800c8f6:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800c8f8:	4b51      	ldr	r3, [pc, #324]	; (800ca40 <Tim3_ISP+0x1f0>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d006      	beq.n	800c910 <Tim3_ISP+0xc0>
 800c902:	4b4f      	ldr	r3, [pc, #316]	; (800ca40 <Tim3_ISP+0x1f0>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	b2db      	uxtb	r3, r3
 800c908:	3b01      	subs	r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	4b4c      	ldr	r3, [pc, #304]	; (800ca40 <Tim3_ISP+0x1f0>)
 800c90e:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800c910:	2300      	movs	r3, #0
 800c912:	71fb      	strb	r3, [r7, #7]
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800c918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c91c:	4849      	ldr	r0, [pc, #292]	; (800ca44 <Tim3_ISP+0x1f4>)
 800c91e:	f00d f961 	bl	8019be4 <HAL_GPIO_ReadPin>
 800c922:	4603      	mov	r3, r0
 800c924:	461a      	mov	r2, r3
 800c926:	4b48      	ldr	r3, [pc, #288]	; (800ca48 <Tim3_ISP+0x1f8>)
 800c928:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800c92a:	4b47      	ldr	r3, [pc, #284]	; (800ca48 <Tim3_ISP+0x1f8>)
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	4b47      	ldr	r3, [pc, #284]	; (800ca4c <Tim3_ISP+0x1fc>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d006      	beq.n	800c944 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800c936:	2301      	movs	r3, #1
 800c938:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800c93a:	4b43      	ldr	r3, [pc, #268]	; (800ca48 <Tim3_ISP+0x1f8>)
 800c93c:	781a      	ldrb	r2, [r3, #0]
 800c93e:	4b43      	ldr	r3, [pc, #268]	; (800ca4c <Tim3_ISP+0x1fc>)
 800c940:	701a      	strb	r2, [r3, #0]
 800c942:	e005      	b.n	800c950 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800c944:	4b40      	ldr	r3, [pc, #256]	; (800ca48 <Tim3_ISP+0x1f8>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800c94c:	2301      	movs	r3, #1
 800c94e:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800c950:	79fb      	ldrb	r3, [r7, #7]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800c956:	f7ff ff6f 	bl	800c838 <touchscan>
 800c95a:	4603      	mov	r3, r0
 800c95c:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800c95e:	79bb      	ldrb	r3, [r7, #6]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <Tim3_ISP+0x11a>
 800c964:	4a3a      	ldr	r2, [pc, #232]	; (800ca50 <Tim3_ISP+0x200>)
 800c966:	79bb      	ldrb	r3, [r7, #6]
 800c968:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800c96a:	4b3a      	ldr	r3, [pc, #232]	; (800ca54 <Tim3_ISP+0x204>)
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	b21b      	sxth	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	dd09      	ble.n	800c988 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800c974:	4b37      	ldr	r3, [pc, #220]	; (800ca54 <Tim3_ISP+0x204>)
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	b21b      	sxth	r3, r3
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	3b01      	subs	r3, #1
 800c97e:	b29b      	uxth	r3, r3
 800c980:	b21a      	sxth	r2, r3
 800c982:	4b34      	ldr	r3, [pc, #208]	; (800ca54 <Tim3_ISP+0x204>)
 800c984:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c986:	e048      	b.n	800ca1a <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c988:	4b32      	ldr	r3, [pc, #200]	; (800ca54 <Tim3_ISP+0x204>)
 800c98a:	220c      	movs	r2, #12
 800c98c:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c98e:	4b32      	ldr	r3, [pc, #200]	; (800ca58 <Tim3_ISP+0x208>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	bf0c      	ite	eq
 800c998:	2301      	moveq	r3, #1
 800c99a:	2300      	movne	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	461a      	mov	r2, r3
 800c9a0:	4b2d      	ldr	r3, [pc, #180]	; (800ca58 <Tim3_ISP+0x208>)
 800c9a2:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c9a4:	4b2d      	ldr	r3, [pc, #180]	; (800ca5c <Tim3_ISP+0x20c>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	701a      	strb	r2, [r3, #0]
}
 800c9aa:	e036      	b.n	800ca1a <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800c9ac:	4b21      	ldr	r3, [pc, #132]	; (800ca34 <Tim3_ISP+0x1e4>)
 800c9ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9b2:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c9b4:	4b2a      	ldr	r3, [pc, #168]	; (800ca60 <Tim3_ISP+0x210>)
 800c9b6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00d      	beq.n	800c9da <Tim3_ISP+0x18a>
 800c9be:	4b29      	ldr	r3, [pc, #164]	; (800ca64 <Tim3_ISP+0x214>)
 800c9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd08      	ble.n	800c9da <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800c9c8:	4b26      	ldr	r3, [pc, #152]	; (800ca64 <Tim3_ISP+0x214>)
 800c9ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	b21a      	sxth	r2, r3
 800c9d6:	4b23      	ldr	r3, [pc, #140]	; (800ca64 <Tim3_ISP+0x214>)
 800c9d8:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c9da:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <Tim3_ISP+0x218>)
 800c9dc:	881b      	ldrh	r3, [r3, #0]
 800c9de:	b21b      	sxth	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	dd0d      	ble.n	800ca00 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800c9e4:	4b21      	ldr	r3, [pc, #132]	; (800ca6c <Tim3_ISP+0x21c>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d116      	bne.n	800ca1a <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800c9ec:	4b1e      	ldr	r3, [pc, #120]	; (800ca68 <Tim3_ISP+0x218>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	b21b      	sxth	r3, r3
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	b21a      	sxth	r2, r3
 800c9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ca68 <Tim3_ISP+0x218>)
 800c9fc:	801a      	strh	r2, [r3, #0]
}
 800c9fe:	e00c      	b.n	800ca1a <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800ca00:	f001 ff04 	bl	800e80c <Close_Pop>
      if(Windows_Pop)
 800ca04:	4b1a      	ldr	r3, [pc, #104]	; (800ca70 <Tim3_ISP+0x220>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800ca0c:	4b18      	ldr	r3, [pc, #96]	; (800ca70 <Tim3_ISP+0x220>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ca12:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800ca16:	f007 fe63 	bl	80146e0 <Clr_WavePosi>
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	20000786 	.word	0x20000786
 800ca28:	20000a32 	.word	0x20000a32
 800ca2c:	20000a34 	.word	0x20000a34
 800ca30:	20000784 	.word	0x20000784
 800ca34:	20000782 	.word	0x20000782
 800ca38:	66666667 	.word	0x66666667
 800ca3c:	20000788 	.word	0x20000788
 800ca40:	20000787 	.word	0x20000787
 800ca44:	40020400 	.word	0x40020400
 800ca48:	20000a30 	.word	0x20000a30
 800ca4c:	20000789 	.word	0x20000789
 800ca50:	2000077d 	.word	0x2000077d
 800ca54:	20000780 	.word	0x20000780
 800ca58:	2000077c 	.word	0x2000077c
 800ca5c:	20000a31 	.word	0x20000a31
 800ca60:	20000298 	.word	0x20000298
 800ca64:	2000079c 	.word	0x2000079c
 800ca68:	20000000 	.word	0x20000000
 800ca6c:	200001b4 	.word	0x200001b4
 800ca70:	200007a6 	.word	0x200007a6

0800ca74 <Fill_Base>:
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	4b12      	ldr	r3, [pc, #72]	; (800cac4 <Fill_Base+0x50>)
 800ca7a:	4a13      	ldr	r2, [pc, #76]	; (800cac8 <Fill_Base+0x54>)
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <Fill_Base+0x58>)
 800ca80:	2266      	movs	r2, #102	; 0x66
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <Fill_Base+0x50>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a11      	ldr	r2, [pc, #68]	; (800cad0 <Fill_Base+0x5c>)
 800ca8a:	6812      	ldr	r2, [r2, #0]
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <Fill_Base+0x50>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4a0b      	ldr	r2, [pc, #44]	; (800cac4 <Fill_Base+0x50>)
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <Fill_Base+0x58>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	4a0b      	ldr	r2, [pc, #44]	; (800cacc <Fill_Base+0x58>)
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <Fill_Base+0x58>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d000      	beq.n	800caac <Fill_Base+0x38>
 800caaa:	e7eb      	b.n	800ca84 <Fill_Base+0x10>
 800caac:	4b05      	ldr	r3, [pc, #20]	; (800cac4 <Fill_Base+0x50>)
 800caae:	4a09      	ldr	r2, [pc, #36]	; (800cad4 <Fill_Base+0x60>)
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <Fill_Base+0x5c>)
 800cab4:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	bf00      	nop
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	20000bec 	.word	0x20000bec
 800cac8:	20000be0 	.word	0x20000be0
 800cacc:	20000a3c 	.word	0x20000a3c
 800cad0:	20000a40 	.word	0x20000a40
 800cad4:	20000bde 	.word	0x20000bde

0800cad8 <Buld_0>:
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
 800cadc:	4b03      	ldr	r3, [pc, #12]	; (800caec <Buld_0+0x14>)
 800cade:	2200      	movs	r2, #0
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	f7ff ffc7 	bl	800ca74 <Fill_Base>
 800cae6:	bf00      	nop
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20000a40 	.word	0x20000a40

0800caf0 <Buld_1>:
 800caf0:	b580      	push	{r7, lr}
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <Buld_1+0x40>)
 800caf6:	4a0f      	ldr	r2, [pc, #60]	; (800cb34 <Buld_1+0x44>)
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	f7ff ffbb 	bl	800ca74 <Fill_Base>
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <Buld_1+0x40>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <Buld_1+0x48>)
 800cb06:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cb0a:	601a      	str	r2, [r3, #0]
 800cb0c:	4b08      	ldr	r3, [pc, #32]	; (800cb30 <Buld_1+0x40>)
 800cb0e:	6819      	ldr	r1, [r3, #0]
 800cb10:	4b0a      	ldr	r3, [pc, #40]	; (800cb3c <Buld_1+0x4c>)
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <Buld_1+0x48>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4413      	add	r3, r2
 800cb1a:	b28a      	uxth	r2, r1
 800cb1c:	801a      	strh	r2, [r3, #0]
 800cb1e:	4b04      	ldr	r3, [pc, #16]	; (800cb30 <Buld_1+0x40>)
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <Buld_1+0x4c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3b02      	subs	r3, #2
 800cb28:	b292      	uxth	r2, r2
 800cb2a:	801a      	strh	r2, [r3, #0]
 800cb2c:	bf00      	nop
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	20000a40 	.word	0x20000a40
 800cb34:	7bef7bef 	.word	0x7bef7bef
 800cb38:	20000a3c 	.word	0x20000a3c
 800cb3c:	20000bec 	.word	0x20000bec

0800cb40 <Buld_2>:
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <Buld_2+0x38>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	f7ff ff93 	bl	800ca74 <Fill_Base>
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	; (800cb7c <Buld_2+0x3c>)
 800cb50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	4b08      	ldr	r3, [pc, #32]	; (800cb78 <Buld_2+0x38>)
 800cb58:	6819      	ldr	r1, [r3, #0]
 800cb5a:	4b09      	ldr	r3, [pc, #36]	; (800cb80 <Buld_2+0x40>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <Buld_2+0x3c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4413      	add	r3, r2
 800cb64:	b28a      	uxth	r2, r1
 800cb66:	801a      	strh	r2, [r3, #0]
 800cb68:	4b03      	ldr	r3, [pc, #12]	; (800cb78 <Buld_2+0x38>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <Buld_2+0x40>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	b292      	uxth	r2, r2
 800cb72:	801a      	strh	r2, [r3, #0]
 800cb74:	bf00      	nop
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	20000a40 	.word	0x20000a40
 800cb7c:	20000a3c 	.word	0x20000a3c
 800cb80:	20000bec 	.word	0x20000bec

0800cb84 <Buld_3>:
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <Buld_3+0x40>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	f7ff ff71 	bl	800ca74 <Fill_Base>
 800cb92:	4b0d      	ldr	r3, [pc, #52]	; (800cbc8 <Buld_3+0x44>)
 800cb94:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <Buld_3+0x44>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	3b32      	subs	r3, #50	; 0x32
 800cba0:	4a09      	ldr	r2, [pc, #36]	; (800cbc8 <Buld_3+0x44>)
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <Buld_3+0x40>)
 800cba6:	6819      	ldr	r1, [r3, #0]
 800cba8:	4b08      	ldr	r3, [pc, #32]	; (800cbcc <Buld_3+0x48>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <Buld_3+0x44>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	b28a      	uxth	r2, r1
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <Buld_3+0x44>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d000      	beq.n	800cbc0 <Buld_3+0x3c>
 800cbbe:	e7ec      	b.n	800cb9a <Buld_3+0x16>
 800cbc0:	bf00      	nop
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20000a40 	.word	0x20000a40
 800cbc8:	20000a3c 	.word	0x20000a3c
 800cbcc:	20000bec 	.word	0x20000bec

0800cbd0 <Buld_4>:
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <Buld_4+0x40>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	f7ff ff4b 	bl	800ca74 <Fill_Base>
 800cbde:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <Buld_4+0x44>)
 800cbe0:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <Buld_4+0x44>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3b0a      	subs	r3, #10
 800cbec:	4a09      	ldr	r2, [pc, #36]	; (800cc14 <Buld_4+0x44>)
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <Buld_4+0x40>)
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <Buld_4+0x48>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <Buld_4+0x44>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	b28a      	uxth	r2, r1
 800cc00:	801a      	strh	r2, [r3, #0]
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <Buld_4+0x44>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d000      	beq.n	800cc0c <Buld_4+0x3c>
 800cc0a:	e7ec      	b.n	800cbe6 <Buld_4+0x16>
 800cc0c:	bf00      	nop
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20000a40 	.word	0x20000a40
 800cc14:	20000a3c 	.word	0x20000a3c
 800cc18:	20000bec 	.word	0x20000bec

0800cc1c <Draw_Digit_Analog>:
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	4603      	mov	r3, r0
 800cc24:	80fb      	strh	r3, [r7, #6]
 800cc26:	88fb      	ldrh	r3, [r7, #6]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d144      	bne.n	800ccb6 <Draw_Digit_Analog+0x9a>
 800cc2c:	4b7d      	ldr	r3, [pc, #500]	; (800ce24 <Draw_Digit_Analog+0x208>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cc34:	4a7c      	ldr	r2, [pc, #496]	; (800ce28 <Draw_Digit_Analog+0x20c>)
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	4b7b      	ldr	r3, [pc, #492]	; (800ce28 <Draw_Digit_Analog+0x20c>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	4b7b      	ldr	r3, [pc, #492]	; (800ce2c <Draw_Digit_Analog+0x210>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4413      	add	r3, r2
 800cc42:	4a79      	ldr	r2, [pc, #484]	; (800ce28 <Draw_Digit_Analog+0x20c>)
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	4b78      	ldr	r3, [pc, #480]	; (800ce28 <Draw_Digit_Analog+0x20c>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4b78      	ldr	r3, [pc, #480]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	4b75      	ldr	r3, [pc, #468]	; (800ce28 <Draw_Digit_Analog+0x20c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4b75      	ldr	r3, [pc, #468]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	4b75      	ldr	r3, [pc, #468]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	085b      	lsrs	r3, r3, #1
 800cc66:	4a74      	ldr	r2, [pc, #464]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	4b71      	ldr	r3, [pc, #452]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	4b73      	ldr	r3, [pc, #460]	; (800ce3c <Draw_Digit_Analog+0x220>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4013      	ands	r3, r2
 800cc74:	4a6e      	ldr	r2, [pc, #440]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc76:	6013      	str	r3, [r2, #0]
 800cc78:	4b6d      	ldr	r3, [pc, #436]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d104      	bne.n	800cc8a <Draw_Digit_Analog+0x6e>
 800cc80:	4b6d      	ldr	r3, [pc, #436]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a6a      	ldr	r2, [pc, #424]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	e004      	b.n	800cc94 <Draw_Digit_Analog+0x78>
 800cc8a:	4b6b      	ldr	r3, [pc, #428]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	331e      	adds	r3, #30
 800cc90:	4a67      	ldr	r2, [pc, #412]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cc92:	6013      	str	r3, [r2, #0]
 800cc94:	4b67      	ldr	r3, [pc, #412]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	4b68      	ldr	r3, [pc, #416]	; (800ce3c <Draw_Digit_Analog+0x220>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	4a65      	ldr	r2, [pc, #404]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	4b64      	ldr	r3, [pc, #400]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d01c      	beq.n	800cce4 <Draw_Digit_Analog+0xc8>
 800ccaa:	4b63      	ldr	r3, [pc, #396]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	331e      	adds	r3, #30
 800ccb0:	4a61      	ldr	r2, [pc, #388]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	e016      	b.n	800cce4 <Draw_Digit_Analog+0xc8>
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 80a5 	bne.w	800ce08 <Draw_Digit_Analog+0x1ec>
 800ccbe:	4b5e      	ldr	r3, [pc, #376]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3302      	adds	r3, #2
 800ccc4:	4a5c      	ldr	r2, [pc, #368]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	4b5b      	ldr	r3, [pc, #364]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b57      	ldr	r3, [pc, #348]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	4b58      	ldr	r3, [pc, #352]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	4b56      	ldr	r3, [pc, #344]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	e000      	b.n	800cce6 <Draw_Digit_Analog+0xca>
 800cce4:	bf00      	nop
 800cce6:	4b52      	ldr	r3, [pc, #328]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2bff      	cmp	r3, #255	; 0xff
 800ccec:	f000 808e 	beq.w	800ce0c <Draw_Digit_Analog+0x1f0>
 800ccf0:	4b4f      	ldr	r3, [pc, #316]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f000 808b 	beq.w	800ce10 <Draw_Digit_Analog+0x1f4>
 800ccfa:	4b4f      	ldr	r3, [pc, #316]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b4c      	ldr	r3, [pc, #304]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d80b      	bhi.n	800cd1e <Draw_Digit_Analog+0x102>
 800cd06:	4b4c      	ldr	r3, [pc, #304]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a4a      	ldr	r2, [pc, #296]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	4b48      	ldr	r3, [pc, #288]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	4b49      	ldr	r3, [pc, #292]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	4a45      	ldr	r2, [pc, #276]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	e00a      	b.n	800cd34 <Draw_Digit_Analog+0x118>
 800cd1e:	4b44      	ldr	r3, [pc, #272]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a44      	ldr	r2, [pc, #272]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd24:	6013      	str	r3, [r2, #0]
 800cd26:	4b44      	ldr	r3, [pc, #272]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b41      	ldr	r3, [pc, #260]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	4a3f      	ldr	r2, [pc, #252]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	4b3f      	ldr	r3, [pc, #252]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2bc7      	cmp	r3, #199	; 0xc7
 800cd3a:	d86b      	bhi.n	800ce14 <Draw_Digit_Analog+0x1f8>
 800cd3c:	4b3c      	ldr	r3, [pc, #240]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	4b3c      	ldr	r3, [pc, #240]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	4a3c      	ldr	r2, [pc, #240]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	4b3b      	ldr	r3, [pc, #236]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2bc7      	cmp	r3, #199	; 0xc7
 800cd50:	d906      	bls.n	800cd60 <Draw_Digit_Analog+0x144>
 800cd52:	4b38      	ldr	r3, [pc, #224]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cd5a:	4a35      	ldr	r2, [pc, #212]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd5c:	6013      	str	r3, [r2, #0]
 800cd5e:	e020      	b.n	800cda2 <Draw_Digit_Analog+0x186>
 800cd60:	4b35      	ldr	r3, [pc, #212]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d957      	bls.n	800ce18 <Draw_Digit_Analog+0x1fc>
 800cd68:	4b32      	ldr	r3, [pc, #200]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d808      	bhi.n	800cd82 <Draw_Digit_Analog+0x166>
 800cd70:	4b30      	ldr	r3, [pc, #192]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd72:	2203      	movs	r2, #3
 800cd74:	601a      	str	r2, [r3, #0]
 800cd76:	4b30      	ldr	r3, [pc, #192]	; (800ce38 <Draw_Digit_Analog+0x21c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3b03      	subs	r3, #3
 800cd7c:	4a2c      	ldr	r2, [pc, #176]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	e00f      	b.n	800cda2 <Draw_Digit_Analog+0x186>
 800cd82:	4b2b      	ldr	r3, [pc, #172]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <Draw_Digit_Analog+0x184>
 800cd8a:	4b2a      	ldr	r3, [pc, #168]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	4a28      	ldr	r2, [pc, #160]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3302      	adds	r3, #2
 800cd9a:	4a25      	ldr	r2, [pc, #148]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	e000      	b.n	800cda2 <Draw_Digit_Analog+0x186>
 800cda0:	bf00      	nop
 800cda2:	4b23      	ldr	r3, [pc, #140]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b13      	cmp	r3, #19
 800cda8:	d904      	bls.n	800cdb4 <Draw_Digit_Analog+0x198>
 800cdaa:	4b25      	ldr	r3, [pc, #148]	; (800ce40 <Draw_Digit_Analog+0x224>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3314      	adds	r3, #20
 800cdb0:	4a23      	ldr	r2, [pc, #140]	; (800ce40 <Draw_Digit_Analog+0x224>)
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	4b23      	ldr	r3, [pc, #140]	; (800ce44 <Draw_Digit_Analog+0x228>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	4b21      	ldr	r3, [pc, #132]	; (800ce40 <Draw_Digit_Analog+0x224>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4b1f      	ldr	r3, [pc, #124]	; (800ce40 <Draw_Digit_Analog+0x224>)
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	4b1b      	ldr	r3, [pc, #108]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4a19      	ldr	r2, [pc, #100]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	4b18      	ldr	r3, [pc, #96]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	085b      	lsrs	r3, r3, #1
 800cdd6:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	4a1a      	ldr	r2, [pc, #104]	; (800ce48 <Draw_Digit_Analog+0x22c>)
 800cdde:	4413      	add	r3, r2
 800cde0:	461a      	mov	r2, r3
 800cde2:	4b14      	ldr	r3, [pc, #80]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	4b16      	ldr	r3, [pc, #88]	; (800ce40 <Draw_Digit_Analog+0x224>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	4b12      	ldr	r3, [pc, #72]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	801a      	strh	r2, [r3, #0]
 800cdf2:	4b10      	ldr	r3, [pc, #64]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3302      	adds	r3, #2
 800cdf8:	4a0e      	ldr	r2, [pc, #56]	; (800ce34 <Draw_Digit_Analog+0x218>)
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	4b0c      	ldr	r3, [pc, #48]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	4a0b      	ldr	r2, [pc, #44]	; (800ce30 <Draw_Digit_Analog+0x214>)
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	e7ee      	b.n	800cde6 <Draw_Digit_Analog+0x1ca>
 800ce08:	bf00      	nop
 800ce0a:	e006      	b.n	800ce1a <Draw_Digit_Analog+0x1fe>
 800ce0c:	bf00      	nop
 800ce0e:	e004      	b.n	800ce1a <Draw_Digit_Analog+0x1fe>
 800ce10:	bf00      	nop
 800ce12:	e002      	b.n	800ce1a <Draw_Digit_Analog+0x1fe>
 800ce14:	bf00      	nop
 800ce16:	e000      	b.n	800ce1a <Draw_Digit_Analog+0x1fe>
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	20000a44 	.word	0x20000a44
 800ce28:	20000c00 	.word	0x20000c00
 800ce2c:	20000bf8 	.word	0x20000bf8
 800ce30:	20000a3c 	.word	0x20000a3c
 800ce34:	20000be8 	.word	0x20000be8
 800ce38:	20000bec 	.word	0x20000bec
 800ce3c:	20000a38 	.word	0x20000a38
 800ce40:	20000a40 	.word	0x20000a40
 800ce44:	20000bf0 	.word	0x20000bf0
 800ce48:	20000a48 	.word	0x20000a48

0800ce4c <Cursor_0>:
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	4b3c      	ldr	r3, [pc, #240]	; (800cf48 <Cursor_0+0xfc>)
 800ce56:	2206      	movs	r2, #6
 800ce58:	601a      	str	r2, [r3, #0]
 800ce5a:	4b3c      	ldr	r3, [pc, #240]	; (800cf4c <Cursor_0+0x100>)
 800ce5c:	4a3c      	ldr	r2, [pc, #240]	; (800cf50 <Cursor_0+0x104>)
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	4b39      	ldr	r3, [pc, #228]	; (800cf48 <Cursor_0+0xfc>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b38      	ldr	r3, [pc, #224]	; (800cf54 <Cursor_0+0x108>)
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	4b37      	ldr	r3, [pc, #220]	; (800cf54 <Cursor_0+0x108>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d15c      	bne.n	800cf3a <Cursor_0+0xee>
 800ce80:	4b31      	ldr	r3, [pc, #196]	; (800cf48 <Cursor_0+0xfc>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	330a      	adds	r3, #10
 800ce86:	005b      	lsls	r3, r3, #1
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce90:	461a      	mov	r2, r3
 800ce92:	4b30      	ldr	r3, [pc, #192]	; (800cf54 <Cursor_0+0x108>)
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	4b2f      	ldr	r3, [pc, #188]	; (800cf54 <Cursor_0+0x108>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	085b      	lsrs	r3, r3, #1
 800ce9c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	4a2d      	ldr	r2, [pc, #180]	; (800cf58 <Cursor_0+0x10c>)
 800cea4:	4413      	add	r3, r2
 800cea6:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <Cursor_0+0x100>)
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	4b27      	ldr	r3, [pc, #156]	; (800cf48 <Cursor_0+0xfc>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3314      	adds	r3, #20
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceba:	461a      	mov	r2, r3
 800cebc:	4b27      	ldr	r3, [pc, #156]	; (800cf5c <Cursor_0+0x110>)
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	4b22      	ldr	r3, [pc, #136]	; (800cf4c <Cursor_0+0x100>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3b04      	subs	r3, #4
 800cec6:	4a21      	ldr	r2, [pc, #132]	; (800cf4c <Cursor_0+0x100>)
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	4b24      	ldr	r3, [pc, #144]	; (800cf5c <Cursor_0+0x110>)
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	4b1f      	ldr	r3, [pc, #124]	; (800cf4c <Cursor_0+0x100>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	b292      	uxth	r2, r2
 800ced4:	801a      	strh	r2, [r3, #0]
 800ced6:	4b1d      	ldr	r3, [pc, #116]	; (800cf4c <Cursor_0+0x100>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3302      	adds	r3, #2
 800cedc:	4a1b      	ldr	r2, [pc, #108]	; (800cf4c <Cursor_0+0x100>)
 800cede:	6013      	str	r3, [r2, #0]
 800cee0:	4b1e      	ldr	r3, [pc, #120]	; (800cf5c <Cursor_0+0x110>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	4b19      	ldr	r3, [pc, #100]	; (800cf4c <Cursor_0+0x100>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	b292      	uxth	r2, r2
 800ceea:	801a      	strh	r2, [r3, #0]
 800ceec:	4b17      	ldr	r3, [pc, #92]	; (800cf4c <Cursor_0+0x100>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3302      	adds	r3, #2
 800cef2:	4a16      	ldr	r2, [pc, #88]	; (800cf4c <Cursor_0+0x100>)
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	4b19      	ldr	r3, [pc, #100]	; (800cf5c <Cursor_0+0x110>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	4b14      	ldr	r3, [pc, #80]	; (800cf4c <Cursor_0+0x100>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	b292      	uxth	r2, r2
 800cf00:	801a      	strh	r2, [r3, #0]
 800cf02:	4b12      	ldr	r3, [pc, #72]	; (800cf4c <Cursor_0+0x100>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3302      	adds	r3, #2
 800cf08:	4a10      	ldr	r2, [pc, #64]	; (800cf4c <Cursor_0+0x100>)
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <Cursor_0+0x110>)
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <Cursor_0+0x100>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	b292      	uxth	r2, r2
 800cf16:	801a      	strh	r2, [r3, #0]
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <Cursor_0+0x100>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3302      	adds	r3, #2
 800cf1e:	4a0b      	ldr	r2, [pc, #44]	; (800cf4c <Cursor_0+0x100>)
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	4b0e      	ldr	r3, [pc, #56]	; (800cf5c <Cursor_0+0x110>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <Cursor_0+0x100>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	b292      	uxth	r2, r2
 800cf2c:	801a      	strh	r2, [r3, #0]
 800cf2e:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <Cursor_0+0x100>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3302      	adds	r3, #2
 800cf34:	4a05      	ldr	r2, [pc, #20]	; (800cf4c <Cursor_0+0x100>)
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	e000      	b.n	800cf3c <Cursor_0+0xf0>
 800cf3a:	bf00      	nop
 800cf3c:	4b02      	ldr	r3, [pc, #8]	; (800cf48 <Cursor_0+0xfc>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3b01      	subs	r3, #1
 800cf42:	4a01      	ldr	r2, [pc, #4]	; (800cf48 <Cursor_0+0xfc>)
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	e78b      	b.n	800ce60 <Cursor_0+0x14>
 800cf48:	20000a40 	.word	0x20000a40
 800cf4c:	20000bec 	.word	0x20000bec
 800cf50:	20000be0 	.word	0x20000be0
 800cf54:	20000a3c 	.word	0x20000a3c
 800cf58:	20000a48 	.word	0x20000a48
 800cf5c:	20000be8 	.word	0x20000be8

0800cf60 <Cursor_1>:
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	4b31      	ldr	r3, [pc, #196]	; (800d030 <Cursor_1+0xd0>)
 800cf6a:	2206      	movs	r2, #6
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	4b31      	ldr	r3, [pc, #196]	; (800d034 <Cursor_1+0xd4>)
 800cf70:	4a31      	ldr	r2, [pc, #196]	; (800d038 <Cursor_1+0xd8>)
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <Cursor_1+0xd0>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf82:	461a      	mov	r2, r3
 800cf84:	4b2d      	ldr	r3, [pc, #180]	; (800d03c <Cursor_1+0xdc>)
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	4b2c      	ldr	r3, [pc, #176]	; (800d03c <Cursor_1+0xdc>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d146      	bne.n	800d022 <Cursor_1+0xc2>
 800cf94:	4b26      	ldr	r3, [pc, #152]	; (800d030 <Cursor_1+0xd0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	330a      	adds	r3, #10
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	4b25      	ldr	r3, [pc, #148]	; (800d03c <Cursor_1+0xdc>)
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	4b24      	ldr	r3, [pc, #144]	; (800d03c <Cursor_1+0xdc>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	085b      	lsrs	r3, r3, #1
 800cfb0:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	4a22      	ldr	r2, [pc, #136]	; (800d040 <Cursor_1+0xe0>)
 800cfb8:	4413      	add	r3, r2
 800cfba:	4a1e      	ldr	r2, [pc, #120]	; (800d034 <Cursor_1+0xd4>)
 800cfbc:	6013      	str	r3, [r2, #0]
 800cfbe:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <Cursor_1+0xd0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3314      	adds	r3, #20
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	4413      	add	r3, r2
 800cfca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	4b1c      	ldr	r3, [pc, #112]	; (800d044 <Cursor_1+0xe4>)
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	4b17      	ldr	r3, [pc, #92]	; (800d034 <Cursor_1+0xd4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3b02      	subs	r3, #2
 800cfda:	4a16      	ldr	r2, [pc, #88]	; (800d034 <Cursor_1+0xd4>)
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	4b19      	ldr	r3, [pc, #100]	; (800d044 <Cursor_1+0xe4>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	4b14      	ldr	r3, [pc, #80]	; (800d034 <Cursor_1+0xd4>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	b292      	uxth	r2, r2
 800cfe8:	801a      	strh	r2, [r3, #0]
 800cfea:	4b12      	ldr	r3, [pc, #72]	; (800d034 <Cursor_1+0xd4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3302      	adds	r3, #2
 800cff0:	4a10      	ldr	r2, [pc, #64]	; (800d034 <Cursor_1+0xd4>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	4b13      	ldr	r3, [pc, #76]	; (800d044 <Cursor_1+0xe4>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b0e      	ldr	r3, [pc, #56]	; (800d034 <Cursor_1+0xd4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	b292      	uxth	r2, r2
 800cffe:	801a      	strh	r2, [r3, #0]
 800d000:	4b0c      	ldr	r3, [pc, #48]	; (800d034 <Cursor_1+0xd4>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3302      	adds	r3, #2
 800d006:	4a0b      	ldr	r2, [pc, #44]	; (800d034 <Cursor_1+0xd4>)
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <Cursor_1+0xe4>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <Cursor_1+0xd4>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	b292      	uxth	r2, r2
 800d014:	801a      	strh	r2, [r3, #0]
 800d016:	4b07      	ldr	r3, [pc, #28]	; (800d034 <Cursor_1+0xd4>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3302      	adds	r3, #2
 800d01c:	4a05      	ldr	r2, [pc, #20]	; (800d034 <Cursor_1+0xd4>)
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	e000      	b.n	800d024 <Cursor_1+0xc4>
 800d022:	bf00      	nop
 800d024:	4b02      	ldr	r3, [pc, #8]	; (800d030 <Cursor_1+0xd0>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3b01      	subs	r3, #1
 800d02a:	4a01      	ldr	r2, [pc, #4]	; (800d030 <Cursor_1+0xd0>)
 800d02c:	6013      	str	r3, [r2, #0]
 800d02e:	e7a1      	b.n	800cf74 <Cursor_1+0x14>
 800d030:	20000a40 	.word	0x20000a40
 800d034:	20000bec 	.word	0x20000bec
 800d038:	20000be0 	.word	0x20000be0
 800d03c:	20000a3c 	.word	0x20000a3c
 800d040:	20000a48 	.word	0x20000a48
 800d044:	20000be8 	.word	0x20000be8

0800d048 <Cursor_2>:
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	4b21      	ldr	r3, [pc, #132]	; (800d0d8 <Cursor_2+0x90>)
 800d052:	2206      	movs	r2, #6
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	4b21      	ldr	r3, [pc, #132]	; (800d0dc <Cursor_2+0x94>)
 800d058:	4a21      	ldr	r2, [pc, #132]	; (800d0e0 <Cursor_2+0x98>)
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	4b1e      	ldr	r3, [pc, #120]	; (800d0d8 <Cursor_2+0x90>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	4413      	add	r3, r2
 800d066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d06a:	461a      	mov	r2, r3
 800d06c:	4b1d      	ldr	r3, [pc, #116]	; (800d0e4 <Cursor_2+0x9c>)
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	4b1c      	ldr	r3, [pc, #112]	; (800d0e4 <Cursor_2+0x9c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 0301 	and.w	r3, r3, #1
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d126      	bne.n	800d0ca <Cursor_2+0x82>
 800d07c:	4b16      	ldr	r3, [pc, #88]	; (800d0d8 <Cursor_2+0x90>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	330a      	adds	r3, #10
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d08c:	461a      	mov	r2, r3
 800d08e:	4b15      	ldr	r3, [pc, #84]	; (800d0e4 <Cursor_2+0x9c>)
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	4b14      	ldr	r3, [pc, #80]	; (800d0e4 <Cursor_2+0x9c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d09c:	005b      	lsls	r3, r3, #1
 800d09e:	4a12      	ldr	r2, [pc, #72]	; (800d0e8 <Cursor_2+0xa0>)
 800d0a0:	4413      	add	r3, r2
 800d0a2:	4a0e      	ldr	r2, [pc, #56]	; (800d0dc <Cursor_2+0x94>)
 800d0a4:	6013      	str	r3, [r2, #0]
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <Cursor_2+0x90>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3314      	adds	r3, #20
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <Cursor_2+0xa4>)
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <Cursor_2+0xa4>)
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	4b06      	ldr	r3, [pc, #24]	; (800d0dc <Cursor_2+0x94>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	b292      	uxth	r2, r2
 800d0c6:	801a      	strh	r2, [r3, #0]
 800d0c8:	e000      	b.n	800d0cc <Cursor_2+0x84>
 800d0ca:	bf00      	nop
 800d0cc:	4b02      	ldr	r3, [pc, #8]	; (800d0d8 <Cursor_2+0x90>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	4a01      	ldr	r2, [pc, #4]	; (800d0d8 <Cursor_2+0x90>)
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	e7c1      	b.n	800d05c <Cursor_2+0x14>
 800d0d8:	20000a40 	.word	0x20000a40
 800d0dc:	20000bec 	.word	0x20000bec
 800d0e0:	20000be0 	.word	0x20000be0
 800d0e4:	20000a3c 	.word	0x20000a3c
 800d0e8:	20000a48 	.word	0x20000a48
 800d0ec:	20000be8 	.word	0x20000be8

0800d0f0 <Cursor_3>:
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	4b2a      	ldr	r3, [pc, #168]	; (800d1a4 <Cursor_3+0xb4>)
 800d0fa:	2206      	movs	r2, #6
 800d0fc:	601a      	str	r2, [r3, #0]
 800d0fe:	4b2a      	ldr	r3, [pc, #168]	; (800d1a8 <Cursor_3+0xb8>)
 800d100:	4a2a      	ldr	r2, [pc, #168]	; (800d1ac <Cursor_3+0xbc>)
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	4b27      	ldr	r3, [pc, #156]	; (800d1a4 <Cursor_3+0xb4>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d112:	461a      	mov	r2, r3
 800d114:	4b26      	ldr	r3, [pc, #152]	; (800d1b0 <Cursor_3+0xc0>)
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	4b25      	ldr	r3, [pc, #148]	; (800d1b0 <Cursor_3+0xc0>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0302 	and.w	r3, r3, #2
 800d120:	2b00      	cmp	r3, #0
 800d122:	d135      	bne.n	800d190 <Cursor_3+0xa0>
 800d124:	4b23      	ldr	r3, [pc, #140]	; (800d1b4 <Cursor_3+0xc4>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3b01      	subs	r3, #1
 800d12a:	4a21      	ldr	r2, [pc, #132]	; (800d1b0 <Cursor_3+0xc0>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	4b20      	ldr	r3, [pc, #128]	; (800d1b0 <Cursor_3+0xc0>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 0303 	and.w	r3, r3, #3
 800d136:	4a1e      	ldr	r2, [pc, #120]	; (800d1b0 <Cursor_3+0xc0>)
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	4b1d      	ldr	r3, [pc, #116]	; (800d1b0 <Cursor_3+0xc0>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d128      	bne.n	800d194 <Cursor_3+0xa4>
 800d142:	4b18      	ldr	r3, [pc, #96]	; (800d1a4 <Cursor_3+0xb4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	330a      	adds	r3, #10
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	4413      	add	r3, r2
 800d14e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d152:	461a      	mov	r2, r3
 800d154:	4b16      	ldr	r3, [pc, #88]	; (800d1b0 <Cursor_3+0xc0>)
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	4b15      	ldr	r3, [pc, #84]	; (800d1b0 <Cursor_3+0xc0>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	085b      	lsrs	r3, r3, #1
 800d15e:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	4a14      	ldr	r2, [pc, #80]	; (800d1b8 <Cursor_3+0xc8>)
 800d166:	4413      	add	r3, r2
 800d168:	4a0f      	ldr	r2, [pc, #60]	; (800d1a8 <Cursor_3+0xb8>)
 800d16a:	6013      	str	r3, [r2, #0]
 800d16c:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <Cursor_3+0xb4>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3314      	adds	r3, #20
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	4413      	add	r3, r2
 800d178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d17c:	461a      	mov	r2, r3
 800d17e:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <Cursor_3+0xcc>)
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	4b0e      	ldr	r3, [pc, #56]	; (800d1bc <Cursor_3+0xcc>)
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4b08      	ldr	r3, [pc, #32]	; (800d1a8 <Cursor_3+0xb8>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	b292      	uxth	r2, r2
 800d18c:	801a      	strh	r2, [r3, #0]
 800d18e:	e002      	b.n	800d196 <Cursor_3+0xa6>
 800d190:	bf00      	nop
 800d192:	e000      	b.n	800d196 <Cursor_3+0xa6>
 800d194:	bf00      	nop
 800d196:	4b03      	ldr	r3, [pc, #12]	; (800d1a4 <Cursor_3+0xb4>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	4a01      	ldr	r2, [pc, #4]	; (800d1a4 <Cursor_3+0xb4>)
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	e7b0      	b.n	800d104 <Cursor_3+0x14>
 800d1a2:	bf00      	nop
 800d1a4:	20000a40 	.word	0x20000a40
 800d1a8:	20000bec 	.word	0x20000bec
 800d1ac:	20000be0 	.word	0x20000be0
 800d1b0:	20000a3c 	.word	0x20000a3c
 800d1b4:	20000bf8 	.word	0x20000bf8
 800d1b8:	20000a48 	.word	0x20000a48
 800d1bc:	20000be8 	.word	0x20000be8

0800d1c0 <Cursor_4>:
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	4b7a      	ldr	r3, [pc, #488]	; (800d3b4 <Cursor_4+0x1f4>)
 800d1ca:	2207      	movs	r2, #7
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	4b7a      	ldr	r3, [pc, #488]	; (800d3b8 <Cursor_4+0x1f8>)
 800d1d0:	4a7a      	ldr	r2, [pc, #488]	; (800d3bc <Cursor_4+0x1fc>)
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	4b77      	ldr	r3, [pc, #476]	; (800d3b4 <Cursor_4+0x1f4>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	4413      	add	r3, r2
 800d1de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	4b76      	ldr	r3, [pc, #472]	; (800d3c0 <Cursor_4+0x200>)
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	4b75      	ldr	r3, [pc, #468]	; (800d3c0 <Cursor_4+0x200>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f040 8145 	bne.w	800d480 <Cursor_4+0x2c0>
 800d1f6:	bf00      	nop
 800d1f8:	4b6e      	ldr	r3, [pc, #440]	; (800d3b4 <Cursor_4+0x1f4>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	330a      	adds	r3, #10
 800d1fe:	005b      	lsls	r3, r3, #1
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d208:	461a      	mov	r2, r3
 800d20a:	4b6d      	ldr	r3, [pc, #436]	; (800d3c0 <Cursor_4+0x200>)
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	4b69      	ldr	r3, [pc, #420]	; (800d3b4 <Cursor_4+0x1f4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3314      	adds	r3, #20
 800d214:	005b      	lsls	r3, r3, #1
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	4413      	add	r3, r2
 800d21a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d21e:	461a      	mov	r2, r3
 800d220:	4b68      	ldr	r3, [pc, #416]	; (800d3c4 <Cursor_4+0x204>)
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	4b66      	ldr	r3, [pc, #408]	; (800d3c0 <Cursor_4+0x200>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3b02      	subs	r3, #2
 800d22a:	4a67      	ldr	r2, [pc, #412]	; (800d3c8 <Cursor_4+0x208>)
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	4b64      	ldr	r3, [pc, #400]	; (800d3c0 <Cursor_4+0x200>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b65      	ldr	r3, [pc, #404]	; (800d3c8 <Cursor_4+0x208>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d112      	bne.n	800d260 <Cursor_4+0xa0>
 800d23a:	4b62      	ldr	r3, [pc, #392]	; (800d3c4 <Cursor_4+0x204>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	4b5e      	ldr	r3, [pc, #376]	; (800d3b8 <Cursor_4+0x1f8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	b292      	uxth	r2, r2
 800d244:	801a      	strh	r2, [r3, #0]
 800d246:	4b5c      	ldr	r3, [pc, #368]	; (800d3b8 <Cursor_4+0x1f8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d24e:	4a5a      	ldr	r2, [pc, #360]	; (800d3b8 <Cursor_4+0x1f8>)
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	4b5c      	ldr	r3, [pc, #368]	; (800d3c4 <Cursor_4+0x204>)
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	4b58      	ldr	r3, [pc, #352]	; (800d3b8 <Cursor_4+0x1f8>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	b292      	uxth	r2, r2
 800d25c:	801a      	strh	r2, [r3, #0]
 800d25e:	e114      	b.n	800d48a <Cursor_4+0x2ca>
 800d260:	bf00      	nop
 800d262:	4b59      	ldr	r3, [pc, #356]	; (800d3c8 <Cursor_4+0x208>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3301      	adds	r3, #1
 800d268:	4a57      	ldr	r2, [pc, #348]	; (800d3c8 <Cursor_4+0x208>)
 800d26a:	6013      	str	r3, [r2, #0]
 800d26c:	4b57      	ldr	r3, [pc, #348]	; (800d3cc <Cursor_4+0x20c>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	4b55      	ldr	r3, [pc, #340]	; (800d3c8 <Cursor_4+0x208>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d128      	bne.n	800d2ca <Cursor_4+0x10a>
 800d278:	4b52      	ldr	r3, [pc, #328]	; (800d3c4 <Cursor_4+0x204>)
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	4b4e      	ldr	r3, [pc, #312]	; (800d3b8 <Cursor_4+0x1f8>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	b292      	uxth	r2, r2
 800d282:	801a      	strh	r2, [r3, #0]
 800d284:	4b4c      	ldr	r3, [pc, #304]	; (800d3b8 <Cursor_4+0x1f8>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3302      	adds	r3, #2
 800d28a:	4a4b      	ldr	r2, [pc, #300]	; (800d3b8 <Cursor_4+0x1f8>)
 800d28c:	6013      	str	r3, [r2, #0]
 800d28e:	4b4d      	ldr	r3, [pc, #308]	; (800d3c4 <Cursor_4+0x204>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	4b49      	ldr	r3, [pc, #292]	; (800d3b8 <Cursor_4+0x1f8>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	b292      	uxth	r2, r2
 800d298:	801a      	strh	r2, [r3, #0]
 800d29a:	4b47      	ldr	r3, [pc, #284]	; (800d3b8 <Cursor_4+0x1f8>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2a2:	4a45      	ldr	r2, [pc, #276]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	4b47      	ldr	r3, [pc, #284]	; (800d3c4 <Cursor_4+0x204>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	4b43      	ldr	r3, [pc, #268]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	b292      	uxth	r2, r2
 800d2b0:	801a      	strh	r2, [r3, #0]
 800d2b2:	4b41      	ldr	r3, [pc, #260]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3302      	adds	r3, #2
 800d2b8:	4a3f      	ldr	r2, [pc, #252]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	4b41      	ldr	r3, [pc, #260]	; (800d3c4 <Cursor_4+0x204>)
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	4b3d      	ldr	r3, [pc, #244]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	b292      	uxth	r2, r2
 800d2c6:	801a      	strh	r2, [r3, #0]
 800d2c8:	e0df      	b.n	800d48a <Cursor_4+0x2ca>
 800d2ca:	bf00      	nop
 800d2cc:	4b3e      	ldr	r3, [pc, #248]	; (800d3c8 <Cursor_4+0x208>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	4a3d      	ldr	r2, [pc, #244]	; (800d3c8 <Cursor_4+0x208>)
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	4b3d      	ldr	r3, [pc, #244]	; (800d3cc <Cursor_4+0x20c>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b3b      	ldr	r3, [pc, #236]	; (800d3c8 <Cursor_4+0x208>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d166      	bne.n	800d3b0 <Cursor_4+0x1f0>
 800d2e2:	4b38      	ldr	r3, [pc, #224]	; (800d3c4 <Cursor_4+0x204>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b34      	ldr	r3, [pc, #208]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	801a      	strh	r2, [r3, #0]
 800d2ee:	4b32      	ldr	r3, [pc, #200]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	4a30      	ldr	r2, [pc, #192]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	4b32      	ldr	r3, [pc, #200]	; (800d3c4 <Cursor_4+0x204>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <Cursor_4+0x1f8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	b292      	uxth	r2, r2
 800d302:	801a      	strh	r2, [r3, #0]
 800d304:	4b2c      	ldr	r3, [pc, #176]	; (800d3b8 <Cursor_4+0x1f8>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3302      	adds	r3, #2
 800d30a:	4a2b      	ldr	r2, [pc, #172]	; (800d3b8 <Cursor_4+0x1f8>)
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	4b2d      	ldr	r3, [pc, #180]	; (800d3c4 <Cursor_4+0x204>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b29      	ldr	r3, [pc, #164]	; (800d3b8 <Cursor_4+0x1f8>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	b292      	uxth	r2, r2
 800d318:	801a      	strh	r2, [r3, #0]
 800d31a:	4b27      	ldr	r3, [pc, #156]	; (800d3b8 <Cursor_4+0x1f8>)
 800d31c:	4a2c      	ldr	r2, [pc, #176]	; (800d3d0 <Cursor_4+0x210>)
 800d31e:	601a      	str	r2, [r3, #0]
 800d320:	4b28      	ldr	r3, [pc, #160]	; (800d3c4 <Cursor_4+0x204>)
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b24      	ldr	r3, [pc, #144]	; (800d3b8 <Cursor_4+0x1f8>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	b292      	uxth	r2, r2
 800d32a:	801a      	strh	r2, [r3, #0]
 800d32c:	4b22      	ldr	r3, [pc, #136]	; (800d3b8 <Cursor_4+0x1f8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3302      	adds	r3, #2
 800d332:	4a21      	ldr	r2, [pc, #132]	; (800d3b8 <Cursor_4+0x1f8>)
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	4b23      	ldr	r3, [pc, #140]	; (800d3c4 <Cursor_4+0x204>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	4b1f      	ldr	r3, [pc, #124]	; (800d3b8 <Cursor_4+0x1f8>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	b292      	uxth	r2, r2
 800d340:	801a      	strh	r2, [r3, #0]
 800d342:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <Cursor_4+0x1f8>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3302      	adds	r3, #2
 800d348:	4a1b      	ldr	r2, [pc, #108]	; (800d3b8 <Cursor_4+0x1f8>)
 800d34a:	6013      	str	r3, [r2, #0]
 800d34c:	4b1d      	ldr	r3, [pc, #116]	; (800d3c4 <Cursor_4+0x204>)
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	4b19      	ldr	r3, [pc, #100]	; (800d3b8 <Cursor_4+0x1f8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	b292      	uxth	r2, r2
 800d356:	801a      	strh	r2, [r3, #0]
 800d358:	4b16      	ldr	r3, [pc, #88]	; (800d3b4 <Cursor_4+0x1f4>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	330a      	adds	r3, #10
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	4413      	add	r3, r2
 800d364:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d368:	461a      	mov	r2, r3
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <Cursor_4+0x200>)
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	4b14      	ldr	r3, [pc, #80]	; (800d3c0 <Cursor_4+0x200>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d12e      	bne.n	800d3d8 <Cursor_4+0x218>
 800d37a:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <Cursor_4+0x1f8>)
 800d37c:	4a0f      	ldr	r2, [pc, #60]	; (800d3bc <Cursor_4+0x1fc>)
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	4b0d      	ldr	r3, [pc, #52]	; (800d3b8 <Cursor_4+0x1f8>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d388:	4a12      	ldr	r2, [pc, #72]	; (800d3d4 <Cursor_4+0x214>)
 800d38a:	6013      	str	r3, [r2, #0]
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <Cursor_4+0x1f8>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3308      	adds	r3, #8
 800d392:	4a09      	ldr	r2, [pc, #36]	; (800d3b8 <Cursor_4+0x1f8>)
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	4b0b      	ldr	r3, [pc, #44]	; (800d3c4 <Cursor_4+0x204>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <Cursor_4+0x1f8>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	b292      	uxth	r2, r2
 800d3a0:	801a      	strh	r2, [r3, #0]
 800d3a2:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <Cursor_4+0x1f8>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <Cursor_4+0x214>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d86a      	bhi.n	800d484 <Cursor_4+0x2c4>
 800d3ae:	e7ed      	b.n	800d38c <Cursor_4+0x1cc>
 800d3b0:	bf00      	nop
 800d3b2:	e012      	b.n	800d3da <Cursor_4+0x21a>
 800d3b4:	20000a40 	.word	0x20000a40
 800d3b8:	20000bec 	.word	0x20000bec
 800d3bc:	20000be0 	.word	0x20000be0
 800d3c0:	20000a3c 	.word	0x20000a3c
 800d3c4:	20000be8 	.word	0x20000be8
 800d3c8:	20000a38 	.word	0x20000a38
 800d3cc:	20000bf8 	.word	0x20000bf8
 800d3d0:	20000a50 	.word	0x20000a50
 800d3d4:	20000c00 	.word	0x20000c00
 800d3d8:	bf00      	nop
 800d3da:	4b34      	ldr	r3, [pc, #208]	; (800d4ac <Cursor_4+0x2ec>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	4a32      	ldr	r2, [pc, #200]	; (800d4ac <Cursor_4+0x2ec>)
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	4b31      	ldr	r3, [pc, #196]	; (800d4ac <Cursor_4+0x2ec>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	4b31      	ldr	r3, [pc, #196]	; (800d4b0 <Cursor_4+0x2f0>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d128      	bne.n	800d442 <Cursor_4+0x282>
 800d3f0:	4b30      	ldr	r3, [pc, #192]	; (800d4b4 <Cursor_4+0x2f4>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	4b30      	ldr	r3, [pc, #192]	; (800d4b8 <Cursor_4+0x2f8>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	b292      	uxth	r2, r2
 800d3fa:	801a      	strh	r2, [r3, #0]
 800d3fc:	4b2e      	ldr	r3, [pc, #184]	; (800d4b8 <Cursor_4+0x2f8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3302      	adds	r3, #2
 800d402:	4a2d      	ldr	r2, [pc, #180]	; (800d4b8 <Cursor_4+0x2f8>)
 800d404:	6013      	str	r3, [r2, #0]
 800d406:	4b2b      	ldr	r3, [pc, #172]	; (800d4b4 <Cursor_4+0x2f4>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	4b2b      	ldr	r3, [pc, #172]	; (800d4b8 <Cursor_4+0x2f8>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	b292      	uxth	r2, r2
 800d410:	801a      	strh	r2, [r3, #0]
 800d412:	4b29      	ldr	r3, [pc, #164]	; (800d4b8 <Cursor_4+0x2f8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d41a:	4a27      	ldr	r2, [pc, #156]	; (800d4b8 <Cursor_4+0x2f8>)
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	4b25      	ldr	r3, [pc, #148]	; (800d4b4 <Cursor_4+0x2f4>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4b25      	ldr	r3, [pc, #148]	; (800d4b8 <Cursor_4+0x2f8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	b292      	uxth	r2, r2
 800d428:	801a      	strh	r2, [r3, #0]
 800d42a:	4b23      	ldr	r3, [pc, #140]	; (800d4b8 <Cursor_4+0x2f8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3302      	adds	r3, #2
 800d430:	4a21      	ldr	r2, [pc, #132]	; (800d4b8 <Cursor_4+0x2f8>)
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	4b1f      	ldr	r3, [pc, #124]	; (800d4b4 <Cursor_4+0x2f4>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	4b1f      	ldr	r3, [pc, #124]	; (800d4b8 <Cursor_4+0x2f8>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	b292      	uxth	r2, r2
 800d43e:	801a      	strh	r2, [r3, #0]
 800d440:	e023      	b.n	800d48a <Cursor_4+0x2ca>
 800d442:	bf00      	nop
 800d444:	4b19      	ldr	r3, [pc, #100]	; (800d4ac <Cursor_4+0x2ec>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3301      	adds	r3, #1
 800d44a:	4a18      	ldr	r2, [pc, #96]	; (800d4ac <Cursor_4+0x2ec>)
 800d44c:	6013      	str	r3, [r2, #0]
 800d44e:	4b17      	ldr	r3, [pc, #92]	; (800d4ac <Cursor_4+0x2ec>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b17      	ldr	r3, [pc, #92]	; (800d4b0 <Cursor_4+0x2f0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	429a      	cmp	r2, r3
 800d458:	d116      	bne.n	800d488 <Cursor_4+0x2c8>
 800d45a:	4b16      	ldr	r3, [pc, #88]	; (800d4b4 <Cursor_4+0x2f4>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b16      	ldr	r3, [pc, #88]	; (800d4b8 <Cursor_4+0x2f8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	b292      	uxth	r2, r2
 800d464:	801a      	strh	r2, [r3, #0]
 800d466:	4b14      	ldr	r3, [pc, #80]	; (800d4b8 <Cursor_4+0x2f8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d46e:	4a12      	ldr	r2, [pc, #72]	; (800d4b8 <Cursor_4+0x2f8>)
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	4b10      	ldr	r3, [pc, #64]	; (800d4b4 <Cursor_4+0x2f4>)
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	4b10      	ldr	r3, [pc, #64]	; (800d4b8 <Cursor_4+0x2f8>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	b292      	uxth	r2, r2
 800d47c:	801a      	strh	r2, [r3, #0]
 800d47e:	e004      	b.n	800d48a <Cursor_4+0x2ca>
 800d480:	bf00      	nop
 800d482:	e002      	b.n	800d48a <Cursor_4+0x2ca>
 800d484:	bf00      	nop
 800d486:	e000      	b.n	800d48a <Cursor_4+0x2ca>
 800d488:	bf00      	nop
 800d48a:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <Cursor_4+0x2fc>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	4a0a      	ldr	r2, [pc, #40]	; (800d4bc <Cursor_4+0x2fc>)
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	4b09      	ldr	r3, [pc, #36]	; (800d4bc <Cursor_4+0x2fc>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b0a      	cmp	r3, #10
 800d49a:	d000      	beq.n	800d49e <Cursor_4+0x2de>
 800d49c:	e697      	b.n	800d1ce <Cursor_4+0xe>
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	20000a38 	.word	0x20000a38
 800d4b0:	20000bf8 	.word	0x20000bf8
 800d4b4:	20000be8 	.word	0x20000be8
 800d4b8:	20000bec 	.word	0x20000bec
 800d4bc:	20000a40 	.word	0x20000a40

0800d4c0 <Send_LCD>:
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	4a12      	ldr	r2, [pc, #72]	; (800d514 <Send_LCD+0x54>)
 800d4ca:	4b13      	ldr	r3, [pc, #76]	; (800d518 <Send_LCD+0x58>)
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <Send_LCD+0x5c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	b21b      	sxth	r3, r3
 800d4d4:	2113      	movs	r1, #19
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f004 fec4 	bl	8012264 <LCD_Set_Posi>
 800d4dc:	4b10      	ldr	r3, [pc, #64]	; (800d520 <Send_LCD+0x60>)
 800d4de:	22cb      	movs	r2, #203	; 0xcb
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	; (800d518 <Send_LCD+0x58>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f004 ff09 	bl	8012300 <LCD_Set_Pixel>
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <Send_LCD+0x58>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3302      	adds	r3, #2
 800d4f4:	4a08      	ldr	r2, [pc, #32]	; (800d518 <Send_LCD+0x58>)
 800d4f6:	6013      	str	r3, [r2, #0]
 800d4f8:	4b09      	ldr	r3, [pc, #36]	; (800d520 <Send_LCD+0x60>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	4a08      	ldr	r2, [pc, #32]	; (800d520 <Send_LCD+0x60>)
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4b07      	ldr	r3, [pc, #28]	; (800d520 <Send_LCD+0x60>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d000      	beq.n	800d50c <Send_LCD+0x4c>
 800d50a:	e7ea      	b.n	800d4e2 <Send_LCD+0x22>
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20000be0 	.word	0x20000be0
 800d518:	20000a3c 	.word	0x20000a3c
 800d51c:	20000bf8 	.word	0x20000bf8
 800d520:	20000bec 	.word	0x20000bec

0800d524 <Draw_Pop>:
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	4b85      	ldr	r3, [pc, #532]	; (800d744 <Draw_Pop+0x220>)
 800d52e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3348      	adds	r3, #72	; 0x48
 800d538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d53c:	461a      	mov	r2, r3
 800d53e:	4b82      	ldr	r3, [pc, #520]	; (800d748 <Draw_Pop+0x224>)
 800d540:	601a      	str	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	334a      	adds	r3, #74	; 0x4a
 800d546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d54a:	461a      	mov	r2, r3
 800d54c:	4b7f      	ldr	r3, [pc, #508]	; (800d74c <Draw_Pop+0x228>)
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	4b7f      	ldr	r3, [pc, #508]	; (800d750 <Draw_Pop+0x22c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a7f      	ldr	r2, [pc, #508]	; (800d754 <Draw_Pop+0x230>)
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	4b7f      	ldr	r3, [pc, #508]	; (800d758 <Draw_Pop+0x234>)
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	4b7d      	ldr	r3, [pc, #500]	; (800d754 <Draw_Pop+0x230>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d10d      	bne.n	800d580 <Draw_Pop+0x5c>
 800d564:	4b78      	ldr	r3, [pc, #480]	; (800d748 <Draw_Pop+0x224>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3306      	adds	r3, #6
 800d56a:	4a77      	ldr	r2, [pc, #476]	; (800d748 <Draw_Pop+0x224>)
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	4b77      	ldr	r3, [pc, #476]	; (800d74c <Draw_Pop+0x228>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	3b0c      	subs	r3, #12
 800d574:	4a75      	ldr	r2, [pc, #468]	; (800d74c <Draw_Pop+0x228>)
 800d576:	6013      	str	r3, [r2, #0]
 800d578:	4b72      	ldr	r3, [pc, #456]	; (800d744 <Draw_Pop+0x220>)
 800d57a:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	4b73      	ldr	r3, [pc, #460]	; (800d750 <Draw_Pop+0x22c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	4a73      	ldr	r2, [pc, #460]	; (800d754 <Draw_Pop+0x230>)
 800d588:	6013      	str	r3, [r2, #0]
 800d58a:	4b73      	ldr	r3, [pc, #460]	; (800d758 <Draw_Pop+0x234>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4b71      	ldr	r3, [pc, #452]	; (800d754 <Draw_Pop+0x230>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	429a      	cmp	r2, r3
 800d594:	d10d      	bne.n	800d5b2 <Draw_Pop+0x8e>
 800d596:	4b6c      	ldr	r3, [pc, #432]	; (800d748 <Draw_Pop+0x224>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4a6a      	ldr	r2, [pc, #424]	; (800d748 <Draw_Pop+0x224>)
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	4b6a      	ldr	r3, [pc, #424]	; (800d74c <Draw_Pop+0x228>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3b08      	subs	r3, #8
 800d5a6:	4a69      	ldr	r2, [pc, #420]	; (800d74c <Draw_Pop+0x228>)
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	4b66      	ldr	r3, [pc, #408]	; (800d744 <Draw_Pop+0x220>)
 800d5ac:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	4b67      	ldr	r3, [pc, #412]	; (800d750 <Draw_Pop+0x22c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3302      	adds	r3, #2
 800d5b8:	4a66      	ldr	r2, [pc, #408]	; (800d754 <Draw_Pop+0x230>)
 800d5ba:	6013      	str	r3, [r2, #0]
 800d5bc:	4b66      	ldr	r3, [pc, #408]	; (800d758 <Draw_Pop+0x234>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	4b64      	ldr	r3, [pc, #400]	; (800d754 <Draw_Pop+0x230>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d10d      	bne.n	800d5e4 <Draw_Pop+0xc0>
 800d5c8:	4b5f      	ldr	r3, [pc, #380]	; (800d748 <Draw_Pop+0x224>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3302      	adds	r3, #2
 800d5ce:	4a5e      	ldr	r2, [pc, #376]	; (800d748 <Draw_Pop+0x224>)
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	4b5e      	ldr	r3, [pc, #376]	; (800d74c <Draw_Pop+0x228>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3b04      	subs	r3, #4
 800d5d8:	4a5c      	ldr	r2, [pc, #368]	; (800d74c <Draw_Pop+0x228>)
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	4b59      	ldr	r3, [pc, #356]	; (800d744 <Draw_Pop+0x220>)
 800d5de:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	4b5d      	ldr	r3, [pc, #372]	; (800d75c <Draw_Pop+0x238>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3b03      	subs	r3, #3
 800d5ea:	4a5a      	ldr	r2, [pc, #360]	; (800d754 <Draw_Pop+0x230>)
 800d5ec:	6013      	str	r3, [r2, #0]
 800d5ee:	4b5a      	ldr	r3, [pc, #360]	; (800d758 <Draw_Pop+0x234>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	4b58      	ldr	r3, [pc, #352]	; (800d754 <Draw_Pop+0x230>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d10d      	bne.n	800d616 <Draw_Pop+0xf2>
 800d5fa:	4b53      	ldr	r3, [pc, #332]	; (800d748 <Draw_Pop+0x224>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3302      	adds	r3, #2
 800d600:	4a51      	ldr	r2, [pc, #324]	; (800d748 <Draw_Pop+0x224>)
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	4b51      	ldr	r3, [pc, #324]	; (800d74c <Draw_Pop+0x228>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3b04      	subs	r3, #4
 800d60a:	4a50      	ldr	r2, [pc, #320]	; (800d74c <Draw_Pop+0x228>)
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	4b4d      	ldr	r3, [pc, #308]	; (800d744 <Draw_Pop+0x220>)
 800d610:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	4b51      	ldr	r3, [pc, #324]	; (800d75c <Draw_Pop+0x238>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3b02      	subs	r3, #2
 800d61c:	4a4d      	ldr	r2, [pc, #308]	; (800d754 <Draw_Pop+0x230>)
 800d61e:	6013      	str	r3, [r2, #0]
 800d620:	4b4d      	ldr	r3, [pc, #308]	; (800d758 <Draw_Pop+0x234>)
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	4b4b      	ldr	r3, [pc, #300]	; (800d754 <Draw_Pop+0x230>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d10d      	bne.n	800d648 <Draw_Pop+0x124>
 800d62c:	4b46      	ldr	r3, [pc, #280]	; (800d748 <Draw_Pop+0x224>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3304      	adds	r3, #4
 800d632:	4a45      	ldr	r2, [pc, #276]	; (800d748 <Draw_Pop+0x224>)
 800d634:	6013      	str	r3, [r2, #0]
 800d636:	4b45      	ldr	r3, [pc, #276]	; (800d74c <Draw_Pop+0x228>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3b08      	subs	r3, #8
 800d63c:	4a43      	ldr	r2, [pc, #268]	; (800d74c <Draw_Pop+0x228>)
 800d63e:	6013      	str	r3, [r2, #0]
 800d640:	4b40      	ldr	r3, [pc, #256]	; (800d744 <Draw_Pop+0x220>)
 800d642:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	4b44      	ldr	r3, [pc, #272]	; (800d75c <Draw_Pop+0x238>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	4a41      	ldr	r2, [pc, #260]	; (800d754 <Draw_Pop+0x230>)
 800d650:	6013      	str	r3, [r2, #0]
 800d652:	4b41      	ldr	r3, [pc, #260]	; (800d758 <Draw_Pop+0x234>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b3f      	ldr	r3, [pc, #252]	; (800d754 <Draw_Pop+0x230>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d10d      	bne.n	800d67a <Draw_Pop+0x156>
 800d65e:	4b3a      	ldr	r3, [pc, #232]	; (800d748 <Draw_Pop+0x224>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3306      	adds	r3, #6
 800d664:	4a38      	ldr	r2, [pc, #224]	; (800d748 <Draw_Pop+0x224>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	4b38      	ldr	r3, [pc, #224]	; (800d74c <Draw_Pop+0x228>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3b0c      	subs	r3, #12
 800d66e:	4a37      	ldr	r2, [pc, #220]	; (800d74c <Draw_Pop+0x228>)
 800d670:	6013      	str	r3, [r2, #0]
 800d672:	4b34      	ldr	r3, [pc, #208]	; (800d744 <Draw_Pop+0x220>)
 800d674:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	4b33      	ldr	r3, [pc, #204]	; (800d748 <Draw_Pop+0x224>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	085b      	lsrs	r3, r3, #1
 800d680:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	4a36      	ldr	r2, [pc, #216]	; (800d760 <Draw_Pop+0x23c>)
 800d688:	4413      	add	r3, r2
 800d68a:	4a36      	ldr	r2, [pc, #216]	; (800d764 <Draw_Pop+0x240>)
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	334e      	adds	r3, #78	; 0x4e
 800d692:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d696:	461a      	mov	r2, r3
 800d698:	4b33      	ldr	r3, [pc, #204]	; (800d768 <Draw_Pop+0x244>)
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	3350      	adds	r3, #80	; 0x50
 800d6a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b31      	ldr	r3, [pc, #196]	; (800d76c <Draw_Pop+0x248>)
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	4b31      	ldr	r3, [pc, #196]	; (800d770 <Draw_Pop+0x24c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b28      	ldr	r3, [pc, #160]	; (800d754 <Draw_Pop+0x230>)
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	4b2e      	ldr	r3, [pc, #184]	; (800d770 <Draw_Pop+0x24c>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3302      	adds	r3, #2
 800d6bc:	4a2c      	ldr	r2, [pc, #176]	; (800d770 <Draw_Pop+0x24c>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	4b29      	ldr	r3, [pc, #164]	; (800d768 <Draw_Pop+0x244>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d100      	bne.n	800d6ca <Draw_Pop+0x1a6>
 800d6c8:	e054      	b.n	800d774 <Draw_Pop+0x250>
 800d6ca:	bf00      	nop
 800d6cc:	4b21      	ldr	r3, [pc, #132]	; (800d754 <Draw_Pop+0x230>)
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	4b1c      	ldr	r3, [pc, #112]	; (800d744 <Draw_Pop+0x220>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d006      	beq.n	800d6e8 <Draw_Pop+0x1c4>
 800d6da:	4b22      	ldr	r3, [pc, #136]	; (800d764 <Draw_Pop+0x240>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	4b22      	ldr	r3, [pc, #136]	; (800d76c <Draw_Pop+0x248>)
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	e005      	b.n	800d6f4 <Draw_Pop+0x1d0>
 800d6e8:	4b1e      	ldr	r3, [pc, #120]	; (800d764 <Draw_Pop+0x240>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4b1d      	ldr	r3, [pc, #116]	; (800d768 <Draw_Pop+0x244>)
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	4b1b      	ldr	r3, [pc, #108]	; (800d764 <Draw_Pop+0x240>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	4a1a      	ldr	r2, [pc, #104]	; (800d764 <Draw_Pop+0x240>)
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	4b13      	ldr	r3, [pc, #76]	; (800d74c <Draw_Pop+0x228>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3b02      	subs	r3, #2
 800d704:	4a11      	ldr	r2, [pc, #68]	; (800d74c <Draw_Pop+0x228>)
 800d706:	6013      	str	r3, [r2, #0]
 800d708:	4b10      	ldr	r3, [pc, #64]	; (800d74c <Draw_Pop+0x228>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d066      	beq.n	800d7de <Draw_Pop+0x2ba>
 800d710:	4b0c      	ldr	r3, [pc, #48]	; (800d744 <Draw_Pop+0x220>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	da0f      	bge.n	800d738 <Draw_Pop+0x214>
 800d718:	4b15      	ldr	r3, [pc, #84]	; (800d770 <Draw_Pop+0x24c>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	4b0c      	ldr	r3, [pc, #48]	; (800d754 <Draw_Pop+0x230>)
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	4b12      	ldr	r3, [pc, #72]	; (800d770 <Draw_Pop+0x24c>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3302      	adds	r3, #2
 800d72a:	4a11      	ldr	r2, [pc, #68]	; (800d770 <Draw_Pop+0x24c>)
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <Draw_Pop+0x220>)
 800d730:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	e7c9      	b.n	800d6cc <Draw_Pop+0x1a8>
 800d738:	4b02      	ldr	r3, [pc, #8]	; (800d744 <Draw_Pop+0x220>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4a01      	ldr	r2, [pc, #4]	; (800d744 <Draw_Pop+0x220>)
 800d740:	6013      	str	r3, [r2, #0]
 800d742:	e7c3      	b.n	800d6cc <Draw_Pop+0x1a8>
 800d744:	20000c00 	.word	0x20000c00
 800d748:	20000a3c 	.word	0x20000a3c
 800d74c:	20000be8 	.word	0x20000be8
 800d750:	20000be4 	.word	0x20000be4
 800d754:	20000a40 	.word	0x20000a40
 800d758:	20000bf8 	.word	0x20000bf8
 800d75c:	20000bf4 	.word	0x20000bf4
 800d760:	20000a48 	.word	0x20000a48
 800d764:	20000bec 	.word	0x20000bec
 800d768:	20000a38 	.word	0x20000a38
 800d76c:	20000bfc 	.word	0x20000bfc
 800d770:	20000c04 	.word	0x20000c04
 800d774:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <Draw_Pop+0x2cc>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	4b1e      	ldr	r3, [pc, #120]	; (800d7f4 <Draw_Pop+0x2d0>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4013      	ands	r3, r2
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d005      	beq.n	800d78e <Draw_Pop+0x26a>
 800d782:	4b1d      	ldr	r3, [pc, #116]	; (800d7f8 <Draw_Pop+0x2d4>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	461a      	mov	r2, r3
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <Draw_Pop+0x2d8>)
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	4b1a      	ldr	r3, [pc, #104]	; (800d7f8 <Draw_Pop+0x2d4>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	4a18      	ldr	r2, [pc, #96]	; (800d7f8 <Draw_Pop+0x2d4>)
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	4b19      	ldr	r3, [pc, #100]	; (800d800 <Draw_Pop+0x2dc>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3b02      	subs	r3, #2
 800d79e:	4a18      	ldr	r2, [pc, #96]	; (800d800 <Draw_Pop+0x2dc>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4b17      	ldr	r3, [pc, #92]	; (800d800 <Draw_Pop+0x2dc>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d01b      	beq.n	800d7e2 <Draw_Pop+0x2be>
 800d7aa:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <Draw_Pop+0x2d0>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	da0f      	bge.n	800d7d2 <Draw_Pop+0x2ae>
 800d7b2:	4b14      	ldr	r3, [pc, #80]	; (800d804 <Draw_Pop+0x2e0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4b13      	ldr	r3, [pc, #76]	; (800d808 <Draw_Pop+0x2e4>)
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	4b11      	ldr	r3, [pc, #68]	; (800d804 <Draw_Pop+0x2e0>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3302      	adds	r3, #2
 800d7c4:	4a0f      	ldr	r2, [pc, #60]	; (800d804 <Draw_Pop+0x2e0>)
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <Draw_Pop+0x2d0>)
 800d7ca:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d7ce:	601a      	str	r2, [r3, #0]
 800d7d0:	e7d0      	b.n	800d774 <Draw_Pop+0x250>
 800d7d2:	4b08      	ldr	r3, [pc, #32]	; (800d7f4 <Draw_Pop+0x2d0>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	005b      	lsls	r3, r3, #1
 800d7d8:	4a06      	ldr	r2, [pc, #24]	; (800d7f4 <Draw_Pop+0x2d0>)
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	e7ca      	b.n	800d774 <Draw_Pop+0x250>
 800d7de:	bf00      	nop
 800d7e0:	e000      	b.n	800d7e4 <Draw_Pop+0x2c0>
 800d7e2:	bf00      	nop
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20000bf8 	.word	0x20000bf8
 800d7f4:	20000c00 	.word	0x20000c00
 800d7f8:	20000bec 	.word	0x20000bec
 800d7fc:	20000bfc 	.word	0x20000bfc
 800d800:	20000be8 	.word	0x20000be8
 800d804:	20000c04 	.word	0x20000c04
 800d808:	20000a40 	.word	0x20000a40

0800d80c <DrawWindow>:
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a9b      	ldr	r2, [pc, #620]	; (800da88 <DrawWindow+0x27c>)
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	4b9b      	ldr	r3, [pc, #620]	; (800da8c <DrawWindow+0x280>)
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d828:	4a99      	ldr	r2, [pc, #612]	; (800da90 <DrawWindow+0x284>)
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	3344      	adds	r3, #68	; 0x44
 800d830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d834:	461a      	mov	r2, r3
 800d836:	4b97      	ldr	r3, [pc, #604]	; (800da94 <DrawWindow+0x288>)
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	3346      	adds	r3, #70	; 0x46
 800d83e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d842:	461a      	mov	r2, r3
 800d844:	4b94      	ldr	r3, [pc, #592]	; (800da98 <DrawWindow+0x28c>)
 800d846:	601a      	str	r2, [r3, #0]
 800d848:	4b92      	ldr	r3, [pc, #584]	; (800da94 <DrawWindow+0x288>)
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	4b92      	ldr	r3, [pc, #584]	; (800da98 <DrawWindow+0x28c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4413      	add	r3, r2
 800d852:	4a91      	ldr	r2, [pc, #580]	; (800da98 <DrawWindow+0x28c>)
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	4b8d      	ldr	r3, [pc, #564]	; (800da8c <DrawWindow+0x280>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d102      	bne.n	800d864 <DrawWindow+0x58>
 800d85e:	f7ff f93b 	bl	800cad8 <Buld_0>
 800d862:	e064      	b.n	800d92e <DrawWindow+0x122>
 800d864:	4b89      	ldr	r3, [pc, #548]	; (800da8c <DrawWindow+0x280>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d86c:	d102      	bne.n	800d874 <DrawWindow+0x68>
 800d86e:	f7ff f933 	bl	800cad8 <Buld_0>
 800d872:	e05c      	b.n	800d92e <DrawWindow+0x122>
 800d874:	4b85      	ldr	r3, [pc, #532]	; (800da8c <DrawWindow+0x280>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d102      	bne.n	800d882 <DrawWindow+0x76>
 800d87c:	f7ff f938 	bl	800caf0 <Buld_1>
 800d880:	e055      	b.n	800d92e <DrawWindow+0x122>
 800d882:	4b86      	ldr	r3, [pc, #536]	; (800da9c <DrawWindow+0x290>)
 800d884:	f240 122d 	movw	r2, #301	; 0x12d
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	4b80      	ldr	r3, [pc, #512]	; (800da8c <DrawWindow+0x280>)
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	4b83      	ldr	r3, [pc, #524]	; (800da9c <DrawWindow+0x290>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	429a      	cmp	r2, r3
 800d894:	d102      	bne.n	800d89c <DrawWindow+0x90>
 800d896:	f7ff f92b 	bl	800caf0 <Buld_1>
 800d89a:	e048      	b.n	800d92e <DrawWindow+0x122>
 800d89c:	4b7b      	ldr	r3, [pc, #492]	; (800da8c <DrawWindow+0x280>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	4a7e      	ldr	r2, [pc, #504]	; (800da9c <DrawWindow+0x290>)
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	4b7e      	ldr	r3, [pc, #504]	; (800daa0 <DrawWindow+0x294>)
 800d8a8:	2219      	movs	r2, #25
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	4b7b      	ldr	r3, [pc, #492]	; (800da9c <DrawWindow+0x290>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b7b      	ldr	r3, [pc, #492]	; (800daa0 <DrawWindow+0x294>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b8:	4a7a      	ldr	r2, [pc, #488]	; (800daa4 <DrawWindow+0x298>)
 800d8ba:	6013      	str	r3, [r2, #0]
 800d8bc:	4b79      	ldr	r3, [pc, #484]	; (800daa4 <DrawWindow+0x298>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a77      	ldr	r2, [pc, #476]	; (800daa0 <DrawWindow+0x294>)
 800d8c2:	6812      	ldr	r2, [r2, #0]
 800d8c4:	fb02 f303 	mul.w	r3, r2, r3
 800d8c8:	4a76      	ldr	r2, [pc, #472]	; (800daa4 <DrawWindow+0x298>)
 800d8ca:	6013      	str	r3, [r2, #0]
 800d8cc:	4b73      	ldr	r3, [pc, #460]	; (800da9c <DrawWindow+0x290>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	4b74      	ldr	r3, [pc, #464]	; (800daa4 <DrawWindow+0x298>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	4a73      	ldr	r2, [pc, #460]	; (800daa4 <DrawWindow+0x298>)
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	4b72      	ldr	r3, [pc, #456]	; (800daa4 <DrawWindow+0x298>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <DrawWindow+0xdc>
 800d8e2:	f7ff f975 	bl	800cbd0 <Buld_4>
 800d8e6:	e022      	b.n	800d92e <DrawWindow+0x122>
 800d8e8:	4b6d      	ldr	r3, [pc, #436]	; (800daa0 <DrawWindow+0x294>)
 800d8ea:	2205      	movs	r2, #5
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	4b6b      	ldr	r3, [pc, #428]	; (800da9c <DrawWindow+0x290>)
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	4b6b      	ldr	r3, [pc, #428]	; (800daa0 <DrawWindow+0x294>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8fa:	4a6a      	ldr	r2, [pc, #424]	; (800daa4 <DrawWindow+0x298>)
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	4b69      	ldr	r3, [pc, #420]	; (800daa4 <DrawWindow+0x298>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	4a67      	ldr	r2, [pc, #412]	; (800daa0 <DrawWindow+0x294>)
 800d904:	6812      	ldr	r2, [r2, #0]
 800d906:	fb02 f303 	mul.w	r3, r2, r3
 800d90a:	4a66      	ldr	r2, [pc, #408]	; (800daa4 <DrawWindow+0x298>)
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	4b63      	ldr	r3, [pc, #396]	; (800da9c <DrawWindow+0x290>)
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b64      	ldr	r3, [pc, #400]	; (800daa4 <DrawWindow+0x298>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	1ad3      	subs	r3, r2, r3
 800d918:	4a62      	ldr	r2, [pc, #392]	; (800daa4 <DrawWindow+0x298>)
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	4b61      	ldr	r3, [pc, #388]	; (800daa4 <DrawWindow+0x298>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d102      	bne.n	800d92a <DrawWindow+0x11e>
 800d924:	f7ff f92e 	bl	800cb84 <Buld_3>
 800d928:	e001      	b.n	800d92e <DrawWindow+0x122>
 800d92a:	f7ff f909 	bl	800cb40 <Buld_2>
 800d92e:	4b57      	ldr	r3, [pc, #348]	; (800da8c <DrawWindow+0x280>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d96c      	bls.n	800da10 <DrawWindow+0x204>
 800d936:	4b55      	ldr	r3, [pc, #340]	; (800da8c <DrawWindow+0x280>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d93e:	d267      	bcs.n	800da10 <DrawWindow+0x204>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	3306      	adds	r3, #6
 800d944:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d948:	461a      	mov	r2, r3
 800d94a:	4b54      	ldr	r3, [pc, #336]	; (800da9c <DrawWindow+0x290>)
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	4b53      	ldr	r3, [pc, #332]	; (800da9c <DrawWindow+0x290>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0304 	and.w	r3, r3, #4
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10f      	bne.n	800d97a <DrawWindow+0x16e>
 800d95a:	4b50      	ldr	r3, [pc, #320]	; (800da9c <DrawWindow+0x290>)
 800d95c:	222e      	movs	r2, #46	; 0x2e
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	331a      	adds	r3, #26
 800d964:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d968:	461a      	mov	r2, r3
 800d96a:	4b4f      	ldr	r3, [pc, #316]	; (800daa8 <DrawWindow+0x29c>)
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	4b4f      	ldr	r3, [pc, #316]	; (800daac <DrawWindow+0x2a0>)
 800d970:	2208      	movs	r2, #8
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	2001      	movs	r0, #1
 800d976:	f7ff f951 	bl	800cc1c <Draw_Digit_Analog>
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d982:	461a      	mov	r2, r3
 800d984:	4b45      	ldr	r3, [pc, #276]	; (800da9c <DrawWindow+0x290>)
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	4b44      	ldr	r3, [pc, #272]	; (800da9c <DrawWindow+0x290>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10f      	bne.n	800d9b4 <DrawWindow+0x1a8>
 800d994:	4b41      	ldr	r3, [pc, #260]	; (800da9c <DrawWindow+0x290>)
 800d996:	222c      	movs	r2, #44	; 0x2c
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	3318      	adds	r3, #24
 800d99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	4b40      	ldr	r3, [pc, #256]	; (800daa8 <DrawWindow+0x29c>)
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	4b40      	ldr	r3, [pc, #256]	; (800daac <DrawWindow+0x2a0>)
 800d9aa:	2204      	movs	r2, #4
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	f7ff f934 	bl	800cc1c <Draw_Digit_Analog>
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	3302      	adds	r3, #2
 800d9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	4b37      	ldr	r3, [pc, #220]	; (800da9c <DrawWindow+0x290>)
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	4b36      	ldr	r3, [pc, #216]	; (800da9c <DrawWindow+0x290>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f003 0304 	and.w	r3, r3, #4
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <DrawWindow+0x1d8>
 800d9ce:	4b33      	ldr	r3, [pc, #204]	; (800da9c <DrawWindow+0x290>)
 800d9d0:	222a      	movs	r2, #42	; 0x2a
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d9da:	4a33      	ldr	r2, [pc, #204]	; (800daa8 <DrawWindow+0x29c>)
 800d9dc:	6013      	str	r3, [r2, #0]
 800d9de:	2000      	movs	r0, #0
 800d9e0:	f7ff f91c 	bl	800cc1c <Draw_Digit_Analog>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	4b2b      	ldr	r3, [pc, #172]	; (800da9c <DrawWindow+0x290>)
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	4b2a      	ldr	r3, [pc, #168]	; (800da9c <DrawWindow+0x290>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f003 0304 	and.w	r3, r3, #4
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10b      	bne.n	800da14 <DrawWindow+0x208>
 800d9fc:	4b27      	ldr	r3, [pc, #156]	; (800da9c <DrawWindow+0x290>)
 800d9fe:	2228      	movs	r2, #40	; 0x28
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	4a29      	ldr	r2, [pc, #164]	; (800daa8 <DrawWindow+0x29c>)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	f7ff f907 	bl	800cc1c <Draw_Digit_Analog>
 800da0e:	e002      	b.n	800da16 <DrawWindow+0x20a>
 800da10:	bf00      	nop
 800da12:	e000      	b.n	800da16 <DrawWindow+0x20a>
 800da14:	bf00      	nop
 800da16:	4b1d      	ldr	r3, [pc, #116]	; (800da8c <DrawWindow+0x280>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <DrawWindow+0x21a>
 800da1e:	6838      	ldr	r0, [r7, #0]
 800da20:	f7ff fa14 	bl	800ce4c <Cursor_0>
 800da24:	e047      	b.n	800dab6 <DrawWindow+0x2aa>
 800da26:	4b19      	ldr	r3, [pc, #100]	; (800da8c <DrawWindow+0x280>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800da2e:	d103      	bne.n	800da38 <DrawWindow+0x22c>
 800da30:	6838      	ldr	r0, [r7, #0]
 800da32:	f7ff fa0b 	bl	800ce4c <Cursor_0>
 800da36:	e03e      	b.n	800dab6 <DrawWindow+0x2aa>
 800da38:	4b14      	ldr	r3, [pc, #80]	; (800da8c <DrawWindow+0x280>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d103      	bne.n	800da48 <DrawWindow+0x23c>
 800da40:	6838      	ldr	r0, [r7, #0]
 800da42:	f7ff fa8d 	bl	800cf60 <Cursor_1>
 800da46:	e036      	b.n	800dab6 <DrawWindow+0x2aa>
 800da48:	4b16      	ldr	r3, [pc, #88]	; (800daa4 <DrawWindow+0x298>)
 800da4a:	f240 122d 	movw	r2, #301	; 0x12d
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <DrawWindow+0x280>)
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <DrawWindow+0x298>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d103      	bne.n	800da64 <DrawWindow+0x258>
 800da5c:	6838      	ldr	r0, [r7, #0]
 800da5e:	f7ff fa7f 	bl	800cf60 <Cursor_1>
 800da62:	e028      	b.n	800dab6 <DrawWindow+0x2aa>
 800da64:	4b09      	ldr	r3, [pc, #36]	; (800da8c <DrawWindow+0x280>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d103      	bne.n	800da74 <DrawWindow+0x268>
 800da6c:	6838      	ldr	r0, [r7, #0]
 800da6e:	f7ff faeb 	bl	800d048 <Cursor_2>
 800da72:	e020      	b.n	800dab6 <DrawWindow+0x2aa>
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <DrawWindow+0x280>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800da7c:	d118      	bne.n	800dab0 <DrawWindow+0x2a4>
 800da7e:	6838      	ldr	r0, [r7, #0]
 800da80:	f7ff fae2 	bl	800d048 <Cursor_2>
 800da84:	e017      	b.n	800dab6 <DrawWindow+0x2aa>
 800da86:	bf00      	nop
 800da88:	20000a44 	.word	0x20000a44
 800da8c:	20000bf8 	.word	0x20000bf8
 800da90:	20000c04 	.word	0x20000c04
 800da94:	20000be4 	.word	0x20000be4
 800da98:	20000bf4 	.word	0x20000bf4
 800da9c:	20000a40 	.word	0x20000a40
 800daa0:	20000be8 	.word	0x20000be8
 800daa4:	20000a3c 	.word	0x20000a3c
 800daa8:	20000bec 	.word	0x20000bec
 800daac:	20000a38 	.word	0x20000a38
 800dab0:	6838      	ldr	r0, [r7, #0]
 800dab2:	f7ff fb1d 	bl	800d0f0 <Cursor_3>
 800dab6:	6838      	ldr	r0, [r7, #0]
 800dab8:	f7ff fb82 	bl	800d1c0 <Cursor_4>
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	334c      	adds	r3, #76	; 0x4c
 800dac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dac4:	461a      	mov	r2, r3
 800dac6:	4b17      	ldr	r3, [pc, #92]	; (800db24 <DrawWindow+0x318>)
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	4b16      	ldr	r3, [pc, #88]	; (800db24 <DrawWindow+0x318>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00f      	beq.n	800daf6 <DrawWindow+0x2ea>
 800dad6:	4b14      	ldr	r3, [pc, #80]	; (800db28 <DrawWindow+0x31c>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	4b14      	ldr	r3, [pc, #80]	; (800db2c <DrawWindow+0x320>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d30b      	bcc.n	800dafa <DrawWindow+0x2ee>
 800dae2:	4b11      	ldr	r3, [pc, #68]	; (800db28 <DrawWindow+0x31c>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	4b12      	ldr	r3, [pc, #72]	; (800db30 <DrawWindow+0x324>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	429a      	cmp	r2, r3
 800daec:	d207      	bcs.n	800dafe <DrawWindow+0x2f2>
 800daee:	6838      	ldr	r0, [r7, #0]
 800daf0:	f7ff fd18 	bl	800d524 <Draw_Pop>
 800daf4:	e004      	b.n	800db00 <DrawWindow+0x2f4>
 800daf6:	bf00      	nop
 800daf8:	e002      	b.n	800db00 <DrawWindow+0x2f4>
 800dafa:	bf00      	nop
 800dafc:	e000      	b.n	800db00 <DrawWindow+0x2f4>
 800dafe:	bf00      	nop
 800db00:	6838      	ldr	r0, [r7, #0]
 800db02:	f7ff fcdd 	bl	800d4c0 <Send_LCD>
 800db06:	4b08      	ldr	r3, [pc, #32]	; (800db28 <DrawWindow+0x31c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db0e:	d005      	beq.n	800db1c <DrawWindow+0x310>
 800db10:	4b05      	ldr	r3, [pc, #20]	; (800db28 <DrawWindow+0x31c>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3301      	adds	r3, #1
 800db16:	4a04      	ldr	r2, [pc, #16]	; (800db28 <DrawWindow+0x31c>)
 800db18:	6013      	str	r3, [r2, #0]
 800db1a:	e69c      	b.n	800d856 <DrawWindow+0x4a>
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	20000a40 	.word	0x20000a40
 800db28:	20000bf8 	.word	0x20000bf8
 800db2c:	20000be4 	.word	0x20000be4
 800db30:	20000bf4 	.word	0x20000bf4

0800db34 <DispChar8x14>:
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	460a      	mov	r2, r1
 800db3e:	71fb      	strb	r3, [r7, #7]
 800db40:	4613      	mov	r3, r2
 800db42:	71bb      	strb	r3, [r7, #6]
 800db44:	2300      	movs	r3, #0
 800db46:	81fb      	strh	r3, [r7, #14]
 800db48:	e06d      	b.n	800dc26 <DispChar8x14+0xf2>
 800db4a:	79fb      	ldrb	r3, [r7, #7]
 800db4c:	f003 0310 	and.w	r3, r3, #16
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00a      	beq.n	800db6a <DispChar8x14+0x36>
 800db54:	79bb      	ldrb	r3, [r7, #6]
 800db56:	3b40      	subs	r3, #64	; 0x40
 800db58:	00da      	lsls	r2, r3, #3
 800db5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db5e:	4413      	add	r3, r2
 800db60:	4a35      	ldr	r2, [pc, #212]	; (800dc38 <DispChar8x14+0x104>)
 800db62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db66:	817b      	strh	r3, [r7, #10]
 800db68:	e005      	b.n	800db76 <DispChar8x14+0x42>
 800db6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800db6e:	4a33      	ldr	r2, [pc, #204]	; (800dc3c <DispChar8x14+0x108>)
 800db70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db74:	817b      	strh	r3, [r7, #10]
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	f003 0320 	and.w	r3, r3, #32
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00c      	beq.n	800db9a <DispChar8x14+0x66>
 800db80:	89fb      	ldrh	r3, [r7, #14]
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	b29b      	uxth	r3, r3
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <DispChar8x14+0x5c>
 800db8c:	4a2c      	ldr	r2, [pc, #176]	; (800dc40 <DispChar8x14+0x10c>)
 800db8e:	e001      	b.n	800db94 <DispChar8x14+0x60>
 800db90:	f245 5255 	movw	r2, #21845	; 0x5555
 800db94:	897b      	ldrh	r3, [r7, #10]
 800db96:	4013      	ands	r3, r2
 800db98:	817b      	strh	r3, [r7, #10]
 800db9a:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <DispChar8x14+0x110>)
 800db9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dba0:	4a29      	ldr	r2, [pc, #164]	; (800dc48 <DispChar8x14+0x114>)
 800dba2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dba6:	4611      	mov	r1, r2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f004 fb5b 	bl	8012264 <LCD_Set_Posi>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	81bb      	strh	r3, [r7, #12]
 800dbb2:	e027      	b.n	800dc04 <DispChar8x14+0xd0>
 800dbb4:	897b      	ldrh	r3, [r7, #10]
 800dbb6:	f003 0304 	and.w	r3, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00d      	beq.n	800dbda <DispChar8x14+0xa6>
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <DispChar8x14+0x9a>
 800dbc8:	4b20      	ldr	r3, [pc, #128]	; (800dc4c <DispChar8x14+0x118>)
 800dbca:	881b      	ldrh	r3, [r3, #0]
 800dbcc:	e001      	b.n	800dbd2 <DispChar8x14+0x9e>
 800dbce:	4b20      	ldr	r3, [pc, #128]	; (800dc50 <DispChar8x14+0x11c>)
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f004 fb94 	bl	8012300 <LCD_Set_Pixel>
 800dbd8:	e00c      	b.n	800dbf4 <DispChar8x14+0xc0>
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <DispChar8x14+0xb6>
 800dbe4:	4b1a      	ldr	r3, [pc, #104]	; (800dc50 <DispChar8x14+0x11c>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	e001      	b.n	800dbee <DispChar8x14+0xba>
 800dbea:	4b18      	ldr	r3, [pc, #96]	; (800dc4c <DispChar8x14+0x118>)
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f004 fb86 	bl	8012300 <LCD_Set_Pixel>
 800dbf4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbf8:	105b      	asrs	r3, r3, #1
 800dbfa:	817b      	strh	r3, [r7, #10]
 800dbfc:	89bb      	ldrh	r3, [r7, #12]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	81bb      	strh	r3, [r7, #12]
 800dc04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dc08:	2b0d      	cmp	r3, #13
 800dc0a:	ddd3      	ble.n	800dbb4 <DispChar8x14+0x80>
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <DispChar8x14+0x110>)
 800dc0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	3301      	adds	r3, #1
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	b21a      	sxth	r2, r3
 800dc1a:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <DispChar8x14+0x110>)
 800dc1c:	801a      	strh	r2, [r3, #0]
 800dc1e:	89fb      	ldrh	r3, [r7, #14]
 800dc20:	3301      	adds	r3, #1
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	81fb      	strh	r3, [r7, #14]
 800dc26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc2a:	2b07      	cmp	r3, #7
 800dc2c:	dd8d      	ble.n	800db4a <DispChar8x14+0x16>
 800dc2e:	bf00      	nop
 800dc30:	bf00      	nop
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	08001290 	.word	0x08001290
 800dc3c:	08000c90 	.word	0x08000c90
 800dc40:	ffffaaaa 	.word	0xffffaaaa
 800dc44:	2000078a 	.word	0x2000078a
 800dc48:	2000078c 	.word	0x2000078c
 800dc4c:	200015ce 	.word	0x200015ce
 800dc50:	200015cc 	.word	0x200015cc

0800dc54 <DispStr8x14>:
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	607b      	str	r3, [r7, #4]
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	81fb      	strh	r3, [r7, #14]
 800dc60:	460b      	mov	r3, r1
 800dc62:	81bb      	strh	r3, [r7, #12]
 800dc64:	4613      	mov	r3, r2
 800dc66:	72fb      	strb	r3, [r7, #11]
 800dc68:	4a22      	ldr	r2, [pc, #136]	; (800dcf4 <DispStr8x14+0xa0>)
 800dc6a:	89fb      	ldrh	r3, [r7, #14]
 800dc6c:	8013      	strh	r3, [r2, #0]
 800dc6e:	4a22      	ldr	r2, [pc, #136]	; (800dcf8 <DispStr8x14+0xa4>)
 800dc70:	89bb      	ldrh	r3, [r7, #12]
 800dc72:	8013      	strh	r3, [r2, #0]
 800dc74:	4b1f      	ldr	r3, [pc, #124]	; (800dcf4 <DispStr8x14+0xa0>)
 800dc76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc7a:	4a1f      	ldr	r2, [pc, #124]	; (800dcf8 <DispStr8x14+0xa4>)
 800dc7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f004 faee 	bl	8012264 <LCD_Set_Posi>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	82fb      	strh	r3, [r7, #22]
 800dc8c:	e012      	b.n	800dcb4 <DispStr8x14+0x60>
 800dc8e:	7afb      	ldrb	r3, [r7, #11]
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <DispStr8x14+0x4a>
 800dc98:	4b18      	ldr	r3, [pc, #96]	; (800dcfc <DispStr8x14+0xa8>)
 800dc9a:	881b      	ldrh	r3, [r3, #0]
 800dc9c:	e001      	b.n	800dca2 <DispStr8x14+0x4e>
 800dc9e:	4b18      	ldr	r3, [pc, #96]	; (800dd00 <DispStr8x14+0xac>)
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f004 fb2c 	bl	8012300 <LCD_Set_Pixel>
 800dca8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3301      	adds	r3, #1
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	82fb      	strh	r3, [r7, #22]
 800dcb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dcb8:	2b0d      	cmp	r3, #13
 800dcba:	dde8      	ble.n	800dc8e <DispStr8x14+0x3a>
 800dcbc:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <DispStr8x14+0xa0>)
 800dcbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	b21a      	sxth	r2, r3
 800dcca:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <DispStr8x14+0xa0>)
 800dccc:	801a      	strh	r2, [r3, #0]
 800dcce:	e008      	b.n	800dce2 <DispStr8x14+0x8e>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	607a      	str	r2, [r7, #4]
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	7afb      	ldrb	r3, [r7, #11]
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff ff29 	bl	800db34 <DispChar8x14>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1f2      	bne.n	800dcd0 <DispStr8x14+0x7c>
 800dcea:	bf00      	nop
 800dcec:	bf00      	nop
 800dcee:	3718      	adds	r7, #24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	2000078a 	.word	0x2000078a
 800dcf8:	2000078c 	.word	0x2000078c
 800dcfc:	200015cc 	.word	0x200015cc
 800dd00:	200015ce 	.word	0x200015ce

0800dd04 <SetColor>:
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	460a      	mov	r2, r1
 800dd0e:	80fb      	strh	r3, [r7, #6]
 800dd10:	4613      	mov	r3, r2
 800dd12:	80bb      	strh	r3, [r7, #4]
 800dd14:	4a05      	ldr	r2, [pc, #20]	; (800dd2c <SetColor+0x28>)
 800dd16:	88fb      	ldrh	r3, [r7, #6]
 800dd18:	8013      	strh	r3, [r2, #0]
 800dd1a:	4a05      	ldr	r2, [pc, #20]	; (800dd30 <SetColor+0x2c>)
 800dd1c:	88bb      	ldrh	r3, [r7, #4]
 800dd1e:	8013      	strh	r3, [r2, #0]
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	200015ce 	.word	0x200015ce
 800dd30:	200015cc 	.word	0x200015cc

0800dd34 <DispStr>:
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	81fb      	strh	r3, [r7, #14]
 800dd40:	460b      	mov	r3, r1
 800dd42:	81bb      	strh	r3, [r7, #12]
 800dd44:	4613      	mov	r3, r2
 800dd46:	72fb      	strb	r3, [r7, #11]
 800dd48:	4a5e      	ldr	r2, [pc, #376]	; (800dec4 <DispStr+0x190>)
 800dd4a:	89fb      	ldrh	r3, [r7, #14]
 800dd4c:	8013      	strh	r3, [r2, #0]
 800dd4e:	4a5e      	ldr	r2, [pc, #376]	; (800dec8 <DispStr+0x194>)
 800dd50:	89bb      	ldrh	r3, [r7, #12]
 800dd52:	8013      	strh	r3, [r2, #0]
 800dd54:	4b5b      	ldr	r3, [pc, #364]	; (800dec4 <DispStr+0x190>)
 800dd56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd5a:	4a5b      	ldr	r2, [pc, #364]	; (800dec8 <DispStr+0x194>)
 800dd5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f004 fa7e 	bl	8012264 <LCD_Set_Posi>
 800dd68:	e0a1      	b.n	800deae <DispStr+0x17a>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	607a      	str	r2, [r7, #4]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	747b      	strb	r3, [r7, #17]
 800dd74:	2300      	movs	r3, #0
 800dd76:	82fb      	strh	r3, [r7, #22]
 800dd78:	e094      	b.n	800dea4 <DispStr+0x170>
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	f003 0310 	and.w	r3, r3, #16
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10e      	bne.n	800dda2 <DispStr+0x6e>
 800dd84:	7c7b      	ldrb	r3, [r7, #17]
 800dd86:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	461a      	mov	r2, r3
 800dd94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dd98:	4413      	add	r3, r2
 800dd9a:	4a4c      	ldr	r2, [pc, #304]	; (800decc <DispStr+0x198>)
 800dd9c:	5cd3      	ldrb	r3, [r2, r3]
 800dd9e:	827b      	strh	r3, [r7, #18]
 800dda0:	e00d      	b.n	800ddbe <DispStr+0x8a>
 800dda2:	7c7b      	ldrb	r3, [r7, #17]
 800dda4:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	005b      	lsls	r3, r3, #1
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	4a45      	ldr	r2, [pc, #276]	; (800ded0 <DispStr+0x19c>)
 800ddba:	5cd3      	ldrb	r3, [r2, r3]
 800ddbc:	827b      	strh	r3, [r7, #18]
 800ddbe:	7afb      	ldrb	r3, [r7, #11]
 800ddc0:	f003 0320 	and.w	r3, r3, #32
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <DispStr+0xae>
 800ddc8:	8afb      	ldrh	r3, [r7, #22]
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <DispStr+0xa4>
 800ddd4:	4a3f      	ldr	r2, [pc, #252]	; (800ded4 <DispStr+0x1a0>)
 800ddd6:	e001      	b.n	800dddc <DispStr+0xa8>
 800ddd8:	f245 5255 	movw	r2, #21845	; 0x5555
 800dddc:	8a7b      	ldrh	r3, [r7, #18]
 800ddde:	4013      	ands	r3, r2
 800dde0:	827b      	strh	r3, [r7, #18]
 800dde2:	4b38      	ldr	r3, [pc, #224]	; (800dec4 <DispStr+0x190>)
 800dde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dde8:	4a37      	ldr	r2, [pc, #220]	; (800dec8 <DispStr+0x194>)
 800ddea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f004 fa37 	bl	8012264 <LCD_Set_Posi>
 800ddf6:	7afb      	ldrb	r3, [r7, #11]
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <DispStr+0xd2>
 800de00:	4b35      	ldr	r3, [pc, #212]	; (800ded8 <DispStr+0x1a4>)
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	e001      	b.n	800de0a <DispStr+0xd6>
 800de06:	4b35      	ldr	r3, [pc, #212]	; (800dedc <DispStr+0x1a8>)
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f004 fa78 	bl	8012300 <LCD_Set_Pixel>
 800de10:	4b2c      	ldr	r3, [pc, #176]	; (800dec4 <DispStr+0x190>)
 800de12:	f9b3 2000 	ldrsh.w	r2, [r3]
 800de16:	4b2c      	ldr	r3, [pc, #176]	; (800dec8 <DispStr+0x194>)
 800de18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	3301      	adds	r3, #1
 800de20:	b29b      	uxth	r3, r3
 800de22:	b21b      	sxth	r3, r3
 800de24:	4619      	mov	r1, r3
 800de26:	4610      	mov	r0, r2
 800de28:	f004 fa1c 	bl	8012264 <LCD_Set_Posi>
 800de2c:	2300      	movs	r3, #0
 800de2e:	82bb      	strh	r3, [r7, #20]
 800de30:	e027      	b.n	800de82 <DispStr+0x14e>
 800de32:	8a7b      	ldrh	r3, [r7, #18]
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00d      	beq.n	800de58 <DispStr+0x124>
 800de3c:	7afb      	ldrb	r3, [r7, #11]
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <DispStr+0x118>
 800de46:	4b25      	ldr	r3, [pc, #148]	; (800dedc <DispStr+0x1a8>)
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	e001      	b.n	800de50 <DispStr+0x11c>
 800de4c:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <DispStr+0x1a4>)
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f004 fa55 	bl	8012300 <LCD_Set_Pixel>
 800de56:	e00c      	b.n	800de72 <DispStr+0x13e>
 800de58:	7afb      	ldrb	r3, [r7, #11]
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <DispStr+0x134>
 800de62:	4b1d      	ldr	r3, [pc, #116]	; (800ded8 <DispStr+0x1a4>)
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	e001      	b.n	800de6c <DispStr+0x138>
 800de68:	4b1c      	ldr	r3, [pc, #112]	; (800dedc <DispStr+0x1a8>)
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f004 fa47 	bl	8012300 <LCD_Set_Pixel>
 800de72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de76:	105b      	asrs	r3, r3, #1
 800de78:	827b      	strh	r3, [r7, #18]
 800de7a:	8abb      	ldrh	r3, [r7, #20]
 800de7c:	3301      	adds	r3, #1
 800de7e:	b29b      	uxth	r3, r3
 800de80:	82bb      	strh	r3, [r7, #20]
 800de82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800de86:	2b09      	cmp	r3, #9
 800de88:	ddd3      	ble.n	800de32 <DispStr+0xfe>
 800de8a:	4b0e      	ldr	r3, [pc, #56]	; (800dec4 <DispStr+0x190>)
 800de8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de90:	b29b      	uxth	r3, r3
 800de92:	3301      	adds	r3, #1
 800de94:	b29b      	uxth	r3, r3
 800de96:	b21a      	sxth	r2, r3
 800de98:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <DispStr+0x190>)
 800de9a:	801a      	strh	r2, [r3, #0]
 800de9c:	8afb      	ldrh	r3, [r7, #22]
 800de9e:	3301      	adds	r3, #1
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	82fb      	strh	r3, [r7, #22]
 800dea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dea8:	2b05      	cmp	r3, #5
 800deaa:	f77f af66 	ble.w	800dd7a <DispStr+0x46>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f47f af59 	bne.w	800dd6a <DispStr+0x36>
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	2000078a 	.word	0x2000078a
 800dec8:	2000078c 	.word	0x2000078c
 800decc:	080016c4 	.word	0x080016c4
 800ded0:	08001490 	.word	0x08001490
 800ded4:	ffffaaaa 	.word	0xffffaaaa
 800ded8:	200015cc 	.word	0x200015cc
 800dedc:	200015ce 	.word	0x200015ce

0800dee0 <Draw_Circle_D>:
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	461a      	mov	r2, r3
 800deee:	4623      	mov	r3, r4
 800def0:	71fb      	strb	r3, [r7, #7]
 800def2:	4603      	mov	r3, r0
 800def4:	80bb      	strh	r3, [r7, #4]
 800def6:	460b      	mov	r3, r1
 800def8:	807b      	strh	r3, [r7, #2]
 800defa:	4613      	mov	r3, r2
 800defc:	803b      	strh	r3, [r7, #0]
 800defe:	8c3b      	ldrh	r3, [r7, #32]
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	b29a      	uxth	r2, r3
 800df04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df06:	4413      	add	r3, r2
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3305      	adds	r3, #5
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df10:	88ba      	ldrh	r2, [r7, #4]
 800df12:	8c3b      	ldrh	r3, [r7, #32]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	b29b      	uxth	r3, r3
 800df18:	80bb      	strh	r3, [r7, #4]
 800df1a:	88bb      	ldrh	r3, [r7, #4]
 800df1c:	817b      	strh	r3, [r7, #10]
 800df1e:	887b      	ldrh	r3, [r7, #2]
 800df20:	3302      	adds	r3, #2
 800df22:	b29b      	uxth	r3, r3
 800df24:	813b      	strh	r3, [r7, #8]
 800df26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f004 f997 	bl	8012264 <LCD_Set_Posi>
 800df36:	2300      	movs	r3, #0
 800df38:	81bb      	strh	r3, [r7, #12]
 800df3a:	e012      	b.n	800df62 <Draw_Circle_D+0x82>
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <Draw_Circle_D+0x6c>
 800df46:	4bad      	ldr	r3, [pc, #692]	; (800e1fc <Draw_Circle_D+0x31c>)
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	e001      	b.n	800df50 <Draw_Circle_D+0x70>
 800df4c:	4bac      	ldr	r3, [pc, #688]	; (800e200 <Draw_Circle_D+0x320>)
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	4618      	mov	r0, r3
 800df52:	f004 f9d5 	bl	8012300 <LCD_Set_Pixel>
 800df56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	3301      	adds	r3, #1
 800df5e:	b29b      	uxth	r3, r3
 800df60:	81bb      	strh	r3, [r7, #12]
 800df62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df66:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df6a:	3b04      	subs	r3, #4
 800df6c:	429a      	cmp	r2, r3
 800df6e:	dbe5      	blt.n	800df3c <Draw_Circle_D+0x5c>
 800df70:	88ba      	ldrh	r2, [r7, #4]
 800df72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df74:	4413      	add	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	817b      	strh	r3, [r7, #10]
 800df7a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df82:	4611      	mov	r1, r2
 800df84:	4618      	mov	r0, r3
 800df86:	f004 f96d 	bl	8012264 <LCD_Set_Posi>
 800df8a:	2300      	movs	r3, #0
 800df8c:	81bb      	strh	r3, [r7, #12]
 800df8e:	e012      	b.n	800dfb6 <Draw_Circle_D+0xd6>
 800df90:	79fb      	ldrb	r3, [r7, #7]
 800df92:	f003 0301 	and.w	r3, r3, #1
 800df96:	2b00      	cmp	r3, #0
 800df98:	d002      	beq.n	800dfa0 <Draw_Circle_D+0xc0>
 800df9a:	4b98      	ldr	r3, [pc, #608]	; (800e1fc <Draw_Circle_D+0x31c>)
 800df9c:	881b      	ldrh	r3, [r3, #0]
 800df9e:	e001      	b.n	800dfa4 <Draw_Circle_D+0xc4>
 800dfa0:	4b97      	ldr	r3, [pc, #604]	; (800e200 <Draw_Circle_D+0x320>)
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f004 f9ab 	bl	8012300 <LCD_Set_Pixel>
 800dfaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	81bb      	strh	r3, [r7, #12]
 800dfb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfba:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfbe:	3b04      	subs	r3, #4
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	dbe5      	blt.n	800df90 <Draw_Circle_D+0xb0>
 800dfc4:	88bb      	ldrh	r3, [r7, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	817b      	strh	r3, [r7, #10]
 800dfcc:	887b      	ldrh	r3, [r7, #2]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	813b      	strh	r3, [r7, #8]
 800dfd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f004 f940 	bl	8012264 <LCD_Set_Posi>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	81bb      	strh	r3, [r7, #12]
 800dfe8:	e012      	b.n	800e010 <Draw_Circle_D+0x130>
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <Draw_Circle_D+0x11a>
 800dff4:	4b81      	ldr	r3, [pc, #516]	; (800e1fc <Draw_Circle_D+0x31c>)
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	e001      	b.n	800dffe <Draw_Circle_D+0x11e>
 800dffa:	4b81      	ldr	r3, [pc, #516]	; (800e200 <Draw_Circle_D+0x320>)
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	4618      	mov	r0, r3
 800e000:	f004 f97e 	bl	8012300 <LCD_Set_Pixel>
 800e004:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	3301      	adds	r3, #1
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	81bb      	strh	r3, [r7, #12]
 800e010:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e014:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e018:	3b02      	subs	r3, #2
 800e01a:	429a      	cmp	r2, r3
 800e01c:	dbe5      	blt.n	800dfea <Draw_Circle_D+0x10a>
 800e01e:	88ba      	ldrh	r2, [r7, #4]
 800e020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e022:	4413      	add	r3, r2
 800e024:	b29b      	uxth	r3, r3
 800e026:	3b01      	subs	r3, #1
 800e028:	b29b      	uxth	r3, r3
 800e02a:	817b      	strh	r3, [r7, #10]
 800e02c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e030:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e034:	4611      	mov	r1, r2
 800e036:	4618      	mov	r0, r3
 800e038:	f004 f914 	bl	8012264 <LCD_Set_Posi>
 800e03c:	2300      	movs	r3, #0
 800e03e:	81bb      	strh	r3, [r7, #12]
 800e040:	e012      	b.n	800e068 <Draw_Circle_D+0x188>
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <Draw_Circle_D+0x172>
 800e04c:	4b6b      	ldr	r3, [pc, #428]	; (800e1fc <Draw_Circle_D+0x31c>)
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	e001      	b.n	800e056 <Draw_Circle_D+0x176>
 800e052:	4b6b      	ldr	r3, [pc, #428]	; (800e200 <Draw_Circle_D+0x320>)
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	4618      	mov	r0, r3
 800e058:	f004 f952 	bl	8012300 <LCD_Set_Pixel>
 800e05c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e060:	b29b      	uxth	r3, r3
 800e062:	3301      	adds	r3, #1
 800e064:	b29b      	uxth	r3, r3
 800e066:	81bb      	strh	r3, [r7, #12]
 800e068:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e06c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e070:	3b02      	subs	r3, #2
 800e072:	429a      	cmp	r2, r3
 800e074:	dbe5      	blt.n	800e042 <Draw_Circle_D+0x162>
 800e076:	88bb      	ldrh	r3, [r7, #4]
 800e078:	3302      	adds	r3, #2
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	817b      	strh	r3, [r7, #10]
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	813b      	strh	r3, [r7, #8]
 800e082:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e086:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f004 f8e9 	bl	8012264 <LCD_Set_Posi>
 800e092:	2300      	movs	r3, #0
 800e094:	81bb      	strh	r3, [r7, #12]
 800e096:	e012      	b.n	800e0be <Draw_Circle_D+0x1de>
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d002      	beq.n	800e0a8 <Draw_Circle_D+0x1c8>
 800e0a2:	4b56      	ldr	r3, [pc, #344]	; (800e1fc <Draw_Circle_D+0x31c>)
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	e001      	b.n	800e0ac <Draw_Circle_D+0x1cc>
 800e0a8:	4b55      	ldr	r3, [pc, #340]	; (800e200 <Draw_Circle_D+0x320>)
 800e0aa:	881b      	ldrh	r3, [r3, #0]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f004 f927 	bl	8012300 <LCD_Set_Pixel>
 800e0b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	81bb      	strh	r3, [r7, #12]
 800e0be:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e0c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	dbe6      	blt.n	800e098 <Draw_Circle_D+0x1b8>
 800e0ca:	88ba      	ldrh	r2, [r7, #4]
 800e0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0ce:	4413      	add	r3, r2
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	3b02      	subs	r3, #2
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	817b      	strh	r3, [r7, #10]
 800e0d8:	887b      	ldrh	r3, [r7, #2]
 800e0da:	813b      	strh	r3, [r7, #8]
 800e0dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e0e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e0e4:	4611      	mov	r1, r2
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f004 f8bc 	bl	8012264 <LCD_Set_Posi>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	81bb      	strh	r3, [r7, #12]
 800e0f0:	e012      	b.n	800e118 <Draw_Circle_D+0x238>
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <Draw_Circle_D+0x222>
 800e0fc:	4b3f      	ldr	r3, [pc, #252]	; (800e1fc <Draw_Circle_D+0x31c>)
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	e001      	b.n	800e106 <Draw_Circle_D+0x226>
 800e102:	4b3f      	ldr	r3, [pc, #252]	; (800e200 <Draw_Circle_D+0x320>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	4618      	mov	r0, r3
 800e108:	f004 f8fa 	bl	8012300 <LCD_Set_Pixel>
 800e10c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e110:	b29b      	uxth	r3, r3
 800e112:	3301      	adds	r3, #1
 800e114:	b29b      	uxth	r3, r3
 800e116:	81bb      	strh	r3, [r7, #12]
 800e118:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e11c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e120:	429a      	cmp	r2, r3
 800e122:	dbe6      	blt.n	800e0f2 <Draw_Circle_D+0x212>
 800e124:	887b      	ldrh	r3, [r7, #2]
 800e126:	813b      	strh	r3, [r7, #8]
 800e128:	2300      	movs	r3, #0
 800e12a:	81fb      	strh	r3, [r7, #14]
 800e12c:	e05a      	b.n	800e1e4 <Draw_Circle_D+0x304>
 800e12e:	88ba      	ldrh	r2, [r7, #4]
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	4413      	add	r3, r2
 800e134:	b29b      	uxth	r3, r3
 800e136:	3303      	adds	r3, #3
 800e138:	b29b      	uxth	r3, r3
 800e13a:	b21b      	sxth	r3, r3
 800e13c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f004 f88e 	bl	8012264 <LCD_Set_Posi>
 800e148:	2300      	movs	r3, #0
 800e14a:	81bb      	strh	r3, [r7, #12]
 800e14c:	e012      	b.n	800e174 <Draw_Circle_D+0x294>
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	f003 0301 	and.w	r3, r3, #1
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <Draw_Circle_D+0x27e>
 800e158:	4b28      	ldr	r3, [pc, #160]	; (800e1fc <Draw_Circle_D+0x31c>)
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	e001      	b.n	800e162 <Draw_Circle_D+0x282>
 800e15e:	4b28      	ldr	r3, [pc, #160]	; (800e200 <Draw_Circle_D+0x320>)
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	4618      	mov	r0, r3
 800e164:	f004 f8cc 	bl	8012300 <LCD_Set_Pixel>
 800e168:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	3301      	adds	r3, #1
 800e170:	b29b      	uxth	r3, r3
 800e172:	81bb      	strh	r3, [r7, #12]
 800e174:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e178:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	dbe6      	blt.n	800e14e <Draw_Circle_D+0x26e>
 800e180:	88ba      	ldrh	r2, [r7, #4]
 800e182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e184:	4413      	add	r3, r2
 800e186:	b29a      	uxth	r2, r3
 800e188:	89fb      	ldrh	r3, [r7, #14]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	3b03      	subs	r3, #3
 800e190:	b29b      	uxth	r3, r3
 800e192:	b21b      	sxth	r3, r3
 800e194:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f004 f862 	bl	8012264 <LCD_Set_Posi>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	81bb      	strh	r3, [r7, #12]
 800e1a4:	e012      	b.n	800e1cc <Draw_Circle_D+0x2ec>
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	f003 0301 	and.w	r3, r3, #1
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <Draw_Circle_D+0x2d6>
 800e1b0:	4b12      	ldr	r3, [pc, #72]	; (800e1fc <Draw_Circle_D+0x31c>)
 800e1b2:	881b      	ldrh	r3, [r3, #0]
 800e1b4:	e001      	b.n	800e1ba <Draw_Circle_D+0x2da>
 800e1b6:	4b12      	ldr	r3, [pc, #72]	; (800e200 <Draw_Circle_D+0x320>)
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f004 f8a0 	bl	8012300 <LCD_Set_Pixel>
 800e1c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	81bb      	strh	r3, [r7, #12]
 800e1cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e1d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	dbe6      	blt.n	800e1a6 <Draw_Circle_D+0x2c6>
 800e1d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	3301      	adds	r3, #1
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	81fb      	strh	r3, [r7, #14]
 800e1e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e1e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	db9e      	blt.n	800e12e <Draw_Circle_D+0x24e>
 800e1f0:	bf00      	nop
 800e1f2:	bf00      	nop
 800e1f4:	3714      	adds	r7, #20
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd90      	pop	{r4, r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	200015cc 	.word	0x200015cc
 800e200:	200015ce 	.word	0x200015ce

0800e204 <DispStr10x14>:
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	607b      	str	r3, [r7, #4]
 800e20c:	4603      	mov	r3, r0
 800e20e:	81fb      	strh	r3, [r7, #14]
 800e210:	460b      	mov	r3, r1
 800e212:	81bb      	strh	r3, [r7, #12]
 800e214:	4613      	mov	r3, r2
 800e216:	72fb      	strb	r3, [r7, #11]
 800e218:	4a0c      	ldr	r2, [pc, #48]	; (800e24c <DispStr10x14+0x48>)
 800e21a:	89fb      	ldrh	r3, [r7, #14]
 800e21c:	8013      	strh	r3, [r2, #0]
 800e21e:	4a0c      	ldr	r2, [pc, #48]	; (800e250 <DispStr10x14+0x4c>)
 800e220:	89bb      	ldrh	r3, [r7, #12]
 800e222:	8013      	strh	r3, [r2, #0]
 800e224:	e008      	b.n	800e238 <DispStr10x14+0x34>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	1c5a      	adds	r2, r3, #1
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	781a      	ldrb	r2, [r3, #0]
 800e22e:	7afb      	ldrb	r3, [r7, #11]
 800e230:	4611      	mov	r1, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f000 f80e 	bl	800e254 <DispChar10x14>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1f2      	bne.n	800e226 <DispStr10x14+0x22>
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	2000078a 	.word	0x2000078a
 800e250:	2000078c 	.word	0x2000078c

0800e254 <DispChar10x14>:
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	460a      	mov	r2, r1
 800e25e:	71fb      	strb	r3, [r7, #7]
 800e260:	4613      	mov	r3, r2
 800e262:	71bb      	strb	r3, [r7, #6]
 800e264:	2300      	movs	r3, #0
 800e266:	81fb      	strh	r3, [r7, #14]
 800e268:	e0fe      	b.n	800e468 <DispChar10x14+0x214>
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	f003 0310 	and.w	r3, r3, #16
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00f      	beq.n	800e294 <DispChar10x14+0x40>
 800e274:	79bb      	ldrb	r3, [r7, #6]
 800e276:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	461a      	mov	r2, r3
 800e284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e288:	4413      	add	r3, r2
 800e28a:	4a7c      	ldr	r2, [pc, #496]	; (800e47c <DispChar10x14+0x228>)
 800e28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e290:	817b      	strh	r3, [r7, #10]
 800e292:	e00e      	b.n	800e2b2 <DispChar10x14+0x5e>
 800e294:	79bb      	ldrb	r3, [r7, #6]
 800e296:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e29a:	4613      	mov	r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	4413      	add	r3, r2
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	4a75      	ldr	r2, [pc, #468]	; (800e480 <DispChar10x14+0x22c>)
 800e2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2b0:	817b      	strh	r3, [r7, #10]
 800e2b2:	79fb      	ldrb	r3, [r7, #7]
 800e2b4:	f003 0320 	and.w	r3, r3, #32
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00c      	beq.n	800e2d6 <DispChar10x14+0x82>
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	f003 0301 	and.w	r3, r3, #1
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <DispChar10x14+0x78>
 800e2c8:	4a6e      	ldr	r2, [pc, #440]	; (800e484 <DispChar10x14+0x230>)
 800e2ca:	e001      	b.n	800e2d0 <DispChar10x14+0x7c>
 800e2cc:	f245 5255 	movw	r2, #21845	; 0x5555
 800e2d0:	897b      	ldrh	r3, [r7, #10]
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	817b      	strh	r3, [r7, #10]
 800e2d6:	4b6c      	ldr	r3, [pc, #432]	; (800e488 <DispChar10x14+0x234>)
 800e2d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2dc:	4a6b      	ldr	r2, [pc, #428]	; (800e48c <DispChar10x14+0x238>)
 800e2de:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f003 ffbd 	bl	8012264 <LCD_Set_Posi>
 800e2ea:	79fb      	ldrb	r3, [r7, #7]
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d038      	beq.n	800e366 <DispChar10x14+0x112>
 800e2f4:	79bb      	ldrb	r3, [r7, #6]
 800e2f6:	2b43      	cmp	r3, #67	; 0x43
 800e2f8:	d005      	beq.n	800e306 <DispChar10x14+0xb2>
 800e2fa:	79bb      	ldrb	r3, [r7, #6]
 800e2fc:	2b44      	cmp	r3, #68	; 0x44
 800e2fe:	d002      	beq.n	800e306 <DispChar10x14+0xb2>
 800e300:	79bb      	ldrb	r3, [r7, #6]
 800e302:	2b45      	cmp	r3, #69	; 0x45
 800e304:	d12f      	bne.n	800e366 <DispChar10x14+0x112>
 800e306:	2300      	movs	r3, #0
 800e308:	81bb      	strh	r3, [r7, #12]
 800e30a:	e027      	b.n	800e35c <DispChar10x14+0x108>
 800e30c:	897b      	ldrh	r3, [r7, #10]
 800e30e:	f003 0304 	and.w	r3, r3, #4
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00d      	beq.n	800e332 <DispChar10x14+0xde>
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <DispChar10x14+0xd2>
 800e320:	4b5b      	ldr	r3, [pc, #364]	; (800e490 <DispChar10x14+0x23c>)
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	e001      	b.n	800e32a <DispChar10x14+0xd6>
 800e326:	4b5b      	ldr	r3, [pc, #364]	; (800e494 <DispChar10x14+0x240>)
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f003 ffe8 	bl	8012300 <LCD_Set_Pixel>
 800e330:	e00c      	b.n	800e34c <DispChar10x14+0xf8>
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <DispChar10x14+0xee>
 800e33c:	4b55      	ldr	r3, [pc, #340]	; (800e494 <DispChar10x14+0x240>)
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	e001      	b.n	800e346 <DispChar10x14+0xf2>
 800e342:	4b53      	ldr	r3, [pc, #332]	; (800e490 <DispChar10x14+0x23c>)
 800e344:	881b      	ldrh	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f003 ffda 	bl	8012300 <LCD_Set_Pixel>
 800e34c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e350:	105b      	asrs	r3, r3, #1
 800e352:	817b      	strh	r3, [r7, #10]
 800e354:	89bb      	ldrh	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	b29b      	uxth	r3, r3
 800e35a:	81bb      	strh	r3, [r7, #12]
 800e35c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e360:	2b0a      	cmp	r3, #10
 800e362:	ddd3      	ble.n	800e30c <DispChar10x14+0xb8>
 800e364:	e073      	b.n	800e44e <DispChar10x14+0x1fa>
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	f003 0310 	and.w	r3, r3, #16
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d03f      	beq.n	800e3f0 <DispChar10x14+0x19c>
 800e370:	79bb      	ldrb	r3, [r7, #6]
 800e372:	2b4c      	cmp	r3, #76	; 0x4c
 800e374:	d002      	beq.n	800e37c <DispChar10x14+0x128>
 800e376:	79bb      	ldrb	r3, [r7, #6]
 800e378:	2b48      	cmp	r3, #72	; 0x48
 800e37a:	d139      	bne.n	800e3f0 <DispChar10x14+0x19c>
 800e37c:	4b42      	ldr	r3, [pc, #264]	; (800e488 <DispChar10x14+0x234>)
 800e37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e382:	4a42      	ldr	r2, [pc, #264]	; (800e48c <DispChar10x14+0x238>)
 800e384:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f003 ff6a 	bl	8012264 <LCD_Set_Posi>
 800e390:	2300      	movs	r3, #0
 800e392:	81bb      	strh	r3, [r7, #12]
 800e394:	e027      	b.n	800e3e6 <DispChar10x14+0x192>
 800e396:	897b      	ldrh	r3, [r7, #10]
 800e398:	f003 0304 	and.w	r3, r3, #4
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00d      	beq.n	800e3bc <DispChar10x14+0x168>
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <DispChar10x14+0x15c>
 800e3aa:	4b39      	ldr	r3, [pc, #228]	; (800e490 <DispChar10x14+0x23c>)
 800e3ac:	881b      	ldrh	r3, [r3, #0]
 800e3ae:	e001      	b.n	800e3b4 <DispChar10x14+0x160>
 800e3b0:	4b38      	ldr	r3, [pc, #224]	; (800e494 <DispChar10x14+0x240>)
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f003 ffa3 	bl	8012300 <LCD_Set_Pixel>
 800e3ba:	e00c      	b.n	800e3d6 <DispChar10x14+0x182>
 800e3bc:	79fb      	ldrb	r3, [r7, #7]
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d002      	beq.n	800e3cc <DispChar10x14+0x178>
 800e3c6:	4b33      	ldr	r3, [pc, #204]	; (800e494 <DispChar10x14+0x240>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	e001      	b.n	800e3d0 <DispChar10x14+0x17c>
 800e3cc:	4b30      	ldr	r3, [pc, #192]	; (800e490 <DispChar10x14+0x23c>)
 800e3ce:	881b      	ldrh	r3, [r3, #0]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f003 ff95 	bl	8012300 <LCD_Set_Pixel>
 800e3d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3da:	105b      	asrs	r3, r3, #1
 800e3dc:	817b      	strh	r3, [r7, #10]
 800e3de:	89bb      	ldrh	r3, [r7, #12]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	81bb      	strh	r3, [r7, #12]
 800e3e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3ea:	2b0a      	cmp	r3, #10
 800e3ec:	ddd3      	ble.n	800e396 <DispChar10x14+0x142>
 800e3ee:	e02e      	b.n	800e44e <DispChar10x14+0x1fa>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	81bb      	strh	r3, [r7, #12]
 800e3f4:	e027      	b.n	800e446 <DispChar10x14+0x1f2>
 800e3f6:	897b      	ldrh	r3, [r7, #10]
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00d      	beq.n	800e41c <DispChar10x14+0x1c8>
 800e400:	79fb      	ldrb	r3, [r7, #7]
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	2b00      	cmp	r3, #0
 800e408:	d002      	beq.n	800e410 <DispChar10x14+0x1bc>
 800e40a:	4b21      	ldr	r3, [pc, #132]	; (800e490 <DispChar10x14+0x23c>)
 800e40c:	881b      	ldrh	r3, [r3, #0]
 800e40e:	e001      	b.n	800e414 <DispChar10x14+0x1c0>
 800e410:	4b20      	ldr	r3, [pc, #128]	; (800e494 <DispChar10x14+0x240>)
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f003 ff73 	bl	8012300 <LCD_Set_Pixel>
 800e41a:	e00c      	b.n	800e436 <DispChar10x14+0x1e2>
 800e41c:	79fb      	ldrb	r3, [r7, #7]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <DispChar10x14+0x1d8>
 800e426:	4b1b      	ldr	r3, [pc, #108]	; (800e494 <DispChar10x14+0x240>)
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	e001      	b.n	800e430 <DispChar10x14+0x1dc>
 800e42c:	4b18      	ldr	r3, [pc, #96]	; (800e490 <DispChar10x14+0x23c>)
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	4618      	mov	r0, r3
 800e432:	f003 ff65 	bl	8012300 <LCD_Set_Pixel>
 800e436:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e43a:	105b      	asrs	r3, r3, #1
 800e43c:	817b      	strh	r3, [r7, #10]
 800e43e:	89bb      	ldrh	r3, [r7, #12]
 800e440:	3301      	adds	r3, #1
 800e442:	b29b      	uxth	r3, r3
 800e444:	81bb      	strh	r3, [r7, #12]
 800e446:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e44a:	2b0d      	cmp	r3, #13
 800e44c:	ddd3      	ble.n	800e3f6 <DispChar10x14+0x1a2>
 800e44e:	4b0e      	ldr	r3, [pc, #56]	; (800e488 <DispChar10x14+0x234>)
 800e450:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e454:	b29b      	uxth	r3, r3
 800e456:	3301      	adds	r3, #1
 800e458:	b29b      	uxth	r3, r3
 800e45a:	b21a      	sxth	r2, r3
 800e45c:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <DispChar10x14+0x234>)
 800e45e:	801a      	strh	r2, [r3, #0]
 800e460:	89fb      	ldrh	r3, [r7, #14]
 800e462:	3301      	adds	r3, #1
 800e464:	b29b      	uxth	r3, r3
 800e466:	81fb      	strh	r3, [r7, #14]
 800e468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e46c:	2b09      	cmp	r3, #9
 800e46e:	f77f aefc 	ble.w	800e26a <DispChar10x14+0x16>
 800e472:	bf00      	nop
 800e474:	bf00      	nop
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	080018f8 	.word	0x080018f8
 800e480:	08001998 	.word	0x08001998
 800e484:	ffffaaaa 	.word	0xffffaaaa
 800e488:	2000078a 	.word	0x2000078a
 800e48c:	2000078c 	.word	0x2000078c
 800e490:	200015ce 	.word	0x200015ce
 800e494:	200015cc 	.word	0x200015cc

0800e498 <NotePixel>:
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	4603      	mov	r3, r0
 800e4a0:	71fb      	strb	r3, [r7, #7]
 800e4a2:	4b42      	ldr	r3, [pc, #264]	; (800e5ac <NotePixel+0x114>)
 800e4a4:	60fb      	str	r3, [r7, #12]
 800e4a6:	4b42      	ldr	r3, [pc, #264]	; (800e5b0 <NotePixel+0x118>)
 800e4a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ac:	4a41      	ldr	r2, [pc, #260]	; (800e5b4 <NotePixel+0x11c>)
 800e4ae:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e4b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4b6:	fb02 f201 	mul.w	r2, r2, r1
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	b21a      	sxth	r2, r3
 800e4be:	4b3c      	ldr	r3, [pc, #240]	; (800e5b0 <NotePixel+0x118>)
 800e4c0:	801a      	strh	r2, [r3, #0]
 800e4c2:	4b3d      	ldr	r3, [pc, #244]	; (800e5b8 <NotePixel+0x120>)
 800e4c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4c8:	4a3a      	ldr	r2, [pc, #232]	; (800e5b4 <NotePixel+0x11c>)
 800e4ca:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e4ce:	fb93 f1f2 	sdiv	r1, r3, r2
 800e4d2:	fb02 f201 	mul.w	r2, r2, r1
 800e4d6:	1a9b      	subs	r3, r3, r2
 800e4d8:	b21a      	sxth	r2, r3
 800e4da:	4b37      	ldr	r3, [pc, #220]	; (800e5b8 <NotePixel+0x120>)
 800e4dc:	801a      	strh	r2, [r3, #0]
 800e4de:	4b35      	ldr	r3, [pc, #212]	; (800e5b4 <NotePixel+0x11c>)
 800e4e0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	da00      	bge.n	800e4ea <NotePixel+0x52>
 800e4e8:	331f      	adds	r3, #31
 800e4ea:	115b      	asrs	r3, r3, #5
 800e4ec:	b21b      	sxth	r3, r3
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	4b2f      	ldr	r3, [pc, #188]	; (800e5b0 <NotePixel+0x118>)
 800e4f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	fb12 f303 	smulbb	r3, r2, r3
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	4b2e      	ldr	r3, [pc, #184]	; (800e5b8 <NotePixel+0x120>)
 800e500:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e504:	2b00      	cmp	r3, #0
 800e506:	da00      	bge.n	800e50a <NotePixel+0x72>
 800e508:	330f      	adds	r3, #15
 800e50a:	111b      	asrs	r3, r3, #4
 800e50c:	b21b      	sxth	r3, r3
 800e50e:	b29b      	uxth	r3, r3
 800e510:	4413      	add	r3, r2
 800e512:	b29b      	uxth	r3, r3
 800e514:	817b      	strh	r3, [r7, #10]
 800e516:	4b28      	ldr	r3, [pc, #160]	; (800e5b8 <NotePixel+0x120>)
 800e518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e51c:	425a      	negs	r2, r3
 800e51e:	f003 030f 	and.w	r3, r3, #15
 800e522:	f002 020f 	and.w	r2, r2, #15
 800e526:	bf58      	it	pl
 800e528:	4253      	negpl	r3, r2
 800e52a:	813b      	strh	r3, [r7, #8]
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d015      	beq.n	800e55e <NotePixel+0xc6>
 800e532:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e536:	005b      	lsls	r3, r3, #1
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	4413      	add	r3, r2
 800e53c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e540:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e544:	2201      	movs	r2, #1
 800e546:	fa02 f303 	lsl.w	r3, r2, r3
 800e54a:	b21a      	sxth	r2, r3
 800e54c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	4403      	add	r3, r0
 800e556:	430a      	orrs	r2, r1
 800e558:	b212      	sxth	r2, r2
 800e55a:	801a      	strh	r2, [r3, #0]
 800e55c:	e016      	b.n	800e58c <NotePixel+0xf4>
 800e55e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	4413      	add	r3, r2
 800e568:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e56c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e570:	2201      	movs	r2, #1
 800e572:	fa02 f303 	lsl.w	r3, r2, r3
 800e576:	b21b      	sxth	r3, r3
 800e578:	43db      	mvns	r3, r3
 800e57a:	b21a      	sxth	r2, r3
 800e57c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	4403      	add	r3, r0
 800e586:	400a      	ands	r2, r1
 800e588:	b212      	sxth	r2, r2
 800e58a:	801a      	strh	r2, [r3, #0]
 800e58c:	4b0a      	ldr	r3, [pc, #40]	; (800e5b8 <NotePixel+0x120>)
 800e58e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e592:	b29b      	uxth	r3, r3
 800e594:	3301      	adds	r3, #1
 800e596:	b29b      	uxth	r3, r3
 800e598:	b21a      	sxth	r2, r3
 800e59a:	4b07      	ldr	r3, [pc, #28]	; (800e5b8 <NotePixel+0x120>)
 800e59c:	801a      	strh	r2, [r3, #0]
 800e59e:	bf00      	nop
 800e5a0:	3714      	adds	r7, #20
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	20000f8c 	.word	0x20000f8c
 800e5b0:	20000002 	.word	0x20000002
 800e5b4:	20000140 	.word	0x20000140
 800e5b8:	20000004 	.word	0x20000004

0800e5bc <Buil_Pop>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	487f      	ldr	r0, [pc, #508]	; (800e7c8 <Buil_Pop+0x20c>)
 800e5ca:	f014 fb79 	bl	8022cc0 <memset>
 800e5ce:	4b7f      	ldr	r3, [pc, #508]	; (800e7cc <Buil_Pop+0x210>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	801a      	strh	r2, [r3, #0]
 800e5d4:	4b7e      	ldr	r3, [pc, #504]	; (800e7d0 <Buil_Pop+0x214>)
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	801a      	strh	r2, [r3, #0]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	80fb      	strh	r3, [r7, #6]
 800e5de:	e008      	b.n	800e5f2 <Buil_Pop+0x36>
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	f7ff ff59 	bl	800e498 <NotePixel>
 800e5e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	80fb      	strh	r3, [r7, #6]
 800e5f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e5f6:	4b77      	ldr	r3, [pc, #476]	; (800e7d4 <Buil_Pop+0x218>)
 800e5f8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5fc:	0fd9      	lsrs	r1, r3, #31
 800e5fe:	440b      	add	r3, r1
 800e600:	105b      	asrs	r3, r3, #1
 800e602:	b21b      	sxth	r3, r3
 800e604:	3b06      	subs	r3, #6
 800e606:	429a      	cmp	r2, r3
 800e608:	dbea      	blt.n	800e5e0 <Buil_Pop+0x24>
 800e60a:	4b70      	ldr	r3, [pc, #448]	; (800e7cc <Buil_Pop+0x210>)
 800e60c:	2201      	movs	r2, #1
 800e60e:	801a      	strh	r2, [r3, #0]
 800e610:	4b6f      	ldr	r3, [pc, #444]	; (800e7d0 <Buil_Pop+0x214>)
 800e612:	2202      	movs	r2, #2
 800e614:	801a      	strh	r2, [r3, #0]
 800e616:	2001      	movs	r0, #1
 800e618:	f7ff ff3e 	bl	800e498 <NotePixel>
 800e61c:	4b6b      	ldr	r3, [pc, #428]	; (800e7cc <Buil_Pop+0x210>)
 800e61e:	2201      	movs	r2, #1
 800e620:	801a      	strh	r2, [r3, #0]
 800e622:	4b6c      	ldr	r3, [pc, #432]	; (800e7d4 <Buil_Pop+0x218>)
 800e624:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e628:	0fda      	lsrs	r2, r3, #31
 800e62a:	4413      	add	r3, r2
 800e62c:	105b      	asrs	r3, r3, #1
 800e62e:	b21b      	sxth	r3, r3
 800e630:	b29b      	uxth	r3, r3
 800e632:	3b03      	subs	r3, #3
 800e634:	b29b      	uxth	r3, r3
 800e636:	b21a      	sxth	r2, r3
 800e638:	4b65      	ldr	r3, [pc, #404]	; (800e7d0 <Buil_Pop+0x214>)
 800e63a:	801a      	strh	r2, [r3, #0]
 800e63c:	2001      	movs	r0, #1
 800e63e:	f7ff ff2b 	bl	800e498 <NotePixel>
 800e642:	4b62      	ldr	r3, [pc, #392]	; (800e7cc <Buil_Pop+0x210>)
 800e644:	2202      	movs	r2, #2
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	4b61      	ldr	r3, [pc, #388]	; (800e7d0 <Buil_Pop+0x214>)
 800e64a:	2201      	movs	r2, #1
 800e64c:	801a      	strh	r2, [r3, #0]
 800e64e:	2001      	movs	r0, #1
 800e650:	f7ff ff22 	bl	800e498 <NotePixel>
 800e654:	4b5d      	ldr	r3, [pc, #372]	; (800e7cc <Buil_Pop+0x210>)
 800e656:	2202      	movs	r2, #2
 800e658:	801a      	strh	r2, [r3, #0]
 800e65a:	4b5e      	ldr	r3, [pc, #376]	; (800e7d4 <Buil_Pop+0x218>)
 800e65c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e660:	0fda      	lsrs	r2, r3, #31
 800e662:	4413      	add	r3, r2
 800e664:	105b      	asrs	r3, r3, #1
 800e666:	b21b      	sxth	r3, r3
 800e668:	b29b      	uxth	r3, r3
 800e66a:	3b02      	subs	r3, #2
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	b21a      	sxth	r2, r3
 800e670:	4b57      	ldr	r3, [pc, #348]	; (800e7d0 <Buil_Pop+0x214>)
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	2001      	movs	r0, #1
 800e676:	f7ff ff0f 	bl	800e498 <NotePixel>
 800e67a:	4b54      	ldr	r3, [pc, #336]	; (800e7cc <Buil_Pop+0x210>)
 800e67c:	2203      	movs	r2, #3
 800e67e:	801a      	strh	r2, [r3, #0]
 800e680:	e01e      	b.n	800e6c0 <Buil_Pop+0x104>
 800e682:	4b53      	ldr	r3, [pc, #332]	; (800e7d0 <Buil_Pop+0x214>)
 800e684:	2200      	movs	r2, #0
 800e686:	801a      	strh	r2, [r3, #0]
 800e688:	2001      	movs	r0, #1
 800e68a:	f7ff ff05 	bl	800e498 <NotePixel>
 800e68e:	4b51      	ldr	r3, [pc, #324]	; (800e7d4 <Buil_Pop+0x218>)
 800e690:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e694:	0fda      	lsrs	r2, r3, #31
 800e696:	4413      	add	r3, r2
 800e698:	105b      	asrs	r3, r3, #1
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	b21a      	sxth	r2, r3
 800e6a4:	4b4a      	ldr	r3, [pc, #296]	; (800e7d0 <Buil_Pop+0x214>)
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	f7ff fef5 	bl	800e498 <NotePixel>
 800e6ae:	4b47      	ldr	r3, [pc, #284]	; (800e7cc <Buil_Pop+0x210>)
 800e6b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	b21a      	sxth	r2, r3
 800e6bc:	4b43      	ldr	r3, [pc, #268]	; (800e7cc <Buil_Pop+0x210>)
 800e6be:	801a      	strh	r2, [r3, #0]
 800e6c0:	4b42      	ldr	r3, [pc, #264]	; (800e7cc <Buil_Pop+0x210>)
 800e6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4b42      	ldr	r3, [pc, #264]	; (800e7d4 <Buil_Pop+0x218>)
 800e6ca:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6ce:	3b02      	subs	r3, #2
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	dbd6      	blt.n	800e682 <Buil_Pop+0xc6>
 800e6d4:	4b3f      	ldr	r3, [pc, #252]	; (800e7d4 <Buil_Pop+0x218>)
 800e6d6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	3b03      	subs	r3, #3
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	b21a      	sxth	r2, r3
 800e6e2:	4b3a      	ldr	r3, [pc, #232]	; (800e7cc <Buil_Pop+0x210>)
 800e6e4:	801a      	strh	r2, [r3, #0]
 800e6e6:	4b3a      	ldr	r3, [pc, #232]	; (800e7d0 <Buil_Pop+0x214>)
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	801a      	strh	r2, [r3, #0]
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	f7ff fed3 	bl	800e498 <NotePixel>
 800e6f2:	4b38      	ldr	r3, [pc, #224]	; (800e7d4 <Buil_Pop+0x218>)
 800e6f4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	3b03      	subs	r3, #3
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	b21a      	sxth	r2, r3
 800e700:	4b32      	ldr	r3, [pc, #200]	; (800e7cc <Buil_Pop+0x210>)
 800e702:	801a      	strh	r2, [r3, #0]
 800e704:	4b33      	ldr	r3, [pc, #204]	; (800e7d4 <Buil_Pop+0x218>)
 800e706:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e70a:	0fda      	lsrs	r2, r3, #31
 800e70c:	4413      	add	r3, r2
 800e70e:	105b      	asrs	r3, r3, #1
 800e710:	b21b      	sxth	r3, r3
 800e712:	b29b      	uxth	r3, r3
 800e714:	3b02      	subs	r3, #2
 800e716:	b29b      	uxth	r3, r3
 800e718:	b21a      	sxth	r2, r3
 800e71a:	4b2d      	ldr	r3, [pc, #180]	; (800e7d0 <Buil_Pop+0x214>)
 800e71c:	801a      	strh	r2, [r3, #0]
 800e71e:	2001      	movs	r0, #1
 800e720:	f7ff feba 	bl	800e498 <NotePixel>
 800e724:	4b2b      	ldr	r3, [pc, #172]	; (800e7d4 <Buil_Pop+0x218>)
 800e726:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	3b02      	subs	r3, #2
 800e72e:	b29b      	uxth	r3, r3
 800e730:	b21a      	sxth	r2, r3
 800e732:	4b26      	ldr	r3, [pc, #152]	; (800e7cc <Buil_Pop+0x210>)
 800e734:	801a      	strh	r2, [r3, #0]
 800e736:	4b26      	ldr	r3, [pc, #152]	; (800e7d0 <Buil_Pop+0x214>)
 800e738:	2202      	movs	r2, #2
 800e73a:	801a      	strh	r2, [r3, #0]
 800e73c:	2001      	movs	r0, #1
 800e73e:	f7ff feab 	bl	800e498 <NotePixel>
 800e742:	4b24      	ldr	r3, [pc, #144]	; (800e7d4 <Buil_Pop+0x218>)
 800e744:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e748:	b29b      	uxth	r3, r3
 800e74a:	3b02      	subs	r3, #2
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	b21a      	sxth	r2, r3
 800e750:	4b1e      	ldr	r3, [pc, #120]	; (800e7cc <Buil_Pop+0x210>)
 800e752:	801a      	strh	r2, [r3, #0]
 800e754:	4b1f      	ldr	r3, [pc, #124]	; (800e7d4 <Buil_Pop+0x218>)
 800e756:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e75a:	0fda      	lsrs	r2, r3, #31
 800e75c:	4413      	add	r3, r2
 800e75e:	105b      	asrs	r3, r3, #1
 800e760:	b21b      	sxth	r3, r3
 800e762:	b29b      	uxth	r3, r3
 800e764:	3b03      	subs	r3, #3
 800e766:	b29b      	uxth	r3, r3
 800e768:	b21a      	sxth	r2, r3
 800e76a:	4b19      	ldr	r3, [pc, #100]	; (800e7d0 <Buil_Pop+0x214>)
 800e76c:	801a      	strh	r2, [r3, #0]
 800e76e:	2001      	movs	r0, #1
 800e770:	f7ff fe92 	bl	800e498 <NotePixel>
 800e774:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <Buil_Pop+0x218>)
 800e776:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	3b01      	subs	r3, #1
 800e77e:	b29b      	uxth	r3, r3
 800e780:	b21a      	sxth	r2, r3
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <Buil_Pop+0x210>)
 800e784:	801a      	strh	r2, [r3, #0]
 800e786:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <Buil_Pop+0x214>)
 800e788:	2203      	movs	r2, #3
 800e78a:	801a      	strh	r2, [r3, #0]
 800e78c:	2300      	movs	r3, #0
 800e78e:	80fb      	strh	r3, [r7, #6]
 800e790:	e008      	b.n	800e7a4 <Buil_Pop+0x1e8>
 800e792:	2001      	movs	r0, #1
 800e794:	f7ff fe80 	bl	800e498 <NotePixel>
 800e798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	80fb      	strh	r3, [r7, #6]
 800e7a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <Buil_Pop+0x218>)
 800e7aa:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7ae:	0fd9      	lsrs	r1, r3, #31
 800e7b0:	440b      	add	r3, r1
 800e7b2:	105b      	asrs	r3, r3, #1
 800e7b4:	b21b      	sxth	r3, r3
 800e7b6:	3b06      	subs	r3, #6
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	dbea      	blt.n	800e792 <Buil_Pop+0x1d6>
 800e7bc:	bf00      	nop
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20000f8c 	.word	0x20000f8c
 800e7cc:	20000002 	.word	0x20000002
 800e7d0:	20000004 	.word	0x20000004
 800e7d4:	20000140 	.word	0x20000140

0800e7d8 <PopColor>:
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	460a      	mov	r2, r1
 800e7e2:	80fb      	strh	r3, [r7, #6]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	80bb      	strh	r3, [r7, #4]
 800e7e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e7ec:	4b06      	ldr	r3, [pc, #24]	; (800e808 <PopColor+0x30>)
 800e7ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e7f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e7f6:	4b04      	ldr	r3, [pc, #16]	; (800e808 <PopColor+0x30>)
 800e7f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	20000140 	.word	0x20000140

0800e80c <Close_Pop>:
 800e80c:	b480      	push	{r7}
 800e80e:	af00      	add	r7, sp, #0
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <Close_Pop+0x24>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	f023 0306 	bic.w	r3, r3, #6
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	4b05      	ldr	r3, [pc, #20]	; (800e830 <Close_Pop+0x24>)
 800e81c:	701a      	strb	r2, [r3, #0]
 800e81e:	4b05      	ldr	r3, [pc, #20]	; (800e834 <Close_Pop+0x28>)
 800e820:	2201      	movs	r2, #1
 800e822:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e826:	bf00      	nop
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr
 800e830:	2000078e 	.word	0x2000078e
 800e834:	20000140 	.word	0x20000140

0800e838 <List_Pop>:
 800e838:	b480      	push	{r7}
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <List_Pop+0x24>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f043 0302 	orr.w	r3, r3, #2
 800e844:	b2da      	uxtb	r2, r3
 800e846:	4b05      	ldr	r3, [pc, #20]	; (800e85c <List_Pop+0x24>)
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	4b05      	ldr	r3, [pc, #20]	; (800e860 <List_Pop+0x28>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e852:	bf00      	nop
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	2000078e 	.word	0x2000078e
 800e860:	20000140 	.word	0x20000140

0800e864 <Dialog_Pop>:
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af02      	add	r7, sp, #8
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	4b2a      	ldr	r3, [pc, #168]	; (800e918 <Dialog_Pop+0xb4>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	f043 0304 	orr.w	r3, r3, #4
 800e874:	b2da      	uxtb	r2, r3
 800e876:	4b28      	ldr	r3, [pc, #160]	; (800e918 <Dialog_Pop+0xb4>)
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	4b28      	ldr	r3, [pc, #160]	; (800e91c <Dialog_Pop+0xb8>)
 800e87c:	2280      	movs	r2, #128	; 0x80
 800e87e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e882:	4b26      	ldr	r3, [pc, #152]	; (800e91c <Dialog_Pop+0xb8>)
 800e884:	2260      	movs	r2, #96	; 0x60
 800e886:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e88a:	4b24      	ldr	r3, [pc, #144]	; (800e91c <Dialog_Pop+0xb8>)
 800e88c:	2250      	movs	r2, #80	; 0x50
 800e88e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e892:	4b22      	ldr	r3, [pc, #136]	; (800e91c <Dialog_Pop+0xb8>)
 800e894:	22c8      	movs	r2, #200	; 0xc8
 800e896:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e89a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e89e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e8a2:	f7ff ff99 	bl	800e7d8 <PopColor>
 800e8a6:	f7ff fe89 	bl	800e5bc <Buil_Pop>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	211c      	movs	r1, #28
 800e8b0:	2008      	movs	r0, #8
 800e8b2:	f000 f8e1 	bl	800ea78 <NoteSTR>
 800e8b6:	4b1a      	ldr	r3, [pc, #104]	; (800e920 <Dialog_Pop+0xbc>)
 800e8b8:	2211      	movs	r2, #17
 800e8ba:	2108      	movs	r1, #8
 800e8bc:	200c      	movs	r0, #12
 800e8be:	f000 f8db 	bl	800ea78 <NoteSTR>
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	2208      	movs	r2, #8
 800e8ca:	210c      	movs	r1, #12
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f000 f979 	bl	800ebc4 <Note_4Point>
 800e8d2:	4b14      	ldr	r3, [pc, #80]	; (800e924 <Dialog_Pop+0xc0>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	2108      	movs	r1, #8
 800e8d8:	2018      	movs	r0, #24
 800e8da:	f000 f8cd 	bl	800ea78 <NoteSTR>
 800e8de:	4b12      	ldr	r3, [pc, #72]	; (800e928 <Dialog_Pop+0xc4>)
 800e8e0:	2211      	movs	r2, #17
 800e8e2:	2108      	movs	r1, #8
 800e8e4:	2048      	movs	r0, #72	; 0x48
 800e8e6:	f000 f8c7 	bl	800ea78 <NoteSTR>
 800e8ea:	230a      	movs	r3, #10
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	2148      	movs	r1, #72	; 0x48
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	f000 f965 	bl	800ebc4 <Note_4Point>
 800e8fa:	4b0c      	ldr	r3, [pc, #48]	; (800e92c <Dialog_Pop+0xc8>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2108      	movs	r1, #8
 800e900:	2054      	movs	r0, #84	; 0x54
 800e902:	f000 f8b9 	bl	800ea78 <NoteSTR>
 800e906:	4b05      	ldr	r3, [pc, #20]	; (800e91c <Dialog_Pop+0xb8>)
 800e908:	2200      	movs	r2, #0
 800e90a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e90e:	bf00      	nop
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	2000078e 	.word	0x2000078e
 800e91c:	20000140 	.word	0x20000140
 800e920:	080001c4 	.word	0x080001c4
 800e924:	080001c8 	.word	0x080001c8
 800e928:	080001d0 	.word	0x080001d0
 800e92c:	080001d4 	.word	0x080001d4

0800e930 <Calibrate_Pop>:
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	4b16      	ldr	r3, [pc, #88]	; (800e994 <Calibrate_Pop+0x64>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f043 0304 	orr.w	r3, r3, #4
 800e940:	b2da      	uxtb	r2, r3
 800e942:	4b14      	ldr	r3, [pc, #80]	; (800e994 <Calibrate_Pop+0x64>)
 800e944:	701a      	strb	r2, [r3, #0]
 800e946:	4b14      	ldr	r3, [pc, #80]	; (800e998 <Calibrate_Pop+0x68>)
 800e948:	22c8      	movs	r2, #200	; 0xc8
 800e94a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e94e:	4b12      	ldr	r3, [pc, #72]	; (800e998 <Calibrate_Pop+0x68>)
 800e950:	2240      	movs	r2, #64	; 0x40
 800e952:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e956:	4b10      	ldr	r3, [pc, #64]	; (800e998 <Calibrate_Pop+0x68>)
 800e958:	2232      	movs	r2, #50	; 0x32
 800e95a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e95e:	4b0e      	ldr	r3, [pc, #56]	; (800e998 <Calibrate_Pop+0x68>)
 800e960:	22e6      	movs	r2, #230	; 0xe6
 800e962:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e966:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e96a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e96e:	f7ff ff33 	bl	800e7d8 <PopColor>
 800e972:	f7ff fe23 	bl	800e5bc <Buil_Pop>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	210a      	movs	r1, #10
 800e97c:	2010      	movs	r0, #16
 800e97e:	f000 f87b 	bl	800ea78 <NoteSTR>
 800e982:	4b05      	ldr	r3, [pc, #20]	; (800e998 <Calibrate_Pop+0x68>)
 800e984:	2200      	movs	r2, #0
 800e986:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e98a:	bf00      	nop
 800e98c:	3708      	adds	r7, #8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	2000078e 	.word	0x2000078e
 800e998:	20000140 	.word	0x20000140

0800e99c <CalSave_Pop>:
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af02      	add	r7, sp, #8
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	4b2d      	ldr	r3, [pc, #180]	; (800ea5c <CalSave_Pop+0xc0>)
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	f043 0304 	orr.w	r3, r3, #4
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	4b2b      	ldr	r3, [pc, #172]	; (800ea5c <CalSave_Pop+0xc0>)
 800e9b0:	701a      	strb	r2, [r3, #0]
 800e9b2:	4b2b      	ldr	r3, [pc, #172]	; (800ea60 <CalSave_Pop+0xc4>)
 800e9b4:	22d0      	movs	r2, #208	; 0xd0
 800e9b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e9ba:	4b29      	ldr	r3, [pc, #164]	; (800ea60 <CalSave_Pop+0xc4>)
 800e9bc:	2260      	movs	r2, #96	; 0x60
 800e9be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800e9c2:	4b27      	ldr	r3, [pc, #156]	; (800ea60 <CalSave_Pop+0xc4>)
 800e9c4:	221e      	movs	r2, #30
 800e9c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e9ca:	4b25      	ldr	r3, [pc, #148]	; (800ea60 <CalSave_Pop+0xc4>)
 800e9cc:	22c8      	movs	r2, #200	; 0xc8
 800e9ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e9d2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e9d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e9da:	f7ff fefd 	bl	800e7d8 <PopColor>
 800e9de:	f7ff fded 	bl	800e5bc <Buil_Pop>
 800e9e2:	4b20      	ldr	r3, [pc, #128]	; (800ea64 <CalSave_Pop+0xc8>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	211c      	movs	r1, #28
 800e9e8:	2006      	movs	r0, #6
 800e9ea:	f000 f845 	bl	800ea78 <NoteSTR>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	211c      	movs	r1, #28
 800e9f4:	205a      	movs	r0, #90	; 0x5a
 800e9f6:	f000 f83f 	bl	800ea78 <NoteSTR>
 800e9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ea68 <CalSave_Pop+0xcc>)
 800e9fc:	2211      	movs	r2, #17
 800e9fe:	2108      	movs	r1, #8
 800ea00:	201e      	movs	r0, #30
 800ea02:	f000 f839 	bl	800ea78 <NoteSTR>
 800ea06:	230a      	movs	r3, #10
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	2208      	movs	r2, #8
 800ea0e:	211e      	movs	r1, #30
 800ea10:	2000      	movs	r0, #0
 800ea12:	f000 f8d7 	bl	800ebc4 <Note_4Point>
 800ea16:	4b15      	ldr	r3, [pc, #84]	; (800ea6c <CalSave_Pop+0xd0>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2108      	movs	r1, #8
 800ea1c:	202a      	movs	r0, #42	; 0x2a
 800ea1e:	f000 f82b 	bl	800ea78 <NoteSTR>
 800ea22:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <CalSave_Pop+0xd4>)
 800ea24:	2211      	movs	r2, #17
 800ea26:	2108      	movs	r1, #8
 800ea28:	2078      	movs	r0, #120	; 0x78
 800ea2a:	f000 f825 	bl	800ea78 <NoteSTR>
 800ea2e:	230a      	movs	r3, #10
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	2302      	movs	r3, #2
 800ea34:	2208      	movs	r2, #8
 800ea36:	2178      	movs	r1, #120	; 0x78
 800ea38:	2000      	movs	r0, #0
 800ea3a:	f000 f8c3 	bl	800ebc4 <Note_4Point>
 800ea3e:	4b0d      	ldr	r3, [pc, #52]	; (800ea74 <CalSave_Pop+0xd8>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	2108      	movs	r1, #8
 800ea44:	2084      	movs	r0, #132	; 0x84
 800ea46:	f000 f817 	bl	800ea78 <NoteSTR>
 800ea4a:	4b05      	ldr	r3, [pc, #20]	; (800ea60 <CalSave_Pop+0xc4>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2000078e 	.word	0x2000078e
 800ea60:	20000140 	.word	0x20000140
 800ea64:	080001dc 	.word	0x080001dc
 800ea68:	080001c4 	.word	0x080001c4
 800ea6c:	080001c8 	.word	0x080001c8
 800ea70:	080001d0 	.word	0x080001d0
 800ea74:	080001d4 	.word	0x080001d4

0800ea78 <NoteSTR>:
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	607b      	str	r3, [r7, #4]
 800ea80:	4603      	mov	r3, r0
 800ea82:	81fb      	strh	r3, [r7, #14]
 800ea84:	460b      	mov	r3, r1
 800ea86:	81bb      	strh	r3, [r7, #12]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	72fb      	strb	r3, [r7, #11]
 800ea8c:	4a48      	ldr	r2, [pc, #288]	; (800ebb0 <NoteSTR+0x138>)
 800ea8e:	89fb      	ldrh	r3, [r7, #14]
 800ea90:	8013      	strh	r3, [r2, #0]
 800ea92:	4a48      	ldr	r2, [pc, #288]	; (800ebb4 <NoteSTR+0x13c>)
 800ea94:	89bb      	ldrh	r3, [r7, #12]
 800ea96:	8013      	strh	r3, [r2, #0]
 800ea98:	e080      	b.n	800eb9c <NoteSTR+0x124>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	1c5a      	adds	r2, r3, #1
 800ea9e:	607a      	str	r2, [r7, #4]
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	747b      	strb	r3, [r7, #17]
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	82fb      	strh	r3, [r7, #22]
 800eaa8:	e074      	b.n	800eb94 <NoteSTR+0x11c>
 800eaaa:	7afb      	ldrb	r3, [r7, #11]
 800eaac:	f003 0310 	and.w	r3, r3, #16
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10e      	bne.n	800ead2 <NoteSTR+0x5a>
 800eab4:	7c7b      	ldrb	r3, [r7, #17]
 800eab6:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800eaba:	4613      	mov	r3, r2
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	4413      	add	r3, r2
 800eac0:	005b      	lsls	r3, r3, #1
 800eac2:	461a      	mov	r2, r3
 800eac4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eac8:	4413      	add	r3, r2
 800eaca:	4a3b      	ldr	r2, [pc, #236]	; (800ebb8 <NoteSTR+0x140>)
 800eacc:	5cd3      	ldrb	r3, [r2, r3]
 800eace:	827b      	strh	r3, [r7, #18]
 800ead0:	e00d      	b.n	800eaee <NoteSTR+0x76>
 800ead2:	7c7b      	ldrb	r3, [r7, #17]
 800ead4:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ead8:	4613      	mov	r3, r2
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	4413      	add	r3, r2
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	461a      	mov	r2, r3
 800eae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eae6:	4413      	add	r3, r2
 800eae8:	4a34      	ldr	r2, [pc, #208]	; (800ebbc <NoteSTR+0x144>)
 800eaea:	5cd3      	ldrb	r3, [r2, r3]
 800eaec:	827b      	strh	r3, [r7, #18]
 800eaee:	7afb      	ldrb	r3, [r7, #11]
 800eaf0:	f003 0320 	and.w	r3, r3, #32
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00c      	beq.n	800eb12 <NoteSTR+0x9a>
 800eaf8:	8afb      	ldrh	r3, [r7, #22]
 800eafa:	f003 0301 	and.w	r3, r3, #1
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <NoteSTR+0x90>
 800eb04:	4a2e      	ldr	r2, [pc, #184]	; (800ebc0 <NoteSTR+0x148>)
 800eb06:	e001      	b.n	800eb0c <NoteSTR+0x94>
 800eb08:	f245 5255 	movw	r2, #21845	; 0x5555
 800eb0c:	8a7b      	ldrh	r3, [r7, #18]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	827b      	strh	r3, [r7, #18]
 800eb12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	827b      	strh	r3, [r7, #18]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	82bb      	strh	r3, [r7, #20]
 800eb1e:	e01f      	b.n	800eb60 <NoteSTR+0xe8>
 800eb20:	8a7b      	ldrh	r3, [r7, #18]
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00b      	beq.n	800eb42 <NoteSTR+0xca>
 800eb2a:	7afb      	ldrb	r3, [r7, #11]
 800eb2c:	f003 0301 	and.w	r3, r3, #1
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bf0c      	ite	eq
 800eb34:	2301      	moveq	r3, #1
 800eb36:	2300      	movne	r3, #0
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fcac 	bl	800e498 <NotePixel>
 800eb40:	e006      	b.n	800eb50 <NoteSTR+0xd8>
 800eb42:	7afb      	ldrb	r3, [r7, #11]
 800eb44:	f003 0301 	and.w	r3, r3, #1
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff fca4 	bl	800e498 <NotePixel>
 800eb50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb54:	105b      	asrs	r3, r3, #1
 800eb56:	827b      	strh	r3, [r7, #18]
 800eb58:	8abb      	ldrh	r3, [r7, #20]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	82bb      	strh	r3, [r7, #20]
 800eb60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eb64:	2b0d      	cmp	r3, #13
 800eb66:	dddb      	ble.n	800eb20 <NoteSTR+0xa8>
 800eb68:	4b11      	ldr	r3, [pc, #68]	; (800ebb0 <NoteSTR+0x138>)
 800eb6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	3301      	adds	r3, #1
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	b21a      	sxth	r2, r3
 800eb76:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <NoteSTR+0x138>)
 800eb78:	801a      	strh	r2, [r3, #0]
 800eb7a:	4b0e      	ldr	r3, [pc, #56]	; (800ebb4 <NoteSTR+0x13c>)
 800eb7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	3b0e      	subs	r3, #14
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	b21a      	sxth	r2, r3
 800eb88:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <NoteSTR+0x13c>)
 800eb8a:	801a      	strh	r2, [r3, #0]
 800eb8c:	8afb      	ldrh	r3, [r7, #22]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	82fb      	strh	r3, [r7, #22]
 800eb94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb98:	2b05      	cmp	r3, #5
 800eb9a:	dd86      	ble.n	800eaaa <NoteSTR+0x32>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f47f af7a 	bne.w	800ea9a <NoteSTR+0x22>
 800eba6:	bf00      	nop
 800eba8:	bf00      	nop
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000002 	.word	0x20000002
 800ebb4:	20000004 	.word	0x20000004
 800ebb8:	080016c4 	.word	0x080016c4
 800ebbc:	08001490 	.word	0x08001490
 800ebc0:	ffffaaaa 	.word	0xffffaaaa

0800ebc4 <Note_4Point>:
 800ebc4:	b590      	push	{r4, r7, lr}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4604      	mov	r4, r0
 800ebcc:	4608      	mov	r0, r1
 800ebce:	4611      	mov	r1, r2
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	4623      	mov	r3, r4
 800ebd4:	71fb      	strb	r3, [r7, #7]
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	80bb      	strh	r3, [r7, #4]
 800ebda:	460b      	mov	r3, r1
 800ebdc:	807b      	strh	r3, [r7, #2]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	71bb      	strb	r3, [r7, #6]
 800ebe2:	7e3b      	ldrb	r3, [r7, #24]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	763b      	strb	r3, [r7, #24]
 800ebe8:	4a2e      	ldr	r2, [pc, #184]	; (800eca4 <Note_4Point+0xe0>)
 800ebea:	88bb      	ldrh	r3, [r7, #4]
 800ebec:	8013      	strh	r3, [r2, #0]
 800ebee:	4a2e      	ldr	r2, [pc, #184]	; (800eca8 <Note_4Point+0xe4>)
 800ebf0:	887b      	ldrh	r3, [r7, #2]
 800ebf2:	8013      	strh	r3, [r2, #0]
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	f003 0301 	and.w	r3, r3, #1
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fc4b 	bl	800e498 <NotePixel>
 800ec02:	4a28      	ldr	r2, [pc, #160]	; (800eca4 <Note_4Point+0xe0>)
 800ec04:	88bb      	ldrh	r3, [r7, #4]
 800ec06:	8013      	strh	r3, [r2, #0]
 800ec08:	7e3b      	ldrb	r3, [r7, #24]
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	887b      	ldrh	r3, [r7, #2]
 800ec0e:	4413      	add	r3, r2
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	3b01      	subs	r3, #1
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	b21a      	sxth	r2, r3
 800ec18:	4b23      	ldr	r3, [pc, #140]	; (800eca8 <Note_4Point+0xe4>)
 800ec1a:	801a      	strh	r2, [r3, #0]
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7ff fc37 	bl	800e498 <NotePixel>
 800ec2a:	79bb      	ldrb	r3, [r7, #6]
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	461a      	mov	r2, r3
 800ec30:	0052      	lsls	r2, r2, #1
 800ec32:	4413      	add	r3, r2
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	88bb      	ldrh	r3, [r7, #4]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	b21a      	sxth	r2, r3
 800ec44:	4b17      	ldr	r3, [pc, #92]	; (800eca4 <Note_4Point+0xe0>)
 800ec46:	801a      	strh	r2, [r3, #0]
 800ec48:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <Note_4Point+0xe4>)
 800ec4a:	887b      	ldrh	r3, [r7, #2]
 800ec4c:	8013      	strh	r3, [r2, #0]
 800ec4e:	79fb      	ldrb	r3, [r7, #7]
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fc1e 	bl	800e498 <NotePixel>
 800ec5c:	79bb      	ldrb	r3, [r7, #6]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	461a      	mov	r2, r3
 800ec62:	0052      	lsls	r2, r2, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	88bb      	ldrh	r3, [r7, #4]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	b21a      	sxth	r2, r3
 800ec76:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <Note_4Point+0xe0>)
 800ec78:	801a      	strh	r2, [r3, #0]
 800ec7a:	7e3b      	ldrb	r3, [r7, #24]
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	887b      	ldrh	r3, [r7, #2]
 800ec80:	4413      	add	r3, r2
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	3b01      	subs	r3, #1
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	b21a      	sxth	r2, r3
 800ec8a:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <Note_4Point+0xe4>)
 800ec8c:	801a      	strh	r2, [r3, #0]
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff fbfe 	bl	800e498 <NotePixel>
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd90      	pop	{r4, r7, pc}
 800eca4:	20000002 	.word	0x20000002
 800eca8:	20000004 	.word	0x20000004

0800ecac <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800ecba:	4b1d      	ldr	r3, [pc, #116]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ecc0:	e009      	b.n	800ecd6 <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800ecc2:	4b1b      	ldr	r3, [pc, #108]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	4919      	ldr	r1, [pc, #100]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecca:	600a      	str	r2, [r1, #0]
 800eccc:	4a19      	ldr	r2, [pc, #100]	; (800ed34 <ExtFlash_SendByte+0x88>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d901      	bls.n	800ecd6 <ExtFlash_SendByte+0x2a>
    	return 255;
 800ecd2:	23ff      	movs	r3, #255	; 0xff
 800ecd4:	e027      	b.n	800ed26 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800ecd6:	4818      	ldr	r0, [pc, #96]	; (800ed38 <ExtFlash_SendByte+0x8c>)
 800ecd8:	f00d ff9a 	bl	801cc10 <HAL_SPI_GetState>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d1ef      	bne.n	800ecc2 <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800ece2:	1df9      	adds	r1, r7, #7
 800ece4:	2301      	movs	r3, #1
 800ece6:	2201      	movs	r2, #1
 800ece8:	4813      	ldr	r0, [pc, #76]	; (800ed38 <ExtFlash_SendByte+0x8c>)
 800ecea:	f00d fa98 	bl	801c21e <HAL_SPI_Transmit>
  Tout = 0;
 800ecee:	4b10      	ldr	r3, [pc, #64]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ecf4:	e009      	b.n	800ed0a <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800ecf6:	4b0e      	ldr	r3, [pc, #56]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	490c      	ldr	r1, [pc, #48]	; (800ed30 <ExtFlash_SendByte+0x84>)
 800ecfe:	600a      	str	r2, [r1, #0]
 800ed00:	4a0c      	ldr	r2, [pc, #48]	; (800ed34 <ExtFlash_SendByte+0x88>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d901      	bls.n	800ed0a <ExtFlash_SendByte+0x5e>
    	return 255;
 800ed06:	23ff      	movs	r3, #255	; 0xff
 800ed08:	e00d      	b.n	800ed26 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800ed0a:	480b      	ldr	r0, [pc, #44]	; (800ed38 <ExtFlash_SendByte+0x8c>)
 800ed0c:	f00d ff80 	bl	801cc10 <HAL_SPI_GetState>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d1ef      	bne.n	800ecf6 <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800ed16:	f107 010f 	add.w	r1, r7, #15
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4806      	ldr	r0, [pc, #24]	; (800ed38 <ExtFlash_SendByte+0x8c>)
 800ed20:	f00d fbb9 	bl	801c496 <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	200015d0 	.word	0x200015d0
 800ed34:	000186a0 	.word	0x000186a0
 800ed38:	20006890 	.word	0x20006890

0800ed3c <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed46:	2200      	movs	r2, #0
 800ed48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed4c:	4812      	ldr	r0, [pc, #72]	; (800ed98 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ed4e:	f00a ff61 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800ed52:	2005      	movs	r0, #5
 800ed54:	f7ff ffaa 	bl	800ecac <ExtFlash_SendByte>
  Tout = 0;
 800ed58:	4b10      	ldr	r3, [pc, #64]	; (800ed9c <ExtFlash_WaitForWriteEnd+0x60>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800ed5e:	20a5      	movs	r0, #165	; 0xa5
 800ed60:	f7ff ffa4 	bl	800ecac <ExtFlash_SendByte>
 800ed64:	4603      	mov	r3, r0
 800ed66:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800ed68:	4b0c      	ldr	r3, [pc, #48]	; (800ed9c <ExtFlash_WaitForWriteEnd+0x60>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	490b      	ldr	r1, [pc, #44]	; (800ed9c <ExtFlash_WaitForWriteEnd+0x60>)
 800ed70:	600a      	str	r2, [r1, #0]
 800ed72:	4a0b      	ldr	r2, [pc, #44]	; (800eda0 <ExtFlash_WaitForWriteEnd+0x64>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d80b      	bhi.n	800ed90 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1ed      	bne.n	800ed5e <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ed82:	2201      	movs	r2, #1
 800ed84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed88:	4803      	ldr	r0, [pc, #12]	; (800ed98 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ed8a:	f00a ff43 	bl	8019c14 <HAL_GPIO_WritePin>
 800ed8e:	e000      	b.n	800ed92 <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ed90:	bf00      	nop
}
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	40020400 	.word	0x40020400
 800ed9c:	200015d0 	.word	0x200015d0
 800eda0:	000186a0 	.word	0x000186a0

0800eda4 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800edb2:	2201      	movs	r2, #1
 800edb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edb8:	481d      	ldr	r0, [pc, #116]	; (800ee30 <ExtFlash_PageRD+0x8c>)
 800edba:	f00a ff2b 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800edbe:	f7ff ffbd 	bl	800ed3c <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800edc2:	2200      	movs	r2, #0
 800edc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800edc8:	4819      	ldr	r0, [pc, #100]	; (800ee30 <ExtFlash_PageRD+0x8c>)
 800edca:	f00a ff23 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800edce:	2003      	movs	r0, #3
 800edd0:	f7ff ff6c 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	0c1b      	lsrs	r3, r3, #16
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff ff66 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	0a1b      	lsrs	r3, r3, #8
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff ff60 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ff5b 	bl	800ecac <ExtFlash_SendByte>

  while(Length--)
 800edf6:	e009      	b.n	800ee0c <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800edf8:	20a5      	movs	r0, #165	; 0xa5
 800edfa:	f7ff ff57 	bl	800ecac <ExtFlash_SendByte>
 800edfe:	4603      	mov	r3, r0
 800ee00:	461a      	mov	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ee0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	3a01      	subs	r2, #1
 800ee14:	b292      	uxth	r2, r2
 800ee16:	80fa      	strh	r2, [r7, #6]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1ed      	bne.n	800edf8 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee22:	4803      	ldr	r0, [pc, #12]	; (800ee30 <ExtFlash_PageRD+0x8c>)
 800ee24:	f00a fef6 	bl	8019c14 <HAL_GPIO_WritePin>
}
 800ee28:	bf00      	nop
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	40020400 	.word	0x40020400

0800ee34 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee3e:	4807      	ldr	r0, [pc, #28]	; (800ee5c <ExtFlash_WriteEnable+0x28>)
 800ee40:	f00a fee8 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ee44:	2006      	movs	r0, #6
 800ee46:	f7ff ff31 	bl	800ecac <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee50:	4802      	ldr	r0, [pc, #8]	; (800ee5c <ExtFlash_WriteEnable+0x28>)
 800ee52:	f00a fedf 	bl	8019c14 <HAL_GPIO_WritePin>
}
 800ee56:	bf00      	nop
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	40020400 	.word	0x40020400

0800ee60 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ee6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee6e:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ee70:	2201      	movs	r2, #1
 800ee72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee76:	481f      	ldr	r0, [pc, #124]	; (800eef4 <ExtFlash_PageProg+0x94>)
 800ee78:	f00a fecc 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ee7c:	f7ff ff5e 	bl	800ed3c <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800ee80:	f7ff ffd8 	bl	800ee34 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ee84:	2200      	movs	r2, #0
 800ee86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ee8a:	481a      	ldr	r0, [pc, #104]	; (800eef4 <ExtFlash_PageProg+0x94>)
 800ee8c:	f00a fec2 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800ee90:	2002      	movs	r0, #2
 800ee92:	f7ff ff0b 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	0c1b      	lsrs	r3, r3, #16
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7ff ff05 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	0a1b      	lsrs	r3, r3, #8
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff feff 	bl	800ecac <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fefa 	bl	800ecac <ExtFlash_SendByte>
  while(Lenght--) {
 800eeb8:	e007      	b.n	800eeca <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff fef4 	bl	800ecac <ExtFlash_SendByte>
    pBuffer++;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	3301      	adds	r3, #1
 800eec8:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800eeca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eece:	b29a      	uxth	r2, r3
 800eed0:	3a01      	subs	r2, #1
 800eed2:	b292      	uxth	r2, r2
 800eed4:	81fa      	strh	r2, [r7, #14]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1ef      	bne.n	800eeba <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800eeda:	2201      	movs	r2, #1
 800eedc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eee0:	4804      	ldr	r0, [pc, #16]	; (800eef4 <ExtFlash_PageProg+0x94>)
 800eee2:	f00a fe97 	bl	8019c14 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800eee6:	f7ff ff29 	bl	800ed3c <ExtFlash_WaitForWriteEnd>
}
 800eeea:	bf00      	nop
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	40020400 	.word	0x40020400

0800eef8 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800ef00:	f7ff ff98 	bl	800ee34 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ef04:	2200      	movs	r2, #0
 800ef06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef0a:	4811      	ldr	r0, [pc, #68]	; (800ef50 <ExtFLASH_SectorErase+0x58>)
 800ef0c:	f00a fe82 	bl	8019c14 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800ef10:	2020      	movs	r0, #32
 800ef12:	f7ff fecb 	bl	800ecac <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	0c1b      	lsrs	r3, r3, #16
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff fec5 	bl	800ecac <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	0a1b      	lsrs	r3, r3, #8
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7ff febf 	bl	800ecac <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff feba 	bl	800ecac <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ef3e:	4804      	ldr	r0, [pc, #16]	; (800ef50 <ExtFLASH_SectorErase+0x58>)
 800ef40:	f00a fe68 	bl	8019c14 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ef44:	f7ff fefa 	bl	800ed3c <ExtFlash_WaitForWriteEnd>
}
 800ef48:	bf00      	nop
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	40020400 	.word	0x40020400

0800ef54 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b0c8      	sub	sp, #288	; 0x120
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	1d3b      	adds	r3, r7, #4
 800ef5c:	6018      	str	r0, [r3, #0]
 800ef5e:	463b      	mov	r3, r7
 800ef60:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800ef68:	2300      	movs	r3, #0
 800ef6a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800ef74:	463b      	mov	r3, r7
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	4b3b      	ldr	r3, [pc, #236]	; (800f068 <ExtFlash_PageWR+0x114>)
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800ef80:	2310      	movs	r3, #16
 800ef82:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ef86:	e02e      	b.n	800efe6 <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800ef88:	f107 030c 	add.w	r3, r7, #12
 800ef8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef90:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff ff05 	bl	800eda4 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800efa0:	e012      	b.n	800efc8 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800efa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800efac:	f107 020c 	add.w	r2, r7, #12
 800efb0:	5cd3      	ldrb	r3, [r2, r3]
 800efb2:	2bff      	cmp	r3, #255	; 0xff
 800efb4:	d003      	beq.n	800efbe <ExtFlash_PageWR+0x6a>
        flag=1;
 800efb6:	2301      	movs	r3, #1
 800efb8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800efbc:	e008      	b.n	800efd0 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800efbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc2:	3301      	adds	r3, #1
 800efc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800efc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efcc:	2bfe      	cmp	r3, #254	; 0xfe
 800efce:	d9e8      	bls.n	800efa2 <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800efd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800efd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800efd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800efdc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800efe0:	3b01      	subs	r3, #1
 800efe2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800efe6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1cc      	bne.n	800ef88 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800efee:	2310      	movs	r3, #16
 800eff0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800eff4:	463b      	mov	r3, r7
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <ExtFlash_PageWR+0x114>)
 800effa:	4013      	ands	r3, r2
 800effc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800f000:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f004:	2b01      	cmp	r3, #1
 800f006:	d103      	bne.n	800f010 <ExtFlash_PageWR+0xbc>
 800f008:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800f00c:	f7ff ff74 	bl	800eef8 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800f010:	1d3b      	adds	r3, r7, #4
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f018:	2300      	movs	r3, #0
 800f01a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f01e:	e016      	b.n	800f04e <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800f020:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f024:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f028:	f7ff ff1a 	bl	800ee60 <ExtFlash_PageProg>
    addr+=256;
 800f02c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f030:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f034:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800f038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f03c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f040:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800f044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f048:	3301      	adds	r3, #1
 800f04a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f04e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f056:	429a      	cmp	r2, r3
 800f058:	d3e2      	bcc.n	800f020 <ExtFlash_PageWR+0xcc>
  }
}
 800f05a:	bf00      	nop
 800f05c:	bf00      	nop
 800f05e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	00fff000 	.word	0x00fff000

0800f06c <ReadDiskData>:
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	4613      	mov	r3, r2
 800f078:	80fb      	strh	r3, [r7, #6]
 800f07a:	2300      	movs	r3, #0
 800f07c:	75fb      	strb	r3, [r7, #23]
 800f07e:	4b0d      	ldr	r3, [pc, #52]	; (800f0b4 <ReadDiskData+0x48>)
 800f080:	2200      	movs	r2, #0
 800f082:	701a      	strb	r2, [r3, #0]
 800f084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f088:	461a      	mov	r2, r3
 800f08a:	68b9      	ldr	r1, [r7, #8]
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7ff fe89 	bl	800eda4 <ExtFlash_PageRD>
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	1c5a      	adds	r2, r3, #1
 800f096:	75fa      	strb	r2, [r7, #23]
 800f098:	2b06      	cmp	r3, #6
 800f09a:	d901      	bls.n	800f0a0 <ReadDiskData+0x34>
 800f09c:	2301      	movs	r3, #1
 800f09e:	e004      	b.n	800f0aa <ReadDiskData+0x3e>
 800f0a0:	4b04      	ldr	r3, [pc, #16]	; (800f0b4 <ReadDiskData+0x48>)
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d1ea      	bne.n	800f07e <ReadDiskData+0x12>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	2000078f 	.word	0x2000078f

0800f0b8 <OpenFileRd>:
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	603b      	str	r3, [r7, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	801a      	strh	r2, [r3, #0]
 800f0cc:	4b35      	ldr	r3, [pc, #212]	; (800f1a4 <OpenFileRd+0xec>)
 800f0ce:	689a      	ldr	r2, [r3, #8]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	e05b      	b.n	800f18e <OpenFileRd+0xd6>
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a32      	ldr	r2, [pc, #200]	; (800f1a4 <OpenFileRd+0xec>)
 800f0dc:	6952      	ldr	r2, [r2, #20]
 800f0de:	b212      	sxth	r2, r2
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7ff ffc2 	bl	800f06c <ReadDiskData>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d001      	beq.n	800f0f2 <OpenFileRd+0x3a>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e054      	b.n	800f19c <OpenFileRd+0xe4>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	82bb      	strh	r3, [r7, #20]
 800f0f6:	e044      	b.n	800f182 <OpenFileRd+0xca>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	82fb      	strh	r3, [r7, #22]
 800f0fc:	e031      	b.n	800f162 <OpenFileRd+0xaa>
 800f0fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f102:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f106:	4413      	add	r3, r2
 800f108:	461a      	mov	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	4413      	add	r3, r2
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d01e      	beq.n	800f152 <OpenFileRd+0x9a>
 800f114:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f118:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f11c:	4413      	add	r3, r2
 800f11e:	461a      	mov	r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4413      	add	r3, r2
 800f124:	781a      	ldrb	r2, [r3, #0]
 800f126:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	440b      	add	r3, r1
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	429a      	cmp	r2, r3
 800f132:	d11b      	bne.n	800f16c <OpenFileRd+0xb4>
 800f134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f138:	2b0a      	cmp	r3, #10
 800f13a:	d10c      	bne.n	800f156 <OpenFileRd+0x9e>
 800f13c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f140:	331a      	adds	r3, #26
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	4413      	add	r3, r2
 800f146:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	801a      	strh	r2, [r3, #0]
 800f14e:	2300      	movs	r3, #0
 800f150:	e024      	b.n	800f19c <OpenFileRd+0xe4>
 800f152:	2304      	movs	r3, #4
 800f154:	e022      	b.n	800f19c <OpenFileRd+0xe4>
 800f156:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	3301      	adds	r3, #1
 800f15e:	b29b      	uxth	r3, r3
 800f160:	82fb      	strh	r3, [r7, #22]
 800f162:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f166:	2b0a      	cmp	r3, #10
 800f168:	ddc9      	ble.n	800f0fe <OpenFileRd+0x46>
 800f16a:	e000      	b.n	800f16e <OpenFileRd+0xb6>
 800f16c:	bf00      	nop
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f103 0220 	add.w	r2, r3, #32
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	601a      	str	r2, [r3, #0]
 800f17a:	8abb      	ldrh	r3, [r7, #20]
 800f17c:	3320      	adds	r3, #32
 800f17e:	b29b      	uxth	r3, r3
 800f180:	82bb      	strh	r3, [r7, #20]
 800f182:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800f186:	4b07      	ldr	r3, [pc, #28]	; (800f1a4 <OpenFileRd+0xec>)
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d3b4      	bcc.n	800f0f8 <OpenFileRd+0x40>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	4b04      	ldr	r3, [pc, #16]	; (800f1a4 <OpenFileRd+0xec>)
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	429a      	cmp	r2, r3
 800f198:	d39d      	bcc.n	800f0d6 <OpenFileRd+0x1e>
 800f19a:	2303      	movs	r3, #3
 800f19c:	4618      	mov	r0, r3
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	20000194 	.word	0x20000194

0800f1a8 <ProgDiskPage>:
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	73fb      	strb	r3, [r7, #15]
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <ProgDiskPage+0x40>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	701a      	strb	r2, [r3, #0]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	4619      	mov	r1, r3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7ff fec7 	bl	800ef54 <ExtFlash_PageWR>
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	73fa      	strb	r2, [r7, #15]
 800f1cc:	2b06      	cmp	r3, #6
 800f1ce:	d901      	bls.n	800f1d4 <ProgDiskPage+0x2c>
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e004      	b.n	800f1de <ProgDiskPage+0x36>
 800f1d4:	4b04      	ldr	r3, [pc, #16]	; (800f1e8 <ProgDiskPage+0x40>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1ec      	bne.n	800f1b6 <ProgDiskPage+0xe>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	2000078f 	.word	0x2000078f

0800f1ec <SeekBlank>:
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b084      	sub	sp, #16
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	73fb      	strb	r3, [r7, #15]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	3302      	adds	r3, #2
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f204:	801a      	strh	r2, [r3, #0]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2200      	movs	r2, #0
 800f20a:	801a      	strh	r2, [r3, #0]
 800f20c:	e05b      	b.n	800f2c6 <SeekBlank+0xda>
 800f20e:	4b34      	ldr	r3, [pc, #208]	; (800f2e0 <SeekBlank+0xf4>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	683a      	ldr	r2, [r7, #0]
 800f214:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f218:	441a      	add	r2, r3
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f220:	0fd9      	lsrs	r1, r3, #31
 800f222:	440b      	add	r3, r1
 800f224:	105b      	asrs	r3, r3, #1
 800f226:	b21b      	sxth	r3, r3
 800f228:	18d1      	adds	r1, r2, r3
 800f22a:	f107 0308 	add.w	r3, r7, #8
 800f22e:	2202      	movs	r2, #2
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff ff1b 	bl	800f06c <ReadDiskData>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <SeekBlank+0x54>
 800f23c:	2301      	movs	r3, #1
 800f23e:	e04a      	b.n	800f2d6 <SeekBlank+0xea>
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f246:	b29b      	uxth	r3, r3
 800f248:	f003 0301 	and.w	r3, r3, #1
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d006      	beq.n	800f25e <SeekBlank+0x72>
 800f250:	f107 0308 	add.w	r3, r7, #8
 800f254:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f258:	111b      	asrs	r3, r3, #4
 800f25a:	b21b      	sxth	r3, r3
 800f25c:	e006      	b.n	800f26c <SeekBlank+0x80>
 800f25e:	f107 0308 	add.w	r3, r7, #8
 800f262:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f26a:	b21b      	sxth	r3, r3
 800f26c:	81bb      	strh	r3, [r7, #12]
 800f26e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d10f      	bne.n	800f296 <SeekBlank+0xaa>
 800f276:	7bfb      	ldrb	r3, [r7, #15]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10c      	bne.n	800f296 <SeekBlank+0xaa>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	3302      	adds	r3, #2
 800f286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d003      	beq.n	800f296 <SeekBlank+0xaa>
 800f28e:	2301      	movs	r3, #1
 800f290:	73fb      	strb	r3, [r7, #15]
 800f292:	2300      	movs	r3, #0
 800f294:	e01f      	b.n	800f2d6 <SeekBlank+0xea>
 800f296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10a      	bne.n	800f2b4 <SeekBlank+0xc8>
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d107      	bne.n	800f2b4 <SeekBlank+0xc8>
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2ae:	801a      	strh	r2, [r3, #0]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	73fb      	strb	r3, [r7, #15]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	3301      	adds	r3, #1
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	b21a      	sxth	r2, r3
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	801a      	strh	r2, [r3, #0]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	dd9c      	ble.n	800f20e <SeekBlank+0x22>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	20000194 	.word	0x20000194

0800f2e4 <SetCluster>:
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	885b      	ldrh	r3, [r3, #2]
 800f2f2:	82fb      	strh	r3, [r7, #22]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	82bb      	strh	r3, [r7, #20]
 800f2fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f2fe:	0fda      	lsrs	r2, r3, #31
 800f300:	4413      	add	r3, r2
 800f302:	105b      	asrs	r3, r3, #1
 800f304:	b21b      	sxth	r3, r3
 800f306:	b29a      	uxth	r2, r3
 800f308:	8afb      	ldrh	r3, [r7, #22]
 800f30a:	4413      	add	r3, r2
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	827b      	strh	r3, [r7, #18]
 800f310:	4b36      	ldr	r3, [pc, #216]	; (800f3ec <SetCluster+0x108>)
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f318:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f31c:	4413      	add	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	8a7b      	ldrh	r3, [r7, #18]
 800f322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f326:	827b      	strh	r3, [r7, #18]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	4a30      	ldr	r2, [pc, #192]	; (800f3ec <SetCluster+0x108>)
 800f32c:	6952      	ldr	r2, [r2, #20]
 800f32e:	b212      	sxth	r2, r2
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff fe9a 	bl	800f06c <ReadDiskData>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d001      	beq.n	800f342 <SetCluster+0x5e>
 800f33e:	2301      	movs	r3, #1
 800f340:	e04f      	b.n	800f3e2 <SetCluster+0xfe>
 800f342:	8afb      	ldrh	r3, [r7, #22]
 800f344:	f003 0301 	and.w	r3, r3, #1
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01e      	beq.n	800f38a <SetCluster+0xa6>
 800f34c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	4413      	add	r3, r2
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	f003 030f 	and.w	r3, r3, #15
 800f35a:	b2d9      	uxtb	r1, r3
 800f35c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f360:	011b      	lsls	r3, r3, #4
 800f362:	b2da      	uxtb	r2, r3
 800f364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4403      	add	r3, r0
 800f36c:	440a      	add	r2, r1
 800f36e:	b2d2      	uxtb	r2, r2
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f376:	111b      	asrs	r3, r3, #4
 800f378:	b219      	sxth	r1, r3
 800f37a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f37e:	3301      	adds	r3, #1
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	4413      	add	r3, r2
 800f384:	b2ca      	uxtb	r2, r1
 800f386:	701a      	strb	r2, [r3, #0]
 800f388:	e021      	b.n	800f3ce <SetCluster+0xea>
 800f38a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	4413      	add	r3, r2
 800f392:	8aba      	ldrh	r2, [r7, #20]
 800f394:	b2d2      	uxtb	r2, r2
 800f396:	701a      	strb	r2, [r3, #0]
 800f398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f39c:	3301      	adds	r3, #1
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	b25b      	sxtb	r3, r3
 800f3a6:	f023 030f 	bic.w	r3, r3, #15
 800f3aa:	b25a      	sxtb	r2, r3
 800f3ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f3b0:	121b      	asrs	r3, r3, #8
 800f3b2:	b21b      	sxth	r3, r3
 800f3b4:	b25b      	sxtb	r3, r3
 800f3b6:	f003 030f 	and.w	r3, r3, #15
 800f3ba:	b25b      	sxtb	r3, r3
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	b259      	sxtb	r1, r3
 800f3c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	b2ca      	uxtb	r2, r1
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	68f9      	ldr	r1, [r7, #12]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff fee9 	bl	800f1a8 <ProgDiskPage>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <SetCluster+0xfc>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e000      	b.n	800f3e2 <SetCluster+0xfe>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	20000194 	.word	0x20000194

0800f3f0 <NextCluster>:
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	4b27      	ldr	r3, [pc, #156]	; (800f498 <NextCluster+0xa8>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f402:	4618      	mov	r0, r3
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f40a:	0fd9      	lsrs	r1, r3, #31
 800f40c:	440b      	add	r3, r1
 800f40e:	105b      	asrs	r3, r3, #1
 800f410:	b21b      	sxth	r3, r3
 800f412:	4403      	add	r3, r0
 800f414:	4413      	add	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3302      	adds	r3, #2
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f422:	801a      	strh	r2, [r3, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	801a      	strh	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	3302      	adds	r3, #2
 800f42e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f432:	461a      	mov	r2, r3
 800f434:	4b18      	ldr	r3, [pc, #96]	; (800f498 <NextCluster+0xa8>)
 800f436:	699b      	ldr	r3, [r3, #24]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d205      	bcs.n	800f448 <NextCluster+0x58>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3302      	adds	r3, #2
 800f440:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f444:	2b01      	cmp	r3, #1
 800f446:	dc01      	bgt.n	800f44c <NextCluster+0x5c>
 800f448:	2301      	movs	r3, #1
 800f44a:	e021      	b.n	800f490 <NextCluster+0xa0>
 800f44c:	68f9      	ldr	r1, [r7, #12]
 800f44e:	f107 030a 	add.w	r3, r7, #10
 800f452:	2202      	movs	r2, #2
 800f454:	4618      	mov	r0, r3
 800f456:	f7ff fe09 	bl	800f06c <ReadDiskData>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <NextCluster+0x74>
 800f460:	2301      	movs	r3, #1
 800f462:	e015      	b.n	800f490 <NextCluster+0xa0>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3302      	adds	r3, #2
 800f468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d004      	beq.n	800f480 <NextCluster+0x90>
 800f476:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f47a:	111b      	asrs	r3, r3, #4
 800f47c:	b21b      	sxth	r3, r3
 800f47e:	e004      	b.n	800f48a <NextCluster+0x9a>
 800f480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f488:	b21b      	sxth	r3, r3
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	8013      	strh	r3, [r2, #0]
 800f48e:	2300      	movs	r3, #0
 800f490:	4618      	mov	r0, r3
 800f492:	3710      	adds	r7, #16
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	20000194 	.word	0x20000194

0800f49c <ProgFileSec>:
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
 800f4a6:	4b1f      	ldr	r3, [pc, #124]	; (800f524 <ProgFileSec+0x88>)
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	4b1e      	ldr	r3, [pc, #120]	; (800f524 <ProgFileSec+0x88>)
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f4b4:	3902      	subs	r1, #2
 800f4b6:	fb01 f303 	mul.w	r3, r1, r3
 800f4ba:	4413      	add	r3, r2
 800f4bc:	60fb      	str	r3, [r7, #12]
 800f4be:	68f9      	ldr	r1, [r7, #12]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff fe71 	bl	800f1a8 <ProgDiskPage>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d001      	beq.n	800f4d0 <ProgFileSec+0x34>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e025      	b.n	800f51c <ProgFileSec+0x80>
 800f4d0:	6838      	ldr	r0, [r7, #0]
 800f4d2:	f7ff ff8d 	bl	800f3f0 <NextCluster>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <ProgFileSec+0x44>
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e01d      	b.n	800f51c <ProgFileSec+0x80>
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	885b      	ldrh	r3, [r3, #2]
 800f4e4:	817b      	strh	r3, [r7, #10]
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d114      	bne.n	800f51a <ProgFileSec+0x7e>
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	897a      	ldrh	r2, [r7, #10]
 800f4f4:	801a      	strh	r2, [r3, #0]
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fe77 	bl	800f1ec <SeekBlank>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <ProgFileSec+0x6c>
 800f504:	2303      	movs	r3, #3
 800f506:	e009      	b.n	800f51c <ProgFileSec+0x80>
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff feea 	bl	800f2e4 <SetCluster>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <ProgFileSec+0x7e>
 800f516:	2301      	movs	r3, #1
 800f518:	e000      	b.n	800f51c <ProgFileSec+0x80>
 800f51a:	2300      	movs	r3, #0
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	20000194 	.word	0x20000194

0800f528 <ReadFileSec>:
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
 800f532:	4b13      	ldr	r3, [pc, #76]	; (800f580 <ReadFileSec+0x58>)
 800f534:	68da      	ldr	r2, [r3, #12]
 800f536:	4b12      	ldr	r3, [pc, #72]	; (800f580 <ReadFileSec+0x58>)
 800f538:	695b      	ldr	r3, [r3, #20]
 800f53a:	6839      	ldr	r1, [r7, #0]
 800f53c:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f540:	3902      	subs	r1, #2
 800f542:	fb01 f303 	mul.w	r3, r1, r3
 800f546:	4413      	add	r3, r2
 800f548:	60fb      	str	r3, [r7, #12]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	4a0c      	ldr	r2, [pc, #48]	; (800f580 <ReadFileSec+0x58>)
 800f54e:	6952      	ldr	r2, [r2, #20]
 800f550:	b212      	sxth	r2, r2
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff fd89 	bl	800f06c <ReadDiskData>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <ReadFileSec+0x3c>
 800f560:	2301      	movs	r3, #1
 800f562:	e008      	b.n	800f576 <ReadFileSec+0x4e>
 800f564:	6838      	ldr	r0, [r7, #0]
 800f566:	f7ff ff43 	bl	800f3f0 <NextCluster>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d001      	beq.n	800f574 <ReadFileSec+0x4c>
 800f570:	2302      	movs	r3, #2
 800f572:	e000      	b.n	800f576 <ReadFileSec+0x4e>
 800f574:	2300      	movs	r3, #0
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20000194 	.word	0x20000194

0800f584 <CloseFile>:
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
 800f592:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f596:	617b      	str	r3, [r7, #20]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f59e:	801a      	strh	r2, [r3, #0]
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f7ff fe9e 	bl	800f2e4 <SetCluster>
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	43db      	mvns	r3, r3
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4b24      	ldr	r3, [pc, #144]	; (800f648 <CloseFile+0xc4>)
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	b21b      	sxth	r3, r3
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f7ff fd55 	bl	800f06c <ReadDiskData>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <CloseFile+0x48>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e039      	b.n	800f640 <CloseFile+0xbc>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	330b      	adds	r3, #11
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4413      	add	r3, r2
 800f5da:	2220      	movs	r2, #32
 800f5dc:	701a      	strb	r2, [r3, #0]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	331c      	adds	r3, #28
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	43db      	mvns	r3, r3
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7ff fdd3 	bl	800f1a8 <ProgDiskPage>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d001      	beq.n	800f60c <CloseFile+0x88>
 800f608:	2301      	movs	r3, #1
 800f60a:	e019      	b.n	800f640 <CloseFile+0xbc>
 800f60c:	4b0e      	ldr	r3, [pc, #56]	; (800f648 <CloseFile+0xc4>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a0d      	ldr	r2, [pc, #52]	; (800f648 <CloseFile+0xc4>)
 800f612:	6952      	ldr	r2, [r2, #20]
 800f614:	b212      	sxth	r2, r2
 800f616:	4619      	mov	r1, r3
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f7ff fd27 	bl	800f06c <ReadDiskData>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <CloseFile+0xa4>
 800f624:	2301      	movs	r3, #1
 800f626:	e00b      	b.n	800f640 <CloseFile+0xbc>
 800f628:	4b07      	ldr	r3, [pc, #28]	; (800f648 <CloseFile+0xc4>)
 800f62a:	685b      	ldr	r3, [r3, #4]
 800f62c:	4619      	mov	r1, r3
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f7ff fdba 	bl	800f1a8 <ProgDiskPage>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <CloseFile+0xba>
 800f63a:	2301      	movs	r3, #1
 800f63c:	e000      	b.n	800f640 <CloseFile+0xbc>
 800f63e:	2300      	movs	r3, #0
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	20000194 	.word	0x20000194

0800f64c <OpenFileWr>:
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f7ff fd29 	bl	800f0b8 <OpenFileRd>
 800f666:	4603      	mov	r3, r0
 800f668:	61fb      	str	r3, [r7, #28]
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	2b04      	cmp	r3, #4
 800f66e:	d002      	beq.n	800f676 <OpenFileWr+0x2a>
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	e045      	b.n	800f702 <OpenFileWr+0xb6>
 800f676:	6879      	ldr	r1, [r7, #4]
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7ff fdb7 	bl	800f1ec <SeekBlank>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <OpenFileWr+0x3c>
 800f684:	2303      	movs	r3, #3
 800f686:	e03c      	b.n	800f702 <OpenFileWr+0xb6>
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f690:	61bb      	str	r3, [r7, #24]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	617b      	str	r3, [r7, #20]
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	4a1b      	ldr	r2, [pc, #108]	; (800f70c <OpenFileWr+0xc0>)
 800f6a0:	6952      	ldr	r2, [r2, #20]
 800f6a2:	b212      	sxth	r2, r2
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff fce0 	bl	800f06c <ReadDiskData>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <OpenFileWr+0x6a>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e025      	b.n	800f702 <OpenFileWr+0xb6>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	61fb      	str	r3, [r7, #28]
 800f6ba:	e00d      	b.n	800f6d8 <OpenFileWr+0x8c>
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	441a      	add	r2, r3
 800f6c2:	69b9      	ldr	r1, [r7, #24]
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	440b      	add	r3, r1
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	440b      	add	r3, r1
 800f6ce:	7812      	ldrb	r2, [r2, #0]
 800f6d0:	701a      	strb	r2, [r3, #0]
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	61fb      	str	r3, [r7, #28]
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	2b0a      	cmp	r3, #10
 800f6dc:	ddee      	ble.n	800f6bc <OpenFileWr+0x70>
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	331a      	adds	r3, #26
 800f6e2:	68fa      	ldr	r2, [r7, #12]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f6ec:	801a      	strh	r2, [r3, #0]
 800f6ee:	6979      	ldr	r1, [r7, #20]
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7ff fd59 	bl	800f1a8 <ProgDiskPage>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d001      	beq.n	800f700 <OpenFileWr+0xb4>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e000      	b.n	800f702 <OpenFileWr+0xb6>
 800f700:	2300      	movs	r3, #0
 800f702:	4618      	mov	r0, r3
 800f704:	3720      	adds	r7, #32
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	20000194 	.word	0x20000194

0800f710 <Color_Num>:
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	4603      	mov	r3, r0
 800f718:	80fb      	strh	r3, [r7, #6]
 800f71a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f71e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f722:	4013      	ands	r3, r2
 800f724:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f728:	4293      	cmp	r3, r2
 800f72a:	d101      	bne.n	800f730 <Color_Num+0x20>
 800f72c:	2301      	movs	r3, #1
 800f72e:	e068      	b.n	800f802 <Color_Num+0xf2>
 800f730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f734:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f738:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f73c:	d101      	bne.n	800f742 <Color_Num+0x32>
 800f73e:	2302      	movs	r3, #2
 800f740:	e05f      	b.n	800f802 <Color_Num+0xf2>
 800f742:	88fb      	ldrh	r3, [r7, #6]
 800f744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f748:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d101      	bne.n	800f754 <Color_Num+0x44>
 800f750:	2303      	movs	r3, #3
 800f752:	e056      	b.n	800f802 <Color_Num+0xf2>
 800f754:	88fb      	ldrh	r3, [r7, #6]
 800f756:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f75a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f75e:	d101      	bne.n	800f764 <Color_Num+0x54>
 800f760:	2304      	movs	r3, #4
 800f762:	e04e      	b.n	800f802 <Color_Num+0xf2>
 800f764:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f768:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f76c:	4013      	ands	r3, r2
 800f76e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f772:	4293      	cmp	r3, r2
 800f774:	d101      	bne.n	800f77a <Color_Num+0x6a>
 800f776:	2305      	movs	r3, #5
 800f778:	e043      	b.n	800f802 <Color_Num+0xf2>
 800f77a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f77e:	f248 0310 	movw	r3, #32784	; 0x8010
 800f782:	4013      	ands	r3, r2
 800f784:	f248 0210 	movw	r2, #32784	; 0x8010
 800f788:	4293      	cmp	r3, r2
 800f78a:	d101      	bne.n	800f790 <Color_Num+0x80>
 800f78c:	2306      	movs	r3, #6
 800f78e:	e038      	b.n	800f802 <Color_Num+0xf2>
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f796:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f79a:	d101      	bne.n	800f7a0 <Color_Num+0x90>
 800f79c:	2307      	movs	r3, #7
 800f79e:	e030      	b.n	800f802 <Color_Num+0xf2>
 800f7a0:	88fb      	ldrh	r3, [r7, #6]
 800f7a2:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f7a6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f7aa:	d101      	bne.n	800f7b0 <Color_Num+0xa0>
 800f7ac:	2308      	movs	r3, #8
 800f7ae:	e028      	b.n	800f802 <Color_Num+0xf2>
 800f7b0:	88fb      	ldrh	r3, [r7, #6]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d101      	bne.n	800f7c6 <Color_Num+0xb6>
 800f7c2:	2309      	movs	r3, #9
 800f7c4:	e01d      	b.n	800f802 <Color_Num+0xf2>
 800f7c6:	88fb      	ldrh	r3, [r7, #6]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	f240 531f 	movw	r3, #1311	; 0x51f
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	f240 521f 	movw	r2, #1311	; 0x51f
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d101      	bne.n	800f7dc <Color_Num+0xcc>
 800f7d8:	230a      	movs	r3, #10
 800f7da:	e012      	b.n	800f802 <Color_Num+0xf2>
 800f7dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f7e0:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d101      	bne.n	800f7f2 <Color_Num+0xe2>
 800f7ee:	230b      	movs	r3, #11
 800f7f0:	e007      	b.n	800f802 <Color_Num+0xf2>
 800f7f2:	88fb      	ldrh	r3, [r7, #6]
 800f7f4:	f003 031f 	and.w	r3, r3, #31
 800f7f8:	2b1f      	cmp	r3, #31
 800f7fa:	d101      	bne.n	800f800 <Color_Num+0xf0>
 800f7fc:	230c      	movs	r3, #12
 800f7fe:	e000      	b.n	800f802 <Color_Num+0xf2>
 800f800:	230d      	movs	r3, #13
 800f802:	4618      	mov	r0, r3
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
	...

0800f810 <PrintClk>:
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	4603      	mov	r3, r0
 800f818:	80fb      	strh	r3, [r7, #6]
 800f81a:	460b      	mov	r3, r1
 800f81c:	80bb      	strh	r3, [r7, #4]
 800f81e:	4613      	mov	r3, r2
 800f820:	70fb      	strb	r3, [r7, #3]
 800f822:	4b31      	ldr	r3, [pc, #196]	; (800f8e8 <PrintClk+0xd8>)
 800f824:	895b      	ldrh	r3, [r3, #10]
 800f826:	4619      	mov	r1, r3
 800f828:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f82c:	f7fe fa6a 	bl	800dd04 <SetColor>
 800f830:	4b2e      	ldr	r3, [pc, #184]	; (800f8ec <PrintClk+0xdc>)
 800f832:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f836:	b29b      	uxth	r3, r3
 800f838:	331e      	adds	r3, #30
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	80fb      	strh	r3, [r7, #6]
 800f83e:	4b2b      	ldr	r3, [pc, #172]	; (800f8ec <PrintClk+0xdc>)
 800f840:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f844:	b29b      	uxth	r3, r3
 800f846:	3b03      	subs	r3, #3
 800f848:	b29b      	uxth	r3, r3
 800f84a:	b218      	sxth	r0, r3
 800f84c:	4b28      	ldr	r3, [pc, #160]	; (800f8f0 <PrintClk+0xe0>)
 800f84e:	2200      	movs	r2, #0
 800f850:	2103      	movs	r1, #3
 800f852:	f7fe fa6f 	bl	800dd34 <DispStr>
 800f856:	2301      	movs	r3, #1
 800f858:	81fb      	strh	r3, [r7, #14]
 800f85a:	e03c      	b.n	800f8d6 <PrintClk+0xc6>
 800f85c:	78fa      	ldrb	r2, [r7, #3]
 800f85e:	4613      	mov	r3, r2
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4413      	add	r3, r2
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	441a      	add	r2, r3
 800f868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f86c:	4413      	add	r3, r2
 800f86e:	4a21      	ldr	r2, [pc, #132]	; (800f8f4 <PrintClk+0xe4>)
 800f870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f874:	817b      	strh	r3, [r7, #10]
 800f876:	2300      	movs	r3, #0
 800f878:	81bb      	strh	r3, [r7, #12]
 800f87a:	e024      	b.n	800f8c6 <PrintClk+0xb6>
 800f87c:	88fa      	ldrh	r2, [r7, #6]
 800f87e:	89bb      	ldrh	r3, [r7, #12]
 800f880:	4413      	add	r3, r2
 800f882:	b29b      	uxth	r3, r3
 800f884:	b218      	sxth	r0, r3
 800f886:	88ba      	ldrh	r2, [r7, #4]
 800f888:	89fb      	ldrh	r3, [r7, #14]
 800f88a:	4413      	add	r3, r2
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	b21b      	sxth	r3, r3
 800f890:	4619      	mov	r1, r3
 800f892:	f002 fce7 	bl	8012264 <LCD_Set_Posi>
 800f896:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f89a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f89e:	fa42 f303 	asr.w	r3, r2, r3
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <PrintClk+0xa4>
 800f8aa:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f8ae:	f002 fd27 	bl	8012300 <LCD_Set_Pixel>
 800f8b2:	e004      	b.n	800f8be <PrintClk+0xae>
 800f8b4:	4b10      	ldr	r3, [pc, #64]	; (800f8f8 <PrintClk+0xe8>)
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f002 fd21 	bl	8012300 <LCD_Set_Pixel>
 800f8be:	89bb      	ldrh	r3, [r7, #12]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	81bb      	strh	r3, [r7, #12]
 800f8c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f8ca:	2b0a      	cmp	r3, #10
 800f8cc:	ddd6      	ble.n	800f87c <PrintClk+0x6c>
 800f8ce:	89fb      	ldrh	r3, [r7, #14]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	81fb      	strh	r3, [r7, #14]
 800f8d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f8da:	2b0a      	cmp	r3, #10
 800f8dc:	ddbe      	ble.n	800f85c <PrintClk+0x4c>
 800f8de:	bf00      	nop
 800f8e0:	bf00      	nop
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	08001f08 	.word	0x08001f08
 800f8ec:	0800215c 	.word	0x0800215c
 800f8f0:	080001ec 	.word	0x080001ec
 800f8f4:	08001bbc 	.word	0x08001bbc
 800f8f8:	200015ce 	.word	0x200015ce

0800f8fc <WriteVar>:
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	4603      	mov	r3, r0
 800f904:	6039      	str	r1, [r7, #0]
 800f906:	80fb      	strh	r3, [r7, #6]
 800f908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f90c:	81fb      	strh	r3, [r7, #14]
 800f90e:	2204      	movs	r2, #4
 800f910:	2100      	movs	r1, #0
 800f912:	4847      	ldr	r0, [pc, #284]	; (800fa30 <WriteVar+0x134>)
 800f914:	f013 f9d4 	bl	8022cc0 <memset>
 800f918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f91c:	4619      	mov	r1, r3
 800f91e:	4844      	ldr	r0, [pc, #272]	; (800fa30 <WriteVar+0x134>)
 800f920:	f002 fa1e 	bl	8011d60 <u16ToDec4Str>
 800f924:	4842      	ldr	r0, [pc, #264]	; (800fa30 <WriteVar+0x134>)
 800f926:	f7fc fb8b 	bl	800c040 <strlen>
 800f92a:	4603      	mov	r3, r0
 800f92c:	b21a      	sxth	r2, r3
 800f92e:	4b41      	ldr	r3, [pc, #260]	; (800fa34 <WriteVar+0x138>)
 800f930:	801a      	strh	r2, [r3, #0]
 800f932:	4b41      	ldr	r3, [pc, #260]	; (800fa38 <WriteVar+0x13c>)
 800f934:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b40      	ldr	r3, [pc, #256]	; (800fa3c <WriteVar+0x140>)
 800f93c:	4413      	add	r3, r2
 800f93e:	4a3d      	ldr	r2, [pc, #244]	; (800fa34 <WriteVar+0x138>)
 800f940:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f944:	493a      	ldr	r1, [pc, #232]	; (800fa30 <WriteVar+0x134>)
 800f946:	4618      	mov	r0, r3
 800f948:	f013 f9ac 	bl	8022ca4 <memcpy>
 800f94c:	4b3a      	ldr	r3, [pc, #232]	; (800fa38 <WriteVar+0x13c>)
 800f94e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f952:	b29a      	uxth	r2, r3
 800f954:	4b37      	ldr	r3, [pc, #220]	; (800fa34 <WriteVar+0x138>)
 800f956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4413      	add	r3, r2
 800f95e:	b29b      	uxth	r3, r3
 800f960:	b21a      	sxth	r2, r3
 800f962:	4b35      	ldr	r3, [pc, #212]	; (800fa38 <WriteVar+0x13c>)
 800f964:	801a      	strh	r2, [r3, #0]
 800f966:	4b33      	ldr	r3, [pc, #204]	; (800fa34 <WriteVar+0x138>)
 800f968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f96c:	461a      	mov	r2, r3
 800f96e:	4b34      	ldr	r3, [pc, #208]	; (800fa40 <WriteVar+0x144>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4413      	add	r3, r2
 800f974:	4a32      	ldr	r2, [pc, #200]	; (800fa40 <WriteVar+0x144>)
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	4b2f      	ldr	r3, [pc, #188]	; (800fa38 <WriteVar+0x13c>)
 800f97a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f97e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f982:	429a      	cmp	r2, r3
 800f984:	dc4f      	bgt.n	800fa26 <WriteVar+0x12a>
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	482c      	ldr	r0, [pc, #176]	; (800fa3c <WriteVar+0x140>)
 800f98a:	f7ff fd87 	bl	800f49c <ProgFileSec>
 800f98e:	4b2d      	ldr	r3, [pc, #180]	; (800fa44 <WriteVar+0x148>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	492b      	ldr	r1, [pc, #172]	; (800fa44 <WriteVar+0x148>)
 800f996:	600a      	str	r2, [r1, #0]
 800f998:	105b      	asrs	r3, r3, #1
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	f003 0303 	and.w	r3, r3, #3
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	2102      	movs	r1, #2
 800f9a6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f9aa:	f7ff ff31 	bl	800f810 <PrintClk>
 800f9ae:	4b22      	ldr	r3, [pc, #136]	; (800fa38 <WriteVar+0x13c>)
 800f9b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	89fb      	ldrh	r3, [r7, #14]
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	81bb      	strh	r3, [r7, #12]
 800f9be:	4b1d      	ldr	r3, [pc, #116]	; (800fa34 <WriteVar+0x138>)
 800f9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9c4:	b29a      	uxth	r2, r3
 800f9c6:	89bb      	ldrh	r3, [r7, #12]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	817b      	strh	r3, [r7, #10]
 800f9ce:	4b1a      	ldr	r3, [pc, #104]	; (800fa38 <WriteVar+0x13c>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	801a      	strh	r2, [r3, #0]
 800f9d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	2100      	movs	r1, #0
 800f9dc:	4817      	ldr	r0, [pc, #92]	; (800fa3c <WriteVar+0x140>)
 800f9de:	f013 f96f 	bl	8022cc0 <memset>
 800f9e2:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	4817      	ldr	r0, [pc, #92]	; (800fa48 <WriteVar+0x14c>)
 800f9ea:	f013 f969 	bl	8022cc0 <memset>
 800f9ee:	4b12      	ldr	r3, [pc, #72]	; (800fa38 <WriteVar+0x13c>)
 800f9f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4b11      	ldr	r3, [pc, #68]	; (800fa3c <WriteVar+0x140>)
 800f9f8:	18d0      	adds	r0, r2, r3
 800f9fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f9fe:	4a0c      	ldr	r2, [pc, #48]	; (800fa30 <WriteVar+0x134>)
 800fa00:	4413      	add	r3, r2
 800fa02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fa06:	4619      	mov	r1, r3
 800fa08:	f013 f94c 	bl	8022ca4 <memcpy>
 800fa0c:	4b0a      	ldr	r3, [pc, #40]	; (800fa38 <WriteVar+0x13c>)
 800fa0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	89bb      	ldrh	r3, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	b21a      	sxth	r2, r3
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <WriteVar+0x13c>)
 800fa1e:	801a      	strh	r2, [r3, #0]
 800fa20:	4b04      	ldr	r3, [pc, #16]	; (800fa34 <WriteVar+0x138>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	801a      	strh	r2, [r3, #0]
 800fa26:	bf00      	nop
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	200015d4 	.word	0x200015d4
 800fa34:	20000792 	.word	0x20000792
 800fa38:	20000790 	.word	0x20000790
 800fa3c:	200017d8 	.word	0x200017d8
 800fa40:	20000794 	.word	0x20000794
 800fa44:	20000798 	.word	0x20000798
 800fa48:	20000008 	.word	0x20000008

0800fa4c <WriteStr>:
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
 800fa56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa5a:	81fb      	strh	r3, [r7, #14]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fc faef 	bl	800c040 <strlen>
 800fa62:	4603      	mov	r3, r0
 800fa64:	b21a      	sxth	r2, r3
 800fa66:	4b40      	ldr	r3, [pc, #256]	; (800fb68 <WriteStr+0x11c>)
 800fa68:	801a      	strh	r2, [r3, #0]
 800fa6a:	4b40      	ldr	r3, [pc, #256]	; (800fb6c <WriteStr+0x120>)
 800fa6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa70:	461a      	mov	r2, r3
 800fa72:	4b3f      	ldr	r3, [pc, #252]	; (800fb70 <WriteStr+0x124>)
 800fa74:	4413      	add	r3, r2
 800fa76:	4a3c      	ldr	r2, [pc, #240]	; (800fb68 <WriteStr+0x11c>)
 800fa78:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fa7c:	6879      	ldr	r1, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f013 f910 	bl	8022ca4 <memcpy>
 800fa84:	4b39      	ldr	r3, [pc, #228]	; (800fb6c <WriteStr+0x120>)
 800fa86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	4b36      	ldr	r3, [pc, #216]	; (800fb68 <WriteStr+0x11c>)
 800fa8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	4413      	add	r3, r2
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	b21a      	sxth	r2, r3
 800fa9a:	4b34      	ldr	r3, [pc, #208]	; (800fb6c <WriteStr+0x120>)
 800fa9c:	801a      	strh	r2, [r3, #0]
 800fa9e:	4b32      	ldr	r3, [pc, #200]	; (800fb68 <WriteStr+0x11c>)
 800faa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b33      	ldr	r3, [pc, #204]	; (800fb74 <WriteStr+0x128>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4413      	add	r3, r2
 800faac:	4a31      	ldr	r2, [pc, #196]	; (800fb74 <WriteStr+0x128>)
 800faae:	6013      	str	r3, [r2, #0]
 800fab0:	4b2e      	ldr	r3, [pc, #184]	; (800fb6c <WriteStr+0x120>)
 800fab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fab6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800faba:	429a      	cmp	r2, r3
 800fabc:	dc4f      	bgt.n	800fb5e <WriteStr+0x112>
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	482b      	ldr	r0, [pc, #172]	; (800fb70 <WriteStr+0x124>)
 800fac2:	f7ff fceb 	bl	800f49c <ProgFileSec>
 800fac6:	4b2c      	ldr	r3, [pc, #176]	; (800fb78 <WriteStr+0x12c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	1c5a      	adds	r2, r3, #1
 800facc:	492a      	ldr	r1, [pc, #168]	; (800fb78 <WriteStr+0x12c>)
 800face:	600a      	str	r2, [r1, #0]
 800fad0:	105b      	asrs	r3, r3, #1
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	f003 0303 	and.w	r3, r3, #3
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	461a      	mov	r2, r3
 800fadc:	2102      	movs	r1, #2
 800fade:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fae2:	f7ff fe95 	bl	800f810 <PrintClk>
 800fae6:	4b21      	ldr	r3, [pc, #132]	; (800fb6c <WriteStr+0x120>)
 800fae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800faec:	b29a      	uxth	r2, r3
 800faee:	89fb      	ldrh	r3, [r7, #14]
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	81bb      	strh	r3, [r7, #12]
 800faf6:	4b1c      	ldr	r3, [pc, #112]	; (800fb68 <WriteStr+0x11c>)
 800faf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	89bb      	ldrh	r3, [r7, #12]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	817b      	strh	r3, [r7, #10]
 800fb06:	4b19      	ldr	r3, [pc, #100]	; (800fb6c <WriteStr+0x120>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	801a      	strh	r2, [r3, #0]
 800fb0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb10:	461a      	mov	r2, r3
 800fb12:	2100      	movs	r1, #0
 800fb14:	4816      	ldr	r0, [pc, #88]	; (800fb70 <WriteStr+0x124>)
 800fb16:	f013 f8d3 	bl	8022cc0 <memset>
 800fb1a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fb1e:	2100      	movs	r1, #0
 800fb20:	4816      	ldr	r0, [pc, #88]	; (800fb7c <WriteStr+0x130>)
 800fb22:	f013 f8cd 	bl	8022cc0 <memset>
 800fb26:	4b11      	ldr	r3, [pc, #68]	; (800fb6c <WriteStr+0x120>)
 800fb28:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <WriteStr+0x124>)
 800fb30:	18d0      	adds	r0, r2, r3
 800fb32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	4413      	add	r3, r2
 800fb3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	f013 f8b0 	bl	8022ca4 <memcpy>
 800fb44:	4b09      	ldr	r3, [pc, #36]	; (800fb6c <WriteStr+0x120>)
 800fb46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	89bb      	ldrh	r3, [r7, #12]
 800fb4e:	4413      	add	r3, r2
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	b21a      	sxth	r2, r3
 800fb54:	4b05      	ldr	r3, [pc, #20]	; (800fb6c <WriteStr+0x120>)
 800fb56:	801a      	strh	r2, [r3, #0]
 800fb58:	4b03      	ldr	r3, [pc, #12]	; (800fb68 <WriteStr+0x11c>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	801a      	strh	r2, [r3, #0]
 800fb5e:	bf00      	nop
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	20000792 	.word	0x20000792
 800fb6c:	20000790 	.word	0x20000790
 800fb70:	200017d8 	.word	0x200017d8
 800fb74:	20000794 	.word	0x20000794
 800fb78:	20000798 	.word	0x20000798
 800fb7c:	20000008 	.word	0x20000008

0800fb80 <Make_Filename>:
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	6039      	str	r1, [r7, #0]
 800fb8a:	80fb      	strh	r3, [r7, #6]
 800fb8c:	88fb      	ldrh	r3, [r7, #6]
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	f107 030c 	add.w	r3, r7, #12
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f001 ff3c 	bl	8011a14 <u8ToDec3>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	3304      	adds	r3, #4
 800fba0:	7b3a      	ldrb	r2, [r7, #12]
 800fba2:	701a      	strb	r2, [r3, #0]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	3305      	adds	r3, #5
 800fba8:	7b7a      	ldrb	r2, [r7, #13]
 800fbaa:	701a      	strb	r2, [r3, #0]
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	3306      	adds	r3, #6
 800fbb0:	7bba      	ldrb	r2, [r7, #14]
 800fbb2:	701a      	strb	r2, [r3, #0]
 800fbb4:	bf00      	nop
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <Load_File_Num>:
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08a      	sub	sp, #40	; 0x28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	71fb      	strb	r3, [r7, #7]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbca:	4a87      	ldr	r2, [pc, #540]	; (800fde8 <Load_File_Num+0x22c>)
 800fbcc:	f107 0318 	add.w	r3, r7, #24
 800fbd0:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
 800fbd8:	3b1d      	subs	r3, #29
 800fbda:	2b04      	cmp	r3, #4
 800fbdc:	f200 80fe 	bhi.w	800fddc <Load_File_Num+0x220>
 800fbe0:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <Load_File_Num+0x2c>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fbfd 	.word	0x0800fbfd
 800fbec:	0800fc5d 	.word	0x0800fc5d
 800fbf0:	0800fcbd 	.word	0x0800fcbd
 800fbf4:	0800fd1d 	.word	0x0800fd1d
 800fbf8:	0800fd7d 	.word	0x0800fd7d
 800fbfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc00:	2100      	movs	r1, #0
 800fc02:	487a      	ldr	r0, [pc, #488]	; (800fdec <Load_File_Num+0x230>)
 800fc04:	f013 f85c 	bl	8022cc0 <memset>
 800fc08:	4a79      	ldr	r2, [pc, #484]	; (800fdf0 <Load_File_Num+0x234>)
 800fc0a:	f107 0318 	add.w	r3, r7, #24
 800fc0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc14:	f107 0218 	add.w	r2, r7, #24
 800fc18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7ff ffae 	bl	800fb80 <Make_Filename>
 800fc24:	e00d      	b.n	800fc42 <Load_File_Num+0x86>
 800fc26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc32:	f107 0218 	add.w	r2, r7, #24
 800fc36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff ff9f 	bl	800fb80 <Make_Filename>
 800fc42:	f107 030c 	add.w	r3, r7, #12
 800fc46:	f107 0210 	add.w	r2, r7, #16
 800fc4a:	f107 0118 	add.w	r1, r7, #24
 800fc4e:	4867      	ldr	r0, [pc, #412]	; (800fdec <Load_File_Num+0x230>)
 800fc50:	f7ff fa32 	bl	800f0b8 <OpenFileRd>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d0e5      	beq.n	800fc26 <Load_File_Num+0x6a>
 800fc5a:	e0bf      	b.n	800fddc <Load_File_Num+0x220>
 800fc5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc60:	2100      	movs	r1, #0
 800fc62:	4862      	ldr	r0, [pc, #392]	; (800fdec <Load_File_Num+0x230>)
 800fc64:	f013 f82c 	bl	8022cc0 <memset>
 800fc68:	4a62      	ldr	r2, [pc, #392]	; (800fdf4 <Load_File_Num+0x238>)
 800fc6a:	f107 0318 	add.w	r3, r7, #24
 800fc6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc74:	f107 0218 	add.w	r2, r7, #24
 800fc78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff ff7e 	bl	800fb80 <Make_Filename>
 800fc84:	e00d      	b.n	800fca2 <Load_File_Num+0xe6>
 800fc86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc92:	f107 0218 	add.w	r2, r7, #24
 800fc96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fc9a:	4611      	mov	r1, r2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff ff6f 	bl	800fb80 <Make_Filename>
 800fca2:	f107 030c 	add.w	r3, r7, #12
 800fca6:	f107 0210 	add.w	r2, r7, #16
 800fcaa:	f107 0118 	add.w	r1, r7, #24
 800fcae:	484f      	ldr	r0, [pc, #316]	; (800fdec <Load_File_Num+0x230>)
 800fcb0:	f7ff fa02 	bl	800f0b8 <OpenFileRd>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d0e5      	beq.n	800fc86 <Load_File_Num+0xca>
 800fcba:	e08f      	b.n	800fddc <Load_File_Num+0x220>
 800fcbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	484a      	ldr	r0, [pc, #296]	; (800fdec <Load_File_Num+0x230>)
 800fcc4:	f012 fffc 	bl	8022cc0 <memset>
 800fcc8:	4a4b      	ldr	r2, [pc, #300]	; (800fdf8 <Load_File_Num+0x23c>)
 800fcca:	f107 0318 	add.w	r3, r7, #24
 800fcce:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcd4:	f107 0218 	add.w	r2, r7, #24
 800fcd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcdc:	4611      	mov	r1, r2
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7ff ff4e 	bl	800fb80 <Make_Filename>
 800fce4:	e00d      	b.n	800fd02 <Load_File_Num+0x146>
 800fce6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	3301      	adds	r3, #1
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fcf2:	f107 0218 	add.w	r2, r7, #24
 800fcf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff ff3f 	bl	800fb80 <Make_Filename>
 800fd02:	f107 030c 	add.w	r3, r7, #12
 800fd06:	f107 0210 	add.w	r2, r7, #16
 800fd0a:	f107 0118 	add.w	r1, r7, #24
 800fd0e:	4837      	ldr	r0, [pc, #220]	; (800fdec <Load_File_Num+0x230>)
 800fd10:	f7ff f9d2 	bl	800f0b8 <OpenFileRd>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d0e5      	beq.n	800fce6 <Load_File_Num+0x12a>
 800fd1a:	e05f      	b.n	800fddc <Load_File_Num+0x220>
 800fd1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd20:	2100      	movs	r1, #0
 800fd22:	4832      	ldr	r0, [pc, #200]	; (800fdec <Load_File_Num+0x230>)
 800fd24:	f012 ffcc 	bl	8022cc0 <memset>
 800fd28:	4a34      	ldr	r2, [pc, #208]	; (800fdfc <Load_File_Num+0x240>)
 800fd2a:	f107 0318 	add.w	r3, r7, #24
 800fd2e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd34:	f107 0218 	add.w	r2, r7, #24
 800fd38:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7ff ff1e 	bl	800fb80 <Make_Filename>
 800fd44:	e00d      	b.n	800fd62 <Load_File_Num+0x1a6>
 800fd46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fd52:	f107 0218 	add.w	r2, r7, #24
 800fd56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd5a:	4611      	mov	r1, r2
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff ff0f 	bl	800fb80 <Make_Filename>
 800fd62:	f107 030c 	add.w	r3, r7, #12
 800fd66:	f107 0210 	add.w	r2, r7, #16
 800fd6a:	f107 0118 	add.w	r1, r7, #24
 800fd6e:	481f      	ldr	r0, [pc, #124]	; (800fdec <Load_File_Num+0x230>)
 800fd70:	f7ff f9a2 	bl	800f0b8 <OpenFileRd>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d0e5      	beq.n	800fd46 <Load_File_Num+0x18a>
 800fd7a:	e02f      	b.n	800fddc <Load_File_Num+0x220>
 800fd7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd80:	2100      	movs	r1, #0
 800fd82:	481a      	ldr	r0, [pc, #104]	; (800fdec <Load_File_Num+0x230>)
 800fd84:	f012 ff9c 	bl	8022cc0 <memset>
 800fd88:	4a1d      	ldr	r2, [pc, #116]	; (800fe00 <Load_File_Num+0x244>)
 800fd8a:	f107 0318 	add.w	r3, r7, #24
 800fd8e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd94:	f107 0218 	add.w	r2, r7, #24
 800fd98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd9c:	4611      	mov	r1, r2
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff feee 	bl	800fb80 <Make_Filename>
 800fda4:	e00d      	b.n	800fdc2 <Load_File_Num+0x206>
 800fda6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	3301      	adds	r3, #1
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fdb2:	f107 0218 	add.w	r2, r7, #24
 800fdb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fdba:	4611      	mov	r1, r2
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7ff fedf 	bl	800fb80 <Make_Filename>
 800fdc2:	f107 030c 	add.w	r3, r7, #12
 800fdc6:	f107 0210 	add.w	r2, r7, #16
 800fdca:	f107 0118 	add.w	r1, r7, #24
 800fdce:	4807      	ldr	r0, [pc, #28]	; (800fdec <Load_File_Num+0x230>)
 800fdd0:	f7ff f972 	bl	800f0b8 <OpenFileRd>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d0e5      	beq.n	800fda6 <Load_File_Num+0x1ea>
 800fdda:	bf00      	nop
 800fddc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fde0:	4618      	mov	r0, r3
 800fde2:	3728      	adds	r7, #40	; 0x28
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	08000238 	.word	0x08000238
 800fdec:	200017d8 	.word	0x200017d8
 800fdf0:	080001fc 	.word	0x080001fc
 800fdf4:	08000208 	.word	0x08000208
 800fdf8:	08000214 	.word	0x08000214
 800fdfc:	08000220 	.word	0x08000220
 800fe00:	0800022c 	.word	0x0800022c

0800fe04 <File_Num>:
 800fe04:	b580      	push	{r7, lr}
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	201d      	movs	r0, #29
 800fe0a:	f7ff fed7 	bl	800fbbc <Load_File_Num>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	461a      	mov	r2, r3
 800fe12:	4b12      	ldr	r3, [pc, #72]	; (800fe5c <File_Num+0x58>)
 800fe14:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800fe18:	201e      	movs	r0, #30
 800fe1a:	f7ff fecf 	bl	800fbbc <Load_File_Num>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	461a      	mov	r2, r3
 800fe22:	4b0e      	ldr	r3, [pc, #56]	; (800fe5c <File_Num+0x58>)
 800fe24:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 800fe28:	201f      	movs	r0, #31
 800fe2a:	f7ff fec7 	bl	800fbbc <Load_File_Num>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	461a      	mov	r2, r3
 800fe32:	4b0a      	ldr	r3, [pc, #40]	; (800fe5c <File_Num+0x58>)
 800fe34:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800fe38:	2020      	movs	r0, #32
 800fe3a:	f7ff febf 	bl	800fbbc <Load_File_Num>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	461a      	mov	r2, r3
 800fe42:	4b06      	ldr	r3, [pc, #24]	; (800fe5c <File_Num+0x58>)
 800fe44:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800fe48:	2021      	movs	r0, #33	; 0x21
 800fe4a:	f7ff feb7 	bl	800fbbc <Load_File_Num>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	461a      	mov	r2, r3
 800fe52:	4b02      	ldr	r3, [pc, #8]	; (800fe5c <File_Num+0x58>)
 800fe54:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 800fe58:	bf00      	nop
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	20000298 	.word	0x20000298

0800fe60 <Load_Buf>:
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b08e      	sub	sp, #56	; 0x38
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	4603      	mov	r3, r0
 800fe68:	80fb      	strh	r3, [r7, #6]
 800fe6a:	4a66      	ldr	r2, [pc, #408]	; (8010004 <Load_Buf+0x1a4>)
 800fe6c:	f107 0318 	add.w	r3, r7, #24
 800fe70:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe76:	2301      	movs	r3, #1
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe7a:	f107 0218 	add.w	r2, r7, #24
 800fe7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7ff fe7b 	bl	800fb80 <Make_Filename>
 800fe8a:	f107 030c 	add.w	r3, r7, #12
 800fe8e:	f107 0210 	add.w	r2, r7, #16
 800fe92:	f107 0118 	add.w	r1, r7, #24
 800fe96:	485c      	ldr	r0, [pc, #368]	; (8010008 <Load_Buf+0x1a8>)
 800fe98:	f7ff f90e 	bl	800f0b8 <OpenFileRd>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <Load_Buf+0x4c>
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	e0a6      	b.n	800fffa <Load_Buf+0x19a>
 800feac:	2302      	movs	r3, #2
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
 800feb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800feb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800feb6:	4b55      	ldr	r3, [pc, #340]	; (801000c <Load_Buf+0x1ac>)
 800feb8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800febc:	2b03      	cmp	r3, #3
 800febe:	d101      	bne.n	800fec4 <Load_Buf+0x64>
 800fec0:	2304      	movs	r3, #4
 800fec2:	633b      	str	r3, [r7, #48]	; 0x30
 800fec4:	2300      	movs	r3, #0
 800fec6:	637b      	str	r3, [r7, #52]	; 0x34
 800fec8:	e01d      	b.n	800ff06 <Load_Buf+0xa6>
 800feca:	f107 0310 	add.w	r3, r7, #16
 800fece:	4619      	mov	r1, r3
 800fed0:	484d      	ldr	r0, [pc, #308]	; (8010008 <Load_Buf+0x1a8>)
 800fed2:	f7ff fb29 	bl	800f528 <ReadFileSec>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <Load_Buf+0x80>
 800fedc:	2303      	movs	r3, #3
 800fede:	e08c      	b.n	800fffa <Load_Buf+0x19a>
 800fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fee4:	fb02 f303 	mul.w	r3, r2, r3
 800fee8:	0fda      	lsrs	r2, r3, #31
 800feea:	4413      	add	r3, r2
 800feec:	105b      	asrs	r3, r3, #1
 800feee:	3302      	adds	r3, #2
 800fef0:	005b      	lsls	r3, r3, #1
 800fef2:	4a47      	ldr	r2, [pc, #284]	; (8010010 <Load_Buf+0x1b0>)
 800fef4:	4413      	add	r3, r2
 800fef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fef8:	4943      	ldr	r1, [pc, #268]	; (8010008 <Load_Buf+0x1a8>)
 800fefa:	4618      	mov	r0, r3
 800fefc:	f012 fed2 	bl	8022ca4 <memcpy>
 800ff00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff02:	3301      	adds	r3, #1
 800ff04:	637b      	str	r3, [r7, #52]	; 0x34
 800ff06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	dbdd      	blt.n	800feca <Load_Buf+0x6a>
 800ff0e:	f107 0310 	add.w	r3, r7, #16
 800ff12:	4619      	mov	r1, r3
 800ff14:	483c      	ldr	r0, [pc, #240]	; (8010008 <Load_Buf+0x1a8>)
 800ff16:	f7ff fb07 	bl	800f528 <ReadFileSec>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d001      	beq.n	800ff24 <Load_Buf+0xc4>
 800ff20:	2303      	movs	r3, #3
 800ff22:	e06a      	b.n	800fffa <Load_Buf+0x19a>
 800ff24:	4b3b      	ldr	r3, [pc, #236]	; (8010014 <Load_Buf+0x1b4>)
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	1c9a      	adds	r2, r3, #2
 800ff2c:	627a      	str	r2, [r7, #36]	; 0x24
 800ff2e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800ff32:	801a      	strh	r2, [r3, #0]
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	1c9a      	adds	r2, r3, #2
 800ff38:	627a      	str	r2, [r7, #36]	; 0x24
 800ff3a:	4a35      	ldr	r2, [pc, #212]	; (8010010 <Load_Buf+0x1b0>)
 800ff3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ff40:	801a      	strh	r2, [r3, #0]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	1c9a      	adds	r2, r3, #2
 800ff46:	627a      	str	r2, [r7, #36]	; 0x24
 800ff48:	4a31      	ldr	r2, [pc, #196]	; (8010010 <Load_Buf+0x1b0>)
 800ff4a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ff4e:	801a      	strh	r2, [r3, #0]
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	1c9a      	adds	r2, r3, #2
 800ff54:	627a      	str	r2, [r7, #36]	; 0x24
 800ff56:	4a2d      	ldr	r2, [pc, #180]	; (801000c <Load_Buf+0x1ac>)
 800ff58:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ff5c:	801a      	strh	r2, [r3, #0]
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff60:	1c9a      	adds	r2, r3, #2
 800ff62:	627a      	str	r2, [r7, #36]	; 0x24
 800ff64:	4a29      	ldr	r2, [pc, #164]	; (801000c <Load_Buf+0x1ac>)
 800ff66:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ff6a:	801a      	strh	r2, [r3, #0]
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6e:	1c9a      	adds	r2, r3, #2
 800ff70:	627a      	str	r2, [r7, #36]	; 0x24
 800ff72:	4a26      	ldr	r2, [pc, #152]	; (801000c <Load_Buf+0x1ac>)
 800ff74:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	4b23      	ldr	r3, [pc, #140]	; (8010008 <Load_Buf+0x1a8>)
 800ff7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	1c9a      	adds	r2, r3, #2
 800ff82:	627a      	str	r2, [r7, #36]	; 0x24
 800ff84:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff88:	4b21      	ldr	r3, [pc, #132]	; (8010010 <Load_Buf+0x1b0>)
 800ff8a:	801a      	strh	r2, [r3, #0]
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	1c9a      	adds	r2, r3, #2
 800ff90:	627a      	str	r2, [r7, #36]	; 0x24
 800ff92:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff96:	4b1e      	ldr	r3, [pc, #120]	; (8010010 <Load_Buf+0x1b0>)
 800ff98:	805a      	strh	r2, [r3, #2]
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9c:	1c9a      	adds	r2, r3, #2
 800ff9e:	627a      	str	r2, [r7, #36]	; 0x24
 800ffa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffa4:	4b19      	ldr	r3, [pc, #100]	; (801000c <Load_Buf+0x1ac>)
 800ffa6:	809a      	strh	r2, [r3, #4]
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	1c9a      	adds	r2, r3, #2
 800ffac:	627a      	str	r2, [r7, #36]	; 0x24
 800ffae:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffb2:	4b16      	ldr	r3, [pc, #88]	; (801000c <Load_Buf+0x1ac>)
 800ffb4:	829a      	strh	r2, [r3, #20]
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb8:	1c9a      	adds	r2, r3, #2
 800ffba:	627a      	str	r2, [r7, #36]	; 0x24
 800ffbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ffc0:	4b12      	ldr	r3, [pc, #72]	; (801000c <Load_Buf+0x1ac>)
 800ffc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800ffc6:	4b14      	ldr	r3, [pc, #80]	; (8010018 <Load_Buf+0x1b8>)
 800ffc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffcc:	f043 0301 	orr.w	r3, r3, #1
 800ffd0:	b21a      	sxth	r2, r3
 800ffd2:	4b11      	ldr	r3, [pc, #68]	; (8010018 <Load_Buf+0x1b8>)
 800ffd4:	801a      	strh	r2, [r3, #0]
 800ffd6:	f004 fa51 	bl	801447c <DispStatus>
 800ffda:	4b0c      	ldr	r3, [pc, #48]	; (801000c <Load_Buf+0x1ac>)
 800ffdc:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ffe0:	2b62      	cmp	r3, #98	; 0x62
 800ffe2:	dc09      	bgt.n	800fff8 <Load_Buf+0x198>
 800ffe4:	4b09      	ldr	r3, [pc, #36]	; (801000c <Load_Buf+0x1ac>)
 800ffe6:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	3301      	adds	r3, #1
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	b21a      	sxth	r2, r3
 800fff2:	4b06      	ldr	r3, [pc, #24]	; (801000c <Load_Buf+0x1ac>)
 800fff4:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800fff8:	2300      	movs	r3, #0
 800fffa:	4618      	mov	r0, r3
 800fffc:	3738      	adds	r7, #56	; 0x38
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	08000214 	.word	0x08000214
 8010008:	200017d8 	.word	0x200017d8
 801000c:	20000298 	.word	0x20000298
 8010010:	20002870 	.word	0x20002870
 8010014:	200015d8 	.word	0x200015d8
 8010018:	200007a0 	.word	0x200007a0

0801001c <Save_Buf>:
 801001c:	b580      	push	{r7, lr}
 801001e:	b08e      	sub	sp, #56	; 0x38
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	80fb      	strh	r3, [r7, #6]
 8010026:	4a64      	ldr	r2, [pc, #400]	; (80101b8 <Save_Buf+0x19c>)
 8010028:	f107 0318 	add.w	r3, r7, #24
 801002c:	ca07      	ldmia	r2, {r0, r1, r2}
 801002e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010032:	2300      	movs	r3, #0
 8010034:	637b      	str	r3, [r7, #52]	; 0x34
 8010036:	2304      	movs	r3, #4
 8010038:	62fb      	str	r3, [r7, #44]	; 0x2c
 801003a:	2300      	movs	r3, #0
 801003c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010040:	2302      	movs	r3, #2
 8010042:	863b      	strh	r3, [r7, #48]	; 0x30
 8010044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010048:	857b      	strh	r3, [r7, #42]	; 0x2a
 801004a:	4b5c      	ldr	r3, [pc, #368]	; (80101bc <Save_Buf+0x1a0>)
 801004c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010050:	2b03      	cmp	r3, #3
 8010052:	d101      	bne.n	8010058 <Save_Buf+0x3c>
 8010054:	2304      	movs	r3, #4
 8010056:	863b      	strh	r3, [r7, #48]	; 0x30
 8010058:	f107 0218 	add.w	r2, r7, #24
 801005c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fd8c 	bl	800fb80 <Make_Filename>
 8010068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801006c:	2100      	movs	r1, #0
 801006e:	4854      	ldr	r0, [pc, #336]	; (80101c0 <Save_Buf+0x1a4>)
 8010070:	f012 fe26 	bl	8022cc0 <memset>
 8010074:	f107 030c 	add.w	r3, r7, #12
 8010078:	f107 0210 	add.w	r2, r7, #16
 801007c:	f107 0118 	add.w	r1, r7, #24
 8010080:	484f      	ldr	r0, [pc, #316]	; (80101c0 <Save_Buf+0x1a4>)
 8010082:	f7ff fae3 	bl	800f64c <OpenFileWr>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <Save_Buf+0x76>
 801008c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008e:	b2db      	uxtb	r3, r3
 8010090:	e08e      	b.n	80101b0 <Save_Buf+0x194>
 8010092:	2300      	movs	r3, #0
 8010094:	637b      	str	r3, [r7, #52]	; 0x34
 8010096:	e02f      	b.n	80100f8 <Save_Buf+0xdc>
 8010098:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801009c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801009e:	fb02 f303 	mul.w	r3, r2, r3
 80100a2:	0fda      	lsrs	r2, r3, #31
 80100a4:	4413      	add	r3, r2
 80100a6:	105b      	asrs	r3, r3, #1
 80100a8:	3302      	adds	r3, #2
 80100aa:	005b      	lsls	r3, r3, #1
 80100ac:	4a45      	ldr	r2, [pc, #276]	; (80101c4 <Save_Buf+0x1a8>)
 80100ae:	4413      	add	r3, r2
 80100b0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80100b4:	4619      	mov	r1, r3
 80100b6:	4842      	ldr	r0, [pc, #264]	; (80101c0 <Save_Buf+0x1a4>)
 80100b8:	f012 fdf4 	bl	8022ca4 <memcpy>
 80100bc:	f107 0310 	add.w	r3, r7, #16
 80100c0:	4619      	mov	r1, r3
 80100c2:	483f      	ldr	r0, [pc, #252]	; (80101c0 <Save_Buf+0x1a4>)
 80100c4:	f7ff f9ea 	bl	800f49c <ProgFileSec>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <Save_Buf+0xb6>
 80100ce:	2303      	movs	r3, #3
 80100d0:	e06e      	b.n	80101b0 <Save_Buf+0x194>
 80100d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100d6:	1c5a      	adds	r2, r3, #1
 80100d8:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80100dc:	085b      	lsrs	r3, r3, #1
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	f003 0303 	and.w	r3, r3, #3
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	461a      	mov	r2, r3
 80100e8:	2102      	movs	r1, #2
 80100ea:	f44f 7084 	mov.w	r0, #264	; 0x108
 80100ee:	f7ff fb8f 	bl	800f810 <PrintClk>
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	3301      	adds	r3, #1
 80100f6:	637b      	str	r3, [r7, #52]	; 0x34
 80100f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80100fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100fe:	429a      	cmp	r2, r3
 8010100:	dbca      	blt.n	8010098 <Save_Buf+0x7c>
 8010102:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010106:	461a      	mov	r2, r3
 8010108:	2100      	movs	r1, #0
 801010a:	482d      	ldr	r0, [pc, #180]	; (80101c0 <Save_Buf+0x1a4>)
 801010c:	f012 fdd8 	bl	8022cc0 <memset>
 8010110:	4b2b      	ldr	r3, [pc, #172]	; (80101c0 <Save_Buf+0x1a4>)
 8010112:	627b      	str	r3, [r7, #36]	; 0x24
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	1c9a      	adds	r2, r3, #2
 8010118:	627a      	str	r2, [r7, #36]	; 0x24
 801011a:	4a2a      	ldr	r2, [pc, #168]	; (80101c4 <Save_Buf+0x1a8>)
 801011c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010120:	801a      	strh	r2, [r3, #0]
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	1c9a      	adds	r2, r3, #2
 8010126:	627a      	str	r2, [r7, #36]	; 0x24
 8010128:	4a26      	ldr	r2, [pc, #152]	; (80101c4 <Save_Buf+0x1a8>)
 801012a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801012e:	801a      	strh	r2, [r3, #0]
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	1c9a      	adds	r2, r3, #2
 8010134:	627a      	str	r2, [r7, #36]	; 0x24
 8010136:	4a21      	ldr	r2, [pc, #132]	; (80101bc <Save_Buf+0x1a0>)
 8010138:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801013c:	801a      	strh	r2, [r3, #0]
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	1c9a      	adds	r2, r3, #2
 8010142:	627a      	str	r2, [r7, #36]	; 0x24
 8010144:	4a1d      	ldr	r2, [pc, #116]	; (80101bc <Save_Buf+0x1a0>)
 8010146:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 801014a:	801a      	strh	r2, [r3, #0]
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	1c9a      	adds	r2, r3, #2
 8010150:	627a      	str	r2, [r7, #36]	; 0x24
 8010152:	4a1a      	ldr	r2, [pc, #104]	; (80101bc <Save_Buf+0x1a0>)
 8010154:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8010158:	801a      	strh	r2, [r3, #0]
 801015a:	f107 0310 	add.w	r3, r7, #16
 801015e:	4619      	mov	r1, r3
 8010160:	4817      	ldr	r0, [pc, #92]	; (80101c0 <Save_Buf+0x1a4>)
 8010162:	f7ff f99b 	bl	800f49c <ProgFileSec>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <Save_Buf+0x154>
 801016c:	2303      	movs	r3, #3
 801016e:	e01f      	b.n	80101b0 <Save_Buf+0x194>
 8010170:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010174:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8010178:	f107 030c 	add.w	r3, r7, #12
 801017c:	f107 0210 	add.w	r2, r7, #16
 8010180:	480f      	ldr	r0, [pc, #60]	; (80101c0 <Save_Buf+0x1a4>)
 8010182:	f7ff f9ff 	bl	800f584 <CloseFile>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <Save_Buf+0x174>
 801018c:	2303      	movs	r3, #3
 801018e:	e00f      	b.n	80101b0 <Save_Buf+0x194>
 8010190:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <Save_Buf+0x1a0>)
 8010192:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8010196:	2b62      	cmp	r3, #98	; 0x62
 8010198:	dc09      	bgt.n	80101ae <Save_Buf+0x192>
 801019a:	4b08      	ldr	r3, [pc, #32]	; (80101bc <Save_Buf+0x1a0>)
 801019c:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	3301      	adds	r3, #1
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	b21a      	sxth	r2, r3
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <Save_Buf+0x1a0>)
 80101aa:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 80101ae:	2300      	movs	r3, #0
 80101b0:	4618      	mov	r0, r3
 80101b2:	3738      	adds	r7, #56	; 0x38
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}
 80101b8:	08000214 	.word	0x08000214
 80101bc:	20000298 	.word	0x20000298
 80101c0:	200017d8 	.word	0x200017d8
 80101c4:	20002870 	.word	0x20002870

080101c8 <Save_Dat>:
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b08a      	sub	sp, #40	; 0x28
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	80fb      	strh	r3, [r7, #6]
 80101d2:	4a42      	ldr	r2, [pc, #264]	; (80102dc <Save_Dat+0x114>)
 80101d4:	f107 0318 	add.w	r3, r7, #24
 80101d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80101da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101de:	2304      	movs	r3, #4
 80101e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80101e2:	f107 0218 	add.w	r2, r7, #24
 80101e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101ea:	4611      	mov	r1, r2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fcc7 	bl	800fb80 <Make_Filename>
 80101f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101f6:	2100      	movs	r1, #0
 80101f8:	4839      	ldr	r0, [pc, #228]	; (80102e0 <Save_Dat+0x118>)
 80101fa:	f012 fd61 	bl	8022cc0 <memset>
 80101fe:	f107 030c 	add.w	r3, r7, #12
 8010202:	f107 0210 	add.w	r2, r7, #16
 8010206:	f107 0118 	add.w	r1, r7, #24
 801020a:	4835      	ldr	r0, [pc, #212]	; (80102e0 <Save_Dat+0x118>)
 801020c:	f7ff fa1e 	bl	800f64c <OpenFileWr>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d002      	beq.n	801021c <Save_Dat+0x54>
 8010216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010218:	b2db      	uxtb	r3, r3
 801021a:	e05b      	b.n	80102d4 <Save_Dat+0x10c>
 801021c:	4b30      	ldr	r3, [pc, #192]	; (80102e0 <Save_Dat+0x118>)
 801021e:	2201      	movs	r2, #1
 8010220:	701a      	strb	r2, [r3, #0]
 8010222:	4b30      	ldr	r3, [pc, #192]	; (80102e4 <Save_Dat+0x11c>)
 8010224:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010228:	b2da      	uxtb	r2, r3
 801022a:	4b2d      	ldr	r3, [pc, #180]	; (80102e0 <Save_Dat+0x118>)
 801022c:	705a      	strb	r2, [r3, #1]
 801022e:	4b2d      	ldr	r3, [pc, #180]	; (80102e4 <Save_Dat+0x11c>)
 8010230:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8010234:	b2da      	uxtb	r2, r3
 8010236:	4b2a      	ldr	r3, [pc, #168]	; (80102e0 <Save_Dat+0x118>)
 8010238:	709a      	strb	r2, [r3, #2]
 801023a:	4b2a      	ldr	r3, [pc, #168]	; (80102e4 <Save_Dat+0x11c>)
 801023c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010240:	b2da      	uxtb	r2, r3
 8010242:	4b27      	ldr	r3, [pc, #156]	; (80102e0 <Save_Dat+0x118>)
 8010244:	70da      	strb	r2, [r3, #3]
 8010246:	4b27      	ldr	r3, [pc, #156]	; (80102e4 <Save_Dat+0x11c>)
 8010248:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801024c:	b2da      	uxtb	r2, r3
 801024e:	4b24      	ldr	r3, [pc, #144]	; (80102e0 <Save_Dat+0x118>)
 8010250:	711a      	strb	r2, [r3, #4]
 8010252:	4b24      	ldr	r3, [pc, #144]	; (80102e4 <Save_Dat+0x11c>)
 8010254:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010258:	b2da      	uxtb	r2, r3
 801025a:	4b21      	ldr	r3, [pc, #132]	; (80102e0 <Save_Dat+0x118>)
 801025c:	715a      	strb	r2, [r3, #5]
 801025e:	4b21      	ldr	r3, [pc, #132]	; (80102e4 <Save_Dat+0x11c>)
 8010260:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010264:	b2da      	uxtb	r2, r3
 8010266:	4b1e      	ldr	r3, [pc, #120]	; (80102e0 <Save_Dat+0x118>)
 8010268:	719a      	strb	r2, [r3, #6]
 801026a:	4b1e      	ldr	r3, [pc, #120]	; (80102e4 <Save_Dat+0x11c>)
 801026c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8010270:	b2da      	uxtb	r2, r3
 8010272:	4b1b      	ldr	r3, [pc, #108]	; (80102e0 <Save_Dat+0x118>)
 8010274:	71da      	strb	r2, [r3, #7]
 8010276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801027a:	491b      	ldr	r1, [pc, #108]	; (80102e8 <Save_Dat+0x120>)
 801027c:	481b      	ldr	r0, [pc, #108]	; (80102ec <Save_Dat+0x124>)
 801027e:	f012 fd11 	bl	8022ca4 <memcpy>
 8010282:	f107 0310 	add.w	r3, r7, #16
 8010286:	4619      	mov	r1, r3
 8010288:	4815      	ldr	r0, [pc, #84]	; (80102e0 <Save_Dat+0x118>)
 801028a:	f7ff f907 	bl	800f49c <ProgFileSec>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <Save_Dat+0xd0>
 8010294:	2303      	movs	r3, #3
 8010296:	e01d      	b.n	80102d4 <Save_Dat+0x10c>
 8010298:	f107 030c 	add.w	r3, r7, #12
 801029c:	f107 0210 	add.w	r2, r7, #16
 80102a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80102a4:	480e      	ldr	r0, [pc, #56]	; (80102e0 <Save_Dat+0x118>)
 80102a6:	f7ff f96d 	bl	800f584 <CloseFile>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <Save_Dat+0xec>
 80102b0:	2303      	movs	r3, #3
 80102b2:	e00f      	b.n	80102d4 <Save_Dat+0x10c>
 80102b4:	4b0b      	ldr	r3, [pc, #44]	; (80102e4 <Save_Dat+0x11c>)
 80102b6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80102ba:	2b62      	cmp	r3, #98	; 0x62
 80102bc:	dc09      	bgt.n	80102d2 <Save_Dat+0x10a>
 80102be:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <Save_Dat+0x11c>)
 80102c0:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	3301      	adds	r3, #1
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	b21a      	sxth	r2, r3
 80102cc:	4b05      	ldr	r3, [pc, #20]	; (80102e4 <Save_Dat+0x11c>)
 80102ce:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80102d2:	2300      	movs	r3, #0
 80102d4:	4618      	mov	r0, r3
 80102d6:	3728      	adds	r7, #40	; 0x28
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	08000208 	.word	0x08000208
 80102e0:	200017d8 	.word	0x200017d8
 80102e4:	20000298 	.word	0x20000298
 80102e8:	20000c08 	.word	0x20000c08
 80102ec:	200017e2 	.word	0x200017e2

080102f0 <Load_Dat>:
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b08a      	sub	sp, #40	; 0x28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	80fb      	strh	r3, [r7, #6]
 80102fa:	4a4f      	ldr	r2, [pc, #316]	; (8010438 <Load_Dat+0x148>)
 80102fc:	f107 0314 	add.w	r3, r7, #20
 8010300:	ca07      	ldmia	r2, {r0, r1, r2}
 8010302:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010306:	2300      	movs	r3, #0
 8010308:	847b      	strh	r3, [r7, #34]	; 0x22
 801030a:	f107 0214 	add.w	r2, r7, #20
 801030e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010312:	4611      	mov	r1, r2
 8010314:	4618      	mov	r0, r3
 8010316:	f7ff fc33 	bl	800fb80 <Make_Filename>
 801031a:	f107 0308 	add.w	r3, r7, #8
 801031e:	f107 020c 	add.w	r2, r7, #12
 8010322:	f107 0114 	add.w	r1, r7, #20
 8010326:	4845      	ldr	r0, [pc, #276]	; (801043c <Load_Dat+0x14c>)
 8010328:	f7fe fec6 	bl	800f0b8 <OpenFileRd>
 801032c:	4603      	mov	r3, r0
 801032e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010330:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <Load_Dat+0x4e>
 8010338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801033a:	b2db      	uxtb	r3, r3
 801033c:	e077      	b.n	801042e <Load_Dat+0x13e>
 801033e:	f107 030c 	add.w	r3, r7, #12
 8010342:	4619      	mov	r1, r3
 8010344:	483d      	ldr	r0, [pc, #244]	; (801043c <Load_Dat+0x14c>)
 8010346:	f7ff f8ef 	bl	800f528 <ReadFileSec>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <Load_Dat+0x64>
 8010350:	2303      	movs	r3, #3
 8010352:	e06c      	b.n	801042e <Load_Dat+0x13e>
 8010354:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010358:	4938      	ldr	r1, [pc, #224]	; (801043c <Load_Dat+0x14c>)
 801035a:	4839      	ldr	r0, [pc, #228]	; (8010440 <Load_Dat+0x150>)
 801035c:	f012 fca2 	bl	8022ca4 <memcpy>
 8010360:	4b36      	ldr	r3, [pc, #216]	; (801043c <Load_Dat+0x14c>)
 8010362:	78db      	ldrb	r3, [r3, #3]
 8010364:	b21a      	sxth	r2, r3
 8010366:	4b37      	ldr	r3, [pc, #220]	; (8010444 <Load_Dat+0x154>)
 8010368:	879a      	strh	r2, [r3, #60]	; 0x3c
 801036a:	4b34      	ldr	r3, [pc, #208]	; (801043c <Load_Dat+0x14c>)
 801036c:	791b      	ldrb	r3, [r3, #4]
 801036e:	b21a      	sxth	r2, r3
 8010370:	4b34      	ldr	r3, [pc, #208]	; (8010444 <Load_Dat+0x154>)
 8010372:	809a      	strh	r2, [r3, #4]
 8010374:	4b31      	ldr	r3, [pc, #196]	; (801043c <Load_Dat+0x14c>)
 8010376:	795b      	ldrb	r3, [r3, #5]
 8010378:	b21a      	sxth	r2, r3
 801037a:	4b32      	ldr	r3, [pc, #200]	; (8010444 <Load_Dat+0x154>)
 801037c:	819a      	strh	r2, [r3, #12]
 801037e:	4b2f      	ldr	r3, [pc, #188]	; (801043c <Load_Dat+0x14c>)
 8010380:	799b      	ldrb	r3, [r3, #6]
 8010382:	b21a      	sxth	r2, r3
 8010384:	4b2f      	ldr	r3, [pc, #188]	; (8010444 <Load_Dat+0x154>)
 8010386:	829a      	strh	r2, [r3, #20]
 8010388:	4b2c      	ldr	r3, [pc, #176]	; (801043c <Load_Dat+0x14c>)
 801038a:	79db      	ldrb	r3, [r3, #7]
 801038c:	b21a      	sxth	r2, r3
 801038e:	4b2d      	ldr	r3, [pc, #180]	; (8010444 <Load_Dat+0x154>)
 8010390:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8010394:	2300      	movs	r3, #0
 8010396:	627b      	str	r3, [r7, #36]	; 0x24
 8010398:	e010      	b.n	80103bc <Load_Dat+0xcc>
 801039a:	4a2a      	ldr	r2, [pc, #168]	; (8010444 <Load_Dat+0x154>)
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	00db      	lsls	r3, r3, #3
 80103a0:	4413      	add	r3, r2
 80103a2:	799b      	ldrb	r3, [r3, #6]
 80103a4:	f043 0320 	orr.w	r3, r3, #32
 80103a8:	b2d9      	uxtb	r1, r3
 80103aa:	4a26      	ldr	r2, [pc, #152]	; (8010444 <Load_Dat+0x154>)
 80103ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ae:	00db      	lsls	r3, r3, #3
 80103b0:	4413      	add	r3, r2
 80103b2:	460a      	mov	r2, r1
 80103b4:	719a      	strb	r2, [r3, #6]
 80103b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b8:	3301      	adds	r3, #1
 80103ba:	627b      	str	r3, [r7, #36]	; 0x24
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	2b03      	cmp	r3, #3
 80103c0:	ddeb      	ble.n	801039a <Load_Dat+0xaa>
 80103c2:	4b20      	ldr	r3, [pc, #128]	; (8010444 <Load_Dat+0x154>)
 80103c4:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 80103c8:	f043 0320 	orr.w	r3, r3, #32
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	4b1d      	ldr	r3, [pc, #116]	; (8010444 <Load_Dat+0x154>)
 80103d0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80103d4:	4b1b      	ldr	r3, [pc, #108]	; (8010444 <Load_Dat+0x154>)
 80103d6:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80103da:	f043 0320 	orr.w	r3, r3, #32
 80103de:	b2da      	uxtb	r2, r3
 80103e0:	4b18      	ldr	r3, [pc, #96]	; (8010444 <Load_Dat+0x154>)
 80103e2:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 80103e6:	4b17      	ldr	r3, [pc, #92]	; (8010444 <Load_Dat+0x154>)
 80103e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103ec:	f043 0320 	orr.w	r3, r3, #32
 80103f0:	b2da      	uxtb	r2, r3
 80103f2:	4b14      	ldr	r3, [pc, #80]	; (8010444 <Load_Dat+0x154>)
 80103f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103f8:	4b12      	ldr	r3, [pc, #72]	; (8010444 <Load_Dat+0x154>)
 80103fa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80103fe:	f043 0320 	orr.w	r3, r3, #32
 8010402:	b2da      	uxtb	r2, r3
 8010404:	4b0f      	ldr	r3, [pc, #60]	; (8010444 <Load_Dat+0x154>)
 8010406:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 801040a:	f002 ffab 	bl	8013364 <Update_Detail>
 801040e:	4b0d      	ldr	r3, [pc, #52]	; (8010444 <Load_Dat+0x154>)
 8010410:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010414:	2b62      	cmp	r3, #98	; 0x62
 8010416:	dc09      	bgt.n	801042c <Load_Dat+0x13c>
 8010418:	4b0a      	ldr	r3, [pc, #40]	; (8010444 <Load_Dat+0x154>)
 801041a:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801041e:	b29b      	uxth	r3, r3
 8010420:	3301      	adds	r3, #1
 8010422:	b29b      	uxth	r3, r3
 8010424:	b21a      	sxth	r2, r3
 8010426:	4b07      	ldr	r3, [pc, #28]	; (8010444 <Load_Dat+0x154>)
 8010428:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 801042c:	2300      	movs	r3, #0
 801042e:	4618      	mov	r0, r3
 8010430:	3728      	adds	r7, #40	; 0x28
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	08000208 	.word	0x08000208
 801043c:	200017d8 	.word	0x200017d8
 8010440:	20000008 	.word	0x20000008
 8010444:	20000298 	.word	0x20000298

08010448 <Save_Bmp>:
 8010448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801044a:	b08f      	sub	sp, #60	; 0x3c
 801044c:	af00      	add	r7, sp, #0
 801044e:	4603      	mov	r3, r0
 8010450:	80fb      	strh	r3, [r7, #6]
 8010452:	4aaa      	ldr	r2, [pc, #680]	; (80106fc <Save_Bmp+0x2b4>)
 8010454:	f107 0314 	add.w	r3, r7, #20
 8010458:	ca07      	ldmia	r2, {r0, r1, r2}
 801045a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801045e:	2304      	movs	r3, #4
 8010460:	62bb      	str	r3, [r7, #40]	; 0x28
 8010462:	2336      	movs	r3, #54	; 0x36
 8010464:	867b      	strh	r3, [r7, #50]	; 0x32
 8010466:	2300      	movs	r3, #0
 8010468:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801046a:	2300      	movs	r3, #0
 801046c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801046e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010472:	627b      	str	r3, [r7, #36]	; 0x24
 8010474:	4ba2      	ldr	r3, [pc, #648]	; (8010700 <Save_Bmp+0x2b8>)
 8010476:	f9b3 3000 	ldrsh.w	r3, [r3]
 801047a:	2b05      	cmp	r3, #5
 801047c:	d105      	bne.n	801048a <Save_Bmp+0x42>
 801047e:	f7fe f9c5 	bl	800e80c <Close_Pop>
 8010482:	49a0      	ldr	r1, [pc, #640]	; (8010704 <Save_Bmp+0x2bc>)
 8010484:	48a0      	ldr	r0, [pc, #640]	; (8010708 <Save_Bmp+0x2c0>)
 8010486:	f7fd f9c1 	bl	800d80c <DrawWindow>
 801048a:	f107 0214 	add.w	r2, r7, #20
 801048e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fb73 	bl	800fb80 <Make_Filename>
 801049a:	f107 0308 	add.w	r3, r7, #8
 801049e:	f107 020c 	add.w	r2, r7, #12
 80104a2:	f107 0114 	add.w	r1, r7, #20
 80104a6:	4899      	ldr	r0, [pc, #612]	; (801070c <Save_Bmp+0x2c4>)
 80104a8:	f7ff f8d0 	bl	800f64c <OpenFileWr>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d002      	beq.n	80104b8 <Save_Bmp+0x70>
 80104b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	e11c      	b.n	80106f2 <Save_Bmp+0x2aa>
 80104b8:	4b94      	ldr	r3, [pc, #592]	; (801070c <Save_Bmp+0x2c4>)
 80104ba:	4a95      	ldr	r2, [pc, #596]	; (8010710 <Save_Bmp+0x2c8>)
 80104bc:	4614      	mov	r4, r2
 80104be:	469c      	mov	ip, r3
 80104c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80104c4:	4665      	mov	r5, ip
 80104c6:	4626      	mov	r6, r4
 80104c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80104ca:	6028      	str	r0, [r5, #0]
 80104cc:	6069      	str	r1, [r5, #4]
 80104ce:	60aa      	str	r2, [r5, #8]
 80104d0:	60eb      	str	r3, [r5, #12]
 80104d2:	3410      	adds	r4, #16
 80104d4:	f10c 0c10 	add.w	ip, ip, #16
 80104d8:	4574      	cmp	r4, lr
 80104da:	d1f3      	bne.n	80104c4 <Save_Bmp+0x7c>
 80104dc:	4663      	mov	r3, ip
 80104de:	4622      	mov	r2, r4
 80104e0:	6810      	ldr	r0, [r2, #0]
 80104e2:	6018      	str	r0, [r3, #0]
 80104e4:	8892      	ldrh	r2, [r2, #4]
 80104e6:	809a      	strh	r2, [r3, #4]
 80104e8:	2336      	movs	r3, #54	; 0x36
 80104ea:	867b      	strh	r3, [r7, #50]	; 0x32
 80104ec:	2300      	movs	r3, #0
 80104ee:	863b      	strh	r3, [r7, #48]	; 0x30
 80104f0:	e042      	b.n	8010578 <Save_Bmp+0x130>
 80104f2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80104f6:	4a87      	ldr	r2, [pc, #540]	; (8010714 <Save_Bmp+0x2cc>)
 80104f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104fc:	121b      	asrs	r3, r3, #8
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010504:	0099      	lsls	r1, r3, #2
 8010506:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801050a:	440b      	add	r3, r1
 801050c:	f022 0207 	bic.w	r2, r2, #7
 8010510:	b2d1      	uxtb	r1, r2
 8010512:	4a7e      	ldr	r2, [pc, #504]	; (801070c <Save_Bmp+0x2c4>)
 8010514:	54d1      	strb	r1, [r2, r3]
 8010516:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801051a:	4a7e      	ldr	r2, [pc, #504]	; (8010714 <Save_Bmp+0x2cc>)
 801051c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010520:	10db      	asrs	r3, r3, #3
 8010522:	b2da      	uxtb	r2, r3
 8010524:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010528:	0099      	lsls	r1, r3, #2
 801052a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801052e:	440b      	add	r3, r1
 8010530:	3301      	adds	r3, #1
 8010532:	f022 0203 	bic.w	r2, r2, #3
 8010536:	b2d1      	uxtb	r1, r2
 8010538:	4a74      	ldr	r2, [pc, #464]	; (801070c <Save_Bmp+0x2c4>)
 801053a:	54d1      	strb	r1, [r2, r3]
 801053c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010540:	4a74      	ldr	r2, [pc, #464]	; (8010714 <Save_Bmp+0x2cc>)
 8010542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010546:	00d9      	lsls	r1, r3, #3
 8010548:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801054c:	009a      	lsls	r2, r3, #2
 801054e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010552:	4413      	add	r3, r2
 8010554:	3302      	adds	r3, #2
 8010556:	b2c9      	uxtb	r1, r1
 8010558:	4a6c      	ldr	r2, [pc, #432]	; (801070c <Save_Bmp+0x2c4>)
 801055a:	54d1      	strb	r1, [r2, r3]
 801055c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010560:	009a      	lsls	r2, r3, #2
 8010562:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010566:	4413      	add	r3, r2
 8010568:	3303      	adds	r3, #3
 801056a:	4a68      	ldr	r2, [pc, #416]	; (801070c <Save_Bmp+0x2c4>)
 801056c:	2100      	movs	r1, #0
 801056e:	54d1      	strb	r1, [r2, r3]
 8010570:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010572:	3301      	adds	r3, #1
 8010574:	b29b      	uxth	r3, r3
 8010576:	863b      	strh	r3, [r7, #48]	; 0x30
 8010578:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801057c:	2b0f      	cmp	r3, #15
 801057e:	ddb8      	ble.n	80104f2 <Save_Bmp+0xaa>
 8010580:	2376      	movs	r3, #118	; 0x76
 8010582:	867b      	strh	r3, [r7, #50]	; 0x32
 8010584:	2300      	movs	r3, #0
 8010586:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010588:	e079      	b.n	801067e <Save_Bmp+0x236>
 801058a:	2300      	movs	r3, #0
 801058c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801058e:	e06b      	b.n	8010668 <Save_Bmp+0x220>
 8010590:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010594:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f001 fe62 	bl	8012264 <LCD_Set_Posi>
 80105a0:	f001 fed6 	bl	8012350 <LCD_Get_Pixel>
 80105a4:	4603      	mov	r3, r0
 80105a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80105a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105aa:	3301      	adds	r3, #1
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	b21b      	sxth	r3, r3
 80105b0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f001 fe54 	bl	8012264 <LCD_Set_Posi>
 80105bc:	f001 fec8 	bl	8012350 <LCD_Get_Pixel>
 80105c0:	4603      	mov	r3, r0
 80105c2:	843b      	strh	r3, [r7, #32]
 80105c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff f8a1 	bl	800f710 <Color_Num>
 80105ce:	4603      	mov	r3, r0
 80105d0:	011b      	lsls	r3, r3, #4
 80105d2:	b2dc      	uxtb	r4, r3
 80105d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff f899 	bl	800f710 <Color_Num>
 80105de:	4603      	mov	r3, r0
 80105e0:	461a      	mov	r2, r3
 80105e2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105e6:	4422      	add	r2, r4
 80105e8:	b2d1      	uxtb	r1, r2
 80105ea:	4a48      	ldr	r2, [pc, #288]	; (801070c <Save_Bmp+0x2c4>)
 80105ec:	54d1      	strb	r1, [r2, r3]
 80105ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	3301      	adds	r3, #1
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80105fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80105fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010600:	429a      	cmp	r2, r3
 8010602:	dc2d      	bgt.n	8010660 <Save_Bmp+0x218>
 8010604:	2300      	movs	r3, #0
 8010606:	867b      	strh	r3, [r7, #50]	; 0x32
 8010608:	f107 030c 	add.w	r3, r7, #12
 801060c:	4619      	mov	r1, r3
 801060e:	483f      	ldr	r0, [pc, #252]	; (801070c <Save_Bmp+0x2c4>)
 8010610:	f7fe ff44 	bl	800f49c <ProgFileSec>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d001      	beq.n	801061e <Save_Bmp+0x1d6>
 801061a:	2303      	movs	r3, #3
 801061c:	e069      	b.n	80106f2 <Save_Bmp+0x2aa>
 801061e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010622:	2b00      	cmp	r3, #0
 8010624:	d110      	bne.n	8010648 <Save_Bmp+0x200>
 8010626:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801062a:	b29a      	uxth	r2, r3
 801062c:	3201      	adds	r2, #1
 801062e:	b292      	uxth	r2, r2
 8010630:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8010632:	105b      	asrs	r3, r3, #1
 8010634:	b21b      	sxth	r3, r3
 8010636:	b2db      	uxtb	r3, r3
 8010638:	f003 0303 	and.w	r3, r3, #3
 801063c:	b2db      	uxtb	r3, r3
 801063e:	461a      	mov	r2, r3
 8010640:	2102      	movs	r1, #2
 8010642:	20a8      	movs	r0, #168	; 0xa8
 8010644:	f7ff f8e4 	bl	800f810 <PrintClk>
 8010648:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801064c:	b29b      	uxth	r3, r3
 801064e:	3301      	adds	r3, #1
 8010650:	b29b      	uxth	r3, r3
 8010652:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010654:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010658:	2b01      	cmp	r3, #1
 801065a:	dd01      	ble.n	8010660 <Save_Bmp+0x218>
 801065c:	2300      	movs	r3, #0
 801065e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010660:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010662:	3302      	adds	r3, #2
 8010664:	b29b      	uxth	r3, r3
 8010666:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010668:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801066c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8010670:	db8e      	blt.n	8010590 <Save_Bmp+0x148>
 8010672:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010676:	b29b      	uxth	r3, r3
 8010678:	3301      	adds	r3, #1
 801067a:	b29b      	uxth	r3, r3
 801067c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801067e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010682:	2bef      	cmp	r3, #239	; 0xef
 8010684:	dd81      	ble.n	801058a <Save_Bmp+0x142>
 8010686:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00c      	beq.n	80106a8 <Save_Bmp+0x260>
 801068e:	f107 030c 	add.w	r3, r7, #12
 8010692:	4619      	mov	r1, r3
 8010694:	481d      	ldr	r0, [pc, #116]	; (801070c <Save_Bmp+0x2c4>)
 8010696:	f7fe ff01 	bl	800f49c <ProgFileSec>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d003      	beq.n	80106a8 <Save_Bmp+0x260>
 80106a0:	f7fe f8ca 	bl	800e838 <List_Pop>
 80106a4:	2303      	movs	r3, #3
 80106a6:	e024      	b.n	80106f2 <Save_Bmp+0x2aa>
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	f107 020c 	add.w	r2, r7, #12
 80106b0:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80106b4:	4815      	ldr	r0, [pc, #84]	; (801070c <Save_Bmp+0x2c4>)
 80106b6:	f7fe ff65 	bl	800f584 <CloseFile>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <Save_Bmp+0x27c>
 80106c0:	2303      	movs	r3, #3
 80106c2:	e016      	b.n	80106f2 <Save_Bmp+0x2aa>
 80106c4:	4b0e      	ldr	r3, [pc, #56]	; (8010700 <Save_Bmp+0x2b8>)
 80106c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106ca:	2b05      	cmp	r3, #5
 80106cc:	d101      	bne.n	80106d2 <Save_Bmp+0x28a>
 80106ce:	f7fe f8b3 	bl	800e838 <List_Pop>
 80106d2:	4b11      	ldr	r3, [pc, #68]	; (8010718 <Save_Bmp+0x2d0>)
 80106d4:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80106d8:	2b62      	cmp	r3, #98	; 0x62
 80106da:	dc09      	bgt.n	80106f0 <Save_Bmp+0x2a8>
 80106dc:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <Save_Bmp+0x2d0>)
 80106de:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	3301      	adds	r3, #1
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	b21a      	sxth	r2, r3
 80106ea:	4b0b      	ldr	r3, [pc, #44]	; (8010718 <Save_Bmp+0x2d0>)
 80106ec:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80106f0:	2300      	movs	r3, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	373c      	adds	r7, #60	; 0x3c
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106fa:	bf00      	nop
 80106fc:	080001fc 	.word	0x080001fc
 8010700:	2000079e 	.word	0x2000079e
 8010704:	20000140 	.word	0x20000140
 8010708:	20000c08 	.word	0x20000c08
 801070c:	200017d8 	.word	0x200017d8
 8010710:	08001b84 	.word	0x08001b84
 8010714:	08001b64 	.word	0x08001b64
 8010718:	20000298 	.word	0x20000298

0801071c <Save_Csv>:
 801071c:	b580      	push	{r7, lr}
 801071e:	b094      	sub	sp, #80	; 0x50
 8010720:	af00      	add	r7, sp, #0
 8010722:	4603      	mov	r3, r0
 8010724:	80fb      	strh	r3, [r7, #6]
 8010726:	4baf      	ldr	r3, [pc, #700]	; (80109e4 <Save_Csv+0x2c8>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	4baf      	ldr	r3, [pc, #700]	; (80109e8 <Save_Csv+0x2cc>)
 801072c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010730:	4619      	mov	r1, r3
 8010732:	4bae      	ldr	r3, [pc, #696]	; (80109ec <Save_Csv+0x2d0>)
 8010734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010738:	2b00      	cmp	r3, #0
 801073a:	bf14      	ite	ne
 801073c:	2301      	movne	r3, #1
 801073e:	2300      	moveq	r3, #0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	440b      	add	r3, r1
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	4413      	add	r3, r2
 8010748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4aa8      	ldr	r2, [pc, #672]	; (80109f0 <Save_Csv+0x2d4>)
 8010750:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010754:	4611      	mov	r1, r2
 8010756:	4aa7      	ldr	r2, [pc, #668]	; (80109f4 <Save_Csv+0x2d8>)
 8010758:	5c52      	ldrb	r2, [r2, r1]
 801075a:	fb93 f3f2 	sdiv	r3, r3, r2
 801075e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010760:	4aa5      	ldr	r2, [pc, #660]	; (80109f8 <Save_Csv+0x2dc>)
 8010762:	f107 031c 	add.w	r3, r7, #28
 8010766:	ca07      	ldmia	r2, {r0, r1, r2}
 8010768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801076c:	2300      	movs	r3, #0
 801076e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010770:	2300      	movs	r3, #0
 8010772:	647b      	str	r3, [r7, #68]	; 0x44
 8010774:	2304      	movs	r3, #4
 8010776:	637b      	str	r3, [r7, #52]	; 0x34
 8010778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801077c:	633b      	str	r3, [r7, #48]	; 0x30
 801077e:	f107 021c 	add.w	r2, r7, #28
 8010782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff f9f9 	bl	800fb80 <Make_Filename>
 801078e:	f107 0310 	add.w	r3, r7, #16
 8010792:	f107 0214 	add.w	r2, r7, #20
 8010796:	f107 011c 	add.w	r1, r7, #28
 801079a:	4898      	ldr	r0, [pc, #608]	; (80109fc <Save_Csv+0x2e0>)
 801079c:	f7fe ff56 	bl	800f64c <OpenFileWr>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d002      	beq.n	80107ac <Save_Csv+0x90>
 80107a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a8:	b2db      	uxtb	r3, r3
 80107aa:	e1d3      	b.n	8010b54 <Save_Csv+0x438>
 80107ac:	4b94      	ldr	r3, [pc, #592]	; (8010a00 <Save_Csv+0x2e4>)
 80107ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107b2:	00db      	lsls	r3, r3, #3
 80107b4:	4a93      	ldr	r2, [pc, #588]	; (8010a04 <Save_Csv+0x2e8>)
 80107b6:	4413      	add	r3, r2
 80107b8:	2205      	movs	r2, #5
 80107ba:	4619      	mov	r1, r3
 80107bc:	488f      	ldr	r0, [pc, #572]	; (80109fc <Save_Csv+0x2e0>)
 80107be:	f012 fa71 	bl	8022ca4 <memcpy>
 80107c2:	2203      	movs	r2, #3
 80107c4:	4990      	ldr	r1, [pc, #576]	; (8010a08 <Save_Csv+0x2ec>)
 80107c6:	4891      	ldr	r0, [pc, #580]	; (8010a0c <Save_Csv+0x2f0>)
 80107c8:	f012 fa6c 	bl	8022ca4 <memcpy>
 80107cc:	4b90      	ldr	r3, [pc, #576]	; (8010a10 <Save_Csv+0x2f4>)
 80107ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107d0:	2300      	movs	r3, #0
 80107d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107d4:	4b8a      	ldr	r3, [pc, #552]	; (8010a00 <Save_Csv+0x2e4>)
 80107d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80107da:	461a      	mov	r2, r3
 80107dc:	4613      	mov	r3, r2
 80107de:	005b      	lsls	r3, r3, #1
 80107e0:	4413      	add	r3, r2
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	4a8b      	ldr	r2, [pc, #556]	; (8010a14 <Save_Csv+0x2f8>)
 80107e6:	4413      	add	r3, r2
 80107e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ea:	e00a      	b.n	8010802 <Save_Csv+0xe6>
 80107ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80107f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107f4:	1c51      	adds	r1, r2, #1
 80107f6:	64f9      	str	r1, [r7, #76]	; 0x4c
 80107f8:	4611      	mov	r1, r2
 80107fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107fc:	440a      	add	r2, r1
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	7013      	strb	r3, [r2, #0]
 8010802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1f0      	bne.n	80107ec <Save_Csv+0xd0>
 801080a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801080c:	1c5a      	adds	r2, r3, #1
 801080e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010810:	461a      	mov	r2, r3
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	4413      	add	r3, r2
 8010816:	222a      	movs	r2, #42	; 0x2a
 8010818:	701a      	strb	r2, [r3, #0]
 801081a:	4b79      	ldr	r3, [pc, #484]	; (8010a00 <Save_Csv+0x2e4>)
 801081c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010820:	461a      	mov	r2, r3
 8010822:	4613      	mov	r3, r2
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	4413      	add	r3, r2
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	4a7b      	ldr	r2, [pc, #492]	; (8010a18 <Save_Csv+0x2fc>)
 801082c:	4413      	add	r3, r2
 801082e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010830:	e00a      	b.n	8010848 <Save_Csv+0x12c>
 8010832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801083a:	1c51      	adds	r1, r2, #1
 801083c:	64f9      	str	r1, [r7, #76]	; 0x4c
 801083e:	4611      	mov	r1, r2
 8010840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010842:	440a      	add	r2, r1
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	7013      	strb	r3, [r2, #0]
 8010848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1f0      	bne.n	8010832 <Save_Csv+0x116>
 8010850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010854:	4413      	add	r3, r2
 8010856:	222c      	movs	r2, #44	; 0x2c
 8010858:	701a      	strb	r2, [r3, #0]
 801085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085c:	3301      	adds	r3, #1
 801085e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010860:	4413      	add	r3, r2
 8010862:	2200      	movs	r2, #0
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010868:	b29b      	uxth	r3, r3
 801086a:	3301      	adds	r3, #1
 801086c:	b29b      	uxth	r3, r3
 801086e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010872:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010876:	3308      	adds	r3, #8
 8010878:	64bb      	str	r3, [r7, #72]	; 0x48
 801087a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801087c:	4a5f      	ldr	r2, [pc, #380]	; (80109fc <Save_Csv+0x2e0>)
 801087e:	4413      	add	r3, r2
 8010880:	2202      	movs	r2, #2
 8010882:	4966      	ldr	r1, [pc, #408]	; (8010a1c <Save_Csv+0x300>)
 8010884:	4618      	mov	r0, r3
 8010886:	f012 fa0d 	bl	8022ca4 <memcpy>
 801088a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801088c:	3302      	adds	r3, #2
 801088e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010890:	2300      	movs	r3, #0
 8010892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010894:	e0fe      	b.n	8010a94 <Save_Csv+0x378>
 8010896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010898:	3302      	adds	r3, #2
 801089a:	4a61      	ldr	r2, [pc, #388]	; (8010a20 <Save_Csv+0x304>)
 801089c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80108a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80108a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108a6:	fb02 f303 	mul.w	r3, r2, r3
 80108aa:	131b      	asrs	r3, r3, #12
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	3364      	adds	r3, #100	; 0x64
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80108b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	dd0a      	ble.n	80108d2 <Save_Csv+0x1b6>
 80108bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80108c0:	2bc8      	cmp	r3, #200	; 0xc8
 80108c2:	dd02      	ble.n	80108ca <Save_Csv+0x1ae>
 80108c4:	23c7      	movs	r3, #199	; 0xc7
 80108c6:	723b      	strb	r3, [r7, #8]
 80108c8:	e005      	b.n	80108d6 <Save_Csv+0x1ba>
 80108ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	723b      	strb	r3, [r7, #8]
 80108d0:	e001      	b.n	80108d6 <Save_Csv+0x1ba>
 80108d2:	2300      	movs	r3, #0
 80108d4:	723b      	strb	r3, [r7, #8]
 80108d6:	7a3a      	ldrb	r2, [r7, #8]
 80108d8:	f107 030c 	add.w	r3, r7, #12
 80108dc:	4611      	mov	r1, r2
 80108de:	4618      	mov	r0, r3
 80108e0:	f001 f898 	bl	8011a14 <u8ToDec3>
 80108e4:	2300      	movs	r3, #0
 80108e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80108ea:	e03a      	b.n	8010962 <Save_Csv+0x246>
 80108ec:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80108f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80108f4:	4413      	add	r3, r2
 80108f6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d036      	beq.n	801096c <Save_Csv+0x250>
 80108fe:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8010902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010904:	1c59      	adds	r1, r3, #1
 8010906:	64b9      	str	r1, [r7, #72]	; 0x48
 8010908:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801090c:	440a      	add	r2, r1
 801090e:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010912:	4a3a      	ldr	r2, [pc, #232]	; (80109fc <Save_Csv+0x2e0>)
 8010914:	54d1      	strb	r1, [r2, r3]
 8010916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091a:	429a      	cmp	r2, r3
 801091c:	db1a      	blt.n	8010954 <Save_Csv+0x238>
 801091e:	f107 0314 	add.w	r3, r7, #20
 8010922:	4619      	mov	r1, r3
 8010924:	4835      	ldr	r0, [pc, #212]	; (80109fc <Save_Csv+0x2e0>)
 8010926:	f7fe fdb9 	bl	800f49c <ProgFileSec>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d001      	beq.n	8010934 <Save_Csv+0x218>
 8010930:	2303      	movs	r3, #3
 8010932:	e10f      	b.n	8010b54 <Save_Csv+0x438>
 8010934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010936:	1c5a      	adds	r2, r3, #1
 8010938:	647a      	str	r2, [r7, #68]	; 0x44
 801093a:	105b      	asrs	r3, r3, #1
 801093c:	b2db      	uxtb	r3, r3
 801093e:	f003 0303 	and.w	r3, r3, #3
 8010942:	b2db      	uxtb	r3, r3
 8010944:	461a      	mov	r2, r3
 8010946:	2102      	movs	r1, #2
 8010948:	f44f 7084 	mov.w	r0, #264	; 0x108
 801094c:	f7fe ff60 	bl	800f810 <PrintClk>
 8010950:	2300      	movs	r3, #0
 8010952:	64bb      	str	r3, [r7, #72]	; 0x48
 8010954:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010958:	b29b      	uxth	r3, r3
 801095a:	3301      	adds	r3, #1
 801095c:	b29b      	uxth	r3, r3
 801095e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010962:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010966:	2b02      	cmp	r3, #2
 8010968:	ddc0      	ble.n	80108ec <Save_Csv+0x1d0>
 801096a:	e000      	b.n	801096e <Save_Csv+0x252>
 801096c:	bf00      	nop
 801096e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010970:	1c5a      	adds	r2, r3, #1
 8010972:	64ba      	str	r2, [r7, #72]	; 0x48
 8010974:	4a21      	ldr	r2, [pc, #132]	; (80109fc <Save_Csv+0x2e0>)
 8010976:	212c      	movs	r1, #44	; 0x2c
 8010978:	54d1      	strb	r1, [r2, r3]
 801097a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	429a      	cmp	r2, r3
 8010980:	db1a      	blt.n	80109b8 <Save_Csv+0x29c>
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	4619      	mov	r1, r3
 8010988:	481c      	ldr	r0, [pc, #112]	; (80109fc <Save_Csv+0x2e0>)
 801098a:	f7fe fd87 	bl	800f49c <ProgFileSec>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <Save_Csv+0x27c>
 8010994:	2303      	movs	r3, #3
 8010996:	e0dd      	b.n	8010b54 <Save_Csv+0x438>
 8010998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099a:	1c5a      	adds	r2, r3, #1
 801099c:	647a      	str	r2, [r7, #68]	; 0x44
 801099e:	105b      	asrs	r3, r3, #1
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	461a      	mov	r2, r3
 80109aa:	2102      	movs	r1, #2
 80109ac:	f44f 7084 	mov.w	r0, #264	; 0x108
 80109b0:	f7fe ff2e 	bl	800f810 <PrintClk>
 80109b4:	2300      	movs	r3, #0
 80109b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80109b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ba:	1c5a      	adds	r2, r3, #1
 80109bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80109be:	4a0f      	ldr	r2, [pc, #60]	; (80109fc <Save_Csv+0x2e0>)
 80109c0:	210d      	movs	r1, #13
 80109c2:	54d1      	strb	r1, [r2, r3]
 80109c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	429a      	cmp	r2, r3
 80109ca:	db3b      	blt.n	8010a44 <Save_Csv+0x328>
 80109cc:	f107 0314 	add.w	r3, r7, #20
 80109d0:	4619      	mov	r1, r3
 80109d2:	480a      	ldr	r0, [pc, #40]	; (80109fc <Save_Csv+0x2e0>)
 80109d4:	f7fe fd62 	bl	800f49c <ProgFileSec>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d022      	beq.n	8010a24 <Save_Csv+0x308>
 80109de:	2303      	movs	r3, #3
 80109e0:	e0b8      	b.n	8010b54 <Save_Csv+0x438>
 80109e2:	bf00      	nop
 80109e4:	2000057c 	.word	0x2000057c
 80109e8:	20006886 	.word	0x20006886
 80109ec:	20002862 	.word	0x20002862
 80109f0:	2000284a 	.word	0x2000284a
 80109f4:	20000560 	.word	0x20000560
 80109f8:	08000220 	.word	0x08000220
 80109fc:	200017d8 	.word	0x200017d8
 8010a00:	20000298 	.word	0x20000298
 8010a04:	200001d0 	.word	0x200001d0
 8010a08:	08000244 	.word	0x08000244
 8010a0c:	200017dd 	.word	0x200017dd
 8010a10:	200017e0 	.word	0x200017e0
 8010a14:	08001da8 	.word	0x08001da8
 8010a18:	08001cd4 	.word	0x08001cd4
 8010a1c:	08000248 	.word	0x08000248
 8010a20:	20002870 	.word	0x20002870
 8010a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	647a      	str	r2, [r7, #68]	; 0x44
 8010a2a:	105b      	asrs	r3, r3, #1
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	f003 0303 	and.w	r3, r3, #3
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	461a      	mov	r2, r3
 8010a36:	2102      	movs	r1, #2
 8010a38:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a3c:	f7fe fee8 	bl	800f810 <PrintClk>
 8010a40:	2300      	movs	r3, #0
 8010a42:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	64ba      	str	r2, [r7, #72]	; 0x48
 8010a4a:	4a44      	ldr	r2, [pc, #272]	; (8010b5c <Save_Csv+0x440>)
 8010a4c:	210a      	movs	r1, #10
 8010a4e:	54d1      	strb	r1, [r2, r3]
 8010a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	429a      	cmp	r2, r3
 8010a56:	db1a      	blt.n	8010a8e <Save_Csv+0x372>
 8010a58:	f107 0314 	add.w	r3, r7, #20
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	483f      	ldr	r0, [pc, #252]	; (8010b5c <Save_Csv+0x440>)
 8010a60:	f7fe fd1c 	bl	800f49c <ProgFileSec>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d001      	beq.n	8010a6e <Save_Csv+0x352>
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	e072      	b.n	8010b54 <Save_Csv+0x438>
 8010a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	647a      	str	r2, [r7, #68]	; 0x44
 8010a74:	105b      	asrs	r3, r3, #1
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	f003 0303 	and.w	r3, r3, #3
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	461a      	mov	r2, r3
 8010a80:	2102      	movs	r1, #2
 8010a82:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a86:	f7fe fec3 	bl	800f810 <PrintClk>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a90:	3301      	adds	r3, #1
 8010a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a94:	4b32      	ldr	r3, [pc, #200]	; (8010b60 <Save_Csv+0x444>)
 8010a96:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	4b31      	ldr	r3, [pc, #196]	; (8010b64 <Save_Csv+0x448>)
 8010a9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	f6ff aef5 	blt.w	8010896 <Save_Csv+0x17a>
 8010aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d030      	beq.n	8010b14 <Save_Csv+0x3f8>
 8010ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ab8:	4a28      	ldr	r2, [pc, #160]	; (8010b5c <Save_Csv+0x440>)
 8010aba:	210d      	movs	r1, #13
 8010abc:	54d1      	strb	r1, [r2, r3]
 8010abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac0:	1c5a      	adds	r2, r3, #1
 8010ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8010ac4:	4a25      	ldr	r2, [pc, #148]	; (8010b5c <Save_Csv+0x440>)
 8010ac6:	210a      	movs	r1, #10
 8010ac8:	54d1      	strb	r1, [r2, r3]
 8010aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010acc:	4a23      	ldr	r2, [pc, #140]	; (8010b5c <Save_Csv+0x440>)
 8010ace:	1898      	adds	r0, r3, r2
 8010ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ad2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	2120      	movs	r1, #32
 8010ada:	f012 f8f1 	bl	8022cc0 <memset>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ae2:	f107 0314 	add.w	r3, r7, #20
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	481c      	ldr	r0, [pc, #112]	; (8010b5c <Save_Csv+0x440>)
 8010aea:	f7fe fcd7 	bl	800f49c <ProgFileSec>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <Save_Csv+0x3dc>
 8010af4:	2303      	movs	r3, #3
 8010af6:	e02d      	b.n	8010b54 <Save_Csv+0x438>
 8010af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010afa:	1c5a      	adds	r2, r3, #1
 8010afc:	647a      	str	r2, [r7, #68]	; 0x44
 8010afe:	105b      	asrs	r3, r3, #1
 8010b00:	b2db      	uxtb	r3, r3
 8010b02:	f003 0303 	and.w	r3, r3, #3
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	461a      	mov	r2, r3
 8010b0a:	2102      	movs	r1, #2
 8010b0c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010b10:	f7fe fe7e 	bl	800f810 <PrintClk>
 8010b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b18:	fb02 f103 	mul.w	r1, r2, r3
 8010b1c:	f107 0310 	add.w	r3, r7, #16
 8010b20:	f107 0214 	add.w	r2, r7, #20
 8010b24:	480d      	ldr	r0, [pc, #52]	; (8010b5c <Save_Csv+0x440>)
 8010b26:	f7fe fd2d 	bl	800f584 <CloseFile>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <Save_Csv+0x418>
 8010b30:	2304      	movs	r3, #4
 8010b32:	e00f      	b.n	8010b54 <Save_Csv+0x438>
 8010b34:	4b0a      	ldr	r3, [pc, #40]	; (8010b60 <Save_Csv+0x444>)
 8010b36:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010b3a:	2b62      	cmp	r3, #98	; 0x62
 8010b3c:	dc09      	bgt.n	8010b52 <Save_Csv+0x436>
 8010b3e:	4b08      	ldr	r3, [pc, #32]	; (8010b60 <Save_Csv+0x444>)
 8010b40:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	3301      	adds	r3, #1
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	b21a      	sxth	r2, r3
 8010b4c:	4b04      	ldr	r3, [pc, #16]	; (8010b60 <Save_Csv+0x444>)
 8010b4e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8010b52:	2300      	movs	r3, #0
 8010b54:	4618      	mov	r0, r3
 8010b56:	3750      	adds	r7, #80	; 0x50
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	200017d8 	.word	0x200017d8
 8010b60:	20000298 	.word	0x20000298
 8010b64:	08002270 	.word	0x08002270

08010b68 <Save_Svg>:
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b092      	sub	sp, #72	; 0x48
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	80fb      	strh	r3, [r7, #6]
 8010b72:	4abb      	ldr	r2, [pc, #748]	; (8010e60 <Save_Svg+0x2f8>)
 8010b74:	f107 031c 	add.w	r3, r7, #28
 8010b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010b7e:	2304      	movs	r3, #4
 8010b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b82:	2300      	movs	r3, #0
 8010b84:	637b      	str	r3, [r7, #52]	; 0x34
 8010b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b8a:	867b      	strh	r3, [r7, #50]	; 0x32
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010b90:	4bb4      	ldr	r3, [pc, #720]	; (8010e64 <Save_Svg+0x2fc>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	4bb4      	ldr	r3, [pc, #720]	; (8010e68 <Save_Svg+0x300>)
 8010b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4bb3      	ldr	r3, [pc, #716]	; (8010e6c <Save_Svg+0x304>)
 8010b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	bf14      	ite	ne
 8010ba6:	2301      	movne	r3, #1
 8010ba8:	2300      	moveq	r3, #0
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	440b      	add	r3, r1
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4aad      	ldr	r2, [pc, #692]	; (8010e70 <Save_Svg+0x308>)
 8010bba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4aac      	ldr	r2, [pc, #688]	; (8010e74 <Save_Svg+0x30c>)
 8010bc2:	5c52      	ldrb	r2, [r2, r1]
 8010bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bca:	4bab      	ldr	r3, [pc, #684]	; (8010e78 <Save_Svg+0x310>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	601a      	str	r2, [r3, #0]
 8010bd0:	4baa      	ldr	r3, [pc, #680]	; (8010e7c <Save_Svg+0x314>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	801a      	strh	r2, [r3, #0]
 8010bd6:	4baa      	ldr	r3, [pc, #680]	; (8010e80 <Save_Svg+0x318>)
 8010bd8:	2200      	movs	r2, #0
 8010bda:	801a      	strh	r2, [r3, #0]
 8010bdc:	4ba9      	ldr	r3, [pc, #676]	; (8010e84 <Save_Svg+0x31c>)
 8010bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010be0:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010be4:	2100      	movs	r1, #0
 8010be6:	48a7      	ldr	r0, [pc, #668]	; (8010e84 <Save_Svg+0x31c>)
 8010be8:	f012 f86a 	bl	8022cc0 <memset>
 8010bec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	48a4      	ldr	r0, [pc, #656]	; (8010e88 <Save_Svg+0x320>)
 8010bf6:	f012 f863 	bl	8022cc0 <memset>
 8010bfa:	f107 021c 	add.w	r2, r7, #28
 8010bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c02:	4611      	mov	r1, r2
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fe ffbb 	bl	800fb80 <Make_Filename>
 8010c0a:	f107 0310 	add.w	r3, r7, #16
 8010c0e:	f107 0214 	add.w	r2, r7, #20
 8010c12:	f107 011c 	add.w	r1, r7, #28
 8010c16:	489c      	ldr	r0, [pc, #624]	; (8010e88 <Save_Svg+0x320>)
 8010c18:	f7fe fd18 	bl	800f64c <OpenFileWr>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d002      	beq.n	8010c28 <Save_Svg+0xc0>
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	e3d5      	b.n	80113d4 <Save_Svg+0x86c>
 8010c28:	4b98      	ldr	r3, [pc, #608]	; (8010e8c <Save_Svg+0x324>)
 8010c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4619      	mov	r1, r3
 8010c32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c34:	f7fe ff0a 	bl	800fa4c <WriteStr>
 8010c38:	4b95      	ldr	r3, [pc, #596]	; (8010e90 <Save_Svg+0x328>)
 8010c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c3c:	f107 0314 	add.w	r3, r7, #20
 8010c40:	4619      	mov	r1, r3
 8010c42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c44:	f7fe ff02 	bl	800fa4c <WriteStr>
 8010c48:	4b92      	ldr	r3, [pc, #584]	; (8010e94 <Save_Svg+0x32c>)
 8010c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c4c:	f107 0314 	add.w	r3, r7, #20
 8010c50:	4619      	mov	r1, r3
 8010c52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c54:	f7fe fefa 	bl	800fa4c <WriteStr>
 8010c58:	4b8f      	ldr	r3, [pc, #572]	; (8010e98 <Save_Svg+0x330>)
 8010c5a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c5e:	461a      	mov	r2, r3
 8010c60:	4b8e      	ldr	r3, [pc, #568]	; (8010e9c <Save_Svg+0x334>)
 8010c62:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c66:	f107 0214 	add.w	r2, r7, #20
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fe fe45 	bl	800f8fc <WriteVar>
 8010c72:	4b8b      	ldr	r3, [pc, #556]	; (8010ea0 <Save_Svg+0x338>)
 8010c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c76:	f107 0314 	add.w	r3, r7, #20
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c7e:	f7fe fee5 	bl	800fa4c <WriteStr>
 8010c82:	4b88      	ldr	r3, [pc, #544]	; (8010ea4 <Save_Svg+0x33c>)
 8010c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c86:	f107 0314 	add.w	r3, r7, #20
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c8e:	f7fe fedd 	bl	800fa4c <WriteStr>
 8010c92:	4b81      	ldr	r3, [pc, #516]	; (8010e98 <Save_Svg+0x330>)
 8010c94:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b80      	ldr	r3, [pc, #512]	; (8010e9c <Save_Svg+0x334>)
 8010c9c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ca0:	f107 0214 	add.w	r2, r7, #20
 8010ca4:	4611      	mov	r1, r2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fe fe28 	bl	800f8fc <WriteVar>
 8010cac:	4b7e      	ldr	r3, [pc, #504]	; (8010ea8 <Save_Svg+0x340>)
 8010cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cb0:	f107 0314 	add.w	r3, r7, #20
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cb8:	f7fe fec8 	bl	800fa4c <WriteStr>
 8010cbc:	4b7b      	ldr	r3, [pc, #492]	; (8010eac <Save_Svg+0x344>)
 8010cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cc0:	f107 0314 	add.w	r3, r7, #20
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cc8:	f7fe fec0 	bl	800fa4c <WriteStr>
 8010ccc:	4b72      	ldr	r3, [pc, #456]	; (8010e98 <Save_Svg+0x330>)
 8010cce:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010cd2:	f107 0214 	add.w	r2, r7, #20
 8010cd6:	4611      	mov	r1, r2
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fe fe0f 	bl	800f8fc <WriteVar>
 8010cde:	4b74      	ldr	r3, [pc, #464]	; (8010eb0 <Save_Svg+0x348>)
 8010ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ce2:	f107 0314 	add.w	r3, r7, #20
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cea:	f7fe feaf 	bl	800fa4c <WriteStr>
 8010cee:	4b6a      	ldr	r3, [pc, #424]	; (8010e98 <Save_Svg+0x330>)
 8010cf0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010cf4:	f107 0214 	add.w	r2, r7, #20
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fdfe 	bl	800f8fc <WriteVar>
 8010d00:	4b6c      	ldr	r3, [pc, #432]	; (8010eb4 <Save_Svg+0x34c>)
 8010d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d04:	f107 0314 	add.w	r3, r7, #20
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d0c:	f7fe fe9e 	bl	800fa4c <WriteStr>
 8010d10:	4b61      	ldr	r3, [pc, #388]	; (8010e98 <Save_Svg+0x330>)
 8010d12:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	b21b      	sxth	r3, r3
 8010d20:	f107 0214 	add.w	r2, r7, #20
 8010d24:	4611      	mov	r1, r2
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fde8 	bl	800f8fc <WriteVar>
 8010d2c:	4b62      	ldr	r3, [pc, #392]	; (8010eb8 <Save_Svg+0x350>)
 8010d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d30:	f107 0314 	add.w	r3, r7, #20
 8010d34:	4619      	mov	r1, r3
 8010d36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d38:	f7fe fe88 	bl	800fa4c <WriteStr>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010d42:	e032      	b.n	8010daa <Save_Svg+0x242>
 8010d44:	4b5d      	ldr	r3, [pc, #372]	; (8010ebc <Save_Svg+0x354>)
 8010d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d48:	f107 0314 	add.w	r3, r7, #20
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d50:	f7fe fe7c 	bl	800fa4c <WriteStr>
 8010d54:	f107 0214 	add.w	r2, r7, #20
 8010d58:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fe fdcc 	bl	800f8fc <WriteVar>
 8010d64:	4b56      	ldr	r3, [pc, #344]	; (8010ec0 <Save_Svg+0x358>)
 8010d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d68:	f107 0314 	add.w	r3, r7, #20
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d70:	f7fe fe6c 	bl	800fa4c <WriteStr>
 8010d74:	4b48      	ldr	r3, [pc, #288]	; (8010e98 <Save_Svg+0x330>)
 8010d76:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4b47      	ldr	r3, [pc, #284]	; (8010e9c <Save_Svg+0x334>)
 8010d7e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d82:	f107 0214 	add.w	r2, r7, #20
 8010d86:	4611      	mov	r1, r2
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe fdb7 	bl	800f8fc <WriteVar>
 8010d8e:	4b4d      	ldr	r3, [pc, #308]	; (8010ec4 <Save_Svg+0x35c>)
 8010d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d92:	f107 0314 	add.w	r3, r7, #20
 8010d96:	4619      	mov	r1, r3
 8010d98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d9a:	f7fe fe57 	bl	800fa4c <WriteStr>
 8010d9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010da2:	3319      	adds	r3, #25
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010daa:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010dae:	2bc8      	cmp	r3, #200	; 0xc8
 8010db0:	ddc8      	ble.n	8010d44 <Save_Svg+0x1dc>
 8010db2:	2300      	movs	r3, #0
 8010db4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010db8:	e01d      	b.n	8010df6 <Save_Svg+0x28e>
 8010dba:	4b43      	ldr	r3, [pc, #268]	; (8010ec8 <Save_Svg+0x360>)
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dbe:	f107 0314 	add.w	r3, r7, #20
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dc6:	f7fe fe41 	bl	800fa4c <WriteStr>
 8010dca:	f107 0214 	add.w	r2, r7, #20
 8010dce:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fd91 	bl	800f8fc <WriteVar>
 8010dda:	4b3c      	ldr	r3, [pc, #240]	; (8010ecc <Save_Svg+0x364>)
 8010ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dde:	f107 0314 	add.w	r3, r7, #20
 8010de2:	4619      	mov	r1, r3
 8010de4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010de6:	f7fe fe31 	bl	800fa4c <WriteStr>
 8010dea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010dee:	3319      	adds	r3, #25
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010df6:	4b28      	ldr	r3, [pc, #160]	; (8010e98 <Save_Svg+0x330>)
 8010df8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	4b27      	ldr	r3, [pc, #156]	; (8010e9c <Save_Svg+0x334>)
 8010e00:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010e04:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	ddd6      	ble.n	8010dba <Save_Svg+0x252>
 8010e0c:	4b30      	ldr	r3, [pc, #192]	; (8010ed0 <Save_Svg+0x368>)
 8010e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e10:	f107 0314 	add.w	r3, r7, #20
 8010e14:	4619      	mov	r1, r3
 8010e16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e18:	f7fe fe18 	bl	800fa4c <WriteStr>
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010e22:	e091      	b.n	8010f48 <Save_Svg+0x3e0>
 8010e24:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010e28:	3302      	adds	r3, #2
 8010e2a:	4a2a      	ldr	r2, [pc, #168]	; (8010ed4 <Save_Svg+0x36c>)
 8010e2c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010e30:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e36:	fb02 f303 	mul.w	r3, r2, r3
 8010e3a:	131b      	asrs	r3, r3, #12
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	3364      	adds	r3, #100	; 0x64
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010e44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	dd45      	ble.n	8010ed8 <Save_Svg+0x370>
 8010e4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010e50:	2bc8      	cmp	r3, #200	; 0xc8
 8010e52:	dd02      	ble.n	8010e5a <Save_Svg+0x2f2>
 8010e54:	23c7      	movs	r3, #199	; 0xc7
 8010e56:	813b      	strh	r3, [r7, #8]
 8010e58:	e040      	b.n	8010edc <Save_Svg+0x374>
 8010e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e5c:	813b      	strh	r3, [r7, #8]
 8010e5e:	e03d      	b.n	8010edc <Save_Svg+0x374>
 8010e60:	0800022c 	.word	0x0800022c
 8010e64:	2000057c 	.word	0x2000057c
 8010e68:	20006886 	.word	0x20006886
 8010e6c:	20002862 	.word	0x20002862
 8010e70:	2000284a 	.word	0x2000284a
 8010e74:	20000560 	.word	0x20000560
 8010e78:	20000794 	.word	0x20000794
 8010e7c:	20000790 	.word	0x20000790
 8010e80:	20000792 	.word	0x20000792
 8010e84:	20000008 	.word	0x20000008
 8010e88:	200017d8 	.word	0x200017d8
 8010e8c:	0800024c 	.word	0x0800024c
 8010e90:	0800027c 	.word	0x0800027c
 8010e94:	080002e8 	.word	0x080002e8
 8010e98:	20000298 	.word	0x20000298
 8010e9c:	08002270 	.word	0x08002270
 8010ea0:	080002f8 	.word	0x080002f8
 8010ea4:	08000384 	.word	0x08000384
 8010ea8:	080003b0 	.word	0x080003b0
 8010eac:	080003c0 	.word	0x080003c0
 8010eb0:	080003e8 	.word	0x080003e8
 8010eb4:	080003f0 	.word	0x080003f0
 8010eb8:	080003f8 	.word	0x080003f8
 8010ebc:	08000404 	.word	0x08000404
 8010ec0:	08000424 	.word	0x08000424
 8010ec4:	08000428 	.word	0x08000428
 8010ec8:	08000430 	.word	0x08000430
 8010ecc:	0800044c 	.word	0x0800044c
 8010ed0:	08000458 	.word	0x08000458
 8010ed4:	20002870 	.word	0x20002870
 8010ed8:	2300      	movs	r3, #0
 8010eda:	813b      	strh	r3, [r7, #8]
 8010edc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	b21b      	sxth	r3, r3
 8010eea:	813b      	strh	r3, [r7, #8]
 8010eec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <Save_Svg+0x392>
 8010ef4:	4b3b      	ldr	r3, [pc, #236]	; (8010fe4 <Save_Svg+0x47c>)
 8010ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ef8:	e001      	b.n	8010efe <Save_Svg+0x396>
 8010efa:	4b3b      	ldr	r3, [pc, #236]	; (8010fe8 <Save_Svg+0x480>)
 8010efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010efe:	f107 0314 	add.w	r3, r7, #20
 8010f02:	4619      	mov	r1, r3
 8010f04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f06:	f7fe fda1 	bl	800fa4c <WriteStr>
 8010f0a:	f107 0214 	add.w	r2, r7, #20
 8010f0e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010f12:	4611      	mov	r1, r2
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fe fcf1 	bl	800f8fc <WriteVar>
 8010f1a:	4b34      	ldr	r3, [pc, #208]	; (8010fec <Save_Svg+0x484>)
 8010f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f1e:	f107 0314 	add.w	r3, r7, #20
 8010f22:	4619      	mov	r1, r3
 8010f24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f26:	f7fe fd91 	bl	800fa4c <WriteStr>
 8010f2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010f2e:	f107 0214 	add.w	r2, r7, #20
 8010f32:	4611      	mov	r1, r2
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe fce1 	bl	800f8fc <WriteVar>
 8010f3a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	3301      	adds	r3, #1
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010f48:	4b29      	ldr	r3, [pc, #164]	; (8010ff0 <Save_Svg+0x488>)
 8010f4a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010f4e:	461a      	mov	r2, r3
 8010f50:	4b28      	ldr	r3, [pc, #160]	; (8010ff4 <Save_Svg+0x48c>)
 8010f52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f56:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	f77f af62 	ble.w	8010e24 <Save_Svg+0x2bc>
 8010f60:	4b25      	ldr	r3, [pc, #148]	; (8010ff8 <Save_Svg+0x490>)
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f64:	f107 0314 	add.w	r3, r7, #20
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f6c:	f7fe fd6e 	bl	800fa4c <WriteStr>
 8010f70:	4b22      	ldr	r3, [pc, #136]	; (8010ffc <Save_Svg+0x494>)
 8010f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f74:	f107 0314 	add.w	r3, r7, #20
 8010f78:	4619      	mov	r1, r3
 8010f7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f7c:	f7fe fd66 	bl	800fa4c <WriteStr>
 8010f80:	4b1b      	ldr	r3, [pc, #108]	; (8010ff0 <Save_Svg+0x488>)
 8010f82:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d007      	beq.n	8010f9a <Save_Svg+0x432>
 8010f8a:	4b19      	ldr	r3, [pc, #100]	; (8010ff0 <Save_Svg+0x488>)
 8010f8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f90:	00db      	lsls	r3, r3, #3
 8010f92:	4a1b      	ldr	r2, [pc, #108]	; (8011000 <Save_Svg+0x498>)
 8010f94:	4413      	add	r3, r2
 8010f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f98:	e006      	b.n	8010fa8 <Save_Svg+0x440>
 8010f9a:	4b15      	ldr	r3, [pc, #84]	; (8010ff0 <Save_Svg+0x488>)
 8010f9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	4a18      	ldr	r2, [pc, #96]	; (8011004 <Save_Svg+0x49c>)
 8010fa4:	4413      	add	r3, r2
 8010fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fa8:	f107 0314 	add.w	r3, r7, #20
 8010fac:	4619      	mov	r1, r3
 8010fae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb0:	f7fe fd4c 	bl	800fa4c <WriteStr>
 8010fb4:	4b14      	ldr	r3, [pc, #80]	; (8011008 <Save_Svg+0x4a0>)
 8010fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fb8:	f107 0314 	add.w	r3, r7, #20
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fc0:	f7fe fd44 	bl	800fa4c <WriteStr>
 8010fc4:	4b11      	ldr	r3, [pc, #68]	; (801100c <Save_Svg+0x4a4>)
 8010fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fc8:	f107 0314 	add.w	r3, r7, #20
 8010fcc:	4619      	mov	r1, r3
 8010fce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fd0:	f7fe fd3c 	bl	800fa4c <WriteStr>
 8010fd4:	4b06      	ldr	r3, [pc, #24]	; (8010ff0 <Save_Svg+0x488>)
 8010fd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d01a      	beq.n	8011014 <Save_Svg+0x4ac>
 8010fde:	4b0c      	ldr	r3, [pc, #48]	; (8011010 <Save_Svg+0x4a8>)
 8010fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fe2:	e019      	b.n	8011018 <Save_Svg+0x4b0>
 8010fe4:	08000490 	.word	0x08000490
 8010fe8:	08000494 	.word	0x08000494
 8010fec:	08000498 	.word	0x08000498
 8010ff0:	20000298 	.word	0x20000298
 8010ff4:	08002270 	.word	0x08002270
 8010ff8:	08000428 	.word	0x08000428
 8010ffc:	0800049c 	.word	0x0800049c
 8011000:	080019fc 	.word	0x080019fc
 8011004:	080019ac 	.word	0x080019ac
 8011008:	08000504 	.word	0x08000504
 801100c:	0800050c 	.word	0x0800050c
 8011010:	08000510 	.word	0x08000510
 8011014:	4bb1      	ldr	r3, [pc, #708]	; (80112dc <Save_Svg+0x774>)
 8011016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011018:	f107 0314 	add.w	r3, r7, #20
 801101c:	4619      	mov	r1, r3
 801101e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011020:	f7fe fd14 	bl	800fa4c <WriteStr>
 8011024:	4bae      	ldr	r3, [pc, #696]	; (80112e0 <Save_Svg+0x778>)
 8011026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011028:	f107 0314 	add.w	r3, r7, #20
 801102c:	4619      	mov	r1, r3
 801102e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011030:	f7fe fd0c 	bl	800fa4c <WriteStr>
 8011034:	4bab      	ldr	r3, [pc, #684]	; (80112e4 <Save_Svg+0x77c>)
 8011036:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801103a:	00db      	lsls	r3, r3, #3
 801103c:	4aaa      	ldr	r2, [pc, #680]	; (80112e8 <Save_Svg+0x780>)
 801103e:	4413      	add	r3, r2
 8011040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011042:	f107 0314 	add.w	r3, r7, #20
 8011046:	4619      	mov	r1, r3
 8011048:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801104a:	f7fe fcff 	bl	800fa4c <WriteStr>
 801104e:	4ba7      	ldr	r3, [pc, #668]	; (80112ec <Save_Svg+0x784>)
 8011050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011052:	f107 0314 	add.w	r3, r7, #20
 8011056:	4619      	mov	r1, r3
 8011058:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801105a:	f7fe fcf7 	bl	800fa4c <WriteStr>
 801105e:	4ba4      	ldr	r3, [pc, #656]	; (80112f0 <Save_Svg+0x788>)
 8011060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011062:	f107 0314 	add.w	r3, r7, #20
 8011066:	4619      	mov	r1, r3
 8011068:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801106a:	f7fe fcef 	bl	800fa4c <WriteStr>
 801106e:	4b9d      	ldr	r3, [pc, #628]	; (80112e4 <Save_Svg+0x77c>)
 8011070:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011074:	b29b      	uxth	r3, r3
 8011076:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 801107a:	b29b      	uxth	r3, r3
 801107c:	863b      	strh	r3, [r7, #48]	; 0x30
 801107e:	4b9d      	ldr	r3, [pc, #628]	; (80112f4 <Save_Svg+0x78c>)
 8011080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011082:	f107 0314 	add.w	r3, r7, #20
 8011086:	4619      	mov	r1, r3
 8011088:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801108a:	f7fe fcdf 	bl	800fa4c <WriteStr>
 801108e:	4b9a      	ldr	r3, [pc, #616]	; (80112f8 <Save_Svg+0x790>)
 8011090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011092:	f107 0314 	add.w	r3, r7, #20
 8011096:	4619      	mov	r1, r3
 8011098:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801109a:	f7fe fcd7 	bl	800fa4c <WriteStr>
 801109e:	4b97      	ldr	r3, [pc, #604]	; (80112fc <Save_Svg+0x794>)
 80110a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110a2:	f107 0314 	add.w	r3, r7, #20
 80110a6:	4619      	mov	r1, r3
 80110a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110aa:	f7fe fccf 	bl	800fa4c <WriteStr>
 80110ae:	4b94      	ldr	r3, [pc, #592]	; (8011300 <Save_Svg+0x798>)
 80110b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b2:	f107 0314 	add.w	r3, r7, #20
 80110b6:	4619      	mov	r1, r3
 80110b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ba:	f7fe fcc7 	bl	800fa4c <WriteStr>
 80110be:	4b91      	ldr	r3, [pc, #580]	; (8011304 <Save_Svg+0x79c>)
 80110c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110c2:	f107 0314 	add.w	r3, r7, #20
 80110c6:	4619      	mov	r1, r3
 80110c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ca:	f7fe fcbf 	bl	800fa4c <WriteStr>
 80110ce:	4b8e      	ldr	r3, [pc, #568]	; (8011308 <Save_Svg+0x7a0>)
 80110d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110d2:	f107 0314 	add.w	r3, r7, #20
 80110d6:	4619      	mov	r1, r3
 80110d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110da:	f7fe fcb7 	bl	800fa4c <WriteStr>
 80110de:	4b8b      	ldr	r3, [pc, #556]	; (801130c <Save_Svg+0x7a4>)
 80110e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e2:	f107 0314 	add.w	r3, r7, #20
 80110e6:	4619      	mov	r1, r3
 80110e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110ea:	f7fe fcaf 	bl	800fa4c <WriteStr>
 80110ee:	4b88      	ldr	r3, [pc, #544]	; (8011310 <Save_Svg+0x7a8>)
 80110f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110f2:	f107 0314 	add.w	r3, r7, #20
 80110f6:	4619      	mov	r1, r3
 80110f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110fa:	f7fe fca7 	bl	800fa4c <WriteStr>
 80110fe:	4b85      	ldr	r3, [pc, #532]	; (8011314 <Save_Svg+0x7ac>)
 8011100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011102:	f107 0314 	add.w	r3, r7, #20
 8011106:	4619      	mov	r1, r3
 8011108:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801110a:	f7fe fc9f 	bl	800fa4c <WriteStr>
 801110e:	4b82      	ldr	r3, [pc, #520]	; (8011318 <Save_Svg+0x7b0>)
 8011110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011112:	f107 0314 	add.w	r3, r7, #20
 8011116:	4619      	mov	r1, r3
 8011118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801111a:	f7fe fc97 	bl	800fa4c <WriteStr>
 801111e:	4b7f      	ldr	r3, [pc, #508]	; (801131c <Save_Svg+0x7b4>)
 8011120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011122:	f107 0314 	add.w	r3, r7, #20
 8011126:	4619      	mov	r1, r3
 8011128:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801112a:	f7fe fc8f 	bl	800fa4c <WriteStr>
 801112e:	4b7c      	ldr	r3, [pc, #496]	; (8011320 <Save_Svg+0x7b8>)
 8011130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011132:	f107 0314 	add.w	r3, r7, #20
 8011136:	4619      	mov	r1, r3
 8011138:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801113a:	f7fe fc87 	bl	800fa4c <WriteStr>
 801113e:	4b79      	ldr	r3, [pc, #484]	; (8011324 <Save_Svg+0x7bc>)
 8011140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011142:	f107 0314 	add.w	r3, r7, #20
 8011146:	4619      	mov	r1, r3
 8011148:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801114a:	f7fe fc7f 	bl	800fa4c <WriteStr>
 801114e:	4b65      	ldr	r3, [pc, #404]	; (80112e4 <Save_Svg+0x77c>)
 8011150:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8011154:	461a      	mov	r2, r3
 8011156:	4b74      	ldr	r3, [pc, #464]	; (8011328 <Save_Svg+0x7c0>)
 8011158:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801115c:	f107 0214 	add.w	r2, r7, #20
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f7fe fbca 	bl	800f8fc <WriteVar>
 8011168:	4b70      	ldr	r3, [pc, #448]	; (801132c <Save_Svg+0x7c4>)
 801116a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801116c:	f107 0314 	add.w	r3, r7, #20
 8011170:	4619      	mov	r1, r3
 8011172:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011174:	f7fe fc6a 	bl	800fa4c <WriteStr>
 8011178:	4b6d      	ldr	r3, [pc, #436]	; (8011330 <Save_Svg+0x7c8>)
 801117a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801117c:	f107 0314 	add.w	r3, r7, #20
 8011180:	4619      	mov	r1, r3
 8011182:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011184:	f7fe fc62 	bl	800fa4c <WriteStr>
 8011188:	4b6a      	ldr	r3, [pc, #424]	; (8011334 <Save_Svg+0x7cc>)
 801118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801118c:	f107 0314 	add.w	r3, r7, #20
 8011190:	4619      	mov	r1, r3
 8011192:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011194:	f7fe fc5a 	bl	800fa4c <WriteStr>
 8011198:	4b67      	ldr	r3, [pc, #412]	; (8011338 <Save_Svg+0x7d0>)
 801119a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801119c:	f107 0314 	add.w	r3, r7, #20
 80111a0:	4619      	mov	r1, r3
 80111a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111a4:	f7fe fc52 	bl	800fa4c <WriteStr>
 80111a8:	4b64      	ldr	r3, [pc, #400]	; (801133c <Save_Svg+0x7d4>)
 80111aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ac:	f107 0314 	add.w	r3, r7, #20
 80111b0:	4619      	mov	r1, r3
 80111b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111b4:	f7fe fc4a 	bl	800fa4c <WriteStr>
 80111b8:	4b61      	ldr	r3, [pc, #388]	; (8011340 <Save_Svg+0x7d8>)
 80111ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111bc:	f107 0314 	add.w	r3, r7, #20
 80111c0:	4619      	mov	r1, r3
 80111c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111c4:	f7fe fc42 	bl	800fa4c <WriteStr>
 80111c8:	4b5e      	ldr	r3, [pc, #376]	; (8011344 <Save_Svg+0x7dc>)
 80111ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111cc:	f107 0314 	add.w	r3, r7, #20
 80111d0:	4619      	mov	r1, r3
 80111d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111d4:	f7fe fc3a 	bl	800fa4c <WriteStr>
 80111d8:	4b58      	ldr	r3, [pc, #352]	; (801133c <Save_Svg+0x7d4>)
 80111da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111dc:	f107 0314 	add.w	r3, r7, #20
 80111e0:	4619      	mov	r1, r3
 80111e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111e4:	f7fe fc32 	bl	800fa4c <WriteStr>
 80111e8:	4b57      	ldr	r3, [pc, #348]	; (8011348 <Save_Svg+0x7e0>)
 80111ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ec:	f107 0314 	add.w	r3, r7, #20
 80111f0:	4619      	mov	r1, r3
 80111f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111f4:	f7fe fc2a 	bl	800fa4c <WriteStr>
 80111f8:	4b3a      	ldr	r3, [pc, #232]	; (80112e4 <Save_Svg+0x77c>)
 80111fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00b      	beq.n	801121a <Save_Svg+0x6b2>
 8011202:	4b38      	ldr	r3, [pc, #224]	; (80112e4 <Save_Svg+0x77c>)
 8011204:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011208:	461a      	mov	r2, r3
 801120a:	4613      	mov	r3, r2
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	4413      	add	r3, r2
 8011210:	005b      	lsls	r3, r3, #1
 8011212:	4a4e      	ldr	r2, [pc, #312]	; (801134c <Save_Svg+0x7e4>)
 8011214:	4413      	add	r3, r2
 8011216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011218:	e00a      	b.n	8011230 <Save_Svg+0x6c8>
 801121a:	4b32      	ldr	r3, [pc, #200]	; (80112e4 <Save_Svg+0x77c>)
 801121c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011220:	461a      	mov	r2, r3
 8011222:	4613      	mov	r3, r2
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	4413      	add	r3, r2
 8011228:	005b      	lsls	r3, r3, #1
 801122a:	4a49      	ldr	r2, [pc, #292]	; (8011350 <Save_Svg+0x7e8>)
 801122c:	4413      	add	r3, r2
 801122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011230:	f107 0314 	add.w	r3, r7, #20
 8011234:	4619      	mov	r1, r3
 8011236:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011238:	f7fe fc08 	bl	800fa4c <WriteStr>
 801123c:	4b45      	ldr	r3, [pc, #276]	; (8011354 <Save_Svg+0x7ec>)
 801123e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011240:	f107 0314 	add.w	r3, r7, #20
 8011244:	4619      	mov	r1, r3
 8011246:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011248:	f7fe fc00 	bl	800fa4c <WriteStr>
 801124c:	f107 0214 	add.w	r2, r7, #20
 8011250:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011254:	4611      	mov	r1, r2
 8011256:	4618      	mov	r0, r3
 8011258:	f7fe fb50 	bl	800f8fc <WriteVar>
 801125c:	4b3e      	ldr	r3, [pc, #248]	; (8011358 <Save_Svg+0x7f0>)
 801125e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011260:	f107 0314 	add.w	r3, r7, #20
 8011264:	4619      	mov	r1, r3
 8011266:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011268:	f7fe fbf0 	bl	800fa4c <WriteStr>
 801126c:	4b1d      	ldr	r3, [pc, #116]	; (80112e4 <Save_Svg+0x77c>)
 801126e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011272:	00db      	lsls	r3, r3, #3
 8011274:	4a39      	ldr	r2, [pc, #228]	; (801135c <Save_Svg+0x7f4>)
 8011276:	4413      	add	r3, r2
 8011278:	63fb      	str	r3, [r7, #60]	; 0x3c
 801127a:	f107 0314 	add.w	r3, r7, #20
 801127e:	4619      	mov	r1, r3
 8011280:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011282:	f7fe fbe3 	bl	800fa4c <WriteStr>
 8011286:	4b36      	ldr	r3, [pc, #216]	; (8011360 <Save_Svg+0x7f8>)
 8011288:	63fb      	str	r3, [r7, #60]	; 0x3c
 801128a:	f107 0314 	add.w	r3, r7, #20
 801128e:	4619      	mov	r1, r3
 8011290:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011292:	f7fe fbdb 	bl	800fa4c <WriteStr>
 8011296:	4b1d      	ldr	r3, [pc, #116]	; (801130c <Save_Svg+0x7a4>)
 8011298:	63fb      	str	r3, [r7, #60]	; 0x3c
 801129a:	f107 0314 	add.w	r3, r7, #20
 801129e:	4619      	mov	r1, r3
 80112a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112a2:	f7fe fbd3 	bl	800fa4c <WriteStr>
 80112a6:	4b2f      	ldr	r3, [pc, #188]	; (8011364 <Save_Svg+0x7fc>)
 80112a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112aa:	f107 0314 	add.w	r3, r7, #20
 80112ae:	4619      	mov	r1, r3
 80112b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112b2:	f7fe fbcb 	bl	800fa4c <WriteStr>
 80112b6:	4b2c      	ldr	r3, [pc, #176]	; (8011368 <Save_Svg+0x800>)
 80112b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ba:	f107 0314 	add.w	r3, r7, #20
 80112be:	4619      	mov	r1, r3
 80112c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80112c2:	f7fe fbc3 	bl	800fa4c <WriteStr>
 80112c6:	f107 0314 	add.w	r3, r7, #20
 80112ca:	4619      	mov	r1, r3
 80112cc:	4827      	ldr	r0, [pc, #156]	; (801136c <Save_Svg+0x804>)
 80112ce:	f7fe f8e5 	bl	800f49c <ProgFileSec>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d04b      	beq.n	8011370 <Save_Svg+0x808>
 80112d8:	2303      	movs	r3, #3
 80112da:	e07b      	b.n	80113d4 <Save_Svg+0x86c>
 80112dc:	08000514 	.word	0x08000514
 80112e0:	08000518 	.word	0x08000518
 80112e4:	20000298 	.word	0x20000298
 80112e8:	200001d0 	.word	0x200001d0
 80112ec:	0800051c 	.word	0x0800051c
 80112f0:	0800052c 	.word	0x0800052c
 80112f4:	08000598 	.word	0x08000598
 80112f8:	080005c4 	.word	0x080005c4
 80112fc:	08000628 	.word	0x08000628
 8011300:	08000644 	.word	0x08000644
 8011304:	08000684 	.word	0x08000684
 8011308:	080006c0 	.word	0x080006c0
 801130c:	080006f4 	.word	0x080006f4
 8011310:	080006f8 	.word	0x080006f8
 8011314:	0800074c 	.word	0x0800074c
 8011318:	08000764 	.word	0x08000764
 801131c:	08000768 	.word	0x08000768
 8011320:	0800077c 	.word	0x0800077c
 8011324:	08000794 	.word	0x08000794
 8011328:	08002270 	.word	0x08002270
 801132c:	080007b0 	.word	0x080007b0
 8011330:	080007c0 	.word	0x080007c0
 8011334:	080007cc 	.word	0x080007cc
 8011338:	08000818 	.word	0x08000818
 801133c:	08000838 	.word	0x08000838
 8011340:	0800083c 	.word	0x0800083c
 8011344:	08000880 	.word	0x08000880
 8011348:	080008cc 	.word	0x080008cc
 801134c:	08001a88 	.word	0x08001a88
 8011350:	08001a4c 	.word	0x08001a4c
 8011354:	08000914 	.word	0x08000914
 8011358:	08000918 	.word	0x08000918
 801135c:	08001ac4 	.word	0x08001ac4
 8011360:	0800092c 	.word	0x0800092c
 8011364:	08000930 	.word	0x08000930
 8011368:	08000940 	.word	0x08000940
 801136c:	200017d8 	.word	0x200017d8
 8011370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	637a      	str	r2, [r7, #52]	; 0x34
 8011376:	105b      	asrs	r3, r3, #1
 8011378:	b2db      	uxtb	r3, r3
 801137a:	f003 0303 	and.w	r3, r3, #3
 801137e:	b2db      	uxtb	r3, r3
 8011380:	461a      	mov	r2, r3
 8011382:	2102      	movs	r1, #2
 8011384:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011388:	f7fe fa42 	bl	800f810 <PrintClk>
 801138c:	4b13      	ldr	r3, [pc, #76]	; (80113dc <Save_Svg+0x874>)
 801138e:	6819      	ldr	r1, [r3, #0]
 8011390:	f107 0310 	add.w	r3, r7, #16
 8011394:	f107 0214 	add.w	r2, r7, #20
 8011398:	4811      	ldr	r0, [pc, #68]	; (80113e0 <Save_Svg+0x878>)
 801139a:	f7fe f8f3 	bl	800f584 <CloseFile>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d001      	beq.n	80113a8 <Save_Svg+0x840>
 80113a4:	2304      	movs	r3, #4
 80113a6:	e015      	b.n	80113d4 <Save_Svg+0x86c>
 80113a8:	4b0e      	ldr	r3, [pc, #56]	; (80113e4 <Save_Svg+0x87c>)
 80113aa:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80113ae:	2b62      	cmp	r3, #98	; 0x62
 80113b0:	dc09      	bgt.n	80113c6 <Save_Svg+0x85e>
 80113b2:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <Save_Svg+0x87c>)
 80113b4:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	3301      	adds	r3, #1
 80113bc:	b29b      	uxth	r3, r3
 80113be:	b21a      	sxth	r2, r3
 80113c0:	4b08      	ldr	r3, [pc, #32]	; (80113e4 <Save_Svg+0x87c>)
 80113c2:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 80113c6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80113ca:	2100      	movs	r1, #0
 80113cc:	4806      	ldr	r0, [pc, #24]	; (80113e8 <Save_Svg+0x880>)
 80113ce:	f011 fc77 	bl	8022cc0 <memset>
 80113d2:	2300      	movs	r3, #0
 80113d4:	4618      	mov	r0, r3
 80113d6:	3748      	adds	r7, #72	; 0x48
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	20000794 	.word	0x20000794
 80113e0:	200017d8 	.word	0x200017d8
 80113e4:	20000298 	.word	0x20000298
 80113e8:	20000008 	.word	0x20000008

080113ec <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 80113f2:	4b10      	ldr	r3, [pc, #64]	; (8011434 <Read_CalFlag+0x48>)
 80113f4:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	1c9a      	adds	r2, r3, #2
 80113fa:	607a      	str	r2, [r7, #4]
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011402:	4293      	cmp	r3, r2
 8011404:	d10e      	bne.n	8011424 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	1c9a      	adds	r2, r3, #2
 801140a:	607a      	str	r2, [r7, #4]
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011412:	d109      	bne.n	8011428 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	1c9a      	adds	r2, r3, #2
 8011418:	607a      	str	r2, [r7, #4]
 801141a:	881b      	ldrh	r3, [r3, #0]
 801141c:	b2da      	uxtb	r2, r3
 801141e:	4b06      	ldr	r3, [pc, #24]	; (8011438 <Read_CalFlag+0x4c>)
 8011420:	701a      	strb	r2, [r3, #0]
	  return;
 8011422:	e002      	b.n	801142a <Read_CalFlag+0x3e>
		  return;
 8011424:	bf00      	nop
 8011426:	e000      	b.n	801142a <Read_CalFlag+0x3e>
		  return;
 8011428:	bf00      	nop
 }
 801142a:	370c      	adds	r7, #12
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	08004000 	.word	0x08004000
 8011438:	200001b4 	.word	0x200001b4

0801143c <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8011442:	4b45      	ldr	r3, [pc, #276]	; (8011558 <Save_Parameter+0x11c>)
 8011444:	2202      	movs	r2, #2
 8011446:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011448:	f007 ffa4 	bl	8019394 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 801144c:	4943      	ldr	r1, [pc, #268]	; (801155c <Save_Parameter+0x120>)
 801144e:	4842      	ldr	r0, [pc, #264]	; (8011558 <Save_Parameter+0x11c>)
 8011450:	f008 f912 	bl	8019678 <HAL_FLASHEx_Erase>
 8011454:	4603      	mov	r3, r0
 8011456:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d173      	bne.n	8011548 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 8011460:	4b3f      	ldr	r3, [pc, #252]	; (8011560 <Save_Parameter+0x124>)
 8011462:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	1c9a      	adds	r2, r3, #2
 8011468:	603a      	str	r2, [r7, #0]
 801146a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801146e:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8011470:	4b3c      	ldr	r3, [pc, #240]	; (8011564 <Save_Parameter+0x128>)
 8011472:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	1c9a      	adds	r2, r3, #2
 801147a:	603a      	str	r2, [r7, #0]
 801147c:	b28a      	uxth	r2, r1
 801147e:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8011480:	4b39      	ldr	r3, [pc, #228]	; (8011568 <Save_Parameter+0x12c>)
 8011482:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	1c9a      	adds	r2, r3, #2
 801148a:	603a      	str	r2, [r7, #0]
 801148c:	b28a      	uxth	r2, r1
 801148e:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8011490:	2300      	movs	r3, #0
 8011492:	80fb      	strh	r3, [r7, #6]
 8011494:	e011      	b.n	80114ba <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8011496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801149a:	4a34      	ldr	r2, [pc, #208]	; (801156c <Save_Parameter+0x130>)
 801149c:	00db      	lsls	r3, r3, #3
 801149e:	4413      	add	r3, r2
 80114a0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	1c9a      	adds	r2, r3, #2
 80114a8:	603a      	str	r2, [r7, #0]
 80114aa:	b28a      	uxth	r2, r1
 80114ac:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80114ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	3301      	adds	r3, #1
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	80fb      	strh	r3, [r7, #6]
 80114ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114be:	2b29      	cmp	r3, #41	; 0x29
 80114c0:	dde9      	ble.n	8011496 <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 80114c2:	2300      	movs	r3, #0
 80114c4:	80fb      	strh	r3, [r7, #6]
 80114c6:	e00f      	b.n	80114e8 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 80114c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114cc:	4a28      	ldr	r2, [pc, #160]	; (8011570 <Save_Parameter+0x134>)
 80114ce:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	1c9a      	adds	r2, r3, #2
 80114d6:	603a      	str	r2, [r7, #0]
 80114d8:	b28a      	uxth	r2, r1
 80114da:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 80114dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	3301      	adds	r3, #1
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	80fb      	strh	r3, [r7, #6]
 80114e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114ec:	2b07      	cmp	r3, #7
 80114ee:	ddeb      	ble.n	80114c8 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	1c9a      	adds	r2, r3, #2
 80114f4:	603a      	str	r2, [r7, #0]
 80114f6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80114fa:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 80114fc:	4b18      	ldr	r3, [pc, #96]	; (8011560 <Save_Parameter+0x124>)
 80114fe:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011500:	2300      	movs	r3, #0
 8011502:	80fb      	strh	r3, [r7, #6]
 8011504:	e01a      	b.n	801153c <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8011506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801150a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801150e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011512:	4619      	mov	r1, r3
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	1c9a      	adds	r2, r3, #2
 8011518:	603a      	str	r2, [r7, #0]
 801151a:	881b      	ldrh	r3, [r3, #0]
 801151c:	b29a      	uxth	r2, r3
 801151e:	f04f 0300 	mov.w	r3, #0
 8011522:	2001      	movs	r0, #1
 8011524:	f007 fee2 	bl	80192ec <HAL_FLASH_Program>
 8011528:	4603      	mov	r3, r0
 801152a:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 801152c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d108      	bne.n	8011546 <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 8011534:	88fb      	ldrh	r3, [r7, #6]
 8011536:	3302      	adds	r3, #2
 8011538:	b29b      	uxth	r3, r3
 801153a:	80fb      	strh	r3, [r7, #6]
 801153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011540:	2bff      	cmp	r3, #255	; 0xff
 8011542:	dde0      	ble.n	8011506 <Save_Parameter+0xca>
 8011544:	e000      	b.n	8011548 <Save_Parameter+0x10c>
    	   break;
 8011546:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011548:	f007 ff46 	bl	80193d8 <HAL_FLASH_Lock>

   return j;
 801154c:	88bb      	ldrh	r3, [r7, #4]
 801154e:	b2db      	uxtb	r3, r3
 }
 8011550:	4618      	mov	r0, r3
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	200001b8 	.word	0x200001b8
 801155c:	20002818 	.word	0x20002818
 8011560:	200017d8 	.word	0x200017d8
 8011564:	2000079e 	.word	0x2000079e
 8011568:	200007a0 	.word	0x200007a0
 801156c:	20000298 	.word	0x20000298
 8011570:	20000538 	.word	0x20000538

08011574 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 801157a:	4b3f      	ldr	r3, [pc, #252]	; (8011678 <Read_Parameter+0x104>)
 801157c:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 801157e:	4b3f      	ldr	r3, [pc, #252]	; (801167c <Read_Parameter+0x108>)
 8011580:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011584:	4b3e      	ldr	r3, [pc, #248]	; (8011680 <Read_Parameter+0x10c>)
 8011586:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011588:	4b3c      	ldr	r3, [pc, #240]	; (801167c <Read_Parameter+0x108>)
 801158a:	2200      	movs	r2, #0
 801158c:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011596:	4293      	cmp	r3, r2
 8011598:	d166      	bne.n	8011668 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 801159a:	4b3a      	ldr	r3, [pc, #232]	; (8011684 <Read_Parameter+0x110>)
 801159c:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	1c9a      	adds	r2, r3, #2
 80115a2:	603a      	str	r2, [r7, #0]
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115aa:	d15f      	bne.n	801166c <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	1c9a      	adds	r2, r3, #2
 80115b0:	603a      	str	r2, [r7, #0]
 80115b2:	881b      	ldrh	r3, [r3, #0]
 80115b4:	b21a      	sxth	r2, r3
 80115b6:	4b34      	ldr	r3, [pc, #208]	; (8011688 <Read_Parameter+0x114>)
 80115b8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80115ba:	4b33      	ldr	r3, [pc, #204]	; (8011688 <Read_Parameter+0x114>)
 80115bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115c0:	461a      	mov	r2, r3
 80115c2:	4b32      	ldr	r3, [pc, #200]	; (801168c <Read_Parameter+0x118>)
 80115c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80115c8:	4a2c      	ldr	r2, [pc, #176]	; (801167c <Read_Parameter+0x108>)
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	4413      	add	r3, r2
 80115ce:	799b      	ldrb	r3, [r3, #6]
 80115d0:	4a2d      	ldr	r2, [pc, #180]	; (8011688 <Read_Parameter+0x114>)
 80115d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80115d6:	4611      	mov	r1, r2
 80115d8:	4a2c      	ldr	r2, [pc, #176]	; (801168c <Read_Parameter+0x118>)
 80115da:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80115de:	4610      	mov	r0, r2
 80115e0:	f043 0320 	orr.w	r3, r3, #32
 80115e4:	b2d9      	uxtb	r1, r3
 80115e6:	4a25      	ldr	r2, [pc, #148]	; (801167c <Read_Parameter+0x108>)
 80115e8:	00c3      	lsls	r3, r0, #3
 80115ea:	4413      	add	r3, r2
 80115ec:	460a      	mov	r2, r1
 80115ee:	719a      	strb	r2, [r3, #6]
   ptr++;
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	3302      	adds	r3, #2
 80115f4:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 80115f6:	2300      	movs	r3, #0
 80115f8:	80fb      	strh	r3, [r7, #6]
 80115fa:	e011      	b.n	8011620 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	1c9a      	adds	r2, r3, #2
 8011600:	603a      	str	r2, [r7, #0]
 8011602:	881a      	ldrh	r2, [r3, #0]
 8011604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011608:	b211      	sxth	r1, r2
 801160a:	4a1c      	ldr	r2, [pc, #112]	; (801167c <Read_Parameter+0x108>)
 801160c:	00db      	lsls	r3, r3, #3
 801160e:	4413      	add	r3, r2
 8011610:	460a      	mov	r2, r1
 8011612:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011618:	b29b      	uxth	r3, r3
 801161a:	3301      	adds	r3, #1
 801161c:	b29b      	uxth	r3, r3
 801161e:	80fb      	strh	r3, [r7, #6]
 8011620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011624:	2b29      	cmp	r3, #41	; 0x29
 8011626:	dde9      	ble.n	80115fc <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011628:	2300      	movs	r3, #0
 801162a:	80fb      	strh	r3, [r7, #6]
 801162c:	e00f      	b.n	801164e <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	1c9a      	adds	r2, r3, #2
 8011632:	603a      	str	r2, [r7, #0]
 8011634:	881a      	ldrh	r2, [r3, #0]
 8011636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801163a:	b211      	sxth	r1, r2
 801163c:	4a13      	ldr	r2, [pc, #76]	; (801168c <Read_Parameter+0x118>)
 801163e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011646:	b29b      	uxth	r3, r3
 8011648:	3301      	adds	r3, #1
 801164a:	b29b      	uxth	r3, r3
 801164c:	80fb      	strh	r3, [r7, #6]
 801164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011652:	2b07      	cmp	r3, #7
 8011654:	ddeb      	ble.n	801162e <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011656:	4b09      	ldr	r3, [pc, #36]	; (801167c <Read_Parameter+0x108>)
 8011658:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801165c:	4b08      	ldr	r3, [pc, #32]	; (8011680 <Read_Parameter+0x10c>)
 801165e:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011660:	4b06      	ldr	r3, [pc, #24]	; (801167c <Read_Parameter+0x108>)
 8011662:	2200      	movs	r2, #0
 8011664:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8011666:	e002      	b.n	801166e <Read_Parameter+0xfa>
	   return ;
 8011668:	bf00      	nop
 801166a:	e000      	b.n	801166e <Read_Parameter+0xfa>
	   return ;
 801166c:	bf00      	nop
 }
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr
 8011678:	0800806e 	.word	0x0800806e
 801167c:	20000298 	.word	0x20000298
 8011680:	20002814 	.word	0x20002814
 8011684:	08008000 	.word	0x08008000
 8011688:	2000079e 	.word	0x2000079e
 801168c:	20000538 	.word	0x20000538

08011690 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8011696:	4b34      	ldr	r3, [pc, #208]	; (8011768 <Save_Kpg+0xd8>)
 8011698:	2201      	movs	r2, #1
 801169a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 801169c:	f007 fe7a 	bl	8019394 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80116a0:	4932      	ldr	r1, [pc, #200]	; (801176c <Save_Kpg+0xdc>)
 80116a2:	4831      	ldr	r0, [pc, #196]	; (8011768 <Save_Kpg+0xd8>)
 80116a4:	f007 ffe8 	bl	8019678 <HAL_FLASHEx_Erase>
 80116a8:	4603      	mov	r3, r0
 80116aa:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80116ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d151      	bne.n	8011758 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80116b4:	4b2e      	ldr	r3, [pc, #184]	; (8011770 <Save_Kpg+0xe0>)
 80116b6:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	1c9a      	adds	r2, r3, #2
 80116bc:	603a      	str	r2, [r7, #0]
 80116be:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80116c2:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	1c9a      	adds	r2, r3, #2
 80116c8:	603a      	str	r2, [r7, #0]
 80116ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116ce:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 80116d0:	4b28      	ldr	r3, [pc, #160]	; (8011774 <Save_Kpg+0xe4>)
 80116d2:	7819      	ldrb	r1, [r3, #0]
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	1c9a      	adds	r2, r3, #2
 80116d8:	603a      	str	r2, [r7, #0]
 80116da:	b28a      	uxth	r2, r1
 80116dc:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80116de:	2300      	movs	r3, #0
 80116e0:	80fb      	strh	r3, [r7, #6]
 80116e2:	e00f      	b.n	8011704 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 80116e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116e8:	4a23      	ldr	r2, [pc, #140]	; (8011778 <Save_Kpg+0xe8>)
 80116ea:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	1c9a      	adds	r2, r3, #2
 80116f2:	603a      	str	r2, [r7, #0]
 80116f4:	b28a      	uxth	r2, r1
 80116f6:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 80116f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	3301      	adds	r3, #1
 8011700:	b29b      	uxth	r3, r3
 8011702:	80fb      	strh	r3, [r7, #6]
 8011704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011708:	2b02      	cmp	r3, #2
 801170a:	ddeb      	ble.n	80116e4 <Save_Kpg+0x54>
     ptr=F_Buff;
 801170c:	4b18      	ldr	r3, [pc, #96]	; (8011770 <Save_Kpg+0xe0>)
 801170e:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011710:	2300      	movs	r3, #0
 8011712:	80fb      	strh	r3, [r7, #6]
 8011714:	e01a      	b.n	801174c <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8011716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801171a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801171e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011722:	4619      	mov	r1, r3
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	1c9a      	adds	r2, r3, #2
 8011728:	603a      	str	r2, [r7, #0]
 801172a:	881b      	ldrh	r3, [r3, #0]
 801172c:	b29a      	uxth	r2, r3
 801172e:	f04f 0300 	mov.w	r3, #0
 8011732:	2001      	movs	r0, #1
 8011734:	f007 fdda 	bl	80192ec <HAL_FLASH_Program>
 8011738:	4603      	mov	r3, r0
 801173a:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 801173c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d108      	bne.n	8011756 <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8011744:	88fb      	ldrh	r3, [r7, #6]
 8011746:	3302      	adds	r3, #2
 8011748:	b29b      	uxth	r3, r3
 801174a:	80fb      	strh	r3, [r7, #6]
 801174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011750:	2bff      	cmp	r3, #255	; 0xff
 8011752:	dde0      	ble.n	8011716 <Save_Kpg+0x86>
 8011754:	e000      	b.n	8011758 <Save_Kpg+0xc8>
    	   break;
 8011756:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011758:	f007 fe3e 	bl	80193d8 <HAL_FLASH_Lock>
   return j;
 801175c:	88bb      	ldrh	r3, [r7, #4]
 801175e:	b2db      	uxtb	r3, r3
 }
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	200001b8 	.word	0x200001b8
 801176c:	20002818 	.word	0x20002818
 8011770:	200017d8 	.word	0x200017d8
 8011774:	200001b4 	.word	0x200001b4
 8011778:	2000056c 	.word	0x2000056c

0801177c <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8011782:	4b1c      	ldr	r3, [pc, #112]	; (80117f4 <Read_Kpg+0x78>)
 8011784:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	1c9a      	adds	r2, r3, #2
 801178a:	603a      	str	r2, [r7, #0]
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011792:	4293      	cmp	r3, r2
 8011794:	d125      	bne.n	80117e2 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	1c9a      	adds	r2, r3, #2
 801179a:	603a      	str	r2, [r7, #0]
 801179c:	881b      	ldrh	r3, [r3, #0]
 801179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117a2:	d120      	bne.n	80117e6 <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	1c9a      	adds	r2, r3, #2
 80117a8:	603a      	str	r2, [r7, #0]
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	b2da      	uxtb	r2, r3
 80117ae:	4b12      	ldr	r3, [pc, #72]	; (80117f8 <Read_Kpg+0x7c>)
 80117b0:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80117b2:	2300      	movs	r3, #0
 80117b4:	80fb      	strh	r3, [r7, #6]
 80117b6:	e00f      	b.n	80117d8 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	1c9a      	adds	r2, r3, #2
 80117bc:	603a      	str	r2, [r7, #0]
 80117be:	881a      	ldrh	r2, [r3, #0]
 80117c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117c4:	b211      	sxth	r1, r2
 80117c6:	4a0d      	ldr	r2, [pc, #52]	; (80117fc <Read_Kpg+0x80>)
 80117c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 80117cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	3301      	adds	r3, #1
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	80fb      	strh	r3, [r7, #6]
 80117d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117dc:	2b02      	cmp	r3, #2
 80117de:	ddeb      	ble.n	80117b8 <Read_Kpg+0x3c>
   return ;
 80117e0:	e002      	b.n	80117e8 <Read_Kpg+0x6c>
	   return ;
 80117e2:	bf00      	nop
 80117e4:	e000      	b.n	80117e8 <Read_Kpg+0x6c>
	   return ;
 80117e6:	bf00      	nop
 }
 80117e8:	370c      	adds	r7, #12
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	08004000 	.word	0x08004000
 80117f8:	200001b4 	.word	0x200001b4
 80117fc:	2000056c 	.word	0x2000056c

08011800 <Restore>:

 void Restore(void)
 {
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011806:	4b2d      	ldr	r3, [pc, #180]	; (80118bc <Restore+0xbc>)
 8011808:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801180c:	4b2c      	ldr	r3, [pc, #176]	; (80118c0 <Restore+0xc0>)
 801180e:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011810:	4b2c      	ldr	r3, [pc, #176]	; (80118c4 <Restore+0xc4>)
 8011812:	2200      	movs	r2, #0
 8011814:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011816:	4b2b      	ldr	r3, [pc, #172]	; (80118c4 <Restore+0xc4>)
 8011818:	f9b3 3000 	ldrsh.w	r3, [r3]
 801181c:	461a      	mov	r2, r3
 801181e:	4b2a      	ldr	r3, [pc, #168]	; (80118c8 <Restore+0xc8>)
 8011820:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011824:	4a25      	ldr	r2, [pc, #148]	; (80118bc <Restore+0xbc>)
 8011826:	00db      	lsls	r3, r3, #3
 8011828:	4413      	add	r3, r2
 801182a:	799b      	ldrb	r3, [r3, #6]
 801182c:	4a25      	ldr	r2, [pc, #148]	; (80118c4 <Restore+0xc4>)
 801182e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011832:	4611      	mov	r1, r2
 8011834:	4a24      	ldr	r2, [pc, #144]	; (80118c8 <Restore+0xc8>)
 8011836:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801183a:	4610      	mov	r0, r2
 801183c:	f043 0320 	orr.w	r3, r3, #32
 8011840:	b2d9      	uxtb	r1, r3
 8011842:	4a1e      	ldr	r2, [pc, #120]	; (80118bc <Restore+0xbc>)
 8011844:	00c3      	lsls	r3, r0, #3
 8011846:	4413      	add	r3, r2
 8011848:	460a      	mov	r2, r1
 801184a:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 801184c:	2300      	movs	r3, #0
 801184e:	80fb      	strh	r3, [r7, #6]
 8011850:	e013      	b.n	801187a <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8011852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801185a:	491c      	ldr	r1, [pc, #112]	; (80118cc <Restore+0xcc>)
 801185c:	00db      	lsls	r3, r3, #3
 801185e:	440b      	add	r3, r1
 8011860:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011864:	4915      	ldr	r1, [pc, #84]	; (80118bc <Restore+0xbc>)
 8011866:	00d3      	lsls	r3, r2, #3
 8011868:	440b      	add	r3, r1
 801186a:	4602      	mov	r2, r0
 801186c:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 801186e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011872:	b29b      	uxth	r3, r3
 8011874:	3301      	adds	r3, #1
 8011876:	b29b      	uxth	r3, r3
 8011878:	80fb      	strh	r3, [r7, #6]
 801187a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801187e:	2b29      	cmp	r3, #41	; 0x29
 8011880:	dde7      	ble.n	8011852 <Restore+0x52>
   for(i=0;i<8;i++)
 8011882:	2300      	movs	r3, #0
 8011884:	80fb      	strh	r3, [r7, #6]
 8011886:	e00f      	b.n	80118a8 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8011888:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801188c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011890:	490f      	ldr	r1, [pc, #60]	; (80118d0 <Restore+0xd0>)
 8011892:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011896:	4a0c      	ldr	r2, [pc, #48]	; (80118c8 <Restore+0xc8>)
 8011898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 801189c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	3301      	adds	r3, #1
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	80fb      	strh	r3, [r7, #6]
 80118a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118ac:	2b07      	cmp	r3, #7
 80118ae:	ddeb      	ble.n	8011888 <Restore+0x88>
   Update_Title();
 80118b0:	f000 fdec 	bl	801248c <Update_Title>
}
 80118b4:	bf00      	nop
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	20000298 	.word	0x20000298
 80118c0:	20002814 	.word	0x20002814
 80118c4:	2000079e 	.word	0x2000079e
 80118c8:	20000538 	.word	0x20000538
 80118cc:	200003e8 	.word	0x200003e8
 80118d0:	08001ef8 	.word	0x08001ef8

080118d4 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
   short i = 0;
 80118da:	2300      	movs	r3, #0
 80118dc:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 80118de:	4b47      	ldr	r3, [pc, #284]	; (80119fc <Restore_CalPar+0x128>)
 80118e0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80118e4:	f043 0320 	orr.w	r3, r3, #32
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b44      	ldr	r3, [pc, #272]	; (80119fc <Restore_CalPar+0x128>)
 80118ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 80118f0:	4b42      	ldr	r3, [pc, #264]	; (80119fc <Restore_CalPar+0x128>)
 80118f2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80118f6:	4b42      	ldr	r3, [pc, #264]	; (8011a00 <Restore_CalPar+0x12c>)
 80118f8:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80118fa:	4b40      	ldr	r3, [pc, #256]	; (80119fc <Restore_CalPar+0x128>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8011900:	4b40      	ldr	r3, [pc, #256]	; (8011a04 <Restore_CalPar+0x130>)
 8011902:	2200      	movs	r2, #0
 8011904:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011906:	4b3f      	ldr	r3, [pc, #252]	; (8011a04 <Restore_CalPar+0x130>)
 8011908:	f9b3 3000 	ldrsh.w	r3, [r3]
 801190c:	461a      	mov	r2, r3
 801190e:	4b3e      	ldr	r3, [pc, #248]	; (8011a08 <Restore_CalPar+0x134>)
 8011910:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011914:	4a39      	ldr	r2, [pc, #228]	; (80119fc <Restore_CalPar+0x128>)
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	4413      	add	r3, r2
 801191a:	799b      	ldrb	r3, [r3, #6]
 801191c:	4a39      	ldr	r2, [pc, #228]	; (8011a04 <Restore_CalPar+0x130>)
 801191e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011922:	4611      	mov	r1, r2
 8011924:	4a38      	ldr	r2, [pc, #224]	; (8011a08 <Restore_CalPar+0x134>)
 8011926:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801192a:	4610      	mov	r0, r2
 801192c:	f043 0320 	orr.w	r3, r3, #32
 8011930:	b2d9      	uxtb	r1, r3
 8011932:	4a32      	ldr	r2, [pc, #200]	; (80119fc <Restore_CalPar+0x128>)
 8011934:	00c3      	lsls	r3, r0, #3
 8011936:	4413      	add	r3, r2
 8011938:	460a      	mov	r2, r1
 801193a:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 801193c:	2300      	movs	r3, #0
 801193e:	80fb      	strh	r3, [r7, #6]
 8011940:	e013      	b.n	801196a <Restore_CalPar+0x96>
 8011942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011946:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801194a:	4930      	ldr	r1, [pc, #192]	; (8011a0c <Restore_CalPar+0x138>)
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011954:	4929      	ldr	r1, [pc, #164]	; (80119fc <Restore_CalPar+0x128>)
 8011956:	00d3      	lsls	r3, r2, #3
 8011958:	440b      	add	r3, r1
 801195a:	4602      	mov	r2, r0
 801195c:	809a      	strh	r2, [r3, #4]
 801195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011962:	b29b      	uxth	r3, r3
 8011964:	3301      	adds	r3, #1
 8011966:	b29b      	uxth	r3, r3
 8011968:	80fb      	strh	r3, [r7, #6]
 801196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801196e:	2b29      	cmp	r3, #41	; 0x29
 8011970:	dde7      	ble.n	8011942 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011972:	2300      	movs	r3, #0
 8011974:	80fb      	strh	r3, [r7, #6]
 8011976:	e00f      	b.n	8011998 <Restore_CalPar+0xc4>
 8011978:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801197c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011980:	4923      	ldr	r1, [pc, #140]	; (8011a10 <Restore_CalPar+0x13c>)
 8011982:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8011986:	4a20      	ldr	r2, [pc, #128]	; (8011a08 <Restore_CalPar+0x134>)
 8011988:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801198c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011990:	b29b      	uxth	r3, r3
 8011992:	3301      	adds	r3, #1
 8011994:	b29b      	uxth	r3, r3
 8011996:	80fb      	strh	r3, [r7, #6]
 8011998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801199c:	2b07      	cmp	r3, #7
 801199e:	ddeb      	ble.n	8011978 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80119a0:	4b16      	ldr	r3, [pc, #88]	; (80119fc <Restore_CalPar+0x128>)
 80119a2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80119a6:	4b16      	ldr	r3, [pc, #88]	; (8011a00 <Restore_CalPar+0x12c>)
 80119a8:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80119aa:	4b14      	ldr	r3, [pc, #80]	; (80119fc <Restore_CalPar+0x128>)
 80119ac:	2200      	movs	r2, #0
 80119ae:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 80119b0:	2300      	movs	r3, #0
 80119b2:	80fb      	strh	r3, [r7, #6]
 80119b4:	e015      	b.n	80119e2 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 80119b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119ba:	4a10      	ldr	r2, [pc, #64]	; (80119fc <Restore_CalPar+0x128>)
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	4413      	add	r3, r2
 80119c0:	799a      	ldrb	r2, [r3, #6]
 80119c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119c6:	f042 0220 	orr.w	r2, r2, #32
 80119ca:	b2d1      	uxtb	r1, r2
 80119cc:	4a0b      	ldr	r2, [pc, #44]	; (80119fc <Restore_CalPar+0x128>)
 80119ce:	00db      	lsls	r3, r3, #3
 80119d0:	4413      	add	r3, r2
 80119d2:	460a      	mov	r2, r1
 80119d4:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 80119d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119da:	b29b      	uxth	r3, r3
 80119dc:	3301      	adds	r3, #1
 80119de:	b29b      	uxth	r3, r3
 80119e0:	80fb      	strh	r3, [r7, #6]
 80119e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80119e6:	2b29      	cmp	r3, #41	; 0x29
 80119e8:	dde5      	ble.n	80119b6 <Restore_CalPar+0xe2>
   }
   Update_Title();
 80119ea:	f000 fd4f 	bl	801248c <Update_Title>
   Close_Pop();
 80119ee:	f7fc ff0d 	bl	800e80c <Close_Pop>
 }
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	20000298 	.word	0x20000298
 8011a00:	20002814 	.word	0x20002814
 8011a04:	2000079e 	.word	0x2000079e
 8011a08:	20000538 	.word	0x20000538
 8011a0c:	200003e8 	.word	0x200003e8
 8011a10:	08001ef8 	.word	0x08001ef8

08011a14 <u8ToDec3>:
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	70fb      	strb	r3, [r7, #3]
 8011a20:	78fb      	ldrb	r3, [r7, #3]
 8011a22:	4a1e      	ldr	r2, [pc, #120]	; (8011a9c <u8ToDec3+0x88>)
 8011a24:	fba2 2303 	umull	r2, r3, r2, r3
 8011a28:	095b      	lsrs	r3, r3, #5
 8011a2a:	b2da      	uxtb	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	1c59      	adds	r1, r3, #1
 8011a30:	6079      	str	r1, [r7, #4]
 8011a32:	3230      	adds	r2, #48	; 0x30
 8011a34:	b2d2      	uxtb	r2, r2
 8011a36:	701a      	strb	r2, [r3, #0]
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	4a18      	ldr	r2, [pc, #96]	; (8011a9c <u8ToDec3+0x88>)
 8011a3c:	fba2 1203 	umull	r1, r2, r2, r3
 8011a40:	0952      	lsrs	r2, r2, #5
 8011a42:	2164      	movs	r1, #100	; 0x64
 8011a44:	fb01 f202 	mul.w	r2, r1, r2
 8011a48:	1a9b      	subs	r3, r3, r2
 8011a4a:	70fb      	strb	r3, [r7, #3]
 8011a4c:	78fb      	ldrb	r3, [r7, #3]
 8011a4e:	4a14      	ldr	r2, [pc, #80]	; (8011aa0 <u8ToDec3+0x8c>)
 8011a50:	fba2 2303 	umull	r2, r3, r2, r3
 8011a54:	08db      	lsrs	r3, r3, #3
 8011a56:	b2da      	uxtb	r2, r3
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	1c59      	adds	r1, r3, #1
 8011a5c:	6079      	str	r1, [r7, #4]
 8011a5e:	3230      	adds	r2, #48	; 0x30
 8011a60:	b2d2      	uxtb	r2, r2
 8011a62:	701a      	strb	r2, [r3, #0]
 8011a64:	78fa      	ldrb	r2, [r7, #3]
 8011a66:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <u8ToDec3+0x8c>)
 8011a68:	fba3 1302 	umull	r1, r3, r3, r2
 8011a6c:	08d9      	lsrs	r1, r3, #3
 8011a6e:	460b      	mov	r3, r1
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	440b      	add	r3, r1
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	70fb      	strb	r3, [r7, #3]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	1c5a      	adds	r2, r3, #1
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	78fa      	ldrb	r2, [r7, #3]
 8011a82:	3230      	adds	r2, #48	; 0x30
 8011a84:	b2d2      	uxtb	r2, r2
 8011a86:	701a      	strb	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	701a      	strb	r2, [r3, #0]
 8011a8e:	bf00      	nop
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	51eb851f 	.word	0x51eb851f
 8011aa0:	cccccccd 	.word	0xcccccccd

08011aa4 <memset16>:
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	807b      	strh	r3, [r7, #2]
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	803b      	strh	r3, [r7, #0]
 8011ab4:	e00a      	b.n	8011acc <memset16+0x28>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	1c9a      	adds	r2, r3, #2
 8011aba:	607a      	str	r2, [r7, #4]
 8011abc:	887a      	ldrh	r2, [r7, #2]
 8011abe:	801a      	strh	r2, [r3, #0]
 8011ac0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	803b      	strh	r3, [r7, #0]
 8011acc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1f0      	bne.n	8011ab6 <memset16+0x12>
 8011ad4:	bf00      	nop
 8011ad6:	bf00      	nop
 8011ad8:	370c      	adds	r7, #12
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr
	...

08011ae4 <Value2Str>:
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b088      	sub	sp, #32
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
 8011af0:	70fb      	strb	r3, [r7, #3]
 8011af2:	2300      	movs	r3, #0
 8011af4:	83fb      	strh	r3, [r7, #30]
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	61bb      	str	r3, [r7, #24]
 8011afa:	2305      	movs	r3, #5
 8011afc:	617b      	str	r3, [r7, #20]
 8011afe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d129      	bne.n	8011b5a <Value2Str+0x76>
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d104      	bne.n	8011b16 <Value2Str+0x32>
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	60fa      	str	r2, [r7, #12]
 8011b12:	2220      	movs	r2, #32
 8011b14:	701a      	strb	r2, [r3, #0]
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	dd04      	ble.n	8011b26 <Value2Str+0x42>
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	1c5a      	adds	r2, r3, #1
 8011b20:	60fa      	str	r2, [r7, #12]
 8011b22:	222b      	movs	r2, #43	; 0x2b
 8011b24:	701a      	strb	r2, [r3, #0]
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	da16      	bge.n	8011b5a <Value2Str+0x76>
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	1c5a      	adds	r2, r3, #1
 8011b30:	60fa      	str	r2, [r7, #12]
 8011b32:	222d      	movs	r2, #45	; 0x2d
 8011b34:	701a      	strb	r2, [r3, #0]
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	425b      	negs	r3, r3
 8011b3a:	60bb      	str	r3, [r7, #8]
 8011b3c:	e00d      	b.n	8011b5a <Value2Str+0x76>
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	4a64      	ldr	r2, [pc, #400]	; (8011cd4 <Value2Str+0x1f0>)
 8011b42:	fb82 1203 	smull	r1, r2, r2, r3
 8011b46:	1092      	asrs	r2, r2, #2
 8011b48:	17db      	asrs	r3, r3, #31
 8011b4a:	1ad3      	subs	r3, r2, r3
 8011b4c:	61bb      	str	r3, [r7, #24]
 8011b4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	3301      	adds	r3, #1
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	83fb      	strh	r3, [r7, #30]
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	2b09      	cmp	r3, #9
 8011b5e:	dcee      	bgt.n	8011b3e <Value2Str+0x5a>
 8011b60:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011b64:	4b5c      	ldr	r3, [pc, #368]	; (8011cd8 <Value2Str+0x1f4>)
 8011b66:	fb83 3102 	smull	r3, r1, r3, r2
 8011b6a:	17d3      	asrs	r3, r2, #31
 8011b6c:	1ac9      	subs	r1, r1, r3
 8011b6e:	460b      	mov	r3, r1
 8011b70:	005b      	lsls	r3, r3, #1
 8011b72:	440b      	add	r3, r1
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	b21b      	sxth	r3, r3
 8011b78:	2b02      	cmp	r3, #2
 8011b7a:	d105      	bne.n	8011b88 <Value2Str+0xa4>
 8011b7c:	78fb      	ldrb	r3, [r7, #3]
 8011b7e:	2b02      	cmp	r3, #2
 8011b80:	d102      	bne.n	8011b88 <Value2Str+0xa4>
 8011b82:	78fb      	ldrb	r3, [r7, #3]
 8011b84:	3301      	adds	r3, #1
 8011b86:	70fb      	strb	r3, [r7, #3]
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	61bb      	str	r3, [r7, #24]
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	83fb      	strh	r3, [r7, #30]
 8011b90:	e016      	b.n	8011bc0 <Value2Str+0xdc>
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	4a4f      	ldr	r2, [pc, #316]	; (8011cd4 <Value2Str+0x1f0>)
 8011b96:	fb82 1203 	smull	r1, r2, r2, r3
 8011b9a:	1092      	asrs	r2, r2, #2
 8011b9c:	17db      	asrs	r3, r3, #31
 8011b9e:	1ad3      	subs	r3, r2, r3
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	8bfb      	ldrh	r3, [r7, #30]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	83fb      	strh	r3, [r7, #30]
 8011baa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011bae:	78fb      	ldrb	r3, [r7, #3]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	dd05      	ble.n	8011bc0 <Value2Str+0xdc>
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4413      	add	r3, r2
 8011bbc:	005b      	lsls	r3, r3, #1
 8011bbe:	617b      	str	r3, [r7, #20]
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	2b09      	cmp	r3, #9
 8011bc4:	dce5      	bgt.n	8011b92 <Value2Str+0xae>
 8011bc6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011bca:	78fb      	ldrb	r3, [r7, #3]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	db03      	blt.n	8011bd8 <Value2Str+0xf4>
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	60bb      	str	r3, [r7, #8]
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	61bb      	str	r3, [r7, #24]
 8011bdc:	2300      	movs	r3, #0
 8011bde:	83fb      	strh	r3, [r7, #30]
 8011be0:	e00d      	b.n	8011bfe <Value2Str+0x11a>
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	4a3b      	ldr	r2, [pc, #236]	; (8011cd4 <Value2Str+0x1f0>)
 8011be6:	fb82 1203 	smull	r1, r2, r2, r3
 8011bea:	1092      	asrs	r2, r2, #2
 8011bec:	17db      	asrs	r3, r3, #31
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	83fb      	strh	r3, [r7, #30]
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	2b09      	cmp	r3, #9
 8011c02:	dcee      	bgt.n	8011be2 <Value2Str+0xfe>
 8011c04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c08:	4a33      	ldr	r2, [pc, #204]	; (8011cd8 <Value2Str+0x1f4>)
 8011c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8011c0e:	17db      	asrs	r3, r3, #31
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	b21b      	sxth	r3, r3
 8011c14:	61bb      	str	r3, [r7, #24]
 8011c16:	e03e      	b.n	8011c96 <Value2Str+0x1b2>
 8011c18:	8bfb      	ldrh	r3, [r7, #30]
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f000 f85d 	bl	8011cdc <Exp>
 8011c22:	4602      	mov	r2, r0
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c2a:	b2da      	uxtb	r2, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	1c59      	adds	r1, r3, #1
 8011c30:	60f9      	str	r1, [r7, #12]
 8011c32:	3230      	adds	r2, #48	; 0x30
 8011c34:	b2d2      	uxtb	r2, r2
 8011c36:	701a      	strb	r2, [r3, #0]
 8011c38:	78fb      	ldrb	r3, [r7, #3]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d012      	beq.n	8011c64 <Value2Str+0x180>
 8011c3e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011c42:	4b25      	ldr	r3, [pc, #148]	; (8011cd8 <Value2Str+0x1f4>)
 8011c44:	fb83 3102 	smull	r3, r1, r3, r2
 8011c48:	17d3      	asrs	r3, r2, #31
 8011c4a:	1ac9      	subs	r1, r1, r3
 8011c4c:	460b      	mov	r3, r1
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	440b      	add	r3, r1
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	b21b      	sxth	r3, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d104      	bne.n	8011c64 <Value2Str+0x180>
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	60fa      	str	r2, [r7, #12]
 8011c60:	222e      	movs	r2, #46	; 0x2e
 8011c62:	701a      	strb	r2, [r3, #0]
 8011c64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	db0c      	blt.n	8011c86 <Value2Str+0x1a2>
 8011c6c:	8bfb      	ldrh	r3, [r7, #30]
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 f833 	bl	8011cdc <Exp>
 8011c76:	4602      	mov	r2, r0
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8011c7e:	fb02 f201 	mul.w	r2, r2, r1
 8011c82:	1a9b      	subs	r3, r3, r2
 8011c84:	e000      	b.n	8011c88 <Value2Str+0x1a4>
 8011c86:	2300      	movs	r3, #0
 8011c88:	60bb      	str	r3, [r7, #8]
 8011c8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	3b01      	subs	r3, #1
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	83fb      	strh	r3, [r7, #30]
 8011c96:	78fb      	ldrb	r3, [r7, #3]
 8011c98:	1e5a      	subs	r2, r3, #1
 8011c9a:	70fa      	strb	r2, [r7, #3]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d1bb      	bne.n	8011c18 <Value2Str+0x134>
 8011ca0:	69ba      	ldr	r2, [r7, #24]
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	4413      	add	r3, r2
 8011ca8:	005b      	lsls	r3, r3, #1
 8011caa:	461a      	mov	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	4413      	add	r3, r2
 8011cb0:	607b      	str	r3, [r7, #4]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	1c5a      	adds	r2, r3, #1
 8011cb6:	60fa      	str	r2, [r7, #12]
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	7812      	ldrb	r2, [r2, #0]
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	1c5a      	adds	r2, r3, #1
 8011cc2:	607a      	str	r2, [r7, #4]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1f3      	bne.n	8011cb2 <Value2Str+0x1ce>
 8011cca:	bf00      	nop
 8011ccc:	bf00      	nop
 8011cce:	3720      	adds	r7, #32
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	66666667 	.word	0x66666667
 8011cd8:	55555556 	.word	0x55555556

08011cdc <Exp>:
 8011cdc:	b480      	push	{r7}
 8011cde:	b085      	sub	sp, #20
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	71fb      	strb	r3, [r7, #7]
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	60fb      	str	r3, [r7, #12]
 8011cea:	e005      	b.n	8011cf8 <Exp+0x1c>
 8011cec:	68fa      	ldr	r2, [r7, #12]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	4413      	add	r3, r2
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	79fb      	ldrb	r3, [r7, #7]
 8011cfa:	1e5a      	subs	r2, r3, #1
 8011cfc:	71fa      	strb	r2, [r7, #7]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d1f4      	bne.n	8011cec <Exp+0x10>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	4618      	mov	r0, r3
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <Sqrt32>:
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d101      	bne.n	8011d22 <Sqrt32+0x12>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e019      	b.n	8011d56 <Sqrt32+0x46>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	da00      	bge.n	8011d2a <Sqrt32+0x1a>
 8011d28:	3303      	adds	r3, #3
 8011d2a:	109b      	asrs	r3, r3, #2
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f7ff ffef 	bl	8011d10 <Sqrt32>
 8011d32:	4603      	mov	r3, r0
 8011d34:	005b      	lsls	r3, r3, #1
 8011d36:	3301      	adds	r3, #1
 8011d38:	60fb      	str	r3, [r7, #12]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	fb03 f303 	mul.w	r3, r3, r3
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	da05      	bge.n	8011d52 <Sqrt32+0x42>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	b21b      	sxth	r3, r3
 8011d50:	e001      	b.n	8011d56 <Sqrt32+0x46>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	b21b      	sxth	r3, r3
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
	...

08011d60 <u16ToDec4Str>:
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	807b      	strh	r3, [r7, #2]
 8011d6c:	887b      	ldrh	r3, [r7, #2]
 8011d6e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011d72:	330f      	adds	r3, #15
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d917      	bls.n	8011dae <u16ToDec4Str+0x4e>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	224f      	movs	r2, #79	; 0x4f
 8011d86:	701a      	strb	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	1c5a      	adds	r2, r3, #1
 8011d8c:	607a      	str	r2, [r7, #4]
 8011d8e:	2276      	movs	r2, #118	; 0x76
 8011d90:	701a      	strb	r2, [r3, #0]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	1c5a      	adds	r2, r3, #1
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	2265      	movs	r2, #101	; 0x65
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	1c5a      	adds	r2, r3, #1
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	2272      	movs	r2, #114	; 0x72
 8011da4:	701a      	strb	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2200      	movs	r2, #0
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	e07e      	b.n	8011eac <u16ToDec4Str+0x14c>
 8011dae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011db2:	4a41      	ldr	r2, [pc, #260]	; (8011eb8 <u16ToDec4Str+0x158>)
 8011db4:	fb82 1203 	smull	r1, r2, r2, r3
 8011db8:	1192      	asrs	r2, r2, #6
 8011dba:	17db      	asrs	r3, r3, #31
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	b21b      	sxth	r3, r3
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	1c59      	adds	r1, r3, #1
 8011dc6:	6079      	str	r1, [r7, #4]
 8011dc8:	3230      	adds	r2, #48	; 0x30
 8011dca:	b2d2      	uxtb	r2, r2
 8011dcc:	701a      	strb	r2, [r3, #0]
 8011dce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011dd2:	4a39      	ldr	r2, [pc, #228]	; (8011eb8 <u16ToDec4Str+0x158>)
 8011dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8011dd8:	1191      	asrs	r1, r2, #6
 8011dda:	17da      	asrs	r2, r3, #31
 8011ddc:	1a8a      	subs	r2, r1, r2
 8011dde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011de2:	fb01 f202 	mul.w	r2, r1, r2
 8011de6:	1a9b      	subs	r3, r3, r2
 8011de8:	807b      	strh	r3, [r7, #2]
 8011dea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011dee:	4a33      	ldr	r2, [pc, #204]	; (8011ebc <u16ToDec4Str+0x15c>)
 8011df0:	fb82 1203 	smull	r1, r2, r2, r3
 8011df4:	1152      	asrs	r2, r2, #5
 8011df6:	17db      	asrs	r3, r3, #31
 8011df8:	1ad3      	subs	r3, r2, r3
 8011dfa:	b21b      	sxth	r3, r3
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	1c59      	adds	r1, r3, #1
 8011e02:	6079      	str	r1, [r7, #4]
 8011e04:	3230      	adds	r2, #48	; 0x30
 8011e06:	b2d2      	uxtb	r2, r2
 8011e08:	701a      	strb	r2, [r3, #0]
 8011e0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e0e:	4a2b      	ldr	r2, [pc, #172]	; (8011ebc <u16ToDec4Str+0x15c>)
 8011e10:	fb82 1203 	smull	r1, r2, r2, r3
 8011e14:	1151      	asrs	r1, r2, #5
 8011e16:	17da      	asrs	r2, r3, #31
 8011e18:	1a8a      	subs	r2, r1, r2
 8011e1a:	2164      	movs	r1, #100	; 0x64
 8011e1c:	fb01 f202 	mul.w	r2, r1, r2
 8011e20:	1a9b      	subs	r3, r3, r2
 8011e22:	807b      	strh	r3, [r7, #2]
 8011e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e28:	4a25      	ldr	r2, [pc, #148]	; (8011ec0 <u16ToDec4Str+0x160>)
 8011e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8011e2e:	1092      	asrs	r2, r2, #2
 8011e30:	17db      	asrs	r3, r3, #31
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	b21b      	sxth	r3, r3
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	1c59      	adds	r1, r3, #1
 8011e3c:	6079      	str	r1, [r7, #4]
 8011e3e:	3230      	adds	r2, #48	; 0x30
 8011e40:	b2d2      	uxtb	r2, r2
 8011e42:	701a      	strb	r2, [r3, #0]
 8011e44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e48:	4b1d      	ldr	r3, [pc, #116]	; (8011ec0 <u16ToDec4Str+0x160>)
 8011e4a:	fb83 1302 	smull	r1, r3, r3, r2
 8011e4e:	1099      	asrs	r1, r3, #2
 8011e50:	17d3      	asrs	r3, r2, #31
 8011e52:	1ac9      	subs	r1, r1, r3
 8011e54:	460b      	mov	r3, r1
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	440b      	add	r3, r1
 8011e5a:	005b      	lsls	r3, r3, #1
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	807b      	strh	r3, [r7, #2]
 8011e60:	887b      	ldrh	r3, [r7, #2]
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	1c59      	adds	r1, r3, #1
 8011e68:	6079      	str	r1, [r7, #4]
 8011e6a:	3230      	adds	r2, #48	; 0x30
 8011e6c:	b2d2      	uxtb	r2, r2
 8011e6e:	701a      	strb	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	701a      	strb	r2, [r3, #0]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	3b04      	subs	r3, #4
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	2b30      	cmp	r3, #48	; 0x30
 8011e7e:	d115      	bne.n	8011eac <u16ToDec4Str+0x14c>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	3b04      	subs	r3, #4
 8011e84:	2220      	movs	r2, #32
 8011e86:	701a      	strb	r2, [r3, #0]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	3b03      	subs	r3, #3
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b30      	cmp	r3, #48	; 0x30
 8011e90:	d10c      	bne.n	8011eac <u16ToDec4Str+0x14c>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	3b03      	subs	r3, #3
 8011e96:	2220      	movs	r2, #32
 8011e98:	701a      	strb	r2, [r3, #0]
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	3b02      	subs	r3, #2
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	2b30      	cmp	r3, #48	; 0x30
 8011ea2:	d103      	bne.n	8011eac <u16ToDec4Str+0x14c>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3b02      	subs	r3, #2
 8011ea8:	2220      	movs	r2, #32
 8011eaa:	701a      	strb	r2, [r3, #0]
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop
 8011eb8:	10624dd3 	.word	0x10624dd3
 8011ebc:	51eb851f 	.word	0x51eb851f
 8011ec0:	66666667 	.word	0x66666667

08011ec4 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	603a      	str	r2, [r7, #0]
 8011ece:	80fb      	strh	r3, [r7, #6]
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011eda:	480e      	ldr	r0, [pc, #56]	; (8011f14 <lcd_write_cmd_data+0x50>)
 8011edc:	f007 fe9a 	bl	8019c14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011ee0:	1db9      	adds	r1, r7, #6
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	480c      	ldr	r0, [pc, #48]	; (8011f18 <lcd_write_cmd_data+0x54>)
 8011ee8:	f00a f999 	bl	801c21e <HAL_SPI_Transmit>

	if(Len !=0)
 8011eec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00b      	beq.n	8011f0c <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011efa:	4806      	ldr	r0, [pc, #24]	; (8011f14 <lcd_write_cmd_data+0x50>)
 8011efc:	f007 fe8a 	bl	8019c14 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011f00:	88ba      	ldrh	r2, [r7, #4]
 8011f02:	2301      	movs	r3, #1
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	4804      	ldr	r0, [pc, #16]	; (8011f18 <lcd_write_cmd_data+0x54>)
 8011f08:	f00a f989 	bl	801c21e <HAL_SPI_Transmit>
	}
}
 8011f0c:	bf00      	nop
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	40020800 	.word	0x40020800
 8011f18:	200069c0 	.word	0x200069c0

08011f1c <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011f20:	2200      	movs	r2, #0
 8011f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011f26:	4885      	ldr	r0, [pc, #532]	; (801213c <Init_LCD+0x220>)
 8011f28:	f007 fe74 	bl	8019c14 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f32:	4883      	ldr	r0, [pc, #524]	; (8012140 <Init_LCD+0x224>)
 8011f34:	f007 fe6e 	bl	8019c14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011f38:	2001      	movs	r0, #1
 8011f3a:	f006 fa8d 	bl	8018458 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f44:	487e      	ldr	r0, [pc, #504]	; (8012140 <Init_LCD+0x224>)
 8011f46:	f007 fe65 	bl	8019c14 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011f4a:	200a      	movs	r0, #10
 8011f4c:	f006 fa84 	bl	8018458 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011f50:	2201      	movs	r2, #1
 8011f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f56:	487a      	ldr	r0, [pc, #488]	; (8012140 <Init_LCD+0x224>)
 8011f58:	f007 fe5c 	bl	8019c14 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011f5c:	2078      	movs	r0, #120	; 0x78
 8011f5e:	f006 fa7b 	bl	8018458 <HAL_Delay>

	data[0]=0;
 8011f62:	4b78      	ldr	r3, [pc, #480]	; (8012144 <Init_LCD+0x228>)
 8011f64:	2200      	movs	r2, #0
 8011f66:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011f68:	4a76      	ldr	r2, [pc, #472]	; (8012144 <Init_LCD+0x228>)
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	20b0      	movs	r0, #176	; 0xb0
 8011f6e:	f7ff ffa9 	bl	8011ec4 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011f72:	4a74      	ldr	r2, [pc, #464]	; (8012144 <Init_LCD+0x228>)
 8011f74:	2100      	movs	r1, #0
 8011f76:	2011      	movs	r0, #17
 8011f78:	f7ff ffa4 	bl	8011ec4 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011f7c:	2078      	movs	r0, #120	; 0x78
 8011f7e:	f006 fa6b 	bl	8018458 <HAL_Delay>
	data[0]=0x55;
 8011f82:	4b70      	ldr	r3, [pc, #448]	; (8012144 <Init_LCD+0x228>)
 8011f84:	2255      	movs	r2, #85	; 0x55
 8011f86:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011f88:	4a6e      	ldr	r2, [pc, #440]	; (8012144 <Init_LCD+0x228>)
 8011f8a:	2101      	movs	r1, #1
 8011f8c:	203a      	movs	r0, #58	; 0x3a
 8011f8e:	f7ff ff99 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011f92:	4b6c      	ldr	r3, [pc, #432]	; (8012144 <Init_LCD+0x228>)
 8011f94:	2209      	movs	r2, #9
 8011f96:	805a      	strh	r2, [r3, #2]
 8011f98:	4b6a      	ldr	r3, [pc, #424]	; (8012144 <Init_LCD+0x228>)
 8011f9a:	885a      	ldrh	r2, [r3, #2]
 8011f9c:	4b69      	ldr	r3, [pc, #420]	; (8012144 <Init_LCD+0x228>)
 8011f9e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011fa0:	4a68      	ldr	r2, [pc, #416]	; (8012144 <Init_LCD+0x228>)
 8011fa2:	2102      	movs	r1, #2
 8011fa4:	20c0      	movs	r0, #192	; 0xc0
 8011fa6:	f7ff ff8d 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]= 0x41;
 8011faa:	4b66      	ldr	r3, [pc, #408]	; (8012144 <Init_LCD+0x228>)
 8011fac:	2241      	movs	r2, #65	; 0x41
 8011fae:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011fb0:	4b64      	ldr	r3, [pc, #400]	; (8012144 <Init_LCD+0x228>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011fb6:	4a63      	ldr	r2, [pc, #396]	; (8012144 <Init_LCD+0x228>)
 8011fb8:	2102      	movs	r1, #2
 8011fba:	20c1      	movs	r0, #193	; 0xc1
 8011fbc:	f7ff ff82 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011fc0:	4b60      	ldr	r3, [pc, #384]	; (8012144 <Init_LCD+0x228>)
 8011fc2:	2233      	movs	r2, #51	; 0x33
 8011fc4:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011fc6:	4a5f      	ldr	r2, [pc, #380]	; (8012144 <Init_LCD+0x228>)
 8011fc8:	2101      	movs	r1, #1
 8011fca:	20c2      	movs	r0, #194	; 0xc2
 8011fcc:	f7ff ff7a 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011fd0:	4b5c      	ldr	r3, [pc, #368]	; (8012144 <Init_LCD+0x228>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	805a      	strh	r2, [r3, #2]
 8011fd6:	4b5b      	ldr	r3, [pc, #364]	; (8012144 <Init_LCD+0x228>)
 8011fd8:	885a      	ldrh	r2, [r3, #2]
 8011fda:	4b5a      	ldr	r3, [pc, #360]	; (8012144 <Init_LCD+0x228>)
 8011fdc:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011fde:	4b59      	ldr	r3, [pc, #356]	; (8012144 <Init_LCD+0x228>)
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	80da      	strh	r2, [r3, #6]
 8011fe4:	4b57      	ldr	r3, [pc, #348]	; (8012144 <Init_LCD+0x228>)
 8011fe6:	88da      	ldrh	r2, [r3, #6]
 8011fe8:	4b56      	ldr	r3, [pc, #344]	; (8012144 <Init_LCD+0x228>)
 8011fea:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011fec:	4a55      	ldr	r2, [pc, #340]	; (8012144 <Init_LCD+0x228>)
 8011fee:	2104      	movs	r1, #4
 8011ff0:	20c5      	movs	r0, #197	; 0xc5
 8011ff2:	f7ff ff67 	bl	8011ec4 <lcd_write_cmd_data>

	data[0]=  0;
 8011ff6:	4b53      	ldr	r3, [pc, #332]	; (8012144 <Init_LCD+0x228>)
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011ffc:	4a51      	ldr	r2, [pc, #324]	; (8012144 <Init_LCD+0x228>)
 8011ffe:	2101      	movs	r1, #1
 8012000:	2036      	movs	r0, #54	; 0x36
 8012002:	f7ff ff5f 	bl	8011ec4 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8012006:	4b4f      	ldr	r3, [pc, #316]	; (8012144 <Init_LCD+0x228>)
 8012008:	2200      	movs	r2, #0
 801200a:	839a      	strh	r2, [r3, #28]
 801200c:	4b4d      	ldr	r3, [pc, #308]	; (8012144 <Init_LCD+0x228>)
 801200e:	8b9a      	ldrh	r2, [r3, #28]
 8012010:	4b4c      	ldr	r3, [pc, #304]	; (8012144 <Init_LCD+0x228>)
 8012012:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8012014:	4b4b      	ldr	r3, [pc, #300]	; (8012144 <Init_LCD+0x228>)
 8012016:	222c      	movs	r2, #44	; 0x2c
 8012018:	809a      	strh	r2, [r3, #4]
 801201a:	4b4a      	ldr	r3, [pc, #296]	; (8012144 <Init_LCD+0x228>)
 801201c:	889a      	ldrh	r2, [r3, #4]
 801201e:	4b49      	ldr	r3, [pc, #292]	; (8012144 <Init_LCD+0x228>)
 8012020:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8012022:	4b48      	ldr	r3, [pc, #288]	; (8012144 <Init_LCD+0x228>)
 8012024:	220b      	movs	r2, #11
 8012026:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8012028:	4b46      	ldr	r3, [pc, #280]	; (8012144 <Init_LCD+0x228>)
 801202a:	220c      	movs	r2, #12
 801202c:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 801202e:	4b45      	ldr	r3, [pc, #276]	; (8012144 <Init_LCD+0x228>)
 8012030:	2204      	movs	r2, #4
 8012032:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8012034:	4b43      	ldr	r3, [pc, #268]	; (8012144 <Init_LCD+0x228>)
 8012036:	224c      	movs	r2, #76	; 0x4c
 8012038:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 801203a:	4b42      	ldr	r3, [pc, #264]	; (8012144 <Init_LCD+0x228>)
 801203c:	2264      	movs	r2, #100	; 0x64
 801203e:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8012040:	4b40      	ldr	r3, [pc, #256]	; (8012144 <Init_LCD+0x228>)
 8012042:	2236      	movs	r2, #54	; 0x36
 8012044:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8012046:	4b3f      	ldr	r3, [pc, #252]	; (8012144 <Init_LCD+0x228>)
 8012048:	2203      	movs	r2, #3
 801204a:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 801204c:	4b3d      	ldr	r3, [pc, #244]	; (8012144 <Init_LCD+0x228>)
 801204e:	220e      	movs	r2, #14
 8012050:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8012052:	4b3c      	ldr	r3, [pc, #240]	; (8012144 <Init_LCD+0x228>)
 8012054:	222c      	movs	r2, #44	; 0x2c
 8012056:	835a      	strh	r2, [r3, #26]
 8012058:	4b3a      	ldr	r3, [pc, #232]	; (8012144 <Init_LCD+0x228>)
 801205a:	8b5a      	ldrh	r2, [r3, #26]
 801205c:	4b39      	ldr	r3, [pc, #228]	; (8012144 <Init_LCD+0x228>)
 801205e:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8012060:	4b38      	ldr	r3, [pc, #224]	; (8012144 <Init_LCD+0x228>)
 8012062:	2210      	movs	r2, #16
 8012064:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8012066:	4a37      	ldr	r2, [pc, #220]	; (8012144 <Init_LCD+0x228>)
 8012068:	210f      	movs	r1, #15
 801206a:	20e0      	movs	r0, #224	; 0xe0
 801206c:	f7ff ff2a 	bl	8011ec4 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8012070:	4b34      	ldr	r3, [pc, #208]	; (8012144 <Init_LCD+0x228>)
 8012072:	220f      	movs	r2, #15
 8012074:	839a      	strh	r2, [r3, #28]
 8012076:	4b33      	ldr	r3, [pc, #204]	; (8012144 <Init_LCD+0x228>)
 8012078:	8b9a      	ldrh	r2, [r3, #28]
 801207a:	4b32      	ldr	r3, [pc, #200]	; (8012144 <Init_LCD+0x228>)
 801207c:	811a      	strh	r2, [r3, #8]
 801207e:	4b31      	ldr	r3, [pc, #196]	; (8012144 <Init_LCD+0x228>)
 8012080:	891a      	ldrh	r2, [r3, #8]
 8012082:	4b30      	ldr	r3, [pc, #192]	; (8012144 <Init_LCD+0x228>)
 8012084:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8012086:	4b2f      	ldr	r3, [pc, #188]	; (8012144 <Init_LCD+0x228>)
 8012088:	2237      	movs	r2, #55	; 0x37
 801208a:	809a      	strh	r2, [r3, #4]
 801208c:	4b2d      	ldr	r3, [pc, #180]	; (8012144 <Init_LCD+0x228>)
 801208e:	889a      	ldrh	r2, [r3, #4]
 8012090:	4b2c      	ldr	r3, [pc, #176]	; (8012144 <Init_LCD+0x228>)
 8012092:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8012094:	4b2b      	ldr	r3, [pc, #172]	; (8012144 <Init_LCD+0x228>)
 8012096:	220c      	movs	r2, #12
 8012098:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 801209a:	4b2a      	ldr	r3, [pc, #168]	; (8012144 <Init_LCD+0x228>)
 801209c:	2205      	movs	r2, #5
 801209e:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 80120a0:	4b28      	ldr	r3, [pc, #160]	; (8012144 <Init_LCD+0x228>)
 80120a2:	2250      	movs	r2, #80	; 0x50
 80120a4:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 80120a6:	4b27      	ldr	r3, [pc, #156]	; (8012144 <Init_LCD+0x228>)
 80120a8:	2232      	movs	r2, #50	; 0x32
 80120aa:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 80120ac:	4b25      	ldr	r3, [pc, #148]	; (8012144 <Init_LCD+0x228>)
 80120ae:	2236      	movs	r2, #54	; 0x36
 80120b0:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 80120b2:	4b24      	ldr	r3, [pc, #144]	; (8012144 <Init_LCD+0x228>)
 80120b4:	2204      	movs	r2, #4
 80120b6:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 80120b8:	4b22      	ldr	r3, [pc, #136]	; (8012144 <Init_LCD+0x228>)
 80120ba:	220b      	movs	r2, #11
 80120bc:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 80120be:	4b21      	ldr	r3, [pc, #132]	; (8012144 <Init_LCD+0x228>)
 80120c0:	2200      	movs	r2, #0
 80120c2:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 80120c4:	4b1f      	ldr	r3, [pc, #124]	; (8012144 <Init_LCD+0x228>)
 80120c6:	2219      	movs	r2, #25
 80120c8:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 80120ca:	4b1e      	ldr	r3, [pc, #120]	; (8012144 <Init_LCD+0x228>)
 80120cc:	2214      	movs	r2, #20
 80120ce:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 80120d0:	4a1c      	ldr	r2, [pc, #112]	; (8012144 <Init_LCD+0x228>)
 80120d2:	210f      	movs	r1, #15
 80120d4:	20e1      	movs	r0, #225	; 0xe1
 80120d6:	f7ff fef5 	bl	8011ec4 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 80120da:	4b1a      	ldr	r3, [pc, #104]	; (8012144 <Init_LCD+0x228>)
 80120dc:	2200      	movs	r2, #0
 80120de:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80120e0:	4b18      	ldr	r3, [pc, #96]	; (8012144 <Init_LCD+0x228>)
 80120e2:	2202      	movs	r2, #2
 80120e4:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80120e6:	4b17      	ldr	r3, [pc, #92]	; (8012144 <Init_LCD+0x228>)
 80120e8:	223b      	movs	r2, #59	; 0x3b
 80120ea:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80120ec:	4a15      	ldr	r2, [pc, #84]	; (8012144 <Init_LCD+0x228>)
 80120ee:	2103      	movs	r1, #3
 80120f0:	20b6      	movs	r0, #182	; 0xb6
 80120f2:	f7ff fee7 	bl	8011ec4 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80120f6:	4a13      	ldr	r2, [pc, #76]	; (8012144 <Init_LCD+0x228>)
 80120f8:	2100      	movs	r1, #0
 80120fa:	2011      	movs	r0, #17
 80120fc:	f7ff fee2 	bl	8011ec4 <lcd_write_cmd_data>
	HAL_Delay(120);
 8012100:	2078      	movs	r0, #120	; 0x78
 8012102:	f006 f9a9 	bl	8018458 <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 8012106:	4a0f      	ldr	r2, [pc, #60]	; (8012144 <Init_LCD+0x228>)
 8012108:	2100      	movs	r1, #0
 801210a:	2029      	movs	r0, #41	; 0x29
 801210c:	f7ff feda 	bl	8011ec4 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8012110:	4a0c      	ldr	r2, [pc, #48]	; (8012144 <Init_LCD+0x228>)
 8012112:	2100      	movs	r1, #0
 8012114:	2038      	movs	r0, #56	; 0x38
 8012116:	f7ff fed5 	bl	8011ec4 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 801211a:	4a0a      	ldr	r2, [pc, #40]	; (8012144 <Init_LCD+0x228>)
 801211c:	2100      	movs	r1, #0
 801211e:	2013      	movs	r0, #19
 8012120:	f7ff fed0 	bl	8011ec4 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012124:	2201      	movs	r2, #1
 8012126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801212a:	4804      	ldr	r0, [pc, #16]	; (801213c <Init_LCD+0x220>)
 801212c:	f007 fd72 	bl	8019c14 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8012130:	2000      	movs	r0, #0
 8012132:	f000 f809 	bl	8012148 <LCD_ClrScrn>
}
 8012136:	bf00      	nop
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	40020800 	.word	0x40020800
 8012140:	40020400 	.word	0x40020400
 8012144:	2000281c 	.word	0x2000281c

08012148 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	4603      	mov	r3, r0
 8012150:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8012152:	f44f 7020 	mov.w	r0, #640	; 0x280
 8012156:	f010 fd95 	bl	8022c84 <malloc>
 801215a:	4603      	mov	r3, r0
 801215c:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801215e:	2200      	movs	r2, #0
 8012160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012164:	483d      	ldr	r0, [pc, #244]	; (801225c <LCD_ClrScrn+0x114>)
 8012166:	f007 fd55 	bl	8019c14 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 801216a:	2300      	movs	r3, #0
 801216c:	81fb      	strh	r3, [r7, #14]
 801216e:	e03c      	b.n	80121ea <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8012170:	4b3b      	ldr	r3, [pc, #236]	; (8012260 <LCD_ClrScrn+0x118>)
 8012172:	2200      	movs	r2, #0
 8012174:	805a      	strh	r2, [r3, #2]
 8012176:	4b3a      	ldr	r3, [pc, #232]	; (8012260 <LCD_ClrScrn+0x118>)
 8012178:	885a      	ldrh	r2, [r3, #2]
 801217a:	4b39      	ldr	r3, [pc, #228]	; (8012260 <LCD_ClrScrn+0x118>)
 801217c:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 801217e:	4b38      	ldr	r3, [pc, #224]	; (8012260 <LCD_ClrScrn+0x118>)
 8012180:	2201      	movs	r2, #1
 8012182:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8012184:	4b36      	ldr	r3, [pc, #216]	; (8012260 <LCD_ClrScrn+0x118>)
 8012186:	223f      	movs	r2, #63	; 0x3f
 8012188:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801218a:	4a35      	ldr	r2, [pc, #212]	; (8012260 <LCD_ClrScrn+0x118>)
 801218c:	2104      	movs	r1, #4
 801218e:	202a      	movs	r0, #42	; 0x2a
 8012190:	f7ff fe98 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]= y>>8;
 8012194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012198:	121b      	asrs	r3, r3, #8
 801219a:	b21b      	sxth	r3, r3
 801219c:	b29a      	uxth	r2, r3
 801219e:	4b30      	ldr	r3, [pc, #192]	; (8012260 <LCD_ClrScrn+0x118>)
 80121a0:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 80121a2:	89fb      	ldrh	r3, [r7, #14]
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	4b2d      	ldr	r3, [pc, #180]	; (8012260 <LCD_ClrScrn+0x118>)
 80121aa:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 80121ac:	4b2c      	ldr	r3, [pc, #176]	; (8012260 <LCD_ClrScrn+0x118>)
 80121ae:	2201      	movs	r2, #1
 80121b0:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 80121b2:	4b2b      	ldr	r3, [pc, #172]	; (8012260 <LCD_ClrScrn+0x118>)
 80121b4:	22df      	movs	r2, #223	; 0xdf
 80121b6:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80121b8:	4a29      	ldr	r2, [pc, #164]	; (8012260 <LCD_ClrScrn+0x118>)
 80121ba:	2104      	movs	r1, #4
 80121bc:	202b      	movs	r0, #43	; 0x2b
 80121be:	f7ff fe81 	bl	8011ec4 <lcd_write_cmd_data>

	if(ptr != NULL)
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d016      	beq.n	80121f6 <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80121c8:	88fb      	ldrh	r3, [r7, #6]
 80121ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80121ce:	4619      	mov	r1, r3
 80121d0:	68b8      	ldr	r0, [r7, #8]
 80121d2:	f7ff fc67 	bl	8011aa4 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80121d6:	68ba      	ldr	r2, [r7, #8]
 80121d8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80121dc:	202c      	movs	r0, #44	; 0x2c
 80121de:	f7ff fe71 	bl	8011ec4 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80121e2:	89fb      	ldrh	r3, [r7, #14]
 80121e4:	3301      	adds	r3, #1
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	81fb      	strh	r3, [r7, #14]
 80121ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80121ee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80121f2:	dbbd      	blt.n	8012170 <LCD_ClrScrn+0x28>
 80121f4:	e000      	b.n	80121f8 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80121f6:	bf00      	nop
}

free(ptr);
 80121f8:	68b8      	ldr	r0, [r7, #8]
 80121fa:	f010 fd4b 	bl	8022c94 <free>

data[0]=data[1]= 0;
 80121fe:	4b18      	ldr	r3, [pc, #96]	; (8012260 <LCD_ClrScrn+0x118>)
 8012200:	2200      	movs	r2, #0
 8012202:	805a      	strh	r2, [r3, #2]
 8012204:	4b16      	ldr	r3, [pc, #88]	; (8012260 <LCD_ClrScrn+0x118>)
 8012206:	885a      	ldrh	r2, [r3, #2]
 8012208:	4b15      	ldr	r3, [pc, #84]	; (8012260 <LCD_ClrScrn+0x118>)
 801220a:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 801220c:	4b14      	ldr	r3, [pc, #80]	; (8012260 <LCD_ClrScrn+0x118>)
 801220e:	2201      	movs	r2, #1
 8012210:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 8012212:	4b13      	ldr	r3, [pc, #76]	; (8012260 <LCD_ClrScrn+0x118>)
 8012214:	223f      	movs	r2, #63	; 0x3f
 8012216:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012218:	4a11      	ldr	r2, [pc, #68]	; (8012260 <LCD_ClrScrn+0x118>)
 801221a:	2104      	movs	r1, #4
 801221c:	202a      	movs	r0, #42	; 0x2a
 801221e:	f7ff fe51 	bl	8011ec4 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 8012222:	4b0f      	ldr	r3, [pc, #60]	; (8012260 <LCD_ClrScrn+0x118>)
 8012224:	2200      	movs	r2, #0
 8012226:	805a      	strh	r2, [r3, #2]
 8012228:	4b0d      	ldr	r3, [pc, #52]	; (8012260 <LCD_ClrScrn+0x118>)
 801222a:	885a      	ldrh	r2, [r3, #2]
 801222c:	4b0c      	ldr	r3, [pc, #48]	; (8012260 <LCD_ClrScrn+0x118>)
 801222e:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012230:	4b0b      	ldr	r3, [pc, #44]	; (8012260 <LCD_ClrScrn+0x118>)
 8012232:	2201      	movs	r2, #1
 8012234:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 8012236:	4b0a      	ldr	r3, [pc, #40]	; (8012260 <LCD_ClrScrn+0x118>)
 8012238:	22df      	movs	r2, #223	; 0xdf
 801223a:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 801223c:	4a08      	ldr	r2, [pc, #32]	; (8012260 <LCD_ClrScrn+0x118>)
 801223e:	2104      	movs	r1, #4
 8012240:	202b      	movs	r0, #43	; 0x2b
 8012242:	f7ff fe3f 	bl	8011ec4 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012246:	2201      	movs	r2, #1
 8012248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801224c:	4803      	ldr	r0, [pc, #12]	; (801225c <LCD_ClrScrn+0x114>)
 801224e:	f007 fce1 	bl	8019c14 <HAL_GPIO_WritePin>

}
 8012252:	bf00      	nop
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	40020800 	.word	0x40020800
 8012260:	2000281c 	.word	0x2000281c

08012264 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	4603      	mov	r3, r0
 801226c:	460a      	mov	r2, r1
 801226e:	80fb      	strh	r3, [r7, #6]
 8012270:	4613      	mov	r3, r2
 8012272:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012274:	2200      	movs	r2, #0
 8012276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801227a:	481f      	ldr	r0, [pc, #124]	; (80122f8 <LCD_Set_Posi+0x94>)
 801227c:	f007 fcca 	bl	8019c14 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8012280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012284:	121b      	asrs	r3, r3, #8
 8012286:	b21b      	sxth	r3, r3
 8012288:	b29a      	uxth	r2, r3
 801228a:	4b1c      	ldr	r3, [pc, #112]	; (80122fc <LCD_Set_Posi+0x98>)
 801228c:	809a      	strh	r2, [r3, #4]
 801228e:	4b1b      	ldr	r3, [pc, #108]	; (80122fc <LCD_Set_Posi+0x98>)
 8012290:	889a      	ldrh	r2, [r3, #4]
 8012292:	4b1a      	ldr	r3, [pc, #104]	; (80122fc <LCD_Set_Posi+0x98>)
 8012294:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 8012296:	88fb      	ldrh	r3, [r7, #6]
 8012298:	b2db      	uxtb	r3, r3
 801229a:	b29a      	uxth	r2, r3
 801229c:	4b17      	ldr	r3, [pc, #92]	; (80122fc <LCD_Set_Posi+0x98>)
 801229e:	80da      	strh	r2, [r3, #6]
 80122a0:	4b16      	ldr	r3, [pc, #88]	; (80122fc <LCD_Set_Posi+0x98>)
 80122a2:	88da      	ldrh	r2, [r3, #6]
 80122a4:	4b15      	ldr	r3, [pc, #84]	; (80122fc <LCD_Set_Posi+0x98>)
 80122a6:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80122a8:	4a14      	ldr	r2, [pc, #80]	; (80122fc <LCD_Set_Posi+0x98>)
 80122aa:	2104      	movs	r1, #4
 80122ac:	202a      	movs	r0, #42	; 0x2a
 80122ae:	f7ff fe09 	bl	8011ec4 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80122b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122b6:	121b      	asrs	r3, r3, #8
 80122b8:	b21b      	sxth	r3, r3
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <LCD_Set_Posi+0x98>)
 80122be:	805a      	strh	r2, [r3, #2]
 80122c0:	4b0e      	ldr	r3, [pc, #56]	; (80122fc <LCD_Set_Posi+0x98>)
 80122c2:	885a      	ldrh	r2, [r3, #2]
 80122c4:	4b0d      	ldr	r3, [pc, #52]	; (80122fc <LCD_Set_Posi+0x98>)
 80122c6:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80122c8:	88bb      	ldrh	r3, [r7, #4]
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <LCD_Set_Posi+0x98>)
 80122d0:	80da      	strh	r2, [r3, #6]
 80122d2:	4b0a      	ldr	r3, [pc, #40]	; (80122fc <LCD_Set_Posi+0x98>)
 80122d4:	88da      	ldrh	r2, [r3, #6]
 80122d6:	4b09      	ldr	r3, [pc, #36]	; (80122fc <LCD_Set_Posi+0x98>)
 80122d8:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80122da:	4a08      	ldr	r2, [pc, #32]	; (80122fc <LCD_Set_Posi+0x98>)
 80122dc:	2104      	movs	r1, #4
 80122de:	202b      	movs	r0, #43	; 0x2b
 80122e0:	f7ff fdf0 	bl	8011ec4 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80122e4:	2201      	movs	r2, #1
 80122e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80122ea:	4803      	ldr	r0, [pc, #12]	; (80122f8 <LCD_Set_Posi+0x94>)
 80122ec:	f007 fc92 	bl	8019c14 <HAL_GPIO_WritePin>
}
 80122f0:	bf00      	nop
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	40020800 	.word	0x40020800
 80122fc:	2000281c 	.word	0x2000281c

08012300 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801230a:	2200      	movs	r2, #0
 801230c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012310:	480d      	ldr	r0, [pc, #52]	; (8012348 <LCD_Set_Pixel+0x48>)
 8012312:	f007 fc7f 	bl	8019c14 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	0a1b      	lsrs	r3, r3, #8
 801231a:	b29a      	uxth	r2, r3
 801231c:	4b0b      	ldr	r3, [pc, #44]	; (801234c <LCD_Set_Pixel+0x4c>)
 801231e:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012320:	88fb      	ldrh	r3, [r7, #6]
 8012322:	b2db      	uxtb	r3, r3
 8012324:	b29a      	uxth	r2, r3
 8012326:	4b09      	ldr	r3, [pc, #36]	; (801234c <LCD_Set_Pixel+0x4c>)
 8012328:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 801232a:	4a08      	ldr	r2, [pc, #32]	; (801234c <LCD_Set_Pixel+0x4c>)
 801232c:	2102      	movs	r1, #2
 801232e:	202c      	movs	r0, #44	; 0x2c
 8012330:	f7ff fdc8 	bl	8011ec4 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012334:	2201      	movs	r2, #1
 8012336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801233a:	4803      	ldr	r0, [pc, #12]	; (8012348 <LCD_Set_Pixel+0x48>)
 801233c:	f007 fc6a 	bl	8019c14 <HAL_GPIO_WritePin>
}
 8012340:	bf00      	nop
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	40020800 	.word	0x40020800
 801234c:	2000281c 	.word	0x2000281c

08012350 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012356:	2200      	movs	r2, #0
 8012358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801235c:	4814      	ldr	r0, [pc, #80]	; (80123b0 <LCD_Get_Pixel+0x60>)
 801235e:	f007 fc59 	bl	8019c14 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8012362:	4a14      	ldr	r2, [pc, #80]	; (80123b4 <LCD_Get_Pixel+0x64>)
 8012364:	2100      	movs	r1, #0
 8012366:	202e      	movs	r0, #46	; 0x2e
 8012368:	f7ff fdac 	bl	8011ec4 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 801236c:	2301      	movs	r3, #1
 801236e:	2202      	movs	r2, #2
 8012370:	4910      	ldr	r1, [pc, #64]	; (80123b4 <LCD_Get_Pixel+0x64>)
 8012372:	4811      	ldr	r0, [pc, #68]	; (80123b8 <LCD_Get_Pixel+0x68>)
 8012374:	f00a f88f 	bl	801c496 <HAL_SPI_Receive>
 8012378:	4603      	mov	r3, r0
 801237a:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 801237c:	2201      	movs	r2, #1
 801237e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012382:	480b      	ldr	r0, [pc, #44]	; (80123b0 <LCD_Get_Pixel+0x60>)
 8012384:	f007 fc46 	bl	8019c14 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8012388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10a      	bne.n	80123a6 <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8012390:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <LCD_Get_Pixel+0x64>)
 8012392:	881b      	ldrh	r3, [r3, #0]
 8012394:	021b      	lsls	r3, r3, #8
 8012396:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8012398:	4b06      	ldr	r3, [pc, #24]	; (80123b4 <LCD_Get_Pixel+0x64>)
 801239a:	885a      	ldrh	r2, [r3, #2]
 801239c:	88bb      	ldrh	r3, [r7, #4]
 801239e:	4313      	orrs	r3, r2
 80123a0:	80bb      	strh	r3, [r7, #4]
		return (fred);
 80123a2:	88bb      	ldrh	r3, [r7, #4]
 80123a4:	e000      	b.n	80123a8 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 80123a6:	2300      	movs	r3, #0

}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	40020800 	.word	0x40020800
 80123b4:	2000281c 	.word	0x2000281c
 80123b8:	200069c0 	.word	0x200069c0

080123bc <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 80123bc:	b590      	push	{r4, r7, lr}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	4604      	mov	r4, r0
 80123c4:	4608      	mov	r0, r1
 80123c6:	4611      	mov	r1, r2
 80123c8:	461a      	mov	r2, r3
 80123ca:	4623      	mov	r3, r4
 80123cc:	80fb      	strh	r3, [r7, #6]
 80123ce:	4603      	mov	r3, r0
 80123d0:	80bb      	strh	r3, [r7, #4]
 80123d2:	460b      	mov	r3, r1
 80123d4:	70fb      	strb	r3, [r7, #3]
 80123d6:	4613      	mov	r3, r2
 80123d8:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 80123da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80123de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123e2:	4611      	mov	r1, r2
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff ff3d 	bl	8012264 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80123ea:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80123ee:	f7ff ff87 	bl	8012300 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 80123f2:	78bb      	ldrb	r3, [r7, #2]
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	88bb      	ldrh	r3, [r7, #4]
 80123f8:	4413      	add	r3, r2
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	3b01      	subs	r3, #1
 80123fe:	b29b      	uxth	r3, r3
 8012400:	b21a      	sxth	r2, r3
 8012402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012406:	4611      	mov	r1, r2
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff ff2b 	bl	8012264 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801240e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012412:	f7ff ff75 	bl	8012300 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8012416:	78fb      	ldrb	r3, [r7, #3]
 8012418:	b29b      	uxth	r3, r3
 801241a:	78ba      	ldrb	r2, [r7, #2]
 801241c:	2a0a      	cmp	r2, #10
 801241e:	d901      	bls.n	8012424 <Draw_4Point+0x68>
 8012420:	2208      	movs	r2, #8
 8012422:	e000      	b.n	8012426 <Draw_4Point+0x6a>
 8012424:	2206      	movs	r2, #6
 8012426:	fb12 f303 	smulbb	r3, r2, r3
 801242a:	b29a      	uxth	r2, r3
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	4413      	add	r3, r2
 8012430:	b29b      	uxth	r3, r3
 8012432:	b21b      	sxth	r3, r3
 8012434:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012438:	4611      	mov	r1, r2
 801243a:	4618      	mov	r0, r3
 801243c:	f7ff ff12 	bl	8012264 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012440:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012444:	f7ff ff5c 	bl	8012300 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012448:	78fb      	ldrb	r3, [r7, #3]
 801244a:	b29b      	uxth	r3, r3
 801244c:	78ba      	ldrb	r2, [r7, #2]
 801244e:	2a0a      	cmp	r2, #10
 8012450:	d901      	bls.n	8012456 <Draw_4Point+0x9a>
 8012452:	2208      	movs	r2, #8
 8012454:	e000      	b.n	8012458 <Draw_4Point+0x9c>
 8012456:	2206      	movs	r2, #6
 8012458:	fb12 f303 	smulbb	r3, r2, r3
 801245c:	b29a      	uxth	r2, r3
 801245e:	88fb      	ldrh	r3, [r7, #6]
 8012460:	4413      	add	r3, r2
 8012462:	b29b      	uxth	r3, r3
 8012464:	b218      	sxth	r0, r3
 8012466:	78bb      	ldrb	r3, [r7, #2]
 8012468:	b29a      	uxth	r2, r3
 801246a:	88bb      	ldrh	r3, [r7, #4]
 801246c:	4413      	add	r3, r2
 801246e:	b29b      	uxth	r3, r3
 8012470:	3b01      	subs	r3, #1
 8012472:	b29b      	uxth	r3, r3
 8012474:	b21b      	sxth	r3, r3
 8012476:	4619      	mov	r1, r3
 8012478:	f7ff fef4 	bl	8012264 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801247c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012480:	f7ff ff3e 	bl	8012300 <LCD_Set_Pixel>
}
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	bd90      	pop	{r4, r7, pc}

0801248c <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8012492:	2300      	movs	r3, #0
 8012494:	80fb      	strh	r3, [r7, #6]
 8012496:	e03b      	b.n	8012510 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8012498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801249c:	4a21      	ldr	r2, [pc, #132]	; (8012524 <Update_Title+0x98>)
 801249e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124a2:	4619      	mov	r1, r3
 80124a4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80124a8:	f7fb fc2c 	bl	800dd04 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80124ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124b0:	4a1d      	ldr	r2, [pc, #116]	; (8012528 <Update_Title+0x9c>)
 80124b2:	5cd3      	ldrb	r3, [r2, r3]
 80124b4:	b219      	sxth	r1, r3
 80124b6:	4b1d      	ldr	r3, [pc, #116]	; (801252c <Update_Title+0xa0>)
 80124b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	bf0c      	ite	eq
 80124c4:	2301      	moveq	r3, #1
 80124c6:	2300      	movne	r3, #0
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	4618      	mov	r0, r3
 80124cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	4a17      	ldr	r2, [pc, #92]	; (8012530 <Update_Title+0xa4>)
 80124d4:	4413      	add	r3, r2
 80124d6:	4602      	mov	r2, r0
 80124d8:	f240 102f 	movw	r0, #303	; 0x12f
 80124dc:	f7fb fbba 	bl	800dc54 <DispStr8x14>
    if(Current == i)
 80124e0:	4b12      	ldr	r3, [pc, #72]	; (801252c <Update_Title+0xa0>)
 80124e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d10a      	bne.n	8012504 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 80124ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124f2:	4a0d      	ldr	r2, [pc, #52]	; (8012528 <Update_Title+0x9c>)
 80124f4:	5cd3      	ldrb	r3, [r2, r3]
 80124f6:	b219      	sxth	r1, r3
 80124f8:	230e      	movs	r3, #14
 80124fa:	2202      	movs	r2, #2
 80124fc:	f240 102f 	movw	r0, #303	; 0x12f
 8012500:	f7ff ff5c 	bl	80123bc <Draw_4Point>
  for(i=0; i<8; i++)
 8012504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012508:	b29b      	uxth	r3, r3
 801250a:	3301      	adds	r3, #1
 801250c:	b29b      	uxth	r3, r3
 801250e:	80fb      	strh	r3, [r7, #6]
 8012510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012514:	2b07      	cmp	r3, #7
 8012516:	ddbf      	ble.n	8012498 <Update_Title+0xc>
    }
  }
}
 8012518:	bf00      	nop
 801251a:	bf00      	nop
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
 8012522:	bf00      	nop
 8012524:	08001f08 	.word	0x08001f08
 8012528:	08001f38 	.word	0x08001f38
 801252c:	2000079e 	.word	0x2000079e
 8012530:	08001f18 	.word	0x08001f18

08012534 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8012534:	b590      	push	{r4, r7, lr}
 8012536:	b087      	sub	sp, #28
 8012538:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801253a:	4bbd      	ldr	r3, [pc, #756]	; (8012830 <Update_Blink+0x2fc>)
 801253c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012540:	b29a      	uxth	r2, r3
 8012542:	4bbb      	ldr	r3, [pc, #748]	; (8012830 <Update_Blink+0x2fc>)
 8012544:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012548:	b29b      	uxth	r3, r3
 801254a:	4619      	mov	r1, r3
 801254c:	0089      	lsls	r1, r1, #2
 801254e:	440b      	add	r3, r1
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	b29b      	uxth	r3, r3
 8012554:	4413      	add	r3, r2
 8012556:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8012558:	4bb6      	ldr	r3, [pc, #728]	; (8012834 <Update_Blink+0x300>)
 801255a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801255e:	461a      	mov	r2, r3
 8012560:	4bb5      	ldr	r3, [pc, #724]	; (8012838 <Update_Blink+0x304>)
 8012562:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8012566:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8012568:	89bb      	ldrh	r3, [r7, #12]
 801256a:	4ab1      	ldr	r2, [pc, #708]	; (8012830 <Update_Blink+0x2fc>)
 801256c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012570:	89bb      	ldrh	r3, [r7, #12]
 8012572:	49af      	ldr	r1, [pc, #700]	; (8012830 <Update_Blink+0x2fc>)
 8012574:	00db      	lsls	r3, r3, #3
 8012576:	440b      	add	r3, r1
 8012578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801257c:	4619      	mov	r1, r3
 801257e:	460b      	mov	r3, r1
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	440b      	add	r3, r1
 8012584:	005b      	lsls	r3, r3, #1
 8012586:	4413      	add	r3, r2
 8012588:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 801258a:	4bac      	ldr	r3, [pc, #688]	; (801283c <Update_Blink+0x308>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b01      	cmp	r3, #1
 8012592:	f040 86ca 	bne.w	801332a <Update_Blink+0xdf6>
  {
    Blink = 0;
 8012596:	4ba9      	ldr	r3, [pc, #676]	; (801283c <Update_Blink+0x308>)
 8012598:	2200      	movs	r2, #0
 801259a:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 801259c:	4ba6      	ldr	r3, [pc, #664]	; (8012838 <Update_Blink+0x304>)
 801259e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80125a2:	4aa3      	ldr	r2, [pc, #652]	; (8012830 <Update_Blink+0x2fc>)
 80125a4:	00db      	lsls	r3, r3, #3
 80125a6:	4413      	add	r3, r2
 80125a8:	799b      	ldrb	r3, [r3, #6]
 80125aa:	4aa3      	ldr	r2, [pc, #652]	; (8012838 <Update_Blink+0x304>)
 80125ac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80125b0:	4610      	mov	r0, r2
 80125b2:	f043 0320 	orr.w	r3, r3, #32
 80125b6:	b2d9      	uxtb	r1, r3
 80125b8:	4a9d      	ldr	r2, [pc, #628]	; (8012830 <Update_Blink+0x2fc>)
 80125ba:	00c3      	lsls	r3, r0, #3
 80125bc:	4413      	add	r3, r2
 80125be:	460a      	mov	r2, r1
 80125c0:	719a      	strb	r2, [r3, #6]
    switch(i)
 80125c2:	89bb      	ldrh	r3, [r7, #12]
 80125c4:	2b29      	cmp	r3, #41	; 0x29
 80125c6:	f200 86aa 	bhi.w	801331e <Update_Blink+0xdea>
 80125ca:	a201      	add	r2, pc, #4	; (adr r2, 80125d0 <Update_Blink+0x9c>)
 80125cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d0:	0801273b 	.word	0x0801273b
 80125d4:	0801273b 	.word	0x0801273b
 80125d8:	0801273b 	.word	0x0801273b
 80125dc:	080127cf 	.word	0x080127cf
 80125e0:	08012801 	.word	0x08012801
 80125e4:	08012801 	.word	0x08012801
 80125e8:	08012937 	.word	0x08012937
 80125ec:	08012995 	.word	0x08012995
 80125f0:	080129ed 	.word	0x080129ed
 80125f4:	08012a1f 	.word	0x08012a1f
 80125f8:	08012a8b 	.word	0x08012a8b
 80125fc:	08012a8b 	.word	0x08012a8b
 8012600:	08012bed 	.word	0x08012bed
 8012604:	08012c47 	.word	0x08012c47
 8012608:	08012ca5 	.word	0x08012ca5
 801260c:	08012d75 	.word	0x08012d75
 8012610:	08012d9f 	.word	0x08012d9f
 8012614:	08012ca5 	.word	0x08012ca5
 8012618:	08012dcd 	.word	0x08012dcd
 801261c:	0801331f 	.word	0x0801331f
 8012620:	0801331f 	.word	0x0801331f
 8012624:	0801331f 	.word	0x0801331f
 8012628:	0801331f 	.word	0x0801331f
 801262c:	0801331f 	.word	0x0801331f
 8012630:	0801331f 	.word	0x0801331f
 8012634:	0801331f 	.word	0x0801331f
 8012638:	08012e45 	.word	0x08012e45
 801263c:	08012ec1 	.word	0x08012ec1
 8012640:	08012eef 	.word	0x08012eef
 8012644:	08012679 	.word	0x08012679
 8012648:	08012679 	.word	0x08012679
 801264c:	08012679 	.word	0x08012679
 8012650:	08012679 	.word	0x08012679
 8012654:	08012679 	.word	0x08012679
 8012658:	08012679 	.word	0x08012679
 801265c:	08012679 	.word	0x08012679
 8012660:	08012f6b 	.word	0x08012f6b
 8012664:	08013005 	.word	0x08013005
 8012668:	080130c9 	.word	0x080130c9
 801266c:	08013177 	.word	0x08013177
 8012670:	08013211 	.word	0x08013211
 8012674:	0801327f 	.word	0x0801327f
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8012678:	f64f 4310 	movw	r3, #64528	; 0xfc10
 801267c:	4619      	mov	r1, r3
 801267e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012682:	f7fb fb3f 	bl	800dd04 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8012686:	89bb      	ldrh	r3, [r7, #12]
 8012688:	4a69      	ldr	r2, [pc, #420]	; (8012830 <Update_Blink+0x2fc>)
 801268a:	00db      	lsls	r3, r3, #3
 801268c:	4413      	add	r3, r2
 801268e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012692:	b2db      	uxtb	r3, r3
 8012694:	4619      	mov	r1, r3
 8012696:	486a      	ldr	r0, [pc, #424]	; (8012840 <Update_Blink+0x30c>)
 8012698:	f7ff f9bc 	bl	8011a14 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 801269c:	4b69      	ldr	r3, [pc, #420]	; (8012844 <Update_Blink+0x310>)
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	b2d8      	uxtb	r0, r3
 80126a2:	89bb      	ldrh	r3, [r7, #12]
 80126a4:	4a68      	ldr	r2, [pc, #416]	; (8012848 <Update_Blink+0x314>)
 80126a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	3b03      	subs	r3, #3
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	b219      	sxth	r1, r3
 80126b2:	2342      	movs	r3, #66	; 0x42
 80126b4:	9301      	str	r3, [sp, #4]
 80126b6:	2300      	movs	r3, #0
 80126b8:	9300      	str	r3, [sp, #0]
 80126ba:	230b      	movs	r3, #11
 80126bc:	2203      	movs	r2, #3
 80126be:	f7fb fc0f 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 80126c2:	89bb      	ldrh	r3, [r7, #12]
 80126c4:	4a60      	ldr	r2, [pc, #384]	; (8012848 <Update_Blink+0x314>)
 80126c6:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80126ca:	4b5e      	ldr	r3, [pc, #376]	; (8012844 <Update_Blink+0x310>)
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	89bb      	ldrh	r3, [r7, #12]
 80126d2:	2b21      	cmp	r3, #33	; 0x21
 80126d4:	d901      	bls.n	80126da <Update_Blink+0x1a6>
 80126d6:	4b5d      	ldr	r3, [pc, #372]	; (801284c <Update_Blink+0x318>)
 80126d8:	e000      	b.n	80126dc <Update_Blink+0x1a8>
 80126da:	4b5d      	ldr	r3, [pc, #372]	; (8012850 <Update_Blink+0x31c>)
 80126dc:	2103      	movs	r1, #3
 80126de:	f7fb fb29 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 80126e2:	89bb      	ldrh	r3, [r7, #12]
 80126e4:	4a58      	ldr	r2, [pc, #352]	; (8012848 <Update_Blink+0x314>)
 80126e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	3318      	adds	r3, #24
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	b218      	sxth	r0, r3
 80126f2:	4b54      	ldr	r3, [pc, #336]	; (8012844 <Update_Blink+0x310>)
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	b2da      	uxtb	r2, r3
 80126f8:	4b51      	ldr	r3, [pc, #324]	; (8012840 <Update_Blink+0x30c>)
 80126fa:	2103      	movs	r1, #3
 80126fc:	f7fb fb1a 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8012700:	89bb      	ldrh	r3, [r7, #12]
 8012702:	4a51      	ldr	r2, [pc, #324]	; (8012848 <Update_Blink+0x314>)
 8012704:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012708:	b29b      	uxth	r3, r3
 801270a:	332a      	adds	r3, #42	; 0x2a
 801270c:	b29b      	uxth	r3, r3
 801270e:	b218      	sxth	r0, r3
 8012710:	4b4c      	ldr	r3, [pc, #304]	; (8012844 <Update_Blink+0x310>)
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	b2dc      	uxtb	r4, r3
 8012716:	89bb      	ldrh	r3, [r7, #12]
 8012718:	4a45      	ldr	r2, [pc, #276]	; (8012830 <Update_Blink+0x2fc>)
 801271a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801271e:	89bb      	ldrh	r3, [r7, #12]
 8012720:	f1a3 021d 	sub.w	r2, r3, #29
 8012724:	4613      	mov	r3, r2
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	4413      	add	r3, r2
 801272a:	005b      	lsls	r3, r3, #1
 801272c:	440b      	add	r3, r1
 801272e:	4622      	mov	r2, r4
 8012730:	2103      	movs	r1, #3
 8012732:	f7fb faff 	bl	800dd34 <DispStr>
      break;
 8012736:	f000 bdf2 	b.w	801331e <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 801273a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801273e:	4619      	mov	r1, r3
 8012740:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012744:	f7fb fade 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012748:	4b3e      	ldr	r3, [pc, #248]	; (8012844 <Update_Blink+0x310>)
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	b2d8      	uxtb	r0, r3
 801274e:	232f      	movs	r3, #47	; 0x2f
 8012750:	b29b      	uxth	r3, r3
 8012752:	3b03      	subs	r3, #3
 8012754:	b29b      	uxth	r3, r3
 8012756:	b219      	sxth	r1, r3
 8012758:	232a      	movs	r3, #42	; 0x2a
 801275a:	9301      	str	r3, [sp, #4]
 801275c:	2300      	movs	r3, #0
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	230b      	movs	r3, #11
 8012762:	22e1      	movs	r2, #225	; 0xe1
 8012764:	f7fb fbbc 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8012768:	242f      	movs	r4, #47	; 0x2f
 801276a:	4b36      	ldr	r3, [pc, #216]	; (8012844 <Update_Blink+0x310>)
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	b2d8      	uxtb	r0, r3
 8012770:	4b2f      	ldr	r3, [pc, #188]	; (8012830 <Update_Blink+0x2fc>)
 8012772:	6819      	ldr	r1, [r3, #0]
 8012774:	89fa      	ldrh	r2, [r7, #14]
 8012776:	4613      	mov	r3, r2
 8012778:	005b      	lsls	r3, r3, #1
 801277a:	4413      	add	r3, r2
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	440b      	add	r3, r1
 8012780:	4602      	mov	r2, r0
 8012782:	21e1      	movs	r1, #225	; 0xe1
 8012784:	4620      	mov	r0, r4
 8012786:	f7fb fad5 	bl	800dd34 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 801278a:	2047      	movs	r0, #71	; 0x47
 801278c:	4b2d      	ldr	r3, [pc, #180]	; (8012844 <Update_Blink+0x310>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	b2d9      	uxtb	r1, r3
 8012792:	4b27      	ldr	r3, [pc, #156]	; (8012830 <Update_Blink+0x2fc>)
 8012794:	689a      	ldr	r2, [r3, #8]
 8012796:	4b26      	ldr	r3, [pc, #152]	; (8012830 <Update_Blink+0x2fc>)
 8012798:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801279c:	461c      	mov	r4, r3
 801279e:	4623      	mov	r3, r4
 80127a0:	005b      	lsls	r3, r3, #1
 80127a2:	4423      	add	r3, r4
 80127a4:	005b      	lsls	r3, r3, #1
 80127a6:	4413      	add	r3, r2
 80127a8:	460a      	mov	r2, r1
 80127aa:	21e1      	movs	r1, #225	; 0xe1
 80127ac:	f7fb fac2 	bl	800dd34 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80127b0:	2020      	movs	r0, #32
 80127b2:	4b1f      	ldr	r3, [pc, #124]	; (8012830 <Update_Blink+0x2fc>)
 80127b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d001      	beq.n	80127c0 <Update_Blink+0x28c>
 80127bc:	4b25      	ldr	r3, [pc, #148]	; (8012854 <Update_Blink+0x320>)
 80127be:	e000      	b.n	80127c2 <Update_Blink+0x28e>
 80127c0:	4b25      	ldr	r3, [pc, #148]	; (8012858 <Update_Blink+0x324>)
 80127c2:	2210      	movs	r2, #16
 80127c4:	21e1      	movs	r1, #225	; 0xe1
 80127c6:	f7fb fd1d 	bl	800e204 <DispStr10x14>
      break;
 80127ca:	f000 bda8 	b.w	801331e <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 80127ce:	4b1d      	ldr	r3, [pc, #116]	; (8012844 <Update_Blink+0x310>)
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d009      	beq.n	80127ec <Update_Blink+0x2b8>
 80127d8:	4b20      	ldr	r3, [pc, #128]	; (801285c <Update_Blink+0x328>)
 80127da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127de:	f043 0301 	orr.w	r3, r3, #1
 80127e2:	b21a      	sxth	r2, r3
 80127e4:	4b1d      	ldr	r3, [pc, #116]	; (801285c <Update_Blink+0x328>)
 80127e6:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 80127e8:	f000 bd99 	b.w	801331e <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 80127ec:	4b1b      	ldr	r3, [pc, #108]	; (801285c <Update_Blink+0x328>)
 80127ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127f2:	f023 0301 	bic.w	r3, r3, #1
 80127f6:	b21a      	sxth	r2, r3
 80127f8:	4b18      	ldr	r3, [pc, #96]	; (801285c <Update_Blink+0x328>)
 80127fa:	801a      	strh	r2, [r3, #0]
      break;
 80127fc:	f000 bd8f 	b.w	801331e <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8012800:	89bb      	ldrh	r3, [r7, #12]
 8012802:	2b04      	cmp	r3, #4
 8012804:	d101      	bne.n	801280a <Update_Blink+0x2d6>
 8012806:	2305      	movs	r3, #5
 8012808:	e000      	b.n	801280c <Update_Blink+0x2d8>
 801280a:	2306      	movs	r3, #6
 801280c:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 801280e:	4b0d      	ldr	r3, [pc, #52]	; (8012844 <Update_Blink+0x310>)
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	b2db      	uxtb	r3, r3
 8012814:	2b00      	cmp	r3, #0
 8012816:	d023      	beq.n	8012860 <Update_Blink+0x32c>
 8012818:	4a10      	ldr	r2, [pc, #64]	; (801285c <Update_Blink+0x328>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012820:	f043 0301 	orr.w	r3, r3, #1
 8012824:	b219      	sxth	r1, r3
 8012826:	4a0d      	ldr	r2, [pc, #52]	; (801285c <Update_Blink+0x328>)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801282e:	e022      	b.n	8012876 <Update_Blink+0x342>
 8012830:	20000298 	.word	0x20000298
 8012834:	2000079e 	.word	0x2000079e
 8012838:	20000538 	.word	0x20000538
 801283c:	20000a31 	.word	0x20000a31
 8012840:	2000283c 	.word	0x2000283c
 8012844:	2000077c 	.word	0x2000077c
 8012848:	0800215c 	.word	0x0800215c
 801284c:	08000948 	.word	0x08000948
 8012850:	08000950 	.word	0x08000950
 8012854:	08000958 	.word	0x08000958
 8012858:	0800095c 	.word	0x0800095c
 801285c:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8012860:	4ab1      	ldr	r2, [pc, #708]	; (8012b28 <Update_Blink+0x5f4>)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012868:	f023 0301 	bic.w	r3, r3, #1
 801286c:	b219      	sxth	r1, r3
 801286e:	4aae      	ldr	r2, [pc, #696]	; (8012b28 <Update_Blink+0x5f4>)
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8012876:	4bac      	ldr	r3, [pc, #688]	; (8012b28 <Update_Blink+0x5f4>)
 8012878:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801287c:	461a      	mov	r2, r3
 801287e:	4baa      	ldr	r3, [pc, #680]	; (8012b28 <Update_Blink+0x5f4>)
 8012880:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	0fda      	lsrs	r2, r3, #31
 8012888:	4413      	add	r3, r2
 801288a:	105b      	asrs	r3, r3, #1
 801288c:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801288e:	89fb      	ldrh	r3, [r7, #14]
 8012890:	4aa6      	ldr	r2, [pc, #664]	; (8012b2c <Update_Blink+0x5f8>)
 8012892:	5cd3      	ldrb	r3, [r2, r3]
 8012894:	461c      	mov	r4, r3
 8012896:	89fb      	ldrh	r3, [r7, #14]
 8012898:	4aa5      	ldr	r2, [pc, #660]	; (8012b30 <Update_Blink+0x5fc>)
 801289a:	5cd3      	ldrb	r3, [r2, r3]
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff fa1d 	bl	8011cdc <Exp>
 80128a2:	4603      	mov	r3, r0
 80128a4:	fb03 f204 	mul.w	r2, r3, r4
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	fb02 f303 	mul.w	r3, r2, r3
 80128ae:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80128b0:	2301      	movs	r3, #1
 80128b2:	9300      	str	r3, [sp, #0]
 80128b4:	2303      	movs	r3, #3
 80128b6:	4a9f      	ldr	r2, [pc, #636]	; (8012b34 <Update_Blink+0x600>)
 80128b8:	6879      	ldr	r1, [r7, #4]
 80128ba:	489f      	ldr	r0, [pc, #636]	; (8012b38 <Update_Blink+0x604>)
 80128bc:	f7ff f912 	bl	8011ae4 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 80128c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80128c4:	4619      	mov	r1, r3
 80128c6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128ca:	f7fb fa1b 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80128ce:	4b9b      	ldr	r3, [pc, #620]	; (8012b3c <Update_Blink+0x608>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	b2d8      	uxtb	r0, r3
 80128d4:	2307      	movs	r3, #7
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	3b03      	subs	r3, #3
 80128da:	b29b      	uxth	r3, r3
 80128dc:	b219      	sxth	r1, r3
 80128de:	2336      	movs	r3, #54	; 0x36
 80128e0:	9301      	str	r3, [sp, #4]
 80128e2:	2300      	movs	r3, #0
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	230b      	movs	r3, #11
 80128e8:	2203      	movs	r2, #3
 80128ea:	f7fb faf9 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 80128ee:	2007      	movs	r0, #7
 80128f0:	4b92      	ldr	r3, [pc, #584]	; (8012b3c <Update_Blink+0x608>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	3310      	adds	r3, #16
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	4b91      	ldr	r3, [pc, #580]	; (8012b40 <Update_Blink+0x60c>)
 80128fc:	2103      	movs	r1, #3
 80128fe:	f7fb fa19 	bl	800dd34 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8012902:	2307      	movs	r3, #7
 8012904:	b29b      	uxth	r3, r3
 8012906:	3306      	adds	r3, #6
 8012908:	b29b      	uxth	r3, r3
 801290a:	b218      	sxth	r0, r3
 801290c:	4b8b      	ldr	r3, [pc, #556]	; (8012b3c <Update_Blink+0x608>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	b2da      	uxtb	r2, r3
 8012912:	4b8c      	ldr	r3, [pc, #560]	; (8012b44 <Update_Blink+0x610>)
 8012914:	2103      	movs	r1, #3
 8012916:	f7fb fa0d 	bl	800dd34 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 801291a:	2307      	movs	r3, #7
 801291c:	b29b      	uxth	r3, r3
 801291e:	3312      	adds	r3, #18
 8012920:	b29b      	uxth	r3, r3
 8012922:	b218      	sxth	r0, r3
 8012924:	4b85      	ldr	r3, [pc, #532]	; (8012b3c <Update_Blink+0x608>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	b2da      	uxtb	r2, r3
 801292a:	4b83      	ldr	r3, [pc, #524]	; (8012b38 <Update_Blink+0x604>)
 801292c:	2103      	movs	r1, #3
 801292e:	f7fb fa01 	bl	800dd34 <DispStr>
      break;
 8012932:	f000 bcf4 	b.w	801331e <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012936:	4b81      	ldr	r3, [pc, #516]	; (8012b3c <Update_Blink+0x608>)
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	b2db      	uxtb	r3, r3
 801293c:	2b00      	cmp	r3, #0
 801293e:	d008      	beq.n	8012952 <Update_Blink+0x41e>
 8012940:	4b79      	ldr	r3, [pc, #484]	; (8012b28 <Update_Blink+0x5f4>)
 8012942:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012946:	f043 0301 	orr.w	r3, r3, #1
 801294a:	b21a      	sxth	r2, r3
 801294c:	4b76      	ldr	r3, [pc, #472]	; (8012b28 <Update_Blink+0x5f4>)
 801294e:	815a      	strh	r2, [r3, #10]
 8012950:	e007      	b.n	8012962 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012952:	4b75      	ldr	r3, [pc, #468]	; (8012b28 <Update_Blink+0x5f4>)
 8012954:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012958:	f023 0301 	bic.w	r3, r3, #1
 801295c:	b21a      	sxth	r2, r3
 801295e:	4b72      	ldr	r3, [pc, #456]	; (8012b28 <Update_Blink+0x5f4>)
 8012960:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012962:	4b76      	ldr	r3, [pc, #472]	; (8012b3c <Update_Blink+0x608>)
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	b2db      	uxtb	r3, r3
 8012968:	2b00      	cmp	r3, #0
 801296a:	d009      	beq.n	8012980 <Update_Blink+0x44c>
 801296c:	4b6e      	ldr	r3, [pc, #440]	; (8012b28 <Update_Blink+0x5f4>)
 801296e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012972:	f043 0301 	orr.w	r3, r3, #1
 8012976:	b21a      	sxth	r2, r3
 8012978:	4b6b      	ldr	r3, [pc, #428]	; (8012b28 <Update_Blink+0x5f4>)
 801297a:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 801297c:	f000 bccf 	b.w	801331e <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012980:	4b69      	ldr	r3, [pc, #420]	; (8012b28 <Update_Blink+0x5f4>)
 8012982:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012986:	f023 0301 	bic.w	r3, r3, #1
 801298a:	b21a      	sxth	r2, r3
 801298c:	4b66      	ldr	r3, [pc, #408]	; (8012b28 <Update_Blink+0x5f4>)
 801298e:	819a      	strh	r2, [r3, #12]
      break;
 8012990:	f000 bcc5 	b.w	801331e <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012994:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012998:	4619      	mov	r1, r3
 801299a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801299e:	f7fb f9b1 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80129a2:	4b66      	ldr	r3, [pc, #408]	; (8012b3c <Update_Blink+0x608>)
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	b2d8      	uxtb	r0, r3
 80129a8:	89bb      	ldrh	r3, [r7, #12]
 80129aa:	4a67      	ldr	r2, [pc, #412]	; (8012b48 <Update_Blink+0x614>)
 80129ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	3b03      	subs	r3, #3
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	b219      	sxth	r1, r3
 80129b8:	231e      	movs	r3, #30
 80129ba:	9301      	str	r3, [sp, #4]
 80129bc:	2302      	movs	r3, #2
 80129be:	9300      	str	r3, [sp, #0]
 80129c0:	230b      	movs	r3, #11
 80129c2:	22e1      	movs	r2, #225	; 0xe1
 80129c4:	f7fb fa8c 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 80129c8:	89bb      	ldrh	r3, [r7, #12]
 80129ca:	4a5f      	ldr	r2, [pc, #380]	; (8012b48 <Update_Blink+0x614>)
 80129cc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80129d0:	4b5a      	ldr	r3, [pc, #360]	; (8012b3c <Update_Blink+0x608>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	b2da      	uxtb	r2, r3
 80129d6:	4b5d      	ldr	r3, [pc, #372]	; (8012b4c <Update_Blink+0x618>)
 80129d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129dc:	00db      	lsls	r3, r3, #3
 80129de:	495c      	ldr	r1, [pc, #368]	; (8012b50 <Update_Blink+0x61c>)
 80129e0:	440b      	add	r3, r1
 80129e2:	21e1      	movs	r1, #225	; 0xe1
 80129e4:	f7fb f9a6 	bl	800dd34 <DispStr>
      break;
 80129e8:	f000 bc99 	b.w	801331e <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 80129ec:	4b53      	ldr	r3, [pc, #332]	; (8012b3c <Update_Blink+0x608>)
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d009      	beq.n	8012a0a <Update_Blink+0x4d6>
 80129f6:	4b4c      	ldr	r3, [pc, #304]	; (8012b28 <Update_Blink+0x5f4>)
 80129f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80129fc:	f043 0301 	orr.w	r3, r3, #1
 8012a00:	b21a      	sxth	r2, r3
 8012a02:	4b49      	ldr	r3, [pc, #292]	; (8012b28 <Update_Blink+0x5f4>)
 8012a04:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012a06:	f000 bc8a 	b.w	801331e <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 8012a0a:	4b47      	ldr	r3, [pc, #284]	; (8012b28 <Update_Blink+0x5f4>)
 8012a0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012a10:	f023 0301 	bic.w	r3, r3, #1
 8012a14:	b21a      	sxth	r2, r3
 8012a16:	4b44      	ldr	r3, [pc, #272]	; (8012b28 <Update_Blink+0x5f4>)
 8012a18:	81da      	strh	r2, [r3, #14]
      break;
 8012a1a:	f000 bc80 	b.w	801331e <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012a1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012a22:	4619      	mov	r1, r3
 8012a24:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012a28:	f7fb f96c 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012a2c:	4b43      	ldr	r3, [pc, #268]	; (8012b3c <Update_Blink+0x608>)
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	b2d8      	uxtb	r0, r3
 8012a32:	23f8      	movs	r3, #248	; 0xf8
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	3b03      	subs	r3, #3
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	b219      	sxth	r1, r3
 8012a3c:	2342      	movs	r3, #66	; 0x42
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	2300      	movs	r3, #0
 8012a42:	9300      	str	r3, [sp, #0]
 8012a44:	230b      	movs	r3, #11
 8012a46:	2203      	movs	r2, #3
 8012a48:	f7fb fa4a 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012a4c:	20f8      	movs	r0, #248	; 0xf8
 8012a4e:	4b3b      	ldr	r3, [pc, #236]	; (8012b3c <Update_Blink+0x608>)
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	b2da      	uxtb	r2, r3
 8012a54:	4b3f      	ldr	r3, [pc, #252]	; (8012b54 <Update_Blink+0x620>)
 8012a56:	2103      	movs	r1, #3
 8012a58:	f7fb f96c 	bl	800dd34 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012a5c:	23f8      	movs	r3, #248	; 0xf8
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	3336      	adds	r3, #54	; 0x36
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	b218      	sxth	r0, r3
 8012a66:	4b35      	ldr	r3, [pc, #212]	; (8012b3c <Update_Blink+0x608>)
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	b2da      	uxtb	r2, r3
 8012a6c:	4b37      	ldr	r3, [pc, #220]	; (8012b4c <Update_Blink+0x618>)
 8012a6e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012a72:	4619      	mov	r1, r3
 8012a74:	460b      	mov	r3, r1
 8012a76:	005b      	lsls	r3, r3, #1
 8012a78:	440b      	add	r3, r1
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	4936      	ldr	r1, [pc, #216]	; (8012b58 <Update_Blink+0x624>)
 8012a7e:	440b      	add	r3, r1
 8012a80:	2103      	movs	r1, #3
 8012a82:	f7fb f957 	bl	800dd34 <DispStr>
      break;
 8012a86:	f000 bc4a 	b.w	801331e <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012a8a:	89bb      	ldrh	r3, [r7, #12]
 8012a8c:	2b0a      	cmp	r3, #10
 8012a8e:	d101      	bne.n	8012a94 <Update_Blink+0x560>
 8012a90:	2308      	movs	r3, #8
 8012a92:	e000      	b.n	8012a96 <Update_Blink+0x562>
 8012a94:	2309      	movs	r3, #9
 8012a96:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012a98:	4b28      	ldr	r3, [pc, #160]	; (8012b3c <Update_Blink+0x608>)
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00b      	beq.n	8012aba <Update_Blink+0x586>
 8012aa2:	4a21      	ldr	r2, [pc, #132]	; (8012b28 <Update_Blink+0x5f4>)
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012aaa:	f043 0301 	orr.w	r3, r3, #1
 8012aae:	b219      	sxth	r1, r3
 8012ab0:	4a1d      	ldr	r2, [pc, #116]	; (8012b28 <Update_Blink+0x5f4>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012ab8:	e00a      	b.n	8012ad0 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012aba:	4a1b      	ldr	r2, [pc, #108]	; (8012b28 <Update_Blink+0x5f4>)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ac2:	f023 0301 	bic.w	r3, r3, #1
 8012ac6:	b219      	sxth	r1, r3
 8012ac8:	4a17      	ldr	r2, [pc, #92]	; (8012b28 <Update_Blink+0x5f4>)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012ad0:	4b15      	ldr	r3, [pc, #84]	; (8012b28 <Update_Blink+0x5f4>)
 8012ad2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4b13      	ldr	r3, [pc, #76]	; (8012b28 <Update_Blink+0x5f4>)
 8012ada:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012ae2:	4b1a      	ldr	r3, [pc, #104]	; (8012b4c <Update_Blink+0x618>)
 8012ae4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ae8:	461a      	mov	r2, r3
 8012aea:	4b1c      	ldr	r3, [pc, #112]	; (8012b5c <Update_Blink+0x628>)
 8012aec:	5c9b      	ldrb	r3, [r3, r2]
 8012aee:	461c      	mov	r4, r3
 8012af0:	4b16      	ldr	r3, [pc, #88]	; (8012b4c <Update_Blink+0x618>)
 8012af2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012af6:	461a      	mov	r2, r3
 8012af8:	4b19      	ldr	r3, [pc, #100]	; (8012b60 <Update_Blink+0x62c>)
 8012afa:	5c9b      	ldrb	r3, [r3, r2]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7ff f8ed 	bl	8011cdc <Exp>
 8012b02:	4603      	mov	r3, r0
 8012b04:	fb03 f204 	mul.w	r2, r3, r4
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	fb02 f303 	mul.w	r3, r2, r3
 8012b0e:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	db28      	blt.n	8012b68 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012b16:	2301      	movs	r3, #1
 8012b18:	9300      	str	r3, [sp, #0]
 8012b1a:	2303      	movs	r3, #3
 8012b1c:	4a11      	ldr	r2, [pc, #68]	; (8012b64 <Update_Blink+0x630>)
 8012b1e:	6879      	ldr	r1, [r7, #4]
 8012b20:	4805      	ldr	r0, [pc, #20]	; (8012b38 <Update_Blink+0x604>)
 8012b22:	f7fe ffdf 	bl	8011ae4 <Value2Str>
 8012b26:	e027      	b.n	8012b78 <Update_Blink+0x644>
 8012b28:	20000140 	.word	0x20000140
 8012b2c:	08002130 	.word	0x08002130
 8012b30:	08002108 	.word	0x08002108
 8012b34:	08001d00 	.word	0x08001d00
 8012b38:	2000283c 	.word	0x2000283c
 8012b3c:	2000077c 	.word	0x2000077c
 8012b40:	08000960 	.word	0x08000960
 8012b44:	08000964 	.word	0x08000964
 8012b48:	0800215c 	.word	0x0800215c
 8012b4c:	20000298 	.word	0x20000298
 8012b50:	200001d0 	.word	0x200001d0
 8012b54:	08000970 	.word	0x08000970
 8012b58:	08001c4c 	.word	0x08001c4c
 8012b5c:	0800211c 	.word	0x0800211c
 8012b60:	080020f4 	.word	0x080020f4
 8012b64:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012b68:	2300      	movs	r3, #0
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	2303      	movs	r3, #3
 8012b6e:	4aa3      	ldr	r2, [pc, #652]	; (8012dfc <Update_Blink+0x8c8>)
 8012b70:	6879      	ldr	r1, [r7, #4]
 8012b72:	48a3      	ldr	r0, [pc, #652]	; (8012e00 <Update_Blink+0x8cc>)
 8012b74:	f7fe ffb6 	bl	8011ae4 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012b78:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012b82:	f7fb f8bf 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012b86:	4b9f      	ldr	r3, [pc, #636]	; (8012e04 <Update_Blink+0x8d0>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	b2d8      	uxtb	r0, r3
 8012b8c:	2307      	movs	r3, #7
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	3b03      	subs	r3, #3
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	b219      	sxth	r1, r3
 8012b96:	2336      	movs	r3, #54	; 0x36
 8012b98:	9301      	str	r3, [sp, #4]
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	9300      	str	r3, [sp, #0]
 8012b9e:	230b      	movs	r3, #11
 8012ba0:	2203      	movs	r2, #3
 8012ba2:	f7fb f99d 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8012ba6:	2007      	movs	r0, #7
 8012ba8:	4b96      	ldr	r3, [pc, #600]	; (8012e04 <Update_Blink+0x8d0>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	b2db      	uxtb	r3, r3
 8012bae:	3310      	adds	r3, #16
 8012bb0:	b2da      	uxtb	r2, r3
 8012bb2:	4b95      	ldr	r3, [pc, #596]	; (8012e08 <Update_Blink+0x8d4>)
 8012bb4:	2103      	movs	r1, #3
 8012bb6:	f7fb f8bd 	bl	800dd34 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012bba:	2307      	movs	r3, #7
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	3306      	adds	r3, #6
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	b218      	sxth	r0, r3
 8012bc4:	4b8f      	ldr	r3, [pc, #572]	; (8012e04 <Update_Blink+0x8d0>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	b2da      	uxtb	r2, r3
 8012bca:	4b90      	ldr	r3, [pc, #576]	; (8012e0c <Update_Blink+0x8d8>)
 8012bcc:	2103      	movs	r1, #3
 8012bce:	f7fb f8b1 	bl	800dd34 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012bd2:	2307      	movs	r3, #7
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	3312      	adds	r3, #18
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	b218      	sxth	r0, r3
 8012bdc:	4b89      	ldr	r3, [pc, #548]	; (8012e04 <Update_Blink+0x8d0>)
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	4b87      	ldr	r3, [pc, #540]	; (8012e00 <Update_Blink+0x8cc>)
 8012be4:	2103      	movs	r1, #3
 8012be6:	f7fb f8a5 	bl	800dd34 <DispStr>
      break;
 8012bea:	e398      	b.n	801331e <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012bec:	4b85      	ldr	r3, [pc, #532]	; (8012e04 <Update_Blink+0x8d0>)
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d008      	beq.n	8012c08 <Update_Blink+0x6d4>
 8012bf6:	4b86      	ldr	r3, [pc, #536]	; (8012e10 <Update_Blink+0x8dc>)
 8012bf8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012bfc:	f043 0301 	orr.w	r3, r3, #1
 8012c00:	b21a      	sxth	r2, r3
 8012c02:	4b83      	ldr	r3, [pc, #524]	; (8012e10 <Update_Blink+0x8dc>)
 8012c04:	821a      	strh	r2, [r3, #16]
 8012c06:	e007      	b.n	8012c18 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012c08:	4b81      	ldr	r3, [pc, #516]	; (8012e10 <Update_Blink+0x8dc>)
 8012c0a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012c0e:	f023 0301 	bic.w	r3, r3, #1
 8012c12:	b21a      	sxth	r2, r3
 8012c14:	4b7e      	ldr	r3, [pc, #504]	; (8012e10 <Update_Blink+0x8dc>)
 8012c16:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012c18:	4b7a      	ldr	r3, [pc, #488]	; (8012e04 <Update_Blink+0x8d0>)
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d008      	beq.n	8012c34 <Update_Blink+0x700>
 8012c22:	4b7b      	ldr	r3, [pc, #492]	; (8012e10 <Update_Blink+0x8dc>)
 8012c24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012c28:	f043 0301 	orr.w	r3, r3, #1
 8012c2c:	b21a      	sxth	r2, r3
 8012c2e:	4b78      	ldr	r3, [pc, #480]	; (8012e10 <Update_Blink+0x8dc>)
 8012c30:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012c32:	e374      	b.n	801331e <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012c34:	4b76      	ldr	r3, [pc, #472]	; (8012e10 <Update_Blink+0x8dc>)
 8012c36:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012c3a:	f023 0301 	bic.w	r3, r3, #1
 8012c3e:	b21a      	sxth	r2, r3
 8012c40:	4b73      	ldr	r3, [pc, #460]	; (8012e10 <Update_Blink+0x8dc>)
 8012c42:	825a      	strh	r2, [r3, #18]
      break;
 8012c44:	e36b      	b.n	801331e <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012c46:	4b73      	ldr	r3, [pc, #460]	; (8012e14 <Update_Blink+0x8e0>)
 8012c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	f003 0301 	and.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f040 8362 	bne.w	801331c <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012c58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c62:	f7fb f84f 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012c66:	4b67      	ldr	r3, [pc, #412]	; (8012e04 <Update_Blink+0x8d0>)
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	b2d8      	uxtb	r0, r3
 8012c6c:	89bb      	ldrh	r3, [r7, #12]
 8012c6e:	4a6a      	ldr	r2, [pc, #424]	; (8012e18 <Update_Blink+0x8e4>)
 8012c70:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	3b03      	subs	r3, #3
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	b219      	sxth	r1, r3
 8012c7c:	2318      	movs	r3, #24
 8012c7e:	9301      	str	r3, [sp, #4]
 8012c80:	2301      	movs	r3, #1
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	230b      	movs	r3, #11
 8012c86:	22e1      	movs	r2, #225	; 0xe1
 8012c88:	f7fb f92a 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012c8c:	89bb      	ldrh	r3, [r7, #12]
 8012c8e:	4a62      	ldr	r2, [pc, #392]	; (8012e18 <Update_Blink+0x8e4>)
 8012c90:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012c94:	4b5b      	ldr	r3, [pc, #364]	; (8012e04 <Update_Blink+0x8d0>)
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	21e1      	movs	r1, #225	; 0xe1
 8012c9e:	f7fb f849 	bl	800dd34 <DispStr>
      }
      break;
 8012ca2:	e33b      	b.n	801331c <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012ca4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ca8:	4619      	mov	r1, r3
 8012caa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012cae:	f7fb f829 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012cb2:	4b54      	ldr	r3, [pc, #336]	; (8012e04 <Update_Blink+0x8d0>)
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	b2d8      	uxtb	r0, r3
 8012cb8:	23dd      	movs	r3, #221	; 0xdd
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	3b03      	subs	r3, #3
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	b219      	sxth	r1, r3
 8012cc2:	2330      	movs	r3, #48	; 0x30
 8012cc4:	9301      	str	r3, [sp, #4]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	9300      	str	r3, [sp, #0]
 8012cca:	230b      	movs	r3, #11
 8012ccc:	22e1      	movs	r2, #225	; 0xe1
 8012cce:	f7fb f907 	bl	800dee0 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012cd2:	20dd      	movs	r0, #221	; 0xdd
 8012cd4:	4b4b      	ldr	r3, [pc, #300]	; (8012e04 <Update_Blink+0x8d0>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	3310      	adds	r3, #16
 8012cdc:	b2da      	uxtb	r2, r3
 8012cde:	4b4f      	ldr	r3, [pc, #316]	; (8012e1c <Update_Blink+0x8e8>)
 8012ce0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <Update_Blink+0x7b8>
 8012ce8:	4b4d      	ldr	r3, [pc, #308]	; (8012e20 <Update_Blink+0x8ec>)
 8012cea:	e000      	b.n	8012cee <Update_Blink+0x7ba>
 8012cec:	4b4d      	ldr	r3, [pc, #308]	; (8012e24 <Update_Blink+0x8f0>)
 8012cee:	21e1      	movs	r1, #225	; 0xe1
 8012cf0:	f7fb fa88 	bl	800e204 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012cf4:	4b49      	ldr	r3, [pc, #292]	; (8012e1c <Update_Blink+0x8e8>)
 8012cf6:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012cfa:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012cfc:	89fb      	ldrh	r3, [r7, #14]
 8012cfe:	4a4a      	ldr	r2, [pc, #296]	; (8012e28 <Update_Blink+0x8f4>)
 8012d00:	5cd3      	ldrb	r3, [r2, r3]
 8012d02:	461c      	mov	r4, r3
 8012d04:	89fb      	ldrh	r3, [r7, #14]
 8012d06:	4a49      	ldr	r2, [pc, #292]	; (8012e2c <Update_Blink+0x8f8>)
 8012d08:	5cd3      	ldrb	r3, [r2, r3]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fe ffe6 	bl	8011cdc <Exp>
 8012d10:	4603      	mov	r3, r0
 8012d12:	fb03 f204 	mul.w	r2, r3, r4
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	fb02 f303 	mul.w	r3, r2, r3
 8012d1c:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012d1e:	2301      	movs	r3, #1
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	2302      	movs	r3, #2
 8012d24:	4a42      	ldr	r2, [pc, #264]	; (8012e30 <Update_Blink+0x8fc>)
 8012d26:	6879      	ldr	r1, [r7, #4]
 8012d28:	4835      	ldr	r0, [pc, #212]	; (8012e00 <Update_Blink+0x8cc>)
 8012d2a:	f7fe fedb 	bl	8011ae4 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012d2e:	23e7      	movs	r3, #231	; 0xe7
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	3309      	adds	r3, #9
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	b218      	sxth	r0, r3
 8012d38:	4b32      	ldr	r3, [pc, #200]	; (8012e04 <Update_Blink+0x8d0>)
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	4b3d      	ldr	r3, [pc, #244]	; (8012e34 <Update_Blink+0x900>)
 8012d40:	21e1      	movs	r1, #225	; 0xe1
 8012d42:	f7fa fff7 	bl	800dd34 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012d46:	20e7      	movs	r0, #231	; 0xe7
 8012d48:	4b2e      	ldr	r3, [pc, #184]	; (8012e04 <Update_Blink+0x8d0>)
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	3310      	adds	r3, #16
 8012d50:	b2da      	uxtb	r2, r3
 8012d52:	4b39      	ldr	r3, [pc, #228]	; (8012e38 <Update_Blink+0x904>)
 8012d54:	21e1      	movs	r1, #225	; 0xe1
 8012d56:	f7fb fa55 	bl	800e204 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012d5a:	23e7      	movs	r3, #231	; 0xe7
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	3309      	adds	r3, #9
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	b218      	sxth	r0, r3
 8012d64:	4b27      	ldr	r3, [pc, #156]	; (8012e04 <Update_Blink+0x8d0>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	4b25      	ldr	r3, [pc, #148]	; (8012e00 <Update_Blink+0x8cc>)
 8012d6c:	21e1      	movs	r1, #225	; 0xe1
 8012d6e:	f7fa ffe1 	bl	800dd34 <DispStr>
      break;
 8012d72:	e2d4      	b.n	801331e <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012d74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012d78:	4619      	mov	r1, r3
 8012d7a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d7e:	f7fa ffc1 	bl	800dd04 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012d82:	20cf      	movs	r0, #207	; 0xcf
 8012d84:	4b25      	ldr	r3, [pc, #148]	; (8012e1c <Update_Blink+0x8e8>)
 8012d86:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d001      	beq.n	8012d92 <Update_Blink+0x85e>
 8012d8e:	4b2b      	ldr	r3, [pc, #172]	; (8012e3c <Update_Blink+0x908>)
 8012d90:	e000      	b.n	8012d94 <Update_Blink+0x860>
 8012d92:	4b2b      	ldr	r3, [pc, #172]	; (8012e40 <Update_Blink+0x90c>)
 8012d94:	2210      	movs	r2, #16
 8012d96:	21e1      	movs	r1, #225	; 0xe1
 8012d98:	f7fb fa34 	bl	800e204 <DispStr10x14>
      break;
 8012d9c:	e2bf      	b.n	801331e <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012d9e:	4b19      	ldr	r3, [pc, #100]	; (8012e04 <Update_Blink+0x8d0>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d008      	beq.n	8012dba <Update_Blink+0x886>
 8012da8:	4b19      	ldr	r3, [pc, #100]	; (8012e10 <Update_Blink+0x8dc>)
 8012daa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012dae:	f043 0301 	orr.w	r3, r3, #1
 8012db2:	b21a      	sxth	r2, r3
 8012db4:	4b16      	ldr	r3, [pc, #88]	; (8012e10 <Update_Blink+0x8dc>)
 8012db6:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012db8:	e2b1      	b.n	801331e <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012dba:	4b15      	ldr	r3, [pc, #84]	; (8012e10 <Update_Blink+0x8dc>)
 8012dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012dc0:	f023 0301 	bic.w	r3, r3, #1
 8012dc4:	b21a      	sxth	r2, r3
 8012dc6:	4b12      	ldr	r3, [pc, #72]	; (8012e10 <Update_Blink+0x8dc>)
 8012dc8:	811a      	strh	r2, [r3, #8]
      break;
 8012dca:	e2a8      	b.n	801331e <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012dcc:	4b0d      	ldr	r3, [pc, #52]	; (8012e04 <Update_Blink+0x8d0>)
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d008      	beq.n	8012de8 <Update_Blink+0x8b4>
 8012dd6:	4b0e      	ldr	r3, [pc, #56]	; (8012e10 <Update_Blink+0x8dc>)
 8012dd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012ddc:	f043 0301 	orr.w	r3, r3, #1
 8012de0:	b21a      	sxth	r2, r3
 8012de2:	4b0b      	ldr	r3, [pc, #44]	; (8012e10 <Update_Blink+0x8dc>)
 8012de4:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012de6:	e29a      	b.n	801331e <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012de8:	4b09      	ldr	r3, [pc, #36]	; (8012e10 <Update_Blink+0x8dc>)
 8012dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012dee:	f023 0301 	bic.w	r3, r3, #1
 8012df2:	b21a      	sxth	r2, r3
 8012df4:	4b06      	ldr	r3, [pc, #24]	; (8012e10 <Update_Blink+0x8dc>)
 8012df6:	811a      	strh	r2, [r3, #8]
      break;
 8012df8:	e291      	b.n	801331e <Update_Blink+0xdea>
 8012dfa:	bf00      	nop
 8012dfc:	08001ce8 	.word	0x08001ce8
 8012e00:	2000283c 	.word	0x2000283c
 8012e04:	2000077c 	.word	0x2000077c
 8012e08:	08000960 	.word	0x08000960
 8012e0c:	0800097c 	.word	0x0800097c
 8012e10:	20000140 	.word	0x20000140
 8012e14:	200007a0 	.word	0x200007a0
 8012e18:	0800215c 	.word	0x0800215c
 8012e1c:	20000298 	.word	0x20000298
 8012e20:	08000988 	.word	0x08000988
 8012e24:	0800098c 	.word	0x0800098c
 8012e28:	08002130 	.word	0x08002130
 8012e2c:	08002108 	.word	0x08002108
 8012e30:	08001d00 	.word	0x08001d00
 8012e34:	08000990 	.word	0x08000990
 8012e38:	08000998 	.word	0x08000998
 8012e3c:	0800099c 	.word	0x0800099c
 8012e40:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012e44:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012e48:	4619      	mov	r1, r3
 8012e4a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e4e:	f7fa ff59 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012e52:	4b93      	ldr	r3, [pc, #588]	; (80130a0 <Update_Blink+0xb6c>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	b2d8      	uxtb	r0, r3
 8012e58:	89bb      	ldrh	r3, [r7, #12]
 8012e5a:	4a92      	ldr	r2, [pc, #584]	; (80130a4 <Update_Blink+0xb70>)
 8012e5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	3b03      	subs	r3, #3
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	b219      	sxth	r1, r3
 8012e68:	231e      	movs	r3, #30
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	230b      	movs	r3, #11
 8012e72:	22e1      	movs	r2, #225	; 0xe1
 8012e74:	f7fb f834 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012e78:	89bb      	ldrh	r3, [r7, #12]
 8012e7a:	4a8a      	ldr	r2, [pc, #552]	; (80130a4 <Update_Blink+0xb70>)
 8012e7c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e80:	4b87      	ldr	r3, [pc, #540]	; (80130a0 <Update_Blink+0xb6c>)
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	b2da      	uxtb	r2, r3
 8012e86:	4b88      	ldr	r3, [pc, #544]	; (80130a8 <Update_Blink+0xb74>)
 8012e88:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d00a      	beq.n	8012ea6 <Update_Blink+0x972>
 8012e90:	4b85      	ldr	r3, [pc, #532]	; (80130a8 <Update_Blink+0xb74>)
 8012e92:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012e96:	4619      	mov	r1, r3
 8012e98:	460b      	mov	r3, r1
 8012e9a:	005b      	lsls	r3, r3, #1
 8012e9c:	440b      	add	r3, r1
 8012e9e:	005b      	lsls	r3, r3, #1
 8012ea0:	4982      	ldr	r1, [pc, #520]	; (80130ac <Update_Blink+0xb78>)
 8012ea2:	440b      	add	r3, r1
 8012ea4:	e000      	b.n	8012ea8 <Update_Blink+0x974>
 8012ea6:	4b82      	ldr	r3, [pc, #520]	; (80130b0 <Update_Blink+0xb7c>)
 8012ea8:	21e1      	movs	r1, #225	; 0xe1
 8012eaa:	f7fa ff43 	bl	800dd34 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012eae:	4b81      	ldr	r3, [pc, #516]	; (80130b4 <Update_Blink+0xb80>)
 8012eb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012eb4:	f023 0301 	bic.w	r3, r3, #1
 8012eb8:	b21a      	sxth	r2, r3
 8012eba:	4b7e      	ldr	r3, [pc, #504]	; (80130b4 <Update_Blink+0xb80>)
 8012ebc:	805a      	strh	r2, [r3, #2]
      break;
 8012ebe:	e22e      	b.n	801331e <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012ec0:	4b77      	ldr	r3, [pc, #476]	; (80130a0 <Update_Blink+0xb6c>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d008      	beq.n	8012edc <Update_Blink+0x9a8>
 8012eca:	4b7a      	ldr	r3, [pc, #488]	; (80130b4 <Update_Blink+0xb80>)
 8012ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ed0:	f043 0301 	orr.w	r3, r3, #1
 8012ed4:	b21a      	sxth	r2, r3
 8012ed6:	4b77      	ldr	r3, [pc, #476]	; (80130b4 <Update_Blink+0xb80>)
 8012ed8:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012eda:	e220      	b.n	801331e <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012edc:	4b75      	ldr	r3, [pc, #468]	; (80130b4 <Update_Blink+0xb80>)
 8012ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ee2:	f023 0301 	bic.w	r3, r3, #1
 8012ee6:	b21a      	sxth	r2, r3
 8012ee8:	4b72      	ldr	r3, [pc, #456]	; (80130b4 <Update_Blink+0xb80>)
 8012eea:	805a      	strh	r2, [r3, #2]
      break;
 8012eec:	e217      	b.n	801331e <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012eee:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ef8:	f7fa ff04 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012efc:	4b68      	ldr	r3, [pc, #416]	; (80130a0 <Update_Blink+0xb6c>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	b2d8      	uxtb	r0, r3
 8012f02:	89bb      	ldrh	r3, [r7, #12]
 8012f04:	4a67      	ldr	r2, [pc, #412]	; (80130a4 <Update_Blink+0xb70>)
 8012f06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	3b03      	subs	r3, #3
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	b219      	sxth	r1, r3
 8012f12:	231e      	movs	r3, #30
 8012f14:	9301      	str	r3, [sp, #4]
 8012f16:	2301      	movs	r3, #1
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	230b      	movs	r3, #11
 8012f1c:	22e1      	movs	r2, #225	; 0xe1
 8012f1e:	f7fa ffdf 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012f22:	89bb      	ldrh	r3, [r7, #12]
 8012f24:	4a5f      	ldr	r2, [pc, #380]	; (80130a4 <Update_Blink+0xb70>)
 8012f26:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f2a:	4b5d      	ldr	r3, [pc, #372]	; (80130a0 <Update_Blink+0xb6c>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	b2da      	uxtb	r2, r3
 8012f30:	4b5d      	ldr	r3, [pc, #372]	; (80130a8 <Update_Blink+0xb74>)
 8012f32:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d00a      	beq.n	8012f50 <Update_Blink+0xa1c>
 8012f3a:	4b5b      	ldr	r3, [pc, #364]	; (80130a8 <Update_Blink+0xb74>)
 8012f3c:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012f40:	4619      	mov	r1, r3
 8012f42:	460b      	mov	r3, r1
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	440b      	add	r3, r1
 8012f48:	005b      	lsls	r3, r3, #1
 8012f4a:	4958      	ldr	r1, [pc, #352]	; (80130ac <Update_Blink+0xb78>)
 8012f4c:	440b      	add	r3, r1
 8012f4e:	e000      	b.n	8012f52 <Update_Blink+0xa1e>
 8012f50:	4b57      	ldr	r3, [pc, #348]	; (80130b0 <Update_Blink+0xb7c>)
 8012f52:	21e1      	movs	r1, #225	; 0xe1
 8012f54:	f7fa feee 	bl	800dd34 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012f58:	4b56      	ldr	r3, [pc, #344]	; (80130b4 <Update_Blink+0xb80>)
 8012f5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012f5e:	f023 0301 	bic.w	r3, r3, #1
 8012f62:	b21a      	sxth	r2, r3
 8012f64:	4b53      	ldr	r3, [pc, #332]	; (80130b4 <Update_Blink+0xb80>)
 8012f66:	805a      	strh	r2, [r3, #2]
      break;
 8012f68:	e1d9      	b.n	801331e <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f6a:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f6e:	4619      	mov	r1, r3
 8012f70:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f74:	f7fa fec6 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012f78:	4b49      	ldr	r3, [pc, #292]	; (80130a0 <Update_Blink+0xb6c>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	b2d8      	uxtb	r0, r3
 8012f7e:	2307      	movs	r3, #7
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	3b03      	subs	r3, #3
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	b219      	sxth	r1, r3
 8012f88:	2336      	movs	r3, #54	; 0x36
 8012f8a:	9301      	str	r3, [sp, #4]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	9300      	str	r3, [sp, #0]
 8012f90:	230b      	movs	r3, #11
 8012f92:	2203      	movs	r2, #3
 8012f94:	f7fa ffa4 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012f98:	89bb      	ldrh	r3, [r7, #12]
 8012f9a:	4a42      	ldr	r2, [pc, #264]	; (80130a4 <Update_Blink+0xb70>)
 8012f9c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012fa0:	4b3f      	ldr	r3, [pc, #252]	; (80130a0 <Update_Blink+0xb6c>)
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	4b44      	ldr	r3, [pc, #272]	; (80130b8 <Update_Blink+0xb84>)
 8012fa8:	2103      	movs	r1, #3
 8012faa:	f7fa fec3 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012fae:	89bb      	ldrh	r3, [r7, #12]
 8012fb0:	4a3c      	ldr	r2, [pc, #240]	; (80130a4 <Update_Blink+0xb70>)
 8012fb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	3318      	adds	r3, #24
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	b218      	sxth	r0, r3
 8012fbe:	4b38      	ldr	r3, [pc, #224]	; (80130a0 <Update_Blink+0xb6c>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	4b3d      	ldr	r3, [pc, #244]	; (80130bc <Update_Blink+0xb88>)
 8012fc6:	2103      	movs	r1, #3
 8012fc8:	f7fa feb4 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012fcc:	89bb      	ldrh	r3, [r7, #12]
 8012fce:	4a35      	ldr	r2, [pc, #212]	; (80130a4 <Update_Blink+0xb70>)
 8012fd0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	3318      	adds	r3, #24
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	b218      	sxth	r0, r3
 8012fdc:	4b30      	ldr	r3, [pc, #192]	; (80130a0 <Update_Blink+0xb6c>)
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	89bb      	ldrh	r3, [r7, #12]
 8012fe4:	4930      	ldr	r1, [pc, #192]	; (80130a8 <Update_Blink+0xb74>)
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	440b      	add	r3, r1
 8012fea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	005b      	lsls	r3, r3, #1
 8012ff4:	440b      	add	r3, r1
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4931      	ldr	r1, [pc, #196]	; (80130c0 <Update_Blink+0xb8c>)
 8012ffa:	440b      	add	r3, r1
 8012ffc:	2103      	movs	r1, #3
 8012ffe:	f7fa fe99 	bl	800dd34 <DispStr>
      break;
 8013002:	e18c      	b.n	801331e <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8013004:	f240 531f 	movw	r3, #1311	; 0x51f
 8013008:	4619      	mov	r1, r3
 801300a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801300e:	f7fa fe79 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8013012:	4b23      	ldr	r3, [pc, #140]	; (80130a0 <Update_Blink+0xb6c>)
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	b2d8      	uxtb	r0, r3
 8013018:	2307      	movs	r3, #7
 801301a:	b29b      	uxth	r3, r3
 801301c:	3b03      	subs	r3, #3
 801301e:	b29b      	uxth	r3, r3
 8013020:	b219      	sxth	r1, r3
 8013022:	2336      	movs	r3, #54	; 0x36
 8013024:	9301      	str	r3, [sp, #4]
 8013026:	2300      	movs	r3, #0
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	230b      	movs	r3, #11
 801302c:	2203      	movs	r2, #3
 801302e:	f7fa ff57 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8013032:	89bb      	ldrh	r3, [r7, #12]
 8013034:	4a1b      	ldr	r2, [pc, #108]	; (80130a4 <Update_Blink+0xb70>)
 8013036:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801303a:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <Update_Blink+0xb6c>)
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	b2da      	uxtb	r2, r3
 8013040:	4b1d      	ldr	r3, [pc, #116]	; (80130b8 <Update_Blink+0xb84>)
 8013042:	2103      	movs	r1, #3
 8013044:	f7fa fe76 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8013048:	89bb      	ldrh	r3, [r7, #12]
 801304a:	4a16      	ldr	r2, [pc, #88]	; (80130a4 <Update_Blink+0xb70>)
 801304c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013050:	b29b      	uxth	r3, r3
 8013052:	3318      	adds	r3, #24
 8013054:	b29b      	uxth	r3, r3
 8013056:	b218      	sxth	r0, r3
 8013058:	4b11      	ldr	r3, [pc, #68]	; (80130a0 <Update_Blink+0xb6c>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	b2da      	uxtb	r2, r3
 801305e:	4b17      	ldr	r3, [pc, #92]	; (80130bc <Update_Blink+0xb88>)
 8013060:	2103      	movs	r1, #3
 8013062:	f7fa fe67 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8013066:	89bb      	ldrh	r3, [r7, #12]
 8013068:	4a0e      	ldr	r2, [pc, #56]	; (80130a4 <Update_Blink+0xb70>)
 801306a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801306e:	b29b      	uxth	r3, r3
 8013070:	3318      	adds	r3, #24
 8013072:	b29b      	uxth	r3, r3
 8013074:	b218      	sxth	r0, r3
 8013076:	4b0a      	ldr	r3, [pc, #40]	; (80130a0 <Update_Blink+0xb6c>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	b2da      	uxtb	r2, r3
 801307c:	89bb      	ldrh	r3, [r7, #12]
 801307e:	490a      	ldr	r1, [pc, #40]	; (80130a8 <Update_Blink+0xb74>)
 8013080:	00db      	lsls	r3, r3, #3
 8013082:	440b      	add	r3, r1
 8013084:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013088:	4619      	mov	r1, r3
 801308a:	460b      	mov	r3, r1
 801308c:	005b      	lsls	r3, r3, #1
 801308e:	440b      	add	r3, r1
 8013090:	005b      	lsls	r3, r3, #1
 8013092:	490c      	ldr	r1, [pc, #48]	; (80130c4 <Update_Blink+0xb90>)
 8013094:	440b      	add	r3, r1
 8013096:	2103      	movs	r1, #3
 8013098:	f7fa fe4c 	bl	800dd34 <DispStr>
      break;
 801309c:	e13f      	b.n	801331e <Update_Blink+0xdea>
 801309e:	bf00      	nop
 80130a0:	2000077c 	.word	0x2000077c
 80130a4:	0800215c 	.word	0x0800215c
 80130a8:	20000298 	.word	0x20000298
 80130ac:	08001c88 	.word	0x08001c88
 80130b0:	08001cac 	.word	0x08001cac
 80130b4:	20000140 	.word	0x20000140
 80130b8:	080009a0 	.word	0x080009a0
 80130bc:	08000990 	.word	0x08000990
 80130c0:	08001d50 	.word	0x08001d50
 80130c4:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 80130c8:	f240 531f 	movw	r3, #1311	; 0x51f
 80130cc:	4619      	mov	r1, r3
 80130ce:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130d2:	f7fa fe17 	bl	800dd04 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 80130d6:	89bb      	ldrh	r3, [r7, #12]
 80130d8:	4a96      	ldr	r2, [pc, #600]	; (8013334 <Update_Blink+0xe00>)
 80130da:	00db      	lsls	r3, r3, #3
 80130dc:	4413      	add	r3, r2
 80130de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80130e2:	461a      	mov	r2, r3
 80130e4:	4613      	mov	r3, r2
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	4413      	add	r3, r2
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	4619      	mov	r1, r3
 80130ee:	89bb      	ldrh	r3, [r7, #12]
 80130f0:	4a90      	ldr	r2, [pc, #576]	; (8013334 <Update_Blink+0xe00>)
 80130f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80130f6:	2301      	movs	r3, #1
 80130f8:	9300      	str	r3, [sp, #0]
 80130fa:	2302      	movs	r3, #2
 80130fc:	488e      	ldr	r0, [pc, #568]	; (8013338 <Update_Blink+0xe04>)
 80130fe:	f7fe fcf1 	bl	8011ae4 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 8013102:	4b8e      	ldr	r3, [pc, #568]	; (801333c <Update_Blink+0xe08>)
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	b2d8      	uxtb	r0, r3
 8013108:	2307      	movs	r3, #7
 801310a:	b29b      	uxth	r3, r3
 801310c:	3b03      	subs	r3, #3
 801310e:	b29b      	uxth	r3, r3
 8013110:	b219      	sxth	r1, r3
 8013112:	2336      	movs	r3, #54	; 0x36
 8013114:	9301      	str	r3, [sp, #4]
 8013116:	2300      	movs	r3, #0
 8013118:	9300      	str	r3, [sp, #0]
 801311a:	230b      	movs	r3, #11
 801311c:	2203      	movs	r2, #3
 801311e:	f7fa fedf 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 8013122:	89bb      	ldrh	r3, [r7, #12]
 8013124:	4a86      	ldr	r2, [pc, #536]	; (8013340 <Update_Blink+0xe0c>)
 8013126:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801312a:	4b84      	ldr	r3, [pc, #528]	; (801333c <Update_Blink+0xe08>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	b2da      	uxtb	r2, r3
 8013130:	4b84      	ldr	r3, [pc, #528]	; (8013344 <Update_Blink+0xe10>)
 8013132:	2103      	movs	r1, #3
 8013134:	f7fa fdfe 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8013138:	89bb      	ldrh	r3, [r7, #12]
 801313a:	4a81      	ldr	r2, [pc, #516]	; (8013340 <Update_Blink+0xe0c>)
 801313c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013140:	b29b      	uxth	r3, r3
 8013142:	3324      	adds	r3, #36	; 0x24
 8013144:	b29b      	uxth	r3, r3
 8013146:	b218      	sxth	r0, r3
 8013148:	4b7c      	ldr	r3, [pc, #496]	; (801333c <Update_Blink+0xe08>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	b2da      	uxtb	r2, r3
 801314e:	4b7e      	ldr	r3, [pc, #504]	; (8013348 <Update_Blink+0xe14>)
 8013150:	2103      	movs	r1, #3
 8013152:	f7fa fdef 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 8013156:	89bb      	ldrh	r3, [r7, #12]
 8013158:	4a79      	ldr	r2, [pc, #484]	; (8013340 <Update_Blink+0xe0c>)
 801315a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801315e:	b29b      	uxth	r3, r3
 8013160:	3324      	adds	r3, #36	; 0x24
 8013162:	b29b      	uxth	r3, r3
 8013164:	b218      	sxth	r0, r3
 8013166:	4b75      	ldr	r3, [pc, #468]	; (801333c <Update_Blink+0xe08>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	b2da      	uxtb	r2, r3
 801316c:	4b72      	ldr	r3, [pc, #456]	; (8013338 <Update_Blink+0xe04>)
 801316e:	2103      	movs	r1, #3
 8013170:	f7fa fde0 	bl	800dd34 <DispStr>
      break;
 8013174:	e0d3      	b.n	801331e <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 8013176:	4b71      	ldr	r3, [pc, #452]	; (801333c <Update_Blink+0xe08>)
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d008      	beq.n	8013192 <Update_Blink+0xc5e>
 8013180:	4b72      	ldr	r3, [pc, #456]	; (801334c <Update_Blink+0xe18>)
 8013182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013186:	f043 0304 	orr.w	r3, r3, #4
 801318a:	b21a      	sxth	r2, r3
 801318c:	4b6f      	ldr	r3, [pc, #444]	; (801334c <Update_Blink+0xe18>)
 801318e:	801a      	strh	r2, [r3, #0]
 8013190:	e007      	b.n	80131a2 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8013192:	4b6e      	ldr	r3, [pc, #440]	; (801334c <Update_Blink+0xe18>)
 8013194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013198:	f023 0304 	bic.w	r3, r3, #4
 801319c:	b21a      	sxth	r2, r3
 801319e:	4b6b      	ldr	r3, [pc, #428]	; (801334c <Update_Blink+0xe18>)
 80131a0:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 80131a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80131a6:	4619      	mov	r1, r3
 80131a8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80131ac:	f7fa fdaa 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80131b0:	4b62      	ldr	r3, [pc, #392]	; (801333c <Update_Blink+0xe08>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	b2d8      	uxtb	r0, r3
 80131b6:	89bb      	ldrh	r3, [r7, #12]
 80131b8:	4a61      	ldr	r2, [pc, #388]	; (8013340 <Update_Blink+0xe0c>)
 80131ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131be:	b29b      	uxth	r3, r3
 80131c0:	3b03      	subs	r3, #3
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	b219      	sxth	r1, r3
 80131c6:	2336      	movs	r3, #54	; 0x36
 80131c8:	9301      	str	r3, [sp, #4]
 80131ca:	2300      	movs	r3, #0
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	230b      	movs	r3, #11
 80131d0:	2203      	movs	r2, #3
 80131d2:	f7fa fe85 	bl	800dee0 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80131d6:	89bb      	ldrh	r3, [r7, #12]
 80131d8:	4a59      	ldr	r2, [pc, #356]	; (8013340 <Update_Blink+0xe0c>)
 80131da:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80131de:	4b57      	ldr	r3, [pc, #348]	; (801333c <Update_Blink+0xe08>)
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	4b5a      	ldr	r3, [pc, #360]	; (8013350 <Update_Blink+0xe1c>)
 80131e6:	2103      	movs	r1, #3
 80131e8:	f7fa fda4 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80131ec:	89bb      	ldrh	r3, [r7, #12]
 80131ee:	4a54      	ldr	r2, [pc, #336]	; (8013340 <Update_Blink+0xe0c>)
 80131f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	3328      	adds	r3, #40	; 0x28
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	b218      	sxth	r0, r3
 80131fc:	4b4f      	ldr	r3, [pc, #316]	; (801333c <Update_Blink+0xe08>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	b2db      	uxtb	r3, r3
 8013202:	3310      	adds	r3, #16
 8013204:	b2da      	uxtb	r2, r3
 8013206:	4b53      	ldr	r3, [pc, #332]	; (8013354 <Update_Blink+0xe20>)
 8013208:	2103      	movs	r1, #3
 801320a:	f7fa fd93 	bl	800dd34 <DispStr>
      break;
 801320e:	e086      	b.n	801331e <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013210:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013214:	4619      	mov	r1, r3
 8013216:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801321a:	f7fa fd73 	bl	800dd04 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801321e:	4b47      	ldr	r3, [pc, #284]	; (801333c <Update_Blink+0xe08>)
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	b2d8      	uxtb	r0, r3
 8013224:	89bb      	ldrh	r3, [r7, #12]
 8013226:	4a46      	ldr	r2, [pc, #280]	; (8013340 <Update_Blink+0xe0c>)
 8013228:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801322c:	b29b      	uxth	r3, r3
 801322e:	3b03      	subs	r3, #3
 8013230:	b29b      	uxth	r3, r3
 8013232:	b219      	sxth	r1, r3
 8013234:	2336      	movs	r3, #54	; 0x36
 8013236:	9301      	str	r3, [sp, #4]
 8013238:	2300      	movs	r3, #0
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	230b      	movs	r3, #11
 801323e:	2203      	movs	r2, #3
 8013240:	f7fa fe4e 	bl	800dee0 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013244:	89bb      	ldrh	r3, [r7, #12]
 8013246:	4a3e      	ldr	r2, [pc, #248]	; (8013340 <Update_Blink+0xe0c>)
 8013248:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801324c:	4b3b      	ldr	r3, [pc, #236]	; (801333c <Update_Blink+0xe08>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	b2da      	uxtb	r2, r3
 8013252:	4b3f      	ldr	r3, [pc, #252]	; (8013350 <Update_Blink+0xe1c>)
 8013254:	2103      	movs	r1, #3
 8013256:	f7fa fd6d 	bl	800dd34 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801325a:	89bb      	ldrh	r3, [r7, #12]
 801325c:	4a38      	ldr	r2, [pc, #224]	; (8013340 <Update_Blink+0xe0c>)
 801325e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013262:	b29b      	uxth	r3, r3
 8013264:	3328      	adds	r3, #40	; 0x28
 8013266:	b29b      	uxth	r3, r3
 8013268:	b218      	sxth	r0, r3
 801326a:	4b34      	ldr	r3, [pc, #208]	; (801333c <Update_Blink+0xe08>)
 801326c:	781b      	ldrb	r3, [r3, #0]
 801326e:	b2db      	uxtb	r3, r3
 8013270:	3310      	adds	r3, #16
 8013272:	b2da      	uxtb	r2, r3
 8013274:	4b37      	ldr	r3, [pc, #220]	; (8013354 <Update_Blink+0xe20>)
 8013276:	2103      	movs	r1, #3
 8013278:	f7fa fd5c 	bl	800dd34 <DispStr>
      break;
 801327c:	e04f      	b.n	801331e <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 801327e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013282:	4619      	mov	r1, r3
 8013284:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013288:	f7fa fd3c 	bl	800dd04 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 801328c:	4b29      	ldr	r3, [pc, #164]	; (8013334 <Update_Blink+0xe00>)
 801328e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8013292:	4619      	mov	r1, r3
 8013294:	2301      	movs	r3, #1
 8013296:	9300      	str	r3, [sp, #0]
 8013298:	2302      	movs	r3, #2
 801329a:	4a2f      	ldr	r2, [pc, #188]	; (8013358 <Update_Blink+0xe24>)
 801329c:	4826      	ldr	r0, [pc, #152]	; (8013338 <Update_Blink+0xe04>)
 801329e:	f7fe fc21 	bl	8011ae4 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80132a2:	4b26      	ldr	r3, [pc, #152]	; (801333c <Update_Blink+0xe08>)
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	b2d8      	uxtb	r0, r3
 80132a8:	89bb      	ldrh	r3, [r7, #12]
 80132aa:	4a25      	ldr	r2, [pc, #148]	; (8013340 <Update_Blink+0xe0c>)
 80132ac:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	3b03      	subs	r3, #3
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	b219      	sxth	r1, r3
 80132b8:	2336      	movs	r3, #54	; 0x36
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	2300      	movs	r3, #0
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	230b      	movs	r3, #11
 80132c2:	2203      	movs	r2, #3
 80132c4:	f7fa fe0c 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80132c8:	89bb      	ldrh	r3, [r7, #12]
 80132ca:	4a1d      	ldr	r2, [pc, #116]	; (8013340 <Update_Blink+0xe0c>)
 80132cc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80132d0:	4b1a      	ldr	r3, [pc, #104]	; (801333c <Update_Blink+0xe08>)
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	b2da      	uxtb	r2, r3
 80132d6:	4b21      	ldr	r3, [pc, #132]	; (801335c <Update_Blink+0xe28>)
 80132d8:	2103      	movs	r1, #3
 80132da:	f7fa fd2b 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80132de:	89bb      	ldrh	r3, [r7, #12]
 80132e0:	4a17      	ldr	r2, [pc, #92]	; (8013340 <Update_Blink+0xe0c>)
 80132e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	3306      	adds	r3, #6
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	b218      	sxth	r0, r3
 80132ee:	4b13      	ldr	r3, [pc, #76]	; (801333c <Update_Blink+0xe08>)
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	b2da      	uxtb	r2, r3
 80132f4:	4b10      	ldr	r3, [pc, #64]	; (8013338 <Update_Blink+0xe04>)
 80132f6:	2103      	movs	r1, #3
 80132f8:	f7fa fd1c 	bl	800dd34 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80132fc:	89bb      	ldrh	r3, [r7, #12]
 80132fe:	4a10      	ldr	r2, [pc, #64]	; (8013340 <Update_Blink+0xe0c>)
 8013300:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013304:	b29b      	uxth	r3, r3
 8013306:	331e      	adds	r3, #30
 8013308:	b29b      	uxth	r3, r3
 801330a:	b218      	sxth	r0, r3
 801330c:	4b0b      	ldr	r3, [pc, #44]	; (801333c <Update_Blink+0xe08>)
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	b2da      	uxtb	r2, r3
 8013312:	4b13      	ldr	r3, [pc, #76]	; (8013360 <Update_Blink+0xe2c>)
 8013314:	2103      	movs	r1, #3
 8013316:	f7fa fd0d 	bl	800dd34 <DispStr>
      break;
 801331a:	e000      	b.n	801331e <Update_Blink+0xdea>
      break;
 801331c:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 801331e:	89bb      	ldrh	r3, [r7, #12]
 8013320:	2b03      	cmp	r3, #3
 8013322:	d002      	beq.n	801332a <Update_Blink+0xdf6>
 8013324:	4b09      	ldr	r3, [pc, #36]	; (801334c <Update_Blink+0xe18>)
 8013326:	2202      	movs	r2, #2
 8013328:	801a      	strh	r2, [r3, #0]
  }
}
 801332a:	bf00      	nop
 801332c:	3714      	adds	r7, #20
 801332e:	46bd      	mov	sp, r7
 8013330:	bd90      	pop	{r4, r7, pc}
 8013332:	bf00      	nop
 8013334:	20000298 	.word	0x20000298
 8013338:	2000283c 	.word	0x2000283c
 801333c:	2000077c 	.word	0x2000077c
 8013340:	0800215c 	.word	0x0800215c
 8013344:	080009a8 	.word	0x080009a8
 8013348:	080009b0 	.word	0x080009b0
 801334c:	20000140 	.word	0x20000140
 8013350:	080009b4 	.word	0x080009b4
 8013354:	080009c0 	.word	0x080009c0
 8013358:	20000548 	.word	0x20000548
 801335c:	080009c4 	.word	0x080009c4
 8013360:	080009c8 	.word	0x080009c8

08013364 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8013364:	b590      	push	{r4, r7, lr}
 8013366:	b089      	sub	sp, #36	; 0x24
 8013368:	af02      	add	r7, sp, #8
  long scale = 0;
 801336a:	2300      	movs	r3, #0
 801336c:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801336e:	4ba9      	ldr	r3, [pc, #676]	; (8013614 <Update_Detail+0x2b0>)
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	4ba9      	ldr	r3, [pc, #676]	; (8013618 <Update_Detail+0x2b4>)
 8013374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013378:	4619      	mov	r1, r3
 801337a:	4ba8      	ldr	r3, [pc, #672]	; (801361c <Update_Detail+0x2b8>)
 801337c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013380:	2b00      	cmp	r3, #0
 8013382:	bf14      	ite	ne
 8013384:	2301      	movne	r3, #1
 8013386:	2300      	moveq	r3, #0
 8013388:	b2db      	uxtb	r3, r3
 801338a:	440b      	add	r3, r1
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4aa2      	ldr	r2, [pc, #648]	; (8013620 <Update_Detail+0x2bc>)
 8013398:	f9b2 2000 	ldrsh.w	r2, [r2]
 801339c:	4611      	mov	r1, r2
 801339e:	4aa1      	ldr	r2, [pc, #644]	; (8013624 <Update_Detail+0x2c0>)
 80133a0:	5c52      	ldrb	r2, [r2, r1]
 80133a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80133a6:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80133a8:	4b9f      	ldr	r3, [pc, #636]	; (8013628 <Update_Detail+0x2c4>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	b29a      	uxth	r2, r3
 80133ae:	4b9f      	ldr	r3, [pc, #636]	; (801362c <Update_Detail+0x2c8>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	4413      	add	r3, r2
 80133b6:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80133bc:	4b9c      	ldr	r3, [pc, #624]	; (8013630 <Update_Detail+0x2cc>)
 80133be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	4b9a      	ldr	r3, [pc, #616]	; (8013630 <Update_Detail+0x2cc>)
 80133c6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	4619      	mov	r1, r3
 80133ce:	0089      	lsls	r1, r1, #2
 80133d0:	440b      	add	r3, r1
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	4413      	add	r3, r2
 80133d8:	b29b      	uxth	r3, r3
 80133da:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 80133dc:	2300      	movs	r3, #0
 80133de:	82fb      	strh	r3, [r7, #22]
 80133e0:	f000 bfb3 	b.w	801434a <Update_Detail+0xfe6>
    if(i==FREQUENC)
 80133e4:	8afb      	ldrh	r3, [r7, #22]
 80133e6:	2b13      	cmp	r3, #19
 80133e8:	d118      	bne.n	801341c <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 80133ea:	4b92      	ldr	r3, [pc, #584]	; (8013634 <Update_Detail+0x2d0>)
 80133ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133f0:	2b0a      	cmp	r3, #10
 80133f2:	dd0a      	ble.n	801340a <Update_Detail+0xa6>
        Freq_Cnt = 0;
 80133f4:	4b8f      	ldr	r3, [pc, #572]	; (8013634 <Update_Detail+0x2d0>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 80133fa:	4b8f      	ldr	r3, [pc, #572]	; (8013638 <Update_Detail+0x2d4>)
 80133fc:	781b      	ldrb	r3, [r3, #0]
 80133fe:	f043 0320 	orr.w	r3, r3, #32
 8013402:	b2da      	uxtb	r2, r3
 8013404:	4b8c      	ldr	r3, [pc, #560]	; (8013638 <Update_Detail+0x2d4>)
 8013406:	701a      	strb	r2, [r3, #0]
 8013408:	e008      	b.n	801341c <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 801340a:	4b8a      	ldr	r3, [pc, #552]	; (8013634 <Update_Detail+0x2d0>)
 801340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013410:	b29b      	uxth	r3, r3
 8013412:	3301      	adds	r3, #1
 8013414:	b29b      	uxth	r3, r3
 8013416:	b21a      	sxth	r2, r3
 8013418:	4b86      	ldr	r3, [pc, #536]	; (8013634 <Update_Detail+0x2d0>)
 801341a:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 801341c:	8afb      	ldrh	r3, [r7, #22]
 801341e:	4a84      	ldr	r2, [pc, #528]	; (8013630 <Update_Detail+0x2cc>)
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	4413      	add	r3, r2
 8013424:	799b      	ldrb	r3, [r3, #6]
 8013426:	f003 0320 	and.w	r3, r3, #32
 801342a:	2b00      	cmp	r3, #0
 801342c:	f000 878a 	beq.w	8014344 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013430:	8afb      	ldrh	r3, [r7, #22]
 8013432:	4a7f      	ldr	r2, [pc, #508]	; (8013630 <Update_Detail+0x2cc>)
 8013434:	00db      	lsls	r3, r3, #3
 8013436:	4413      	add	r3, r2
 8013438:	799a      	ldrb	r2, [r3, #6]
 801343a:	8afb      	ldrh	r3, [r7, #22]
 801343c:	f022 0220 	bic.w	r2, r2, #32
 8013440:	b2d1      	uxtb	r1, r2
 8013442:	4a7b      	ldr	r2, [pc, #492]	; (8013630 <Update_Detail+0x2cc>)
 8013444:	00db      	lsls	r3, r3, #3
 8013446:	4413      	add	r3, r2
 8013448:	460a      	mov	r2, r1
 801344a:	719a      	strb	r2, [r3, #6]
      switch (i){
 801344c:	8afb      	ldrh	r3, [r7, #22]
 801344e:	2b29      	cmp	r3, #41	; 0x29
 8013450:	f200 8739 	bhi.w	80142c6 <Update_Detail+0xf62>
 8013454:	a201      	add	r2, pc, #4	; (adr r2, 801345c <Update_Detail+0xf8>)
 8013456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801345a:	bf00      	nop
 801345c:	08013505 	.word	0x08013505
 8013460:	08013505 	.word	0x08013505
 8013464:	08013505 	.word	0x08013505
 8013468:	08013505 	.word	0x08013505
 801346c:	08013505 	.word	0x08013505
 8013470:	08013505 	.word	0x08013505
 8013474:	08013505 	.word	0x08013505
 8013478:	08013d0d 	.word	0x08013d0d
 801347c:	08013d0d 	.word	0x08013d0d
 8013480:	08013d0d 	.word	0x08013d0d
 8013484:	08013d0d 	.word	0x08013d0d
 8013488:	08013d0d 	.word	0x08013d0d
 801348c:	08013d0d 	.word	0x08013d0d
 8013490:	08013ba3 	.word	0x08013ba3
 8013494:	08013ba3 	.word	0x08013ba3
 8013498:	08013ba3 	.word	0x08013ba3
 801349c:	08013ba3 	.word	0x08013ba3
 80134a0:	08013ba3 	.word	0x08013ba3
 80134a4:	08013ba3 	.word	0x08013ba3
 80134a8:	08013f65 	.word	0x08013f65
 80134ac:	08013fd9 	.word	0x08013fd9
 80134b0:	08013ff9 	.word	0x08013ff9
 80134b4:	080140ff 	.word	0x080140ff
 80134b8:	0801406f 	.word	0x0801406f
 80134bc:	08014185 	.word	0x08014185
 80134c0:	0801420b 	.word	0x0801420b
 80134c4:	08013a87 	.word	0x08013a87
 80134c8:	08013a87 	.word	0x08013a87
 80134cc:	08013b1f 	.word	0x08013b1f
 80134d0:	08013805 	.word	0x08013805
 80134d4:	08013805 	.word	0x08013805
 80134d8:	08013805 	.word	0x08013805
 80134dc:	08013805 	.word	0x08013805
 80134e0:	08013805 	.word	0x08013805
 80134e4:	08013805 	.word	0x08013805
 80134e8:	08013805 	.word	0x08013805
 80134ec:	080138b5 	.word	0x080138b5
 80134f0:	080139a1 	.word	0x080139a1
 80134f4:	08013a43 	.word	0x08013a43
 80134f8:	080142c7 	.word	0x080142c7
 80134fc:	080142c7 	.word	0x080142c7
 8013500:	080142c7 	.word	0x080142c7
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8013504:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013508:	4619      	mov	r1, r3
 801350a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801350e:	f7fa fbf9 	bl	800dd04 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8013512:	8afb      	ldrh	r3, [r7, #22]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d005      	beq.n	8013524 <Update_Detail+0x1c0>
 8013518:	8afb      	ldrh	r3, [r7, #22]
 801351a:	2b01      	cmp	r3, #1
 801351c:	d002      	beq.n	8013524 <Update_Detail+0x1c0>
 801351e:	8afb      	ldrh	r3, [r7, #22]
 8013520:	2b02      	cmp	r3, #2
 8013522:	d138      	bne.n	8013596 <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8013524:	232f      	movs	r3, #47	; 0x2f
 8013526:	b29b      	uxth	r3, r3
 8013528:	3b03      	subs	r3, #3
 801352a:	b29b      	uxth	r3, r3
 801352c:	b219      	sxth	r1, r3
 801352e:	232a      	movs	r3, #42	; 0x2a
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	2300      	movs	r3, #0
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	230b      	movs	r3, #11
 8013538:	22e1      	movs	r2, #225	; 0xe1
 801353a:	2001      	movs	r0, #1
 801353c:	f7fa fcd0 	bl	800dee0 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013540:	202f      	movs	r0, #47	; 0x2f
 8013542:	4b3b      	ldr	r3, [pc, #236]	; (8013630 <Update_Detail+0x2cc>)
 8013544:	6819      	ldr	r1, [r3, #0]
 8013546:	f9b7 2000 	ldrsh.w	r2, [r7]
 801354a:	4613      	mov	r3, r2
 801354c:	005b      	lsls	r3, r3, #1
 801354e:	4413      	add	r3, r2
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	440b      	add	r3, r1
 8013554:	2201      	movs	r2, #1
 8013556:	21e1      	movs	r1, #225	; 0xe1
 8013558:	f7fa fbec 	bl	800dd34 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 801355c:	2047      	movs	r0, #71	; 0x47
 801355e:	4b34      	ldr	r3, [pc, #208]	; (8013630 <Update_Detail+0x2cc>)
 8013560:	689a      	ldr	r2, [r3, #8]
 8013562:	4b33      	ldr	r3, [pc, #204]	; (8013630 <Update_Detail+0x2cc>)
 8013564:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013568:	4619      	mov	r1, r3
 801356a:	460b      	mov	r3, r1
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	440b      	add	r3, r1
 8013570:	005b      	lsls	r3, r3, #1
 8013572:	4413      	add	r3, r2
 8013574:	2201      	movs	r2, #1
 8013576:	21e1      	movs	r1, #225	; 0xe1
 8013578:	f7fa fbdc 	bl	800dd34 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 801357c:	2020      	movs	r0, #32
 801357e:	4b2c      	ldr	r3, [pc, #176]	; (8013630 <Update_Detail+0x2cc>)
 8013580:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d001      	beq.n	801358c <Update_Detail+0x228>
 8013588:	4b2c      	ldr	r3, [pc, #176]	; (801363c <Update_Detail+0x2d8>)
 801358a:	e000      	b.n	801358e <Update_Detail+0x22a>
 801358c:	4b2c      	ldr	r3, [pc, #176]	; (8013640 <Update_Detail+0x2dc>)
 801358e:	2210      	movs	r2, #16
 8013590:	21e1      	movs	r1, #225	; 0xe1
 8013592:	f7fa fe37 	bl	800e204 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8013596:	4b26      	ldr	r3, [pc, #152]	; (8013630 <Update_Detail+0x2cc>)
 8013598:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801359c:	3301      	adds	r3, #1
 801359e:	b29b      	uxth	r3, r3
 80135a0:	005b      	lsls	r3, r3, #1
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	b21a      	sxth	r2, r3
 80135a6:	4b27      	ldr	r3, [pc, #156]	; (8013644 <Update_Detail+0x2e0>)
 80135a8:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80135aa:	4b26      	ldr	r3, [pc, #152]	; (8013644 <Update_Detail+0x2e0>)
 80135ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	4b1f      	ldr	r3, [pc, #124]	; (8013630 <Update_Detail+0x2cc>)
 80135b4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80135b8:	3301      	adds	r3, #1
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	005b      	lsls	r3, r3, #1
 80135be:	b29b      	uxth	r3, r3
 80135c0:	4413      	add	r3, r2
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	b21a      	sxth	r2, r3
 80135c6:	4b1f      	ldr	r3, [pc, #124]	; (8013644 <Update_Detail+0x2e0>)
 80135c8:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 80135ca:	4b19      	ldr	r3, [pc, #100]	; (8013630 <Update_Detail+0x2cc>)
 80135cc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80135d0:	3301      	adds	r3, #1
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	b21a      	sxth	r2, r3
 80135da:	4b1a      	ldr	r3, [pc, #104]	; (8013644 <Update_Detail+0x2e0>)
 80135dc:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 80135de:	4b14      	ldr	r3, [pc, #80]	; (8013630 <Update_Detail+0x2cc>)
 80135e0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80135e4:	3301      	adds	r3, #1
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	b21a      	sxth	r2, r3
 80135ee:	4b15      	ldr	r3, [pc, #84]	; (8013644 <Update_Detail+0x2e0>)
 80135f0:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 80135f2:	4b0f      	ldr	r3, [pc, #60]	; (8013630 <Update_Detail+0x2cc>)
 80135f4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d001      	beq.n	8013600 <Update_Detail+0x29c>
 80135fc:	2202      	movs	r2, #2
 80135fe:	e000      	b.n	8013602 <Update_Detail+0x29e>
 8013600:	2200      	movs	r2, #0
 8013602:	4b10      	ldr	r3, [pc, #64]	; (8013644 <Update_Detail+0x2e0>)
 8013604:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8013606:	4b0a      	ldr	r3, [pc, #40]	; (8013630 <Update_Detail+0x2cc>)
 8013608:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01b      	beq.n	8013648 <Update_Detail+0x2e4>
 8013610:	2202      	movs	r2, #2
 8013612:	e01a      	b.n	801364a <Update_Detail+0x2e6>
 8013614:	2000057c 	.word	0x2000057c
 8013618:	20006886 	.word	0x20006886
 801361c:	20002862 	.word	0x20002862
 8013620:	2000284a 	.word	0x2000284a
 8013624:	20000560 	.word	0x20000560
 8013628:	20006878 	.word	0x20006878
 801362c:	2000688c 	.word	0x2000688c
 8013630:	20000298 	.word	0x20000298
 8013634:	200007a4 	.word	0x200007a4
 8013638:	200001cc 	.word	0x200001cc
 801363c:	08000958 	.word	0x08000958
 8013640:	0800095c 	.word	0x0800095c
 8013644:	20000140 	.word	0x20000140
 8013648:	2200      	movs	r2, #0
 801364a:	4ba6      	ldr	r3, [pc, #664]	; (80138e4 <Update_Detail+0x580>)
 801364c:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 801364e:	4ba5      	ldr	r3, [pc, #660]	; (80138e4 <Update_Detail+0x580>)
 8013650:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013654:	461a      	mov	r2, r3
 8013656:	4ba3      	ldr	r3, [pc, #652]	; (80138e4 <Update_Detail+0x580>)
 8013658:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	0fda      	lsrs	r2, r3, #31
 8013660:	4413      	add	r3, r2
 8013662:	105b      	asrs	r3, r3, #1
 8013664:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013666:	f9b7 3000 	ldrsh.w	r3, [r7]
 801366a:	4a9f      	ldr	r2, [pc, #636]	; (80138e8 <Update_Detail+0x584>)
 801366c:	5cd3      	ldrb	r3, [r2, r3]
 801366e:	461c      	mov	r4, r3
 8013670:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013674:	4a9d      	ldr	r2, [pc, #628]	; (80138ec <Update_Detail+0x588>)
 8013676:	5cd3      	ldrb	r3, [r2, r3]
 8013678:	4618      	mov	r0, r3
 801367a:	f7fe fb2f 	bl	8011cdc <Exp>
 801367e:	4603      	mov	r3, r0
 8013680:	fb03 f204 	mul.w	r2, r3, r4
 8013684:	693b      	ldr	r3, [r7, #16]
 8013686:	fb02 f303 	mul.w	r3, r2, r3
 801368a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 801368c:	2301      	movs	r3, #1
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	2303      	movs	r3, #3
 8013692:	4a97      	ldr	r2, [pc, #604]	; (80138f0 <Update_Detail+0x58c>)
 8013694:	6939      	ldr	r1, [r7, #16]
 8013696:	4897      	ldr	r0, [pc, #604]	; (80138f4 <Update_Detail+0x590>)
 8013698:	f7fe fa24 	bl	8011ae4 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801369c:	2307      	movs	r3, #7
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b03      	subs	r3, #3
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	b219      	sxth	r1, r3
 80136a6:	2336      	movs	r3, #54	; 0x36
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	2300      	movs	r3, #0
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	230b      	movs	r3, #11
 80136b0:	2203      	movs	r2, #3
 80136b2:	2001      	movs	r0, #1
 80136b4:	f7fa fc14 	bl	800dee0 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80136b8:	2007      	movs	r0, #7
 80136ba:	4b8f      	ldr	r3, [pc, #572]	; (80138f8 <Update_Detail+0x594>)
 80136bc:	2211      	movs	r2, #17
 80136be:	2103      	movs	r1, #3
 80136c0:	f7fa fb38 	bl	800dd34 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 80136c4:	2307      	movs	r3, #7
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	3306      	adds	r3, #6
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	b218      	sxth	r0, r3
 80136ce:	4b8b      	ldr	r3, [pc, #556]	; (80138fc <Update_Detail+0x598>)
 80136d0:	2201      	movs	r2, #1
 80136d2:	2103      	movs	r1, #3
 80136d4:	f7fa fb2e 	bl	800dd34 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80136d8:	2307      	movs	r3, #7
 80136da:	b29b      	uxth	r3, r3
 80136dc:	332a      	adds	r3, #42	; 0x2a
 80136de:	b29b      	uxth	r3, r3
 80136e0:	b218      	sxth	r0, r3
 80136e2:	4b87      	ldr	r3, [pc, #540]	; (8013900 <Update_Detail+0x59c>)
 80136e4:	2201      	movs	r2, #1
 80136e6:	2103      	movs	r1, #3
 80136e8:	f7fa fb24 	bl	800dd34 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80136ec:	2307      	movs	r3, #7
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	3312      	adds	r3, #18
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	b218      	sxth	r0, r3
 80136f6:	4b7f      	ldr	r3, [pc, #508]	; (80138f4 <Update_Detail+0x590>)
 80136f8:	2201      	movs	r2, #1
 80136fa:	2103      	movs	r1, #3
 80136fc:	f7fa fb1a 	bl	800dd34 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8013700:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013704:	4619      	mov	r1, r3
 8013706:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801370a:	f7fa fafb 	bl	800dd04 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 801370e:	4b7d      	ldr	r3, [pc, #500]	; (8013904 <Update_Detail+0x5a0>)
 8013710:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013714:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013716:	f9b7 3000 	ldrsh.w	r3, [r7]
 801371a:	4a73      	ldr	r2, [pc, #460]	; (80138e8 <Update_Detail+0x584>)
 801371c:	5cd3      	ldrb	r3, [r2, r3]
 801371e:	461c      	mov	r4, r3
 8013720:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013724:	4a71      	ldr	r2, [pc, #452]	; (80138ec <Update_Detail+0x588>)
 8013726:	5cd3      	ldrb	r3, [r2, r3]
 8013728:	4618      	mov	r0, r3
 801372a:	f7fe fad7 	bl	8011cdc <Exp>
 801372e:	4603      	mov	r3, r0
 8013730:	fb03 f204 	mul.w	r2, r3, r4
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	fb02 f303 	mul.w	r3, r2, r3
 801373a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 801373c:	2301      	movs	r3, #1
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	2302      	movs	r3, #2
 8013742:	4a6b      	ldr	r2, [pc, #428]	; (80138f0 <Update_Detail+0x58c>)
 8013744:	6939      	ldr	r1, [r7, #16]
 8013746:	486b      	ldr	r0, [pc, #428]	; (80138f4 <Update_Detail+0x590>)
 8013748:	f7fe f9cc 	bl	8011ae4 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 801374c:	23e7      	movs	r3, #231	; 0xe7
 801374e:	b29b      	uxth	r3, r3
 8013750:	3309      	adds	r3, #9
 8013752:	b29b      	uxth	r3, r3
 8013754:	b218      	sxth	r0, r3
 8013756:	4b6c      	ldr	r3, [pc, #432]	; (8013908 <Update_Detail+0x5a4>)
 8013758:	2201      	movs	r2, #1
 801375a:	21e1      	movs	r1, #225	; 0xe1
 801375c:	f7fa faea 	bl	800dd34 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013760:	23e7      	movs	r3, #231	; 0xe7
 8013762:	b29b      	uxth	r3, r3
 8013764:	3309      	adds	r3, #9
 8013766:	b29b      	uxth	r3, r3
 8013768:	b218      	sxth	r0, r3
 801376a:	4b62      	ldr	r3, [pc, #392]	; (80138f4 <Update_Detail+0x590>)
 801376c:	2201      	movs	r2, #1
 801376e:	21e1      	movs	r1, #225	; 0xe1
 8013770:	f7fa fae0 	bl	800dd34 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013774:	20e7      	movs	r0, #231	; 0xe7
 8013776:	4b65      	ldr	r3, [pc, #404]	; (801390c <Update_Detail+0x5a8>)
 8013778:	2211      	movs	r2, #17
 801377a:	21e1      	movs	r1, #225	; 0xe1
 801377c:	f7fa fd42 	bl	800e204 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8013780:	4b60      	ldr	r3, [pc, #384]	; (8013904 <Update_Detail+0x5a0>)
 8013782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013786:	b2db      	uxtb	r3, r3
 8013788:	b21a      	sxth	r2, r3
 801378a:	4b61      	ldr	r3, [pc, #388]	; (8013910 <Update_Detail+0x5ac>)
 801378c:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 801378e:	4b5d      	ldr	r3, [pc, #372]	; (8013904 <Update_Detail+0x5a0>)
 8013790:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013794:	b2db      	uxtb	r3, r3
 8013796:	2b01      	cmp	r3, #1
 8013798:	d903      	bls.n	80137a2 <Update_Detail+0x43e>
          KindA  = HV;
 801379a:	4b5e      	ldr	r3, [pc, #376]	; (8013914 <Update_Detail+0x5b0>)
 801379c:	2201      	movs	r2, #1
 801379e:	801a      	strh	r2, [r3, #0]
 80137a0:	e002      	b.n	80137a8 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 80137a2:	4b5c      	ldr	r3, [pc, #368]	; (8013914 <Update_Detail+0x5b0>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80137a8:	4b56      	ldr	r3, [pc, #344]	; (8013904 <Update_Detail+0x5a0>)
 80137aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	2b05      	cmp	r3, #5
 80137b2:	d901      	bls.n	80137b8 <Update_Detail+0x454>
 80137b4:	2204      	movs	r2, #4
 80137b6:	e000      	b.n	80137ba <Update_Detail+0x456>
 80137b8:	2200      	movs	r2, #0
 80137ba:	4b57      	ldr	r3, [pc, #348]	; (8013918 <Update_Detail+0x5b4>)
 80137bc:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 80137be:	4b51      	ldr	r3, [pc, #324]	; (8013904 <Update_Detail+0x5a0>)
 80137c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <Update_Detail+0x468>
 80137c8:	2200      	movs	r2, #0
 80137ca:	e000      	b.n	80137ce <Update_Detail+0x46a>
 80137cc:	2202      	movs	r2, #2
 80137ce:	4b53      	ldr	r3, [pc, #332]	; (801391c <Update_Detail+0x5b8>)
 80137d0:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 80137d2:	4b50      	ldr	r3, [pc, #320]	; (8013914 <Update_Detail+0x5b0>)
 80137d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137d8:	461a      	mov	r2, r3
 80137da:	4b50      	ldr	r3, [pc, #320]	; (801391c <Update_Detail+0x5b8>)
 80137dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137e0:	4413      	add	r3, r2
 80137e2:	4a4d      	ldr	r2, [pc, #308]	; (8013918 <Update_Detail+0x5b4>)
 80137e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80137e8:	4413      	add	r3, r2
 80137ea:	4619      	mov	r1, r3
 80137ec:	2007      	movs	r0, #7
 80137ee:	f7f8 fdc1 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 80137f2:	4b44      	ldr	r3, [pc, #272]	; (8013904 <Update_Detail+0x5a0>)
 80137f4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80137f8:	b2db      	uxtb	r3, r3
 80137fa:	4618      	mov	r0, r3
 80137fc:	f001 fc5c 	bl	80150b8 <AiPosi>
        break;
 8013800:	f000 bd61 	b.w	80142c6 <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8013804:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013808:	4619      	mov	r1, r3
 801380a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801380e:	f7fa fa79 	bl	800dd04 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8013812:	8afb      	ldrh	r3, [r7, #22]
 8013814:	4a3b      	ldr	r2, [pc, #236]	; (8013904 <Update_Detail+0x5a0>)
 8013816:	00db      	lsls	r3, r3, #3
 8013818:	4413      	add	r3, r2
 801381a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801381e:	b2db      	uxtb	r3, r3
 8013820:	4619      	mov	r1, r3
 8013822:	4834      	ldr	r0, [pc, #208]	; (80138f4 <Update_Detail+0x590>)
 8013824:	f7fe f8f6 	bl	8011a14 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013828:	8afb      	ldrh	r3, [r7, #22]
 801382a:	4a3d      	ldr	r2, [pc, #244]	; (8013920 <Update_Detail+0x5bc>)
 801382c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013830:	b29b      	uxth	r3, r3
 8013832:	3b03      	subs	r3, #3
 8013834:	b29b      	uxth	r3, r3
 8013836:	b219      	sxth	r1, r3
 8013838:	2342      	movs	r3, #66	; 0x42
 801383a:	9301      	str	r3, [sp, #4]
 801383c:	2300      	movs	r3, #0
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	230b      	movs	r3, #11
 8013842:	2203      	movs	r2, #3
 8013844:	2001      	movs	r0, #1
 8013846:	f7fa fb4b 	bl	800dee0 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801384a:	8afb      	ldrh	r3, [r7, #22]
 801384c:	4a34      	ldr	r2, [pc, #208]	; (8013920 <Update_Detail+0x5bc>)
 801384e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013852:	8afb      	ldrh	r3, [r7, #22]
 8013854:	2b21      	cmp	r3, #33	; 0x21
 8013856:	d901      	bls.n	801385c <Update_Detail+0x4f8>
 8013858:	4b32      	ldr	r3, [pc, #200]	; (8013924 <Update_Detail+0x5c0>)
 801385a:	e000      	b.n	801385e <Update_Detail+0x4fa>
 801385c:	4b32      	ldr	r3, [pc, #200]	; (8013928 <Update_Detail+0x5c4>)
 801385e:	2201      	movs	r2, #1
 8013860:	2103      	movs	r1, #3
 8013862:	f7fa fa67 	bl	800dd34 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8013866:	8afb      	ldrh	r3, [r7, #22]
 8013868:	4a2d      	ldr	r2, [pc, #180]	; (8013920 <Update_Detail+0x5bc>)
 801386a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801386e:	b29b      	uxth	r3, r3
 8013870:	3318      	adds	r3, #24
 8013872:	b29b      	uxth	r3, r3
 8013874:	b218      	sxth	r0, r3
 8013876:	4b1f      	ldr	r3, [pc, #124]	; (80138f4 <Update_Detail+0x590>)
 8013878:	2201      	movs	r2, #1
 801387a:	2103      	movs	r1, #3
 801387c:	f7fa fa5a 	bl	800dd34 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8013880:	8afb      	ldrh	r3, [r7, #22]
 8013882:	4a27      	ldr	r2, [pc, #156]	; (8013920 <Update_Detail+0x5bc>)
 8013884:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013888:	b29b      	uxth	r3, r3
 801388a:	332a      	adds	r3, #42	; 0x2a
 801388c:	b29b      	uxth	r3, r3
 801388e:	b218      	sxth	r0, r3
 8013890:	8afb      	ldrh	r3, [r7, #22]
 8013892:	4a1c      	ldr	r2, [pc, #112]	; (8013904 <Update_Detail+0x5a0>)
 8013894:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013898:	8afb      	ldrh	r3, [r7, #22]
 801389a:	f1a3 021d 	sub.w	r2, r3, #29
 801389e:	4613      	mov	r3, r2
 80138a0:	005b      	lsls	r3, r3, #1
 80138a2:	4413      	add	r3, r2
 80138a4:	005b      	lsls	r3, r3, #1
 80138a6:	440b      	add	r3, r1
 80138a8:	2201      	movs	r2, #1
 80138aa:	2103      	movs	r1, #3
 80138ac:	f7fa fa42 	bl	800dd34 <DispStr>
        break;
 80138b0:	f000 bd09 	b.w	80142c6 <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 80138b4:	4b13      	ldr	r3, [pc, #76]	; (8013904 <Update_Detail+0x5a0>)
 80138b6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d136      	bne.n	801392c <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80138be:	2100      	movs	r1, #0
 80138c0:	2000      	movs	r0, #0
 80138c2:	f7f8 fd57 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80138c6:	4b0f      	ldr	r3, [pc, #60]	; (8013904 <Update_Detail+0x5a0>)
 80138c8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7f8 ff2f 	bl	800c730 <Set_Fout>
          Set_Duty();
 80138d2:	f7f8 ff01 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80138d6:	2104      	movs	r1, #4
 80138d8:	2000      	movs	r0, #0
 80138da:	f7f8 fd4b 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 80138de:	f000 bcf2 	b.w	80142c6 <Update_Detail+0xf62>
 80138e2:	bf00      	nop
 80138e4:	20000140 	.word	0x20000140
 80138e8:	08002130 	.word	0x08002130
 80138ec:	08002108 	.word	0x08002108
 80138f0:	08001d00 	.word	0x08001d00
 80138f4:	2000283c 	.word	0x2000283c
 80138f8:	08000960 	.word	0x08000960
 80138fc:	08000964 	.word	0x08000964
 8013900:	080009d0 	.word	0x080009d0
 8013904:	20000298 	.word	0x20000298
 8013908:	08000990 	.word	0x08000990
 801390c:	08000998 	.word	0x08000998
 8013910:	2000284a 	.word	0x2000284a
 8013914:	20006886 	.word	0x20006886
 8013918:	20002862 	.word	0x20002862
 801391c:	20006888 	.word	0x20006888
 8013920:	0800215c 	.word	0x0800215c
 8013924:	08000948 	.word	0x08000948
 8013928:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 801392c:	4bbf      	ldr	r3, [pc, #764]	; (8013c2c <Update_Detail+0x8c8>)
 801392e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013932:	2b09      	cmp	r3, #9
 8013934:	dd03      	ble.n	801393e <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013936:	4bbd      	ldr	r3, [pc, #756]	; (8013c2c <Update_Detail+0x8c8>)
 8013938:	2209      	movs	r2, #9
 801393a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801393e:	2100      	movs	r1, #0
 8013940:	2000      	movs	r0, #0
 8013942:	f7f8 fd17 	bl	800c374 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013946:	4bb9      	ldr	r3, [pc, #740]	; (8013c2c <Update_Detail+0x8c8>)
 8013948:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801394c:	461a      	mov	r2, r3
 801394e:	4bb8      	ldr	r3, [pc, #736]	; (8013c30 <Update_Detail+0x8cc>)
 8013950:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013954:	3b01      	subs	r3, #1
 8013956:	461a      	mov	r2, r3
 8013958:	4bb6      	ldr	r3, [pc, #728]	; (8013c34 <Update_Detail+0x8d0>)
 801395a:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 801395c:	4bb3      	ldr	r3, [pc, #716]	; (8013c2c <Update_Detail+0x8c8>)
 801395e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013962:	461a      	mov	r2, r3
 8013964:	4bb4      	ldr	r3, [pc, #720]	; (8013c38 <Update_Detail+0x8d4>)
 8013966:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801396a:	3b01      	subs	r3, #1
 801396c:	4619      	mov	r1, r3
 801396e:	2001      	movs	r0, #1
 8013970:	f7f8 fd00 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013974:	21b4      	movs	r1, #180	; 0xb4
 8013976:	2002      	movs	r0, #2
 8013978:	f7f8 fcfc 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 801397c:	4bab      	ldr	r3, [pc, #684]	; (8013c2c <Update_Detail+0x8c8>)
 801397e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013982:	b2db      	uxtb	r3, r3
 8013984:	4618      	mov	r0, r3
 8013986:	f7f8 fcdf 	bl	800c348 <BIOS_Info>
 801398a:	4603      	mov	r3, r0
 801398c:	4619      	mov	r1, r3
 801398e:	2003      	movs	r0, #3
 8013990:	f7f8 fcf0 	bl	800c374 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013994:	2102      	movs	r1, #2
 8013996:	2000      	movs	r0, #0
 8013998:	f7f8 fcec 	bl	800c374 <BIOS_Ctrl>
      break;
 801399c:	f000 bc93 	b.w	80142c6 <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 80139a0:	4ba2      	ldr	r3, [pc, #648]	; (8013c2c <Update_Detail+0x8c8>)
 80139a2:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d111      	bne.n	80139ce <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80139aa:	2100      	movs	r1, #0
 80139ac:	2000      	movs	r0, #0
 80139ae:	f7f8 fce1 	bl	800c374 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80139b2:	4b9e      	ldr	r3, [pc, #632]	; (8013c2c <Update_Detail+0x8c8>)
 80139b4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f8 feb9 	bl	800c730 <Set_Fout>
          Set_Duty();
 80139be:	f7f8 fe8b 	bl	800c6d8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80139c2:	2104      	movs	r1, #4
 80139c4:	2000      	movs	r0, #0
 80139c6:	f7f8 fcd5 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 80139ca:	f000 bc7c 	b.w	80142c6 <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80139ce:	4b97      	ldr	r3, [pc, #604]	; (8013c2c <Update_Detail+0x8c8>)
 80139d0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139d4:	2b09      	cmp	r3, #9
 80139d6:	dd03      	ble.n	80139e0 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 80139d8:	4b94      	ldr	r3, [pc, #592]	; (8013c2c <Update_Detail+0x8c8>)
 80139da:	2209      	movs	r2, #9
 80139dc:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80139e0:	2100      	movs	r1, #0
 80139e2:	2000      	movs	r0, #0
 80139e4:	f7f8 fcc6 	bl	800c374 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80139e8:	4b90      	ldr	r3, [pc, #576]	; (8013c2c <Update_Detail+0x8c8>)
 80139ea:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80139ee:	461a      	mov	r2, r3
 80139f0:	4b8f      	ldr	r3, [pc, #572]	; (8013c30 <Update_Detail+0x8cc>)
 80139f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80139f6:	3b01      	subs	r3, #1
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b8e      	ldr	r3, [pc, #568]	; (8013c34 <Update_Detail+0x8d0>)
 80139fc:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80139fe:	4b8b      	ldr	r3, [pc, #556]	; (8013c2c <Update_Detail+0x8c8>)
 8013a00:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013a04:	461a      	mov	r2, r3
 8013a06:	4b8c      	ldr	r3, [pc, #560]	; (8013c38 <Update_Detail+0x8d4>)
 8013a08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013a0c:	3b01      	subs	r3, #1
 8013a0e:	4619      	mov	r1, r3
 8013a10:	2001      	movs	r0, #1
 8013a12:	f7f8 fcaf 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013a16:	21b4      	movs	r1, #180	; 0xb4
 8013a18:	2002      	movs	r0, #2
 8013a1a:	f7f8 fcab 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013a1e:	4b83      	ldr	r3, [pc, #524]	; (8013c2c <Update_Detail+0x8c8>)
 8013a20:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7f8 fc8e 	bl	800c348 <BIOS_Info>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	4619      	mov	r1, r3
 8013a30:	2003      	movs	r0, #3
 8013a32:	f7f8 fc9f 	bl	800c374 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013a36:	2102      	movs	r1, #2
 8013a38:	2000      	movs	r0, #0
 8013a3a:	f7f8 fc9b 	bl	800c374 <BIOS_Ctrl>
        break;
 8013a3e:	f000 bc42 	b.w	80142c6 <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013a42:	f240 531f 	movw	r3, #1311	; 0x51f
 8013a46:	4619      	mov	r1, r3
 8013a48:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a4c:	f7fa f95a 	bl	800dd04 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013a50:	8afb      	ldrh	r3, [r7, #22]
 8013a52:	4a7a      	ldr	r2, [pc, #488]	; (8013c3c <Update_Detail+0x8d8>)
 8013a54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	3b03      	subs	r3, #3
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	b219      	sxth	r1, r3
 8013a60:	2336      	movs	r3, #54	; 0x36
 8013a62:	9301      	str	r3, [sp, #4]
 8013a64:	2300      	movs	r3, #0
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	230b      	movs	r3, #11
 8013a6a:	2203      	movs	r2, #3
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	f7fa fa37 	bl	800dee0 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013a72:	4b6e      	ldr	r3, [pc, #440]	; (8013c2c <Update_Detail+0x8c8>)
 8013a74:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f040 8423 	bne.w	80142c4 <Update_Detail+0xf60>
        {
          Set_Duty();
 8013a7e:	f7f8 fe2b 	bl	800c6d8 <Set_Duty>
        }
        break;
 8013a82:	f000 bc1f 	b.w	80142c4 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 8013a86:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a90:	f7fa f938 	bl	800dd04 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013a94:	8afb      	ldrh	r3, [r7, #22]
 8013a96:	2b1a      	cmp	r3, #26
 8013a98:	d002      	beq.n	8013aa0 <Update_Detail+0x73c>
 8013a9a:	8afb      	ldrh	r3, [r7, #22]
 8013a9c:	2b1b      	cmp	r3, #27
 8013a9e:	d123      	bne.n	8013ae8 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013aa0:	23a8      	movs	r3, #168	; 0xa8
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	3b03      	subs	r3, #3
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	b219      	sxth	r1, r3
 8013aaa:	231e      	movs	r3, #30
 8013aac:	9301      	str	r3, [sp, #4]
 8013aae:	2301      	movs	r3, #1
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	230b      	movs	r3, #11
 8013ab4:	22e1      	movs	r2, #225	; 0xe1
 8013ab6:	2001      	movs	r0, #1
 8013ab8:	f7fa fa12 	bl	800dee0 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013abc:	20a8      	movs	r0, #168	; 0xa8
 8013abe:	4b5b      	ldr	r3, [pc, #364]	; (8013c2c <Update_Detail+0x8c8>)
 8013ac0:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00a      	beq.n	8013ade <Update_Detail+0x77a>
 8013ac8:	4b58      	ldr	r3, [pc, #352]	; (8013c2c <Update_Detail+0x8c8>)
 8013aca:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013ace:	461a      	mov	r2, r3
 8013ad0:	4613      	mov	r3, r2
 8013ad2:	005b      	lsls	r3, r3, #1
 8013ad4:	4413      	add	r3, r2
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	4a59      	ldr	r2, [pc, #356]	; (8013c40 <Update_Detail+0x8dc>)
 8013ada:	4413      	add	r3, r2
 8013adc:	e000      	b.n	8013ae0 <Update_Detail+0x77c>
 8013ade:	4b59      	ldr	r3, [pc, #356]	; (8013c44 <Update_Detail+0x8e0>)
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	21e1      	movs	r1, #225	; 0xe1
 8013ae4:	f7fa f926 	bl	800dd34 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013ae8:	4b50      	ldr	r3, [pc, #320]	; (8013c2c <Update_Detail+0x8c8>)
 8013aea:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013aee:	2b05      	cmp	r3, #5
 8013af0:	dc0a      	bgt.n	8013b08 <Update_Detail+0x7a4>
 8013af2:	4b4e      	ldr	r3, [pc, #312]	; (8013c2c <Update_Detail+0x8c8>)
 8013af4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013af8:	3301      	adds	r3, #1
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	005b      	lsls	r3, r3, #1
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	b21a      	sxth	r2, r3
 8013b02:	4b51      	ldr	r3, [pc, #324]	; (8013c48 <Update_Detail+0x8e4>)
 8013b04:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013b06:	e3de      	b.n	80142c6 <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013b08:	4b48      	ldr	r3, [pc, #288]	; (8013c2c <Update_Detail+0x8c8>)
 8013b0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	005b      	lsls	r3, r3, #1
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	b21a      	sxth	r2, r3
 8013b18:	4b4b      	ldr	r3, [pc, #300]	; (8013c48 <Update_Detail+0x8e4>)
 8013b1a:	82da      	strh	r2, [r3, #22]
        break;
 8013b1c:	e3d3      	b.n	80142c6 <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013b1e:	4b43      	ldr	r3, [pc, #268]	; (8013c2c <Update_Detail+0x8c8>)
 8013b20:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d108      	bne.n	8013b3a <Update_Detail+0x7d6>
 8013b28:	4b47      	ldr	r3, [pc, #284]	; (8013c48 <Update_Detail+0x8e4>)
 8013b2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013b2e:	f043 0304 	orr.w	r3, r3, #4
 8013b32:	b21a      	sxth	r2, r3
 8013b34:	4b44      	ldr	r3, [pc, #272]	; (8013c48 <Update_Detail+0x8e4>)
 8013b36:	805a      	strh	r2, [r3, #2]
 8013b38:	e007      	b.n	8013b4a <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013b3a:	4b43      	ldr	r3, [pc, #268]	; (8013c48 <Update_Detail+0x8e4>)
 8013b3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013b40:	f023 0304 	bic.w	r3, r3, #4
 8013b44:	b21a      	sxth	r2, r3
 8013b46:	4b40      	ldr	r3, [pc, #256]	; (8013c48 <Update_Detail+0x8e4>)
 8013b48:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013b4a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013b4e:	4619      	mov	r1, r3
 8013b50:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b54:	f7fa f8d6 	bl	800dd04 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013b58:	23a8      	movs	r3, #168	; 0xa8
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	3b03      	subs	r3, #3
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	b219      	sxth	r1, r3
 8013b62:	231e      	movs	r3, #30
 8013b64:	9301      	str	r3, [sp, #4]
 8013b66:	2301      	movs	r3, #1
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	230b      	movs	r3, #11
 8013b6c:	22e1      	movs	r2, #225	; 0xe1
 8013b6e:	2001      	movs	r0, #1
 8013b70:	f7fa f9b6 	bl	800dee0 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013b74:	20a8      	movs	r0, #168	; 0xa8
 8013b76:	4b2d      	ldr	r3, [pc, #180]	; (8013c2c <Update_Detail+0x8c8>)
 8013b78:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d00a      	beq.n	8013b96 <Update_Detail+0x832>
 8013b80:	4b2a      	ldr	r3, [pc, #168]	; (8013c2c <Update_Detail+0x8c8>)
 8013b82:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8013b86:	461a      	mov	r2, r3
 8013b88:	4613      	mov	r3, r2
 8013b8a:	005b      	lsls	r3, r3, #1
 8013b8c:	4413      	add	r3, r2
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	4a2b      	ldr	r2, [pc, #172]	; (8013c40 <Update_Detail+0x8dc>)
 8013b92:	4413      	add	r3, r2
 8013b94:	e000      	b.n	8013b98 <Update_Detail+0x834>
 8013b96:	4b2b      	ldr	r3, [pc, #172]	; (8013c44 <Update_Detail+0x8e0>)
 8013b98:	2201      	movs	r2, #1
 8013b9a:	21e1      	movs	r1, #225	; 0xe1
 8013b9c:	f7fa f8ca 	bl	800dd34 <DispStr>
      break;
 8013ba0:	e391      	b.n	80142c6 <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013ba2:	f000 fc6b 	bl	801447c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8013ba6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013baa:	4619      	mov	r1, r3
 8013bac:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013bb0:	f7fa f8a8 	bl	800dd04 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013bb4:	8afb      	ldrh	r3, [r7, #22]
 8013bb6:	2b0e      	cmp	r3, #14
 8013bb8:	d002      	beq.n	8013bc0 <Update_Detail+0x85c>
 8013bba:	8afb      	ldrh	r3, [r7, #22]
 8013bbc:	2b11      	cmp	r3, #17
 8013bbe:	d11a      	bne.n	8013bf6 <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013bc0:	23dd      	movs	r3, #221	; 0xdd
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	3b03      	subs	r3, #3
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	b219      	sxth	r1, r3
 8013bca:	2330      	movs	r3, #48	; 0x30
 8013bcc:	9301      	str	r3, [sp, #4]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	9300      	str	r3, [sp, #0]
 8013bd2:	230b      	movs	r3, #11
 8013bd4:	22e1      	movs	r2, #225	; 0xe1
 8013bd6:	2001      	movs	r0, #1
 8013bd8:	f7fa f982 	bl	800dee0 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013bdc:	20dd      	movs	r0, #221	; 0xdd
 8013bde:	4b13      	ldr	r3, [pc, #76]	; (8013c2c <Update_Detail+0x8c8>)
 8013be0:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d001      	beq.n	8013bec <Update_Detail+0x888>
 8013be8:	4b18      	ldr	r3, [pc, #96]	; (8013c4c <Update_Detail+0x8e8>)
 8013bea:	e000      	b.n	8013bee <Update_Detail+0x88a>
 8013bec:	4b18      	ldr	r3, [pc, #96]	; (8013c50 <Update_Detail+0x8ec>)
 8013bee:	2211      	movs	r2, #17
 8013bf0:	21e1      	movs	r1, #225	; 0xe1
 8013bf2:	f7fa fb07 	bl	800e204 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013bf6:	8afb      	ldrh	r3, [r7, #22]
 8013bf8:	2b0f      	cmp	r3, #15
 8013bfa:	d134      	bne.n	8013c66 <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013bfc:	20cf      	movs	r0, #207	; 0xcf
 8013bfe:	4b0b      	ldr	r3, [pc, #44]	; (8013c2c <Update_Detail+0x8c8>)
 8013c00:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d001      	beq.n	8013c0c <Update_Detail+0x8a8>
 8013c08:	4b12      	ldr	r3, [pc, #72]	; (8013c54 <Update_Detail+0x8f0>)
 8013c0a:	e000      	b.n	8013c0e <Update_Detail+0x8aa>
 8013c0c:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <Update_Detail+0x8f4>)
 8013c0e:	2210      	movs	r2, #16
 8013c10:	21e1      	movs	r1, #225	; 0xe1
 8013c12:	f7fa faf7 	bl	800e204 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013c16:	4b05      	ldr	r3, [pc, #20]	; (8013c2c <Update_Detail+0x8c8>)
 8013c18:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d01f      	beq.n	8013c60 <Update_Detail+0x8fc>
 8013c20:	4b0e      	ldr	r3, [pc, #56]	; (8013c5c <Update_Detail+0x8f8>)
 8013c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013c26:	801a      	strh	r2, [r3, #0]
 8013c28:	e01d      	b.n	8013c66 <Update_Detail+0x902>
 8013c2a:	bf00      	nop
 8013c2c:	20000298 	.word	0x20000298
 8013c30:	08002338 	.word	0x08002338
 8013c34:	20006bd0 	.word	0x20006bd0
 8013c38:	08001d90 	.word	0x08001d90
 8013c3c:	0800215c 	.word	0x0800215c
 8013c40:	08001c88 	.word	0x08001c88
 8013c44:	08001cac 	.word	0x08001cac
 8013c48:	20000140 	.word	0x20000140
 8013c4c:	08000988 	.word	0x08000988
 8013c50:	0800098c 	.word	0x0800098c
 8013c54:	0800099c 	.word	0x0800099c
 8013c58:	0800095c 	.word	0x0800095c
 8013c5c:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013c60:	4bac      	ldr	r3, [pc, #688]	; (8013f14 <Update_Detail+0xbb0>)
 8013c62:	2200      	movs	r2, #0
 8013c64:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013c66:	4bac      	ldr	r3, [pc, #688]	; (8013f18 <Update_Detail+0xbb4>)
 8013c68:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	4bab      	ldr	r3, [pc, #684]	; (8013f1c <Update_Detail+0xbb8>)
 8013c70:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	005b      	lsls	r3, r3, #1
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	4413      	add	r3, r2
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	b21a      	sxth	r2, r3
 8013c80:	4ba5      	ldr	r3, [pc, #660]	; (8013f18 <Update_Detail+0xbb4>)
 8013c82:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013c84:	4ba5      	ldr	r3, [pc, #660]	; (8013f1c <Update_Detail+0xbb8>)
 8013c86:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013c8a:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013c8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013c90:	4aa3      	ldr	r2, [pc, #652]	; (8013f20 <Update_Detail+0xbbc>)
 8013c92:	5cd3      	ldrb	r3, [r2, r3]
 8013c94:	461c      	mov	r4, r3
 8013c96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013c9a:	4aa2      	ldr	r2, [pc, #648]	; (8013f24 <Update_Detail+0xbc0>)
 8013c9c:	5cd3      	ldrb	r3, [r2, r3]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fe f81c 	bl	8011cdc <Exp>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	fb03 f204 	mul.w	r2, r3, r4
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	fb02 f303 	mul.w	r3, r2, r3
 8013cb0:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	2302      	movs	r3, #2
 8013cb8:	4a9b      	ldr	r2, [pc, #620]	; (8013f28 <Update_Detail+0xbc4>)
 8013cba:	6939      	ldr	r1, [r7, #16]
 8013cbc:	489b      	ldr	r0, [pc, #620]	; (8013f2c <Update_Detail+0xbc8>)
 8013cbe:	f7fd ff11 	bl	8011ae4 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013cc2:	20e7      	movs	r0, #231	; 0xe7
 8013cc4:	4b9a      	ldr	r3, [pc, #616]	; (8013f30 <Update_Detail+0xbcc>)
 8013cc6:	2211      	movs	r2, #17
 8013cc8:	21e1      	movs	r1, #225	; 0xe1
 8013cca:	f7fa fa9b 	bl	800e204 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013cce:	23e7      	movs	r3, #231	; 0xe7
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	3309      	adds	r3, #9
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	b218      	sxth	r0, r3
 8013cd8:	4b96      	ldr	r3, [pc, #600]	; (8013f34 <Update_Detail+0xbd0>)
 8013cda:	2201      	movs	r2, #1
 8013cdc:	21e1      	movs	r1, #225	; 0xe1
 8013cde:	f7fa f829 	bl	800dd34 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013ce2:	23e7      	movs	r3, #231	; 0xe7
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	3309      	adds	r3, #9
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	b218      	sxth	r0, r3
 8013cec:	4b8f      	ldr	r3, [pc, #572]	; (8013f2c <Update_Detail+0xbc8>)
 8013cee:	2201      	movs	r2, #1
 8013cf0:	21e1      	movs	r1, #225	; 0xe1
 8013cf2:	f7fa f81f 	bl	800dd34 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013cf6:	4b89      	ldr	r3, [pc, #548]	; (8013f1c <Update_Detail+0xbb8>)
 8013cf8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <Update_Detail+0x9a0>
 8013d00:	2202      	movs	r2, #2
 8013d02:	e000      	b.n	8013d06 <Update_Detail+0x9a2>
 8013d04:	2200      	movs	r2, #0
 8013d06:	4b84      	ldr	r3, [pc, #528]	; (8013f18 <Update_Detail+0xbb4>)
 8013d08:	811a      	strh	r2, [r3, #8]
        break;
 8013d0a:	e2dc      	b.n	80142c6 <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013d0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013d10:	4619      	mov	r1, r3
 8013d12:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d16:	f7f9 fff5 	bl	800dd04 <SetColor>
        if(i == TIM_BASE)
 8013d1a:	8afb      	ldrh	r3, [r7, #22]
 8013d1c:	2b07      	cmp	r3, #7
 8013d1e:	d11e      	bne.n	8013d5e <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013d20:	8afb      	ldrh	r3, [r7, #22]
 8013d22:	4a85      	ldr	r2, [pc, #532]	; (8013f38 <Update_Detail+0xbd4>)
 8013d24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	3b03      	subs	r3, #3
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	b219      	sxth	r1, r3
 8013d30:	231e      	movs	r3, #30
 8013d32:	9301      	str	r3, [sp, #4]
 8013d34:	2302      	movs	r3, #2
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	230b      	movs	r3, #11
 8013d3a:	22e1      	movs	r2, #225	; 0xe1
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	f7fa f8cf 	bl	800dee0 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013d42:	8afb      	ldrh	r3, [r7, #22]
 8013d44:	4a7c      	ldr	r2, [pc, #496]	; (8013f38 <Update_Detail+0xbd4>)
 8013d46:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013d4a:	4b74      	ldr	r3, [pc, #464]	; (8013f1c <Update_Detail+0xbb8>)
 8013d4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d50:	00db      	lsls	r3, r3, #3
 8013d52:	4a7a      	ldr	r2, [pc, #488]	; (8013f3c <Update_Detail+0xbd8>)
 8013d54:	4413      	add	r3, r2
 8013d56:	2201      	movs	r2, #1
 8013d58:	21e1      	movs	r1, #225	; 0xe1
 8013d5a:	f7f9 ffeb 	bl	800dd34 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013d5e:	8afb      	ldrh	r3, [r7, #22]
 8013d60:	2b09      	cmp	r3, #9
 8013d62:	d126      	bne.n	8013db2 <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013d64:	23f8      	movs	r3, #248	; 0xf8
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	3b03      	subs	r3, #3
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	b219      	sxth	r1, r3
 8013d6e:	2342      	movs	r3, #66	; 0x42
 8013d70:	9301      	str	r3, [sp, #4]
 8013d72:	2300      	movs	r3, #0
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	230b      	movs	r3, #11
 8013d78:	2203      	movs	r2, #3
 8013d7a:	2001      	movs	r0, #1
 8013d7c:	f7fa f8b0 	bl	800dee0 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013d80:	20f8      	movs	r0, #248	; 0xf8
 8013d82:	4b6f      	ldr	r3, [pc, #444]	; (8013f40 <Update_Detail+0xbdc>)
 8013d84:	2201      	movs	r2, #1
 8013d86:	2103      	movs	r1, #3
 8013d88:	f7f9 ffd4 	bl	800dd34 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013d8c:	23f8      	movs	r3, #248	; 0xf8
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	3336      	adds	r3, #54	; 0x36
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	b218      	sxth	r0, r3
 8013d96:	4b61      	ldr	r3, [pc, #388]	; (8013f1c <Update_Detail+0xbb8>)
 8013d98:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	4613      	mov	r3, r2
 8013da0:	005b      	lsls	r3, r3, #1
 8013da2:	4413      	add	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4a67      	ldr	r2, [pc, #412]	; (8013f44 <Update_Detail+0xbe0>)
 8013da8:	4413      	add	r3, r2
 8013daa:	2201      	movs	r2, #1
 8013dac:	2103      	movs	r1, #3
 8013dae:	f7f9 ffc1 	bl	800dd34 <DispStr>
        }
        Update_Windows();
 8013db2:	f000 fbad 	bl	8014510 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013db6:	4b64      	ldr	r3, [pc, #400]	; (8013f48 <Update_Detail+0xbe4>)
 8013db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	4b57      	ldr	r3, [pc, #348]	; (8013f1c <Update_Detail+0xbb8>)
 8013dc0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	3302      	adds	r3, #2
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	b21a      	sxth	r2, r3
 8013dd0:	4b51      	ldr	r3, [pc, #324]	; (8013f18 <Update_Detail+0xbb4>)
 8013dd2:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013dd4:	4b50      	ldr	r3, [pc, #320]	; (8013f18 <Update_Detail+0xbb4>)
 8013dd6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013dda:	f023 0301 	bic.w	r3, r3, #1
 8013dde:	b21a      	sxth	r2, r3
 8013de0:	4b4d      	ldr	r3, [pc, #308]	; (8013f18 <Update_Detail+0xbb4>)
 8013de2:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013de4:	4b4c      	ldr	r3, [pc, #304]	; (8013f18 <Update_Detail+0xbb4>)
 8013de6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013dea:	f023 0301 	bic.w	r3, r3, #1
 8013dee:	b21a      	sxth	r2, r3
 8013df0:	4b49      	ldr	r3, [pc, #292]	; (8013f18 <Update_Detail+0xbb4>)
 8013df2:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013df4:	4b48      	ldr	r3, [pc, #288]	; (8013f18 <Update_Detail+0xbb4>)
 8013df6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013dfa:	f023 0301 	bic.w	r3, r3, #1
 8013dfe:	b21a      	sxth	r2, r3
 8013e00:	4b45      	ldr	r3, [pc, #276]	; (8013f18 <Update_Detail+0xbb4>)
 8013e02:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013e04:	4b45      	ldr	r3, [pc, #276]	; (8013f1c <Update_Detail+0xbb8>)
 8013e06:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	b21a      	sxth	r2, r3
 8013e12:	4b41      	ldr	r3, [pc, #260]	; (8013f18 <Update_Detail+0xbb4>)
 8013e14:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013e16:	4b41      	ldr	r3, [pc, #260]	; (8013f1c <Update_Detail+0xbb8>)
 8013e18:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	3301      	adds	r3, #1
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	b21a      	sxth	r2, r3
 8013e24:	4b3c      	ldr	r3, [pc, #240]	; (8013f18 <Update_Detail+0xbb4>)
 8013e26:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013e28:	4b3c      	ldr	r3, [pc, #240]	; (8013f1c <Update_Detail+0xbb8>)
 8013e2a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d001      	beq.n	8013e36 <Update_Detail+0xad2>
 8013e32:	2202      	movs	r2, #2
 8013e34:	e000      	b.n	8013e38 <Update_Detail+0xad4>
 8013e36:	2200      	movs	r2, #0
 8013e38:	4b37      	ldr	r3, [pc, #220]	; (8013f18 <Update_Detail+0xbb4>)
 8013e3a:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013e3c:	4b37      	ldr	r3, [pc, #220]	; (8013f1c <Update_Detail+0xbb8>)
 8013e3e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d001      	beq.n	8013e4a <Update_Detail+0xae6>
 8013e46:	2202      	movs	r2, #2
 8013e48:	e000      	b.n	8013e4c <Update_Detail+0xae8>
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	4b32      	ldr	r3, [pc, #200]	; (8013f18 <Update_Detail+0xbb4>)
 8013e4e:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013e50:	4b31      	ldr	r3, [pc, #196]	; (8013f18 <Update_Detail+0xbb4>)
 8013e52:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013e56:	461a      	mov	r2, r3
 8013e58:	4b2f      	ldr	r3, [pc, #188]	; (8013f18 <Update_Detail+0xbb4>)
 8013e5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013e62:	4b2e      	ldr	r3, [pc, #184]	; (8013f1c <Update_Detail+0xbb8>)
 8013e64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e68:	461a      	mov	r2, r3
 8013e6a:	4b38      	ldr	r3, [pc, #224]	; (8013f4c <Update_Detail+0xbe8>)
 8013e6c:	5c9b      	ldrb	r3, [r3, r2]
 8013e6e:	461c      	mov	r4, r3
 8013e70:	4b2a      	ldr	r3, [pc, #168]	; (8013f1c <Update_Detail+0xbb8>)
 8013e72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e76:	461a      	mov	r2, r3
 8013e78:	4b35      	ldr	r3, [pc, #212]	; (8013f50 <Update_Detail+0xbec>)
 8013e7a:	5c9b      	ldrb	r3, [r3, r2]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7fd ff2d 	bl	8011cdc <Exp>
 8013e82:	4603      	mov	r3, r0
 8013e84:	fb03 f204 	mul.w	r2, r3, r4
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	fb02 f303 	mul.w	r3, r2, r3
 8013e8e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013e90:	2301      	movs	r3, #1
 8013e92:	9300      	str	r3, [sp, #0]
 8013e94:	2303      	movs	r3, #3
 8013e96:	4a2f      	ldr	r2, [pc, #188]	; (8013f54 <Update_Detail+0xbf0>)
 8013e98:	6939      	ldr	r1, [r7, #16]
 8013e9a:	4824      	ldr	r0, [pc, #144]	; (8013f2c <Update_Detail+0xbc8>)
 8013e9c:	f7fd fe22 	bl	8011ae4 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013ea0:	2307      	movs	r3, #7
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	3b03      	subs	r3, #3
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	b219      	sxth	r1, r3
 8013eaa:	2336      	movs	r3, #54	; 0x36
 8013eac:	9301      	str	r3, [sp, #4]
 8013eae:	2300      	movs	r3, #0
 8013eb0:	9300      	str	r3, [sp, #0]
 8013eb2:	230b      	movs	r3, #11
 8013eb4:	2203      	movs	r2, #3
 8013eb6:	2001      	movs	r0, #1
 8013eb8:	f7fa f812 	bl	800dee0 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013ebc:	2007      	movs	r0, #7
 8013ebe:	4b26      	ldr	r3, [pc, #152]	; (8013f58 <Update_Detail+0xbf4>)
 8013ec0:	2211      	movs	r2, #17
 8013ec2:	2103      	movs	r1, #3
 8013ec4:	f7f9 ff36 	bl	800dd34 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013ec8:	2307      	movs	r3, #7
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	3306      	adds	r3, #6
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	b218      	sxth	r0, r3
 8013ed2:	4b22      	ldr	r3, [pc, #136]	; (8013f5c <Update_Detail+0xbf8>)
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	2103      	movs	r1, #3
 8013ed8:	f7f9 ff2c 	bl	800dd34 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013edc:	2307      	movs	r3, #7
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	332a      	adds	r3, #42	; 0x2a
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	b218      	sxth	r0, r3
 8013ee6:	4b1e      	ldr	r3, [pc, #120]	; (8013f60 <Update_Detail+0xbfc>)
 8013ee8:	2201      	movs	r2, #1
 8013eea:	2103      	movs	r1, #3
 8013eec:	f7f9 ff22 	bl	800dd34 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013ef0:	2307      	movs	r3, #7
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	3312      	adds	r3, #18
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	b218      	sxth	r0, r3
 8013efa:	4b0c      	ldr	r3, [pc, #48]	; (8013f2c <Update_Detail+0xbc8>)
 8013efc:	2201      	movs	r2, #1
 8013efe:	2103      	movs	r1, #3
 8013f00:	f7f9 ff18 	bl	800dd34 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013f04:	4b05      	ldr	r3, [pc, #20]	; (8013f1c <Update_Detail+0xbb8>)
 8013f06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f8 fbae 	bl	800c66c <Set_Base>
      break;
 8013f10:	e1d9      	b.n	80142c6 <Update_Detail+0xf62>
 8013f12:	bf00      	nop
 8013f14:	2000077e 	.word	0x2000077e
 8013f18:	20000140 	.word	0x20000140
 8013f1c:	20000298 	.word	0x20000298
 8013f20:	08002130 	.word	0x08002130
 8013f24:	08002108 	.word	0x08002108
 8013f28:	08001d00 	.word	0x08001d00
 8013f2c:	2000283c 	.word	0x2000283c
 8013f30:	08000998 	.word	0x08000998
 8013f34:	08000990 	.word	0x08000990
 8013f38:	0800215c 	.word	0x0800215c
 8013f3c:	200001d0 	.word	0x200001d0
 8013f40:	08000970 	.word	0x08000970
 8013f44:	08001c4c 	.word	0x08001c4c
 8013f48:	2000055a 	.word	0x2000055a
 8013f4c:	0800211c 	.word	0x0800211c
 8013f50:	080020f4 	.word	0x080020f4
 8013f54:	08001ce8 	.word	0x08001ce8
 8013f58:	08000960 	.word	0x08000960
 8013f5c:	0800097c 	.word	0x0800097c
 8013f60:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013f64:	4bb7      	ldr	r3, [pc, #732]	; (8014244 <Update_Detail+0xee0>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013f6c:	fb02 f303 	mul.w	r3, r2, r3
 8013f70:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013f72:	4bb5      	ldr	r3, [pc, #724]	; (8014248 <Update_Detail+0xee4>)
 8013f74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f78:	2b08      	cmp	r3, #8
 8013f7a:	dc05      	bgt.n	8013f88 <Update_Detail+0xc24>
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	4ab3      	ldr	r2, [pc, #716]	; (801424c <Update_Detail+0xee8>)
 8013f80:	fb02 f303 	mul.w	r3, r2, r3
 8013f84:	60fb      	str	r3, [r7, #12]
 8013f86:	e00a      	b.n	8013f9e <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013f88:	4baf      	ldr	r3, [pc, #700]	; (8014248 <Update_Detail+0xee4>)
 8013f8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f8e:	2b11      	cmp	r3, #17
 8013f90:	dc05      	bgt.n	8013f9e <Update_Detail+0xc3a>
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013f98:	fb02 f303 	mul.w	r3, r2, r3
 8013f9c:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013f9e:	4baa      	ldr	r3, [pc, #680]	; (8014248 <Update_Detail+0xee4>)
 8013fa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4baa      	ldr	r3, [pc, #680]	; (8014250 <Update_Detail+0xeec>)
 8013fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fac:	461a      	mov	r2, r3
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fb4:	4aa4      	ldr	r2, [pc, #656]	; (8014248 <Update_Detail+0xee4>)
 8013fb6:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013fba:	4611      	mov	r1, r2
 8013fbc:	4aa5      	ldr	r2, [pc, #660]	; (8014254 <Update_Detail+0xef0>)
 8013fbe:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fc6:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013fc8:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2201      	movs	r2, #1
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	f000 f9d3 	bl	801437c <DispMeter>
      break;
 8013fd6:	e176      	b.n	80142c6 <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013fd8:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fdc:	887b      	ldrh	r3, [r7, #2]
 8013fde:	b2d9      	uxtb	r1, r3
 8013fe0:	4b9d      	ldr	r3, [pc, #628]	; (8014258 <Update_Detail+0xef4>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2264      	movs	r2, #100	; 0x64
 8013fe6:	fb02 f203 	mul.w	r2, r2, r3
 8013fea:	887b      	ldrh	r3, [r7, #2]
 8013fec:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	f000 f9c3 	bl	801437c <DispMeter>
        break;
 8013ff6:	e166      	b.n	80142c6 <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013ff8:	4b98      	ldr	r3, [pc, #608]	; (801425c <Update_Detail+0xef8>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f113 0f03 	cmn.w	r3, #3
 8014000:	db06      	blt.n	8014010 <Update_Detail+0xcac>
 8014002:	4b96      	ldr	r3, [pc, #600]	; (801425c <Update_Detail+0xef8>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b03      	cmp	r3, #3
 8014008:	dc02      	bgt.n	8014010 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 801400a:	2300      	movs	r3, #0
 801400c:	613b      	str	r3, [r7, #16]
 801400e:	e026      	b.n	801405e <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8014010:	4b8d      	ldr	r3, [pc, #564]	; (8014248 <Update_Detail+0xee4>)
 8014012:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00b      	beq.n	8014032 <Update_Detail+0xcce>
 801401a:	4b8b      	ldr	r3, [pc, #556]	; (8014248 <Update_Detail+0xee4>)
 801401c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014020:	461a      	mov	r2, r3
 8014022:	4b8f      	ldr	r3, [pc, #572]	; (8014260 <Update_Detail+0xefc>)
 8014024:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014028:	4613      	mov	r3, r2
 801402a:	009b      	lsls	r3, r3, #2
 801402c:	4413      	add	r3, r2
 801402e:	00db      	lsls	r3, r3, #3
 8014030:	e00a      	b.n	8014048 <Update_Detail+0xce4>
 8014032:	4b85      	ldr	r3, [pc, #532]	; (8014248 <Update_Detail+0xee4>)
 8014034:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014038:	461a      	mov	r2, r3
 801403a:	4b8a      	ldr	r3, [pc, #552]	; (8014264 <Update_Detail+0xf00>)
 801403c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014040:	4613      	mov	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4413      	add	r3, r2
 8014046:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014048:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 801404a:	4b84      	ldr	r3, [pc, #528]	; (801425c <Update_Detail+0xef8>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	fb02 f303 	mul.w	r3, r2, r3
 8014054:	131a      	asrs	r2, r3, #12
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	fb02 f303 	mul.w	r3, r2, r3
 801405c:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801405e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	2201      	movs	r2, #1
 8014066:	2101      	movs	r1, #1
 8014068:	f000 f988 	bl	801437c <DispMeter>
        break;
 801406c:	e12b      	b.n	80142c6 <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 801406e:	4b7e      	ldr	r3, [pc, #504]	; (8014268 <Update_Detail+0xf04>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	f113 0f06 	cmn.w	r3, #6
 8014076:	db06      	blt.n	8014086 <Update_Detail+0xd22>
 8014078:	4b7b      	ldr	r3, [pc, #492]	; (8014268 <Update_Detail+0xf04>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b06      	cmp	r3, #6
 801407e:	dc02      	bgt.n	8014086 <Update_Detail+0xd22>
          Tmp = 0.00;
 8014080:	2300      	movs	r3, #0
 8014082:	613b      	str	r3, [r7, #16]
 8014084:	e033      	b.n	80140ee <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8014086:	4b70      	ldr	r3, [pc, #448]	; (8014248 <Update_Detail+0xee4>)
 8014088:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801408c:	2b00      	cmp	r3, #0
 801408e:	d00b      	beq.n	80140a8 <Update_Detail+0xd44>
 8014090:	4b6d      	ldr	r3, [pc, #436]	; (8014248 <Update_Detail+0xee4>)
 8014092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014096:	461a      	mov	r2, r3
 8014098:	4b71      	ldr	r3, [pc, #452]	; (8014260 <Update_Detail+0xefc>)
 801409a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801409e:	4613      	mov	r3, r2
 80140a0:	009b      	lsls	r3, r3, #2
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	e00a      	b.n	80140be <Update_Detail+0xd5a>
 80140a8:	4b67      	ldr	r3, [pc, #412]	; (8014248 <Update_Detail+0xee4>)
 80140aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140ae:	461a      	mov	r2, r3
 80140b0:	4b6c      	ldr	r3, [pc, #432]	; (8014264 <Update_Detail+0xf00>)
 80140b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140b6:	4613      	mov	r3, r2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	4413      	add	r3, r2
 80140bc:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 80140be:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 80140c0:	4b6a      	ldr	r3, [pc, #424]	; (801426c <Update_Detail+0xf08>)
 80140c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	fb02 f303 	mul.w	r3, r2, r3
 80140d0:	131a      	asrs	r2, r3, #12
 80140d2:	4b67      	ldr	r3, [pc, #412]	; (8014270 <Update_Detail+0xf0c>)
 80140d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140dc:	6879      	ldr	r1, [r7, #4]
 80140de:	fb01 f303 	mul.w	r3, r1, r3
 80140e2:	131b      	asrs	r3, r3, #12
 80140e4:	1ad2      	subs	r2, r2, r3
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	fb02 f303 	mul.w	r3, r2, r3
 80140ec:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80140ee:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	2201      	movs	r2, #1
 80140f6:	2101      	movs	r1, #1
 80140f8:	f000 f940 	bl	801437c <DispMeter>
        break;
 80140fc:	e0e3      	b.n	80142c6 <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80140fe:	4b5d      	ldr	r3, [pc, #372]	; (8014274 <Update_Detail+0xf10>)
 8014100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014104:	2b00      	cmp	r3, #0
 8014106:	bfb8      	it	lt
 8014108:	425b      	neglt	r3, r3
 801410a:	b29b      	uxth	r3, r3
 801410c:	2b03      	cmp	r3, #3
 801410e:	d802      	bhi.n	8014116 <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8014110:	2300      	movs	r3, #0
 8014112:	613b      	str	r3, [r7, #16]
 8014114:	e02e      	b.n	8014174 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 8014116:	4b4c      	ldr	r3, [pc, #304]	; (8014248 <Update_Detail+0xee4>)
 8014118:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00b      	beq.n	8014138 <Update_Detail+0xdd4>
 8014120:	4b49      	ldr	r3, [pc, #292]	; (8014248 <Update_Detail+0xee4>)
 8014122:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014126:	461a      	mov	r2, r3
 8014128:	4b4d      	ldr	r3, [pc, #308]	; (8014260 <Update_Detail+0xefc>)
 801412a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	e00a      	b.n	801414e <Update_Detail+0xdea>
 8014138:	4b43      	ldr	r3, [pc, #268]	; (8014248 <Update_Detail+0xee4>)
 801413a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801413e:	461a      	mov	r2, r3
 8014140:	4b48      	ldr	r3, [pc, #288]	; (8014264 <Update_Detail+0xf00>)
 8014142:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014146:	4613      	mov	r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 801414e:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014150:	4b48      	ldr	r3, [pc, #288]	; (8014274 <Update_Detail+0xf10>)
 8014152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014156:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	fb02 f303 	mul.w	r3, r2, r3
 8014160:	131b      	asrs	r3, r3, #12
 8014162:	3364      	adds	r3, #100	; 0x64
 8014164:	4a38      	ldr	r2, [pc, #224]	; (8014248 <Update_Detail+0xee4>)
 8014166:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801416a:	1a9a      	subs	r2, r3, r2
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	fb02 f303 	mul.w	r3, r2, r3
 8014172:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8014174:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	2201      	movs	r2, #1
 801417c:	2101      	movs	r1, #1
 801417e:	f000 f8fd 	bl	801437c <DispMeter>
        break;
 8014182:	e0a0      	b.n	80142c6 <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8014184:	4b39      	ldr	r3, [pc, #228]	; (801426c <Update_Detail+0xf08>)
 8014186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801418a:	2b00      	cmp	r3, #0
 801418c:	bfb8      	it	lt
 801418e:	425b      	neglt	r3, r3
 8014190:	b29b      	uxth	r3, r3
 8014192:	2b03      	cmp	r3, #3
 8014194:	d802      	bhi.n	801419c <Update_Detail+0xe38>
          Tmp = 0.00;
 8014196:	2300      	movs	r3, #0
 8014198:	613b      	str	r3, [r7, #16]
 801419a:	e02e      	b.n	80141fa <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 801419c:	4b2a      	ldr	r3, [pc, #168]	; (8014248 <Update_Detail+0xee4>)
 801419e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00b      	beq.n	80141be <Update_Detail+0xe5a>
 80141a6:	4b28      	ldr	r3, [pc, #160]	; (8014248 <Update_Detail+0xee4>)
 80141a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141ac:	461a      	mov	r2, r3
 80141ae:	4b2c      	ldr	r3, [pc, #176]	; (8014260 <Update_Detail+0xefc>)
 80141b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141b4:	4613      	mov	r3, r2
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4413      	add	r3, r2
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	e00a      	b.n	80141d4 <Update_Detail+0xe70>
 80141be:	4b22      	ldr	r3, [pc, #136]	; (8014248 <Update_Detail+0xee4>)
 80141c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80141c4:	461a      	mov	r2, r3
 80141c6:	4b27      	ldr	r3, [pc, #156]	; (8014264 <Update_Detail+0xf00>)
 80141c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141cc:	4613      	mov	r3, r2
 80141ce:	009b      	lsls	r3, r3, #2
 80141d0:	4413      	add	r3, r2
 80141d2:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80141d4:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80141d6:	4b25      	ldr	r3, [pc, #148]	; (801426c <Update_Detail+0xf08>)
 80141d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141dc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	fb02 f303 	mul.w	r3, r2, r3
 80141e6:	131b      	asrs	r3, r3, #12
 80141e8:	3364      	adds	r3, #100	; 0x64
 80141ea:	4a17      	ldr	r2, [pc, #92]	; (8014248 <Update_Detail+0xee4>)
 80141ec:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80141f0:	1a9a      	subs	r2, r3, r2
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	fb02 f303 	mul.w	r3, r2, r3
 80141f8:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80141fa:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	2201      	movs	r2, #1
 8014202:	2101      	movs	r1, #1
 8014204:	f000 f8ba 	bl	801437c <DispMeter>
        break;
 8014208:	e05d      	b.n	80142c6 <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 801420a:	4b19      	ldr	r3, [pc, #100]	; (8014270 <Update_Detail+0xf0c>)
 801420c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014210:	2b00      	cmp	r3, #0
 8014212:	bfb8      	it	lt
 8014214:	425b      	neglt	r3, r3
 8014216:	b29b      	uxth	r3, r3
 8014218:	2b03      	cmp	r3, #3
 801421a:	d802      	bhi.n	8014222 <Update_Detail+0xebe>
          Tmp = 0.00;
 801421c:	2300      	movs	r3, #0
 801421e:	613b      	str	r3, [r7, #16]
 8014220:	e048      	b.n	80142b4 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 8014222:	4b09      	ldr	r3, [pc, #36]	; (8014248 <Update_Detail+0xee4>)
 8014224:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014228:	2b00      	cmp	r3, #0
 801422a:	d025      	beq.n	8014278 <Update_Detail+0xf14>
 801422c:	4b06      	ldr	r3, [pc, #24]	; (8014248 <Update_Detail+0xee4>)
 801422e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014232:	461a      	mov	r2, r3
 8014234:	4b0a      	ldr	r3, [pc, #40]	; (8014260 <Update_Detail+0xefc>)
 8014236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801423a:	4613      	mov	r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	e024      	b.n	801428e <Update_Detail+0xf2a>
 8014244:	20002850 	.word	0x20002850
 8014248:	20000298 	.word	0x20000298
 801424c:	000f4240 	.word	0x000f4240
 8014250:	080022a0 	.word	0x080022a0
 8014254:	08002270 	.word	0x08002270
 8014258:	20006878 	.word	0x20006878
 801425c:	20002864 	.word	0x20002864
 8014260:	20000270 	.word	0x20000270
 8014264:	08001d68 	.word	0x08001d68
 8014268:	20006880 	.word	0x20006880
 801426c:	20002856 	.word	0x20002856
 8014270:	20002868 	.word	0x20002868
 8014274:	20002858 	.word	0x20002858
 8014278:	4b38      	ldr	r3, [pc, #224]	; (801435c <Update_Detail+0xff8>)
 801427a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801427e:	461a      	mov	r2, r3
 8014280:	4b37      	ldr	r3, [pc, #220]	; (8014360 <Update_Detail+0xffc>)
 8014282:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014286:	4613      	mov	r3, r2
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801428e:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014290:	4b34      	ldr	r3, [pc, #208]	; (8014364 <Update_Detail+0x1000>)
 8014292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014296:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	fb02 f303 	mul.w	r3, r2, r3
 80142a0:	131b      	asrs	r3, r3, #12
 80142a2:	3364      	adds	r3, #100	; 0x64
 80142a4:	4a2d      	ldr	r2, [pc, #180]	; (801435c <Update_Detail+0xff8>)
 80142a6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80142aa:	1a9a      	subs	r2, r3, r2
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	fb02 f303 	mul.w	r3, r2, r3
 80142b2:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80142b4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	2200      	movs	r2, #0
 80142bc:	2101      	movs	r1, #1
 80142be:	f000 f85d 	bl	801437c <DispMeter>
        break;
 80142c2:	e000      	b.n	80142c6 <Update_Detail+0xf62>
        break;
 80142c4:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 80142c6:	4b28      	ldr	r3, [pc, #160]	; (8014368 <Update_Detail+0x1004>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d03a      	beq.n	8014344 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80142ce:	4b26      	ldr	r3, [pc, #152]	; (8014368 <Update_Detail+0x1004>)
 80142d0:	2200      	movs	r2, #0
 80142d2:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80142d4:	4b25      	ldr	r3, [pc, #148]	; (801436c <Update_Detail+0x1008>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80142dc:	fb02 f303 	mul.w	r3, r2, r3
 80142e0:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80142e2:	4b1e      	ldr	r3, [pc, #120]	; (801435c <Update_Detail+0xff8>)
 80142e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142e8:	2b08      	cmp	r3, #8
 80142ea:	dc05      	bgt.n	80142f8 <Update_Detail+0xf94>
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	4a20      	ldr	r2, [pc, #128]	; (8014370 <Update_Detail+0x100c>)
 80142f0:	fb02 f303 	mul.w	r3, r2, r3
 80142f4:	60fb      	str	r3, [r7, #12]
 80142f6:	e00a      	b.n	801430e <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80142f8:	4b18      	ldr	r3, [pc, #96]	; (801435c <Update_Detail+0xff8>)
 80142fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142fe:	2b11      	cmp	r3, #17
 8014300:	dc05      	bgt.n	801430e <Update_Detail+0xfaa>
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014308:	fb02 f303 	mul.w	r3, r2, r3
 801430c:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 801430e:	4b13      	ldr	r3, [pc, #76]	; (801435c <Update_Detail+0xff8>)
 8014310:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014314:	461a      	mov	r2, r3
 8014316:	4b17      	ldr	r3, [pc, #92]	; (8014374 <Update_Detail+0x1010>)
 8014318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801431c:	461a      	mov	r2, r3
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	fbb3 f3f2 	udiv	r3, r3, r2
 8014324:	4a0d      	ldr	r2, [pc, #52]	; (801435c <Update_Detail+0xff8>)
 8014326:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801432a:	4611      	mov	r1, r2
 801432c:	4a12      	ldr	r2, [pc, #72]	; (8014378 <Update_Detail+0x1014>)
 801432e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8014332:	fbb3 f3f2 	udiv	r3, r3, r2
 8014336:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	461a      	mov	r2, r3
 801433c:	2101      	movs	r1, #1
 801433e:	2001      	movs	r0, #1
 8014340:	f000 fa08 	bl	8014754 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014344:	8afb      	ldrh	r3, [r7, #22]
 8014346:	3301      	adds	r3, #1
 8014348:	82fb      	strh	r3, [r7, #22]
 801434a:	8afb      	ldrh	r3, [r7, #22]
 801434c:	2b29      	cmp	r3, #41	; 0x29
 801434e:	f67f a849 	bls.w	80133e4 <Update_Detail+0x80>
      }
    }
  }

}
 8014352:	bf00      	nop
 8014354:	bf00      	nop
 8014356:	371c      	adds	r7, #28
 8014358:	46bd      	mov	sp, r7
 801435a:	bd90      	pop	{r4, r7, pc}
 801435c:	20000298 	.word	0x20000298
 8014360:	08001d68 	.word	0x08001d68
 8014364:	20002868 	.word	0x20002868
 8014368:	200001cc 	.word	0x200001cc
 801436c:	20002850 	.word	0x20002850
 8014370:	000f4240 	.word	0x000f4240
 8014374:	080022a0 	.word	0x080022a0
 8014378:	08002270 	.word	0x08002270

0801437c <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af02      	add	r7, sp, #8
 8014382:	603b      	str	r3, [r7, #0]
 8014384:	4603      	mov	r3, r0
 8014386:	80fb      	strh	r3, [r7, #6]
 8014388:	460b      	mov	r3, r1
 801438a:	717b      	strb	r3, [r7, #5]
 801438c:	4613      	mov	r3, r2
 801438e:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8014390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014394:	4619      	mov	r1, r3
 8014396:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801439a:	f7f9 fcb3 	bl	800dd04 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 801439e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143a2:	4a30      	ldr	r2, [pc, #192]	; (8014464 <DispMeter+0xe8>)
 80143a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	3b03      	subs	r3, #3
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	b219      	sxth	r1, r3
 80143b0:	2348      	movs	r3, #72	; 0x48
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	2300      	movs	r3, #0
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	230b      	movs	r3, #11
 80143ba:	2203      	movs	r2, #3
 80143bc:	2001      	movs	r0, #1
 80143be:	f7f9 fd8f 	bl	800dee0 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 80143c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143c6:	4a27      	ldr	r2, [pc, #156]	; (8014464 <DispMeter+0xe8>)
 80143c8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80143cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143d0:	f1a3 0213 	sub.w	r2, r3, #19
 80143d4:	4613      	mov	r3, r2
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	4413      	add	r3, r2
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	4a22      	ldr	r2, [pc, #136]	; (8014468 <DispMeter+0xec>)
 80143de:	4413      	add	r3, r2
 80143e0:	2201      	movs	r2, #1
 80143e2:	2103      	movs	r1, #3
 80143e4:	f7f9 fca6 	bl	800dd34 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 80143e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143ec:	4a1f      	ldr	r2, [pc, #124]	; (801446c <DispMeter+0xf0>)
 80143ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80143f2:	793b      	ldrb	r3, [r7, #4]
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	2303      	movs	r3, #3
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	481d      	ldr	r0, [pc, #116]	; (8014470 <DispMeter+0xf4>)
 80143fc:	f7fd fb72 	bl	8011ae4 <Value2Str>

  if(St)
 8014400:	797b      	ldrb	r3, [r7, #5]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d01c      	beq.n	8014440 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8014406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801440a:	4a16      	ldr	r2, [pc, #88]	; (8014464 <DispMeter+0xe8>)
 801440c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014410:	b29b      	uxth	r3, r3
 8014412:	3318      	adds	r3, #24
 8014414:	b29b      	uxth	r3, r3
 8014416:	b218      	sxth	r0, r3
 8014418:	4b16      	ldr	r3, [pc, #88]	; (8014474 <DispMeter+0xf8>)
 801441a:	2201      	movs	r2, #1
 801441c:	2103      	movs	r1, #3
 801441e:	f7f9 fc89 	bl	800dd34 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014426:	4a0f      	ldr	r2, [pc, #60]	; (8014464 <DispMeter+0xe8>)
 8014428:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801442c:	b29b      	uxth	r3, r3
 801442e:	331e      	adds	r3, #30
 8014430:	b29b      	uxth	r3, r3
 8014432:	b218      	sxth	r0, r3
 8014434:	4b0e      	ldr	r3, [pc, #56]	; (8014470 <DispMeter+0xf4>)
 8014436:	2201      	movs	r2, #1
 8014438:	2103      	movs	r1, #3
 801443a:	f7f9 fc7b 	bl	800dd34 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 801443e:	e00d      	b.n	801445c <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014444:	4a07      	ldr	r2, [pc, #28]	; (8014464 <DispMeter+0xe8>)
 8014446:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801444a:	b29b      	uxth	r3, r3
 801444c:	3318      	adds	r3, #24
 801444e:	b29b      	uxth	r3, r3
 8014450:	b218      	sxth	r0, r3
 8014452:	4b09      	ldr	r3, [pc, #36]	; (8014478 <DispMeter+0xfc>)
 8014454:	2201      	movs	r2, #1
 8014456:	2103      	movs	r1, #3
 8014458:	f7f9 fc6c 	bl	800dd34 <DispStr>
}
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	0800215c 	.word	0x0800215c
 8014468:	08001d18 	.word	0x08001d18
 801446c:	20000298 	.word	0x20000298
 8014470:	2000283c 	.word	0x2000283c
 8014474:	080009d4 	.word	0x080009d4
 8014478:	080009e0 	.word	0x080009e0

0801447c <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8014482:	4b20      	ldr	r3, [pc, #128]	; (8014504 <DispStatus+0x88>)
 8014484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014488:	b29b      	uxth	r3, r3
 801448a:	f003 0301 	and.w	r3, r3, #1
 801448e:	2b00      	cmp	r3, #0
 8014490:	d102      	bne.n	8014498 <DispStatus+0x1c>
 8014492:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014496:	e000      	b.n	801449a <DispStatus+0x1e>
 8014498:	231f      	movs	r3, #31
 801449a:	4619      	mov	r1, r3
 801449c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144a0:	f7f9 fc30 	bl	800dd04 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 80144a4:	4b17      	ldr	r3, [pc, #92]	; (8014504 <DispStatus+0x88>)
 80144a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d10b      	bne.n	80144cc <DispStatus+0x50>
 80144b4:	4b14      	ldr	r3, [pc, #80]	; (8014508 <DispStatus+0x8c>)
 80144b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80144b8:	4b13      	ldr	r3, [pc, #76]	; (8014508 <DispStatus+0x8c>)
 80144ba:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80144be:	4619      	mov	r1, r3
 80144c0:	460b      	mov	r3, r1
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	440b      	add	r3, r1
 80144c6:	005b      	lsls	r3, r3, #1
 80144c8:	4413      	add	r3, r2
 80144ca:	e000      	b.n	80144ce <DispStatus+0x52>
 80144cc:	4b0f      	ldr	r3, [pc, #60]	; (801450c <DispStatus+0x90>)
 80144ce:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 80144d0:	f240 1321 	movw	r3, #289	; 0x121
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	3b03      	subs	r3, #3
 80144d8:	b29b      	uxth	r3, r3
 80144da:	b219      	sxth	r1, r3
 80144dc:	2318      	movs	r3, #24
 80144de:	9301      	str	r3, [sp, #4]
 80144e0:	2301      	movs	r3, #1
 80144e2:	9300      	str	r3, [sp, #0]
 80144e4:	230b      	movs	r3, #11
 80144e6:	22e1      	movs	r2, #225	; 0xe1
 80144e8:	2001      	movs	r0, #1
 80144ea:	f7f9 fcf9 	bl	800dee0 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 80144ee:	f240 1021 	movw	r0, #289	; 0x121
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2201      	movs	r2, #1
 80144f6:	21e1      	movs	r1, #225	; 0xe1
 80144f8:	f7f9 fc1c 	bl	800dd34 <DispStr>
}
 80144fc:	bf00      	nop
 80144fe:	3708      	adds	r7, #8
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	200007a0 	.word	0x200007a0
 8014508:	20000298 	.word	0x20000298
 801450c:	08001cb4 	.word	0x08001cb4

08014510 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b084      	sub	sp, #16
 8014514:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8014516:	4b6a      	ldr	r3, [pc, #424]	; (80146c0 <Update_Windows+0x1b0>)
 8014518:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801451c:	461a      	mov	r2, r3
 801451e:	4b69      	ldr	r3, [pc, #420]	; (80146c4 <Update_Windows+0x1b4>)
 8014520:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014524:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8014526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801452a:	4a67      	ldr	r2, [pc, #412]	; (80146c8 <Update_Windows+0x1b8>)
 801452c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014530:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8014532:	4b66      	ldr	r3, [pc, #408]	; (80146cc <Update_Windows+0x1bc>)
 8014534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014538:	2b01      	cmp	r3, #1
 801453a:	f040 80a9 	bne.w	8014690 <Update_Windows+0x180>
 801453e:	4b64      	ldr	r3, [pc, #400]	; (80146d0 <Update_Windows+0x1c0>)
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	f003 0302 	and.w	r3, r3, #2
 8014546:	2b00      	cmp	r3, #0
 8014548:	f000 80a2 	beq.w	8014690 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 801454c:	4b61      	ldr	r3, [pc, #388]	; (80146d4 <Update_Windows+0x1c4>)
 801454e:	2201      	movs	r2, #1
 8014550:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014552:	4b5b      	ldr	r3, [pc, #364]	; (80146c0 <Update_Windows+0x1b0>)
 8014554:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014558:	461a      	mov	r2, r3
 801455a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801455e:	fb03 f202 	mul.w	r2, r3, r2
 8014562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014566:	fb92 f3f3 	sdiv	r3, r2, r3
 801456a:	b29b      	uxth	r3, r3
 801456c:	3302      	adds	r3, #2
 801456e:	b29b      	uxth	r3, r3
 8014570:	81fb      	strh	r3, [r7, #14]
      x=2;
 8014572:	2302      	movs	r3, #2
 8014574:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014576:	230f      	movs	r3, #15
 8014578:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 801457a:	2300      	movs	r3, #0
 801457c:	817b      	strh	r3, [r7, #10]
 801457e:	e029      	b.n	80145d4 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8014580:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014584:	b293      	uxth	r3, r2
 8014586:	3301      	adds	r3, #1
 8014588:	b29b      	uxth	r3, r3
 801458a:	81bb      	strh	r3, [r7, #12]
 801458c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014590:	4619      	mov	r1, r3
 8014592:	4610      	mov	r0, r2
 8014594:	f7fd fe66 	bl	8012264 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8014598:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801459c:	f7fd feb0 	bl	8012300 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 80145a0:	2300      	movs	r3, #0
 80145a2:	813b      	strh	r3, [r7, #8]
 80145a4:	e008      	b.n	80145b8 <Update_Windows+0xa8>
 80145a6:	201f      	movs	r0, #31
 80145a8:	f7fd feaa 	bl	8012300 <LCD_Set_Pixel>
 80145ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	3301      	adds	r3, #1
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	813b      	strh	r3, [r7, #8]
 80145b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	ddf2      	ble.n	80145a6 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 80145c0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145c4:	f7fd fe9c 	bl	8012300 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 80145c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	3301      	adds	r3, #1
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	817b      	strh	r3, [r7, #10]
 80145d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80145d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80145dc:	dbd0      	blt.n	8014580 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 80145de:	4b3b      	ldr	r3, [pc, #236]	; (80146cc <Update_Windows+0x1bc>)
 80145e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d122      	bne.n	801462e <Update_Windows+0x11e>
 80145e8:	4b3b      	ldr	r3, [pc, #236]	; (80146d8 <Update_Windows+0x1c8>)
 80145ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145ee:	2b09      	cmp	r3, #9
 80145f0:	d11d      	bne.n	801462e <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 80145f2:	4b3a      	ldr	r3, [pc, #232]	; (80146dc <Update_Windows+0x1cc>)
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	2b06      	cmp	r3, #6
 80145fa:	d004      	beq.n	8014606 <Update_Windows+0xf6>
 80145fc:	4b37      	ldr	r3, [pc, #220]	; (80146dc <Update_Windows+0x1cc>)
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	b2db      	uxtb	r3, r3
 8014602:	2b05      	cmp	r3, #5
 8014604:	d113      	bne.n	801462e <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8014606:	4b2e      	ldr	r3, [pc, #184]	; (80146c0 <Update_Windows+0x1b0>)
 8014608:	2200      	movs	r2, #0
 801460a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801460e:	4b2c      	ldr	r3, [pc, #176]	; (80146c0 <Update_Windows+0x1b0>)
 8014610:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014614:	461a      	mov	r2, r3
 8014616:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801461a:	fb03 f202 	mul.w	r2, r3, r2
 801461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014622:	fb92 f3f3 	sdiv	r3, r2, r3
 8014626:	b29b      	uxth	r3, r3
 8014628:	3302      	adds	r3, #2
 801462a:	b29b      	uxth	r3, r3
 801462c:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 801462e:	89fb      	ldrh	r3, [r7, #14]
 8014630:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014632:	230f      	movs	r3, #15
 8014634:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8014636:	2300      	movs	r3, #0
 8014638:	817b      	strh	r3, [r7, #10]
 801463a:	e022      	b.n	8014682 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 801463c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014640:	b293      	uxth	r3, r2
 8014642:	3301      	adds	r3, #1
 8014644:	b29b      	uxth	r3, r3
 8014646:	81bb      	strh	r3, [r7, #12]
 8014648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801464c:	4619      	mov	r1, r3
 801464e:	4610      	mov	r0, r2
 8014650:	f7fd fe08 	bl	8012264 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8014654:	2300      	movs	r3, #0
 8014656:	813b      	strh	r3, [r7, #8]
 8014658:	e009      	b.n	801466e <Update_Windows+0x15e>
 801465a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 801465e:	f7fd fe4f 	bl	8012300 <LCD_Set_Pixel>
 8014662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014666:	b29b      	uxth	r3, r3
 8014668:	3301      	adds	r3, #1
 801466a:	b29b      	uxth	r3, r3
 801466c:	813b      	strh	r3, [r7, #8]
 801466e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014672:	2b03      	cmp	r3, #3
 8014674:	ddf1      	ble.n	801465a <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8014676:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801467a:	b29b      	uxth	r3, r3
 801467c:	3301      	adds	r3, #1
 801467e:	b29b      	uxth	r3, r3
 8014680:	817b      	strh	r3, [r7, #10]
 8014682:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014686:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801468a:	429a      	cmp	r2, r3
 801468c:	dbd6      	blt.n	801463c <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 801468e:	e012      	b.n	80146b6 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8014690:	4b0e      	ldr	r3, [pc, #56]	; (80146cc <Update_Windows+0x1bc>)
 8014692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014696:	2b01      	cmp	r3, #1
 8014698:	d10d      	bne.n	80146b6 <Update_Windows+0x1a6>
 801469a:	4b0d      	ldr	r3, [pc, #52]	; (80146d0 <Update_Windows+0x1c0>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	f003 0302 	and.w	r3, r3, #2
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d107      	bne.n	80146b6 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 80146a6:	4b0b      	ldr	r3, [pc, #44]	; (80146d4 <Update_Windows+0x1c4>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80146ac:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80146b0:	f000 f816 	bl	80146e0 <Clr_WavePosi>
  }
}
 80146b4:	e7ff      	b.n	80146b6 <Update_Windows+0x1a6>
 80146b6:	bf00      	nop
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20000298 	.word	0x20000298
 80146c4:	08002270 	.word	0x08002270
 80146c8:	00015f90 	.word	0x00015f90
 80146cc:	2000079e 	.word	0x2000079e
 80146d0:	2000078e 	.word	0x2000078e
 80146d4:	200007a6 	.word	0x200007a6
 80146d8:	20000538 	.word	0x20000538
 80146dc:	2000077d 	.word	0x2000077d

080146e0 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	4603      	mov	r3, r0
 80146e8:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 80146ea:	2302      	movs	r3, #2
 80146ec:	81fb      	strh	r3, [r7, #14]
  y=14;
 80146ee:	230e      	movs	r3, #14
 80146f0:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 80146f2:	2300      	movs	r3, #0
 80146f4:	81bb      	strh	r3, [r7, #12]
 80146f6:	e022      	b.n	801473e <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 80146f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80146fc:	b293      	uxth	r3, r2
 80146fe:	3301      	adds	r3, #1
 8014700:	b29b      	uxth	r3, r3
 8014702:	81fb      	strh	r3, [r7, #14]
 8014704:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014708:	4619      	mov	r1, r3
 801470a:	4610      	mov	r0, r2
 801470c:	f7fd fdaa 	bl	8012264 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014710:	2300      	movs	r3, #0
 8014712:	817b      	strh	r3, [r7, #10]
 8014714:	e009      	b.n	801472a <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8014716:	88fb      	ldrh	r3, [r7, #6]
 8014718:	4618      	mov	r0, r3
 801471a:	f7fd fdf1 	bl	8012300 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 801471e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014722:	b29b      	uxth	r3, r3
 8014724:	3301      	adds	r3, #1
 8014726:	b29b      	uxth	r3, r3
 8014728:	817b      	strh	r3, [r7, #10]
 801472a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801472e:	2b05      	cmp	r3, #5
 8014730:	ddf1      	ble.n	8014716 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8014732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014736:	b29b      	uxth	r3, r3
 8014738:	3301      	adds	r3, #1
 801473a:	b29b      	uxth	r3, r3
 801473c:	81bb      	strh	r3, [r7, #12]
 801473e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014742:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014746:	dbd7      	blt.n	80146f8 <Clr_WavePosi+0x18>
  }
}
 8014748:	bf00      	nop
 801474a:	bf00      	nop
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
	...

08014754 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af02      	add	r7, sp, #8
 801475a:	4603      	mov	r3, r0
 801475c:	603a      	str	r2, [r7, #0]
 801475e:	71fb      	strb	r3, [r7, #7]
 8014760:	460b      	mov	r3, r1
 8014762:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8014764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014768:	4619      	mov	r1, r3
 801476a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801476e:	f7f9 fac9 	bl	800dd04 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8014772:	23a2      	movs	r3, #162	; 0xa2
 8014774:	b29b      	uxth	r3, r3
 8014776:	3b59      	subs	r3, #89	; 0x59
 8014778:	b29b      	uxth	r3, r3
 801477a:	b219      	sxth	r1, r3
 801477c:	2348      	movs	r3, #72	; 0x48
 801477e:	9301      	str	r3, [sp, #4]
 8014780:	2300      	movs	r3, #0
 8014782:	9300      	str	r3, [sp, #0]
 8014784:	230b      	movs	r3, #11
 8014786:	2203      	movs	r2, #3
 8014788:	2001      	movs	r0, #1
 801478a:	f7f9 fba9 	bl	800dee0 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 801478e:	23a2      	movs	r3, #162	; 0xa2
 8014790:	b29b      	uxth	r3, r3
 8014792:	3b56      	subs	r3, #86	; 0x56
 8014794:	b29b      	uxth	r3, r3
 8014796:	b218      	sxth	r0, r3
 8014798:	4b1a      	ldr	r3, [pc, #104]	; (8014804 <DispFreq+0xb0>)
 801479a:	2201      	movs	r2, #1
 801479c:	2103      	movs	r1, #3
 801479e:	f7f9 fac9 	bl	800dd34 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 80147a2:	4b19      	ldr	r3, [pc, #100]	; (8014808 <DispFreq+0xb4>)
 80147a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80147a8:	79bb      	ldrb	r3, [r7, #6]
 80147aa:	9300      	str	r3, [sp, #0]
 80147ac:	2303      	movs	r3, #3
 80147ae:	6839      	ldr	r1, [r7, #0]
 80147b0:	4816      	ldr	r0, [pc, #88]	; (801480c <DispFreq+0xb8>)
 80147b2:	f7fd f997 	bl	8011ae4 <Value2Str>

  if(St) {
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d014      	beq.n	80147e6 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 80147bc:	23a2      	movs	r3, #162	; 0xa2
 80147be:	b29b      	uxth	r3, r3
 80147c0:	3b3e      	subs	r3, #62	; 0x3e
 80147c2:	b29b      	uxth	r3, r3
 80147c4:	b218      	sxth	r0, r3
 80147c6:	4b12      	ldr	r3, [pc, #72]	; (8014810 <DispFreq+0xbc>)
 80147c8:	2201      	movs	r2, #1
 80147ca:	2103      	movs	r1, #3
 80147cc:	f7f9 fab2 	bl	800dd34 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 80147d0:	23a2      	movs	r3, #162	; 0xa2
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	3b38      	subs	r3, #56	; 0x38
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	b218      	sxth	r0, r3
 80147da:	4b0c      	ldr	r3, [pc, #48]	; (801480c <DispFreq+0xb8>)
 80147dc:	2201      	movs	r2, #1
 80147de:	2103      	movs	r1, #3
 80147e0:	f7f9 faa8 	bl	800dd34 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 80147e4:	e009      	b.n	80147fa <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 80147e6:	23a2      	movs	r3, #162	; 0xa2
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	3b3e      	subs	r3, #62	; 0x3e
 80147ec:	b29b      	uxth	r3, r3
 80147ee:	b218      	sxth	r0, r3
 80147f0:	4b08      	ldr	r3, [pc, #32]	; (8014814 <DispFreq+0xc0>)
 80147f2:	2201      	movs	r2, #1
 80147f4:	2103      	movs	r1, #3
 80147f6:	f7f9 fa9d 	bl	800dd34 <DispStr>
}
 80147fa:	bf00      	nop
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	08001d18 	.word	0x08001d18
 8014808:	20000298 	.word	0x20000298
 801480c:	2000283c 	.word	0x2000283c
 8014810:	080009d4 	.word	0x080009d4
 8014814:	080009ec 	.word	0x080009ec

08014818 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b088      	sub	sp, #32
 801481c:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 801481e:	4b59      	ldr	r3, [pc, #356]	; (8014984 <Show_List+0x16c>)
 8014820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014824:	461a      	mov	r2, r3
 8014826:	4b58      	ldr	r3, [pc, #352]	; (8014988 <Show_List+0x170>)
 8014828:	5c9b      	ldrb	r3, [r3, r2]
 801482a:	b29a      	uxth	r2, r3
 801482c:	4b55      	ldr	r3, [pc, #340]	; (8014984 <Show_List+0x16c>)
 801482e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014832:	4619      	mov	r1, r3
 8014834:	4b55      	ldr	r3, [pc, #340]	; (801498c <Show_List+0x174>)
 8014836:	5c5b      	ldrb	r3, [r3, r1]
 8014838:	b29b      	uxth	r3, r3
 801483a:	4413      	add	r3, r2
 801483c:	b29b      	uxth	r3, r3
 801483e:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014840:	2300      	movs	r3, #0
 8014842:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014844:	4b4f      	ldr	r3, [pc, #316]	; (8014984 <Show_List+0x16c>)
 8014846:	f9b3 3000 	ldrsh.w	r3, [r3]
 801484a:	461a      	mov	r2, r3
 801484c:	4b50      	ldr	r3, [pc, #320]	; (8014990 <Show_List+0x178>)
 801484e:	5c9b      	ldrb	r3, [r3, r2]
 8014850:	b21a      	sxth	r2, r3
 8014852:	4b50      	ldr	r3, [pc, #320]	; (8014994 <Show_List+0x17c>)
 8014854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014858:	4b4a      	ldr	r3, [pc, #296]	; (8014984 <Show_List+0x16c>)
 801485a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801485e:	461a      	mov	r2, r3
 8014860:	4b4d      	ldr	r3, [pc, #308]	; (8014998 <Show_List+0x180>)
 8014862:	5c9b      	ldrb	r3, [r3, r2]
 8014864:	b29b      	uxth	r3, r3
 8014866:	005b      	lsls	r3, r3, #1
 8014868:	b29b      	uxth	r3, r3
 801486a:	b21a      	sxth	r2, r3
 801486c:	4b49      	ldr	r3, [pc, #292]	; (8014994 <Show_List+0x17c>)
 801486e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8014872:	4b44      	ldr	r3, [pc, #272]	; (8014984 <Show_List+0x16c>)
 8014874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014878:	461a      	mov	r2, r3
 801487a:	4b48      	ldr	r3, [pc, #288]	; (801499c <Show_List+0x184>)
 801487c:	5c9b      	ldrb	r3, [r3, r2]
 801487e:	b21a      	sxth	r2, r3
 8014880:	4b44      	ldr	r3, [pc, #272]	; (8014994 <Show_List+0x17c>)
 8014882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8014886:	4b3f      	ldr	r3, [pc, #252]	; (8014984 <Show_List+0x16c>)
 8014888:	f9b3 3000 	ldrsh.w	r3, [r3]
 801488c:	461a      	mov	r2, r3
 801488e:	4b3f      	ldr	r3, [pc, #252]	; (801498c <Show_List+0x174>)
 8014890:	5c9b      	ldrb	r3, [r3, r2]
 8014892:	3301      	adds	r3, #1
 8014894:	b29b      	uxth	r3, r3
 8014896:	015b      	lsls	r3, r3, #5
 8014898:	b29b      	uxth	r3, r3
 801489a:	b21a      	sxth	r2, r3
 801489c:	4b3d      	ldr	r3, [pc, #244]	; (8014994 <Show_List+0x17c>)
 801489e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 80148a2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80148a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80148aa:	f7f9 ff95 	bl	800e7d8 <PopColor>
  Buil_Pop();
 80148ae:	f7f9 fe85 	bl	800e5bc <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80148b2:	4b34      	ldr	r3, [pc, #208]	; (8014984 <Show_List+0x16c>)
 80148b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148b8:	461a      	mov	r2, r3
 80148ba:	4b33      	ldr	r3, [pc, #204]	; (8014988 <Show_List+0x170>)
 80148bc:	5c9b      	ldrb	r3, [r3, r2]
 80148be:	82fb      	strh	r3, [r7, #22]
 80148c0:	e054      	b.n	801496c <Show_List+0x154>
    if(i == MenuNow[Current]) {
 80148c2:	4b30      	ldr	r3, [pc, #192]	; (8014984 <Show_List+0x16c>)
 80148c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148c8:	461a      	mov	r2, r3
 80148ca:	4b35      	ldr	r3, [pc, #212]	; (80149a0 <Show_List+0x188>)
 80148cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80148d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d102      	bne.n	80148de <Show_List+0xc6>
      Flag = INV;
 80148d8:	2301      	movs	r3, #1
 80148da:	757b      	strb	r3, [r7, #21]
 80148dc:	e007      	b.n	80148ee <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 80148de:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80148e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80148e6:	f7f9 ff77 	bl	800e7d8 <PopColor>
      Flag = PRN;
 80148ea:	2300      	movs	r3, #0
 80148ec:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 80148ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80148f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148f6:	1ad3      	subs	r3, r2, r3
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	461a      	mov	r2, r3
 80148fc:	0112      	lsls	r2, r2, #4
 80148fe:	4413      	add	r3, r2
 8014900:	b29b      	uxth	r3, r3
 8014902:	3b0a      	subs	r3, #10
 8014904:	b29b      	uxth	r3, r3
 8014906:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014908:	2304      	movs	r3, #4
 801490a:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 801490c:	463b      	mov	r3, r7
 801490e:	220c      	movs	r2, #12
 8014910:	2100      	movs	r1, #0
 8014912:	4618      	mov	r0, r3
 8014914:	f00e f9d4 	bl	8022cc0 <memset>
    memcpy(str,&ESTR[i],10);
 8014918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801491c:	4613      	mov	r3, r2
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	4413      	add	r3, r2
 8014922:	005b      	lsls	r3, r3, #1
 8014924:	4a1f      	ldr	r2, [pc, #124]	; (80149a4 <Show_List+0x18c>)
 8014926:	1899      	adds	r1, r3, r2
 8014928:	463b      	mov	r3, r7
 801492a:	220a      	movs	r2, #10
 801492c:	4618      	mov	r0, r3
 801492e:	f00e f9b9 	bl	8022ca4 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014932:	463b      	mov	r3, r7
 8014934:	7d7a      	ldrb	r2, [r7, #21]
 8014936:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801493a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801493e:	f7fa f89b 	bl	800ea78 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014942:	463b      	mov	r3, r7
 8014944:	4618      	mov	r0, r3
 8014946:	f7f7 fb7b 	bl	800c040 <strlen>
 801494a:	4603      	mov	r3, r0
 801494c:	b2db      	uxtb	r3, r3
 801494e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014952:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014956:	200a      	movs	r0, #10
 8014958:	9000      	str	r0, [sp, #0]
 801495a:	2000      	movs	r0, #0
 801495c:	f7fa f932 	bl	800ebc4 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014964:	b29b      	uxth	r3, r3
 8014966:	3301      	adds	r3, #1
 8014968:	b29b      	uxth	r3, r3
 801496a:	82fb      	strh	r3, [r7, #22]
 801496c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014974:	429a      	cmp	r2, r3
 8014976:	dba4      	blt.n	80148c2 <Show_List+0xaa>
  }
  List_Pop();
 8014978:	f7f9 ff5e 	bl	800e838 <List_Pop>
}
 801497c:	bf00      	nop
 801497e:	3718      	adds	r7, #24
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	2000079e 	.word	0x2000079e
 8014988:	08001f40 	.word	0x08001f40
 801498c:	08001f48 	.word	0x08001f48
 8014990:	08002144 	.word	0x08002144
 8014994:	20000140 	.word	0x20000140
 8014998:	0800214c 	.word	0x0800214c
 801499c:	08002154 	.word	0x08002154
 80149a0:	20000538 	.word	0x20000538
 80149a4:	08001f50 	.word	0x08001f50

080149a8 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af02      	add	r7, sp, #8
 80149ae:	4603      	mov	r3, r0
 80149b0:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80149b2:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80149b6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80149ba:	f7f9 f9a3 	bl	800dd04 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80149be:	23f8      	movs	r3, #248	; 0xf8
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	3b03      	subs	r3, #3
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	b219      	sxth	r1, r3
 80149c8:	2342      	movs	r3, #66	; 0x42
 80149ca:	9301      	str	r3, [sp, #4]
 80149cc:	2300      	movs	r3, #0
 80149ce:	9300      	str	r3, [sp, #0]
 80149d0:	230b      	movs	r3, #11
 80149d2:	2203      	movs	r2, #3
 80149d4:	2001      	movs	r0, #1
 80149d6:	f7f9 fa83 	bl	800dee0 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 80149da:	20f8      	movs	r0, #248	; 0xf8
 80149dc:	79fb      	ldrb	r3, [r7, #7]
 80149de:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80149e2:	fb02 f303 	mul.w	r3, r2, r3
 80149e6:	4a07      	ldr	r2, [pc, #28]	; (8014a04 <DispFileInfo+0x5c>)
 80149e8:	4413      	add	r3, r2
 80149ea:	2201      	movs	r2, #1
 80149ec:	2103      	movs	r1, #3
 80149ee:	f7f9 f9a1 	bl	800dd34 <DispStr>
  HAL_Delay(2000);
 80149f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80149f6:	f003 fd2f 	bl	8018458 <HAL_Delay>

}
 80149fa:	bf00      	nop
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	080022f0 	.word	0x080022f0

08014a08 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 8014a0e:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014a12:	4619      	mov	r1, r3
 8014a14:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014a18:	f7f9 f974 	bl	800dd04 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014a1c:	4b1a      	ldr	r3, [pc, #104]	; (8014a88 <DispBMPInfo+0x80>)
 8014a1e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014a22:	b2db      	uxtb	r3, r3
 8014a24:	4619      	mov	r1, r3
 8014a26:	4819      	ldr	r0, [pc, #100]	; (8014a8c <DispBMPInfo+0x84>)
 8014a28:	f7fc fff4 	bl	8011a14 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014a2c:	23f8      	movs	r3, #248	; 0xf8
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	3b03      	subs	r3, #3
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	b219      	sxth	r1, r3
 8014a36:	2342      	movs	r3, #66	; 0x42
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	230b      	movs	r3, #11
 8014a40:	2203      	movs	r2, #3
 8014a42:	2001      	movs	r0, #1
 8014a44:	f7f9 fa4c 	bl	800dee0 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014a48:	20f8      	movs	r0, #248	; 0xf8
 8014a4a:	4b11      	ldr	r3, [pc, #68]	; (8014a90 <DispBMPInfo+0x88>)
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	2103      	movs	r1, #3
 8014a50:	f7f9 f970 	bl	800dd34 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014a54:	23f8      	movs	r3, #248	; 0xf8
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	3318      	adds	r3, #24
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	b218      	sxth	r0, r3
 8014a5e:	4b0b      	ldr	r3, [pc, #44]	; (8014a8c <DispBMPInfo+0x84>)
 8014a60:	2201      	movs	r2, #1
 8014a62:	2103      	movs	r1, #3
 8014a64:	f7f9 f966 	bl	800dd34 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014a68:	23f8      	movs	r3, #248	; 0xf8
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	332a      	adds	r3, #42	; 0x2a
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	b218      	sxth	r0, r3
 8014a72:	4b05      	ldr	r3, [pc, #20]	; (8014a88 <DispBMPInfo+0x80>)
 8014a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a78:	2201      	movs	r2, #1
 8014a7a:	2103      	movs	r1, #3
 8014a7c:	f7f9 f95a 	bl	800dd34 <DispStr>
}
 8014a80:	bf00      	nop
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	20000298 	.word	0x20000298
 8014a8c:	2000283c 	.word	0x2000283c
 8014a90:	08000950 	.word	0x08000950

08014a94 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014a94:	b590      	push	{r4, r7, lr}
 8014a96:	b087      	sub	sp, #28
 8014a98:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014a9e:	4ba3      	ldr	r3, [pc, #652]	; (8014d2c <Update_Proc_All+0x298>)
 8014aa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	4ba1      	ldr	r3, [pc, #644]	; (8014d2c <Update_Proc_All+0x298>)
 8014aa8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	4619      	mov	r1, r3
 8014ab0:	0089      	lsls	r1, r1, #2
 8014ab2:	440b      	add	r3, r1
 8014ab4:	005b      	lsls	r3, r3, #1
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	4413      	add	r3, r2
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014abe:	2300      	movs	r3, #0
 8014ac0:	81fb      	strh	r3, [r7, #14]
 8014ac2:	e015      	b.n	8014af0 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ac8:	4a98      	ldr	r2, [pc, #608]	; (8014d2c <Update_Proc_All+0x298>)
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	4413      	add	r3, r2
 8014ace:	799a      	ldrb	r2, [r3, #6]
 8014ad0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ad4:	f042 0220 	orr.w	r2, r2, #32
 8014ad8:	b2d1      	uxtb	r1, r2
 8014ada:	4a94      	ldr	r2, [pc, #592]	; (8014d2c <Update_Proc_All+0x298>)
 8014adc:	00db      	lsls	r3, r3, #3
 8014ade:	4413      	add	r3, r2
 8014ae0:	460a      	mov	r2, r1
 8014ae2:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014ae4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	3301      	adds	r3, #1
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	81fb      	strh	r3, [r7, #14]
 8014af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014af4:	2b29      	cmp	r3, #41	; 0x29
 8014af6:	dde5      	ble.n	8014ac4 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014af8:	2300      	movs	r3, #0
 8014afa:	81fb      	strh	r3, [r7, #14]
 8014afc:	e1be      	b.n	8014e7c <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 8014afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b02:	4a8a      	ldr	r2, [pc, #552]	; (8014d2c <Update_Proc_All+0x298>)
 8014b04:	00db      	lsls	r3, r3, #3
 8014b06:	4413      	add	r3, r2
 8014b08:	799b      	ldrb	r3, [r3, #6]
 8014b0a:	f003 0320 	and.w	r3, r3, #32
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f000 81ad 	beq.w	8014e6e <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b18:	4a84      	ldr	r2, [pc, #528]	; (8014d2c <Update_Proc_All+0x298>)
 8014b1a:	00db      	lsls	r3, r3, #3
 8014b1c:	4413      	add	r3, r2
 8014b1e:	799a      	ldrb	r2, [r3, #6]
 8014b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b24:	f022 0220 	bic.w	r2, r2, #32
 8014b28:	b2d1      	uxtb	r1, r2
 8014b2a:	4a80      	ldr	r2, [pc, #512]	; (8014d2c <Update_Proc_All+0x298>)
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	4413      	add	r3, r2
 8014b30:	460a      	mov	r2, r1
 8014b32:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b38:	2b12      	cmp	r3, #18
 8014b3a:	f300 8199 	bgt.w	8014e70 <Update_Proc_All+0x3dc>
 8014b3e:	2b0d      	cmp	r3, #13
 8014b40:	f280 80ac 	bge.w	8014c9c <Update_Proc_All+0x208>
 8014b44:	2b03      	cmp	r3, #3
 8014b46:	dc02      	bgt.n	8014b4e <Update_Proc_All+0xba>
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	da04      	bge.n	8014b56 <Update_Proc_All+0xc2>
 8014b4c:	e190      	b.n	8014e70 <Update_Proc_All+0x3dc>
 8014b4e:	2b07      	cmp	r3, #7
 8014b50:	f000 815a 	beq.w	8014e08 <Update_Proc_All+0x374>
 8014b54:	e18c      	b.n	8014e70 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014b56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014b60:	f7f9 f8d0 	bl	800dd04 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014b64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d007      	beq.n	8014b7c <Update_Proc_All+0xe8>
 8014b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d003      	beq.n	8014b7c <Update_Proc_All+0xe8>
 8014b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b78:	2b02      	cmp	r3, #2
 8014b7a:	d138      	bne.n	8014bee <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014b7c:	232f      	movs	r3, #47	; 0x2f
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	3b03      	subs	r3, #3
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	b219      	sxth	r1, r3
 8014b86:	232a      	movs	r3, #42	; 0x2a
 8014b88:	9301      	str	r3, [sp, #4]
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	9300      	str	r3, [sp, #0]
 8014b8e:	230b      	movs	r3, #11
 8014b90:	22e1      	movs	r2, #225	; 0xe1
 8014b92:	2001      	movs	r0, #1
 8014b94:	f7f9 f9a4 	bl	800dee0 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014b98:	202f      	movs	r0, #47	; 0x2f
 8014b9a:	4b64      	ldr	r3, [pc, #400]	; (8014d2c <Update_Proc_All+0x298>)
 8014b9c:	6819      	ldr	r1, [r3, #0]
 8014b9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	4413      	add	r3, r2
 8014ba8:	005b      	lsls	r3, r3, #1
 8014baa:	440b      	add	r3, r1
 8014bac:	2201      	movs	r2, #1
 8014bae:	21e1      	movs	r1, #225	; 0xe1
 8014bb0:	f7f9 f8c0 	bl	800dd34 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014bb4:	2047      	movs	r0, #71	; 0x47
 8014bb6:	4b5d      	ldr	r3, [pc, #372]	; (8014d2c <Update_Proc_All+0x298>)
 8014bb8:	689a      	ldr	r2, [r3, #8]
 8014bba:	4b5c      	ldr	r3, [pc, #368]	; (8014d2c <Update_Proc_All+0x298>)
 8014bbc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	005b      	lsls	r3, r3, #1
 8014bc6:	440b      	add	r3, r1
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	4413      	add	r3, r2
 8014bcc:	2201      	movs	r2, #1
 8014bce:	21e1      	movs	r1, #225	; 0xe1
 8014bd0:	f7f9 f8b0 	bl	800dd34 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014bd4:	2020      	movs	r0, #32
 8014bd6:	4b55      	ldr	r3, [pc, #340]	; (8014d2c <Update_Proc_All+0x298>)
 8014bd8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d001      	beq.n	8014be4 <Update_Proc_All+0x150>
 8014be0:	4b53      	ldr	r3, [pc, #332]	; (8014d30 <Update_Proc_All+0x29c>)
 8014be2:	e000      	b.n	8014be6 <Update_Proc_All+0x152>
 8014be4:	4b53      	ldr	r3, [pc, #332]	; (8014d34 <Update_Proc_All+0x2a0>)
 8014be6:	2210      	movs	r2, #16
 8014be8:	21e1      	movs	r1, #225	; 0xe1
 8014bea:	f7f9 fb0b 	bl	800e204 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014bee:	4b4f      	ldr	r3, [pc, #316]	; (8014d2c <Update_Proc_All+0x298>)
 8014bf0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	005b      	lsls	r3, r3, #1
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	b21a      	sxth	r2, r3
 8014bfe:	4b4e      	ldr	r3, [pc, #312]	; (8014d38 <Update_Proc_All+0x2a4>)
 8014c00:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014c02:	4b4d      	ldr	r3, [pc, #308]	; (8014d38 <Update_Proc_All+0x2a4>)
 8014c04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014c08:	b29a      	uxth	r2, r3
 8014c0a:	4b48      	ldr	r3, [pc, #288]	; (8014d2c <Update_Proc_All+0x298>)
 8014c0c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014c10:	3301      	adds	r3, #1
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4413      	add	r3, r2
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	b21a      	sxth	r2, r3
 8014c1e:	4b46      	ldr	r3, [pc, #280]	; (8014d38 <Update_Proc_All+0x2a4>)
 8014c20:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014c22:	4b42      	ldr	r3, [pc, #264]	; (8014d2c <Update_Proc_All+0x298>)
 8014c24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c28:	2b05      	cmp	r3, #5
 8014c2a:	dd01      	ble.n	8014c30 <Update_Proc_All+0x19c>
 8014c2c:	2204      	movs	r2, #4
 8014c2e:	e000      	b.n	8014c32 <Update_Proc_All+0x19e>
 8014c30:	2200      	movs	r2, #0
 8014c32:	4b42      	ldr	r3, [pc, #264]	; (8014d3c <Update_Proc_All+0x2a8>)
 8014c34:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014c36:	4b3d      	ldr	r3, [pc, #244]	; (8014d2c <Update_Proc_All+0x298>)
 8014c38:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014c3c:	4b40      	ldr	r3, [pc, #256]	; (8014d40 <Update_Proc_All+0x2ac>)
 8014c3e:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014c40:	4b3a      	ldr	r3, [pc, #232]	; (8014d2c <Update_Proc_All+0x298>)
 8014c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	dd03      	ble.n	8014c52 <Update_Proc_All+0x1be>
          KindA  = HV;
 8014c4a:	4b3e      	ldr	r3, [pc, #248]	; (8014d44 <Update_Proc_All+0x2b0>)
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	801a      	strh	r2, [r3, #0]
 8014c50:	e002      	b.n	8014c58 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014c52:	4b3c      	ldr	r3, [pc, #240]	; (8014d44 <Update_Proc_All+0x2b0>)
 8014c54:	2200      	movs	r2, #0
 8014c56:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014c58:	4b34      	ldr	r3, [pc, #208]	; (8014d2c <Update_Proc_All+0x298>)
 8014c5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d001      	beq.n	8014c66 <Update_Proc_All+0x1d2>
 8014c62:	2200      	movs	r2, #0
 8014c64:	e000      	b.n	8014c68 <Update_Proc_All+0x1d4>
 8014c66:	2202      	movs	r2, #2
 8014c68:	4b37      	ldr	r3, [pc, #220]	; (8014d48 <Update_Proc_All+0x2b4>)
 8014c6a:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014c6c:	4b35      	ldr	r3, [pc, #212]	; (8014d44 <Update_Proc_All+0x2b0>)
 8014c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c72:	461a      	mov	r2, r3
 8014c74:	4b34      	ldr	r3, [pc, #208]	; (8014d48 <Update_Proc_All+0x2b4>)
 8014c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c7a:	4413      	add	r3, r2
 8014c7c:	4a2f      	ldr	r2, [pc, #188]	; (8014d3c <Update_Proc_All+0x2a8>)
 8014c7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014c82:	4413      	add	r3, r2
 8014c84:	4619      	mov	r1, r3
 8014c86:	2007      	movs	r0, #7
 8014c88:	f7f7 fb74 	bl	800c374 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014c8c:	4b27      	ldr	r3, [pc, #156]	; (8014d2c <Update_Proc_All+0x298>)
 8014c8e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	4618      	mov	r0, r3
 8014c96:	f000 fa0f 	bl	80150b8 <AiPosi>

        break;
 8014c9a:	e0e9      	b.n	8014e70 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014c9c:	f7ff fbee 	bl	801447c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014ca0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014caa:	f7f9 f82b 	bl	800dd04 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cb2:	2b0e      	cmp	r3, #14
 8014cb4:	d003      	beq.n	8014cbe <Update_Proc_All+0x22a>
 8014cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cba:	2b11      	cmp	r3, #17
 8014cbc:	d11a      	bne.n	8014cf4 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014cbe:	23dd      	movs	r3, #221	; 0xdd
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	3b03      	subs	r3, #3
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	b219      	sxth	r1, r3
 8014cc8:	2330      	movs	r3, #48	; 0x30
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	2300      	movs	r3, #0
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	230b      	movs	r3, #11
 8014cd2:	22e1      	movs	r2, #225	; 0xe1
 8014cd4:	2001      	movs	r0, #1
 8014cd6:	f7f9 f903 	bl	800dee0 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014cda:	20dd      	movs	r0, #221	; 0xdd
 8014cdc:	4b13      	ldr	r3, [pc, #76]	; (8014d2c <Update_Proc_All+0x298>)
 8014cde:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d001      	beq.n	8014cea <Update_Proc_All+0x256>
 8014ce6:	4b19      	ldr	r3, [pc, #100]	; (8014d4c <Update_Proc_All+0x2b8>)
 8014ce8:	e000      	b.n	8014cec <Update_Proc_All+0x258>
 8014cea:	4b19      	ldr	r3, [pc, #100]	; (8014d50 <Update_Proc_All+0x2bc>)
 8014cec:	2211      	movs	r2, #17
 8014cee:	21e1      	movs	r1, #225	; 0xe1
 8014cf0:	f7f9 fa88 	bl	800e204 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014cf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cf8:	2b0f      	cmp	r3, #15
 8014cfa:	d132      	bne.n	8014d62 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014cfc:	20cf      	movs	r0, #207	; 0xcf
 8014cfe:	4b0b      	ldr	r3, [pc, #44]	; (8014d2c <Update_Proc_All+0x298>)
 8014d00:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d001      	beq.n	8014d0c <Update_Proc_All+0x278>
 8014d08:	4b12      	ldr	r3, [pc, #72]	; (8014d54 <Update_Proc_All+0x2c0>)
 8014d0a:	e000      	b.n	8014d0e <Update_Proc_All+0x27a>
 8014d0c:	4b09      	ldr	r3, [pc, #36]	; (8014d34 <Update_Proc_All+0x2a0>)
 8014d0e:	2210      	movs	r2, #16
 8014d10:	21e1      	movs	r1, #225	; 0xe1
 8014d12:	f7f9 fa77 	bl	800e204 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014d16:	4b05      	ldr	r3, [pc, #20]	; (8014d2c <Update_Proc_All+0x298>)
 8014d18:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d01d      	beq.n	8014d5c <Update_Proc_All+0x2c8>
 8014d20:	4b0d      	ldr	r3, [pc, #52]	; (8014d58 <Update_Proc_All+0x2c4>)
 8014d22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014d26:	801a      	strh	r2, [r3, #0]
 8014d28:	e01b      	b.n	8014d62 <Update_Proc_All+0x2ce>
 8014d2a:	bf00      	nop
 8014d2c:	20000298 	.word	0x20000298
 8014d30:	08000958 	.word	0x08000958
 8014d34:	0800095c 	.word	0x0800095c
 8014d38:	20000140 	.word	0x20000140
 8014d3c:	20002862 	.word	0x20002862
 8014d40:	2000284a 	.word	0x2000284a
 8014d44:	20006886 	.word	0x20006886
 8014d48:	20006888 	.word	0x20006888
 8014d4c:	08000988 	.word	0x08000988
 8014d50:	0800098c 	.word	0x0800098c
 8014d54:	0800099c 	.word	0x0800099c
 8014d58:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014d5c:	4b4c      	ldr	r3, [pc, #304]	; (8014e90 <Update_Proc_All+0x3fc>)
 8014d5e:	2200      	movs	r2, #0
 8014d60:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014d62:	4b4c      	ldr	r3, [pc, #304]	; (8014e94 <Update_Proc_All+0x400>)
 8014d64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	4b4b      	ldr	r3, [pc, #300]	; (8014e98 <Update_Proc_All+0x404>)
 8014d6c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	4413      	add	r3, r2
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	b21a      	sxth	r2, r3
 8014d7c:	4b45      	ldr	r3, [pc, #276]	; (8014e94 <Update_Proc_All+0x400>)
 8014d7e:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014d80:	4b45      	ldr	r3, [pc, #276]	; (8014e98 <Update_Proc_All+0x404>)
 8014d82:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014d86:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d8c:	4a43      	ldr	r2, [pc, #268]	; (8014e9c <Update_Proc_All+0x408>)
 8014d8e:	5cd3      	ldrb	r3, [r2, r3]
 8014d90:	461c      	mov	r4, r3
 8014d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d96:	4a42      	ldr	r2, [pc, #264]	; (8014ea0 <Update_Proc_All+0x40c>)
 8014d98:	5cd3      	ldrb	r3, [r2, r3]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7fc ff9e 	bl	8011cdc <Exp>
 8014da0:	4603      	mov	r3, r0
 8014da2:	fb03 f204 	mul.w	r2, r3, r4
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	fb02 f303 	mul.w	r3, r2, r3
 8014dac:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014dae:	2301      	movs	r3, #1
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	2302      	movs	r3, #2
 8014db4:	4a3b      	ldr	r2, [pc, #236]	; (8014ea4 <Update_Proc_All+0x410>)
 8014db6:	68b9      	ldr	r1, [r7, #8]
 8014db8:	483b      	ldr	r0, [pc, #236]	; (8014ea8 <Update_Proc_All+0x414>)
 8014dba:	f7fc fe93 	bl	8011ae4 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014dbe:	20e7      	movs	r0, #231	; 0xe7
 8014dc0:	4b3a      	ldr	r3, [pc, #232]	; (8014eac <Update_Proc_All+0x418>)
 8014dc2:	2211      	movs	r2, #17
 8014dc4:	21e1      	movs	r1, #225	; 0xe1
 8014dc6:	f7f9 fa1d 	bl	800e204 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014dca:	23e7      	movs	r3, #231	; 0xe7
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	3309      	adds	r3, #9
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	b218      	sxth	r0, r3
 8014dd4:	4b36      	ldr	r3, [pc, #216]	; (8014eb0 <Update_Proc_All+0x41c>)
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	21e1      	movs	r1, #225	; 0xe1
 8014dda:	f7f8 ffab 	bl	800dd34 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014dde:	23e7      	movs	r3, #231	; 0xe7
 8014de0:	b29b      	uxth	r3, r3
 8014de2:	3309      	adds	r3, #9
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	b218      	sxth	r0, r3
 8014de8:	4b2f      	ldr	r3, [pc, #188]	; (8014ea8 <Update_Proc_All+0x414>)
 8014dea:	2201      	movs	r2, #1
 8014dec:	21e1      	movs	r1, #225	; 0xe1
 8014dee:	f7f8 ffa1 	bl	800dd34 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014df2:	4b29      	ldr	r3, [pc, #164]	; (8014e98 <Update_Proc_All+0x404>)
 8014df4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d001      	beq.n	8014e00 <Update_Proc_All+0x36c>
 8014dfc:	2202      	movs	r2, #2
 8014dfe:	e000      	b.n	8014e02 <Update_Proc_All+0x36e>
 8014e00:	2200      	movs	r2, #0
 8014e02:	4b24      	ldr	r3, [pc, #144]	; (8014e94 <Update_Proc_All+0x400>)
 8014e04:	811a      	strh	r2, [r3, #8]
        break;
 8014e06:	e033      	b.n	8014e70 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014e08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014e12:	f7f8 ff77 	bl	800dd04 <SetColor>
        if(i == TIM_BASE)
 8014e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e1a:	2b07      	cmp	r3, #7
 8014e1c:	d120      	bne.n	8014e60 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e22:	4a24      	ldr	r2, [pc, #144]	; (8014eb4 <Update_Proc_All+0x420>)
 8014e24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	3b03      	subs	r3, #3
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	b219      	sxth	r1, r3
 8014e30:	231e      	movs	r3, #30
 8014e32:	9301      	str	r3, [sp, #4]
 8014e34:	2302      	movs	r3, #2
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	230b      	movs	r3, #11
 8014e3a:	22e1      	movs	r2, #225	; 0xe1
 8014e3c:	2001      	movs	r0, #1
 8014e3e:	f7f9 f84f 	bl	800dee0 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e46:	4a1b      	ldr	r2, [pc, #108]	; (8014eb4 <Update_Proc_All+0x420>)
 8014e48:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014e4c:	4b12      	ldr	r3, [pc, #72]	; (8014e98 <Update_Proc_All+0x404>)
 8014e4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e52:	00db      	lsls	r3, r3, #3
 8014e54:	4a18      	ldr	r2, [pc, #96]	; (8014eb8 <Update_Proc_All+0x424>)
 8014e56:	4413      	add	r3, r2
 8014e58:	2201      	movs	r2, #1
 8014e5a:	21e1      	movs	r1, #225	; 0xe1
 8014e5c:	f7f8 ff6a 	bl	800dd34 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014e60:	4b0d      	ldr	r3, [pc, #52]	; (8014e98 <Update_Proc_All+0x404>)
 8014e62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f7 fc00 	bl	800c66c <Set_Base>
      break;
 8014e6c:	e000      	b.n	8014e70 <Update_Proc_All+0x3dc>

      }
    }
 8014e6e:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	3301      	adds	r3, #1
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	81fb      	strh	r3, [r7, #14]
 8014e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014e80:	2b29      	cmp	r3, #41	; 0x29
 8014e82:	f77f ae3c 	ble.w	8014afe <Update_Proc_All+0x6a>
  }
}
 8014e86:	bf00      	nop
 8014e88:	bf00      	nop
 8014e8a:	3714      	adds	r7, #20
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd90      	pop	{r4, r7, pc}
 8014e90:	2000077e 	.word	0x2000077e
 8014e94:	20000140 	.word	0x20000140
 8014e98:	20000298 	.word	0x20000298
 8014e9c:	08002130 	.word	0x08002130
 8014ea0:	08002108 	.word	0x08002108
 8014ea4:	08001d0c 	.word	0x08001d0c
 8014ea8:	2000283c 	.word	0x2000283c
 8014eac:	08000998 	.word	0x08000998
 8014eb0:	08000990 	.word	0x08000990
 8014eb4:	0800215c 	.word	0x0800215c
 8014eb8:	200001d0 	.word	0x200001d0

08014ebc <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	807b      	strh	r3, [r7, #2]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014eca:	f000 f8b1 	bl	8015030 <Analys>
  for(i=0; i<100; i++)
 8014ece:	2300      	movs	r3, #0
 8014ed0:	80fb      	strh	r3, [r7, #6]
 8014ed2:	e051      	b.n	8014f78 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014ed4:	2064      	movs	r0, #100	; 0x64
 8014ed6:	f000 f8ef 	bl	80150b8 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014eda:	200a      	movs	r0, #10
 8014edc:	f003 fabc 	bl	8018458 <HAL_Delay>
    Analys();
 8014ee0:	f000 f8a6 	bl	8015030 <Analys>
    TmpA = 2048-Vavg;
 8014ee4:	4b28      	ldr	r3, [pc, #160]	; (8014f88 <Align_Set+0xcc>)
 8014ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014ef0:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014ef2:	887b      	ldrh	r3, [r7, #2]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d036      	beq.n	8014f66 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014ef8:	4b24      	ldr	r3, [pc, #144]	; (8014f8c <Align_Set+0xd0>)
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	4b24      	ldr	r3, [pc, #144]	; (8014f90 <Align_Set+0xd4>)
 8014efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f02:	4619      	mov	r1, r3
 8014f04:	4b23      	ldr	r3, [pc, #140]	; (8014f94 <Align_Set+0xd8>)
 8014f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	bf14      	ite	ne
 8014f0e:	2301      	movne	r3, #1
 8014f10:	2300      	moveq	r3, #0
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	440b      	add	r3, r1
 8014f16:	005b      	lsls	r3, r3, #1
 8014f18:	4413      	add	r3, r2
 8014f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	887b      	ldrh	r3, [r7, #2]
 8014f22:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014f26:	fb01 f303 	mul.w	r3, r1, r3
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	da01      	bge.n	8014f32 <Align_Set+0x76>
 8014f2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014f32:	12db      	asrs	r3, r3, #11
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	4413      	add	r3, r2
 8014f38:	b299      	uxth	r1, r3
 8014f3a:	4b14      	ldr	r3, [pc, #80]	; (8014f8c <Align_Set+0xd0>)
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	4b14      	ldr	r3, [pc, #80]	; (8014f90 <Align_Set+0xd4>)
 8014f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f44:	4618      	mov	r0, r3
 8014f46:	4b13      	ldr	r3, [pc, #76]	; (8014f94 <Align_Set+0xd8>)
 8014f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	bf14      	ite	ne
 8014f50:	2301      	movne	r3, #1
 8014f52:	2300      	moveq	r3, #0
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	4403      	add	r3, r0
 8014f58:	005b      	lsls	r3, r3, #1
 8014f5a:	4413      	add	r3, r2
 8014f5c:	b20a      	sxth	r2, r1
 8014f5e:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014f60:	2300      	movs	r3, #0
 8014f62:	80bb      	strh	r3, [r7, #4]
 8014f64:	e002      	b.n	8014f6c <Align_Set+0xb0>
    }
    else
      StA++;
 8014f66:	88bb      	ldrh	r3, [r7, #4]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014f6c:	88bb      	ldrh	r3, [r7, #4]
 8014f6e:	2b04      	cmp	r3, #4
 8014f70:	d806      	bhi.n	8014f80 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014f72:	88fb      	ldrh	r3, [r7, #6]
 8014f74:	3301      	adds	r3, #1
 8014f76:	80fb      	strh	r3, [r7, #6]
 8014f78:	88fb      	ldrh	r3, [r7, #6]
 8014f7a:	2b63      	cmp	r3, #99	; 0x63
 8014f7c:	d9aa      	bls.n	8014ed4 <Align_Set+0x18>
 8014f7e:	e000      	b.n	8014f82 <Align_Set+0xc6>
    	return;
 8014f80:	bf00      	nop
  }

}
 8014f82:	3708      	adds	r7, #8
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}
 8014f88:	20002858 	.word	0x20002858
 8014f8c:	20000578 	.word	0x20000578
 8014f90:	20006886 	.word	0x20006886
 8014f94:	20002862 	.word	0x20002862

08014f98 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014f9c:	4b21      	ldr	r3, [pc, #132]	; (8015024 <Zero_Align+0x8c>)
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014fa2:	4b21      	ldr	r3, [pc, #132]	; (8015028 <Zero_Align+0x90>)
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014fa8:	4b20      	ldr	r3, [pc, #128]	; (801502c <Zero_Align+0x94>)
 8014faa:	2204      	movs	r2, #4
 8014fac:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014fae:	2105      	movs	r1, #5
 8014fb0:	2007      	movs	r0, #7
 8014fb2:	f7f7 f9df 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014fb6:	2064      	movs	r0, #100	; 0x64
 8014fb8:	f000 f87e 	bl	80150b8 <AiPosi>
  HAL_Delay(1000);
 8014fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014fc0:	f003 fa4a 	bl	8018458 <HAL_Delay>
  Align_Set();
 8014fc4:	f7ff ff7a 	bl	8014ebc <Align_Set>

  GainA  = 0;//0x20;
 8014fc8:	4b16      	ldr	r3, [pc, #88]	; (8015024 <Zero_Align+0x8c>)
 8014fca:	2200      	movs	r2, #0
 8014fcc:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014fce:	4b16      	ldr	r3, [pc, #88]	; (8015028 <Zero_Align+0x90>)
 8014fd0:	2201      	movs	r2, #1
 8014fd2:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014fd4:	4b15      	ldr	r3, [pc, #84]	; (801502c <Zero_Align+0x94>)
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014fda:	2101      	movs	r1, #1
 8014fdc:	2007      	movs	r0, #7
 8014fde:	f7f7 f9c9 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 8014fe2:	2064      	movs	r0, #100	; 0x64
 8014fe4:	f000 f868 	bl	80150b8 <AiPosi>
  HAL_Delay(1000);
 8014fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014fec:	f003 fa34 	bl	8018458 <HAL_Delay>
  Align_Set();
 8014ff0:	f7ff ff64 	bl	8014ebc <Align_Set>

  GainA  = 0;//0x20;
 8014ff4:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <Zero_Align+0x8c>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014ffa:	4b0b      	ldr	r3, [pc, #44]	; (8015028 <Zero_Align+0x90>)
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <Zero_Align+0x94>)
 8015002:	2200      	movs	r2, #0
 8015004:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8015006:	2100      	movs	r1, #0
 8015008:	2007      	movs	r0, #7
 801500a:	f7f7 f9b3 	bl	800c374 <BIOS_Ctrl>
  AiPosi(100);
 801500e:	2064      	movs	r0, #100	; 0x64
 8015010:	f000 f852 	bl	80150b8 <AiPosi>
  HAL_Delay(1000);
 8015014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015018:	f003 fa1e 	bl	8018458 <HAL_Delay>
  Align_Set();
 801501c:	f7ff ff4e 	bl	8014ebc <Align_Set>

}
 8015020:	bf00      	nop
 8015022:	bd80      	pop	{r7, pc}
 8015024:	2000284a 	.word	0x2000284a
 8015028:	20006886 	.word	0x20006886
 801502c:	20002862 	.word	0x20002862

08015030 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8015036:	2300      	movs	r3, #0
 8015038:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 801503a:	2100      	movs	r1, #0
 801503c:	2004      	movs	r0, #4
 801503e:	f7f7 f999 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8015042:	f240 21cf 	movw	r1, #719	; 0x2cf
 8015046:	2005      	movs	r0, #5
 8015048:	f7f7 f994 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 801504c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015050:	2006      	movs	r0, #6
 8015052:	f7f7 f98f 	bl	800c374 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8015056:	2101      	movs	r1, #1
 8015058:	2004      	movs	r0, #4
 801505a:	f7f7 f98b 	bl	800c374 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 801505e:	bf00      	nop
 8015060:	2000      	movs	r0, #0
 8015062:	f7f7 f971 	bl	800c348 <BIOS_Info>
 8015066:	4603      	mov	r3, r0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d1f9      	bne.n	8015060 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 801506c:	2302      	movs	r3, #2
 801506e:	607b      	str	r3, [r7, #4]
 8015070:	e00a      	b.n	8015088 <Analys+0x58>
    SumA += Sampl[i];
 8015072:	4a0e      	ldr	r2, [pc, #56]	; (80150ac <Analys+0x7c>)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801507a:	461a      	mov	r2, r3
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	4413      	add	r3, r2
 8015080:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	3301      	adds	r3, #1
 8015086:	607b      	str	r3, [r7, #4]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f640 72a1 	movw	r2, #4001	; 0xfa1
 801508e:	4293      	cmp	r3, r2
 8015090:	d9ef      	bls.n	8015072 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	4a06      	ldr	r2, [pc, #24]	; (80150b0 <Analys+0x80>)
 8015096:	fba2 2303 	umull	r2, r3, r2, r3
 801509a:	0a1b      	lsrs	r3, r3, #8
 801509c:	b21a      	sxth	r2, r3
 801509e:	4b05      	ldr	r3, [pc, #20]	; (80150b4 <Analys+0x84>)
 80150a0:	801a      	strh	r2, [r3, #0]
}
 80150a2:	bf00      	nop
 80150a4:	3708      	adds	r7, #8
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	20002870 	.word	0x20002870
 80150b0:	10624dd3 	.word	0x10624dd3
 80150b4:	20002858 	.word	0x20002858

080150b8 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	4603      	mov	r3, r0
 80150c0:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 80150c2:	79fb      	ldrb	r3, [r7, #7]
 80150c4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80150c8:	4b28      	ldr	r3, [pc, #160]	; (801516c <AiPosi+0xb4>)
 80150ca:	6819      	ldr	r1, [r3, #0]
 80150cc:	4b28      	ldr	r3, [pc, #160]	; (8015170 <AiPosi+0xb8>)
 80150ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150d2:	4618      	mov	r0, r3
 80150d4:	4b27      	ldr	r3, [pc, #156]	; (8015174 <AiPosi+0xbc>)
 80150d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	bf14      	ite	ne
 80150de:	2301      	movne	r3, #1
 80150e0:	2300      	moveq	r3, #0
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	4403      	add	r3, r0
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	440b      	add	r3, r1
 80150ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150ee:	0fd9      	lsrs	r1, r3, #31
 80150f0:	440b      	add	r3, r1
 80150f2:	105b      	asrs	r3, r3, #1
 80150f4:	b21b      	sxth	r3, r3
 80150f6:	fb03 f302 	mul.w	r3, r3, r2
 80150fa:	4a1f      	ldr	r2, [pc, #124]	; (8015178 <AiPosi+0xc0>)
 80150fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015100:	4611      	mov	r1, r2
 8015102:	4a1e      	ldr	r2, [pc, #120]	; (801517c <AiPosi+0xc4>)
 8015104:	5c52      	ldrb	r2, [r2, r1]
 8015106:	fb02 f303 	mul.w	r3, r2, r3
 801510a:	4a1d      	ldr	r2, [pc, #116]	; (8015180 <AiPosi+0xc8>)
 801510c:	6811      	ldr	r1, [r2, #0]
 801510e:	4a18      	ldr	r2, [pc, #96]	; (8015170 <AiPosi+0xb8>)
 8015110:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015114:	4610      	mov	r0, r2
 8015116:	4a17      	ldr	r2, [pc, #92]	; (8015174 <AiPosi+0xbc>)
 8015118:	f9b2 2000 	ldrsh.w	r2, [r2]
 801511c:	2a00      	cmp	r2, #0
 801511e:	bf14      	ite	ne
 8015120:	2201      	movne	r2, #1
 8015122:	2200      	moveq	r2, #0
 8015124:	b2d2      	uxtb	r2, r2
 8015126:	4402      	add	r2, r0
 8015128:	0052      	lsls	r2, r2, #1
 801512a:	440a      	add	r2, r1
 801512c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015130:	fb93 f3f2 	sdiv	r3, r3, r2
 8015134:	4a0d      	ldr	r2, [pc, #52]	; (801516c <AiPosi+0xb4>)
 8015136:	6811      	ldr	r1, [r2, #0]
 8015138:	4a0d      	ldr	r2, [pc, #52]	; (8015170 <AiPosi+0xb8>)
 801513a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801513e:	4610      	mov	r0, r2
 8015140:	4a0c      	ldr	r2, [pc, #48]	; (8015174 <AiPosi+0xbc>)
 8015142:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015146:	2a00      	cmp	r2, #0
 8015148:	bf14      	ite	ne
 801514a:	2201      	movne	r2, #1
 801514c:	2200      	moveq	r2, #0
 801514e:	b2d2      	uxtb	r2, r2
 8015150:	4402      	add	r2, r0
 8015152:	0052      	lsls	r2, r2, #1
 8015154:	440a      	add	r2, r1
 8015156:	f9b2 2000 	ldrsh.w	r2, [r2]
 801515a:	4413      	add	r3, r2
 801515c:	4619      	mov	r1, r3
 801515e:	2008      	movs	r0, #8
 8015160:	f7f7 f908 	bl	800c374 <BIOS_Ctrl>
}
 8015164:	bf00      	nop
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	20000578 	.word	0x20000578
 8015170:	20006886 	.word	0x20006886
 8015174:	20002862 	.word	0x20002862
 8015178:	2000284a 	.word	0x2000284a
 801517c:	20000560 	.word	0x20000560
 8015180:	2000057c 	.word	0x2000057c

08015184 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b094      	sub	sp, #80	; 0x50
 8015188:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801518a:	4bb0      	ldr	r3, [pc, #704]	; (801544c <WaveProcess+0x2c8>)
 801518c:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801518e:	4bb0      	ldr	r3, [pc, #704]	; (8015450 <WaveProcess+0x2cc>)
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	4bb0      	ldr	r3, [pc, #704]	; (8015454 <WaveProcess+0x2d0>)
 8015194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015198:	4619      	mov	r1, r3
 801519a:	4baf      	ldr	r3, [pc, #700]	; (8015458 <WaveProcess+0x2d4>)
 801519c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	bf14      	ite	ne
 80151a4:	2301      	movne	r3, #1
 80151a6:	2300      	moveq	r3, #0
 80151a8:	b2db      	uxtb	r3, r3
 80151aa:	440b      	add	r3, r1
 80151ac:	005b      	lsls	r3, r3, #1
 80151ae:	4413      	add	r3, r2
 80151b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	4aa9      	ldr	r2, [pc, #676]	; (801545c <WaveProcess+0x2d8>)
 80151b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80151bc:	4611      	mov	r1, r2
 80151be:	4aa8      	ldr	r2, [pc, #672]	; (8015460 <WaveProcess+0x2dc>)
 80151c0:	5c52      	ldrb	r2, [r2, r1]
 80151c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80151c6:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80151ce:	2300      	movs	r3, #0
 80151d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80151d2:	2300      	movs	r3, #0
 80151d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80151d6:	2300      	movs	r3, #0
 80151d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80151da:	2302      	movs	r3, #2
 80151dc:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80151de:	2300      	movs	r3, #0
 80151e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80151e2:	2300      	movs	r3, #0
 80151e4:	867b      	strh	r3, [r7, #50]	; 0x32
 80151e6:	2300      	movs	r3, #0
 80151e8:	863b      	strh	r3, [r7, #48]	; 0x30
 80151ea:	2300      	movs	r3, #0
 80151ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80151ee:	2300      	movs	r3, #0
 80151f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80151f2:	f04f 33ff 	mov.w	r3, #4294967295
 80151f6:	627b      	str	r3, [r7, #36]	; 0x24
 80151f8:	2300      	movs	r3, #0
 80151fa:	623b      	str	r3, [r7, #32]
 80151fc:	2300      	movs	r3, #0
 80151fe:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 8015200:	4b98      	ldr	r3, [pc, #608]	; (8015464 <WaveProcess+0x2e0>)
 8015202:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8015206:	461a      	mov	r2, r3
 8015208:	4b97      	ldr	r3, [pc, #604]	; (8015468 <WaveProcess+0x2e4>)
 801520a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801520e:	b29b      	uxth	r3, r3
 8015210:	3b01      	subs	r3, #1
 8015212:	b29b      	uxth	r3, r3
 8015214:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 8015216:	2397      	movs	r3, #151	; 0x97
 8015218:	81fb      	strh	r3, [r7, #14]
 801521a:	4b92      	ldr	r3, [pc, #584]	; (8015464 <WaveProcess+0x2e0>)
 801521c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015220:	f003 0301 	and.w	r3, r3, #1
 8015224:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 8015226:	4b8f      	ldr	r3, [pc, #572]	; (8015464 <WaveProcess+0x2e0>)
 8015228:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801522c:	461a      	mov	r2, r3
 801522e:	4b8f      	ldr	r3, [pc, #572]	; (801546c <WaveProcess+0x2e8>)
 8015230:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015234:	817b      	strh	r3, [r7, #10]
 8015236:	4b8b      	ldr	r3, [pc, #556]	; (8015464 <WaveProcess+0x2e0>)
 8015238:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801523c:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 801523e:	4b89      	ldr	r3, [pc, #548]	; (8015464 <WaveProcess+0x2e0>)
 8015240:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8015244:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 8015246:	4b8a      	ldr	r3, [pc, #552]	; (8015470 <WaveProcess+0x2ec>)
 8015248:	f9b3 3000 	ldrsh.w	r3, [r3]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d13c      	bne.n	80152ca <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015250:	4b88      	ldr	r3, [pc, #544]	; (8015474 <WaveProcess+0x2f0>)
 8015252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015256:	461a      	mov	r2, r3
 8015258:	4b87      	ldr	r3, [pc, #540]	; (8015478 <WaveProcess+0x2f4>)
 801525a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801525e:	4413      	add	r3, r2
 8015260:	4a80      	ldr	r2, [pc, #512]	; (8015464 <WaveProcess+0x2e0>)
 8015262:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015266:	1a9b      	subs	r3, r3, r2
 8015268:	3b64      	subs	r3, #100	; 0x64
 801526a:	031a      	lsls	r2, r3, #12
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015272:	b29b      	uxth	r3, r3
 8015274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015278:	b29b      	uxth	r3, r3
 801527a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801527e:	4b7d      	ldr	r3, [pc, #500]	; (8015474 <WaveProcess+0x2f0>)
 8015280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015284:	461a      	mov	r2, r3
 8015286:	4b7c      	ldr	r3, [pc, #496]	; (8015478 <WaveProcess+0x2f4>)
 8015288:	f9b3 3000 	ldrsh.w	r3, [r3]
 801528c:	4413      	add	r3, r2
 801528e:	4a75      	ldr	r2, [pc, #468]	; (8015464 <WaveProcess+0x2e0>)
 8015290:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015294:	4413      	add	r3, r2
 8015296:	3b64      	subs	r3, #100	; 0x64
 8015298:	031a      	lsls	r2, r3, #12
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	fb92 f3f3 	sdiv	r3, r2, r3
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80152ac:	4b6d      	ldr	r3, [pc, #436]	; (8015464 <WaveProcess+0x2e0>)
 80152ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80152b2:	3b64      	subs	r3, #100	; 0x64
 80152b4:	031a      	lsls	r2, r3, #12
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80152bc:	b29b      	uxth	r3, r3
 80152be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80152c8:	e03b      	b.n	8015342 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80152ca:	4b66      	ldr	r3, [pc, #408]	; (8015464 <WaveProcess+0x2e0>)
 80152cc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80152d0:	461a      	mov	r2, r3
 80152d2:	4b64      	ldr	r3, [pc, #400]	; (8015464 <WaveProcess+0x2e0>)
 80152d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80152d8:	4413      	add	r3, r2
 80152da:	4a62      	ldr	r2, [pc, #392]	; (8015464 <WaveProcess+0x2e0>)
 80152dc:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80152e0:	1a9b      	subs	r3, r3, r2
 80152e2:	3b64      	subs	r3, #100	; 0x64
 80152e4:	031a      	lsls	r2, r3, #12
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80152f8:	4b5a      	ldr	r3, [pc, #360]	; (8015464 <WaveProcess+0x2e0>)
 80152fa:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80152fe:	461a      	mov	r2, r3
 8015300:	4b58      	ldr	r3, [pc, #352]	; (8015464 <WaveProcess+0x2e0>)
 8015302:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015306:	4413      	add	r3, r2
 8015308:	4a56      	ldr	r2, [pc, #344]	; (8015464 <WaveProcess+0x2e0>)
 801530a:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801530e:	4413      	add	r3, r2
 8015310:	3b64      	subs	r3, #100	; 0x64
 8015312:	031a      	lsls	r2, r3, #12
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	fb92 f3f3 	sdiv	r3, r2, r3
 801531a:	b29b      	uxth	r3, r3
 801531c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015320:	b29b      	uxth	r3, r3
 8015322:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 8015326:	4b4f      	ldr	r3, [pc, #316]	; (8015464 <WaveProcess+0x2e0>)
 8015328:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801532c:	3b64      	subs	r3, #100	; 0x64
 801532e:	031a      	lsls	r2, r3, #12
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	fb92 f3f3 	sdiv	r3, r2, r3
 8015336:	b29b      	uxth	r3, r3
 8015338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801533c:	b29b      	uxth	r3, r3
 801533e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8015342:	4b48      	ldr	r3, [pc, #288]	; (8015464 <WaveProcess+0x2e0>)
 8015344:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015348:	2b05      	cmp	r3, #5
 801534a:	d004      	beq.n	8015356 <WaveProcess+0x1d2>
 801534c:	4b45      	ldr	r3, [pc, #276]	; (8015464 <WaveProcess+0x2e0>)
 801534e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015352:	2b01      	cmp	r3, #1
 8015354:	d10b      	bne.n	801536e <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8015356:	4b43      	ldr	r3, [pc, #268]	; (8015464 <WaveProcess+0x2e0>)
 8015358:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801535c:	2b0b      	cmp	r3, #11
 801535e:	dd06      	ble.n	801536e <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8015360:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8015364:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8015366:	4b3f      	ldr	r3, [pc, #252]	; (8015464 <WaveProcess+0x2e0>)
 8015368:	2200      	movs	r2, #0
 801536a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 801536e:	2300      	movs	r3, #0
 8015370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015374:	e0ad      	b.n	80154d2 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8015376:	4b41      	ldr	r3, [pc, #260]	; (801547c <WaveProcess+0x2f8>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015380:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015384:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8015388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801538c:	1acb      	subs	r3, r1, r3
 801538e:	429a      	cmp	r2, r3
 8015390:	f280 80a7 	bge.w	80154e2 <WaveProcess+0x35e>
    ViA = Ain[i];
 8015394:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	697a      	ldr	r2, [r7, #20]
 801539c:	4413      	add	r3, r2
 801539e:	881b      	ldrh	r3, [r3, #0]
 80153a0:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 80153a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153a8:	429a      	cmp	r2, r3
 80153aa:	da02      	bge.n	80153b2 <WaveProcess+0x22e>
 80153ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153b0:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80153b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153b8:	429a      	cmp	r2, r3
 80153ba:	dd02      	ble.n	80153c2 <WaveProcess+0x23e>
 80153bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153c0:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 80153c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80153c6:	6a3a      	ldr	r2, [r7, #32]
 80153c8:	4413      	add	r3, r2
 80153ca:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 80153cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80153d0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80153d4:	1ad3      	subs	r3, r2, r3
 80153d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80153da:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80153de:	1a8a      	subs	r2, r1, r2
 80153e0:	fb02 f303 	mul.w	r3, r2, r3
 80153e4:	69fa      	ldr	r2, [r7, #28]
 80153e6:	4413      	add	r3, r2
 80153e8:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 80153ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80153ee:	2b02      	cmp	r3, #2
 80153f0:	d102      	bne.n	80153f8 <WaveProcess+0x274>
 80153f2:	2300      	movs	r3, #0
 80153f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80153f6:	e005      	b.n	8015404 <WaveProcess+0x280>
    else         DtA++;
 80153f8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	3301      	adds	r3, #1
 8015400:	b29b      	uxth	r3, r3
 8015402:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8015404:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015408:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801540c:	429a      	cmp	r2, r3
 801540e:	dd37      	ble.n	8015480 <WaveProcess+0x2fc>
      if(StA == 0){
 8015410:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015414:	2b00      	cmp	r3, #0
 8015416:	d115      	bne.n	8015444 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015418:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801541a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801541c:	4413      	add	r3, r2
 801541e:	b29b      	uxth	r3, r3
 8015420:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015422:	2300      	movs	r3, #0
 8015424:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015426:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801542a:	b29b      	uxth	r3, r3
 801542c:	3301      	adds	r3, #1
 801542e:	b29b      	uxth	r3, r3
 8015430:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8015432:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801543a:	429a      	cmp	r2, r3
 801543c:	da02      	bge.n	8015444 <WaveProcess+0x2c0>
 801543e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015442:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8015444:	2301      	movs	r3, #1
 8015446:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015448:	e03c      	b.n	80154c4 <WaveProcess+0x340>
 801544a:	bf00      	nop
 801544c:	20002874 	.word	0x20002874
 8015450:	2000057c 	.word	0x2000057c
 8015454:	20006886 	.word	0x20006886
 8015458:	20002862 	.word	0x20002862
 801545c:	2000284a 	.word	0x2000284a
 8015460:	20000560 	.word	0x20000560
 8015464:	20000298 	.word	0x20000298
 8015468:	08002270 	.word	0x08002270
 801546c:	08002278 	.word	0x08002278
 8015470:	200007a0 	.word	0x200007a0
 8015474:	20002860 	.word	0x20002860
 8015478:	20006884 	.word	0x20006884
 801547c:	20006b0c 	.word	0x20006b0c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8015480:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015484:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015488:	429a      	cmp	r2, r3
 801548a:	da1b      	bge.n	80154c4 <WaveProcess+0x340>
      if(StA == 1){
 801548c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015490:	2b01      	cmp	r3, #1
 8015492:	d115      	bne.n	80154c0 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8015494:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015498:	4413      	add	r3, r2
 801549a:	b29b      	uxth	r3, r3
 801549c:	873b      	strh	r3, [r7, #56]	; 0x38
 801549e:	2300      	movs	r3, #0
 80154a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80154a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80154a6:	b29b      	uxth	r3, r3
 80154a8:	3301      	adds	r3, #1
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80154ae:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80154b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	da02      	bge.n	80154c0 <WaveProcess+0x33c>
 80154ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154be:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 80154c0:	2300      	movs	r3, #0
 80154c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 80154c4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	3301      	adds	r3, #1
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80154d2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80154d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80154da:	429a      	cmp	r2, r3
 80154dc:	f6ff af4b 	blt.w	8015376 <WaveProcess+0x1f2>
 80154e0:	e000      	b.n	80154e4 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80154e2:	bf00      	nop
    }
  }
  if(n == 0)
 80154e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d14f      	bne.n	801558c <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 80154ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ee:	b21a      	sxth	r2, r3
 80154f0:	4b9a      	ldr	r3, [pc, #616]	; (801575c <WaveProcess+0x5d8>)
 80154f2:	801a      	strh	r2, [r3, #0]
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	b21a      	sxth	r2, r3
 80154f8:	4b99      	ldr	r3, [pc, #612]	; (8015760 <WaveProcess+0x5dc>)
 80154fa:	801a      	strh	r2, [r3, #0]
 80154fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015500:	6a3a      	ldr	r2, [r7, #32]
 8015502:	fb92 f3f3 	sdiv	r3, r2, r3
 8015506:	b21a      	sxth	r2, r3
 8015508:	4b96      	ldr	r3, [pc, #600]	; (8015764 <WaveProcess+0x5e0>)
 801550a:	801a      	strh	r2, [r3, #0]
 801550c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015510:	3301      	adds	r3, #1
 8015512:	69fa      	ldr	r2, [r7, #28]
 8015514:	fb92 f3f3 	sdiv	r3, r2, r3
 8015518:	4a93      	ldr	r2, [pc, #588]	; (8015768 <WaveProcess+0x5e4>)
 801551a:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 801551c:	4b92      	ldr	r3, [pc, #584]	; (8015768 <WaveProcess+0x5e4>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	4618      	mov	r0, r3
 8015522:	f7fc fbf5 	bl	8011d10 <Sqrt32>
 8015526:	4603      	mov	r3, r0
 8015528:	461a      	mov	r2, r3
 801552a:	4b90      	ldr	r3, [pc, #576]	; (801576c <WaveProcess+0x5e8>)
 801552c:	601a      	str	r2, [r3, #0]
 801552e:	4b8b      	ldr	r3, [pc, #556]	; (801575c <WaveProcess+0x5d8>)
 8015530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015534:	461a      	mov	r2, r3
 8015536:	4b8a      	ldr	r3, [pc, #552]	; (8015760 <WaveProcess+0x5dc>)
 8015538:	f9b3 3000 	ldrsh.w	r3, [r3]
 801553c:	4413      	add	r3, r2
 801553e:	0fda      	lsrs	r2, r3, #31
 8015540:	4413      	add	r3, r2
 8015542:	105b      	asrs	r3, r3, #1
 8015544:	b21a      	sxth	r2, r3
 8015546:	4b8a      	ldr	r3, [pc, #552]	; (8015770 <WaveProcess+0x5ec>)
 8015548:	801a      	strh	r2, [r3, #0]
 801554a:	4b84      	ldr	r3, [pc, #528]	; (801575c <WaveProcess+0x5d8>)
 801554c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015550:	461a      	mov	r2, r3
 8015552:	4b83      	ldr	r3, [pc, #524]	; (8015760 <WaveProcess+0x5dc>)
 8015554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015558:	1ad3      	subs	r3, r2, r3
 801555a:	4a86      	ldr	r2, [pc, #536]	; (8015774 <WaveProcess+0x5f0>)
 801555c:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 801555e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8015562:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8015566:	fb92 f3f3 	sdiv	r3, r2, r3
 801556a:	4a83      	ldr	r2, [pc, #524]	; (8015778 <WaveProcess+0x5f4>)
 801556c:	6013      	str	r3, [r2, #0]
 801556e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8015572:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015576:	fb92 f3f3 	sdiv	r3, r2, r3
 801557a:	4a80      	ldr	r2, [pc, #512]	; (801577c <WaveProcess+0x5f8>)
 801557c:	6013      	str	r3, [r2, #0]
 801557e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8015582:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8015586:	4413      	add	r3, r2
 8015588:	4a7d      	ldr	r2, [pc, #500]	; (8015780 <WaveProcess+0x5fc>)
 801558a:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 801558c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015590:	2b05      	cmp	r3, #5
 8015592:	d003      	beq.n	801559c <WaveProcess+0x418>
 8015594:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015598:	2b01      	cmp	r3, #1
 801559a:	d12f      	bne.n	80155fc <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 801559c:	4b79      	ldr	r3, [pc, #484]	; (8015784 <WaveProcess+0x600>)
 801559e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80155a2:	2b0b      	cmp	r3, #11
 80155a4:	dd03      	ble.n	80155ae <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 80155a6:	2301      	movs	r3, #1
 80155a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155ac:	e033      	b.n	8015616 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80155ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <WaveProcess+0x436>
 80155b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80155b8:	e000      	b.n	80155bc <WaveProcess+0x438>
 80155ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80155bc:	89fa      	ldrh	r2, [r7, #14]
 80155be:	1a9b      	subs	r3, r3, r2
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 80155c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80155ca:	2b01      	cmp	r3, #1
 80155cc:	d123      	bne.n	8015616 <WaveProcess+0x492>
 80155ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	da1f      	bge.n	8015616 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 80155d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	da00      	bge.n	80155e0 <WaveProcess+0x45c>
 80155de:	3303      	adds	r3, #3
 80155e0:	109b      	asrs	r3, r3, #2
 80155e2:	b21b      	sxth	r3, r3
 80155e4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80155e8:	429a      	cmp	r2, r3
 80155ea:	dd03      	ble.n	80155f4 <WaveProcess+0x470>
 80155ec:	2301      	movs	r3, #1
 80155ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155f2:	e010      	b.n	8015616 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 80155f4:	2300      	movs	r3, #0
 80155f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80155fa:	e00c      	b.n	8015616 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80155fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d101      	bne.n	8015608 <WaveProcess+0x484>
 8015604:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015606:	e000      	b.n	801560a <WaveProcess+0x486>
 8015608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801560a:	89fa      	ldrh	r2, [r7, #14]
 801560c:	1a9b      	subs	r3, r3, r2
 801560e:	b29b      	uxth	r3, r3
 8015610:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015614:	e000      	b.n	8015618 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8015616:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015618:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801561c:	2b00      	cmp	r3, #0
 801561e:	d10c      	bne.n	801563a <WaveProcess+0x4b6>
 8015620:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015624:	2b04      	cmp	r3, #4
 8015626:	d108      	bne.n	801563a <WaveProcess+0x4b6>
 8015628:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801562c:	2b00      	cmp	r3, #0
 801562e:	dd04      	ble.n	801563a <WaveProcess+0x4b6>
    Status = STOP;
 8015630:	4b55      	ldr	r3, [pc, #340]	; (8015788 <WaveProcess+0x604>)
 8015632:	2201      	movs	r2, #1
 8015634:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8015636:	f7fe ff21 	bl	801447c <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 801563a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801563e:	2b02      	cmp	r3, #2
 8015640:	d115      	bne.n	801566e <WaveProcess+0x4ea>
 8015642:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015646:	2b00      	cmp	r3, #0
 8015648:	da11      	bge.n	801566e <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 801564a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801564e:	2b00      	cmp	r3, #0
 8015650:	da00      	bge.n	8015654 <WaveProcess+0x4d0>
 8015652:	3303      	adds	r3, #3
 8015654:	109b      	asrs	r3, r3, #2
 8015656:	b21b      	sxth	r3, r3
 8015658:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801565c:	429a      	cmp	r2, r3
 801565e:	dd03      	ble.n	8015668 <WaveProcess+0x4e4>
 8015660:	2301      	movs	r3, #1
 8015662:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015666:	e002      	b.n	801566e <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8015668:	2300      	movs	r3, #0
 801566a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 801566e:	4a47      	ldr	r2, [pc, #284]	; (801578c <WaveProcess+0x608>)
 8015670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015674:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8015676:	4b45      	ldr	r3, [pc, #276]	; (801578c <WaveProcess+0x608>)
 8015678:	f9b3 3000 	ldrsh.w	r3, [r3]
 801567c:	2b00      	cmp	r3, #0
 801567e:	dd02      	ble.n	8015686 <WaveProcess+0x502>
 8015680:	4b43      	ldr	r3, [pc, #268]	; (8015790 <WaveProcess+0x60c>)
 8015682:	2201      	movs	r2, #1
 8015684:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8015686:	4b43      	ldr	r3, [pc, #268]	; (8015794 <WaveProcess+0x610>)
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d016      	beq.n	80156bc <WaveProcess+0x538>
 801568e:	4b3e      	ldr	r3, [pc, #248]	; (8015788 <WaveProcess+0x604>)
 8015690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015694:	2b01      	cmp	r3, #1
 8015696:	d111      	bne.n	80156bc <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8015698:	4b3a      	ldr	r3, [pc, #232]	; (8015784 <WaveProcess+0x600>)
 801569a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801569e:	4b3e      	ldr	r3, [pc, #248]	; (8015798 <WaveProcess+0x614>)
 80156a0:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 80156a2:	4b38      	ldr	r3, [pc, #224]	; (8015784 <WaveProcess+0x600>)
 80156a4:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80156a8:	4b3c      	ldr	r3, [pc, #240]	; (801579c <WaveProcess+0x618>)
 80156aa:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80156ac:	4b35      	ldr	r3, [pc, #212]	; (8015784 <WaveProcess+0x600>)
 80156ae:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80156b2:	4b3b      	ldr	r3, [pc, #236]	; (80157a0 <WaveProcess+0x61c>)
 80156b4:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80156b6:	4b37      	ldr	r3, [pc, #220]	; (8015794 <WaveProcess+0x610>)
 80156b8:	2200      	movs	r2, #0
 80156ba:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 80156bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f340 8104 	ble.w	80158ce <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 80156c6:	4b2f      	ldr	r3, [pc, #188]	; (8015784 <WaveProcess+0x600>)
 80156c8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80156d2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80156d6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80156da:	fb01 f303 	mul.w	r3, r1, r3
 80156de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	da01      	bge.n	80156ea <WaveProcess+0x566>
 80156e6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80156ea:	129b      	asrs	r3, r3, #10
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	4413      	add	r3, r2
 80156f0:	b29a      	uxth	r2, r3
 80156f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80156f6:	4413      	add	r3, r2
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 80156fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015702:	005b      	lsls	r3, r3, #1
 8015704:	697a      	ldr	r2, [r7, #20]
 8015706:	4413      	add	r3, r2
 8015708:	f9b3 3000 	ldrsh.w	r3, [r3]
 801570c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015710:	693a      	ldr	r2, [r7, #16]
 8015712:	fb02 f303 	mul.w	r3, r2, r3
 8015716:	131b      	asrs	r3, r3, #12
 8015718:	b29b      	uxth	r3, r3
 801571a:	3364      	adds	r3, #100	; 0x64
 801571c:	b29b      	uxth	r3, r3
 801571e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8015722:	2300      	movs	r3, #0
 8015724:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015728:	e0c7      	b.n	80158ba <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 801572a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	697a      	ldr	r2, [r7, #20]
 8015732:	4413      	add	r3, r2
 8015734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015738:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	fb02 f303 	mul.w	r3, r2, r3
 8015742:	131b      	asrs	r3, r3, #12
 8015744:	b29b      	uxth	r3, r3
 8015746:	3364      	adds	r3, #100	; 0x64
 8015748:	b29b      	uxth	r3, r3
 801574a:	80bb      	strh	r3, [r7, #4]
      k++;
 801574c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015750:	b29b      	uxth	r3, r3
 8015752:	3301      	adds	r3, #1
 8015754:	b29b      	uxth	r3, r3
 8015756:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 801575a:	e09e      	b.n	801589a <WaveProcess+0x716>
 801575c:	20002856 	.word	0x20002856
 8015760:	20002868 	.word	0x20002868
 8015764:	20002858 	.word	0x20002858
 8015768:	2000285c 	.word	0x2000285c
 801576c:	20002864 	.word	0x20002864
 8015770:	2000286a 	.word	0x2000286a
 8015774:	20006880 	.word	0x20006880
 8015778:	20006878 	.word	0x20006878
 801577c:	2000688c 	.word	0x2000688c
 8015780:	20002850 	.word	0x20002850
 8015784:	20000298 	.word	0x20000298
 8015788:	200007a0 	.word	0x200007a0
 801578c:	20002854 	.word	0x20002854
 8015790:	2000286c 	.word	0x2000286c
 8015794:	2000055c 	.word	0x2000055c
 8015798:	20006884 	.word	0x20006884
 801579c:	2000687c 	.word	0x2000687c
 80157a0:	20002860 	.word	0x20002860
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 80157a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80157a8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80157ac:	1ad3      	subs	r3, r2, r3
 80157ae:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80157b2:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80157b6:	fb02 f303 	mul.w	r3, r2, r3
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	da01      	bge.n	80157c2 <WaveProcess+0x63e>
 80157be:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80157c2:	129b      	asrs	r3, r3, #10
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157ca:	4413      	add	r3, r2
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 80157d0:	4b63      	ldr	r3, [pc, #396]	; (8015960 <WaveProcess+0x7dc>)
 80157d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157d6:	2b01      	cmp	r3, #1
 80157d8:	d132      	bne.n	8015840 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 80157da:	4b62      	ldr	r3, [pc, #392]	; (8015964 <WaveProcess+0x7e0>)
 80157dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80157e0:	b29a      	uxth	r2, r3
 80157e2:	4b61      	ldr	r3, [pc, #388]	; (8015968 <WaveProcess+0x7e4>)
 80157e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157f0:	4413      	add	r3, r2
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	b21a      	sxth	r2, r3
 80157f6:	4b5d      	ldr	r3, [pc, #372]	; (801596c <WaveProcess+0x7e8>)
 80157f8:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 80157fa:	4b5c      	ldr	r3, [pc, #368]	; (801596c <WaveProcess+0x7e8>)
 80157fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015800:	2bc7      	cmp	r3, #199	; 0xc7
 8015802:	dd02      	ble.n	801580a <WaveProcess+0x686>
 8015804:	4b59      	ldr	r3, [pc, #356]	; (801596c <WaveProcess+0x7e8>)
 8015806:	22ca      	movs	r2, #202	; 0xca
 8015808:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 801580a:	4b58      	ldr	r3, [pc, #352]	; (801596c <WaveProcess+0x7e8>)
 801580c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015810:	2b02      	cmp	r3, #2
 8015812:	dc02      	bgt.n	801581a <WaveProcess+0x696>
 8015814:	4b55      	ldr	r3, [pc, #340]	; (801596c <WaveProcess+0x7e8>)
 8015816:	2201      	movs	r2, #1
 8015818:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 801581a:	4b54      	ldr	r3, [pc, #336]	; (801596c <WaveProcess+0x7e8>)
 801581c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015820:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015824:	b2d1      	uxtb	r1, r2
 8015826:	4a52      	ldr	r2, [pc, #328]	; (8015970 <WaveProcess+0x7ec>)
 8015828:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 801582a:	4b4e      	ldr	r3, [pc, #312]	; (8015964 <WaveProcess+0x7e0>)
 801582c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015830:	b2da      	uxtb	r2, r3
 8015832:	79f9      	ldrb	r1, [r7, #7]
 8015834:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015838:	4618      	mov	r0, r3
 801583a:	f000 f89d 	bl	8015978 <Build_Ext>
 801583e:	e01b      	b.n	8015878 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015840:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015844:	2bc7      	cmp	r3, #199	; 0xc7
 8015846:	dd01      	ble.n	801584c <WaveProcess+0x6c8>
 8015848:	23ca      	movs	r3, #202	; 0xca
 801584a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 801584c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015850:	2b02      	cmp	r3, #2
 8015852:	dc01      	bgt.n	8015858 <WaveProcess+0x6d4>
 8015854:	2302      	movs	r3, #2
 8015856:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015858:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801585c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801585e:	b2d1      	uxtb	r1, r2
 8015860:	4a43      	ldr	r2, [pc, #268]	; (8015970 <WaveProcess+0x7ec>)
 8015862:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8015864:	4b3f      	ldr	r3, [pc, #252]	; (8015964 <WaveProcess+0x7e0>)
 8015866:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801586a:	b2da      	uxtb	r2, r3
 801586c:	79f9      	ldrb	r1, [r7, #7]
 801586e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015872:	4618      	mov	r0, r3
 8015874:	f000 f880 	bl	8015978 <Build_Ext>
        }

        if(n++ >= 300) break;
 8015878:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801587c:	b29a      	uxth	r2, r3
 801587e:	3201      	adds	r2, #1
 8015880:	b292      	uxth	r2, r2
 8015882:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015886:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801588a:	da0b      	bge.n	80158a4 <WaveProcess+0x720>
        p -= Ks;
 801588c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015890:	897b      	ldrh	r3, [r7, #10]
 8015892:	1ad3      	subs	r3, r2, r3
 8015894:	b29b      	uxth	r3, r3
 8015896:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801589a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801589e:	2b00      	cmp	r3, #0
 80158a0:	dc80      	bgt.n	80157a4 <WaveProcess+0x620>
 80158a2:	e000      	b.n	80158a6 <WaveProcess+0x722>
        if(n++ >= 300) break;
 80158a4:	bf00      	nop
      }
      p += 1024;
 80158a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80158aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 80158b4:	88bb      	ldrh	r3, [r7, #4]
 80158b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 80158ba:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80158c2:	f6ff af32 	blt.w	801572a <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 80158c6:	4b2b      	ldr	r3, [pc, #172]	; (8015974 <WaveProcess+0x7f0>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	701a      	strb	r2, [r3, #0]
 80158cc:	e037      	b.n	801593e <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 80158ce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	da33      	bge.n	801593e <WaveProcess+0x7ba>
 80158d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80158da:	2b03      	cmp	r3, #3
 80158dc:	d103      	bne.n	80158e6 <WaveProcess+0x762>
 80158de:	4b25      	ldr	r3, [pc, #148]	; (8015974 <WaveProcess+0x7f0>)
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d02b      	beq.n	801593e <WaveProcess+0x7ba>
    for(n=0; n<300;){
 80158e6:	2300      	movs	r3, #0
 80158e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80158ec:	e022      	b.n	8015934 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 80158ee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158f2:	4a1f      	ldr	r2, [pc, #124]	; (8015970 <WaveProcess+0x7ec>)
 80158f4:	21ff      	movs	r1, #255	; 0xff
 80158f6:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 80158f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	3201      	adds	r2, #1
 8015900:	b292      	uxth	r2, r2
 8015902:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015906:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801590a:	da0b      	bge.n	8015924 <WaveProcess+0x7a0>
        p -= Ks;
 801590c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015910:	897b      	ldrh	r3, [r7, #10]
 8015912:	1ad3      	subs	r3, r2, r3
 8015914:	b29b      	uxth	r3, r3
 8015916:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801591a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801591e:	2b00      	cmp	r3, #0
 8015920:	dce5      	bgt.n	80158ee <WaveProcess+0x76a>
 8015922:	e000      	b.n	8015926 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015924:	bf00      	nop
      }
      p += 1024;
 8015926:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801592e:	b29b      	uxth	r3, r3
 8015930:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015934:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015938:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801593c:	dbed      	blt.n	801591a <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 801593e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015942:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015946:	429a      	cmp	r2, r3
 8015948:	d106      	bne.n	8015958 <WaveProcess+0x7d4>
 801594a:	4b05      	ldr	r3, [pc, #20]	; (8015960 <WaveProcess+0x7dc>)
 801594c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015950:	2b01      	cmp	r3, #1
 8015952:	d001      	beq.n	8015958 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015954:	f7f6 ff22 	bl	800c79c <ADC_Start>
  }
}
 8015958:	bf00      	nop
 801595a:	3750      	adds	r7, #80	; 0x50
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	200007a0 	.word	0x200007a0
 8015964:	20000298 	.word	0x20000298
 8015968:	20006884 	.word	0x20006884
 801596c:	20002848 	.word	0x20002848
 8015970:	20000c08 	.word	0x20000c08
 8015974:	200007a7 	.word	0x200007a7

08015978 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015978:	b480      	push	{r7}
 801597a:	b085      	sub	sp, #20
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	80fb      	strh	r3, [r7, #6]
 8015982:	460b      	mov	r3, r1
 8015984:	717b      	strb	r3, [r7, #5]
 8015986:	4613      	mov	r3, r2
 8015988:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801598a:	4b69      	ldr	r3, [pc, #420]	; (8015b30 <Build_Ext+0x1b8>)
 801598c:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 801598e:	4b69      	ldr	r3, [pc, #420]	; (8015b34 <Build_Ext+0x1bc>)
 8015990:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015994:	b29a      	uxth	r2, r3
 8015996:	4b68      	ldr	r3, [pc, #416]	; (8015b38 <Build_Ext+0x1c0>)
 8015998:	785b      	ldrb	r3, [r3, #1]
 801599a:	b29b      	uxth	r3, r3
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	b29a      	uxth	r2, r3
 80159a0:	4b64      	ldr	r3, [pc, #400]	; (8015b34 <Build_Ext+0x1bc>)
 80159a2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	1ad3      	subs	r3, r2, r3
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	b21a      	sxth	r2, r3
 80159ae:	4b63      	ldr	r3, [pc, #396]	; (8015b3c <Build_Ext+0x1c4>)
 80159b0:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80159b2:	4b60      	ldr	r3, [pc, #384]	; (8015b34 <Build_Ext+0x1bc>)
 80159b4:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80159b8:	4b61      	ldr	r3, [pc, #388]	; (8015b40 <Build_Ext+0x1c8>)
 80159ba:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80159bc:	797b      	ldrb	r3, [r7, #5]
 80159be:	2b05      	cmp	r3, #5
 80159c0:	f200 809c 	bhi.w	8015afc <Build_Ext+0x184>
 80159c4:	a201      	add	r2, pc, #4	; (adr r2, 80159cc <Build_Ext+0x54>)
 80159c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159ca:	bf00      	nop
 80159cc:	080159e5 	.word	0x080159e5
 80159d0:	08015a0b 	.word	0x08015a0b
 80159d4:	08015a31 	.word	0x08015a31
 80159d8:	08015a5b 	.word	0x08015a5b
 80159dc:	08015a9b 	.word	0x08015a9b
 80159e0:	08015adb 	.word	0x08015adb
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 80159e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80159e8:	330a      	adds	r3, #10
 80159ea:	4a53      	ldr	r2, [pc, #332]	; (8015b38 <Build_Ext+0x1c0>)
 80159ec:	5cd3      	ldrb	r3, [r2, r3]
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	4b51      	ldr	r3, [pc, #324]	; (8015b38 <Build_Ext+0x1c0>)
 80159f2:	785b      	ldrb	r3, [r3, #1]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	4b4e      	ldr	r3, [pc, #312]	; (8015b34 <Build_Ext+0x1bc>)
 80159fc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	4413      	add	r3, r2
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	81fb      	strh	r3, [r7, #14]
 8015a08:	e078      	b.n	8015afc <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 8015a0a:	4b4a      	ldr	r3, [pc, #296]	; (8015b34 <Build_Ext+0x1bc>)
 8015a0c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	4b49      	ldr	r3, [pc, #292]	; (8015b38 <Build_Ext+0x1c0>)
 8015a14:	785b      	ldrb	r3, [r3, #1]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4413      	add	r3, r2
 8015a1a:	b29a      	uxth	r2, r3
 8015a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a20:	330a      	adds	r3, #10
 8015a22:	4945      	ldr	r1, [pc, #276]	; (8015b38 <Build_Ext+0x1c0>)
 8015a24:	5ccb      	ldrb	r3, [r1, r3]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	81fb      	strh	r3, [r7, #14]
 8015a2e:	e065      	b.n	8015afc <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a34:	330a      	adds	r3, #10
 8015a36:	4a40      	ldr	r2, [pc, #256]	; (8015b38 <Build_Ext+0x1c0>)
 8015a38:	5cd3      	ldrb	r3, [r2, r3]
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a40:	4940      	ldr	r1, [pc, #256]	; (8015b44 <Build_Ext+0x1cc>)
 8015a42:	5ccb      	ldrb	r3, [r1, r3]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	4413      	add	r3, r2
 8015a48:	b29a      	uxth	r2, r3
 8015a4a:	4b3c      	ldr	r3, [pc, #240]	; (8015b3c <Build_Ext+0x1c4>)
 8015a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	4413      	add	r3, r2
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	81fb      	strh	r3, [r7, #14]
 8015a58:	e050      	b.n	8015afc <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 8015a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a5e:	330a      	adds	r3, #10
 8015a60:	4a35      	ldr	r2, [pc, #212]	; (8015b38 <Build_Ext+0x1c0>)
 8015a62:	5cd3      	ldrb	r3, [r2, r3]
 8015a64:	b29a      	uxth	r2, r3
 8015a66:	4b34      	ldr	r3, [pc, #208]	; (8015b38 <Build_Ext+0x1c0>)
 8015a68:	785b      	ldrb	r3, [r3, #1]
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	1ad3      	subs	r3, r2, r3
 8015a6e:	b29a      	uxth	r2, r3
 8015a70:	4b30      	ldr	r3, [pc, #192]	; (8015b34 <Build_Ext+0x1bc>)
 8015a72:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015a76:	b299      	uxth	r1, r3
 8015a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a7c:	4831      	ldr	r0, [pc, #196]	; (8015b44 <Build_Ext+0x1cc>)
 8015a7e:	5cc3      	ldrb	r3, [r0, r3]
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	1acb      	subs	r3, r1, r3
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	4413      	add	r3, r2
 8015a88:	b29a      	uxth	r2, r3
 8015a8a:	4b2a      	ldr	r3, [pc, #168]	; (8015b34 <Build_Ext+0x1bc>)
 8015a8c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	4413      	add	r3, r2
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	81fb      	strh	r3, [r7, #14]
 8015a98:	e030      	b.n	8015afc <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 8015a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a9e:	4a29      	ldr	r2, [pc, #164]	; (8015b44 <Build_Ext+0x1cc>)
 8015aa0:	5cd3      	ldrb	r3, [r2, r3]
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	4b23      	ldr	r3, [pc, #140]	; (8015b34 <Build_Ext+0x1bc>)
 8015aa6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	4b21      	ldr	r3, [pc, #132]	; (8015b38 <Build_Ext+0x1c0>)
 8015ab2:	785b      	ldrb	r3, [r3, #1]
 8015ab4:	b299      	uxth	r1, r3
 8015ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aba:	330a      	adds	r3, #10
 8015abc:	481e      	ldr	r0, [pc, #120]	; (8015b38 <Build_Ext+0x1c0>)
 8015abe:	5cc3      	ldrb	r3, [r0, r3]
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	1acb      	subs	r3, r1, r3
 8015ac4:	b29b      	uxth	r3, r3
 8015ac6:	4413      	add	r3, r2
 8015ac8:	b29a      	uxth	r2, r3
 8015aca:	4b1a      	ldr	r3, [pc, #104]	; (8015b34 <Build_Ext+0x1bc>)
 8015acc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	4413      	add	r3, r2
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	81fb      	strh	r3, [r7, #14]
 8015ad8:	e010      	b.n	8015afc <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 8015ada:	793b      	ldrb	r3, [r7, #4]
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	4b15      	ldr	r3, [pc, #84]	; (8015b34 <Build_Ext+0x1bc>)
 8015ae0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	4413      	add	r3, r2
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aee:	4915      	ldr	r1, [pc, #84]	; (8015b44 <Build_Ext+0x1cc>)
 8015af0:	5ccb      	ldrb	r3, [r1, r3]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	1ad3      	subs	r3, r2, r3
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	81fb      	strh	r3, [r7, #14]
 8015afa:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 8015afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b00:	2bc7      	cmp	r3, #199	; 0xc7
 8015b02:	dd01      	ble.n	8015b08 <Build_Ext+0x190>
 8015b04:	23ca      	movs	r3, #202	; 0xca
 8015b06:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b0c:	2b02      	cmp	r3, #2
 8015b0e:	dc01      	bgt.n	8015b14 <Build_Ext+0x19c>
 8015b10:	2301      	movs	r3, #1
 8015b12:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b18:	68ba      	ldr	r2, [r7, #8]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	89fa      	ldrh	r2, [r7, #14]
 8015b1e:	b2d2      	uxtb	r2, r2
 8015b20:	701a      	strb	r2, [r3, #0]
}
 8015b22:	bf00      	nop
 8015b24:	3714      	adds	r7, #20
 8015b26:	46bd      	mov	sp, r7
 8015b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	20000d34 	.word	0x20000d34
 8015b34:	20000298 	.word	0x20000298
 8015b38:	20000008 	.word	0x20000008
 8015b3c:	2000284c 	.word	0x2000284c
 8015b40:	20006874 	.word	0x20006874
 8015b44:	20000c08 	.word	0x20000c08

08015b48 <Auto_Fit>:

void Auto_Fit(void)
{
 8015b48:	b590      	push	{r4, r7, lr}
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015b52:	4b38      	ldr	r3, [pc, #224]	; (8015c34 <Auto_Fit+0xec>)
 8015b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	f000 83de 	beq.w	801631a <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015b5e:	2300      	movs	r3, #0
 8015b60:	71fb      	strb	r3, [r7, #7]
 8015b62:	e098      	b.n	8015c96 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b64:	4b34      	ldr	r3, [pc, #208]	; (8015c38 <Auto_Fit+0xf0>)
 8015b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b6a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b6e:	4a33      	ldr	r2, [pc, #204]	; (8015c3c <Auto_Fit+0xf4>)
 8015b70:	6811      	ldr	r1, [r2, #0]
 8015b72:	4a33      	ldr	r2, [pc, #204]	; (8015c40 <Auto_Fit+0xf8>)
 8015b74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b78:	4610      	mov	r0, r2
 8015b7a:	4a32      	ldr	r2, [pc, #200]	; (8015c44 <Auto_Fit+0xfc>)
 8015b7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b80:	2a00      	cmp	r2, #0
 8015b82:	bf14      	ite	ne
 8015b84:	2201      	movne	r2, #1
 8015b86:	2200      	moveq	r2, #0
 8015b88:	b2d2      	uxtb	r2, r2
 8015b8a:	4402      	add	r2, r0
 8015b8c:	0052      	lsls	r2, r2, #1
 8015b8e:	440a      	add	r2, r1
 8015b90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b94:	0092      	lsls	r2, r2, #2
 8015b96:	492c      	ldr	r1, [pc, #176]	; (8015c48 <Auto_Fit+0x100>)
 8015b98:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b9c:	4608      	mov	r0, r1
 8015b9e:	492b      	ldr	r1, [pc, #172]	; (8015c4c <Auto_Fit+0x104>)
 8015ba0:	5c09      	ldrb	r1, [r1, r0]
 8015ba2:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ba6:	fb02 f303 	mul.w	r3, r2, r3
 8015baa:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015bac:	b29a      	uxth	r2, r3
 8015bae:	4b28      	ldr	r3, [pc, #160]	; (8015c50 <Auto_Fit+0x108>)
 8015bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bb4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bb8:	4920      	ldr	r1, [pc, #128]	; (8015c3c <Auto_Fit+0xf4>)
 8015bba:	6808      	ldr	r0, [r1, #0]
 8015bbc:	4920      	ldr	r1, [pc, #128]	; (8015c40 <Auto_Fit+0xf8>)
 8015bbe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bc2:	460c      	mov	r4, r1
 8015bc4:	491f      	ldr	r1, [pc, #124]	; (8015c44 <Auto_Fit+0xfc>)
 8015bc6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bca:	2900      	cmp	r1, #0
 8015bcc:	bf14      	ite	ne
 8015bce:	2101      	movne	r1, #1
 8015bd0:	2100      	moveq	r1, #0
 8015bd2:	b2c9      	uxtb	r1, r1
 8015bd4:	4421      	add	r1, r4
 8015bd6:	0049      	lsls	r1, r1, #1
 8015bd8:	4401      	add	r1, r0
 8015bda:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bde:	0089      	lsls	r1, r1, #2
 8015be0:	4819      	ldr	r0, [pc, #100]	; (8015c48 <Auto_Fit+0x100>)
 8015be2:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015be6:	4604      	mov	r4, r0
 8015be8:	4818      	ldr	r0, [pc, #96]	; (8015c4c <Auto_Fit+0x104>)
 8015bea:	5d00      	ldrb	r0, [r0, r4]
 8015bec:	fb91 f1f0 	sdiv	r1, r1, r0
 8015bf0:	fb01 f303 	mul.w	r3, r1, r3
 8015bf4:	131b      	asrs	r3, r3, #12
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015bfc:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015bfe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015c02:	2b27      	cmp	r3, #39	; 0x27
 8015c04:	dc28      	bgt.n	8015c58 <Auto_Fit+0x110>
 8015c06:	4b13      	ldr	r3, [pc, #76]	; (8015c54 <Auto_Fit+0x10c>)
 8015c08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c0c:	2b02      	cmp	r3, #2
 8015c0e:	dd23      	ble.n	8015c58 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015c10:	4b10      	ldr	r3, [pc, #64]	; (8015c54 <Auto_Fit+0x10c>)
 8015c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c16:	b29b      	uxth	r3, r3
 8015c18:	3b01      	subs	r3, #1
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	b21a      	sxth	r2, r3
 8015c1e:	4b0d      	ldr	r3, [pc, #52]	; (8015c54 <Auto_Fit+0x10c>)
 8015c20:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015c22:	4b0c      	ldr	r3, [pc, #48]	; (8015c54 <Auto_Fit+0x10c>)
 8015c24:	2264      	movs	r2, #100	; 0x64
 8015c26:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015c28:	f7ff faac 	bl	8015184 <WaveProcess>
        Update_Proc_All();
 8015c2c:	f7fe ff32 	bl	8014a94 <Update_Proc_All>
 8015c30:	e02b      	b.n	8015c8a <Auto_Fit+0x142>
 8015c32:	bf00      	nop
 8015c34:	200007a0 	.word	0x200007a0
 8015c38:	20002856 	.word	0x20002856
 8015c3c:	2000057c 	.word	0x2000057c
 8015c40:	20006886 	.word	0x20006886
 8015c44:	20002862 	.word	0x20002862
 8015c48:	2000284a 	.word	0x2000284a
 8015c4c:	20000560 	.word	0x20000560
 8015c50:	20002868 	.word	0x20002868
 8015c54:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015c58:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8015c5e:	dd14      	ble.n	8015c8a <Auto_Fit+0x142>
 8015c60:	4bbe      	ldr	r3, [pc, #760]	; (8015f5c <Auto_Fit+0x414>)
 8015c62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c66:	2b08      	cmp	r3, #8
 8015c68:	dc0f      	bgt.n	8015c8a <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015c6a:	4bbc      	ldr	r3, [pc, #752]	; (8015f5c <Auto_Fit+0x414>)
 8015c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	3301      	adds	r3, #1
 8015c74:	b29b      	uxth	r3, r3
 8015c76:	b21a      	sxth	r2, r3
 8015c78:	4bb8      	ldr	r3, [pc, #736]	; (8015f5c <Auto_Fit+0x414>)
 8015c7a:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015c7c:	4bb7      	ldr	r3, [pc, #732]	; (8015f5c <Auto_Fit+0x414>)
 8015c7e:	2264      	movs	r2, #100	; 0x64
 8015c80:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015c82:	f7ff fa7f 	bl	8015184 <WaveProcess>
        Update_Proc_All();
 8015c86:	f7fe ff05 	bl	8014a94 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015c8a:	2032      	movs	r0, #50	; 0x32
 8015c8c:	f002 fbe4 	bl	8018458 <HAL_Delay>
    for(i=0;i<9;i++){
 8015c90:	79fb      	ldrb	r3, [r7, #7]
 8015c92:	3301      	adds	r3, #1
 8015c94:	71fb      	strb	r3, [r7, #7]
 8015c96:	79fb      	ldrb	r3, [r7, #7]
 8015c98:	2b08      	cmp	r3, #8
 8015c9a:	f67f af63 	bls.w	8015b64 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015c9e:	4bb0      	ldr	r3, [pc, #704]	; (8015f60 <Auto_Fit+0x418>)
 8015ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ca4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ca8:	4aae      	ldr	r2, [pc, #696]	; (8015f64 <Auto_Fit+0x41c>)
 8015caa:	6811      	ldr	r1, [r2, #0]
 8015cac:	4aae      	ldr	r2, [pc, #696]	; (8015f68 <Auto_Fit+0x420>)
 8015cae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cb2:	4610      	mov	r0, r2
 8015cb4:	4aad      	ldr	r2, [pc, #692]	; (8015f6c <Auto_Fit+0x424>)
 8015cb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cba:	2a00      	cmp	r2, #0
 8015cbc:	bf14      	ite	ne
 8015cbe:	2201      	movne	r2, #1
 8015cc0:	2200      	moveq	r2, #0
 8015cc2:	b2d2      	uxtb	r2, r2
 8015cc4:	4402      	add	r2, r0
 8015cc6:	0052      	lsls	r2, r2, #1
 8015cc8:	440a      	add	r2, r1
 8015cca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cce:	0092      	lsls	r2, r2, #2
 8015cd0:	49a7      	ldr	r1, [pc, #668]	; (8015f70 <Auto_Fit+0x428>)
 8015cd2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cd6:	4608      	mov	r0, r1
 8015cd8:	49a6      	ldr	r1, [pc, #664]	; (8015f74 <Auto_Fit+0x42c>)
 8015cda:	5c09      	ldrb	r1, [r1, r0]
 8015cdc:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ce0:	fb02 f303 	mul.w	r3, r2, r3
 8015ce4:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015ce6:	4ba4      	ldr	r3, [pc, #656]	; (8015f78 <Auto_Fit+0x430>)
 8015ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015cf0:	499c      	ldr	r1, [pc, #624]	; (8015f64 <Auto_Fit+0x41c>)
 8015cf2:	6808      	ldr	r0, [r1, #0]
 8015cf4:	499c      	ldr	r1, [pc, #624]	; (8015f68 <Auto_Fit+0x420>)
 8015cf6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cfa:	460c      	mov	r4, r1
 8015cfc:	499b      	ldr	r1, [pc, #620]	; (8015f6c <Auto_Fit+0x424>)
 8015cfe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d02:	2900      	cmp	r1, #0
 8015d04:	bf14      	ite	ne
 8015d06:	2101      	movne	r1, #1
 8015d08:	2100      	moveq	r1, #0
 8015d0a:	b2c9      	uxtb	r1, r1
 8015d0c:	4421      	add	r1, r4
 8015d0e:	0049      	lsls	r1, r1, #1
 8015d10:	4401      	add	r1, r0
 8015d12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d16:	0089      	lsls	r1, r1, #2
 8015d18:	4895      	ldr	r0, [pc, #596]	; (8015f70 <Auto_Fit+0x428>)
 8015d1a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015d1e:	4604      	mov	r4, r0
 8015d20:	4894      	ldr	r0, [pc, #592]	; (8015f74 <Auto_Fit+0x42c>)
 8015d22:	5d00      	ldrb	r0, [r0, r4]
 8015d24:	fb91 f1f0 	sdiv	r1, r1, r0
 8015d28:	fb01 f303 	mul.w	r3, r1, r3
 8015d2c:	131b      	asrs	r3, r3, #12
 8015d2e:	1ad3      	subs	r3, r2, r3
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	da00      	bge.n	8015d36 <Auto_Fit+0x1ee>
 8015d34:	3303      	adds	r3, #3
 8015d36:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015d38:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015d3a:	4b88      	ldr	r3, [pc, #544]	; (8015f5c <Auto_Fit+0x414>)
 8015d3c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015d40:	4618      	mov	r0, r3
 8015d42:	4b8e      	ldr	r3, [pc, #568]	; (8015f7c <Auto_Fit+0x434>)
 8015d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d48:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d4c:	4a85      	ldr	r2, [pc, #532]	; (8015f64 <Auto_Fit+0x41c>)
 8015d4e:	6811      	ldr	r1, [r2, #0]
 8015d50:	4a85      	ldr	r2, [pc, #532]	; (8015f68 <Auto_Fit+0x420>)
 8015d52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d56:	4614      	mov	r4, r2
 8015d58:	4a84      	ldr	r2, [pc, #528]	; (8015f6c <Auto_Fit+0x424>)
 8015d5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d5e:	2a00      	cmp	r2, #0
 8015d60:	bf14      	ite	ne
 8015d62:	2201      	movne	r2, #1
 8015d64:	2200      	moveq	r2, #0
 8015d66:	b2d2      	uxtb	r2, r2
 8015d68:	4422      	add	r2, r4
 8015d6a:	0052      	lsls	r2, r2, #1
 8015d6c:	440a      	add	r2, r1
 8015d6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d72:	0092      	lsls	r2, r2, #2
 8015d74:	497e      	ldr	r1, [pc, #504]	; (8015f70 <Auto_Fit+0x428>)
 8015d76:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d7a:	460c      	mov	r4, r1
 8015d7c:	497d      	ldr	r1, [pc, #500]	; (8015f74 <Auto_Fit+0x42c>)
 8015d7e:	5d09      	ldrb	r1, [r1, r4]
 8015d80:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d84:	fb02 f303 	mul.w	r3, r2, r3
 8015d88:	131b      	asrs	r3, r3, #12
 8015d8a:	3364      	adds	r3, #100	; 0x64
 8015d8c:	4a73      	ldr	r2, [pc, #460]	; (8015f5c <Auto_Fit+0x414>)
 8015d8e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015d92:	1a9a      	subs	r2, r3, r2
 8015d94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d98:	4413      	add	r3, r2
 8015d9a:	4298      	cmp	r0, r3
 8015d9c:	dc32      	bgt.n	8015e04 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015d9e:	4b6f      	ldr	r3, [pc, #444]	; (8015f5c <Auto_Fit+0x414>)
 8015da0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015da4:	4618      	mov	r0, r3
 8015da6:	4b75      	ldr	r3, [pc, #468]	; (8015f7c <Auto_Fit+0x434>)
 8015da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015db0:	4a6c      	ldr	r2, [pc, #432]	; (8015f64 <Auto_Fit+0x41c>)
 8015db2:	6811      	ldr	r1, [r2, #0]
 8015db4:	4a6c      	ldr	r2, [pc, #432]	; (8015f68 <Auto_Fit+0x420>)
 8015db6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dba:	4614      	mov	r4, r2
 8015dbc:	4a6b      	ldr	r2, [pc, #428]	; (8015f6c <Auto_Fit+0x424>)
 8015dbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dc2:	2a00      	cmp	r2, #0
 8015dc4:	bf14      	ite	ne
 8015dc6:	2201      	movne	r2, #1
 8015dc8:	2200      	moveq	r2, #0
 8015dca:	b2d2      	uxtb	r2, r2
 8015dcc:	4422      	add	r2, r4
 8015dce:	0052      	lsls	r2, r2, #1
 8015dd0:	440a      	add	r2, r1
 8015dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dd6:	0092      	lsls	r2, r2, #2
 8015dd8:	4965      	ldr	r1, [pc, #404]	; (8015f70 <Auto_Fit+0x428>)
 8015dda:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dde:	460c      	mov	r4, r1
 8015de0:	4964      	ldr	r1, [pc, #400]	; (8015f74 <Auto_Fit+0x42c>)
 8015de2:	5d09      	ldrb	r1, [r1, r4]
 8015de4:	fb92 f2f1 	sdiv	r2, r2, r1
 8015de8:	fb02 f303 	mul.w	r3, r2, r3
 8015dec:	131b      	asrs	r3, r3, #12
 8015dee:	3364      	adds	r3, #100	; 0x64
 8015df0:	4a5a      	ldr	r2, [pc, #360]	; (8015f5c <Auto_Fit+0x414>)
 8015df2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015df6:	1a9a      	subs	r2, r3, r2
 8015df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015dfc:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015dfe:	4298      	cmp	r0, r3
 8015e00:	f280 808e 	bge.w	8015f20 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015e04:	4b5d      	ldr	r3, [pc, #372]	; (8015f7c <Auto_Fit+0x434>)
 8015e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e0e:	4a55      	ldr	r2, [pc, #340]	; (8015f64 <Auto_Fit+0x41c>)
 8015e10:	6811      	ldr	r1, [r2, #0]
 8015e12:	4a55      	ldr	r2, [pc, #340]	; (8015f68 <Auto_Fit+0x420>)
 8015e14:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e18:	4610      	mov	r0, r2
 8015e1a:	4a54      	ldr	r2, [pc, #336]	; (8015f6c <Auto_Fit+0x424>)
 8015e1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e20:	2a00      	cmp	r2, #0
 8015e22:	bf14      	ite	ne
 8015e24:	2201      	movne	r2, #1
 8015e26:	2200      	moveq	r2, #0
 8015e28:	b2d2      	uxtb	r2, r2
 8015e2a:	4402      	add	r2, r0
 8015e2c:	0052      	lsls	r2, r2, #1
 8015e2e:	440a      	add	r2, r1
 8015e30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e34:	0092      	lsls	r2, r2, #2
 8015e36:	494e      	ldr	r1, [pc, #312]	; (8015f70 <Auto_Fit+0x428>)
 8015e38:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e3c:	4608      	mov	r0, r1
 8015e3e:	494d      	ldr	r1, [pc, #308]	; (8015f74 <Auto_Fit+0x42c>)
 8015e40:	5c09      	ldrb	r1, [r1, r0]
 8015e42:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e46:	fb02 f303 	mul.w	r3, r2, r3
 8015e4a:	131b      	asrs	r3, r3, #12
 8015e4c:	3364      	adds	r3, #100	; 0x64
 8015e4e:	4a43      	ldr	r2, [pc, #268]	; (8015f5c <Auto_Fit+0x414>)
 8015e50:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015e54:	1a9b      	subs	r3, r3, r2
 8015e56:	330f      	adds	r3, #15
 8015e58:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015e5c:	db5c      	blt.n	8015f18 <Auto_Fit+0x3d0>
 8015e5e:	4b47      	ldr	r3, [pc, #284]	; (8015f7c <Auto_Fit+0x434>)
 8015e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e64:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e68:	4a3e      	ldr	r2, [pc, #248]	; (8015f64 <Auto_Fit+0x41c>)
 8015e6a:	6811      	ldr	r1, [r2, #0]
 8015e6c:	4a3e      	ldr	r2, [pc, #248]	; (8015f68 <Auto_Fit+0x420>)
 8015e6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e72:	4610      	mov	r0, r2
 8015e74:	4a3d      	ldr	r2, [pc, #244]	; (8015f6c <Auto_Fit+0x424>)
 8015e76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e7a:	2a00      	cmp	r2, #0
 8015e7c:	bf14      	ite	ne
 8015e7e:	2201      	movne	r2, #1
 8015e80:	2200      	moveq	r2, #0
 8015e82:	b2d2      	uxtb	r2, r2
 8015e84:	4402      	add	r2, r0
 8015e86:	0052      	lsls	r2, r2, #1
 8015e88:	440a      	add	r2, r1
 8015e8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e8e:	0092      	lsls	r2, r2, #2
 8015e90:	4937      	ldr	r1, [pc, #220]	; (8015f70 <Auto_Fit+0x428>)
 8015e92:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e96:	4608      	mov	r0, r1
 8015e98:	4936      	ldr	r1, [pc, #216]	; (8015f74 <Auto_Fit+0x42c>)
 8015e9a:	5c09      	ldrb	r1, [r1, r0]
 8015e9c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ea0:	fb02 f303 	mul.w	r3, r2, r3
 8015ea4:	131b      	asrs	r3, r3, #12
 8015ea6:	3364      	adds	r3, #100	; 0x64
 8015ea8:	4a2c      	ldr	r2, [pc, #176]	; (8015f5c <Auto_Fit+0x414>)
 8015eaa:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015eae:	1a9b      	subs	r3, r3, r2
 8015eb0:	330f      	adds	r3, #15
 8015eb2:	2bc2      	cmp	r3, #194	; 0xc2
 8015eb4:	dc30      	bgt.n	8015f18 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015eb6:	4b31      	ldr	r3, [pc, #196]	; (8015f7c <Auto_Fit+0x434>)
 8015eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ebc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ec0:	4a28      	ldr	r2, [pc, #160]	; (8015f64 <Auto_Fit+0x41c>)
 8015ec2:	6811      	ldr	r1, [r2, #0]
 8015ec4:	4a28      	ldr	r2, [pc, #160]	; (8015f68 <Auto_Fit+0x420>)
 8015ec6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015eca:	4610      	mov	r0, r2
 8015ecc:	4a27      	ldr	r2, [pc, #156]	; (8015f6c <Auto_Fit+0x424>)
 8015ece:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ed2:	2a00      	cmp	r2, #0
 8015ed4:	bf14      	ite	ne
 8015ed6:	2201      	movne	r2, #1
 8015ed8:	2200      	moveq	r2, #0
 8015eda:	b2d2      	uxtb	r2, r2
 8015edc:	4402      	add	r2, r0
 8015ede:	0052      	lsls	r2, r2, #1
 8015ee0:	440a      	add	r2, r1
 8015ee2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ee6:	0092      	lsls	r2, r2, #2
 8015ee8:	4921      	ldr	r1, [pc, #132]	; (8015f70 <Auto_Fit+0x428>)
 8015eea:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015eee:	4608      	mov	r0, r1
 8015ef0:	4920      	ldr	r1, [pc, #128]	; (8015f74 <Auto_Fit+0x42c>)
 8015ef2:	5c09      	ldrb	r1, [r1, r0]
 8015ef4:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ef8:	fb02 f303 	mul.w	r3, r2, r3
 8015efc:	131b      	asrs	r3, r3, #12
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	4b16      	ldr	r3, [pc, #88]	; (8015f5c <Auto_Fit+0x414>)
 8015f02:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	1ad3      	subs	r3, r2, r3
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	3373      	adds	r3, #115	; 0x73
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	b21a      	sxth	r2, r3
 8015f12:	4b12      	ldr	r3, [pc, #72]	; (8015f5c <Auto_Fit+0x414>)
 8015f14:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015f18:	f7ff f934 	bl	8015184 <WaveProcess>
           Update_Proc_All();
 8015f1c:	f7fe fdba 	bl	8014a94 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015f20:	4b17      	ldr	r3, [pc, #92]	; (8015f80 <Auto_Fit+0x438>)
 8015f22:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	4b0c      	ldr	r3, [pc, #48]	; (8015f5c <Auto_Fit+0x414>)
 8015f2a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	4413      	add	r3, r2
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	b21a      	sxth	r2, r3
 8015f3a:	4b11      	ldr	r3, [pc, #68]	; (8015f80 <Auto_Fit+0x438>)
 8015f3c:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015f3e:	4b07      	ldr	r3, [pc, #28]	; (8015f5c <Auto_Fit+0x414>)
 8015f40:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015f44:	f043 0320 	orr.w	r3, r3, #32
 8015f48:	b2da      	uxtb	r2, r3
 8015f4a:	4b04      	ldr	r3, [pc, #16]	; (8015f5c <Auto_Fit+0x414>)
 8015f4c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015f50:	f7fc fa9c 	bl	801248c <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015f54:	2064      	movs	r0, #100	; 0x64
 8015f56:	f002 fa7f 	bl	8018458 <HAL_Delay>
 8015f5a:	e013      	b.n	8015f84 <Auto_Fit+0x43c>
 8015f5c:	20000298 	.word	0x20000298
 8015f60:	20002856 	.word	0x20002856
 8015f64:	2000057c 	.word	0x2000057c
 8015f68:	20006886 	.word	0x20006886
 8015f6c:	20002862 	.word	0x20002862
 8015f70:	2000284a 	.word	0x2000284a
 8015f74:	20000560 	.word	0x20000560
 8015f78:	20002868 	.word	0x20002868
 8015f7c:	2000286a 	.word	0x2000286a
 8015f80:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015f84:	4ba3      	ldr	r3, [pc, #652]	; (8016214 <Auto_Fit+0x6cc>)
 8015f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f8a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f8e:	4aa2      	ldr	r2, [pc, #648]	; (8016218 <Auto_Fit+0x6d0>)
 8015f90:	6811      	ldr	r1, [r2, #0]
 8015f92:	4aa2      	ldr	r2, [pc, #648]	; (801621c <Auto_Fit+0x6d4>)
 8015f94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f98:	4610      	mov	r0, r2
 8015f9a:	4aa1      	ldr	r2, [pc, #644]	; (8016220 <Auto_Fit+0x6d8>)
 8015f9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fa0:	2a00      	cmp	r2, #0
 8015fa2:	bf14      	ite	ne
 8015fa4:	2201      	movne	r2, #1
 8015fa6:	2200      	moveq	r2, #0
 8015fa8:	b2d2      	uxtb	r2, r2
 8015faa:	4402      	add	r2, r0
 8015fac:	0052      	lsls	r2, r2, #1
 8015fae:	440a      	add	r2, r1
 8015fb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fb4:	0092      	lsls	r2, r2, #2
 8015fb6:	499b      	ldr	r1, [pc, #620]	; (8016224 <Auto_Fit+0x6dc>)
 8015fb8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fbc:	4608      	mov	r0, r1
 8015fbe:	499a      	ldr	r1, [pc, #616]	; (8016228 <Auto_Fit+0x6e0>)
 8015fc0:	5c09      	ldrb	r1, [r1, r0]
 8015fc2:	fb92 f2f1 	sdiv	r2, r2, r1
 8015fc6:	fb02 f303 	mul.w	r3, r2, r3
 8015fca:	131b      	asrs	r3, r3, #12
 8015fcc:	3364      	adds	r3, #100	; 0x64
 8015fce:	4a97      	ldr	r2, [pc, #604]	; (801622c <Auto_Fit+0x6e4>)
 8015fd0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015fd4:	1a9b      	subs	r3, r3, r2
 8015fd6:	2b0a      	cmp	r3, #10
 8015fd8:	dd76      	ble.n	80160c8 <Auto_Fit+0x580>
      WaveProcess();
 8015fda:	f7ff f8d3 	bl	8015184 <WaveProcess>
      Update_Proc_All();
 8015fde:	f7fe fd59 	bl	8014a94 <Update_Proc_All>
      HAL_Delay(100);
 8015fe2:	2064      	movs	r0, #100	; 0x64
 8015fe4:	f002 fa38 	bl	8018458 <HAL_Delay>
      for(i=0;i<9;i++){
 8015fe8:	2300      	movs	r3, #0
 8015fea:	71fb      	strb	r3, [r7, #7]
 8015fec:	e068      	b.n	80160c0 <Auto_Fit+0x578>
        WaveProcess();
 8015fee:	f7ff f8c9 	bl	8015184 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015ff2:	4b8f      	ldr	r3, [pc, #572]	; (8016230 <Auto_Fit+0x6e8>)
 8015ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ff8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ffc:	4a86      	ldr	r2, [pc, #536]	; (8016218 <Auto_Fit+0x6d0>)
 8015ffe:	6811      	ldr	r1, [r2, #0]
 8016000:	4a86      	ldr	r2, [pc, #536]	; (801621c <Auto_Fit+0x6d4>)
 8016002:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016006:	4610      	mov	r0, r2
 8016008:	4a85      	ldr	r2, [pc, #532]	; (8016220 <Auto_Fit+0x6d8>)
 801600a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801600e:	2a00      	cmp	r2, #0
 8016010:	bf14      	ite	ne
 8016012:	2201      	movne	r2, #1
 8016014:	2200      	moveq	r2, #0
 8016016:	b2d2      	uxtb	r2, r2
 8016018:	4402      	add	r2, r0
 801601a:	0052      	lsls	r2, r2, #1
 801601c:	440a      	add	r2, r1
 801601e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016022:	0092      	lsls	r2, r2, #2
 8016024:	497f      	ldr	r1, [pc, #508]	; (8016224 <Auto_Fit+0x6dc>)
 8016026:	f9b1 1000 	ldrsh.w	r1, [r1]
 801602a:	4608      	mov	r0, r1
 801602c:	497e      	ldr	r1, [pc, #504]	; (8016228 <Auto_Fit+0x6e0>)
 801602e:	5c09      	ldrb	r1, [r1, r0]
 8016030:	fb92 f2f1 	sdiv	r2, r2, r1
 8016034:	fb02 f303 	mul.w	r3, r2, r3
 8016038:	131b      	asrs	r3, r3, #12
 801603a:	b29a      	uxth	r2, r3
 801603c:	4b7b      	ldr	r3, [pc, #492]	; (801622c <Auto_Fit+0x6e4>)
 801603e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016042:	b29b      	uxth	r3, r3
 8016044:	1ad3      	subs	r3, r2, r3
 8016046:	b29b      	uxth	r3, r3
 8016048:	3364      	adds	r3, #100	; 0x64
 801604a:	b29b      	uxth	r3, r3
 801604c:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 801604e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016052:	2b27      	cmp	r3, #39	; 0x27
 8016054:	dc15      	bgt.n	8016082 <Auto_Fit+0x53a>
 8016056:	4b75      	ldr	r3, [pc, #468]	; (801622c <Auto_Fit+0x6e4>)
 8016058:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801605c:	2b02      	cmp	r3, #2
 801605e:	dd10      	ble.n	8016082 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8016060:	4b72      	ldr	r3, [pc, #456]	; (801622c <Auto_Fit+0x6e4>)
 8016062:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016066:	b29b      	uxth	r3, r3
 8016068:	3b01      	subs	r3, #1
 801606a:	b29b      	uxth	r3, r3
 801606c:	b21a      	sxth	r2, r3
 801606e:	4b6f      	ldr	r3, [pc, #444]	; (801622c <Auto_Fit+0x6e4>)
 8016070:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8016072:	4b6e      	ldr	r3, [pc, #440]	; (801622c <Auto_Fit+0x6e4>)
 8016074:	2264      	movs	r2, #100	; 0x64
 8016076:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8016078:	f7ff f884 	bl	8015184 <WaveProcess>
          Update_Proc_All();
 801607c:	f7fe fd0a 	bl	8014a94 <Update_Proc_All>
 8016080:	e018      	b.n	80160b4 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8016082:	f9b7 3000 	ldrsh.w	r3, [r7]
 8016086:	2b64      	cmp	r3, #100	; 0x64
 8016088:	dd14      	ble.n	80160b4 <Auto_Fit+0x56c>
 801608a:	4b68      	ldr	r3, [pc, #416]	; (801622c <Auto_Fit+0x6e4>)
 801608c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016090:	2b08      	cmp	r3, #8
 8016092:	dc0f      	bgt.n	80160b4 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8016094:	4b65      	ldr	r3, [pc, #404]	; (801622c <Auto_Fit+0x6e4>)
 8016096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801609a:	b29b      	uxth	r3, r3
 801609c:	3301      	adds	r3, #1
 801609e:	b29b      	uxth	r3, r3
 80160a0:	b21a      	sxth	r2, r3
 80160a2:	4b62      	ldr	r3, [pc, #392]	; (801622c <Auto_Fit+0x6e4>)
 80160a4:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 80160a6:	4b61      	ldr	r3, [pc, #388]	; (801622c <Auto_Fit+0x6e4>)
 80160a8:	2264      	movs	r2, #100	; 0x64
 80160aa:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 80160ac:	f7ff f86a 	bl	8015184 <WaveProcess>
          Update_Proc_All();
 80160b0:	f7fe fcf0 	bl	8014a94 <Update_Proc_All>
        }
        HAL_Delay(50);
 80160b4:	2032      	movs	r0, #50	; 0x32
 80160b6:	f002 f9cf 	bl	8018458 <HAL_Delay>
      for(i=0;i<9;i++){
 80160ba:	79fb      	ldrb	r3, [r7, #7]
 80160bc:	3301      	adds	r3, #1
 80160be:	71fb      	strb	r3, [r7, #7]
 80160c0:	79fb      	ldrb	r3, [r7, #7]
 80160c2:	2b08      	cmp	r3, #8
 80160c4:	d993      	bls.n	8015fee <Auto_Fit+0x4a6>
 80160c6:	e054      	b.n	8016172 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80160c8:	4b59      	ldr	r3, [pc, #356]	; (8016230 <Auto_Fit+0x6e8>)
 80160ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80160d2:	4a51      	ldr	r2, [pc, #324]	; (8016218 <Auto_Fit+0x6d0>)
 80160d4:	6811      	ldr	r1, [r2, #0]
 80160d6:	4a51      	ldr	r2, [pc, #324]	; (801621c <Auto_Fit+0x6d4>)
 80160d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160dc:	4610      	mov	r0, r2
 80160de:	4a50      	ldr	r2, [pc, #320]	; (8016220 <Auto_Fit+0x6d8>)
 80160e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160e4:	2a00      	cmp	r2, #0
 80160e6:	bf14      	ite	ne
 80160e8:	2201      	movne	r2, #1
 80160ea:	2200      	moveq	r2, #0
 80160ec:	b2d2      	uxtb	r2, r2
 80160ee:	4402      	add	r2, r0
 80160f0:	0052      	lsls	r2, r2, #1
 80160f2:	440a      	add	r2, r1
 80160f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80160f8:	0092      	lsls	r2, r2, #2
 80160fa:	494a      	ldr	r1, [pc, #296]	; (8016224 <Auto_Fit+0x6dc>)
 80160fc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016100:	4608      	mov	r0, r1
 8016102:	4949      	ldr	r1, [pc, #292]	; (8016228 <Auto_Fit+0x6e0>)
 8016104:	5c09      	ldrb	r1, [r1, r0]
 8016106:	fb92 f2f1 	sdiv	r2, r2, r1
 801610a:	fb02 f303 	mul.w	r3, r2, r3
 801610e:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8016110:	4b48      	ldr	r3, [pc, #288]	; (8016234 <Auto_Fit+0x6ec>)
 8016112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016116:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801611a:	493f      	ldr	r1, [pc, #252]	; (8016218 <Auto_Fit+0x6d0>)
 801611c:	6808      	ldr	r0, [r1, #0]
 801611e:	493f      	ldr	r1, [pc, #252]	; (801621c <Auto_Fit+0x6d4>)
 8016120:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016124:	460c      	mov	r4, r1
 8016126:	493e      	ldr	r1, [pc, #248]	; (8016220 <Auto_Fit+0x6d8>)
 8016128:	f9b1 1000 	ldrsh.w	r1, [r1]
 801612c:	2900      	cmp	r1, #0
 801612e:	bf14      	ite	ne
 8016130:	2101      	movne	r1, #1
 8016132:	2100      	moveq	r1, #0
 8016134:	b2c9      	uxtb	r1, r1
 8016136:	4421      	add	r1, r4
 8016138:	0049      	lsls	r1, r1, #1
 801613a:	4401      	add	r1, r0
 801613c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016140:	0089      	lsls	r1, r1, #2
 8016142:	4838      	ldr	r0, [pc, #224]	; (8016224 <Auto_Fit+0x6dc>)
 8016144:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016148:	4604      	mov	r4, r0
 801614a:	4837      	ldr	r0, [pc, #220]	; (8016228 <Auto_Fit+0x6e0>)
 801614c:	5d00      	ldrb	r0, [r0, r4]
 801614e:	fb91 f1f0 	sdiv	r1, r1, r0
 8016152:	fb01 f303 	mul.w	r3, r1, r3
 8016156:	131b      	asrs	r3, r3, #12
 8016158:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801615a:	2b09      	cmp	r3, #9
 801615c:	dc09      	bgt.n	8016172 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 801615e:	4b33      	ldr	r3, [pc, #204]	; (801622c <Auto_Fit+0x6e4>)
 8016160:	2207      	movs	r2, #7
 8016162:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8016164:	f7ff f80e 	bl	8015184 <WaveProcess>
        Update_Proc_All();
 8016168:	f7fe fc94 	bl	8014a94 <Update_Proc_All>
        HAL_Delay(50);
 801616c:	2032      	movs	r0, #50	; 0x32
 801616e:	f002 f973 	bl	8018458 <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8016172:	4b2f      	ldr	r3, [pc, #188]	; (8016230 <Auto_Fit+0x6e8>)
 8016174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016178:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801617c:	4a26      	ldr	r2, [pc, #152]	; (8016218 <Auto_Fit+0x6d0>)
 801617e:	6811      	ldr	r1, [r2, #0]
 8016180:	4a26      	ldr	r2, [pc, #152]	; (801621c <Auto_Fit+0x6d4>)
 8016182:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016186:	4610      	mov	r0, r2
 8016188:	4a25      	ldr	r2, [pc, #148]	; (8016220 <Auto_Fit+0x6d8>)
 801618a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801618e:	2a00      	cmp	r2, #0
 8016190:	bf14      	ite	ne
 8016192:	2201      	movne	r2, #1
 8016194:	2200      	moveq	r2, #0
 8016196:	b2d2      	uxtb	r2, r2
 8016198:	4402      	add	r2, r0
 801619a:	0052      	lsls	r2, r2, #1
 801619c:	440a      	add	r2, r1
 801619e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80161a2:	0092      	lsls	r2, r2, #2
 80161a4:	491f      	ldr	r1, [pc, #124]	; (8016224 <Auto_Fit+0x6dc>)
 80161a6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161aa:	4608      	mov	r0, r1
 80161ac:	491e      	ldr	r1, [pc, #120]	; (8016228 <Auto_Fit+0x6e0>)
 80161ae:	5c09      	ldrb	r1, [r1, r0]
 80161b0:	fb92 f2f1 	sdiv	r2, r2, r1
 80161b4:	fb02 f303 	mul.w	r3, r2, r3
 80161b8:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80161ba:	b29a      	uxth	r2, r3
 80161bc:	4b1d      	ldr	r3, [pc, #116]	; (8016234 <Auto_Fit+0x6ec>)
 80161be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80161c6:	4914      	ldr	r1, [pc, #80]	; (8016218 <Auto_Fit+0x6d0>)
 80161c8:	6808      	ldr	r0, [r1, #0]
 80161ca:	4914      	ldr	r1, [pc, #80]	; (801621c <Auto_Fit+0x6d4>)
 80161cc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161d0:	460c      	mov	r4, r1
 80161d2:	4913      	ldr	r1, [pc, #76]	; (8016220 <Auto_Fit+0x6d8>)
 80161d4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161d8:	2900      	cmp	r1, #0
 80161da:	bf14      	ite	ne
 80161dc:	2101      	movne	r1, #1
 80161de:	2100      	moveq	r1, #0
 80161e0:	b2c9      	uxtb	r1, r1
 80161e2:	4421      	add	r1, r4
 80161e4:	0049      	lsls	r1, r1, #1
 80161e6:	4401      	add	r1, r0
 80161e8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80161ec:	0089      	lsls	r1, r1, #2
 80161ee:	480d      	ldr	r0, [pc, #52]	; (8016224 <Auto_Fit+0x6dc>)
 80161f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80161f4:	4604      	mov	r4, r0
 80161f6:	480c      	ldr	r0, [pc, #48]	; (8016228 <Auto_Fit+0x6e0>)
 80161f8:	5d00      	ldrb	r0, [r0, r4]
 80161fa:	fb91 f1f0 	sdiv	r1, r1, r0
 80161fe:	fb01 f303 	mul.w	r3, r1, r3
 8016202:	131b      	asrs	r3, r3, #12
 8016204:	b29b      	uxth	r3, r3
 8016206:	1ad3      	subs	r3, r2, r3
 8016208:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801620a:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 801620c:	2300      	movs	r3, #0
 801620e:	71bb      	strb	r3, [r7, #6]
 8016210:	e06e      	b.n	80162f0 <Auto_Fit+0x7a8>
 8016212:	bf00      	nop
 8016214:	2000286a 	.word	0x2000286a
 8016218:	2000057c 	.word	0x2000057c
 801621c:	20006886 	.word	0x20006886
 8016220:	20002862 	.word	0x20002862
 8016224:	2000284a 	.word	0x2000284a
 8016228:	20000560 	.word	0x20000560
 801622c:	20000298 	.word	0x20000298
 8016230:	20002856 	.word	0x20002856
 8016234:	20002868 	.word	0x20002868
        WaveProcess();
 8016238:	f7fe ffa4 	bl	8015184 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 801623c:	797b      	ldrb	r3, [r7, #5]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d114      	bne.n	801626c <Auto_Fit+0x724>
 8016242:	4b38      	ldr	r3, [pc, #224]	; (8016324 <Auto_Fit+0x7dc>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b3b      	cmp	r3, #59	; 0x3b
 8016248:	dc10      	bgt.n	801626c <Auto_Fit+0x724>
 801624a:	4b37      	ldr	r3, [pc, #220]	; (8016328 <Auto_Fit+0x7e0>)
 801624c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016250:	2b05      	cmp	r3, #5
 8016252:	dd0b      	ble.n	801626c <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8016254:	2005      	movs	r0, #5
 8016256:	f7f6 fa09 	bl	800c66c <Set_Base>
          List[TIM_BASE].Val = 5;
 801625a:	4b33      	ldr	r3, [pc, #204]	; (8016328 <Auto_Fit+0x7e0>)
 801625c:	2205      	movs	r2, #5
 801625e:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8016260:	f7fe ff90 	bl	8015184 <WaveProcess>
          Update_Proc_All();
 8016264:	f7fe fc16 	bl	8014a94 <Update_Proc_All>
          k=1;
 8016268:	2301      	movs	r3, #1
 801626a:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 801626c:	4b2d      	ldr	r3, [pc, #180]	; (8016324 <Auto_Fit+0x7dc>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2bb4      	cmp	r3, #180	; 0xb4
 8016272:	dd1b      	ble.n	80162ac <Auto_Fit+0x764>
 8016274:	4b2c      	ldr	r3, [pc, #176]	; (8016328 <Auto_Fit+0x7e0>)
 8016276:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801627a:	2b02      	cmp	r3, #2
 801627c:	dd16      	ble.n	80162ac <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 801627e:	4b2a      	ldr	r3, [pc, #168]	; (8016328 <Auto_Fit+0x7e0>)
 8016280:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016284:	b29b      	uxth	r3, r3
 8016286:	3b01      	subs	r3, #1
 8016288:	b29b      	uxth	r3, r3
 801628a:	b21a      	sxth	r2, r3
 801628c:	4b26      	ldr	r3, [pc, #152]	; (8016328 <Auto_Fit+0x7e0>)
 801628e:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016290:	4b25      	ldr	r3, [pc, #148]	; (8016328 <Auto_Fit+0x7e0>)
 8016292:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016296:	4618      	mov	r0, r3
 8016298:	f7f6 f9e8 	bl	800c66c <Set_Base>
          WaveProcess();
 801629c:	f7fe ff72 	bl	8015184 <WaveProcess>
                 Update_Proc_All();
 80162a0:	f7fe fbf8 	bl	8014a94 <Update_Proc_All>
          HAL_Delay(50);
 80162a4:	2032      	movs	r0, #50	; 0x32
 80162a6:	f002 f8d7 	bl	8018458 <HAL_Delay>
 80162aa:	e01e      	b.n	80162ea <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80162ac:	4b1d      	ldr	r3, [pc, #116]	; (8016324 <Auto_Fit+0x7dc>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	2b4f      	cmp	r3, #79	; 0x4f
 80162b2:	dc1a      	bgt.n	80162ea <Auto_Fit+0x7a2>
 80162b4:	4b1c      	ldr	r3, [pc, #112]	; (8016328 <Auto_Fit+0x7e0>)
 80162b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162ba:	2b0a      	cmp	r3, #10
 80162bc:	dc15      	bgt.n	80162ea <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80162be:	4b1a      	ldr	r3, [pc, #104]	; (8016328 <Auto_Fit+0x7e0>)
 80162c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	3301      	adds	r3, #1
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	b21a      	sxth	r2, r3
 80162cc:	4b16      	ldr	r3, [pc, #88]	; (8016328 <Auto_Fit+0x7e0>)
 80162ce:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80162d0:	4b15      	ldr	r3, [pc, #84]	; (8016328 <Auto_Fit+0x7e0>)
 80162d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7f6 f9c8 	bl	800c66c <Set_Base>
          WaveProcess();
 80162dc:	f7fe ff52 	bl	8015184 <WaveProcess>
                 Update_Proc_All();
 80162e0:	f7fe fbd8 	bl	8014a94 <Update_Proc_All>
          HAL_Delay(50);
 80162e4:	2032      	movs	r0, #50	; 0x32
 80162e6:	f002 f8b7 	bl	8018458 <HAL_Delay>
      for(j=0;j<11;j++){
 80162ea:	79bb      	ldrb	r3, [r7, #6]
 80162ec:	3301      	adds	r3, #1
 80162ee:	71bb      	strb	r3, [r7, #6]
 80162f0:	79bb      	ldrb	r3, [r7, #6]
 80162f2:	2b0a      	cmp	r3, #10
 80162f4:	d9a0      	bls.n	8016238 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80162f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80162fa:	2b13      	cmp	r3, #19
 80162fc:	dc0b      	bgt.n	8016316 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80162fe:	4b0a      	ldr	r3, [pc, #40]	; (8016328 <Auto_Fit+0x7e0>)
 8016300:	2205      	movs	r2, #5
 8016302:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016304:	4b08      	ldr	r3, [pc, #32]	; (8016328 <Auto_Fit+0x7e0>)
 8016306:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801630a:	4618      	mov	r0, r3
 801630c:	f7f6 f9ae 	bl	800c66c <Set_Base>
        HAL_Delay(50);
 8016310:	2032      	movs	r0, #50	; 0x32
 8016312:	f002 f8a1 	bl	8018458 <HAL_Delay>
      }
       Update_Proc_All();
 8016316:	f7fe fbbd 	bl	8014a94 <Update_Proc_All>
  }
}
 801631a:	bf00      	nop
 801631c:	370c      	adds	r7, #12
 801631e:	46bd      	mov	sp, r7
 8016320:	bd90      	pop	{r4, r7, pc}
 8016322:	bf00      	nop
 8016324:	20002850 	.word	0x20002850
 8016328:	20000298 	.word	0x20000298

0801632c <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016330:	f000 f810 	bl	8016354 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8016334:	2200      	movs	r2, #0
 8016336:	2140      	movs	r1, #64	; 0x40
 8016338:	4805      	ldr	r0, [pc, #20]	; (8016350 <Init_Touch+0x24>)
 801633a:	f003 fc6b 	bl	8019c14 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801633e:	2201      	movs	r2, #1
 8016340:	2140      	movs	r1, #64	; 0x40
 8016342:	4803      	ldr	r0, [pc, #12]	; (8016350 <Init_Touch+0x24>)
 8016344:	f003 fc66 	bl	8019c14 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016348:	f000 f814 	bl	8016374 <LCD_SPI>
}
 801634c:	bf00      	nop
 801634e:	bd80      	pop	{r7, pc}
 8016350:	40020400 	.word	0x40020400

08016354 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016358:	4b05      	ldr	r3, [pc, #20]	; (8016370 <Touch_SPI+0x1c>)
 801635a:	2200      	movs	r2, #0
 801635c:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 801635e:	4b04      	ldr	r3, [pc, #16]	; (8016370 <Touch_SPI+0x1c>)
 8016360:	2218      	movs	r2, #24
 8016362:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016364:	4802      	ldr	r0, [pc, #8]	; (8016370 <Touch_SPI+0x1c>)
 8016366:	f005 fed1 	bl	801c10c <HAL_SPI_Init>
}
 801636a:	bf00      	nop
 801636c:	bd80      	pop	{r7, pc}
 801636e:	bf00      	nop
 8016370:	200069c0 	.word	0x200069c0

08016374 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016378:	4b05      	ldr	r3, [pc, #20]	; (8016390 <LCD_SPI+0x1c>)
 801637a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801637e:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016380:	4b03      	ldr	r3, [pc, #12]	; (8016390 <LCD_SPI+0x1c>)
 8016382:	2210      	movs	r2, #16
 8016384:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8016386:	4802      	ldr	r0, [pc, #8]	; (8016390 <LCD_SPI+0x1c>)
 8016388:	f005 fec0 	bl	801c10c <HAL_SPI_Init>
}
 801638c:	bf00      	nop
 801638e:	bd80      	pop	{r7, pc}
 8016390:	200069c0 	.word	0x200069c0

08016394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 801639a:	2300      	movs	r3, #0
 801639c:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 801639e:	2300      	movs	r3, #0
 80163a0:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80163a2:	f001 ffe7 	bl	8018374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80163a6:	f001 f859 	bl	801745c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80163aa:	f001 fbfb 	bl	8017ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80163ae:	f001 fbc3 	bl	8017b38 <MX_DMA_Init>
  MX_ADC1_Init();
 80163b2:	f001 f8c7 	bl	8017544 <MX_ADC1_Init>
  MX_ADC2_Init();
 80163b6:	f001 f917 	bl	80175e8 <MX_ADC2_Init>
  MX_DAC_Init();
 80163ba:	f001 f967 	bl	801768c <MX_DAC_Init>
  MX_SPI2_Init();
 80163be:	f001 f9a3 	bl	8017708 <MX_SPI2_Init>
  MX_SPI3_Init();
 80163c2:	f001 f9d7 	bl	8017774 <MX_SPI3_Init>
  MX_TIM1_Init();
 80163c6:	f001 fa0d 	bl	80177e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80163ca:	f001 fa81 	bl	80178d0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80163ce:	f001 fadf 	bl	8017990 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80163d2:	f00b fec9 	bl	8022168 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80163d6:	f001 fb69 	bl	8017aac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 80163da:	4bb1      	ldr	r3, [pc, #708]	; (80166a0 <main+0x30c>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	681a      	ldr	r2, [r3, #0]
 80163e0:	4baf      	ldr	r3, [pc, #700]	; (80166a0 <main+0x30c>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	f022 0201 	bic.w	r2, r2, #1
 80163e8:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 80163ea:	4bad      	ldr	r3, [pc, #692]	; (80166a0 <main+0x30c>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 80163f2:	683a      	ldr	r2, [r7, #0]
 80163f4:	4bab      	ldr	r3, [pc, #684]	; (80166a4 <main+0x310>)
 80163f6:	4013      	ands	r3, r2
 80163f8:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8016400:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 8016402:	4ba7      	ldr	r3, [pc, #668]	; (80166a0 <main+0x30c>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	683a      	ldr	r2, [r7, #0]
 8016408:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 801640a:	4ba5      	ldr	r3, [pc, #660]	; (80166a0 <main+0x30c>)
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4aa6      	ldr	r2, [pc, #664]	; (80166a8 <main+0x314>)
 8016410:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 8016412:	4ba6      	ldr	r3, [pc, #664]	; (80166ac <main+0x318>)
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	4ba2      	ldr	r3, [pc, #648]	; (80166a0 <main+0x30c>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801641c:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 801641e:	4ba0      	ldr	r3, [pc, #640]	; (80166a0 <main+0x30c>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016426:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 8016428:	4b9d      	ldr	r3, [pc, #628]	; (80166a0 <main+0x30c>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	681a      	ldr	r2, [r3, #0]
 801642e:	4b9c      	ldr	r3, [pc, #624]	; (80166a0 <main+0x30c>)
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f042 0201 	orr.w	r2, r2, #1
 8016436:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 8016438:	f7fb fd70 	bl	8011f1c <Init_LCD>
  Init_Touch();
 801643c:	f7ff ff76 	bl	801632c <Init_Touch>

  SetColor(BLK, WHT);
 8016440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016444:	2000      	movs	r0, #0
 8016446:	f7f7 fc5d 	bl	800dd04 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 801644a:	4b99      	ldr	r3, [pc, #612]	; (80166b0 <main+0x31c>)
 801644c:	2200      	movs	r2, #0
 801644e:	215a      	movs	r1, #90	; 0x5a
 8016450:	2008      	movs	r0, #8
 8016452:	f7f7 fbff 	bl	800dc54 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8016456:	4b97      	ldr	r3, [pc, #604]	; (80166b4 <main+0x320>)
 8016458:	2200      	movs	r2, #0
 801645a:	215a      	movs	r1, #90	; 0x5a
 801645c:	20b8      	movs	r0, #184	; 0xb8
 801645e:	f7f7 fbf9 	bl	800dc54 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016462:	4b95      	ldr	r3, [pc, #596]	; (80166b8 <main+0x324>)
 8016464:	2200      	movs	r2, #0
 8016466:	2146      	movs	r1, #70	; 0x46
 8016468:	2008      	movs	r0, #8
 801646a:	f7f7 fbf3 	bl	800dc54 <DispStr8x14>

  HAL_Delay(1000);
 801646e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016472:	f001 fff1 	bl	8018458 <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8016476:	f7fa ffb9 	bl	80113ec <Read_CalFlag>

  if(Cal_Flag == 1)
 801647a:	4b90      	ldr	r3, [pc, #576]	; (80166bc <main+0x328>)
 801647c:	781b      	ldrb	r3, [r3, #0]
 801647e:	2b01      	cmp	r3, #1
 8016480:	d10f      	bne.n	80164a2 <main+0x10e>
  {
	  Cal_Flag = 0;
 8016482:	4b8e      	ldr	r3, [pc, #568]	; (80166bc <main+0x328>)
 8016484:	2200      	movs	r2, #0
 8016486:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8016488:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801648c:	2000      	movs	r0, #0
 801648e:	f7f7 fc39 	bl	800dd04 <SetColor>
	  Zero_Align();                              //set zero
 8016492:	f7fe fd81 	bl	8014f98 <Zero_Align>
	  Restore();                                 //restore list
 8016496:	f7fb f9b3 	bl	8011800 <Restore>
	  Save_Parameter();                          //save list
 801649a:	f7fa ffcf 	bl	801143c <Save_Parameter>
	  Save_Kpg();
 801649e:	f7fb f8f7 	bl	8011690 <Save_Kpg>
  }
  Read_Kpg();
 80164a2:	f7fb f96b 	bl	801177c <Read_Kpg>
  Read_Parameter();
 80164a6:	f7fb f865 	bl	8011574 <Read_Parameter>
  File_Num();
 80164aa:	f7f9 fcab 	bl	800fe04 <File_Num>
  memcpy(Data, DEMO, 310);
 80164ae:	f44f 729b 	mov.w	r2, #310	; 0x136
 80164b2:	4983      	ldr	r1, [pc, #524]	; (80166c0 <main+0x32c>)
 80164b4:	4883      	ldr	r0, [pc, #524]	; (80166c4 <main+0x330>)
 80164b6:	f00c fbf5 	bl	8022ca4 <memcpy>

  LCD_ClrScrn(GRY);
 80164ba:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80164be:	f7fb fe43 	bl	8012148 <LCD_ClrScrn>
  Update_Title();
 80164c2:	f7fb ffe3 	bl	801248c <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80164c6:	4b80      	ldr	r3, [pc, #512]	; (80166c8 <main+0x334>)
 80164c8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80164cc:	f043 0320 	orr.w	r3, r3, #32
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	4b7d      	ldr	r3, [pc, #500]	; (80166c8 <main+0x334>)
 80164d4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 80164d8:	4b7b      	ldr	r3, [pc, #492]	; (80166c8 <main+0x334>)
 80164da:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80164de:	b29b      	uxth	r3, r3
 80164e0:	461a      	mov	r2, r3
 80164e2:	0112      	lsls	r2, r2, #4
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	009b      	lsls	r3, r3, #2
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	b21a      	sxth	r2, r3
 80164ec:	4b77      	ldr	r3, [pc, #476]	; (80166cc <main+0x338>)
 80164ee:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 80164f0:	4877      	ldr	r0, [pc, #476]	; (80166d0 <main+0x33c>)
 80164f2:	f006 fd2f 	bl	801cf54 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80164f6:	4b74      	ldr	r3, [pc, #464]	; (80166c8 <main+0x334>)
 80164f8:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d007      	beq.n	8016510 <main+0x17c>
 8016500:	4b72      	ldr	r3, [pc, #456]	; (80166cc <main+0x338>)
 8016502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d102      	bne.n	8016510 <main+0x17c>
	    {
	      StdBy_Flag = 1;
 801650a:	4b72      	ldr	r3, [pc, #456]	; (80166d4 <main+0x340>)
 801650c:	2201      	movs	r2, #1
 801650e:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 8016510:	f7fc ff28 	bl	8013364 <Update_Detail>
	    Update_Blink();
 8016514:	f7fc f80e 	bl	8012534 <Update_Blink>
	    WaveProcess();
 8016518:	f7fe fe34 	bl	8015184 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 801651c:	496e      	ldr	r1, [pc, #440]	; (80166d8 <main+0x344>)
 801651e:	486f      	ldr	r0, [pc, #444]	; (80166dc <main+0x348>)
 8016520:	f7f7 f974 	bl	800d80c <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016524:	4b6e      	ldr	r3, [pc, #440]	; (80166e0 <main+0x34c>)
 8016526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d01c      	beq.n	8016568 <main+0x1d4>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 801652e:	4b6c      	ldr	r3, [pc, #432]	; (80166e0 <main+0x34c>)
 8016530:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016534:	4b64      	ldr	r3, [pc, #400]	; (80166c8 <main+0x334>)
 8016536:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8016538:	4b63      	ldr	r3, [pc, #396]	; (80166c8 <main+0x334>)
 801653a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801653e:	f043 0320 	orr.w	r3, r3, #32
 8016542:	b2da      	uxtb	r2, r3
 8016544:	4b60      	ldr	r3, [pc, #384]	; (80166c8 <main+0x334>)
 8016546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 801654a:	4b66      	ldr	r3, [pc, #408]	; (80166e4 <main+0x350>)
 801654c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016550:	4b63      	ldr	r3, [pc, #396]	; (80166e0 <main+0x34c>)
 8016552:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016554:	f7fb ff9a 	bl	801248c <Update_Title>
	      Current=TIM_BASE_Val;
 8016558:	4b61      	ldr	r3, [pc, #388]	; (80166e0 <main+0x34c>)
 801655a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801655e:	4b61      	ldr	r3, [pc, #388]	; (80166e4 <main+0x350>)
 8016560:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016562:	4b5f      	ldr	r3, [pc, #380]	; (80166e0 <main+0x34c>)
 8016564:	2200      	movs	r2, #0
 8016566:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016568:	4b5f      	ldr	r3, [pc, #380]	; (80166e8 <main+0x354>)
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	b2db      	uxtb	r3, r3
 801656e:	2b00      	cmp	r3, #0
 8016570:	d0c1      	beq.n	80164f6 <main+0x162>
	    {
	      StdBy_Flag = 0;
 8016572:	4b58      	ldr	r3, [pc, #352]	; (80166d4 <main+0x340>)
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8016578:	4b5c      	ldr	r3, [pc, #368]	; (80166ec <main+0x358>)
 801657a:	220a      	movs	r2, #10
 801657c:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 801657e:	4b59      	ldr	r3, [pc, #356]	; (80166e4 <main+0x350>)
 8016580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016584:	461a      	mov	r2, r3
 8016586:	4b5a      	ldr	r3, [pc, #360]	; (80166f0 <main+0x35c>)
 8016588:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801658c:	4a4e      	ldr	r2, [pc, #312]	; (80166c8 <main+0x334>)
 801658e:	00db      	lsls	r3, r3, #3
 8016590:	4413      	add	r3, r2
 8016592:	799b      	ldrb	r3, [r3, #6]
 8016594:	4a53      	ldr	r2, [pc, #332]	; (80166e4 <main+0x350>)
 8016596:	f9b2 2000 	ldrsh.w	r2, [r2]
 801659a:	4611      	mov	r1, r2
 801659c:	4a54      	ldr	r2, [pc, #336]	; (80166f0 <main+0x35c>)
 801659e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80165a2:	4610      	mov	r0, r2
 80165a4:	f043 0320 	orr.w	r3, r3, #32
 80165a8:	b2d9      	uxtb	r1, r3
 80165aa:	4a47      	ldr	r2, [pc, #284]	; (80166c8 <main+0x334>)
 80165ac:	00c3      	lsls	r3, r0, #3
 80165ae:	4413      	add	r3, r2
 80165b0:	460a      	mov	r2, r1
 80165b2:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 80165b4:	4b4c      	ldr	r3, [pc, #304]	; (80166e8 <main+0x354>)
 80165b6:	781b      	ldrb	r3, [r3, #0]
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	3b01      	subs	r3, #1
 80165bc:	2b09      	cmp	r3, #9
 80165be:	f200 8709 	bhi.w	80173d4 <main+0x1040>
 80165c2:	a201      	add	r2, pc, #4	; (adr r2, 80165c8 <main+0x234>)
 80165c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165c8:	08016639 	.word	0x08016639
 80165cc:	0801694d 	.word	0x0801694d
 80165d0:	08016aa5 	.word	0x08016aa5
 80165d4:	08016b53 	.word	0x08016b53
 80165d8:	08016c09 	.word	0x08016c09
 80165dc:	08016faf 	.word	0x08016faf
 80165e0:	080173d5 	.word	0x080173d5
 80165e4:	08016613 	.word	0x08016613
 80165e8:	080165f1 	.word	0x080165f1
 80165ec:	08016939 	.word	0x08016939
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 80165f0:	4b35      	ldr	r3, [pc, #212]	; (80166c8 <main+0x334>)
 80165f2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7f9 ff26 	bl	8010448 <Save_Bmp>
 80165fc:	4603      	mov	r3, r0
 80165fe:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8016600:	88fb      	ldrh	r3, [r7, #6]
 8016602:	b2db      	uxtb	r3, r3
 8016604:	4618      	mov	r0, r3
 8016606:	f7fe f9cf 	bl	80149a8 <DispFileInfo>
	         DispBMPInfo();
 801660a:	f7fe f9fd 	bl	8014a08 <DispBMPInfo>
	        break;
 801660e:	f000 bee1 	b.w	80173d4 <main+0x1040>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8016612:	2300      	movs	r3, #0
 8016614:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8016616:	4b37      	ldr	r3, [pc, #220]	; (80166f4 <main+0x360>)
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	f003 0304 	and.w	r3, r3, #4
 801661e:	2b00      	cmp	r3, #0
 8016620:	d003      	beq.n	801662a <main+0x296>
 8016622:	f7f8 f8f3 	bl	800e80c <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8016626:	f000 bed5 	b.w	80173d4 <main+0x1040>
	         Dialog_Pop("Save All ParamTab?");
 801662a:	4833      	ldr	r0, [pc, #204]	; (80166f8 <main+0x364>)
 801662c:	f7f8 f91a 	bl	800e864 <Dialog_Pop>
	         Pop_Num = 1;
 8016630:	2301      	movs	r3, #1
 8016632:	713b      	strb	r3, [r7, #4]
	       break;
 8016634:	f000 bece 	b.w	80173d4 <main+0x1040>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8016638:	4b2a      	ldr	r3, [pc, #168]	; (80166e4 <main+0x350>)
 801663a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801663e:	2b07      	cmp	r3, #7
 8016640:	f040 8080 	bne.w	8016744 <main+0x3b0>
 8016644:	4b1d      	ldr	r3, [pc, #116]	; (80166bc <main+0x328>)
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d17b      	bne.n	8016744 <main+0x3b0>
	       {
	         if(PopType & DAILOG_POP){
 801664c:	4b29      	ldr	r3, [pc, #164]	; (80166f4 <main+0x360>)
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	f003 0304 	and.w	r3, r3, #4
 8016654:	2b00      	cmp	r3, #0
 8016656:	d00e      	beq.n	8016676 <main+0x2e2>
	           if(Pop_Num == 1){
 8016658:	793b      	ldrb	r3, [r7, #4]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d105      	bne.n	801666a <main+0x2d6>
	             Save_Parameter();
 801665e:	f7fa feed 	bl	801143c <Save_Parameter>
	             Close_Pop();
 8016662:	f7f8 f8d3 	bl	800e80c <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016666:	f000 bea6 	b.w	80173b6 <main+0x1022>
	             Close_Pop();
 801666a:	f7f8 f8cf 	bl	800e80c <Close_Pop>
	             List_Pop();
 801666e:	f7f8 f8e3 	bl	800e838 <List_Pop>
	         break;
 8016672:	f000 bea0 	b.w	80173b6 <main+0x1022>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8016676:	4b1f      	ldr	r3, [pc, #124]	; (80166f4 <main+0x360>)
 8016678:	781b      	ldrb	r3, [r3, #0]
 801667a:	f003 0302 	and.w	r3, r3, #2
 801667e:	2b00      	cmp	r3, #0
 8016680:	d03c      	beq.n	80166fc <main+0x368>
 8016682:	4b1b      	ldr	r3, [pc, #108]	; (80166f0 <main+0x35c>)
 8016684:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016688:	2b28      	cmp	r3, #40	; 0x28
 801668a:	d137      	bne.n	80166fc <main+0x368>
	           Restore_CalPar();
 801668c:	f7fb f922 	bl	80118d4 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8016690:	4819      	ldr	r0, [pc, #100]	; (80166f8 <main+0x364>)
 8016692:	f7f8 f8e7 	bl	800e864 <Dialog_Pop>
	           Cal_Flag = 1;
 8016696:	4b09      	ldr	r3, [pc, #36]	; (80166bc <main+0x328>)
 8016698:	2201      	movs	r2, #1
 801669a:	701a      	strb	r2, [r3, #0]
	         break;
 801669c:	f000 be8b 	b.w	80173b6 <main+0x1022>
 80166a0:	20006b0c 	.word	0x20006b0c
 80166a4:	0ffcfffe 	.word	0x0ffcfffe
 80166a8:	20002874 	.word	0x20002874
 80166ac:	20006a78 	.word	0x20006a78
 80166b0:	080009f4 	.word	0x080009f4
 80166b4:	20000580 	.word	0x20000580
 80166b8:	08000a18 	.word	0x08000a18
 80166bc:	200001b4 	.word	0x200001b4
 80166c0:	08000b58 	.word	0x08000b58
 80166c4:	20000008 	.word	0x20000008
 80166c8:	20000298 	.word	0x20000298
 80166cc:	2000079c 	.word	0x2000079c
 80166d0:	20006978 	.word	0x20006978
 80166d4:	200007a2 	.word	0x200007a2
 80166d8:	20000140 	.word	0x20000140
 80166dc:	20000c08 	.word	0x20000c08
 80166e0:	20002814 	.word	0x20002814
 80166e4:	2000079e 	.word	0x2000079e
 80166e8:	2000077d 	.word	0x2000077d
 80166ec:	20000000 	.word	0x20000000
 80166f0:	20000538 	.word	0x20000538
 80166f4:	2000078e 	.word	0x2000078e
 80166f8:	08000a40 	.word	0x08000a40
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 80166fc:	4baf      	ldr	r3, [pc, #700]	; (80169bc <main+0x628>)
 80166fe:	781b      	ldrb	r3, [r3, #0]
 8016700:	f003 0302 	and.w	r3, r3, #2
 8016704:	2b00      	cmp	r3, #0
 8016706:	f000 8656 	beq.w	80173b6 <main+0x1022>
 801670a:	4bad      	ldr	r3, [pc, #692]	; (80169c0 <main+0x62c>)
 801670c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016710:	2b27      	cmp	r3, #39	; 0x27
 8016712:	f040 8650 	bne.w	80173b6 <main+0x1022>
	           Close_Pop();
 8016716:	f7f8 f879 	bl	800e80c <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 801671a:	48aa      	ldr	r0, [pc, #680]	; (80169c4 <main+0x630>)
 801671c:	f7f8 f908 	bl	800e930 <Calibrate_Pop>
	           Cal_Flag = 1;
 8016720:	4ba9      	ldr	r3, [pc, #676]	; (80169c8 <main+0x634>)
 8016722:	2201      	movs	r2, #1
 8016724:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8016726:	49a9      	ldr	r1, [pc, #676]	; (80169cc <main+0x638>)
 8016728:	48a9      	ldr	r0, [pc, #676]	; (80169d0 <main+0x63c>)
 801672a:	f7f7 f86f 	bl	800d80c <DrawWindow>
	           Zero_Align();
 801672e:	f7fe fc33 	bl	8014f98 <Zero_Align>
	           Update_Proc_All();
 8016732:	f7fe f9af 	bl	8014a94 <Update_Proc_All>
	           Close_Pop();
 8016736:	f7f8 f869 	bl	800e80c <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 801673a:	48a6      	ldr	r0, [pc, #664]	; (80169d4 <main+0x640>)
 801673c:	f7f8 f92e 	bl	800e99c <CalSave_Pop>
	         break;
 8016740:	f000 be39 	b.w	80173b6 <main+0x1022>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8016744:	4ba4      	ldr	r3, [pc, #656]	; (80169d8 <main+0x644>)
 8016746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801674a:	2b07      	cmp	r3, #7
 801674c:	d113      	bne.n	8016776 <main+0x3e2>
 801674e:	4b9e      	ldr	r3, [pc, #632]	; (80169c8 <main+0x634>)
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	2b01      	cmp	r3, #1
 8016754:	d10f      	bne.n	8016776 <main+0x3e2>
	         if(PopType & DAILOG_POP){
 8016756:	4b99      	ldr	r3, [pc, #612]	; (80169bc <main+0x628>)
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	f003 0304 	and.w	r3, r3, #4
 801675e:	2b00      	cmp	r3, #0
 8016760:	f000 862b 	beq.w	80173ba <main+0x1026>
	           Save_Kpg();
 8016764:	f7fa ff94 	bl	8011690 <Save_Kpg>
	           Close_Pop();
 8016768:	f7f8 f850 	bl	800e80c <Close_Pop>
	           Cal_Flag = 0;
 801676c:	4b96      	ldr	r3, [pc, #600]	; (80169c8 <main+0x634>)
 801676e:	2200      	movs	r2, #0
 8016770:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016772:	f000 be22 	b.w	80173ba <main+0x1026>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8016776:	4b98      	ldr	r3, [pc, #608]	; (80169d8 <main+0x644>)
 8016778:	f9b3 3000 	ldrsh.w	r3, [r3]
 801677c:	2b05      	cmp	r3, #5
 801677e:	d177      	bne.n	8016870 <main+0x4dc>
 8016780:	4b8e      	ldr	r3, [pc, #568]	; (80169bc <main+0x628>)
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	f003 0302 	and.w	r3, r3, #2
 8016788:	2b00      	cmp	r3, #0
 801678a:	d071      	beq.n	8016870 <main+0x4dc>
	         i = 0;
 801678c:	2300      	movs	r3, #0
 801678e:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016790:	797b      	ldrb	r3, [r7, #5]
 8016792:	2b09      	cmp	r3, #9
 8016794:	d101      	bne.n	801679a <main+0x406>
 8016796:	f7f8 f839 	bl	800e80c <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 801679a:	4b89      	ldr	r3, [pc, #548]	; (80169c0 <main+0x62c>)
 801679c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167a0:	2b1d      	cmp	r3, #29
 80167a2:	d107      	bne.n	80167b4 <main+0x420>
 80167a4:	4b8d      	ldr	r3, [pc, #564]	; (80169dc <main+0x648>)
 80167a6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7f9 fe4c 	bl	8010448 <Save_Bmp>
 80167b0:	4603      	mov	r3, r0
 80167b2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 80167b4:	4b82      	ldr	r3, [pc, #520]	; (80169c0 <main+0x62c>)
 80167b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167ba:	2b1e      	cmp	r3, #30
 80167bc:	d107      	bne.n	80167ce <main+0x43a>
 80167be:	4b87      	ldr	r3, [pc, #540]	; (80169dc <main+0x648>)
 80167c0:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f9 fcff 	bl	80101c8 <Save_Dat>
 80167ca:	4603      	mov	r3, r0
 80167cc:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 80167ce:	4b7c      	ldr	r3, [pc, #496]	; (80169c0 <main+0x62c>)
 80167d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167d4:	2b1f      	cmp	r3, #31
 80167d6:	d107      	bne.n	80167e8 <main+0x454>
 80167d8:	4b80      	ldr	r3, [pc, #512]	; (80169dc <main+0x648>)
 80167da:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80167de:	4618      	mov	r0, r3
 80167e0:	f7f9 fc1c 	bl	801001c <Save_Buf>
 80167e4:	4603      	mov	r3, r0
 80167e6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 80167e8:	4b75      	ldr	r3, [pc, #468]	; (80169c0 <main+0x62c>)
 80167ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80167ee:	2b20      	cmp	r3, #32
 80167f0:	d107      	bne.n	8016802 <main+0x46e>
 80167f2:	4b7a      	ldr	r3, [pc, #488]	; (80169dc <main+0x648>)
 80167f4:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7f9 ff8f 	bl	801071c <Save_Csv>
 80167fe:	4603      	mov	r3, r0
 8016800:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8016802:	4b6f      	ldr	r3, [pc, #444]	; (80169c0 <main+0x62c>)
 8016804:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016808:	2b21      	cmp	r3, #33	; 0x21
 801680a:	d107      	bne.n	801681c <main+0x488>
 801680c:	4b73      	ldr	r3, [pc, #460]	; (80169dc <main+0x648>)
 801680e:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8016812:	4618      	mov	r0, r3
 8016814:	f7fa f9a8 	bl	8010b68 <Save_Svg>
 8016818:	4603      	mov	r3, r0
 801681a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 801681c:	4b68      	ldr	r3, [pc, #416]	; (80169c0 <main+0x62c>)
 801681e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016822:	2b22      	cmp	r3, #34	; 0x22
 8016824:	d107      	bne.n	8016836 <main+0x4a2>
 8016826:	4b6d      	ldr	r3, [pc, #436]	; (80169dc <main+0x648>)
 8016828:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801682c:	4618      	mov	r0, r3
 801682e:	f7f9 fd5f 	bl	80102f0 <Load_Dat>
 8016832:	4603      	mov	r3, r0
 8016834:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8016836:	4b62      	ldr	r3, [pc, #392]	; (80169c0 <main+0x62c>)
 8016838:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801683c:	2b23      	cmp	r3, #35	; 0x23
 801683e:	d107      	bne.n	8016850 <main+0x4bc>
 8016840:	4b66      	ldr	r3, [pc, #408]	; (80169dc <main+0x648>)
 8016842:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016846:	4618      	mov	r0, r3
 8016848:	f7f9 fb0a 	bl	800fe60 <Load_Buf>
 801684c:	4603      	mov	r3, r0
 801684e:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016850:	2300      	movs	r3, #0
 8016852:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016854:	88fb      	ldrh	r3, [r7, #6]
 8016856:	b2db      	uxtb	r3, r3
 8016858:	4618      	mov	r0, r3
 801685a:	f7fe f8a5 	bl	80149a8 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 801685e:	4b57      	ldr	r3, [pc, #348]	; (80169bc <main+0x628>)
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	f003 0304 	and.w	r3, r3, #4
 8016866:	2b00      	cmp	r3, #0
 8016868:	d062      	beq.n	8016930 <main+0x59c>
 801686a:	f7f7 ffcf 	bl	800e80c <Close_Pop>
 801686e:	e05f      	b.n	8016930 <main+0x59c>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016870:	4b52      	ldr	r3, [pc, #328]	; (80169bc <main+0x628>)
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	f003 0304 	and.w	r3, r3, #4
 8016878:	2b00      	cmp	r3, #0
 801687a:	d00b      	beq.n	8016894 <main+0x500>
 801687c:	797b      	ldrb	r3, [r7, #5]
 801687e:	2b09      	cmp	r3, #9
 8016880:	d008      	beq.n	8016894 <main+0x500>
	         Save_Parameter();
 8016882:	f7fa fddb 	bl	801143c <Save_Parameter>
	         Cal_Flag = 0;
 8016886:	4b50      	ldr	r3, [pc, #320]	; (80169c8 <main+0x634>)
 8016888:	2200      	movs	r2, #0
 801688a:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 801688c:	f7f7 ffbe 	bl	800e80c <Close_Pop>
	         break;
 8016890:	f000 bda0 	b.w	80173d4 <main+0x1040>
	       }
	       else {
	          if(Status & STOP){
 8016894:	4b52      	ldr	r3, [pc, #328]	; (80169e0 <main+0x64c>)
 8016896:	f9b3 3000 	ldrsh.w	r3, [r3]
 801689a:	b29b      	uxth	r3, r3
 801689c:	f003 0301 	and.w	r3, r3, #1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d02e      	beq.n	8016902 <main+0x56e>
	            if(Status & LOADM )Status &= ~LOADM;
 80168a4:	4b4e      	ldr	r3, [pc, #312]	; (80169e0 <main+0x64c>)
 80168a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	f003 0310 	and.w	r3, r3, #16
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d007      	beq.n	80168c4 <main+0x530>
 80168b4:	4b4a      	ldr	r3, [pc, #296]	; (80169e0 <main+0x64c>)
 80168b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ba:	f023 0310 	bic.w	r3, r3, #16
 80168be:	b21a      	sxth	r2, r3
 80168c0:	4b47      	ldr	r3, [pc, #284]	; (80169e0 <main+0x64c>)
 80168c2:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 80168c4:	4b46      	ldr	r3, [pc, #280]	; (80169e0 <main+0x64c>)
 80168c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ca:	f023 0301 	bic.w	r3, r3, #1
 80168ce:	b21a      	sxth	r2, r3
 80168d0:	4b43      	ldr	r3, [pc, #268]	; (80169e0 <main+0x64c>)
 80168d2:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80168d4:	4b41      	ldr	r3, [pc, #260]	; (80169dc <main+0x648>)
 80168d6:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80168da:	2b04      	cmp	r3, #4
 80168dc:	d101      	bne.n	80168e2 <main+0x54e>
 80168de:	f7f5 ff5d 	bl	800c79c <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80168e2:	4b3e      	ldr	r3, [pc, #248]	; (80169dc <main+0x648>)
 80168e4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80168e8:	2b03      	cmp	r3, #3
 80168ea:	d101      	bne.n	80168f0 <main+0x55c>
 80168ec:	f7f5 ff56 	bl	800c79c <ADC_Start>
	            Norm_Clr = 1;
 80168f0:	4b3c      	ldr	r3, [pc, #240]	; (80169e4 <main+0x650>)
 80168f2:	2201      	movs	r2, #1
 80168f4:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80168f6:	4b3c      	ldr	r3, [pc, #240]	; (80169e8 <main+0x654>)
 80168f8:	2201      	movs	r2, #1
 80168fa:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80168fc:	f7fe f8ca 	bl	8014a94 <Update_Proc_All>
 8016900:	e016      	b.n	8016930 <main+0x59c>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 8016902:	4b37      	ldr	r3, [pc, #220]	; (80169e0 <main+0x64c>)
 8016904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016908:	f043 0301 	orr.w	r3, r3, #1
 801690c:	b21a      	sxth	r2, r3
 801690e:	4b34      	ldr	r3, [pc, #208]	; (80169e0 <main+0x64c>)
 8016910:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 8016912:	4b32      	ldr	r3, [pc, #200]	; (80169dc <main+0x648>)
 8016914:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8016918:	4b34      	ldr	r3, [pc, #208]	; (80169ec <main+0x658>)
 801691a:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 801691c:	4b2f      	ldr	r3, [pc, #188]	; (80169dc <main+0x648>)
 801691e:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016922:	4b33      	ldr	r3, [pc, #204]	; (80169f0 <main+0x65c>)
 8016924:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 8016926:	4b2d      	ldr	r3, [pc, #180]	; (80169dc <main+0x648>)
 8016928:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 801692c:	4b31      	ldr	r3, [pc, #196]	; (80169f4 <main+0x660>)
 801692e:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016930:	f7fd fda4 	bl	801447c <DispStatus>
 	       break;
 8016934:	f000 bd4e 	b.w	80173d4 <main+0x1040>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 8016938:	4b28      	ldr	r3, [pc, #160]	; (80169dc <main+0x648>)
 801693a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801693e:	2b00      	cmp	r3, #0
 8016940:	f000 853d 	beq.w	80173be <main+0x102a>
	        {
	          Auto_Fit();
 8016944:	f7ff f900 	bl	8015b48 <Auto_Fit>
	        }
	        break;
 8016948:	f000 bd39 	b.w	80173be <main+0x102a>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 801694c:	4b1b      	ldr	r3, [pc, #108]	; (80169bc <main+0x628>)
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	f003 0302 	and.w	r3, r3, #2
 8016954:	2b00      	cmp	r3, #0
 8016956:	d111      	bne.n	801697c <main+0x5e8>
	            if(Cal_Flag){
 8016958:	4b1b      	ldr	r3, [pc, #108]	; (80169c8 <main+0x634>)
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d006      	beq.n	801696e <main+0x5da>
	              Cal_Flag = 0;
 8016960:	4b19      	ldr	r3, [pc, #100]	; (80169c8 <main+0x634>)
 8016962:	2200      	movs	r2, #0
 8016964:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016966:	f7f7 ff51 	bl	800e80c <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 801696a:	f000 bd33 	b.w	80173d4 <main+0x1040>
	              Cal_Flag = 0;
 801696e:	4b16      	ldr	r3, [pc, #88]	; (80169c8 <main+0x634>)
 8016970:	2200      	movs	r2, #0
 8016972:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016974:	f7f7 ff60 	bl	800e838 <List_Pop>
	        break;
 8016978:	f000 bd2c 	b.w	80173d4 <main+0x1040>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 801697c:	f7f7 ff46 	bl	800e80c <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016980:	4b15      	ldr	r3, [pc, #84]	; (80169d8 <main+0x644>)
 8016982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016986:	2b01      	cmp	r3, #1
 8016988:	d109      	bne.n	801699e <main+0x60a>
 801698a:	4b14      	ldr	r3, [pc, #80]	; (80169dc <main+0x648>)
 801698c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016990:	f043 0320 	orr.w	r3, r3, #32
 8016994:	b2da      	uxtb	r2, r3
 8016996:	4b11      	ldr	r3, [pc, #68]	; (80169dc <main+0x648>)
 8016998:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801699c:	e03f      	b.n	8016a1e <main+0x68a>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 801699e:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <main+0x644>)
 80169a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d127      	bne.n	80169f8 <main+0x664>
 80169a8:	4b0c      	ldr	r3, [pc, #48]	; (80169dc <main+0x648>)
 80169aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80169ae:	f043 0320 	orr.w	r3, r3, #32
 80169b2:	b2da      	uxtb	r2, r3
 80169b4:	4b09      	ldr	r3, [pc, #36]	; (80169dc <main+0x648>)
 80169b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80169ba:	e030      	b.n	8016a1e <main+0x68a>
 80169bc:	2000078e 	.word	0x2000078e
 80169c0:	20000538 	.word	0x20000538
 80169c4:	08000a54 	.word	0x08000a54
 80169c8:	200001b4 	.word	0x200001b4
 80169cc:	20000140 	.word	0x20000140
 80169d0:	20000c08 	.word	0x20000c08
 80169d4:	08000a70 	.word	0x08000a70
 80169d8:	2000079e 	.word	0x2000079e
 80169dc:	20000298 	.word	0x20000298
 80169e0:	200007a0 	.word	0x200007a0
 80169e4:	200007a7 	.word	0x200007a7
 80169e8:	2000055c 	.word	0x2000055c
 80169ec:	20006884 	.word	0x20006884
 80169f0:	2000687c 	.word	0x2000687c
 80169f4:	20002860 	.word	0x20002860
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80169f8:	4b7d      	ldr	r3, [pc, #500]	; (8016bf0 <main+0x85c>)
 80169fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80169fe:	4a7d      	ldr	r2, [pc, #500]	; (8016bf4 <main+0x860>)
 8016a00:	00db      	lsls	r3, r3, #3
 8016a02:	4413      	add	r3, r2
 8016a04:	799b      	ldrb	r3, [r3, #6]
 8016a06:	4a7a      	ldr	r2, [pc, #488]	; (8016bf0 <main+0x85c>)
 8016a08:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8016a0c:	4610      	mov	r0, r2
 8016a0e:	f043 0320 	orr.w	r3, r3, #32
 8016a12:	b2d9      	uxtb	r1, r3
 8016a14:	4a77      	ldr	r2, [pc, #476]	; (8016bf4 <main+0x860>)
 8016a16:	00c3      	lsls	r3, r0, #3
 8016a18:	4413      	add	r3, r2
 8016a1a:	460a      	mov	r2, r1
 8016a1c:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 8016a1e:	4b76      	ldr	r3, [pc, #472]	; (8016bf8 <main+0x864>)
 8016a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a24:	461a      	mov	r2, r3
 8016a26:	4b72      	ldr	r3, [pc, #456]	; (8016bf0 <main+0x85c>)
 8016a28:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a2c:	2b09      	cmp	r3, #9
 8016a2e:	d10a      	bne.n	8016a46 <main+0x6b2>
 8016a30:	4b70      	ldr	r3, [pc, #448]	; (8016bf4 <main+0x860>)
 8016a32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016a36:	f043 0320 	orr.w	r3, r3, #32
 8016a3a:	b2da      	uxtb	r2, r3
 8016a3c:	4b6d      	ldr	r3, [pc, #436]	; (8016bf4 <main+0x860>)
 8016a3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016a42:	f000 bcc7 	b.w	80173d4 <main+0x1040>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016a46:	4b6c      	ldr	r3, [pc, #432]	; (8016bf8 <main+0x864>)
 8016a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a4c:	2b05      	cmp	r3, #5
 8016a4e:	d114      	bne.n	8016a7a <main+0x6e6>
 8016a50:	4b67      	ldr	r3, [pc, #412]	; (8016bf0 <main+0x85c>)
 8016a52:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016a56:	4a67      	ldr	r2, [pc, #412]	; (8016bf4 <main+0x860>)
 8016a58:	00db      	lsls	r3, r3, #3
 8016a5a:	4413      	add	r3, r2
 8016a5c:	799b      	ldrb	r3, [r3, #6]
 8016a5e:	4a64      	ldr	r2, [pc, #400]	; (8016bf0 <main+0x85c>)
 8016a60:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016a64:	4610      	mov	r0, r2
 8016a66:	f043 0320 	orr.w	r3, r3, #32
 8016a6a:	b2d9      	uxtb	r1, r3
 8016a6c:	4a61      	ldr	r2, [pc, #388]	; (8016bf4 <main+0x860>)
 8016a6e:	00c3      	lsls	r3, r0, #3
 8016a70:	4413      	add	r3, r2
 8016a72:	460a      	mov	r2, r1
 8016a74:	719a      	strb	r2, [r3, #6]
	        break;
 8016a76:	f000 bcad 	b.w	80173d4 <main+0x1040>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016a7a:	4b5d      	ldr	r3, [pc, #372]	; (8016bf0 <main+0x85c>)
 8016a7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016a80:	4a5c      	ldr	r2, [pc, #368]	; (8016bf4 <main+0x860>)
 8016a82:	00db      	lsls	r3, r3, #3
 8016a84:	4413      	add	r3, r2
 8016a86:	799b      	ldrb	r3, [r3, #6]
 8016a88:	4a59      	ldr	r2, [pc, #356]	; (8016bf0 <main+0x85c>)
 8016a8a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016a8e:	4610      	mov	r0, r2
 8016a90:	f043 0320 	orr.w	r3, r3, #32
 8016a94:	b2d9      	uxtb	r1, r3
 8016a96:	4a57      	ldr	r2, [pc, #348]	; (8016bf4 <main+0x860>)
 8016a98:	00c3      	lsls	r3, r0, #3
 8016a9a:	4413      	add	r3, r2
 8016a9c:	460a      	mov	r2, r1
 8016a9e:	719a      	strb	r2, [r3, #6]
	        break;
 8016aa0:	f000 bc98 	b.w	80173d4 <main+0x1040>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016aa4:	4b55      	ldr	r3, [pc, #340]	; (8016bfc <main+0x868>)
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	f003 0302 	and.w	r3, r3, #2
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d03b      	beq.n	8016b28 <main+0x794>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016ab0:	4b51      	ldr	r3, [pc, #324]	; (8016bf8 <main+0x864>)
 8016ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab6:	461a      	mov	r2, r3
 8016ab8:	4b4d      	ldr	r3, [pc, #308]	; (8016bf0 <main+0x85c>)
 8016aba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	4b4d      	ldr	r3, [pc, #308]	; (8016bf8 <main+0x864>)
 8016ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	4b4d      	ldr	r3, [pc, #308]	; (8016c00 <main+0x86c>)
 8016aca:	5c5b      	ldrb	r3, [r3, r1]
 8016acc:	429a      	cmp	r2, r3
 8016ace:	dd0e      	ble.n	8016aee <main+0x75a>
 8016ad0:	4b49      	ldr	r3, [pc, #292]	; (8016bf8 <main+0x864>)
 8016ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad6:	4a46      	ldr	r2, [pc, #280]	; (8016bf0 <main+0x85c>)
 8016ad8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016adc:	b292      	uxth	r2, r2
 8016ade:	3a01      	subs	r2, #1
 8016ae0:	b292      	uxth	r2, r2
 8016ae2:	b211      	sxth	r1, r2
 8016ae4:	4a42      	ldr	r2, [pc, #264]	; (8016bf0 <main+0x85c>)
 8016ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 8016aea:	f000 bc73 	b.w	80173d4 <main+0x1040>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 8016aee:	4b42      	ldr	r3, [pc, #264]	; (8016bf8 <main+0x864>)
 8016af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af4:	461a      	mov	r2, r3
 8016af6:	4b3e      	ldr	r3, [pc, #248]	; (8016bf0 <main+0x85c>)
 8016af8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016afc:	b29a      	uxth	r2, r3
 8016afe:	4b3e      	ldr	r3, [pc, #248]	; (8016bf8 <main+0x864>)
 8016b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b04:	4619      	mov	r1, r3
 8016b06:	4b3f      	ldr	r3, [pc, #252]	; (8016c04 <main+0x870>)
 8016b08:	5c5b      	ldrb	r3, [r3, r1]
 8016b0a:	b29b      	uxth	r3, r3
 8016b0c:	4413      	add	r3, r2
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	3b01      	subs	r3, #1
 8016b12:	b299      	uxth	r1, r3
 8016b14:	4b38      	ldr	r3, [pc, #224]	; (8016bf8 <main+0x864>)
 8016b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b1a:	461a      	mov	r2, r3
 8016b1c:	b209      	sxth	r1, r1
 8016b1e:	4b34      	ldr	r3, [pc, #208]	; (8016bf0 <main+0x85c>)
 8016b20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016b24:	f000 bc56 	b.w	80173d4 <main+0x1040>
	          if (Current > 0) Current--;
 8016b28:	4b33      	ldr	r3, [pc, #204]	; (8016bf8 <main+0x864>)
 8016b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	dd0a      	ble.n	8016b48 <main+0x7b4>
 8016b32:	4b31      	ldr	r3, [pc, #196]	; (8016bf8 <main+0x864>)
 8016b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	b21a      	sxth	r2, r3
 8016b40:	4b2d      	ldr	r3, [pc, #180]	; (8016bf8 <main+0x864>)
 8016b42:	801a      	strh	r2, [r3, #0]
	        break;
 8016b44:	f000 bc46 	b.w	80173d4 <main+0x1040>
	          else             Current = ST;
 8016b48:	4b2b      	ldr	r3, [pc, #172]	; (8016bf8 <main+0x864>)
 8016b4a:	2207      	movs	r2, #7
 8016b4c:	801a      	strh	r2, [r3, #0]
	        break;
 8016b4e:	f000 bc41 	b.w	80173d4 <main+0x1040>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016b52:	4b2a      	ldr	r3, [pc, #168]	; (8016bfc <main+0x868>)
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	f003 0302 	and.w	r3, r3, #2
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d034      	beq.n	8016bc8 <main+0x834>
	          MenuNow[Current]++;
 8016b5e:	4b26      	ldr	r3, [pc, #152]	; (8016bf8 <main+0x864>)
 8016b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b64:	4a22      	ldr	r2, [pc, #136]	; (8016bf0 <main+0x85c>)
 8016b66:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016b6a:	b292      	uxth	r2, r2
 8016b6c:	3201      	adds	r2, #1
 8016b6e:	b292      	uxth	r2, r2
 8016b70:	b211      	sxth	r1, r2
 8016b72:	4a1f      	ldr	r2, [pc, #124]	; (8016bf0 <main+0x85c>)
 8016b74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016b78:	4b1f      	ldr	r3, [pc, #124]	; (8016bf8 <main+0x864>)
 8016b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b7e:	461a      	mov	r2, r3
 8016b80:	4b1b      	ldr	r3, [pc, #108]	; (8016bf0 <main+0x85c>)
 8016b82:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b86:	461a      	mov	r2, r3
 8016b88:	4b1b      	ldr	r3, [pc, #108]	; (8016bf8 <main+0x864>)
 8016b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b8e:	4619      	mov	r1, r3
 8016b90:	4b1b      	ldr	r3, [pc, #108]	; (8016c00 <main+0x86c>)
 8016b92:	5c5b      	ldrb	r3, [r3, r1]
 8016b94:	4619      	mov	r1, r3
 8016b96:	4b18      	ldr	r3, [pc, #96]	; (8016bf8 <main+0x864>)
 8016b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	4b19      	ldr	r3, [pc, #100]	; (8016c04 <main+0x870>)
 8016ba0:	5c1b      	ldrb	r3, [r3, r0]
 8016ba2:	440b      	add	r3, r1
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	f2c0 840c 	blt.w	80173c2 <main+0x102e>
	            MenuNow[Current] = MU_BEGN[Current];
 8016baa:	4b13      	ldr	r3, [pc, #76]	; (8016bf8 <main+0x864>)
 8016bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	4b13      	ldr	r3, [pc, #76]	; (8016c00 <main+0x86c>)
 8016bb4:	5c99      	ldrb	r1, [r3, r2]
 8016bb6:	4b10      	ldr	r3, [pc, #64]	; (8016bf8 <main+0x864>)
 8016bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	b209      	sxth	r1, r1
 8016bc0:	4b0b      	ldr	r3, [pc, #44]	; (8016bf0 <main+0x85c>)
 8016bc2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 8016bc6:	e3fc      	b.n	80173c2 <main+0x102e>
	          if (Current < 7) Current++;
 8016bc8:	4b0b      	ldr	r3, [pc, #44]	; (8016bf8 <main+0x864>)
 8016bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bce:	2b06      	cmp	r3, #6
 8016bd0:	dc09      	bgt.n	8016be6 <main+0x852>
 8016bd2:	4b09      	ldr	r3, [pc, #36]	; (8016bf8 <main+0x864>)
 8016bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	3301      	adds	r3, #1
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	b21a      	sxth	r2, r3
 8016be0:	4b05      	ldr	r3, [pc, #20]	; (8016bf8 <main+0x864>)
 8016be2:	801a      	strh	r2, [r3, #0]
	        break;
 8016be4:	e3ed      	b.n	80173c2 <main+0x102e>
	          else             Current = YN;
 8016be6:	4b04      	ldr	r3, [pc, #16]	; (8016bf8 <main+0x864>)
 8016be8:	2200      	movs	r2, #0
 8016bea:	801a      	strh	r2, [r3, #0]
	        break;
 8016bec:	e3e9      	b.n	80173c2 <main+0x102e>
 8016bee:	bf00      	nop
 8016bf0:	20000538 	.word	0x20000538
 8016bf4:	20000298 	.word	0x20000298
 8016bf8:	2000079e 	.word	0x2000079e
 8016bfc:	2000078e 	.word	0x2000078e
 8016c00:	08001f40 	.word	0x08001f40
 8016c04:	08001f48 	.word	0x08001f48

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016c08:	4bb9      	ldr	r3, [pc, #740]	; (8016ef0 <main+0xb5c>)
 8016c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c0e:	2b07      	cmp	r3, #7
 8016c10:	d106      	bne.n	8016c20 <main+0x88c>
 8016c12:	4bb8      	ldr	r3, [pc, #736]	; (8016ef4 <main+0xb60>)
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	f003 0302 	and.w	r3, r3, #2
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f000 83d3 	beq.w	80173c6 <main+0x1032>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016c20:	4bb3      	ldr	r3, [pc, #716]	; (8016ef0 <main+0xb5c>)
 8016c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c26:	461a      	mov	r2, r3
 8016c28:	4bb3      	ldr	r3, [pc, #716]	; (8016ef8 <main+0xb64>)
 8016c2a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c2e:	4ab3      	ldr	r2, [pc, #716]	; (8016efc <main+0xb68>)
 8016c30:	00db      	lsls	r3, r3, #3
 8016c32:	4413      	add	r3, r2
 8016c34:	799b      	ldrb	r3, [r3, #6]
 8016c36:	4aae      	ldr	r2, [pc, #696]	; (8016ef0 <main+0xb5c>)
 8016c38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016c3c:	4611      	mov	r1, r2
 8016c3e:	4aae      	ldr	r2, [pc, #696]	; (8016ef8 <main+0xb64>)
 8016c40:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016c44:	4610      	mov	r0, r2
 8016c46:	f043 0320 	orr.w	r3, r3, #32
 8016c4a:	b2d9      	uxtb	r1, r3
 8016c4c:	4aab      	ldr	r2, [pc, #684]	; (8016efc <main+0xb68>)
 8016c4e:	00c3      	lsls	r3, r0, #3
 8016c50:	4413      	add	r3, r2
 8016c52:	460a      	mov	r2, r1
 8016c54:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016c56:	4ba6      	ldr	r3, [pc, #664]	; (8016ef0 <main+0xb5c>)
 8016c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	4ba6      	ldr	r3, [pc, #664]	; (8016ef8 <main+0xb64>)
 8016c60:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c64:	4aa5      	ldr	r2, [pc, #660]	; (8016efc <main+0xb68>)
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	4413      	add	r3, r2
 8016c6a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016c6e:	4ba0      	ldr	r3, [pc, #640]	; (8016ef0 <main+0xb5c>)
 8016c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c74:	4619      	mov	r1, r3
 8016c76:	4ba0      	ldr	r3, [pc, #640]	; (8016ef8 <main+0xb64>)
 8016c78:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	4ba0      	ldr	r3, [pc, #640]	; (8016f00 <main+0xb6c>)
 8016c80:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016c84:	429a      	cmp	r2, r3
 8016c86:	dc73      	bgt.n	8016d70 <main+0x9dc>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016c88:	4b99      	ldr	r3, [pc, #612]	; (8016ef0 <main+0xb5c>)
 8016c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	4b99      	ldr	r3, [pc, #612]	; (8016ef8 <main+0xb64>)
 8016c92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c96:	2b01      	cmp	r3, #1
 8016c98:	d051      	beq.n	8016d3e <main+0x9aa>
 8016c9a:	4b95      	ldr	r3, [pc, #596]	; (8016ef0 <main+0xb5c>)
 8016c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ca0:	461a      	mov	r2, r3
 8016ca2:	4b95      	ldr	r3, [pc, #596]	; (8016ef8 <main+0xb64>)
 8016ca4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ca8:	2b06      	cmp	r3, #6
 8016caa:	d048      	beq.n	8016d3e <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016cac:	4b90      	ldr	r3, [pc, #576]	; (8016ef0 <main+0xb5c>)
 8016cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	4b90      	ldr	r3, [pc, #576]	; (8016ef8 <main+0xb64>)
 8016cb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016cba:	2b0c      	cmp	r3, #12
 8016cbc:	d03f      	beq.n	8016d3e <main+0x9aa>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016cbe:	4b8c      	ldr	r3, [pc, #560]	; (8016ef0 <main+0xb5c>)
 8016cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	4b8c      	ldr	r3, [pc, #560]	; (8016ef8 <main+0xb64>)
 8016cc8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ccc:	2b1c      	cmp	r3, #28
 8016cce:	d036      	beq.n	8016d3e <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016cd0:	4b87      	ldr	r3, [pc, #540]	; (8016ef0 <main+0xb5c>)
 8016cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	4b87      	ldr	r3, [pc, #540]	; (8016ef8 <main+0xb64>)
 8016cda:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016cde:	2b0f      	cmp	r3, #15
 8016ce0:	d02d      	beq.n	8016d3e <main+0x9aa>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ce2:	4b83      	ldr	r3, [pc, #524]	; (8016ef0 <main+0xb5c>)
 8016ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce8:	461a      	mov	r2, r3
 8016cea:	4b83      	ldr	r3, [pc, #524]	; (8016ef8 <main+0xb64>)
 8016cec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cf0:	2b0e      	cmp	r3, #14
 8016cf2:	d024      	beq.n	8016d3e <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016cf4:	4b7e      	ldr	r3, [pc, #504]	; (8016ef0 <main+0xb5c>)
 8016cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	4b7e      	ldr	r3, [pc, #504]	; (8016ef8 <main+0xb64>)
 8016cfe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016d02:	2b0d      	cmp	r3, #13
 8016d04:	d01b      	beq.n	8016d3e <main+0x9aa>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016d06:	4b7a      	ldr	r3, [pc, #488]	; (8016ef0 <main+0xb5c>)
 8016d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	4b7a      	ldr	r3, [pc, #488]	; (8016ef8 <main+0xb64>)
 8016d10:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d14:	2b1a      	cmp	r3, #26
 8016d16:	d012      	beq.n	8016d3e <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016d18:	4b75      	ldr	r3, [pc, #468]	; (8016ef0 <main+0xb5c>)
 8016d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d1e:	461a      	mov	r2, r3
 8016d20:	4b75      	ldr	r3, [pc, #468]	; (8016ef8 <main+0xb64>)
 8016d22:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016d26:	2b02      	cmp	r3, #2
 8016d28:	d009      	beq.n	8016d3e <main+0x9aa>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016d2a:	4b71      	ldr	r3, [pc, #452]	; (8016ef0 <main+0xb5c>)
 8016d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d30:	461a      	mov	r2, r3
 8016d32:	4b71      	ldr	r3, [pc, #452]	; (8016ef8 <main+0xb64>)
 8016d34:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d38:	2b24      	cmp	r3, #36	; 0x24
 8016d3a:	f040 8129 	bne.w	8016f90 <main+0xbfc>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016d3e:	4b6c      	ldr	r3, [pc, #432]	; (8016ef0 <main+0xb5c>)
 8016d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d44:	461a      	mov	r2, r3
 8016d46:	4b6c      	ldr	r3, [pc, #432]	; (8016ef8 <main+0xb64>)
 8016d48:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	4b68      	ldr	r3, [pc, #416]	; (8016ef0 <main+0xb5c>)
 8016d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d54:	4619      	mov	r1, r3
 8016d56:	4b68      	ldr	r3, [pc, #416]	; (8016ef8 <main+0xb64>)
 8016d58:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	4b69      	ldr	r3, [pc, #420]	; (8016f04 <main+0xb70>)
 8016d60:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016d64:	4a65      	ldr	r2, [pc, #404]	; (8016efc <main+0xb68>)
 8016d66:	00c3      	lsls	r3, r0, #3
 8016d68:	4413      	add	r3, r2
 8016d6a:	460a      	mov	r2, r1
 8016d6c:	809a      	strh	r2, [r3, #4]
 8016d6e:	e10f      	b.n	8016f90 <main+0xbfc>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016d70:	4b5f      	ldr	r3, [pc, #380]	; (8016ef0 <main+0xb5c>)
 8016d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d76:	461a      	mov	r2, r3
 8016d78:	4b5f      	ldr	r3, [pc, #380]	; (8016ef8 <main+0xb64>)
 8016d7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d7e:	2b08      	cmp	r3, #8
 8016d80:	d12a      	bne.n	8016dd8 <main+0xa44>
 8016d82:	4b5b      	ldr	r3, [pc, #364]	; (8016ef0 <main+0xb5c>)
 8016d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d88:	461a      	mov	r2, r3
 8016d8a:	4b5b      	ldr	r3, [pc, #364]	; (8016ef8 <main+0xb64>)
 8016d8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d90:	4a5a      	ldr	r2, [pc, #360]	; (8016efc <main+0xb68>)
 8016d92:	00db      	lsls	r3, r3, #3
 8016d94:	4413      	add	r3, r2
 8016d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016d9a:	2b95      	cmp	r3, #149	; 0x95
 8016d9c:	dd1c      	ble.n	8016dd8 <main+0xa44>
	            List[MenuNow[Current]].Val-=25;
 8016d9e:	4b54      	ldr	r3, [pc, #336]	; (8016ef0 <main+0xb5c>)
 8016da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016da4:	461a      	mov	r2, r3
 8016da6:	4b54      	ldr	r3, [pc, #336]	; (8016ef8 <main+0xb64>)
 8016da8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016dac:	4a53      	ldr	r2, [pc, #332]	; (8016efc <main+0xb68>)
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	4413      	add	r3, r2
 8016db2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	3b19      	subs	r3, #25
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	4b4c      	ldr	r3, [pc, #304]	; (8016ef0 <main+0xb5c>)
 8016dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	4b4c      	ldr	r3, [pc, #304]	; (8016ef8 <main+0xb64>)
 8016dc6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016dca:	b211      	sxth	r1, r2
 8016dcc:	4a4b      	ldr	r2, [pc, #300]	; (8016efc <main+0xb68>)
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	4413      	add	r3, r2
 8016dd2:	460a      	mov	r2, r1
 8016dd4:	809a      	strh	r2, [r3, #4]
 8016dd6:	e0ad      	b.n	8016f34 <main+0xba0>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016dd8:	4b45      	ldr	r3, [pc, #276]	; (8016ef0 <main+0xb5c>)
 8016dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dde:	461a      	mov	r2, r3
 8016de0:	4b45      	ldr	r3, [pc, #276]	; (8016ef8 <main+0xb64>)
 8016de2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016de6:	2b10      	cmp	r3, #16
 8016de8:	d121      	bne.n	8016e2e <main+0xa9a>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016dea:	4b44      	ldr	r3, [pc, #272]	; (8016efc <main+0xb68>)
 8016dec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016df0:	461a      	mov	r2, r3
 8016df2:	4b42      	ldr	r3, [pc, #264]	; (8016efc <main+0xb68>)
 8016df4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016df8:	4413      	add	r3, r2
 8016dfa:	2b02      	cmp	r3, #2
 8016dfc:	f340 809a 	ble.w	8016f34 <main+0xba0>
	                List[MenuNow[Current]].Val--;
 8016e00:	4b3b      	ldr	r3, [pc, #236]	; (8016ef0 <main+0xb5c>)
 8016e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e06:	461a      	mov	r2, r3
 8016e08:	4b3b      	ldr	r3, [pc, #236]	; (8016ef8 <main+0xb64>)
 8016e0a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e0e:	461a      	mov	r2, r3
 8016e10:	493a      	ldr	r1, [pc, #232]	; (8016efc <main+0xb68>)
 8016e12:	00d3      	lsls	r3, r2, #3
 8016e14:	440b      	add	r3, r1
 8016e16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e1a:	b29b      	uxth	r3, r3
 8016e1c:	3b01      	subs	r3, #1
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	b218      	sxth	r0, r3
 8016e22:	4936      	ldr	r1, [pc, #216]	; (8016efc <main+0xb68>)
 8016e24:	00d3      	lsls	r3, r2, #3
 8016e26:	440b      	add	r3, r1
 8016e28:	4602      	mov	r2, r0
 8016e2a:	809a      	strh	r2, [r3, #4]
 8016e2c:	e082      	b.n	8016f34 <main+0xba0>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016e2e:	4b30      	ldr	r3, [pc, #192]	; (8016ef0 <main+0xb5c>)
 8016e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e34:	461a      	mov	r2, r3
 8016e36:	4b30      	ldr	r3, [pc, #192]	; (8016ef8 <main+0xb64>)
 8016e38:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e3c:	2b03      	cmp	r3, #3
 8016e3e:	d134      	bne.n	8016eaa <main+0xb16>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016e40:	4b2e      	ldr	r3, [pc, #184]	; (8016efc <main+0xb68>)
 8016e42:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016e46:	461a      	mov	r2, r3
 8016e48:	4b2c      	ldr	r3, [pc, #176]	; (8016efc <main+0xb68>)
 8016e4a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016e4e:	4413      	add	r3, r2
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	dc13      	bgt.n	8016e7c <main+0xae8>
	                List[V0_POSI].Val--;
 8016e54:	4b29      	ldr	r3, [pc, #164]	; (8016efc <main+0xb68>)
 8016e56:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	3b01      	subs	r3, #1
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	b21a      	sxth	r2, r3
 8016e62:	4b26      	ldr	r3, [pc, #152]	; (8016efc <main+0xb68>)
 8016e64:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016e66:	4b25      	ldr	r3, [pc, #148]	; (8016efc <main+0xb68>)
 8016e68:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	3301      	adds	r3, #1
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	b21a      	sxth	r2, r3
 8016e74:	4b21      	ldr	r3, [pc, #132]	; (8016efc <main+0xb68>)
 8016e76:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016e7a:	e05b      	b.n	8016f34 <main+0xba0>
	              }else List[MenuNow[Current]].Val--;
 8016e7c:	4b1c      	ldr	r3, [pc, #112]	; (8016ef0 <main+0xb5c>)
 8016e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e82:	461a      	mov	r2, r3
 8016e84:	4b1c      	ldr	r3, [pc, #112]	; (8016ef8 <main+0xb64>)
 8016e86:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	491b      	ldr	r1, [pc, #108]	; (8016efc <main+0xb68>)
 8016e8e:	00d3      	lsls	r3, r2, #3
 8016e90:	440b      	add	r3, r1
 8016e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	b218      	sxth	r0, r3
 8016e9e:	4917      	ldr	r1, [pc, #92]	; (8016efc <main+0xb68>)
 8016ea0:	00d3      	lsls	r3, r2, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	4602      	mov	r2, r0
 8016ea6:	809a      	strh	r2, [r3, #4]
 8016ea8:	e044      	b.n	8016f34 <main+0xba0>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016eaa:	4b11      	ldr	r3, [pc, #68]	; (8016ef0 <main+0xb5c>)
 8016eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eb0:	461a      	mov	r2, r3
 8016eb2:	4b11      	ldr	r3, [pc, #68]	; (8016ef8 <main+0xb64>)
 8016eb4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eb8:	2b04      	cmp	r3, #4
 8016eba:	d125      	bne.n	8016f08 <main+0xb74>
 8016ebc:	4b0f      	ldr	r3, [pc, #60]	; (8016efc <main+0xb68>)
 8016ebe:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016ec2:	4b0e      	ldr	r3, [pc, #56]	; (8016efc <main+0xb68>)
 8016ec4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	dc1d      	bgt.n	8016f08 <main+0xb74>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016ecc:	4b08      	ldr	r3, [pc, #32]	; (8016ef0 <main+0xb5c>)
 8016ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ed2:	461a      	mov	r2, r3
 8016ed4:	4b08      	ldr	r3, [pc, #32]	; (8016ef8 <main+0xb64>)
 8016ed6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eda:	4618      	mov	r0, r3
 8016edc:	4b07      	ldr	r3, [pc, #28]	; (8016efc <main+0xb68>)
 8016ede:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016ee2:	4a06      	ldr	r2, [pc, #24]	; (8016efc <main+0xb68>)
 8016ee4:	00c3      	lsls	r3, r0, #3
 8016ee6:	4413      	add	r3, r2
 8016ee8:	460a      	mov	r2, r1
 8016eea:	809a      	strh	r2, [r3, #4]
 8016eec:	e022      	b.n	8016f34 <main+0xba0>
 8016eee:	bf00      	nop
 8016ef0:	2000079e 	.word	0x2000079e
 8016ef4:	2000078e 	.word	0x2000078e
 8016ef8:	20000538 	.word	0x20000538
 8016efc:	20000298 	.word	0x20000298
 8016f00:	08002214 	.word	0x08002214
 8016f04:	080021b8 	.word	0x080021b8
	            else List[MenuNow[Current]].Val--;
 8016f08:	4bb7      	ldr	r3, [pc, #732]	; (80171e8 <main+0xe54>)
 8016f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f0e:	461a      	mov	r2, r3
 8016f10:	4bb6      	ldr	r3, [pc, #728]	; (80171ec <main+0xe58>)
 8016f12:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f16:	461a      	mov	r2, r3
 8016f18:	49b5      	ldr	r1, [pc, #724]	; (80171f0 <main+0xe5c>)
 8016f1a:	00d3      	lsls	r3, r2, #3
 8016f1c:	440b      	add	r3, r1
 8016f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	3b01      	subs	r3, #1
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	b218      	sxth	r0, r3
 8016f2a:	49b1      	ldr	r1, [pc, #708]	; (80171f0 <main+0xe5c>)
 8016f2c:	00d3      	lsls	r3, r2, #3
 8016f2e:	440b      	add	r3, r1
 8016f30:	4602      	mov	r2, r0
 8016f32:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016f34:	4bac      	ldr	r3, [pc, #688]	; (80171e8 <main+0xe54>)
 8016f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	4bab      	ldr	r3, [pc, #684]	; (80171ec <main+0xe58>)
 8016f3e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f42:	2b09      	cmp	r3, #9
 8016f44:	d103      	bne.n	8016f4e <main+0xbba>
	              List[VIEWPOSI].Val=1 ;
 8016f46:	4baa      	ldr	r3, [pc, #680]	; (80171f0 <main+0xe5c>)
 8016f48:	2201      	movs	r2, #1
 8016f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016f4e:	4ba6      	ldr	r3, [pc, #664]	; (80171e8 <main+0xe54>)
 8016f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f54:	461a      	mov	r2, r3
 8016f56:	4ba5      	ldr	r3, [pc, #660]	; (80171ec <main+0xe58>)
 8016f58:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f5c:	2b0b      	cmp	r3, #11
 8016f5e:	d117      	bne.n	8016f90 <main+0xbfc>
 8016f60:	4ba3      	ldr	r3, [pc, #652]	; (80171f0 <main+0xe5c>)
 8016f62:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016f66:	4ba2      	ldr	r3, [pc, #648]	; (80171f0 <main+0xe5c>)
 8016f68:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	dc0f      	bgt.n	8016f90 <main+0xbfc>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016f70:	4b9d      	ldr	r3, [pc, #628]	; (80171e8 <main+0xe54>)
 8016f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f76:	461a      	mov	r2, r3
 8016f78:	4b9c      	ldr	r3, [pc, #624]	; (80171ec <main+0xe58>)
 8016f7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	4b9b      	ldr	r3, [pc, #620]	; (80171f0 <main+0xe5c>)
 8016f82:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016f86:	4a9a      	ldr	r2, [pc, #616]	; (80171f0 <main+0xe5c>)
 8016f88:	00c3      	lsls	r3, r0, #3
 8016f8a:	4413      	add	r3, r2
 8016f8c:	460a      	mov	r2, r1
 8016f8e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016f90:	4b95      	ldr	r3, [pc, #596]	; (80171e8 <main+0xe54>)
 8016f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f96:	2b02      	cmp	r3, #2
 8016f98:	f040 8217 	bne.w	80173ca <main+0x1036>
 8016f9c:	4b95      	ldr	r3, [pc, #596]	; (80171f4 <main+0xe60>)
 8016f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fa2:	f023 0301 	bic.w	r3, r3, #1
 8016fa6:	b21a      	sxth	r2, r3
 8016fa8:	4b92      	ldr	r3, [pc, #584]	; (80171f4 <main+0xe60>)
 8016faa:	801a      	strh	r2, [r3, #0]
	        break;
 8016fac:	e20d      	b.n	80173ca <main+0x1036>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016fae:	4b8e      	ldr	r3, [pc, #568]	; (80171e8 <main+0xe54>)
 8016fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fb4:	2b07      	cmp	r3, #7
 8016fb6:	d106      	bne.n	8016fc6 <main+0xc32>
 8016fb8:	4b8f      	ldr	r3, [pc, #572]	; (80171f8 <main+0xe64>)
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	f003 0302 	and.w	r3, r3, #2
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	f000 8204 	beq.w	80173ce <main+0x103a>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016fc6:	4b88      	ldr	r3, [pc, #544]	; (80171e8 <main+0xe54>)
 8016fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fcc:	461a      	mov	r2, r3
 8016fce:	4b87      	ldr	r3, [pc, #540]	; (80171ec <main+0xe58>)
 8016fd0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fd4:	4a86      	ldr	r2, [pc, #536]	; (80171f0 <main+0xe5c>)
 8016fd6:	00db      	lsls	r3, r3, #3
 8016fd8:	4413      	add	r3, r2
 8016fda:	799b      	ldrb	r3, [r3, #6]
 8016fdc:	4a82      	ldr	r2, [pc, #520]	; (80171e8 <main+0xe54>)
 8016fde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	4a81      	ldr	r2, [pc, #516]	; (80171ec <main+0xe58>)
 8016fe6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016fea:	4610      	mov	r0, r2
 8016fec:	f043 0320 	orr.w	r3, r3, #32
 8016ff0:	b2d9      	uxtb	r1, r3
 8016ff2:	4a7f      	ldr	r2, [pc, #508]	; (80171f0 <main+0xe5c>)
 8016ff4:	00c3      	lsls	r3, r0, #3
 8016ff6:	4413      	add	r3, r2
 8016ff8:	460a      	mov	r2, r1
 8016ffa:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016ffc:	4b7a      	ldr	r3, [pc, #488]	; (80171e8 <main+0xe54>)
 8016ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017002:	461a      	mov	r2, r3
 8017004:	4b79      	ldr	r3, [pc, #484]	; (80171ec <main+0xe58>)
 8017006:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801700a:	4a79      	ldr	r2, [pc, #484]	; (80171f0 <main+0xe5c>)
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	4413      	add	r3, r2
 8017010:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017014:	4b74      	ldr	r3, [pc, #464]	; (80171e8 <main+0xe54>)
 8017016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701a:	4619      	mov	r1, r3
 801701c:	4b73      	ldr	r3, [pc, #460]	; (80171ec <main+0xe58>)
 801701e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017022:	4619      	mov	r1, r3
 8017024:	4b75      	ldr	r3, [pc, #468]	; (80171fc <main+0xe68>)
 8017026:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801702a:	429a      	cmp	r2, r3
 801702c:	db73      	blt.n	8017116 <main+0xd82>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801702e:	4b6e      	ldr	r3, [pc, #440]	; (80171e8 <main+0xe54>)
 8017030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017034:	461a      	mov	r2, r3
 8017036:	4b6d      	ldr	r3, [pc, #436]	; (80171ec <main+0xe58>)
 8017038:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801703c:	2b01      	cmp	r3, #1
 801703e:	d051      	beq.n	80170e4 <main+0xd50>
 8017040:	4b69      	ldr	r3, [pc, #420]	; (80171e8 <main+0xe54>)
 8017042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017046:	461a      	mov	r2, r3
 8017048:	4b68      	ldr	r3, [pc, #416]	; (80171ec <main+0xe58>)
 801704a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801704e:	2b06      	cmp	r3, #6
 8017050:	d048      	beq.n	80170e4 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017052:	4b65      	ldr	r3, [pc, #404]	; (80171e8 <main+0xe54>)
 8017054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017058:	461a      	mov	r2, r3
 801705a:	4b64      	ldr	r3, [pc, #400]	; (80171ec <main+0xe58>)
 801705c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8017060:	2b0c      	cmp	r3, #12
 8017062:	d03f      	beq.n	80170e4 <main+0xd50>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017064:	4b60      	ldr	r3, [pc, #384]	; (80171e8 <main+0xe54>)
 8017066:	f9b3 3000 	ldrsh.w	r3, [r3]
 801706a:	461a      	mov	r2, r3
 801706c:	4b5f      	ldr	r3, [pc, #380]	; (80171ec <main+0xe58>)
 801706e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017072:	2b1c      	cmp	r3, #28
 8017074:	d036      	beq.n	80170e4 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017076:	4b5c      	ldr	r3, [pc, #368]	; (80171e8 <main+0xe54>)
 8017078:	f9b3 3000 	ldrsh.w	r3, [r3]
 801707c:	461a      	mov	r2, r3
 801707e:	4b5b      	ldr	r3, [pc, #364]	; (80171ec <main+0xe58>)
 8017080:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8017084:	2b0f      	cmp	r3, #15
 8017086:	d02d      	beq.n	80170e4 <main+0xd50>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8017088:	4b57      	ldr	r3, [pc, #348]	; (80171e8 <main+0xe54>)
 801708a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801708e:	461a      	mov	r2, r3
 8017090:	4b56      	ldr	r3, [pc, #344]	; (80171ec <main+0xe58>)
 8017092:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017096:	2b0e      	cmp	r3, #14
 8017098:	d024      	beq.n	80170e4 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801709a:	4b53      	ldr	r3, [pc, #332]	; (80171e8 <main+0xe54>)
 801709c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170a0:	461a      	mov	r2, r3
 80170a2:	4b52      	ldr	r3, [pc, #328]	; (80171ec <main+0xe58>)
 80170a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80170a8:	2b0d      	cmp	r3, #13
 80170aa:	d01b      	beq.n	80170e4 <main+0xd50>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80170ac:	4b4e      	ldr	r3, [pc, #312]	; (80171e8 <main+0xe54>)
 80170ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170b2:	461a      	mov	r2, r3
 80170b4:	4b4d      	ldr	r3, [pc, #308]	; (80171ec <main+0xe58>)
 80170b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170ba:	2b1a      	cmp	r3, #26
 80170bc:	d012      	beq.n	80170e4 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80170be:	4b4a      	ldr	r3, [pc, #296]	; (80171e8 <main+0xe54>)
 80170c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170c4:	461a      	mov	r2, r3
 80170c6:	4b49      	ldr	r3, [pc, #292]	; (80171ec <main+0xe58>)
 80170c8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80170cc:	2b02      	cmp	r3, #2
 80170ce:	d009      	beq.n	80170e4 <main+0xd50>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80170d0:	4b45      	ldr	r3, [pc, #276]	; (80171e8 <main+0xe54>)
 80170d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d6:	461a      	mov	r2, r3
 80170d8:	4b44      	ldr	r3, [pc, #272]	; (80171ec <main+0xe58>)
 80170da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170de:	2b24      	cmp	r3, #36	; 0x24
 80170e0:	f040 8154 	bne.w	801738c <main+0xff8>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 80170e4:	4b40      	ldr	r3, [pc, #256]	; (80171e8 <main+0xe54>)
 80170e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170ea:	461a      	mov	r2, r3
 80170ec:	4b3f      	ldr	r3, [pc, #252]	; (80171ec <main+0xe58>)
 80170ee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170f2:	461a      	mov	r2, r3
 80170f4:	4b3c      	ldr	r3, [pc, #240]	; (80171e8 <main+0xe54>)
 80170f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170fa:	4619      	mov	r1, r3
 80170fc:	4b3b      	ldr	r3, [pc, #236]	; (80171ec <main+0xe58>)
 80170fe:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017102:	4618      	mov	r0, r3
 8017104:	4b3e      	ldr	r3, [pc, #248]	; (8017200 <main+0xe6c>)
 8017106:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 801710a:	4a39      	ldr	r2, [pc, #228]	; (80171f0 <main+0xe5c>)
 801710c:	00c3      	lsls	r3, r0, #3
 801710e:	4413      	add	r3, r2
 8017110:	460a      	mov	r2, r1
 8017112:	809a      	strh	r2, [r3, #4]
 8017114:	e13a      	b.n	801738c <main+0xff8>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8017116:	4b34      	ldr	r3, [pc, #208]	; (80171e8 <main+0xe54>)
 8017118:	f9b3 3000 	ldrsh.w	r3, [r3]
 801711c:	461a      	mov	r2, r3
 801711e:	4b33      	ldr	r3, [pc, #204]	; (80171ec <main+0xe58>)
 8017120:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017124:	2b08      	cmp	r3, #8
 8017126:	d16f      	bne.n	8017208 <main+0xe74>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 8017128:	4b2f      	ldr	r3, [pc, #188]	; (80171e8 <main+0xe54>)
 801712a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801712e:	461a      	mov	r2, r3
 8017130:	4b2e      	ldr	r3, [pc, #184]	; (80171ec <main+0xe58>)
 8017132:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017136:	4a2e      	ldr	r2, [pc, #184]	; (80171f0 <main+0xe5c>)
 8017138:	00db      	lsls	r3, r3, #3
 801713a:	4413      	add	r3, r2
 801713c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017140:	461a      	mov	r2, r3
 8017142:	4b2b      	ldr	r3, [pc, #172]	; (80171f0 <main+0xe5c>)
 8017144:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8017148:	4619      	mov	r1, r3
 801714a:	4b2e      	ldr	r3, [pc, #184]	; (8017204 <main+0xe70>)
 801714c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8017150:	4619      	mov	r1, r3
 8017152:	4b27      	ldr	r3, [pc, #156]	; (80171f0 <main+0xe5c>)
 8017154:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8017158:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 801715c:	1acb      	subs	r3, r1, r3
 801715e:	429a      	cmp	r2, r3
 8017160:	f280 80f3 	bge.w	801734a <main+0xfb6>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8017164:	4b20      	ldr	r3, [pc, #128]	; (80171e8 <main+0xe54>)
 8017166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716a:	461a      	mov	r2, r3
 801716c:	4b1f      	ldr	r3, [pc, #124]	; (80171ec <main+0xe58>)
 801716e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017172:	4a1f      	ldr	r2, [pc, #124]	; (80171f0 <main+0xe5c>)
 8017174:	00db      	lsls	r3, r3, #3
 8017176:	4413      	add	r3, r2
 8017178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801717c:	2b96      	cmp	r3, #150	; 0x96
 801717e:	dd1c      	ble.n	80171ba <main+0xe26>
	                  List[MenuNow[Current]].Val += 25;
 8017180:	4b19      	ldr	r3, [pc, #100]	; (80171e8 <main+0xe54>)
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	461a      	mov	r2, r3
 8017188:	4b18      	ldr	r3, [pc, #96]	; (80171ec <main+0xe58>)
 801718a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801718e:	4a18      	ldr	r2, [pc, #96]	; (80171f0 <main+0xe5c>)
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	4413      	add	r3, r2
 8017194:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017198:	b29b      	uxth	r3, r3
 801719a:	3319      	adds	r3, #25
 801719c:	b29a      	uxth	r2, r3
 801719e:	4b12      	ldr	r3, [pc, #72]	; (80171e8 <main+0xe54>)
 80171a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171a4:	4619      	mov	r1, r3
 80171a6:	4b11      	ldr	r3, [pc, #68]	; (80171ec <main+0xe58>)
 80171a8:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80171ac:	b211      	sxth	r1, r2
 80171ae:	4a10      	ldr	r2, [pc, #64]	; (80171f0 <main+0xe5c>)
 80171b0:	00db      	lsls	r3, r3, #3
 80171b2:	4413      	add	r3, r2
 80171b4:	460a      	mov	r2, r1
 80171b6:	809a      	strh	r2, [r3, #4]
 80171b8:	e0c7      	b.n	801734a <main+0xfb6>
	                else
	                  List[MenuNow[Current]].Val++;
 80171ba:	4b0b      	ldr	r3, [pc, #44]	; (80171e8 <main+0xe54>)
 80171bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171c0:	461a      	mov	r2, r3
 80171c2:	4b0a      	ldr	r3, [pc, #40]	; (80171ec <main+0xe58>)
 80171c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171c8:	461a      	mov	r2, r3
 80171ca:	4909      	ldr	r1, [pc, #36]	; (80171f0 <main+0xe5c>)
 80171cc:	00d3      	lsls	r3, r2, #3
 80171ce:	440b      	add	r3, r1
 80171d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	3301      	adds	r3, #1
 80171d8:	b29b      	uxth	r3, r3
 80171da:	b218      	sxth	r0, r3
 80171dc:	4904      	ldr	r1, [pc, #16]	; (80171f0 <main+0xe5c>)
 80171de:	00d3      	lsls	r3, r2, #3
 80171e0:	440b      	add	r3, r1
 80171e2:	4602      	mov	r2, r0
 80171e4:	809a      	strh	r2, [r3, #4]
 80171e6:	e0b0      	b.n	801734a <main+0xfb6>
 80171e8:	2000079e 	.word	0x2000079e
 80171ec:	20000538 	.word	0x20000538
 80171f0:	20000298 	.word	0x20000298
 80171f4:	200007a0 	.word	0x200007a0
 80171f8:	2000078e 	.word	0x2000078e
 80171fc:	080021b8 	.word	0x080021b8
 8017200:	08002214 	.word	0x08002214
 8017204:	08002270 	.word	0x08002270
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 8017208:	4b8d      	ldr	r3, [pc, #564]	; (8017440 <main+0x10ac>)
 801720a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801720e:	461a      	mov	r2, r3
 8017210:	4b8c      	ldr	r3, [pc, #560]	; (8017444 <main+0x10b0>)
 8017212:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017216:	2b10      	cmp	r3, #16
 8017218:	d121      	bne.n	801725e <main+0xeca>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 801721a:	4b8b      	ldr	r3, [pc, #556]	; (8017448 <main+0x10b4>)
 801721c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017220:	461a      	mov	r2, r3
 8017222:	4b89      	ldr	r3, [pc, #548]	; (8017448 <main+0x10b4>)
 8017224:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017228:	4413      	add	r3, r2
 801722a:	2bc5      	cmp	r3, #197	; 0xc5
 801722c:	f300 808d 	bgt.w	801734a <main+0xfb6>
	                 List[MenuNow[Current]].Val++;
 8017230:	4b83      	ldr	r3, [pc, #524]	; (8017440 <main+0x10ac>)
 8017232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017236:	461a      	mov	r2, r3
 8017238:	4b82      	ldr	r3, [pc, #520]	; (8017444 <main+0x10b0>)
 801723a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801723e:	461a      	mov	r2, r3
 8017240:	4981      	ldr	r1, [pc, #516]	; (8017448 <main+0x10b4>)
 8017242:	00d3      	lsls	r3, r2, #3
 8017244:	440b      	add	r3, r1
 8017246:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801724a:	b29b      	uxth	r3, r3
 801724c:	3301      	adds	r3, #1
 801724e:	b29b      	uxth	r3, r3
 8017250:	b218      	sxth	r0, r3
 8017252:	497d      	ldr	r1, [pc, #500]	; (8017448 <main+0x10b4>)
 8017254:	00d3      	lsls	r3, r2, #3
 8017256:	440b      	add	r3, r1
 8017258:	4602      	mov	r2, r0
 801725a:	809a      	strh	r2, [r3, #4]
 801725c:	e075      	b.n	801734a <main+0xfb6>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 801725e:	4b78      	ldr	r3, [pc, #480]	; (8017440 <main+0x10ac>)
 8017260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017264:	461a      	mov	r2, r3
 8017266:	4b77      	ldr	r3, [pc, #476]	; (8017444 <main+0x10b0>)
 8017268:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801726c:	2b03      	cmp	r3, #3
 801726e:	d134      	bne.n	80172da <main+0xf46>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017270:	4b75      	ldr	r3, [pc, #468]	; (8017448 <main+0x10b4>)
 8017272:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017276:	461a      	mov	r2, r3
 8017278:	4b73      	ldr	r3, [pc, #460]	; (8017448 <main+0x10b4>)
 801727a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801727e:	4413      	add	r3, r2
 8017280:	2bc6      	cmp	r3, #198	; 0xc6
 8017282:	dd13      	ble.n	80172ac <main+0xf18>
	                  List[V0_POSI].Val++;
 8017284:	4b70      	ldr	r3, [pc, #448]	; (8017448 <main+0x10b4>)
 8017286:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801728a:	b29b      	uxth	r3, r3
 801728c:	3301      	adds	r3, #1
 801728e:	b29b      	uxth	r3, r3
 8017290:	b21a      	sxth	r2, r3
 8017292:	4b6d      	ldr	r3, [pc, #436]	; (8017448 <main+0x10b4>)
 8017294:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 8017296:	4b6c      	ldr	r3, [pc, #432]	; (8017448 <main+0x10b4>)
 8017298:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801729c:	b29b      	uxth	r3, r3
 801729e:	3b01      	subs	r3, #1
 80172a0:	b29b      	uxth	r3, r3
 80172a2:	b21a      	sxth	r2, r3
 80172a4:	4b68      	ldr	r3, [pc, #416]	; (8017448 <main+0x10b4>)
 80172a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80172aa:	e04e      	b.n	801734a <main+0xfb6>
	                }else List[MenuNow[Current]].Val++;
 80172ac:	4b64      	ldr	r3, [pc, #400]	; (8017440 <main+0x10ac>)
 80172ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172b2:	461a      	mov	r2, r3
 80172b4:	4b63      	ldr	r3, [pc, #396]	; (8017444 <main+0x10b0>)
 80172b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172ba:	461a      	mov	r2, r3
 80172bc:	4962      	ldr	r1, [pc, #392]	; (8017448 <main+0x10b4>)
 80172be:	00d3      	lsls	r3, r2, #3
 80172c0:	440b      	add	r3, r1
 80172c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172c6:	b29b      	uxth	r3, r3
 80172c8:	3301      	adds	r3, #1
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	b218      	sxth	r0, r3
 80172ce:	495e      	ldr	r1, [pc, #376]	; (8017448 <main+0x10b4>)
 80172d0:	00d3      	lsls	r3, r2, #3
 80172d2:	440b      	add	r3, r1
 80172d4:	4602      	mov	r2, r0
 80172d6:	809a      	strh	r2, [r3, #4]
 80172d8:	e037      	b.n	801734a <main+0xfb6>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 80172da:	4b59      	ldr	r3, [pc, #356]	; (8017440 <main+0x10ac>)
 80172dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80172e0:	461a      	mov	r2, r3
 80172e2:	4b58      	ldr	r3, [pc, #352]	; (8017444 <main+0x10b0>)
 80172e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80172e8:	2b05      	cmp	r3, #5
 80172ea:	d118      	bne.n	801731e <main+0xf8a>
 80172ec:	4b56      	ldr	r3, [pc, #344]	; (8017448 <main+0x10b4>)
 80172ee:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80172f2:	4b55      	ldr	r3, [pc, #340]	; (8017448 <main+0x10b4>)
 80172f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80172f8:	429a      	cmp	r2, r3
 80172fa:	db10      	blt.n	801731e <main+0xf8a>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80172fc:	4b50      	ldr	r3, [pc, #320]	; (8017440 <main+0x10ac>)
 80172fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017302:	461a      	mov	r2, r3
 8017304:	4b4f      	ldr	r3, [pc, #316]	; (8017444 <main+0x10b0>)
 8017306:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801730a:	4618      	mov	r0, r3
 801730c:	4b4e      	ldr	r3, [pc, #312]	; (8017448 <main+0x10b4>)
 801730e:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8017312:	4a4d      	ldr	r2, [pc, #308]	; (8017448 <main+0x10b4>)
 8017314:	00c3      	lsls	r3, r0, #3
 8017316:	4413      	add	r3, r2
 8017318:	460a      	mov	r2, r1
 801731a:	809a      	strh	r2, [r3, #4]
 801731c:	e015      	b.n	801734a <main+0xfb6>
	              else List[MenuNow[Current]].Val++;
 801731e:	4b48      	ldr	r3, [pc, #288]	; (8017440 <main+0x10ac>)
 8017320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017324:	461a      	mov	r2, r3
 8017326:	4b47      	ldr	r3, [pc, #284]	; (8017444 <main+0x10b0>)
 8017328:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801732c:	461a      	mov	r2, r3
 801732e:	4946      	ldr	r1, [pc, #280]	; (8017448 <main+0x10b4>)
 8017330:	00d3      	lsls	r3, r2, #3
 8017332:	440b      	add	r3, r1
 8017334:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017338:	b29b      	uxth	r3, r3
 801733a:	3301      	adds	r3, #1
 801733c:	b29b      	uxth	r3, r3
 801733e:	b218      	sxth	r0, r3
 8017340:	4941      	ldr	r1, [pc, #260]	; (8017448 <main+0x10b4>)
 8017342:	00d3      	lsls	r3, r2, #3
 8017344:	440b      	add	r3, r1
 8017346:	4602      	mov	r2, r0
 8017348:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801734a:	4b3d      	ldr	r3, [pc, #244]	; (8017440 <main+0x10ac>)
 801734c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017350:	461a      	mov	r2, r3
 8017352:	4b3c      	ldr	r3, [pc, #240]	; (8017444 <main+0x10b0>)
 8017354:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017358:	2b0a      	cmp	r3, #10
 801735a:	d117      	bne.n	801738c <main+0xff8>
 801735c:	4b3a      	ldr	r3, [pc, #232]	; (8017448 <main+0x10b4>)
 801735e:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017362:	4b39      	ldr	r3, [pc, #228]	; (8017448 <main+0x10b4>)
 8017364:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8017368:	429a      	cmp	r2, r3
 801736a:	db0f      	blt.n	801738c <main+0xff8>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 801736c:	4b34      	ldr	r3, [pc, #208]	; (8017440 <main+0x10ac>)
 801736e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017372:	461a      	mov	r2, r3
 8017374:	4b33      	ldr	r3, [pc, #204]	; (8017444 <main+0x10b0>)
 8017376:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801737a:	4618      	mov	r0, r3
 801737c:	4b32      	ldr	r3, [pc, #200]	; (8017448 <main+0x10b4>)
 801737e:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017382:	4a31      	ldr	r2, [pc, #196]	; (8017448 <main+0x10b4>)
 8017384:	00c3      	lsls	r3, r0, #3
 8017386:	4413      	add	r3, r2
 8017388:	460a      	mov	r2, r1
 801738a:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 801738c:	4b2c      	ldr	r3, [pc, #176]	; (8017440 <main+0x10ac>)
 801738e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017392:	2b02      	cmp	r3, #2
 8017394:	d11d      	bne.n	80173d2 <main+0x103e>
 8017396:	4b2d      	ldr	r3, [pc, #180]	; (801744c <main+0x10b8>)
 8017398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801739c:	f023 0301 	bic.w	r3, r3, #1
 80173a0:	b21a      	sxth	r2, r3
 80173a2:	4b2a      	ldr	r3, [pc, #168]	; (801744c <main+0x10b8>)
 80173a4:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 80173a6:	4b28      	ldr	r3, [pc, #160]	; (8017448 <main+0x10b4>)
 80173a8:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80173ac:	2b04      	cmp	r3, #4
 80173ae:	d110      	bne.n	80173d2 <main+0x103e>
 80173b0:	f7f5 f9f4 	bl	800c79c <ADC_Start>
	        break;
 80173b4:	e00d      	b.n	80173d2 <main+0x103e>
	         break;
 80173b6:	bf00      	nop
 80173b8:	e00c      	b.n	80173d4 <main+0x1040>
	         break;
 80173ba:	bf00      	nop
 80173bc:	e00a      	b.n	80173d4 <main+0x1040>
	        break;
 80173be:	bf00      	nop
 80173c0:	e008      	b.n	80173d4 <main+0x1040>
	        break;
 80173c2:	bf00      	nop
 80173c4:	e006      	b.n	80173d4 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80173c6:	bf00      	nop
 80173c8:	e004      	b.n	80173d4 <main+0x1040>
	        break;
 80173ca:	bf00      	nop
 80173cc:	e002      	b.n	80173d4 <main+0x1040>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80173ce:	bf00      	nop
 80173d0:	e000      	b.n	80173d4 <main+0x1040>
	        break;
 80173d2:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 80173d4:	4b1a      	ldr	r3, [pc, #104]	; (8017440 <main+0x10ac>)
 80173d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173da:	461a      	mov	r2, r3
 80173dc:	4b19      	ldr	r3, [pc, #100]	; (8017444 <main+0x10b0>)
 80173de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80173e2:	4a19      	ldr	r2, [pc, #100]	; (8017448 <main+0x10b4>)
 80173e4:	00db      	lsls	r3, r3, #3
 80173e6:	4413      	add	r3, r2
 80173e8:	799b      	ldrb	r3, [r3, #6]
 80173ea:	4a15      	ldr	r2, [pc, #84]	; (8017440 <main+0x10ac>)
 80173ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80173f0:	4611      	mov	r1, r2
 80173f2:	4a14      	ldr	r2, [pc, #80]	; (8017444 <main+0x10b0>)
 80173f4:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80173f8:	4610      	mov	r0, r2
 80173fa:	f043 0320 	orr.w	r3, r3, #32
 80173fe:	b2d9      	uxtb	r1, r3
 8017400:	4a11      	ldr	r2, [pc, #68]	; (8017448 <main+0x10b4>)
 8017402:	00c3      	lsls	r3, r0, #3
 8017404:	4413      	add	r3, r2
 8017406:	460a      	mov	r2, r1
 8017408:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 801740a:	4b0f      	ldr	r3, [pc, #60]	; (8017448 <main+0x10b4>)
 801740c:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8017410:	b29b      	uxth	r3, r3
 8017412:	461a      	mov	r2, r3
 8017414:	0112      	lsls	r2, r2, #4
 8017416:	1ad3      	subs	r3, r2, r3
 8017418:	009b      	lsls	r3, r3, #2
 801741a:	b29b      	uxth	r3, r3
 801741c:	b21a      	sxth	r2, r3
 801741e:	4b0c      	ldr	r3, [pc, #48]	; (8017450 <main+0x10bc>)
 8017420:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8017422:	4b0c      	ldr	r3, [pc, #48]	; (8017454 <main+0x10c0>)
 8017424:	781b      	ldrb	r3, [r3, #0]
 8017426:	f003 0302 	and.w	r3, r3, #2
 801742a:	2b00      	cmp	r3, #0
 801742c:	d001      	beq.n	8017432 <main+0x109e>
 801742e:	f7fd f9f3 	bl	8014818 <Show_List>
	      Update_Title();
 8017432:	f7fb f82b 	bl	801248c <Update_Title>
	      Key_Buffer = 0;
 8017436:	4b08      	ldr	r3, [pc, #32]	; (8017458 <main+0x10c4>)
 8017438:	2200      	movs	r2, #0
 801743a:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 801743c:	f7ff b85b 	b.w	80164f6 <main+0x162>
 8017440:	2000079e 	.word	0x2000079e
 8017444:	20000538 	.word	0x20000538
 8017448:	20000298 	.word	0x20000298
 801744c:	200007a0 	.word	0x200007a0
 8017450:	2000079c 	.word	0x2000079c
 8017454:	2000078e 	.word	0x2000078e
 8017458:	2000077d 	.word	0x2000077d

0801745c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b094      	sub	sp, #80	; 0x50
 8017460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017462:	f107 031c 	add.w	r3, r7, #28
 8017466:	2234      	movs	r2, #52	; 0x34
 8017468:	2100      	movs	r1, #0
 801746a:	4618      	mov	r0, r3
 801746c:	f00b fc28 	bl	8022cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017470:	f107 0308 	add.w	r3, r7, #8
 8017474:	2200      	movs	r2, #0
 8017476:	601a      	str	r2, [r3, #0]
 8017478:	605a      	str	r2, [r3, #4]
 801747a:	609a      	str	r2, [r3, #8]
 801747c:	60da      	str	r2, [r3, #12]
 801747e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017480:	2300      	movs	r3, #0
 8017482:	607b      	str	r3, [r7, #4]
 8017484:	4b2d      	ldr	r3, [pc, #180]	; (801753c <SystemClock_Config+0xe0>)
 8017486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017488:	4a2c      	ldr	r2, [pc, #176]	; (801753c <SystemClock_Config+0xe0>)
 801748a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801748e:	6413      	str	r3, [r2, #64]	; 0x40
 8017490:	4b2a      	ldr	r3, [pc, #168]	; (801753c <SystemClock_Config+0xe0>)
 8017492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017498:	607b      	str	r3, [r7, #4]
 801749a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801749c:	2300      	movs	r3, #0
 801749e:	603b      	str	r3, [r7, #0]
 80174a0:	4b27      	ldr	r3, [pc, #156]	; (8017540 <SystemClock_Config+0xe4>)
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	4a26      	ldr	r2, [pc, #152]	; (8017540 <SystemClock_Config+0xe4>)
 80174a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80174aa:	6013      	str	r3, [r2, #0]
 80174ac:	4b24      	ldr	r3, [pc, #144]	; (8017540 <SystemClock_Config+0xe4>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80174b4:	603b      	str	r3, [r7, #0]
 80174b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80174b8:	2301      	movs	r3, #1
 80174ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80174bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80174c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80174c2:	2302      	movs	r3, #2
 80174c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80174c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80174ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80174cc:	2319      	movs	r3, #25
 80174ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80174d0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80174d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80174d6:	2302      	movs	r3, #2
 80174d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80174da:	2305      	movs	r3, #5
 80174dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80174de:	2302      	movs	r3, #2
 80174e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80174e2:	f107 031c 	add.w	r3, r7, #28
 80174e6:	4618      	mov	r0, r3
 80174e8:	f004 fb72 	bl	801bbd0 <HAL_RCC_OscConfig>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d001      	beq.n	80174f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80174f2:	f000 fc1d 	bl	8017d30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80174f6:	f003 fda3 	bl	801b040 <HAL_PWREx_EnableOverDrive>
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d001      	beq.n	8017504 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8017500:	f000 fc16 	bl	8017d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017504:	230f      	movs	r3, #15
 8017506:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017508:	2302      	movs	r3, #2
 801750a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801750c:	2300      	movs	r3, #0
 801750e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017510:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017514:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801751a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801751c:	f107 0308 	add.w	r3, r7, #8
 8017520:	2105      	movs	r1, #5
 8017522:	4618      	mov	r0, r3
 8017524:	f003 fddc 	bl	801b0e0 <HAL_RCC_ClockConfig>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 801752e:	f000 fbff 	bl	8017d30 <Error_Handler>
  }
}
 8017532:	bf00      	nop
 8017534:	3750      	adds	r7, #80	; 0x50
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	40023800 	.word	0x40023800
 8017540:	40007000 	.word	0x40007000

08017544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801754a:	463b      	mov	r3, r7
 801754c:	2200      	movs	r2, #0
 801754e:	601a      	str	r2, [r3, #0]
 8017550:	605a      	str	r2, [r3, #4]
 8017552:	609a      	str	r2, [r3, #8]
 8017554:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8017556:	4b22      	ldr	r3, [pc, #136]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017558:	4a22      	ldr	r2, [pc, #136]	; (80175e4 <MX_ADC1_Init+0xa0>)
 801755a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801755c:	4b20      	ldr	r3, [pc, #128]	; (80175e0 <MX_ADC1_Init+0x9c>)
 801755e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017564:	4b1e      	ldr	r3, [pc, #120]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017566:	2200      	movs	r2, #0
 8017568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801756a:	4b1d      	ldr	r3, [pc, #116]	; (80175e0 <MX_ADC1_Init+0x9c>)
 801756c:	2200      	movs	r2, #0
 801756e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017570:	4b1b      	ldr	r3, [pc, #108]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017572:	2200      	movs	r2, #0
 8017574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8017576:	4b1a      	ldr	r3, [pc, #104]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017578:	2200      	movs	r2, #0
 801757a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801757e:	4b18      	ldr	r3, [pc, #96]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017584:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8017586:	4b16      	ldr	r3, [pc, #88]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017588:	2200      	movs	r2, #0
 801758a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801758c:	4b14      	ldr	r3, [pc, #80]	; (80175e0 <MX_ADC1_Init+0x9c>)
 801758e:	2200      	movs	r2, #0
 8017590:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8017592:	4b13      	ldr	r3, [pc, #76]	; (80175e0 <MX_ADC1_Init+0x9c>)
 8017594:	2201      	movs	r2, #1
 8017596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8017598:	4b11      	ldr	r3, [pc, #68]	; (80175e0 <MX_ADC1_Init+0x9c>)
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80175a0:	4b0f      	ldr	r3, [pc, #60]	; (80175e0 <MX_ADC1_Init+0x9c>)
 80175a2:	2201      	movs	r2, #1
 80175a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80175a6:	480e      	ldr	r0, [pc, #56]	; (80175e0 <MX_ADC1_Init+0x9c>)
 80175a8:	f000 ff7a 	bl	80184a0 <HAL_ADC_Init>
 80175ac:	4603      	mov	r3, r0
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d001      	beq.n	80175b6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80175b2:	f000 fbbd 	bl	8017d30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80175b6:	2306      	movs	r3, #6
 80175b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80175ba:	2301      	movs	r3, #1
 80175bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80175be:	2300      	movs	r3, #0
 80175c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80175c2:	463b      	mov	r3, r7
 80175c4:	4619      	mov	r1, r3
 80175c6:	4806      	ldr	r0, [pc, #24]	; (80175e0 <MX_ADC1_Init+0x9c>)
 80175c8:	f000 ffae 	bl	8018528 <HAL_ADC_ConfigChannel>
 80175cc:	4603      	mov	r3, r0
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d001      	beq.n	80175d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80175d2:	f000 fbad 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80175d6:	bf00      	nop
 80175d8:	3710      	adds	r7, #16
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}
 80175de:	bf00      	nop
 80175e0:	20006a78 	.word	0x20006a78
 80175e4:	40012000 	.word	0x40012000

080175e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80175ee:	463b      	mov	r3, r7
 80175f0:	2200      	movs	r2, #0
 80175f2:	601a      	str	r2, [r3, #0]
 80175f4:	605a      	str	r2, [r3, #4]
 80175f6:	609a      	str	r2, [r3, #8]
 80175f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80175fa:	4b22      	ldr	r3, [pc, #136]	; (8017684 <MX_ADC2_Init+0x9c>)
 80175fc:	4a22      	ldr	r2, [pc, #136]	; (8017688 <MX_ADC2_Init+0xa0>)
 80175fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017600:	4b20      	ldr	r3, [pc, #128]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8017608:	4b1e      	ldr	r3, [pc, #120]	; (8017684 <MX_ADC2_Init+0x9c>)
 801760a:	2200      	movs	r2, #0
 801760c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 801760e:	4b1d      	ldr	r3, [pc, #116]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017610:	2200      	movs	r2, #0
 8017612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8017614:	4b1b      	ldr	r3, [pc, #108]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017616:	2200      	movs	r2, #0
 8017618:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 801761a:	4b1a      	ldr	r3, [pc, #104]	; (8017684 <MX_ADC2_Init+0x9c>)
 801761c:	2200      	movs	r2, #0
 801761e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017622:	4b18      	ldr	r3, [pc, #96]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801762a:	4b16      	ldr	r3, [pc, #88]	; (8017684 <MX_ADC2_Init+0x9c>)
 801762c:	2200      	movs	r2, #0
 801762e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017630:	4b14      	ldr	r3, [pc, #80]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017632:	2200      	movs	r2, #0
 8017634:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8017636:	4b13      	ldr	r3, [pc, #76]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017638:	2201      	movs	r2, #1
 801763a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 801763c:	4b11      	ldr	r3, [pc, #68]	; (8017684 <MX_ADC2_Init+0x9c>)
 801763e:	2200      	movs	r2, #0
 8017640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017644:	4b0f      	ldr	r3, [pc, #60]	; (8017684 <MX_ADC2_Init+0x9c>)
 8017646:	2201      	movs	r2, #1
 8017648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801764a:	480e      	ldr	r0, [pc, #56]	; (8017684 <MX_ADC2_Init+0x9c>)
 801764c:	f000 ff28 	bl	80184a0 <HAL_ADC_Init>
 8017650:	4603      	mov	r3, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	d001      	beq.n	801765a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8017656:	f000 fb6b 	bl	8017d30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801765a:	2307      	movs	r3, #7
 801765c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801765e:	2301      	movs	r3, #1
 8017660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017662:	2300      	movs	r3, #0
 8017664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8017666:	463b      	mov	r3, r7
 8017668:	4619      	mov	r1, r3
 801766a:	4806      	ldr	r0, [pc, #24]	; (8017684 <MX_ADC2_Init+0x9c>)
 801766c:	f000 ff5c 	bl	8018528 <HAL_ADC_ConfigChannel>
 8017670:	4603      	mov	r3, r0
 8017672:	2b00      	cmp	r3, #0
 8017674:	d001      	beq.n	801767a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8017676:	f000 fb5b 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801767a:	bf00      	nop
 801767c:	3710      	adds	r7, #16
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}
 8017682:	bf00      	nop
 8017684:	200068e8 	.word	0x200068e8
 8017688:	40012100 	.word	0x40012100

0801768c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017692:	463b      	mov	r3, r7
 8017694:	2200      	movs	r2, #0
 8017696:	601a      	str	r2, [r3, #0]
 8017698:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801769a:	4b19      	ldr	r3, [pc, #100]	; (8017700 <MX_DAC_Init+0x74>)
 801769c:	4a19      	ldr	r2, [pc, #100]	; (8017704 <MX_DAC_Init+0x78>)
 801769e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80176a0:	4817      	ldr	r0, [pc, #92]	; (8017700 <MX_DAC_Init+0x74>)
 80176a2:	f001 fa80 	bl	8018ba6 <HAL_DAC_Init>
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d001      	beq.n	80176b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80176ac:	f000 fb40 	bl	8017d30 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80176b0:	2300      	movs	r3, #0
 80176b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80176b4:	2300      	movs	r3, #0
 80176b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80176b8:	463b      	mov	r3, r7
 80176ba:	2200      	movs	r2, #0
 80176bc:	4619      	mov	r1, r3
 80176be:	4810      	ldr	r0, [pc, #64]	; (8017700 <MX_DAC_Init+0x74>)
 80176c0:	f001 fab8 	bl	8018c34 <HAL_DAC_ConfigChannel>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d001      	beq.n	80176ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80176ca:	f000 fb31 	bl	8017d30 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80176ce:	2302      	movs	r3, #2
 80176d0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80176d2:	463b      	mov	r3, r7
 80176d4:	2210      	movs	r2, #16
 80176d6:	4619      	mov	r1, r3
 80176d8:	4809      	ldr	r0, [pc, #36]	; (8017700 <MX_DAC_Init+0x74>)
 80176da:	f001 faab 	bl	8018c34 <HAL_DAC_ConfigChannel>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d001      	beq.n	80176e8 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80176e4:	f000 fb24 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 80176e8:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80176ec:	2200      	movs	r2, #0
 80176ee:	2110      	movs	r1, #16
 80176f0:	4803      	ldr	r0, [pc, #12]	; (8017700 <MX_DAC_Init+0x74>)
 80176f2:	f001 fa7a 	bl	8018bea <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 80176f6:	bf00      	nop
 80176f8:	3708      	adds	r7, #8
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	20006af8 	.word	0x20006af8
 8017704:	40007400 	.word	0x40007400

08017708 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 801770c:	4b17      	ldr	r3, [pc, #92]	; (801776c <MX_SPI2_Init+0x64>)
 801770e:	4a18      	ldr	r2, [pc, #96]	; (8017770 <MX_SPI2_Init+0x68>)
 8017710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017712:	4b16      	ldr	r3, [pc, #88]	; (801776c <MX_SPI2_Init+0x64>)
 8017714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801771a:	4b14      	ldr	r3, [pc, #80]	; (801776c <MX_SPI2_Init+0x64>)
 801771c:	2200      	movs	r2, #0
 801771e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8017720:	4b12      	ldr	r3, [pc, #72]	; (801776c <MX_SPI2_Init+0x64>)
 8017722:	2200      	movs	r2, #0
 8017724:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017726:	4b11      	ldr	r3, [pc, #68]	; (801776c <MX_SPI2_Init+0x64>)
 8017728:	2202      	movs	r2, #2
 801772a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801772c:	4b0f      	ldr	r3, [pc, #60]	; (801776c <MX_SPI2_Init+0x64>)
 801772e:	2201      	movs	r2, #1
 8017730:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017732:	4b0e      	ldr	r3, [pc, #56]	; (801776c <MX_SPI2_Init+0x64>)
 8017734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017738:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801773a:	4b0c      	ldr	r3, [pc, #48]	; (801776c <MX_SPI2_Init+0x64>)
 801773c:	2200      	movs	r2, #0
 801773e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017740:	4b0a      	ldr	r3, [pc, #40]	; (801776c <MX_SPI2_Init+0x64>)
 8017742:	2280      	movs	r2, #128	; 0x80
 8017744:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017746:	4b09      	ldr	r3, [pc, #36]	; (801776c <MX_SPI2_Init+0x64>)
 8017748:	2200      	movs	r2, #0
 801774a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801774c:	4b07      	ldr	r3, [pc, #28]	; (801776c <MX_SPI2_Init+0x64>)
 801774e:	2200      	movs	r2, #0
 8017750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017752:	4b06      	ldr	r3, [pc, #24]	; (801776c <MX_SPI2_Init+0x64>)
 8017754:	220a      	movs	r2, #10
 8017756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017758:	4804      	ldr	r0, [pc, #16]	; (801776c <MX_SPI2_Init+0x64>)
 801775a:	f004 fcd7 	bl	801c10c <HAL_SPI_Init>
 801775e:	4603      	mov	r3, r0
 8017760:	2b00      	cmp	r3, #0
 8017762:	d001      	beq.n	8017768 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017764:	f000 fae4 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017768:	bf00      	nop
 801776a:	bd80      	pop	{r7, pc}
 801776c:	20006890 	.word	0x20006890
 8017770:	40003800 	.word	0x40003800

08017774 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8017778:	4b18      	ldr	r3, [pc, #96]	; (80177dc <MX_SPI3_Init+0x68>)
 801777a:	4a19      	ldr	r2, [pc, #100]	; (80177e0 <MX_SPI3_Init+0x6c>)
 801777c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801777e:	4b17      	ldr	r3, [pc, #92]	; (80177dc <MX_SPI3_Init+0x68>)
 8017780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017784:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017786:	4b15      	ldr	r3, [pc, #84]	; (80177dc <MX_SPI3_Init+0x68>)
 8017788:	2200      	movs	r2, #0
 801778a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 801778c:	4b13      	ldr	r3, [pc, #76]	; (80177dc <MX_SPI3_Init+0x68>)
 801778e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017792:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017794:	4b11      	ldr	r3, [pc, #68]	; (80177dc <MX_SPI3_Init+0x68>)
 8017796:	2200      	movs	r2, #0
 8017798:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801779a:	4b10      	ldr	r3, [pc, #64]	; (80177dc <MX_SPI3_Init+0x68>)
 801779c:	2200      	movs	r2, #0
 801779e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80177a0:	4b0e      	ldr	r3, [pc, #56]	; (80177dc <MX_SPI3_Init+0x68>)
 80177a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80177a8:	4b0c      	ldr	r3, [pc, #48]	; (80177dc <MX_SPI3_Init+0x68>)
 80177aa:	2210      	movs	r2, #16
 80177ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80177ae:	4b0b      	ldr	r3, [pc, #44]	; (80177dc <MX_SPI3_Init+0x68>)
 80177b0:	2280      	movs	r2, #128	; 0x80
 80177b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80177b4:	4b09      	ldr	r3, [pc, #36]	; (80177dc <MX_SPI3_Init+0x68>)
 80177b6:	2200      	movs	r2, #0
 80177b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80177ba:	4b08      	ldr	r3, [pc, #32]	; (80177dc <MX_SPI3_Init+0x68>)
 80177bc:	2200      	movs	r2, #0
 80177be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80177c0:	4b06      	ldr	r3, [pc, #24]	; (80177dc <MX_SPI3_Init+0x68>)
 80177c2:	220a      	movs	r2, #10
 80177c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80177c6:	4805      	ldr	r0, [pc, #20]	; (80177dc <MX_SPI3_Init+0x68>)
 80177c8:	f004 fca0 	bl	801c10c <HAL_SPI_Init>
 80177cc:	4603      	mov	r3, r0
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d001      	beq.n	80177d6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80177d2:	f000 faad 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80177d6:	bf00      	nop
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	200069c0 	.word	0x200069c0
 80177e0:	40003c00 	.word	0x40003c00

080177e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80177ea:	f107 0308 	add.w	r3, r7, #8
 80177ee:	2200      	movs	r2, #0
 80177f0:	601a      	str	r2, [r3, #0]
 80177f2:	605a      	str	r2, [r3, #4]
 80177f4:	609a      	str	r2, [r3, #8]
 80177f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177f8:	463b      	mov	r3, r7
 80177fa:	2200      	movs	r2, #0
 80177fc:	601a      	str	r2, [r3, #0]
 80177fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8017800:	4b30      	ldr	r3, [pc, #192]	; (80178c4 <MX_TIM1_Init+0xe0>)
 8017802:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8017806:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8017808:	4b2e      	ldr	r3, [pc, #184]	; (80178c4 <MX_TIM1_Init+0xe0>)
 801780a:	2270      	movs	r2, #112	; 0x70
 801780c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 801780e:	4b2e      	ldr	r3, [pc, #184]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017810:	4a2e      	ldr	r2, [pc, #184]	; (80178cc <MX_TIM1_Init+0xe8>)
 8017812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017814:	4b2c      	ldr	r3, [pc, #176]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017816:	2259      	movs	r2, #89	; 0x59
 8017818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 801781a:	4b2b      	ldr	r3, [pc, #172]	; (80178c8 <MX_TIM1_Init+0xe4>)
 801781c:	2210      	movs	r2, #16
 801781e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017820:	4b29      	ldr	r3, [pc, #164]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017828:	4b27      	ldr	r3, [pc, #156]	; (80178c8 <MX_TIM1_Init+0xe4>)
 801782a:	2200      	movs	r2, #0
 801782c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801782e:	4b26      	ldr	r3, [pc, #152]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017830:	2200      	movs	r2, #0
 8017832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017834:	4b24      	ldr	r3, [pc, #144]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017836:	2280      	movs	r2, #128	; 0x80
 8017838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801783a:	4823      	ldr	r0, [pc, #140]	; (80178c8 <MX_TIM1_Init+0xe4>)
 801783c:	f005 fb3a 	bl	801ceb4 <HAL_TIM_Base_Init>
 8017840:	4603      	mov	r3, r0
 8017842:	2b00      	cmp	r3, #0
 8017844:	d001      	beq.n	801784a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8017846:	f000 fa73 	bl	8017d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801784a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801784e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017850:	f107 0308 	add.w	r3, r7, #8
 8017854:	4619      	mov	r1, r3
 8017856:	481c      	ldr	r0, [pc, #112]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017858:	f005 fd50 	bl	801d2fc <HAL_TIM_ConfigClockSource>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017862:	f000 fa65 	bl	8017d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017866:	2300      	movs	r3, #0
 8017868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801786a:	2300      	movs	r3, #0
 801786c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801786e:	463b      	mov	r3, r7
 8017870:	4619      	mov	r1, r3
 8017872:	4815      	ldr	r0, [pc, #84]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017874:	f006 f91c 	bl	801dab0 <HAL_TIMEx_MasterConfigSynchronization>
 8017878:	4603      	mov	r3, r0
 801787a:	2b00      	cmp	r3, #0
 801787c:	d001      	beq.n	8017882 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 801787e:	f000 fa57 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017882:	2201      	movs	r2, #1
 8017884:	490f      	ldr	r1, [pc, #60]	; (80178c4 <MX_TIM1_Init+0xe0>)
 8017886:	4810      	ldr	r0, [pc, #64]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017888:	f005 fcdc 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 801788c:	4b0e      	ldr	r3, [pc, #56]	; (80178c8 <MX_TIM1_Init+0xe4>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681a      	ldr	r2, [r3, #0]
 8017892:	4b0d      	ldr	r3, [pc, #52]	; (80178c8 <MX_TIM1_Init+0xe4>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f042 0204 	orr.w	r2, r2, #4
 801789a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 801789c:	4b0a      	ldr	r3, [pc, #40]	; (80178c8 <MX_TIM1_Init+0xe4>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	68da      	ldr	r2, [r3, #12]
 80178a2:	4b09      	ldr	r3, [pc, #36]	; (80178c8 <MX_TIM1_Init+0xe4>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 80178aa:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80178ac:	4b06      	ldr	r3, [pc, #24]	; (80178c8 <MX_TIM1_Init+0xe4>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	4b05      	ldr	r3, [pc, #20]	; (80178c8 <MX_TIM1_Init+0xe4>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f042 0201 	orr.w	r2, r2, #1
 80178ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 80178bc:	bf00      	nop
 80178be:	3718      	adds	r7, #24
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	20006b6c 	.word	0x20006b6c
 80178c8:	20006b88 	.word	0x20006b88
 80178cc:	40010000 	.word	0x40010000

080178d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b086      	sub	sp, #24
 80178d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80178d6:	f107 0308 	add.w	r3, r7, #8
 80178da:	2200      	movs	r2, #0
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	605a      	str	r2, [r3, #4]
 80178e0:	609a      	str	r2, [r3, #8]
 80178e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80178e4:	463b      	mov	r3, r7
 80178e6:	2200      	movs	r2, #0
 80178e8:	601a      	str	r2, [r3, #0]
 80178ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 80178ec:	4b25      	ldr	r3, [pc, #148]	; (8017984 <MX_TIM3_Init+0xb4>)
 80178ee:	f640 62a6 	movw	r2, #3750	; 0xea6
 80178f2:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80178f4:	4b24      	ldr	r3, [pc, #144]	; (8017988 <MX_TIM3_Init+0xb8>)
 80178f6:	4a25      	ldr	r2, [pc, #148]	; (801798c <MX_TIM3_Init+0xbc>)
 80178f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80178fa:	4b23      	ldr	r3, [pc, #140]	; (8017988 <MX_TIM3_Init+0xb8>)
 80178fc:	220b      	movs	r2, #11
 80178fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017900:	4b21      	ldr	r3, [pc, #132]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017902:	2200      	movs	r2, #0
 8017904:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8017906:	4b20      	ldr	r3, [pc, #128]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017908:	f641 524b 	movw	r2, #7499	; 0x1d4b
 801790c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801790e:	4b1e      	ldr	r3, [pc, #120]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017910:	2200      	movs	r2, #0
 8017912:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017914:	4b1c      	ldr	r3, [pc, #112]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017916:	2280      	movs	r2, #128	; 0x80
 8017918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801791a:	481b      	ldr	r0, [pc, #108]	; (8017988 <MX_TIM3_Init+0xb8>)
 801791c:	f005 faca 	bl	801ceb4 <HAL_TIM_Base_Init>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d001      	beq.n	801792a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8017926:	f000 fa03 	bl	8017d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801792a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801792e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017930:	f107 0308 	add.w	r3, r7, #8
 8017934:	4619      	mov	r1, r3
 8017936:	4814      	ldr	r0, [pc, #80]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017938:	f005 fce0 	bl	801d2fc <HAL_TIM_ConfigClockSource>
 801793c:	4603      	mov	r3, r0
 801793e:	2b00      	cmp	r3, #0
 8017940:	d001      	beq.n	8017946 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017942:	f000 f9f5 	bl	8017d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017946:	2320      	movs	r3, #32
 8017948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801794a:	2300      	movs	r3, #0
 801794c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801794e:	463b      	mov	r3, r7
 8017950:	4619      	mov	r1, r3
 8017952:	480d      	ldr	r0, [pc, #52]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017954:	f006 f8ac 	bl	801dab0 <HAL_TIMEx_MasterConfigSynchronization>
 8017958:	4603      	mov	r3, r0
 801795a:	2b00      	cmp	r3, #0
 801795c:	d001      	beq.n	8017962 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 801795e:	f000 f9e7 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017962:	2201      	movs	r2, #1
 8017964:	4907      	ldr	r1, [pc, #28]	; (8017984 <MX_TIM3_Init+0xb4>)
 8017966:	4808      	ldr	r0, [pc, #32]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017968:	f005 fc6c 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 801796c:	4b06      	ldr	r3, [pc, #24]	; (8017988 <MX_TIM3_Init+0xb8>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	681a      	ldr	r2, [r3, #0]
 8017972:	4b05      	ldr	r3, [pc, #20]	; (8017988 <MX_TIM3_Init+0xb8>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	f042 0201 	orr.w	r2, r2, #1
 801797a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 801797c:	bf00      	nop
 801797e:	3718      	adds	r7, #24
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}
 8017984:	20006ac0 	.word	0x20006ac0
 8017988:	20006978 	.word	0x20006978
 801798c:	40000400 	.word	0x40000400

08017990 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b086      	sub	sp, #24
 8017994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017996:	f107 0308 	add.w	r3, r7, #8
 801799a:	2200      	movs	r2, #0
 801799c:	601a      	str	r2, [r3, #0]
 801799e:	605a      	str	r2, [r3, #4]
 80179a0:	609a      	str	r2, [r3, #8]
 80179a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80179a4:	463b      	mov	r3, r7
 80179a6:	2200      	movs	r2, #0
 80179a8:	601a      	str	r2, [r3, #0]
 80179aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 80179ac:	4b3a      	ldr	r3, [pc, #232]	; (8017a98 <MX_TIM5_Init+0x108>)
 80179ae:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80179b2:	461a      	mov	r2, r3
 80179b4:	4b39      	ldr	r3, [pc, #228]	; (8017a9c <MX_TIM5_Init+0x10c>)
 80179b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80179ba:	3301      	adds	r3, #1
 80179bc:	0fda      	lsrs	r2, r3, #31
 80179be:	4413      	add	r3, r2
 80179c0:	105b      	asrs	r3, r3, #1
 80179c2:	461a      	mov	r2, r3
 80179c4:	4b36      	ldr	r3, [pc, #216]	; (8017aa0 <MX_TIM5_Init+0x110>)
 80179c6:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 80179c8:	4b35      	ldr	r3, [pc, #212]	; (8017aa0 <MX_TIM5_Init+0x110>)
 80179ca:	2270      	movs	r2, #112	; 0x70
 80179cc:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 80179ce:	4b34      	ldr	r3, [pc, #208]	; (8017aa0 <MX_TIM5_Init+0x110>)
 80179d0:	2204      	movs	r2, #4
 80179d2:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80179d4:	4b33      	ldr	r3, [pc, #204]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179d6:	4a34      	ldr	r2, [pc, #208]	; (8017aa8 <MX_TIM5_Init+0x118>)
 80179d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80179da:	4b32      	ldr	r3, [pc, #200]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179dc:	2209      	movs	r2, #9
 80179de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80179e0:	4b30      	ldr	r3, [pc, #192]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179e2:	2200      	movs	r2, #0
 80179e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 80179e6:	4b2f      	ldr	r3, [pc, #188]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179e8:	f244 6250 	movw	r2, #18000	; 0x4650
 80179ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80179ee:	4b2d      	ldr	r3, [pc, #180]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179f0:	2200      	movs	r2, #0
 80179f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80179f4:	4b2b      	ldr	r3, [pc, #172]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179f6:	2280      	movs	r2, #128	; 0x80
 80179f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80179fa:	482a      	ldr	r0, [pc, #168]	; (8017aa4 <MX_TIM5_Init+0x114>)
 80179fc:	f005 fa5a 	bl	801ceb4 <HAL_TIM_Base_Init>
 8017a00:	4603      	mov	r3, r0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d001      	beq.n	8017a0a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8017a06:	f000 f993 	bl	8017d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017a10:	f107 0308 	add.w	r3, r7, #8
 8017a14:	4619      	mov	r1, r3
 8017a16:	4823      	ldr	r0, [pc, #140]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a18:	f005 fc70 	bl	801d2fc <HAL_TIM_ConfigClockSource>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d001      	beq.n	8017a26 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017a22:	f000 f985 	bl	8017d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017a26:	2300      	movs	r3, #0
 8017a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017a2e:	463b      	mov	r3, r7
 8017a30:	4619      	mov	r1, r3
 8017a32:	481c      	ldr	r0, [pc, #112]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a34:	f006 f83c 	bl	801dab0 <HAL_TIMEx_MasterConfigSynchronization>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d001      	beq.n	8017a42 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017a3e:	f000 f977 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017a42:	4b15      	ldr	r3, [pc, #84]	; (8017a98 <MX_TIM5_Init+0x108>)
 8017a44:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017a48:	461a      	mov	r2, r3
 8017a4a:	4b14      	ldr	r3, [pc, #80]	; (8017a9c <MX_TIM5_Init+0x10c>)
 8017a4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017a50:	461a      	mov	r2, r3
 8017a52:	4b14      	ldr	r3, [pc, #80]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a54:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017a56:	4813      	ldr	r0, [pc, #76]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a58:	f005 fa2c 	bl	801ceb4 <HAL_TIM_Base_Init>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d001      	beq.n	8017a66 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017a62:	f000 f965 	bl	8017d30 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017a66:	2203      	movs	r2, #3
 8017a68:	490d      	ldr	r1, [pc, #52]	; (8017aa0 <MX_TIM5_Init+0x110>)
 8017a6a:	480e      	ldr	r0, [pc, #56]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a6c:	f005 fbea 	bl	801d244 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017a70:	4b0c      	ldr	r3, [pc, #48]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f042 0204 	orr.w	r2, r2, #4
 8017a7e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017a80:	4b08      	ldr	r3, [pc, #32]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	4b07      	ldr	r3, [pc, #28]	; (8017aa4 <MX_TIM5_Init+0x114>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	f042 0201 	orr.w	r2, r2, #1
 8017a8e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017a90:	bf00      	nop
 8017a92:	3718      	adds	r7, #24
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}
 8017a98:	20000298 	.word	0x20000298
 8017a9c:	08000ae8 	.word	0x08000ae8
 8017aa0:	20006adc 	.word	0x20006adc
 8017aa4:	20006930 	.word	0x20006930
 8017aa8:	40000c00 	.word	0x40000c00

08017aac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017ab2:	463b      	mov	r3, r7
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	601a      	str	r2, [r3, #0]
 8017ab8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8017aba:	4b1d      	ldr	r3, [pc, #116]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017abc:	4a1d      	ldr	r2, [pc, #116]	; (8017b34 <MX_TIM7_Init+0x88>)
 8017abe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017ac0:	4b1b      	ldr	r3, [pc, #108]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017ac2:	2202      	movs	r2, #2
 8017ac4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ac6:	4b1a      	ldr	r3, [pc, #104]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017ac8:	2200      	movs	r2, #0
 8017aca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8017acc:	4b18      	ldr	r3, [pc, #96]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017ace:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017ad2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017ad4:	4b16      	ldr	r3, [pc, #88]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017ada:	4815      	ldr	r0, [pc, #84]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017adc:	f005 f9ea 	bl	801ceb4 <HAL_TIM_Base_Init>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d001      	beq.n	8017aea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017ae6:	f000 f923 	bl	8017d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017aea:	2300      	movs	r3, #0
 8017aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017aee:	2300      	movs	r3, #0
 8017af0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8017af2:	463b      	mov	r3, r7
 8017af4:	4619      	mov	r1, r3
 8017af6:	480e      	ldr	r0, [pc, #56]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017af8:	f005 ffda 	bl	801dab0 <HAL_TIMEx_MasterConfigSynchronization>
 8017afc:	4603      	mov	r3, r0
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d001      	beq.n	8017b06 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8017b02:	f000 f915 	bl	8017d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 8017b06:	4b0a      	ldr	r3, [pc, #40]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	68da      	ldr	r2, [r3, #12]
 8017b0c:	4b08      	ldr	r3, [pc, #32]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017b14:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017b16:	4b06      	ldr	r3, [pc, #24]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	681a      	ldr	r2, [r3, #0]
 8017b1c:	4b04      	ldr	r3, [pc, #16]	; (8017b30 <MX_TIM7_Init+0x84>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	f042 0201 	orr.w	r2, r2, #1
 8017b24:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017b26:	bf00      	nop
 8017b28:	3708      	adds	r7, #8
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	20006bd0 	.word	0x20006bd0
 8017b34:	40001400 	.word	0x40001400

08017b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017b3e:	2300      	movs	r3, #0
 8017b40:	607b      	str	r3, [r7, #4]
 8017b42:	4b17      	ldr	r3, [pc, #92]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b46:	4a16      	ldr	r2, [pc, #88]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8017b4e:	4b14      	ldr	r3, [pc, #80]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017b56:	607b      	str	r3, [r7, #4]
 8017b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	603b      	str	r3, [r7, #0]
 8017b5e:	4b10      	ldr	r3, [pc, #64]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b62:	4a0f      	ldr	r2, [pc, #60]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017b68:	6313      	str	r3, [r2, #48]	; 0x30
 8017b6a:	4b0d      	ldr	r3, [pc, #52]	; (8017ba0 <MX_DMA_Init+0x68>)
 8017b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017b72:	603b      	str	r3, [r7, #0]
 8017b74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017b76:	2200      	movs	r2, #0
 8017b78:	2100      	movs	r1, #0
 8017b7a:	2010      	movs	r0, #16
 8017b7c:	f000 ffdd 	bl	8018b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017b80:	2010      	movs	r0, #16
 8017b82:	f000 fff6 	bl	8018b72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017b86:	2200      	movs	r2, #0
 8017b88:	2100      	movs	r1, #0
 8017b8a:	2038      	movs	r0, #56	; 0x38
 8017b8c:	f000 ffd5 	bl	8018b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017b90:	2038      	movs	r0, #56	; 0x38
 8017b92:	f000 ffee 	bl	8018b72 <HAL_NVIC_EnableIRQ>

}
 8017b96:	bf00      	nop
 8017b98:	3708      	adds	r7, #8
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	40023800 	.word	0x40023800

08017ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b08a      	sub	sp, #40	; 0x28
 8017ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017baa:	f107 0314 	add.w	r3, r7, #20
 8017bae:	2200      	movs	r2, #0
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	605a      	str	r2, [r3, #4]
 8017bb4:	609a      	str	r2, [r3, #8]
 8017bb6:	60da      	str	r2, [r3, #12]
 8017bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017bba:	2300      	movs	r3, #0
 8017bbc:	613b      	str	r3, [r7, #16]
 8017bbe:	4b4e      	ldr	r3, [pc, #312]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bc2:	4a4d      	ldr	r2, [pc, #308]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8017bca:	4b4b      	ldr	r3, [pc, #300]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017bd2:	613b      	str	r3, [r7, #16]
 8017bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	60fb      	str	r3, [r7, #12]
 8017bda:	4b47      	ldr	r3, [pc, #284]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bde:	4a46      	ldr	r2, [pc, #280]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017be0:	f043 0301 	orr.w	r3, r3, #1
 8017be4:	6313      	str	r3, [r2, #48]	; 0x30
 8017be6:	4b44      	ldr	r3, [pc, #272]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bea:	f003 0301 	and.w	r3, r3, #1
 8017bee:	60fb      	str	r3, [r7, #12]
 8017bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	60bb      	str	r3, [r7, #8]
 8017bf6:	4b40      	ldr	r3, [pc, #256]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bfa:	4a3f      	ldr	r2, [pc, #252]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017bfc:	f043 0304 	orr.w	r3, r3, #4
 8017c00:	6313      	str	r3, [r2, #48]	; 0x30
 8017c02:	4b3d      	ldr	r3, [pc, #244]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c06:	f003 0304 	and.w	r3, r3, #4
 8017c0a:	60bb      	str	r3, [r7, #8]
 8017c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017c0e:	2300      	movs	r3, #0
 8017c10:	607b      	str	r3, [r7, #4]
 8017c12:	4b39      	ldr	r3, [pc, #228]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c16:	4a38      	ldr	r2, [pc, #224]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017c18:	f043 0302 	orr.w	r3, r3, #2
 8017c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8017c1e:	4b36      	ldr	r3, [pc, #216]	; (8017cf8 <MX_GPIO_Init+0x154>)
 8017c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c22:	f003 0302 	and.w	r3, r3, #2
 8017c26:	607b      	str	r3, [r7, #4]
 8017c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	2104      	movs	r1, #4
 8017c2e:	4833      	ldr	r0, [pc, #204]	; (8017cfc <MX_GPIO_Init+0x158>)
 8017c30:	f001 fff0 	bl	8019c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017c34:	2200      	movs	r2, #0
 8017c36:	f44f 6103 	mov.w	r1, #2096	; 0x830
 8017c3a:	4831      	ldr	r0, [pc, #196]	; (8017d00 <MX_GPIO_Init+0x15c>)
 8017c3c:	f001 ffea 	bl	8019c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017c40:	2200      	movs	r2, #0
 8017c42:	f240 2101 	movw	r1, #513	; 0x201
 8017c46:	482f      	ldr	r0, [pc, #188]	; (8017d04 <MX_GPIO_Init+0x160>)
 8017c48:	f001 ffe4 	bl	8019c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017c4c:	2201      	movs	r2, #1
 8017c4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017c52:	482c      	ldr	r0, [pc, #176]	; (8017d04 <MX_GPIO_Init+0x160>)
 8017c54:	f001 ffde 	bl	8019c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017c58:	2201      	movs	r2, #1
 8017c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c5e:	4828      	ldr	r0, [pc, #160]	; (8017d00 <MX_GPIO_Init+0x15c>)
 8017c60:	f001 ffd8 	bl	8019c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017c64:	2304      	movs	r3, #4
 8017c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c68:	2301      	movs	r3, #1
 8017c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c70:	2300      	movs	r3, #0
 8017c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017c74:	f107 0314 	add.w	r3, r7, #20
 8017c78:	4619      	mov	r1, r3
 8017c7a:	4820      	ldr	r0, [pc, #128]	; (8017cfc <MX_GPIO_Init+0x158>)
 8017c7c:	f001 fe1e 	bl	80198bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017c80:	f641 0330 	movw	r3, #6192	; 0x1830
 8017c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c86:	2301      	movs	r3, #1
 8017c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017c92:	f107 0314 	add.w	r3, r7, #20
 8017c96:	4619      	mov	r1, r3
 8017c98:	4819      	ldr	r0, [pc, #100]	; (8017d00 <MX_GPIO_Init+0x15c>)
 8017c9a:	f001 fe0f 	bl	80198bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017c9e:	f241 2341 	movw	r3, #4673	; 0x1241
 8017ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017cac:	2300      	movs	r3, #0
 8017cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017cb0:	f107 0314 	add.w	r3, r7, #20
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	4813      	ldr	r0, [pc, #76]	; (8017d04 <MX_GPIO_Init+0x160>)
 8017cb8:	f001 fe00 	bl	80198bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017cbc:	2304      	movs	r3, #4
 8017cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017cc8:	f107 0314 	add.w	r3, r7, #20
 8017ccc:	4619      	mov	r1, r3
 8017cce:	480d      	ldr	r0, [pc, #52]	; (8017d04 <MX_GPIO_Init+0x160>)
 8017cd0:	f001 fdf4 	bl	80198bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017cde:	2301      	movs	r3, #1
 8017ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017ce2:	f107 0314 	add.w	r3, r7, #20
 8017ce6:	4619      	mov	r1, r3
 8017ce8:	4806      	ldr	r0, [pc, #24]	; (8017d04 <MX_GPIO_Init+0x160>)
 8017cea:	f001 fde7 	bl	80198bc <HAL_GPIO_Init>

}
 8017cee:	bf00      	nop
 8017cf0:	3728      	adds	r7, #40	; 0x28
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}
 8017cf6:	bf00      	nop
 8017cf8:	40023800 	.word	0x40023800
 8017cfc:	40020000 	.word	0x40020000
 8017d00:	40020800 	.word	0x40020800
 8017d04:	40020400 	.word	0x40020400

08017d08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	4a06      	ldr	r2, [pc, #24]	; (8017d2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d105      	bne.n	8017d24 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8017d20:	f7f4 fd96 	bl	800c850 <Tim3_ISP>
  }
}
 8017d24:	bf00      	nop
 8017d26:	3708      	adds	r7, #8
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bd80      	pop	{r7, pc}
 8017d2c:	20006978 	.word	0x20006978

08017d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017d30:	b480      	push	{r7}
 8017d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017d34:	b672      	cpsid	i
}
 8017d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017d38:	e7fe      	b.n	8017d38 <Error_Handler+0x8>
	...

08017d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017d3c:	b480      	push	{r7}
 8017d3e:	b083      	sub	sp, #12
 8017d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017d42:	2300      	movs	r3, #0
 8017d44:	607b      	str	r3, [r7, #4]
 8017d46:	4b10      	ldr	r3, [pc, #64]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d4a:	4a0f      	ldr	r2, [pc, #60]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017d50:	6453      	str	r3, [r2, #68]	; 0x44
 8017d52:	4b0d      	ldr	r3, [pc, #52]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017d5a:	607b      	str	r3, [r7, #4]
 8017d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017d5e:	2300      	movs	r3, #0
 8017d60:	603b      	str	r3, [r7, #0]
 8017d62:	4b09      	ldr	r3, [pc, #36]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d66:	4a08      	ldr	r2, [pc, #32]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8017d6e:	4b06      	ldr	r3, [pc, #24]	; (8017d88 <HAL_MspInit+0x4c>)
 8017d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017d76:	603b      	str	r3, [r7, #0]
 8017d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017d7a:	bf00      	nop
 8017d7c:	370c      	adds	r7, #12
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d84:	4770      	bx	lr
 8017d86:	bf00      	nop
 8017d88:	40023800 	.word	0x40023800

08017d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b08c      	sub	sp, #48	; 0x30
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d94:	f107 031c 	add.w	r3, r7, #28
 8017d98:	2200      	movs	r2, #0
 8017d9a:	601a      	str	r2, [r3, #0]
 8017d9c:	605a      	str	r2, [r3, #4]
 8017d9e:	609a      	str	r2, [r3, #8]
 8017da0:	60da      	str	r2, [r3, #12]
 8017da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a45      	ldr	r2, [pc, #276]	; (8017ec0 <HAL_ADC_MspInit+0x134>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d157      	bne.n	8017e5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017dae:	2300      	movs	r3, #0
 8017db0:	61bb      	str	r3, [r7, #24]
 8017db2:	4b44      	ldr	r3, [pc, #272]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017db6:	4a43      	ldr	r2, [pc, #268]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8017dbe:	4b41      	ldr	r3, [pc, #260]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017dc6:	61bb      	str	r3, [r7, #24]
 8017dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017dca:	2300      	movs	r3, #0
 8017dcc:	617b      	str	r3, [r7, #20]
 8017dce:	4b3d      	ldr	r3, [pc, #244]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dd2:	4a3c      	ldr	r2, [pc, #240]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017dd4:	f043 0301 	orr.w	r3, r3, #1
 8017dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8017dda:	4b3a      	ldr	r3, [pc, #232]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dde:	f003 0301 	and.w	r3, r3, #1
 8017de2:	617b      	str	r3, [r7, #20]
 8017de4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017de6:	2340      	movs	r3, #64	; 0x40
 8017de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017dea:	2303      	movs	r3, #3
 8017dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dee:	2300      	movs	r3, #0
 8017df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017df2:	f107 031c 	add.w	r3, r7, #28
 8017df6:	4619      	mov	r1, r3
 8017df8:	4833      	ldr	r0, [pc, #204]	; (8017ec8 <HAL_ADC_MspInit+0x13c>)
 8017dfa:	f001 fd5f 	bl	80198bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017dfe:	4b33      	ldr	r3, [pc, #204]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e00:	4a33      	ldr	r2, [pc, #204]	; (8017ed0 <HAL_ADC_MspInit+0x144>)
 8017e02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017e04:	4b31      	ldr	r3, [pc, #196]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e06:	2200      	movs	r2, #0
 8017e08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017e0a:	4b30      	ldr	r3, [pc, #192]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017e10:	4b2e      	ldr	r3, [pc, #184]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e12:	2200      	movs	r2, #0
 8017e14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017e16:	4b2d      	ldr	r3, [pc, #180]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017e1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017e1e:	4b2b      	ldr	r3, [pc, #172]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017e24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017e26:	4b29      	ldr	r3, [pc, #164]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017e2e:	4b27      	ldr	r3, [pc, #156]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e30:	2200      	movs	r2, #0
 8017e32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017e34:	4b25      	ldr	r3, [pc, #148]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017e3a:	4b24      	ldr	r3, [pc, #144]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017e40:	4822      	ldr	r0, [pc, #136]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e42:	f000 ff47 	bl	8018cd4 <HAL_DMA_Init>
 8017e46:	4603      	mov	r3, r0
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d001      	beq.n	8017e50 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017e4c:	f7ff ff70 	bl	8017d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	4a1e      	ldr	r2, [pc, #120]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e54:	639a      	str	r2, [r3, #56]	; 0x38
 8017e56:	4a1d      	ldr	r2, [pc, #116]	; (8017ecc <HAL_ADC_MspInit+0x140>)
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017e5c:	e02c      	b.n	8017eb8 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	4a1c      	ldr	r2, [pc, #112]	; (8017ed4 <HAL_ADC_MspInit+0x148>)
 8017e64:	4293      	cmp	r3, r2
 8017e66:	d127      	bne.n	8017eb8 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017e68:	2300      	movs	r3, #0
 8017e6a:	613b      	str	r3, [r7, #16]
 8017e6c:	4b15      	ldr	r3, [pc, #84]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e70:	4a14      	ldr	r2, [pc, #80]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017e76:	6453      	str	r3, [r2, #68]	; 0x44
 8017e78:	4b12      	ldr	r3, [pc, #72]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017e80:	613b      	str	r3, [r7, #16]
 8017e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e84:	2300      	movs	r3, #0
 8017e86:	60fb      	str	r3, [r7, #12]
 8017e88:	4b0e      	ldr	r3, [pc, #56]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e8c:	4a0d      	ldr	r2, [pc, #52]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e8e:	f043 0301 	orr.w	r3, r3, #1
 8017e92:	6313      	str	r3, [r2, #48]	; 0x30
 8017e94:	4b0b      	ldr	r3, [pc, #44]	; (8017ec4 <HAL_ADC_MspInit+0x138>)
 8017e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	60fb      	str	r3, [r7, #12]
 8017e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017ea0:	2380      	movs	r3, #128	; 0x80
 8017ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017ea4:	2303      	movs	r3, #3
 8017ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017eac:	f107 031c 	add.w	r3, r7, #28
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	4805      	ldr	r0, [pc, #20]	; (8017ec8 <HAL_ADC_MspInit+0x13c>)
 8017eb4:	f001 fd02 	bl	80198bc <HAL_GPIO_Init>
}
 8017eb8:	bf00      	nop
 8017eba:	3730      	adds	r7, #48	; 0x30
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}
 8017ec0:	40012000 	.word	0x40012000
 8017ec4:	40023800 	.word	0x40023800
 8017ec8:	40020000 	.word	0x40020000
 8017ecc:	20006b0c 	.word	0x20006b0c
 8017ed0:	40026410 	.word	0x40026410
 8017ed4:	40012100 	.word	0x40012100

08017ed8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b08a      	sub	sp, #40	; 0x28
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ee0:	f107 0314 	add.w	r3, r7, #20
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	601a      	str	r2, [r3, #0]
 8017ee8:	605a      	str	r2, [r3, #4]
 8017eea:	609a      	str	r2, [r3, #8]
 8017eec:	60da      	str	r2, [r3, #12]
 8017eee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4a33      	ldr	r2, [pc, #204]	; (8017fc4 <HAL_DAC_MspInit+0xec>)
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d15f      	bne.n	8017fba <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017efa:	2300      	movs	r3, #0
 8017efc:	613b      	str	r3, [r7, #16]
 8017efe:	4b32      	ldr	r3, [pc, #200]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f02:	4a31      	ldr	r2, [pc, #196]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017f08:	6413      	str	r3, [r2, #64]	; 0x40
 8017f0a:	4b2f      	ldr	r3, [pc, #188]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017f12:	613b      	str	r3, [r7, #16]
 8017f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f16:	2300      	movs	r3, #0
 8017f18:	60fb      	str	r3, [r7, #12]
 8017f1a:	4b2b      	ldr	r3, [pc, #172]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f1e:	4a2a      	ldr	r2, [pc, #168]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f20:	f043 0301 	orr.w	r3, r3, #1
 8017f24:	6313      	str	r3, [r2, #48]	; 0x30
 8017f26:	4b28      	ldr	r3, [pc, #160]	; (8017fc8 <HAL_DAC_MspInit+0xf0>)
 8017f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f2a:	f003 0301 	and.w	r3, r3, #1
 8017f2e:	60fb      	str	r3, [r7, #12]
 8017f30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017f32:	2330      	movs	r3, #48	; 0x30
 8017f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017f36:	2303      	movs	r3, #3
 8017f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f3e:	f107 0314 	add.w	r3, r7, #20
 8017f42:	4619      	mov	r1, r3
 8017f44:	4821      	ldr	r0, [pc, #132]	; (8017fcc <HAL_DAC_MspInit+0xf4>)
 8017f46:	f001 fcb9 	bl	80198bc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017f4a:	4b21      	ldr	r3, [pc, #132]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f4c:	4a21      	ldr	r2, [pc, #132]	; (8017fd4 <HAL_DAC_MspInit+0xfc>)
 8017f4e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017f50:	4b1f      	ldr	r3, [pc, #124]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f52:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017f56:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017f58:	4b1d      	ldr	r3, [pc, #116]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f5a:	2240      	movs	r2, #64	; 0x40
 8017f5c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017f5e:	4b1c      	ldr	r3, [pc, #112]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f60:	2200      	movs	r2, #0
 8017f62:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017f64:	4b1a      	ldr	r3, [pc, #104]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017f6a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017f6c:	4b18      	ldr	r3, [pc, #96]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017f72:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017f74:	4b16      	ldr	r3, [pc, #88]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017f7a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017f7c:	4b14      	ldr	r3, [pc, #80]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f7e:	2200      	movs	r2, #0
 8017f80:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017f82:	4b13      	ldr	r3, [pc, #76]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f84:	2200      	movs	r2, #0
 8017f86:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017f88:	4b11      	ldr	r3, [pc, #68]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017f8e:	4810      	ldr	r0, [pc, #64]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017f90:	f000 fea0 	bl	8018cd4 <HAL_DMA_Init>
 8017f94:	4603      	mov	r3, r0
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d001      	beq.n	8017f9e <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017f9a:	f7ff fec9 	bl	8017d30 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	4a0b      	ldr	r2, [pc, #44]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017fa2:	609a      	str	r2, [r3, #8]
 8017fa4:	4a0a      	ldr	r2, [pc, #40]	; (8017fd0 <HAL_DAC_MspInit+0xf8>)
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017faa:	2200      	movs	r2, #0
 8017fac:	2100      	movs	r1, #0
 8017fae:	2036      	movs	r0, #54	; 0x36
 8017fb0:	f000 fdc3 	bl	8018b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017fb4:	2036      	movs	r0, #54	; 0x36
 8017fb6:	f000 fddc 	bl	8018b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017fba:	bf00      	nop
 8017fbc:	3728      	adds	r7, #40	; 0x28
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	40007400 	.word	0x40007400
 8017fc8:	40023800 	.word	0x40023800
 8017fcc:	40020000 	.word	0x40020000
 8017fd0:	20006a18 	.word	0x20006a18
 8017fd4:	40026088 	.word	0x40026088

08017fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b08c      	sub	sp, #48	; 0x30
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017fe0:	f107 031c 	add.w	r3, r7, #28
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	601a      	str	r2, [r3, #0]
 8017fe8:	605a      	str	r2, [r3, #4]
 8017fea:	609a      	str	r2, [r3, #8]
 8017fec:	60da      	str	r2, [r3, #12]
 8017fee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	4a3a      	ldr	r2, [pc, #232]	; (80180e0 <HAL_SPI_MspInit+0x108>)
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d135      	bne.n	8018066 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	61bb      	str	r3, [r7, #24]
 8017ffe:	4b39      	ldr	r3, [pc, #228]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018002:	4a38      	ldr	r2, [pc, #224]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018008:	6413      	str	r3, [r2, #64]	; 0x40
 801800a:	4b36      	ldr	r3, [pc, #216]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 801800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801800e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018012:	61bb      	str	r3, [r7, #24]
 8018014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018016:	2300      	movs	r3, #0
 8018018:	617b      	str	r3, [r7, #20]
 801801a:	4b32      	ldr	r3, [pc, #200]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 801801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801801e:	4a31      	ldr	r2, [pc, #196]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018020:	f043 0302 	orr.w	r3, r3, #2
 8018024:	6313      	str	r3, [r2, #48]	; 0x30
 8018026:	4b2f      	ldr	r3, [pc, #188]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801802a:	f003 0302 	and.w	r3, r3, #2
 801802e:	617b      	str	r3, [r7, #20]
 8018030:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8018032:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8018036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018038:	2302      	movs	r3, #2
 801803a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801803c:	2300      	movs	r3, #0
 801803e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018040:	2303      	movs	r3, #3
 8018042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8018044:	2305      	movs	r3, #5
 8018046:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018048:	f107 031c 	add.w	r3, r7, #28
 801804c:	4619      	mov	r1, r3
 801804e:	4826      	ldr	r0, [pc, #152]	; (80180e8 <HAL_SPI_MspInit+0x110>)
 8018050:	f001 fc34 	bl	80198bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8018054:	2200      	movs	r2, #0
 8018056:	2101      	movs	r1, #1
 8018058:	2024      	movs	r0, #36	; 0x24
 801805a:	f000 fd6e 	bl	8018b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801805e:	2024      	movs	r0, #36	; 0x24
 8018060:	f000 fd87 	bl	8018b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8018064:	e038      	b.n	80180d8 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	4a20      	ldr	r2, [pc, #128]	; (80180ec <HAL_SPI_MspInit+0x114>)
 801806c:	4293      	cmp	r3, r2
 801806e:	d133      	bne.n	80180d8 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8018070:	2300      	movs	r3, #0
 8018072:	613b      	str	r3, [r7, #16]
 8018074:	4b1b      	ldr	r3, [pc, #108]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018078:	4a1a      	ldr	r2, [pc, #104]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 801807a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801807e:	6413      	str	r3, [r2, #64]	; 0x40
 8018080:	4b18      	ldr	r3, [pc, #96]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018088:	613b      	str	r3, [r7, #16]
 801808a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801808c:	2300      	movs	r3, #0
 801808e:	60fb      	str	r3, [r7, #12]
 8018090:	4b14      	ldr	r3, [pc, #80]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018094:	4a13      	ldr	r2, [pc, #76]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 8018096:	f043 0302 	orr.w	r3, r3, #2
 801809a:	6313      	str	r3, [r2, #48]	; 0x30
 801809c:	4b11      	ldr	r3, [pc, #68]	; (80180e4 <HAL_SPI_MspInit+0x10c>)
 801809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180a0:	f003 0302 	and.w	r3, r3, #2
 80180a4:	60fb      	str	r3, [r7, #12]
 80180a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 80180a8:	2338      	movs	r3, #56	; 0x38
 80180aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180ac:	2302      	movs	r3, #2
 80180ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180b0:	2300      	movs	r3, #0
 80180b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80180b4:	2303      	movs	r3, #3
 80180b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80180b8:	2306      	movs	r3, #6
 80180ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80180bc:	f107 031c 	add.w	r3, r7, #28
 80180c0:	4619      	mov	r1, r3
 80180c2:	4809      	ldr	r0, [pc, #36]	; (80180e8 <HAL_SPI_MspInit+0x110>)
 80180c4:	f001 fbfa 	bl	80198bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80180c8:	2200      	movs	r2, #0
 80180ca:	2101      	movs	r1, #1
 80180cc:	2033      	movs	r0, #51	; 0x33
 80180ce:	f000 fd34 	bl	8018b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80180d2:	2033      	movs	r0, #51	; 0x33
 80180d4:	f000 fd4d 	bl	8018b72 <HAL_NVIC_EnableIRQ>
}
 80180d8:	bf00      	nop
 80180da:	3730      	adds	r7, #48	; 0x30
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	40003800 	.word	0x40003800
 80180e4:	40023800 	.word	0x40023800
 80180e8:	40020400 	.word	0x40020400
 80180ec:	40003c00 	.word	0x40003c00

080180f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b086      	sub	sp, #24
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	4a2c      	ldr	r2, [pc, #176]	; (80181b0 <HAL_TIM_Base_MspInit+0xc0>)
 80180fe:	4293      	cmp	r3, r2
 8018100:	d10e      	bne.n	8018120 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8018102:	2300      	movs	r3, #0
 8018104:	617b      	str	r3, [r7, #20]
 8018106:	4b2b      	ldr	r3, [pc, #172]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801810a:	4a2a      	ldr	r2, [pc, #168]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 801810c:	f043 0301 	orr.w	r3, r3, #1
 8018110:	6453      	str	r3, [r2, #68]	; 0x44
 8018112:	4b28      	ldr	r3, [pc, #160]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018116:	f003 0301 	and.w	r3, r3, #1
 801811a:	617b      	str	r3, [r7, #20]
 801811c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 801811e:	e042      	b.n	80181a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	4a24      	ldr	r2, [pc, #144]	; (80181b8 <HAL_TIM_Base_MspInit+0xc8>)
 8018126:	4293      	cmp	r3, r2
 8018128:	d116      	bne.n	8018158 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801812a:	2300      	movs	r3, #0
 801812c:	613b      	str	r3, [r7, #16]
 801812e:	4b21      	ldr	r3, [pc, #132]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018132:	4a20      	ldr	r2, [pc, #128]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018134:	f043 0302 	orr.w	r3, r3, #2
 8018138:	6413      	str	r3, [r2, #64]	; 0x40
 801813a:	4b1e      	ldr	r3, [pc, #120]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 801813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801813e:	f003 0302 	and.w	r3, r3, #2
 8018142:	613b      	str	r3, [r7, #16]
 8018144:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8018146:	2200      	movs	r2, #0
 8018148:	2100      	movs	r1, #0
 801814a:	201d      	movs	r0, #29
 801814c:	f000 fcf5 	bl	8018b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018150:	201d      	movs	r0, #29
 8018152:	f000 fd0e 	bl	8018b72 <HAL_NVIC_EnableIRQ>
}
 8018156:	e026      	b.n	80181a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	4a17      	ldr	r2, [pc, #92]	; (80181bc <HAL_TIM_Base_MspInit+0xcc>)
 801815e:	4293      	cmp	r3, r2
 8018160:	d10e      	bne.n	8018180 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8018162:	2300      	movs	r3, #0
 8018164:	60fb      	str	r3, [r7, #12]
 8018166:	4b13      	ldr	r3, [pc, #76]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801816a:	4a12      	ldr	r2, [pc, #72]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 801816c:	f043 0308 	orr.w	r3, r3, #8
 8018170:	6413      	str	r3, [r2, #64]	; 0x40
 8018172:	4b10      	ldr	r3, [pc, #64]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018176:	f003 0308 	and.w	r3, r3, #8
 801817a:	60fb      	str	r3, [r7, #12]
 801817c:	68fb      	ldr	r3, [r7, #12]
}
 801817e:	e012      	b.n	80181a6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4a0e      	ldr	r2, [pc, #56]	; (80181c0 <HAL_TIM_Base_MspInit+0xd0>)
 8018186:	4293      	cmp	r3, r2
 8018188:	d10d      	bne.n	80181a6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801818a:	2300      	movs	r3, #0
 801818c:	60bb      	str	r3, [r7, #8]
 801818e:	4b09      	ldr	r3, [pc, #36]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018192:	4a08      	ldr	r2, [pc, #32]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 8018194:	f043 0320 	orr.w	r3, r3, #32
 8018198:	6413      	str	r3, [r2, #64]	; 0x40
 801819a:	4b06      	ldr	r3, [pc, #24]	; (80181b4 <HAL_TIM_Base_MspInit+0xc4>)
 801819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801819e:	f003 0320 	and.w	r3, r3, #32
 80181a2:	60bb      	str	r3, [r7, #8]
 80181a4:	68bb      	ldr	r3, [r7, #8]
}
 80181a6:	bf00      	nop
 80181a8:	3718      	adds	r7, #24
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
 80181ae:	bf00      	nop
 80181b0:	40010000 	.word	0x40010000
 80181b4:	40023800 	.word	0x40023800
 80181b8:	40000400 	.word	0x40000400
 80181bc:	40000c00 	.word	0x40000c00
 80181c0:	40001400 	.word	0x40001400

080181c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80181c4:	b480      	push	{r7}
 80181c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80181c8:	e7fe      	b.n	80181c8 <NMI_Handler+0x4>

080181ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80181ca:	b480      	push	{r7}
 80181cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80181ce:	e7fe      	b.n	80181ce <HardFault_Handler+0x4>

080181d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80181d0:	b480      	push	{r7}
 80181d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80181d4:	e7fe      	b.n	80181d4 <MemManage_Handler+0x4>

080181d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80181d6:	b480      	push	{r7}
 80181d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80181da:	e7fe      	b.n	80181da <BusFault_Handler+0x4>

080181dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80181dc:	b480      	push	{r7}
 80181de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80181e0:	e7fe      	b.n	80181e0 <UsageFault_Handler+0x4>

080181e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80181e2:	b480      	push	{r7}
 80181e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80181e6:	bf00      	nop
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr

080181f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80181f0:	b480      	push	{r7}
 80181f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80181f4:	bf00      	nop
 80181f6:	46bd      	mov	sp, r7
 80181f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fc:	4770      	bx	lr

080181fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80181fe:	b480      	push	{r7}
 8018200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018202:	bf00      	nop
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018210:	f000 f902 	bl	8018418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018214:	bf00      	nop
 8018216:	bd80      	pop	{r7, pc}

08018218 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 801821c:	4802      	ldr	r0, [pc, #8]	; (8018228 <DMA1_Stream5_IRQHandler+0x10>)
 801821e:	f000 fe29 	bl	8018e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8018222:	bf00      	nop
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	20006a18 	.word	0x20006a18

0801822c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8018230:	4802      	ldr	r0, [pc, #8]	; (801823c <TIM3_IRQHandler+0x10>)
 8018232:	f004 feff 	bl	801d034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8018236:	bf00      	nop
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	20006978 	.word	0x20006978

08018240 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018244:	4802      	ldr	r0, [pc, #8]	; (8018250 <SPI2_IRQHandler+0x10>)
 8018246:	f004 fbd9 	bl	801c9fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801824a:	bf00      	nop
 801824c:	bd80      	pop	{r7, pc}
 801824e:	bf00      	nop
 8018250:	20006890 	.word	0x20006890

08018254 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8018258:	4802      	ldr	r0, [pc, #8]	; (8018264 <SPI3_IRQHandler+0x10>)
 801825a:	f004 fbcf 	bl	801c9fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 801825e:	bf00      	nop
 8018260:	bd80      	pop	{r7, pc}
 8018262:	bf00      	nop
 8018264:	200069c0 	.word	0x200069c0

08018268 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8018268:	b580      	push	{r7, lr}
 801826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801826c:	4802      	ldr	r0, [pc, #8]	; (8018278 <DMA2_Stream0_IRQHandler+0x10>)
 801826e:	f000 fe01 	bl	8018e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8018272:	bf00      	nop
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	20006b0c 	.word	0x20006b0c

0801827c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018280:	4802      	ldr	r0, [pc, #8]	; (801828c <OTG_FS_IRQHandler+0x10>)
 8018282:	f001 fe37 	bl	8019ef4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8018286:	bf00      	nop
 8018288:	bd80      	pop	{r7, pc}
 801828a:	bf00      	nop
 801828c:	2000710c 	.word	0x2000710c

08018290 <_sbrk>:
 8018290:	b580      	push	{r7, lr}
 8018292:	b086      	sub	sp, #24
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	4a14      	ldr	r2, [pc, #80]	; (80182ec <_sbrk+0x5c>)
 801829a:	4b15      	ldr	r3, [pc, #84]	; (80182f0 <_sbrk+0x60>)
 801829c:	1ad3      	subs	r3, r2, r3
 801829e:	617b      	str	r3, [r7, #20]
 80182a0:	697b      	ldr	r3, [r7, #20]
 80182a2:	613b      	str	r3, [r7, #16]
 80182a4:	4b13      	ldr	r3, [pc, #76]	; (80182f4 <_sbrk+0x64>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d102      	bne.n	80182b2 <_sbrk+0x22>
 80182ac:	4b11      	ldr	r3, [pc, #68]	; (80182f4 <_sbrk+0x64>)
 80182ae:	4a12      	ldr	r2, [pc, #72]	; (80182f8 <_sbrk+0x68>)
 80182b0:	601a      	str	r2, [r3, #0]
 80182b2:	4b10      	ldr	r3, [pc, #64]	; (80182f4 <_sbrk+0x64>)
 80182b4:	681a      	ldr	r2, [r3, #0]
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	4413      	add	r3, r2
 80182ba:	693a      	ldr	r2, [r7, #16]
 80182bc:	429a      	cmp	r2, r3
 80182be:	d207      	bcs.n	80182d0 <_sbrk+0x40>
 80182c0:	f00a fcb6 	bl	8022c30 <__errno>
 80182c4:	4603      	mov	r3, r0
 80182c6:	220c      	movs	r2, #12
 80182c8:	601a      	str	r2, [r3, #0]
 80182ca:	f04f 33ff 	mov.w	r3, #4294967295
 80182ce:	e009      	b.n	80182e4 <_sbrk+0x54>
 80182d0:	4b08      	ldr	r3, [pc, #32]	; (80182f4 <_sbrk+0x64>)
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	60fb      	str	r3, [r7, #12]
 80182d6:	4b07      	ldr	r3, [pc, #28]	; (80182f4 <_sbrk+0x64>)
 80182d8:	681a      	ldr	r2, [r3, #0]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	4413      	add	r3, r2
 80182de:	4a05      	ldr	r2, [pc, #20]	; (80182f4 <_sbrk+0x64>)
 80182e0:	6013      	str	r3, [r2, #0]
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	4618      	mov	r0, r3
 80182e6:	3718      	adds	r7, #24
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	20020000 	.word	0x20020000
 80182f0:	00000600 	.word	0x00000600
 80182f4:	200007a8 	.word	0x200007a8
 80182f8:	20007528 	.word	0x20007528

080182fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80182fc:	b480      	push	{r7}
 80182fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018300:	4b06      	ldr	r3, [pc, #24]	; (801831c <SystemInit+0x20>)
 8018302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018306:	4a05      	ldr	r2, [pc, #20]	; (801831c <SystemInit+0x20>)
 8018308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801830c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018310:	bf00      	nop
 8018312:	46bd      	mov	sp, r7
 8018314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018318:	4770      	bx	lr
 801831a:	bf00      	nop
 801831c:	e000ed00 	.word	0xe000ed00

08018320 <Reset_Handler>:
 8018320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018358 <LoopFillZerobss+0x12>
 8018324:	480d      	ldr	r0, [pc, #52]	; (801835c <LoopFillZerobss+0x16>)
 8018326:	490e      	ldr	r1, [pc, #56]	; (8018360 <LoopFillZerobss+0x1a>)
 8018328:	4a0e      	ldr	r2, [pc, #56]	; (8018364 <LoopFillZerobss+0x1e>)
 801832a:	2300      	movs	r3, #0
 801832c:	e002      	b.n	8018334 <LoopCopyDataInit>

0801832e <CopyDataInit>:
 801832e:	58d4      	ldr	r4, [r2, r3]
 8018330:	50c4      	str	r4, [r0, r3]
 8018332:	3304      	adds	r3, #4

08018334 <LoopCopyDataInit>:
 8018334:	18c4      	adds	r4, r0, r3
 8018336:	428c      	cmp	r4, r1
 8018338:	d3f9      	bcc.n	801832e <CopyDataInit>
 801833a:	4a0b      	ldr	r2, [pc, #44]	; (8018368 <LoopFillZerobss+0x22>)
 801833c:	4c0b      	ldr	r4, [pc, #44]	; (801836c <LoopFillZerobss+0x26>)
 801833e:	2300      	movs	r3, #0
 8018340:	e001      	b.n	8018346 <LoopFillZerobss>

08018342 <FillZerobss>:
 8018342:	6013      	str	r3, [r2, #0]
 8018344:	3204      	adds	r2, #4

08018346 <LoopFillZerobss>:
 8018346:	42a2      	cmp	r2, r4
 8018348:	d3fb      	bcc.n	8018342 <FillZerobss>
 801834a:	f7ff ffd7 	bl	80182fc <SystemInit>
 801834e:	f00a fc75 	bl	8022c3c <__libc_init_array>
 8018352:	f7fe f81f 	bl	8016394 <main>
 8018356:	4770      	bx	lr
 8018358:	20020000 	.word	0x20020000
 801835c:	20000000 	.word	0x20000000
 8018360:	20000760 	.word	0x20000760
 8018364:	08022e88 	.word	0x08022e88
 8018368:	20000760 	.word	0x20000760
 801836c:	20007524 	.word	0x20007524

08018370 <ADC_IRQHandler>:
 8018370:	e7fe      	b.n	8018370 <ADC_IRQHandler>
	...

08018374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8018378:	4b0e      	ldr	r3, [pc, #56]	; (80183b4 <HAL_Init+0x40>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a0d      	ldr	r2, [pc, #52]	; (80183b4 <HAL_Init+0x40>)
 801837e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018384:	4b0b      	ldr	r3, [pc, #44]	; (80183b4 <HAL_Init+0x40>)
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	4a0a      	ldr	r2, [pc, #40]	; (80183b4 <HAL_Init+0x40>)
 801838a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801838e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018390:	4b08      	ldr	r3, [pc, #32]	; (80183b4 <HAL_Init+0x40>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4a07      	ldr	r2, [pc, #28]	; (80183b4 <HAL_Init+0x40>)
 8018396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801839a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801839c:	2003      	movs	r0, #3
 801839e:	f000 fbc1 	bl	8018b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80183a2:	2000      	movs	r0, #0
 80183a4:	f000 f808 	bl	80183b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80183a8:	f7ff fcc8 	bl	8017d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80183ac:	2300      	movs	r3, #0
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	40023c00 	.word	0x40023c00

080183b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80183c0:	4b12      	ldr	r3, [pc, #72]	; (801840c <HAL_InitTick+0x54>)
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	4b12      	ldr	r3, [pc, #72]	; (8018410 <HAL_InitTick+0x58>)
 80183c6:	781b      	ldrb	r3, [r3, #0]
 80183c8:	4619      	mov	r1, r3
 80183ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80183ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80183d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80183d6:	4618      	mov	r0, r3
 80183d8:	f000 fbd9 	bl	8018b8e <HAL_SYSTICK_Config>
 80183dc:	4603      	mov	r3, r0
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d001      	beq.n	80183e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80183e2:	2301      	movs	r3, #1
 80183e4:	e00e      	b.n	8018404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	2b0f      	cmp	r3, #15
 80183ea:	d80a      	bhi.n	8018402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80183ec:	2200      	movs	r2, #0
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	f04f 30ff 	mov.w	r0, #4294967295
 80183f4:	f000 fba1 	bl	8018b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80183f8:	4a06      	ldr	r2, [pc, #24]	; (8018414 <HAL_InitTick+0x5c>)
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80183fe:	2300      	movs	r3, #0
 8018400:	e000      	b.n	8018404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018402:	2301      	movs	r3, #1
}
 8018404:	4618      	mov	r0, r3
 8018406:	3708      	adds	r7, #8
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}
 801840c:	20000588 	.word	0x20000588
 8018410:	20000590 	.word	0x20000590
 8018414:	2000058c 	.word	0x2000058c

08018418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018418:	b480      	push	{r7}
 801841a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801841c:	4b06      	ldr	r3, [pc, #24]	; (8018438 <HAL_IncTick+0x20>)
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	461a      	mov	r2, r3
 8018422:	4b06      	ldr	r3, [pc, #24]	; (801843c <HAL_IncTick+0x24>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	4413      	add	r3, r2
 8018428:	4a04      	ldr	r2, [pc, #16]	; (801843c <HAL_IncTick+0x24>)
 801842a:	6013      	str	r3, [r2, #0]
}
 801842c:	bf00      	nop
 801842e:	46bd      	mov	sp, r7
 8018430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018434:	4770      	bx	lr
 8018436:	bf00      	nop
 8018438:	20000590 	.word	0x20000590
 801843c:	20006c18 	.word	0x20006c18

08018440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018440:	b480      	push	{r7}
 8018442:	af00      	add	r7, sp, #0
  return uwTick;
 8018444:	4b03      	ldr	r3, [pc, #12]	; (8018454 <HAL_GetTick+0x14>)
 8018446:	681b      	ldr	r3, [r3, #0]
}
 8018448:	4618      	mov	r0, r3
 801844a:	46bd      	mov	sp, r7
 801844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018450:	4770      	bx	lr
 8018452:	bf00      	nop
 8018454:	20006c18 	.word	0x20006c18

08018458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b084      	sub	sp, #16
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018460:	f7ff ffee 	bl	8018440 <HAL_GetTick>
 8018464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018470:	d005      	beq.n	801847e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018472:	4b0a      	ldr	r3, [pc, #40]	; (801849c <HAL_Delay+0x44>)
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	461a      	mov	r2, r3
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	4413      	add	r3, r2
 801847c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801847e:	bf00      	nop
 8018480:	f7ff ffde 	bl	8018440 <HAL_GetTick>
 8018484:	4602      	mov	r2, r0
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	1ad3      	subs	r3, r2, r3
 801848a:	68fa      	ldr	r2, [r7, #12]
 801848c:	429a      	cmp	r2, r3
 801848e:	d8f7      	bhi.n	8018480 <HAL_Delay+0x28>
  {
  }
}
 8018490:	bf00      	nop
 8018492:	bf00      	nop
 8018494:	3710      	adds	r7, #16
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	20000590 	.word	0x20000590

080184a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b084      	sub	sp, #16
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80184a8:	2300      	movs	r3, #0
 80184aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d101      	bne.n	80184b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80184b2:	2301      	movs	r3, #1
 80184b4:	e033      	b.n	801851e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d109      	bne.n	80184d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f7ff fc64 	bl	8017d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	2200      	movs	r2, #0
 80184c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2200      	movs	r2, #0
 80184ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184d6:	f003 0310 	and.w	r3, r3, #16
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d118      	bne.n	8018510 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80184e6:	f023 0302 	bic.w	r3, r3, #2
 80184ea:	f043 0202 	orr.w	r2, r3, #2
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80184f2:	6878      	ldr	r0, [r7, #4]
 80184f4:	f000 f94a 	bl	801878c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	2200      	movs	r2, #0
 80184fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018502:	f023 0303 	bic.w	r3, r3, #3
 8018506:	f043 0201 	orr.w	r2, r3, #1
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	641a      	str	r2, [r3, #64]	; 0x40
 801850e:	e001      	b.n	8018514 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8018510:	2301      	movs	r3, #1
 8018512:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2200      	movs	r2, #0
 8018518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801851c:	7bfb      	ldrb	r3, [r7, #15]
}
 801851e:	4618      	mov	r0, r3
 8018520:	3710      	adds	r7, #16
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
	...

08018528 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8018532:	2300      	movs	r3, #0
 8018534:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801853c:	2b01      	cmp	r3, #1
 801853e:	d101      	bne.n	8018544 <HAL_ADC_ConfigChannel+0x1c>
 8018540:	2302      	movs	r3, #2
 8018542:	e113      	b.n	801876c <HAL_ADC_ConfigChannel+0x244>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2201      	movs	r2, #1
 8018548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	2b09      	cmp	r3, #9
 8018552:	d925      	bls.n	80185a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	68d9      	ldr	r1, [r3, #12]
 801855a:	683b      	ldr	r3, [r7, #0]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	b29b      	uxth	r3, r3
 8018560:	461a      	mov	r2, r3
 8018562:	4613      	mov	r3, r2
 8018564:	005b      	lsls	r3, r3, #1
 8018566:	4413      	add	r3, r2
 8018568:	3b1e      	subs	r3, #30
 801856a:	2207      	movs	r2, #7
 801856c:	fa02 f303 	lsl.w	r3, r2, r3
 8018570:	43da      	mvns	r2, r3
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	400a      	ands	r2, r1
 8018578:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	68d9      	ldr	r1, [r3, #12]
 8018580:	683b      	ldr	r3, [r7, #0]
 8018582:	689a      	ldr	r2, [r3, #8]
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	b29b      	uxth	r3, r3
 801858a:	4618      	mov	r0, r3
 801858c:	4603      	mov	r3, r0
 801858e:	005b      	lsls	r3, r3, #1
 8018590:	4403      	add	r3, r0
 8018592:	3b1e      	subs	r3, #30
 8018594:	409a      	lsls	r2, r3
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	430a      	orrs	r2, r1
 801859c:	60da      	str	r2, [r3, #12]
 801859e:	e022      	b.n	80185e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	6919      	ldr	r1, [r3, #16]
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	461a      	mov	r2, r3
 80185ae:	4613      	mov	r3, r2
 80185b0:	005b      	lsls	r3, r3, #1
 80185b2:	4413      	add	r3, r2
 80185b4:	2207      	movs	r2, #7
 80185b6:	fa02 f303 	lsl.w	r3, r2, r3
 80185ba:	43da      	mvns	r2, r3
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	400a      	ands	r2, r1
 80185c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	6919      	ldr	r1, [r3, #16]
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	689a      	ldr	r2, [r3, #8]
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	4618      	mov	r0, r3
 80185d6:	4603      	mov	r3, r0
 80185d8:	005b      	lsls	r3, r3, #1
 80185da:	4403      	add	r3, r0
 80185dc:	409a      	lsls	r2, r3
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	430a      	orrs	r2, r1
 80185e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	2b06      	cmp	r3, #6
 80185ec:	d824      	bhi.n	8018638 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	685a      	ldr	r2, [r3, #4]
 80185f8:	4613      	mov	r3, r2
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	4413      	add	r3, r2
 80185fe:	3b05      	subs	r3, #5
 8018600:	221f      	movs	r2, #31
 8018602:	fa02 f303 	lsl.w	r3, r2, r3
 8018606:	43da      	mvns	r2, r3
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	400a      	ands	r2, r1
 801860e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018616:	683b      	ldr	r3, [r7, #0]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	b29b      	uxth	r3, r3
 801861c:	4618      	mov	r0, r3
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	685a      	ldr	r2, [r3, #4]
 8018622:	4613      	mov	r3, r2
 8018624:	009b      	lsls	r3, r3, #2
 8018626:	4413      	add	r3, r2
 8018628:	3b05      	subs	r3, #5
 801862a:	fa00 f203 	lsl.w	r2, r0, r3
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	430a      	orrs	r2, r1
 8018634:	635a      	str	r2, [r3, #52]	; 0x34
 8018636:	e04c      	b.n	80186d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	2b0c      	cmp	r3, #12
 801863e:	d824      	bhi.n	801868a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	685a      	ldr	r2, [r3, #4]
 801864a:	4613      	mov	r3, r2
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	4413      	add	r3, r2
 8018650:	3b23      	subs	r3, #35	; 0x23
 8018652:	221f      	movs	r2, #31
 8018654:	fa02 f303 	lsl.w	r3, r2, r3
 8018658:	43da      	mvns	r2, r3
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	400a      	ands	r2, r1
 8018660:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	b29b      	uxth	r3, r3
 801866e:	4618      	mov	r0, r3
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	685a      	ldr	r2, [r3, #4]
 8018674:	4613      	mov	r3, r2
 8018676:	009b      	lsls	r3, r3, #2
 8018678:	4413      	add	r3, r2
 801867a:	3b23      	subs	r3, #35	; 0x23
 801867c:	fa00 f203 	lsl.w	r2, r0, r3
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	430a      	orrs	r2, r1
 8018686:	631a      	str	r2, [r3, #48]	; 0x30
 8018688:	e023      	b.n	80186d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	685a      	ldr	r2, [r3, #4]
 8018694:	4613      	mov	r3, r2
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	4413      	add	r3, r2
 801869a:	3b41      	subs	r3, #65	; 0x41
 801869c:	221f      	movs	r2, #31
 801869e:	fa02 f303 	lsl.w	r3, r2, r3
 80186a2:	43da      	mvns	r2, r3
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	400a      	ands	r2, r1
 80186aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	4618      	mov	r0, r3
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	685a      	ldr	r2, [r3, #4]
 80186be:	4613      	mov	r3, r2
 80186c0:	009b      	lsls	r3, r3, #2
 80186c2:	4413      	add	r3, r2
 80186c4:	3b41      	subs	r3, #65	; 0x41
 80186c6:	fa00 f203 	lsl.w	r2, r0, r3
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	430a      	orrs	r2, r1
 80186d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80186d2:	4b29      	ldr	r3, [pc, #164]	; (8018778 <HAL_ADC_ConfigChannel+0x250>)
 80186d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	4a28      	ldr	r2, [pc, #160]	; (801877c <HAL_ADC_ConfigChannel+0x254>)
 80186dc:	4293      	cmp	r3, r2
 80186de:	d10f      	bne.n	8018700 <HAL_ADC_ConfigChannel+0x1d8>
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	2b12      	cmp	r3, #18
 80186e6:	d10b      	bne.n	8018700 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	685b      	ldr	r3, [r3, #4]
 80186ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	4a1d      	ldr	r2, [pc, #116]	; (801877c <HAL_ADC_ConfigChannel+0x254>)
 8018706:	4293      	cmp	r3, r2
 8018708:	d12b      	bne.n	8018762 <HAL_ADC_ConfigChannel+0x23a>
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	4a1c      	ldr	r2, [pc, #112]	; (8018780 <HAL_ADC_ConfigChannel+0x258>)
 8018710:	4293      	cmp	r3, r2
 8018712:	d003      	beq.n	801871c <HAL_ADC_ConfigChannel+0x1f4>
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	2b11      	cmp	r3, #17
 801871a:	d122      	bne.n	8018762 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	4a11      	ldr	r2, [pc, #68]	; (8018780 <HAL_ADC_ConfigChannel+0x258>)
 801873a:	4293      	cmp	r3, r2
 801873c:	d111      	bne.n	8018762 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801873e:	4b11      	ldr	r3, [pc, #68]	; (8018784 <HAL_ADC_ConfigChannel+0x25c>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	4a11      	ldr	r2, [pc, #68]	; (8018788 <HAL_ADC_ConfigChannel+0x260>)
 8018744:	fba2 2303 	umull	r2, r3, r2, r3
 8018748:	0c9a      	lsrs	r2, r3, #18
 801874a:	4613      	mov	r3, r2
 801874c:	009b      	lsls	r3, r3, #2
 801874e:	4413      	add	r3, r2
 8018750:	005b      	lsls	r3, r3, #1
 8018752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018754:	e002      	b.n	801875c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	3b01      	subs	r3, #1
 801875a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d1f9      	bne.n	8018756 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2200      	movs	r2, #0
 8018766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801876a:	2300      	movs	r3, #0
}
 801876c:	4618      	mov	r0, r3
 801876e:	3714      	adds	r7, #20
 8018770:	46bd      	mov	sp, r7
 8018772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018776:	4770      	bx	lr
 8018778:	40012300 	.word	0x40012300
 801877c:	40012000 	.word	0x40012000
 8018780:	10000012 	.word	0x10000012
 8018784:	20000588 	.word	0x20000588
 8018788:	431bde83 	.word	0x431bde83

0801878c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801878c:	b480      	push	{r7}
 801878e:	b085      	sub	sp, #20
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018794:	4b79      	ldr	r3, [pc, #484]	; (801897c <ADC_Init+0x1f0>)
 8018796:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	685b      	ldr	r3, [r3, #4]
 801879c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	685a      	ldr	r2, [r3, #4]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	685b      	ldr	r3, [r3, #4]
 80187ac:	431a      	orrs	r2, r3
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	685a      	ldr	r2, [r3, #4]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80187c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	6859      	ldr	r1, [r3, #4]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	691b      	ldr	r3, [r3, #16]
 80187cc:	021a      	lsls	r2, r3, #8
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	430a      	orrs	r2, r1
 80187d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	685a      	ldr	r2, [r3, #4]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80187e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	6859      	ldr	r1, [r3, #4]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	689a      	ldr	r2, [r3, #8]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	430a      	orrs	r2, r1
 80187f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	689a      	ldr	r2, [r3, #8]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	6899      	ldr	r1, [r3, #8]
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	68da      	ldr	r2, [r3, #12]
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	430a      	orrs	r2, r1
 8018818:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801881e:	4a58      	ldr	r2, [pc, #352]	; (8018980 <ADC_Init+0x1f4>)
 8018820:	4293      	cmp	r3, r2
 8018822:	d022      	beq.n	801886a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	689a      	ldr	r2, [r3, #8]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018832:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	6899      	ldr	r1, [r3, #8]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	430a      	orrs	r2, r1
 8018844:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	689a      	ldr	r2, [r3, #8]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	6899      	ldr	r1, [r3, #8]
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	430a      	orrs	r2, r1
 8018866:	609a      	str	r2, [r3, #8]
 8018868:	e00f      	b.n	801888a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	689a      	ldr	r2, [r3, #8]
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	689a      	ldr	r2, [r3, #8]
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018888:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	689a      	ldr	r2, [r3, #8]
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f022 0202 	bic.w	r2, r2, #2
 8018898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	6899      	ldr	r1, [r3, #8]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	7e1b      	ldrb	r3, [r3, #24]
 80188a4:	005a      	lsls	r2, r3, #1
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	430a      	orrs	r2, r1
 80188ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d01b      	beq.n	80188f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	685a      	ldr	r2, [r3, #4]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80188c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	685a      	ldr	r2, [r3, #4]
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80188d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	6859      	ldr	r1, [r3, #4]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188e2:	3b01      	subs	r3, #1
 80188e4:	035a      	lsls	r2, r3, #13
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	430a      	orrs	r2, r1
 80188ec:	605a      	str	r2, [r3, #4]
 80188ee:	e007      	b.n	8018900 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	685a      	ldr	r2, [r3, #4]
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80188fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801890e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	69db      	ldr	r3, [r3, #28]
 801891a:	3b01      	subs	r3, #1
 801891c:	051a      	lsls	r2, r3, #20
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	430a      	orrs	r2, r1
 8018924:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	689a      	ldr	r2, [r3, #8]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	6899      	ldr	r1, [r3, #8]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018942:	025a      	lsls	r2, r3, #9
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	430a      	orrs	r2, r1
 801894a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	689a      	ldr	r2, [r3, #8]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801895a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	6899      	ldr	r1, [r3, #8]
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	695b      	ldr	r3, [r3, #20]
 8018966:	029a      	lsls	r2, r3, #10
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	430a      	orrs	r2, r1
 801896e:	609a      	str	r2, [r3, #8]
}
 8018970:	bf00      	nop
 8018972:	3714      	adds	r7, #20
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr
 801897c:	40012300 	.word	0x40012300
 8018980:	0f000001 	.word	0x0f000001

08018984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018984:	b480      	push	{r7}
 8018986:	b085      	sub	sp, #20
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	f003 0307 	and.w	r3, r3, #7
 8018992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018994:	4b0c      	ldr	r3, [pc, #48]	; (80189c8 <__NVIC_SetPriorityGrouping+0x44>)
 8018996:	68db      	ldr	r3, [r3, #12]
 8018998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801899a:	68ba      	ldr	r2, [r7, #8]
 801899c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80189a0:	4013      	ands	r3, r2
 80189a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80189ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80189b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80189b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80189b6:	4a04      	ldr	r2, [pc, #16]	; (80189c8 <__NVIC_SetPriorityGrouping+0x44>)
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	60d3      	str	r3, [r2, #12]
}
 80189bc:	bf00      	nop
 80189be:	3714      	adds	r7, #20
 80189c0:	46bd      	mov	sp, r7
 80189c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c6:	4770      	bx	lr
 80189c8:	e000ed00 	.word	0xe000ed00

080189cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80189cc:	b480      	push	{r7}
 80189ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80189d0:	4b04      	ldr	r3, [pc, #16]	; (80189e4 <__NVIC_GetPriorityGrouping+0x18>)
 80189d2:	68db      	ldr	r3, [r3, #12]
 80189d4:	0a1b      	lsrs	r3, r3, #8
 80189d6:	f003 0307 	and.w	r3, r3, #7
}
 80189da:	4618      	mov	r0, r3
 80189dc:	46bd      	mov	sp, r7
 80189de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e2:	4770      	bx	lr
 80189e4:	e000ed00 	.word	0xe000ed00

080189e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80189e8:	b480      	push	{r7}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	4603      	mov	r3, r0
 80189f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80189f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	db0b      	blt.n	8018a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80189fa:	79fb      	ldrb	r3, [r7, #7]
 80189fc:	f003 021f 	and.w	r2, r3, #31
 8018a00:	4907      	ldr	r1, [pc, #28]	; (8018a20 <__NVIC_EnableIRQ+0x38>)
 8018a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a06:	095b      	lsrs	r3, r3, #5
 8018a08:	2001      	movs	r0, #1
 8018a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8018a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8018a12:	bf00      	nop
 8018a14:	370c      	adds	r7, #12
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	e000e100 	.word	0xe000e100

08018a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018a24:	b480      	push	{r7}
 8018a26:	b083      	sub	sp, #12
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	6039      	str	r1, [r7, #0]
 8018a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	db0a      	blt.n	8018a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	b2da      	uxtb	r2, r3
 8018a3c:	490c      	ldr	r1, [pc, #48]	; (8018a70 <__NVIC_SetPriority+0x4c>)
 8018a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a42:	0112      	lsls	r2, r2, #4
 8018a44:	b2d2      	uxtb	r2, r2
 8018a46:	440b      	add	r3, r1
 8018a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018a4c:	e00a      	b.n	8018a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	b2da      	uxtb	r2, r3
 8018a52:	4908      	ldr	r1, [pc, #32]	; (8018a74 <__NVIC_SetPriority+0x50>)
 8018a54:	79fb      	ldrb	r3, [r7, #7]
 8018a56:	f003 030f 	and.w	r3, r3, #15
 8018a5a:	3b04      	subs	r3, #4
 8018a5c:	0112      	lsls	r2, r2, #4
 8018a5e:	b2d2      	uxtb	r2, r2
 8018a60:	440b      	add	r3, r1
 8018a62:	761a      	strb	r2, [r3, #24]
}
 8018a64:	bf00      	nop
 8018a66:	370c      	adds	r7, #12
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6e:	4770      	bx	lr
 8018a70:	e000e100 	.word	0xe000e100
 8018a74:	e000ed00 	.word	0xe000ed00

08018a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018a78:	b480      	push	{r7}
 8018a7a:	b089      	sub	sp, #36	; 0x24
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	60f8      	str	r0, [r7, #12]
 8018a80:	60b9      	str	r1, [r7, #8]
 8018a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	f003 0307 	and.w	r3, r3, #7
 8018a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018a8c:	69fb      	ldr	r3, [r7, #28]
 8018a8e:	f1c3 0307 	rsb	r3, r3, #7
 8018a92:	2b04      	cmp	r3, #4
 8018a94:	bf28      	it	cs
 8018a96:	2304      	movcs	r3, #4
 8018a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018a9a:	69fb      	ldr	r3, [r7, #28]
 8018a9c:	3304      	adds	r3, #4
 8018a9e:	2b06      	cmp	r3, #6
 8018aa0:	d902      	bls.n	8018aa8 <NVIC_EncodePriority+0x30>
 8018aa2:	69fb      	ldr	r3, [r7, #28]
 8018aa4:	3b03      	subs	r3, #3
 8018aa6:	e000      	b.n	8018aaa <NVIC_EncodePriority+0x32>
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018aac:	f04f 32ff 	mov.w	r2, #4294967295
 8018ab0:	69bb      	ldr	r3, [r7, #24]
 8018ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ab6:	43da      	mvns	r2, r3
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	401a      	ands	r2, r3
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8018aca:	43d9      	mvns	r1, r3
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018ad0:	4313      	orrs	r3, r2
         );
}
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3724      	adds	r7, #36	; 0x24
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018adc:	4770      	bx	lr
	...

08018ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	3b01      	subs	r3, #1
 8018aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018af0:	d301      	bcc.n	8018af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018af2:	2301      	movs	r3, #1
 8018af4:	e00f      	b.n	8018b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018af6:	4a0a      	ldr	r2, [pc, #40]	; (8018b20 <SysTick_Config+0x40>)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	3b01      	subs	r3, #1
 8018afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018afe:	210f      	movs	r1, #15
 8018b00:	f04f 30ff 	mov.w	r0, #4294967295
 8018b04:	f7ff ff8e 	bl	8018a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018b08:	4b05      	ldr	r3, [pc, #20]	; (8018b20 <SysTick_Config+0x40>)
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018b0e:	4b04      	ldr	r3, [pc, #16]	; (8018b20 <SysTick_Config+0x40>)
 8018b10:	2207      	movs	r2, #7
 8018b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018b14:	2300      	movs	r3, #0
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	3708      	adds	r7, #8
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	e000e010 	.word	0xe000e010

08018b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b082      	sub	sp, #8
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018b2c:	6878      	ldr	r0, [r7, #4]
 8018b2e:	f7ff ff29 	bl	8018984 <__NVIC_SetPriorityGrouping>
}
 8018b32:	bf00      	nop
 8018b34:	3708      	adds	r7, #8
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}

08018b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b086      	sub	sp, #24
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	4603      	mov	r3, r0
 8018b42:	60b9      	str	r1, [r7, #8]
 8018b44:	607a      	str	r2, [r7, #4]
 8018b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018b4c:	f7ff ff3e 	bl	80189cc <__NVIC_GetPriorityGrouping>
 8018b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018b52:	687a      	ldr	r2, [r7, #4]
 8018b54:	68b9      	ldr	r1, [r7, #8]
 8018b56:	6978      	ldr	r0, [r7, #20]
 8018b58:	f7ff ff8e 	bl	8018a78 <NVIC_EncodePriority>
 8018b5c:	4602      	mov	r2, r0
 8018b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b62:	4611      	mov	r1, r2
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7ff ff5d 	bl	8018a24 <__NVIC_SetPriority>
}
 8018b6a:	bf00      	nop
 8018b6c:	3718      	adds	r7, #24
 8018b6e:	46bd      	mov	sp, r7
 8018b70:	bd80      	pop	{r7, pc}

08018b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018b72:	b580      	push	{r7, lr}
 8018b74:	b082      	sub	sp, #8
 8018b76:	af00      	add	r7, sp, #0
 8018b78:	4603      	mov	r3, r0
 8018b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7ff ff31 	bl	80189e8 <__NVIC_EnableIRQ>
}
 8018b86:	bf00      	nop
 8018b88:	3708      	adds	r7, #8
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}

08018b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018b8e:	b580      	push	{r7, lr}
 8018b90:	b082      	sub	sp, #8
 8018b92:	af00      	add	r7, sp, #0
 8018b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f7ff ffa2 	bl	8018ae0 <SysTick_Config>
 8018b9c:	4603      	mov	r3, r0
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	3708      	adds	r7, #8
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}

08018ba6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018ba6:	b580      	push	{r7, lr}
 8018ba8:	b082      	sub	sp, #8
 8018baa:	af00      	add	r7, sp, #0
 8018bac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d101      	bne.n	8018bb8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	e014      	b.n	8018be2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	791b      	ldrb	r3, [r3, #4]
 8018bbc:	b2db      	uxtb	r3, r3
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d105      	bne.n	8018bce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f7ff f985 	bl	8017ed8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2202      	movs	r2, #2
 8018bd2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2201      	movs	r2, #1
 8018bde:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018be0:	2300      	movs	r3, #0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3708      	adds	r7, #8
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}

08018bea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018bea:	b480      	push	{r7}
 8018bec:	b087      	sub	sp, #28
 8018bee:	af00      	add	r7, sp, #0
 8018bf0:	60f8      	str	r0, [r7, #12]
 8018bf2:	60b9      	str	r1, [r7, #8]
 8018bf4:	607a      	str	r2, [r7, #4]
 8018bf6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d105      	bne.n	8018c14 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018c08:	697a      	ldr	r2, [r7, #20]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	4413      	add	r3, r2
 8018c0e:	3308      	adds	r3, #8
 8018c10:	617b      	str	r3, [r7, #20]
 8018c12:	e004      	b.n	8018c1e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018c14:	697a      	ldr	r2, [r7, #20]
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	4413      	add	r3, r2
 8018c1a:	3314      	adds	r3, #20
 8018c1c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018c1e:	697b      	ldr	r3, [r7, #20]
 8018c20:	461a      	mov	r2, r3
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018c26:	2300      	movs	r3, #0
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	371c      	adds	r7, #28
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c32:	4770      	bx	lr

08018c34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018c34:	b480      	push	{r7}
 8018c36:	b087      	sub	sp, #28
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	795b      	ldrb	r3, [r3, #5]
 8018c44:	2b01      	cmp	r3, #1
 8018c46:	d101      	bne.n	8018c4c <HAL_DAC_ConfigChannel+0x18>
 8018c48:	2302      	movs	r3, #2
 8018c4a:	e03c      	b.n	8018cc6 <HAL_DAC_ConfigChannel+0x92>
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2201      	movs	r2, #1
 8018c50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	2202      	movs	r2, #2
 8018c56:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f003 0310 	and.w	r3, r3, #16
 8018c66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8018c6e:	43db      	mvns	r3, r3
 8018c70:	697a      	ldr	r2, [r7, #20]
 8018c72:	4013      	ands	r3, r2
 8018c74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	681a      	ldr	r2, [r3, #0]
 8018c7a:	68bb      	ldr	r3, [r7, #8]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	4313      	orrs	r3, r2
 8018c80:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f003 0310 	and.w	r3, r3, #16
 8018c88:	693a      	ldr	r2, [r7, #16]
 8018c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8018c8e:	697a      	ldr	r2, [r7, #20]
 8018c90:	4313      	orrs	r3, r2
 8018c92:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	697a      	ldr	r2, [r7, #20]
 8018c9a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	6819      	ldr	r1, [r3, #0]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f003 0310 	and.w	r3, r3, #16
 8018ca8:	22c0      	movs	r2, #192	; 0xc0
 8018caa:	fa02 f303 	lsl.w	r3, r2, r3
 8018cae:	43da      	mvns	r2, r3
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	400a      	ands	r2, r1
 8018cb6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	2201      	movs	r2, #1
 8018cbc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018cc4:	2300      	movs	r3, #0
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	371c      	adds	r7, #28
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr
	...

08018cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b086      	sub	sp, #24
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018ce0:	f7ff fbae 	bl	8018440 <HAL_GetTick>
 8018ce4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d101      	bne.n	8018cf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018cec:	2301      	movs	r3, #1
 8018cee:	e099      	b.n	8018e24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	2202      	movs	r2, #2
 8018cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f022 0201 	bic.w	r2, r2, #1
 8018d0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018d10:	e00f      	b.n	8018d32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018d12:	f7ff fb95 	bl	8018440 <HAL_GetTick>
 8018d16:	4602      	mov	r2, r0
 8018d18:	693b      	ldr	r3, [r7, #16]
 8018d1a:	1ad3      	subs	r3, r2, r3
 8018d1c:	2b05      	cmp	r3, #5
 8018d1e:	d908      	bls.n	8018d32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	2220      	movs	r2, #32
 8018d24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2203      	movs	r2, #3
 8018d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018d2e:	2303      	movs	r3, #3
 8018d30:	e078      	b.n	8018e24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f003 0301 	and.w	r3, r3, #1
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d1e8      	bne.n	8018d12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018d48:	697a      	ldr	r2, [r7, #20]
 8018d4a:	4b38      	ldr	r3, [pc, #224]	; (8018e2c <HAL_DMA_Init+0x158>)
 8018d4c:	4013      	ands	r3, r2
 8018d4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	685a      	ldr	r2, [r3, #4]
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	689b      	ldr	r3, [r3, #8]
 8018d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	691b      	ldr	r3, [r3, #16]
 8018d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	699b      	ldr	r3, [r3, #24]
 8018d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6a1b      	ldr	r3, [r3, #32]
 8018d7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018d7e:	697a      	ldr	r2, [r7, #20]
 8018d80:	4313      	orrs	r3, r2
 8018d82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d88:	2b04      	cmp	r3, #4
 8018d8a:	d107      	bne.n	8018d9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d94:	4313      	orrs	r3, r2
 8018d96:	697a      	ldr	r2, [r7, #20]
 8018d98:	4313      	orrs	r3, r2
 8018d9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	697a      	ldr	r2, [r7, #20]
 8018da2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	695b      	ldr	r3, [r3, #20]
 8018daa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	f023 0307 	bic.w	r3, r3, #7
 8018db2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db8:	697a      	ldr	r2, [r7, #20]
 8018dba:	4313      	orrs	r3, r2
 8018dbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc2:	2b04      	cmp	r3, #4
 8018dc4:	d117      	bne.n	8018df6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dca:	697a      	ldr	r2, [r7, #20]
 8018dcc:	4313      	orrs	r3, r2
 8018dce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d00e      	beq.n	8018df6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f000 fa0b 	bl	80191f4 <DMA_CheckFifoParam>
 8018dde:	4603      	mov	r3, r0
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d008      	beq.n	8018df6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2240      	movs	r2, #64	; 0x40
 8018de8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	2201      	movs	r2, #1
 8018dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018df2:	2301      	movs	r3, #1
 8018df4:	e016      	b.n	8018e24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	697a      	ldr	r2, [r7, #20]
 8018dfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	f000 f9c2 	bl	8019188 <DMA_CalcBaseAndBitshift>
 8018e04:	4603      	mov	r3, r0
 8018e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e0c:	223f      	movs	r2, #63	; 0x3f
 8018e0e:	409a      	lsls	r2, r3
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2200      	movs	r2, #0
 8018e18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2201      	movs	r2, #1
 8018e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018e22:	2300      	movs	r3, #0
}
 8018e24:	4618      	mov	r0, r3
 8018e26:	3718      	adds	r7, #24
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}
 8018e2c:	f010803f 	.word	0xf010803f

08018e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018e30:	b480      	push	{r7}
 8018e32:	b083      	sub	sp, #12
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018e3e:	b2db      	uxtb	r3, r3
 8018e40:	2b02      	cmp	r3, #2
 8018e42:	d004      	beq.n	8018e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2280      	movs	r2, #128	; 0x80
 8018e48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	e00c      	b.n	8018e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2205      	movs	r2, #5
 8018e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	681a      	ldr	r2, [r3, #0]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f022 0201 	bic.w	r2, r2, #1
 8018e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018e66:	2300      	movs	r3, #0
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	370c      	adds	r7, #12
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e72:	4770      	bx	lr

08018e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b086      	sub	sp, #24
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018e80:	4b92      	ldr	r3, [pc, #584]	; (80190cc <HAL_DMA_IRQHandler+0x258>)
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	4a92      	ldr	r2, [pc, #584]	; (80190d0 <HAL_DMA_IRQHandler+0x25c>)
 8018e86:	fba2 2303 	umull	r2, r3, r2, r3
 8018e8a:	0a9b      	lsrs	r3, r3, #10
 8018e8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e9e:	2208      	movs	r2, #8
 8018ea0:	409a      	lsls	r2, r3
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	4013      	ands	r3, r2
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d01a      	beq.n	8018ee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	f003 0304 	and.w	r3, r3, #4
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d013      	beq.n	8018ee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f022 0204 	bic.w	r2, r2, #4
 8018ec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ecc:	2208      	movs	r2, #8
 8018ece:	409a      	lsls	r2, r3
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ed8:	f043 0201 	orr.w	r2, r3, #1
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ee4:	2201      	movs	r2, #1
 8018ee6:	409a      	lsls	r2, r3
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	4013      	ands	r3, r2
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d012      	beq.n	8018f16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	695b      	ldr	r3, [r3, #20]
 8018ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d00b      	beq.n	8018f16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f02:	2201      	movs	r2, #1
 8018f04:	409a      	lsls	r2, r3
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f0e:	f043 0202 	orr.w	r2, r3, #2
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f1a:	2204      	movs	r2, #4
 8018f1c:	409a      	lsls	r2, r3
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	4013      	ands	r3, r2
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d012      	beq.n	8018f4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f003 0302 	and.w	r3, r3, #2
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d00b      	beq.n	8018f4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f38:	2204      	movs	r2, #4
 8018f3a:	409a      	lsls	r2, r3
 8018f3c:	693b      	ldr	r3, [r7, #16]
 8018f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f44:	f043 0204 	orr.w	r2, r3, #4
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f50:	2210      	movs	r2, #16
 8018f52:	409a      	lsls	r2, r3
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	4013      	ands	r3, r2
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d043      	beq.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	f003 0308 	and.w	r3, r3, #8
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d03c      	beq.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f6e:	2210      	movs	r2, #16
 8018f70:	409a      	lsls	r2, r3
 8018f72:	693b      	ldr	r3, [r7, #16]
 8018f74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d018      	beq.n	8018fb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d108      	bne.n	8018fa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d024      	beq.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f9e:	6878      	ldr	r0, [r7, #4]
 8018fa0:	4798      	blx	r3
 8018fa2:	e01f      	b.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d01b      	beq.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	4798      	blx	r3
 8018fb4:	e016      	b.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d107      	bne.n	8018fd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	681a      	ldr	r2, [r3, #0]
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	f022 0208 	bic.w	r2, r2, #8
 8018fd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d003      	beq.n	8018fe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fe8:	2220      	movs	r2, #32
 8018fea:	409a      	lsls	r2, r3
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	4013      	ands	r3, r2
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 808e 	beq.w	8019112 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f003 0310 	and.w	r3, r3, #16
 8019000:	2b00      	cmp	r3, #0
 8019002:	f000 8086 	beq.w	8019112 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801900a:	2220      	movs	r2, #32
 801900c:	409a      	lsls	r2, r3
 801900e:	693b      	ldr	r3, [r7, #16]
 8019010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019018:	b2db      	uxtb	r3, r3
 801901a:	2b05      	cmp	r3, #5
 801901c:	d136      	bne.n	801908c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681a      	ldr	r2, [r3, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	f022 0216 	bic.w	r2, r2, #22
 801902c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	695a      	ldr	r2, [r3, #20]
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801903c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019042:	2b00      	cmp	r3, #0
 8019044:	d103      	bne.n	801904e <HAL_DMA_IRQHandler+0x1da>
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801904a:	2b00      	cmp	r3, #0
 801904c:	d007      	beq.n	801905e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	681a      	ldr	r2, [r3, #0]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	f022 0208 	bic.w	r2, r2, #8
 801905c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019062:	223f      	movs	r2, #63	; 0x3f
 8019064:	409a      	lsls	r2, r3
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	2201      	movs	r2, #1
 801906e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	2200      	movs	r2, #0
 8019076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801907e:	2b00      	cmp	r3, #0
 8019080:	d07d      	beq.n	801917e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	4798      	blx	r3
        }
        return;
 801908a:	e078      	b.n	801917e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019096:	2b00      	cmp	r3, #0
 8019098:	d01c      	beq.n	80190d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d108      	bne.n	80190ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d030      	beq.n	8019112 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	4798      	blx	r3
 80190b8:	e02b      	b.n	8019112 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d027      	beq.n	8019112 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190c6:	6878      	ldr	r0, [r7, #4]
 80190c8:	4798      	blx	r3
 80190ca:	e022      	b.n	8019112 <HAL_DMA_IRQHandler+0x29e>
 80190cc:	20000588 	.word	0x20000588
 80190d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d10f      	bne.n	8019102 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	681a      	ldr	r2, [r3, #0]
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	f022 0210 	bic.w	r2, r2, #16
 80190f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	2201      	movs	r2, #1
 80190f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2200      	movs	r2, #0
 80190fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019106:	2b00      	cmp	r3, #0
 8019108:	d003      	beq.n	8019112 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019116:	2b00      	cmp	r3, #0
 8019118:	d032      	beq.n	8019180 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801911e:	f003 0301 	and.w	r3, r3, #1
 8019122:	2b00      	cmp	r3, #0
 8019124:	d022      	beq.n	801916c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	2205      	movs	r2, #5
 801912a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	f022 0201 	bic.w	r2, r2, #1
 801913c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	3301      	adds	r3, #1
 8019142:	60bb      	str	r3, [r7, #8]
 8019144:	697a      	ldr	r2, [r7, #20]
 8019146:	429a      	cmp	r2, r3
 8019148:	d307      	bcc.n	801915a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f003 0301 	and.w	r3, r3, #1
 8019154:	2b00      	cmp	r3, #0
 8019156:	d1f2      	bne.n	801913e <HAL_DMA_IRQHandler+0x2ca>
 8019158:	e000      	b.n	801915c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801915a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	2201      	movs	r2, #1
 8019160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2200      	movs	r2, #0
 8019168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019170:	2b00      	cmp	r3, #0
 8019172:	d005      	beq.n	8019180 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019178:	6878      	ldr	r0, [r7, #4]
 801917a:	4798      	blx	r3
 801917c:	e000      	b.n	8019180 <HAL_DMA_IRQHandler+0x30c>
        return;
 801917e:	bf00      	nop
    }
  }
}
 8019180:	3718      	adds	r7, #24
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop

08019188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019188:	b480      	push	{r7}
 801918a:	b085      	sub	sp, #20
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	b2db      	uxtb	r3, r3
 8019196:	3b10      	subs	r3, #16
 8019198:	4a14      	ldr	r2, [pc, #80]	; (80191ec <DMA_CalcBaseAndBitshift+0x64>)
 801919a:	fba2 2303 	umull	r2, r3, r2, r3
 801919e:	091b      	lsrs	r3, r3, #4
 80191a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80191a2:	4a13      	ldr	r2, [pc, #76]	; (80191f0 <DMA_CalcBaseAndBitshift+0x68>)
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	4413      	add	r3, r2
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	461a      	mov	r2, r3
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	2b03      	cmp	r3, #3
 80191b4:	d909      	bls.n	80191ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80191be:	f023 0303 	bic.w	r3, r3, #3
 80191c2:	1d1a      	adds	r2, r3, #4
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	659a      	str	r2, [r3, #88]	; 0x58
 80191c8:	e007      	b.n	80191da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80191d2:	f023 0303 	bic.w	r3, r3, #3
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3714      	adds	r7, #20
 80191e2:	46bd      	mov	sp, r7
 80191e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	aaaaaaab 	.word	0xaaaaaaab
 80191f0:	08002360 	.word	0x08002360

080191f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80191f4:	b480      	push	{r7}
 80191f6:	b085      	sub	sp, #20
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80191fc:	2300      	movs	r3, #0
 80191fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	699b      	ldr	r3, [r3, #24]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d11f      	bne.n	801924e <DMA_CheckFifoParam+0x5a>
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	2b03      	cmp	r3, #3
 8019212:	d856      	bhi.n	80192c2 <DMA_CheckFifoParam+0xce>
 8019214:	a201      	add	r2, pc, #4	; (adr r2, 801921c <DMA_CheckFifoParam+0x28>)
 8019216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801921a:	bf00      	nop
 801921c:	0801922d 	.word	0x0801922d
 8019220:	0801923f 	.word	0x0801923f
 8019224:	0801922d 	.word	0x0801922d
 8019228:	080192c3 	.word	0x080192c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019234:	2b00      	cmp	r3, #0
 8019236:	d046      	beq.n	80192c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8019238:	2301      	movs	r3, #1
 801923a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801923c:	e043      	b.n	80192c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019246:	d140      	bne.n	80192ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8019248:	2301      	movs	r3, #1
 801924a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801924c:	e03d      	b.n	80192ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	699b      	ldr	r3, [r3, #24]
 8019252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019256:	d121      	bne.n	801929c <DMA_CheckFifoParam+0xa8>
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	2b03      	cmp	r3, #3
 801925c:	d837      	bhi.n	80192ce <DMA_CheckFifoParam+0xda>
 801925e:	a201      	add	r2, pc, #4	; (adr r2, 8019264 <DMA_CheckFifoParam+0x70>)
 8019260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019264:	08019275 	.word	0x08019275
 8019268:	0801927b 	.word	0x0801927b
 801926c:	08019275 	.word	0x08019275
 8019270:	0801928d 	.word	0x0801928d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8019274:	2301      	movs	r3, #1
 8019276:	73fb      	strb	r3, [r7, #15]
      break;
 8019278:	e030      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801927e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019282:	2b00      	cmp	r3, #0
 8019284:	d025      	beq.n	80192d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8019286:	2301      	movs	r3, #1
 8019288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801928a:	e022      	b.n	80192d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019294:	d11f      	bne.n	80192d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8019296:	2301      	movs	r3, #1
 8019298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801929a:	e01c      	b.n	80192d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801929c:	68bb      	ldr	r3, [r7, #8]
 801929e:	2b02      	cmp	r3, #2
 80192a0:	d903      	bls.n	80192aa <DMA_CheckFifoParam+0xb6>
 80192a2:	68bb      	ldr	r3, [r7, #8]
 80192a4:	2b03      	cmp	r3, #3
 80192a6:	d003      	beq.n	80192b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80192a8:	e018      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80192aa:	2301      	movs	r3, #1
 80192ac:	73fb      	strb	r3, [r7, #15]
      break;
 80192ae:	e015      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d00e      	beq.n	80192da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80192bc:	2301      	movs	r3, #1
 80192be:	73fb      	strb	r3, [r7, #15]
      break;
 80192c0:	e00b      	b.n	80192da <DMA_CheckFifoParam+0xe6>
      break;
 80192c2:	bf00      	nop
 80192c4:	e00a      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;
 80192c6:	bf00      	nop
 80192c8:	e008      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;
 80192ca:	bf00      	nop
 80192cc:	e006      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;
 80192ce:	bf00      	nop
 80192d0:	e004      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;
 80192d2:	bf00      	nop
 80192d4:	e002      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;   
 80192d6:	bf00      	nop
 80192d8:	e000      	b.n	80192dc <DMA_CheckFifoParam+0xe8>
      break;
 80192da:	bf00      	nop
    }
  } 
  
  return status; 
 80192dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80192de:	4618      	mov	r0, r3
 80192e0:	3714      	adds	r7, #20
 80192e2:	46bd      	mov	sp, r7
 80192e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop

080192ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b086      	sub	sp, #24
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	60f8      	str	r0, [r7, #12]
 80192f4:	60b9      	str	r1, [r7, #8]
 80192f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80192fa:	2301      	movs	r3, #1
 80192fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80192fe:	4b23      	ldr	r3, [pc, #140]	; (801938c <HAL_FLASH_Program+0xa0>)
 8019300:	7e1b      	ldrb	r3, [r3, #24]
 8019302:	2b01      	cmp	r3, #1
 8019304:	d101      	bne.n	801930a <HAL_FLASH_Program+0x1e>
 8019306:	2302      	movs	r3, #2
 8019308:	e03b      	b.n	8019382 <HAL_FLASH_Program+0x96>
 801930a:	4b20      	ldr	r3, [pc, #128]	; (801938c <HAL_FLASH_Program+0xa0>)
 801930c:	2201      	movs	r2, #1
 801930e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019310:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019314:	f000 f870 	bl	80193f8 <FLASH_WaitForLastOperation>
 8019318:	4603      	mov	r3, r0
 801931a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801931c:	7dfb      	ldrb	r3, [r7, #23]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d12b      	bne.n	801937a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d105      	bne.n	8019334 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8019328:	783b      	ldrb	r3, [r7, #0]
 801932a:	4619      	mov	r1, r3
 801932c:	68b8      	ldr	r0, [r7, #8]
 801932e:	f000 f91b 	bl	8019568 <FLASH_Program_Byte>
 8019332:	e016      	b.n	8019362 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	2b01      	cmp	r3, #1
 8019338:	d105      	bne.n	8019346 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801933a:	883b      	ldrh	r3, [r7, #0]
 801933c:	4619      	mov	r1, r3
 801933e:	68b8      	ldr	r0, [r7, #8]
 8019340:	f000 f8ee 	bl	8019520 <FLASH_Program_HalfWord>
 8019344:	e00d      	b.n	8019362 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	2b02      	cmp	r3, #2
 801934a:	d105      	bne.n	8019358 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	4619      	mov	r1, r3
 8019350:	68b8      	ldr	r0, [r7, #8]
 8019352:	f000 f8c3 	bl	80194dc <FLASH_Program_Word>
 8019356:	e004      	b.n	8019362 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8019358:	e9d7 2300 	ldrd	r2, r3, [r7]
 801935c:	68b8      	ldr	r0, [r7, #8]
 801935e:	f000 f88b 	bl	8019478 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019362:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019366:	f000 f847 	bl	80193f8 <FLASH_WaitForLastOperation>
 801936a:	4603      	mov	r3, r0
 801936c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801936e:	4b08      	ldr	r3, [pc, #32]	; (8019390 <HAL_FLASH_Program+0xa4>)
 8019370:	691b      	ldr	r3, [r3, #16]
 8019372:	4a07      	ldr	r2, [pc, #28]	; (8019390 <HAL_FLASH_Program+0xa4>)
 8019374:	f023 0301 	bic.w	r3, r3, #1
 8019378:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801937a:	4b04      	ldr	r3, [pc, #16]	; (801938c <HAL_FLASH_Program+0xa0>)
 801937c:	2200      	movs	r2, #0
 801937e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019380:	7dfb      	ldrb	r3, [r7, #23]
}
 8019382:	4618      	mov	r0, r3
 8019384:	3718      	adds	r7, #24
 8019386:	46bd      	mov	sp, r7
 8019388:	bd80      	pop	{r7, pc}
 801938a:	bf00      	nop
 801938c:	20006c1c 	.word	0x20006c1c
 8019390:	40023c00 	.word	0x40023c00

08019394 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019394:	b480      	push	{r7}
 8019396:	b083      	sub	sp, #12
 8019398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801939a:	2300      	movs	r3, #0
 801939c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801939e:	4b0b      	ldr	r3, [pc, #44]	; (80193cc <HAL_FLASH_Unlock+0x38>)
 80193a0:	691b      	ldr	r3, [r3, #16]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	da0b      	bge.n	80193be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80193a6:	4b09      	ldr	r3, [pc, #36]	; (80193cc <HAL_FLASH_Unlock+0x38>)
 80193a8:	4a09      	ldr	r2, [pc, #36]	; (80193d0 <HAL_FLASH_Unlock+0x3c>)
 80193aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80193ac:	4b07      	ldr	r3, [pc, #28]	; (80193cc <HAL_FLASH_Unlock+0x38>)
 80193ae:	4a09      	ldr	r2, [pc, #36]	; (80193d4 <HAL_FLASH_Unlock+0x40>)
 80193b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80193b2:	4b06      	ldr	r3, [pc, #24]	; (80193cc <HAL_FLASH_Unlock+0x38>)
 80193b4:	691b      	ldr	r3, [r3, #16]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	da01      	bge.n	80193be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80193ba:	2301      	movs	r3, #1
 80193bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80193be:	79fb      	ldrb	r3, [r7, #7]
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	370c      	adds	r7, #12
 80193c4:	46bd      	mov	sp, r7
 80193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ca:	4770      	bx	lr
 80193cc:	40023c00 	.word	0x40023c00
 80193d0:	45670123 	.word	0x45670123
 80193d4:	cdef89ab 	.word	0xcdef89ab

080193d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80193d8:	b480      	push	{r7}
 80193da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80193dc:	4b05      	ldr	r3, [pc, #20]	; (80193f4 <HAL_FLASH_Lock+0x1c>)
 80193de:	691b      	ldr	r3, [r3, #16]
 80193e0:	4a04      	ldr	r2, [pc, #16]	; (80193f4 <HAL_FLASH_Lock+0x1c>)
 80193e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80193e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80193e8:	2300      	movs	r3, #0
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	46bd      	mov	sp, r7
 80193ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f2:	4770      	bx	lr
 80193f4:	40023c00 	.word	0x40023c00

080193f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b084      	sub	sp, #16
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019400:	2300      	movs	r3, #0
 8019402:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019404:	4b1a      	ldr	r3, [pc, #104]	; (8019470 <FLASH_WaitForLastOperation+0x78>)
 8019406:	2200      	movs	r2, #0
 8019408:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801940a:	f7ff f819 	bl	8018440 <HAL_GetTick>
 801940e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019410:	e010      	b.n	8019434 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019418:	d00c      	beq.n	8019434 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d007      	beq.n	8019430 <FLASH_WaitForLastOperation+0x38>
 8019420:	f7ff f80e 	bl	8018440 <HAL_GetTick>
 8019424:	4602      	mov	r2, r0
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	1ad3      	subs	r3, r2, r3
 801942a:	687a      	ldr	r2, [r7, #4]
 801942c:	429a      	cmp	r2, r3
 801942e:	d201      	bcs.n	8019434 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019430:	2303      	movs	r3, #3
 8019432:	e019      	b.n	8019468 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019434:	4b0f      	ldr	r3, [pc, #60]	; (8019474 <FLASH_WaitForLastOperation+0x7c>)
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801943c:	2b00      	cmp	r3, #0
 801943e:	d1e8      	bne.n	8019412 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019440:	4b0c      	ldr	r3, [pc, #48]	; (8019474 <FLASH_WaitForLastOperation+0x7c>)
 8019442:	68db      	ldr	r3, [r3, #12]
 8019444:	f003 0301 	and.w	r3, r3, #1
 8019448:	2b00      	cmp	r3, #0
 801944a:	d002      	beq.n	8019452 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801944c:	4b09      	ldr	r3, [pc, #36]	; (8019474 <FLASH_WaitForLastOperation+0x7c>)
 801944e:	2201      	movs	r2, #1
 8019450:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8019452:	4b08      	ldr	r3, [pc, #32]	; (8019474 <FLASH_WaitForLastOperation+0x7c>)
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801945a:	2b00      	cmp	r3, #0
 801945c:	d003      	beq.n	8019466 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801945e:	f000 f8a5 	bl	80195ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8019462:	2301      	movs	r3, #1
 8019464:	e000      	b.n	8019468 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8019466:	2300      	movs	r3, #0
  
}  
 8019468:	4618      	mov	r0, r3
 801946a:	3710      	adds	r7, #16
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}
 8019470:	20006c1c 	.word	0x20006c1c
 8019474:	40023c00 	.word	0x40023c00

08019478 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8019478:	b480      	push	{r7}
 801947a:	b085      	sub	sp, #20
 801947c:	af00      	add	r7, sp, #0
 801947e:	60f8      	str	r0, [r7, #12]
 8019480:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019484:	4b14      	ldr	r3, [pc, #80]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 8019486:	691b      	ldr	r3, [r3, #16]
 8019488:	4a13      	ldr	r2, [pc, #76]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 801948a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801948e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019490:	4b11      	ldr	r3, [pc, #68]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 8019492:	691b      	ldr	r3, [r3, #16]
 8019494:	4a10      	ldr	r2, [pc, #64]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 8019496:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801949a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801949c:	4b0e      	ldr	r3, [pc, #56]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 801949e:	691b      	ldr	r3, [r3, #16]
 80194a0:	4a0d      	ldr	r2, [pc, #52]	; (80194d8 <FLASH_Program_DoubleWord+0x60>)
 80194a2:	f043 0301 	orr.w	r3, r3, #1
 80194a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	683a      	ldr	r2, [r7, #0]
 80194ac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80194ae:	f3bf 8f6f 	isb	sy
}
 80194b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80194b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80194b8:	f04f 0200 	mov.w	r2, #0
 80194bc:	f04f 0300 	mov.w	r3, #0
 80194c0:	000a      	movs	r2, r1
 80194c2:	2300      	movs	r3, #0
 80194c4:	68f9      	ldr	r1, [r7, #12]
 80194c6:	3104      	adds	r1, #4
 80194c8:	4613      	mov	r3, r2
 80194ca:	600b      	str	r3, [r1, #0]
}
 80194cc:	bf00      	nop
 80194ce:	3714      	adds	r7, #20
 80194d0:	46bd      	mov	sp, r7
 80194d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d6:	4770      	bx	lr
 80194d8:	40023c00 	.word	0x40023c00

080194dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80194dc:	b480      	push	{r7}
 80194de:	b083      	sub	sp, #12
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194e6:	4b0d      	ldr	r3, [pc, #52]	; (801951c <FLASH_Program_Word+0x40>)
 80194e8:	691b      	ldr	r3, [r3, #16]
 80194ea:	4a0c      	ldr	r2, [pc, #48]	; (801951c <FLASH_Program_Word+0x40>)
 80194ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80194f2:	4b0a      	ldr	r3, [pc, #40]	; (801951c <FLASH_Program_Word+0x40>)
 80194f4:	691b      	ldr	r3, [r3, #16]
 80194f6:	4a09      	ldr	r2, [pc, #36]	; (801951c <FLASH_Program_Word+0x40>)
 80194f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80194fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80194fe:	4b07      	ldr	r3, [pc, #28]	; (801951c <FLASH_Program_Word+0x40>)
 8019500:	691b      	ldr	r3, [r3, #16]
 8019502:	4a06      	ldr	r2, [pc, #24]	; (801951c <FLASH_Program_Word+0x40>)
 8019504:	f043 0301 	orr.w	r3, r3, #1
 8019508:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	683a      	ldr	r2, [r7, #0]
 801950e:	601a      	str	r2, [r3, #0]
}
 8019510:	bf00      	nop
 8019512:	370c      	adds	r7, #12
 8019514:	46bd      	mov	sp, r7
 8019516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951a:	4770      	bx	lr
 801951c:	40023c00 	.word	0x40023c00

08019520 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019520:	b480      	push	{r7}
 8019522:	b083      	sub	sp, #12
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	460b      	mov	r3, r1
 801952a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801952c:	4b0d      	ldr	r3, [pc, #52]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 801952e:	691b      	ldr	r3, [r3, #16]
 8019530:	4a0c      	ldr	r2, [pc, #48]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 8019532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019536:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8019538:	4b0a      	ldr	r3, [pc, #40]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 801953a:	691b      	ldr	r3, [r3, #16]
 801953c:	4a09      	ldr	r2, [pc, #36]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 801953e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019544:	4b07      	ldr	r3, [pc, #28]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 8019546:	691b      	ldr	r3, [r3, #16]
 8019548:	4a06      	ldr	r2, [pc, #24]	; (8019564 <FLASH_Program_HalfWord+0x44>)
 801954a:	f043 0301 	orr.w	r3, r3, #1
 801954e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	887a      	ldrh	r2, [r7, #2]
 8019554:	801a      	strh	r2, [r3, #0]
}
 8019556:	bf00      	nop
 8019558:	370c      	adds	r7, #12
 801955a:	46bd      	mov	sp, r7
 801955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop
 8019564:	40023c00 	.word	0x40023c00

08019568 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019568:	b480      	push	{r7}
 801956a:	b083      	sub	sp, #12
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
 8019570:	460b      	mov	r3, r1
 8019572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019574:	4b0c      	ldr	r3, [pc, #48]	; (80195a8 <FLASH_Program_Byte+0x40>)
 8019576:	691b      	ldr	r3, [r3, #16]
 8019578:	4a0b      	ldr	r2, [pc, #44]	; (80195a8 <FLASH_Program_Byte+0x40>)
 801957a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801957e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019580:	4b09      	ldr	r3, [pc, #36]	; (80195a8 <FLASH_Program_Byte+0x40>)
 8019582:	4a09      	ldr	r2, [pc, #36]	; (80195a8 <FLASH_Program_Byte+0x40>)
 8019584:	691b      	ldr	r3, [r3, #16]
 8019586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019588:	4b07      	ldr	r3, [pc, #28]	; (80195a8 <FLASH_Program_Byte+0x40>)
 801958a:	691b      	ldr	r3, [r3, #16]
 801958c:	4a06      	ldr	r2, [pc, #24]	; (80195a8 <FLASH_Program_Byte+0x40>)
 801958e:	f043 0301 	orr.w	r3, r3, #1
 8019592:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	78fa      	ldrb	r2, [r7, #3]
 8019598:	701a      	strb	r2, [r3, #0]
}
 801959a:	bf00      	nop
 801959c:	370c      	adds	r7, #12
 801959e:	46bd      	mov	sp, r7
 80195a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a4:	4770      	bx	lr
 80195a6:	bf00      	nop
 80195a8:	40023c00 	.word	0x40023c00

080195ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80195ac:	b480      	push	{r7}
 80195ae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80195b0:	4b2f      	ldr	r3, [pc, #188]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 80195b2:	68db      	ldr	r3, [r3, #12]
 80195b4:	f003 0310 	and.w	r3, r3, #16
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d008      	beq.n	80195ce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80195bc:	4b2d      	ldr	r3, [pc, #180]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 80195be:	69db      	ldr	r3, [r3, #28]
 80195c0:	f043 0310 	orr.w	r3, r3, #16
 80195c4:	4a2b      	ldr	r2, [pc, #172]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 80195c6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80195c8:	4b29      	ldr	r3, [pc, #164]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 80195ca:	2210      	movs	r2, #16
 80195cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80195ce:	4b28      	ldr	r3, [pc, #160]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	f003 0320 	and.w	r3, r3, #32
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d008      	beq.n	80195ec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80195da:	4b26      	ldr	r3, [pc, #152]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 80195dc:	69db      	ldr	r3, [r3, #28]
 80195de:	f043 0308 	orr.w	r3, r3, #8
 80195e2:	4a24      	ldr	r2, [pc, #144]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 80195e4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80195e6:	4b22      	ldr	r3, [pc, #136]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 80195e8:	2220      	movs	r2, #32
 80195ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80195ec:	4b20      	ldr	r3, [pc, #128]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 80195ee:	68db      	ldr	r3, [r3, #12]
 80195f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d008      	beq.n	801960a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80195f8:	4b1e      	ldr	r3, [pc, #120]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 80195fa:	69db      	ldr	r3, [r3, #28]
 80195fc:	f043 0304 	orr.w	r3, r3, #4
 8019600:	4a1c      	ldr	r2, [pc, #112]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 8019602:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019604:	4b1a      	ldr	r3, [pc, #104]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 8019606:	2240      	movs	r2, #64	; 0x40
 8019608:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801960a:	4b19      	ldr	r3, [pc, #100]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019612:	2b00      	cmp	r3, #0
 8019614:	d008      	beq.n	8019628 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8019616:	4b17      	ldr	r3, [pc, #92]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 8019618:	69db      	ldr	r3, [r3, #28]
 801961a:	f043 0302 	orr.w	r3, r3, #2
 801961e:	4a15      	ldr	r2, [pc, #84]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 8019620:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8019622:	4b13      	ldr	r3, [pc, #76]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 8019624:	2280      	movs	r2, #128	; 0x80
 8019626:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8019628:	4b11      	ldr	r3, [pc, #68]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 801962a:	68db      	ldr	r3, [r3, #12]
 801962c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019630:	2b00      	cmp	r3, #0
 8019632:	d009      	beq.n	8019648 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019634:	4b0f      	ldr	r3, [pc, #60]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 8019636:	69db      	ldr	r3, [r3, #28]
 8019638:	f043 0301 	orr.w	r3, r3, #1
 801963c:	4a0d      	ldr	r2, [pc, #52]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 801963e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019640:	4b0b      	ldr	r3, [pc, #44]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 8019642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019646:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8019648:	4b09      	ldr	r3, [pc, #36]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 801964a:	68db      	ldr	r3, [r3, #12]
 801964c:	f003 0302 	and.w	r3, r3, #2
 8019650:	2b00      	cmp	r3, #0
 8019652:	d008      	beq.n	8019666 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019654:	4b07      	ldr	r3, [pc, #28]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 8019656:	69db      	ldr	r3, [r3, #28]
 8019658:	f043 0320 	orr.w	r3, r3, #32
 801965c:	4a05      	ldr	r2, [pc, #20]	; (8019674 <FLASH_SetErrorCode+0xc8>)
 801965e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019660:	4b03      	ldr	r3, [pc, #12]	; (8019670 <FLASH_SetErrorCode+0xc4>)
 8019662:	2202      	movs	r2, #2
 8019664:	60da      	str	r2, [r3, #12]
  }
}
 8019666:	bf00      	nop
 8019668:	46bd      	mov	sp, r7
 801966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801966e:	4770      	bx	lr
 8019670:	40023c00 	.word	0x40023c00
 8019674:	20006c1c 	.word	0x20006c1c

08019678 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b084      	sub	sp, #16
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
 8019680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019682:	2301      	movs	r3, #1
 8019684:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8019686:	2300      	movs	r3, #0
 8019688:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801968a:	4b31      	ldr	r3, [pc, #196]	; (8019750 <HAL_FLASHEx_Erase+0xd8>)
 801968c:	7e1b      	ldrb	r3, [r3, #24]
 801968e:	2b01      	cmp	r3, #1
 8019690:	d101      	bne.n	8019696 <HAL_FLASHEx_Erase+0x1e>
 8019692:	2302      	movs	r3, #2
 8019694:	e058      	b.n	8019748 <HAL_FLASHEx_Erase+0xd0>
 8019696:	4b2e      	ldr	r3, [pc, #184]	; (8019750 <HAL_FLASHEx_Erase+0xd8>)
 8019698:	2201      	movs	r2, #1
 801969a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801969c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80196a0:	f7ff feaa 	bl	80193f8 <FLASH_WaitForLastOperation>
 80196a4:	4603      	mov	r3, r0
 80196a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80196a8:	7bfb      	ldrb	r3, [r7, #15]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d148      	bne.n	8019740 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	f04f 32ff 	mov.w	r2, #4294967295
 80196b4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d115      	bne.n	80196ea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	691b      	ldr	r3, [r3, #16]
 80196c2:	b2da      	uxtb	r2, r3
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	685b      	ldr	r3, [r3, #4]
 80196c8:	4619      	mov	r1, r3
 80196ca:	4610      	mov	r0, r2
 80196cc:	f000 f844 	bl	8019758 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80196d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80196d4:	f7ff fe90 	bl	80193f8 <FLASH_WaitForLastOperation>
 80196d8:	4603      	mov	r3, r0
 80196da:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80196dc:	4b1d      	ldr	r3, [pc, #116]	; (8019754 <HAL_FLASHEx_Erase+0xdc>)
 80196de:	691b      	ldr	r3, [r3, #16]
 80196e0:	4a1c      	ldr	r2, [pc, #112]	; (8019754 <HAL_FLASHEx_Erase+0xdc>)
 80196e2:	f023 0304 	bic.w	r3, r3, #4
 80196e6:	6113      	str	r3, [r2, #16]
 80196e8:	e028      	b.n	801973c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	689b      	ldr	r3, [r3, #8]
 80196ee:	60bb      	str	r3, [r7, #8]
 80196f0:	e01c      	b.n	801972c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	691b      	ldr	r3, [r3, #16]
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	4619      	mov	r1, r3
 80196fa:	68b8      	ldr	r0, [r7, #8]
 80196fc:	f000 f850 	bl	80197a0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019704:	f7ff fe78 	bl	80193f8 <FLASH_WaitForLastOperation>
 8019708:	4603      	mov	r3, r0
 801970a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801970c:	4b11      	ldr	r3, [pc, #68]	; (8019754 <HAL_FLASHEx_Erase+0xdc>)
 801970e:	691b      	ldr	r3, [r3, #16]
 8019710:	4a10      	ldr	r2, [pc, #64]	; (8019754 <HAL_FLASHEx_Erase+0xdc>)
 8019712:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8019716:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8019718:	7bfb      	ldrb	r3, [r7, #15]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d003      	beq.n	8019726 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	68ba      	ldr	r2, [r7, #8]
 8019722:	601a      	str	r2, [r3, #0]
          break;
 8019724:	e00a      	b.n	801973c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019726:	68bb      	ldr	r3, [r7, #8]
 8019728:	3301      	adds	r3, #1
 801972a:	60bb      	str	r3, [r7, #8]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	68da      	ldr	r2, [r3, #12]
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	689b      	ldr	r3, [r3, #8]
 8019734:	4413      	add	r3, r2
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	429a      	cmp	r2, r3
 801973a:	d3da      	bcc.n	80196f2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801973c:	f000 f878 	bl	8019830 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019740:	4b03      	ldr	r3, [pc, #12]	; (8019750 <HAL_FLASHEx_Erase+0xd8>)
 8019742:	2200      	movs	r2, #0
 8019744:	761a      	strb	r2, [r3, #24]

  return status;
 8019746:	7bfb      	ldrb	r3, [r7, #15]
}
 8019748:	4618      	mov	r0, r3
 801974a:	3710      	adds	r7, #16
 801974c:	46bd      	mov	sp, r7
 801974e:	bd80      	pop	{r7, pc}
 8019750:	20006c1c 	.word	0x20006c1c
 8019754:	40023c00 	.word	0x40023c00

08019758 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019758:	b480      	push	{r7}
 801975a:	b083      	sub	sp, #12
 801975c:	af00      	add	r7, sp, #0
 801975e:	4603      	mov	r3, r0
 8019760:	6039      	str	r1, [r7, #0]
 8019762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019764:	4b0d      	ldr	r3, [pc, #52]	; (801979c <FLASH_MassErase+0x44>)
 8019766:	691b      	ldr	r3, [r3, #16]
 8019768:	4a0c      	ldr	r2, [pc, #48]	; (801979c <FLASH_MassErase+0x44>)
 801976a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801976e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019770:	4b0a      	ldr	r3, [pc, #40]	; (801979c <FLASH_MassErase+0x44>)
 8019772:	691b      	ldr	r3, [r3, #16]
 8019774:	4a09      	ldr	r2, [pc, #36]	; (801979c <FLASH_MassErase+0x44>)
 8019776:	f043 0304 	orr.w	r3, r3, #4
 801977a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 801977c:	4b07      	ldr	r3, [pc, #28]	; (801979c <FLASH_MassErase+0x44>)
 801977e:	691a      	ldr	r2, [r3, #16]
 8019780:	79fb      	ldrb	r3, [r7, #7]
 8019782:	021b      	lsls	r3, r3, #8
 8019784:	4313      	orrs	r3, r2
 8019786:	4a05      	ldr	r2, [pc, #20]	; (801979c <FLASH_MassErase+0x44>)
 8019788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801978c:	6113      	str	r3, [r2, #16]
}
 801978e:	bf00      	nop
 8019790:	370c      	adds	r7, #12
 8019792:	46bd      	mov	sp, r7
 8019794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019798:	4770      	bx	lr
 801979a:	bf00      	nop
 801979c:	40023c00 	.word	0x40023c00

080197a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80197a0:	b480      	push	{r7}
 80197a2:	b085      	sub	sp, #20
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	460b      	mov	r3, r1
 80197aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80197ac:	2300      	movs	r3, #0
 80197ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80197b0:	78fb      	ldrb	r3, [r7, #3]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d102      	bne.n	80197bc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80197b6:	2300      	movs	r3, #0
 80197b8:	60fb      	str	r3, [r7, #12]
 80197ba:	e010      	b.n	80197de <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80197bc:	78fb      	ldrb	r3, [r7, #3]
 80197be:	2b01      	cmp	r3, #1
 80197c0:	d103      	bne.n	80197ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80197c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80197c6:	60fb      	str	r3, [r7, #12]
 80197c8:	e009      	b.n	80197de <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80197ca:	78fb      	ldrb	r3, [r7, #3]
 80197cc:	2b02      	cmp	r3, #2
 80197ce:	d103      	bne.n	80197d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80197d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80197d4:	60fb      	str	r3, [r7, #12]
 80197d6:	e002      	b.n	80197de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80197d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80197dc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80197de:	4b13      	ldr	r3, [pc, #76]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197e0:	691b      	ldr	r3, [r3, #16]
 80197e2:	4a12      	ldr	r2, [pc, #72]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80197e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80197ea:	4b10      	ldr	r3, [pc, #64]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197ec:	691a      	ldr	r2, [r3, #16]
 80197ee:	490f      	ldr	r1, [pc, #60]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	4313      	orrs	r3, r2
 80197f4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80197f6:	4b0d      	ldr	r3, [pc, #52]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197f8:	691b      	ldr	r3, [r3, #16]
 80197fa:	4a0c      	ldr	r2, [pc, #48]	; (801982c <FLASH_Erase_Sector+0x8c>)
 80197fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019800:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019802:	4b0a      	ldr	r3, [pc, #40]	; (801982c <FLASH_Erase_Sector+0x8c>)
 8019804:	691a      	ldr	r2, [r3, #16]
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	00db      	lsls	r3, r3, #3
 801980a:	4313      	orrs	r3, r2
 801980c:	4a07      	ldr	r2, [pc, #28]	; (801982c <FLASH_Erase_Sector+0x8c>)
 801980e:	f043 0302 	orr.w	r3, r3, #2
 8019812:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8019814:	4b05      	ldr	r3, [pc, #20]	; (801982c <FLASH_Erase_Sector+0x8c>)
 8019816:	691b      	ldr	r3, [r3, #16]
 8019818:	4a04      	ldr	r2, [pc, #16]	; (801982c <FLASH_Erase_Sector+0x8c>)
 801981a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801981e:	6113      	str	r3, [r2, #16]
}
 8019820:	bf00      	nop
 8019822:	3714      	adds	r7, #20
 8019824:	46bd      	mov	sp, r7
 8019826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982a:	4770      	bx	lr
 801982c:	40023c00 	.word	0x40023c00

08019830 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019830:	b480      	push	{r7}
 8019832:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019834:	4b20      	ldr	r3, [pc, #128]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801983c:	2b00      	cmp	r3, #0
 801983e:	d017      	beq.n	8019870 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019840:	4b1d      	ldr	r3, [pc, #116]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	4a1c      	ldr	r2, [pc, #112]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019846:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801984a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801984c:	4b1a      	ldr	r3, [pc, #104]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	4a19      	ldr	r2, [pc, #100]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019852:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019856:	6013      	str	r3, [r2, #0]
 8019858:	4b17      	ldr	r3, [pc, #92]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4a16      	ldr	r2, [pc, #88]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801985e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019862:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019864:	4b14      	ldr	r3, [pc, #80]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	4a13      	ldr	r2, [pc, #76]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801986a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801986e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019870:	4b11      	ldr	r3, [pc, #68]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019878:	2b00      	cmp	r3, #0
 801987a:	d017      	beq.n	80198ac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801987c:	4b0e      	ldr	r3, [pc, #56]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	4a0d      	ldr	r2, [pc, #52]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019886:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019888:	4b0b      	ldr	r3, [pc, #44]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	4a0a      	ldr	r2, [pc, #40]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801988e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019892:	6013      	str	r3, [r2, #0]
 8019894:	4b08      	ldr	r3, [pc, #32]	; (80198b8 <FLASH_FlushCaches+0x88>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	4a07      	ldr	r2, [pc, #28]	; (80198b8 <FLASH_FlushCaches+0x88>)
 801989a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801989e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80198a0:	4b05      	ldr	r3, [pc, #20]	; (80198b8 <FLASH_FlushCaches+0x88>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	4a04      	ldr	r2, [pc, #16]	; (80198b8 <FLASH_FlushCaches+0x88>)
 80198a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80198aa:	6013      	str	r3, [r2, #0]
  }
}
 80198ac:	bf00      	nop
 80198ae:	46bd      	mov	sp, r7
 80198b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b4:	4770      	bx	lr
 80198b6:	bf00      	nop
 80198b8:	40023c00 	.word	0x40023c00

080198bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80198bc:	b480      	push	{r7}
 80198be:	b089      	sub	sp, #36	; 0x24
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
 80198c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80198c6:	2300      	movs	r3, #0
 80198c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80198ca:	2300      	movs	r3, #0
 80198cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80198ce:	2300      	movs	r3, #0
 80198d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80198d2:	2300      	movs	r3, #0
 80198d4:	61fb      	str	r3, [r7, #28]
 80198d6:	e165      	b.n	8019ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80198d8:	2201      	movs	r2, #1
 80198da:	69fb      	ldr	r3, [r7, #28]
 80198dc:	fa02 f303 	lsl.w	r3, r2, r3
 80198e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	697a      	ldr	r2, [r7, #20]
 80198e8:	4013      	ands	r3, r2
 80198ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80198ec:	693a      	ldr	r2, [r7, #16]
 80198ee:	697b      	ldr	r3, [r7, #20]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	f040 8154 	bne.w	8019b9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	685b      	ldr	r3, [r3, #4]
 80198fa:	f003 0303 	and.w	r3, r3, #3
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d005      	beq.n	801990e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	685b      	ldr	r3, [r3, #4]
 8019906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801990a:	2b02      	cmp	r3, #2
 801990c:	d130      	bne.n	8019970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	689b      	ldr	r3, [r3, #8]
 8019912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019914:	69fb      	ldr	r3, [r7, #28]
 8019916:	005b      	lsls	r3, r3, #1
 8019918:	2203      	movs	r2, #3
 801991a:	fa02 f303 	lsl.w	r3, r2, r3
 801991e:	43db      	mvns	r3, r3
 8019920:	69ba      	ldr	r2, [r7, #24]
 8019922:	4013      	ands	r3, r2
 8019924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	68da      	ldr	r2, [r3, #12]
 801992a:	69fb      	ldr	r3, [r7, #28]
 801992c:	005b      	lsls	r3, r3, #1
 801992e:	fa02 f303 	lsl.w	r3, r2, r3
 8019932:	69ba      	ldr	r2, [r7, #24]
 8019934:	4313      	orrs	r3, r2
 8019936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	69ba      	ldr	r2, [r7, #24]
 801993c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	685b      	ldr	r3, [r3, #4]
 8019942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019944:	2201      	movs	r2, #1
 8019946:	69fb      	ldr	r3, [r7, #28]
 8019948:	fa02 f303 	lsl.w	r3, r2, r3
 801994c:	43db      	mvns	r3, r3
 801994e:	69ba      	ldr	r2, [r7, #24]
 8019950:	4013      	ands	r3, r2
 8019952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	685b      	ldr	r3, [r3, #4]
 8019958:	091b      	lsrs	r3, r3, #4
 801995a:	f003 0201 	and.w	r2, r3, #1
 801995e:	69fb      	ldr	r3, [r7, #28]
 8019960:	fa02 f303 	lsl.w	r3, r2, r3
 8019964:	69ba      	ldr	r2, [r7, #24]
 8019966:	4313      	orrs	r3, r2
 8019968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	69ba      	ldr	r2, [r7, #24]
 801996e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	685b      	ldr	r3, [r3, #4]
 8019974:	f003 0303 	and.w	r3, r3, #3
 8019978:	2b03      	cmp	r3, #3
 801997a:	d017      	beq.n	80199ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	68db      	ldr	r3, [r3, #12]
 8019980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019982:	69fb      	ldr	r3, [r7, #28]
 8019984:	005b      	lsls	r3, r3, #1
 8019986:	2203      	movs	r2, #3
 8019988:	fa02 f303 	lsl.w	r3, r2, r3
 801998c:	43db      	mvns	r3, r3
 801998e:	69ba      	ldr	r2, [r7, #24]
 8019990:	4013      	ands	r3, r2
 8019992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019994:	683b      	ldr	r3, [r7, #0]
 8019996:	689a      	ldr	r2, [r3, #8]
 8019998:	69fb      	ldr	r3, [r7, #28]
 801999a:	005b      	lsls	r3, r3, #1
 801999c:	fa02 f303 	lsl.w	r3, r2, r3
 80199a0:	69ba      	ldr	r2, [r7, #24]
 80199a2:	4313      	orrs	r3, r2
 80199a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	69ba      	ldr	r2, [r7, #24]
 80199aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	685b      	ldr	r3, [r3, #4]
 80199b0:	f003 0303 	and.w	r3, r3, #3
 80199b4:	2b02      	cmp	r3, #2
 80199b6:	d123      	bne.n	8019a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80199b8:	69fb      	ldr	r3, [r7, #28]
 80199ba:	08da      	lsrs	r2, r3, #3
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	3208      	adds	r2, #8
 80199c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80199c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80199c6:	69fb      	ldr	r3, [r7, #28]
 80199c8:	f003 0307 	and.w	r3, r3, #7
 80199cc:	009b      	lsls	r3, r3, #2
 80199ce:	220f      	movs	r2, #15
 80199d0:	fa02 f303 	lsl.w	r3, r2, r3
 80199d4:	43db      	mvns	r3, r3
 80199d6:	69ba      	ldr	r2, [r7, #24]
 80199d8:	4013      	ands	r3, r2
 80199da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	691a      	ldr	r2, [r3, #16]
 80199e0:	69fb      	ldr	r3, [r7, #28]
 80199e2:	f003 0307 	and.w	r3, r3, #7
 80199e6:	009b      	lsls	r3, r3, #2
 80199e8:	fa02 f303 	lsl.w	r3, r2, r3
 80199ec:	69ba      	ldr	r2, [r7, #24]
 80199ee:	4313      	orrs	r3, r2
 80199f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80199f2:	69fb      	ldr	r3, [r7, #28]
 80199f4:	08da      	lsrs	r2, r3, #3
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	3208      	adds	r2, #8
 80199fa:	69b9      	ldr	r1, [r7, #24]
 80199fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019a06:	69fb      	ldr	r3, [r7, #28]
 8019a08:	005b      	lsls	r3, r3, #1
 8019a0a:	2203      	movs	r2, #3
 8019a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a10:	43db      	mvns	r3, r3
 8019a12:	69ba      	ldr	r2, [r7, #24]
 8019a14:	4013      	ands	r3, r2
 8019a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	685b      	ldr	r3, [r3, #4]
 8019a1c:	f003 0203 	and.w	r2, r3, #3
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	005b      	lsls	r3, r3, #1
 8019a24:	fa02 f303 	lsl.w	r3, r2, r3
 8019a28:	69ba      	ldr	r2, [r7, #24]
 8019a2a:	4313      	orrs	r3, r2
 8019a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	69ba      	ldr	r2, [r7, #24]
 8019a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	685b      	ldr	r3, [r3, #4]
 8019a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	f000 80ae 	beq.w	8019b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019a42:	2300      	movs	r3, #0
 8019a44:	60fb      	str	r3, [r7, #12]
 8019a46:	4b5d      	ldr	r3, [pc, #372]	; (8019bbc <HAL_GPIO_Init+0x300>)
 8019a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a4a:	4a5c      	ldr	r2, [pc, #368]	; (8019bbc <HAL_GPIO_Init+0x300>)
 8019a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019a50:	6453      	str	r3, [r2, #68]	; 0x44
 8019a52:	4b5a      	ldr	r3, [pc, #360]	; (8019bbc <HAL_GPIO_Init+0x300>)
 8019a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019a5a:	60fb      	str	r3, [r7, #12]
 8019a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019a5e:	4a58      	ldr	r2, [pc, #352]	; (8019bc0 <HAL_GPIO_Init+0x304>)
 8019a60:	69fb      	ldr	r3, [r7, #28]
 8019a62:	089b      	lsrs	r3, r3, #2
 8019a64:	3302      	adds	r3, #2
 8019a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019a6c:	69fb      	ldr	r3, [r7, #28]
 8019a6e:	f003 0303 	and.w	r3, r3, #3
 8019a72:	009b      	lsls	r3, r3, #2
 8019a74:	220f      	movs	r2, #15
 8019a76:	fa02 f303 	lsl.w	r3, r2, r3
 8019a7a:	43db      	mvns	r3, r3
 8019a7c:	69ba      	ldr	r2, [r7, #24]
 8019a7e:	4013      	ands	r3, r2
 8019a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	4a4f      	ldr	r2, [pc, #316]	; (8019bc4 <HAL_GPIO_Init+0x308>)
 8019a86:	4293      	cmp	r3, r2
 8019a88:	d025      	beq.n	8019ad6 <HAL_GPIO_Init+0x21a>
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	4a4e      	ldr	r2, [pc, #312]	; (8019bc8 <HAL_GPIO_Init+0x30c>)
 8019a8e:	4293      	cmp	r3, r2
 8019a90:	d01f      	beq.n	8019ad2 <HAL_GPIO_Init+0x216>
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	4a4d      	ldr	r2, [pc, #308]	; (8019bcc <HAL_GPIO_Init+0x310>)
 8019a96:	4293      	cmp	r3, r2
 8019a98:	d019      	beq.n	8019ace <HAL_GPIO_Init+0x212>
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	4a4c      	ldr	r2, [pc, #304]	; (8019bd0 <HAL_GPIO_Init+0x314>)
 8019a9e:	4293      	cmp	r3, r2
 8019aa0:	d013      	beq.n	8019aca <HAL_GPIO_Init+0x20e>
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	4a4b      	ldr	r2, [pc, #300]	; (8019bd4 <HAL_GPIO_Init+0x318>)
 8019aa6:	4293      	cmp	r3, r2
 8019aa8:	d00d      	beq.n	8019ac6 <HAL_GPIO_Init+0x20a>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	4a4a      	ldr	r2, [pc, #296]	; (8019bd8 <HAL_GPIO_Init+0x31c>)
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d007      	beq.n	8019ac2 <HAL_GPIO_Init+0x206>
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	4a49      	ldr	r2, [pc, #292]	; (8019bdc <HAL_GPIO_Init+0x320>)
 8019ab6:	4293      	cmp	r3, r2
 8019ab8:	d101      	bne.n	8019abe <HAL_GPIO_Init+0x202>
 8019aba:	2306      	movs	r3, #6
 8019abc:	e00c      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019abe:	2307      	movs	r3, #7
 8019ac0:	e00a      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019ac2:	2305      	movs	r3, #5
 8019ac4:	e008      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019ac6:	2304      	movs	r3, #4
 8019ac8:	e006      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019aca:	2303      	movs	r3, #3
 8019acc:	e004      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019ace:	2302      	movs	r3, #2
 8019ad0:	e002      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	e000      	b.n	8019ad8 <HAL_GPIO_Init+0x21c>
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	69fa      	ldr	r2, [r7, #28]
 8019ada:	f002 0203 	and.w	r2, r2, #3
 8019ade:	0092      	lsls	r2, r2, #2
 8019ae0:	4093      	lsls	r3, r2
 8019ae2:	69ba      	ldr	r2, [r7, #24]
 8019ae4:	4313      	orrs	r3, r2
 8019ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019ae8:	4935      	ldr	r1, [pc, #212]	; (8019bc0 <HAL_GPIO_Init+0x304>)
 8019aea:	69fb      	ldr	r3, [r7, #28]
 8019aec:	089b      	lsrs	r3, r3, #2
 8019aee:	3302      	adds	r3, #2
 8019af0:	69ba      	ldr	r2, [r7, #24]
 8019af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019af6:	4b3a      	ldr	r3, [pc, #232]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019afc:	693b      	ldr	r3, [r7, #16]
 8019afe:	43db      	mvns	r3, r3
 8019b00:	69ba      	ldr	r2, [r7, #24]
 8019b02:	4013      	ands	r3, r2
 8019b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	685b      	ldr	r3, [r3, #4]
 8019b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d003      	beq.n	8019b1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019b12:	69ba      	ldr	r2, [r7, #24]
 8019b14:	693b      	ldr	r3, [r7, #16]
 8019b16:	4313      	orrs	r3, r2
 8019b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019b1a:	4a31      	ldr	r2, [pc, #196]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b1c:	69bb      	ldr	r3, [r7, #24]
 8019b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019b20:	4b2f      	ldr	r3, [pc, #188]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b22:	685b      	ldr	r3, [r3, #4]
 8019b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019b26:	693b      	ldr	r3, [r7, #16]
 8019b28:	43db      	mvns	r3, r3
 8019b2a:	69ba      	ldr	r2, [r7, #24]
 8019b2c:	4013      	ands	r3, r2
 8019b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	685b      	ldr	r3, [r3, #4]
 8019b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d003      	beq.n	8019b44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019b3c:	69ba      	ldr	r2, [r7, #24]
 8019b3e:	693b      	ldr	r3, [r7, #16]
 8019b40:	4313      	orrs	r3, r2
 8019b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019b44:	4a26      	ldr	r2, [pc, #152]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b46:	69bb      	ldr	r3, [r7, #24]
 8019b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019b4a:	4b25      	ldr	r3, [pc, #148]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b4c:	689b      	ldr	r3, [r3, #8]
 8019b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019b50:	693b      	ldr	r3, [r7, #16]
 8019b52:	43db      	mvns	r3, r3
 8019b54:	69ba      	ldr	r2, [r7, #24]
 8019b56:	4013      	ands	r3, r2
 8019b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8019b5a:	683b      	ldr	r3, [r7, #0]
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d003      	beq.n	8019b6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019b66:	69ba      	ldr	r2, [r7, #24]
 8019b68:	693b      	ldr	r3, [r7, #16]
 8019b6a:	4313      	orrs	r3, r2
 8019b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019b6e:	4a1c      	ldr	r2, [pc, #112]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b70:	69bb      	ldr	r3, [r7, #24]
 8019b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019b74:	4b1a      	ldr	r3, [pc, #104]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b76:	68db      	ldr	r3, [r3, #12]
 8019b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019b7a:	693b      	ldr	r3, [r7, #16]
 8019b7c:	43db      	mvns	r3, r3
 8019b7e:	69ba      	ldr	r2, [r7, #24]
 8019b80:	4013      	ands	r3, r2
 8019b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	685b      	ldr	r3, [r3, #4]
 8019b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d003      	beq.n	8019b98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019b90:	69ba      	ldr	r2, [r7, #24]
 8019b92:	693b      	ldr	r3, [r7, #16]
 8019b94:	4313      	orrs	r3, r2
 8019b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019b98:	4a11      	ldr	r2, [pc, #68]	; (8019be0 <HAL_GPIO_Init+0x324>)
 8019b9a:	69bb      	ldr	r3, [r7, #24]
 8019b9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019b9e:	69fb      	ldr	r3, [r7, #28]
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	61fb      	str	r3, [r7, #28]
 8019ba4:	69fb      	ldr	r3, [r7, #28]
 8019ba6:	2b0f      	cmp	r3, #15
 8019ba8:	f67f ae96 	bls.w	80198d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019bac:	bf00      	nop
 8019bae:	bf00      	nop
 8019bb0:	3724      	adds	r7, #36	; 0x24
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb8:	4770      	bx	lr
 8019bba:	bf00      	nop
 8019bbc:	40023800 	.word	0x40023800
 8019bc0:	40013800 	.word	0x40013800
 8019bc4:	40020000 	.word	0x40020000
 8019bc8:	40020400 	.word	0x40020400
 8019bcc:	40020800 	.word	0x40020800
 8019bd0:	40020c00 	.word	0x40020c00
 8019bd4:	40021000 	.word	0x40021000
 8019bd8:	40021400 	.word	0x40021400
 8019bdc:	40021800 	.word	0x40021800
 8019be0:	40013c00 	.word	0x40013c00

08019be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019be4:	b480      	push	{r7}
 8019be6:	b085      	sub	sp, #20
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	460b      	mov	r3, r1
 8019bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	691a      	ldr	r2, [r3, #16]
 8019bf4:	887b      	ldrh	r3, [r7, #2]
 8019bf6:	4013      	ands	r3, r2
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d002      	beq.n	8019c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	73fb      	strb	r3, [r7, #15]
 8019c00:	e001      	b.n	8019c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019c02:	2300      	movs	r3, #0
 8019c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8019c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c08:	4618      	mov	r0, r3
 8019c0a:	3714      	adds	r7, #20
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c12:	4770      	bx	lr

08019c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019c14:	b480      	push	{r7}
 8019c16:	b083      	sub	sp, #12
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	460b      	mov	r3, r1
 8019c1e:	807b      	strh	r3, [r7, #2]
 8019c20:	4613      	mov	r3, r2
 8019c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019c24:	787b      	ldrb	r3, [r7, #1]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d003      	beq.n	8019c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019c2a:	887a      	ldrh	r2, [r7, #2]
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019c30:	e003      	b.n	8019c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019c32:	887b      	ldrh	r3, [r7, #2]
 8019c34:	041a      	lsls	r2, r3, #16
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	619a      	str	r2, [r3, #24]
}
 8019c3a:	bf00      	nop
 8019c3c:	370c      	adds	r7, #12
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c44:	4770      	bx	lr

08019c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c48:	b08f      	sub	sp, #60	; 0x3c
 8019c4a:	af0a      	add	r7, sp, #40	; 0x28
 8019c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d101      	bne.n	8019c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019c54:	2301      	movs	r3, #1
 8019c56:	e116      	b.n	8019e86 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d106      	bne.n	8019c78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019c72:	6878      	ldr	r0, [r7, #4]
 8019c74:	f008 fc38 	bl	80224e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2203      	movs	r2, #3
 8019c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d102      	bne.n	8019c92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	4618      	mov	r0, r3
 8019c98:	f004 f8af 	bl	801ddfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	603b      	str	r3, [r7, #0]
 8019ca2:	687e      	ldr	r6, [r7, #4]
 8019ca4:	466d      	mov	r5, sp
 8019ca6:	f106 0410 	add.w	r4, r6, #16
 8019caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8019cba:	1d33      	adds	r3, r6, #4
 8019cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019cbe:	6838      	ldr	r0, [r7, #0]
 8019cc0:	f003 ff86 	bl	801dbd0 <USB_CoreInit>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d005      	beq.n	8019cd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	2202      	movs	r2, #2
 8019cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	e0d7      	b.n	8019e86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	2100      	movs	r1, #0
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f004 f89d 	bl	801de1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	73fb      	strb	r3, [r7, #15]
 8019ce6:	e04a      	b.n	8019d7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019ce8:	7bfa      	ldrb	r2, [r7, #15]
 8019cea:	6879      	ldr	r1, [r7, #4]
 8019cec:	4613      	mov	r3, r2
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	1a9b      	subs	r3, r3, r2
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	440b      	add	r3, r1
 8019cf6:	333d      	adds	r3, #61	; 0x3d
 8019cf8:	2201      	movs	r2, #1
 8019cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019cfc:	7bfa      	ldrb	r2, [r7, #15]
 8019cfe:	6879      	ldr	r1, [r7, #4]
 8019d00:	4613      	mov	r3, r2
 8019d02:	00db      	lsls	r3, r3, #3
 8019d04:	1a9b      	subs	r3, r3, r2
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	440b      	add	r3, r1
 8019d0a:	333c      	adds	r3, #60	; 0x3c
 8019d0c:	7bfa      	ldrb	r2, [r7, #15]
 8019d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019d10:	7bfa      	ldrb	r2, [r7, #15]
 8019d12:	7bfb      	ldrb	r3, [r7, #15]
 8019d14:	b298      	uxth	r0, r3
 8019d16:	6879      	ldr	r1, [r7, #4]
 8019d18:	4613      	mov	r3, r2
 8019d1a:	00db      	lsls	r3, r3, #3
 8019d1c:	1a9b      	subs	r3, r3, r2
 8019d1e:	009b      	lsls	r3, r3, #2
 8019d20:	440b      	add	r3, r1
 8019d22:	3342      	adds	r3, #66	; 0x42
 8019d24:	4602      	mov	r2, r0
 8019d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019d28:	7bfa      	ldrb	r2, [r7, #15]
 8019d2a:	6879      	ldr	r1, [r7, #4]
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	00db      	lsls	r3, r3, #3
 8019d30:	1a9b      	subs	r3, r3, r2
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	440b      	add	r3, r1
 8019d36:	333f      	adds	r3, #63	; 0x3f
 8019d38:	2200      	movs	r2, #0
 8019d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019d3c:	7bfa      	ldrb	r2, [r7, #15]
 8019d3e:	6879      	ldr	r1, [r7, #4]
 8019d40:	4613      	mov	r3, r2
 8019d42:	00db      	lsls	r3, r3, #3
 8019d44:	1a9b      	subs	r3, r3, r2
 8019d46:	009b      	lsls	r3, r3, #2
 8019d48:	440b      	add	r3, r1
 8019d4a:	3344      	adds	r3, #68	; 0x44
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019d50:	7bfa      	ldrb	r2, [r7, #15]
 8019d52:	6879      	ldr	r1, [r7, #4]
 8019d54:	4613      	mov	r3, r2
 8019d56:	00db      	lsls	r3, r3, #3
 8019d58:	1a9b      	subs	r3, r3, r2
 8019d5a:	009b      	lsls	r3, r3, #2
 8019d5c:	440b      	add	r3, r1
 8019d5e:	3348      	adds	r3, #72	; 0x48
 8019d60:	2200      	movs	r2, #0
 8019d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019d64:	7bfa      	ldrb	r2, [r7, #15]
 8019d66:	6879      	ldr	r1, [r7, #4]
 8019d68:	4613      	mov	r3, r2
 8019d6a:	00db      	lsls	r3, r3, #3
 8019d6c:	1a9b      	subs	r3, r3, r2
 8019d6e:	009b      	lsls	r3, r3, #2
 8019d70:	440b      	add	r3, r1
 8019d72:	3350      	adds	r3, #80	; 0x50
 8019d74:	2200      	movs	r2, #0
 8019d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d78:	7bfb      	ldrb	r3, [r7, #15]
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	73fb      	strb	r3, [r7, #15]
 8019d7e:	7bfa      	ldrb	r2, [r7, #15]
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	685b      	ldr	r3, [r3, #4]
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d3af      	bcc.n	8019ce8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019d88:	2300      	movs	r3, #0
 8019d8a:	73fb      	strb	r3, [r7, #15]
 8019d8c:	e044      	b.n	8019e18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019d8e:	7bfa      	ldrb	r2, [r7, #15]
 8019d90:	6879      	ldr	r1, [r7, #4]
 8019d92:	4613      	mov	r3, r2
 8019d94:	00db      	lsls	r3, r3, #3
 8019d96:	1a9b      	subs	r3, r3, r2
 8019d98:	009b      	lsls	r3, r3, #2
 8019d9a:	440b      	add	r3, r1
 8019d9c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019da0:	2200      	movs	r2, #0
 8019da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019da4:	7bfa      	ldrb	r2, [r7, #15]
 8019da6:	6879      	ldr	r1, [r7, #4]
 8019da8:	4613      	mov	r3, r2
 8019daa:	00db      	lsls	r3, r3, #3
 8019dac:	1a9b      	subs	r3, r3, r2
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	440b      	add	r3, r1
 8019db2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019db6:	7bfa      	ldrb	r2, [r7, #15]
 8019db8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019dba:	7bfa      	ldrb	r2, [r7, #15]
 8019dbc:	6879      	ldr	r1, [r7, #4]
 8019dbe:	4613      	mov	r3, r2
 8019dc0:	00db      	lsls	r3, r3, #3
 8019dc2:	1a9b      	subs	r3, r3, r2
 8019dc4:	009b      	lsls	r3, r3, #2
 8019dc6:	440b      	add	r3, r1
 8019dc8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019dcc:	2200      	movs	r2, #0
 8019dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019dd0:	7bfa      	ldrb	r2, [r7, #15]
 8019dd2:	6879      	ldr	r1, [r7, #4]
 8019dd4:	4613      	mov	r3, r2
 8019dd6:	00db      	lsls	r3, r3, #3
 8019dd8:	1a9b      	subs	r3, r3, r2
 8019dda:	009b      	lsls	r3, r3, #2
 8019ddc:	440b      	add	r3, r1
 8019dde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019de2:	2200      	movs	r2, #0
 8019de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019de6:	7bfa      	ldrb	r2, [r7, #15]
 8019de8:	6879      	ldr	r1, [r7, #4]
 8019dea:	4613      	mov	r3, r2
 8019dec:	00db      	lsls	r3, r3, #3
 8019dee:	1a9b      	subs	r3, r3, r2
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	440b      	add	r3, r1
 8019df4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019df8:	2200      	movs	r2, #0
 8019dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019dfc:	7bfa      	ldrb	r2, [r7, #15]
 8019dfe:	6879      	ldr	r1, [r7, #4]
 8019e00:	4613      	mov	r3, r2
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	1a9b      	subs	r3, r3, r2
 8019e06:	009b      	lsls	r3, r3, #2
 8019e08:	440b      	add	r3, r1
 8019e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019e0e:	2200      	movs	r2, #0
 8019e10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019e12:	7bfb      	ldrb	r3, [r7, #15]
 8019e14:	3301      	adds	r3, #1
 8019e16:	73fb      	strb	r3, [r7, #15]
 8019e18:	7bfa      	ldrb	r2, [r7, #15]
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	685b      	ldr	r3, [r3, #4]
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	d3b5      	bcc.n	8019d8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	603b      	str	r3, [r7, #0]
 8019e28:	687e      	ldr	r6, [r7, #4]
 8019e2a:	466d      	mov	r5, sp
 8019e2c:	f106 0410 	add.w	r4, r6, #16
 8019e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8019e40:	1d33      	adds	r3, r6, #4
 8019e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019e44:	6838      	ldr	r0, [r7, #0]
 8019e46:	f004 f835 	bl	801deb4 <USB_DevInit>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d005      	beq.n	8019e5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2202      	movs	r2, #2
 8019e54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019e58:	2301      	movs	r3, #1
 8019e5a:	e014      	b.n	8019e86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2200      	movs	r2, #0
 8019e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2201      	movs	r2, #1
 8019e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e70:	2b01      	cmp	r3, #1
 8019e72:	d102      	bne.n	8019e7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019e74:	6878      	ldr	r0, [r7, #4]
 8019e76:	f001 f8bf 	bl	801aff8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f005 f8a4 	bl	801efcc <USB_DevDisconnect>

  return HAL_OK;
 8019e84:	2300      	movs	r3, #0
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3714      	adds	r7, #20
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019e8e:	b580      	push	{r7, lr}
 8019e90:	b084      	sub	sp, #16
 8019e92:	af00      	add	r7, sp, #0
 8019e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d101      	bne.n	8019eaa <HAL_PCD_Start+0x1c>
 8019ea6:	2302      	movs	r3, #2
 8019ea8:	e020      	b.n	8019eec <HAL_PCD_Start+0x5e>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	2201      	movs	r2, #1
 8019eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eb6:	2b01      	cmp	r3, #1
 8019eb8:	d109      	bne.n	8019ece <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019ebe:	2b01      	cmp	r3, #1
 8019ec0:	d005      	beq.n	8019ece <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ec6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f003 ff80 	bl	801ddd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	4618      	mov	r0, r3
 8019ede:	f005 f854 	bl	801ef8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8019eea:	2300      	movs	r3, #0
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	3710      	adds	r7, #16
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}

08019ef4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019ef4:	b590      	push	{r4, r7, lr}
 8019ef6:	b08d      	sub	sp, #52	; 0x34
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f02:	6a3b      	ldr	r3, [r7, #32]
 8019f04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f005 f912 	bl	801f134 <USB_GetMode>
 8019f10:	4603      	mov	r3, r0
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	f040 83ca 	bne.w	801a6ac <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f005 f876 	bl	801f00e <USB_ReadInterrupts>
 8019f22:	4603      	mov	r3, r0
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	f000 83c0 	beq.w	801a6aa <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f005 f86d 	bl	801f00e <USB_ReadInterrupts>
 8019f34:	4603      	mov	r3, r0
 8019f36:	f003 0302 	and.w	r3, r3, #2
 8019f3a:	2b02      	cmp	r3, #2
 8019f3c:	d107      	bne.n	8019f4e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	695a      	ldr	r2, [r3, #20]
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f002 0202 	and.w	r2, r2, #2
 8019f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	4618      	mov	r0, r3
 8019f54:	f005 f85b 	bl	801f00e <USB_ReadInterrupts>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	f003 0310 	and.w	r3, r3, #16
 8019f5e:	2b10      	cmp	r3, #16
 8019f60:	d161      	bne.n	801a026 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	699a      	ldr	r2, [r3, #24]
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	f022 0210 	bic.w	r2, r2, #16
 8019f70:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8019f72:	6a3b      	ldr	r3, [r7, #32]
 8019f74:	6a1b      	ldr	r3, [r3, #32]
 8019f76:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8019f78:	69bb      	ldr	r3, [r7, #24]
 8019f7a:	f003 020f 	and.w	r2, r3, #15
 8019f7e:	4613      	mov	r3, r2
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	1a9b      	subs	r3, r3, r2
 8019f84:	009b      	lsls	r3, r3, #2
 8019f86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8019f8a:	687a      	ldr	r2, [r7, #4]
 8019f8c:	4413      	add	r3, r2
 8019f8e:	3304      	adds	r3, #4
 8019f90:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019f92:	69bb      	ldr	r3, [r7, #24]
 8019f94:	0c5b      	lsrs	r3, r3, #17
 8019f96:	f003 030f 	and.w	r3, r3, #15
 8019f9a:	2b02      	cmp	r3, #2
 8019f9c:	d124      	bne.n	8019fe8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019f9e:	69ba      	ldr	r2, [r7, #24]
 8019fa0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019fa4:	4013      	ands	r3, r2
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d035      	beq.n	801a016 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019fae:	69bb      	ldr	r3, [r7, #24]
 8019fb0:	091b      	lsrs	r3, r3, #4
 8019fb2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	461a      	mov	r2, r3
 8019fbc:	6a38      	ldr	r0, [r7, #32]
 8019fbe:	f004 fe92 	bl	801ece6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019fc2:	697b      	ldr	r3, [r7, #20]
 8019fc4:	68da      	ldr	r2, [r3, #12]
 8019fc6:	69bb      	ldr	r3, [r7, #24]
 8019fc8:	091b      	lsrs	r3, r3, #4
 8019fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fce:	441a      	add	r2, r3
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019fd4:	697b      	ldr	r3, [r7, #20]
 8019fd6:	699a      	ldr	r2, [r3, #24]
 8019fd8:	69bb      	ldr	r3, [r7, #24]
 8019fda:	091b      	lsrs	r3, r3, #4
 8019fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fe0:	441a      	add	r2, r3
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	619a      	str	r2, [r3, #24]
 8019fe6:	e016      	b.n	801a016 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8019fe8:	69bb      	ldr	r3, [r7, #24]
 8019fea:	0c5b      	lsrs	r3, r3, #17
 8019fec:	f003 030f 	and.w	r3, r3, #15
 8019ff0:	2b06      	cmp	r3, #6
 8019ff2:	d110      	bne.n	801a016 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019ffa:	2208      	movs	r2, #8
 8019ffc:	4619      	mov	r1, r3
 8019ffe:	6a38      	ldr	r0, [r7, #32]
 801a000:	f004 fe71 	bl	801ece6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a004:	697b      	ldr	r3, [r7, #20]
 801a006:	699a      	ldr	r2, [r3, #24]
 801a008:	69bb      	ldr	r3, [r7, #24]
 801a00a:	091b      	lsrs	r3, r3, #4
 801a00c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a010:	441a      	add	r2, r3
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	699a      	ldr	r2, [r3, #24]
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	f042 0210 	orr.w	r2, r2, #16
 801a024:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	4618      	mov	r0, r3
 801a02c:	f004 ffef 	bl	801f00e <USB_ReadInterrupts>
 801a030:	4603      	mov	r3, r0
 801a032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a036:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a03a:	d16e      	bne.n	801a11a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801a03c:	2300      	movs	r3, #0
 801a03e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	4618      	mov	r0, r3
 801a046:	f004 fff5 	bl	801f034 <USB_ReadDevAllOutEpInterrupt>
 801a04a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801a04c:	e062      	b.n	801a114 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a050:	f003 0301 	and.w	r3, r3, #1
 801a054:	2b00      	cmp	r3, #0
 801a056:	d057      	beq.n	801a108 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a05e:	b2d2      	uxtb	r2, r2
 801a060:	4611      	mov	r1, r2
 801a062:	4618      	mov	r0, r3
 801a064:	f005 f81a 	bl	801f09c <USB_ReadDevOutEPInterrupt>
 801a068:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a06a:	693b      	ldr	r3, [r7, #16]
 801a06c:	f003 0301 	and.w	r3, r3, #1
 801a070:	2b00      	cmp	r3, #0
 801a072:	d00c      	beq.n	801a08e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a076:	015a      	lsls	r2, r3, #5
 801a078:	69fb      	ldr	r3, [r7, #28]
 801a07a:	4413      	add	r3, r2
 801a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a080:	461a      	mov	r2, r3
 801a082:	2301      	movs	r3, #1
 801a084:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	f000 fe0b 	bl	801aca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a08e:	693b      	ldr	r3, [r7, #16]
 801a090:	f003 0308 	and.w	r3, r3, #8
 801a094:	2b00      	cmp	r3, #0
 801a096:	d00c      	beq.n	801a0b2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a09a:	015a      	lsls	r2, r3, #5
 801a09c:	69fb      	ldr	r3, [r7, #28]
 801a09e:	4413      	add	r3, r2
 801a0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0a4:	461a      	mov	r2, r3
 801a0a6:	2308      	movs	r3, #8
 801a0a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a0aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f000 ff05 	bl	801aebc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	f003 0310 	and.w	r3, r3, #16
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d008      	beq.n	801a0ce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0be:	015a      	lsls	r2, r3, #5
 801a0c0:	69fb      	ldr	r3, [r7, #28]
 801a0c2:	4413      	add	r3, r2
 801a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	2310      	movs	r3, #16
 801a0cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	f003 0320 	and.w	r3, r3, #32
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d008      	beq.n	801a0ea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0da:	015a      	lsls	r2, r3, #5
 801a0dc:	69fb      	ldr	r3, [r7, #28]
 801a0de:	4413      	add	r3, r2
 801a0e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	2320      	movs	r3, #32
 801a0e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a0ea:	693b      	ldr	r3, [r7, #16]
 801a0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d009      	beq.n	801a108 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f6:	015a      	lsls	r2, r3, #5
 801a0f8:	69fb      	ldr	r3, [r7, #28]
 801a0fa:	4413      	add	r3, r2
 801a0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a100:	461a      	mov	r2, r3
 801a102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a106:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10a:	3301      	adds	r3, #1
 801a10c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a110:	085b      	lsrs	r3, r3, #1
 801a112:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a116:	2b00      	cmp	r3, #0
 801a118:	d199      	bne.n	801a04e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	4618      	mov	r0, r3
 801a120:	f004 ff75 	bl	801f00e <USB_ReadInterrupts>
 801a124:	4603      	mov	r3, r0
 801a126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a12a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a12e:	f040 80c0 	bne.w	801a2b2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	4618      	mov	r0, r3
 801a138:	f004 ff96 	bl	801f068 <USB_ReadDevAllInEpInterrupt>
 801a13c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a13e:	2300      	movs	r3, #0
 801a140:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a142:	e0b2      	b.n	801a2aa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a146:	f003 0301 	and.w	r3, r3, #1
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	f000 80a7 	beq.w	801a29e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a156:	b2d2      	uxtb	r2, r2
 801a158:	4611      	mov	r1, r2
 801a15a:	4618      	mov	r0, r3
 801a15c:	f004 ffbc 	bl	801f0d8 <USB_ReadDevInEPInterrupt>
 801a160:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a162:	693b      	ldr	r3, [r7, #16]
 801a164:	f003 0301 	and.w	r3, r3, #1
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d057      	beq.n	801a21c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16e:	f003 030f 	and.w	r3, r3, #15
 801a172:	2201      	movs	r2, #1
 801a174:	fa02 f303 	lsl.w	r3, r2, r3
 801a178:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a17a:	69fb      	ldr	r3, [r7, #28]
 801a17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	43db      	mvns	r3, r3
 801a186:	69f9      	ldr	r1, [r7, #28]
 801a188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a18c:	4013      	ands	r3, r2
 801a18e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a192:	015a      	lsls	r2, r3, #5
 801a194:	69fb      	ldr	r3, [r7, #28]
 801a196:	4413      	add	r3, r2
 801a198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a19c:	461a      	mov	r2, r3
 801a19e:	2301      	movs	r3, #1
 801a1a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	691b      	ldr	r3, [r3, #16]
 801a1a6:	2b01      	cmp	r3, #1
 801a1a8:	d132      	bne.n	801a210 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a1aa:	6879      	ldr	r1, [r7, #4]
 801a1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1ae:	4613      	mov	r3, r2
 801a1b0:	00db      	lsls	r3, r3, #3
 801a1b2:	1a9b      	subs	r3, r3, r2
 801a1b4:	009b      	lsls	r3, r3, #2
 801a1b6:	440b      	add	r3, r1
 801a1b8:	3348      	adds	r3, #72	; 0x48
 801a1ba:	6819      	ldr	r1, [r3, #0]
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1c0:	4613      	mov	r3, r2
 801a1c2:	00db      	lsls	r3, r3, #3
 801a1c4:	1a9b      	subs	r3, r3, r2
 801a1c6:	009b      	lsls	r3, r3, #2
 801a1c8:	4403      	add	r3, r0
 801a1ca:	3344      	adds	r3, #68	; 0x44
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	4419      	add	r1, r3
 801a1d0:	6878      	ldr	r0, [r7, #4]
 801a1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1d4:	4613      	mov	r3, r2
 801a1d6:	00db      	lsls	r3, r3, #3
 801a1d8:	1a9b      	subs	r3, r3, r2
 801a1da:	009b      	lsls	r3, r3, #2
 801a1dc:	4403      	add	r3, r0
 801a1de:	3348      	adds	r3, #72	; 0x48
 801a1e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d113      	bne.n	801a210 <HAL_PCD_IRQHandler+0x31c>
 801a1e8:	6879      	ldr	r1, [r7, #4]
 801a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1ec:	4613      	mov	r3, r2
 801a1ee:	00db      	lsls	r3, r3, #3
 801a1f0:	1a9b      	subs	r3, r3, r2
 801a1f2:	009b      	lsls	r3, r3, #2
 801a1f4:	440b      	add	r3, r1
 801a1f6:	3350      	adds	r3, #80	; 0x50
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d108      	bne.n	801a210 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	6818      	ldr	r0, [r3, #0]
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a208:	461a      	mov	r2, r3
 801a20a:	2101      	movs	r1, #1
 801a20c:	f004 ffc4 	bl	801f198 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a212:	b2db      	uxtb	r3, r3
 801a214:	4619      	mov	r1, r3
 801a216:	6878      	ldr	r0, [r7, #4]
 801a218:	f008 fa09 	bl	802262e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	f003 0308 	and.w	r3, r3, #8
 801a222:	2b00      	cmp	r3, #0
 801a224:	d008      	beq.n	801a238 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a228:	015a      	lsls	r2, r3, #5
 801a22a:	69fb      	ldr	r3, [r7, #28]
 801a22c:	4413      	add	r3, r2
 801a22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a232:	461a      	mov	r2, r3
 801a234:	2308      	movs	r3, #8
 801a236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a238:	693b      	ldr	r3, [r7, #16]
 801a23a:	f003 0310 	and.w	r3, r3, #16
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d008      	beq.n	801a254 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a244:	015a      	lsls	r2, r3, #5
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	4413      	add	r3, r2
 801a24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a24e:	461a      	mov	r2, r3
 801a250:	2310      	movs	r3, #16
 801a252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a254:	693b      	ldr	r3, [r7, #16]
 801a256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d008      	beq.n	801a270 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a260:	015a      	lsls	r2, r3, #5
 801a262:	69fb      	ldr	r3, [r7, #28]
 801a264:	4413      	add	r3, r2
 801a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a26a:	461a      	mov	r2, r3
 801a26c:	2340      	movs	r3, #64	; 0x40
 801a26e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a270:	693b      	ldr	r3, [r7, #16]
 801a272:	f003 0302 	and.w	r3, r3, #2
 801a276:	2b00      	cmp	r3, #0
 801a278:	d008      	beq.n	801a28c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a27c:	015a      	lsls	r2, r3, #5
 801a27e:	69fb      	ldr	r3, [r7, #28]
 801a280:	4413      	add	r3, r2
 801a282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a286:	461a      	mov	r2, r3
 801a288:	2302      	movs	r3, #2
 801a28a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a292:	2b00      	cmp	r3, #0
 801a294:	d003      	beq.n	801a29e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f000 fc75 	bl	801ab88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a0:	3301      	adds	r3, #1
 801a2a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2a6:	085b      	lsrs	r3, r3, #1
 801a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	f47f af49 	bne.w	801a144 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f004 fea9 	bl	801f00e <USB_ReadInterrupts>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a2c6:	d122      	bne.n	801a30e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a2c8:	69fb      	ldr	r3, [r7, #28]
 801a2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	69fa      	ldr	r2, [r7, #28]
 801a2d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a2d6:	f023 0301 	bic.w	r3, r3, #1
 801a2da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	d108      	bne.n	801a2f8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a2ee:	2100      	movs	r1, #0
 801a2f0:	6878      	ldr	r0, [r7, #4]
 801a2f2:	f008 fc0b 	bl	8022b0c <HAL_PCDEx_LPM_Callback>
 801a2f6:	e002      	b.n	801a2fe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f008 fa0f 	bl	802271c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	695a      	ldr	r2, [r3, #20]
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a30c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	4618      	mov	r0, r3
 801a314:	f004 fe7b 	bl	801f00e <USB_ReadInterrupts>
 801a318:	4603      	mov	r3, r0
 801a31a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a31e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a322:	d112      	bne.n	801a34a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a324:	69fb      	ldr	r3, [r7, #28]
 801a326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a32a:	689b      	ldr	r3, [r3, #8]
 801a32c:	f003 0301 	and.w	r3, r3, #1
 801a330:	2b01      	cmp	r3, #1
 801a332:	d102      	bne.n	801a33a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a334:	6878      	ldr	r0, [r7, #4]
 801a336:	f008 f9cb 	bl	80226d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	695a      	ldr	r2, [r3, #20]
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a348:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	4618      	mov	r0, r3
 801a350:	f004 fe5d 	bl	801f00e <USB_ReadInterrupts>
 801a354:	4603      	mov	r3, r0
 801a356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a35a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a35e:	d121      	bne.n	801a3a4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	695a      	ldr	r2, [r3, #20]
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a36e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a376:	2b00      	cmp	r3, #0
 801a378:	d111      	bne.n	801a39e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	2201      	movs	r2, #1
 801a37e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a388:	089b      	lsrs	r3, r3, #2
 801a38a:	f003 020f 	and.w	r2, r3, #15
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a394:	2101      	movs	r1, #1
 801a396:	6878      	ldr	r0, [r7, #4]
 801a398:	f008 fbb8 	bl	8022b0c <HAL_PCDEx_LPM_Callback>
 801a39c:	e002      	b.n	801a3a4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f008 f996 	bl	80226d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f004 fe30 	bl	801f00e <USB_ReadInterrupts>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a3b8:	f040 80c7 	bne.w	801a54a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a3bc:	69fb      	ldr	r3, [r7, #28]
 801a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3c2:	685b      	ldr	r3, [r3, #4]
 801a3c4:	69fa      	ldr	r2, [r7, #28]
 801a3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3ca:	f023 0301 	bic.w	r3, r3, #1
 801a3ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	2110      	movs	r1, #16
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f003 feca 	bl	801e170 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a3dc:	2300      	movs	r3, #0
 801a3de:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3e0:	e056      	b.n	801a490 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e4:	015a      	lsls	r2, r3, #5
 801a3e6:	69fb      	ldr	r3, [r7, #28]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ee:	461a      	mov	r2, r3
 801a3f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a3f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f8:	015a      	lsls	r2, r3, #5
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	4413      	add	r3, r2
 801a3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a406:	0151      	lsls	r1, r2, #5
 801a408:	69fa      	ldr	r2, [r7, #28]
 801a40a:	440a      	add	r2, r1
 801a40c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a414:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a418:	015a      	lsls	r2, r3, #5
 801a41a:	69fb      	ldr	r3, [r7, #28]
 801a41c:	4413      	add	r3, r2
 801a41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a426:	0151      	lsls	r1, r2, #5
 801a428:	69fa      	ldr	r2, [r7, #28]
 801a42a:	440a      	add	r2, r1
 801a42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a434:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a438:	015a      	lsls	r2, r3, #5
 801a43a:	69fb      	ldr	r3, [r7, #28]
 801a43c:	4413      	add	r3, r2
 801a43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a442:	461a      	mov	r2, r3
 801a444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a448:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a44c:	015a      	lsls	r2, r3, #5
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	4413      	add	r3, r2
 801a452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a45a:	0151      	lsls	r1, r2, #5
 801a45c:	69fa      	ldr	r2, [r7, #28]
 801a45e:	440a      	add	r2, r1
 801a460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a468:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a46c:	015a      	lsls	r2, r3, #5
 801a46e:	69fb      	ldr	r3, [r7, #28]
 801a470:	4413      	add	r3, r2
 801a472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a47a:	0151      	lsls	r1, r2, #5
 801a47c:	69fa      	ldr	r2, [r7, #28]
 801a47e:	440a      	add	r2, r1
 801a480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a488:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a48c:	3301      	adds	r3, #1
 801a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	685b      	ldr	r3, [r3, #4]
 801a494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a496:	429a      	cmp	r2, r3
 801a498:	d3a3      	bcc.n	801a3e2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a49a:	69fb      	ldr	r3, [r7, #28]
 801a49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4a0:	69db      	ldr	r3, [r3, #28]
 801a4a2:	69fa      	ldr	r2, [r7, #28]
 801a4a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a4ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d016      	beq.n	801a4e4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a4b6:	69fb      	ldr	r3, [r7, #28]
 801a4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a4c0:	69fa      	ldr	r2, [r7, #28]
 801a4c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4c6:	f043 030b 	orr.w	r3, r3, #11
 801a4ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a4ce:	69fb      	ldr	r3, [r7, #28]
 801a4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4d6:	69fa      	ldr	r2, [r7, #28]
 801a4d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4dc:	f043 030b 	orr.w	r3, r3, #11
 801a4e0:	6453      	str	r3, [r2, #68]	; 0x44
 801a4e2:	e015      	b.n	801a510 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4ea:	695b      	ldr	r3, [r3, #20]
 801a4ec:	69fa      	ldr	r2, [r7, #28]
 801a4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a4f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a4fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a4fc:	69fb      	ldr	r3, [r7, #28]
 801a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a502:	691b      	ldr	r3, [r3, #16]
 801a504:	69fa      	ldr	r2, [r7, #28]
 801a506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a50a:	f043 030b 	orr.w	r3, r3, #11
 801a50e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a510:	69fb      	ldr	r3, [r7, #28]
 801a512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	69fa      	ldr	r2, [r7, #28]
 801a51a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a51e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a522:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	6818      	ldr	r0, [r3, #0]
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	691b      	ldr	r3, [r3, #16]
 801a52c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a534:	461a      	mov	r2, r3
 801a536:	f004 fe2f 	bl	801f198 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	695a      	ldr	r2, [r3, #20]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	4618      	mov	r0, r3
 801a550:	f004 fd5d 	bl	801f00e <USB_ReadInterrupts>
 801a554:	4603      	mov	r3, r0
 801a556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a55e:	d124      	bne.n	801a5aa <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	4618      	mov	r0, r3
 801a566:	f004 fdf3 	bl	801f150 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	4618      	mov	r0, r3
 801a570:	f003 fe5b 	bl	801e22a <USB_GetDevSpeed>
 801a574:	4603      	mov	r3, r0
 801a576:	461a      	mov	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681c      	ldr	r4, [r3, #0]
 801a580:	f000 fe94 	bl	801b2ac <HAL_RCC_GetHCLKFreq>
 801a584:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a58a:	b2db      	uxtb	r3, r3
 801a58c:	461a      	mov	r2, r3
 801a58e:	4620      	mov	r0, r4
 801a590:	f003 fb80 	bl	801dc94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a594:	6878      	ldr	r0, [r7, #4]
 801a596:	f008 f872 	bl	802267e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	695a      	ldr	r2, [r3, #20]
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a5a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f004 fd2d 	bl	801f00e <USB_ReadInterrupts>
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	f003 0308 	and.w	r3, r3, #8
 801a5ba:	2b08      	cmp	r3, #8
 801a5bc:	d10a      	bne.n	801a5d4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f008 f84f 	bl	8022662 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	695a      	ldr	r2, [r3, #20]
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	f002 0208 	and.w	r2, r2, #8
 801a5d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4618      	mov	r0, r3
 801a5da:	f004 fd18 	bl	801f00e <USB_ReadInterrupts>
 801a5de:	4603      	mov	r3, r0
 801a5e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a5e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a5e8:	d10f      	bne.n	801a60a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f0:	b2db      	uxtb	r3, r3
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	6878      	ldr	r0, [r7, #4]
 801a5f6:	f008 f8b1 	bl	802275c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	695a      	ldr	r2, [r3, #20]
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	4618      	mov	r0, r3
 801a610:	f004 fcfd 	bl	801f00e <USB_ReadInterrupts>
 801a614:	4603      	mov	r3, r0
 801a616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a61a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a61e:	d10f      	bne.n	801a640 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a620:	2300      	movs	r3, #0
 801a622:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a626:	b2db      	uxtb	r3, r3
 801a628:	4619      	mov	r1, r3
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f008 f884 	bl	8022738 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	695a      	ldr	r2, [r3, #20]
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a63e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	4618      	mov	r0, r3
 801a646:	f004 fce2 	bl	801f00e <USB_ReadInterrupts>
 801a64a:	4603      	mov	r3, r0
 801a64c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a654:	d10a      	bne.n	801a66c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a656:	6878      	ldr	r0, [r7, #4]
 801a658:	f008 f892 	bl	8022780 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	695a      	ldr	r2, [r3, #20]
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a66a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	4618      	mov	r0, r3
 801a672:	f004 fccc 	bl	801f00e <USB_ReadInterrupts>
 801a676:	4603      	mov	r3, r0
 801a678:	f003 0304 	and.w	r3, r3, #4
 801a67c:	2b04      	cmp	r3, #4
 801a67e:	d115      	bne.n	801a6ac <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	685b      	ldr	r3, [r3, #4]
 801a686:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a688:	69bb      	ldr	r3, [r7, #24]
 801a68a:	f003 0304 	and.w	r3, r3, #4
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d002      	beq.n	801a698 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a692:	6878      	ldr	r0, [r7, #4]
 801a694:	f008 f882 	bl	802279c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	6859      	ldr	r1, [r3, #4]
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	69ba      	ldr	r2, [r7, #24]
 801a6a4:	430a      	orrs	r2, r1
 801a6a6:	605a      	str	r2, [r3, #4]
 801a6a8:	e000      	b.n	801a6ac <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a6aa:	bf00      	nop
    }
  }
}
 801a6ac:	3734      	adds	r7, #52	; 0x34
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd90      	pop	{r4, r7, pc}

0801a6b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a6b2:	b580      	push	{r7, lr}
 801a6b4:	b082      	sub	sp, #8
 801a6b6:	af00      	add	r7, sp, #0
 801a6b8:	6078      	str	r0, [r7, #4]
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a6c4:	2b01      	cmp	r3, #1
 801a6c6:	d101      	bne.n	801a6cc <HAL_PCD_SetAddress+0x1a>
 801a6c8:	2302      	movs	r3, #2
 801a6ca:	e013      	b.n	801a6f4 <HAL_PCD_SetAddress+0x42>
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	2201      	movs	r2, #1
 801a6d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	78fa      	ldrb	r2, [r7, #3]
 801a6d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	78fa      	ldrb	r2, [r7, #3]
 801a6e2:	4611      	mov	r1, r2
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f004 fc2a 	bl	801ef3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a6f2:	2300      	movs	r3, #0
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3708      	adds	r7, #8
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}

0801a6fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
 801a704:	4608      	mov	r0, r1
 801a706:	4611      	mov	r1, r2
 801a708:	461a      	mov	r2, r3
 801a70a:	4603      	mov	r3, r0
 801a70c:	70fb      	strb	r3, [r7, #3]
 801a70e:	460b      	mov	r3, r1
 801a710:	803b      	strh	r3, [r7, #0]
 801a712:	4613      	mov	r3, r2
 801a714:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a716:	2300      	movs	r3, #0
 801a718:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a71a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	da0f      	bge.n	801a742 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a722:	78fb      	ldrb	r3, [r7, #3]
 801a724:	f003 020f 	and.w	r2, r3, #15
 801a728:	4613      	mov	r3, r2
 801a72a:	00db      	lsls	r3, r3, #3
 801a72c:	1a9b      	subs	r3, r3, r2
 801a72e:	009b      	lsls	r3, r3, #2
 801a730:	3338      	adds	r3, #56	; 0x38
 801a732:	687a      	ldr	r2, [r7, #4]
 801a734:	4413      	add	r3, r2
 801a736:	3304      	adds	r3, #4
 801a738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	2201      	movs	r2, #1
 801a73e:	705a      	strb	r2, [r3, #1]
 801a740:	e00f      	b.n	801a762 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a742:	78fb      	ldrb	r3, [r7, #3]
 801a744:	f003 020f 	and.w	r2, r3, #15
 801a748:	4613      	mov	r3, r2
 801a74a:	00db      	lsls	r3, r3, #3
 801a74c:	1a9b      	subs	r3, r3, r2
 801a74e:	009b      	lsls	r3, r3, #2
 801a750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a754:	687a      	ldr	r2, [r7, #4]
 801a756:	4413      	add	r3, r2
 801a758:	3304      	adds	r3, #4
 801a75a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	2200      	movs	r2, #0
 801a760:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a762:	78fb      	ldrb	r3, [r7, #3]
 801a764:	f003 030f 	and.w	r3, r3, #15
 801a768:	b2da      	uxtb	r2, r3
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a76e:	883a      	ldrh	r2, [r7, #0]
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	78ba      	ldrb	r2, [r7, #2]
 801a778:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	785b      	ldrb	r3, [r3, #1]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d004      	beq.n	801a78c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	b29a      	uxth	r2, r3
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a78c:	78bb      	ldrb	r3, [r7, #2]
 801a78e:	2b02      	cmp	r3, #2
 801a790:	d102      	bne.n	801a798 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	2200      	movs	r2, #0
 801a796:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a79e:	2b01      	cmp	r3, #1
 801a7a0:	d101      	bne.n	801a7a6 <HAL_PCD_EP_Open+0xaa>
 801a7a2:	2302      	movs	r3, #2
 801a7a4:	e00e      	b.n	801a7c4 <HAL_PCD_EP_Open+0xc8>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2201      	movs	r2, #1
 801a7aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	68f9      	ldr	r1, [r7, #12]
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	f003 fd5d 	bl	801e274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a7c2:	7afb      	ldrb	r3, [r7, #11]
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	3710      	adds	r7, #16
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b084      	sub	sp, #16
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	6078      	str	r0, [r7, #4]
 801a7d4:	460b      	mov	r3, r1
 801a7d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a7d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	da0f      	bge.n	801a800 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a7e0:	78fb      	ldrb	r3, [r7, #3]
 801a7e2:	f003 020f 	and.w	r2, r3, #15
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	00db      	lsls	r3, r3, #3
 801a7ea:	1a9b      	subs	r3, r3, r2
 801a7ec:	009b      	lsls	r3, r3, #2
 801a7ee:	3338      	adds	r3, #56	; 0x38
 801a7f0:	687a      	ldr	r2, [r7, #4]
 801a7f2:	4413      	add	r3, r2
 801a7f4:	3304      	adds	r3, #4
 801a7f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	705a      	strb	r2, [r3, #1]
 801a7fe:	e00f      	b.n	801a820 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a800:	78fb      	ldrb	r3, [r7, #3]
 801a802:	f003 020f 	and.w	r2, r3, #15
 801a806:	4613      	mov	r3, r2
 801a808:	00db      	lsls	r3, r3, #3
 801a80a:	1a9b      	subs	r3, r3, r2
 801a80c:	009b      	lsls	r3, r3, #2
 801a80e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a812:	687a      	ldr	r2, [r7, #4]
 801a814:	4413      	add	r3, r2
 801a816:	3304      	adds	r3, #4
 801a818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	2200      	movs	r2, #0
 801a81e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a820:	78fb      	ldrb	r3, [r7, #3]
 801a822:	f003 030f 	and.w	r3, r3, #15
 801a826:	b2da      	uxtb	r2, r3
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a832:	2b01      	cmp	r3, #1
 801a834:	d101      	bne.n	801a83a <HAL_PCD_EP_Close+0x6e>
 801a836:	2302      	movs	r3, #2
 801a838:	e00e      	b.n	801a858 <HAL_PCD_EP_Close+0x8c>
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	2201      	movs	r2, #1
 801a83e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	68f9      	ldr	r1, [r7, #12]
 801a848:	4618      	mov	r0, r3
 801a84a:	f003 fd9b 	bl	801e384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2200      	movs	r2, #0
 801a852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a856:	2300      	movs	r3, #0
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3710      	adds	r7, #16
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}

0801a860 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b086      	sub	sp, #24
 801a864:	af00      	add	r7, sp, #0
 801a866:	60f8      	str	r0, [r7, #12]
 801a868:	607a      	str	r2, [r7, #4]
 801a86a:	603b      	str	r3, [r7, #0]
 801a86c:	460b      	mov	r3, r1
 801a86e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a870:	7afb      	ldrb	r3, [r7, #11]
 801a872:	f003 020f 	and.w	r2, r3, #15
 801a876:	4613      	mov	r3, r2
 801a878:	00db      	lsls	r3, r3, #3
 801a87a:	1a9b      	subs	r3, r3, r2
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a882:	68fa      	ldr	r2, [r7, #12]
 801a884:	4413      	add	r3, r2
 801a886:	3304      	adds	r3, #4
 801a888:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	687a      	ldr	r2, [r7, #4]
 801a88e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	683a      	ldr	r2, [r7, #0]
 801a894:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a896:	697b      	ldr	r3, [r7, #20]
 801a898:	2200      	movs	r2, #0
 801a89a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a89c:	697b      	ldr	r3, [r7, #20]
 801a89e:	2200      	movs	r2, #0
 801a8a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a8a2:	7afb      	ldrb	r3, [r7, #11]
 801a8a4:	f003 030f 	and.w	r3, r3, #15
 801a8a8:	b2da      	uxtb	r2, r3
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	691b      	ldr	r3, [r3, #16]
 801a8b2:	2b01      	cmp	r3, #1
 801a8b4:	d102      	bne.n	801a8bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a8b6:	687a      	ldr	r2, [r7, #4]
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a8bc:	7afb      	ldrb	r3, [r7, #11]
 801a8be:	f003 030f 	and.w	r3, r3, #15
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d109      	bne.n	801a8da <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	6818      	ldr	r0, [r3, #0]
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	691b      	ldr	r3, [r3, #16]
 801a8ce:	b2db      	uxtb	r3, r3
 801a8d0:	461a      	mov	r2, r3
 801a8d2:	6979      	ldr	r1, [r7, #20]
 801a8d4:	f004 f876 	bl	801e9c4 <USB_EP0StartXfer>
 801a8d8:	e008      	b.n	801a8ec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	6818      	ldr	r0, [r3, #0]
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	691b      	ldr	r3, [r3, #16]
 801a8e2:	b2db      	uxtb	r3, r3
 801a8e4:	461a      	mov	r2, r3
 801a8e6:	6979      	ldr	r1, [r7, #20]
 801a8e8:	f003 fe28 	bl	801e53c <USB_EPStartXfer>
  }

  return HAL_OK;
 801a8ec:	2300      	movs	r3, #0
}
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	3718      	adds	r7, #24
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}

0801a8f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a8f6:	b480      	push	{r7}
 801a8f8:	b083      	sub	sp, #12
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	6078      	str	r0, [r7, #4]
 801a8fe:	460b      	mov	r3, r1
 801a900:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a902:	78fb      	ldrb	r3, [r7, #3]
 801a904:	f003 020f 	and.w	r2, r3, #15
 801a908:	6879      	ldr	r1, [r7, #4]
 801a90a:	4613      	mov	r3, r2
 801a90c:	00db      	lsls	r3, r3, #3
 801a90e:	1a9b      	subs	r3, r3, r2
 801a910:	009b      	lsls	r3, r3, #2
 801a912:	440b      	add	r3, r1
 801a914:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801a918:	681b      	ldr	r3, [r3, #0]
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	370c      	adds	r7, #12
 801a91e:	46bd      	mov	sp, r7
 801a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a924:	4770      	bx	lr

0801a926 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a926:	b580      	push	{r7, lr}
 801a928:	b086      	sub	sp, #24
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	60f8      	str	r0, [r7, #12]
 801a92e:	607a      	str	r2, [r7, #4]
 801a930:	603b      	str	r3, [r7, #0]
 801a932:	460b      	mov	r3, r1
 801a934:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a936:	7afb      	ldrb	r3, [r7, #11]
 801a938:	f003 020f 	and.w	r2, r3, #15
 801a93c:	4613      	mov	r3, r2
 801a93e:	00db      	lsls	r3, r3, #3
 801a940:	1a9b      	subs	r3, r3, r2
 801a942:	009b      	lsls	r3, r3, #2
 801a944:	3338      	adds	r3, #56	; 0x38
 801a946:	68fa      	ldr	r2, [r7, #12]
 801a948:	4413      	add	r3, r2
 801a94a:	3304      	adds	r3, #4
 801a94c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a94e:	697b      	ldr	r3, [r7, #20]
 801a950:	687a      	ldr	r2, [r7, #4]
 801a952:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	683a      	ldr	r2, [r7, #0]
 801a958:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	2200      	movs	r2, #0
 801a95e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	2201      	movs	r2, #1
 801a964:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a966:	7afb      	ldrb	r3, [r7, #11]
 801a968:	f003 030f 	and.w	r3, r3, #15
 801a96c:	b2da      	uxtb	r2, r3
 801a96e:	697b      	ldr	r3, [r7, #20]
 801a970:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	691b      	ldr	r3, [r3, #16]
 801a976:	2b01      	cmp	r3, #1
 801a978:	d102      	bne.n	801a980 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a97a:	687a      	ldr	r2, [r7, #4]
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a980:	7afb      	ldrb	r3, [r7, #11]
 801a982:	f003 030f 	and.w	r3, r3, #15
 801a986:	2b00      	cmp	r3, #0
 801a988:	d109      	bne.n	801a99e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	6818      	ldr	r0, [r3, #0]
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	691b      	ldr	r3, [r3, #16]
 801a992:	b2db      	uxtb	r3, r3
 801a994:	461a      	mov	r2, r3
 801a996:	6979      	ldr	r1, [r7, #20]
 801a998:	f004 f814 	bl	801e9c4 <USB_EP0StartXfer>
 801a99c:	e008      	b.n	801a9b0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	6818      	ldr	r0, [r3, #0]
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	691b      	ldr	r3, [r3, #16]
 801a9a6:	b2db      	uxtb	r3, r3
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	6979      	ldr	r1, [r7, #20]
 801a9ac:	f003 fdc6 	bl	801e53c <USB_EPStartXfer>
  }

  return HAL_OK;
 801a9b0:	2300      	movs	r3, #0
}
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	3718      	adds	r7, #24
 801a9b6:	46bd      	mov	sp, r7
 801a9b8:	bd80      	pop	{r7, pc}

0801a9ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9ba:	b580      	push	{r7, lr}
 801a9bc:	b084      	sub	sp, #16
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	6078      	str	r0, [r7, #4]
 801a9c2:	460b      	mov	r3, r1
 801a9c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a9c6:	78fb      	ldrb	r3, [r7, #3]
 801a9c8:	f003 020f 	and.w	r2, r3, #15
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	429a      	cmp	r2, r3
 801a9d2:	d901      	bls.n	801a9d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a9d4:	2301      	movs	r3, #1
 801a9d6:	e050      	b.n	801aa7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a9d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	da0f      	bge.n	801aa00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a9e0:	78fb      	ldrb	r3, [r7, #3]
 801a9e2:	f003 020f 	and.w	r2, r3, #15
 801a9e6:	4613      	mov	r3, r2
 801a9e8:	00db      	lsls	r3, r3, #3
 801a9ea:	1a9b      	subs	r3, r3, r2
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	3338      	adds	r3, #56	; 0x38
 801a9f0:	687a      	ldr	r2, [r7, #4]
 801a9f2:	4413      	add	r3, r2
 801a9f4:	3304      	adds	r3, #4
 801a9f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	2201      	movs	r2, #1
 801a9fc:	705a      	strb	r2, [r3, #1]
 801a9fe:	e00d      	b.n	801aa1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801aa00:	78fa      	ldrb	r2, [r7, #3]
 801aa02:	4613      	mov	r3, r2
 801aa04:	00db      	lsls	r3, r3, #3
 801aa06:	1a9b      	subs	r3, r3, r2
 801aa08:	009b      	lsls	r3, r3, #2
 801aa0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	4413      	add	r3, r2
 801aa12:	3304      	adds	r3, #4
 801aa14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2200      	movs	r2, #0
 801aa1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	2201      	movs	r2, #1
 801aa20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa22:	78fb      	ldrb	r3, [r7, #3]
 801aa24:	f003 030f 	and.w	r3, r3, #15
 801aa28:	b2da      	uxtb	r2, r3
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801aa34:	2b01      	cmp	r3, #1
 801aa36:	d101      	bne.n	801aa3c <HAL_PCD_EP_SetStall+0x82>
 801aa38:	2302      	movs	r3, #2
 801aa3a:	e01e      	b.n	801aa7a <HAL_PCD_EP_SetStall+0xc0>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	68f9      	ldr	r1, [r7, #12]
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f004 f9a3 	bl	801ed96 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801aa50:	78fb      	ldrb	r3, [r7, #3]
 801aa52:	f003 030f 	and.w	r3, r3, #15
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d10a      	bne.n	801aa70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6818      	ldr	r0, [r3, #0]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	691b      	ldr	r3, [r3, #16]
 801aa62:	b2d9      	uxtb	r1, r3
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801aa6a:	461a      	mov	r2, r3
 801aa6c:	f004 fb94 	bl	801f198 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	2200      	movs	r2, #0
 801aa74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aa78:	2300      	movs	r3, #0
}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	3710      	adds	r7, #16
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}

0801aa82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa82:	b580      	push	{r7, lr}
 801aa84:	b084      	sub	sp, #16
 801aa86:	af00      	add	r7, sp, #0
 801aa88:	6078      	str	r0, [r7, #4]
 801aa8a:	460b      	mov	r3, r1
 801aa8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801aa8e:	78fb      	ldrb	r3, [r7, #3]
 801aa90:	f003 020f 	and.w	r2, r3, #15
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	685b      	ldr	r3, [r3, #4]
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d901      	bls.n	801aaa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801aa9c:	2301      	movs	r3, #1
 801aa9e:	e042      	b.n	801ab26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801aaa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	da0f      	bge.n	801aac8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aaa8:	78fb      	ldrb	r3, [r7, #3]
 801aaaa:	f003 020f 	and.w	r2, r3, #15
 801aaae:	4613      	mov	r3, r2
 801aab0:	00db      	lsls	r3, r3, #3
 801aab2:	1a9b      	subs	r3, r3, r2
 801aab4:	009b      	lsls	r3, r3, #2
 801aab6:	3338      	adds	r3, #56	; 0x38
 801aab8:	687a      	ldr	r2, [r7, #4]
 801aaba:	4413      	add	r3, r2
 801aabc:	3304      	adds	r3, #4
 801aabe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	2201      	movs	r2, #1
 801aac4:	705a      	strb	r2, [r3, #1]
 801aac6:	e00f      	b.n	801aae8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aac8:	78fb      	ldrb	r3, [r7, #3]
 801aaca:	f003 020f 	and.w	r2, r3, #15
 801aace:	4613      	mov	r3, r2
 801aad0:	00db      	lsls	r3, r3, #3
 801aad2:	1a9b      	subs	r3, r3, r2
 801aad4:	009b      	lsls	r3, r3, #2
 801aad6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801aada:	687a      	ldr	r2, [r7, #4]
 801aadc:	4413      	add	r3, r2
 801aade:	3304      	adds	r3, #4
 801aae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	2200      	movs	r2, #0
 801aae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	2200      	movs	r2, #0
 801aaec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aaee:	78fb      	ldrb	r3, [r7, #3]
 801aaf0:	f003 030f 	and.w	r3, r3, #15
 801aaf4:	b2da      	uxtb	r2, r3
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d101      	bne.n	801ab08 <HAL_PCD_EP_ClrStall+0x86>
 801ab04:	2302      	movs	r3, #2
 801ab06:	e00e      	b.n	801ab26 <HAL_PCD_EP_ClrStall+0xa4>
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2201      	movs	r2, #1
 801ab0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	68f9      	ldr	r1, [r7, #12]
 801ab16:	4618      	mov	r0, r3
 801ab18:	f004 f9ab 	bl	801ee72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	2200      	movs	r2, #0
 801ab20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ab24:	2300      	movs	r3, #0
}
 801ab26:	4618      	mov	r0, r3
 801ab28:	3710      	adds	r7, #16
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}

0801ab2e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ab2e:	b580      	push	{r7, lr}
 801ab30:	b082      	sub	sp, #8
 801ab32:	af00      	add	r7, sp, #0
 801ab34:	6078      	str	r0, [r7, #4]
 801ab36:	460b      	mov	r3, r1
 801ab38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ab40:	2b01      	cmp	r3, #1
 801ab42:	d101      	bne.n	801ab48 <HAL_PCD_EP_Flush+0x1a>
 801ab44:	2302      	movs	r3, #2
 801ab46:	e01b      	b.n	801ab80 <HAL_PCD_EP_Flush+0x52>
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2201      	movs	r2, #1
 801ab4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801ab50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	da09      	bge.n	801ab6c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681a      	ldr	r2, [r3, #0]
 801ab5c:	78fb      	ldrb	r3, [r7, #3]
 801ab5e:	f003 030f 	and.w	r3, r3, #15
 801ab62:	4619      	mov	r1, r3
 801ab64:	4610      	mov	r0, r2
 801ab66:	f003 fb03 	bl	801e170 <USB_FlushTxFifo>
 801ab6a:	e004      	b.n	801ab76 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4618      	mov	r0, r3
 801ab72:	f003 fb21 	bl	801e1b8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	2200      	movs	r2, #0
 801ab7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ab7e:	2300      	movs	r3, #0
}
 801ab80:	4618      	mov	r0, r3
 801ab82:	3708      	adds	r7, #8
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}

0801ab88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b08a      	sub	sp, #40	; 0x28
 801ab8c:	af02      	add	r7, sp, #8
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801ab9c:	683a      	ldr	r2, [r7, #0]
 801ab9e:	4613      	mov	r3, r2
 801aba0:	00db      	lsls	r3, r3, #3
 801aba2:	1a9b      	subs	r3, r3, r2
 801aba4:	009b      	lsls	r3, r3, #2
 801aba6:	3338      	adds	r3, #56	; 0x38
 801aba8:	687a      	ldr	r2, [r7, #4]
 801abaa:	4413      	add	r3, r2
 801abac:	3304      	adds	r3, #4
 801abae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	699a      	ldr	r2, [r3, #24]
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	695b      	ldr	r3, [r3, #20]
 801abb8:	429a      	cmp	r2, r3
 801abba:	d901      	bls.n	801abc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801abbc:	2301      	movs	r3, #1
 801abbe:	e06c      	b.n	801ac9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	695a      	ldr	r2, [r3, #20]
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	699b      	ldr	r3, [r3, #24]
 801abc8:	1ad3      	subs	r3, r2, r3
 801abca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	689b      	ldr	r3, [r3, #8]
 801abd0:	69fa      	ldr	r2, [r7, #28]
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d902      	bls.n	801abdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	689b      	ldr	r3, [r3, #8]
 801abda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801abdc:	69fb      	ldr	r3, [r7, #28]
 801abde:	3303      	adds	r3, #3
 801abe0:	089b      	lsrs	r3, r3, #2
 801abe2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801abe4:	e02b      	b.n	801ac3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	695a      	ldr	r2, [r3, #20]
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	699b      	ldr	r3, [r3, #24]
 801abee:	1ad3      	subs	r3, r2, r3
 801abf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	689b      	ldr	r3, [r3, #8]
 801abf6:	69fa      	ldr	r2, [r7, #28]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d902      	bls.n	801ac02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	689b      	ldr	r3, [r3, #8]
 801ac00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ac02:	69fb      	ldr	r3, [r7, #28]
 801ac04:	3303      	adds	r3, #3
 801ac06:	089b      	lsrs	r3, r3, #2
 801ac08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	68d9      	ldr	r1, [r3, #12]
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	b2da      	uxtb	r2, r3
 801ac12:	69fb      	ldr	r3, [r7, #28]
 801ac14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ac1a:	b2db      	uxtb	r3, r3
 801ac1c:	9300      	str	r3, [sp, #0]
 801ac1e:	4603      	mov	r3, r0
 801ac20:	6978      	ldr	r0, [r7, #20]
 801ac22:	f004 f822 	bl	801ec6a <USB_WritePacket>

    ep->xfer_buff  += len;
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	68da      	ldr	r2, [r3, #12]
 801ac2a:	69fb      	ldr	r3, [r7, #28]
 801ac2c:	441a      	add	r2, r3
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	699a      	ldr	r2, [r3, #24]
 801ac36:	69fb      	ldr	r3, [r7, #28]
 801ac38:	441a      	add	r2, r3
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	015a      	lsls	r2, r3, #5
 801ac42:	693b      	ldr	r3, [r7, #16]
 801ac44:	4413      	add	r3, r2
 801ac46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac4a:	699b      	ldr	r3, [r3, #24]
 801ac4c:	b29b      	uxth	r3, r3
 801ac4e:	69ba      	ldr	r2, [r7, #24]
 801ac50:	429a      	cmp	r2, r3
 801ac52:	d809      	bhi.n	801ac68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	699a      	ldr	r2, [r3, #24]
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d203      	bcs.n	801ac68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	695b      	ldr	r3, [r3, #20]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d1be      	bne.n	801abe6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	695a      	ldr	r2, [r3, #20]
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	699b      	ldr	r3, [r3, #24]
 801ac70:	429a      	cmp	r2, r3
 801ac72:	d811      	bhi.n	801ac98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	f003 030f 	and.w	r3, r3, #15
 801ac7a:	2201      	movs	r2, #1
 801ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ac8a:	68bb      	ldr	r3, [r7, #8]
 801ac8c:	43db      	mvns	r3, r3
 801ac8e:	6939      	ldr	r1, [r7, #16]
 801ac90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ac94:	4013      	ands	r3, r2
 801ac96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ac98:	2300      	movs	r3, #0
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	3720      	adds	r7, #32
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}
	...

0801aca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b086      	sub	sp, #24
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801acb4:	697b      	ldr	r3, [r7, #20]
 801acb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801acb8:	697b      	ldr	r3, [r7, #20]
 801acba:	333c      	adds	r3, #60	; 0x3c
 801acbc:	3304      	adds	r3, #4
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	015a      	lsls	r2, r3, #5
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	4413      	add	r3, r2
 801acca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acce:	689b      	ldr	r3, [r3, #8]
 801acd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	691b      	ldr	r3, [r3, #16]
 801acd6:	2b01      	cmp	r3, #1
 801acd8:	f040 80a0 	bne.w	801ae1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	f003 0308 	and.w	r3, r3, #8
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d015      	beq.n	801ad12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	4a72      	ldr	r2, [pc, #456]	; (801aeb4 <PCD_EP_OutXfrComplete_int+0x210>)
 801acea:	4293      	cmp	r3, r2
 801acec:	f240 80dd 	bls.w	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	f000 80d7 	beq.w	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	015a      	lsls	r2, r3, #5
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	4413      	add	r3, r2
 801ad04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad08:	461a      	mov	r2, r3
 801ad0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad0e:	6093      	str	r3, [r2, #8]
 801ad10:	e0cb      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	f003 0320 	and.w	r3, r3, #32
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d009      	beq.n	801ad30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	015a      	lsls	r2, r3, #5
 801ad20:	693b      	ldr	r3, [r7, #16]
 801ad22:	4413      	add	r3, r2
 801ad24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad28:	461a      	mov	r2, r3
 801ad2a:	2320      	movs	r3, #32
 801ad2c:	6093      	str	r3, [r2, #8]
 801ad2e:	e0bc      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801ad30:	68bb      	ldr	r3, [r7, #8]
 801ad32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	f040 80b7 	bne.w	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	4a5d      	ldr	r2, [pc, #372]	; (801aeb4 <PCD_EP_OutXfrComplete_int+0x210>)
 801ad40:	4293      	cmp	r3, r2
 801ad42:	d90f      	bls.n	801ad64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d00a      	beq.n	801ad64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	015a      	lsls	r2, r3, #5
 801ad52:	693b      	ldr	r3, [r7, #16]
 801ad54:	4413      	add	r3, r2
 801ad56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad60:	6093      	str	r3, [r2, #8]
 801ad62:	e0a2      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801ad64:	6879      	ldr	r1, [r7, #4]
 801ad66:	683a      	ldr	r2, [r7, #0]
 801ad68:	4613      	mov	r3, r2
 801ad6a:	00db      	lsls	r3, r3, #3
 801ad6c:	1a9b      	subs	r3, r3, r2
 801ad6e:	009b      	lsls	r3, r3, #2
 801ad70:	440b      	add	r3, r1
 801ad72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ad76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801ad78:	683b      	ldr	r3, [r7, #0]
 801ad7a:	0159      	lsls	r1, r3, #5
 801ad7c:	693b      	ldr	r3, [r7, #16]
 801ad7e:	440b      	add	r3, r1
 801ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad84:	691b      	ldr	r3, [r3, #16]
 801ad86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801ad8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801ad8c:	6878      	ldr	r0, [r7, #4]
 801ad8e:	683a      	ldr	r2, [r7, #0]
 801ad90:	4613      	mov	r3, r2
 801ad92:	00db      	lsls	r3, r3, #3
 801ad94:	1a9b      	subs	r3, r3, r2
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	4403      	add	r3, r0
 801ad9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801ad9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801ada0:	6879      	ldr	r1, [r7, #4]
 801ada2:	683a      	ldr	r2, [r7, #0]
 801ada4:	4613      	mov	r3, r2
 801ada6:	00db      	lsls	r3, r3, #3
 801ada8:	1a9b      	subs	r3, r3, r2
 801adaa:	009b      	lsls	r3, r3, #2
 801adac:	440b      	add	r3, r1
 801adae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801adb2:	6819      	ldr	r1, [r3, #0]
 801adb4:	6878      	ldr	r0, [r7, #4]
 801adb6:	683a      	ldr	r2, [r7, #0]
 801adb8:	4613      	mov	r3, r2
 801adba:	00db      	lsls	r3, r3, #3
 801adbc:	1a9b      	subs	r3, r3, r2
 801adbe:	009b      	lsls	r3, r3, #2
 801adc0:	4403      	add	r3, r0
 801adc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	4419      	add	r1, r3
 801adca:	6878      	ldr	r0, [r7, #4]
 801adcc:	683a      	ldr	r2, [r7, #0]
 801adce:	4613      	mov	r3, r2
 801add0:	00db      	lsls	r3, r3, #3
 801add2:	1a9b      	subs	r3, r3, r2
 801add4:	009b      	lsls	r3, r3, #2
 801add6:	4403      	add	r3, r0
 801add8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801addc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d114      	bne.n	801ae0e <PCD_EP_OutXfrComplete_int+0x16a>
 801ade4:	6879      	ldr	r1, [r7, #4]
 801ade6:	683a      	ldr	r2, [r7, #0]
 801ade8:	4613      	mov	r3, r2
 801adea:	00db      	lsls	r3, r3, #3
 801adec:	1a9b      	subs	r3, r3, r2
 801adee:	009b      	lsls	r3, r3, #2
 801adf0:	440b      	add	r3, r1
 801adf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d108      	bne.n	801ae0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	6818      	ldr	r0, [r3, #0]
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae06:	461a      	mov	r2, r3
 801ae08:	2101      	movs	r1, #1
 801ae0a:	f004 f9c5 	bl	801f198 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	b2db      	uxtb	r3, r3
 801ae12:	4619      	mov	r1, r3
 801ae14:	6878      	ldr	r0, [r7, #4]
 801ae16:	f007 fbef 	bl	80225f8 <HAL_PCD_DataOutStageCallback>
 801ae1a:	e046      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	4a26      	ldr	r2, [pc, #152]	; (801aeb8 <PCD_EP_OutXfrComplete_int+0x214>)
 801ae20:	4293      	cmp	r3, r2
 801ae22:	d124      	bne.n	801ae6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d00a      	beq.n	801ae44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	015a      	lsls	r2, r3, #5
 801ae32:	693b      	ldr	r3, [r7, #16]
 801ae34:	4413      	add	r3, r2
 801ae36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae3a:	461a      	mov	r2, r3
 801ae3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae40:	6093      	str	r3, [r2, #8]
 801ae42:	e032      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ae44:	68bb      	ldr	r3, [r7, #8]
 801ae46:	f003 0320 	and.w	r3, r3, #32
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d008      	beq.n	801ae60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ae4e:	683b      	ldr	r3, [r7, #0]
 801ae50:	015a      	lsls	r2, r3, #5
 801ae52:	693b      	ldr	r3, [r7, #16]
 801ae54:	4413      	add	r3, r2
 801ae56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	2320      	movs	r3, #32
 801ae5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ae60:	683b      	ldr	r3, [r7, #0]
 801ae62:	b2db      	uxtb	r3, r3
 801ae64:	4619      	mov	r1, r3
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f007 fbc6 	bl	80225f8 <HAL_PCD_DataOutStageCallback>
 801ae6c:	e01d      	b.n	801aeaa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ae6e:	683b      	ldr	r3, [r7, #0]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d114      	bne.n	801ae9e <PCD_EP_OutXfrComplete_int+0x1fa>
 801ae74:	6879      	ldr	r1, [r7, #4]
 801ae76:	683a      	ldr	r2, [r7, #0]
 801ae78:	4613      	mov	r3, r2
 801ae7a:	00db      	lsls	r3, r3, #3
 801ae7c:	1a9b      	subs	r3, r3, r2
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	440b      	add	r3, r1
 801ae82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d108      	bne.n	801ae9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	6818      	ldr	r0, [r3, #0]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ae96:	461a      	mov	r2, r3
 801ae98:	2100      	movs	r1, #0
 801ae9a:	f004 f97d 	bl	801f198 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	b2db      	uxtb	r3, r3
 801aea2:	4619      	mov	r1, r3
 801aea4:	6878      	ldr	r0, [r7, #4]
 801aea6:	f007 fba7 	bl	80225f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801aeaa:	2300      	movs	r3, #0
}
 801aeac:	4618      	mov	r0, r3
 801aeae:	3718      	adds	r7, #24
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}
 801aeb4:	4f54300a 	.word	0x4f54300a
 801aeb8:	4f54310a 	.word	0x4f54310a

0801aebc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b086      	sub	sp, #24
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aecc:	697b      	ldr	r3, [r7, #20]
 801aece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	333c      	adds	r3, #60	; 0x3c
 801aed4:	3304      	adds	r3, #4
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	015a      	lsls	r2, r3, #5
 801aede:	693b      	ldr	r3, [r7, #16]
 801aee0:	4413      	add	r3, r2
 801aee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aee6:	689b      	ldr	r3, [r3, #8]
 801aee8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	4a15      	ldr	r2, [pc, #84]	; (801af44 <PCD_EP_OutSetupPacket_int+0x88>)
 801aeee:	4293      	cmp	r3, r2
 801aef0:	d90e      	bls.n	801af10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d009      	beq.n	801af10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	015a      	lsls	r2, r3, #5
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	4413      	add	r3, r2
 801af04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af08:	461a      	mov	r2, r3
 801af0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801af10:	6878      	ldr	r0, [r7, #4]
 801af12:	f007 fb5f 	bl	80225d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	4a0a      	ldr	r2, [pc, #40]	; (801af44 <PCD_EP_OutSetupPacket_int+0x88>)
 801af1a:	4293      	cmp	r3, r2
 801af1c:	d90c      	bls.n	801af38 <PCD_EP_OutSetupPacket_int+0x7c>
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	691b      	ldr	r3, [r3, #16]
 801af22:	2b01      	cmp	r3, #1
 801af24:	d108      	bne.n	801af38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	6818      	ldr	r0, [r3, #0]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801af30:	461a      	mov	r2, r3
 801af32:	2101      	movs	r1, #1
 801af34:	f004 f930 	bl	801f198 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801af38:	2300      	movs	r3, #0
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	3718      	adds	r7, #24
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}
 801af42:	bf00      	nop
 801af44:	4f54300a 	.word	0x4f54300a

0801af48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801af48:	b480      	push	{r7}
 801af4a:	b085      	sub	sp, #20
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
 801af50:	460b      	mov	r3, r1
 801af52:	70fb      	strb	r3, [r7, #3]
 801af54:	4613      	mov	r3, r2
 801af56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801af60:	78fb      	ldrb	r3, [r7, #3]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d107      	bne.n	801af76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801af66:	883b      	ldrh	r3, [r7, #0]
 801af68:	0419      	lsls	r1, r3, #16
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	68ba      	ldr	r2, [r7, #8]
 801af70:	430a      	orrs	r2, r1
 801af72:	629a      	str	r2, [r3, #40]	; 0x28
 801af74:	e028      	b.n	801afc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af7c:	0c1b      	lsrs	r3, r3, #16
 801af7e:	68ba      	ldr	r2, [r7, #8]
 801af80:	4413      	add	r3, r2
 801af82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801af84:	2300      	movs	r3, #0
 801af86:	73fb      	strb	r3, [r7, #15]
 801af88:	e00d      	b.n	801afa6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	7bfb      	ldrb	r3, [r7, #15]
 801af90:	3340      	adds	r3, #64	; 0x40
 801af92:	009b      	lsls	r3, r3, #2
 801af94:	4413      	add	r3, r2
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	0c1b      	lsrs	r3, r3, #16
 801af9a:	68ba      	ldr	r2, [r7, #8]
 801af9c:	4413      	add	r3, r2
 801af9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801afa0:	7bfb      	ldrb	r3, [r7, #15]
 801afa2:	3301      	adds	r3, #1
 801afa4:	73fb      	strb	r3, [r7, #15]
 801afa6:	7bfa      	ldrb	r2, [r7, #15]
 801afa8:	78fb      	ldrb	r3, [r7, #3]
 801afaa:	3b01      	subs	r3, #1
 801afac:	429a      	cmp	r2, r3
 801afae:	d3ec      	bcc.n	801af8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801afb0:	883b      	ldrh	r3, [r7, #0]
 801afb2:	0418      	lsls	r0, r3, #16
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	6819      	ldr	r1, [r3, #0]
 801afb8:	78fb      	ldrb	r3, [r7, #3]
 801afba:	3b01      	subs	r3, #1
 801afbc:	68ba      	ldr	r2, [r7, #8]
 801afbe:	4302      	orrs	r2, r0
 801afc0:	3340      	adds	r3, #64	; 0x40
 801afc2:	009b      	lsls	r3, r3, #2
 801afc4:	440b      	add	r3, r1
 801afc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801afc8:	2300      	movs	r3, #0
}
 801afca:	4618      	mov	r0, r3
 801afcc:	3714      	adds	r7, #20
 801afce:	46bd      	mov	sp, r7
 801afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd4:	4770      	bx	lr

0801afd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801afd6:	b480      	push	{r7}
 801afd8:	b083      	sub	sp, #12
 801afda:	af00      	add	r7, sp, #0
 801afdc:	6078      	str	r0, [r7, #4]
 801afde:	460b      	mov	r3, r1
 801afe0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	887a      	ldrh	r2, [r7, #2]
 801afe8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801afea:	2300      	movs	r3, #0
}
 801afec:	4618      	mov	r0, r3
 801afee:	370c      	adds	r7, #12
 801aff0:	46bd      	mov	sp, r7
 801aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff6:	4770      	bx	lr

0801aff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801aff8:	b480      	push	{r7}
 801affa:	b085      	sub	sp, #20
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2201      	movs	r2, #1
 801b00a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	2200      	movs	r2, #0
 801b012:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	699b      	ldr	r3, [r3, #24]
 801b01a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b02a:	f043 0303 	orr.w	r3, r3, #3
 801b02e:	68fa      	ldr	r2, [r7, #12]
 801b030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b032:	2300      	movs	r3, #0
}
 801b034:	4618      	mov	r0, r3
 801b036:	3714      	adds	r7, #20
 801b038:	46bd      	mov	sp, r7
 801b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03e:	4770      	bx	lr

0801b040 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b082      	sub	sp, #8
 801b044:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801b046:	2300      	movs	r3, #0
 801b048:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b04a:	2300      	movs	r3, #0
 801b04c:	603b      	str	r3, [r7, #0]
 801b04e:	4b20      	ldr	r3, [pc, #128]	; (801b0d0 <HAL_PWREx_EnableOverDrive+0x90>)
 801b050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b052:	4a1f      	ldr	r2, [pc, #124]	; (801b0d0 <HAL_PWREx_EnableOverDrive+0x90>)
 801b054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b058:	6413      	str	r3, [r2, #64]	; 0x40
 801b05a:	4b1d      	ldr	r3, [pc, #116]	; (801b0d0 <HAL_PWREx_EnableOverDrive+0x90>)
 801b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b062:	603b      	str	r3, [r7, #0]
 801b064:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b066:	4b1b      	ldr	r3, [pc, #108]	; (801b0d4 <HAL_PWREx_EnableOverDrive+0x94>)
 801b068:	2201      	movs	r2, #1
 801b06a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b06c:	f7fd f9e8 	bl	8018440 <HAL_GetTick>
 801b070:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b072:	e009      	b.n	801b088 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b074:	f7fd f9e4 	bl	8018440 <HAL_GetTick>
 801b078:	4602      	mov	r2, r0
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	1ad3      	subs	r3, r2, r3
 801b07e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b082:	d901      	bls.n	801b088 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b084:	2303      	movs	r3, #3
 801b086:	e01f      	b.n	801b0c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b088:	4b13      	ldr	r3, [pc, #76]	; (801b0d8 <HAL_PWREx_EnableOverDrive+0x98>)
 801b08a:	685b      	ldr	r3, [r3, #4]
 801b08c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b094:	d1ee      	bne.n	801b074 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b096:	4b11      	ldr	r3, [pc, #68]	; (801b0dc <HAL_PWREx_EnableOverDrive+0x9c>)
 801b098:	2201      	movs	r2, #1
 801b09a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b09c:	f7fd f9d0 	bl	8018440 <HAL_GetTick>
 801b0a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b0a2:	e009      	b.n	801b0b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b0a4:	f7fd f9cc 	bl	8018440 <HAL_GetTick>
 801b0a8:	4602      	mov	r2, r0
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	1ad3      	subs	r3, r2, r3
 801b0ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b0b2:	d901      	bls.n	801b0b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b0b4:	2303      	movs	r3, #3
 801b0b6:	e007      	b.n	801b0c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b0b8:	4b07      	ldr	r3, [pc, #28]	; (801b0d8 <HAL_PWREx_EnableOverDrive+0x98>)
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b0c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b0c4:	d1ee      	bne.n	801b0a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b0c6:	2300      	movs	r3, #0
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	3708      	adds	r7, #8
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	bd80      	pop	{r7, pc}
 801b0d0:	40023800 	.word	0x40023800
 801b0d4:	420e0040 	.word	0x420e0040
 801b0d8:	40007000 	.word	0x40007000
 801b0dc:	420e0044 	.word	0x420e0044

0801b0e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b084      	sub	sp, #16
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d101      	bne.n	801b0f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b0f0:	2301      	movs	r3, #1
 801b0f2:	e0cc      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b0f4:	4b68      	ldr	r3, [pc, #416]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	f003 030f 	and.w	r3, r3, #15
 801b0fc:	683a      	ldr	r2, [r7, #0]
 801b0fe:	429a      	cmp	r2, r3
 801b100:	d90c      	bls.n	801b11c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b102:	4b65      	ldr	r3, [pc, #404]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b104:	683a      	ldr	r2, [r7, #0]
 801b106:	b2d2      	uxtb	r2, r2
 801b108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b10a:	4b63      	ldr	r3, [pc, #396]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	f003 030f 	and.w	r3, r3, #15
 801b112:	683a      	ldr	r2, [r7, #0]
 801b114:	429a      	cmp	r2, r3
 801b116:	d001      	beq.n	801b11c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b118:	2301      	movs	r3, #1
 801b11a:	e0b8      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	f003 0302 	and.w	r3, r3, #2
 801b124:	2b00      	cmp	r3, #0
 801b126:	d020      	beq.n	801b16a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	f003 0304 	and.w	r3, r3, #4
 801b130:	2b00      	cmp	r3, #0
 801b132:	d005      	beq.n	801b140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b134:	4b59      	ldr	r3, [pc, #356]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b136:	689b      	ldr	r3, [r3, #8]
 801b138:	4a58      	ldr	r2, [pc, #352]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b13a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b13e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f003 0308 	and.w	r3, r3, #8
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d005      	beq.n	801b158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b14c:	4b53      	ldr	r3, [pc, #332]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b14e:	689b      	ldr	r3, [r3, #8]
 801b150:	4a52      	ldr	r2, [pc, #328]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b158:	4b50      	ldr	r3, [pc, #320]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b15a:	689b      	ldr	r3, [r3, #8]
 801b15c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	689b      	ldr	r3, [r3, #8]
 801b164:	494d      	ldr	r1, [pc, #308]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b166:	4313      	orrs	r3, r2
 801b168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	f003 0301 	and.w	r3, r3, #1
 801b172:	2b00      	cmp	r3, #0
 801b174:	d044      	beq.n	801b200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	685b      	ldr	r3, [r3, #4]
 801b17a:	2b01      	cmp	r3, #1
 801b17c:	d107      	bne.n	801b18e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b17e:	4b47      	ldr	r3, [pc, #284]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b186:	2b00      	cmp	r3, #0
 801b188:	d119      	bne.n	801b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b18a:	2301      	movs	r3, #1
 801b18c:	e07f      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	685b      	ldr	r3, [r3, #4]
 801b192:	2b02      	cmp	r3, #2
 801b194:	d003      	beq.n	801b19e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b19a:	2b03      	cmp	r3, #3
 801b19c:	d107      	bne.n	801b1ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b19e:	4b3f      	ldr	r3, [pc, #252]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d109      	bne.n	801b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	e06f      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b1ae:	4b3b      	ldr	r3, [pc, #236]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	f003 0302 	and.w	r3, r3, #2
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d101      	bne.n	801b1be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	e067      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b1be:	4b37      	ldr	r3, [pc, #220]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b1c0:	689b      	ldr	r3, [r3, #8]
 801b1c2:	f023 0203 	bic.w	r2, r3, #3
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	685b      	ldr	r3, [r3, #4]
 801b1ca:	4934      	ldr	r1, [pc, #208]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b1cc:	4313      	orrs	r3, r2
 801b1ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b1d0:	f7fd f936 	bl	8018440 <HAL_GetTick>
 801b1d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b1d6:	e00a      	b.n	801b1ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b1d8:	f7fd f932 	bl	8018440 <HAL_GetTick>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	1ad3      	subs	r3, r2, r3
 801b1e2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b1e6:	4293      	cmp	r3, r2
 801b1e8:	d901      	bls.n	801b1ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b1ea:	2303      	movs	r3, #3
 801b1ec:	e04f      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b1ee:	4b2b      	ldr	r3, [pc, #172]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b1f0:	689b      	ldr	r3, [r3, #8]
 801b1f2:	f003 020c 	and.w	r2, r3, #12
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	685b      	ldr	r3, [r3, #4]
 801b1fa:	009b      	lsls	r3, r3, #2
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d1eb      	bne.n	801b1d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b200:	4b25      	ldr	r3, [pc, #148]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	f003 030f 	and.w	r3, r3, #15
 801b208:	683a      	ldr	r2, [r7, #0]
 801b20a:	429a      	cmp	r2, r3
 801b20c:	d20c      	bcs.n	801b228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b20e:	4b22      	ldr	r3, [pc, #136]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b210:	683a      	ldr	r2, [r7, #0]
 801b212:	b2d2      	uxtb	r2, r2
 801b214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b216:	4b20      	ldr	r3, [pc, #128]	; (801b298 <HAL_RCC_ClockConfig+0x1b8>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	f003 030f 	and.w	r3, r3, #15
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	429a      	cmp	r2, r3
 801b222:	d001      	beq.n	801b228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b224:	2301      	movs	r3, #1
 801b226:	e032      	b.n	801b28e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	f003 0304 	and.w	r3, r3, #4
 801b230:	2b00      	cmp	r3, #0
 801b232:	d008      	beq.n	801b246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b234:	4b19      	ldr	r3, [pc, #100]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b236:	689b      	ldr	r3, [r3, #8]
 801b238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	68db      	ldr	r3, [r3, #12]
 801b240:	4916      	ldr	r1, [pc, #88]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b242:	4313      	orrs	r3, r2
 801b244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f003 0308 	and.w	r3, r3, #8
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d009      	beq.n	801b266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b252:	4b12      	ldr	r3, [pc, #72]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b254:	689b      	ldr	r3, [r3, #8]
 801b256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	691b      	ldr	r3, [r3, #16]
 801b25e:	00db      	lsls	r3, r3, #3
 801b260:	490e      	ldr	r1, [pc, #56]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b262:	4313      	orrs	r3, r2
 801b264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b266:	f000 fb57 	bl	801b918 <HAL_RCC_GetSysClockFreq>
 801b26a:	4602      	mov	r2, r0
 801b26c:	4b0b      	ldr	r3, [pc, #44]	; (801b29c <HAL_RCC_ClockConfig+0x1bc>)
 801b26e:	689b      	ldr	r3, [r3, #8]
 801b270:	091b      	lsrs	r3, r3, #4
 801b272:	f003 030f 	and.w	r3, r3, #15
 801b276:	490a      	ldr	r1, [pc, #40]	; (801b2a0 <HAL_RCC_ClockConfig+0x1c0>)
 801b278:	5ccb      	ldrb	r3, [r1, r3]
 801b27a:	fa22 f303 	lsr.w	r3, r2, r3
 801b27e:	4a09      	ldr	r2, [pc, #36]	; (801b2a4 <HAL_RCC_ClockConfig+0x1c4>)
 801b280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b282:	4b09      	ldr	r3, [pc, #36]	; (801b2a8 <HAL_RCC_ClockConfig+0x1c8>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	4618      	mov	r0, r3
 801b288:	f7fd f896 	bl	80183b8 <HAL_InitTick>

  return HAL_OK;
 801b28c:	2300      	movs	r3, #0
}
 801b28e:	4618      	mov	r0, r3
 801b290:	3710      	adds	r7, #16
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	40023c00 	.word	0x40023c00
 801b29c:	40023800 	.word	0x40023800
 801b2a0:	08002350 	.word	0x08002350
 801b2a4:	20000588 	.word	0x20000588
 801b2a8:	2000058c 	.word	0x2000058c

0801b2ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b2ac:	b480      	push	{r7}
 801b2ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b2b0:	4b03      	ldr	r3, [pc, #12]	; (801b2c0 <HAL_RCC_GetHCLKFreq+0x14>)
 801b2b2:	681b      	ldr	r3, [r3, #0]
}
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2bc:	4770      	bx	lr
 801b2be:	bf00      	nop
 801b2c0:	20000588 	.word	0x20000588

0801b2c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b08c      	sub	sp, #48	; 0x30
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b2dc:	2300      	movs	r3, #0
 801b2de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	f003 0301 	and.w	r3, r3, #1
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d010      	beq.n	801b31e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b2fc:	4b6f      	ldr	r3, [pc, #444]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b302:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b30a:	496c      	ldr	r1, [pc, #432]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b30c:	4313      	orrs	r3, r2
 801b30e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b316:	2b00      	cmp	r3, #0
 801b318:	d101      	bne.n	801b31e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b31a:	2301      	movs	r3, #1
 801b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	f003 0302 	and.w	r3, r3, #2
 801b326:	2b00      	cmp	r3, #0
 801b328:	d010      	beq.n	801b34c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b32a:	4b64      	ldr	r3, [pc, #400]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b330:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b338:	4960      	ldr	r1, [pc, #384]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b33a:	4313      	orrs	r3, r2
 801b33c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b344:	2b00      	cmp	r3, #0
 801b346:	d101      	bne.n	801b34c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b348:	2301      	movs	r3, #1
 801b34a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f003 0304 	and.w	r3, r3, #4
 801b354:	2b00      	cmp	r3, #0
 801b356:	d017      	beq.n	801b388 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b358:	4b58      	ldr	r3, [pc, #352]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b35e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b366:	4955      	ldr	r1, [pc, #340]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b368:	4313      	orrs	r3, r2
 801b36a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b376:	d101      	bne.n	801b37c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b378:	2301      	movs	r3, #1
 801b37a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b380:	2b00      	cmp	r3, #0
 801b382:	d101      	bne.n	801b388 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b384:	2301      	movs	r3, #1
 801b386:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	f003 0308 	and.w	r3, r3, #8
 801b390:	2b00      	cmp	r3, #0
 801b392:	d017      	beq.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b394:	4b49      	ldr	r3, [pc, #292]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b39a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3a2:	4946      	ldr	r1, [pc, #280]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3a4:	4313      	orrs	r3, r2
 801b3a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b3b2:	d101      	bne.n	801b3b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b3b4:	2301      	movs	r3, #1
 801b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d101      	bne.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b3c0:	2301      	movs	r3, #1
 801b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	f003 0320 	and.w	r3, r3, #32
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	f000 808a 	beq.w	801b4e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	60bb      	str	r3, [r7, #8]
 801b3d6:	4b39      	ldr	r3, [pc, #228]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3da:	4a38      	ldr	r2, [pc, #224]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b3e0:	6413      	str	r3, [r2, #64]	; 0x40
 801b3e2:	4b36      	ldr	r3, [pc, #216]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b3ea:	60bb      	str	r3, [r7, #8]
 801b3ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b3ee:	4b34      	ldr	r3, [pc, #208]	; (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	4a33      	ldr	r2, [pc, #204]	; (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b3f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b3fa:	f7fd f821 	bl	8018440 <HAL_GetTick>
 801b3fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b400:	e008      	b.n	801b414 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b402:	f7fd f81d 	bl	8018440 <HAL_GetTick>
 801b406:	4602      	mov	r2, r0
 801b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b40a:	1ad3      	subs	r3, r2, r3
 801b40c:	2b02      	cmp	r3, #2
 801b40e:	d901      	bls.n	801b414 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b410:	2303      	movs	r3, #3
 801b412:	e278      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b414:	4b2a      	ldr	r3, [pc, #168]	; (801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d0f0      	beq.n	801b402 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b420:	4b26      	ldr	r3, [pc, #152]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b428:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b42a:	6a3b      	ldr	r3, [r7, #32]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d02f      	beq.n	801b490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b438:	6a3a      	ldr	r2, [r7, #32]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d028      	beq.n	801b490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b43e:	4b1f      	ldr	r3, [pc, #124]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b446:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b448:	4b1e      	ldr	r3, [pc, #120]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b44a:	2201      	movs	r2, #1
 801b44c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b44e:	4b1d      	ldr	r3, [pc, #116]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b450:	2200      	movs	r2, #0
 801b452:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b454:	4a19      	ldr	r2, [pc, #100]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b456:	6a3b      	ldr	r3, [r7, #32]
 801b458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b45a:	4b18      	ldr	r3, [pc, #96]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b45e:	f003 0301 	and.w	r3, r3, #1
 801b462:	2b01      	cmp	r3, #1
 801b464:	d114      	bne.n	801b490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b466:	f7fc ffeb 	bl	8018440 <HAL_GetTick>
 801b46a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b46c:	e00a      	b.n	801b484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b46e:	f7fc ffe7 	bl	8018440 <HAL_GetTick>
 801b472:	4602      	mov	r2, r0
 801b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b476:	1ad3      	subs	r3, r2, r3
 801b478:	f241 3288 	movw	r2, #5000	; 0x1388
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d901      	bls.n	801b484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b480:	2303      	movs	r3, #3
 801b482:	e240      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b484:	4b0d      	ldr	r3, [pc, #52]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b488:	f003 0302 	and.w	r3, r3, #2
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d0ee      	beq.n	801b46e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b49c:	d114      	bne.n	801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b49e:	4b07      	ldr	r3, [pc, #28]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4a0:	689b      	ldr	r3, [r3, #8]
 801b4a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b4b2:	4902      	ldr	r1, [pc, #8]	; (801b4bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4b4:	4313      	orrs	r3, r2
 801b4b6:	608b      	str	r3, [r1, #8]
 801b4b8:	e00c      	b.n	801b4d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b4ba:	bf00      	nop
 801b4bc:	40023800 	.word	0x40023800
 801b4c0:	40007000 	.word	0x40007000
 801b4c4:	42470e40 	.word	0x42470e40
 801b4c8:	4b4a      	ldr	r3, [pc, #296]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4ca:	689b      	ldr	r3, [r3, #8]
 801b4cc:	4a49      	ldr	r2, [pc, #292]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b4d2:	6093      	str	r3, [r2, #8]
 801b4d4:	4b47      	ldr	r3, [pc, #284]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b4e0:	4944      	ldr	r1, [pc, #272]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b4e2:	4313      	orrs	r3, r2
 801b4e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	f003 0310 	and.w	r3, r3, #16
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d004      	beq.n	801b4fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b4f8:	4b3f      	ldr	r3, [pc, #252]	; (801b5f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b4fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b504:	2b00      	cmp	r3, #0
 801b506:	d00a      	beq.n	801b51e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b508:	4b3a      	ldr	r3, [pc, #232]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b50a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b50e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b516:	4937      	ldr	r1, [pc, #220]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b518:	4313      	orrs	r3, r2
 801b51a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b526:	2b00      	cmp	r3, #0
 801b528:	d00a      	beq.n	801b540 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b52a:	4b32      	ldr	r3, [pc, #200]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b530:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b538:	492e      	ldr	r1, [pc, #184]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b53a:	4313      	orrs	r3, r2
 801b53c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d011      	beq.n	801b570 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b54c:	4b29      	ldr	r3, [pc, #164]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b552:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b55a:	4926      	ldr	r1, [pc, #152]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b55c:	4313      	orrs	r3, r2
 801b55e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b56a:	d101      	bne.n	801b570 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b56c:	2301      	movs	r3, #1
 801b56e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d00a      	beq.n	801b592 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b57c:	4b1d      	ldr	r3, [pc, #116]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b57e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b582:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b58a:	491a      	ldr	r1, [pc, #104]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b58c:	4313      	orrs	r3, r2
 801b58e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d011      	beq.n	801b5c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b59e:	4b15      	ldr	r3, [pc, #84]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b5a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b5a4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5ac:	4911      	ldr	r1, [pc, #68]	; (801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b5ae:	4313      	orrs	r3, r2
 801b5b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b5bc:	d101      	bne.n	801b5c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b5be:	2301      	movs	r3, #1
 801b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5c4:	2b01      	cmp	r3, #1
 801b5c6:	d005      	beq.n	801b5d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b5d0:	f040 80ff 	bne.w	801b7d2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b5d4:	4b09      	ldr	r3, [pc, #36]	; (801b5fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b5d6:	2200      	movs	r2, #0
 801b5d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b5da:	f7fc ff31 	bl	8018440 <HAL_GetTick>
 801b5de:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b5e0:	e00e      	b.n	801b600 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b5e2:	f7fc ff2d 	bl	8018440 <HAL_GetTick>
 801b5e6:	4602      	mov	r2, r0
 801b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5ea:	1ad3      	subs	r3, r2, r3
 801b5ec:	2b02      	cmp	r3, #2
 801b5ee:	d907      	bls.n	801b600 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b5f0:	2303      	movs	r3, #3
 801b5f2:	e188      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b5f4:	40023800 	.word	0x40023800
 801b5f8:	424711e0 	.word	0x424711e0
 801b5fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b600:	4b7e      	ldr	r3, [pc, #504]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d1ea      	bne.n	801b5e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	f003 0301 	and.w	r3, r3, #1
 801b614:	2b00      	cmp	r3, #0
 801b616:	d003      	beq.n	801b620 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d009      	beq.n	801b634 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d028      	beq.n	801b67e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b630:	2b00      	cmp	r3, #0
 801b632:	d124      	bne.n	801b67e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b634:	4b71      	ldr	r3, [pc, #452]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b63a:	0c1b      	lsrs	r3, r3, #16
 801b63c:	f003 0303 	and.w	r3, r3, #3
 801b640:	3301      	adds	r3, #1
 801b642:	005b      	lsls	r3, r3, #1
 801b644:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b646:	4b6d      	ldr	r3, [pc, #436]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b64c:	0e1b      	lsrs	r3, r3, #24
 801b64e:	f003 030f 	and.w	r3, r3, #15
 801b652:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	685a      	ldr	r2, [r3, #4]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	689b      	ldr	r3, [r3, #8]
 801b65c:	019b      	lsls	r3, r3, #6
 801b65e:	431a      	orrs	r2, r3
 801b660:	69fb      	ldr	r3, [r7, #28]
 801b662:	085b      	lsrs	r3, r3, #1
 801b664:	3b01      	subs	r3, #1
 801b666:	041b      	lsls	r3, r3, #16
 801b668:	431a      	orrs	r2, r3
 801b66a:	69bb      	ldr	r3, [r7, #24]
 801b66c:	061b      	lsls	r3, r3, #24
 801b66e:	431a      	orrs	r2, r3
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	695b      	ldr	r3, [r3, #20]
 801b674:	071b      	lsls	r3, r3, #28
 801b676:	4961      	ldr	r1, [pc, #388]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b678:	4313      	orrs	r3, r2
 801b67a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	f003 0304 	and.w	r3, r3, #4
 801b686:	2b00      	cmp	r3, #0
 801b688:	d004      	beq.n	801b694 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b68e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b692:	d00a      	beq.n	801b6aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d035      	beq.n	801b70c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b6a8:	d130      	bne.n	801b70c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b6aa:	4b54      	ldr	r3, [pc, #336]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6b0:	0c1b      	lsrs	r3, r3, #16
 801b6b2:	f003 0303 	and.w	r3, r3, #3
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	005b      	lsls	r3, r3, #1
 801b6ba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b6bc:	4b4f      	ldr	r3, [pc, #316]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6c2:	0f1b      	lsrs	r3, r3, #28
 801b6c4:	f003 0307 	and.w	r3, r3, #7
 801b6c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	685a      	ldr	r2, [r3, #4]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	689b      	ldr	r3, [r3, #8]
 801b6d2:	019b      	lsls	r3, r3, #6
 801b6d4:	431a      	orrs	r2, r3
 801b6d6:	69fb      	ldr	r3, [r7, #28]
 801b6d8:	085b      	lsrs	r3, r3, #1
 801b6da:	3b01      	subs	r3, #1
 801b6dc:	041b      	lsls	r3, r3, #16
 801b6de:	431a      	orrs	r2, r3
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	691b      	ldr	r3, [r3, #16]
 801b6e4:	061b      	lsls	r3, r3, #24
 801b6e6:	431a      	orrs	r2, r3
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	071b      	lsls	r3, r3, #28
 801b6ec:	4943      	ldr	r1, [pc, #268]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6ee:	4313      	orrs	r3, r2
 801b6f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b6f4:	4b41      	ldr	r3, [pc, #260]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b6fa:	f023 021f 	bic.w	r2, r3, #31
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b702:	3b01      	subs	r3, #1
 801b704:	493d      	ldr	r1, [pc, #244]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b706:	4313      	orrs	r3, r2
 801b708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b714:	2b00      	cmp	r3, #0
 801b716:	d029      	beq.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b720:	d124      	bne.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b722:	4b36      	ldr	r3, [pc, #216]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b728:	0c1b      	lsrs	r3, r3, #16
 801b72a:	f003 0303 	and.w	r3, r3, #3
 801b72e:	3301      	adds	r3, #1
 801b730:	005b      	lsls	r3, r3, #1
 801b732:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b734:	4b31      	ldr	r3, [pc, #196]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b73a:	0f1b      	lsrs	r3, r3, #28
 801b73c:	f003 0307 	and.w	r3, r3, #7
 801b740:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	685a      	ldr	r2, [r3, #4]
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	689b      	ldr	r3, [r3, #8]
 801b74a:	019b      	lsls	r3, r3, #6
 801b74c:	431a      	orrs	r2, r3
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	68db      	ldr	r3, [r3, #12]
 801b752:	085b      	lsrs	r3, r3, #1
 801b754:	3b01      	subs	r3, #1
 801b756:	041b      	lsls	r3, r3, #16
 801b758:	431a      	orrs	r2, r3
 801b75a:	69bb      	ldr	r3, [r7, #24]
 801b75c:	061b      	lsls	r3, r3, #24
 801b75e:	431a      	orrs	r2, r3
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	071b      	lsls	r3, r3, #28
 801b764:	4925      	ldr	r1, [pc, #148]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b766:	4313      	orrs	r3, r2
 801b768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b774:	2b00      	cmp	r3, #0
 801b776:	d016      	beq.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	685a      	ldr	r2, [r3, #4]
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	689b      	ldr	r3, [r3, #8]
 801b780:	019b      	lsls	r3, r3, #6
 801b782:	431a      	orrs	r2, r3
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	68db      	ldr	r3, [r3, #12]
 801b788:	085b      	lsrs	r3, r3, #1
 801b78a:	3b01      	subs	r3, #1
 801b78c:	041b      	lsls	r3, r3, #16
 801b78e:	431a      	orrs	r2, r3
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	691b      	ldr	r3, [r3, #16]
 801b794:	061b      	lsls	r3, r3, #24
 801b796:	431a      	orrs	r2, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	695b      	ldr	r3, [r3, #20]
 801b79c:	071b      	lsls	r3, r3, #28
 801b79e:	4917      	ldr	r1, [pc, #92]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7a0:	4313      	orrs	r3, r2
 801b7a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b7a6:	4b16      	ldr	r3, [pc, #88]	; (801b800 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b7a8:	2201      	movs	r2, #1
 801b7aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b7ac:	f7fc fe48 	bl	8018440 <HAL_GetTick>
 801b7b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b7b2:	e008      	b.n	801b7c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b7b4:	f7fc fe44 	bl	8018440 <HAL_GetTick>
 801b7b8:	4602      	mov	r2, r0
 801b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7bc:	1ad3      	subs	r3, r2, r3
 801b7be:	2b02      	cmp	r3, #2
 801b7c0:	d901      	bls.n	801b7c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b7c2:	2303      	movs	r3, #3
 801b7c4:	e09f      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b7c6:	4b0d      	ldr	r3, [pc, #52]	; (801b7fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d0f0      	beq.n	801b7b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7d4:	2b01      	cmp	r3, #1
 801b7d6:	f040 8095 	bne.w	801b904 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b7da:	4b0a      	ldr	r3, [pc, #40]	; (801b804 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b7dc:	2200      	movs	r2, #0
 801b7de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b7e0:	f7fc fe2e 	bl	8018440 <HAL_GetTick>
 801b7e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b7e6:	e00f      	b.n	801b808 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b7e8:	f7fc fe2a 	bl	8018440 <HAL_GetTick>
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7f0:	1ad3      	subs	r3, r2, r3
 801b7f2:	2b02      	cmp	r3, #2
 801b7f4:	d908      	bls.n	801b808 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b7f6:	2303      	movs	r3, #3
 801b7f8:	e085      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b7fa:	bf00      	nop
 801b7fc:	40023800 	.word	0x40023800
 801b800:	42470068 	.word	0x42470068
 801b804:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b808:	4b41      	ldr	r3, [pc, #260]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b814:	d0e8      	beq.n	801b7e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	f003 0304 	and.w	r3, r3, #4
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d003      	beq.n	801b82a <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b826:	2b00      	cmp	r3, #0
 801b828:	d009      	beq.n	801b83e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b832:	2b00      	cmp	r3, #0
 801b834:	d02b      	beq.n	801b88e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d127      	bne.n	801b88e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b83e:	4b34      	ldr	r3, [pc, #208]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b844:	0c1b      	lsrs	r3, r3, #16
 801b846:	f003 0303 	and.w	r3, r3, #3
 801b84a:	3301      	adds	r3, #1
 801b84c:	005b      	lsls	r3, r3, #1
 801b84e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	699a      	ldr	r2, [r3, #24]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	69db      	ldr	r3, [r3, #28]
 801b858:	019b      	lsls	r3, r3, #6
 801b85a:	431a      	orrs	r2, r3
 801b85c:	693b      	ldr	r3, [r7, #16]
 801b85e:	085b      	lsrs	r3, r3, #1
 801b860:	3b01      	subs	r3, #1
 801b862:	041b      	lsls	r3, r3, #16
 801b864:	431a      	orrs	r2, r3
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b86a:	061b      	lsls	r3, r3, #24
 801b86c:	4928      	ldr	r1, [pc, #160]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b86e:	4313      	orrs	r3, r2
 801b870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b874:	4b26      	ldr	r3, [pc, #152]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b87a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b882:	3b01      	subs	r3, #1
 801b884:	021b      	lsls	r3, r3, #8
 801b886:	4922      	ldr	r1, [pc, #136]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b888:	4313      	orrs	r3, r2
 801b88a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b896:	2b00      	cmp	r3, #0
 801b898:	d01d      	beq.n	801b8d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b8a2:	d118      	bne.n	801b8d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b8a4:	4b1a      	ldr	r3, [pc, #104]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b8aa:	0e1b      	lsrs	r3, r3, #24
 801b8ac:	f003 030f 	and.w	r3, r3, #15
 801b8b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	699a      	ldr	r2, [r3, #24]
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	69db      	ldr	r3, [r3, #28]
 801b8ba:	019b      	lsls	r3, r3, #6
 801b8bc:	431a      	orrs	r2, r3
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	6a1b      	ldr	r3, [r3, #32]
 801b8c2:	085b      	lsrs	r3, r3, #1
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	041b      	lsls	r3, r3, #16
 801b8c8:	431a      	orrs	r2, r3
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	061b      	lsls	r3, r3, #24
 801b8ce:	4910      	ldr	r1, [pc, #64]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b8d0:	4313      	orrs	r3, r2
 801b8d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b8d6:	4b0f      	ldr	r3, [pc, #60]	; (801b914 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b8d8:	2201      	movs	r2, #1
 801b8da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b8dc:	f7fc fdb0 	bl	8018440 <HAL_GetTick>
 801b8e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b8e2:	e008      	b.n	801b8f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b8e4:	f7fc fdac 	bl	8018440 <HAL_GetTick>
 801b8e8:	4602      	mov	r2, r0
 801b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ec:	1ad3      	subs	r3, r2, r3
 801b8ee:	2b02      	cmp	r3, #2
 801b8f0:	d901      	bls.n	801b8f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b8f2:	2303      	movs	r3, #3
 801b8f4:	e007      	b.n	801b906 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b8f6:	4b06      	ldr	r3, [pc, #24]	; (801b910 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b8fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b902:	d1ef      	bne.n	801b8e4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b904:	2300      	movs	r3, #0
}
 801b906:	4618      	mov	r0, r3
 801b908:	3730      	adds	r7, #48	; 0x30
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	40023800 	.word	0x40023800
 801b914:	42470070 	.word	0x42470070

0801b918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b91c:	b087      	sub	sp, #28
 801b91e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b920:	2600      	movs	r6, #0
 801b922:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801b924:	2600      	movs	r6, #0
 801b926:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801b928:	2600      	movs	r6, #0
 801b92a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801b92c:	2600      	movs	r6, #0
 801b92e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b930:	2600      	movs	r6, #0
 801b932:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b934:	4ea3      	ldr	r6, [pc, #652]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b936:	68b6      	ldr	r6, [r6, #8]
 801b938:	f006 060c 	and.w	r6, r6, #12
 801b93c:	2e0c      	cmp	r6, #12
 801b93e:	f200 8137 	bhi.w	801bbb0 <HAL_RCC_GetSysClockFreq+0x298>
 801b942:	f20f 0c08 	addw	ip, pc, #8
 801b946:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801b94a:	bf00      	nop
 801b94c:	0801b981 	.word	0x0801b981
 801b950:	0801bbb1 	.word	0x0801bbb1
 801b954:	0801bbb1 	.word	0x0801bbb1
 801b958:	0801bbb1 	.word	0x0801bbb1
 801b95c:	0801b987 	.word	0x0801b987
 801b960:	0801bbb1 	.word	0x0801bbb1
 801b964:	0801bbb1 	.word	0x0801bbb1
 801b968:	0801bbb1 	.word	0x0801bbb1
 801b96c:	0801b98d 	.word	0x0801b98d
 801b970:	0801bbb1 	.word	0x0801bbb1
 801b974:	0801bbb1 	.word	0x0801bbb1
 801b978:	0801bbb1 	.word	0x0801bbb1
 801b97c:	0801baa3 	.word	0x0801baa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b980:	4b91      	ldr	r3, [pc, #580]	; (801bbc8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801b982:	613b      	str	r3, [r7, #16]
       break;
 801b984:	e117      	b.n	801bbb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b986:	4b91      	ldr	r3, [pc, #580]	; (801bbcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b988:	613b      	str	r3, [r7, #16]
      break;
 801b98a:	e114      	b.n	801bbb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b98c:	4b8d      	ldr	r3, [pc, #564]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b98e:	685b      	ldr	r3, [r3, #4]
 801b990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b994:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b996:	4b8b      	ldr	r3, [pc, #556]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d024      	beq.n	801b9ec <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9a2:	4b88      	ldr	r3, [pc, #544]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9a4:	685b      	ldr	r3, [r3, #4]
 801b9a6:	099b      	lsrs	r3, r3, #6
 801b9a8:	461a      	mov	r2, r3
 801b9aa:	f04f 0300 	mov.w	r3, #0
 801b9ae:	f240 14ff 	movw	r4, #511	; 0x1ff
 801b9b2:	f04f 0500 	mov.w	r5, #0
 801b9b6:	ea02 0004 	and.w	r0, r2, r4
 801b9ba:	ea03 0105 	and.w	r1, r3, r5
 801b9be:	4b83      	ldr	r3, [pc, #524]	; (801bbcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b9c0:	fb03 f201 	mul.w	r2, r3, r1
 801b9c4:	2300      	movs	r3, #0
 801b9c6:	fb03 f300 	mul.w	r3, r3, r0
 801b9ca:	4413      	add	r3, r2
 801b9cc:	4a7f      	ldr	r2, [pc, #508]	; (801bbcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 801b9ce:	fba0 0102 	umull	r0, r1, r0, r2
 801b9d2:	440b      	add	r3, r1
 801b9d4:	4619      	mov	r1, r3
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	461a      	mov	r2, r3
 801b9da:	f04f 0300 	mov.w	r3, #0
 801b9de:	f7f0 fb37 	bl	800c050 <__aeabi_uldivmod>
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	460b      	mov	r3, r1
 801b9e6:	4613      	mov	r3, r2
 801b9e8:	617b      	str	r3, [r7, #20]
 801b9ea:	e04c      	b.n	801ba86 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9ec:	4b75      	ldr	r3, [pc, #468]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	099b      	lsrs	r3, r3, #6
 801b9f2:	461a      	mov	r2, r3
 801b9f4:	f04f 0300 	mov.w	r3, #0
 801b9f8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b9fc:	f04f 0100 	mov.w	r1, #0
 801ba00:	ea02 0800 	and.w	r8, r2, r0
 801ba04:	ea03 0901 	and.w	r9, r3, r1
 801ba08:	4640      	mov	r0, r8
 801ba0a:	4649      	mov	r1, r9
 801ba0c:	f04f 0200 	mov.w	r2, #0
 801ba10:	f04f 0300 	mov.w	r3, #0
 801ba14:	014b      	lsls	r3, r1, #5
 801ba16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801ba1a:	0142      	lsls	r2, r0, #5
 801ba1c:	4610      	mov	r0, r2
 801ba1e:	4619      	mov	r1, r3
 801ba20:	ebb0 0008 	subs.w	r0, r0, r8
 801ba24:	eb61 0109 	sbc.w	r1, r1, r9
 801ba28:	f04f 0200 	mov.w	r2, #0
 801ba2c:	f04f 0300 	mov.w	r3, #0
 801ba30:	018b      	lsls	r3, r1, #6
 801ba32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801ba36:	0182      	lsls	r2, r0, #6
 801ba38:	1a12      	subs	r2, r2, r0
 801ba3a:	eb63 0301 	sbc.w	r3, r3, r1
 801ba3e:	f04f 0000 	mov.w	r0, #0
 801ba42:	f04f 0100 	mov.w	r1, #0
 801ba46:	00d9      	lsls	r1, r3, #3
 801ba48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801ba4c:	00d0      	lsls	r0, r2, #3
 801ba4e:	4602      	mov	r2, r0
 801ba50:	460b      	mov	r3, r1
 801ba52:	eb12 0208 	adds.w	r2, r2, r8
 801ba56:	eb43 0309 	adc.w	r3, r3, r9
 801ba5a:	f04f 0000 	mov.w	r0, #0
 801ba5e:	f04f 0100 	mov.w	r1, #0
 801ba62:	0299      	lsls	r1, r3, #10
 801ba64:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801ba68:	0290      	lsls	r0, r2, #10
 801ba6a:	4602      	mov	r2, r0
 801ba6c:	460b      	mov	r3, r1
 801ba6e:	4610      	mov	r0, r2
 801ba70:	4619      	mov	r1, r3
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	461a      	mov	r2, r3
 801ba76:	f04f 0300 	mov.w	r3, #0
 801ba7a:	f7f0 fae9 	bl	800c050 <__aeabi_uldivmod>
 801ba7e:	4602      	mov	r2, r0
 801ba80:	460b      	mov	r3, r1
 801ba82:	4613      	mov	r3, r2
 801ba84:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801ba86:	4b4f      	ldr	r3, [pc, #316]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba88:	685b      	ldr	r3, [r3, #4]
 801ba8a:	0c1b      	lsrs	r3, r3, #16
 801ba8c:	f003 0303 	and.w	r3, r3, #3
 801ba90:	3301      	adds	r3, #1
 801ba92:	005b      	lsls	r3, r3, #1
 801ba94:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801ba96:	697a      	ldr	r2, [r7, #20]
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba9e:	613b      	str	r3, [r7, #16]
      break;
 801baa0:	e089      	b.n	801bbb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801baa2:	4948      	ldr	r1, [pc, #288]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801baa4:	6849      	ldr	r1, [r1, #4]
 801baa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801baaa:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801baac:	4945      	ldr	r1, [pc, #276]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801baae:	6849      	ldr	r1, [r1, #4]
 801bab0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801bab4:	2900      	cmp	r1, #0
 801bab6:	d024      	beq.n	801bb02 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bab8:	4942      	ldr	r1, [pc, #264]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801baba:	6849      	ldr	r1, [r1, #4]
 801babc:	0989      	lsrs	r1, r1, #6
 801babe:	4608      	mov	r0, r1
 801bac0:	f04f 0100 	mov.w	r1, #0
 801bac4:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bac8:	f04f 0500 	mov.w	r5, #0
 801bacc:	ea00 0204 	and.w	r2, r0, r4
 801bad0:	ea01 0305 	and.w	r3, r1, r5
 801bad4:	493d      	ldr	r1, [pc, #244]	; (801bbcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bad6:	fb01 f003 	mul.w	r0, r1, r3
 801bada:	2100      	movs	r1, #0
 801badc:	fb01 f102 	mul.w	r1, r1, r2
 801bae0:	1844      	adds	r4, r0, r1
 801bae2:	493a      	ldr	r1, [pc, #232]	; (801bbcc <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bae4:	fba2 0101 	umull	r0, r1, r2, r1
 801bae8:	1863      	adds	r3, r4, r1
 801baea:	4619      	mov	r1, r3
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	461a      	mov	r2, r3
 801baf0:	f04f 0300 	mov.w	r3, #0
 801baf4:	f7f0 faac 	bl	800c050 <__aeabi_uldivmod>
 801baf8:	4602      	mov	r2, r0
 801bafa:	460b      	mov	r3, r1
 801bafc:	4613      	mov	r3, r2
 801bafe:	617b      	str	r3, [r7, #20]
 801bb00:	e04a      	b.n	801bb98 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bb02:	4b30      	ldr	r3, [pc, #192]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb04:	685b      	ldr	r3, [r3, #4]
 801bb06:	099b      	lsrs	r3, r3, #6
 801bb08:	461a      	mov	r2, r3
 801bb0a:	f04f 0300 	mov.w	r3, #0
 801bb0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bb12:	f04f 0100 	mov.w	r1, #0
 801bb16:	ea02 0400 	and.w	r4, r2, r0
 801bb1a:	ea03 0501 	and.w	r5, r3, r1
 801bb1e:	4620      	mov	r0, r4
 801bb20:	4629      	mov	r1, r5
 801bb22:	f04f 0200 	mov.w	r2, #0
 801bb26:	f04f 0300 	mov.w	r3, #0
 801bb2a:	014b      	lsls	r3, r1, #5
 801bb2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bb30:	0142      	lsls	r2, r0, #5
 801bb32:	4610      	mov	r0, r2
 801bb34:	4619      	mov	r1, r3
 801bb36:	1b00      	subs	r0, r0, r4
 801bb38:	eb61 0105 	sbc.w	r1, r1, r5
 801bb3c:	f04f 0200 	mov.w	r2, #0
 801bb40:	f04f 0300 	mov.w	r3, #0
 801bb44:	018b      	lsls	r3, r1, #6
 801bb46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bb4a:	0182      	lsls	r2, r0, #6
 801bb4c:	1a12      	subs	r2, r2, r0
 801bb4e:	eb63 0301 	sbc.w	r3, r3, r1
 801bb52:	f04f 0000 	mov.w	r0, #0
 801bb56:	f04f 0100 	mov.w	r1, #0
 801bb5a:	00d9      	lsls	r1, r3, #3
 801bb5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bb60:	00d0      	lsls	r0, r2, #3
 801bb62:	4602      	mov	r2, r0
 801bb64:	460b      	mov	r3, r1
 801bb66:	1912      	adds	r2, r2, r4
 801bb68:	eb45 0303 	adc.w	r3, r5, r3
 801bb6c:	f04f 0000 	mov.w	r0, #0
 801bb70:	f04f 0100 	mov.w	r1, #0
 801bb74:	0299      	lsls	r1, r3, #10
 801bb76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bb7a:	0290      	lsls	r0, r2, #10
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	460b      	mov	r3, r1
 801bb80:	4610      	mov	r0, r2
 801bb82:	4619      	mov	r1, r3
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	461a      	mov	r2, r3
 801bb88:	f04f 0300 	mov.w	r3, #0
 801bb8c:	f7f0 fa60 	bl	800c050 <__aeabi_uldivmod>
 801bb90:	4602      	mov	r2, r0
 801bb92:	460b      	mov	r3, r1
 801bb94:	4613      	mov	r3, r2
 801bb96:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bb98:	4b0a      	ldr	r3, [pc, #40]	; (801bbc4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb9a:	685b      	ldr	r3, [r3, #4]
 801bb9c:	0f1b      	lsrs	r3, r3, #28
 801bb9e:	f003 0307 	and.w	r3, r3, #7
 801bba2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bba4:	697a      	ldr	r2, [r7, #20]
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbac:	613b      	str	r3, [r7, #16]
      break;
 801bbae:	e002      	b.n	801bbb6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bbb0:	4b05      	ldr	r3, [pc, #20]	; (801bbc8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bbb2:	613b      	str	r3, [r7, #16]
      break;
 801bbb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bbb6:	693b      	ldr	r3, [r7, #16]
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	371c      	adds	r7, #28
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbc2:	bf00      	nop
 801bbc4:	40023800 	.word	0x40023800
 801bbc8:	00f42400 	.word	0x00f42400
 801bbcc:	017d7840 	.word	0x017d7840

0801bbd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b086      	sub	sp, #24
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d101      	bne.n	801bbe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bbde:	2301      	movs	r3, #1
 801bbe0:	e28d      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	f003 0301 	and.w	r3, r3, #1
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	f000 8083 	beq.w	801bcf6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bbf0:	4b94      	ldr	r3, [pc, #592]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bbf2:	689b      	ldr	r3, [r3, #8]
 801bbf4:	f003 030c 	and.w	r3, r3, #12
 801bbf8:	2b04      	cmp	r3, #4
 801bbfa:	d019      	beq.n	801bc30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bbfc:	4b91      	ldr	r3, [pc, #580]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bbfe:	689b      	ldr	r3, [r3, #8]
 801bc00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bc04:	2b08      	cmp	r3, #8
 801bc06:	d106      	bne.n	801bc16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bc08:	4b8e      	ldr	r3, [pc, #568]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc0a:	685b      	ldr	r3, [r3, #4]
 801bc0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bc14:	d00c      	beq.n	801bc30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bc16:	4b8b      	ldr	r3, [pc, #556]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc18:	689b      	ldr	r3, [r3, #8]
 801bc1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bc1e:	2b0c      	cmp	r3, #12
 801bc20:	d112      	bne.n	801bc48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bc22:	4b88      	ldr	r3, [pc, #544]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc24:	685b      	ldr	r3, [r3, #4]
 801bc26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bc2e:	d10b      	bne.n	801bc48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc30:	4b84      	ldr	r3, [pc, #528]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d05b      	beq.n	801bcf4 <HAL_RCC_OscConfig+0x124>
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d157      	bne.n	801bcf4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bc44:	2301      	movs	r3, #1
 801bc46:	e25a      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	685b      	ldr	r3, [r3, #4]
 801bc4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bc50:	d106      	bne.n	801bc60 <HAL_RCC_OscConfig+0x90>
 801bc52:	4b7c      	ldr	r3, [pc, #496]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	4a7b      	ldr	r2, [pc, #492]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc5c:	6013      	str	r3, [r2, #0]
 801bc5e:	e01d      	b.n	801bc9c <HAL_RCC_OscConfig+0xcc>
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bc68:	d10c      	bne.n	801bc84 <HAL_RCC_OscConfig+0xb4>
 801bc6a:	4b76      	ldr	r3, [pc, #472]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	4a75      	ldr	r2, [pc, #468]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bc74:	6013      	str	r3, [r2, #0]
 801bc76:	4b73      	ldr	r3, [pc, #460]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4a72      	ldr	r2, [pc, #456]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc80:	6013      	str	r3, [r2, #0]
 801bc82:	e00b      	b.n	801bc9c <HAL_RCC_OscConfig+0xcc>
 801bc84:	4b6f      	ldr	r3, [pc, #444]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	4a6e      	ldr	r2, [pc, #440]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bc8e:	6013      	str	r3, [r2, #0]
 801bc90:	4b6c      	ldr	r3, [pc, #432]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	4a6b      	ldr	r2, [pc, #428]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bc96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bc9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	685b      	ldr	r3, [r3, #4]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d013      	beq.n	801bccc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bca4:	f7fc fbcc 	bl	8018440 <HAL_GetTick>
 801bca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bcaa:	e008      	b.n	801bcbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bcac:	f7fc fbc8 	bl	8018440 <HAL_GetTick>
 801bcb0:	4602      	mov	r2, r0
 801bcb2:	693b      	ldr	r3, [r7, #16]
 801bcb4:	1ad3      	subs	r3, r2, r3
 801bcb6:	2b64      	cmp	r3, #100	; 0x64
 801bcb8:	d901      	bls.n	801bcbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bcba:	2303      	movs	r3, #3
 801bcbc:	e21f      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bcbe:	4b61      	ldr	r3, [pc, #388]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d0f0      	beq.n	801bcac <HAL_RCC_OscConfig+0xdc>
 801bcca:	e014      	b.n	801bcf6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bccc:	f7fc fbb8 	bl	8018440 <HAL_GetTick>
 801bcd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bcd2:	e008      	b.n	801bce6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bcd4:	f7fc fbb4 	bl	8018440 <HAL_GetTick>
 801bcd8:	4602      	mov	r2, r0
 801bcda:	693b      	ldr	r3, [r7, #16]
 801bcdc:	1ad3      	subs	r3, r2, r3
 801bcde:	2b64      	cmp	r3, #100	; 0x64
 801bce0:	d901      	bls.n	801bce6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bce2:	2303      	movs	r3, #3
 801bce4:	e20b      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bce6:	4b57      	ldr	r3, [pc, #348]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d1f0      	bne.n	801bcd4 <HAL_RCC_OscConfig+0x104>
 801bcf2:	e000      	b.n	801bcf6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bcf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	f003 0302 	and.w	r3, r3, #2
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d06f      	beq.n	801bde2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bd02:	4b50      	ldr	r3, [pc, #320]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd04:	689b      	ldr	r3, [r3, #8]
 801bd06:	f003 030c 	and.w	r3, r3, #12
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d017      	beq.n	801bd3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bd0e:	4b4d      	ldr	r3, [pc, #308]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd10:	689b      	ldr	r3, [r3, #8]
 801bd12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bd16:	2b08      	cmp	r3, #8
 801bd18:	d105      	bne.n	801bd26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bd1a:	4b4a      	ldr	r3, [pc, #296]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd1c:	685b      	ldr	r3, [r3, #4]
 801bd1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d00b      	beq.n	801bd3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bd26:	4b47      	ldr	r3, [pc, #284]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd28:	689b      	ldr	r3, [r3, #8]
 801bd2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bd2e:	2b0c      	cmp	r3, #12
 801bd30:	d11c      	bne.n	801bd6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bd32:	4b44      	ldr	r3, [pc, #272]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd34:	685b      	ldr	r3, [r3, #4]
 801bd36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d116      	bne.n	801bd6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bd3e:	4b41      	ldr	r3, [pc, #260]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	f003 0302 	and.w	r3, r3, #2
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d005      	beq.n	801bd56 <HAL_RCC_OscConfig+0x186>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	68db      	ldr	r3, [r3, #12]
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d001      	beq.n	801bd56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bd52:	2301      	movs	r3, #1
 801bd54:	e1d3      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bd56:	4b3b      	ldr	r3, [pc, #236]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	691b      	ldr	r3, [r3, #16]
 801bd62:	00db      	lsls	r3, r3, #3
 801bd64:	4937      	ldr	r1, [pc, #220]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd66:	4313      	orrs	r3, r2
 801bd68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bd6a:	e03a      	b.n	801bde2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	68db      	ldr	r3, [r3, #12]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d020      	beq.n	801bdb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bd74:	4b34      	ldr	r3, [pc, #208]	; (801be48 <HAL_RCC_OscConfig+0x278>)
 801bd76:	2201      	movs	r2, #1
 801bd78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd7a:	f7fc fb61 	bl	8018440 <HAL_GetTick>
 801bd7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd80:	e008      	b.n	801bd94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bd82:	f7fc fb5d 	bl	8018440 <HAL_GetTick>
 801bd86:	4602      	mov	r2, r0
 801bd88:	693b      	ldr	r3, [r7, #16]
 801bd8a:	1ad3      	subs	r3, r2, r3
 801bd8c:	2b02      	cmp	r3, #2
 801bd8e:	d901      	bls.n	801bd94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bd90:	2303      	movs	r3, #3
 801bd92:	e1b4      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd94:	4b2b      	ldr	r3, [pc, #172]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	f003 0302 	and.w	r3, r3, #2
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d0f0      	beq.n	801bd82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bda0:	4b28      	ldr	r3, [pc, #160]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	691b      	ldr	r3, [r3, #16]
 801bdac:	00db      	lsls	r3, r3, #3
 801bdae:	4925      	ldr	r1, [pc, #148]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bdb0:	4313      	orrs	r3, r2
 801bdb2:	600b      	str	r3, [r1, #0]
 801bdb4:	e015      	b.n	801bde2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bdb6:	4b24      	ldr	r3, [pc, #144]	; (801be48 <HAL_RCC_OscConfig+0x278>)
 801bdb8:	2200      	movs	r2, #0
 801bdba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bdbc:	f7fc fb40 	bl	8018440 <HAL_GetTick>
 801bdc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bdc2:	e008      	b.n	801bdd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bdc4:	f7fc fb3c 	bl	8018440 <HAL_GetTick>
 801bdc8:	4602      	mov	r2, r0
 801bdca:	693b      	ldr	r3, [r7, #16]
 801bdcc:	1ad3      	subs	r3, r2, r3
 801bdce:	2b02      	cmp	r3, #2
 801bdd0:	d901      	bls.n	801bdd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bdd2:	2303      	movs	r3, #3
 801bdd4:	e193      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bdd6:	4b1b      	ldr	r3, [pc, #108]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	f003 0302 	and.w	r3, r3, #2
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d1f0      	bne.n	801bdc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	f003 0308 	and.w	r3, r3, #8
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d036      	beq.n	801be5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	695b      	ldr	r3, [r3, #20]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d016      	beq.n	801be24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bdf6:	4b15      	ldr	r3, [pc, #84]	; (801be4c <HAL_RCC_OscConfig+0x27c>)
 801bdf8:	2201      	movs	r2, #1
 801bdfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bdfc:	f7fc fb20 	bl	8018440 <HAL_GetTick>
 801be00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801be02:	e008      	b.n	801be16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801be04:	f7fc fb1c 	bl	8018440 <HAL_GetTick>
 801be08:	4602      	mov	r2, r0
 801be0a:	693b      	ldr	r3, [r7, #16]
 801be0c:	1ad3      	subs	r3, r2, r3
 801be0e:	2b02      	cmp	r3, #2
 801be10:	d901      	bls.n	801be16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801be12:	2303      	movs	r3, #3
 801be14:	e173      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801be16:	4b0b      	ldr	r3, [pc, #44]	; (801be44 <HAL_RCC_OscConfig+0x274>)
 801be18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be1a:	f003 0302 	and.w	r3, r3, #2
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d0f0      	beq.n	801be04 <HAL_RCC_OscConfig+0x234>
 801be22:	e01b      	b.n	801be5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801be24:	4b09      	ldr	r3, [pc, #36]	; (801be4c <HAL_RCC_OscConfig+0x27c>)
 801be26:	2200      	movs	r2, #0
 801be28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be2a:	f7fc fb09 	bl	8018440 <HAL_GetTick>
 801be2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801be30:	e00e      	b.n	801be50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801be32:	f7fc fb05 	bl	8018440 <HAL_GetTick>
 801be36:	4602      	mov	r2, r0
 801be38:	693b      	ldr	r3, [r7, #16]
 801be3a:	1ad3      	subs	r3, r2, r3
 801be3c:	2b02      	cmp	r3, #2
 801be3e:	d907      	bls.n	801be50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801be40:	2303      	movs	r3, #3
 801be42:	e15c      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
 801be44:	40023800 	.word	0x40023800
 801be48:	42470000 	.word	0x42470000
 801be4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801be50:	4b8a      	ldr	r3, [pc, #552]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801be52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be54:	f003 0302 	and.w	r3, r3, #2
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d1ea      	bne.n	801be32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	f003 0304 	and.w	r3, r3, #4
 801be64:	2b00      	cmp	r3, #0
 801be66:	f000 8097 	beq.w	801bf98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801be6a:	2300      	movs	r3, #0
 801be6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801be6e:	4b83      	ldr	r3, [pc, #524]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be76:	2b00      	cmp	r3, #0
 801be78:	d10f      	bne.n	801be9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801be7a:	2300      	movs	r3, #0
 801be7c:	60bb      	str	r3, [r7, #8]
 801be7e:	4b7f      	ldr	r3, [pc, #508]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be82:	4a7e      	ldr	r2, [pc, #504]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801be84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801be88:	6413      	str	r3, [r2, #64]	; 0x40
 801be8a:	4b7c      	ldr	r3, [pc, #496]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801be92:	60bb      	str	r3, [r7, #8]
 801be94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801be96:	2301      	movs	r3, #1
 801be98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be9a:	4b79      	ldr	r3, [pc, #484]	; (801c080 <HAL_RCC_OscConfig+0x4b0>)
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d118      	bne.n	801bed8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bea6:	4b76      	ldr	r3, [pc, #472]	; (801c080 <HAL_RCC_OscConfig+0x4b0>)
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	4a75      	ldr	r2, [pc, #468]	; (801c080 <HAL_RCC_OscConfig+0x4b0>)
 801beac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801beb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801beb2:	f7fc fac5 	bl	8018440 <HAL_GetTick>
 801beb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801beb8:	e008      	b.n	801becc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801beba:	f7fc fac1 	bl	8018440 <HAL_GetTick>
 801bebe:	4602      	mov	r2, r0
 801bec0:	693b      	ldr	r3, [r7, #16]
 801bec2:	1ad3      	subs	r3, r2, r3
 801bec4:	2b02      	cmp	r3, #2
 801bec6:	d901      	bls.n	801becc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bec8:	2303      	movs	r3, #3
 801beca:	e118      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801becc:	4b6c      	ldr	r3, [pc, #432]	; (801c080 <HAL_RCC_OscConfig+0x4b0>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d0f0      	beq.n	801beba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	689b      	ldr	r3, [r3, #8]
 801bedc:	2b01      	cmp	r3, #1
 801bede:	d106      	bne.n	801beee <HAL_RCC_OscConfig+0x31e>
 801bee0:	4b66      	ldr	r3, [pc, #408]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bee4:	4a65      	ldr	r2, [pc, #404]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bee6:	f043 0301 	orr.w	r3, r3, #1
 801beea:	6713      	str	r3, [r2, #112]	; 0x70
 801beec:	e01c      	b.n	801bf28 <HAL_RCC_OscConfig+0x358>
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	689b      	ldr	r3, [r3, #8]
 801bef2:	2b05      	cmp	r3, #5
 801bef4:	d10c      	bne.n	801bf10 <HAL_RCC_OscConfig+0x340>
 801bef6:	4b61      	ldr	r3, [pc, #388]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801befa:	4a60      	ldr	r2, [pc, #384]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801befc:	f043 0304 	orr.w	r3, r3, #4
 801bf00:	6713      	str	r3, [r2, #112]	; 0x70
 801bf02:	4b5e      	ldr	r3, [pc, #376]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf06:	4a5d      	ldr	r2, [pc, #372]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf08:	f043 0301 	orr.w	r3, r3, #1
 801bf0c:	6713      	str	r3, [r2, #112]	; 0x70
 801bf0e:	e00b      	b.n	801bf28 <HAL_RCC_OscConfig+0x358>
 801bf10:	4b5a      	ldr	r3, [pc, #360]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf14:	4a59      	ldr	r2, [pc, #356]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf16:	f023 0301 	bic.w	r3, r3, #1
 801bf1a:	6713      	str	r3, [r2, #112]	; 0x70
 801bf1c:	4b57      	ldr	r3, [pc, #348]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf20:	4a56      	ldr	r2, [pc, #344]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf22:	f023 0304 	bic.w	r3, r3, #4
 801bf26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	689b      	ldr	r3, [r3, #8]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d015      	beq.n	801bf5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf30:	f7fc fa86 	bl	8018440 <HAL_GetTick>
 801bf34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bf36:	e00a      	b.n	801bf4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bf38:	f7fc fa82 	bl	8018440 <HAL_GetTick>
 801bf3c:	4602      	mov	r2, r0
 801bf3e:	693b      	ldr	r3, [r7, #16]
 801bf40:	1ad3      	subs	r3, r2, r3
 801bf42:	f241 3288 	movw	r2, #5000	; 0x1388
 801bf46:	4293      	cmp	r3, r2
 801bf48:	d901      	bls.n	801bf4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801bf4a:	2303      	movs	r3, #3
 801bf4c:	e0d7      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bf4e:	4b4b      	ldr	r3, [pc, #300]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf52:	f003 0302 	and.w	r3, r3, #2
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d0ee      	beq.n	801bf38 <HAL_RCC_OscConfig+0x368>
 801bf5a:	e014      	b.n	801bf86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf5c:	f7fc fa70 	bl	8018440 <HAL_GetTick>
 801bf60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bf62:	e00a      	b.n	801bf7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bf64:	f7fc fa6c 	bl	8018440 <HAL_GetTick>
 801bf68:	4602      	mov	r2, r0
 801bf6a:	693b      	ldr	r3, [r7, #16]
 801bf6c:	1ad3      	subs	r3, r2, r3
 801bf6e:	f241 3288 	movw	r2, #5000	; 0x1388
 801bf72:	4293      	cmp	r3, r2
 801bf74:	d901      	bls.n	801bf7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801bf76:	2303      	movs	r3, #3
 801bf78:	e0c1      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bf7a:	4b40      	ldr	r3, [pc, #256]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf7e:	f003 0302 	and.w	r3, r3, #2
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d1ee      	bne.n	801bf64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bf86:	7dfb      	ldrb	r3, [r7, #23]
 801bf88:	2b01      	cmp	r3, #1
 801bf8a:	d105      	bne.n	801bf98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bf8c:	4b3b      	ldr	r3, [pc, #236]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf90:	4a3a      	ldr	r2, [pc, #232]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bf92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bf96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	699b      	ldr	r3, [r3, #24]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	f000 80ad 	beq.w	801c0fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bfa2:	4b36      	ldr	r3, [pc, #216]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bfa4:	689b      	ldr	r3, [r3, #8]
 801bfa6:	f003 030c 	and.w	r3, r3, #12
 801bfaa:	2b08      	cmp	r3, #8
 801bfac:	d060      	beq.n	801c070 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	699b      	ldr	r3, [r3, #24]
 801bfb2:	2b02      	cmp	r3, #2
 801bfb4:	d145      	bne.n	801c042 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bfb6:	4b33      	ldr	r3, [pc, #204]	; (801c084 <HAL_RCC_OscConfig+0x4b4>)
 801bfb8:	2200      	movs	r2, #0
 801bfba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfbc:	f7fc fa40 	bl	8018440 <HAL_GetTick>
 801bfc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfc2:	e008      	b.n	801bfd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bfc4:	f7fc fa3c 	bl	8018440 <HAL_GetTick>
 801bfc8:	4602      	mov	r2, r0
 801bfca:	693b      	ldr	r3, [r7, #16]
 801bfcc:	1ad3      	subs	r3, r2, r3
 801bfce:	2b02      	cmp	r3, #2
 801bfd0:	d901      	bls.n	801bfd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bfd2:	2303      	movs	r3, #3
 801bfd4:	e093      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfd6:	4b29      	ldr	r3, [pc, #164]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d1f0      	bne.n	801bfc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	69da      	ldr	r2, [r3, #28]
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	6a1b      	ldr	r3, [r3, #32]
 801bfea:	431a      	orrs	r2, r3
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bff0:	019b      	lsls	r3, r3, #6
 801bff2:	431a      	orrs	r2, r3
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bff8:	085b      	lsrs	r3, r3, #1
 801bffa:	3b01      	subs	r3, #1
 801bffc:	041b      	lsls	r3, r3, #16
 801bffe:	431a      	orrs	r2, r3
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c004:	061b      	lsls	r3, r3, #24
 801c006:	431a      	orrs	r2, r3
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c00c:	071b      	lsls	r3, r3, #28
 801c00e:	491b      	ldr	r1, [pc, #108]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801c010:	4313      	orrs	r3, r2
 801c012:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c014:	4b1b      	ldr	r3, [pc, #108]	; (801c084 <HAL_RCC_OscConfig+0x4b4>)
 801c016:	2201      	movs	r2, #1
 801c018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c01a:	f7fc fa11 	bl	8018440 <HAL_GetTick>
 801c01e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c020:	e008      	b.n	801c034 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c022:	f7fc fa0d 	bl	8018440 <HAL_GetTick>
 801c026:	4602      	mov	r2, r0
 801c028:	693b      	ldr	r3, [r7, #16]
 801c02a:	1ad3      	subs	r3, r2, r3
 801c02c:	2b02      	cmp	r3, #2
 801c02e:	d901      	bls.n	801c034 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801c030:	2303      	movs	r3, #3
 801c032:	e064      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c034:	4b11      	ldr	r3, [pc, #68]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d0f0      	beq.n	801c022 <HAL_RCC_OscConfig+0x452>
 801c040:	e05c      	b.n	801c0fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c042:	4b10      	ldr	r3, [pc, #64]	; (801c084 <HAL_RCC_OscConfig+0x4b4>)
 801c044:	2200      	movs	r2, #0
 801c046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c048:	f7fc f9fa 	bl	8018440 <HAL_GetTick>
 801c04c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c04e:	e008      	b.n	801c062 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c050:	f7fc f9f6 	bl	8018440 <HAL_GetTick>
 801c054:	4602      	mov	r2, r0
 801c056:	693b      	ldr	r3, [r7, #16]
 801c058:	1ad3      	subs	r3, r2, r3
 801c05a:	2b02      	cmp	r3, #2
 801c05c:	d901      	bls.n	801c062 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801c05e:	2303      	movs	r3, #3
 801c060:	e04d      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c062:	4b06      	ldr	r3, [pc, #24]	; (801c07c <HAL_RCC_OscConfig+0x4ac>)
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d1f0      	bne.n	801c050 <HAL_RCC_OscConfig+0x480>
 801c06e:	e045      	b.n	801c0fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	699b      	ldr	r3, [r3, #24]
 801c074:	2b01      	cmp	r3, #1
 801c076:	d107      	bne.n	801c088 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c078:	2301      	movs	r3, #1
 801c07a:	e040      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
 801c07c:	40023800 	.word	0x40023800
 801c080:	40007000 	.word	0x40007000
 801c084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c088:	4b1f      	ldr	r3, [pc, #124]	; (801c108 <HAL_RCC_OscConfig+0x538>)
 801c08a:	685b      	ldr	r3, [r3, #4]
 801c08c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	699b      	ldr	r3, [r3, #24]
 801c092:	2b01      	cmp	r3, #1
 801c094:	d030      	beq.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d129      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c0ae:	429a      	cmp	r2, r3
 801c0b0:	d122      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c0b2:	68fa      	ldr	r2, [r7, #12]
 801c0b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	687a      	ldr	r2, [r7, #4]
 801c0bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c0be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c0c0:	4293      	cmp	r3, r2
 801c0c2:	d119      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0ce:	085b      	lsrs	r3, r3, #1
 801c0d0:	3b01      	subs	r3, #1
 801c0d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c0d4:	429a      	cmp	r2, r3
 801c0d6:	d10f      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	d107      	bne.n	801c0f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c0f4:	429a      	cmp	r2, r3
 801c0f6:	d001      	beq.n	801c0fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c0f8:	2301      	movs	r3, #1
 801c0fa:	e000      	b.n	801c0fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c0fc:	2300      	movs	r3, #0
}
 801c0fe:	4618      	mov	r0, r3
 801c100:	3718      	adds	r7, #24
 801c102:	46bd      	mov	sp, r7
 801c104:	bd80      	pop	{r7, pc}
 801c106:	bf00      	nop
 801c108:	40023800 	.word	0x40023800

0801c10c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b082      	sub	sp, #8
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d101      	bne.n	801c11e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c11a:	2301      	movs	r3, #1
 801c11c:	e07b      	b.n	801c216 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c122:	2b00      	cmp	r3, #0
 801c124:	d108      	bne.n	801c138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	685b      	ldr	r3, [r3, #4]
 801c12a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c12e:	d009      	beq.n	801c144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2200      	movs	r2, #0
 801c134:	61da      	str	r2, [r3, #28]
 801c136:	e005      	b.n	801c144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	2200      	movs	r2, #0
 801c13c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	2200      	movs	r2, #0
 801c142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	2200      	movs	r2, #0
 801c148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c150:	b2db      	uxtb	r3, r3
 801c152:	2b00      	cmp	r3, #0
 801c154:	d106      	bne.n	801c164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	2200      	movs	r2, #0
 801c15a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c15e:	6878      	ldr	r0, [r7, #4]
 801c160:	f7fb ff3a 	bl	8017fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	2202      	movs	r2, #2
 801c168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	681a      	ldr	r2, [r3, #0]
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c17a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	689b      	ldr	r3, [r3, #8]
 801c188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c18c:	431a      	orrs	r2, r3
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	68db      	ldr	r3, [r3, #12]
 801c192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c196:	431a      	orrs	r2, r3
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	691b      	ldr	r3, [r3, #16]
 801c19c:	f003 0302 	and.w	r3, r3, #2
 801c1a0:	431a      	orrs	r2, r3
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	695b      	ldr	r3, [r3, #20]
 801c1a6:	f003 0301 	and.w	r3, r3, #1
 801c1aa:	431a      	orrs	r2, r3
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	699b      	ldr	r3, [r3, #24]
 801c1b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c1b4:	431a      	orrs	r2, r3
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	69db      	ldr	r3, [r3, #28]
 801c1ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c1be:	431a      	orrs	r2, r3
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	6a1b      	ldr	r3, [r3, #32]
 801c1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c1c8:	ea42 0103 	orr.w	r1, r2, r3
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	430a      	orrs	r2, r1
 801c1da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	699b      	ldr	r3, [r3, #24]
 801c1e0:	0c1b      	lsrs	r3, r3, #16
 801c1e2:	f003 0104 	and.w	r1, r3, #4
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1ea:	f003 0210 	and.w	r2, r3, #16
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	430a      	orrs	r2, r1
 801c1f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	69da      	ldr	r2, [r3, #28]
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c204:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	2200      	movs	r2, #0
 801c20a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	2201      	movs	r2, #1
 801c210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c214:	2300      	movs	r3, #0
}
 801c216:	4618      	mov	r0, r3
 801c218:	3708      	adds	r7, #8
 801c21a:	46bd      	mov	sp, r7
 801c21c:	bd80      	pop	{r7, pc}

0801c21e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c21e:	b580      	push	{r7, lr}
 801c220:	b088      	sub	sp, #32
 801c222:	af00      	add	r7, sp, #0
 801c224:	60f8      	str	r0, [r7, #12]
 801c226:	60b9      	str	r1, [r7, #8]
 801c228:	603b      	str	r3, [r7, #0]
 801c22a:	4613      	mov	r3, r2
 801c22c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c22e:	2300      	movs	r3, #0
 801c230:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c238:	2b01      	cmp	r3, #1
 801c23a:	d101      	bne.n	801c240 <HAL_SPI_Transmit+0x22>
 801c23c:	2302      	movs	r3, #2
 801c23e:	e126      	b.n	801c48e <HAL_SPI_Transmit+0x270>
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	2201      	movs	r2, #1
 801c244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c248:	f7fc f8fa 	bl	8018440 <HAL_GetTick>
 801c24c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c24e:	88fb      	ldrh	r3, [r7, #6]
 801c250:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c258:	b2db      	uxtb	r3, r3
 801c25a:	2b01      	cmp	r3, #1
 801c25c:	d002      	beq.n	801c264 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c25e:	2302      	movs	r3, #2
 801c260:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c262:	e10b      	b.n	801c47c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c264:	68bb      	ldr	r3, [r7, #8]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d002      	beq.n	801c270 <HAL_SPI_Transmit+0x52>
 801c26a:	88fb      	ldrh	r3, [r7, #6]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d102      	bne.n	801c276 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c270:	2301      	movs	r3, #1
 801c272:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c274:	e102      	b.n	801c47c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	2203      	movs	r2, #3
 801c27a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	2200      	movs	r2, #0
 801c282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	68ba      	ldr	r2, [r7, #8]
 801c288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c28a:	68fb      	ldr	r3, [r7, #12]
 801c28c:	88fa      	ldrh	r2, [r7, #6]
 801c28e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	88fa      	ldrh	r2, [r7, #6]
 801c294:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	2200      	movs	r2, #0
 801c29a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2200      	movs	r2, #0
 801c2a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	2200      	movs	r2, #0
 801c2b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	689b      	ldr	r3, [r3, #8]
 801c2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c2bc:	d10f      	bne.n	801c2de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	681a      	ldr	r2, [r3, #0]
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c2cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	681a      	ldr	r2, [r3, #0]
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c2dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c2e8:	2b40      	cmp	r3, #64	; 0x40
 801c2ea:	d007      	beq.n	801c2fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	681a      	ldr	r2, [r3, #0]
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c2fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	68db      	ldr	r3, [r3, #12]
 801c300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c304:	d14b      	bne.n	801c39e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	685b      	ldr	r3, [r3, #4]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d002      	beq.n	801c314 <HAL_SPI_Transmit+0xf6>
 801c30e:	8afb      	ldrh	r3, [r7, #22]
 801c310:	2b01      	cmp	r3, #1
 801c312:	d13e      	bne.n	801c392 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c318:	881a      	ldrh	r2, [r3, #0]
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c324:	1c9a      	adds	r2, r3, #2
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c32e:	b29b      	uxth	r3, r3
 801c330:	3b01      	subs	r3, #1
 801c332:	b29a      	uxth	r2, r3
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c338:	e02b      	b.n	801c392 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	689b      	ldr	r3, [r3, #8]
 801c340:	f003 0302 	and.w	r3, r3, #2
 801c344:	2b02      	cmp	r3, #2
 801c346:	d112      	bne.n	801c36e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c34c:	881a      	ldrh	r2, [r3, #0]
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c358:	1c9a      	adds	r2, r3, #2
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c362:	b29b      	uxth	r3, r3
 801c364:	3b01      	subs	r3, #1
 801c366:	b29a      	uxth	r2, r3
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	86da      	strh	r2, [r3, #54]	; 0x36
 801c36c:	e011      	b.n	801c392 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c36e:	f7fc f867 	bl	8018440 <HAL_GetTick>
 801c372:	4602      	mov	r2, r0
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	1ad3      	subs	r3, r2, r3
 801c378:	683a      	ldr	r2, [r7, #0]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d803      	bhi.n	801c386 <HAL_SPI_Transmit+0x168>
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c384:	d102      	bne.n	801c38c <HAL_SPI_Transmit+0x16e>
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d102      	bne.n	801c392 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c38c:	2303      	movs	r3, #3
 801c38e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c390:	e074      	b.n	801c47c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c396:	b29b      	uxth	r3, r3
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d1ce      	bne.n	801c33a <HAL_SPI_Transmit+0x11c>
 801c39c:	e04c      	b.n	801c438 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	685b      	ldr	r3, [r3, #4]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d002      	beq.n	801c3ac <HAL_SPI_Transmit+0x18e>
 801c3a6:	8afb      	ldrh	r3, [r7, #22]
 801c3a8:	2b01      	cmp	r3, #1
 801c3aa:	d140      	bne.n	801c42e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	330c      	adds	r3, #12
 801c3b6:	7812      	ldrb	r2, [r2, #0]
 801c3b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3be:	1c5a      	adds	r2, r3, #1
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c3c8:	b29b      	uxth	r3, r3
 801c3ca:	3b01      	subs	r3, #1
 801c3cc:	b29a      	uxth	r2, r3
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c3d2:	e02c      	b.n	801c42e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	689b      	ldr	r3, [r3, #8]
 801c3da:	f003 0302 	and.w	r3, r3, #2
 801c3de:	2b02      	cmp	r3, #2
 801c3e0:	d113      	bne.n	801c40a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	330c      	adds	r3, #12
 801c3ec:	7812      	ldrb	r2, [r2, #0]
 801c3ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3f4:	1c5a      	adds	r2, r3, #1
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	3b01      	subs	r3, #1
 801c402:	b29a      	uxth	r2, r3
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	86da      	strh	r2, [r3, #54]	; 0x36
 801c408:	e011      	b.n	801c42e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c40a:	f7fc f819 	bl	8018440 <HAL_GetTick>
 801c40e:	4602      	mov	r2, r0
 801c410:	69bb      	ldr	r3, [r7, #24]
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	683a      	ldr	r2, [r7, #0]
 801c416:	429a      	cmp	r2, r3
 801c418:	d803      	bhi.n	801c422 <HAL_SPI_Transmit+0x204>
 801c41a:	683b      	ldr	r3, [r7, #0]
 801c41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c420:	d102      	bne.n	801c428 <HAL_SPI_Transmit+0x20a>
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d102      	bne.n	801c42e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c428:	2303      	movs	r3, #3
 801c42a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c42c:	e026      	b.n	801c47c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c432:	b29b      	uxth	r3, r3
 801c434:	2b00      	cmp	r3, #0
 801c436:	d1cd      	bne.n	801c3d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c438:	69ba      	ldr	r2, [r7, #24]
 801c43a:	6839      	ldr	r1, [r7, #0]
 801c43c:	68f8      	ldr	r0, [r7, #12]
 801c43e:	f000 fcf7 	bl	801ce30 <SPI_EndRxTxTransaction>
 801c442:	4603      	mov	r3, r0
 801c444:	2b00      	cmp	r3, #0
 801c446:	d002      	beq.n	801c44e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	2220      	movs	r2, #32
 801c44c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d10a      	bne.n	801c46c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c456:	2300      	movs	r3, #0
 801c458:	613b      	str	r3, [r7, #16]
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	68db      	ldr	r3, [r3, #12]
 801c460:	613b      	str	r3, [r7, #16]
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	689b      	ldr	r3, [r3, #8]
 801c468:	613b      	str	r3, [r7, #16]
 801c46a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c470:	2b00      	cmp	r3, #0
 801c472:	d002      	beq.n	801c47a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c474:	2301      	movs	r3, #1
 801c476:	77fb      	strb	r3, [r7, #31]
 801c478:	e000      	b.n	801c47c <HAL_SPI_Transmit+0x25e>
  }

error:
 801c47a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	2201      	movs	r2, #1
 801c480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	2200      	movs	r2, #0
 801c488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c48c:	7ffb      	ldrb	r3, [r7, #31]
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3720      	adds	r7, #32
 801c492:	46bd      	mov	sp, r7
 801c494:	bd80      	pop	{r7, pc}

0801c496 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c496:	b580      	push	{r7, lr}
 801c498:	b088      	sub	sp, #32
 801c49a:	af02      	add	r7, sp, #8
 801c49c:	60f8      	str	r0, [r7, #12]
 801c49e:	60b9      	str	r1, [r7, #8]
 801c4a0:	603b      	str	r3, [r7, #0]
 801c4a2:	4613      	mov	r3, r2
 801c4a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	685b      	ldr	r3, [r3, #4]
 801c4ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c4b2:	d112      	bne.n	801c4da <HAL_SPI_Receive+0x44>
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	689b      	ldr	r3, [r3, #8]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d10e      	bne.n	801c4da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	2204      	movs	r2, #4
 801c4c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c4c4:	88fa      	ldrh	r2, [r7, #6]
 801c4c6:	683b      	ldr	r3, [r7, #0]
 801c4c8:	9300      	str	r3, [sp, #0]
 801c4ca:	4613      	mov	r3, r2
 801c4cc:	68ba      	ldr	r2, [r7, #8]
 801c4ce:	68b9      	ldr	r1, [r7, #8]
 801c4d0:	68f8      	ldr	r0, [r7, #12]
 801c4d2:	f000 f8f1 	bl	801c6b8 <HAL_SPI_TransmitReceive>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	e0ea      	b.n	801c6b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c4e0:	2b01      	cmp	r3, #1
 801c4e2:	d101      	bne.n	801c4e8 <HAL_SPI_Receive+0x52>
 801c4e4:	2302      	movs	r3, #2
 801c4e6:	e0e3      	b.n	801c6b0 <HAL_SPI_Receive+0x21a>
 801c4e8:	68fb      	ldr	r3, [r7, #12]
 801c4ea:	2201      	movs	r2, #1
 801c4ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c4f0:	f7fb ffa6 	bl	8018440 <HAL_GetTick>
 801c4f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c4f6:	68fb      	ldr	r3, [r7, #12]
 801c4f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c4fc:	b2db      	uxtb	r3, r3
 801c4fe:	2b01      	cmp	r3, #1
 801c500:	d002      	beq.n	801c508 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c502:	2302      	movs	r3, #2
 801c504:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c506:	e0ca      	b.n	801c69e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c508:	68bb      	ldr	r3, [r7, #8]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d002      	beq.n	801c514 <HAL_SPI_Receive+0x7e>
 801c50e:	88fb      	ldrh	r3, [r7, #6]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d102      	bne.n	801c51a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c514:	2301      	movs	r3, #1
 801c516:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c518:	e0c1      	b.n	801c69e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	2204      	movs	r2, #4
 801c51e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	2200      	movs	r2, #0
 801c526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	68ba      	ldr	r2, [r7, #8]
 801c52c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	88fa      	ldrh	r2, [r7, #6]
 801c532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	88fa      	ldrh	r2, [r7, #6]
 801c538:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	2200      	movs	r2, #0
 801c53e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	2200      	movs	r2, #0
 801c544:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	2200      	movs	r2, #0
 801c54a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	2200      	movs	r2, #0
 801c550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	2200      	movs	r2, #0
 801c556:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	689b      	ldr	r3, [r3, #8]
 801c55c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c560:	d10f      	bne.n	801c582 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	681a      	ldr	r2, [r3, #0]
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	681a      	ldr	r2, [r3, #0]
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c580:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c58c:	2b40      	cmp	r3, #64	; 0x40
 801c58e:	d007      	beq.n	801c5a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	681a      	ldr	r2, [r3, #0]
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c59e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	68db      	ldr	r3, [r3, #12]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d162      	bne.n	801c66e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c5a8:	e02e      	b.n	801c608 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	689b      	ldr	r3, [r3, #8]
 801c5b0:	f003 0301 	and.w	r3, r3, #1
 801c5b4:	2b01      	cmp	r3, #1
 801c5b6:	d115      	bne.n	801c5e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	f103 020c 	add.w	r2, r3, #12
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5c4:	7812      	ldrb	r2, [r2, #0]
 801c5c6:	b2d2      	uxtb	r2, r2
 801c5c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5ce:	1c5a      	adds	r2, r3, #1
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	b29a      	uxth	r2, r3
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5e2:	e011      	b.n	801c608 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c5e4:	f7fb ff2c 	bl	8018440 <HAL_GetTick>
 801c5e8:	4602      	mov	r2, r0
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	1ad3      	subs	r3, r2, r3
 801c5ee:	683a      	ldr	r2, [r7, #0]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d803      	bhi.n	801c5fc <HAL_SPI_Receive+0x166>
 801c5f4:	683b      	ldr	r3, [r7, #0]
 801c5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5fa:	d102      	bne.n	801c602 <HAL_SPI_Receive+0x16c>
 801c5fc:	683b      	ldr	r3, [r7, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d102      	bne.n	801c608 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c602:	2303      	movs	r3, #3
 801c604:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c606:	e04a      	b.n	801c69e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c60c:	b29b      	uxth	r3, r3
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d1cb      	bne.n	801c5aa <HAL_SPI_Receive+0x114>
 801c612:	e031      	b.n	801c678 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	689b      	ldr	r3, [r3, #8]
 801c61a:	f003 0301 	and.w	r3, r3, #1
 801c61e:	2b01      	cmp	r3, #1
 801c620:	d113      	bne.n	801c64a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	68da      	ldr	r2, [r3, #12]
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c62c:	b292      	uxth	r2, r2
 801c62e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c634:	1c9a      	adds	r2, r3, #2
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c63e:	b29b      	uxth	r3, r3
 801c640:	3b01      	subs	r3, #1
 801c642:	b29a      	uxth	r2, r3
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c648:	e011      	b.n	801c66e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c64a:	f7fb fef9 	bl	8018440 <HAL_GetTick>
 801c64e:	4602      	mov	r2, r0
 801c650:	693b      	ldr	r3, [r7, #16]
 801c652:	1ad3      	subs	r3, r2, r3
 801c654:	683a      	ldr	r2, [r7, #0]
 801c656:	429a      	cmp	r2, r3
 801c658:	d803      	bhi.n	801c662 <HAL_SPI_Receive+0x1cc>
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c660:	d102      	bne.n	801c668 <HAL_SPI_Receive+0x1d2>
 801c662:	683b      	ldr	r3, [r7, #0]
 801c664:	2b00      	cmp	r3, #0
 801c666:	d102      	bne.n	801c66e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c668:	2303      	movs	r3, #3
 801c66a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c66c:	e017      	b.n	801c69e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c672:	b29b      	uxth	r3, r3
 801c674:	2b00      	cmp	r3, #0
 801c676:	d1cd      	bne.n	801c614 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c678:	693a      	ldr	r2, [r7, #16]
 801c67a:	6839      	ldr	r1, [r7, #0]
 801c67c:	68f8      	ldr	r0, [r7, #12]
 801c67e:	f000 fb71 	bl	801cd64 <SPI_EndRxTransaction>
 801c682:	4603      	mov	r3, r0
 801c684:	2b00      	cmp	r3, #0
 801c686:	d002      	beq.n	801c68e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	2220      	movs	r2, #32
 801c68c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c692:	2b00      	cmp	r3, #0
 801c694:	d002      	beq.n	801c69c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c696:	2301      	movs	r3, #1
 801c698:	75fb      	strb	r3, [r7, #23]
 801c69a:	e000      	b.n	801c69e <HAL_SPI_Receive+0x208>
  }

error :
 801c69c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	2201      	movs	r2, #1
 801c6a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	3718      	adds	r7, #24
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b08c      	sub	sp, #48	; 0x30
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	60f8      	str	r0, [r7, #12]
 801c6c0:	60b9      	str	r1, [r7, #8]
 801c6c2:	607a      	str	r2, [r7, #4]
 801c6c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c6d6:	2b01      	cmp	r3, #1
 801c6d8:	d101      	bne.n	801c6de <HAL_SPI_TransmitReceive+0x26>
 801c6da:	2302      	movs	r3, #2
 801c6dc:	e18a      	b.n	801c9f4 <HAL_SPI_TransmitReceive+0x33c>
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	2201      	movs	r2, #1
 801c6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c6e6:	f7fb feab 	bl	8018440 <HAL_GetTick>
 801c6ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c6f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	685b      	ldr	r3, [r3, #4]
 801c6fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c6fc:	887b      	ldrh	r3, [r7, #2]
 801c6fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c704:	2b01      	cmp	r3, #1
 801c706:	d00f      	beq.n	801c728 <HAL_SPI_TransmitReceive+0x70>
 801c708:	69fb      	ldr	r3, [r7, #28]
 801c70a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c70e:	d107      	bne.n	801c720 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	689b      	ldr	r3, [r3, #8]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d103      	bne.n	801c720 <HAL_SPI_TransmitReceive+0x68>
 801c718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c71c:	2b04      	cmp	r3, #4
 801c71e:	d003      	beq.n	801c728 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c720:	2302      	movs	r3, #2
 801c722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c726:	e15b      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c728:	68bb      	ldr	r3, [r7, #8]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d005      	beq.n	801c73a <HAL_SPI_TransmitReceive+0x82>
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d002      	beq.n	801c73a <HAL_SPI_TransmitReceive+0x82>
 801c734:	887b      	ldrh	r3, [r7, #2]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d103      	bne.n	801c742 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c73a:	2301      	movs	r3, #1
 801c73c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c740:	e14e      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c748:	b2db      	uxtb	r3, r3
 801c74a:	2b04      	cmp	r3, #4
 801c74c:	d003      	beq.n	801c756 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	2205      	movs	r2, #5
 801c752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	2200      	movs	r2, #0
 801c75a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	887a      	ldrh	r2, [r7, #2]
 801c766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	887a      	ldrh	r2, [r7, #2]
 801c76c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	68ba      	ldr	r2, [r7, #8]
 801c772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	887a      	ldrh	r2, [r7, #2]
 801c778:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	887a      	ldrh	r2, [r7, #2]
 801c77e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	2200      	movs	r2, #0
 801c784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	2200      	movs	r2, #0
 801c78a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c796:	2b40      	cmp	r3, #64	; 0x40
 801c798:	d007      	beq.n	801c7aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	681a      	ldr	r2, [r3, #0]
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c7a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	68db      	ldr	r3, [r3, #12]
 801c7ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c7b2:	d178      	bne.n	801c8a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	685b      	ldr	r3, [r3, #4]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d002      	beq.n	801c7c2 <HAL_SPI_TransmitReceive+0x10a>
 801c7bc:	8b7b      	ldrh	r3, [r7, #26]
 801c7be:	2b01      	cmp	r3, #1
 801c7c0:	d166      	bne.n	801c890 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7c6:	881a      	ldrh	r2, [r3, #0]
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7d2:	1c9a      	adds	r2, r3, #2
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7dc:	b29b      	uxth	r3, r3
 801c7de:	3b01      	subs	r3, #1
 801c7e0:	b29a      	uxth	r2, r3
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7e6:	e053      	b.n	801c890 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	689b      	ldr	r3, [r3, #8]
 801c7ee:	f003 0302 	and.w	r3, r3, #2
 801c7f2:	2b02      	cmp	r3, #2
 801c7f4:	d11b      	bne.n	801c82e <HAL_SPI_TransmitReceive+0x176>
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d016      	beq.n	801c82e <HAL_SPI_TransmitReceive+0x176>
 801c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c802:	2b01      	cmp	r3, #1
 801c804:	d113      	bne.n	801c82e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c80a:	881a      	ldrh	r2, [r3, #0]
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c816:	1c9a      	adds	r2, r3, #2
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c820:	b29b      	uxth	r3, r3
 801c822:	3b01      	subs	r3, #1
 801c824:	b29a      	uxth	r2, r3
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c82a:	2300      	movs	r3, #0
 801c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	689b      	ldr	r3, [r3, #8]
 801c834:	f003 0301 	and.w	r3, r3, #1
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d119      	bne.n	801c870 <HAL_SPI_TransmitReceive+0x1b8>
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c840:	b29b      	uxth	r3, r3
 801c842:	2b00      	cmp	r3, #0
 801c844:	d014      	beq.n	801c870 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	68da      	ldr	r2, [r3, #12]
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c850:	b292      	uxth	r2, r2
 801c852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c858:	1c9a      	adds	r2, r3, #2
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c862:	b29b      	uxth	r3, r3
 801c864:	3b01      	subs	r3, #1
 801c866:	b29a      	uxth	r2, r3
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c86c:	2301      	movs	r3, #1
 801c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c870:	f7fb fde6 	bl	8018440 <HAL_GetTick>
 801c874:	4602      	mov	r2, r0
 801c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c878:	1ad3      	subs	r3, r2, r3
 801c87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c87c:	429a      	cmp	r2, r3
 801c87e:	d807      	bhi.n	801c890 <HAL_SPI_TransmitReceive+0x1d8>
 801c880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c882:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c886:	d003      	beq.n	801c890 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c888:	2303      	movs	r3, #3
 801c88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c88e:	e0a7      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c894:	b29b      	uxth	r3, r3
 801c896:	2b00      	cmp	r3, #0
 801c898:	d1a6      	bne.n	801c7e8 <HAL_SPI_TransmitReceive+0x130>
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c89e:	b29b      	uxth	r3, r3
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d1a1      	bne.n	801c7e8 <HAL_SPI_TransmitReceive+0x130>
 801c8a4:	e07c      	b.n	801c9a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d002      	beq.n	801c8b4 <HAL_SPI_TransmitReceive+0x1fc>
 801c8ae:	8b7b      	ldrh	r3, [r7, #26]
 801c8b0:	2b01      	cmp	r3, #1
 801c8b2:	d16b      	bne.n	801c98c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	330c      	adds	r3, #12
 801c8be:	7812      	ldrb	r2, [r2, #0]
 801c8c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8c6:	1c5a      	adds	r2, r3, #1
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8d0:	b29b      	uxth	r3, r3
 801c8d2:	3b01      	subs	r3, #1
 801c8d4:	b29a      	uxth	r2, r3
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8da:	e057      	b.n	801c98c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	689b      	ldr	r3, [r3, #8]
 801c8e2:	f003 0302 	and.w	r3, r3, #2
 801c8e6:	2b02      	cmp	r3, #2
 801c8e8:	d11c      	bne.n	801c924 <HAL_SPI_TransmitReceive+0x26c>
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8ee:	b29b      	uxth	r3, r3
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d017      	beq.n	801c924 <HAL_SPI_TransmitReceive+0x26c>
 801c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8f6:	2b01      	cmp	r3, #1
 801c8f8:	d114      	bne.n	801c924 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	330c      	adds	r3, #12
 801c904:	7812      	ldrb	r2, [r2, #0]
 801c906:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c90c:	1c5a      	adds	r2, r3, #1
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c916:	b29b      	uxth	r3, r3
 801c918:	3b01      	subs	r3, #1
 801c91a:	b29a      	uxth	r2, r3
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c920:	2300      	movs	r3, #0
 801c922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	689b      	ldr	r3, [r3, #8]
 801c92a:	f003 0301 	and.w	r3, r3, #1
 801c92e:	2b01      	cmp	r3, #1
 801c930:	d119      	bne.n	801c966 <HAL_SPI_TransmitReceive+0x2ae>
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c936:	b29b      	uxth	r3, r3
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d014      	beq.n	801c966 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	68da      	ldr	r2, [r3, #12]
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c946:	b2d2      	uxtb	r2, r2
 801c948:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c94e:	1c5a      	adds	r2, r3, #1
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c958:	b29b      	uxth	r3, r3
 801c95a:	3b01      	subs	r3, #1
 801c95c:	b29a      	uxth	r2, r3
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c962:	2301      	movs	r3, #1
 801c964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c966:	f7fb fd6b 	bl	8018440 <HAL_GetTick>
 801c96a:	4602      	mov	r2, r0
 801c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96e:	1ad3      	subs	r3, r2, r3
 801c970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c972:	429a      	cmp	r2, r3
 801c974:	d803      	bhi.n	801c97e <HAL_SPI_TransmitReceive+0x2c6>
 801c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c97c:	d102      	bne.n	801c984 <HAL_SPI_TransmitReceive+0x2cc>
 801c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c980:	2b00      	cmp	r3, #0
 801c982:	d103      	bne.n	801c98c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c984:	2303      	movs	r3, #3
 801c986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c98a:	e029      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c990:	b29b      	uxth	r3, r3
 801c992:	2b00      	cmp	r3, #0
 801c994:	d1a2      	bne.n	801c8dc <HAL_SPI_TransmitReceive+0x224>
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c99a:	b29b      	uxth	r3, r3
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d19d      	bne.n	801c8dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c9a4:	68f8      	ldr	r0, [r7, #12]
 801c9a6:	f000 fa43 	bl	801ce30 <SPI_EndRxTxTransaction>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d006      	beq.n	801c9be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	2220      	movs	r2, #32
 801c9ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c9bc:	e010      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	689b      	ldr	r3, [r3, #8]
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d10b      	bne.n	801c9de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	617b      	str	r3, [r7, #20]
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	68db      	ldr	r3, [r3, #12]
 801c9d0:	617b      	str	r3, [r7, #20]
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	689b      	ldr	r3, [r3, #8]
 801c9d8:	617b      	str	r3, [r7, #20]
 801c9da:	697b      	ldr	r3, [r7, #20]
 801c9dc:	e000      	b.n	801c9e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c9de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	2201      	movs	r2, #1
 801c9e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	2200      	movs	r2, #0
 801c9ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c9f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c9f4:	4618      	mov	r0, r3
 801c9f6:	3730      	adds	r7, #48	; 0x30
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	bd80      	pop	{r7, pc}

0801c9fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b088      	sub	sp, #32
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	685b      	ldr	r3, [r3, #4]
 801ca0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	689b      	ldr	r3, [r3, #8]
 801ca12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801ca14:	69bb      	ldr	r3, [r7, #24]
 801ca16:	099b      	lsrs	r3, r3, #6
 801ca18:	f003 0301 	and.w	r3, r3, #1
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d10f      	bne.n	801ca40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801ca20:	69bb      	ldr	r3, [r7, #24]
 801ca22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d00a      	beq.n	801ca40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801ca2a:	69fb      	ldr	r3, [r7, #28]
 801ca2c:	099b      	lsrs	r3, r3, #6
 801ca2e:	f003 0301 	and.w	r3, r3, #1
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d004      	beq.n	801ca40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca3a:	6878      	ldr	r0, [r7, #4]
 801ca3c:	4798      	blx	r3
    return;
 801ca3e:	e0d7      	b.n	801cbf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801ca40:	69bb      	ldr	r3, [r7, #24]
 801ca42:	085b      	lsrs	r3, r3, #1
 801ca44:	f003 0301 	and.w	r3, r3, #1
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d00a      	beq.n	801ca62 <HAL_SPI_IRQHandler+0x66>
 801ca4c:	69fb      	ldr	r3, [r7, #28]
 801ca4e:	09db      	lsrs	r3, r3, #7
 801ca50:	f003 0301 	and.w	r3, r3, #1
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d004      	beq.n	801ca62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca5c:	6878      	ldr	r0, [r7, #4]
 801ca5e:	4798      	blx	r3
    return;
 801ca60:	e0c6      	b.n	801cbf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ca62:	69bb      	ldr	r3, [r7, #24]
 801ca64:	095b      	lsrs	r3, r3, #5
 801ca66:	f003 0301 	and.w	r3, r3, #1
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d10c      	bne.n	801ca88 <HAL_SPI_IRQHandler+0x8c>
 801ca6e:	69bb      	ldr	r3, [r7, #24]
 801ca70:	099b      	lsrs	r3, r3, #6
 801ca72:	f003 0301 	and.w	r3, r3, #1
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d106      	bne.n	801ca88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801ca7a:	69bb      	ldr	r3, [r7, #24]
 801ca7c:	0a1b      	lsrs	r3, r3, #8
 801ca7e:	f003 0301 	and.w	r3, r3, #1
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	f000 80b4 	beq.w	801cbf0 <HAL_SPI_IRQHandler+0x1f4>
 801ca88:	69fb      	ldr	r3, [r7, #28]
 801ca8a:	095b      	lsrs	r3, r3, #5
 801ca8c:	f003 0301 	and.w	r3, r3, #1
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	f000 80ad 	beq.w	801cbf0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ca96:	69bb      	ldr	r3, [r7, #24]
 801ca98:	099b      	lsrs	r3, r3, #6
 801ca9a:	f003 0301 	and.w	r3, r3, #1
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d023      	beq.n	801caea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801caa8:	b2db      	uxtb	r3, r3
 801caaa:	2b03      	cmp	r3, #3
 801caac:	d011      	beq.n	801cad2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cab2:	f043 0204 	orr.w	r2, r3, #4
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801caba:	2300      	movs	r3, #0
 801cabc:	617b      	str	r3, [r7, #20]
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	68db      	ldr	r3, [r3, #12]
 801cac4:	617b      	str	r3, [r7, #20]
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	689b      	ldr	r3, [r3, #8]
 801cacc:	617b      	str	r3, [r7, #20]
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	e00b      	b.n	801caea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cad2:	2300      	movs	r3, #0
 801cad4:	613b      	str	r3, [r7, #16]
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	68db      	ldr	r3, [r3, #12]
 801cadc:	613b      	str	r3, [r7, #16]
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	689b      	ldr	r3, [r3, #8]
 801cae4:	613b      	str	r3, [r7, #16]
 801cae6:	693b      	ldr	r3, [r7, #16]
        return;
 801cae8:	e082      	b.n	801cbf0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801caea:	69bb      	ldr	r3, [r7, #24]
 801caec:	095b      	lsrs	r3, r3, #5
 801caee:	f003 0301 	and.w	r3, r3, #1
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d014      	beq.n	801cb20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cafa:	f043 0201 	orr.w	r2, r3, #1
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801cb02:	2300      	movs	r3, #0
 801cb04:	60fb      	str	r3, [r7, #12]
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	689b      	ldr	r3, [r3, #8]
 801cb0c:	60fb      	str	r3, [r7, #12]
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	681a      	ldr	r2, [r3, #0]
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb1c:	601a      	str	r2, [r3, #0]
 801cb1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801cb20:	69bb      	ldr	r3, [r7, #24]
 801cb22:	0a1b      	lsrs	r3, r3, #8
 801cb24:	f003 0301 	and.w	r3, r3, #1
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d00c      	beq.n	801cb46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb30:	f043 0208 	orr.w	r2, r3, #8
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801cb38:	2300      	movs	r3, #0
 801cb3a:	60bb      	str	r3, [r7, #8]
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	689b      	ldr	r3, [r3, #8]
 801cb42:	60bb      	str	r3, [r7, #8]
 801cb44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d04f      	beq.n	801cbee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	685a      	ldr	r2, [r3, #4]
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cb5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	2201      	movs	r2, #1
 801cb62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cb66:	69fb      	ldr	r3, [r7, #28]
 801cb68:	f003 0302 	and.w	r3, r3, #2
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d104      	bne.n	801cb7a <HAL_SPI_IRQHandler+0x17e>
 801cb70:	69fb      	ldr	r3, [r7, #28]
 801cb72:	f003 0301 	and.w	r3, r3, #1
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d034      	beq.n	801cbe4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	685a      	ldr	r2, [r3, #4]
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	f022 0203 	bic.w	r2, r2, #3
 801cb88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d011      	beq.n	801cbb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb96:	4a18      	ldr	r2, [pc, #96]	; (801cbf8 <HAL_SPI_IRQHandler+0x1fc>)
 801cb98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7fc f946 	bl	8018e30 <HAL_DMA_Abort_IT>
 801cba4:	4603      	mov	r3, r0
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d005      	beq.n	801cbb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cbae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d016      	beq.n	801cbec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbc2:	4a0d      	ldr	r2, [pc, #52]	; (801cbf8 <HAL_SPI_IRQHandler+0x1fc>)
 801cbc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbca:	4618      	mov	r0, r3
 801cbcc:	f7fc f930 	bl	8018e30 <HAL_DMA_Abort_IT>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d00a      	beq.n	801cbec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cbda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cbe2:	e003      	b.n	801cbec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cbe4:	6878      	ldr	r0, [r7, #4]
 801cbe6:	f000 f809 	bl	801cbfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cbea:	e000      	b.n	801cbee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cbec:	bf00      	nop
    return;
 801cbee:	bf00      	nop
  }
}
 801cbf0:	3720      	adds	r7, #32
 801cbf2:	46bd      	mov	sp, r7
 801cbf4:	bd80      	pop	{r7, pc}
 801cbf6:	bf00      	nop
 801cbf8:	0801cc2d 	.word	0x0801cc2d

0801cbfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cbfc:	b480      	push	{r7}
 801cbfe:	b083      	sub	sp, #12
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cc04:	bf00      	nop
 801cc06:	370c      	adds	r7, #12
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc0e:	4770      	bx	lr

0801cc10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cc10:	b480      	push	{r7}
 801cc12:	b083      	sub	sp, #12
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cc1e:	b2db      	uxtb	r3, r3
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	370c      	adds	r7, #12
 801cc24:	46bd      	mov	sp, r7
 801cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc2a:	4770      	bx	lr

0801cc2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b084      	sub	sp, #16
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cc3a:	68fb      	ldr	r3, [r7, #12]
 801cc3c:	2200      	movs	r2, #0
 801cc3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	2200      	movs	r2, #0
 801cc44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cc46:	68f8      	ldr	r0, [r7, #12]
 801cc48:	f7ff ffd8 	bl	801cbfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cc4c:	bf00      	nop
 801cc4e:	3710      	adds	r7, #16
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}

0801cc54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b088      	sub	sp, #32
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	60f8      	str	r0, [r7, #12]
 801cc5c:	60b9      	str	r1, [r7, #8]
 801cc5e:	603b      	str	r3, [r7, #0]
 801cc60:	4613      	mov	r3, r2
 801cc62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cc64:	f7fb fbec 	bl	8018440 <HAL_GetTick>
 801cc68:	4602      	mov	r2, r0
 801cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc6c:	1a9b      	subs	r3, r3, r2
 801cc6e:	683a      	ldr	r2, [r7, #0]
 801cc70:	4413      	add	r3, r2
 801cc72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cc74:	f7fb fbe4 	bl	8018440 <HAL_GetTick>
 801cc78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cc7a:	4b39      	ldr	r3, [pc, #228]	; (801cd60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	015b      	lsls	r3, r3, #5
 801cc80:	0d1b      	lsrs	r3, r3, #20
 801cc82:	69fa      	ldr	r2, [r7, #28]
 801cc84:	fb02 f303 	mul.w	r3, r2, r3
 801cc88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc8a:	e054      	b.n	801cd36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cc8c:	683b      	ldr	r3, [r7, #0]
 801cc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc92:	d050      	beq.n	801cd36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cc94:	f7fb fbd4 	bl	8018440 <HAL_GetTick>
 801cc98:	4602      	mov	r2, r0
 801cc9a:	69bb      	ldr	r3, [r7, #24]
 801cc9c:	1ad3      	subs	r3, r2, r3
 801cc9e:	69fa      	ldr	r2, [r7, #28]
 801cca0:	429a      	cmp	r2, r3
 801cca2:	d902      	bls.n	801ccaa <SPI_WaitFlagStateUntilTimeout+0x56>
 801cca4:	69fb      	ldr	r3, [r7, #28]
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d13d      	bne.n	801cd26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	685a      	ldr	r2, [r3, #4]
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	681b      	ldr	r3, [r3, #0]
 801ccb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ccb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccc2:	d111      	bne.n	801cce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	689b      	ldr	r3, [r3, #8]
 801ccc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cccc:	d004      	beq.n	801ccd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	689b      	ldr	r3, [r3, #8]
 801ccd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ccd6:	d107      	bne.n	801cce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	681a      	ldr	r2, [r3, #0]
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ccf0:	d10f      	bne.n	801cd12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	681a      	ldr	r2, [r3, #0]
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cd00:	601a      	str	r2, [r3, #0]
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	681a      	ldr	r2, [r3, #0]
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cd10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	2201      	movs	r2, #1
 801cd16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cd22:	2303      	movs	r3, #3
 801cd24:	e017      	b.n	801cd56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801cd26:	697b      	ldr	r3, [r7, #20]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d101      	bne.n	801cd30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cd30:	697b      	ldr	r3, [r7, #20]
 801cd32:	3b01      	subs	r3, #1
 801cd34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	689a      	ldr	r2, [r3, #8]
 801cd3c:	68bb      	ldr	r3, [r7, #8]
 801cd3e:	4013      	ands	r3, r2
 801cd40:	68ba      	ldr	r2, [r7, #8]
 801cd42:	429a      	cmp	r2, r3
 801cd44:	bf0c      	ite	eq
 801cd46:	2301      	moveq	r3, #1
 801cd48:	2300      	movne	r3, #0
 801cd4a:	b2db      	uxtb	r3, r3
 801cd4c:	461a      	mov	r2, r3
 801cd4e:	79fb      	ldrb	r3, [r7, #7]
 801cd50:	429a      	cmp	r2, r3
 801cd52:	d19b      	bne.n	801cc8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cd54:	2300      	movs	r3, #0
}
 801cd56:	4618      	mov	r0, r3
 801cd58:	3720      	adds	r7, #32
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd80      	pop	{r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	20000588 	.word	0x20000588

0801cd64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b086      	sub	sp, #24
 801cd68:	af02      	add	r7, sp, #8
 801cd6a:	60f8      	str	r0, [r7, #12]
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd78:	d111      	bne.n	801cd9e <SPI_EndRxTransaction+0x3a>
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	689b      	ldr	r3, [r3, #8]
 801cd7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cd82:	d004      	beq.n	801cd8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	689b      	ldr	r3, [r3, #8]
 801cd88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd8c:	d107      	bne.n	801cd9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	681a      	ldr	r2, [r3, #0]
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	685b      	ldr	r3, [r3, #4]
 801cda2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cda6:	d12a      	bne.n	801cdfe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	689b      	ldr	r3, [r3, #8]
 801cdac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cdb0:	d012      	beq.n	801cdd8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	9300      	str	r3, [sp, #0]
 801cdb6:	68bb      	ldr	r3, [r7, #8]
 801cdb8:	2200      	movs	r2, #0
 801cdba:	2180      	movs	r1, #128	; 0x80
 801cdbc:	68f8      	ldr	r0, [r7, #12]
 801cdbe:	f7ff ff49 	bl	801cc54 <SPI_WaitFlagStateUntilTimeout>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d02d      	beq.n	801ce24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdcc:	f043 0220 	orr.w	r2, r3, #32
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cdd4:	2303      	movs	r3, #3
 801cdd6:	e026      	b.n	801ce26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	9300      	str	r3, [sp, #0]
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	2200      	movs	r2, #0
 801cde0:	2101      	movs	r1, #1
 801cde2:	68f8      	ldr	r0, [r7, #12]
 801cde4:	f7ff ff36 	bl	801cc54 <SPI_WaitFlagStateUntilTimeout>
 801cde8:	4603      	mov	r3, r0
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d01a      	beq.n	801ce24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdf2:	f043 0220 	orr.w	r2, r3, #32
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cdfa:	2303      	movs	r3, #3
 801cdfc:	e013      	b.n	801ce26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	9300      	str	r3, [sp, #0]
 801ce02:	68bb      	ldr	r3, [r7, #8]
 801ce04:	2200      	movs	r2, #0
 801ce06:	2101      	movs	r1, #1
 801ce08:	68f8      	ldr	r0, [r7, #12]
 801ce0a:	f7ff ff23 	bl	801cc54 <SPI_WaitFlagStateUntilTimeout>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d007      	beq.n	801ce24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce18:	f043 0220 	orr.w	r2, r3, #32
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801ce20:	2303      	movs	r3, #3
 801ce22:	e000      	b.n	801ce26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801ce24:	2300      	movs	r3, #0
}
 801ce26:	4618      	mov	r0, r3
 801ce28:	3710      	adds	r7, #16
 801ce2a:	46bd      	mov	sp, r7
 801ce2c:	bd80      	pop	{r7, pc}
	...

0801ce30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b088      	sub	sp, #32
 801ce34:	af02      	add	r7, sp, #8
 801ce36:	60f8      	str	r0, [r7, #12]
 801ce38:	60b9      	str	r1, [r7, #8]
 801ce3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ce3c:	4b1b      	ldr	r3, [pc, #108]	; (801ceac <SPI_EndRxTxTransaction+0x7c>)
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	4a1b      	ldr	r2, [pc, #108]	; (801ceb0 <SPI_EndRxTxTransaction+0x80>)
 801ce42:	fba2 2303 	umull	r2, r3, r2, r3
 801ce46:	0d5b      	lsrs	r3, r3, #21
 801ce48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ce4c:	fb02 f303 	mul.w	r3, r2, r3
 801ce50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	685b      	ldr	r3, [r3, #4]
 801ce56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ce5a:	d112      	bne.n	801ce82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	9300      	str	r3, [sp, #0]
 801ce60:	68bb      	ldr	r3, [r7, #8]
 801ce62:	2200      	movs	r2, #0
 801ce64:	2180      	movs	r1, #128	; 0x80
 801ce66:	68f8      	ldr	r0, [r7, #12]
 801ce68:	f7ff fef4 	bl	801cc54 <SPI_WaitFlagStateUntilTimeout>
 801ce6c:	4603      	mov	r3, r0
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d016      	beq.n	801cea0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce76:	f043 0220 	orr.w	r2, r3, #32
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801ce7e:	2303      	movs	r3, #3
 801ce80:	e00f      	b.n	801cea2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d00a      	beq.n	801ce9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801ce88:	697b      	ldr	r3, [r7, #20]
 801ce8a:	3b01      	subs	r3, #1
 801ce8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	689b      	ldr	r3, [r3, #8]
 801ce94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ce98:	2b80      	cmp	r3, #128	; 0x80
 801ce9a:	d0f2      	beq.n	801ce82 <SPI_EndRxTxTransaction+0x52>
 801ce9c:	e000      	b.n	801cea0 <SPI_EndRxTxTransaction+0x70>
        break;
 801ce9e:	bf00      	nop
  }

  return HAL_OK;
 801cea0:	2300      	movs	r3, #0
}
 801cea2:	4618      	mov	r0, r3
 801cea4:	3718      	adds	r7, #24
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd80      	pop	{r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	20000588 	.word	0x20000588
 801ceb0:	165e9f81 	.word	0x165e9f81

0801ceb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b082      	sub	sp, #8
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d101      	bne.n	801cec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cec2:	2301      	movs	r3, #1
 801cec4:	e041      	b.n	801cf4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cecc:	b2db      	uxtb	r3, r3
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d106      	bne.n	801cee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2200      	movs	r2, #0
 801ced6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7fb f908 	bl	80180f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2202      	movs	r2, #2
 801cee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	681a      	ldr	r2, [r3, #0]
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	3304      	adds	r3, #4
 801cef0:	4619      	mov	r1, r3
 801cef2:	4610      	mov	r0, r2
 801cef4:	f000 faf2 	bl	801d4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	2201      	movs	r2, #1
 801cefc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	2201      	movs	r2, #1
 801cf04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2201      	movs	r2, #1
 801cf0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2201      	movs	r2, #1
 801cf14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2201      	movs	r2, #1
 801cf1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	2201      	movs	r2, #1
 801cf24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	2201      	movs	r2, #1
 801cf2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	2201      	movs	r2, #1
 801cf34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	2201      	movs	r2, #1
 801cf3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	2201      	movs	r2, #1
 801cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cf48:	2300      	movs	r3, #0
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	3708      	adds	r7, #8
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd80      	pop	{r7, pc}
	...

0801cf54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cf54:	b480      	push	{r7}
 801cf56:	b085      	sub	sp, #20
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cf62:	b2db      	uxtb	r3, r3
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d001      	beq.n	801cf6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cf68:	2301      	movs	r3, #1
 801cf6a:	e04e      	b.n	801d00a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	2202      	movs	r2, #2
 801cf70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	68da      	ldr	r2, [r3, #12]
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	f042 0201 	orr.w	r2, r2, #1
 801cf82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	4a23      	ldr	r2, [pc, #140]	; (801d018 <HAL_TIM_Base_Start_IT+0xc4>)
 801cf8a:	4293      	cmp	r3, r2
 801cf8c:	d022      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cf96:	d01d      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	4a1f      	ldr	r2, [pc, #124]	; (801d01c <HAL_TIM_Base_Start_IT+0xc8>)
 801cf9e:	4293      	cmp	r3, r2
 801cfa0:	d018      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	4a1e      	ldr	r2, [pc, #120]	; (801d020 <HAL_TIM_Base_Start_IT+0xcc>)
 801cfa8:	4293      	cmp	r3, r2
 801cfaa:	d013      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	4a1c      	ldr	r2, [pc, #112]	; (801d024 <HAL_TIM_Base_Start_IT+0xd0>)
 801cfb2:	4293      	cmp	r3, r2
 801cfb4:	d00e      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	4a1b      	ldr	r2, [pc, #108]	; (801d028 <HAL_TIM_Base_Start_IT+0xd4>)
 801cfbc:	4293      	cmp	r3, r2
 801cfbe:	d009      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	4a19      	ldr	r2, [pc, #100]	; (801d02c <HAL_TIM_Base_Start_IT+0xd8>)
 801cfc6:	4293      	cmp	r3, r2
 801cfc8:	d004      	beq.n	801cfd4 <HAL_TIM_Base_Start_IT+0x80>
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	4a18      	ldr	r2, [pc, #96]	; (801d030 <HAL_TIM_Base_Start_IT+0xdc>)
 801cfd0:	4293      	cmp	r3, r2
 801cfd2:	d111      	bne.n	801cff8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	689b      	ldr	r3, [r3, #8]
 801cfda:	f003 0307 	and.w	r3, r3, #7
 801cfde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	2b06      	cmp	r3, #6
 801cfe4:	d010      	beq.n	801d008 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	681a      	ldr	r2, [r3, #0]
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	f042 0201 	orr.w	r2, r2, #1
 801cff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cff6:	e007      	b.n	801d008 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	681a      	ldr	r2, [r3, #0]
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	f042 0201 	orr.w	r2, r2, #1
 801d006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d008:	2300      	movs	r3, #0
}
 801d00a:	4618      	mov	r0, r3
 801d00c:	3714      	adds	r7, #20
 801d00e:	46bd      	mov	sp, r7
 801d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d014:	4770      	bx	lr
 801d016:	bf00      	nop
 801d018:	40010000 	.word	0x40010000
 801d01c:	40000400 	.word	0x40000400
 801d020:	40000800 	.word	0x40000800
 801d024:	40000c00 	.word	0x40000c00
 801d028:	40010400 	.word	0x40010400
 801d02c:	40014000 	.word	0x40014000
 801d030:	40001800 	.word	0x40001800

0801d034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b082      	sub	sp, #8
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	691b      	ldr	r3, [r3, #16]
 801d042:	f003 0302 	and.w	r3, r3, #2
 801d046:	2b02      	cmp	r3, #2
 801d048:	d122      	bne.n	801d090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	68db      	ldr	r3, [r3, #12]
 801d050:	f003 0302 	and.w	r3, r3, #2
 801d054:	2b02      	cmp	r3, #2
 801d056:	d11b      	bne.n	801d090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	f06f 0202 	mvn.w	r2, #2
 801d060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2201      	movs	r2, #1
 801d066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	699b      	ldr	r3, [r3, #24]
 801d06e:	f003 0303 	and.w	r3, r3, #3
 801d072:	2b00      	cmp	r3, #0
 801d074:	d003      	beq.n	801d07e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d076:	6878      	ldr	r0, [r7, #4]
 801d078:	f000 fa11 	bl	801d49e <HAL_TIM_IC_CaptureCallback>
 801d07c:	e005      	b.n	801d08a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d07e:	6878      	ldr	r0, [r7, #4]
 801d080:	f000 fa03 	bl	801d48a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d084:	6878      	ldr	r0, [r7, #4]
 801d086:	f000 fa14 	bl	801d4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	2200      	movs	r2, #0
 801d08e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	691b      	ldr	r3, [r3, #16]
 801d096:	f003 0304 	and.w	r3, r3, #4
 801d09a:	2b04      	cmp	r3, #4
 801d09c:	d122      	bne.n	801d0e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	68db      	ldr	r3, [r3, #12]
 801d0a4:	f003 0304 	and.w	r3, r3, #4
 801d0a8:	2b04      	cmp	r3, #4
 801d0aa:	d11b      	bne.n	801d0e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	f06f 0204 	mvn.w	r2, #4
 801d0b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2202      	movs	r2, #2
 801d0ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	699b      	ldr	r3, [r3, #24]
 801d0c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d003      	beq.n	801d0d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0ca:	6878      	ldr	r0, [r7, #4]
 801d0cc:	f000 f9e7 	bl	801d49e <HAL_TIM_IC_CaptureCallback>
 801d0d0:	e005      	b.n	801d0de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0d2:	6878      	ldr	r0, [r7, #4]
 801d0d4:	f000 f9d9 	bl	801d48a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0d8:	6878      	ldr	r0, [r7, #4]
 801d0da:	f000 f9ea 	bl	801d4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	691b      	ldr	r3, [r3, #16]
 801d0ea:	f003 0308 	and.w	r3, r3, #8
 801d0ee:	2b08      	cmp	r3, #8
 801d0f0:	d122      	bne.n	801d138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	68db      	ldr	r3, [r3, #12]
 801d0f8:	f003 0308 	and.w	r3, r3, #8
 801d0fc:	2b08      	cmp	r3, #8
 801d0fe:	d11b      	bne.n	801d138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f06f 0208 	mvn.w	r2, #8
 801d108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	2204      	movs	r2, #4
 801d10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	69db      	ldr	r3, [r3, #28]
 801d116:	f003 0303 	and.w	r3, r3, #3
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d003      	beq.n	801d126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d11e:	6878      	ldr	r0, [r7, #4]
 801d120:	f000 f9bd 	bl	801d49e <HAL_TIM_IC_CaptureCallback>
 801d124:	e005      	b.n	801d132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d126:	6878      	ldr	r0, [r7, #4]
 801d128:	f000 f9af 	bl	801d48a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f000 f9c0 	bl	801d4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	2200      	movs	r2, #0
 801d136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	691b      	ldr	r3, [r3, #16]
 801d13e:	f003 0310 	and.w	r3, r3, #16
 801d142:	2b10      	cmp	r3, #16
 801d144:	d122      	bne.n	801d18c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	68db      	ldr	r3, [r3, #12]
 801d14c:	f003 0310 	and.w	r3, r3, #16
 801d150:	2b10      	cmp	r3, #16
 801d152:	d11b      	bne.n	801d18c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	f06f 0210 	mvn.w	r2, #16
 801d15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	2208      	movs	r2, #8
 801d162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	69db      	ldr	r3, [r3, #28]
 801d16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d003      	beq.n	801d17a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f000 f993 	bl	801d49e <HAL_TIM_IC_CaptureCallback>
 801d178:	e005      	b.n	801d186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d17a:	6878      	ldr	r0, [r7, #4]
 801d17c:	f000 f985 	bl	801d48a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d180:	6878      	ldr	r0, [r7, #4]
 801d182:	f000 f996 	bl	801d4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	2200      	movs	r2, #0
 801d18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	681b      	ldr	r3, [r3, #0]
 801d190:	691b      	ldr	r3, [r3, #16]
 801d192:	f003 0301 	and.w	r3, r3, #1
 801d196:	2b01      	cmp	r3, #1
 801d198:	d10e      	bne.n	801d1b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	68db      	ldr	r3, [r3, #12]
 801d1a0:	f003 0301 	and.w	r3, r3, #1
 801d1a4:	2b01      	cmp	r3, #1
 801d1a6:	d107      	bne.n	801d1b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	f06f 0201 	mvn.w	r2, #1
 801d1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d1b2:	6878      	ldr	r0, [r7, #4]
 801d1b4:	f7fa fda8 	bl	8017d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	691b      	ldr	r3, [r3, #16]
 801d1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1c2:	2b80      	cmp	r3, #128	; 0x80
 801d1c4:	d10e      	bne.n	801d1e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	68db      	ldr	r3, [r3, #12]
 801d1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1d0:	2b80      	cmp	r3, #128	; 0x80
 801d1d2:	d107      	bne.n	801d1e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d1de:	6878      	ldr	r0, [r7, #4]
 801d1e0:	f000 fcec 	bl	801dbbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	691b      	ldr	r3, [r3, #16]
 801d1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1ee:	2b40      	cmp	r3, #64	; 0x40
 801d1f0:	d10e      	bne.n	801d210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	68db      	ldr	r3, [r3, #12]
 801d1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1fc:	2b40      	cmp	r3, #64	; 0x40
 801d1fe:	d107      	bne.n	801d210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f000 f95b 	bl	801d4c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	691b      	ldr	r3, [r3, #16]
 801d216:	f003 0320 	and.w	r3, r3, #32
 801d21a:	2b20      	cmp	r3, #32
 801d21c:	d10e      	bne.n	801d23c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	68db      	ldr	r3, [r3, #12]
 801d224:	f003 0320 	and.w	r3, r3, #32
 801d228:	2b20      	cmp	r3, #32
 801d22a:	d107      	bne.n	801d23c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f06f 0220 	mvn.w	r2, #32
 801d234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d236:	6878      	ldr	r0, [r7, #4]
 801d238:	f000 fcb6 	bl	801dba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d23c:	bf00      	nop
 801d23e:	3708      	adds	r7, #8
 801d240:	46bd      	mov	sp, r7
 801d242:	bd80      	pop	{r7, pc}

0801d244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d244:	b580      	push	{r7, lr}
 801d246:	b086      	sub	sp, #24
 801d248:	af00      	add	r7, sp, #0
 801d24a:	60f8      	str	r0, [r7, #12]
 801d24c:	60b9      	str	r1, [r7, #8]
 801d24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d250:	2300      	movs	r3, #0
 801d252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d25a:	2b01      	cmp	r3, #1
 801d25c:	d101      	bne.n	801d262 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d25e:	2302      	movs	r3, #2
 801d260:	e048      	b.n	801d2f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	2201      	movs	r2, #1
 801d266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	2b0c      	cmp	r3, #12
 801d26e:	d839      	bhi.n	801d2e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d270:	a201      	add	r2, pc, #4	; (adr r2, 801d278 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d276:	bf00      	nop
 801d278:	0801d2ad 	.word	0x0801d2ad
 801d27c:	0801d2e5 	.word	0x0801d2e5
 801d280:	0801d2e5 	.word	0x0801d2e5
 801d284:	0801d2e5 	.word	0x0801d2e5
 801d288:	0801d2bb 	.word	0x0801d2bb
 801d28c:	0801d2e5 	.word	0x0801d2e5
 801d290:	0801d2e5 	.word	0x0801d2e5
 801d294:	0801d2e5 	.word	0x0801d2e5
 801d298:	0801d2c9 	.word	0x0801d2c9
 801d29c:	0801d2e5 	.word	0x0801d2e5
 801d2a0:	0801d2e5 	.word	0x0801d2e5
 801d2a4:	0801d2e5 	.word	0x0801d2e5
 801d2a8:	0801d2d7 	.word	0x0801d2d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	68b9      	ldr	r1, [r7, #8]
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f000 f9b2 	bl	801d61c <TIM_OC1_SetConfig>
      break;
 801d2b8:	e017      	b.n	801d2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	68b9      	ldr	r1, [r7, #8]
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	f000 fa1b 	bl	801d6fc <TIM_OC2_SetConfig>
      break;
 801d2c6:	e010      	b.n	801d2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	68b9      	ldr	r1, [r7, #8]
 801d2ce:	4618      	mov	r0, r3
 801d2d0:	f000 fa8a 	bl	801d7e8 <TIM_OC3_SetConfig>
      break;
 801d2d4:	e009      	b.n	801d2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	68b9      	ldr	r1, [r7, #8]
 801d2dc:	4618      	mov	r0, r3
 801d2de:	f000 faf7 	bl	801d8d0 <TIM_OC4_SetConfig>
      break;
 801d2e2:	e002      	b.n	801d2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d2e4:	2301      	movs	r3, #1
 801d2e6:	75fb      	strb	r3, [r7, #23]
      break;
 801d2e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d2f4:	4618      	mov	r0, r3
 801d2f6:	3718      	adds	r7, #24
 801d2f8:	46bd      	mov	sp, r7
 801d2fa:	bd80      	pop	{r7, pc}

0801d2fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d2fc:	b580      	push	{r7, lr}
 801d2fe:	b084      	sub	sp, #16
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]
 801d304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d306:	2300      	movs	r3, #0
 801d308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d310:	2b01      	cmp	r3, #1
 801d312:	d101      	bne.n	801d318 <HAL_TIM_ConfigClockSource+0x1c>
 801d314:	2302      	movs	r3, #2
 801d316:	e0b4      	b.n	801d482 <HAL_TIM_ConfigClockSource+0x186>
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	2201      	movs	r2, #1
 801d31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	2202      	movs	r2, #2
 801d324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	689b      	ldr	r3, [r3, #8]
 801d32e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d33e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d348:	683b      	ldr	r3, [r7, #0]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d350:	d03e      	beq.n	801d3d0 <HAL_TIM_ConfigClockSource+0xd4>
 801d352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d356:	f200 8087 	bhi.w	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d35e:	f000 8086 	beq.w	801d46e <HAL_TIM_ConfigClockSource+0x172>
 801d362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d366:	d87f      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d368:	2b70      	cmp	r3, #112	; 0x70
 801d36a:	d01a      	beq.n	801d3a2 <HAL_TIM_ConfigClockSource+0xa6>
 801d36c:	2b70      	cmp	r3, #112	; 0x70
 801d36e:	d87b      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d370:	2b60      	cmp	r3, #96	; 0x60
 801d372:	d050      	beq.n	801d416 <HAL_TIM_ConfigClockSource+0x11a>
 801d374:	2b60      	cmp	r3, #96	; 0x60
 801d376:	d877      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d378:	2b50      	cmp	r3, #80	; 0x50
 801d37a:	d03c      	beq.n	801d3f6 <HAL_TIM_ConfigClockSource+0xfa>
 801d37c:	2b50      	cmp	r3, #80	; 0x50
 801d37e:	d873      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d380:	2b40      	cmp	r3, #64	; 0x40
 801d382:	d058      	beq.n	801d436 <HAL_TIM_ConfigClockSource+0x13a>
 801d384:	2b40      	cmp	r3, #64	; 0x40
 801d386:	d86f      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d388:	2b30      	cmp	r3, #48	; 0x30
 801d38a:	d064      	beq.n	801d456 <HAL_TIM_ConfigClockSource+0x15a>
 801d38c:	2b30      	cmp	r3, #48	; 0x30
 801d38e:	d86b      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d390:	2b20      	cmp	r3, #32
 801d392:	d060      	beq.n	801d456 <HAL_TIM_ConfigClockSource+0x15a>
 801d394:	2b20      	cmp	r3, #32
 801d396:	d867      	bhi.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d05c      	beq.n	801d456 <HAL_TIM_ConfigClockSource+0x15a>
 801d39c:	2b10      	cmp	r3, #16
 801d39e:	d05a      	beq.n	801d456 <HAL_TIM_ConfigClockSource+0x15a>
 801d3a0:	e062      	b.n	801d468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	6818      	ldr	r0, [r3, #0]
 801d3a6:	683b      	ldr	r3, [r7, #0]
 801d3a8:	6899      	ldr	r1, [r3, #8]
 801d3aa:	683b      	ldr	r3, [r7, #0]
 801d3ac:	685a      	ldr	r2, [r3, #4]
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	68db      	ldr	r3, [r3, #12]
 801d3b2:	f000 fb5d 	bl	801da70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	689b      	ldr	r3, [r3, #8]
 801d3bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d3be:	68bb      	ldr	r3, [r7, #8]
 801d3c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d3c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	68ba      	ldr	r2, [r7, #8]
 801d3cc:	609a      	str	r2, [r3, #8]
      break;
 801d3ce:	e04f      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	6818      	ldr	r0, [r3, #0]
 801d3d4:	683b      	ldr	r3, [r7, #0]
 801d3d6:	6899      	ldr	r1, [r3, #8]
 801d3d8:	683b      	ldr	r3, [r7, #0]
 801d3da:	685a      	ldr	r2, [r3, #4]
 801d3dc:	683b      	ldr	r3, [r7, #0]
 801d3de:	68db      	ldr	r3, [r3, #12]
 801d3e0:	f000 fb46 	bl	801da70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	689a      	ldr	r2, [r3, #8]
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d3f2:	609a      	str	r2, [r3, #8]
      break;
 801d3f4:	e03c      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6818      	ldr	r0, [r3, #0]
 801d3fa:	683b      	ldr	r3, [r7, #0]
 801d3fc:	6859      	ldr	r1, [r3, #4]
 801d3fe:	683b      	ldr	r3, [r7, #0]
 801d400:	68db      	ldr	r3, [r3, #12]
 801d402:	461a      	mov	r2, r3
 801d404:	f000 faba 	bl	801d97c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	2150      	movs	r1, #80	; 0x50
 801d40e:	4618      	mov	r0, r3
 801d410:	f000 fb13 	bl	801da3a <TIM_ITRx_SetConfig>
      break;
 801d414:	e02c      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	6818      	ldr	r0, [r3, #0]
 801d41a:	683b      	ldr	r3, [r7, #0]
 801d41c:	6859      	ldr	r1, [r3, #4]
 801d41e:	683b      	ldr	r3, [r7, #0]
 801d420:	68db      	ldr	r3, [r3, #12]
 801d422:	461a      	mov	r2, r3
 801d424:	f000 fad9 	bl	801d9da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	2160      	movs	r1, #96	; 0x60
 801d42e:	4618      	mov	r0, r3
 801d430:	f000 fb03 	bl	801da3a <TIM_ITRx_SetConfig>
      break;
 801d434:	e01c      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	6818      	ldr	r0, [r3, #0]
 801d43a:	683b      	ldr	r3, [r7, #0]
 801d43c:	6859      	ldr	r1, [r3, #4]
 801d43e:	683b      	ldr	r3, [r7, #0]
 801d440:	68db      	ldr	r3, [r3, #12]
 801d442:	461a      	mov	r2, r3
 801d444:	f000 fa9a 	bl	801d97c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	2140      	movs	r1, #64	; 0x40
 801d44e:	4618      	mov	r0, r3
 801d450:	f000 faf3 	bl	801da3a <TIM_ITRx_SetConfig>
      break;
 801d454:	e00c      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	681a      	ldr	r2, [r3, #0]
 801d45a:	683b      	ldr	r3, [r7, #0]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	4619      	mov	r1, r3
 801d460:	4610      	mov	r0, r2
 801d462:	f000 faea 	bl	801da3a <TIM_ITRx_SetConfig>
      break;
 801d466:	e003      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d468:	2301      	movs	r3, #1
 801d46a:	73fb      	strb	r3, [r7, #15]
      break;
 801d46c:	e000      	b.n	801d470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d46e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2201      	movs	r2, #1
 801d474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	2200      	movs	r2, #0
 801d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d480:	7bfb      	ldrb	r3, [r7, #15]
}
 801d482:	4618      	mov	r0, r3
 801d484:	3710      	adds	r7, #16
 801d486:	46bd      	mov	sp, r7
 801d488:	bd80      	pop	{r7, pc}

0801d48a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d48a:	b480      	push	{r7}
 801d48c:	b083      	sub	sp, #12
 801d48e:	af00      	add	r7, sp, #0
 801d490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d492:	bf00      	nop
 801d494:	370c      	adds	r7, #12
 801d496:	46bd      	mov	sp, r7
 801d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49c:	4770      	bx	lr

0801d49e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d49e:	b480      	push	{r7}
 801d4a0:	b083      	sub	sp, #12
 801d4a2:	af00      	add	r7, sp, #0
 801d4a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d4a6:	bf00      	nop
 801d4a8:	370c      	adds	r7, #12
 801d4aa:	46bd      	mov	sp, r7
 801d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4b0:	4770      	bx	lr

0801d4b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d4b2:	b480      	push	{r7}
 801d4b4:	b083      	sub	sp, #12
 801d4b6:	af00      	add	r7, sp, #0
 801d4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d4ba:	bf00      	nop
 801d4bc:	370c      	adds	r7, #12
 801d4be:	46bd      	mov	sp, r7
 801d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4c4:	4770      	bx	lr

0801d4c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d4c6:	b480      	push	{r7}
 801d4c8:	b083      	sub	sp, #12
 801d4ca:	af00      	add	r7, sp, #0
 801d4cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d4ce:	bf00      	nop
 801d4d0:	370c      	adds	r7, #12
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4d8:	4770      	bx	lr
	...

0801d4dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d4dc:	b480      	push	{r7}
 801d4de:	b085      	sub	sp, #20
 801d4e0:	af00      	add	r7, sp, #0
 801d4e2:	6078      	str	r0, [r7, #4]
 801d4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	4a40      	ldr	r2, [pc, #256]	; (801d5f0 <TIM_Base_SetConfig+0x114>)
 801d4f0:	4293      	cmp	r3, r2
 801d4f2:	d013      	beq.n	801d51c <TIM_Base_SetConfig+0x40>
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d4fa:	d00f      	beq.n	801d51c <TIM_Base_SetConfig+0x40>
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	4a3d      	ldr	r2, [pc, #244]	; (801d5f4 <TIM_Base_SetConfig+0x118>)
 801d500:	4293      	cmp	r3, r2
 801d502:	d00b      	beq.n	801d51c <TIM_Base_SetConfig+0x40>
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	4a3c      	ldr	r2, [pc, #240]	; (801d5f8 <TIM_Base_SetConfig+0x11c>)
 801d508:	4293      	cmp	r3, r2
 801d50a:	d007      	beq.n	801d51c <TIM_Base_SetConfig+0x40>
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	4a3b      	ldr	r2, [pc, #236]	; (801d5fc <TIM_Base_SetConfig+0x120>)
 801d510:	4293      	cmp	r3, r2
 801d512:	d003      	beq.n	801d51c <TIM_Base_SetConfig+0x40>
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	4a3a      	ldr	r2, [pc, #232]	; (801d600 <TIM_Base_SetConfig+0x124>)
 801d518:	4293      	cmp	r3, r2
 801d51a:	d108      	bne.n	801d52e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d524:	683b      	ldr	r3, [r7, #0]
 801d526:	685b      	ldr	r3, [r3, #4]
 801d528:	68fa      	ldr	r2, [r7, #12]
 801d52a:	4313      	orrs	r3, r2
 801d52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	4a2f      	ldr	r2, [pc, #188]	; (801d5f0 <TIM_Base_SetConfig+0x114>)
 801d532:	4293      	cmp	r3, r2
 801d534:	d02b      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d53c:	d027      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	4a2c      	ldr	r2, [pc, #176]	; (801d5f4 <TIM_Base_SetConfig+0x118>)
 801d542:	4293      	cmp	r3, r2
 801d544:	d023      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	4a2b      	ldr	r2, [pc, #172]	; (801d5f8 <TIM_Base_SetConfig+0x11c>)
 801d54a:	4293      	cmp	r3, r2
 801d54c:	d01f      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	4a2a      	ldr	r2, [pc, #168]	; (801d5fc <TIM_Base_SetConfig+0x120>)
 801d552:	4293      	cmp	r3, r2
 801d554:	d01b      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	4a29      	ldr	r2, [pc, #164]	; (801d600 <TIM_Base_SetConfig+0x124>)
 801d55a:	4293      	cmp	r3, r2
 801d55c:	d017      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	4a28      	ldr	r2, [pc, #160]	; (801d604 <TIM_Base_SetConfig+0x128>)
 801d562:	4293      	cmp	r3, r2
 801d564:	d013      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	4a27      	ldr	r2, [pc, #156]	; (801d608 <TIM_Base_SetConfig+0x12c>)
 801d56a:	4293      	cmp	r3, r2
 801d56c:	d00f      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	4a26      	ldr	r2, [pc, #152]	; (801d60c <TIM_Base_SetConfig+0x130>)
 801d572:	4293      	cmp	r3, r2
 801d574:	d00b      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	4a25      	ldr	r2, [pc, #148]	; (801d610 <TIM_Base_SetConfig+0x134>)
 801d57a:	4293      	cmp	r3, r2
 801d57c:	d007      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	4a24      	ldr	r2, [pc, #144]	; (801d614 <TIM_Base_SetConfig+0x138>)
 801d582:	4293      	cmp	r3, r2
 801d584:	d003      	beq.n	801d58e <TIM_Base_SetConfig+0xb2>
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	4a23      	ldr	r2, [pc, #140]	; (801d618 <TIM_Base_SetConfig+0x13c>)
 801d58a:	4293      	cmp	r3, r2
 801d58c:	d108      	bne.n	801d5a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d596:	683b      	ldr	r3, [r7, #0]
 801d598:	68db      	ldr	r3, [r3, #12]
 801d59a:	68fa      	ldr	r2, [r7, #12]
 801d59c:	4313      	orrs	r3, r2
 801d59e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	695b      	ldr	r3, [r3, #20]
 801d5aa:	4313      	orrs	r3, r2
 801d5ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	68fa      	ldr	r2, [r7, #12]
 801d5b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d5b4:	683b      	ldr	r3, [r7, #0]
 801d5b6:	689a      	ldr	r2, [r3, #8]
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d5bc:	683b      	ldr	r3, [r7, #0]
 801d5be:	681a      	ldr	r2, [r3, #0]
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	4a0a      	ldr	r2, [pc, #40]	; (801d5f0 <TIM_Base_SetConfig+0x114>)
 801d5c8:	4293      	cmp	r3, r2
 801d5ca:	d003      	beq.n	801d5d4 <TIM_Base_SetConfig+0xf8>
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	4a0c      	ldr	r2, [pc, #48]	; (801d600 <TIM_Base_SetConfig+0x124>)
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d103      	bne.n	801d5dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d5d4:	683b      	ldr	r3, [r7, #0]
 801d5d6:	691a      	ldr	r2, [r3, #16]
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2201      	movs	r2, #1
 801d5e0:	615a      	str	r2, [r3, #20]
}
 801d5e2:	bf00      	nop
 801d5e4:	3714      	adds	r7, #20
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ec:	4770      	bx	lr
 801d5ee:	bf00      	nop
 801d5f0:	40010000 	.word	0x40010000
 801d5f4:	40000400 	.word	0x40000400
 801d5f8:	40000800 	.word	0x40000800
 801d5fc:	40000c00 	.word	0x40000c00
 801d600:	40010400 	.word	0x40010400
 801d604:	40014000 	.word	0x40014000
 801d608:	40014400 	.word	0x40014400
 801d60c:	40014800 	.word	0x40014800
 801d610:	40001800 	.word	0x40001800
 801d614:	40001c00 	.word	0x40001c00
 801d618:	40002000 	.word	0x40002000

0801d61c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d61c:	b480      	push	{r7}
 801d61e:	b087      	sub	sp, #28
 801d620:	af00      	add	r7, sp, #0
 801d622:	6078      	str	r0, [r7, #4]
 801d624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	6a1b      	ldr	r3, [r3, #32]
 801d62a:	f023 0201 	bic.w	r2, r3, #1
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	6a1b      	ldr	r3, [r3, #32]
 801d636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	685b      	ldr	r3, [r3, #4]
 801d63c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	699b      	ldr	r3, [r3, #24]
 801d642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	f023 0303 	bic.w	r3, r3, #3
 801d652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d654:	683b      	ldr	r3, [r7, #0]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	68fa      	ldr	r2, [r7, #12]
 801d65a:	4313      	orrs	r3, r2
 801d65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d65e:	697b      	ldr	r3, [r7, #20]
 801d660:	f023 0302 	bic.w	r3, r3, #2
 801d664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d666:	683b      	ldr	r3, [r7, #0]
 801d668:	689b      	ldr	r3, [r3, #8]
 801d66a:	697a      	ldr	r2, [r7, #20]
 801d66c:	4313      	orrs	r3, r2
 801d66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	4a20      	ldr	r2, [pc, #128]	; (801d6f4 <TIM_OC1_SetConfig+0xd8>)
 801d674:	4293      	cmp	r3, r2
 801d676:	d003      	beq.n	801d680 <TIM_OC1_SetConfig+0x64>
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	4a1f      	ldr	r2, [pc, #124]	; (801d6f8 <TIM_OC1_SetConfig+0xdc>)
 801d67c:	4293      	cmp	r3, r2
 801d67e:	d10c      	bne.n	801d69a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	f023 0308 	bic.w	r3, r3, #8
 801d686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d688:	683b      	ldr	r3, [r7, #0]
 801d68a:	68db      	ldr	r3, [r3, #12]
 801d68c:	697a      	ldr	r2, [r7, #20]
 801d68e:	4313      	orrs	r3, r2
 801d690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d692:	697b      	ldr	r3, [r7, #20]
 801d694:	f023 0304 	bic.w	r3, r3, #4
 801d698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	4a15      	ldr	r2, [pc, #84]	; (801d6f4 <TIM_OC1_SetConfig+0xd8>)
 801d69e:	4293      	cmp	r3, r2
 801d6a0:	d003      	beq.n	801d6aa <TIM_OC1_SetConfig+0x8e>
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	4a14      	ldr	r2, [pc, #80]	; (801d6f8 <TIM_OC1_SetConfig+0xdc>)
 801d6a6:	4293      	cmp	r3, r2
 801d6a8:	d111      	bne.n	801d6ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d6aa:	693b      	ldr	r3, [r7, #16]
 801d6ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d6b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d6b2:	693b      	ldr	r3, [r7, #16]
 801d6b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d6b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d6ba:	683b      	ldr	r3, [r7, #0]
 801d6bc:	695b      	ldr	r3, [r3, #20]
 801d6be:	693a      	ldr	r2, [r7, #16]
 801d6c0:	4313      	orrs	r3, r2
 801d6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	699b      	ldr	r3, [r3, #24]
 801d6c8:	693a      	ldr	r2, [r7, #16]
 801d6ca:	4313      	orrs	r3, r2
 801d6cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	693a      	ldr	r2, [r7, #16]
 801d6d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	68fa      	ldr	r2, [r7, #12]
 801d6d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d6da:	683b      	ldr	r3, [r7, #0]
 801d6dc:	685a      	ldr	r2, [r3, #4]
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	697a      	ldr	r2, [r7, #20]
 801d6e6:	621a      	str	r2, [r3, #32]
}
 801d6e8:	bf00      	nop
 801d6ea:	371c      	adds	r7, #28
 801d6ec:	46bd      	mov	sp, r7
 801d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6f2:	4770      	bx	lr
 801d6f4:	40010000 	.word	0x40010000
 801d6f8:	40010400 	.word	0x40010400

0801d6fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d6fc:	b480      	push	{r7}
 801d6fe:	b087      	sub	sp, #28
 801d700:	af00      	add	r7, sp, #0
 801d702:	6078      	str	r0, [r7, #4]
 801d704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	6a1b      	ldr	r3, [r3, #32]
 801d70a:	f023 0210 	bic.w	r2, r3, #16
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	6a1b      	ldr	r3, [r3, #32]
 801d716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	685b      	ldr	r3, [r3, #4]
 801d71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	699b      	ldr	r3, [r3, #24]
 801d722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d734:	683b      	ldr	r3, [r7, #0]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	021b      	lsls	r3, r3, #8
 801d73a:	68fa      	ldr	r2, [r7, #12]
 801d73c:	4313      	orrs	r3, r2
 801d73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d740:	697b      	ldr	r3, [r7, #20]
 801d742:	f023 0320 	bic.w	r3, r3, #32
 801d746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d748:	683b      	ldr	r3, [r7, #0]
 801d74a:	689b      	ldr	r3, [r3, #8]
 801d74c:	011b      	lsls	r3, r3, #4
 801d74e:	697a      	ldr	r2, [r7, #20]
 801d750:	4313      	orrs	r3, r2
 801d752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	4a22      	ldr	r2, [pc, #136]	; (801d7e0 <TIM_OC2_SetConfig+0xe4>)
 801d758:	4293      	cmp	r3, r2
 801d75a:	d003      	beq.n	801d764 <TIM_OC2_SetConfig+0x68>
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	4a21      	ldr	r2, [pc, #132]	; (801d7e4 <TIM_OC2_SetConfig+0xe8>)
 801d760:	4293      	cmp	r3, r2
 801d762:	d10d      	bne.n	801d780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d764:	697b      	ldr	r3, [r7, #20]
 801d766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d76a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d76c:	683b      	ldr	r3, [r7, #0]
 801d76e:	68db      	ldr	r3, [r3, #12]
 801d770:	011b      	lsls	r3, r3, #4
 801d772:	697a      	ldr	r2, [r7, #20]
 801d774:	4313      	orrs	r3, r2
 801d776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d778:	697b      	ldr	r3, [r7, #20]
 801d77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d77e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	4a17      	ldr	r2, [pc, #92]	; (801d7e0 <TIM_OC2_SetConfig+0xe4>)
 801d784:	4293      	cmp	r3, r2
 801d786:	d003      	beq.n	801d790 <TIM_OC2_SetConfig+0x94>
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	4a16      	ldr	r2, [pc, #88]	; (801d7e4 <TIM_OC2_SetConfig+0xe8>)
 801d78c:	4293      	cmp	r3, r2
 801d78e:	d113      	bne.n	801d7b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d790:	693b      	ldr	r3, [r7, #16]
 801d792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d798:	693b      	ldr	r3, [r7, #16]
 801d79a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d79e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d7a0:	683b      	ldr	r3, [r7, #0]
 801d7a2:	695b      	ldr	r3, [r3, #20]
 801d7a4:	009b      	lsls	r3, r3, #2
 801d7a6:	693a      	ldr	r2, [r7, #16]
 801d7a8:	4313      	orrs	r3, r2
 801d7aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d7ac:	683b      	ldr	r3, [r7, #0]
 801d7ae:	699b      	ldr	r3, [r3, #24]
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	693a      	ldr	r2, [r7, #16]
 801d7b4:	4313      	orrs	r3, r2
 801d7b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	693a      	ldr	r2, [r7, #16]
 801d7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	68fa      	ldr	r2, [r7, #12]
 801d7c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d7c4:	683b      	ldr	r3, [r7, #0]
 801d7c6:	685a      	ldr	r2, [r3, #4]
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	697a      	ldr	r2, [r7, #20]
 801d7d0:	621a      	str	r2, [r3, #32]
}
 801d7d2:	bf00      	nop
 801d7d4:	371c      	adds	r7, #28
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7dc:	4770      	bx	lr
 801d7de:	bf00      	nop
 801d7e0:	40010000 	.word	0x40010000
 801d7e4:	40010400 	.word	0x40010400

0801d7e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d7e8:	b480      	push	{r7}
 801d7ea:	b087      	sub	sp, #28
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	6078      	str	r0, [r7, #4]
 801d7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6a1b      	ldr	r3, [r3, #32]
 801d7f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	6a1b      	ldr	r3, [r3, #32]
 801d802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	685b      	ldr	r3, [r3, #4]
 801d808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	69db      	ldr	r3, [r3, #28]
 801d80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	f023 0303 	bic.w	r3, r3, #3
 801d81e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d820:	683b      	ldr	r3, [r7, #0]
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	68fa      	ldr	r2, [r7, #12]
 801d826:	4313      	orrs	r3, r2
 801d828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d832:	683b      	ldr	r3, [r7, #0]
 801d834:	689b      	ldr	r3, [r3, #8]
 801d836:	021b      	lsls	r3, r3, #8
 801d838:	697a      	ldr	r2, [r7, #20]
 801d83a:	4313      	orrs	r3, r2
 801d83c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	4a21      	ldr	r2, [pc, #132]	; (801d8c8 <TIM_OC3_SetConfig+0xe0>)
 801d842:	4293      	cmp	r3, r2
 801d844:	d003      	beq.n	801d84e <TIM_OC3_SetConfig+0x66>
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	4a20      	ldr	r2, [pc, #128]	; (801d8cc <TIM_OC3_SetConfig+0xe4>)
 801d84a:	4293      	cmp	r3, r2
 801d84c:	d10d      	bne.n	801d86a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d84e:	697b      	ldr	r3, [r7, #20]
 801d850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d856:	683b      	ldr	r3, [r7, #0]
 801d858:	68db      	ldr	r3, [r3, #12]
 801d85a:	021b      	lsls	r3, r3, #8
 801d85c:	697a      	ldr	r2, [r7, #20]
 801d85e:	4313      	orrs	r3, r2
 801d860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d862:	697b      	ldr	r3, [r7, #20]
 801d864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	4a16      	ldr	r2, [pc, #88]	; (801d8c8 <TIM_OC3_SetConfig+0xe0>)
 801d86e:	4293      	cmp	r3, r2
 801d870:	d003      	beq.n	801d87a <TIM_OC3_SetConfig+0x92>
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	4a15      	ldr	r2, [pc, #84]	; (801d8cc <TIM_OC3_SetConfig+0xe4>)
 801d876:	4293      	cmp	r3, r2
 801d878:	d113      	bne.n	801d8a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d87a:	693b      	ldr	r3, [r7, #16]
 801d87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d882:	693b      	ldr	r3, [r7, #16]
 801d884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d88a:	683b      	ldr	r3, [r7, #0]
 801d88c:	695b      	ldr	r3, [r3, #20]
 801d88e:	011b      	lsls	r3, r3, #4
 801d890:	693a      	ldr	r2, [r7, #16]
 801d892:	4313      	orrs	r3, r2
 801d894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d896:	683b      	ldr	r3, [r7, #0]
 801d898:	699b      	ldr	r3, [r3, #24]
 801d89a:	011b      	lsls	r3, r3, #4
 801d89c:	693a      	ldr	r2, [r7, #16]
 801d89e:	4313      	orrs	r3, r2
 801d8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	693a      	ldr	r2, [r7, #16]
 801d8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	68fa      	ldr	r2, [r7, #12]
 801d8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d8ae:	683b      	ldr	r3, [r7, #0]
 801d8b0:	685a      	ldr	r2, [r3, #4]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	697a      	ldr	r2, [r7, #20]
 801d8ba:	621a      	str	r2, [r3, #32]
}
 801d8bc:	bf00      	nop
 801d8be:	371c      	adds	r7, #28
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8c6:	4770      	bx	lr
 801d8c8:	40010000 	.word	0x40010000
 801d8cc:	40010400 	.word	0x40010400

0801d8d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d8d0:	b480      	push	{r7}
 801d8d2:	b087      	sub	sp, #28
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
 801d8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	6a1b      	ldr	r3, [r3, #32]
 801d8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	6a1b      	ldr	r3, [r3, #32]
 801d8ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	685b      	ldr	r3, [r3, #4]
 801d8f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	69db      	ldr	r3, [r3, #28]
 801d8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d908:	683b      	ldr	r3, [r7, #0]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	021b      	lsls	r3, r3, #8
 801d90e:	68fa      	ldr	r2, [r7, #12]
 801d910:	4313      	orrs	r3, r2
 801d912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d914:	693b      	ldr	r3, [r7, #16]
 801d916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d91a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d91c:	683b      	ldr	r3, [r7, #0]
 801d91e:	689b      	ldr	r3, [r3, #8]
 801d920:	031b      	lsls	r3, r3, #12
 801d922:	693a      	ldr	r2, [r7, #16]
 801d924:	4313      	orrs	r3, r2
 801d926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	4a12      	ldr	r2, [pc, #72]	; (801d974 <TIM_OC4_SetConfig+0xa4>)
 801d92c:	4293      	cmp	r3, r2
 801d92e:	d003      	beq.n	801d938 <TIM_OC4_SetConfig+0x68>
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	4a11      	ldr	r2, [pc, #68]	; (801d978 <TIM_OC4_SetConfig+0xa8>)
 801d934:	4293      	cmp	r3, r2
 801d936:	d109      	bne.n	801d94c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d938:	697b      	ldr	r3, [r7, #20]
 801d93a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d93e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d940:	683b      	ldr	r3, [r7, #0]
 801d942:	695b      	ldr	r3, [r3, #20]
 801d944:	019b      	lsls	r3, r3, #6
 801d946:	697a      	ldr	r2, [r7, #20]
 801d948:	4313      	orrs	r3, r2
 801d94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	697a      	ldr	r2, [r7, #20]
 801d950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	68fa      	ldr	r2, [r7, #12]
 801d956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d958:	683b      	ldr	r3, [r7, #0]
 801d95a:	685a      	ldr	r2, [r3, #4]
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	693a      	ldr	r2, [r7, #16]
 801d964:	621a      	str	r2, [r3, #32]
}
 801d966:	bf00      	nop
 801d968:	371c      	adds	r7, #28
 801d96a:	46bd      	mov	sp, r7
 801d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d970:	4770      	bx	lr
 801d972:	bf00      	nop
 801d974:	40010000 	.word	0x40010000
 801d978:	40010400 	.word	0x40010400

0801d97c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d97c:	b480      	push	{r7}
 801d97e:	b087      	sub	sp, #28
 801d980:	af00      	add	r7, sp, #0
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	60b9      	str	r1, [r7, #8]
 801d986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	6a1b      	ldr	r3, [r3, #32]
 801d98c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	6a1b      	ldr	r3, [r3, #32]
 801d992:	f023 0201 	bic.w	r2, r3, #1
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	699b      	ldr	r3, [r3, #24]
 801d99e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d9a0:	693b      	ldr	r3, [r7, #16]
 801d9a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d9a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	011b      	lsls	r3, r3, #4
 801d9ac:	693a      	ldr	r2, [r7, #16]
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d9b2:	697b      	ldr	r3, [r7, #20]
 801d9b4:	f023 030a 	bic.w	r3, r3, #10
 801d9b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d9ba:	697a      	ldr	r2, [r7, #20]
 801d9bc:	68bb      	ldr	r3, [r7, #8]
 801d9be:	4313      	orrs	r3, r2
 801d9c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	693a      	ldr	r2, [r7, #16]
 801d9c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	697a      	ldr	r2, [r7, #20]
 801d9cc:	621a      	str	r2, [r3, #32]
}
 801d9ce:	bf00      	nop
 801d9d0:	371c      	adds	r7, #28
 801d9d2:	46bd      	mov	sp, r7
 801d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d8:	4770      	bx	lr

0801d9da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d9da:	b480      	push	{r7}
 801d9dc:	b087      	sub	sp, #28
 801d9de:	af00      	add	r7, sp, #0
 801d9e0:	60f8      	str	r0, [r7, #12]
 801d9e2:	60b9      	str	r1, [r7, #8]
 801d9e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	6a1b      	ldr	r3, [r3, #32]
 801d9ea:	f023 0210 	bic.w	r2, r3, #16
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	699b      	ldr	r3, [r3, #24]
 801d9f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	6a1b      	ldr	r3, [r3, #32]
 801d9fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d9fe:	697b      	ldr	r3, [r7, #20]
 801da00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801da04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	031b      	lsls	r3, r3, #12
 801da0a:	697a      	ldr	r2, [r7, #20]
 801da0c:	4313      	orrs	r3, r2
 801da0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801da10:	693b      	ldr	r3, [r7, #16]
 801da12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801da16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801da18:	68bb      	ldr	r3, [r7, #8]
 801da1a:	011b      	lsls	r3, r3, #4
 801da1c:	693a      	ldr	r2, [r7, #16]
 801da1e:	4313      	orrs	r3, r2
 801da20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	697a      	ldr	r2, [r7, #20]
 801da26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	693a      	ldr	r2, [r7, #16]
 801da2c:	621a      	str	r2, [r3, #32]
}
 801da2e:	bf00      	nop
 801da30:	371c      	adds	r7, #28
 801da32:	46bd      	mov	sp, r7
 801da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da38:	4770      	bx	lr

0801da3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801da3a:	b480      	push	{r7}
 801da3c:	b085      	sub	sp, #20
 801da3e:	af00      	add	r7, sp, #0
 801da40:	6078      	str	r0, [r7, #4]
 801da42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	689b      	ldr	r3, [r3, #8]
 801da48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801da4a:	68fb      	ldr	r3, [r7, #12]
 801da4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801da50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801da52:	683a      	ldr	r2, [r7, #0]
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	4313      	orrs	r3, r2
 801da58:	f043 0307 	orr.w	r3, r3, #7
 801da5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	68fa      	ldr	r2, [r7, #12]
 801da62:	609a      	str	r2, [r3, #8]
}
 801da64:	bf00      	nop
 801da66:	3714      	adds	r7, #20
 801da68:	46bd      	mov	sp, r7
 801da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da6e:	4770      	bx	lr

0801da70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801da70:	b480      	push	{r7}
 801da72:	b087      	sub	sp, #28
 801da74:	af00      	add	r7, sp, #0
 801da76:	60f8      	str	r0, [r7, #12]
 801da78:	60b9      	str	r1, [r7, #8]
 801da7a:	607a      	str	r2, [r7, #4]
 801da7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	689b      	ldr	r3, [r3, #8]
 801da82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801da84:	697b      	ldr	r3, [r7, #20]
 801da86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801da8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801da8c:	683b      	ldr	r3, [r7, #0]
 801da8e:	021a      	lsls	r2, r3, #8
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	431a      	orrs	r2, r3
 801da94:	68bb      	ldr	r3, [r7, #8]
 801da96:	4313      	orrs	r3, r2
 801da98:	697a      	ldr	r2, [r7, #20]
 801da9a:	4313      	orrs	r3, r2
 801da9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	697a      	ldr	r2, [r7, #20]
 801daa2:	609a      	str	r2, [r3, #8]
}
 801daa4:	bf00      	nop
 801daa6:	371c      	adds	r7, #28
 801daa8:	46bd      	mov	sp, r7
 801daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daae:	4770      	bx	lr

0801dab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dab0:	b480      	push	{r7}
 801dab2:	b085      	sub	sp, #20
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	6078      	str	r0, [r7, #4]
 801dab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dac0:	2b01      	cmp	r3, #1
 801dac2:	d101      	bne.n	801dac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dac4:	2302      	movs	r3, #2
 801dac6:	e05a      	b.n	801db7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	2201      	movs	r2, #1
 801dacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	2202      	movs	r2, #2
 801dad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	685b      	ldr	r3, [r3, #4]
 801dade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	689b      	ldr	r3, [r3, #8]
 801dae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801daee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801daf0:	683b      	ldr	r3, [r7, #0]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	68fa      	ldr	r2, [r7, #12]
 801daf6:	4313      	orrs	r3, r2
 801daf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	68fa      	ldr	r2, [r7, #12]
 801db00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	4a21      	ldr	r2, [pc, #132]	; (801db8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801db08:	4293      	cmp	r3, r2
 801db0a:	d022      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801db14:	d01d      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	4a1d      	ldr	r2, [pc, #116]	; (801db90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801db1c:	4293      	cmp	r3, r2
 801db1e:	d018      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	4a1b      	ldr	r2, [pc, #108]	; (801db94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801db26:	4293      	cmp	r3, r2
 801db28:	d013      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	4a1a      	ldr	r2, [pc, #104]	; (801db98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801db30:	4293      	cmp	r3, r2
 801db32:	d00e      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	4a18      	ldr	r2, [pc, #96]	; (801db9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801db3a:	4293      	cmp	r3, r2
 801db3c:	d009      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	4a17      	ldr	r2, [pc, #92]	; (801dba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801db44:	4293      	cmp	r3, r2
 801db46:	d004      	beq.n	801db52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	4a15      	ldr	r2, [pc, #84]	; (801dba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801db4e:	4293      	cmp	r3, r2
 801db50:	d10c      	bne.n	801db6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801db52:	68bb      	ldr	r3, [r7, #8]
 801db54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801db58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801db5a:	683b      	ldr	r3, [r7, #0]
 801db5c:	685b      	ldr	r3, [r3, #4]
 801db5e:	68ba      	ldr	r2, [r7, #8]
 801db60:	4313      	orrs	r3, r2
 801db62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	68ba      	ldr	r2, [r7, #8]
 801db6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	2201      	movs	r2, #1
 801db70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	2200      	movs	r2, #0
 801db78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801db7c:	2300      	movs	r3, #0
}
 801db7e:	4618      	mov	r0, r3
 801db80:	3714      	adds	r7, #20
 801db82:	46bd      	mov	sp, r7
 801db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db88:	4770      	bx	lr
 801db8a:	bf00      	nop
 801db8c:	40010000 	.word	0x40010000
 801db90:	40000400 	.word	0x40000400
 801db94:	40000800 	.word	0x40000800
 801db98:	40000c00 	.word	0x40000c00
 801db9c:	40010400 	.word	0x40010400
 801dba0:	40014000 	.word	0x40014000
 801dba4:	40001800 	.word	0x40001800

0801dba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dba8:	b480      	push	{r7}
 801dbaa:	b083      	sub	sp, #12
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dbb0:	bf00      	nop
 801dbb2:	370c      	adds	r7, #12
 801dbb4:	46bd      	mov	sp, r7
 801dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbba:	4770      	bx	lr

0801dbbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801dbbc:	b480      	push	{r7}
 801dbbe:	b083      	sub	sp, #12
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801dbc4:	bf00      	nop
 801dbc6:	370c      	adds	r7, #12
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbce:	4770      	bx	lr

0801dbd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dbd0:	b084      	sub	sp, #16
 801dbd2:	b580      	push	{r7, lr}
 801dbd4:	b084      	sub	sp, #16
 801dbd6:	af00      	add	r7, sp, #0
 801dbd8:	6078      	str	r0, [r7, #4]
 801dbda:	f107 001c 	add.w	r0, r7, #28
 801dbde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe4:	2b01      	cmp	r3, #1
 801dbe6:	d122      	bne.n	801dc2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	68db      	ldr	r3, [r3, #12]
 801dbf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801dbfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dc00:	687a      	ldr	r2, [r7, #4]
 801dc02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	68db      	ldr	r3, [r3, #12]
 801dc08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc12:	2b01      	cmp	r3, #1
 801dc14:	d105      	bne.n	801dc22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	68db      	ldr	r3, [r3, #12]
 801dc1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dc22:	6878      	ldr	r0, [r7, #4]
 801dc24:	f001 fb16 	bl	801f254 <USB_CoreReset>
 801dc28:	4603      	mov	r3, r0
 801dc2a:	73fb      	strb	r3, [r7, #15]
 801dc2c:	e01a      	b.n	801dc64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	68db      	ldr	r3, [r3, #12]
 801dc32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dc3a:	6878      	ldr	r0, [r7, #4]
 801dc3c:	f001 fb0a 	bl	801f254 <USB_CoreReset>
 801dc40:	4603      	mov	r3, r0
 801dc42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801dc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d106      	bne.n	801dc58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	639a      	str	r2, [r3, #56]	; 0x38
 801dc56:	e005      	b.n	801dc64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc66:	2b01      	cmp	r3, #1
 801dc68:	d10b      	bne.n	801dc82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	689b      	ldr	r3, [r3, #8]
 801dc6e:	f043 0206 	orr.w	r2, r3, #6
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	689b      	ldr	r3, [r3, #8]
 801dc7a:	f043 0220 	orr.w	r2, r3, #32
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dc82:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc84:	4618      	mov	r0, r3
 801dc86:	3710      	adds	r7, #16
 801dc88:	46bd      	mov	sp, r7
 801dc8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dc8e:	b004      	add	sp, #16
 801dc90:	4770      	bx	lr
	...

0801dc94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dc94:	b480      	push	{r7}
 801dc96:	b087      	sub	sp, #28
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	60f8      	str	r0, [r7, #12]
 801dc9c:	60b9      	str	r1, [r7, #8]
 801dc9e:	4613      	mov	r3, r2
 801dca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dca2:	79fb      	ldrb	r3, [r7, #7]
 801dca4:	2b02      	cmp	r3, #2
 801dca6:	d165      	bne.n	801dd74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dca8:	68bb      	ldr	r3, [r7, #8]
 801dcaa:	4a41      	ldr	r2, [pc, #260]	; (801ddb0 <USB_SetTurnaroundTime+0x11c>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d906      	bls.n	801dcbe <USB_SetTurnaroundTime+0x2a>
 801dcb0:	68bb      	ldr	r3, [r7, #8]
 801dcb2:	4a40      	ldr	r2, [pc, #256]	; (801ddb4 <USB_SetTurnaroundTime+0x120>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d202      	bcs.n	801dcbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dcb8:	230f      	movs	r3, #15
 801dcba:	617b      	str	r3, [r7, #20]
 801dcbc:	e062      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dcbe:	68bb      	ldr	r3, [r7, #8]
 801dcc0:	4a3c      	ldr	r2, [pc, #240]	; (801ddb4 <USB_SetTurnaroundTime+0x120>)
 801dcc2:	4293      	cmp	r3, r2
 801dcc4:	d306      	bcc.n	801dcd4 <USB_SetTurnaroundTime+0x40>
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	4a3b      	ldr	r2, [pc, #236]	; (801ddb8 <USB_SetTurnaroundTime+0x124>)
 801dcca:	4293      	cmp	r3, r2
 801dccc:	d202      	bcs.n	801dcd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dcce:	230e      	movs	r3, #14
 801dcd0:	617b      	str	r3, [r7, #20]
 801dcd2:	e057      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dcd4:	68bb      	ldr	r3, [r7, #8]
 801dcd6:	4a38      	ldr	r2, [pc, #224]	; (801ddb8 <USB_SetTurnaroundTime+0x124>)
 801dcd8:	4293      	cmp	r3, r2
 801dcda:	d306      	bcc.n	801dcea <USB_SetTurnaroundTime+0x56>
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	4a37      	ldr	r2, [pc, #220]	; (801ddbc <USB_SetTurnaroundTime+0x128>)
 801dce0:	4293      	cmp	r3, r2
 801dce2:	d202      	bcs.n	801dcea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dce4:	230d      	movs	r3, #13
 801dce6:	617b      	str	r3, [r7, #20]
 801dce8:	e04c      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dcea:	68bb      	ldr	r3, [r7, #8]
 801dcec:	4a33      	ldr	r2, [pc, #204]	; (801ddbc <USB_SetTurnaroundTime+0x128>)
 801dcee:	4293      	cmp	r3, r2
 801dcf0:	d306      	bcc.n	801dd00 <USB_SetTurnaroundTime+0x6c>
 801dcf2:	68bb      	ldr	r3, [r7, #8]
 801dcf4:	4a32      	ldr	r2, [pc, #200]	; (801ddc0 <USB_SetTurnaroundTime+0x12c>)
 801dcf6:	4293      	cmp	r3, r2
 801dcf8:	d802      	bhi.n	801dd00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dcfa:	230c      	movs	r3, #12
 801dcfc:	617b      	str	r3, [r7, #20]
 801dcfe:	e041      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dd00:	68bb      	ldr	r3, [r7, #8]
 801dd02:	4a2f      	ldr	r2, [pc, #188]	; (801ddc0 <USB_SetTurnaroundTime+0x12c>)
 801dd04:	4293      	cmp	r3, r2
 801dd06:	d906      	bls.n	801dd16 <USB_SetTurnaroundTime+0x82>
 801dd08:	68bb      	ldr	r3, [r7, #8]
 801dd0a:	4a2e      	ldr	r2, [pc, #184]	; (801ddc4 <USB_SetTurnaroundTime+0x130>)
 801dd0c:	4293      	cmp	r3, r2
 801dd0e:	d802      	bhi.n	801dd16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dd10:	230b      	movs	r3, #11
 801dd12:	617b      	str	r3, [r7, #20]
 801dd14:	e036      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dd16:	68bb      	ldr	r3, [r7, #8]
 801dd18:	4a2a      	ldr	r2, [pc, #168]	; (801ddc4 <USB_SetTurnaroundTime+0x130>)
 801dd1a:	4293      	cmp	r3, r2
 801dd1c:	d906      	bls.n	801dd2c <USB_SetTurnaroundTime+0x98>
 801dd1e:	68bb      	ldr	r3, [r7, #8]
 801dd20:	4a29      	ldr	r2, [pc, #164]	; (801ddc8 <USB_SetTurnaroundTime+0x134>)
 801dd22:	4293      	cmp	r3, r2
 801dd24:	d802      	bhi.n	801dd2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dd26:	230a      	movs	r3, #10
 801dd28:	617b      	str	r3, [r7, #20]
 801dd2a:	e02b      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dd2c:	68bb      	ldr	r3, [r7, #8]
 801dd2e:	4a26      	ldr	r2, [pc, #152]	; (801ddc8 <USB_SetTurnaroundTime+0x134>)
 801dd30:	4293      	cmp	r3, r2
 801dd32:	d906      	bls.n	801dd42 <USB_SetTurnaroundTime+0xae>
 801dd34:	68bb      	ldr	r3, [r7, #8]
 801dd36:	4a25      	ldr	r2, [pc, #148]	; (801ddcc <USB_SetTurnaroundTime+0x138>)
 801dd38:	4293      	cmp	r3, r2
 801dd3a:	d202      	bcs.n	801dd42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dd3c:	2309      	movs	r3, #9
 801dd3e:	617b      	str	r3, [r7, #20]
 801dd40:	e020      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dd42:	68bb      	ldr	r3, [r7, #8]
 801dd44:	4a21      	ldr	r2, [pc, #132]	; (801ddcc <USB_SetTurnaroundTime+0x138>)
 801dd46:	4293      	cmp	r3, r2
 801dd48:	d306      	bcc.n	801dd58 <USB_SetTurnaroundTime+0xc4>
 801dd4a:	68bb      	ldr	r3, [r7, #8]
 801dd4c:	4a20      	ldr	r2, [pc, #128]	; (801ddd0 <USB_SetTurnaroundTime+0x13c>)
 801dd4e:	4293      	cmp	r3, r2
 801dd50:	d802      	bhi.n	801dd58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dd52:	2308      	movs	r3, #8
 801dd54:	617b      	str	r3, [r7, #20]
 801dd56:	e015      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dd58:	68bb      	ldr	r3, [r7, #8]
 801dd5a:	4a1d      	ldr	r2, [pc, #116]	; (801ddd0 <USB_SetTurnaroundTime+0x13c>)
 801dd5c:	4293      	cmp	r3, r2
 801dd5e:	d906      	bls.n	801dd6e <USB_SetTurnaroundTime+0xda>
 801dd60:	68bb      	ldr	r3, [r7, #8]
 801dd62:	4a1c      	ldr	r2, [pc, #112]	; (801ddd4 <USB_SetTurnaroundTime+0x140>)
 801dd64:	4293      	cmp	r3, r2
 801dd66:	d202      	bcs.n	801dd6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dd68:	2307      	movs	r3, #7
 801dd6a:	617b      	str	r3, [r7, #20]
 801dd6c:	e00a      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dd6e:	2306      	movs	r3, #6
 801dd70:	617b      	str	r3, [r7, #20]
 801dd72:	e007      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dd74:	79fb      	ldrb	r3, [r7, #7]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d102      	bne.n	801dd80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dd7a:	2309      	movs	r3, #9
 801dd7c:	617b      	str	r3, [r7, #20]
 801dd7e:	e001      	b.n	801dd84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dd80:	2309      	movs	r3, #9
 801dd82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	68db      	ldr	r3, [r3, #12]
 801dd88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	68da      	ldr	r2, [r3, #12]
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	029b      	lsls	r3, r3, #10
 801dd98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dd9c:	431a      	orrs	r2, r3
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dda2:	2300      	movs	r3, #0
}
 801dda4:	4618      	mov	r0, r3
 801dda6:	371c      	adds	r7, #28
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddae:	4770      	bx	lr
 801ddb0:	00d8acbf 	.word	0x00d8acbf
 801ddb4:	00e4e1c0 	.word	0x00e4e1c0
 801ddb8:	00f42400 	.word	0x00f42400
 801ddbc:	01067380 	.word	0x01067380
 801ddc0:	011a499f 	.word	0x011a499f
 801ddc4:	01312cff 	.word	0x01312cff
 801ddc8:	014ca43f 	.word	0x014ca43f
 801ddcc:	016e3600 	.word	0x016e3600
 801ddd0:	01a6ab1f 	.word	0x01a6ab1f
 801ddd4:	01e84800 	.word	0x01e84800

0801ddd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ddd8:	b480      	push	{r7}
 801ddda:	b083      	sub	sp, #12
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	689b      	ldr	r3, [r3, #8]
 801dde4:	f043 0201 	orr.w	r2, r3, #1
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801ddec:	2300      	movs	r3, #0
}
 801ddee:	4618      	mov	r0, r3
 801ddf0:	370c      	adds	r7, #12
 801ddf2:	46bd      	mov	sp, r7
 801ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddf8:	4770      	bx	lr

0801ddfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ddfa:	b480      	push	{r7}
 801ddfc:	b083      	sub	sp, #12
 801ddfe:	af00      	add	r7, sp, #0
 801de00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	689b      	ldr	r3, [r3, #8]
 801de06:	f023 0201 	bic.w	r2, r3, #1
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801de0e:	2300      	movs	r3, #0
}
 801de10:	4618      	mov	r0, r3
 801de12:	370c      	adds	r7, #12
 801de14:	46bd      	mov	sp, r7
 801de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de1a:	4770      	bx	lr

0801de1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b084      	sub	sp, #16
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
 801de24:	460b      	mov	r3, r1
 801de26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801de28:	2300      	movs	r3, #0
 801de2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	68db      	ldr	r3, [r3, #12]
 801de30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801de38:	78fb      	ldrb	r3, [r7, #3]
 801de3a:	2b01      	cmp	r3, #1
 801de3c:	d115      	bne.n	801de6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	68db      	ldr	r3, [r3, #12]
 801de42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801de4a:	2001      	movs	r0, #1
 801de4c:	f7fa fb04 	bl	8018458 <HAL_Delay>
      ms++;
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	3301      	adds	r3, #1
 801de54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801de56:	6878      	ldr	r0, [r7, #4]
 801de58:	f001 f96c 	bl	801f134 <USB_GetMode>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b01      	cmp	r3, #1
 801de60:	d01e      	beq.n	801dea0 <USB_SetCurrentMode+0x84>
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	2b31      	cmp	r3, #49	; 0x31
 801de66:	d9f0      	bls.n	801de4a <USB_SetCurrentMode+0x2e>
 801de68:	e01a      	b.n	801dea0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801de6a:	78fb      	ldrb	r3, [r7, #3]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d115      	bne.n	801de9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	68db      	ldr	r3, [r3, #12]
 801de74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801de7c:	2001      	movs	r0, #1
 801de7e:	f7fa faeb 	bl	8018458 <HAL_Delay>
      ms++;
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	3301      	adds	r3, #1
 801de86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801de88:	6878      	ldr	r0, [r7, #4]
 801de8a:	f001 f953 	bl	801f134 <USB_GetMode>
 801de8e:	4603      	mov	r3, r0
 801de90:	2b00      	cmp	r3, #0
 801de92:	d005      	beq.n	801dea0 <USB_SetCurrentMode+0x84>
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	2b31      	cmp	r3, #49	; 0x31
 801de98:	d9f0      	bls.n	801de7c <USB_SetCurrentMode+0x60>
 801de9a:	e001      	b.n	801dea0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801de9c:	2301      	movs	r3, #1
 801de9e:	e005      	b.n	801deac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	2b32      	cmp	r3, #50	; 0x32
 801dea4:	d101      	bne.n	801deaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801dea6:	2301      	movs	r3, #1
 801dea8:	e000      	b.n	801deac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801deaa:	2300      	movs	r3, #0
}
 801deac:	4618      	mov	r0, r3
 801deae:	3710      	adds	r7, #16
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd80      	pop	{r7, pc}

0801deb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801deb4:	b084      	sub	sp, #16
 801deb6:	b580      	push	{r7, lr}
 801deb8:	b086      	sub	sp, #24
 801deba:	af00      	add	r7, sp, #0
 801debc:	6078      	str	r0, [r7, #4]
 801debe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801dec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801dec6:	2300      	movs	r3, #0
 801dec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801dece:	2300      	movs	r3, #0
 801ded0:	613b      	str	r3, [r7, #16]
 801ded2:	e009      	b.n	801dee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801ded4:	687a      	ldr	r2, [r7, #4]
 801ded6:	693b      	ldr	r3, [r7, #16]
 801ded8:	3340      	adds	r3, #64	; 0x40
 801deda:	009b      	lsls	r3, r3, #2
 801dedc:	4413      	add	r3, r2
 801dede:	2200      	movs	r2, #0
 801dee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801dee2:	693b      	ldr	r3, [r7, #16]
 801dee4:	3301      	adds	r3, #1
 801dee6:	613b      	str	r3, [r7, #16]
 801dee8:	693b      	ldr	r3, [r7, #16]
 801deea:	2b0e      	cmp	r3, #14
 801deec:	d9f2      	bls.n	801ded4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801deee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801def0:	2b00      	cmp	r3, #0
 801def2:	d11c      	bne.n	801df2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801defa:	685b      	ldr	r3, [r3, #4]
 801defc:	68fa      	ldr	r2, [r7, #12]
 801defe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801df02:	f043 0302 	orr.w	r3, r3, #2
 801df06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	601a      	str	r2, [r3, #0]
 801df2c:	e005      	b.n	801df3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801df40:	461a      	mov	r2, r3
 801df42:	2300      	movs	r3, #0
 801df44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df4c:	4619      	mov	r1, r3
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df54:	461a      	mov	r2, r3
 801df56:	680b      	ldr	r3, [r1, #0]
 801df58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df5c:	2b01      	cmp	r3, #1
 801df5e:	d10c      	bne.n	801df7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df62:	2b00      	cmp	r3, #0
 801df64:	d104      	bne.n	801df70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801df66:	2100      	movs	r1, #0
 801df68:	6878      	ldr	r0, [r7, #4]
 801df6a:	f000 f945 	bl	801e1f8 <USB_SetDevSpeed>
 801df6e:	e008      	b.n	801df82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801df70:	2101      	movs	r1, #1
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f000 f940 	bl	801e1f8 <USB_SetDevSpeed>
 801df78:	e003      	b.n	801df82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801df7a:	2103      	movs	r1, #3
 801df7c:	6878      	ldr	r0, [r7, #4]
 801df7e:	f000 f93b 	bl	801e1f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801df82:	2110      	movs	r1, #16
 801df84:	6878      	ldr	r0, [r7, #4]
 801df86:	f000 f8f3 	bl	801e170 <USB_FlushTxFifo>
 801df8a:	4603      	mov	r3, r0
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d001      	beq.n	801df94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801df90:	2301      	movs	r3, #1
 801df92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801df94:	6878      	ldr	r0, [r7, #4]
 801df96:	f000 f90f 	bl	801e1b8 <USB_FlushRxFifo>
 801df9a:	4603      	mov	r3, r0
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d001      	beq.n	801dfa4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801dfa0:	2301      	movs	r3, #1
 801dfa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dfaa:	461a      	mov	r2, r3
 801dfac:	2300      	movs	r3, #0
 801dfae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dfb6:	461a      	mov	r2, r3
 801dfb8:	2300      	movs	r3, #0
 801dfba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dfc2:	461a      	mov	r2, r3
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfc8:	2300      	movs	r3, #0
 801dfca:	613b      	str	r3, [r7, #16]
 801dfcc:	e043      	b.n	801e056 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801dfce:	693b      	ldr	r3, [r7, #16]
 801dfd0:	015a      	lsls	r2, r3, #5
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	4413      	add	r3, r2
 801dfd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dfe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dfe4:	d118      	bne.n	801e018 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801dfe6:	693b      	ldr	r3, [r7, #16]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d10a      	bne.n	801e002 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801dfec:	693b      	ldr	r3, [r7, #16]
 801dfee:	015a      	lsls	r2, r3, #5
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	4413      	add	r3, r2
 801dff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dff8:	461a      	mov	r2, r3
 801dffa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dffe:	6013      	str	r3, [r2, #0]
 801e000:	e013      	b.n	801e02a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e002:	693b      	ldr	r3, [r7, #16]
 801e004:	015a      	lsls	r2, r3, #5
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	4413      	add	r3, r2
 801e00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e00e:	461a      	mov	r2, r3
 801e010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e014:	6013      	str	r3, [r2, #0]
 801e016:	e008      	b.n	801e02a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801e018:	693b      	ldr	r3, [r7, #16]
 801e01a:	015a      	lsls	r2, r3, #5
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	4413      	add	r3, r2
 801e020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e024:	461a      	mov	r2, r3
 801e026:	2300      	movs	r3, #0
 801e028:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e02a:	693b      	ldr	r3, [r7, #16]
 801e02c:	015a      	lsls	r2, r3, #5
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	4413      	add	r3, r2
 801e032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e036:	461a      	mov	r2, r3
 801e038:	2300      	movs	r3, #0
 801e03a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e03c:	693b      	ldr	r3, [r7, #16]
 801e03e:	015a      	lsls	r2, r3, #5
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	4413      	add	r3, r2
 801e044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e048:	461a      	mov	r2, r3
 801e04a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e04e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e050:	693b      	ldr	r3, [r7, #16]
 801e052:	3301      	adds	r3, #1
 801e054:	613b      	str	r3, [r7, #16]
 801e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e058:	693a      	ldr	r2, [r7, #16]
 801e05a:	429a      	cmp	r2, r3
 801e05c:	d3b7      	bcc.n	801dfce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e05e:	2300      	movs	r3, #0
 801e060:	613b      	str	r3, [r7, #16]
 801e062:	e043      	b.n	801e0ec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e064:	693b      	ldr	r3, [r7, #16]
 801e066:	015a      	lsls	r2, r3, #5
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	4413      	add	r3, r2
 801e06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e07a:	d118      	bne.n	801e0ae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e07c:	693b      	ldr	r3, [r7, #16]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d10a      	bne.n	801e098 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e082:	693b      	ldr	r3, [r7, #16]
 801e084:	015a      	lsls	r2, r3, #5
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	4413      	add	r3, r2
 801e08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e08e:	461a      	mov	r2, r3
 801e090:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e094:	6013      	str	r3, [r2, #0]
 801e096:	e013      	b.n	801e0c0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e098:	693b      	ldr	r3, [r7, #16]
 801e09a:	015a      	lsls	r2, r3, #5
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	4413      	add	r3, r2
 801e0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0a4:	461a      	mov	r2, r3
 801e0a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e0aa:	6013      	str	r3, [r2, #0]
 801e0ac:	e008      	b.n	801e0c0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e0ae:	693b      	ldr	r3, [r7, #16]
 801e0b0:	015a      	lsls	r2, r3, #5
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	4413      	add	r3, r2
 801e0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0ba:	461a      	mov	r2, r3
 801e0bc:	2300      	movs	r3, #0
 801e0be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e0c0:	693b      	ldr	r3, [r7, #16]
 801e0c2:	015a      	lsls	r2, r3, #5
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	4413      	add	r3, r2
 801e0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0cc:	461a      	mov	r2, r3
 801e0ce:	2300      	movs	r3, #0
 801e0d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	015a      	lsls	r2, r3, #5
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	4413      	add	r3, r2
 801e0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e0de:	461a      	mov	r2, r3
 801e0e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e0e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e0e6:	693b      	ldr	r3, [r7, #16]
 801e0e8:	3301      	adds	r3, #1
 801e0ea:	613b      	str	r3, [r7, #16]
 801e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0ee:	693a      	ldr	r2, [r7, #16]
 801e0f0:	429a      	cmp	r2, r3
 801e0f2:	d3b7      	bcc.n	801e064 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0fa:	691b      	ldr	r3, [r3, #16]
 801e0fc:	68fa      	ldr	r2, [r7, #12]
 801e0fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e106:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2200      	movs	r2, #0
 801e10c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e114:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d105      	bne.n	801e128 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	699b      	ldr	r3, [r3, #24]
 801e120:	f043 0210 	orr.w	r2, r3, #16
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	699a      	ldr	r2, [r3, #24]
 801e12c:	4b0f      	ldr	r3, [pc, #60]	; (801e16c <USB_DevInit+0x2b8>)
 801e12e:	4313      	orrs	r3, r2
 801e130:	687a      	ldr	r2, [r7, #4]
 801e132:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e136:	2b00      	cmp	r3, #0
 801e138:	d005      	beq.n	801e146 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	699b      	ldr	r3, [r3, #24]
 801e13e:	f043 0208 	orr.w	r2, r3, #8
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e148:	2b01      	cmp	r3, #1
 801e14a:	d107      	bne.n	801e15c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	699b      	ldr	r3, [r3, #24]
 801e150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e154:	f043 0304 	orr.w	r3, r3, #4
 801e158:	687a      	ldr	r2, [r7, #4]
 801e15a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e15c:	7dfb      	ldrb	r3, [r7, #23]
}
 801e15e:	4618      	mov	r0, r3
 801e160:	3718      	adds	r7, #24
 801e162:	46bd      	mov	sp, r7
 801e164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e168:	b004      	add	sp, #16
 801e16a:	4770      	bx	lr
 801e16c:	803c3800 	.word	0x803c3800

0801e170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e170:	b480      	push	{r7}
 801e172:	b085      	sub	sp, #20
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
 801e178:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e17a:	2300      	movs	r3, #0
 801e17c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e17e:	683b      	ldr	r3, [r7, #0]
 801e180:	019b      	lsls	r3, r3, #6
 801e182:	f043 0220 	orr.w	r2, r3, #32
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	3301      	adds	r3, #1
 801e18e:	60fb      	str	r3, [r7, #12]
 801e190:	4a08      	ldr	r2, [pc, #32]	; (801e1b4 <USB_FlushTxFifo+0x44>)
 801e192:	4293      	cmp	r3, r2
 801e194:	d901      	bls.n	801e19a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 801e196:	2303      	movs	r3, #3
 801e198:	e006      	b.n	801e1a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	691b      	ldr	r3, [r3, #16]
 801e19e:	f003 0320 	and.w	r3, r3, #32
 801e1a2:	2b20      	cmp	r3, #32
 801e1a4:	d0f1      	beq.n	801e18a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e1a6:	2300      	movs	r3, #0
}
 801e1a8:	4618      	mov	r0, r3
 801e1aa:	3714      	adds	r7, #20
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1b2:	4770      	bx	lr
 801e1b4:	00030d40 	.word	0x00030d40

0801e1b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e1b8:	b480      	push	{r7}
 801e1ba:	b085      	sub	sp, #20
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	2210      	movs	r2, #16
 801e1c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	3301      	adds	r3, #1
 801e1ce:	60fb      	str	r3, [r7, #12]
 801e1d0:	4a08      	ldr	r2, [pc, #32]	; (801e1f4 <USB_FlushRxFifo+0x3c>)
 801e1d2:	4293      	cmp	r3, r2
 801e1d4:	d901      	bls.n	801e1da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 801e1d6:	2303      	movs	r3, #3
 801e1d8:	e006      	b.n	801e1e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	691b      	ldr	r3, [r3, #16]
 801e1de:	f003 0310 	and.w	r3, r3, #16
 801e1e2:	2b10      	cmp	r3, #16
 801e1e4:	d0f1      	beq.n	801e1ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e1e6:	2300      	movs	r3, #0
}
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	3714      	adds	r7, #20
 801e1ec:	46bd      	mov	sp, r7
 801e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1f2:	4770      	bx	lr
 801e1f4:	00030d40 	.word	0x00030d40

0801e1f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e1f8:	b480      	push	{r7}
 801e1fa:	b085      	sub	sp, #20
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	6078      	str	r0, [r7, #4]
 801e200:	460b      	mov	r3, r1
 801e202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e20e:	681a      	ldr	r2, [r3, #0]
 801e210:	78fb      	ldrb	r3, [r7, #3]
 801e212:	68f9      	ldr	r1, [r7, #12]
 801e214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e218:	4313      	orrs	r3, r2
 801e21a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e21c:	2300      	movs	r3, #0
}
 801e21e:	4618      	mov	r0, r3
 801e220:	3714      	adds	r7, #20
 801e222:	46bd      	mov	sp, r7
 801e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e228:	4770      	bx	lr

0801e22a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e22a:	b480      	push	{r7}
 801e22c:	b087      	sub	sp, #28
 801e22e:	af00      	add	r7, sp, #0
 801e230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e236:	693b      	ldr	r3, [r7, #16]
 801e238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e23c:	689b      	ldr	r3, [r3, #8]
 801e23e:	f003 0306 	and.w	r3, r3, #6
 801e242:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d102      	bne.n	801e250 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e24a:	2300      	movs	r3, #0
 801e24c:	75fb      	strb	r3, [r7, #23]
 801e24e:	e00a      	b.n	801e266 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	2b02      	cmp	r3, #2
 801e254:	d002      	beq.n	801e25c <USB_GetDevSpeed+0x32>
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	2b06      	cmp	r3, #6
 801e25a:	d102      	bne.n	801e262 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e25c:	2302      	movs	r3, #2
 801e25e:	75fb      	strb	r3, [r7, #23]
 801e260:	e001      	b.n	801e266 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e262:	230f      	movs	r3, #15
 801e264:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e266:	7dfb      	ldrb	r3, [r7, #23]
}
 801e268:	4618      	mov	r0, r3
 801e26a:	371c      	adds	r7, #28
 801e26c:	46bd      	mov	sp, r7
 801e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e272:	4770      	bx	lr

0801e274 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e274:	b480      	push	{r7}
 801e276:	b085      	sub	sp, #20
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e282:	683b      	ldr	r3, [r7, #0]
 801e284:	781b      	ldrb	r3, [r3, #0]
 801e286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e288:	683b      	ldr	r3, [r7, #0]
 801e28a:	785b      	ldrb	r3, [r3, #1]
 801e28c:	2b01      	cmp	r3, #1
 801e28e:	d13a      	bne.n	801e306 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e296:	69da      	ldr	r2, [r3, #28]
 801e298:	683b      	ldr	r3, [r7, #0]
 801e29a:	781b      	ldrb	r3, [r3, #0]
 801e29c:	f003 030f 	and.w	r3, r3, #15
 801e2a0:	2101      	movs	r1, #1
 801e2a2:	fa01 f303 	lsl.w	r3, r1, r3
 801e2a6:	b29b      	uxth	r3, r3
 801e2a8:	68f9      	ldr	r1, [r7, #12]
 801e2aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e2ae:	4313      	orrs	r3, r2
 801e2b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e2b2:	68bb      	ldr	r3, [r7, #8]
 801e2b4:	015a      	lsls	r2, r3, #5
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	4413      	add	r3, r2
 801e2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d155      	bne.n	801e374 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e2c8:	68bb      	ldr	r3, [r7, #8]
 801e2ca:	015a      	lsls	r2, r3, #5
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	4413      	add	r3, r2
 801e2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2d4:	681a      	ldr	r2, [r3, #0]
 801e2d6:	683b      	ldr	r3, [r7, #0]
 801e2d8:	689b      	ldr	r3, [r3, #8]
 801e2da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e2de:	683b      	ldr	r3, [r7, #0]
 801e2e0:	78db      	ldrb	r3, [r3, #3]
 801e2e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e2e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e2e6:	68bb      	ldr	r3, [r7, #8]
 801e2e8:	059b      	lsls	r3, r3, #22
 801e2ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e2ec:	4313      	orrs	r3, r2
 801e2ee:	68ba      	ldr	r2, [r7, #8]
 801e2f0:	0151      	lsls	r1, r2, #5
 801e2f2:	68fa      	ldr	r2, [r7, #12]
 801e2f4:	440a      	add	r2, r1
 801e2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e302:	6013      	str	r3, [r2, #0]
 801e304:	e036      	b.n	801e374 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e30c:	69da      	ldr	r2, [r3, #28]
 801e30e:	683b      	ldr	r3, [r7, #0]
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	f003 030f 	and.w	r3, r3, #15
 801e316:	2101      	movs	r1, #1
 801e318:	fa01 f303 	lsl.w	r3, r1, r3
 801e31c:	041b      	lsls	r3, r3, #16
 801e31e:	68f9      	ldr	r1, [r7, #12]
 801e320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e324:	4313      	orrs	r3, r2
 801e326:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e328:	68bb      	ldr	r3, [r7, #8]
 801e32a:	015a      	lsls	r2, r3, #5
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	4413      	add	r3, r2
 801e330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d11a      	bne.n	801e374 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e33e:	68bb      	ldr	r3, [r7, #8]
 801e340:	015a      	lsls	r2, r3, #5
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	4413      	add	r3, r2
 801e346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e34a:	681a      	ldr	r2, [r3, #0]
 801e34c:	683b      	ldr	r3, [r7, #0]
 801e34e:	689b      	ldr	r3, [r3, #8]
 801e350:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e354:	683b      	ldr	r3, [r7, #0]
 801e356:	78db      	ldrb	r3, [r3, #3]
 801e358:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e35a:	430b      	orrs	r3, r1
 801e35c:	4313      	orrs	r3, r2
 801e35e:	68ba      	ldr	r2, [r7, #8]
 801e360:	0151      	lsls	r1, r2, #5
 801e362:	68fa      	ldr	r2, [r7, #12]
 801e364:	440a      	add	r2, r1
 801e366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e36a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e372:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e374:	2300      	movs	r3, #0
}
 801e376:	4618      	mov	r0, r3
 801e378:	3714      	adds	r7, #20
 801e37a:	46bd      	mov	sp, r7
 801e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e380:	4770      	bx	lr
	...

0801e384 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e384:	b480      	push	{r7}
 801e386:	b085      	sub	sp, #20
 801e388:	af00      	add	r7, sp, #0
 801e38a:	6078      	str	r0, [r7, #4]
 801e38c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e392:	683b      	ldr	r3, [r7, #0]
 801e394:	781b      	ldrb	r3, [r3, #0]
 801e396:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e398:	683b      	ldr	r3, [r7, #0]
 801e39a:	785b      	ldrb	r3, [r3, #1]
 801e39c:	2b01      	cmp	r3, #1
 801e39e:	d161      	bne.n	801e464 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e3a0:	68bb      	ldr	r3, [r7, #8]
 801e3a2:	015a      	lsls	r2, r3, #5
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	4413      	add	r3, r2
 801e3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e3b6:	d11f      	bne.n	801e3f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e3b8:	68bb      	ldr	r3, [r7, #8]
 801e3ba:	015a      	lsls	r2, r3, #5
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	4413      	add	r3, r2
 801e3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	68ba      	ldr	r2, [r7, #8]
 801e3c8:	0151      	lsls	r1, r2, #5
 801e3ca:	68fa      	ldr	r2, [r7, #12]
 801e3cc:	440a      	add	r2, r1
 801e3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e3d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e3d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e3d8:	68bb      	ldr	r3, [r7, #8]
 801e3da:	015a      	lsls	r2, r3, #5
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	4413      	add	r3, r2
 801e3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3e4:	681b      	ldr	r3, [r3, #0]
 801e3e6:	68ba      	ldr	r2, [r7, #8]
 801e3e8:	0151      	lsls	r1, r2, #5
 801e3ea:	68fa      	ldr	r2, [r7, #12]
 801e3ec:	440a      	add	r2, r1
 801e3ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e3f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e3f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e400:	683b      	ldr	r3, [r7, #0]
 801e402:	781b      	ldrb	r3, [r3, #0]
 801e404:	f003 030f 	and.w	r3, r3, #15
 801e408:	2101      	movs	r1, #1
 801e40a:	fa01 f303 	lsl.w	r3, r1, r3
 801e40e:	b29b      	uxth	r3, r3
 801e410:	43db      	mvns	r3, r3
 801e412:	68f9      	ldr	r1, [r7, #12]
 801e414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e418:	4013      	ands	r3, r2
 801e41a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e422:	69da      	ldr	r2, [r3, #28]
 801e424:	683b      	ldr	r3, [r7, #0]
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	f003 030f 	and.w	r3, r3, #15
 801e42c:	2101      	movs	r1, #1
 801e42e:	fa01 f303 	lsl.w	r3, r1, r3
 801e432:	b29b      	uxth	r3, r3
 801e434:	43db      	mvns	r3, r3
 801e436:	68f9      	ldr	r1, [r7, #12]
 801e438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e43c:	4013      	ands	r3, r2
 801e43e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	015a      	lsls	r2, r3, #5
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	4413      	add	r3, r2
 801e448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e44c:	681a      	ldr	r2, [r3, #0]
 801e44e:	68bb      	ldr	r3, [r7, #8]
 801e450:	0159      	lsls	r1, r3, #5
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	440b      	add	r3, r1
 801e456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e45a:	4619      	mov	r1, r3
 801e45c:	4b35      	ldr	r3, [pc, #212]	; (801e534 <USB_DeactivateEndpoint+0x1b0>)
 801e45e:	4013      	ands	r3, r2
 801e460:	600b      	str	r3, [r1, #0]
 801e462:	e060      	b.n	801e526 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e464:	68bb      	ldr	r3, [r7, #8]
 801e466:	015a      	lsls	r2, r3, #5
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	4413      	add	r3, r2
 801e46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e47a:	d11f      	bne.n	801e4bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e47c:	68bb      	ldr	r3, [r7, #8]
 801e47e:	015a      	lsls	r2, r3, #5
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	4413      	add	r3, r2
 801e484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	68ba      	ldr	r2, [r7, #8]
 801e48c:	0151      	lsls	r1, r2, #5
 801e48e:	68fa      	ldr	r2, [r7, #12]
 801e490:	440a      	add	r2, r1
 801e492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e49a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	015a      	lsls	r2, r3, #5
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	4413      	add	r3, r2
 801e4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	68ba      	ldr	r2, [r7, #8]
 801e4ac:	0151      	lsls	r1, r2, #5
 801e4ae:	68fa      	ldr	r2, [r7, #12]
 801e4b0:	440a      	add	r2, r1
 801e4b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e4b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e4ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e4c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e4c4:	683b      	ldr	r3, [r7, #0]
 801e4c6:	781b      	ldrb	r3, [r3, #0]
 801e4c8:	f003 030f 	and.w	r3, r3, #15
 801e4cc:	2101      	movs	r1, #1
 801e4ce:	fa01 f303 	lsl.w	r3, r1, r3
 801e4d2:	041b      	lsls	r3, r3, #16
 801e4d4:	43db      	mvns	r3, r3
 801e4d6:	68f9      	ldr	r1, [r7, #12]
 801e4d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e4dc:	4013      	ands	r3, r2
 801e4de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e4e6:	69da      	ldr	r2, [r3, #28]
 801e4e8:	683b      	ldr	r3, [r7, #0]
 801e4ea:	781b      	ldrb	r3, [r3, #0]
 801e4ec:	f003 030f 	and.w	r3, r3, #15
 801e4f0:	2101      	movs	r1, #1
 801e4f2:	fa01 f303 	lsl.w	r3, r1, r3
 801e4f6:	041b      	lsls	r3, r3, #16
 801e4f8:	43db      	mvns	r3, r3
 801e4fa:	68f9      	ldr	r1, [r7, #12]
 801e4fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e500:	4013      	ands	r3, r2
 801e502:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e504:	68bb      	ldr	r3, [r7, #8]
 801e506:	015a      	lsls	r2, r3, #5
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	4413      	add	r3, r2
 801e50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e510:	681a      	ldr	r2, [r3, #0]
 801e512:	68bb      	ldr	r3, [r7, #8]
 801e514:	0159      	lsls	r1, r3, #5
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	440b      	add	r3, r1
 801e51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e51e:	4619      	mov	r1, r3
 801e520:	4b05      	ldr	r3, [pc, #20]	; (801e538 <USB_DeactivateEndpoint+0x1b4>)
 801e522:	4013      	ands	r3, r2
 801e524:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e526:	2300      	movs	r3, #0
}
 801e528:	4618      	mov	r0, r3
 801e52a:	3714      	adds	r7, #20
 801e52c:	46bd      	mov	sp, r7
 801e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e532:	4770      	bx	lr
 801e534:	ec337800 	.word	0xec337800
 801e538:	eff37800 	.word	0xeff37800

0801e53c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e53c:	b580      	push	{r7, lr}
 801e53e:	b08a      	sub	sp, #40	; 0x28
 801e540:	af02      	add	r7, sp, #8
 801e542:	60f8      	str	r0, [r7, #12]
 801e544:	60b9      	str	r1, [r7, #8]
 801e546:	4613      	mov	r3, r2
 801e548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e54a:	68fb      	ldr	r3, [r7, #12]
 801e54c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e54e:	68bb      	ldr	r3, [r7, #8]
 801e550:	781b      	ldrb	r3, [r3, #0]
 801e552:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e554:	68bb      	ldr	r3, [r7, #8]
 801e556:	785b      	ldrb	r3, [r3, #1]
 801e558:	2b01      	cmp	r3, #1
 801e55a:	f040 815c 	bne.w	801e816 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	695b      	ldr	r3, [r3, #20]
 801e562:	2b00      	cmp	r3, #0
 801e564:	d132      	bne.n	801e5cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e566:	69bb      	ldr	r3, [r7, #24]
 801e568:	015a      	lsls	r2, r3, #5
 801e56a:	69fb      	ldr	r3, [r7, #28]
 801e56c:	4413      	add	r3, r2
 801e56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e572:	691b      	ldr	r3, [r3, #16]
 801e574:	69ba      	ldr	r2, [r7, #24]
 801e576:	0151      	lsls	r1, r2, #5
 801e578:	69fa      	ldr	r2, [r7, #28]
 801e57a:	440a      	add	r2, r1
 801e57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e58a:	69bb      	ldr	r3, [r7, #24]
 801e58c:	015a      	lsls	r2, r3, #5
 801e58e:	69fb      	ldr	r3, [r7, #28]
 801e590:	4413      	add	r3, r2
 801e592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e596:	691b      	ldr	r3, [r3, #16]
 801e598:	69ba      	ldr	r2, [r7, #24]
 801e59a:	0151      	lsls	r1, r2, #5
 801e59c:	69fa      	ldr	r2, [r7, #28]
 801e59e:	440a      	add	r2, r1
 801e5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e5a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e5aa:	69bb      	ldr	r3, [r7, #24]
 801e5ac:	015a      	lsls	r2, r3, #5
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	4413      	add	r3, r2
 801e5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5b6:	691b      	ldr	r3, [r3, #16]
 801e5b8:	69ba      	ldr	r2, [r7, #24]
 801e5ba:	0151      	lsls	r1, r2, #5
 801e5bc:	69fa      	ldr	r2, [r7, #28]
 801e5be:	440a      	add	r2, r1
 801e5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5c4:	0cdb      	lsrs	r3, r3, #19
 801e5c6:	04db      	lsls	r3, r3, #19
 801e5c8:	6113      	str	r3, [r2, #16]
 801e5ca:	e074      	b.n	801e6b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e5cc:	69bb      	ldr	r3, [r7, #24]
 801e5ce:	015a      	lsls	r2, r3, #5
 801e5d0:	69fb      	ldr	r3, [r7, #28]
 801e5d2:	4413      	add	r3, r2
 801e5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5d8:	691b      	ldr	r3, [r3, #16]
 801e5da:	69ba      	ldr	r2, [r7, #24]
 801e5dc:	0151      	lsls	r1, r2, #5
 801e5de:	69fa      	ldr	r2, [r7, #28]
 801e5e0:	440a      	add	r2, r1
 801e5e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5e6:	0cdb      	lsrs	r3, r3, #19
 801e5e8:	04db      	lsls	r3, r3, #19
 801e5ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e5ec:	69bb      	ldr	r3, [r7, #24]
 801e5ee:	015a      	lsls	r2, r3, #5
 801e5f0:	69fb      	ldr	r3, [r7, #28]
 801e5f2:	4413      	add	r3, r2
 801e5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5f8:	691b      	ldr	r3, [r3, #16]
 801e5fa:	69ba      	ldr	r2, [r7, #24]
 801e5fc:	0151      	lsls	r1, r2, #5
 801e5fe:	69fa      	ldr	r2, [r7, #28]
 801e600:	440a      	add	r2, r1
 801e602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e606:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e60a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e60e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e610:	69bb      	ldr	r3, [r7, #24]
 801e612:	015a      	lsls	r2, r3, #5
 801e614:	69fb      	ldr	r3, [r7, #28]
 801e616:	4413      	add	r3, r2
 801e618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e61c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e61e:	68bb      	ldr	r3, [r7, #8]
 801e620:	6959      	ldr	r1, [r3, #20]
 801e622:	68bb      	ldr	r3, [r7, #8]
 801e624:	689b      	ldr	r3, [r3, #8]
 801e626:	440b      	add	r3, r1
 801e628:	1e59      	subs	r1, r3, #1
 801e62a:	68bb      	ldr	r3, [r7, #8]
 801e62c:	689b      	ldr	r3, [r3, #8]
 801e62e:	fbb1 f3f3 	udiv	r3, r1, r3
 801e632:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e634:	4b9d      	ldr	r3, [pc, #628]	; (801e8ac <USB_EPStartXfer+0x370>)
 801e636:	400b      	ands	r3, r1
 801e638:	69b9      	ldr	r1, [r7, #24]
 801e63a:	0148      	lsls	r0, r1, #5
 801e63c:	69f9      	ldr	r1, [r7, #28]
 801e63e:	4401      	add	r1, r0
 801e640:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e644:	4313      	orrs	r3, r2
 801e646:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e648:	69bb      	ldr	r3, [r7, #24]
 801e64a:	015a      	lsls	r2, r3, #5
 801e64c:	69fb      	ldr	r3, [r7, #28]
 801e64e:	4413      	add	r3, r2
 801e650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e654:	691a      	ldr	r2, [r3, #16]
 801e656:	68bb      	ldr	r3, [r7, #8]
 801e658:	695b      	ldr	r3, [r3, #20]
 801e65a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e65e:	69b9      	ldr	r1, [r7, #24]
 801e660:	0148      	lsls	r0, r1, #5
 801e662:	69f9      	ldr	r1, [r7, #28]
 801e664:	4401      	add	r1, r0
 801e666:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e66a:	4313      	orrs	r3, r2
 801e66c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e66e:	68bb      	ldr	r3, [r7, #8]
 801e670:	78db      	ldrb	r3, [r3, #3]
 801e672:	2b01      	cmp	r3, #1
 801e674:	d11f      	bne.n	801e6b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e676:	69bb      	ldr	r3, [r7, #24]
 801e678:	015a      	lsls	r2, r3, #5
 801e67a:	69fb      	ldr	r3, [r7, #28]
 801e67c:	4413      	add	r3, r2
 801e67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e682:	691b      	ldr	r3, [r3, #16]
 801e684:	69ba      	ldr	r2, [r7, #24]
 801e686:	0151      	lsls	r1, r2, #5
 801e688:	69fa      	ldr	r2, [r7, #28]
 801e68a:	440a      	add	r2, r1
 801e68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e690:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e694:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e696:	69bb      	ldr	r3, [r7, #24]
 801e698:	015a      	lsls	r2, r3, #5
 801e69a:	69fb      	ldr	r3, [r7, #28]
 801e69c:	4413      	add	r3, r2
 801e69e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6a2:	691b      	ldr	r3, [r3, #16]
 801e6a4:	69ba      	ldr	r2, [r7, #24]
 801e6a6:	0151      	lsls	r1, r2, #5
 801e6a8:	69fa      	ldr	r2, [r7, #28]
 801e6aa:	440a      	add	r2, r1
 801e6ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e6b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e6b6:	79fb      	ldrb	r3, [r7, #7]
 801e6b8:	2b01      	cmp	r3, #1
 801e6ba:	d14b      	bne.n	801e754 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e6bc:	68bb      	ldr	r3, [r7, #8]
 801e6be:	691b      	ldr	r3, [r3, #16]
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d009      	beq.n	801e6d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e6c4:	69bb      	ldr	r3, [r7, #24]
 801e6c6:	015a      	lsls	r2, r3, #5
 801e6c8:	69fb      	ldr	r3, [r7, #28]
 801e6ca:	4413      	add	r3, r2
 801e6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6d0:	461a      	mov	r2, r3
 801e6d2:	68bb      	ldr	r3, [r7, #8]
 801e6d4:	691b      	ldr	r3, [r3, #16]
 801e6d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e6d8:	68bb      	ldr	r3, [r7, #8]
 801e6da:	78db      	ldrb	r3, [r3, #3]
 801e6dc:	2b01      	cmp	r3, #1
 801e6de:	d128      	bne.n	801e732 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e6e0:	69fb      	ldr	r3, [r7, #28]
 801e6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6e6:	689b      	ldr	r3, [r3, #8]
 801e6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d110      	bne.n	801e712 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e6f0:	69bb      	ldr	r3, [r7, #24]
 801e6f2:	015a      	lsls	r2, r3, #5
 801e6f4:	69fb      	ldr	r3, [r7, #28]
 801e6f6:	4413      	add	r3, r2
 801e6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	69ba      	ldr	r2, [r7, #24]
 801e700:	0151      	lsls	r1, r2, #5
 801e702:	69fa      	ldr	r2, [r7, #28]
 801e704:	440a      	add	r2, r1
 801e706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e70a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e70e:	6013      	str	r3, [r2, #0]
 801e710:	e00f      	b.n	801e732 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e712:	69bb      	ldr	r3, [r7, #24]
 801e714:	015a      	lsls	r2, r3, #5
 801e716:	69fb      	ldr	r3, [r7, #28]
 801e718:	4413      	add	r3, r2
 801e71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	69ba      	ldr	r2, [r7, #24]
 801e722:	0151      	lsls	r1, r2, #5
 801e724:	69fa      	ldr	r2, [r7, #28]
 801e726:	440a      	add	r2, r1
 801e728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e72c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e730:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e732:	69bb      	ldr	r3, [r7, #24]
 801e734:	015a      	lsls	r2, r3, #5
 801e736:	69fb      	ldr	r3, [r7, #28]
 801e738:	4413      	add	r3, r2
 801e73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	69ba      	ldr	r2, [r7, #24]
 801e742:	0151      	lsls	r1, r2, #5
 801e744:	69fa      	ldr	r2, [r7, #28]
 801e746:	440a      	add	r2, r1
 801e748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e74c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e750:	6013      	str	r3, [r2, #0]
 801e752:	e12f      	b.n	801e9b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e754:	69bb      	ldr	r3, [r7, #24]
 801e756:	015a      	lsls	r2, r3, #5
 801e758:	69fb      	ldr	r3, [r7, #28]
 801e75a:	4413      	add	r3, r2
 801e75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	69ba      	ldr	r2, [r7, #24]
 801e764:	0151      	lsls	r1, r2, #5
 801e766:	69fa      	ldr	r2, [r7, #28]
 801e768:	440a      	add	r2, r1
 801e76a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e76e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e772:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e774:	68bb      	ldr	r3, [r7, #8]
 801e776:	78db      	ldrb	r3, [r3, #3]
 801e778:	2b01      	cmp	r3, #1
 801e77a:	d015      	beq.n	801e7a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e77c:	68bb      	ldr	r3, [r7, #8]
 801e77e:	695b      	ldr	r3, [r3, #20]
 801e780:	2b00      	cmp	r3, #0
 801e782:	f000 8117 	beq.w	801e9b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e786:	69fb      	ldr	r3, [r7, #28]
 801e788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e78c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	781b      	ldrb	r3, [r3, #0]
 801e792:	f003 030f 	and.w	r3, r3, #15
 801e796:	2101      	movs	r1, #1
 801e798:	fa01 f303 	lsl.w	r3, r1, r3
 801e79c:	69f9      	ldr	r1, [r7, #28]
 801e79e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e7a2:	4313      	orrs	r3, r2
 801e7a4:	634b      	str	r3, [r1, #52]	; 0x34
 801e7a6:	e105      	b.n	801e9b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e7a8:	69fb      	ldr	r3, [r7, #28]
 801e7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e7ae:	689b      	ldr	r3, [r3, #8]
 801e7b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d110      	bne.n	801e7da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e7b8:	69bb      	ldr	r3, [r7, #24]
 801e7ba:	015a      	lsls	r2, r3, #5
 801e7bc:	69fb      	ldr	r3, [r7, #28]
 801e7be:	4413      	add	r3, r2
 801e7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	69ba      	ldr	r2, [r7, #24]
 801e7c8:	0151      	lsls	r1, r2, #5
 801e7ca:	69fa      	ldr	r2, [r7, #28]
 801e7cc:	440a      	add	r2, r1
 801e7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e7d6:	6013      	str	r3, [r2, #0]
 801e7d8:	e00f      	b.n	801e7fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e7da:	69bb      	ldr	r3, [r7, #24]
 801e7dc:	015a      	lsls	r2, r3, #5
 801e7de:	69fb      	ldr	r3, [r7, #28]
 801e7e0:	4413      	add	r3, r2
 801e7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	69ba      	ldr	r2, [r7, #24]
 801e7ea:	0151      	lsls	r1, r2, #5
 801e7ec:	69fa      	ldr	r2, [r7, #28]
 801e7ee:	440a      	add	r2, r1
 801e7f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e7f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e7fa:	68bb      	ldr	r3, [r7, #8]
 801e7fc:	68d9      	ldr	r1, [r3, #12]
 801e7fe:	68bb      	ldr	r3, [r7, #8]
 801e800:	781a      	ldrb	r2, [r3, #0]
 801e802:	68bb      	ldr	r3, [r7, #8]
 801e804:	695b      	ldr	r3, [r3, #20]
 801e806:	b298      	uxth	r0, r3
 801e808:	79fb      	ldrb	r3, [r7, #7]
 801e80a:	9300      	str	r3, [sp, #0]
 801e80c:	4603      	mov	r3, r0
 801e80e:	68f8      	ldr	r0, [r7, #12]
 801e810:	f000 fa2b 	bl	801ec6a <USB_WritePacket>
 801e814:	e0ce      	b.n	801e9b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e816:	69bb      	ldr	r3, [r7, #24]
 801e818:	015a      	lsls	r2, r3, #5
 801e81a:	69fb      	ldr	r3, [r7, #28]
 801e81c:	4413      	add	r3, r2
 801e81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e822:	691b      	ldr	r3, [r3, #16]
 801e824:	69ba      	ldr	r2, [r7, #24]
 801e826:	0151      	lsls	r1, r2, #5
 801e828:	69fa      	ldr	r2, [r7, #28]
 801e82a:	440a      	add	r2, r1
 801e82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e830:	0cdb      	lsrs	r3, r3, #19
 801e832:	04db      	lsls	r3, r3, #19
 801e834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e836:	69bb      	ldr	r3, [r7, #24]
 801e838:	015a      	lsls	r2, r3, #5
 801e83a:	69fb      	ldr	r3, [r7, #28]
 801e83c:	4413      	add	r3, r2
 801e83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e842:	691b      	ldr	r3, [r3, #16]
 801e844:	69ba      	ldr	r2, [r7, #24]
 801e846:	0151      	lsls	r1, r2, #5
 801e848:	69fa      	ldr	r2, [r7, #28]
 801e84a:	440a      	add	r2, r1
 801e84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e858:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e85a:	68bb      	ldr	r3, [r7, #8]
 801e85c:	695b      	ldr	r3, [r3, #20]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d126      	bne.n	801e8b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e862:	69bb      	ldr	r3, [r7, #24]
 801e864:	015a      	lsls	r2, r3, #5
 801e866:	69fb      	ldr	r3, [r7, #28]
 801e868:	4413      	add	r3, r2
 801e86a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e86e:	691a      	ldr	r2, [r3, #16]
 801e870:	68bb      	ldr	r3, [r7, #8]
 801e872:	689b      	ldr	r3, [r3, #8]
 801e874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e878:	69b9      	ldr	r1, [r7, #24]
 801e87a:	0148      	lsls	r0, r1, #5
 801e87c:	69f9      	ldr	r1, [r7, #28]
 801e87e:	4401      	add	r1, r0
 801e880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e884:	4313      	orrs	r3, r2
 801e886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e888:	69bb      	ldr	r3, [r7, #24]
 801e88a:	015a      	lsls	r2, r3, #5
 801e88c:	69fb      	ldr	r3, [r7, #28]
 801e88e:	4413      	add	r3, r2
 801e890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e894:	691b      	ldr	r3, [r3, #16]
 801e896:	69ba      	ldr	r2, [r7, #24]
 801e898:	0151      	lsls	r1, r2, #5
 801e89a:	69fa      	ldr	r2, [r7, #28]
 801e89c:	440a      	add	r2, r1
 801e89e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e8a6:	6113      	str	r3, [r2, #16]
 801e8a8:	e036      	b.n	801e918 <USB_EPStartXfer+0x3dc>
 801e8aa:	bf00      	nop
 801e8ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e8b0:	68bb      	ldr	r3, [r7, #8]
 801e8b2:	695a      	ldr	r2, [r3, #20]
 801e8b4:	68bb      	ldr	r3, [r7, #8]
 801e8b6:	689b      	ldr	r3, [r3, #8]
 801e8b8:	4413      	add	r3, r2
 801e8ba:	1e5a      	subs	r2, r3, #1
 801e8bc:	68bb      	ldr	r3, [r7, #8]
 801e8be:	689b      	ldr	r3, [r3, #8]
 801e8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801e8c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e8c6:	69bb      	ldr	r3, [r7, #24]
 801e8c8:	015a      	lsls	r2, r3, #5
 801e8ca:	69fb      	ldr	r3, [r7, #28]
 801e8cc:	4413      	add	r3, r2
 801e8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8d2:	691a      	ldr	r2, [r3, #16]
 801e8d4:	8afb      	ldrh	r3, [r7, #22]
 801e8d6:	04d9      	lsls	r1, r3, #19
 801e8d8:	4b39      	ldr	r3, [pc, #228]	; (801e9c0 <USB_EPStartXfer+0x484>)
 801e8da:	400b      	ands	r3, r1
 801e8dc:	69b9      	ldr	r1, [r7, #24]
 801e8de:	0148      	lsls	r0, r1, #5
 801e8e0:	69f9      	ldr	r1, [r7, #28]
 801e8e2:	4401      	add	r1, r0
 801e8e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e8e8:	4313      	orrs	r3, r2
 801e8ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801e8ec:	69bb      	ldr	r3, [r7, #24]
 801e8ee:	015a      	lsls	r2, r3, #5
 801e8f0:	69fb      	ldr	r3, [r7, #28]
 801e8f2:	4413      	add	r3, r2
 801e8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8f8:	691a      	ldr	r2, [r3, #16]
 801e8fa:	68bb      	ldr	r3, [r7, #8]
 801e8fc:	689b      	ldr	r3, [r3, #8]
 801e8fe:	8af9      	ldrh	r1, [r7, #22]
 801e900:	fb01 f303 	mul.w	r3, r1, r3
 801e904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e908:	69b9      	ldr	r1, [r7, #24]
 801e90a:	0148      	lsls	r0, r1, #5
 801e90c:	69f9      	ldr	r1, [r7, #28]
 801e90e:	4401      	add	r1, r0
 801e910:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e914:	4313      	orrs	r3, r2
 801e916:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e918:	79fb      	ldrb	r3, [r7, #7]
 801e91a:	2b01      	cmp	r3, #1
 801e91c:	d10d      	bne.n	801e93a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e91e:	68bb      	ldr	r3, [r7, #8]
 801e920:	68db      	ldr	r3, [r3, #12]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d009      	beq.n	801e93a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	68d9      	ldr	r1, [r3, #12]
 801e92a:	69bb      	ldr	r3, [r7, #24]
 801e92c:	015a      	lsls	r2, r3, #5
 801e92e:	69fb      	ldr	r3, [r7, #28]
 801e930:	4413      	add	r3, r2
 801e932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e936:	460a      	mov	r2, r1
 801e938:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e93a:	68bb      	ldr	r3, [r7, #8]
 801e93c:	78db      	ldrb	r3, [r3, #3]
 801e93e:	2b01      	cmp	r3, #1
 801e940:	d128      	bne.n	801e994 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e942:	69fb      	ldr	r3, [r7, #28]
 801e944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e948:	689b      	ldr	r3, [r3, #8]
 801e94a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d110      	bne.n	801e974 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e952:	69bb      	ldr	r3, [r7, #24]
 801e954:	015a      	lsls	r2, r3, #5
 801e956:	69fb      	ldr	r3, [r7, #28]
 801e958:	4413      	add	r3, r2
 801e95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	69ba      	ldr	r2, [r7, #24]
 801e962:	0151      	lsls	r1, r2, #5
 801e964:	69fa      	ldr	r2, [r7, #28]
 801e966:	440a      	add	r2, r1
 801e968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e96c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e970:	6013      	str	r3, [r2, #0]
 801e972:	e00f      	b.n	801e994 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e974:	69bb      	ldr	r3, [r7, #24]
 801e976:	015a      	lsls	r2, r3, #5
 801e978:	69fb      	ldr	r3, [r7, #28]
 801e97a:	4413      	add	r3, r2
 801e97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e980:	681b      	ldr	r3, [r3, #0]
 801e982:	69ba      	ldr	r2, [r7, #24]
 801e984:	0151      	lsls	r1, r2, #5
 801e986:	69fa      	ldr	r2, [r7, #28]
 801e988:	440a      	add	r2, r1
 801e98a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e98e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e992:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e994:	69bb      	ldr	r3, [r7, #24]
 801e996:	015a      	lsls	r2, r3, #5
 801e998:	69fb      	ldr	r3, [r7, #28]
 801e99a:	4413      	add	r3, r2
 801e99c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	69ba      	ldr	r2, [r7, #24]
 801e9a4:	0151      	lsls	r1, r2, #5
 801e9a6:	69fa      	ldr	r2, [r7, #28]
 801e9a8:	440a      	add	r2, r1
 801e9aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e9ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e9b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e9b4:	2300      	movs	r3, #0
}
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	3720      	adds	r7, #32
 801e9ba:	46bd      	mov	sp, r7
 801e9bc:	bd80      	pop	{r7, pc}
 801e9be:	bf00      	nop
 801e9c0:	1ff80000 	.word	0x1ff80000

0801e9c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e9c4:	b480      	push	{r7}
 801e9c6:	b087      	sub	sp, #28
 801e9c8:	af00      	add	r7, sp, #0
 801e9ca:	60f8      	str	r0, [r7, #12]
 801e9cc:	60b9      	str	r1, [r7, #8]
 801e9ce:	4613      	mov	r3, r2
 801e9d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e9d2:	68fb      	ldr	r3, [r7, #12]
 801e9d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e9d6:	68bb      	ldr	r3, [r7, #8]
 801e9d8:	781b      	ldrb	r3, [r3, #0]
 801e9da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e9dc:	68bb      	ldr	r3, [r7, #8]
 801e9de:	785b      	ldrb	r3, [r3, #1]
 801e9e0:	2b01      	cmp	r3, #1
 801e9e2:	f040 80cd 	bne.w	801eb80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e9e6:	68bb      	ldr	r3, [r7, #8]
 801e9e8:	695b      	ldr	r3, [r3, #20]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d132      	bne.n	801ea54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e9ee:	693b      	ldr	r3, [r7, #16]
 801e9f0:	015a      	lsls	r2, r3, #5
 801e9f2:	697b      	ldr	r3, [r7, #20]
 801e9f4:	4413      	add	r3, r2
 801e9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9fa:	691b      	ldr	r3, [r3, #16]
 801e9fc:	693a      	ldr	r2, [r7, #16]
 801e9fe:	0151      	lsls	r1, r2, #5
 801ea00:	697a      	ldr	r2, [r7, #20]
 801ea02:	440a      	add	r2, r1
 801ea04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ea12:	693b      	ldr	r3, [r7, #16]
 801ea14:	015a      	lsls	r2, r3, #5
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	4413      	add	r3, r2
 801ea1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea1e:	691b      	ldr	r3, [r3, #16]
 801ea20:	693a      	ldr	r2, [r7, #16]
 801ea22:	0151      	lsls	r1, r2, #5
 801ea24:	697a      	ldr	r2, [r7, #20]
 801ea26:	440a      	add	r2, r1
 801ea28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ea32:	693b      	ldr	r3, [r7, #16]
 801ea34:	015a      	lsls	r2, r3, #5
 801ea36:	697b      	ldr	r3, [r7, #20]
 801ea38:	4413      	add	r3, r2
 801ea3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea3e:	691b      	ldr	r3, [r3, #16]
 801ea40:	693a      	ldr	r2, [r7, #16]
 801ea42:	0151      	lsls	r1, r2, #5
 801ea44:	697a      	ldr	r2, [r7, #20]
 801ea46:	440a      	add	r2, r1
 801ea48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea4c:	0cdb      	lsrs	r3, r3, #19
 801ea4e:	04db      	lsls	r3, r3, #19
 801ea50:	6113      	str	r3, [r2, #16]
 801ea52:	e04e      	b.n	801eaf2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801ea54:	693b      	ldr	r3, [r7, #16]
 801ea56:	015a      	lsls	r2, r3, #5
 801ea58:	697b      	ldr	r3, [r7, #20]
 801ea5a:	4413      	add	r3, r2
 801ea5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea60:	691b      	ldr	r3, [r3, #16]
 801ea62:	693a      	ldr	r2, [r7, #16]
 801ea64:	0151      	lsls	r1, r2, #5
 801ea66:	697a      	ldr	r2, [r7, #20]
 801ea68:	440a      	add	r2, r1
 801ea6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea6e:	0cdb      	lsrs	r3, r3, #19
 801ea70:	04db      	lsls	r3, r3, #19
 801ea72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ea74:	693b      	ldr	r3, [r7, #16]
 801ea76:	015a      	lsls	r2, r3, #5
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	4413      	add	r3, r2
 801ea7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea80:	691b      	ldr	r3, [r3, #16]
 801ea82:	693a      	ldr	r2, [r7, #16]
 801ea84:	0151      	lsls	r1, r2, #5
 801ea86:	697a      	ldr	r2, [r7, #20]
 801ea88:	440a      	add	r2, r1
 801ea8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	695a      	ldr	r2, [r3, #20]
 801ea9c:	68bb      	ldr	r3, [r7, #8]
 801ea9e:	689b      	ldr	r3, [r3, #8]
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	d903      	bls.n	801eaac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801eaa4:	68bb      	ldr	r3, [r7, #8]
 801eaa6:	689a      	ldr	r2, [r3, #8]
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801eaac:	693b      	ldr	r3, [r7, #16]
 801eaae:	015a      	lsls	r2, r3, #5
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	4413      	add	r3, r2
 801eab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eab8:	691b      	ldr	r3, [r3, #16]
 801eaba:	693a      	ldr	r2, [r7, #16]
 801eabc:	0151      	lsls	r1, r2, #5
 801eabe:	697a      	ldr	r2, [r7, #20]
 801eac0:	440a      	add	r2, r1
 801eac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eaca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801eacc:	693b      	ldr	r3, [r7, #16]
 801eace:	015a      	lsls	r2, r3, #5
 801ead0:	697b      	ldr	r3, [r7, #20]
 801ead2:	4413      	add	r3, r2
 801ead4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ead8:	691a      	ldr	r2, [r3, #16]
 801eada:	68bb      	ldr	r3, [r7, #8]
 801eadc:	695b      	ldr	r3, [r3, #20]
 801eade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eae2:	6939      	ldr	r1, [r7, #16]
 801eae4:	0148      	lsls	r0, r1, #5
 801eae6:	6979      	ldr	r1, [r7, #20]
 801eae8:	4401      	add	r1, r0
 801eaea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801eaee:	4313      	orrs	r3, r2
 801eaf0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801eaf2:	79fb      	ldrb	r3, [r7, #7]
 801eaf4:	2b01      	cmp	r3, #1
 801eaf6:	d11e      	bne.n	801eb36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801eaf8:	68bb      	ldr	r3, [r7, #8]
 801eafa:	691b      	ldr	r3, [r3, #16]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d009      	beq.n	801eb14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801eb00:	693b      	ldr	r3, [r7, #16]
 801eb02:	015a      	lsls	r2, r3, #5
 801eb04:	697b      	ldr	r3, [r7, #20]
 801eb06:	4413      	add	r3, r2
 801eb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb0c:	461a      	mov	r2, r3
 801eb0e:	68bb      	ldr	r3, [r7, #8]
 801eb10:	691b      	ldr	r3, [r3, #16]
 801eb12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eb14:	693b      	ldr	r3, [r7, #16]
 801eb16:	015a      	lsls	r2, r3, #5
 801eb18:	697b      	ldr	r3, [r7, #20]
 801eb1a:	4413      	add	r3, r2
 801eb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	693a      	ldr	r2, [r7, #16]
 801eb24:	0151      	lsls	r1, r2, #5
 801eb26:	697a      	ldr	r2, [r7, #20]
 801eb28:	440a      	add	r2, r1
 801eb2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb32:	6013      	str	r3, [r2, #0]
 801eb34:	e092      	b.n	801ec5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eb36:	693b      	ldr	r3, [r7, #16]
 801eb38:	015a      	lsls	r2, r3, #5
 801eb3a:	697b      	ldr	r3, [r7, #20]
 801eb3c:	4413      	add	r3, r2
 801eb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	693a      	ldr	r2, [r7, #16]
 801eb46:	0151      	lsls	r1, r2, #5
 801eb48:	697a      	ldr	r2, [r7, #20]
 801eb4a:	440a      	add	r2, r1
 801eb4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eb54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801eb56:	68bb      	ldr	r3, [r7, #8]
 801eb58:	695b      	ldr	r3, [r3, #20]
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d07e      	beq.n	801ec5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eb5e:	697b      	ldr	r3, [r7, #20]
 801eb60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eb64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eb66:	68bb      	ldr	r3, [r7, #8]
 801eb68:	781b      	ldrb	r3, [r3, #0]
 801eb6a:	f003 030f 	and.w	r3, r3, #15
 801eb6e:	2101      	movs	r1, #1
 801eb70:	fa01 f303 	lsl.w	r3, r1, r3
 801eb74:	6979      	ldr	r1, [r7, #20]
 801eb76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eb7a:	4313      	orrs	r3, r2
 801eb7c:	634b      	str	r3, [r1, #52]	; 0x34
 801eb7e:	e06d      	b.n	801ec5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eb80:	693b      	ldr	r3, [r7, #16]
 801eb82:	015a      	lsls	r2, r3, #5
 801eb84:	697b      	ldr	r3, [r7, #20]
 801eb86:	4413      	add	r3, r2
 801eb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb8c:	691b      	ldr	r3, [r3, #16]
 801eb8e:	693a      	ldr	r2, [r7, #16]
 801eb90:	0151      	lsls	r1, r2, #5
 801eb92:	697a      	ldr	r2, [r7, #20]
 801eb94:	440a      	add	r2, r1
 801eb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb9a:	0cdb      	lsrs	r3, r3, #19
 801eb9c:	04db      	lsls	r3, r3, #19
 801eb9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eba0:	693b      	ldr	r3, [r7, #16]
 801eba2:	015a      	lsls	r2, r3, #5
 801eba4:	697b      	ldr	r3, [r7, #20]
 801eba6:	4413      	add	r3, r2
 801eba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebac:	691b      	ldr	r3, [r3, #16]
 801ebae:	693a      	ldr	r2, [r7, #16]
 801ebb0:	0151      	lsls	r1, r2, #5
 801ebb2:	697a      	ldr	r2, [r7, #20]
 801ebb4:	440a      	add	r2, r1
 801ebb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ebbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ebc2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801ebc4:	68bb      	ldr	r3, [r7, #8]
 801ebc6:	695b      	ldr	r3, [r3, #20]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d003      	beq.n	801ebd4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801ebcc:	68bb      	ldr	r3, [r7, #8]
 801ebce:	689a      	ldr	r2, [r3, #8]
 801ebd0:	68bb      	ldr	r3, [r7, #8]
 801ebd2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ebd4:	693b      	ldr	r3, [r7, #16]
 801ebd6:	015a      	lsls	r2, r3, #5
 801ebd8:	697b      	ldr	r3, [r7, #20]
 801ebda:	4413      	add	r3, r2
 801ebdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebe0:	691b      	ldr	r3, [r3, #16]
 801ebe2:	693a      	ldr	r2, [r7, #16]
 801ebe4:	0151      	lsls	r1, r2, #5
 801ebe6:	697a      	ldr	r2, [r7, #20]
 801ebe8:	440a      	add	r2, r1
 801ebea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ebf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801ebf4:	693b      	ldr	r3, [r7, #16]
 801ebf6:	015a      	lsls	r2, r3, #5
 801ebf8:	697b      	ldr	r3, [r7, #20]
 801ebfa:	4413      	add	r3, r2
 801ebfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec00:	691a      	ldr	r2, [r3, #16]
 801ec02:	68bb      	ldr	r3, [r7, #8]
 801ec04:	689b      	ldr	r3, [r3, #8]
 801ec06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ec0a:	6939      	ldr	r1, [r7, #16]
 801ec0c:	0148      	lsls	r0, r1, #5
 801ec0e:	6979      	ldr	r1, [r7, #20]
 801ec10:	4401      	add	r1, r0
 801ec12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ec16:	4313      	orrs	r3, r2
 801ec18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801ec1a:	79fb      	ldrb	r3, [r7, #7]
 801ec1c:	2b01      	cmp	r3, #1
 801ec1e:	d10d      	bne.n	801ec3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ec20:	68bb      	ldr	r3, [r7, #8]
 801ec22:	68db      	ldr	r3, [r3, #12]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d009      	beq.n	801ec3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ec28:	68bb      	ldr	r3, [r7, #8]
 801ec2a:	68d9      	ldr	r1, [r3, #12]
 801ec2c:	693b      	ldr	r3, [r7, #16]
 801ec2e:	015a      	lsls	r2, r3, #5
 801ec30:	697b      	ldr	r3, [r7, #20]
 801ec32:	4413      	add	r3, r2
 801ec34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec38:	460a      	mov	r2, r1
 801ec3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ec3c:	693b      	ldr	r3, [r7, #16]
 801ec3e:	015a      	lsls	r2, r3, #5
 801ec40:	697b      	ldr	r3, [r7, #20]
 801ec42:	4413      	add	r3, r2
 801ec44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	693a      	ldr	r2, [r7, #16]
 801ec4c:	0151      	lsls	r1, r2, #5
 801ec4e:	697a      	ldr	r2, [r7, #20]
 801ec50:	440a      	add	r2, r1
 801ec52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ec56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ec5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ec5c:	2300      	movs	r3, #0
}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	371c      	adds	r7, #28
 801ec62:	46bd      	mov	sp, r7
 801ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec68:	4770      	bx	lr

0801ec6a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ec6a:	b480      	push	{r7}
 801ec6c:	b089      	sub	sp, #36	; 0x24
 801ec6e:	af00      	add	r7, sp, #0
 801ec70:	60f8      	str	r0, [r7, #12]
 801ec72:	60b9      	str	r1, [r7, #8]
 801ec74:	4611      	mov	r1, r2
 801ec76:	461a      	mov	r2, r3
 801ec78:	460b      	mov	r3, r1
 801ec7a:	71fb      	strb	r3, [r7, #7]
 801ec7c:	4613      	mov	r3, r2
 801ec7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ec84:	68bb      	ldr	r3, [r7, #8]
 801ec86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ec88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d123      	bne.n	801ecd8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ec90:	88bb      	ldrh	r3, [r7, #4]
 801ec92:	3303      	adds	r3, #3
 801ec94:	089b      	lsrs	r3, r3, #2
 801ec96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ec98:	2300      	movs	r3, #0
 801ec9a:	61bb      	str	r3, [r7, #24]
 801ec9c:	e018      	b.n	801ecd0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ec9e:	79fb      	ldrb	r3, [r7, #7]
 801eca0:	031a      	lsls	r2, r3, #12
 801eca2:	697b      	ldr	r3, [r7, #20]
 801eca4:	4413      	add	r3, r2
 801eca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ecaa:	461a      	mov	r2, r3
 801ecac:	69fb      	ldr	r3, [r7, #28]
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ecb2:	69fb      	ldr	r3, [r7, #28]
 801ecb4:	3301      	adds	r3, #1
 801ecb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ecb8:	69fb      	ldr	r3, [r7, #28]
 801ecba:	3301      	adds	r3, #1
 801ecbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ecbe:	69fb      	ldr	r3, [r7, #28]
 801ecc0:	3301      	adds	r3, #1
 801ecc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ecc4:	69fb      	ldr	r3, [r7, #28]
 801ecc6:	3301      	adds	r3, #1
 801ecc8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ecca:	69bb      	ldr	r3, [r7, #24]
 801eccc:	3301      	adds	r3, #1
 801ecce:	61bb      	str	r3, [r7, #24]
 801ecd0:	69ba      	ldr	r2, [r7, #24]
 801ecd2:	693b      	ldr	r3, [r7, #16]
 801ecd4:	429a      	cmp	r2, r3
 801ecd6:	d3e2      	bcc.n	801ec9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ecd8:	2300      	movs	r3, #0
}
 801ecda:	4618      	mov	r0, r3
 801ecdc:	3724      	adds	r7, #36	; 0x24
 801ecde:	46bd      	mov	sp, r7
 801ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece4:	4770      	bx	lr

0801ece6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ece6:	b480      	push	{r7}
 801ece8:	b08b      	sub	sp, #44	; 0x2c
 801ecea:	af00      	add	r7, sp, #0
 801ecec:	60f8      	str	r0, [r7, #12]
 801ecee:	60b9      	str	r1, [r7, #8]
 801ecf0:	4613      	mov	r3, r2
 801ecf2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801ecf8:	68bb      	ldr	r3, [r7, #8]
 801ecfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801ecfc:	88fb      	ldrh	r3, [r7, #6]
 801ecfe:	089b      	lsrs	r3, r3, #2
 801ed00:	b29b      	uxth	r3, r3
 801ed02:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801ed04:	88fb      	ldrh	r3, [r7, #6]
 801ed06:	f003 0303 	and.w	r3, r3, #3
 801ed0a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	623b      	str	r3, [r7, #32]
 801ed10:	e014      	b.n	801ed3c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ed12:	69bb      	ldr	r3, [r7, #24]
 801ed14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ed18:	681a      	ldr	r2, [r3, #0]
 801ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed1c:	601a      	str	r2, [r3, #0]
    pDest++;
 801ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed20:	3301      	adds	r3, #1
 801ed22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed26:	3301      	adds	r3, #1
 801ed28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed2c:	3301      	adds	r3, #1
 801ed2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed32:	3301      	adds	r3, #1
 801ed34:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ed36:	6a3b      	ldr	r3, [r7, #32]
 801ed38:	3301      	adds	r3, #1
 801ed3a:	623b      	str	r3, [r7, #32]
 801ed3c:	6a3a      	ldr	r2, [r7, #32]
 801ed3e:	697b      	ldr	r3, [r7, #20]
 801ed40:	429a      	cmp	r2, r3
 801ed42:	d3e6      	bcc.n	801ed12 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ed44:	8bfb      	ldrh	r3, [r7, #30]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d01e      	beq.n	801ed88 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ed4a:	2300      	movs	r3, #0
 801ed4c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ed4e:	69bb      	ldr	r3, [r7, #24]
 801ed50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ed54:	461a      	mov	r2, r3
 801ed56:	f107 0310 	add.w	r3, r7, #16
 801ed5a:	6812      	ldr	r2, [r2, #0]
 801ed5c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ed5e:	693a      	ldr	r2, [r7, #16]
 801ed60:	6a3b      	ldr	r3, [r7, #32]
 801ed62:	b2db      	uxtb	r3, r3
 801ed64:	00db      	lsls	r3, r3, #3
 801ed66:	fa22 f303 	lsr.w	r3, r2, r3
 801ed6a:	b2da      	uxtb	r2, r3
 801ed6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed6e:	701a      	strb	r2, [r3, #0]
      i++;
 801ed70:	6a3b      	ldr	r3, [r7, #32]
 801ed72:	3301      	adds	r3, #1
 801ed74:	623b      	str	r3, [r7, #32]
      pDest++;
 801ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed78:	3301      	adds	r3, #1
 801ed7a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ed7c:	8bfb      	ldrh	r3, [r7, #30]
 801ed7e:	3b01      	subs	r3, #1
 801ed80:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ed82:	8bfb      	ldrh	r3, [r7, #30]
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	d1ea      	bne.n	801ed5e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ed8a:	4618      	mov	r0, r3
 801ed8c:	372c      	adds	r7, #44	; 0x2c
 801ed8e:	46bd      	mov	sp, r7
 801ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed94:	4770      	bx	lr

0801ed96 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ed96:	b480      	push	{r7}
 801ed98:	b085      	sub	sp, #20
 801ed9a:	af00      	add	r7, sp, #0
 801ed9c:	6078      	str	r0, [r7, #4]
 801ed9e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801eda4:	683b      	ldr	r3, [r7, #0]
 801eda6:	781b      	ldrb	r3, [r3, #0]
 801eda8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801edaa:	683b      	ldr	r3, [r7, #0]
 801edac:	785b      	ldrb	r3, [r3, #1]
 801edae:	2b01      	cmp	r3, #1
 801edb0:	d12c      	bne.n	801ee0c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801edb2:	68bb      	ldr	r3, [r7, #8]
 801edb4:	015a      	lsls	r2, r3, #5
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	4413      	add	r3, r2
 801edba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	db12      	blt.n	801edea <USB_EPSetStall+0x54>
 801edc4:	68bb      	ldr	r3, [r7, #8]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d00f      	beq.n	801edea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801edca:	68bb      	ldr	r3, [r7, #8]
 801edcc:	015a      	lsls	r2, r3, #5
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	4413      	add	r3, r2
 801edd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	68ba      	ldr	r2, [r7, #8]
 801edda:	0151      	lsls	r1, r2, #5
 801eddc:	68fa      	ldr	r2, [r7, #12]
 801edde:	440a      	add	r2, r1
 801ede0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ede4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ede8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801edea:	68bb      	ldr	r3, [r7, #8]
 801edec:	015a      	lsls	r2, r3, #5
 801edee:	68fb      	ldr	r3, [r7, #12]
 801edf0:	4413      	add	r3, r2
 801edf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801edf6:	681b      	ldr	r3, [r3, #0]
 801edf8:	68ba      	ldr	r2, [r7, #8]
 801edfa:	0151      	lsls	r1, r2, #5
 801edfc:	68fa      	ldr	r2, [r7, #12]
 801edfe:	440a      	add	r2, r1
 801ee00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ee08:	6013      	str	r3, [r2, #0]
 801ee0a:	e02b      	b.n	801ee64 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ee0c:	68bb      	ldr	r3, [r7, #8]
 801ee0e:	015a      	lsls	r2, r3, #5
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	4413      	add	r3, r2
 801ee14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	db12      	blt.n	801ee44 <USB_EPSetStall+0xae>
 801ee1e:	68bb      	ldr	r3, [r7, #8]
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d00f      	beq.n	801ee44 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ee24:	68bb      	ldr	r3, [r7, #8]
 801ee26:	015a      	lsls	r2, r3, #5
 801ee28:	68fb      	ldr	r3, [r7, #12]
 801ee2a:	4413      	add	r3, r2
 801ee2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	68ba      	ldr	r2, [r7, #8]
 801ee34:	0151      	lsls	r1, r2, #5
 801ee36:	68fa      	ldr	r2, [r7, #12]
 801ee38:	440a      	add	r2, r1
 801ee3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ee42:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ee44:	68bb      	ldr	r3, [r7, #8]
 801ee46:	015a      	lsls	r2, r3, #5
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	4413      	add	r3, r2
 801ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	68ba      	ldr	r2, [r7, #8]
 801ee54:	0151      	lsls	r1, r2, #5
 801ee56:	68fa      	ldr	r2, [r7, #12]
 801ee58:	440a      	add	r2, r1
 801ee5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ee5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ee62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ee64:	2300      	movs	r3, #0
}
 801ee66:	4618      	mov	r0, r3
 801ee68:	3714      	adds	r7, #20
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee70:	4770      	bx	lr

0801ee72 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ee72:	b480      	push	{r7}
 801ee74:	b085      	sub	sp, #20
 801ee76:	af00      	add	r7, sp, #0
 801ee78:	6078      	str	r0, [r7, #4]
 801ee7a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ee80:	683b      	ldr	r3, [r7, #0]
 801ee82:	781b      	ldrb	r3, [r3, #0]
 801ee84:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ee86:	683b      	ldr	r3, [r7, #0]
 801ee88:	785b      	ldrb	r3, [r3, #1]
 801ee8a:	2b01      	cmp	r3, #1
 801ee8c:	d128      	bne.n	801eee0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ee8e:	68bb      	ldr	r3, [r7, #8]
 801ee90:	015a      	lsls	r2, r3, #5
 801ee92:	68fb      	ldr	r3, [r7, #12]
 801ee94:	4413      	add	r3, r2
 801ee96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	68ba      	ldr	r2, [r7, #8]
 801ee9e:	0151      	lsls	r1, r2, #5
 801eea0:	68fa      	ldr	r2, [r7, #12]
 801eea2:	440a      	add	r2, r1
 801eea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eea8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eeac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eeae:	683b      	ldr	r3, [r7, #0]
 801eeb0:	78db      	ldrb	r3, [r3, #3]
 801eeb2:	2b03      	cmp	r3, #3
 801eeb4:	d003      	beq.n	801eebe <USB_EPClearStall+0x4c>
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	78db      	ldrb	r3, [r3, #3]
 801eeba:	2b02      	cmp	r3, #2
 801eebc:	d138      	bne.n	801ef30 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eebe:	68bb      	ldr	r3, [r7, #8]
 801eec0:	015a      	lsls	r2, r3, #5
 801eec2:	68fb      	ldr	r3, [r7, #12]
 801eec4:	4413      	add	r3, r2
 801eec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	68ba      	ldr	r2, [r7, #8]
 801eece:	0151      	lsls	r1, r2, #5
 801eed0:	68fa      	ldr	r2, [r7, #12]
 801eed2:	440a      	add	r2, r1
 801eed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eedc:	6013      	str	r3, [r2, #0]
 801eede:	e027      	b.n	801ef30 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801eee0:	68bb      	ldr	r3, [r7, #8]
 801eee2:	015a      	lsls	r2, r3, #5
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	4413      	add	r3, r2
 801eee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	68ba      	ldr	r2, [r7, #8]
 801eef0:	0151      	lsls	r1, r2, #5
 801eef2:	68fa      	ldr	r2, [r7, #12]
 801eef4:	440a      	add	r2, r1
 801eef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eefa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eefe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ef00:	683b      	ldr	r3, [r7, #0]
 801ef02:	78db      	ldrb	r3, [r3, #3]
 801ef04:	2b03      	cmp	r3, #3
 801ef06:	d003      	beq.n	801ef10 <USB_EPClearStall+0x9e>
 801ef08:	683b      	ldr	r3, [r7, #0]
 801ef0a:	78db      	ldrb	r3, [r3, #3]
 801ef0c:	2b02      	cmp	r3, #2
 801ef0e:	d10f      	bne.n	801ef30 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ef10:	68bb      	ldr	r3, [r7, #8]
 801ef12:	015a      	lsls	r2, r3, #5
 801ef14:	68fb      	ldr	r3, [r7, #12]
 801ef16:	4413      	add	r3, r2
 801ef18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef1c:	681b      	ldr	r3, [r3, #0]
 801ef1e:	68ba      	ldr	r2, [r7, #8]
 801ef20:	0151      	lsls	r1, r2, #5
 801ef22:	68fa      	ldr	r2, [r7, #12]
 801ef24:	440a      	add	r2, r1
 801ef26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ef2e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801ef30:	2300      	movs	r3, #0
}
 801ef32:	4618      	mov	r0, r3
 801ef34:	3714      	adds	r7, #20
 801ef36:	46bd      	mov	sp, r7
 801ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef3c:	4770      	bx	lr

0801ef3e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801ef3e:	b480      	push	{r7}
 801ef40:	b085      	sub	sp, #20
 801ef42:	af00      	add	r7, sp, #0
 801ef44:	6078      	str	r0, [r7, #4]
 801ef46:	460b      	mov	r3, r1
 801ef48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef54:	681b      	ldr	r3, [r3, #0]
 801ef56:	68fa      	ldr	r2, [r7, #12]
 801ef58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ef5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801ef60:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801ef62:	68fb      	ldr	r3, [r7, #12]
 801ef64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ef68:	681a      	ldr	r2, [r3, #0]
 801ef6a:	78fb      	ldrb	r3, [r7, #3]
 801ef6c:	011b      	lsls	r3, r3, #4
 801ef6e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801ef72:	68f9      	ldr	r1, [r7, #12]
 801ef74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ef78:	4313      	orrs	r3, r2
 801ef7a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801ef7c:	2300      	movs	r3, #0
}
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3714      	adds	r7, #20
 801ef82:	46bd      	mov	sp, r7
 801ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef88:	4770      	bx	lr

0801ef8a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801ef8a:	b480      	push	{r7}
 801ef8c:	b085      	sub	sp, #20
 801ef8e:	af00      	add	r7, sp, #0
 801ef90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	68fa      	ldr	r2, [r7, #12]
 801efa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801efa4:	f023 0303 	bic.w	r3, r3, #3
 801efa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801efb0:	685b      	ldr	r3, [r3, #4]
 801efb2:	68fa      	ldr	r2, [r7, #12]
 801efb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801efb8:	f023 0302 	bic.w	r3, r3, #2
 801efbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801efbe:	2300      	movs	r3, #0
}
 801efc0:	4618      	mov	r0, r3
 801efc2:	3714      	adds	r7, #20
 801efc4:	46bd      	mov	sp, r7
 801efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efca:	4770      	bx	lr

0801efcc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801efcc:	b480      	push	{r7}
 801efce:	b085      	sub	sp, #20
 801efd0:	af00      	add	r7, sp, #0
 801efd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801efd8:	68fb      	ldr	r3, [r7, #12]
 801efda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	68fa      	ldr	r2, [r7, #12]
 801efe2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801efe6:	f023 0303 	bic.w	r3, r3, #3
 801efea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801efec:	68fb      	ldr	r3, [r7, #12]
 801efee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eff2:	685b      	ldr	r3, [r3, #4]
 801eff4:	68fa      	ldr	r2, [r7, #12]
 801eff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801effa:	f043 0302 	orr.w	r3, r3, #2
 801effe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f000:	2300      	movs	r3, #0
}
 801f002:	4618      	mov	r0, r3
 801f004:	3714      	adds	r7, #20
 801f006:	46bd      	mov	sp, r7
 801f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f00c:	4770      	bx	lr

0801f00e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f00e:	b480      	push	{r7}
 801f010:	b085      	sub	sp, #20
 801f012:	af00      	add	r7, sp, #0
 801f014:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	695b      	ldr	r3, [r3, #20]
 801f01a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	699b      	ldr	r3, [r3, #24]
 801f020:	68fa      	ldr	r2, [r7, #12]
 801f022:	4013      	ands	r3, r2
 801f024:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f026:	68fb      	ldr	r3, [r7, #12]
}
 801f028:	4618      	mov	r0, r3
 801f02a:	3714      	adds	r7, #20
 801f02c:	46bd      	mov	sp, r7
 801f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f032:	4770      	bx	lr

0801f034 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f034:	b480      	push	{r7}
 801f036:	b085      	sub	sp, #20
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f040:	68fb      	ldr	r3, [r7, #12]
 801f042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f046:	699b      	ldr	r3, [r3, #24]
 801f048:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f050:	69db      	ldr	r3, [r3, #28]
 801f052:	68ba      	ldr	r2, [r7, #8]
 801f054:	4013      	ands	r3, r2
 801f056:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f058:	68bb      	ldr	r3, [r7, #8]
 801f05a:	0c1b      	lsrs	r3, r3, #16
}
 801f05c:	4618      	mov	r0, r3
 801f05e:	3714      	adds	r7, #20
 801f060:	46bd      	mov	sp, r7
 801f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f066:	4770      	bx	lr

0801f068 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f068:	b480      	push	{r7}
 801f06a:	b085      	sub	sp, #20
 801f06c:	af00      	add	r7, sp, #0
 801f06e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f07a:	699b      	ldr	r3, [r3, #24]
 801f07c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f07e:	68fb      	ldr	r3, [r7, #12]
 801f080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f084:	69db      	ldr	r3, [r3, #28]
 801f086:	68ba      	ldr	r2, [r7, #8]
 801f088:	4013      	ands	r3, r2
 801f08a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f08c:	68bb      	ldr	r3, [r7, #8]
 801f08e:	b29b      	uxth	r3, r3
}
 801f090:	4618      	mov	r0, r3
 801f092:	3714      	adds	r7, #20
 801f094:	46bd      	mov	sp, r7
 801f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f09a:	4770      	bx	lr

0801f09c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f09c:	b480      	push	{r7}
 801f09e:	b085      	sub	sp, #20
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
 801f0a4:	460b      	mov	r3, r1
 801f0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f0ac:	78fb      	ldrb	r3, [r7, #3]
 801f0ae:	015a      	lsls	r2, r3, #5
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	4413      	add	r3, r2
 801f0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f0b8:	689b      	ldr	r3, [r3, #8]
 801f0ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f0bc:	68fb      	ldr	r3, [r7, #12]
 801f0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0c2:	695b      	ldr	r3, [r3, #20]
 801f0c4:	68ba      	ldr	r2, [r7, #8]
 801f0c6:	4013      	ands	r3, r2
 801f0c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f0ca:	68bb      	ldr	r3, [r7, #8]
}
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	3714      	adds	r7, #20
 801f0d0:	46bd      	mov	sp, r7
 801f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0d6:	4770      	bx	lr

0801f0d8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f0d8:	b480      	push	{r7}
 801f0da:	b087      	sub	sp, #28
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	6078      	str	r0, [r7, #4]
 801f0e0:	460b      	mov	r3, r1
 801f0e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f0e8:	697b      	ldr	r3, [r7, #20]
 801f0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0ee:	691b      	ldr	r3, [r3, #16]
 801f0f0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f0f2:	697b      	ldr	r3, [r7, #20]
 801f0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f0fa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f0fc:	78fb      	ldrb	r3, [r7, #3]
 801f0fe:	f003 030f 	and.w	r3, r3, #15
 801f102:	68fa      	ldr	r2, [r7, #12]
 801f104:	fa22 f303 	lsr.w	r3, r2, r3
 801f108:	01db      	lsls	r3, r3, #7
 801f10a:	b2db      	uxtb	r3, r3
 801f10c:	693a      	ldr	r2, [r7, #16]
 801f10e:	4313      	orrs	r3, r2
 801f110:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f112:	78fb      	ldrb	r3, [r7, #3]
 801f114:	015a      	lsls	r2, r3, #5
 801f116:	697b      	ldr	r3, [r7, #20]
 801f118:	4413      	add	r3, r2
 801f11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f11e:	689b      	ldr	r3, [r3, #8]
 801f120:	693a      	ldr	r2, [r7, #16]
 801f122:	4013      	ands	r3, r2
 801f124:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f126:	68bb      	ldr	r3, [r7, #8]
}
 801f128:	4618      	mov	r0, r3
 801f12a:	371c      	adds	r7, #28
 801f12c:	46bd      	mov	sp, r7
 801f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f132:	4770      	bx	lr

0801f134 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f134:	b480      	push	{r7}
 801f136:	b083      	sub	sp, #12
 801f138:	af00      	add	r7, sp, #0
 801f13a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	695b      	ldr	r3, [r3, #20]
 801f140:	f003 0301 	and.w	r3, r3, #1
}
 801f144:	4618      	mov	r0, r3
 801f146:	370c      	adds	r7, #12
 801f148:	46bd      	mov	sp, r7
 801f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f14e:	4770      	bx	lr

0801f150 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f150:	b480      	push	{r7}
 801f152:	b085      	sub	sp, #20
 801f154:	af00      	add	r7, sp, #0
 801f156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	68fa      	ldr	r2, [r7, #12]
 801f166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f16a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f16e:	f023 0307 	bic.w	r3, r3, #7
 801f172:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f17a:	685b      	ldr	r3, [r3, #4]
 801f17c:	68fa      	ldr	r2, [r7, #12]
 801f17e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f186:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f188:	2300      	movs	r3, #0
}
 801f18a:	4618      	mov	r0, r3
 801f18c:	3714      	adds	r7, #20
 801f18e:	46bd      	mov	sp, r7
 801f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f194:	4770      	bx	lr
	...

0801f198 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f198:	b480      	push	{r7}
 801f19a:	b087      	sub	sp, #28
 801f19c:	af00      	add	r7, sp, #0
 801f19e:	60f8      	str	r0, [r7, #12]
 801f1a0:	460b      	mov	r3, r1
 801f1a2:	607a      	str	r2, [r7, #4]
 801f1a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f1aa:	68fb      	ldr	r3, [r7, #12]
 801f1ac:	333c      	adds	r3, #60	; 0x3c
 801f1ae:	3304      	adds	r3, #4
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f1b4:	693b      	ldr	r3, [r7, #16]
 801f1b6:	4a26      	ldr	r2, [pc, #152]	; (801f250 <USB_EP0_OutStart+0xb8>)
 801f1b8:	4293      	cmp	r3, r2
 801f1ba:	d90a      	bls.n	801f1d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f1bc:	697b      	ldr	r3, [r7, #20]
 801f1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f1c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f1cc:	d101      	bne.n	801f1d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	e037      	b.n	801f242 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f1d2:	697b      	ldr	r3, [r7, #20]
 801f1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1d8:	461a      	mov	r2, r3
 801f1da:	2300      	movs	r3, #0
 801f1dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f1de:	697b      	ldr	r3, [r7, #20]
 801f1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1e4:	691b      	ldr	r3, [r3, #16]
 801f1e6:	697a      	ldr	r2, [r7, #20]
 801f1e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f1ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f1f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f1f2:	697b      	ldr	r3, [r7, #20]
 801f1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1f8:	691b      	ldr	r3, [r3, #16]
 801f1fa:	697a      	ldr	r2, [r7, #20]
 801f1fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f200:	f043 0318 	orr.w	r3, r3, #24
 801f204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f206:	697b      	ldr	r3, [r7, #20]
 801f208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f20c:	691b      	ldr	r3, [r3, #16]
 801f20e:	697a      	ldr	r2, [r7, #20]
 801f210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f214:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f218:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f21a:	7afb      	ldrb	r3, [r7, #11]
 801f21c:	2b01      	cmp	r3, #1
 801f21e:	d10f      	bne.n	801f240 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f220:	697b      	ldr	r3, [r7, #20]
 801f222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f226:	461a      	mov	r2, r3
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f22c:	697b      	ldr	r3, [r7, #20]
 801f22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	697a      	ldr	r2, [r7, #20]
 801f236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f23a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f23e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f240:	2300      	movs	r3, #0
}
 801f242:	4618      	mov	r0, r3
 801f244:	371c      	adds	r7, #28
 801f246:	46bd      	mov	sp, r7
 801f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f24c:	4770      	bx	lr
 801f24e:	bf00      	nop
 801f250:	4f54300a 	.word	0x4f54300a

0801f254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f254:	b480      	push	{r7}
 801f256:	b085      	sub	sp, #20
 801f258:	af00      	add	r7, sp, #0
 801f25a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f25c:	2300      	movs	r3, #0
 801f25e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	3301      	adds	r3, #1
 801f264:	60fb      	str	r3, [r7, #12]
 801f266:	4a13      	ldr	r2, [pc, #76]	; (801f2b4 <USB_CoreReset+0x60>)
 801f268:	4293      	cmp	r3, r2
 801f26a:	d901      	bls.n	801f270 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 801f26c:	2303      	movs	r3, #3
 801f26e:	e01a      	b.n	801f2a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	691b      	ldr	r3, [r3, #16]
 801f274:	2b00      	cmp	r3, #0
 801f276:	daf3      	bge.n	801f260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f278:	2300      	movs	r3, #0
 801f27a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	691b      	ldr	r3, [r3, #16]
 801f280:	f043 0201 	orr.w	r2, r3, #1
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	3301      	adds	r3, #1
 801f28c:	60fb      	str	r3, [r7, #12]
 801f28e:	4a09      	ldr	r2, [pc, #36]	; (801f2b4 <USB_CoreReset+0x60>)
 801f290:	4293      	cmp	r3, r2
 801f292:	d901      	bls.n	801f298 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801f294:	2303      	movs	r3, #3
 801f296:	e006      	b.n	801f2a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	691b      	ldr	r3, [r3, #16]
 801f29c:	f003 0301 	and.w	r3, r3, #1
 801f2a0:	2b01      	cmp	r3, #1
 801f2a2:	d0f1      	beq.n	801f288 <USB_CoreReset+0x34>

  return HAL_OK;
 801f2a4:	2300      	movs	r3, #0
}
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	3714      	adds	r7, #20
 801f2aa:	46bd      	mov	sp, r7
 801f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b0:	4770      	bx	lr
 801f2b2:	bf00      	nop
 801f2b4:	00030d40 	.word	0x00030d40

0801f2b8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b084      	sub	sp, #16
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	6078      	str	r0, [r7, #4]
 801f2c0:	460b      	mov	r3, r1
 801f2c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f2c4:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f2c8:	f003 fc6e 	bl	8022ba8 <USBD_static_malloc>
 801f2cc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f2ce:	68fb      	ldr	r3, [r7, #12]
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	d105      	bne.n	801f2e0 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	2200      	movs	r2, #0
 801f2d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f2dc:	2302      	movs	r3, #2
 801f2de:	e034      	b.n	801f34a <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	68fa      	ldr	r2, [r7, #12]
 801f2e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	7c1b      	ldrb	r3, [r3, #16]
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d115      	bne.n	801f31c <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f2f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f2f4:	2202      	movs	r2, #2
 801f2f6:	2101      	movs	r1, #1
 801f2f8:	6878      	ldr	r0, [r7, #4]
 801f2fa:	f003 fac4 	bl	8022886 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	2201      	movs	r2, #1
 801f302:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f306:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f30a:	2202      	movs	r2, #2
 801f30c:	2181      	movs	r1, #129	; 0x81
 801f30e:	6878      	ldr	r0, [r7, #4]
 801f310:	f003 fab9 	bl	8022886 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	2201      	movs	r2, #1
 801f318:	871a      	strh	r2, [r3, #56]	; 0x38
 801f31a:	e012      	b.n	801f342 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f31c:	2340      	movs	r3, #64	; 0x40
 801f31e:	2202      	movs	r2, #2
 801f320:	2101      	movs	r1, #1
 801f322:	6878      	ldr	r0, [r7, #4]
 801f324:	f003 faaf 	bl	8022886 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	2201      	movs	r2, #1
 801f32c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f330:	2340      	movs	r3, #64	; 0x40
 801f332:	2202      	movs	r2, #2
 801f334:	2181      	movs	r1, #129	; 0x81
 801f336:	6878      	ldr	r0, [r7, #4]
 801f338:	f003 faa5 	bl	8022886 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	2201      	movs	r2, #1
 801f340:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f342:	6878      	ldr	r0, [r7, #4]
 801f344:	f000 f999 	bl	801f67a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f348:	2300      	movs	r3, #0
}
 801f34a:	4618      	mov	r0, r3
 801f34c:	3710      	adds	r7, #16
 801f34e:	46bd      	mov	sp, r7
 801f350:	bd80      	pop	{r7, pc}

0801f352 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f352:	b580      	push	{r7, lr}
 801f354:	b082      	sub	sp, #8
 801f356:	af00      	add	r7, sp, #0
 801f358:	6078      	str	r0, [r7, #4]
 801f35a:	460b      	mov	r3, r1
 801f35c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f35e:	2101      	movs	r1, #1
 801f360:	6878      	ldr	r0, [r7, #4]
 801f362:	f003 fab6 	bl	80228d2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	2200      	movs	r2, #0
 801f36a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f36e:	2181      	movs	r1, #129	; 0x81
 801f370:	6878      	ldr	r0, [r7, #4]
 801f372:	f003 faae 	bl	80228d2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	2200      	movs	r2, #0
 801f37a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f382:	2b00      	cmp	r3, #0
 801f384:	d00c      	beq.n	801f3a0 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f386:	6878      	ldr	r0, [r7, #4]
 801f388:	f000 f9d5 	bl	801f736 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f392:	4618      	mov	r0, r3
 801f394:	f003 fc16 	bl	8022bc4 <USBD_static_free>
    pdev->pClassData = NULL;
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	2200      	movs	r2, #0
 801f39c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f3a0:	2300      	movs	r3, #0
}
 801f3a2:	4618      	mov	r0, r3
 801f3a4:	3708      	adds	r7, #8
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	bd80      	pop	{r7, pc}
	...

0801f3ac <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f3ac:	b580      	push	{r7, lr}
 801f3ae:	b086      	sub	sp, #24
 801f3b0:	af00      	add	r7, sp, #0
 801f3b2:	6078      	str	r0, [r7, #4]
 801f3b4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f3bc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f3be:	2300      	movs	r3, #0
 801f3c0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f3c2:	2300      	movs	r3, #0
 801f3c4:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f3c6:	693b      	ldr	r3, [r7, #16]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d101      	bne.n	801f3d0 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f3cc:	2303      	movs	r3, #3
 801f3ce:	e0db      	b.n	801f588 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f3d0:	683b      	ldr	r3, [r7, #0]
 801f3d2:	781b      	ldrb	r3, [r3, #0]
 801f3d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d04e      	beq.n	801f47a <USBD_MSC_Setup+0xce>
 801f3dc:	2b20      	cmp	r3, #32
 801f3de:	f040 80cb 	bne.w	801f578 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f3e2:	683b      	ldr	r3, [r7, #0]
 801f3e4:	785b      	ldrb	r3, [r3, #1]
 801f3e6:	2bfe      	cmp	r3, #254	; 0xfe
 801f3e8:	d002      	beq.n	801f3f0 <USBD_MSC_Setup+0x44>
 801f3ea:	2bff      	cmp	r3, #255	; 0xff
 801f3ec:	d025      	beq.n	801f43a <USBD_MSC_Setup+0x8e>
 801f3ee:	e03c      	b.n	801f46a <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f3f0:	683b      	ldr	r3, [r7, #0]
 801f3f2:	885b      	ldrh	r3, [r3, #2]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d119      	bne.n	801f42c <USBD_MSC_Setup+0x80>
 801f3f8:	683b      	ldr	r3, [r7, #0]
 801f3fa:	88db      	ldrh	r3, [r3, #6]
 801f3fc:	2b01      	cmp	r3, #1
 801f3fe:	d115      	bne.n	801f42c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f400:	683b      	ldr	r3, [r7, #0]
 801f402:	781b      	ldrb	r3, [r3, #0]
 801f404:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f406:	2b00      	cmp	r3, #0
 801f408:	da10      	bge.n	801f42c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f410:	699b      	ldr	r3, [r3, #24]
 801f412:	4798      	blx	r3
 801f414:	4603      	mov	r3, r0
 801f416:	461a      	mov	r2, r3
 801f418:	693b      	ldr	r3, [r7, #16]
 801f41a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f41c:	693b      	ldr	r3, [r7, #16]
 801f41e:	2201      	movs	r2, #1
 801f420:	4619      	mov	r1, r3
 801f422:	6878      	ldr	r0, [r7, #4]
 801f424:	f002 fe3d 	bl	80220a2 <USBD_CtlSendData>
 801f428:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f42a:	e025      	b.n	801f478 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f42c:	6839      	ldr	r1, [r7, #0]
 801f42e:	6878      	ldr	r0, [r7, #4]
 801f430:	f002 fdc6 	bl	8021fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 801f434:	2303      	movs	r3, #3
 801f436:	75fb      	strb	r3, [r7, #23]
          break;
 801f438:	e01e      	b.n	801f478 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	885b      	ldrh	r3, [r3, #2]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d10c      	bne.n	801f45c <USBD_MSC_Setup+0xb0>
 801f442:	683b      	ldr	r3, [r7, #0]
 801f444:	88db      	ldrh	r3, [r3, #6]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d108      	bne.n	801f45c <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	781b      	ldrb	r3, [r3, #0]
 801f44e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f450:	2b00      	cmp	r3, #0
 801f452:	db03      	blt.n	801f45c <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f454:	6878      	ldr	r0, [r7, #4]
 801f456:	f000 f948 	bl	801f6ea <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f45a:	e00d      	b.n	801f478 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f45c:	6839      	ldr	r1, [r7, #0]
 801f45e:	6878      	ldr	r0, [r7, #4]
 801f460:	f002 fdae 	bl	8021fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 801f464:	2303      	movs	r3, #3
 801f466:	75fb      	strb	r3, [r7, #23]
          break;
 801f468:	e006      	b.n	801f478 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f46a:	6839      	ldr	r1, [r7, #0]
 801f46c:	6878      	ldr	r0, [r7, #4]
 801f46e:	f002 fda7 	bl	8021fc0 <USBD_CtlError>
          ret = USBD_FAIL;
 801f472:	2303      	movs	r3, #3
 801f474:	75fb      	strb	r3, [r7, #23]
          break;
 801f476:	bf00      	nop
      }
      break;
 801f478:	e085      	b.n	801f586 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	785b      	ldrb	r3, [r3, #1]
 801f47e:	2b0b      	cmp	r3, #11
 801f480:	d871      	bhi.n	801f566 <USBD_MSC_Setup+0x1ba>
 801f482:	a201      	add	r2, pc, #4	; (adr r2, 801f488 <USBD_MSC_Setup+0xdc>)
 801f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f488:	0801f4b9 	.word	0x0801f4b9
 801f48c:	0801f535 	.word	0x0801f535
 801f490:	0801f567 	.word	0x0801f567
 801f494:	0801f567 	.word	0x0801f567
 801f498:	0801f567 	.word	0x0801f567
 801f49c:	0801f567 	.word	0x0801f567
 801f4a0:	0801f567 	.word	0x0801f567
 801f4a4:	0801f567 	.word	0x0801f567
 801f4a8:	0801f567 	.word	0x0801f567
 801f4ac:	0801f567 	.word	0x0801f567
 801f4b0:	0801f4e3 	.word	0x0801f4e3
 801f4b4:	0801f50d 	.word	0x0801f50d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f4be:	b2db      	uxtb	r3, r3
 801f4c0:	2b03      	cmp	r3, #3
 801f4c2:	d107      	bne.n	801f4d4 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f4c4:	f107 030e 	add.w	r3, r7, #14
 801f4c8:	2202      	movs	r2, #2
 801f4ca:	4619      	mov	r1, r3
 801f4cc:	6878      	ldr	r0, [r7, #4]
 801f4ce:	f002 fde8 	bl	80220a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f4d2:	e050      	b.n	801f576 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f4d4:	6839      	ldr	r1, [r7, #0]
 801f4d6:	6878      	ldr	r0, [r7, #4]
 801f4d8:	f002 fd72 	bl	8021fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 801f4dc:	2303      	movs	r3, #3
 801f4de:	75fb      	strb	r3, [r7, #23]
          break;
 801f4e0:	e049      	b.n	801f576 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f4e8:	b2db      	uxtb	r3, r3
 801f4ea:	2b03      	cmp	r3, #3
 801f4ec:	d107      	bne.n	801f4fe <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f4ee:	693b      	ldr	r3, [r7, #16]
 801f4f0:	3304      	adds	r3, #4
 801f4f2:	2201      	movs	r2, #1
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	f002 fdd3 	bl	80220a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f4fc:	e03b      	b.n	801f576 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f4fe:	6839      	ldr	r1, [r7, #0]
 801f500:	6878      	ldr	r0, [r7, #4]
 801f502:	f002 fd5d 	bl	8021fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 801f506:	2303      	movs	r3, #3
 801f508:	75fb      	strb	r3, [r7, #23]
          break;
 801f50a:	e034      	b.n	801f576 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f512:	b2db      	uxtb	r3, r3
 801f514:	2b03      	cmp	r3, #3
 801f516:	d106      	bne.n	801f526 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f518:	683b      	ldr	r3, [r7, #0]
 801f51a:	885b      	ldrh	r3, [r3, #2]
 801f51c:	b2db      	uxtb	r3, r3
 801f51e:	461a      	mov	r2, r3
 801f520:	693b      	ldr	r3, [r7, #16]
 801f522:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f524:	e027      	b.n	801f576 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f526:	6839      	ldr	r1, [r7, #0]
 801f528:	6878      	ldr	r0, [r7, #4]
 801f52a:	f002 fd49 	bl	8021fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 801f52e:	2303      	movs	r3, #3
 801f530:	75fb      	strb	r3, [r7, #23]
          break;
 801f532:	e020      	b.n	801f576 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f53a:	b2db      	uxtb	r3, r3
 801f53c:	2b03      	cmp	r3, #3
 801f53e:	d119      	bne.n	801f574 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f540:	683b      	ldr	r3, [r7, #0]
 801f542:	885b      	ldrh	r3, [r3, #2]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d115      	bne.n	801f574 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f548:	683b      	ldr	r3, [r7, #0]
 801f54a:	889b      	ldrh	r3, [r3, #4]
 801f54c:	b2db      	uxtb	r3, r3
 801f54e:	4619      	mov	r1, r3
 801f550:	6878      	ldr	r0, [r7, #4]
 801f552:	f003 f9dd 	bl	8022910 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f556:	683b      	ldr	r3, [r7, #0]
 801f558:	889b      	ldrh	r3, [r3, #4]
 801f55a:	b2db      	uxtb	r3, r3
 801f55c:	4619      	mov	r1, r3
 801f55e:	6878      	ldr	r0, [r7, #4]
 801f560:	f000 fa82 	bl	801fa68 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f564:	e006      	b.n	801f574 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f566:	6839      	ldr	r1, [r7, #0]
 801f568:	6878      	ldr	r0, [r7, #4]
 801f56a:	f002 fd29 	bl	8021fc0 <USBD_CtlError>
          ret = USBD_FAIL;
 801f56e:	2303      	movs	r3, #3
 801f570:	75fb      	strb	r3, [r7, #23]
          break;
 801f572:	e000      	b.n	801f576 <USBD_MSC_Setup+0x1ca>
          break;
 801f574:	bf00      	nop
      }
      break;
 801f576:	e006      	b.n	801f586 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f578:	6839      	ldr	r1, [r7, #0]
 801f57a:	6878      	ldr	r0, [r7, #4]
 801f57c:	f002 fd20 	bl	8021fc0 <USBD_CtlError>
      ret = USBD_FAIL;
 801f580:	2303      	movs	r3, #3
 801f582:	75fb      	strb	r3, [r7, #23]
      break;
 801f584:	bf00      	nop
  }

  return (uint8_t)ret;
 801f586:	7dfb      	ldrb	r3, [r7, #23]
}
 801f588:	4618      	mov	r0, r3
 801f58a:	3718      	adds	r7, #24
 801f58c:	46bd      	mov	sp, r7
 801f58e:	bd80      	pop	{r7, pc}

0801f590 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f590:	b580      	push	{r7, lr}
 801f592:	b082      	sub	sp, #8
 801f594:	af00      	add	r7, sp, #0
 801f596:	6078      	str	r0, [r7, #4]
 801f598:	460b      	mov	r3, r1
 801f59a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f59c:	78fb      	ldrb	r3, [r7, #3]
 801f59e:	4619      	mov	r1, r3
 801f5a0:	6878      	ldr	r0, [r7, #4]
 801f5a2:	f000 f8dc 	bl	801f75e <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f5a6:	2300      	movs	r3, #0
}
 801f5a8:	4618      	mov	r0, r3
 801f5aa:	3708      	adds	r7, #8
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	bd80      	pop	{r7, pc}

0801f5b0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f5b0:	b580      	push	{r7, lr}
 801f5b2:	b082      	sub	sp, #8
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	6078      	str	r0, [r7, #4]
 801f5b8:	460b      	mov	r3, r1
 801f5ba:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f5bc:	78fb      	ldrb	r3, [r7, #3]
 801f5be:	4619      	mov	r1, r3
 801f5c0:	6878      	ldr	r0, [r7, #4]
 801f5c2:	f000 f902 	bl	801f7ca <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f5c6:	2300      	movs	r3, #0
}
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	3708      	adds	r7, #8
 801f5cc:	46bd      	mov	sp, r7
 801f5ce:	bd80      	pop	{r7, pc}

0801f5d0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f5d0:	b480      	push	{r7}
 801f5d2:	b083      	sub	sp, #12
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	2220      	movs	r2, #32
 801f5dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f5de:	4b03      	ldr	r3, [pc, #12]	; (801f5ec <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f5e0:	4618      	mov	r0, r3
 801f5e2:	370c      	adds	r7, #12
 801f5e4:	46bd      	mov	sp, r7
 801f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ea:	4770      	bx	lr
 801f5ec:	200005cc 	.word	0x200005cc

0801f5f0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f5f0:	b480      	push	{r7}
 801f5f2:	b083      	sub	sp, #12
 801f5f4:	af00      	add	r7, sp, #0
 801f5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	2220      	movs	r2, #32
 801f5fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f5fe:	4b03      	ldr	r3, [pc, #12]	; (801f60c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f600:	4618      	mov	r0, r3
 801f602:	370c      	adds	r7, #12
 801f604:	46bd      	mov	sp, r7
 801f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f60a:	4770      	bx	lr
 801f60c:	200005ec 	.word	0x200005ec

0801f610 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f610:	b480      	push	{r7}
 801f612:	b083      	sub	sp, #12
 801f614:	af00      	add	r7, sp, #0
 801f616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	2220      	movs	r2, #32
 801f61c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f61e:	4b03      	ldr	r3, [pc, #12]	; (801f62c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f620:	4618      	mov	r0, r3
 801f622:	370c      	adds	r7, #12
 801f624:	46bd      	mov	sp, r7
 801f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f62a:	4770      	bx	lr
 801f62c:	2000060c 	.word	0x2000060c

0801f630 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f630:	b480      	push	{r7}
 801f632:	b083      	sub	sp, #12
 801f634:	af00      	add	r7, sp, #0
 801f636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	220a      	movs	r2, #10
 801f63c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f63e:	4b03      	ldr	r3, [pc, #12]	; (801f64c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f640:	4618      	mov	r0, r3
 801f642:	370c      	adds	r7, #12
 801f644:	46bd      	mov	sp, r7
 801f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f64a:	4770      	bx	lr
 801f64c:	2000062c 	.word	0x2000062c

0801f650 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f650:	b480      	push	{r7}
 801f652:	b083      	sub	sp, #12
 801f654:	af00      	add	r7, sp, #0
 801f656:	6078      	str	r0, [r7, #4]
 801f658:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f65a:	683b      	ldr	r3, [r7, #0]
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	d101      	bne.n	801f664 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f660:	2303      	movs	r3, #3
 801f662:	e004      	b.n	801f66e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	683a      	ldr	r2, [r7, #0]
 801f668:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f66c:	2300      	movs	r3, #0
}
 801f66e:	4618      	mov	r0, r3
 801f670:	370c      	adds	r7, #12
 801f672:	46bd      	mov	sp, r7
 801f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f678:	4770      	bx	lr

0801f67a <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f67a:	b580      	push	{r7, lr}
 801f67c:	b084      	sub	sp, #16
 801f67e:	af00      	add	r7, sp, #0
 801f680:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f688:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f68a:	68fb      	ldr	r3, [r7, #12]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d028      	beq.n	801f6e2 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f690:	68fb      	ldr	r3, [r7, #12]
 801f692:	2200      	movs	r2, #0
 801f694:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	2200      	movs	r2, #0
 801f69a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	2200      	movs	r2, #0
 801f6a0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f6a4:	68fb      	ldr	r3, [r7, #12]
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	2200      	movs	r2, #0
 801f6b0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f6ba:	681b      	ldr	r3, [r3, #0]
 801f6bc:	2000      	movs	r0, #0
 801f6be:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f6c0:	2101      	movs	r1, #1
 801f6c2:	6878      	ldr	r0, [r7, #4]
 801f6c4:	f003 f924 	bl	8022910 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f6c8:	2181      	movs	r1, #129	; 0x81
 801f6ca:	6878      	ldr	r0, [r7, #4]
 801f6cc:	f003 f920 	bl	8022910 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f6d0:	68fb      	ldr	r3, [r7, #12]
 801f6d2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f6d6:	231f      	movs	r3, #31
 801f6d8:	2101      	movs	r1, #1
 801f6da:	6878      	ldr	r0, [r7, #4]
 801f6dc:	f003 f9e1 	bl	8022aa2 <USBD_LL_PrepareReceive>
 801f6e0:	e000      	b.n	801f6e4 <MSC_BOT_Init+0x6a>
    return;
 801f6e2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f6e4:	3710      	adds	r7, #16
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}

0801f6ea <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f6ea:	b580      	push	{r7, lr}
 801f6ec:	b084      	sub	sp, #16
 801f6ee:	af00      	add	r7, sp, #0
 801f6f0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f6f8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f6fa:	68fb      	ldr	r3, [r7, #12]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d016      	beq.n	801f72e <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f700:	68fb      	ldr	r3, [r7, #12]
 801f702:	2200      	movs	r2, #0
 801f704:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f706:	68fb      	ldr	r3, [r7, #12]
 801f708:	2201      	movs	r2, #1
 801f70a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f70c:	2181      	movs	r1, #129	; 0x81
 801f70e:	6878      	ldr	r0, [r7, #4]
 801f710:	f003 f93c 	bl	802298c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f714:	2101      	movs	r1, #1
 801f716:	6878      	ldr	r0, [r7, #4]
 801f718:	f003 f938 	bl	802298c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f722:	231f      	movs	r3, #31
 801f724:	2101      	movs	r1, #1
 801f726:	6878      	ldr	r0, [r7, #4]
 801f728:	f003 f9bb 	bl	8022aa2 <USBD_LL_PrepareReceive>
 801f72c:	e000      	b.n	801f730 <MSC_BOT_Reset+0x46>
    return;
 801f72e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f730:	3710      	adds	r7, #16
 801f732:	46bd      	mov	sp, r7
 801f734:	bd80      	pop	{r7, pc}

0801f736 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f736:	b480      	push	{r7}
 801f738:	b085      	sub	sp, #20
 801f73a:	af00      	add	r7, sp, #0
 801f73c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f744:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f746:	68fb      	ldr	r3, [r7, #12]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d002      	beq.n	801f752 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	2200      	movs	r2, #0
 801f750:	721a      	strb	r2, [r3, #8]
  }
}
 801f752:	bf00      	nop
 801f754:	3714      	adds	r7, #20
 801f756:	46bd      	mov	sp, r7
 801f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f75c:	4770      	bx	lr

0801f75e <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f75e:	b580      	push	{r7, lr}
 801f760:	b084      	sub	sp, #16
 801f762:	af00      	add	r7, sp, #0
 801f764:	6078      	str	r0, [r7, #4]
 801f766:	460b      	mov	r3, r1
 801f768:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f76a:	687b      	ldr	r3, [r7, #4]
 801f76c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f770:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f772:	68fb      	ldr	r3, [r7, #12]
 801f774:	2b00      	cmp	r3, #0
 801f776:	d020      	beq.n	801f7ba <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	7a1b      	ldrb	r3, [r3, #8]
 801f77c:	2b02      	cmp	r3, #2
 801f77e:	d005      	beq.n	801f78c <MSC_BOT_DataIn+0x2e>
 801f780:	2b02      	cmp	r3, #2
 801f782:	db1c      	blt.n	801f7be <MSC_BOT_DataIn+0x60>
 801f784:	3b03      	subs	r3, #3
 801f786:	2b01      	cmp	r3, #1
 801f788:	d819      	bhi.n	801f7be <MSC_BOT_DataIn+0x60>
 801f78a:	e011      	b.n	801f7b0 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f78c:	68fb      	ldr	r3, [r7, #12]
 801f78e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f792:	68fb      	ldr	r3, [r7, #12]
 801f794:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f798:	461a      	mov	r2, r3
 801f79a:	6878      	ldr	r0, [r7, #4]
 801f79c:	f000 f992 	bl	801fac4 <SCSI_ProcessCmd>
 801f7a0:	4603      	mov	r3, r0
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	da0d      	bge.n	801f7c2 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f7a6:	2101      	movs	r1, #1
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f000 f8fb 	bl	801f9a4 <MSC_BOT_SendCSW>
      }
      break;
 801f7ae:	e008      	b.n	801f7c2 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f7b0:	2100      	movs	r1, #0
 801f7b2:	6878      	ldr	r0, [r7, #4]
 801f7b4:	f000 f8f6 	bl	801f9a4 <MSC_BOT_SendCSW>
      break;
 801f7b8:	e004      	b.n	801f7c4 <MSC_BOT_DataIn+0x66>
    return;
 801f7ba:	bf00      	nop
 801f7bc:	e002      	b.n	801f7c4 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f7be:	bf00      	nop
 801f7c0:	e000      	b.n	801f7c4 <MSC_BOT_DataIn+0x66>
      break;
 801f7c2:	bf00      	nop
  }
}
 801f7c4:	3710      	adds	r7, #16
 801f7c6:	46bd      	mov	sp, r7
 801f7c8:	bd80      	pop	{r7, pc}

0801f7ca <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f7ca:	b580      	push	{r7, lr}
 801f7cc:	b084      	sub	sp, #16
 801f7ce:	af00      	add	r7, sp, #0
 801f7d0:	6078      	str	r0, [r7, #4]
 801f7d2:	460b      	mov	r3, r1
 801f7d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f7dc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d01c      	beq.n	801f81e <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	7a1b      	ldrb	r3, [r3, #8]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d002      	beq.n	801f7f2 <MSC_BOT_DataOut+0x28>
 801f7ec:	2b01      	cmp	r3, #1
 801f7ee:	d004      	beq.n	801f7fa <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f7f0:	e018      	b.n	801f824 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f7f2:	6878      	ldr	r0, [r7, #4]
 801f7f4:	f000 f81a 	bl	801f82c <MSC_BOT_CBW_Decode>
      break;
 801f7f8:	e014      	b.n	801f824 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f806:	461a      	mov	r2, r3
 801f808:	6878      	ldr	r0, [r7, #4]
 801f80a:	f000 f95b 	bl	801fac4 <SCSI_ProcessCmd>
 801f80e:	4603      	mov	r3, r0
 801f810:	2b00      	cmp	r3, #0
 801f812:	da06      	bge.n	801f822 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f814:	2101      	movs	r1, #1
 801f816:	6878      	ldr	r0, [r7, #4]
 801f818:	f000 f8c4 	bl	801f9a4 <MSC_BOT_SendCSW>
      break;
 801f81c:	e001      	b.n	801f822 <MSC_BOT_DataOut+0x58>
    return;
 801f81e:	bf00      	nop
 801f820:	e000      	b.n	801f824 <MSC_BOT_DataOut+0x5a>
      break;
 801f822:	bf00      	nop
  }
}
 801f824:	3710      	adds	r7, #16
 801f826:	46bd      	mov	sp, r7
 801f828:	bd80      	pop	{r7, pc}
	...

0801f82c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f82c:	b580      	push	{r7, lr}
 801f82e:	b084      	sub	sp, #16
 801f830:	af00      	add	r7, sp, #0
 801f832:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f83a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f83c:	68fb      	ldr	r3, [r7, #12]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d077      	beq.n	801f932 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f842:	68fb      	ldr	r3, [r7, #12]
 801f844:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f85a:	2101      	movs	r1, #1
 801f85c:	6878      	ldr	r0, [r7, #4]
 801f85e:	f003 f941 	bl	8022ae4 <USBD_LL_GetRxDataSize>
 801f862:	4603      	mov	r3, r0
 801f864:	2b1f      	cmp	r3, #31
 801f866:	d114      	bne.n	801f892 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f868:	68fb      	ldr	r3, [r7, #12]
 801f86a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f86e:	4a34      	ldr	r2, [pc, #208]	; (801f940 <MSC_BOT_CBW_Decode+0x114>)
 801f870:	4293      	cmp	r3, r2
 801f872:	d10e      	bne.n	801f892 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f87a:	2b01      	cmp	r3, #1
 801f87c:	d809      	bhi.n	801f892 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f884:	2b00      	cmp	r3, #0
 801f886:	d004      	beq.n	801f892 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f88e:	2b10      	cmp	r3, #16
 801f890:	d90e      	bls.n	801f8b0 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f898:	2320      	movs	r3, #32
 801f89a:	2205      	movs	r2, #5
 801f89c:	6878      	ldr	r0, [r7, #4]
 801f89e:	f000 fdbc 	bl	802041a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f8a2:	68fb      	ldr	r3, [r7, #12]
 801f8a4:	2202      	movs	r2, #2
 801f8a6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f8a8:	6878      	ldr	r0, [r7, #4]
 801f8aa:	f000 f8ab 	bl	801fa04 <MSC_BOT_Abort>
 801f8ae:	e043      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f8b0:	68fb      	ldr	r3, [r7, #12]
 801f8b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f8bc:	461a      	mov	r2, r3
 801f8be:	6878      	ldr	r0, [r7, #4]
 801f8c0:	f000 f900 	bl	801fac4 <SCSI_ProcessCmd>
 801f8c4:	4603      	mov	r3, r0
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	da0c      	bge.n	801f8e4 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f8ca:	68fb      	ldr	r3, [r7, #12]
 801f8cc:	7a1b      	ldrb	r3, [r3, #8]
 801f8ce:	2b05      	cmp	r3, #5
 801f8d0:	d104      	bne.n	801f8dc <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f8d2:	2101      	movs	r1, #1
 801f8d4:	6878      	ldr	r0, [r7, #4]
 801f8d6:	f000 f865 	bl	801f9a4 <MSC_BOT_SendCSW>
 801f8da:	e02d      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f8dc:	6878      	ldr	r0, [r7, #4]
 801f8de:	f000 f891 	bl	801fa04 <MSC_BOT_Abort>
 801f8e2:	e029      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	7a1b      	ldrb	r3, [r3, #8]
 801f8e8:	2b02      	cmp	r3, #2
 801f8ea:	d024      	beq.n	801f936 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f8f0:	2b01      	cmp	r3, #1
 801f8f2:	d020      	beq.n	801f936 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f8f8:	2b03      	cmp	r3, #3
 801f8fa:	d01c      	beq.n	801f936 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	68db      	ldr	r3, [r3, #12]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d009      	beq.n	801f918 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f904:	68fb      	ldr	r3, [r7, #12]
 801f906:	f103 0110 	add.w	r1, r3, #16
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	68db      	ldr	r3, [r3, #12]
 801f90e:	461a      	mov	r2, r3
 801f910:	6878      	ldr	r0, [r7, #4]
 801f912:	f000 f817 	bl	801f944 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f916:	e00f      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f918:	68fb      	ldr	r3, [r7, #12]
 801f91a:	68db      	ldr	r3, [r3, #12]
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d104      	bne.n	801f92a <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f920:	2100      	movs	r1, #0
 801f922:	6878      	ldr	r0, [r7, #4]
 801f924:	f000 f83e 	bl	801f9a4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f928:	e006      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f000 f86a 	bl	801fa04 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f930:	e002      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f932:	bf00      	nop
 801f934:	e000      	b.n	801f938 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f936:	bf00      	nop
    }
  }
}
 801f938:	3710      	adds	r7, #16
 801f93a:	46bd      	mov	sp, r7
 801f93c:	bd80      	pop	{r7, pc}
 801f93e:	bf00      	nop
 801f940:	43425355 	.word	0x43425355

0801f944 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801f944:	b580      	push	{r7, lr}
 801f946:	b086      	sub	sp, #24
 801f948:	af00      	add	r7, sp, #0
 801f94a:	60f8      	str	r0, [r7, #12]
 801f94c:	60b9      	str	r1, [r7, #8]
 801f94e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f956:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801f958:	697b      	ldr	r3, [r7, #20]
 801f95a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801f95e:	687a      	ldr	r2, [r7, #4]
 801f960:	4293      	cmp	r3, r2
 801f962:	bf28      	it	cs
 801f964:	4613      	movcs	r3, r2
 801f966:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801f968:	697b      	ldr	r3, [r7, #20]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d015      	beq.n	801f99a <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801f96e:	697b      	ldr	r3, [r7, #20]
 801f970:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	1ad2      	subs	r2, r2, r3
 801f978:	697b      	ldr	r3, [r7, #20]
 801f97a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	2200      	movs	r2, #0
 801f982:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801f986:	697b      	ldr	r3, [r7, #20]
 801f988:	2204      	movs	r2, #4
 801f98a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801f98c:	693b      	ldr	r3, [r7, #16]
 801f98e:	68ba      	ldr	r2, [r7, #8]
 801f990:	2181      	movs	r1, #129	; 0x81
 801f992:	68f8      	ldr	r0, [r7, #12]
 801f994:	f003 f864 	bl	8022a60 <USBD_LL_Transmit>
 801f998:	e000      	b.n	801f99c <MSC_BOT_SendData+0x58>
    return;
 801f99a:	bf00      	nop
}
 801f99c:	3718      	adds	r7, #24
 801f99e:	46bd      	mov	sp, r7
 801f9a0:	bd80      	pop	{r7, pc}
	...

0801f9a4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801f9a4:	b580      	push	{r7, lr}
 801f9a6:	b084      	sub	sp, #16
 801f9a8:	af00      	add	r7, sp, #0
 801f9aa:	6078      	str	r0, [r7, #4]
 801f9ac:	460b      	mov	r3, r1
 801f9ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f9b6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f9b8:	68fb      	ldr	r3, [r7, #12]
 801f9ba:	2b00      	cmp	r3, #0
 801f9bc:	d01b      	beq.n	801f9f6 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	4a0f      	ldr	r2, [pc, #60]	; (801fa00 <MSC_BOT_SendCSW+0x5c>)
 801f9c2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	78fa      	ldrb	r2, [r7, #3]
 801f9ca:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801f9ce:	68fb      	ldr	r3, [r7, #12]
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801f9da:	230d      	movs	r3, #13
 801f9dc:	2181      	movs	r1, #129	; 0x81
 801f9de:	6878      	ldr	r0, [r7, #4]
 801f9e0:	f003 f83e 	bl	8022a60 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f9ea:	231f      	movs	r3, #31
 801f9ec:	2101      	movs	r1, #1
 801f9ee:	6878      	ldr	r0, [r7, #4]
 801f9f0:	f003 f857 	bl	8022aa2 <USBD_LL_PrepareReceive>
 801f9f4:	e000      	b.n	801f9f8 <MSC_BOT_SendCSW+0x54>
    return;
 801f9f6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f9f8:	3710      	adds	r7, #16
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	bd80      	pop	{r7, pc}
 801f9fe:	bf00      	nop
 801fa00:	53425355 	.word	0x53425355

0801fa04 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801fa04:	b580      	push	{r7, lr}
 801fa06:	b084      	sub	sp, #16
 801fa08:	af00      	add	r7, sp, #0
 801fa0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa12:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d022      	beq.n	801fa60 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d10c      	bne.n	801fa3e <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801fa24:	68fb      	ldr	r3, [r7, #12]
 801fa26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d007      	beq.n	801fa3e <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801fa2e:	68fb      	ldr	r3, [r7, #12]
 801fa30:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	d103      	bne.n	801fa3e <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fa36:	2101      	movs	r1, #1
 801fa38:	6878      	ldr	r0, [r7, #4]
 801fa3a:	f002 ff88 	bl	802294e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fa3e:	2181      	movs	r1, #129	; 0x81
 801fa40:	6878      	ldr	r0, [r7, #4]
 801fa42:	f002 ff84 	bl	802294e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	7a5b      	ldrb	r3, [r3, #9]
 801fa4a:	2b02      	cmp	r3, #2
 801fa4c:	d109      	bne.n	801fa62 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fa4e:	2181      	movs	r1, #129	; 0x81
 801fa50:	6878      	ldr	r0, [r7, #4]
 801fa52:	f002 ff7c 	bl	802294e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fa56:	2101      	movs	r1, #1
 801fa58:	6878      	ldr	r0, [r7, #4]
 801fa5a:	f002 ff78 	bl	802294e <USBD_LL_StallEP>
 801fa5e:	e000      	b.n	801fa62 <MSC_BOT_Abort+0x5e>
    return;
 801fa60:	bf00      	nop
  }
}
 801fa62:	3710      	adds	r7, #16
 801fa64:	46bd      	mov	sp, r7
 801fa66:	bd80      	pop	{r7, pc}

0801fa68 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fa68:	b580      	push	{r7, lr}
 801fa6a:	b084      	sub	sp, #16
 801fa6c:	af00      	add	r7, sp, #0
 801fa6e:	6078      	str	r0, [r7, #4]
 801fa70:	460b      	mov	r3, r1
 801fa72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa7a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa7c:	68fb      	ldr	r3, [r7, #12]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d019      	beq.n	801fab6 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fa82:	68fb      	ldr	r3, [r7, #12]
 801fa84:	7a5b      	ldrb	r3, [r3, #9]
 801fa86:	2b02      	cmp	r3, #2
 801fa88:	d108      	bne.n	801fa9c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fa8a:	2181      	movs	r1, #129	; 0x81
 801fa8c:	6878      	ldr	r0, [r7, #4]
 801fa8e:	f002 ff5e 	bl	802294e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fa92:	2101      	movs	r1, #1
 801fa94:	6878      	ldr	r0, [r7, #4]
 801fa96:	f002 ff5a 	bl	802294e <USBD_LL_StallEP>
 801fa9a:	e00f      	b.n	801fabc <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fa9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	da0a      	bge.n	801faba <MSC_BOT_CplClrFeature+0x52>
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	7a5b      	ldrb	r3, [r3, #9]
 801faa8:	2b01      	cmp	r3, #1
 801faaa:	d006      	beq.n	801faba <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801faac:	2101      	movs	r1, #1
 801faae:	6878      	ldr	r0, [r7, #4]
 801fab0:	f7ff ff78 	bl	801f9a4 <MSC_BOT_SendCSW>
 801fab4:	e002      	b.n	801fabc <MSC_BOT_CplClrFeature+0x54>
    return;
 801fab6:	bf00      	nop
 801fab8:	e000      	b.n	801fabc <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801faba:	bf00      	nop
  }
}
 801fabc:	3710      	adds	r7, #16
 801fabe:	46bd      	mov	sp, r7
 801fac0:	bd80      	pop	{r7, pc}
	...

0801fac4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fac4:	b580      	push	{r7, lr}
 801fac6:	b086      	sub	sp, #24
 801fac8:	af00      	add	r7, sp, #0
 801faca:	60f8      	str	r0, [r7, #12]
 801facc:	460b      	mov	r3, r1
 801face:	607a      	str	r2, [r7, #4]
 801fad0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fad2:	68fb      	ldr	r3, [r7, #12]
 801fad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fad8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fada:	693b      	ldr	r3, [r7, #16]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d102      	bne.n	801fae6 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fae0:	f04f 33ff 	mov.w	r3, #4294967295
 801fae4:	e168      	b.n	801fdb8 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	781b      	ldrb	r3, [r3, #0]
 801faea:	2baa      	cmp	r3, #170	; 0xaa
 801faec:	f000 8144 	beq.w	801fd78 <SCSI_ProcessCmd+0x2b4>
 801faf0:	2baa      	cmp	r3, #170	; 0xaa
 801faf2:	f300 8153 	bgt.w	801fd9c <SCSI_ProcessCmd+0x2d8>
 801faf6:	2ba8      	cmp	r3, #168	; 0xa8
 801faf8:	f000 812c 	beq.w	801fd54 <SCSI_ProcessCmd+0x290>
 801fafc:	2ba8      	cmp	r3, #168	; 0xa8
 801fafe:	f300 814d 	bgt.w	801fd9c <SCSI_ProcessCmd+0x2d8>
 801fb02:	2b5a      	cmp	r3, #90	; 0x5a
 801fb04:	f300 80c0 	bgt.w	801fc88 <SCSI_ProcessCmd+0x1c4>
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	f2c0 8147 	blt.w	801fd9c <SCSI_ProcessCmd+0x2d8>
 801fb0e:	2b5a      	cmp	r3, #90	; 0x5a
 801fb10:	f200 8144 	bhi.w	801fd9c <SCSI_ProcessCmd+0x2d8>
 801fb14:	a201      	add	r2, pc, #4	; (adr r2, 801fb1c <SCSI_ProcessCmd+0x58>)
 801fb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb1a:	bf00      	nop
 801fb1c:	0801fc8f 	.word	0x0801fc8f
 801fb20:	0801fd9d 	.word	0x0801fd9d
 801fb24:	0801fd9d 	.word	0x0801fd9d
 801fb28:	0801fca1 	.word	0x0801fca1
 801fb2c:	0801fd9d 	.word	0x0801fd9d
 801fb30:	0801fd9d 	.word	0x0801fd9d
 801fb34:	0801fd9d 	.word	0x0801fd9d
 801fb38:	0801fd9d 	.word	0x0801fd9d
 801fb3c:	0801fd9d 	.word	0x0801fd9d
 801fb40:	0801fd9d 	.word	0x0801fd9d
 801fb44:	0801fd9d 	.word	0x0801fd9d
 801fb48:	0801fd9d 	.word	0x0801fd9d
 801fb4c:	0801fd9d 	.word	0x0801fd9d
 801fb50:	0801fd9d 	.word	0x0801fd9d
 801fb54:	0801fd9d 	.word	0x0801fd9d
 801fb58:	0801fd9d 	.word	0x0801fd9d
 801fb5c:	0801fd9d 	.word	0x0801fd9d
 801fb60:	0801fd9d 	.word	0x0801fd9d
 801fb64:	0801fcb3 	.word	0x0801fcb3
 801fb68:	0801fd9d 	.word	0x0801fd9d
 801fb6c:	0801fd9d 	.word	0x0801fd9d
 801fb70:	0801fd9d 	.word	0x0801fd9d
 801fb74:	0801fd9d 	.word	0x0801fd9d
 801fb78:	0801fd9d 	.word	0x0801fd9d
 801fb7c:	0801fd9d 	.word	0x0801fd9d
 801fb80:	0801fd9d 	.word	0x0801fd9d
 801fb84:	0801fce9 	.word	0x0801fce9
 801fb88:	0801fcc5 	.word	0x0801fcc5
 801fb8c:	0801fd9d 	.word	0x0801fd9d
 801fb90:	0801fd9d 	.word	0x0801fd9d
 801fb94:	0801fcd7 	.word	0x0801fcd7
 801fb98:	0801fd9d 	.word	0x0801fd9d
 801fb9c:	0801fd9d 	.word	0x0801fd9d
 801fba0:	0801fd9d 	.word	0x0801fd9d
 801fba4:	0801fd9d 	.word	0x0801fd9d
 801fba8:	0801fd0d 	.word	0x0801fd0d
 801fbac:	0801fd9d 	.word	0x0801fd9d
 801fbb0:	0801fd1f 	.word	0x0801fd1f
 801fbb4:	0801fd9d 	.word	0x0801fd9d
 801fbb8:	0801fd9d 	.word	0x0801fd9d
 801fbbc:	0801fd43 	.word	0x0801fd43
 801fbc0:	0801fd9d 	.word	0x0801fd9d
 801fbc4:	0801fd67 	.word	0x0801fd67
 801fbc8:	0801fd9d 	.word	0x0801fd9d
 801fbcc:	0801fd9d 	.word	0x0801fd9d
 801fbd0:	0801fd9d 	.word	0x0801fd9d
 801fbd4:	0801fd9d 	.word	0x0801fd9d
 801fbd8:	0801fd8b 	.word	0x0801fd8b
 801fbdc:	0801fd9d 	.word	0x0801fd9d
 801fbe0:	0801fd9d 	.word	0x0801fd9d
 801fbe4:	0801fd9d 	.word	0x0801fd9d
 801fbe8:	0801fd9d 	.word	0x0801fd9d
 801fbec:	0801fd9d 	.word	0x0801fd9d
 801fbf0:	0801fd9d 	.word	0x0801fd9d
 801fbf4:	0801fd9d 	.word	0x0801fd9d
 801fbf8:	0801fd9d 	.word	0x0801fd9d
 801fbfc:	0801fd9d 	.word	0x0801fd9d
 801fc00:	0801fd9d 	.word	0x0801fd9d
 801fc04:	0801fd9d 	.word	0x0801fd9d
 801fc08:	0801fd9d 	.word	0x0801fd9d
 801fc0c:	0801fd9d 	.word	0x0801fd9d
 801fc10:	0801fd9d 	.word	0x0801fd9d
 801fc14:	0801fd9d 	.word	0x0801fd9d
 801fc18:	0801fd9d 	.word	0x0801fd9d
 801fc1c:	0801fd9d 	.word	0x0801fd9d
 801fc20:	0801fd9d 	.word	0x0801fd9d
 801fc24:	0801fd9d 	.word	0x0801fd9d
 801fc28:	0801fd9d 	.word	0x0801fd9d
 801fc2c:	0801fd9d 	.word	0x0801fd9d
 801fc30:	0801fd9d 	.word	0x0801fd9d
 801fc34:	0801fd9d 	.word	0x0801fd9d
 801fc38:	0801fd9d 	.word	0x0801fd9d
 801fc3c:	0801fd9d 	.word	0x0801fd9d
 801fc40:	0801fd9d 	.word	0x0801fd9d
 801fc44:	0801fd9d 	.word	0x0801fd9d
 801fc48:	0801fd9d 	.word	0x0801fd9d
 801fc4c:	0801fd9d 	.word	0x0801fd9d
 801fc50:	0801fd9d 	.word	0x0801fd9d
 801fc54:	0801fd9d 	.word	0x0801fd9d
 801fc58:	0801fd9d 	.word	0x0801fd9d
 801fc5c:	0801fd9d 	.word	0x0801fd9d
 801fc60:	0801fd9d 	.word	0x0801fd9d
 801fc64:	0801fd9d 	.word	0x0801fd9d
 801fc68:	0801fd9d 	.word	0x0801fd9d
 801fc6c:	0801fd9d 	.word	0x0801fd9d
 801fc70:	0801fd9d 	.word	0x0801fd9d
 801fc74:	0801fd9d 	.word	0x0801fd9d
 801fc78:	0801fd9d 	.word	0x0801fd9d
 801fc7c:	0801fd9d 	.word	0x0801fd9d
 801fc80:	0801fd9d 	.word	0x0801fd9d
 801fc84:	0801fcfb 	.word	0x0801fcfb
 801fc88:	2b9e      	cmp	r3, #158	; 0x9e
 801fc8a:	d051      	beq.n	801fd30 <SCSI_ProcessCmd+0x26c>
 801fc8c:	e086      	b.n	801fd9c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fc8e:	7afb      	ldrb	r3, [r7, #11]
 801fc90:	687a      	ldr	r2, [r7, #4]
 801fc92:	4619      	mov	r1, r3
 801fc94:	68f8      	ldr	r0, [r7, #12]
 801fc96:	f000 f893 	bl	801fdc0 <SCSI_TestUnitReady>
 801fc9a:	4603      	mov	r3, r0
 801fc9c:	75fb      	strb	r3, [r7, #23]
      break;
 801fc9e:	e089      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fca0:	7afb      	ldrb	r3, [r7, #11]
 801fca2:	687a      	ldr	r2, [r7, #4]
 801fca4:	4619      	mov	r1, r3
 801fca6:	68f8      	ldr	r0, [r7, #12]
 801fca8:	f000 fb38 	bl	802031c <SCSI_RequestSense>
 801fcac:	4603      	mov	r3, r0
 801fcae:	75fb      	strb	r3, [r7, #23]
      break;
 801fcb0:	e080      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fcb2:	7afb      	ldrb	r3, [r7, #11]
 801fcb4:	687a      	ldr	r2, [r7, #4]
 801fcb6:	4619      	mov	r1, r3
 801fcb8:	68f8      	ldr	r0, [r7, #12]
 801fcba:	f000 f8d1 	bl	801fe60 <SCSI_Inquiry>
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	75fb      	strb	r3, [r7, #23]
      break;
 801fcc2:	e077      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fcc4:	7afb      	ldrb	r3, [r7, #11]
 801fcc6:	687a      	ldr	r2, [r7, #4]
 801fcc8:	4619      	mov	r1, r3
 801fcca:	68f8      	ldr	r0, [r7, #12]
 801fccc:	f000 fbec 	bl	80204a8 <SCSI_StartStopUnit>
 801fcd0:	4603      	mov	r3, r0
 801fcd2:	75fb      	strb	r3, [r7, #23]
      break;
 801fcd4:	e06e      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fcd6:	7afb      	ldrb	r3, [r7, #11]
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	4619      	mov	r1, r3
 801fcdc:	68f8      	ldr	r0, [r7, #12]
 801fcde:	f000 fc34 	bl	802054a <SCSI_AllowPreventRemovable>
 801fce2:	4603      	mov	r3, r0
 801fce4:	75fb      	strb	r3, [r7, #23]
      break;
 801fce6:	e065      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fce8:	7afb      	ldrb	r3, [r7, #11]
 801fcea:	687a      	ldr	r2, [r7, #4]
 801fcec:	4619      	mov	r1, r3
 801fcee:	68f8      	ldr	r0, [r7, #12]
 801fcf0:	f000 fabc 	bl	802026c <SCSI_ModeSense6>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	75fb      	strb	r3, [r7, #23]
      break;
 801fcf8:	e05c      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fcfa:	7afb      	ldrb	r3, [r7, #11]
 801fcfc:	687a      	ldr	r2, [r7, #4]
 801fcfe:	4619      	mov	r1, r3
 801fd00:	68f8      	ldr	r0, [r7, #12]
 801fd02:	f000 fadf 	bl	80202c4 <SCSI_ModeSense10>
 801fd06:	4603      	mov	r3, r0
 801fd08:	75fb      	strb	r3, [r7, #23]
      break;
 801fd0a:	e053      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fd0c:	7afb      	ldrb	r3, [r7, #11]
 801fd0e:	687a      	ldr	r2, [r7, #4]
 801fd10:	4619      	mov	r1, r3
 801fd12:	68f8      	ldr	r0, [r7, #12]
 801fd14:	f000 fa37 	bl	8020186 <SCSI_ReadFormatCapacity>
 801fd18:	4603      	mov	r3, r0
 801fd1a:	75fb      	strb	r3, [r7, #23]
      break;
 801fd1c:	e04a      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fd1e:	7afb      	ldrb	r3, [r7, #11]
 801fd20:	687a      	ldr	r2, [r7, #4]
 801fd22:	4619      	mov	r1, r3
 801fd24:	68f8      	ldr	r0, [r7, #12]
 801fd26:	f000 f90f 	bl	801ff48 <SCSI_ReadCapacity10>
 801fd2a:	4603      	mov	r3, r0
 801fd2c:	75fb      	strb	r3, [r7, #23]
      break;
 801fd2e:	e041      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fd30:	7afb      	ldrb	r3, [r7, #11]
 801fd32:	687a      	ldr	r2, [r7, #4]
 801fd34:	4619      	mov	r1, r3
 801fd36:	68f8      	ldr	r0, [r7, #12]
 801fd38:	f000 f97b 	bl	8020032 <SCSI_ReadCapacity16>
 801fd3c:	4603      	mov	r3, r0
 801fd3e:	75fb      	strb	r3, [r7, #23]
      break;
 801fd40:	e038      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fd42:	7afb      	ldrb	r3, [r7, #11]
 801fd44:	687a      	ldr	r2, [r7, #4]
 801fd46:	4619      	mov	r1, r3
 801fd48:	68f8      	ldr	r0, [r7, #12]
 801fd4a:	f000 fc27 	bl	802059c <SCSI_Read10>
 801fd4e:	4603      	mov	r3, r0
 801fd50:	75fb      	strb	r3, [r7, #23]
      break;
 801fd52:	e02f      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fd54:	7afb      	ldrb	r3, [r7, #11]
 801fd56:	687a      	ldr	r2, [r7, #4]
 801fd58:	4619      	mov	r1, r3
 801fd5a:	68f8      	ldr	r0, [r7, #12]
 801fd5c:	f000 fcbe 	bl	80206dc <SCSI_Read12>
 801fd60:	4603      	mov	r3, r0
 801fd62:	75fb      	strb	r3, [r7, #23]
      break;
 801fd64:	e026      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fd66:	7afb      	ldrb	r3, [r7, #11]
 801fd68:	687a      	ldr	r2, [r7, #4]
 801fd6a:	4619      	mov	r1, r3
 801fd6c:	68f8      	ldr	r0, [r7, #12]
 801fd6e:	f000 fd60 	bl	8020832 <SCSI_Write10>
 801fd72:	4603      	mov	r3, r0
 801fd74:	75fb      	strb	r3, [r7, #23]
      break;
 801fd76:	e01d      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fd78:	7afb      	ldrb	r3, [r7, #11]
 801fd7a:	687a      	ldr	r2, [r7, #4]
 801fd7c:	4619      	mov	r1, r3
 801fd7e:	68f8      	ldr	r0, [r7, #12]
 801fd80:	f000 fe1c 	bl	80209bc <SCSI_Write12>
 801fd84:	4603      	mov	r3, r0
 801fd86:	75fb      	strb	r3, [r7, #23]
      break;
 801fd88:	e014      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fd8a:	7afb      	ldrb	r3, [r7, #11]
 801fd8c:	687a      	ldr	r2, [r7, #4]
 801fd8e:	4619      	mov	r1, r3
 801fd90:	68f8      	ldr	r0, [r7, #12]
 801fd92:	f000 fee8 	bl	8020b66 <SCSI_Verify10>
 801fd96:	4603      	mov	r3, r0
 801fd98:	75fb      	strb	r3, [r7, #23]
      break;
 801fd9a:	e00b      	b.n	801fdb4 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fd9c:	7af9      	ldrb	r1, [r7, #11]
 801fd9e:	2320      	movs	r3, #32
 801fda0:	2205      	movs	r2, #5
 801fda2:	68f8      	ldr	r0, [r7, #12]
 801fda4:	f000 fb39 	bl	802041a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fda8:	693b      	ldr	r3, [r7, #16]
 801fdaa:	2202      	movs	r2, #2
 801fdac:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fdae:	23ff      	movs	r3, #255	; 0xff
 801fdb0:	75fb      	strb	r3, [r7, #23]
      break;
 801fdb2:	bf00      	nop
  }

  return ret;
 801fdb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fdb8:	4618      	mov	r0, r3
 801fdba:	3718      	adds	r7, #24
 801fdbc:	46bd      	mov	sp, r7
 801fdbe:	bd80      	pop	{r7, pc}

0801fdc0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b086      	sub	sp, #24
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	60f8      	str	r0, [r7, #12]
 801fdc8:	460b      	mov	r3, r1
 801fdca:	607a      	str	r2, [r7, #4]
 801fdcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fdce:	68fb      	ldr	r3, [r7, #12]
 801fdd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fdd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fdd6:	697b      	ldr	r3, [r7, #20]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d102      	bne.n	801fde2 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fddc:	f04f 33ff 	mov.w	r3, #4294967295
 801fde0:	e03a      	b.n	801fe58 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fde2:	697b      	ldr	r3, [r7, #20]
 801fde4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d00a      	beq.n	801fe02 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fdec:	697b      	ldr	r3, [r7, #20]
 801fdee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fdf2:	2320      	movs	r3, #32
 801fdf4:	2205      	movs	r2, #5
 801fdf6:	68f8      	ldr	r0, [r7, #12]
 801fdf8:	f000 fb0f 	bl	802041a <SCSI_SenseCode>

    return -1;
 801fdfc:	f04f 33ff 	mov.w	r3, #4294967295
 801fe00:	e02a      	b.n	801fe58 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fe02:	697b      	ldr	r3, [r7, #20]
 801fe04:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fe08:	2b02      	cmp	r3, #2
 801fe0a:	d10b      	bne.n	801fe24 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fe0c:	7af9      	ldrb	r1, [r7, #11]
 801fe0e:	233a      	movs	r3, #58	; 0x3a
 801fe10:	2202      	movs	r2, #2
 801fe12:	68f8      	ldr	r0, [r7, #12]
 801fe14:	f000 fb01 	bl	802041a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fe18:	697b      	ldr	r3, [r7, #20]
 801fe1a:	2205      	movs	r2, #5
 801fe1c:	721a      	strb	r2, [r3, #8]
    return -1;
 801fe1e:	f04f 33ff 	mov.w	r3, #4294967295
 801fe22:	e019      	b.n	801fe58 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fe2a:	689b      	ldr	r3, [r3, #8]
 801fe2c:	7afa      	ldrb	r2, [r7, #11]
 801fe2e:	4610      	mov	r0, r2
 801fe30:	4798      	blx	r3
 801fe32:	4603      	mov	r3, r0
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d00b      	beq.n	801fe50 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fe38:	7af9      	ldrb	r1, [r7, #11]
 801fe3a:	233a      	movs	r3, #58	; 0x3a
 801fe3c:	2202      	movs	r2, #2
 801fe3e:	68f8      	ldr	r0, [r7, #12]
 801fe40:	f000 faeb 	bl	802041a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fe44:	697b      	ldr	r3, [r7, #20]
 801fe46:	2205      	movs	r2, #5
 801fe48:	721a      	strb	r2, [r3, #8]

    return -1;
 801fe4a:	f04f 33ff 	mov.w	r3, #4294967295
 801fe4e:	e003      	b.n	801fe58 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801fe50:	697b      	ldr	r3, [r7, #20]
 801fe52:	2200      	movs	r2, #0
 801fe54:	60da      	str	r2, [r3, #12]

  return 0;
 801fe56:	2300      	movs	r3, #0
}
 801fe58:	4618      	mov	r0, r3
 801fe5a:	3718      	adds	r7, #24
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	bd80      	pop	{r7, pc}

0801fe60 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fe60:	b580      	push	{r7, lr}
 801fe62:	b088      	sub	sp, #32
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	60f8      	str	r0, [r7, #12]
 801fe68:	460b      	mov	r3, r1
 801fe6a:	607a      	str	r2, [r7, #4]
 801fe6c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe6e:	68fb      	ldr	r3, [r7, #12]
 801fe70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe74:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801fe76:	69bb      	ldr	r3, [r7, #24]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d102      	bne.n	801fe82 <SCSI_Inquiry+0x22>
  {
    return -1;
 801fe7c:	f04f 33ff 	mov.w	r3, #4294967295
 801fe80:	e05a      	b.n	801ff38 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801fe82:	69bb      	ldr	r3, [r7, #24]
 801fe84:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d10a      	bne.n	801fea2 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fe8c:	69bb      	ldr	r3, [r7, #24]
 801fe8e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fe92:	2320      	movs	r3, #32
 801fe94:	2205      	movs	r2, #5
 801fe96:	68f8      	ldr	r0, [r7, #12]
 801fe98:	f000 fabf 	bl	802041a <SCSI_SenseCode>
    return -1;
 801fe9c:	f04f 33ff 	mov.w	r3, #4294967295
 801fea0:	e04a      	b.n	801ff38 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	3301      	adds	r3, #1
 801fea6:	781b      	ldrb	r3, [r3, #0]
 801fea8:	f003 0301 	and.w	r3, r3, #1
 801feac:	2b00      	cmp	r3, #0
 801feae:	d020      	beq.n	801fef2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	3302      	adds	r3, #2
 801feb4:	781b      	ldrb	r3, [r3, #0]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d105      	bne.n	801fec6 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801feba:	2206      	movs	r2, #6
 801febc:	4920      	ldr	r1, [pc, #128]	; (801ff40 <SCSI_Inquiry+0xe0>)
 801febe:	69b8      	ldr	r0, [r7, #24]
 801fec0:	f000 ffb4 	bl	8020e2c <SCSI_UpdateBotData>
 801fec4:	e037      	b.n	801ff36 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	3302      	adds	r3, #2
 801feca:	781b      	ldrb	r3, [r3, #0]
 801fecc:	2b80      	cmp	r3, #128	; 0x80
 801fece:	d105      	bne.n	801fedc <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801fed0:	2208      	movs	r2, #8
 801fed2:	491c      	ldr	r1, [pc, #112]	; (801ff44 <SCSI_Inquiry+0xe4>)
 801fed4:	69b8      	ldr	r0, [r7, #24]
 801fed6:	f000 ffa9 	bl	8020e2c <SCSI_UpdateBotData>
 801feda:	e02c      	b.n	801ff36 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801fedc:	69bb      	ldr	r3, [r7, #24]
 801fede:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fee2:	2324      	movs	r3, #36	; 0x24
 801fee4:	2205      	movs	r2, #5
 801fee6:	68f8      	ldr	r0, [r7, #12]
 801fee8:	f000 fa97 	bl	802041a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801feec:	f04f 33ff 	mov.w	r3, #4294967295
 801fef0:	e022      	b.n	801ff38 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801fef8:	69d9      	ldr	r1, [r3, #28]
 801fefa:	7afa      	ldrb	r2, [r7, #11]
 801fefc:	4613      	mov	r3, r2
 801fefe:	00db      	lsls	r3, r3, #3
 801ff00:	4413      	add	r3, r2
 801ff02:	009b      	lsls	r3, r3, #2
 801ff04:	440b      	add	r3, r1
 801ff06:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801ff08:	697b      	ldr	r3, [r7, #20]
 801ff0a:	3304      	adds	r3, #4
 801ff0c:	781b      	ldrb	r3, [r3, #0]
 801ff0e:	b29b      	uxth	r3, r3
 801ff10:	3305      	adds	r3, #5
 801ff12:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	3304      	adds	r3, #4
 801ff18:	781b      	ldrb	r3, [r3, #0]
 801ff1a:	b29b      	uxth	r3, r3
 801ff1c:	8bfa      	ldrh	r2, [r7, #30]
 801ff1e:	429a      	cmp	r2, r3
 801ff20:	d303      	bcc.n	801ff2a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	3304      	adds	r3, #4
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801ff2a:	8bfb      	ldrh	r3, [r7, #30]
 801ff2c:	461a      	mov	r2, r3
 801ff2e:	6979      	ldr	r1, [r7, #20]
 801ff30:	69b8      	ldr	r0, [r7, #24]
 801ff32:	f000 ff7b 	bl	8020e2c <SCSI_UpdateBotData>
  }

  return 0;
 801ff36:	2300      	movs	r3, #0
}
 801ff38:	4618      	mov	r0, r3
 801ff3a:	3720      	adds	r7, #32
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	bd80      	pop	{r7, pc}
 801ff40:	20000638 	.word	0x20000638
 801ff44:	20000640 	.word	0x20000640

0801ff48 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ff48:	b580      	push	{r7, lr}
 801ff4a:	b086      	sub	sp, #24
 801ff4c:	af00      	add	r7, sp, #0
 801ff4e:	60f8      	str	r0, [r7, #12]
 801ff50:	460b      	mov	r3, r1
 801ff52:	607a      	str	r2, [r7, #4]
 801ff54:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff5c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801ff5e:	697b      	ldr	r3, [r7, #20]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d102      	bne.n	801ff6a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 801ff64:	f04f 33ff 	mov.w	r3, #4294967295
 801ff68:	e05f      	b.n	802002a <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801ff6a:	68fb      	ldr	r3, [r7, #12]
 801ff6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ff70:	685b      	ldr	r3, [r3, #4]
 801ff72:	697a      	ldr	r2, [r7, #20]
 801ff74:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801ff78:	697a      	ldr	r2, [r7, #20]
 801ff7a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801ff7e:	7af8      	ldrb	r0, [r7, #11]
 801ff80:	4798      	blx	r3
 801ff82:	4603      	mov	r3, r0
 801ff84:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801ff86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d104      	bne.n	801ff98 <SCSI_ReadCapacity10+0x50>
 801ff8e:	697b      	ldr	r3, [r7, #20]
 801ff90:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801ff94:	2b02      	cmp	r3, #2
 801ff96:	d108      	bne.n	801ffaa <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801ff98:	7af9      	ldrb	r1, [r7, #11]
 801ff9a:	233a      	movs	r3, #58	; 0x3a
 801ff9c:	2202      	movs	r2, #2
 801ff9e:	68f8      	ldr	r0, [r7, #12]
 801ffa0:	f000 fa3b 	bl	802041a <SCSI_SenseCode>
    return -1;
 801ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 801ffa8:	e03f      	b.n	802002a <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801ffaa:	697b      	ldr	r3, [r7, #20]
 801ffac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffb0:	3b01      	subs	r3, #1
 801ffb2:	0e1b      	lsrs	r3, r3, #24
 801ffb4:	b2da      	uxtb	r2, r3
 801ffb6:	697b      	ldr	r3, [r7, #20]
 801ffb8:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801ffba:	697b      	ldr	r3, [r7, #20]
 801ffbc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffc0:	3b01      	subs	r3, #1
 801ffc2:	0c1b      	lsrs	r3, r3, #16
 801ffc4:	b2da      	uxtb	r2, r3
 801ffc6:	697b      	ldr	r3, [r7, #20]
 801ffc8:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801ffca:	697b      	ldr	r3, [r7, #20]
 801ffcc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffd0:	3b01      	subs	r3, #1
 801ffd2:	0a1b      	lsrs	r3, r3, #8
 801ffd4:	b2da      	uxtb	r2, r3
 801ffd6:	697b      	ldr	r3, [r7, #20]
 801ffd8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801ffda:	697b      	ldr	r3, [r7, #20]
 801ffdc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801ffe0:	b2db      	uxtb	r3, r3
 801ffe2:	3b01      	subs	r3, #1
 801ffe4:	b2da      	uxtb	r2, r3
 801ffe6:	697b      	ldr	r3, [r7, #20]
 801ffe8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801ffea:	697b      	ldr	r3, [r7, #20]
 801ffec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fff0:	161b      	asrs	r3, r3, #24
 801fff2:	b2da      	uxtb	r2, r3
 801fff4:	697b      	ldr	r3, [r7, #20]
 801fff6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801fffe:	141b      	asrs	r3, r3, #16
 8020000:	b2da      	uxtb	r2, r3
 8020002:	697b      	ldr	r3, [r7, #20]
 8020004:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8020006:	697b      	ldr	r3, [r7, #20]
 8020008:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802000c:	0a1b      	lsrs	r3, r3, #8
 802000e:	b29b      	uxth	r3, r3
 8020010:	b2da      	uxtb	r2, r3
 8020012:	697b      	ldr	r3, [r7, #20]
 8020014:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8020016:	697b      	ldr	r3, [r7, #20]
 8020018:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802001c:	b2da      	uxtb	r2, r3
 802001e:	697b      	ldr	r3, [r7, #20]
 8020020:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8020022:	697b      	ldr	r3, [r7, #20]
 8020024:	2208      	movs	r2, #8
 8020026:	60da      	str	r2, [r3, #12]

  return 0;
 8020028:	2300      	movs	r3, #0

}
 802002a:	4618      	mov	r0, r3
 802002c:	3718      	adds	r7, #24
 802002e:	46bd      	mov	sp, r7
 8020030:	bd80      	pop	{r7, pc}

08020032 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020032:	b580      	push	{r7, lr}
 8020034:	b088      	sub	sp, #32
 8020036:	af00      	add	r7, sp, #0
 8020038:	60f8      	str	r0, [r7, #12]
 802003a:	460b      	mov	r3, r1
 802003c:	607a      	str	r2, [r7, #4]
 802003e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020046:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020048:	69bb      	ldr	r3, [r7, #24]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d102      	bne.n	8020054 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 802004e:	f04f 33ff 	mov.w	r3, #4294967295
 8020052:	e094      	b.n	802017e <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802005a:	685b      	ldr	r3, [r3, #4]
 802005c:	69ba      	ldr	r2, [r7, #24]
 802005e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020062:	69ba      	ldr	r2, [r7, #24]
 8020064:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020068:	7af8      	ldrb	r0, [r7, #11]
 802006a:	4798      	blx	r3
 802006c:	4603      	mov	r3, r0
 802006e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d104      	bne.n	8020082 <SCSI_ReadCapacity16+0x50>
 8020078:	69bb      	ldr	r3, [r7, #24]
 802007a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802007e:	2b02      	cmp	r3, #2
 8020080:	d108      	bne.n	8020094 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020082:	7af9      	ldrb	r1, [r7, #11]
 8020084:	233a      	movs	r3, #58	; 0x3a
 8020086:	2202      	movs	r2, #2
 8020088:	68f8      	ldr	r0, [r7, #12]
 802008a:	f000 f9c6 	bl	802041a <SCSI_SenseCode>
    return -1;
 802008e:	f04f 33ff 	mov.w	r3, #4294967295
 8020092:	e074      	b.n	802017e <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	330a      	adds	r3, #10
 8020098:	781b      	ldrb	r3, [r3, #0]
 802009a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	330b      	adds	r3, #11
 80200a0:	781b      	ldrb	r3, [r3, #0]
 80200a2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200a4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	330c      	adds	r3, #12
 80200aa:	781b      	ldrb	r3, [r3, #0]
 80200ac:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80200ae:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80200b0:	687a      	ldr	r2, [r7, #4]
 80200b2:	320d      	adds	r2, #13
 80200b4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80200b6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80200b8:	69bb      	ldr	r3, [r7, #24]
 80200ba:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80200bc:	2300      	movs	r3, #0
 80200be:	77fb      	strb	r3, [r7, #31]
 80200c0:	e007      	b.n	80200d2 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80200c2:	7ffb      	ldrb	r3, [r7, #31]
 80200c4:	69ba      	ldr	r2, [r7, #24]
 80200c6:	4413      	add	r3, r2
 80200c8:	2200      	movs	r2, #0
 80200ca:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80200cc:	7ffb      	ldrb	r3, [r7, #31]
 80200ce:	3301      	adds	r3, #1
 80200d0:	77fb      	strb	r3, [r7, #31]
 80200d2:	7ffa      	ldrb	r2, [r7, #31]
 80200d4:	69bb      	ldr	r3, [r7, #24]
 80200d6:	68db      	ldr	r3, [r3, #12]
 80200d8:	429a      	cmp	r2, r3
 80200da:	d3f2      	bcc.n	80200c2 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80200dc:	69bb      	ldr	r3, [r7, #24]
 80200de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80200e2:	3b01      	subs	r3, #1
 80200e4:	0e1b      	lsrs	r3, r3, #24
 80200e6:	b2da      	uxtb	r2, r3
 80200e8:	69bb      	ldr	r3, [r7, #24]
 80200ea:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80200ec:	69bb      	ldr	r3, [r7, #24]
 80200ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80200f2:	3b01      	subs	r3, #1
 80200f4:	0c1b      	lsrs	r3, r3, #16
 80200f6:	b2da      	uxtb	r2, r3
 80200f8:	69bb      	ldr	r3, [r7, #24]
 80200fa:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80200fc:	69bb      	ldr	r3, [r7, #24]
 80200fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020102:	3b01      	subs	r3, #1
 8020104:	0a1b      	lsrs	r3, r3, #8
 8020106:	b2da      	uxtb	r2, r3
 8020108:	69bb      	ldr	r3, [r7, #24]
 802010a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 802010c:	69bb      	ldr	r3, [r7, #24]
 802010e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020112:	b2db      	uxtb	r3, r3
 8020114:	3b01      	subs	r3, #1
 8020116:	b2da      	uxtb	r2, r3
 8020118:	69bb      	ldr	r3, [r7, #24]
 802011a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 802011c:	69bb      	ldr	r3, [r7, #24]
 802011e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020122:	161b      	asrs	r3, r3, #24
 8020124:	b2da      	uxtb	r2, r3
 8020126:	69bb      	ldr	r3, [r7, #24]
 8020128:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802012a:	69bb      	ldr	r3, [r7, #24]
 802012c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020130:	141b      	asrs	r3, r3, #16
 8020132:	b2da      	uxtb	r2, r3
 8020134:	69bb      	ldr	r3, [r7, #24]
 8020136:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8020138:	69bb      	ldr	r3, [r7, #24]
 802013a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802013e:	0a1b      	lsrs	r3, r3, #8
 8020140:	b29b      	uxth	r3, r3
 8020142:	b2da      	uxtb	r2, r3
 8020144:	69bb      	ldr	r3, [r7, #24]
 8020146:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8020148:	69bb      	ldr	r3, [r7, #24]
 802014a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802014e:	b2da      	uxtb	r2, r3
 8020150:	69bb      	ldr	r3, [r7, #24]
 8020152:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	330a      	adds	r3, #10
 8020158:	781b      	ldrb	r3, [r3, #0]
 802015a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	330b      	adds	r3, #11
 8020160:	781b      	ldrb	r3, [r3, #0]
 8020162:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020164:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	330c      	adds	r3, #12
 802016a:	781b      	ldrb	r3, [r3, #0]
 802016c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802016e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020170:	687a      	ldr	r2, [r7, #4]
 8020172:	320d      	adds	r2, #13
 8020174:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020176:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020178:	69bb      	ldr	r3, [r7, #24]
 802017a:	60da      	str	r2, [r3, #12]

  return 0;
 802017c:	2300      	movs	r3, #0
}
 802017e:	4618      	mov	r0, r3
 8020180:	3720      	adds	r7, #32
 8020182:	46bd      	mov	sp, r7
 8020184:	bd80      	pop	{r7, pc}

08020186 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020186:	b580      	push	{r7, lr}
 8020188:	b088      	sub	sp, #32
 802018a:	af00      	add	r7, sp, #0
 802018c:	60f8      	str	r0, [r7, #12]
 802018e:	460b      	mov	r3, r1
 8020190:	607a      	str	r2, [r7, #4]
 8020192:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020194:	68fb      	ldr	r3, [r7, #12]
 8020196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802019a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802019c:	69bb      	ldr	r3, [r7, #24]
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d102      	bne.n	80201a8 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80201a2:	f04f 33ff 	mov.w	r3, #4294967295
 80201a6:	e05c      	b.n	8020262 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80201a8:	68fb      	ldr	r3, [r7, #12]
 80201aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80201ae:	685b      	ldr	r3, [r3, #4]
 80201b0:	f107 0214 	add.w	r2, r7, #20
 80201b4:	f107 0110 	add.w	r1, r7, #16
 80201b8:	7af8      	ldrb	r0, [r7, #11]
 80201ba:	4798      	blx	r3
 80201bc:	4603      	mov	r3, r0
 80201be:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80201c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d104      	bne.n	80201d2 <SCSI_ReadFormatCapacity+0x4c>
 80201c8:	69bb      	ldr	r3, [r7, #24]
 80201ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80201ce:	2b02      	cmp	r3, #2
 80201d0:	d108      	bne.n	80201e4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80201d2:	7af9      	ldrb	r1, [r7, #11]
 80201d4:	233a      	movs	r3, #58	; 0x3a
 80201d6:	2202      	movs	r2, #2
 80201d8:	68f8      	ldr	r0, [r7, #12]
 80201da:	f000 f91e 	bl	802041a <SCSI_SenseCode>
    return -1;
 80201de:	f04f 33ff 	mov.w	r3, #4294967295
 80201e2:	e03e      	b.n	8020262 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80201e4:	2300      	movs	r3, #0
 80201e6:	83fb      	strh	r3, [r7, #30]
 80201e8:	e007      	b.n	80201fa <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80201ea:	8bfb      	ldrh	r3, [r7, #30]
 80201ec:	69ba      	ldr	r2, [r7, #24]
 80201ee:	4413      	add	r3, r2
 80201f0:	2200      	movs	r2, #0
 80201f2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80201f4:	8bfb      	ldrh	r3, [r7, #30]
 80201f6:	3301      	adds	r3, #1
 80201f8:	83fb      	strh	r3, [r7, #30]
 80201fa:	8bfb      	ldrh	r3, [r7, #30]
 80201fc:	2b0b      	cmp	r3, #11
 80201fe:	d9f4      	bls.n	80201ea <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8020200:	69bb      	ldr	r3, [r7, #24]
 8020202:	2208      	movs	r2, #8
 8020204:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8020206:	693b      	ldr	r3, [r7, #16]
 8020208:	3b01      	subs	r3, #1
 802020a:	0e1b      	lsrs	r3, r3, #24
 802020c:	b2da      	uxtb	r2, r3
 802020e:	69bb      	ldr	r3, [r7, #24]
 8020210:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8020212:	693b      	ldr	r3, [r7, #16]
 8020214:	3b01      	subs	r3, #1
 8020216:	0c1b      	lsrs	r3, r3, #16
 8020218:	b2da      	uxtb	r2, r3
 802021a:	69bb      	ldr	r3, [r7, #24]
 802021c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 802021e:	693b      	ldr	r3, [r7, #16]
 8020220:	3b01      	subs	r3, #1
 8020222:	0a1b      	lsrs	r3, r3, #8
 8020224:	b2da      	uxtb	r2, r3
 8020226:	69bb      	ldr	r3, [r7, #24]
 8020228:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802022a:	693b      	ldr	r3, [r7, #16]
 802022c:	b2db      	uxtb	r3, r3
 802022e:	3b01      	subs	r3, #1
 8020230:	b2da      	uxtb	r2, r3
 8020232:	69bb      	ldr	r3, [r7, #24]
 8020234:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8020236:	69bb      	ldr	r3, [r7, #24]
 8020238:	2202      	movs	r2, #2
 802023a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 802023c:	8abb      	ldrh	r3, [r7, #20]
 802023e:	141b      	asrs	r3, r3, #16
 8020240:	b2da      	uxtb	r2, r3
 8020242:	69bb      	ldr	r3, [r7, #24]
 8020244:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8020246:	8abb      	ldrh	r3, [r7, #20]
 8020248:	0a1b      	lsrs	r3, r3, #8
 802024a:	b29b      	uxth	r3, r3
 802024c:	b2da      	uxtb	r2, r3
 802024e:	69bb      	ldr	r3, [r7, #24]
 8020250:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020252:	8abb      	ldrh	r3, [r7, #20]
 8020254:	b2da      	uxtb	r2, r3
 8020256:	69bb      	ldr	r3, [r7, #24]
 8020258:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802025a:	69bb      	ldr	r3, [r7, #24]
 802025c:	220c      	movs	r2, #12
 802025e:	60da      	str	r2, [r3, #12]

  return 0;
 8020260:	2300      	movs	r3, #0
}
 8020262:	4618      	mov	r0, r3
 8020264:	3720      	adds	r7, #32
 8020266:	46bd      	mov	sp, r7
 8020268:	bd80      	pop	{r7, pc}
	...

0802026c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802026c:	b580      	push	{r7, lr}
 802026e:	b086      	sub	sp, #24
 8020270:	af00      	add	r7, sp, #0
 8020272:	60f8      	str	r0, [r7, #12]
 8020274:	460b      	mov	r3, r1
 8020276:	607a      	str	r2, [r7, #4]
 8020278:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020280:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8020282:	2317      	movs	r3, #23
 8020284:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020286:	693b      	ldr	r3, [r7, #16]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d102      	bne.n	8020292 <SCSI_ModeSense6+0x26>
  {
    return -1;
 802028c:	f04f 33ff 	mov.w	r3, #4294967295
 8020290:	e011      	b.n	80202b6 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	3304      	adds	r3, #4
 8020296:	781b      	ldrb	r3, [r3, #0]
 8020298:	b29b      	uxth	r3, r3
 802029a:	8afa      	ldrh	r2, [r7, #22]
 802029c:	429a      	cmp	r2, r3
 802029e:	d303      	bcc.n	80202a8 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	3304      	adds	r3, #4
 80202a4:	781b      	ldrb	r3, [r3, #0]
 80202a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80202a8:	8afb      	ldrh	r3, [r7, #22]
 80202aa:	461a      	mov	r2, r3
 80202ac:	4904      	ldr	r1, [pc, #16]	; (80202c0 <SCSI_ModeSense6+0x54>)
 80202ae:	6938      	ldr	r0, [r7, #16]
 80202b0:	f000 fdbc 	bl	8020e2c <SCSI_UpdateBotData>

  return 0;
 80202b4:	2300      	movs	r3, #0
}
 80202b6:	4618      	mov	r0, r3
 80202b8:	3718      	adds	r7, #24
 80202ba:	46bd      	mov	sp, r7
 80202bc:	bd80      	pop	{r7, pc}
 80202be:	bf00      	nop
 80202c0:	20000648 	.word	0x20000648

080202c4 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80202c4:	b580      	push	{r7, lr}
 80202c6:	b086      	sub	sp, #24
 80202c8:	af00      	add	r7, sp, #0
 80202ca:	60f8      	str	r0, [r7, #12]
 80202cc:	460b      	mov	r3, r1
 80202ce:	607a      	str	r2, [r7, #4]
 80202d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80202d2:	68fb      	ldr	r3, [r7, #12]
 80202d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80202d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80202da:	231b      	movs	r3, #27
 80202dc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80202de:	693b      	ldr	r3, [r7, #16]
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	d102      	bne.n	80202ea <SCSI_ModeSense10+0x26>
  {
    return -1;
 80202e4:	f04f 33ff 	mov.w	r3, #4294967295
 80202e8:	e011      	b.n	802030e <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	3308      	adds	r3, #8
 80202ee:	781b      	ldrb	r3, [r3, #0]
 80202f0:	b29b      	uxth	r3, r3
 80202f2:	8afa      	ldrh	r2, [r7, #22]
 80202f4:	429a      	cmp	r2, r3
 80202f6:	d303      	bcc.n	8020300 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	3308      	adds	r3, #8
 80202fc:	781b      	ldrb	r3, [r3, #0]
 80202fe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020300:	8afb      	ldrh	r3, [r7, #22]
 8020302:	461a      	mov	r2, r3
 8020304:	4904      	ldr	r1, [pc, #16]	; (8020318 <SCSI_ModeSense10+0x54>)
 8020306:	6938      	ldr	r0, [r7, #16]
 8020308:	f000 fd90 	bl	8020e2c <SCSI_UpdateBotData>

  return 0;
 802030c:	2300      	movs	r3, #0
}
 802030e:	4618      	mov	r0, r3
 8020310:	3718      	adds	r7, #24
 8020312:	46bd      	mov	sp, r7
 8020314:	bd80      	pop	{r7, pc}
 8020316:	bf00      	nop
 8020318:	20000660 	.word	0x20000660

0802031c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802031c:	b580      	push	{r7, lr}
 802031e:	b086      	sub	sp, #24
 8020320:	af00      	add	r7, sp, #0
 8020322:	60f8      	str	r0, [r7, #12]
 8020324:	460b      	mov	r3, r1
 8020326:	607a      	str	r2, [r7, #4]
 8020328:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802032a:	68fb      	ldr	r3, [r7, #12]
 802032c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020330:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020332:	693b      	ldr	r3, [r7, #16]
 8020334:	2b00      	cmp	r3, #0
 8020336:	d102      	bne.n	802033e <SCSI_RequestSense+0x22>
  {
    return -1;
 8020338:	f04f 33ff 	mov.w	r3, #4294967295
 802033c:	e069      	b.n	8020412 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 802033e:	693b      	ldr	r3, [r7, #16]
 8020340:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020344:	2b00      	cmp	r3, #0
 8020346:	d10a      	bne.n	802035e <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020348:	693b      	ldr	r3, [r7, #16]
 802034a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802034e:	2320      	movs	r3, #32
 8020350:	2205      	movs	r2, #5
 8020352:	68f8      	ldr	r0, [r7, #12]
 8020354:	f000 f861 	bl	802041a <SCSI_SenseCode>
    return -1;
 8020358:	f04f 33ff 	mov.w	r3, #4294967295
 802035c:	e059      	b.n	8020412 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802035e:	2300      	movs	r3, #0
 8020360:	75fb      	strb	r3, [r7, #23]
 8020362:	e007      	b.n	8020374 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020364:	7dfb      	ldrb	r3, [r7, #23]
 8020366:	693a      	ldr	r2, [r7, #16]
 8020368:	4413      	add	r3, r2
 802036a:	2200      	movs	r2, #0
 802036c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802036e:	7dfb      	ldrb	r3, [r7, #23]
 8020370:	3301      	adds	r3, #1
 8020372:	75fb      	strb	r3, [r7, #23]
 8020374:	7dfb      	ldrb	r3, [r7, #23]
 8020376:	2b11      	cmp	r3, #17
 8020378:	d9f4      	bls.n	8020364 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 802037a:	693b      	ldr	r3, [r7, #16]
 802037c:	2270      	movs	r2, #112	; 0x70
 802037e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020380:	693b      	ldr	r3, [r7, #16]
 8020382:	220c      	movs	r2, #12
 8020384:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8020386:	693b      	ldr	r3, [r7, #16]
 8020388:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 802038c:	693b      	ldr	r3, [r7, #16]
 802038e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020392:	429a      	cmp	r2, r3
 8020394:	d02e      	beq.n	80203f4 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8020396:	693b      	ldr	r3, [r7, #16]
 8020398:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802039c:	461a      	mov	r2, r3
 802039e:	693b      	ldr	r3, [r7, #16]
 80203a0:	3248      	adds	r2, #72	; 0x48
 80203a2:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80203a6:	693b      	ldr	r3, [r7, #16]
 80203a8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80203aa:	693b      	ldr	r3, [r7, #16]
 80203ac:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80203b0:	693a      	ldr	r2, [r7, #16]
 80203b2:	3348      	adds	r3, #72	; 0x48
 80203b4:	00db      	lsls	r3, r3, #3
 80203b6:	4413      	add	r3, r2
 80203b8:	791a      	ldrb	r2, [r3, #4]
 80203ba:	693b      	ldr	r3, [r7, #16]
 80203bc:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80203be:	693b      	ldr	r3, [r7, #16]
 80203c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80203c4:	693a      	ldr	r2, [r7, #16]
 80203c6:	3348      	adds	r3, #72	; 0x48
 80203c8:	00db      	lsls	r3, r3, #3
 80203ca:	4413      	add	r3, r2
 80203cc:	795a      	ldrb	r2, [r3, #5]
 80203ce:	693b      	ldr	r3, [r7, #16]
 80203d0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80203d2:	693b      	ldr	r3, [r7, #16]
 80203d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80203d8:	3301      	adds	r3, #1
 80203da:	b2da      	uxtb	r2, r3
 80203dc:	693b      	ldr	r3, [r7, #16]
 80203de:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80203e2:	693b      	ldr	r3, [r7, #16]
 80203e4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80203e8:	2b04      	cmp	r3, #4
 80203ea:	d103      	bne.n	80203f4 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80203ec:	693b      	ldr	r3, [r7, #16]
 80203ee:	2200      	movs	r2, #0
 80203f0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80203f4:	693b      	ldr	r3, [r7, #16]
 80203f6:	2212      	movs	r2, #18
 80203f8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	3304      	adds	r3, #4
 80203fe:	781b      	ldrb	r3, [r3, #0]
 8020400:	2b12      	cmp	r3, #18
 8020402:	d805      	bhi.n	8020410 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	3304      	adds	r3, #4
 8020408:	781b      	ldrb	r3, [r3, #0]
 802040a:	461a      	mov	r2, r3
 802040c:	693b      	ldr	r3, [r7, #16]
 802040e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8020410:	2300      	movs	r3, #0
}
 8020412:	4618      	mov	r0, r3
 8020414:	3718      	adds	r7, #24
 8020416:	46bd      	mov	sp, r7
 8020418:	bd80      	pop	{r7, pc}

0802041a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 802041a:	b480      	push	{r7}
 802041c:	b085      	sub	sp, #20
 802041e:	af00      	add	r7, sp, #0
 8020420:	6078      	str	r0, [r7, #4]
 8020422:	4608      	mov	r0, r1
 8020424:	4611      	mov	r1, r2
 8020426:	461a      	mov	r2, r3
 8020428:	4603      	mov	r3, r0
 802042a:	70fb      	strb	r3, [r7, #3]
 802042c:	460b      	mov	r3, r1
 802042e:	70bb      	strb	r3, [r7, #2]
 8020430:	4613      	mov	r3, r2
 8020432:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802043a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 802043c:	68fb      	ldr	r3, [r7, #12]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d02c      	beq.n	802049c <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020442:	68fb      	ldr	r3, [r7, #12]
 8020444:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020448:	461a      	mov	r2, r3
 802044a:	68fb      	ldr	r3, [r7, #12]
 802044c:	3248      	adds	r2, #72	; 0x48
 802044e:	78b9      	ldrb	r1, [r7, #2]
 8020450:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020454:	68fb      	ldr	r3, [r7, #12]
 8020456:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802045a:	68fa      	ldr	r2, [r7, #12]
 802045c:	3348      	adds	r3, #72	; 0x48
 802045e:	00db      	lsls	r3, r3, #3
 8020460:	4413      	add	r3, r2
 8020462:	787a      	ldrb	r2, [r7, #1]
 8020464:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8020466:	68fb      	ldr	r3, [r7, #12]
 8020468:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802046c:	68fa      	ldr	r2, [r7, #12]
 802046e:	3348      	adds	r3, #72	; 0x48
 8020470:	00db      	lsls	r3, r3, #3
 8020472:	4413      	add	r3, r2
 8020474:	2200      	movs	r2, #0
 8020476:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020478:	68fb      	ldr	r3, [r7, #12]
 802047a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802047e:	3301      	adds	r3, #1
 8020480:	b2da      	uxtb	r2, r3
 8020482:	68fb      	ldr	r3, [r7, #12]
 8020484:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020488:	68fb      	ldr	r3, [r7, #12]
 802048a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802048e:	2b04      	cmp	r3, #4
 8020490:	d105      	bne.n	802049e <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8020492:	68fb      	ldr	r3, [r7, #12]
 8020494:	2200      	movs	r2, #0
 8020496:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 802049a:	e000      	b.n	802049e <SCSI_SenseCode+0x84>
    return;
 802049c:	bf00      	nop
  }
}
 802049e:	3714      	adds	r7, #20
 80204a0:	46bd      	mov	sp, r7
 80204a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204a6:	4770      	bx	lr

080204a8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204a8:	b580      	push	{r7, lr}
 80204aa:	b086      	sub	sp, #24
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	60f8      	str	r0, [r7, #12]
 80204b0:	460b      	mov	r3, r1
 80204b2:	607a      	str	r2, [r7, #4]
 80204b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204be:	697b      	ldr	r3, [r7, #20]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d102      	bne.n	80204ca <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80204c4:	f04f 33ff 	mov.w	r3, #4294967295
 80204c8:	e03b      	b.n	8020542 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80204d0:	2b01      	cmp	r3, #1
 80204d2:	d10f      	bne.n	80204f4 <SCSI_StartStopUnit+0x4c>
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	3304      	adds	r3, #4
 80204d8:	781b      	ldrb	r3, [r3, #0]
 80204da:	f003 0303 	and.w	r3, r3, #3
 80204de:	2b02      	cmp	r3, #2
 80204e0:	d108      	bne.n	80204f4 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80204e2:	7af9      	ldrb	r1, [r7, #11]
 80204e4:	2324      	movs	r3, #36	; 0x24
 80204e6:	2205      	movs	r2, #5
 80204e8:	68f8      	ldr	r0, [r7, #12]
 80204ea:	f7ff ff96 	bl	802041a <SCSI_SenseCode>

    return -1;
 80204ee:	f04f 33ff 	mov.w	r3, #4294967295
 80204f2:	e026      	b.n	8020542 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	3304      	adds	r3, #4
 80204f8:	781b      	ldrb	r3, [r3, #0]
 80204fa:	f003 0303 	and.w	r3, r3, #3
 80204fe:	2b01      	cmp	r3, #1
 8020500:	d104      	bne.n	802050c <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020502:	697b      	ldr	r3, [r7, #20]
 8020504:	2200      	movs	r2, #0
 8020506:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802050a:	e016      	b.n	802053a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	3304      	adds	r3, #4
 8020510:	781b      	ldrb	r3, [r3, #0]
 8020512:	f003 0303 	and.w	r3, r3, #3
 8020516:	2b02      	cmp	r3, #2
 8020518:	d104      	bne.n	8020524 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 802051a:	697b      	ldr	r3, [r7, #20]
 802051c:	2202      	movs	r2, #2
 802051e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020522:	e00a      	b.n	802053a <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	3304      	adds	r3, #4
 8020528:	781b      	ldrb	r3, [r3, #0]
 802052a:	f003 0303 	and.w	r3, r3, #3
 802052e:	2b03      	cmp	r3, #3
 8020530:	d103      	bne.n	802053a <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020532:	697b      	ldr	r3, [r7, #20]
 8020534:	2200      	movs	r2, #0
 8020536:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 802053a:	697b      	ldr	r3, [r7, #20]
 802053c:	2200      	movs	r2, #0
 802053e:	60da      	str	r2, [r3, #12]

  return 0;
 8020540:	2300      	movs	r3, #0
}
 8020542:	4618      	mov	r0, r3
 8020544:	3718      	adds	r7, #24
 8020546:	46bd      	mov	sp, r7
 8020548:	bd80      	pop	{r7, pc}

0802054a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802054a:	b480      	push	{r7}
 802054c:	b087      	sub	sp, #28
 802054e:	af00      	add	r7, sp, #0
 8020550:	60f8      	str	r0, [r7, #12]
 8020552:	460b      	mov	r3, r1
 8020554:	607a      	str	r2, [r7, #4]
 8020556:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802055e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020560:	697b      	ldr	r3, [r7, #20]
 8020562:	2b00      	cmp	r3, #0
 8020564:	d102      	bne.n	802056c <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8020566:	f04f 33ff 	mov.w	r3, #4294967295
 802056a:	e011      	b.n	8020590 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	3304      	adds	r3, #4
 8020570:	781b      	ldrb	r3, [r3, #0]
 8020572:	2b00      	cmp	r3, #0
 8020574:	d104      	bne.n	8020580 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020576:	697b      	ldr	r3, [r7, #20]
 8020578:	2200      	movs	r2, #0
 802057a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802057e:	e003      	b.n	8020588 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	2201      	movs	r2, #1
 8020584:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	2200      	movs	r2, #0
 802058c:	60da      	str	r2, [r3, #12]

  return 0;
 802058e:	2300      	movs	r3, #0
}
 8020590:	4618      	mov	r0, r3
 8020592:	371c      	adds	r7, #28
 8020594:	46bd      	mov	sp, r7
 8020596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802059a:	4770      	bx	lr

0802059c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	b086      	sub	sp, #24
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	60f8      	str	r0, [r7, #12]
 80205a4:	460b      	mov	r3, r1
 80205a6:	607a      	str	r2, [r7, #4]
 80205a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80205aa:	68fb      	ldr	r3, [r7, #12]
 80205ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80205b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80205b2:	697b      	ldr	r3, [r7, #20]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d102      	bne.n	80205be <SCSI_Read10+0x22>
  {
    return -1;
 80205b8:	f04f 33ff 	mov.w	r3, #4294967295
 80205bc:	e08a      	b.n	80206d4 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80205be:	697b      	ldr	r3, [r7, #20]
 80205c0:	7a1b      	ldrb	r3, [r3, #8]
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d17c      	bne.n	80206c0 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80205c6:	697b      	ldr	r3, [r7, #20]
 80205c8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80205cc:	b25b      	sxtb	r3, r3
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	db0a      	blt.n	80205e8 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80205d2:	697b      	ldr	r3, [r7, #20]
 80205d4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80205d8:	2320      	movs	r3, #32
 80205da:	2205      	movs	r2, #5
 80205dc:	68f8      	ldr	r0, [r7, #12]
 80205de:	f7ff ff1c 	bl	802041a <SCSI_SenseCode>
      return -1;
 80205e2:	f04f 33ff 	mov.w	r3, #4294967295
 80205e6:	e075      	b.n	80206d4 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80205e8:	697b      	ldr	r3, [r7, #20]
 80205ea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80205ee:	2b02      	cmp	r3, #2
 80205f0:	d108      	bne.n	8020604 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80205f2:	7af9      	ldrb	r1, [r7, #11]
 80205f4:	233a      	movs	r3, #58	; 0x3a
 80205f6:	2202      	movs	r2, #2
 80205f8:	68f8      	ldr	r0, [r7, #12]
 80205fa:	f7ff ff0e 	bl	802041a <SCSI_SenseCode>

      return -1;
 80205fe:	f04f 33ff 	mov.w	r3, #4294967295
 8020602:	e067      	b.n	80206d4 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020604:	68fb      	ldr	r3, [r7, #12]
 8020606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802060a:	689b      	ldr	r3, [r3, #8]
 802060c:	7afa      	ldrb	r2, [r7, #11]
 802060e:	4610      	mov	r0, r2
 8020610:	4798      	blx	r3
 8020612:	4603      	mov	r3, r0
 8020614:	2b00      	cmp	r3, #0
 8020616:	d008      	beq.n	802062a <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020618:	7af9      	ldrb	r1, [r7, #11]
 802061a:	233a      	movs	r3, #58	; 0x3a
 802061c:	2202      	movs	r2, #2
 802061e:	68f8      	ldr	r0, [r7, #12]
 8020620:	f7ff fefb 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020624:	f04f 33ff 	mov.w	r3, #4294967295
 8020628:	e054      	b.n	80206d4 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802062a:	687b      	ldr	r3, [r7, #4]
 802062c:	3302      	adds	r3, #2
 802062e:	781b      	ldrb	r3, [r3, #0]
 8020630:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	3303      	adds	r3, #3
 8020636:	781b      	ldrb	r3, [r3, #0]
 8020638:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802063a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	3304      	adds	r3, #4
 8020640:	781b      	ldrb	r3, [r3, #0]
 8020642:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020644:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020646:	687a      	ldr	r2, [r7, #4]
 8020648:	3205      	adds	r2, #5
 802064a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 802064c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802064e:	697b      	ldr	r3, [r7, #20]
 8020650:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	3307      	adds	r3, #7
 8020658:	781b      	ldrb	r3, [r3, #0]
 802065a:	021b      	lsls	r3, r3, #8
 802065c:	687a      	ldr	r2, [r7, #4]
 802065e:	3208      	adds	r2, #8
 8020660:	7812      	ldrb	r2, [r2, #0]
 8020662:	431a      	orrs	r2, r3
 8020664:	697b      	ldr	r3, [r7, #20]
 8020666:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802066a:	697b      	ldr	r3, [r7, #20]
 802066c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020670:	697b      	ldr	r3, [r7, #20]
 8020672:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020676:	7af9      	ldrb	r1, [r7, #11]
 8020678:	68f8      	ldr	r0, [r7, #12]
 802067a:	f000 faad 	bl	8020bd8 <SCSI_CheckAddressRange>
 802067e:	4603      	mov	r3, r0
 8020680:	2b00      	cmp	r3, #0
 8020682:	da02      	bge.n	802068a <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020684:	f04f 33ff 	mov.w	r3, #4294967295
 8020688:	e024      	b.n	80206d4 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020690:	697b      	ldr	r3, [r7, #20]
 8020692:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020696:	6979      	ldr	r1, [r7, #20]
 8020698:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 802069c:	fb01 f303 	mul.w	r3, r1, r3
 80206a0:	429a      	cmp	r2, r3
 80206a2:	d00a      	beq.n	80206ba <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80206a4:	697b      	ldr	r3, [r7, #20]
 80206a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80206aa:	2320      	movs	r3, #32
 80206ac:	2205      	movs	r2, #5
 80206ae:	68f8      	ldr	r0, [r7, #12]
 80206b0:	f7ff feb3 	bl	802041a <SCSI_SenseCode>
      return -1;
 80206b4:	f04f 33ff 	mov.w	r3, #4294967295
 80206b8:	e00c      	b.n	80206d4 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80206ba:	697b      	ldr	r3, [r7, #20]
 80206bc:	2202      	movs	r2, #2
 80206be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80206c0:	697b      	ldr	r3, [r7, #20]
 80206c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80206c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80206c8:	7afb      	ldrb	r3, [r7, #11]
 80206ca:	4619      	mov	r1, r3
 80206cc:	68f8      	ldr	r0, [r7, #12]
 80206ce:	f000 faab 	bl	8020c28 <SCSI_ProcessRead>
 80206d2:	4603      	mov	r3, r0
}
 80206d4:	4618      	mov	r0, r3
 80206d6:	3718      	adds	r7, #24
 80206d8:	46bd      	mov	sp, r7
 80206da:	bd80      	pop	{r7, pc}

080206dc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80206dc:	b580      	push	{r7, lr}
 80206de:	b086      	sub	sp, #24
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	60f8      	str	r0, [r7, #12]
 80206e4:	460b      	mov	r3, r1
 80206e6:	607a      	str	r2, [r7, #4]
 80206e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80206f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80206f2:	697b      	ldr	r3, [r7, #20]
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d102      	bne.n	80206fe <SCSI_Read12+0x22>
  {
    return -1;
 80206f8:	f04f 33ff 	mov.w	r3, #4294967295
 80206fc:	e095      	b.n	802082a <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80206fe:	697b      	ldr	r3, [r7, #20]
 8020700:	7a1b      	ldrb	r3, [r3, #8]
 8020702:	2b00      	cmp	r3, #0
 8020704:	f040 8087 	bne.w	8020816 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020708:	697b      	ldr	r3, [r7, #20]
 802070a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802070e:	b25b      	sxtb	r3, r3
 8020710:	2b00      	cmp	r3, #0
 8020712:	db0a      	blt.n	802072a <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020714:	697b      	ldr	r3, [r7, #20]
 8020716:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802071a:	2320      	movs	r3, #32
 802071c:	2205      	movs	r2, #5
 802071e:	68f8      	ldr	r0, [r7, #12]
 8020720:	f7ff fe7b 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020724:	f04f 33ff 	mov.w	r3, #4294967295
 8020728:	e07f      	b.n	802082a <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802072a:	697b      	ldr	r3, [r7, #20]
 802072c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020730:	2b02      	cmp	r3, #2
 8020732:	d108      	bne.n	8020746 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020734:	7af9      	ldrb	r1, [r7, #11]
 8020736:	233a      	movs	r3, #58	; 0x3a
 8020738:	2202      	movs	r2, #2
 802073a:	68f8      	ldr	r0, [r7, #12]
 802073c:	f7ff fe6d 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020740:	f04f 33ff 	mov.w	r3, #4294967295
 8020744:	e071      	b.n	802082a <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020746:	68fb      	ldr	r3, [r7, #12]
 8020748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802074c:	689b      	ldr	r3, [r3, #8]
 802074e:	7afa      	ldrb	r2, [r7, #11]
 8020750:	4610      	mov	r0, r2
 8020752:	4798      	blx	r3
 8020754:	4603      	mov	r3, r0
 8020756:	2b00      	cmp	r3, #0
 8020758:	d008      	beq.n	802076c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802075a:	7af9      	ldrb	r1, [r7, #11]
 802075c:	233a      	movs	r3, #58	; 0x3a
 802075e:	2202      	movs	r2, #2
 8020760:	68f8      	ldr	r0, [r7, #12]
 8020762:	f7ff fe5a 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020766:	f04f 33ff 	mov.w	r3, #4294967295
 802076a:	e05e      	b.n	802082a <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	3302      	adds	r3, #2
 8020770:	781b      	ldrb	r3, [r3, #0]
 8020772:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	3303      	adds	r3, #3
 8020778:	781b      	ldrb	r3, [r3, #0]
 802077a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802077c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	3304      	adds	r3, #4
 8020782:	781b      	ldrb	r3, [r3, #0]
 8020784:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020786:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020788:	687a      	ldr	r2, [r7, #4]
 802078a:	3205      	adds	r2, #5
 802078c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 802078e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020790:	697b      	ldr	r3, [r7, #20]
 8020792:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	3306      	adds	r3, #6
 802079a:	781b      	ldrb	r3, [r3, #0]
 802079c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	3307      	adds	r3, #7
 80207a2:	781b      	ldrb	r3, [r3, #0]
 80207a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80207a6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	3308      	adds	r3, #8
 80207ac:	781b      	ldrb	r3, [r3, #0]
 80207ae:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80207b0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80207b2:	687a      	ldr	r2, [r7, #4]
 80207b4:	3209      	adds	r2, #9
 80207b6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80207b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80207ba:	697b      	ldr	r3, [r7, #20]
 80207bc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80207c0:	697b      	ldr	r3, [r7, #20]
 80207c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80207c6:	697b      	ldr	r3, [r7, #20]
 80207c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80207cc:	7af9      	ldrb	r1, [r7, #11]
 80207ce:	68f8      	ldr	r0, [r7, #12]
 80207d0:	f000 fa02 	bl	8020bd8 <SCSI_CheckAddressRange>
 80207d4:	4603      	mov	r3, r0
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	da02      	bge.n	80207e0 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80207da:	f04f 33ff 	mov.w	r3, #4294967295
 80207de:	e024      	b.n	802082a <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80207e0:	697b      	ldr	r3, [r7, #20]
 80207e2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80207e6:	697b      	ldr	r3, [r7, #20]
 80207e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80207ec:	6979      	ldr	r1, [r7, #20]
 80207ee:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80207f2:	fb01 f303 	mul.w	r3, r1, r3
 80207f6:	429a      	cmp	r2, r3
 80207f8:	d00a      	beq.n	8020810 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207fa:	697b      	ldr	r3, [r7, #20]
 80207fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020800:	2320      	movs	r3, #32
 8020802:	2205      	movs	r2, #5
 8020804:	68f8      	ldr	r0, [r7, #12]
 8020806:	f7ff fe08 	bl	802041a <SCSI_SenseCode>
      return -1;
 802080a:	f04f 33ff 	mov.w	r3, #4294967295
 802080e:	e00c      	b.n	802082a <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020810:	697b      	ldr	r3, [r7, #20]
 8020812:	2202      	movs	r2, #2
 8020814:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020816:	697b      	ldr	r3, [r7, #20]
 8020818:	f44f 7200 	mov.w	r2, #512	; 0x200
 802081c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 802081e:	7afb      	ldrb	r3, [r7, #11]
 8020820:	4619      	mov	r1, r3
 8020822:	68f8      	ldr	r0, [r7, #12]
 8020824:	f000 fa00 	bl	8020c28 <SCSI_ProcessRead>
 8020828:	4603      	mov	r3, r0
}
 802082a:	4618      	mov	r0, r3
 802082c:	3718      	adds	r7, #24
 802082e:	46bd      	mov	sp, r7
 8020830:	bd80      	pop	{r7, pc}

08020832 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020832:	b580      	push	{r7, lr}
 8020834:	b086      	sub	sp, #24
 8020836:	af00      	add	r7, sp, #0
 8020838:	60f8      	str	r0, [r7, #12]
 802083a:	460b      	mov	r3, r1
 802083c:	607a      	str	r2, [r7, #4]
 802083e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020846:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020848:	697b      	ldr	r3, [r7, #20]
 802084a:	2b00      	cmp	r3, #0
 802084c:	d102      	bne.n	8020854 <SCSI_Write10+0x22>
  {
    return -1;
 802084e:	f04f 33ff 	mov.w	r3, #4294967295
 8020852:	e0af      	b.n	80209b4 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020854:	697b      	ldr	r3, [r7, #20]
 8020856:	7a1b      	ldrb	r3, [r3, #8]
 8020858:	2b00      	cmp	r3, #0
 802085a:	f040 80a5 	bne.w	80209a8 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 802085e:	697b      	ldr	r3, [r7, #20]
 8020860:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020864:	2b00      	cmp	r3, #0
 8020866:	d10a      	bne.n	802087e <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020868:	697b      	ldr	r3, [r7, #20]
 802086a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802086e:	2320      	movs	r3, #32
 8020870:	2205      	movs	r2, #5
 8020872:	68f8      	ldr	r0, [r7, #12]
 8020874:	f7ff fdd1 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020878:	f04f 33ff 	mov.w	r3, #4294967295
 802087c:	e09a      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 802087e:	697b      	ldr	r3, [r7, #20]
 8020880:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020884:	b25b      	sxtb	r3, r3
 8020886:	2b00      	cmp	r3, #0
 8020888:	da0a      	bge.n	80208a0 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802088a:	697b      	ldr	r3, [r7, #20]
 802088c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020890:	2320      	movs	r3, #32
 8020892:	2205      	movs	r2, #5
 8020894:	68f8      	ldr	r0, [r7, #12]
 8020896:	f7ff fdc0 	bl	802041a <SCSI_SenseCode>
      return -1;
 802089a:	f04f 33ff 	mov.w	r3, #4294967295
 802089e:	e089      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80208a0:	68fb      	ldr	r3, [r7, #12]
 80208a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80208a6:	689b      	ldr	r3, [r3, #8]
 80208a8:	7afa      	ldrb	r2, [r7, #11]
 80208aa:	4610      	mov	r0, r2
 80208ac:	4798      	blx	r3
 80208ae:	4603      	mov	r3, r0
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d008      	beq.n	80208c6 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80208b4:	7af9      	ldrb	r1, [r7, #11]
 80208b6:	233a      	movs	r3, #58	; 0x3a
 80208b8:	2202      	movs	r2, #2
 80208ba:	68f8      	ldr	r0, [r7, #12]
 80208bc:	f7ff fdad 	bl	802041a <SCSI_SenseCode>
      return -1;
 80208c0:	f04f 33ff 	mov.w	r3, #4294967295
 80208c4:	e076      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80208cc:	68db      	ldr	r3, [r3, #12]
 80208ce:	7afa      	ldrb	r2, [r7, #11]
 80208d0:	4610      	mov	r0, r2
 80208d2:	4798      	blx	r3
 80208d4:	4603      	mov	r3, r0
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d008      	beq.n	80208ec <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80208da:	7af9      	ldrb	r1, [r7, #11]
 80208dc:	2327      	movs	r3, #39	; 0x27
 80208de:	2202      	movs	r2, #2
 80208e0:	68f8      	ldr	r0, [r7, #12]
 80208e2:	f7ff fd9a 	bl	802041a <SCSI_SenseCode>
      return -1;
 80208e6:	f04f 33ff 	mov.w	r3, #4294967295
 80208ea:	e063      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	3302      	adds	r3, #2
 80208f0:	781b      	ldrb	r3, [r3, #0]
 80208f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	3303      	adds	r3, #3
 80208f8:	781b      	ldrb	r3, [r3, #0]
 80208fa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80208fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80208fe:	687b      	ldr	r3, [r7, #4]
 8020900:	3304      	adds	r3, #4
 8020902:	781b      	ldrb	r3, [r3, #0]
 8020904:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020906:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020908:	687a      	ldr	r2, [r7, #4]
 802090a:	3205      	adds	r2, #5
 802090c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 802090e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020910:	697b      	ldr	r3, [r7, #20]
 8020912:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	3307      	adds	r3, #7
 802091a:	781b      	ldrb	r3, [r3, #0]
 802091c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 802091e:	687a      	ldr	r2, [r7, #4]
 8020920:	3208      	adds	r2, #8
 8020922:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020924:	431a      	orrs	r2, r3
 8020926:	697b      	ldr	r3, [r7, #20]
 8020928:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802092c:	697b      	ldr	r3, [r7, #20]
 802092e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020932:	697b      	ldr	r3, [r7, #20]
 8020934:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020938:	7af9      	ldrb	r1, [r7, #11]
 802093a:	68f8      	ldr	r0, [r7, #12]
 802093c:	f000 f94c 	bl	8020bd8 <SCSI_CheckAddressRange>
 8020940:	4603      	mov	r3, r0
 8020942:	2b00      	cmp	r3, #0
 8020944:	da02      	bge.n	802094c <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020946:	f04f 33ff 	mov.w	r3, #4294967295
 802094a:	e033      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 802094c:	697b      	ldr	r3, [r7, #20]
 802094e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020952:	697a      	ldr	r2, [r7, #20]
 8020954:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020958:	fb02 f303 	mul.w	r3, r2, r3
 802095c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 802095e:	697b      	ldr	r3, [r7, #20]
 8020960:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020964:	693a      	ldr	r2, [r7, #16]
 8020966:	429a      	cmp	r2, r3
 8020968:	d00a      	beq.n	8020980 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802096a:	697b      	ldr	r3, [r7, #20]
 802096c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020970:	2320      	movs	r3, #32
 8020972:	2205      	movs	r2, #5
 8020974:	68f8      	ldr	r0, [r7, #12]
 8020976:	f7ff fd50 	bl	802041a <SCSI_SenseCode>
      return -1;
 802097a:	f04f 33ff 	mov.w	r3, #4294967295
 802097e:	e019      	b.n	80209b4 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020980:	693b      	ldr	r3, [r7, #16]
 8020982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020986:	bf28      	it	cs
 8020988:	f44f 7300 	movcs.w	r3, #512	; 0x200
 802098c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 802098e:	697b      	ldr	r3, [r7, #20]
 8020990:	2201      	movs	r2, #1
 8020992:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020994:	697b      	ldr	r3, [r7, #20]
 8020996:	f103 0210 	add.w	r2, r3, #16
 802099a:	693b      	ldr	r3, [r7, #16]
 802099c:	2101      	movs	r1, #1
 802099e:	68f8      	ldr	r0, [r7, #12]
 80209a0:	f002 f87f 	bl	8022aa2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80209a4:	2300      	movs	r3, #0
 80209a6:	e005      	b.n	80209b4 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 80209a8:	7afb      	ldrb	r3, [r7, #11]
 80209aa:	4619      	mov	r1, r3
 80209ac:	68f8      	ldr	r0, [r7, #12]
 80209ae:	f000 f9b4 	bl	8020d1a <SCSI_ProcessWrite>
 80209b2:	4603      	mov	r3, r0
}
 80209b4:	4618      	mov	r0, r3
 80209b6:	3718      	adds	r7, #24
 80209b8:	46bd      	mov	sp, r7
 80209ba:	bd80      	pop	{r7, pc}

080209bc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80209bc:	b580      	push	{r7, lr}
 80209be:	b086      	sub	sp, #24
 80209c0:	af00      	add	r7, sp, #0
 80209c2:	60f8      	str	r0, [r7, #12]
 80209c4:	460b      	mov	r3, r1
 80209c6:	607a      	str	r2, [r7, #4]
 80209c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80209ca:	68fb      	ldr	r3, [r7, #12]
 80209cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80209d0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80209d2:	697b      	ldr	r3, [r7, #20]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d102      	bne.n	80209de <SCSI_Write12+0x22>
  {
    return -1;
 80209d8:	f04f 33ff 	mov.w	r3, #4294967295
 80209dc:	e0bf      	b.n	8020b5e <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	7a1b      	ldrb	r3, [r3, #8]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	f040 80b5 	bne.w	8020b52 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80209e8:	697b      	ldr	r3, [r7, #20]
 80209ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	d10a      	bne.n	8020a08 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80209f2:	697b      	ldr	r3, [r7, #20]
 80209f4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80209f8:	2320      	movs	r3, #32
 80209fa:	2205      	movs	r2, #5
 80209fc:	68f8      	ldr	r0, [r7, #12]
 80209fe:	f7ff fd0c 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020a02:	f04f 33ff 	mov.w	r3, #4294967295
 8020a06:	e0aa      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020a08:	697b      	ldr	r3, [r7, #20]
 8020a0a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020a0e:	b25b      	sxtb	r3, r3
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	da0a      	bge.n	8020a2a <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a14:	697b      	ldr	r3, [r7, #20]
 8020a16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a1a:	2320      	movs	r3, #32
 8020a1c:	2205      	movs	r2, #5
 8020a1e:	68f8      	ldr	r0, [r7, #12]
 8020a20:	f7ff fcfb 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020a24:	f04f 33ff 	mov.w	r3, #4294967295
 8020a28:	e099      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a30:	689b      	ldr	r3, [r3, #8]
 8020a32:	7afa      	ldrb	r2, [r7, #11]
 8020a34:	4610      	mov	r0, r2
 8020a36:	4798      	blx	r3
 8020a38:	4603      	mov	r3, r0
 8020a3a:	2b00      	cmp	r3, #0
 8020a3c:	d00b      	beq.n	8020a56 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020a3e:	7af9      	ldrb	r1, [r7, #11]
 8020a40:	233a      	movs	r3, #58	; 0x3a
 8020a42:	2202      	movs	r2, #2
 8020a44:	68f8      	ldr	r0, [r7, #12]
 8020a46:	f7ff fce8 	bl	802041a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020a4a:	697b      	ldr	r3, [r7, #20]
 8020a4c:	2205      	movs	r2, #5
 8020a4e:	721a      	strb	r2, [r3, #8]
      return -1;
 8020a50:	f04f 33ff 	mov.w	r3, #4294967295
 8020a54:	e083      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020a56:	68fb      	ldr	r3, [r7, #12]
 8020a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020a5c:	68db      	ldr	r3, [r3, #12]
 8020a5e:	7afa      	ldrb	r2, [r7, #11]
 8020a60:	4610      	mov	r0, r2
 8020a62:	4798      	blx	r3
 8020a64:	4603      	mov	r3, r0
 8020a66:	2b00      	cmp	r3, #0
 8020a68:	d00b      	beq.n	8020a82 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020a6a:	7af9      	ldrb	r1, [r7, #11]
 8020a6c:	2327      	movs	r3, #39	; 0x27
 8020a6e:	2202      	movs	r2, #2
 8020a70:	68f8      	ldr	r0, [r7, #12]
 8020a72:	f7ff fcd2 	bl	802041a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020a76:	697b      	ldr	r3, [r7, #20]
 8020a78:	2205      	movs	r2, #5
 8020a7a:	721a      	strb	r2, [r3, #8]
      return -1;
 8020a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8020a80:	e06d      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	3302      	adds	r3, #2
 8020a86:	781b      	ldrb	r3, [r3, #0]
 8020a88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	3303      	adds	r3, #3
 8020a8e:	781b      	ldrb	r3, [r3, #0]
 8020a90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020a92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	3304      	adds	r3, #4
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020a9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020a9e:	687a      	ldr	r2, [r7, #4]
 8020aa0:	3205      	adds	r2, #5
 8020aa2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020aa4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	3306      	adds	r3, #6
 8020ab0:	781b      	ldrb	r3, [r3, #0]
 8020ab2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	3307      	adds	r3, #7
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020abc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	3308      	adds	r3, #8
 8020ac2:	781b      	ldrb	r3, [r3, #0]
 8020ac4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020ac6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020ac8:	687a      	ldr	r2, [r7, #4]
 8020aca:	3209      	adds	r2, #9
 8020acc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020ace:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020ad0:	697b      	ldr	r3, [r7, #20]
 8020ad2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020ad6:	697b      	ldr	r3, [r7, #20]
 8020ad8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ae2:	7af9      	ldrb	r1, [r7, #11]
 8020ae4:	68f8      	ldr	r0, [r7, #12]
 8020ae6:	f000 f877 	bl	8020bd8 <SCSI_CheckAddressRange>
 8020aea:	4603      	mov	r3, r0
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	da02      	bge.n	8020af6 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020af0:	f04f 33ff 	mov.w	r3, #4294967295
 8020af4:	e033      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020af6:	697b      	ldr	r3, [r7, #20]
 8020af8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020afc:	697a      	ldr	r2, [r7, #20]
 8020afe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020b02:	fb02 f303 	mul.w	r3, r2, r3
 8020b06:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020b08:	697b      	ldr	r3, [r7, #20]
 8020b0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020b0e:	693a      	ldr	r2, [r7, #16]
 8020b10:	429a      	cmp	r2, r3
 8020b12:	d00a      	beq.n	8020b2a <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020b14:	697b      	ldr	r3, [r7, #20]
 8020b16:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020b1a:	2320      	movs	r3, #32
 8020b1c:	2205      	movs	r2, #5
 8020b1e:	68f8      	ldr	r0, [r7, #12]
 8020b20:	f7ff fc7b 	bl	802041a <SCSI_SenseCode>
      return -1;
 8020b24:	f04f 33ff 	mov.w	r3, #4294967295
 8020b28:	e019      	b.n	8020b5e <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020b2a:	693b      	ldr	r3, [r7, #16]
 8020b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b30:	bf28      	it	cs
 8020b32:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020b36:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020b38:	697b      	ldr	r3, [r7, #20]
 8020b3a:	2201      	movs	r2, #1
 8020b3c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020b3e:	697b      	ldr	r3, [r7, #20]
 8020b40:	f103 0210 	add.w	r2, r3, #16
 8020b44:	693b      	ldr	r3, [r7, #16]
 8020b46:	2101      	movs	r1, #1
 8020b48:	68f8      	ldr	r0, [r7, #12]
 8020b4a:	f001 ffaa 	bl	8022aa2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020b4e:	2300      	movs	r3, #0
 8020b50:	e005      	b.n	8020b5e <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020b52:	7afb      	ldrb	r3, [r7, #11]
 8020b54:	4619      	mov	r1, r3
 8020b56:	68f8      	ldr	r0, [r7, #12]
 8020b58:	f000 f8df 	bl	8020d1a <SCSI_ProcessWrite>
 8020b5c:	4603      	mov	r3, r0
}
 8020b5e:	4618      	mov	r0, r3
 8020b60:	3718      	adds	r7, #24
 8020b62:	46bd      	mov	sp, r7
 8020b64:	bd80      	pop	{r7, pc}

08020b66 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020b66:	b580      	push	{r7, lr}
 8020b68:	b086      	sub	sp, #24
 8020b6a:	af00      	add	r7, sp, #0
 8020b6c:	60f8      	str	r0, [r7, #12]
 8020b6e:	460b      	mov	r3, r1
 8020b70:	607a      	str	r2, [r7, #4]
 8020b72:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020b74:	68fb      	ldr	r3, [r7, #12]
 8020b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020b7a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b7c:	697b      	ldr	r3, [r7, #20]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d102      	bne.n	8020b88 <SCSI_Verify10+0x22>
  {
    return -1;
 8020b82:	f04f 33ff 	mov.w	r3, #4294967295
 8020b86:	e023      	b.n	8020bd0 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	781b      	ldrb	r3, [r3, #0]
 8020b8e:	f003 0302 	and.w	r3, r3, #2
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	d008      	beq.n	8020ba8 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020b96:	7af9      	ldrb	r1, [r7, #11]
 8020b98:	2324      	movs	r3, #36	; 0x24
 8020b9a:	2205      	movs	r2, #5
 8020b9c:	68f8      	ldr	r0, [r7, #12]
 8020b9e:	f7ff fc3c 	bl	802041a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8020ba6:	e013      	b.n	8020bd0 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020ba8:	697b      	ldr	r3, [r7, #20]
 8020baa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020bae:	697b      	ldr	r3, [r7, #20]
 8020bb0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020bb4:	7af9      	ldrb	r1, [r7, #11]
 8020bb6:	68f8      	ldr	r0, [r7, #12]
 8020bb8:	f000 f80e 	bl	8020bd8 <SCSI_CheckAddressRange>
 8020bbc:	4603      	mov	r3, r0
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	da02      	bge.n	8020bc8 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8020bc6:	e003      	b.n	8020bd0 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020bc8:	697b      	ldr	r3, [r7, #20]
 8020bca:	2200      	movs	r2, #0
 8020bcc:	60da      	str	r2, [r3, #12]

  return 0;
 8020bce:	2300      	movs	r3, #0
}
 8020bd0:	4618      	mov	r0, r3
 8020bd2:	3718      	adds	r7, #24
 8020bd4:	46bd      	mov	sp, r7
 8020bd6:	bd80      	pop	{r7, pc}

08020bd8 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020bd8:	b580      	push	{r7, lr}
 8020bda:	b086      	sub	sp, #24
 8020bdc:	af00      	add	r7, sp, #0
 8020bde:	60f8      	str	r0, [r7, #12]
 8020be0:	607a      	str	r2, [r7, #4]
 8020be2:	603b      	str	r3, [r7, #0]
 8020be4:	460b      	mov	r3, r1
 8020be6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020bee:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d102      	bne.n	8020bfc <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bfa:	e011      	b.n	8020c20 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020bfc:	687a      	ldr	r2, [r7, #4]
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	441a      	add	r2, r3
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020c08:	429a      	cmp	r2, r3
 8020c0a:	d908      	bls.n	8020c1e <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020c0c:	7af9      	ldrb	r1, [r7, #11]
 8020c0e:	2321      	movs	r3, #33	; 0x21
 8020c10:	2205      	movs	r2, #5
 8020c12:	68f8      	ldr	r0, [r7, #12]
 8020c14:	f7ff fc01 	bl	802041a <SCSI_SenseCode>
    return -1;
 8020c18:	f04f 33ff 	mov.w	r3, #4294967295
 8020c1c:	e000      	b.n	8020c20 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020c1e:	2300      	movs	r3, #0
}
 8020c20:	4618      	mov	r0, r3
 8020c22:	3718      	adds	r7, #24
 8020c24:	46bd      	mov	sp, r7
 8020c26:	bd80      	pop	{r7, pc}

08020c28 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020c28:	b590      	push	{r4, r7, lr}
 8020c2a:	b085      	sub	sp, #20
 8020c2c:	af00      	add	r7, sp, #0
 8020c2e:	6078      	str	r0, [r7, #4]
 8020c30:	460b      	mov	r3, r1
 8020c32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c3a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c42:	68fa      	ldr	r2, [r7, #12]
 8020c44:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020c48:	fb02 f303 	mul.w	r3, r2, r3
 8020c4c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020c4e:	68fb      	ldr	r3, [r7, #12]
 8020c50:	2b00      	cmp	r3, #0
 8020c52:	d102      	bne.n	8020c5a <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020c54:	f04f 33ff 	mov.w	r3, #4294967295
 8020c58:	e05b      	b.n	8020d12 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020c5a:	68bb      	ldr	r3, [r7, #8]
 8020c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020c60:	bf28      	it	cs
 8020c62:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020c66:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020c6e:	691c      	ldr	r4, [r3, #16]
 8020c70:	68fb      	ldr	r3, [r7, #12]
 8020c72:	f103 0110 	add.w	r1, r3, #16
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020c7c:	68fb      	ldr	r3, [r7, #12]
 8020c7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020c82:	4618      	mov	r0, r3
 8020c84:	68bb      	ldr	r3, [r7, #8]
 8020c86:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	78f8      	ldrb	r0, [r7, #3]
 8020c8e:	47a0      	blx	r4
 8020c90:	4603      	mov	r3, r0
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	da08      	bge.n	8020ca8 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020c96:	78f9      	ldrb	r1, [r7, #3]
 8020c98:	2311      	movs	r3, #17
 8020c9a:	2204      	movs	r2, #4
 8020c9c:	6878      	ldr	r0, [r7, #4]
 8020c9e:	f7ff fbbc 	bl	802041a <SCSI_SenseCode>
    return -1;
 8020ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8020ca6:	e034      	b.n	8020d12 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	f103 0210 	add.w	r2, r3, #16
 8020cae:	68bb      	ldr	r3, [r7, #8]
 8020cb0:	2181      	movs	r1, #129	; 0x81
 8020cb2:	6878      	ldr	r0, [r7, #4]
 8020cb4:	f001 fed4 	bl	8022a60 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020cb8:	68fb      	ldr	r3, [r7, #12]
 8020cba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020cbe:	68fb      	ldr	r3, [r7, #12]
 8020cc0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020cc4:	4619      	mov	r1, r3
 8020cc6:	68bb      	ldr	r3, [r7, #8]
 8020cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ccc:	441a      	add	r2, r3
 8020cce:	68fb      	ldr	r3, [r7, #12]
 8020cd0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020ce0:	4619      	mov	r1, r3
 8020ce2:	68bb      	ldr	r3, [r7, #8]
 8020ce4:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ce8:	1ad2      	subs	r2, r2, r3
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020cf0:	68fb      	ldr	r3, [r7, #12]
 8020cf2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020cf6:	68bb      	ldr	r3, [r7, #8]
 8020cf8:	1ad2      	subs	r2, r2, r3
 8020cfa:	68fb      	ldr	r3, [r7, #12]
 8020cfc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020d00:	68fb      	ldr	r3, [r7, #12]
 8020d02:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d102      	bne.n	8020d10 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	2203      	movs	r2, #3
 8020d0e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020d10:	2300      	movs	r3, #0
}
 8020d12:	4618      	mov	r0, r3
 8020d14:	3714      	adds	r7, #20
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd90      	pop	{r4, r7, pc}

08020d1a <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020d1a:	b590      	push	{r4, r7, lr}
 8020d1c:	b085      	sub	sp, #20
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
 8020d22:	460b      	mov	r3, r1
 8020d24:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020d26:	687b      	ldr	r3, [r7, #4]
 8020d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020d2c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d34:	68fa      	ldr	r2, [r7, #12]
 8020d36:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d3a:	fb02 f303 	mul.w	r3, r2, r3
 8020d3e:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020d40:	68fb      	ldr	r3, [r7, #12]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d102      	bne.n	8020d4c <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020d46:	f04f 33ff 	mov.w	r3, #4294967295
 8020d4a:	e06b      	b.n	8020e24 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020d4c:	68bb      	ldr	r3, [r7, #8]
 8020d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d52:	bf28      	it	cs
 8020d54:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d58:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020d60:	695c      	ldr	r4, [r3, #20]
 8020d62:	68fb      	ldr	r3, [r7, #12]
 8020d64:	f103 0110 	add.w	r1, r3, #16
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020d6e:	68fb      	ldr	r3, [r7, #12]
 8020d70:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d74:	4618      	mov	r0, r3
 8020d76:	68bb      	ldr	r3, [r7, #8]
 8020d78:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020d7c:	b29b      	uxth	r3, r3
 8020d7e:	78f8      	ldrb	r0, [r7, #3]
 8020d80:	47a0      	blx	r4
 8020d82:	4603      	mov	r3, r0
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	da08      	bge.n	8020d9a <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020d88:	78f9      	ldrb	r1, [r7, #3]
 8020d8a:	2303      	movs	r3, #3
 8020d8c:	2204      	movs	r2, #4
 8020d8e:	6878      	ldr	r0, [r7, #4]
 8020d90:	f7ff fb43 	bl	802041a <SCSI_SenseCode>
    return -1;
 8020d94:	f04f 33ff 	mov.w	r3, #4294967295
 8020d98:	e044      	b.n	8020e24 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020da0:	68fb      	ldr	r3, [r7, #12]
 8020da2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020da6:	4619      	mov	r1, r3
 8020da8:	68bb      	ldr	r3, [r7, #8]
 8020daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8020dae:	441a      	add	r2, r3
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020db6:	68fb      	ldr	r3, [r7, #12]
 8020db8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020dbc:	68fb      	ldr	r3, [r7, #12]
 8020dbe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020dc2:	4619      	mov	r1, r3
 8020dc4:	68bb      	ldr	r3, [r7, #8]
 8020dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8020dca:	1ad2      	subs	r2, r2, r3
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020dd8:	68bb      	ldr	r3, [r7, #8]
 8020dda:	1ad2      	subs	r2, r2, r3
 8020ddc:	68fb      	ldr	r3, [r7, #12]
 8020dde:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020de2:	68fb      	ldr	r3, [r7, #12]
 8020de4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	d104      	bne.n	8020df6 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020dec:	2100      	movs	r1, #0
 8020dee:	6878      	ldr	r0, [r7, #4]
 8020df0:	f7fe fdd8 	bl	801f9a4 <MSC_BOT_SendCSW>
 8020df4:	e015      	b.n	8020e22 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020df6:	68fb      	ldr	r3, [r7, #12]
 8020df8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020dfc:	68fa      	ldr	r2, [r7, #12]
 8020dfe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020e02:	fb02 f303 	mul.w	r3, r2, r3
 8020e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e0a:	bf28      	it	cs
 8020e0c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020e10:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020e12:	68fb      	ldr	r3, [r7, #12]
 8020e14:	f103 0210 	add.w	r2, r3, #16
 8020e18:	68bb      	ldr	r3, [r7, #8]
 8020e1a:	2101      	movs	r1, #1
 8020e1c:	6878      	ldr	r0, [r7, #4]
 8020e1e:	f001 fe40 	bl	8022aa2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8020e22:	2300      	movs	r3, #0
}
 8020e24:	4618      	mov	r0, r3
 8020e26:	3714      	adds	r7, #20
 8020e28:	46bd      	mov	sp, r7
 8020e2a:	bd90      	pop	{r4, r7, pc}

08020e2c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020e2c:	b480      	push	{r7}
 8020e2e:	b087      	sub	sp, #28
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	60f8      	str	r0, [r7, #12]
 8020e34:	60b9      	str	r1, [r7, #8]
 8020e36:	4613      	mov	r3, r2
 8020e38:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020e3a:	88fb      	ldrh	r3, [r7, #6]
 8020e3c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020e3e:	68fb      	ldr	r3, [r7, #12]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d102      	bne.n	8020e4a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020e44:	f04f 33ff 	mov.w	r3, #4294967295
 8020e48:	e013      	b.n	8020e72 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020e4a:	8afa      	ldrh	r2, [r7, #22]
 8020e4c:	68fb      	ldr	r3, [r7, #12]
 8020e4e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020e50:	e00b      	b.n	8020e6a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020e52:	8afb      	ldrh	r3, [r7, #22]
 8020e54:	3b01      	subs	r3, #1
 8020e56:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020e58:	8afb      	ldrh	r3, [r7, #22]
 8020e5a:	68ba      	ldr	r2, [r7, #8]
 8020e5c:	441a      	add	r2, r3
 8020e5e:	8afb      	ldrh	r3, [r7, #22]
 8020e60:	7811      	ldrb	r1, [r2, #0]
 8020e62:	68fa      	ldr	r2, [r7, #12]
 8020e64:	4413      	add	r3, r2
 8020e66:	460a      	mov	r2, r1
 8020e68:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020e6a:	8afb      	ldrh	r3, [r7, #22]
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	d1f0      	bne.n	8020e52 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020e70:	2300      	movs	r3, #0
}
 8020e72:	4618      	mov	r0, r3
 8020e74:	371c      	adds	r7, #28
 8020e76:	46bd      	mov	sp, r7
 8020e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e7c:	4770      	bx	lr

08020e7e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020e7e:	b580      	push	{r7, lr}
 8020e80:	b086      	sub	sp, #24
 8020e82:	af00      	add	r7, sp, #0
 8020e84:	60f8      	str	r0, [r7, #12]
 8020e86:	60b9      	str	r1, [r7, #8]
 8020e88:	4613      	mov	r3, r2
 8020e8a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d101      	bne.n	8020e96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020e92:	2303      	movs	r3, #3
 8020e94:	e01f      	b.n	8020ed6 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020e96:	68fb      	ldr	r3, [r7, #12]
 8020e98:	2200      	movs	r2, #0
 8020e9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020e9e:	68fb      	ldr	r3, [r7, #12]
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020ea6:	68fb      	ldr	r3, [r7, #12]
 8020ea8:	2200      	movs	r2, #0
 8020eaa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020eae:	68bb      	ldr	r3, [r7, #8]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d003      	beq.n	8020ebc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020eb4:	68fb      	ldr	r3, [r7, #12]
 8020eb6:	68ba      	ldr	r2, [r7, #8]
 8020eb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020ebc:	68fb      	ldr	r3, [r7, #12]
 8020ebe:	2201      	movs	r2, #1
 8020ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020ec4:	68fb      	ldr	r3, [r7, #12]
 8020ec6:	79fa      	ldrb	r2, [r7, #7]
 8020ec8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020eca:	68f8      	ldr	r0, [r7, #12]
 8020ecc:	f001 fc74 	bl	80227b8 <USBD_LL_Init>
 8020ed0:	4603      	mov	r3, r0
 8020ed2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8020ed6:	4618      	mov	r0, r3
 8020ed8:	3718      	adds	r7, #24
 8020eda:	46bd      	mov	sp, r7
 8020edc:	bd80      	pop	{r7, pc}

08020ede <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020ede:	b580      	push	{r7, lr}
 8020ee0:	b084      	sub	sp, #16
 8020ee2:	af00      	add	r7, sp, #0
 8020ee4:	6078      	str	r0, [r7, #4]
 8020ee6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020ee8:	2300      	movs	r3, #0
 8020eea:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d101      	bne.n	8020ef6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020ef2:	2303      	movs	r3, #3
 8020ef4:	e016      	b.n	8020f24 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	683a      	ldr	r2, [r7, #0]
 8020efa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d00b      	beq.n	8020f22 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f12:	f107 020e 	add.w	r2, r7, #14
 8020f16:	4610      	mov	r0, r2
 8020f18:	4798      	blx	r3
 8020f1a:	4602      	mov	r2, r0
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020f22:	2300      	movs	r3, #0
}
 8020f24:	4618      	mov	r0, r3
 8020f26:	3710      	adds	r7, #16
 8020f28:	46bd      	mov	sp, r7
 8020f2a:	bd80      	pop	{r7, pc}

08020f2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020f2c:	b580      	push	{r7, lr}
 8020f2e:	b082      	sub	sp, #8
 8020f30:	af00      	add	r7, sp, #0
 8020f32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020f34:	6878      	ldr	r0, [r7, #4]
 8020f36:	f001 fc8b 	bl	8022850 <USBD_LL_Start>
 8020f3a:	4603      	mov	r3, r0
}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	3708      	adds	r7, #8
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}

08020f44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020f44:	b480      	push	{r7}
 8020f46:	b083      	sub	sp, #12
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020f4c:	2300      	movs	r3, #0
}
 8020f4e:	4618      	mov	r0, r3
 8020f50:	370c      	adds	r7, #12
 8020f52:	46bd      	mov	sp, r7
 8020f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f58:	4770      	bx	lr

08020f5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020f5a:	b580      	push	{r7, lr}
 8020f5c:	b084      	sub	sp, #16
 8020f5e:	af00      	add	r7, sp, #0
 8020f60:	6078      	str	r0, [r7, #4]
 8020f62:	460b      	mov	r3, r1
 8020f64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020f66:	2303      	movs	r3, #3
 8020f68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d009      	beq.n	8020f88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	78fa      	ldrb	r2, [r7, #3]
 8020f7e:	4611      	mov	r1, r2
 8020f80:	6878      	ldr	r0, [r7, #4]
 8020f82:	4798      	blx	r3
 8020f84:	4603      	mov	r3, r0
 8020f86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8020f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	3710      	adds	r7, #16
 8020f8e:	46bd      	mov	sp, r7
 8020f90:	bd80      	pop	{r7, pc}

08020f92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020f92:	b580      	push	{r7, lr}
 8020f94:	b082      	sub	sp, #8
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
 8020f9a:	460b      	mov	r3, r1
 8020f9c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d007      	beq.n	8020fb8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fae:	685b      	ldr	r3, [r3, #4]
 8020fb0:	78fa      	ldrb	r2, [r7, #3]
 8020fb2:	4611      	mov	r1, r2
 8020fb4:	6878      	ldr	r0, [r7, #4]
 8020fb6:	4798      	blx	r3
  }

  return USBD_OK;
 8020fb8:	2300      	movs	r3, #0
}
 8020fba:	4618      	mov	r0, r3
 8020fbc:	3708      	adds	r7, #8
 8020fbe:	46bd      	mov	sp, r7
 8020fc0:	bd80      	pop	{r7, pc}

08020fc2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020fc2:	b580      	push	{r7, lr}
 8020fc4:	b084      	sub	sp, #16
 8020fc6:	af00      	add	r7, sp, #0
 8020fc8:	6078      	str	r0, [r7, #4]
 8020fca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020fd2:	6839      	ldr	r1, [r7, #0]
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f000 ffb9 	bl	8021f4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	2201      	movs	r2, #1
 8020fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8020fe8:	461a      	mov	r2, r3
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020ff6:	f003 031f 	and.w	r3, r3, #31
 8020ffa:	2b02      	cmp	r3, #2
 8020ffc:	d01a      	beq.n	8021034 <USBD_LL_SetupStage+0x72>
 8020ffe:	2b02      	cmp	r3, #2
 8021000:	d822      	bhi.n	8021048 <USBD_LL_SetupStage+0x86>
 8021002:	2b00      	cmp	r3, #0
 8021004:	d002      	beq.n	802100c <USBD_LL_SetupStage+0x4a>
 8021006:	2b01      	cmp	r3, #1
 8021008:	d00a      	beq.n	8021020 <USBD_LL_SetupStage+0x5e>
 802100a:	e01d      	b.n	8021048 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021012:	4619      	mov	r1, r3
 8021014:	6878      	ldr	r0, [r7, #4]
 8021016:	f000 fa61 	bl	80214dc <USBD_StdDevReq>
 802101a:	4603      	mov	r3, r0
 802101c:	73fb      	strb	r3, [r7, #15]
      break;
 802101e:	e020      	b.n	8021062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021026:	4619      	mov	r1, r3
 8021028:	6878      	ldr	r0, [r7, #4]
 802102a:	f000 fac5 	bl	80215b8 <USBD_StdItfReq>
 802102e:	4603      	mov	r3, r0
 8021030:	73fb      	strb	r3, [r7, #15]
      break;
 8021032:	e016      	b.n	8021062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802103a:	4619      	mov	r1, r3
 802103c:	6878      	ldr	r0, [r7, #4]
 802103e:	f000 fb04 	bl	802164a <USBD_StdEPReq>
 8021042:	4603      	mov	r3, r0
 8021044:	73fb      	strb	r3, [r7, #15]
      break;
 8021046:	e00c      	b.n	8021062 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802104e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021052:	b2db      	uxtb	r3, r3
 8021054:	4619      	mov	r1, r3
 8021056:	6878      	ldr	r0, [r7, #4]
 8021058:	f001 fc79 	bl	802294e <USBD_LL_StallEP>
 802105c:	4603      	mov	r3, r0
 802105e:	73fb      	strb	r3, [r7, #15]
      break;
 8021060:	bf00      	nop
  }

  return ret;
 8021062:	7bfb      	ldrb	r3, [r7, #15]
}
 8021064:	4618      	mov	r0, r3
 8021066:	3710      	adds	r7, #16
 8021068:	46bd      	mov	sp, r7
 802106a:	bd80      	pop	{r7, pc}

0802106c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802106c:	b580      	push	{r7, lr}
 802106e:	b086      	sub	sp, #24
 8021070:	af00      	add	r7, sp, #0
 8021072:	60f8      	str	r0, [r7, #12]
 8021074:	460b      	mov	r3, r1
 8021076:	607a      	str	r2, [r7, #4]
 8021078:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802107a:	7afb      	ldrb	r3, [r7, #11]
 802107c:	2b00      	cmp	r3, #0
 802107e:	d138      	bne.n	80210f2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021080:	68fb      	ldr	r3, [r7, #12]
 8021082:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8021086:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802108e:	2b03      	cmp	r3, #3
 8021090:	d14a      	bne.n	8021128 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8021092:	693b      	ldr	r3, [r7, #16]
 8021094:	689a      	ldr	r2, [r3, #8]
 8021096:	693b      	ldr	r3, [r7, #16]
 8021098:	68db      	ldr	r3, [r3, #12]
 802109a:	429a      	cmp	r2, r3
 802109c:	d913      	bls.n	80210c6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802109e:	693b      	ldr	r3, [r7, #16]
 80210a0:	689a      	ldr	r2, [r3, #8]
 80210a2:	693b      	ldr	r3, [r7, #16]
 80210a4:	68db      	ldr	r3, [r3, #12]
 80210a6:	1ad2      	subs	r2, r2, r3
 80210a8:	693b      	ldr	r3, [r7, #16]
 80210aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80210ac:	693b      	ldr	r3, [r7, #16]
 80210ae:	68da      	ldr	r2, [r3, #12]
 80210b0:	693b      	ldr	r3, [r7, #16]
 80210b2:	689b      	ldr	r3, [r3, #8]
 80210b4:	4293      	cmp	r3, r2
 80210b6:	bf28      	it	cs
 80210b8:	4613      	movcs	r3, r2
 80210ba:	461a      	mov	r2, r3
 80210bc:	6879      	ldr	r1, [r7, #4]
 80210be:	68f8      	ldr	r0, [r7, #12]
 80210c0:	f001 f81b 	bl	80220fa <USBD_CtlContinueRx>
 80210c4:	e030      	b.n	8021128 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210cc:	b2db      	uxtb	r3, r3
 80210ce:	2b03      	cmp	r3, #3
 80210d0:	d10b      	bne.n	80210ea <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80210d2:	68fb      	ldr	r3, [r7, #12]
 80210d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210d8:	691b      	ldr	r3, [r3, #16]
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d005      	beq.n	80210ea <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80210de:	68fb      	ldr	r3, [r7, #12]
 80210e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80210e4:	691b      	ldr	r3, [r3, #16]
 80210e6:	68f8      	ldr	r0, [r7, #12]
 80210e8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80210ea:	68f8      	ldr	r0, [r7, #12]
 80210ec:	f001 f816 	bl	802211c <USBD_CtlSendStatus>
 80210f0:	e01a      	b.n	8021128 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80210f8:	b2db      	uxtb	r3, r3
 80210fa:	2b03      	cmp	r3, #3
 80210fc:	d114      	bne.n	8021128 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80210fe:	68fb      	ldr	r3, [r7, #12]
 8021100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021104:	699b      	ldr	r3, [r3, #24]
 8021106:	2b00      	cmp	r3, #0
 8021108:	d00e      	beq.n	8021128 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 802110a:	68fb      	ldr	r3, [r7, #12]
 802110c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021110:	699b      	ldr	r3, [r3, #24]
 8021112:	7afa      	ldrb	r2, [r7, #11]
 8021114:	4611      	mov	r1, r2
 8021116:	68f8      	ldr	r0, [r7, #12]
 8021118:	4798      	blx	r3
 802111a:	4603      	mov	r3, r0
 802111c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802111e:	7dfb      	ldrb	r3, [r7, #23]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d001      	beq.n	8021128 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8021124:	7dfb      	ldrb	r3, [r7, #23]
 8021126:	e000      	b.n	802112a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8021128:	2300      	movs	r3, #0
}
 802112a:	4618      	mov	r0, r3
 802112c:	3718      	adds	r7, #24
 802112e:	46bd      	mov	sp, r7
 8021130:	bd80      	pop	{r7, pc}

08021132 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021132:	b580      	push	{r7, lr}
 8021134:	b086      	sub	sp, #24
 8021136:	af00      	add	r7, sp, #0
 8021138:	60f8      	str	r0, [r7, #12]
 802113a:	460b      	mov	r3, r1
 802113c:	607a      	str	r2, [r7, #4]
 802113e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021140:	7afb      	ldrb	r3, [r7, #11]
 8021142:	2b00      	cmp	r3, #0
 8021144:	d16b      	bne.n	802121e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8021146:	68fb      	ldr	r3, [r7, #12]
 8021148:	3314      	adds	r3, #20
 802114a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021152:	2b02      	cmp	r3, #2
 8021154:	d156      	bne.n	8021204 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021156:	693b      	ldr	r3, [r7, #16]
 8021158:	689a      	ldr	r2, [r3, #8]
 802115a:	693b      	ldr	r3, [r7, #16]
 802115c:	68db      	ldr	r3, [r3, #12]
 802115e:	429a      	cmp	r2, r3
 8021160:	d914      	bls.n	802118c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021162:	693b      	ldr	r3, [r7, #16]
 8021164:	689a      	ldr	r2, [r3, #8]
 8021166:	693b      	ldr	r3, [r7, #16]
 8021168:	68db      	ldr	r3, [r3, #12]
 802116a:	1ad2      	subs	r2, r2, r3
 802116c:	693b      	ldr	r3, [r7, #16]
 802116e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021170:	693b      	ldr	r3, [r7, #16]
 8021172:	689b      	ldr	r3, [r3, #8]
 8021174:	461a      	mov	r2, r3
 8021176:	6879      	ldr	r1, [r7, #4]
 8021178:	68f8      	ldr	r0, [r7, #12]
 802117a:	f000 ffad 	bl	80220d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802117e:	2300      	movs	r3, #0
 8021180:	2200      	movs	r2, #0
 8021182:	2100      	movs	r1, #0
 8021184:	68f8      	ldr	r0, [r7, #12]
 8021186:	f001 fc8c 	bl	8022aa2 <USBD_LL_PrepareReceive>
 802118a:	e03b      	b.n	8021204 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802118c:	693b      	ldr	r3, [r7, #16]
 802118e:	68da      	ldr	r2, [r3, #12]
 8021190:	693b      	ldr	r3, [r7, #16]
 8021192:	689b      	ldr	r3, [r3, #8]
 8021194:	429a      	cmp	r2, r3
 8021196:	d11c      	bne.n	80211d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8021198:	693b      	ldr	r3, [r7, #16]
 802119a:	685a      	ldr	r2, [r3, #4]
 802119c:	693b      	ldr	r3, [r7, #16]
 802119e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80211a0:	429a      	cmp	r2, r3
 80211a2:	d316      	bcc.n	80211d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80211a4:	693b      	ldr	r3, [r7, #16]
 80211a6:	685a      	ldr	r2, [r3, #4]
 80211a8:	68fb      	ldr	r3, [r7, #12]
 80211aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80211ae:	429a      	cmp	r2, r3
 80211b0:	d20f      	bcs.n	80211d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80211b2:	2200      	movs	r2, #0
 80211b4:	2100      	movs	r1, #0
 80211b6:	68f8      	ldr	r0, [r7, #12]
 80211b8:	f000 ff8e 	bl	80220d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	2200      	movs	r2, #0
 80211c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80211c4:	2300      	movs	r3, #0
 80211c6:	2200      	movs	r2, #0
 80211c8:	2100      	movs	r1, #0
 80211ca:	68f8      	ldr	r0, [r7, #12]
 80211cc:	f001 fc69 	bl	8022aa2 <USBD_LL_PrepareReceive>
 80211d0:	e018      	b.n	8021204 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80211d2:	68fb      	ldr	r3, [r7, #12]
 80211d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211d8:	b2db      	uxtb	r3, r3
 80211da:	2b03      	cmp	r3, #3
 80211dc:	d10b      	bne.n	80211f6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80211de:	68fb      	ldr	r3, [r7, #12]
 80211e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211e4:	68db      	ldr	r3, [r3, #12]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d005      	beq.n	80211f6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80211ea:	68fb      	ldr	r3, [r7, #12]
 80211ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211f0:	68db      	ldr	r3, [r3, #12]
 80211f2:	68f8      	ldr	r0, [r7, #12]
 80211f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80211f6:	2180      	movs	r1, #128	; 0x80
 80211f8:	68f8      	ldr	r0, [r7, #12]
 80211fa:	f001 fba8 	bl	802294e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80211fe:	68f8      	ldr	r0, [r7, #12]
 8021200:	f000 ff9f 	bl	8022142 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802120a:	2b01      	cmp	r3, #1
 802120c:	d122      	bne.n	8021254 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 802120e:	68f8      	ldr	r0, [r7, #12]
 8021210:	f7ff fe98 	bl	8020f44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	2200      	movs	r2, #0
 8021218:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802121c:	e01a      	b.n	8021254 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802121e:	68fb      	ldr	r3, [r7, #12]
 8021220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021224:	b2db      	uxtb	r3, r3
 8021226:	2b03      	cmp	r3, #3
 8021228:	d114      	bne.n	8021254 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021230:	695b      	ldr	r3, [r3, #20]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d00e      	beq.n	8021254 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8021236:	68fb      	ldr	r3, [r7, #12]
 8021238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802123c:	695b      	ldr	r3, [r3, #20]
 802123e:	7afa      	ldrb	r2, [r7, #11]
 8021240:	4611      	mov	r1, r2
 8021242:	68f8      	ldr	r0, [r7, #12]
 8021244:	4798      	blx	r3
 8021246:	4603      	mov	r3, r0
 8021248:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802124a:	7dfb      	ldrb	r3, [r7, #23]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d001      	beq.n	8021254 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021250:	7dfb      	ldrb	r3, [r7, #23]
 8021252:	e000      	b.n	8021256 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021254:	2300      	movs	r3, #0
}
 8021256:	4618      	mov	r0, r3
 8021258:	3718      	adds	r7, #24
 802125a:	46bd      	mov	sp, r7
 802125c:	bd80      	pop	{r7, pc}

0802125e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802125e:	b580      	push	{r7, lr}
 8021260:	b082      	sub	sp, #8
 8021262:	af00      	add	r7, sp, #0
 8021264:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	2201      	movs	r2, #1
 802126a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	2200      	movs	r2, #0
 8021272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8021276:	687b      	ldr	r3, [r7, #4]
 8021278:	2200      	movs	r2, #0
 802127a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	2200      	movs	r2, #0
 8021280:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802128a:	2b00      	cmp	r3, #0
 802128c:	d101      	bne.n	8021292 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 802128e:	2303      	movs	r3, #3
 8021290:	e02f      	b.n	80212f2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021298:	2b00      	cmp	r3, #0
 802129a:	d00f      	beq.n	80212bc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212a2:	685b      	ldr	r3, [r3, #4]
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d009      	beq.n	80212bc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212ae:	685b      	ldr	r3, [r3, #4]
 80212b0:	687a      	ldr	r2, [r7, #4]
 80212b2:	6852      	ldr	r2, [r2, #4]
 80212b4:	b2d2      	uxtb	r2, r2
 80212b6:	4611      	mov	r1, r2
 80212b8:	6878      	ldr	r0, [r7, #4]
 80212ba:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80212bc:	2340      	movs	r3, #64	; 0x40
 80212be:	2200      	movs	r2, #0
 80212c0:	2100      	movs	r1, #0
 80212c2:	6878      	ldr	r0, [r7, #4]
 80212c4:	f001 fadf 	bl	8022886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	2201      	movs	r2, #1
 80212cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	2240      	movs	r2, #64	; 0x40
 80212d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80212d8:	2340      	movs	r3, #64	; 0x40
 80212da:	2200      	movs	r2, #0
 80212dc:	2180      	movs	r1, #128	; 0x80
 80212de:	6878      	ldr	r0, [r7, #4]
 80212e0:	f001 fad1 	bl	8022886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	2201      	movs	r2, #1
 80212e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	2240      	movs	r2, #64	; 0x40
 80212ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80212f0:	2300      	movs	r3, #0
}
 80212f2:	4618      	mov	r0, r3
 80212f4:	3708      	adds	r7, #8
 80212f6:	46bd      	mov	sp, r7
 80212f8:	bd80      	pop	{r7, pc}

080212fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80212fa:	b480      	push	{r7}
 80212fc:	b083      	sub	sp, #12
 80212fe:	af00      	add	r7, sp, #0
 8021300:	6078      	str	r0, [r7, #4]
 8021302:	460b      	mov	r3, r1
 8021304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	78fa      	ldrb	r2, [r7, #3]
 802130a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802130c:	2300      	movs	r3, #0
}
 802130e:	4618      	mov	r0, r3
 8021310:	370c      	adds	r7, #12
 8021312:	46bd      	mov	sp, r7
 8021314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021318:	4770      	bx	lr

0802131a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802131a:	b480      	push	{r7}
 802131c:	b083      	sub	sp, #12
 802131e:	af00      	add	r7, sp, #0
 8021320:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021328:	b2da      	uxtb	r2, r3
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	2204      	movs	r2, #4
 8021334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8021338:	2300      	movs	r3, #0
}
 802133a:	4618      	mov	r0, r3
 802133c:	370c      	adds	r7, #12
 802133e:	46bd      	mov	sp, r7
 8021340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021344:	4770      	bx	lr

08021346 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021346:	b480      	push	{r7}
 8021348:	b083      	sub	sp, #12
 802134a:	af00      	add	r7, sp, #0
 802134c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021354:	b2db      	uxtb	r3, r3
 8021356:	2b04      	cmp	r3, #4
 8021358:	d106      	bne.n	8021368 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021360:	b2da      	uxtb	r2, r3
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021368:	2300      	movs	r3, #0
}
 802136a:	4618      	mov	r0, r3
 802136c:	370c      	adds	r7, #12
 802136e:	46bd      	mov	sp, r7
 8021370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021374:	4770      	bx	lr

08021376 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021376:	b580      	push	{r7, lr}
 8021378:	b082      	sub	sp, #8
 802137a:	af00      	add	r7, sp, #0
 802137c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021384:	2b00      	cmp	r3, #0
 8021386:	d101      	bne.n	802138c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8021388:	2303      	movs	r3, #3
 802138a:	e012      	b.n	80213b2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021392:	b2db      	uxtb	r3, r3
 8021394:	2b03      	cmp	r3, #3
 8021396:	d10b      	bne.n	80213b0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802139e:	69db      	ldr	r3, [r3, #28]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d005      	beq.n	80213b0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213aa:	69db      	ldr	r3, [r3, #28]
 80213ac:	6878      	ldr	r0, [r7, #4]
 80213ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80213b0:	2300      	movs	r3, #0
}
 80213b2:	4618      	mov	r0, r3
 80213b4:	3708      	adds	r7, #8
 80213b6:	46bd      	mov	sp, r7
 80213b8:	bd80      	pop	{r7, pc}

080213ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80213ba:	b580      	push	{r7, lr}
 80213bc:	b082      	sub	sp, #8
 80213be:	af00      	add	r7, sp, #0
 80213c0:	6078      	str	r0, [r7, #4]
 80213c2:	460b      	mov	r3, r1
 80213c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d101      	bne.n	80213d4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80213d0:	2303      	movs	r3, #3
 80213d2:	e014      	b.n	80213fe <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80213d4:	687b      	ldr	r3, [r7, #4]
 80213d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213da:	b2db      	uxtb	r3, r3
 80213dc:	2b03      	cmp	r3, #3
 80213de:	d10d      	bne.n	80213fc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213e6:	6a1b      	ldr	r3, [r3, #32]
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d007      	beq.n	80213fc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80213f2:	6a1b      	ldr	r3, [r3, #32]
 80213f4:	78fa      	ldrb	r2, [r7, #3]
 80213f6:	4611      	mov	r1, r2
 80213f8:	6878      	ldr	r0, [r7, #4]
 80213fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80213fc:	2300      	movs	r3, #0
}
 80213fe:	4618      	mov	r0, r3
 8021400:	3708      	adds	r7, #8
 8021402:	46bd      	mov	sp, r7
 8021404:	bd80      	pop	{r7, pc}

08021406 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8021406:	b580      	push	{r7, lr}
 8021408:	b082      	sub	sp, #8
 802140a:	af00      	add	r7, sp, #0
 802140c:	6078      	str	r0, [r7, #4]
 802140e:	460b      	mov	r3, r1
 8021410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021412:	687b      	ldr	r3, [r7, #4]
 8021414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021418:	2b00      	cmp	r3, #0
 802141a:	d101      	bne.n	8021420 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 802141c:	2303      	movs	r3, #3
 802141e:	e014      	b.n	802144a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021426:	b2db      	uxtb	r3, r3
 8021428:	2b03      	cmp	r3, #3
 802142a:	d10d      	bne.n	8021448 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021434:	2b00      	cmp	r3, #0
 8021436:	d007      	beq.n	8021448 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021440:	78fa      	ldrb	r2, [r7, #3]
 8021442:	4611      	mov	r1, r2
 8021444:	6878      	ldr	r0, [r7, #4]
 8021446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021448:	2300      	movs	r3, #0
}
 802144a:	4618      	mov	r0, r3
 802144c:	3708      	adds	r7, #8
 802144e:	46bd      	mov	sp, r7
 8021450:	bd80      	pop	{r7, pc}

08021452 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021452:	b480      	push	{r7}
 8021454:	b083      	sub	sp, #12
 8021456:	af00      	add	r7, sp, #0
 8021458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802145a:	2300      	movs	r3, #0
}
 802145c:	4618      	mov	r0, r3
 802145e:	370c      	adds	r7, #12
 8021460:	46bd      	mov	sp, r7
 8021462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021466:	4770      	bx	lr

08021468 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b082      	sub	sp, #8
 802146c:	af00      	add	r7, sp, #0
 802146e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	2201      	movs	r2, #1
 8021474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802147e:	2b00      	cmp	r3, #0
 8021480:	d009      	beq.n	8021496 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021488:	685b      	ldr	r3, [r3, #4]
 802148a:	687a      	ldr	r2, [r7, #4]
 802148c:	6852      	ldr	r2, [r2, #4]
 802148e:	b2d2      	uxtb	r2, r2
 8021490:	4611      	mov	r1, r2
 8021492:	6878      	ldr	r0, [r7, #4]
 8021494:	4798      	blx	r3
  }

  return USBD_OK;
 8021496:	2300      	movs	r3, #0
}
 8021498:	4618      	mov	r0, r3
 802149a:	3708      	adds	r7, #8
 802149c:	46bd      	mov	sp, r7
 802149e:	bd80      	pop	{r7, pc}

080214a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80214a0:	b480      	push	{r7}
 80214a2:	b087      	sub	sp, #28
 80214a4:	af00      	add	r7, sp, #0
 80214a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80214ac:	697b      	ldr	r3, [r7, #20]
 80214ae:	781b      	ldrb	r3, [r3, #0]
 80214b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80214b2:	697b      	ldr	r3, [r7, #20]
 80214b4:	3301      	adds	r3, #1
 80214b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80214b8:	697b      	ldr	r3, [r7, #20]
 80214ba:	781b      	ldrb	r3, [r3, #0]
 80214bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80214be:	8a3b      	ldrh	r3, [r7, #16]
 80214c0:	021b      	lsls	r3, r3, #8
 80214c2:	b21a      	sxth	r2, r3
 80214c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80214c8:	4313      	orrs	r3, r2
 80214ca:	b21b      	sxth	r3, r3
 80214cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80214ce:	89fb      	ldrh	r3, [r7, #14]
}
 80214d0:	4618      	mov	r0, r3
 80214d2:	371c      	adds	r7, #28
 80214d4:	46bd      	mov	sp, r7
 80214d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214da:	4770      	bx	lr

080214dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80214dc:	b580      	push	{r7, lr}
 80214de:	b084      	sub	sp, #16
 80214e0:	af00      	add	r7, sp, #0
 80214e2:	6078      	str	r0, [r7, #4]
 80214e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80214e6:	2300      	movs	r3, #0
 80214e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80214ea:	683b      	ldr	r3, [r7, #0]
 80214ec:	781b      	ldrb	r3, [r3, #0]
 80214ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80214f2:	2b40      	cmp	r3, #64	; 0x40
 80214f4:	d005      	beq.n	8021502 <USBD_StdDevReq+0x26>
 80214f6:	2b40      	cmp	r3, #64	; 0x40
 80214f8:	d853      	bhi.n	80215a2 <USBD_StdDevReq+0xc6>
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d00b      	beq.n	8021516 <USBD_StdDevReq+0x3a>
 80214fe:	2b20      	cmp	r3, #32
 8021500:	d14f      	bne.n	80215a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021508:	689b      	ldr	r3, [r3, #8]
 802150a:	6839      	ldr	r1, [r7, #0]
 802150c:	6878      	ldr	r0, [r7, #4]
 802150e:	4798      	blx	r3
 8021510:	4603      	mov	r3, r0
 8021512:	73fb      	strb	r3, [r7, #15]
      break;
 8021514:	e04a      	b.n	80215ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021516:	683b      	ldr	r3, [r7, #0]
 8021518:	785b      	ldrb	r3, [r3, #1]
 802151a:	2b09      	cmp	r3, #9
 802151c:	d83b      	bhi.n	8021596 <USBD_StdDevReq+0xba>
 802151e:	a201      	add	r2, pc, #4	; (adr r2, 8021524 <USBD_StdDevReq+0x48>)
 8021520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021524:	08021579 	.word	0x08021579
 8021528:	0802158d 	.word	0x0802158d
 802152c:	08021597 	.word	0x08021597
 8021530:	08021583 	.word	0x08021583
 8021534:	08021597 	.word	0x08021597
 8021538:	08021557 	.word	0x08021557
 802153c:	0802154d 	.word	0x0802154d
 8021540:	08021597 	.word	0x08021597
 8021544:	0802156f 	.word	0x0802156f
 8021548:	08021561 	.word	0x08021561
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802154c:	6839      	ldr	r1, [r7, #0]
 802154e:	6878      	ldr	r0, [r7, #4]
 8021550:	f000 f9de 	bl	8021910 <USBD_GetDescriptor>
          break;
 8021554:	e024      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021556:	6839      	ldr	r1, [r7, #0]
 8021558:	6878      	ldr	r0, [r7, #4]
 802155a:	f000 fb6d 	bl	8021c38 <USBD_SetAddress>
          break;
 802155e:	e01f      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021560:	6839      	ldr	r1, [r7, #0]
 8021562:	6878      	ldr	r0, [r7, #4]
 8021564:	f000 fbac 	bl	8021cc0 <USBD_SetConfig>
 8021568:	4603      	mov	r3, r0
 802156a:	73fb      	strb	r3, [r7, #15]
          break;
 802156c:	e018      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802156e:	6839      	ldr	r1, [r7, #0]
 8021570:	6878      	ldr	r0, [r7, #4]
 8021572:	f000 fc4b 	bl	8021e0c <USBD_GetConfig>
          break;
 8021576:	e013      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021578:	6839      	ldr	r1, [r7, #0]
 802157a:	6878      	ldr	r0, [r7, #4]
 802157c:	f000 fc7c 	bl	8021e78 <USBD_GetStatus>
          break;
 8021580:	e00e      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021582:	6839      	ldr	r1, [r7, #0]
 8021584:	6878      	ldr	r0, [r7, #4]
 8021586:	f000 fcab 	bl	8021ee0 <USBD_SetFeature>
          break;
 802158a:	e009      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802158c:	6839      	ldr	r1, [r7, #0]
 802158e:	6878      	ldr	r0, [r7, #4]
 8021590:	f000 fcba 	bl	8021f08 <USBD_ClrFeature>
          break;
 8021594:	e004      	b.n	80215a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8021596:	6839      	ldr	r1, [r7, #0]
 8021598:	6878      	ldr	r0, [r7, #4]
 802159a:	f000 fd11 	bl	8021fc0 <USBD_CtlError>
          break;
 802159e:	bf00      	nop
      }
      break;
 80215a0:	e004      	b.n	80215ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80215a2:	6839      	ldr	r1, [r7, #0]
 80215a4:	6878      	ldr	r0, [r7, #4]
 80215a6:	f000 fd0b 	bl	8021fc0 <USBD_CtlError>
      break;
 80215aa:	bf00      	nop
  }

  return ret;
 80215ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80215ae:	4618      	mov	r0, r3
 80215b0:	3710      	adds	r7, #16
 80215b2:	46bd      	mov	sp, r7
 80215b4:	bd80      	pop	{r7, pc}
 80215b6:	bf00      	nop

080215b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80215b8:	b580      	push	{r7, lr}
 80215ba:	b084      	sub	sp, #16
 80215bc:	af00      	add	r7, sp, #0
 80215be:	6078      	str	r0, [r7, #4]
 80215c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80215c2:	2300      	movs	r3, #0
 80215c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215c6:	683b      	ldr	r3, [r7, #0]
 80215c8:	781b      	ldrb	r3, [r3, #0]
 80215ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80215ce:	2b40      	cmp	r3, #64	; 0x40
 80215d0:	d005      	beq.n	80215de <USBD_StdItfReq+0x26>
 80215d2:	2b40      	cmp	r3, #64	; 0x40
 80215d4:	d82f      	bhi.n	8021636 <USBD_StdItfReq+0x7e>
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d001      	beq.n	80215de <USBD_StdItfReq+0x26>
 80215da:	2b20      	cmp	r3, #32
 80215dc:	d12b      	bne.n	8021636 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80215e4:	b2db      	uxtb	r3, r3
 80215e6:	3b01      	subs	r3, #1
 80215e8:	2b02      	cmp	r3, #2
 80215ea:	d81d      	bhi.n	8021628 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80215ec:	683b      	ldr	r3, [r7, #0]
 80215ee:	889b      	ldrh	r3, [r3, #4]
 80215f0:	b2db      	uxtb	r3, r3
 80215f2:	2b01      	cmp	r3, #1
 80215f4:	d813      	bhi.n	802161e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215fc:	689b      	ldr	r3, [r3, #8]
 80215fe:	6839      	ldr	r1, [r7, #0]
 8021600:	6878      	ldr	r0, [r7, #4]
 8021602:	4798      	blx	r3
 8021604:	4603      	mov	r3, r0
 8021606:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021608:	683b      	ldr	r3, [r7, #0]
 802160a:	88db      	ldrh	r3, [r3, #6]
 802160c:	2b00      	cmp	r3, #0
 802160e:	d110      	bne.n	8021632 <USBD_StdItfReq+0x7a>
 8021610:	7bfb      	ldrb	r3, [r7, #15]
 8021612:	2b00      	cmp	r3, #0
 8021614:	d10d      	bne.n	8021632 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8021616:	6878      	ldr	r0, [r7, #4]
 8021618:	f000 fd80 	bl	802211c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802161c:	e009      	b.n	8021632 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 802161e:	6839      	ldr	r1, [r7, #0]
 8021620:	6878      	ldr	r0, [r7, #4]
 8021622:	f000 fccd 	bl	8021fc0 <USBD_CtlError>
          break;
 8021626:	e004      	b.n	8021632 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8021628:	6839      	ldr	r1, [r7, #0]
 802162a:	6878      	ldr	r0, [r7, #4]
 802162c:	f000 fcc8 	bl	8021fc0 <USBD_CtlError>
          break;
 8021630:	e000      	b.n	8021634 <USBD_StdItfReq+0x7c>
          break;
 8021632:	bf00      	nop
      }
      break;
 8021634:	e004      	b.n	8021640 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8021636:	6839      	ldr	r1, [r7, #0]
 8021638:	6878      	ldr	r0, [r7, #4]
 802163a:	f000 fcc1 	bl	8021fc0 <USBD_CtlError>
      break;
 802163e:	bf00      	nop
  }

  return ret;
 8021640:	7bfb      	ldrb	r3, [r7, #15]
}
 8021642:	4618      	mov	r0, r3
 8021644:	3710      	adds	r7, #16
 8021646:	46bd      	mov	sp, r7
 8021648:	bd80      	pop	{r7, pc}

0802164a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802164a:	b580      	push	{r7, lr}
 802164c:	b084      	sub	sp, #16
 802164e:	af00      	add	r7, sp, #0
 8021650:	6078      	str	r0, [r7, #4]
 8021652:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021654:	2300      	movs	r3, #0
 8021656:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8021658:	683b      	ldr	r3, [r7, #0]
 802165a:	889b      	ldrh	r3, [r3, #4]
 802165c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802165e:	683b      	ldr	r3, [r7, #0]
 8021660:	781b      	ldrb	r3, [r3, #0]
 8021662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021666:	2b40      	cmp	r3, #64	; 0x40
 8021668:	d007      	beq.n	802167a <USBD_StdEPReq+0x30>
 802166a:	2b40      	cmp	r3, #64	; 0x40
 802166c:	f200 8145 	bhi.w	80218fa <USBD_StdEPReq+0x2b0>
 8021670:	2b00      	cmp	r3, #0
 8021672:	d00c      	beq.n	802168e <USBD_StdEPReq+0x44>
 8021674:	2b20      	cmp	r3, #32
 8021676:	f040 8140 	bne.w	80218fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021680:	689b      	ldr	r3, [r3, #8]
 8021682:	6839      	ldr	r1, [r7, #0]
 8021684:	6878      	ldr	r0, [r7, #4]
 8021686:	4798      	blx	r3
 8021688:	4603      	mov	r3, r0
 802168a:	73fb      	strb	r3, [r7, #15]
      break;
 802168c:	e13a      	b.n	8021904 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802168e:	683b      	ldr	r3, [r7, #0]
 8021690:	785b      	ldrb	r3, [r3, #1]
 8021692:	2b03      	cmp	r3, #3
 8021694:	d007      	beq.n	80216a6 <USBD_StdEPReq+0x5c>
 8021696:	2b03      	cmp	r3, #3
 8021698:	f300 8129 	bgt.w	80218ee <USBD_StdEPReq+0x2a4>
 802169c:	2b00      	cmp	r3, #0
 802169e:	d07f      	beq.n	80217a0 <USBD_StdEPReq+0x156>
 80216a0:	2b01      	cmp	r3, #1
 80216a2:	d03c      	beq.n	802171e <USBD_StdEPReq+0xd4>
 80216a4:	e123      	b.n	80218ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216ac:	b2db      	uxtb	r3, r3
 80216ae:	2b02      	cmp	r3, #2
 80216b0:	d002      	beq.n	80216b8 <USBD_StdEPReq+0x6e>
 80216b2:	2b03      	cmp	r3, #3
 80216b4:	d016      	beq.n	80216e4 <USBD_StdEPReq+0x9a>
 80216b6:	e02c      	b.n	8021712 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80216b8:	7bbb      	ldrb	r3, [r7, #14]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d00d      	beq.n	80216da <USBD_StdEPReq+0x90>
 80216be:	7bbb      	ldrb	r3, [r7, #14]
 80216c0:	2b80      	cmp	r3, #128	; 0x80
 80216c2:	d00a      	beq.n	80216da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80216c4:	7bbb      	ldrb	r3, [r7, #14]
 80216c6:	4619      	mov	r1, r3
 80216c8:	6878      	ldr	r0, [r7, #4]
 80216ca:	f001 f940 	bl	802294e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80216ce:	2180      	movs	r1, #128	; 0x80
 80216d0:	6878      	ldr	r0, [r7, #4]
 80216d2:	f001 f93c 	bl	802294e <USBD_LL_StallEP>
 80216d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80216d8:	e020      	b.n	802171c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80216da:	6839      	ldr	r1, [r7, #0]
 80216dc:	6878      	ldr	r0, [r7, #4]
 80216de:	f000 fc6f 	bl	8021fc0 <USBD_CtlError>
              break;
 80216e2:	e01b      	b.n	802171c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80216e4:	683b      	ldr	r3, [r7, #0]
 80216e6:	885b      	ldrh	r3, [r3, #2]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d10e      	bne.n	802170a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80216ec:	7bbb      	ldrb	r3, [r7, #14]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d00b      	beq.n	802170a <USBD_StdEPReq+0xc0>
 80216f2:	7bbb      	ldrb	r3, [r7, #14]
 80216f4:	2b80      	cmp	r3, #128	; 0x80
 80216f6:	d008      	beq.n	802170a <USBD_StdEPReq+0xc0>
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	88db      	ldrh	r3, [r3, #6]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d104      	bne.n	802170a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8021700:	7bbb      	ldrb	r3, [r7, #14]
 8021702:	4619      	mov	r1, r3
 8021704:	6878      	ldr	r0, [r7, #4]
 8021706:	f001 f922 	bl	802294e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802170a:	6878      	ldr	r0, [r7, #4]
 802170c:	f000 fd06 	bl	802211c <USBD_CtlSendStatus>

              break;
 8021710:	e004      	b.n	802171c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8021712:	6839      	ldr	r1, [r7, #0]
 8021714:	6878      	ldr	r0, [r7, #4]
 8021716:	f000 fc53 	bl	8021fc0 <USBD_CtlError>
              break;
 802171a:	bf00      	nop
          }
          break;
 802171c:	e0ec      	b.n	80218f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021724:	b2db      	uxtb	r3, r3
 8021726:	2b02      	cmp	r3, #2
 8021728:	d002      	beq.n	8021730 <USBD_StdEPReq+0xe6>
 802172a:	2b03      	cmp	r3, #3
 802172c:	d016      	beq.n	802175c <USBD_StdEPReq+0x112>
 802172e:	e030      	b.n	8021792 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021730:	7bbb      	ldrb	r3, [r7, #14]
 8021732:	2b00      	cmp	r3, #0
 8021734:	d00d      	beq.n	8021752 <USBD_StdEPReq+0x108>
 8021736:	7bbb      	ldrb	r3, [r7, #14]
 8021738:	2b80      	cmp	r3, #128	; 0x80
 802173a:	d00a      	beq.n	8021752 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802173c:	7bbb      	ldrb	r3, [r7, #14]
 802173e:	4619      	mov	r1, r3
 8021740:	6878      	ldr	r0, [r7, #4]
 8021742:	f001 f904 	bl	802294e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021746:	2180      	movs	r1, #128	; 0x80
 8021748:	6878      	ldr	r0, [r7, #4]
 802174a:	f001 f900 	bl	802294e <USBD_LL_StallEP>
 802174e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021750:	e025      	b.n	802179e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021752:	6839      	ldr	r1, [r7, #0]
 8021754:	6878      	ldr	r0, [r7, #4]
 8021756:	f000 fc33 	bl	8021fc0 <USBD_CtlError>
              break;
 802175a:	e020      	b.n	802179e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802175c:	683b      	ldr	r3, [r7, #0]
 802175e:	885b      	ldrh	r3, [r3, #2]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d11b      	bne.n	802179c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021764:	7bbb      	ldrb	r3, [r7, #14]
 8021766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802176a:	2b00      	cmp	r3, #0
 802176c:	d004      	beq.n	8021778 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802176e:	7bbb      	ldrb	r3, [r7, #14]
 8021770:	4619      	mov	r1, r3
 8021772:	6878      	ldr	r0, [r7, #4]
 8021774:	f001 f90a 	bl	802298c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021778:	6878      	ldr	r0, [r7, #4]
 802177a:	f000 fccf 	bl	802211c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021784:	689b      	ldr	r3, [r3, #8]
 8021786:	6839      	ldr	r1, [r7, #0]
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	4798      	blx	r3
 802178c:	4603      	mov	r3, r0
 802178e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021790:	e004      	b.n	802179c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021792:	6839      	ldr	r1, [r7, #0]
 8021794:	6878      	ldr	r0, [r7, #4]
 8021796:	f000 fc13 	bl	8021fc0 <USBD_CtlError>
              break;
 802179a:	e000      	b.n	802179e <USBD_StdEPReq+0x154>
              break;
 802179c:	bf00      	nop
          }
          break;
 802179e:	e0ab      	b.n	80218f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217a6:	b2db      	uxtb	r3, r3
 80217a8:	2b02      	cmp	r3, #2
 80217aa:	d002      	beq.n	80217b2 <USBD_StdEPReq+0x168>
 80217ac:	2b03      	cmp	r3, #3
 80217ae:	d032      	beq.n	8021816 <USBD_StdEPReq+0x1cc>
 80217b0:	e097      	b.n	80218e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80217b2:	7bbb      	ldrb	r3, [r7, #14]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d007      	beq.n	80217c8 <USBD_StdEPReq+0x17e>
 80217b8:	7bbb      	ldrb	r3, [r7, #14]
 80217ba:	2b80      	cmp	r3, #128	; 0x80
 80217bc:	d004      	beq.n	80217c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80217be:	6839      	ldr	r1, [r7, #0]
 80217c0:	6878      	ldr	r0, [r7, #4]
 80217c2:	f000 fbfd 	bl	8021fc0 <USBD_CtlError>
                break;
 80217c6:	e091      	b.n	80218ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80217c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	da0b      	bge.n	80217e8 <USBD_StdEPReq+0x19e>
 80217d0:	7bbb      	ldrb	r3, [r7, #14]
 80217d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80217d6:	4613      	mov	r3, r2
 80217d8:	009b      	lsls	r3, r3, #2
 80217da:	4413      	add	r3, r2
 80217dc:	009b      	lsls	r3, r3, #2
 80217de:	3310      	adds	r3, #16
 80217e0:	687a      	ldr	r2, [r7, #4]
 80217e2:	4413      	add	r3, r2
 80217e4:	3304      	adds	r3, #4
 80217e6:	e00b      	b.n	8021800 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80217e8:	7bbb      	ldrb	r3, [r7, #14]
 80217ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80217ee:	4613      	mov	r3, r2
 80217f0:	009b      	lsls	r3, r3, #2
 80217f2:	4413      	add	r3, r2
 80217f4:	009b      	lsls	r3, r3, #2
 80217f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80217fa:	687a      	ldr	r2, [r7, #4]
 80217fc:	4413      	add	r3, r2
 80217fe:	3304      	adds	r3, #4
 8021800:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021802:	68bb      	ldr	r3, [r7, #8]
 8021804:	2200      	movs	r2, #0
 8021806:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021808:	68bb      	ldr	r3, [r7, #8]
 802180a:	2202      	movs	r2, #2
 802180c:	4619      	mov	r1, r3
 802180e:	6878      	ldr	r0, [r7, #4]
 8021810:	f000 fc47 	bl	80220a2 <USBD_CtlSendData>
              break;
 8021814:	e06a      	b.n	80218ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802181a:	2b00      	cmp	r3, #0
 802181c:	da11      	bge.n	8021842 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802181e:	7bbb      	ldrb	r3, [r7, #14]
 8021820:	f003 020f 	and.w	r2, r3, #15
 8021824:	6879      	ldr	r1, [r7, #4]
 8021826:	4613      	mov	r3, r2
 8021828:	009b      	lsls	r3, r3, #2
 802182a:	4413      	add	r3, r2
 802182c:	009b      	lsls	r3, r3, #2
 802182e:	440b      	add	r3, r1
 8021830:	3324      	adds	r3, #36	; 0x24
 8021832:	881b      	ldrh	r3, [r3, #0]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d117      	bne.n	8021868 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8021838:	6839      	ldr	r1, [r7, #0]
 802183a:	6878      	ldr	r0, [r7, #4]
 802183c:	f000 fbc0 	bl	8021fc0 <USBD_CtlError>
                  break;
 8021840:	e054      	b.n	80218ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021842:	7bbb      	ldrb	r3, [r7, #14]
 8021844:	f003 020f 	and.w	r2, r3, #15
 8021848:	6879      	ldr	r1, [r7, #4]
 802184a:	4613      	mov	r3, r2
 802184c:	009b      	lsls	r3, r3, #2
 802184e:	4413      	add	r3, r2
 8021850:	009b      	lsls	r3, r3, #2
 8021852:	440b      	add	r3, r1
 8021854:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021858:	881b      	ldrh	r3, [r3, #0]
 802185a:	2b00      	cmp	r3, #0
 802185c:	d104      	bne.n	8021868 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 802185e:	6839      	ldr	r1, [r7, #0]
 8021860:	6878      	ldr	r0, [r7, #4]
 8021862:	f000 fbad 	bl	8021fc0 <USBD_CtlError>
                  break;
 8021866:	e041      	b.n	80218ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802186c:	2b00      	cmp	r3, #0
 802186e:	da0b      	bge.n	8021888 <USBD_StdEPReq+0x23e>
 8021870:	7bbb      	ldrb	r3, [r7, #14]
 8021872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021876:	4613      	mov	r3, r2
 8021878:	009b      	lsls	r3, r3, #2
 802187a:	4413      	add	r3, r2
 802187c:	009b      	lsls	r3, r3, #2
 802187e:	3310      	adds	r3, #16
 8021880:	687a      	ldr	r2, [r7, #4]
 8021882:	4413      	add	r3, r2
 8021884:	3304      	adds	r3, #4
 8021886:	e00b      	b.n	80218a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021888:	7bbb      	ldrb	r3, [r7, #14]
 802188a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802188e:	4613      	mov	r3, r2
 8021890:	009b      	lsls	r3, r3, #2
 8021892:	4413      	add	r3, r2
 8021894:	009b      	lsls	r3, r3, #2
 8021896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802189a:	687a      	ldr	r2, [r7, #4]
 802189c:	4413      	add	r3, r2
 802189e:	3304      	adds	r3, #4
 80218a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80218a2:	7bbb      	ldrb	r3, [r7, #14]
 80218a4:	2b00      	cmp	r3, #0
 80218a6:	d002      	beq.n	80218ae <USBD_StdEPReq+0x264>
 80218a8:	7bbb      	ldrb	r3, [r7, #14]
 80218aa:	2b80      	cmp	r3, #128	; 0x80
 80218ac:	d103      	bne.n	80218b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80218ae:	68bb      	ldr	r3, [r7, #8]
 80218b0:	2200      	movs	r2, #0
 80218b2:	601a      	str	r2, [r3, #0]
 80218b4:	e00e      	b.n	80218d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80218b6:	7bbb      	ldrb	r3, [r7, #14]
 80218b8:	4619      	mov	r1, r3
 80218ba:	6878      	ldr	r0, [r7, #4]
 80218bc:	f001 f885 	bl	80229ca <USBD_LL_IsStallEP>
 80218c0:	4603      	mov	r3, r0
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d003      	beq.n	80218ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80218c6:	68bb      	ldr	r3, [r7, #8]
 80218c8:	2201      	movs	r2, #1
 80218ca:	601a      	str	r2, [r3, #0]
 80218cc:	e002      	b.n	80218d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80218ce:	68bb      	ldr	r3, [r7, #8]
 80218d0:	2200      	movs	r2, #0
 80218d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80218d4:	68bb      	ldr	r3, [r7, #8]
 80218d6:	2202      	movs	r2, #2
 80218d8:	4619      	mov	r1, r3
 80218da:	6878      	ldr	r0, [r7, #4]
 80218dc:	f000 fbe1 	bl	80220a2 <USBD_CtlSendData>
              break;
 80218e0:	e004      	b.n	80218ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80218e2:	6839      	ldr	r1, [r7, #0]
 80218e4:	6878      	ldr	r0, [r7, #4]
 80218e6:	f000 fb6b 	bl	8021fc0 <USBD_CtlError>
              break;
 80218ea:	bf00      	nop
          }
          break;
 80218ec:	e004      	b.n	80218f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80218ee:	6839      	ldr	r1, [r7, #0]
 80218f0:	6878      	ldr	r0, [r7, #4]
 80218f2:	f000 fb65 	bl	8021fc0 <USBD_CtlError>
          break;
 80218f6:	bf00      	nop
      }
      break;
 80218f8:	e004      	b.n	8021904 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80218fa:	6839      	ldr	r1, [r7, #0]
 80218fc:	6878      	ldr	r0, [r7, #4]
 80218fe:	f000 fb5f 	bl	8021fc0 <USBD_CtlError>
      break;
 8021902:	bf00      	nop
  }

  return ret;
 8021904:	7bfb      	ldrb	r3, [r7, #15]
}
 8021906:	4618      	mov	r0, r3
 8021908:	3710      	adds	r7, #16
 802190a:	46bd      	mov	sp, r7
 802190c:	bd80      	pop	{r7, pc}
	...

08021910 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021910:	b580      	push	{r7, lr}
 8021912:	b084      	sub	sp, #16
 8021914:	af00      	add	r7, sp, #0
 8021916:	6078      	str	r0, [r7, #4]
 8021918:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802191a:	2300      	movs	r3, #0
 802191c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802191e:	2300      	movs	r3, #0
 8021920:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021922:	2300      	movs	r3, #0
 8021924:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8021926:	683b      	ldr	r3, [r7, #0]
 8021928:	885b      	ldrh	r3, [r3, #2]
 802192a:	0a1b      	lsrs	r3, r3, #8
 802192c:	b29b      	uxth	r3, r3
 802192e:	3b01      	subs	r3, #1
 8021930:	2b0e      	cmp	r3, #14
 8021932:	f200 8152 	bhi.w	8021bda <USBD_GetDescriptor+0x2ca>
 8021936:	a201      	add	r2, pc, #4	; (adr r2, 802193c <USBD_GetDescriptor+0x2c>)
 8021938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802193c:	080219ad 	.word	0x080219ad
 8021940:	080219c5 	.word	0x080219c5
 8021944:	08021a05 	.word	0x08021a05
 8021948:	08021bdb 	.word	0x08021bdb
 802194c:	08021bdb 	.word	0x08021bdb
 8021950:	08021b7b 	.word	0x08021b7b
 8021954:	08021ba7 	.word	0x08021ba7
 8021958:	08021bdb 	.word	0x08021bdb
 802195c:	08021bdb 	.word	0x08021bdb
 8021960:	08021bdb 	.word	0x08021bdb
 8021964:	08021bdb 	.word	0x08021bdb
 8021968:	08021bdb 	.word	0x08021bdb
 802196c:	08021bdb 	.word	0x08021bdb
 8021970:	08021bdb 	.word	0x08021bdb
 8021974:	08021979 	.word	0x08021979
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802197e:	69db      	ldr	r3, [r3, #28]
 8021980:	2b00      	cmp	r3, #0
 8021982:	d00b      	beq.n	802199c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802198a:	69db      	ldr	r3, [r3, #28]
 802198c:	687a      	ldr	r2, [r7, #4]
 802198e:	7c12      	ldrb	r2, [r2, #16]
 8021990:	f107 0108 	add.w	r1, r7, #8
 8021994:	4610      	mov	r0, r2
 8021996:	4798      	blx	r3
 8021998:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802199a:	e126      	b.n	8021bea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802199c:	6839      	ldr	r1, [r7, #0]
 802199e:	6878      	ldr	r0, [r7, #4]
 80219a0:	f000 fb0e 	bl	8021fc0 <USBD_CtlError>
        err++;
 80219a4:	7afb      	ldrb	r3, [r7, #11]
 80219a6:	3301      	adds	r3, #1
 80219a8:	72fb      	strb	r3, [r7, #11]
      break;
 80219aa:	e11e      	b.n	8021bea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	687a      	ldr	r2, [r7, #4]
 80219b6:	7c12      	ldrb	r2, [r2, #16]
 80219b8:	f107 0108 	add.w	r1, r7, #8
 80219bc:	4610      	mov	r0, r2
 80219be:	4798      	blx	r3
 80219c0:	60f8      	str	r0, [r7, #12]
      break;
 80219c2:	e112      	b.n	8021bea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	7c1b      	ldrb	r3, [r3, #16]
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d10d      	bne.n	80219e8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80219d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80219d4:	f107 0208 	add.w	r2, r7, #8
 80219d8:	4610      	mov	r0, r2
 80219da:	4798      	blx	r3
 80219dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80219de:	68fb      	ldr	r3, [r7, #12]
 80219e0:	3301      	adds	r3, #1
 80219e2:	2202      	movs	r2, #2
 80219e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80219e6:	e100      	b.n	8021bea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80219e8:	687b      	ldr	r3, [r7, #4]
 80219ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80219ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219f0:	f107 0208 	add.w	r2, r7, #8
 80219f4:	4610      	mov	r0, r2
 80219f6:	4798      	blx	r3
 80219f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	3301      	adds	r3, #1
 80219fe:	2202      	movs	r2, #2
 8021a00:	701a      	strb	r2, [r3, #0]
      break;
 8021a02:	e0f2      	b.n	8021bea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021a04:	683b      	ldr	r3, [r7, #0]
 8021a06:	885b      	ldrh	r3, [r3, #2]
 8021a08:	b2db      	uxtb	r3, r3
 8021a0a:	2b05      	cmp	r3, #5
 8021a0c:	f200 80ac 	bhi.w	8021b68 <USBD_GetDescriptor+0x258>
 8021a10:	a201      	add	r2, pc, #4	; (adr r2, 8021a18 <USBD_GetDescriptor+0x108>)
 8021a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a16:	bf00      	nop
 8021a18:	08021a31 	.word	0x08021a31
 8021a1c:	08021a65 	.word	0x08021a65
 8021a20:	08021a99 	.word	0x08021a99
 8021a24:	08021acd 	.word	0x08021acd
 8021a28:	08021b01 	.word	0x08021b01
 8021a2c:	08021b35 	.word	0x08021b35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a36:	685b      	ldr	r3, [r3, #4]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d00b      	beq.n	8021a54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a42:	685b      	ldr	r3, [r3, #4]
 8021a44:	687a      	ldr	r2, [r7, #4]
 8021a46:	7c12      	ldrb	r2, [r2, #16]
 8021a48:	f107 0108 	add.w	r1, r7, #8
 8021a4c:	4610      	mov	r0, r2
 8021a4e:	4798      	blx	r3
 8021a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a52:	e091      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a54:	6839      	ldr	r1, [r7, #0]
 8021a56:	6878      	ldr	r0, [r7, #4]
 8021a58:	f000 fab2 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021a5c:	7afb      	ldrb	r3, [r7, #11]
 8021a5e:	3301      	adds	r3, #1
 8021a60:	72fb      	strb	r3, [r7, #11]
          break;
 8021a62:	e089      	b.n	8021b78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a6a:	689b      	ldr	r3, [r3, #8]
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	d00b      	beq.n	8021a88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a76:	689b      	ldr	r3, [r3, #8]
 8021a78:	687a      	ldr	r2, [r7, #4]
 8021a7a:	7c12      	ldrb	r2, [r2, #16]
 8021a7c:	f107 0108 	add.w	r1, r7, #8
 8021a80:	4610      	mov	r0, r2
 8021a82:	4798      	blx	r3
 8021a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021a86:	e077      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021a88:	6839      	ldr	r1, [r7, #0]
 8021a8a:	6878      	ldr	r0, [r7, #4]
 8021a8c:	f000 fa98 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021a90:	7afb      	ldrb	r3, [r7, #11]
 8021a92:	3301      	adds	r3, #1
 8021a94:	72fb      	strb	r3, [r7, #11]
          break;
 8021a96:	e06f      	b.n	8021b78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a9e:	68db      	ldr	r3, [r3, #12]
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d00b      	beq.n	8021abc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021aaa:	68db      	ldr	r3, [r3, #12]
 8021aac:	687a      	ldr	r2, [r7, #4]
 8021aae:	7c12      	ldrb	r2, [r2, #16]
 8021ab0:	f107 0108 	add.w	r1, r7, #8
 8021ab4:	4610      	mov	r0, r2
 8021ab6:	4798      	blx	r3
 8021ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021aba:	e05d      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021abc:	6839      	ldr	r1, [r7, #0]
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	f000 fa7e 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021ac4:	7afb      	ldrb	r3, [r7, #11]
 8021ac6:	3301      	adds	r3, #1
 8021ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8021aca:	e055      	b.n	8021b78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ad2:	691b      	ldr	r3, [r3, #16]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d00b      	beq.n	8021af0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021ade:	691b      	ldr	r3, [r3, #16]
 8021ae0:	687a      	ldr	r2, [r7, #4]
 8021ae2:	7c12      	ldrb	r2, [r2, #16]
 8021ae4:	f107 0108 	add.w	r1, r7, #8
 8021ae8:	4610      	mov	r0, r2
 8021aea:	4798      	blx	r3
 8021aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021aee:	e043      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021af0:	6839      	ldr	r1, [r7, #0]
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f000 fa64 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021af8:	7afb      	ldrb	r3, [r7, #11]
 8021afa:	3301      	adds	r3, #1
 8021afc:	72fb      	strb	r3, [r7, #11]
          break;
 8021afe:	e03b      	b.n	8021b78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b06:	695b      	ldr	r3, [r3, #20]
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d00b      	beq.n	8021b24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b12:	695b      	ldr	r3, [r3, #20]
 8021b14:	687a      	ldr	r2, [r7, #4]
 8021b16:	7c12      	ldrb	r2, [r2, #16]
 8021b18:	f107 0108 	add.w	r1, r7, #8
 8021b1c:	4610      	mov	r0, r2
 8021b1e:	4798      	blx	r3
 8021b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b22:	e029      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b24:	6839      	ldr	r1, [r7, #0]
 8021b26:	6878      	ldr	r0, [r7, #4]
 8021b28:	f000 fa4a 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021b2c:	7afb      	ldrb	r3, [r7, #11]
 8021b2e:	3301      	adds	r3, #1
 8021b30:	72fb      	strb	r3, [r7, #11]
          break;
 8021b32:	e021      	b.n	8021b78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b3a:	699b      	ldr	r3, [r3, #24]
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d00b      	beq.n	8021b58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b46:	699b      	ldr	r3, [r3, #24]
 8021b48:	687a      	ldr	r2, [r7, #4]
 8021b4a:	7c12      	ldrb	r2, [r2, #16]
 8021b4c:	f107 0108 	add.w	r1, r7, #8
 8021b50:	4610      	mov	r0, r2
 8021b52:	4798      	blx	r3
 8021b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b56:	e00f      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b58:	6839      	ldr	r1, [r7, #0]
 8021b5a:	6878      	ldr	r0, [r7, #4]
 8021b5c:	f000 fa30 	bl	8021fc0 <USBD_CtlError>
            err++;
 8021b60:	7afb      	ldrb	r3, [r7, #11]
 8021b62:	3301      	adds	r3, #1
 8021b64:	72fb      	strb	r3, [r7, #11]
          break;
 8021b66:	e007      	b.n	8021b78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021b68:	6839      	ldr	r1, [r7, #0]
 8021b6a:	6878      	ldr	r0, [r7, #4]
 8021b6c:	f000 fa28 	bl	8021fc0 <USBD_CtlError>
          err++;
 8021b70:	7afb      	ldrb	r3, [r7, #11]
 8021b72:	3301      	adds	r3, #1
 8021b74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021b76:	bf00      	nop
      }
      break;
 8021b78:	e037      	b.n	8021bea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	7c1b      	ldrb	r3, [r3, #16]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d109      	bne.n	8021b96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021b8a:	f107 0208 	add.w	r2, r7, #8
 8021b8e:	4610      	mov	r0, r2
 8021b90:	4798      	blx	r3
 8021b92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021b94:	e029      	b.n	8021bea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021b96:	6839      	ldr	r1, [r7, #0]
 8021b98:	6878      	ldr	r0, [r7, #4]
 8021b9a:	f000 fa11 	bl	8021fc0 <USBD_CtlError>
        err++;
 8021b9e:	7afb      	ldrb	r3, [r7, #11]
 8021ba0:	3301      	adds	r3, #1
 8021ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8021ba4:	e021      	b.n	8021bea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	7c1b      	ldrb	r3, [r3, #16]
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d10d      	bne.n	8021bca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bb6:	f107 0208 	add.w	r2, r7, #8
 8021bba:	4610      	mov	r0, r2
 8021bbc:	4798      	blx	r3
 8021bbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021bc0:	68fb      	ldr	r3, [r7, #12]
 8021bc2:	3301      	adds	r3, #1
 8021bc4:	2207      	movs	r2, #7
 8021bc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021bc8:	e00f      	b.n	8021bea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021bca:	6839      	ldr	r1, [r7, #0]
 8021bcc:	6878      	ldr	r0, [r7, #4]
 8021bce:	f000 f9f7 	bl	8021fc0 <USBD_CtlError>
        err++;
 8021bd2:	7afb      	ldrb	r3, [r7, #11]
 8021bd4:	3301      	adds	r3, #1
 8021bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8021bd8:	e007      	b.n	8021bea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021bda:	6839      	ldr	r1, [r7, #0]
 8021bdc:	6878      	ldr	r0, [r7, #4]
 8021bde:	f000 f9ef 	bl	8021fc0 <USBD_CtlError>
      err++;
 8021be2:	7afb      	ldrb	r3, [r7, #11]
 8021be4:	3301      	adds	r3, #1
 8021be6:	72fb      	strb	r3, [r7, #11]
      break;
 8021be8:	bf00      	nop
  }

  if (err != 0U)
 8021bea:	7afb      	ldrb	r3, [r7, #11]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d11e      	bne.n	8021c2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021bf0:	683b      	ldr	r3, [r7, #0]
 8021bf2:	88db      	ldrh	r3, [r3, #6]
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d016      	beq.n	8021c26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021bf8:	893b      	ldrh	r3, [r7, #8]
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	d00e      	beq.n	8021c1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021bfe:	683b      	ldr	r3, [r7, #0]
 8021c00:	88da      	ldrh	r2, [r3, #6]
 8021c02:	893b      	ldrh	r3, [r7, #8]
 8021c04:	4293      	cmp	r3, r2
 8021c06:	bf28      	it	cs
 8021c08:	4613      	movcs	r3, r2
 8021c0a:	b29b      	uxth	r3, r3
 8021c0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021c0e:	893b      	ldrh	r3, [r7, #8]
 8021c10:	461a      	mov	r2, r3
 8021c12:	68f9      	ldr	r1, [r7, #12]
 8021c14:	6878      	ldr	r0, [r7, #4]
 8021c16:	f000 fa44 	bl	80220a2 <USBD_CtlSendData>
 8021c1a:	e009      	b.n	8021c30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021c1c:	6839      	ldr	r1, [r7, #0]
 8021c1e:	6878      	ldr	r0, [r7, #4]
 8021c20:	f000 f9ce 	bl	8021fc0 <USBD_CtlError>
 8021c24:	e004      	b.n	8021c30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021c26:	6878      	ldr	r0, [r7, #4]
 8021c28:	f000 fa78 	bl	802211c <USBD_CtlSendStatus>
 8021c2c:	e000      	b.n	8021c30 <USBD_GetDescriptor+0x320>
    return;
 8021c2e:	bf00      	nop
  }
}
 8021c30:	3710      	adds	r7, #16
 8021c32:	46bd      	mov	sp, r7
 8021c34:	bd80      	pop	{r7, pc}
 8021c36:	bf00      	nop

08021c38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c38:	b580      	push	{r7, lr}
 8021c3a:	b084      	sub	sp, #16
 8021c3c:	af00      	add	r7, sp, #0
 8021c3e:	6078      	str	r0, [r7, #4]
 8021c40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021c42:	683b      	ldr	r3, [r7, #0]
 8021c44:	889b      	ldrh	r3, [r3, #4]
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d131      	bne.n	8021cae <USBD_SetAddress+0x76>
 8021c4a:	683b      	ldr	r3, [r7, #0]
 8021c4c:	88db      	ldrh	r3, [r3, #6]
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d12d      	bne.n	8021cae <USBD_SetAddress+0x76>
 8021c52:	683b      	ldr	r3, [r7, #0]
 8021c54:	885b      	ldrh	r3, [r3, #2]
 8021c56:	2b7f      	cmp	r3, #127	; 0x7f
 8021c58:	d829      	bhi.n	8021cae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021c5a:	683b      	ldr	r3, [r7, #0]
 8021c5c:	885b      	ldrh	r3, [r3, #2]
 8021c5e:	b2db      	uxtb	r3, r3
 8021c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021c64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c6c:	b2db      	uxtb	r3, r3
 8021c6e:	2b03      	cmp	r3, #3
 8021c70:	d104      	bne.n	8021c7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021c72:	6839      	ldr	r1, [r7, #0]
 8021c74:	6878      	ldr	r0, [r7, #4]
 8021c76:	f000 f9a3 	bl	8021fc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021c7a:	e01d      	b.n	8021cb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	7bfa      	ldrb	r2, [r7, #15]
 8021c80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021c84:	7bfb      	ldrb	r3, [r7, #15]
 8021c86:	4619      	mov	r1, r3
 8021c88:	6878      	ldr	r0, [r7, #4]
 8021c8a:	f000 feca 	bl	8022a22 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021c8e:	6878      	ldr	r0, [r7, #4]
 8021c90:	f000 fa44 	bl	802211c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021c94:	7bfb      	ldrb	r3, [r7, #15]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d004      	beq.n	8021ca4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021c9a:	687b      	ldr	r3, [r7, #4]
 8021c9c:	2202      	movs	r2, #2
 8021c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021ca2:	e009      	b.n	8021cb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	2201      	movs	r2, #1
 8021ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021cac:	e004      	b.n	8021cb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021cae:	6839      	ldr	r1, [r7, #0]
 8021cb0:	6878      	ldr	r0, [r7, #4]
 8021cb2:	f000 f985 	bl	8021fc0 <USBD_CtlError>
  }
}
 8021cb6:	bf00      	nop
 8021cb8:	bf00      	nop
 8021cba:	3710      	adds	r7, #16
 8021cbc:	46bd      	mov	sp, r7
 8021cbe:	bd80      	pop	{r7, pc}

08021cc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021cc0:	b580      	push	{r7, lr}
 8021cc2:	b084      	sub	sp, #16
 8021cc4:	af00      	add	r7, sp, #0
 8021cc6:	6078      	str	r0, [r7, #4]
 8021cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021cce:	683b      	ldr	r3, [r7, #0]
 8021cd0:	885b      	ldrh	r3, [r3, #2]
 8021cd2:	b2da      	uxtb	r2, r3
 8021cd4:	4b4c      	ldr	r3, [pc, #304]	; (8021e08 <USBD_SetConfig+0x148>)
 8021cd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021cd8:	4b4b      	ldr	r3, [pc, #300]	; (8021e08 <USBD_SetConfig+0x148>)
 8021cda:	781b      	ldrb	r3, [r3, #0]
 8021cdc:	2b01      	cmp	r3, #1
 8021cde:	d905      	bls.n	8021cec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021ce0:	6839      	ldr	r1, [r7, #0]
 8021ce2:	6878      	ldr	r0, [r7, #4]
 8021ce4:	f000 f96c 	bl	8021fc0 <USBD_CtlError>
    return USBD_FAIL;
 8021ce8:	2303      	movs	r3, #3
 8021cea:	e088      	b.n	8021dfe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021cf2:	b2db      	uxtb	r3, r3
 8021cf4:	2b02      	cmp	r3, #2
 8021cf6:	d002      	beq.n	8021cfe <USBD_SetConfig+0x3e>
 8021cf8:	2b03      	cmp	r3, #3
 8021cfa:	d025      	beq.n	8021d48 <USBD_SetConfig+0x88>
 8021cfc:	e071      	b.n	8021de2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021cfe:	4b42      	ldr	r3, [pc, #264]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d00:	781b      	ldrb	r3, [r3, #0]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d01c      	beq.n	8021d40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021d06:	4b40      	ldr	r3, [pc, #256]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d08:	781b      	ldrb	r3, [r3, #0]
 8021d0a:	461a      	mov	r2, r3
 8021d0c:	687b      	ldr	r3, [r7, #4]
 8021d0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021d10:	4b3d      	ldr	r3, [pc, #244]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d12:	781b      	ldrb	r3, [r3, #0]
 8021d14:	4619      	mov	r1, r3
 8021d16:	6878      	ldr	r0, [r7, #4]
 8021d18:	f7ff f91f 	bl	8020f5a <USBD_SetClassConfig>
 8021d1c:	4603      	mov	r3, r0
 8021d1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021d20:	7bfb      	ldrb	r3, [r7, #15]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d004      	beq.n	8021d30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021d26:	6839      	ldr	r1, [r7, #0]
 8021d28:	6878      	ldr	r0, [r7, #4]
 8021d2a:	f000 f949 	bl	8021fc0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021d2e:	e065      	b.n	8021dfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021d30:	6878      	ldr	r0, [r7, #4]
 8021d32:	f000 f9f3 	bl	802211c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	2203      	movs	r2, #3
 8021d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021d3e:	e05d      	b.n	8021dfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021d40:	6878      	ldr	r0, [r7, #4]
 8021d42:	f000 f9eb 	bl	802211c <USBD_CtlSendStatus>
      break;
 8021d46:	e059      	b.n	8021dfc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021d48:	4b2f      	ldr	r3, [pc, #188]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d4a:	781b      	ldrb	r3, [r3, #0]
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d112      	bne.n	8021d76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	2202      	movs	r2, #2
 8021d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021d58:	4b2b      	ldr	r3, [pc, #172]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d5a:	781b      	ldrb	r3, [r3, #0]
 8021d5c:	461a      	mov	r2, r3
 8021d5e:	687b      	ldr	r3, [r7, #4]
 8021d60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021d62:	4b29      	ldr	r3, [pc, #164]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d64:	781b      	ldrb	r3, [r3, #0]
 8021d66:	4619      	mov	r1, r3
 8021d68:	6878      	ldr	r0, [r7, #4]
 8021d6a:	f7ff f912 	bl	8020f92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021d6e:	6878      	ldr	r0, [r7, #4]
 8021d70:	f000 f9d4 	bl	802211c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021d74:	e042      	b.n	8021dfc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021d76:	4b24      	ldr	r3, [pc, #144]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d78:	781b      	ldrb	r3, [r3, #0]
 8021d7a:	461a      	mov	r2, r3
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	685b      	ldr	r3, [r3, #4]
 8021d80:	429a      	cmp	r2, r3
 8021d82:	d02a      	beq.n	8021dda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	685b      	ldr	r3, [r3, #4]
 8021d88:	b2db      	uxtb	r3, r3
 8021d8a:	4619      	mov	r1, r3
 8021d8c:	6878      	ldr	r0, [r7, #4]
 8021d8e:	f7ff f900 	bl	8020f92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021d92:	4b1d      	ldr	r3, [pc, #116]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d94:	781b      	ldrb	r3, [r3, #0]
 8021d96:	461a      	mov	r2, r3
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021d9c:	4b1a      	ldr	r3, [pc, #104]	; (8021e08 <USBD_SetConfig+0x148>)
 8021d9e:	781b      	ldrb	r3, [r3, #0]
 8021da0:	4619      	mov	r1, r3
 8021da2:	6878      	ldr	r0, [r7, #4]
 8021da4:	f7ff f8d9 	bl	8020f5a <USBD_SetClassConfig>
 8021da8:	4603      	mov	r3, r0
 8021daa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021dac:	7bfb      	ldrb	r3, [r7, #15]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d00f      	beq.n	8021dd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021db2:	6839      	ldr	r1, [r7, #0]
 8021db4:	6878      	ldr	r0, [r7, #4]
 8021db6:	f000 f903 	bl	8021fc0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	685b      	ldr	r3, [r3, #4]
 8021dbe:	b2db      	uxtb	r3, r3
 8021dc0:	4619      	mov	r1, r3
 8021dc2:	6878      	ldr	r0, [r7, #4]
 8021dc4:	f7ff f8e5 	bl	8020f92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	2202      	movs	r2, #2
 8021dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021dd0:	e014      	b.n	8021dfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021dd2:	6878      	ldr	r0, [r7, #4]
 8021dd4:	f000 f9a2 	bl	802211c <USBD_CtlSendStatus>
      break;
 8021dd8:	e010      	b.n	8021dfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021dda:	6878      	ldr	r0, [r7, #4]
 8021ddc:	f000 f99e 	bl	802211c <USBD_CtlSendStatus>
      break;
 8021de0:	e00c      	b.n	8021dfc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021de2:	6839      	ldr	r1, [r7, #0]
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f000 f8eb 	bl	8021fc0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021dea:	4b07      	ldr	r3, [pc, #28]	; (8021e08 <USBD_SetConfig+0x148>)
 8021dec:	781b      	ldrb	r3, [r3, #0]
 8021dee:	4619      	mov	r1, r3
 8021df0:	6878      	ldr	r0, [r7, #4]
 8021df2:	f7ff f8ce 	bl	8020f92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021df6:	2303      	movs	r3, #3
 8021df8:	73fb      	strb	r3, [r7, #15]
      break;
 8021dfa:	bf00      	nop
  }

  return ret;
 8021dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8021dfe:	4618      	mov	r0, r3
 8021e00:	3710      	adds	r7, #16
 8021e02:	46bd      	mov	sp, r7
 8021e04:	bd80      	pop	{r7, pc}
 8021e06:	bf00      	nop
 8021e08:	200007ac 	.word	0x200007ac

08021e0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e0c:	b580      	push	{r7, lr}
 8021e0e:	b082      	sub	sp, #8
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	6078      	str	r0, [r7, #4]
 8021e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021e16:	683b      	ldr	r3, [r7, #0]
 8021e18:	88db      	ldrh	r3, [r3, #6]
 8021e1a:	2b01      	cmp	r3, #1
 8021e1c:	d004      	beq.n	8021e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021e1e:	6839      	ldr	r1, [r7, #0]
 8021e20:	6878      	ldr	r0, [r7, #4]
 8021e22:	f000 f8cd 	bl	8021fc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021e26:	e023      	b.n	8021e70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e2e:	b2db      	uxtb	r3, r3
 8021e30:	2b02      	cmp	r3, #2
 8021e32:	dc02      	bgt.n	8021e3a <USBD_GetConfig+0x2e>
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	dc03      	bgt.n	8021e40 <USBD_GetConfig+0x34>
 8021e38:	e015      	b.n	8021e66 <USBD_GetConfig+0x5a>
 8021e3a:	2b03      	cmp	r3, #3
 8021e3c:	d00b      	beq.n	8021e56 <USBD_GetConfig+0x4a>
 8021e3e:	e012      	b.n	8021e66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	2200      	movs	r2, #0
 8021e44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	3308      	adds	r3, #8
 8021e4a:	2201      	movs	r2, #1
 8021e4c:	4619      	mov	r1, r3
 8021e4e:	6878      	ldr	r0, [r7, #4]
 8021e50:	f000 f927 	bl	80220a2 <USBD_CtlSendData>
        break;
 8021e54:	e00c      	b.n	8021e70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	3304      	adds	r3, #4
 8021e5a:	2201      	movs	r2, #1
 8021e5c:	4619      	mov	r1, r3
 8021e5e:	6878      	ldr	r0, [r7, #4]
 8021e60:	f000 f91f 	bl	80220a2 <USBD_CtlSendData>
        break;
 8021e64:	e004      	b.n	8021e70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021e66:	6839      	ldr	r1, [r7, #0]
 8021e68:	6878      	ldr	r0, [r7, #4]
 8021e6a:	f000 f8a9 	bl	8021fc0 <USBD_CtlError>
        break;
 8021e6e:	bf00      	nop
}
 8021e70:	bf00      	nop
 8021e72:	3708      	adds	r7, #8
 8021e74:	46bd      	mov	sp, r7
 8021e76:	bd80      	pop	{r7, pc}

08021e78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b082      	sub	sp, #8
 8021e7c:	af00      	add	r7, sp, #0
 8021e7e:	6078      	str	r0, [r7, #4]
 8021e80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021e82:	687b      	ldr	r3, [r7, #4]
 8021e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e88:	b2db      	uxtb	r3, r3
 8021e8a:	3b01      	subs	r3, #1
 8021e8c:	2b02      	cmp	r3, #2
 8021e8e:	d81e      	bhi.n	8021ece <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021e90:	683b      	ldr	r3, [r7, #0]
 8021e92:	88db      	ldrh	r3, [r3, #6]
 8021e94:	2b02      	cmp	r3, #2
 8021e96:	d004      	beq.n	8021ea2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021e98:	6839      	ldr	r1, [r7, #0]
 8021e9a:	6878      	ldr	r0, [r7, #4]
 8021e9c:	f000 f890 	bl	8021fc0 <USBD_CtlError>
        break;
 8021ea0:	e01a      	b.n	8021ed8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	2201      	movs	r2, #1
 8021ea6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d005      	beq.n	8021ebe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	68db      	ldr	r3, [r3, #12]
 8021eb6:	f043 0202 	orr.w	r2, r3, #2
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	330c      	adds	r3, #12
 8021ec2:	2202      	movs	r2, #2
 8021ec4:	4619      	mov	r1, r3
 8021ec6:	6878      	ldr	r0, [r7, #4]
 8021ec8:	f000 f8eb 	bl	80220a2 <USBD_CtlSendData>
      break;
 8021ecc:	e004      	b.n	8021ed8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021ece:	6839      	ldr	r1, [r7, #0]
 8021ed0:	6878      	ldr	r0, [r7, #4]
 8021ed2:	f000 f875 	bl	8021fc0 <USBD_CtlError>
      break;
 8021ed6:	bf00      	nop
  }
}
 8021ed8:	bf00      	nop
 8021eda:	3708      	adds	r7, #8
 8021edc:	46bd      	mov	sp, r7
 8021ede:	bd80      	pop	{r7, pc}

08021ee0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	b082      	sub	sp, #8
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	6078      	str	r0, [r7, #4]
 8021ee8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021eea:	683b      	ldr	r3, [r7, #0]
 8021eec:	885b      	ldrh	r3, [r3, #2]
 8021eee:	2b01      	cmp	r3, #1
 8021ef0:	d106      	bne.n	8021f00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	2201      	movs	r2, #1
 8021ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021efa:	6878      	ldr	r0, [r7, #4]
 8021efc:	f000 f90e 	bl	802211c <USBD_CtlSendStatus>
  }
}
 8021f00:	bf00      	nop
 8021f02:	3708      	adds	r7, #8
 8021f04:	46bd      	mov	sp, r7
 8021f06:	bd80      	pop	{r7, pc}

08021f08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f08:	b580      	push	{r7, lr}
 8021f0a:	b082      	sub	sp, #8
 8021f0c:	af00      	add	r7, sp, #0
 8021f0e:	6078      	str	r0, [r7, #4]
 8021f10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021f18:	b2db      	uxtb	r3, r3
 8021f1a:	3b01      	subs	r3, #1
 8021f1c:	2b02      	cmp	r3, #2
 8021f1e:	d80b      	bhi.n	8021f38 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021f20:	683b      	ldr	r3, [r7, #0]
 8021f22:	885b      	ldrh	r3, [r3, #2]
 8021f24:	2b01      	cmp	r3, #1
 8021f26:	d10c      	bne.n	8021f42 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021f28:	687b      	ldr	r3, [r7, #4]
 8021f2a:	2200      	movs	r2, #0
 8021f2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021f30:	6878      	ldr	r0, [r7, #4]
 8021f32:	f000 f8f3 	bl	802211c <USBD_CtlSendStatus>
      }
      break;
 8021f36:	e004      	b.n	8021f42 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021f38:	6839      	ldr	r1, [r7, #0]
 8021f3a:	6878      	ldr	r0, [r7, #4]
 8021f3c:	f000 f840 	bl	8021fc0 <USBD_CtlError>
      break;
 8021f40:	e000      	b.n	8021f44 <USBD_ClrFeature+0x3c>
      break;
 8021f42:	bf00      	nop
  }
}
 8021f44:	bf00      	nop
 8021f46:	3708      	adds	r7, #8
 8021f48:	46bd      	mov	sp, r7
 8021f4a:	bd80      	pop	{r7, pc}

08021f4c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021f4c:	b580      	push	{r7, lr}
 8021f4e:	b084      	sub	sp, #16
 8021f50:	af00      	add	r7, sp, #0
 8021f52:	6078      	str	r0, [r7, #4]
 8021f54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021f56:	683b      	ldr	r3, [r7, #0]
 8021f58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021f5a:	68fb      	ldr	r3, [r7, #12]
 8021f5c:	781a      	ldrb	r2, [r3, #0]
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021f62:	68fb      	ldr	r3, [r7, #12]
 8021f64:	3301      	adds	r3, #1
 8021f66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021f68:	68fb      	ldr	r3, [r7, #12]
 8021f6a:	781a      	ldrb	r2, [r3, #0]
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021f70:	68fb      	ldr	r3, [r7, #12]
 8021f72:	3301      	adds	r3, #1
 8021f74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021f76:	68f8      	ldr	r0, [r7, #12]
 8021f78:	f7ff fa92 	bl	80214a0 <SWAPBYTE>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	461a      	mov	r2, r3
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021f84:	68fb      	ldr	r3, [r7, #12]
 8021f86:	3301      	adds	r3, #1
 8021f88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	3301      	adds	r3, #1
 8021f8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021f90:	68f8      	ldr	r0, [r7, #12]
 8021f92:	f7ff fa85 	bl	80214a0 <SWAPBYTE>
 8021f96:	4603      	mov	r3, r0
 8021f98:	461a      	mov	r2, r3
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021f9e:	68fb      	ldr	r3, [r7, #12]
 8021fa0:	3301      	adds	r3, #1
 8021fa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	3301      	adds	r3, #1
 8021fa8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021faa:	68f8      	ldr	r0, [r7, #12]
 8021fac:	f7ff fa78 	bl	80214a0 <SWAPBYTE>
 8021fb0:	4603      	mov	r3, r0
 8021fb2:	461a      	mov	r2, r3
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	80da      	strh	r2, [r3, #6]
}
 8021fb8:	bf00      	nop
 8021fba:	3710      	adds	r7, #16
 8021fbc:	46bd      	mov	sp, r7
 8021fbe:	bd80      	pop	{r7, pc}

08021fc0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fc0:	b580      	push	{r7, lr}
 8021fc2:	b082      	sub	sp, #8
 8021fc4:	af00      	add	r7, sp, #0
 8021fc6:	6078      	str	r0, [r7, #4]
 8021fc8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021fca:	2180      	movs	r1, #128	; 0x80
 8021fcc:	6878      	ldr	r0, [r7, #4]
 8021fce:	f000 fcbe 	bl	802294e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021fd2:	2100      	movs	r1, #0
 8021fd4:	6878      	ldr	r0, [r7, #4]
 8021fd6:	f000 fcba 	bl	802294e <USBD_LL_StallEP>
}
 8021fda:	bf00      	nop
 8021fdc:	3708      	adds	r7, #8
 8021fde:	46bd      	mov	sp, r7
 8021fe0:	bd80      	pop	{r7, pc}

08021fe2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021fe2:	b580      	push	{r7, lr}
 8021fe4:	b086      	sub	sp, #24
 8021fe6:	af00      	add	r7, sp, #0
 8021fe8:	60f8      	str	r0, [r7, #12]
 8021fea:	60b9      	str	r1, [r7, #8]
 8021fec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021fee:	2300      	movs	r3, #0
 8021ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021ff2:	68fb      	ldr	r3, [r7, #12]
 8021ff4:	2b00      	cmp	r3, #0
 8021ff6:	d036      	beq.n	8022066 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021ff8:	68fb      	ldr	r3, [r7, #12]
 8021ffa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021ffc:	6938      	ldr	r0, [r7, #16]
 8021ffe:	f000 f836 	bl	802206e <USBD_GetLen>
 8022002:	4603      	mov	r3, r0
 8022004:	3301      	adds	r3, #1
 8022006:	b29b      	uxth	r3, r3
 8022008:	005b      	lsls	r3, r3, #1
 802200a:	b29a      	uxth	r2, r3
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8022010:	7dfb      	ldrb	r3, [r7, #23]
 8022012:	68ba      	ldr	r2, [r7, #8]
 8022014:	4413      	add	r3, r2
 8022016:	687a      	ldr	r2, [r7, #4]
 8022018:	7812      	ldrb	r2, [r2, #0]
 802201a:	701a      	strb	r2, [r3, #0]
  idx++;
 802201c:	7dfb      	ldrb	r3, [r7, #23]
 802201e:	3301      	adds	r3, #1
 8022020:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8022022:	7dfb      	ldrb	r3, [r7, #23]
 8022024:	68ba      	ldr	r2, [r7, #8]
 8022026:	4413      	add	r3, r2
 8022028:	2203      	movs	r2, #3
 802202a:	701a      	strb	r2, [r3, #0]
  idx++;
 802202c:	7dfb      	ldrb	r3, [r7, #23]
 802202e:	3301      	adds	r3, #1
 8022030:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8022032:	e013      	b.n	802205c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8022034:	7dfb      	ldrb	r3, [r7, #23]
 8022036:	68ba      	ldr	r2, [r7, #8]
 8022038:	4413      	add	r3, r2
 802203a:	693a      	ldr	r2, [r7, #16]
 802203c:	7812      	ldrb	r2, [r2, #0]
 802203e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022040:	693b      	ldr	r3, [r7, #16]
 8022042:	3301      	adds	r3, #1
 8022044:	613b      	str	r3, [r7, #16]
    idx++;
 8022046:	7dfb      	ldrb	r3, [r7, #23]
 8022048:	3301      	adds	r3, #1
 802204a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 802204c:	7dfb      	ldrb	r3, [r7, #23]
 802204e:	68ba      	ldr	r2, [r7, #8]
 8022050:	4413      	add	r3, r2
 8022052:	2200      	movs	r2, #0
 8022054:	701a      	strb	r2, [r3, #0]
    idx++;
 8022056:	7dfb      	ldrb	r3, [r7, #23]
 8022058:	3301      	adds	r3, #1
 802205a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 802205c:	693b      	ldr	r3, [r7, #16]
 802205e:	781b      	ldrb	r3, [r3, #0]
 8022060:	2b00      	cmp	r3, #0
 8022062:	d1e7      	bne.n	8022034 <USBD_GetString+0x52>
 8022064:	e000      	b.n	8022068 <USBD_GetString+0x86>
    return;
 8022066:	bf00      	nop
  }
}
 8022068:	3718      	adds	r7, #24
 802206a:	46bd      	mov	sp, r7
 802206c:	bd80      	pop	{r7, pc}

0802206e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802206e:	b480      	push	{r7}
 8022070:	b085      	sub	sp, #20
 8022072:	af00      	add	r7, sp, #0
 8022074:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022076:	2300      	movs	r3, #0
 8022078:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 802207e:	e005      	b.n	802208c <USBD_GetLen+0x1e>
  {
    len++;
 8022080:	7bfb      	ldrb	r3, [r7, #15]
 8022082:	3301      	adds	r3, #1
 8022084:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8022086:	68bb      	ldr	r3, [r7, #8]
 8022088:	3301      	adds	r3, #1
 802208a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 802208c:	68bb      	ldr	r3, [r7, #8]
 802208e:	781b      	ldrb	r3, [r3, #0]
 8022090:	2b00      	cmp	r3, #0
 8022092:	d1f5      	bne.n	8022080 <USBD_GetLen+0x12>
  }

  return len;
 8022094:	7bfb      	ldrb	r3, [r7, #15]
}
 8022096:	4618      	mov	r0, r3
 8022098:	3714      	adds	r7, #20
 802209a:	46bd      	mov	sp, r7
 802209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220a0:	4770      	bx	lr

080220a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80220a2:	b580      	push	{r7, lr}
 80220a4:	b084      	sub	sp, #16
 80220a6:	af00      	add	r7, sp, #0
 80220a8:	60f8      	str	r0, [r7, #12]
 80220aa:	60b9      	str	r1, [r7, #8]
 80220ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	2202      	movs	r2, #2
 80220b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	687a      	ldr	r2, [r7, #4]
 80220ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	687a      	ldr	r2, [r7, #4]
 80220c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	68ba      	ldr	r2, [r7, #8]
 80220c6:	2100      	movs	r1, #0
 80220c8:	68f8      	ldr	r0, [r7, #12]
 80220ca:	f000 fcc9 	bl	8022a60 <USBD_LL_Transmit>

  return USBD_OK;
 80220ce:	2300      	movs	r3, #0
}
 80220d0:	4618      	mov	r0, r3
 80220d2:	3710      	adds	r7, #16
 80220d4:	46bd      	mov	sp, r7
 80220d6:	bd80      	pop	{r7, pc}

080220d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80220d8:	b580      	push	{r7, lr}
 80220da:	b084      	sub	sp, #16
 80220dc:	af00      	add	r7, sp, #0
 80220de:	60f8      	str	r0, [r7, #12]
 80220e0:	60b9      	str	r1, [r7, #8]
 80220e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	68ba      	ldr	r2, [r7, #8]
 80220e8:	2100      	movs	r1, #0
 80220ea:	68f8      	ldr	r0, [r7, #12]
 80220ec:	f000 fcb8 	bl	8022a60 <USBD_LL_Transmit>

  return USBD_OK;
 80220f0:	2300      	movs	r3, #0
}
 80220f2:	4618      	mov	r0, r3
 80220f4:	3710      	adds	r7, #16
 80220f6:	46bd      	mov	sp, r7
 80220f8:	bd80      	pop	{r7, pc}

080220fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80220fa:	b580      	push	{r7, lr}
 80220fc:	b084      	sub	sp, #16
 80220fe:	af00      	add	r7, sp, #0
 8022100:	60f8      	str	r0, [r7, #12]
 8022102:	60b9      	str	r1, [r7, #8]
 8022104:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	68ba      	ldr	r2, [r7, #8]
 802210a:	2100      	movs	r1, #0
 802210c:	68f8      	ldr	r0, [r7, #12]
 802210e:	f000 fcc8 	bl	8022aa2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022112:	2300      	movs	r3, #0
}
 8022114:	4618      	mov	r0, r3
 8022116:	3710      	adds	r7, #16
 8022118:	46bd      	mov	sp, r7
 802211a:	bd80      	pop	{r7, pc}

0802211c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802211c:	b580      	push	{r7, lr}
 802211e:	b082      	sub	sp, #8
 8022120:	af00      	add	r7, sp, #0
 8022122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	2204      	movs	r2, #4
 8022128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802212c:	2300      	movs	r3, #0
 802212e:	2200      	movs	r2, #0
 8022130:	2100      	movs	r1, #0
 8022132:	6878      	ldr	r0, [r7, #4]
 8022134:	f000 fc94 	bl	8022a60 <USBD_LL_Transmit>

  return USBD_OK;
 8022138:	2300      	movs	r3, #0
}
 802213a:	4618      	mov	r0, r3
 802213c:	3708      	adds	r7, #8
 802213e:	46bd      	mov	sp, r7
 8022140:	bd80      	pop	{r7, pc}

08022142 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022142:	b580      	push	{r7, lr}
 8022144:	b082      	sub	sp, #8
 8022146:	af00      	add	r7, sp, #0
 8022148:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	2205      	movs	r2, #5
 802214e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022152:	2300      	movs	r3, #0
 8022154:	2200      	movs	r2, #0
 8022156:	2100      	movs	r1, #0
 8022158:	6878      	ldr	r0, [r7, #4]
 802215a:	f000 fca2 	bl	8022aa2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802215e:	2300      	movs	r3, #0
}
 8022160:	4618      	mov	r0, r3
 8022162:	3708      	adds	r7, #8
 8022164:	46bd      	mov	sp, r7
 8022166:	bd80      	pop	{r7, pc}

08022168 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022168:	b580      	push	{r7, lr}
 802216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802216c:	2200      	movs	r2, #0
 802216e:	4912      	ldr	r1, [pc, #72]	; (80221b8 <MX_USB_DEVICE_Init+0x50>)
 8022170:	4812      	ldr	r0, [pc, #72]	; (80221bc <MX_USB_DEVICE_Init+0x54>)
 8022172:	f7fe fe84 	bl	8020e7e <USBD_Init>
 8022176:	4603      	mov	r3, r0
 8022178:	2b00      	cmp	r3, #0
 802217a:	d001      	beq.n	8022180 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802217c:	f7f5 fdd8 	bl	8017d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022180:	490f      	ldr	r1, [pc, #60]	; (80221c0 <MX_USB_DEVICE_Init+0x58>)
 8022182:	480e      	ldr	r0, [pc, #56]	; (80221bc <MX_USB_DEVICE_Init+0x54>)
 8022184:	f7fe feab 	bl	8020ede <USBD_RegisterClass>
 8022188:	4603      	mov	r3, r0
 802218a:	2b00      	cmp	r3, #0
 802218c:	d001      	beq.n	8022192 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802218e:	f7f5 fdcf 	bl	8017d30 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8022192:	490c      	ldr	r1, [pc, #48]	; (80221c4 <MX_USB_DEVICE_Init+0x5c>)
 8022194:	4809      	ldr	r0, [pc, #36]	; (80221bc <MX_USB_DEVICE_Init+0x54>)
 8022196:	f7fd fa5b 	bl	801f650 <USBD_MSC_RegisterStorage>
 802219a:	4603      	mov	r3, r0
 802219c:	2b00      	cmp	r3, #0
 802219e:	d001      	beq.n	80221a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80221a0:	f7f5 fdc6 	bl	8017d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80221a4:	4805      	ldr	r0, [pc, #20]	; (80221bc <MX_USB_DEVICE_Init+0x54>)
 80221a6:	f7fe fec1 	bl	8020f2c <USBD_Start>
 80221aa:	4603      	mov	r3, r0
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	d001      	beq.n	80221b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80221b0:	f7f5 fdbe 	bl	8017d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80221b4:	bf00      	nop
 80221b6:	bd80      	pop	{r7, pc}
 80221b8:	2000067c 	.word	0x2000067c
 80221bc:	20006c3c 	.word	0x20006c3c
 80221c0:	20000594 	.word	0x20000594
 80221c4:	200006dc 	.word	0x200006dc

080221c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221c8:	b480      	push	{r7}
 80221ca:	b083      	sub	sp, #12
 80221cc:	af00      	add	r7, sp, #0
 80221ce:	4603      	mov	r3, r0
 80221d0:	6039      	str	r1, [r7, #0]
 80221d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80221d4:	683b      	ldr	r3, [r7, #0]
 80221d6:	2212      	movs	r2, #18
 80221d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80221da:	4b03      	ldr	r3, [pc, #12]	; (80221e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80221dc:	4618      	mov	r0, r3
 80221de:	370c      	adds	r7, #12
 80221e0:	46bd      	mov	sp, r7
 80221e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221e6:	4770      	bx	lr
 80221e8:	2000069c 	.word	0x2000069c

080221ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221ec:	b480      	push	{r7}
 80221ee:	b083      	sub	sp, #12
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	4603      	mov	r3, r0
 80221f4:	6039      	str	r1, [r7, #0]
 80221f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80221f8:	683b      	ldr	r3, [r7, #0]
 80221fa:	2204      	movs	r2, #4
 80221fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80221fe:	4b03      	ldr	r3, [pc, #12]	; (802220c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022200:	4618      	mov	r0, r3
 8022202:	370c      	adds	r7, #12
 8022204:	46bd      	mov	sp, r7
 8022206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802220a:	4770      	bx	lr
 802220c:	200006bc 	.word	0x200006bc

08022210 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022210:	b580      	push	{r7, lr}
 8022212:	b082      	sub	sp, #8
 8022214:	af00      	add	r7, sp, #0
 8022216:	4603      	mov	r3, r0
 8022218:	6039      	str	r1, [r7, #0]
 802221a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802221c:	79fb      	ldrb	r3, [r7, #7]
 802221e:	2b00      	cmp	r3, #0
 8022220:	d105      	bne.n	802222e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022222:	683a      	ldr	r2, [r7, #0]
 8022224:	4907      	ldr	r1, [pc, #28]	; (8022244 <USBD_FS_ProductStrDescriptor+0x34>)
 8022226:	4808      	ldr	r0, [pc, #32]	; (8022248 <USBD_FS_ProductStrDescriptor+0x38>)
 8022228:	f7ff fedb 	bl	8021fe2 <USBD_GetString>
 802222c:	e004      	b.n	8022238 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802222e:	683a      	ldr	r2, [r7, #0]
 8022230:	4904      	ldr	r1, [pc, #16]	; (8022244 <USBD_FS_ProductStrDescriptor+0x34>)
 8022232:	4805      	ldr	r0, [pc, #20]	; (8022248 <USBD_FS_ProductStrDescriptor+0x38>)
 8022234:	f7ff fed5 	bl	8021fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022238:	4b02      	ldr	r3, [pc, #8]	; (8022244 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802223a:	4618      	mov	r0, r3
 802223c:	3708      	adds	r7, #8
 802223e:	46bd      	mov	sp, r7
 8022240:	bd80      	pop	{r7, pc}
 8022242:	bf00      	nop
 8022244:	20006f0c 	.word	0x20006f0c
 8022248:	08000a84 	.word	0x08000a84

0802224c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802224c:	b580      	push	{r7, lr}
 802224e:	b082      	sub	sp, #8
 8022250:	af00      	add	r7, sp, #0
 8022252:	4603      	mov	r3, r0
 8022254:	6039      	str	r1, [r7, #0]
 8022256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022258:	683a      	ldr	r2, [r7, #0]
 802225a:	4904      	ldr	r1, [pc, #16]	; (802226c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802225c:	4804      	ldr	r0, [pc, #16]	; (8022270 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802225e:	f7ff fec0 	bl	8021fe2 <USBD_GetString>
  return USBD_StrDesc;
 8022262:	4b02      	ldr	r3, [pc, #8]	; (802226c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022264:	4618      	mov	r0, r3
 8022266:	3708      	adds	r7, #8
 8022268:	46bd      	mov	sp, r7
 802226a:	bd80      	pop	{r7, pc}
 802226c:	20006f0c 	.word	0x20006f0c
 8022270:	08000a98 	.word	0x08000a98

08022274 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022274:	b580      	push	{r7, lr}
 8022276:	b082      	sub	sp, #8
 8022278:	af00      	add	r7, sp, #0
 802227a:	4603      	mov	r3, r0
 802227c:	6039      	str	r1, [r7, #0]
 802227e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022280:	683b      	ldr	r3, [r7, #0]
 8022282:	221a      	movs	r2, #26
 8022284:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022286:	f000 f855 	bl	8022334 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802228a:	4b02      	ldr	r3, [pc, #8]	; (8022294 <USBD_FS_SerialStrDescriptor+0x20>)
}
 802228c:	4618      	mov	r0, r3
 802228e:	3708      	adds	r7, #8
 8022290:	46bd      	mov	sp, r7
 8022292:	bd80      	pop	{r7, pc}
 8022294:	200006c0 	.word	0x200006c0

08022298 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022298:	b580      	push	{r7, lr}
 802229a:	b082      	sub	sp, #8
 802229c:	af00      	add	r7, sp, #0
 802229e:	4603      	mov	r3, r0
 80222a0:	6039      	str	r1, [r7, #0]
 80222a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80222a4:	79fb      	ldrb	r3, [r7, #7]
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d105      	bne.n	80222b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80222aa:	683a      	ldr	r2, [r7, #0]
 80222ac:	4907      	ldr	r1, [pc, #28]	; (80222cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80222ae:	4808      	ldr	r0, [pc, #32]	; (80222d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80222b0:	f7ff fe97 	bl	8021fe2 <USBD_GetString>
 80222b4:	e004      	b.n	80222c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80222b6:	683a      	ldr	r2, [r7, #0]
 80222b8:	4904      	ldr	r1, [pc, #16]	; (80222cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80222ba:	4805      	ldr	r0, [pc, #20]	; (80222d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80222bc:	f7ff fe91 	bl	8021fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80222c0:	4b02      	ldr	r3, [pc, #8]	; (80222cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80222c2:	4618      	mov	r0, r3
 80222c4:	3708      	adds	r7, #8
 80222c6:	46bd      	mov	sp, r7
 80222c8:	bd80      	pop	{r7, pc}
 80222ca:	bf00      	nop
 80222cc:	20006f0c 	.word	0x20006f0c
 80222d0:	08000aac 	.word	0x08000aac

080222d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222d4:	b580      	push	{r7, lr}
 80222d6:	b082      	sub	sp, #8
 80222d8:	af00      	add	r7, sp, #0
 80222da:	4603      	mov	r3, r0
 80222dc:	6039      	str	r1, [r7, #0]
 80222de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80222e0:	79fb      	ldrb	r3, [r7, #7]
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d105      	bne.n	80222f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80222e6:	683a      	ldr	r2, [r7, #0]
 80222e8:	4907      	ldr	r1, [pc, #28]	; (8022308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80222ea:	4808      	ldr	r0, [pc, #32]	; (802230c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80222ec:	f7ff fe79 	bl	8021fe2 <USBD_GetString>
 80222f0:	e004      	b.n	80222fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80222f2:	683a      	ldr	r2, [r7, #0]
 80222f4:	4904      	ldr	r1, [pc, #16]	; (8022308 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80222f6:	4805      	ldr	r0, [pc, #20]	; (802230c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80222f8:	f7ff fe73 	bl	8021fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80222fc:	4b02      	ldr	r3, [pc, #8]	; (8022308 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80222fe:	4618      	mov	r0, r3
 8022300:	3708      	adds	r7, #8
 8022302:	46bd      	mov	sp, r7
 8022304:	bd80      	pop	{r7, pc}
 8022306:	bf00      	nop
 8022308:	20006f0c 	.word	0x20006f0c
 802230c:	08000ab8 	.word	0x08000ab8

08022310 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022310:	b480      	push	{r7}
 8022312:	b083      	sub	sp, #12
 8022314:	af00      	add	r7, sp, #0
 8022316:	4603      	mov	r3, r0
 8022318:	6039      	str	r1, [r7, #0]
 802231a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 802231c:	683b      	ldr	r3, [r7, #0]
 802231e:	220c      	movs	r2, #12
 8022320:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8022322:	4b03      	ldr	r3, [pc, #12]	; (8022330 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8022324:	4618      	mov	r0, r3
 8022326:	370c      	adds	r7, #12
 8022328:	46bd      	mov	sp, r7
 802232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802232e:	4770      	bx	lr
 8022330:	200006b0 	.word	0x200006b0

08022334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022334:	b580      	push	{r7, lr}
 8022336:	b084      	sub	sp, #16
 8022338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802233a:	4b0f      	ldr	r3, [pc, #60]	; (8022378 <Get_SerialNum+0x44>)
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022340:	4b0e      	ldr	r3, [pc, #56]	; (802237c <Get_SerialNum+0x48>)
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8022346:	4b0e      	ldr	r3, [pc, #56]	; (8022380 <Get_SerialNum+0x4c>)
 8022348:	681b      	ldr	r3, [r3, #0]
 802234a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802234c:	68fa      	ldr	r2, [r7, #12]
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	4413      	add	r3, r2
 8022352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022354:	68fb      	ldr	r3, [r7, #12]
 8022356:	2b00      	cmp	r3, #0
 8022358:	d009      	beq.n	802236e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802235a:	2208      	movs	r2, #8
 802235c:	4909      	ldr	r1, [pc, #36]	; (8022384 <Get_SerialNum+0x50>)
 802235e:	68f8      	ldr	r0, [r7, #12]
 8022360:	f000 f814 	bl	802238c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022364:	2204      	movs	r2, #4
 8022366:	4908      	ldr	r1, [pc, #32]	; (8022388 <Get_SerialNum+0x54>)
 8022368:	68b8      	ldr	r0, [r7, #8]
 802236a:	f000 f80f 	bl	802238c <IntToUnicode>
  }
}
 802236e:	bf00      	nop
 8022370:	3710      	adds	r7, #16
 8022372:	46bd      	mov	sp, r7
 8022374:	bd80      	pop	{r7, pc}
 8022376:	bf00      	nop
 8022378:	1fff7a10 	.word	0x1fff7a10
 802237c:	1fff7a14 	.word	0x1fff7a14
 8022380:	1fff7a18 	.word	0x1fff7a18
 8022384:	200006c2 	.word	0x200006c2
 8022388:	200006d2 	.word	0x200006d2

0802238c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802238c:	b480      	push	{r7}
 802238e:	b087      	sub	sp, #28
 8022390:	af00      	add	r7, sp, #0
 8022392:	60f8      	str	r0, [r7, #12]
 8022394:	60b9      	str	r1, [r7, #8]
 8022396:	4613      	mov	r3, r2
 8022398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802239a:	2300      	movs	r3, #0
 802239c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802239e:	2300      	movs	r3, #0
 80223a0:	75fb      	strb	r3, [r7, #23]
 80223a2:	e027      	b.n	80223f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80223a4:	68fb      	ldr	r3, [r7, #12]
 80223a6:	0f1b      	lsrs	r3, r3, #28
 80223a8:	2b09      	cmp	r3, #9
 80223aa:	d80b      	bhi.n	80223c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	0f1b      	lsrs	r3, r3, #28
 80223b0:	b2da      	uxtb	r2, r3
 80223b2:	7dfb      	ldrb	r3, [r7, #23]
 80223b4:	005b      	lsls	r3, r3, #1
 80223b6:	4619      	mov	r1, r3
 80223b8:	68bb      	ldr	r3, [r7, #8]
 80223ba:	440b      	add	r3, r1
 80223bc:	3230      	adds	r2, #48	; 0x30
 80223be:	b2d2      	uxtb	r2, r2
 80223c0:	701a      	strb	r2, [r3, #0]
 80223c2:	e00a      	b.n	80223da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	0f1b      	lsrs	r3, r3, #28
 80223c8:	b2da      	uxtb	r2, r3
 80223ca:	7dfb      	ldrb	r3, [r7, #23]
 80223cc:	005b      	lsls	r3, r3, #1
 80223ce:	4619      	mov	r1, r3
 80223d0:	68bb      	ldr	r3, [r7, #8]
 80223d2:	440b      	add	r3, r1
 80223d4:	3237      	adds	r2, #55	; 0x37
 80223d6:	b2d2      	uxtb	r2, r2
 80223d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	011b      	lsls	r3, r3, #4
 80223de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80223e0:	7dfb      	ldrb	r3, [r7, #23]
 80223e2:	005b      	lsls	r3, r3, #1
 80223e4:	3301      	adds	r3, #1
 80223e6:	68ba      	ldr	r2, [r7, #8]
 80223e8:	4413      	add	r3, r2
 80223ea:	2200      	movs	r2, #0
 80223ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80223ee:	7dfb      	ldrb	r3, [r7, #23]
 80223f0:	3301      	adds	r3, #1
 80223f2:	75fb      	strb	r3, [r7, #23]
 80223f4:	7dfa      	ldrb	r2, [r7, #23]
 80223f6:	79fb      	ldrb	r3, [r7, #7]
 80223f8:	429a      	cmp	r2, r3
 80223fa:	d3d3      	bcc.n	80223a4 <IntToUnicode+0x18>
  }
}
 80223fc:	bf00      	nop
 80223fe:	bf00      	nop
 8022400:	371c      	adds	r7, #28
 8022402:	46bd      	mov	sp, r7
 8022404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022408:	4770      	bx	lr

0802240a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 802240a:	b480      	push	{r7}
 802240c:	b083      	sub	sp, #12
 802240e:	af00      	add	r7, sp, #0
 8022410:	4603      	mov	r3, r0
 8022412:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8022414:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8022416:	4618      	mov	r0, r3
 8022418:	370c      	adds	r7, #12
 802241a:	46bd      	mov	sp, r7
 802241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022420:	4770      	bx	lr

08022422 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8022422:	b480      	push	{r7}
 8022424:	b085      	sub	sp, #20
 8022426:	af00      	add	r7, sp, #0
 8022428:	4603      	mov	r3, r0
 802242a:	60b9      	str	r1, [r7, #8]
 802242c:	607a      	str	r2, [r7, #4]
 802242e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8022430:	68bb      	ldr	r3, [r7, #8]
 8022432:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022436:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802243e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022440:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022442:	4618      	mov	r0, r3
 8022444:	3714      	adds	r7, #20
 8022446:	46bd      	mov	sp, r7
 8022448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244c:	4770      	bx	lr

0802244e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 802244e:	b480      	push	{r7}
 8022450:	b083      	sub	sp, #12
 8022452:	af00      	add	r7, sp, #0
 8022454:	4603      	mov	r3, r0
 8022456:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802245a:	4618      	mov	r0, r3
 802245c:	370c      	adds	r7, #12
 802245e:	46bd      	mov	sp, r7
 8022460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022464:	4770      	bx	lr

08022466 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8022466:	b480      	push	{r7}
 8022468:	b083      	sub	sp, #12
 802246a:	af00      	add	r7, sp, #0
 802246c:	4603      	mov	r3, r0
 802246e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022470:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022472:	4618      	mov	r0, r3
 8022474:	370c      	adds	r7, #12
 8022476:	46bd      	mov	sp, r7
 8022478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802247c:	4770      	bx	lr

0802247e <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 802247e:	b580      	push	{r7, lr}
 8022480:	b084      	sub	sp, #16
 8022482:	af00      	add	r7, sp, #0
 8022484:	60b9      	str	r1, [r7, #8]
 8022486:	607a      	str	r2, [r7, #4]
 8022488:	461a      	mov	r2, r3
 802248a:	4603      	mov	r3, r0
 802248c:	73fb      	strb	r3, [r7, #15]
 802248e:	4613      	mov	r3, r2
 8022490:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	025b      	lsls	r3, r3, #9
 8022496:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802249a:	4619      	mov	r1, r3
 802249c:	68b8      	ldr	r0, [r7, #8]
 802249e:	f7ec fc81 	bl	800eda4 <ExtFlash_PageRD>
  return (USBD_OK);
 80224a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80224a4:	4618      	mov	r0, r3
 80224a6:	3710      	adds	r7, #16
 80224a8:	46bd      	mov	sp, r7
 80224aa:	bd80      	pop	{r7, pc}

080224ac <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80224ac:	b580      	push	{r7, lr}
 80224ae:	b084      	sub	sp, #16
 80224b0:	af00      	add	r7, sp, #0
 80224b2:	60b9      	str	r1, [r7, #8]
 80224b4:	607a      	str	r2, [r7, #4]
 80224b6:	461a      	mov	r2, r3
 80224b8:	4603      	mov	r3, r0
 80224ba:	73fb      	strb	r3, [r7, #15]
 80224bc:	4613      	mov	r3, r2
 80224be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	025b      	lsls	r3, r3, #9
 80224c4:	4619      	mov	r1, r3
 80224c6:	68b8      	ldr	r0, [r7, #8]
 80224c8:	f7ec fd44 	bl	800ef54 <ExtFlash_PageWR>
	return (USBD_OK);
 80224cc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80224ce:	4618      	mov	r0, r3
 80224d0:	3710      	adds	r7, #16
 80224d2:	46bd      	mov	sp, r7
 80224d4:	bd80      	pop	{r7, pc}

080224d6 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80224d6:	b480      	push	{r7}
 80224d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80224da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80224dc:	4618      	mov	r0, r3
 80224de:	46bd      	mov	sp, r7
 80224e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224e4:	4770      	bx	lr
	...

080224e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80224e8:	b580      	push	{r7, lr}
 80224ea:	b0a0      	sub	sp, #128	; 0x80
 80224ec:	af00      	add	r7, sp, #0
 80224ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80224f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80224f4:	2200      	movs	r2, #0
 80224f6:	601a      	str	r2, [r3, #0]
 80224f8:	605a      	str	r2, [r3, #4]
 80224fa:	609a      	str	r2, [r3, #8]
 80224fc:	60da      	str	r2, [r3, #12]
 80224fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022500:	f107 0310 	add.w	r3, r7, #16
 8022504:	225c      	movs	r2, #92	; 0x5c
 8022506:	2100      	movs	r1, #0
 8022508:	4618      	mov	r0, r3
 802250a:	f000 fbd9 	bl	8022cc0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 802250e:	687b      	ldr	r3, [r7, #4]
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8022516:	d154      	bne.n	80225c2 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8022518:	f44f 7380 	mov.w	r3, #256	; 0x100
 802251c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 802251e:	2319      	movs	r3, #25
 8022520:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022522:	23c0      	movs	r3, #192	; 0xc0
 8022524:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8022526:	2302      	movs	r3, #2
 8022528:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 802252a:	2304      	movs	r3, #4
 802252c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 802252e:	2301      	movs	r3, #1
 8022530:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8022532:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8022536:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8022538:	f107 0310 	add.w	r3, r7, #16
 802253c:	4618      	mov	r0, r3
 802253e:	f7f8 fec1 	bl	801b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8022542:	4603      	mov	r3, r0
 8022544:	2b00      	cmp	r3, #0
 8022546:	d001      	beq.n	802254c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8022548:	f7f5 fbf2 	bl	8017d30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802254c:	2300      	movs	r3, #0
 802254e:	60fb      	str	r3, [r7, #12]
 8022550:	4b1e      	ldr	r3, [pc, #120]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 8022552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022554:	4a1d      	ldr	r2, [pc, #116]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 8022556:	f043 0301 	orr.w	r3, r3, #1
 802255a:	6313      	str	r3, [r2, #48]	; 0x30
 802255c:	4b1b      	ldr	r3, [pc, #108]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 802255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022560:	f003 0301 	and.w	r3, r3, #1
 8022564:	60fb      	str	r3, [r7, #12]
 8022566:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8022568:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802256c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802256e:	2302      	movs	r3, #2
 8022570:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022572:	2300      	movs	r3, #0
 8022574:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022576:	2303      	movs	r3, #3
 8022578:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802257a:	230a      	movs	r3, #10
 802257c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802257e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022582:	4619      	mov	r1, r3
 8022584:	4812      	ldr	r0, [pc, #72]	; (80225d0 <HAL_PCD_MspInit+0xe8>)
 8022586:	f7f7 f999 	bl	80198bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802258a:	4b10      	ldr	r3, [pc, #64]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 802258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802258e:	4a0f      	ldr	r2, [pc, #60]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 8022590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022594:	6353      	str	r3, [r2, #52]	; 0x34
 8022596:	2300      	movs	r3, #0
 8022598:	60bb      	str	r3, [r7, #8]
 802259a:	4b0c      	ldr	r3, [pc, #48]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 802259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802259e:	4a0b      	ldr	r2, [pc, #44]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 80225a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80225a4:	6453      	str	r3, [r2, #68]	; 0x44
 80225a6:	4b09      	ldr	r3, [pc, #36]	; (80225cc <HAL_PCD_MspInit+0xe4>)
 80225a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80225aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80225ae:	60bb      	str	r3, [r7, #8]
 80225b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80225b2:	2200      	movs	r2, #0
 80225b4:	2100      	movs	r1, #0
 80225b6:	2043      	movs	r0, #67	; 0x43
 80225b8:	f7f6 fabf 	bl	8018b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80225bc:	2043      	movs	r0, #67	; 0x43
 80225be:	f7f6 fad8 	bl	8018b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80225c2:	bf00      	nop
 80225c4:	3780      	adds	r7, #128	; 0x80
 80225c6:	46bd      	mov	sp, r7
 80225c8:	bd80      	pop	{r7, pc}
 80225ca:	bf00      	nop
 80225cc:	40023800 	.word	0x40023800
 80225d0:	40020000 	.word	0x40020000

080225d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225d4:	b580      	push	{r7, lr}
 80225d6:	b082      	sub	sp, #8
 80225d8:	af00      	add	r7, sp, #0
 80225da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80225e8:	4619      	mov	r1, r3
 80225ea:	4610      	mov	r0, r2
 80225ec:	f7fe fce9 	bl	8020fc2 <USBD_LL_SetupStage>
}
 80225f0:	bf00      	nop
 80225f2:	3708      	adds	r7, #8
 80225f4:	46bd      	mov	sp, r7
 80225f6:	bd80      	pop	{r7, pc}

080225f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b082      	sub	sp, #8
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	6078      	str	r0, [r7, #4]
 8022600:	460b      	mov	r3, r1
 8022602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 802260a:	78fa      	ldrb	r2, [r7, #3]
 802260c:	6879      	ldr	r1, [r7, #4]
 802260e:	4613      	mov	r3, r2
 8022610:	00db      	lsls	r3, r3, #3
 8022612:	1a9b      	subs	r3, r3, r2
 8022614:	009b      	lsls	r3, r3, #2
 8022616:	440b      	add	r3, r1
 8022618:	f503 7302 	add.w	r3, r3, #520	; 0x208
 802261c:	681a      	ldr	r2, [r3, #0]
 802261e:	78fb      	ldrb	r3, [r7, #3]
 8022620:	4619      	mov	r1, r3
 8022622:	f7fe fd23 	bl	802106c <USBD_LL_DataOutStage>
}
 8022626:	bf00      	nop
 8022628:	3708      	adds	r7, #8
 802262a:	46bd      	mov	sp, r7
 802262c:	bd80      	pop	{r7, pc}

0802262e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802262e:	b580      	push	{r7, lr}
 8022630:	b082      	sub	sp, #8
 8022632:	af00      	add	r7, sp, #0
 8022634:	6078      	str	r0, [r7, #4]
 8022636:	460b      	mov	r3, r1
 8022638:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022640:	78fa      	ldrb	r2, [r7, #3]
 8022642:	6879      	ldr	r1, [r7, #4]
 8022644:	4613      	mov	r3, r2
 8022646:	00db      	lsls	r3, r3, #3
 8022648:	1a9b      	subs	r3, r3, r2
 802264a:	009b      	lsls	r3, r3, #2
 802264c:	440b      	add	r3, r1
 802264e:	3348      	adds	r3, #72	; 0x48
 8022650:	681a      	ldr	r2, [r3, #0]
 8022652:	78fb      	ldrb	r3, [r7, #3]
 8022654:	4619      	mov	r1, r3
 8022656:	f7fe fd6c 	bl	8021132 <USBD_LL_DataInStage>
}
 802265a:	bf00      	nop
 802265c:	3708      	adds	r7, #8
 802265e:	46bd      	mov	sp, r7
 8022660:	bd80      	pop	{r7, pc}

08022662 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022662:	b580      	push	{r7, lr}
 8022664:	b082      	sub	sp, #8
 8022666:	af00      	add	r7, sp, #0
 8022668:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022670:	4618      	mov	r0, r3
 8022672:	f7fe fe80 	bl	8021376 <USBD_LL_SOF>
}
 8022676:	bf00      	nop
 8022678:	3708      	adds	r7, #8
 802267a:	46bd      	mov	sp, r7
 802267c:	bd80      	pop	{r7, pc}

0802267e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802267e:	b580      	push	{r7, lr}
 8022680:	b084      	sub	sp, #16
 8022682:	af00      	add	r7, sp, #0
 8022684:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022686:	2301      	movs	r3, #1
 8022688:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	68db      	ldr	r3, [r3, #12]
 802268e:	2b00      	cmp	r3, #0
 8022690:	d102      	bne.n	8022698 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022692:	2300      	movs	r3, #0
 8022694:	73fb      	strb	r3, [r7, #15]
 8022696:	e008      	b.n	80226aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	68db      	ldr	r3, [r3, #12]
 802269c:	2b02      	cmp	r3, #2
 802269e:	d102      	bne.n	80226a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80226a0:	2301      	movs	r3, #1
 80226a2:	73fb      	strb	r3, [r7, #15]
 80226a4:	e001      	b.n	80226aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80226a6:	f7f5 fb43 	bl	8017d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226b0:	7bfa      	ldrb	r2, [r7, #15]
 80226b2:	4611      	mov	r1, r2
 80226b4:	4618      	mov	r0, r3
 80226b6:	f7fe fe20 	bl	80212fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226c0:	4618      	mov	r0, r3
 80226c2:	f7fe fdcc 	bl	802125e <USBD_LL_Reset>
}
 80226c6:	bf00      	nop
 80226c8:	3710      	adds	r7, #16
 80226ca:	46bd      	mov	sp, r7
 80226cc:	bd80      	pop	{r7, pc}
	...

080226d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b082      	sub	sp, #8
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80226de:	4618      	mov	r0, r3
 80226e0:	f7fe fe1b 	bl	802131a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80226ec:	681b      	ldr	r3, [r3, #0]
 80226ee:	687a      	ldr	r2, [r7, #4]
 80226f0:	6812      	ldr	r2, [r2, #0]
 80226f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80226f6:	f043 0301 	orr.w	r3, r3, #1
 80226fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	6a1b      	ldr	r3, [r3, #32]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d005      	beq.n	8022710 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022704:	4b04      	ldr	r3, [pc, #16]	; (8022718 <HAL_PCD_SuspendCallback+0x48>)
 8022706:	691b      	ldr	r3, [r3, #16]
 8022708:	4a03      	ldr	r2, [pc, #12]	; (8022718 <HAL_PCD_SuspendCallback+0x48>)
 802270a:	f043 0306 	orr.w	r3, r3, #6
 802270e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022710:	bf00      	nop
 8022712:	3708      	adds	r7, #8
 8022714:	46bd      	mov	sp, r7
 8022716:	bd80      	pop	{r7, pc}
 8022718:	e000ed00 	.word	0xe000ed00

0802271c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802271c:	b580      	push	{r7, lr}
 802271e:	b082      	sub	sp, #8
 8022720:	af00      	add	r7, sp, #0
 8022722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802272a:	4618      	mov	r0, r3
 802272c:	f7fe fe0b 	bl	8021346 <USBD_LL_Resume>
}
 8022730:	bf00      	nop
 8022732:	3708      	adds	r7, #8
 8022734:	46bd      	mov	sp, r7
 8022736:	bd80      	pop	{r7, pc}

08022738 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022738:	b580      	push	{r7, lr}
 802273a:	b082      	sub	sp, #8
 802273c:	af00      	add	r7, sp, #0
 802273e:	6078      	str	r0, [r7, #4]
 8022740:	460b      	mov	r3, r1
 8022742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802274a:	78fa      	ldrb	r2, [r7, #3]
 802274c:	4611      	mov	r1, r2
 802274e:	4618      	mov	r0, r3
 8022750:	f7fe fe59 	bl	8021406 <USBD_LL_IsoOUTIncomplete>
}
 8022754:	bf00      	nop
 8022756:	3708      	adds	r7, #8
 8022758:	46bd      	mov	sp, r7
 802275a:	bd80      	pop	{r7, pc}

0802275c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802275c:	b580      	push	{r7, lr}
 802275e:	b082      	sub	sp, #8
 8022760:	af00      	add	r7, sp, #0
 8022762:	6078      	str	r0, [r7, #4]
 8022764:	460b      	mov	r3, r1
 8022766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802276e:	78fa      	ldrb	r2, [r7, #3]
 8022770:	4611      	mov	r1, r2
 8022772:	4618      	mov	r0, r3
 8022774:	f7fe fe21 	bl	80213ba <USBD_LL_IsoINIncomplete>
}
 8022778:	bf00      	nop
 802277a:	3708      	adds	r7, #8
 802277c:	46bd      	mov	sp, r7
 802277e:	bd80      	pop	{r7, pc}

08022780 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022780:	b580      	push	{r7, lr}
 8022782:	b082      	sub	sp, #8
 8022784:	af00      	add	r7, sp, #0
 8022786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802278e:	4618      	mov	r0, r3
 8022790:	f7fe fe5f 	bl	8021452 <USBD_LL_DevConnected>
}
 8022794:	bf00      	nop
 8022796:	3708      	adds	r7, #8
 8022798:	46bd      	mov	sp, r7
 802279a:	bd80      	pop	{r7, pc}

0802279c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802279c:	b580      	push	{r7, lr}
 802279e:	b082      	sub	sp, #8
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80227aa:	4618      	mov	r0, r3
 80227ac:	f7fe fe5c 	bl	8021468 <USBD_LL_DevDisconnected>
}
 80227b0:	bf00      	nop
 80227b2:	3708      	adds	r7, #8
 80227b4:	46bd      	mov	sp, r7
 80227b6:	bd80      	pop	{r7, pc}

080227b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80227b8:	b580      	push	{r7, lr}
 80227ba:	b082      	sub	sp, #8
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	781b      	ldrb	r3, [r3, #0]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d13c      	bne.n	8022842 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80227c8:	4a20      	ldr	r2, [pc, #128]	; (802284c <USBD_LL_Init+0x94>)
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	4a1e      	ldr	r2, [pc, #120]	; (802284c <USBD_LL_Init+0x94>)
 80227d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80227d8:	4b1c      	ldr	r3, [pc, #112]	; (802284c <USBD_LL_Init+0x94>)
 80227da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80227de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80227e0:	4b1a      	ldr	r3, [pc, #104]	; (802284c <USBD_LL_Init+0x94>)
 80227e2:	2206      	movs	r2, #6
 80227e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80227e6:	4b19      	ldr	r3, [pc, #100]	; (802284c <USBD_LL_Init+0x94>)
 80227e8:	2202      	movs	r2, #2
 80227ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80227ec:	4b17      	ldr	r3, [pc, #92]	; (802284c <USBD_LL_Init+0x94>)
 80227ee:	2200      	movs	r2, #0
 80227f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80227f2:	4b16      	ldr	r3, [pc, #88]	; (802284c <USBD_LL_Init+0x94>)
 80227f4:	2202      	movs	r2, #2
 80227f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80227f8:	4b14      	ldr	r3, [pc, #80]	; (802284c <USBD_LL_Init+0x94>)
 80227fa:	2200      	movs	r2, #0
 80227fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80227fe:	4b13      	ldr	r3, [pc, #76]	; (802284c <USBD_LL_Init+0x94>)
 8022800:	2200      	movs	r2, #0
 8022802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022804:	4b11      	ldr	r3, [pc, #68]	; (802284c <USBD_LL_Init+0x94>)
 8022806:	2200      	movs	r2, #0
 8022808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802280a:	4b10      	ldr	r3, [pc, #64]	; (802284c <USBD_LL_Init+0x94>)
 802280c:	2200      	movs	r2, #0
 802280e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022810:	4b0e      	ldr	r3, [pc, #56]	; (802284c <USBD_LL_Init+0x94>)
 8022812:	2200      	movs	r2, #0
 8022814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022816:	480d      	ldr	r0, [pc, #52]	; (802284c <USBD_LL_Init+0x94>)
 8022818:	f7f7 fa15 	bl	8019c46 <HAL_PCD_Init>
 802281c:	4603      	mov	r3, r0
 802281e:	2b00      	cmp	r3, #0
 8022820:	d001      	beq.n	8022826 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022822:	f7f5 fa85 	bl	8017d30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022826:	2180      	movs	r1, #128	; 0x80
 8022828:	4808      	ldr	r0, [pc, #32]	; (802284c <USBD_LL_Init+0x94>)
 802282a:	f7f8 fbd4 	bl	801afd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802282e:	2240      	movs	r2, #64	; 0x40
 8022830:	2100      	movs	r1, #0
 8022832:	4806      	ldr	r0, [pc, #24]	; (802284c <USBD_LL_Init+0x94>)
 8022834:	f7f8 fb88 	bl	801af48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022838:	2280      	movs	r2, #128	; 0x80
 802283a:	2101      	movs	r1, #1
 802283c:	4803      	ldr	r0, [pc, #12]	; (802284c <USBD_LL_Init+0x94>)
 802283e:	f7f8 fb83 	bl	801af48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022842:	2300      	movs	r3, #0
}
 8022844:	4618      	mov	r0, r3
 8022846:	3708      	adds	r7, #8
 8022848:	46bd      	mov	sp, r7
 802284a:	bd80      	pop	{r7, pc}
 802284c:	2000710c 	.word	0x2000710c

08022850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022850:	b580      	push	{r7, lr}
 8022852:	b084      	sub	sp, #16
 8022854:	af00      	add	r7, sp, #0
 8022856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022858:	2300      	movs	r3, #0
 802285a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802285c:	2300      	movs	r3, #0
 802285e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022866:	4618      	mov	r0, r3
 8022868:	f7f7 fb11 	bl	8019e8e <HAL_PCD_Start>
 802286c:	4603      	mov	r3, r0
 802286e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022870:	7bfb      	ldrb	r3, [r7, #15]
 8022872:	4618      	mov	r0, r3
 8022874:	f000 f9b0 	bl	8022bd8 <USBD_Get_USB_Status>
 8022878:	4603      	mov	r3, r0
 802287a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802287c:	7bbb      	ldrb	r3, [r7, #14]
}
 802287e:	4618      	mov	r0, r3
 8022880:	3710      	adds	r7, #16
 8022882:	46bd      	mov	sp, r7
 8022884:	bd80      	pop	{r7, pc}

08022886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022886:	b580      	push	{r7, lr}
 8022888:	b084      	sub	sp, #16
 802288a:	af00      	add	r7, sp, #0
 802288c:	6078      	str	r0, [r7, #4]
 802288e:	4608      	mov	r0, r1
 8022890:	4611      	mov	r1, r2
 8022892:	461a      	mov	r2, r3
 8022894:	4603      	mov	r3, r0
 8022896:	70fb      	strb	r3, [r7, #3]
 8022898:	460b      	mov	r3, r1
 802289a:	70bb      	strb	r3, [r7, #2]
 802289c:	4613      	mov	r3, r2
 802289e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228a0:	2300      	movs	r3, #0
 80228a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228a4:	2300      	movs	r3, #0
 80228a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80228ae:	78bb      	ldrb	r3, [r7, #2]
 80228b0:	883a      	ldrh	r2, [r7, #0]
 80228b2:	78f9      	ldrb	r1, [r7, #3]
 80228b4:	f7f7 ff22 	bl	801a6fc <HAL_PCD_EP_Open>
 80228b8:	4603      	mov	r3, r0
 80228ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228bc:	7bfb      	ldrb	r3, [r7, #15]
 80228be:	4618      	mov	r0, r3
 80228c0:	f000 f98a 	bl	8022bd8 <USBD_Get_USB_Status>
 80228c4:	4603      	mov	r3, r0
 80228c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80228c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80228ca:	4618      	mov	r0, r3
 80228cc:	3710      	adds	r7, #16
 80228ce:	46bd      	mov	sp, r7
 80228d0:	bd80      	pop	{r7, pc}

080228d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228d2:	b580      	push	{r7, lr}
 80228d4:	b084      	sub	sp, #16
 80228d6:	af00      	add	r7, sp, #0
 80228d8:	6078      	str	r0, [r7, #4]
 80228da:	460b      	mov	r3, r1
 80228dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228de:	2300      	movs	r3, #0
 80228e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228e2:	2300      	movs	r3, #0
 80228e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80228ec:	78fa      	ldrb	r2, [r7, #3]
 80228ee:	4611      	mov	r1, r2
 80228f0:	4618      	mov	r0, r3
 80228f2:	f7f7 ff6b 	bl	801a7cc <HAL_PCD_EP_Close>
 80228f6:	4603      	mov	r3, r0
 80228f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228fa:	7bfb      	ldrb	r3, [r7, #15]
 80228fc:	4618      	mov	r0, r3
 80228fe:	f000 f96b 	bl	8022bd8 <USBD_Get_USB_Status>
 8022902:	4603      	mov	r3, r0
 8022904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022906:	7bbb      	ldrb	r3, [r7, #14]
}
 8022908:	4618      	mov	r0, r3
 802290a:	3710      	adds	r7, #16
 802290c:	46bd      	mov	sp, r7
 802290e:	bd80      	pop	{r7, pc}

08022910 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022910:	b580      	push	{r7, lr}
 8022912:	b084      	sub	sp, #16
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
 8022918:	460b      	mov	r3, r1
 802291a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802291c:	2300      	movs	r3, #0
 802291e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022920:	2300      	movs	r3, #0
 8022922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8022924:	687b      	ldr	r3, [r7, #4]
 8022926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 802292a:	78fa      	ldrb	r2, [r7, #3]
 802292c:	4611      	mov	r1, r2
 802292e:	4618      	mov	r0, r3
 8022930:	f7f8 f8fd 	bl	801ab2e <HAL_PCD_EP_Flush>
 8022934:	4603      	mov	r3, r0
 8022936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022938:	7bfb      	ldrb	r3, [r7, #15]
 802293a:	4618      	mov	r0, r3
 802293c:	f000 f94c 	bl	8022bd8 <USBD_Get_USB_Status>
 8022940:	4603      	mov	r3, r0
 8022942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022944:	7bbb      	ldrb	r3, [r7, #14]
}
 8022946:	4618      	mov	r0, r3
 8022948:	3710      	adds	r7, #16
 802294a:	46bd      	mov	sp, r7
 802294c:	bd80      	pop	{r7, pc}

0802294e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802294e:	b580      	push	{r7, lr}
 8022950:	b084      	sub	sp, #16
 8022952:	af00      	add	r7, sp, #0
 8022954:	6078      	str	r0, [r7, #4]
 8022956:	460b      	mov	r3, r1
 8022958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802295a:	2300      	movs	r3, #0
 802295c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802295e:	2300      	movs	r3, #0
 8022960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022968:	78fa      	ldrb	r2, [r7, #3]
 802296a:	4611      	mov	r1, r2
 802296c:	4618      	mov	r0, r3
 802296e:	f7f8 f824 	bl	801a9ba <HAL_PCD_EP_SetStall>
 8022972:	4603      	mov	r3, r0
 8022974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022976:	7bfb      	ldrb	r3, [r7, #15]
 8022978:	4618      	mov	r0, r3
 802297a:	f000 f92d 	bl	8022bd8 <USBD_Get_USB_Status>
 802297e:	4603      	mov	r3, r0
 8022980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022982:	7bbb      	ldrb	r3, [r7, #14]
}
 8022984:	4618      	mov	r0, r3
 8022986:	3710      	adds	r7, #16
 8022988:	46bd      	mov	sp, r7
 802298a:	bd80      	pop	{r7, pc}

0802298c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802298c:	b580      	push	{r7, lr}
 802298e:	b084      	sub	sp, #16
 8022990:	af00      	add	r7, sp, #0
 8022992:	6078      	str	r0, [r7, #4]
 8022994:	460b      	mov	r3, r1
 8022996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022998:	2300      	movs	r3, #0
 802299a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802299c:	2300      	movs	r3, #0
 802299e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229a6:	78fa      	ldrb	r2, [r7, #3]
 80229a8:	4611      	mov	r1, r2
 80229aa:	4618      	mov	r0, r3
 80229ac:	f7f8 f869 	bl	801aa82 <HAL_PCD_EP_ClrStall>
 80229b0:	4603      	mov	r3, r0
 80229b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229b4:	7bfb      	ldrb	r3, [r7, #15]
 80229b6:	4618      	mov	r0, r3
 80229b8:	f000 f90e 	bl	8022bd8 <USBD_Get_USB_Status>
 80229bc:	4603      	mov	r3, r0
 80229be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80229c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80229c2:	4618      	mov	r0, r3
 80229c4:	3710      	adds	r7, #16
 80229c6:	46bd      	mov	sp, r7
 80229c8:	bd80      	pop	{r7, pc}

080229ca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80229ca:	b480      	push	{r7}
 80229cc:	b085      	sub	sp, #20
 80229ce:	af00      	add	r7, sp, #0
 80229d0:	6078      	str	r0, [r7, #4]
 80229d2:	460b      	mov	r3, r1
 80229d4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80229de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80229e2:	2b00      	cmp	r3, #0
 80229e4:	da0b      	bge.n	80229fe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80229e6:	78fb      	ldrb	r3, [r7, #3]
 80229e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80229ec:	68f9      	ldr	r1, [r7, #12]
 80229ee:	4613      	mov	r3, r2
 80229f0:	00db      	lsls	r3, r3, #3
 80229f2:	1a9b      	subs	r3, r3, r2
 80229f4:	009b      	lsls	r3, r3, #2
 80229f6:	440b      	add	r3, r1
 80229f8:	333e      	adds	r3, #62	; 0x3e
 80229fa:	781b      	ldrb	r3, [r3, #0]
 80229fc:	e00b      	b.n	8022a16 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80229fe:	78fb      	ldrb	r3, [r7, #3]
 8022a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022a04:	68f9      	ldr	r1, [r7, #12]
 8022a06:	4613      	mov	r3, r2
 8022a08:	00db      	lsls	r3, r3, #3
 8022a0a:	1a9b      	subs	r3, r3, r2
 8022a0c:	009b      	lsls	r3, r3, #2
 8022a0e:	440b      	add	r3, r1
 8022a10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022a14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022a16:	4618      	mov	r0, r3
 8022a18:	3714      	adds	r7, #20
 8022a1a:	46bd      	mov	sp, r7
 8022a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a20:	4770      	bx	lr

08022a22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022a22:	b580      	push	{r7, lr}
 8022a24:	b084      	sub	sp, #16
 8022a26:	af00      	add	r7, sp, #0
 8022a28:	6078      	str	r0, [r7, #4]
 8022a2a:	460b      	mov	r3, r1
 8022a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a2e:	2300      	movs	r3, #0
 8022a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a32:	2300      	movs	r3, #0
 8022a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a3c:	78fa      	ldrb	r2, [r7, #3]
 8022a3e:	4611      	mov	r1, r2
 8022a40:	4618      	mov	r0, r3
 8022a42:	f7f7 fe36 	bl	801a6b2 <HAL_PCD_SetAddress>
 8022a46:	4603      	mov	r3, r0
 8022a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a4a:	7bfb      	ldrb	r3, [r7, #15]
 8022a4c:	4618      	mov	r0, r3
 8022a4e:	f000 f8c3 	bl	8022bd8 <USBD_Get_USB_Status>
 8022a52:	4603      	mov	r3, r0
 8022a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8022a58:	4618      	mov	r0, r3
 8022a5a:	3710      	adds	r7, #16
 8022a5c:	46bd      	mov	sp, r7
 8022a5e:	bd80      	pop	{r7, pc}

08022a60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022a60:	b580      	push	{r7, lr}
 8022a62:	b086      	sub	sp, #24
 8022a64:	af00      	add	r7, sp, #0
 8022a66:	60f8      	str	r0, [r7, #12]
 8022a68:	607a      	str	r2, [r7, #4]
 8022a6a:	603b      	str	r3, [r7, #0]
 8022a6c:	460b      	mov	r3, r1
 8022a6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a70:	2300      	movs	r3, #0
 8022a72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a74:	2300      	movs	r3, #0
 8022a76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022a7e:	7af9      	ldrb	r1, [r7, #11]
 8022a80:	683b      	ldr	r3, [r7, #0]
 8022a82:	687a      	ldr	r2, [r7, #4]
 8022a84:	f7f7 ff4f 	bl	801a926 <HAL_PCD_EP_Transmit>
 8022a88:	4603      	mov	r3, r0
 8022a8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a8c:	7dfb      	ldrb	r3, [r7, #23]
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f000 f8a2 	bl	8022bd8 <USBD_Get_USB_Status>
 8022a94:	4603      	mov	r3, r0
 8022a96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022a98:	7dbb      	ldrb	r3, [r7, #22]
}
 8022a9a:	4618      	mov	r0, r3
 8022a9c:	3718      	adds	r7, #24
 8022a9e:	46bd      	mov	sp, r7
 8022aa0:	bd80      	pop	{r7, pc}

08022aa2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022aa2:	b580      	push	{r7, lr}
 8022aa4:	b086      	sub	sp, #24
 8022aa6:	af00      	add	r7, sp, #0
 8022aa8:	60f8      	str	r0, [r7, #12]
 8022aaa:	607a      	str	r2, [r7, #4]
 8022aac:	603b      	str	r3, [r7, #0]
 8022aae:	460b      	mov	r3, r1
 8022ab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022ac0:	7af9      	ldrb	r1, [r7, #11]
 8022ac2:	683b      	ldr	r3, [r7, #0]
 8022ac4:	687a      	ldr	r2, [r7, #4]
 8022ac6:	f7f7 fecb 	bl	801a860 <HAL_PCD_EP_Receive>
 8022aca:	4603      	mov	r3, r0
 8022acc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022ace:	7dfb      	ldrb	r3, [r7, #23]
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	f000 f881 	bl	8022bd8 <USBD_Get_USB_Status>
 8022ad6:	4603      	mov	r3, r0
 8022ad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022ada:	7dbb      	ldrb	r3, [r7, #22]
}
 8022adc:	4618      	mov	r0, r3
 8022ade:	3718      	adds	r7, #24
 8022ae0:	46bd      	mov	sp, r7
 8022ae2:	bd80      	pop	{r7, pc}

08022ae4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ae4:	b580      	push	{r7, lr}
 8022ae6:	b082      	sub	sp, #8
 8022ae8:	af00      	add	r7, sp, #0
 8022aea:	6078      	str	r0, [r7, #4]
 8022aec:	460b      	mov	r3, r1
 8022aee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022af6:	78fa      	ldrb	r2, [r7, #3]
 8022af8:	4611      	mov	r1, r2
 8022afa:	4618      	mov	r0, r3
 8022afc:	f7f7 fefb 	bl	801a8f6 <HAL_PCD_EP_GetRxCount>
 8022b00:	4603      	mov	r3, r0
}
 8022b02:	4618      	mov	r0, r3
 8022b04:	3708      	adds	r7, #8
 8022b06:	46bd      	mov	sp, r7
 8022b08:	bd80      	pop	{r7, pc}
	...

08022b0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b082      	sub	sp, #8
 8022b10:	af00      	add	r7, sp, #0
 8022b12:	6078      	str	r0, [r7, #4]
 8022b14:	460b      	mov	r3, r1
 8022b16:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022b18:	78fb      	ldrb	r3, [r7, #3]
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d002      	beq.n	8022b24 <HAL_PCDEx_LPM_Callback+0x18>
 8022b1e:	2b01      	cmp	r3, #1
 8022b20:	d01f      	beq.n	8022b62 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022b22:	e03b      	b.n	8022b9c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	6a1b      	ldr	r3, [r3, #32]
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d007      	beq.n	8022b3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022b2c:	f7f4 fc96 	bl	801745c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022b30:	4b1c      	ldr	r3, [pc, #112]	; (8022ba4 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b32:	691b      	ldr	r3, [r3, #16]
 8022b34:	4a1b      	ldr	r2, [pc, #108]	; (8022ba4 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b36:	f023 0306 	bic.w	r3, r3, #6
 8022b3a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	687a      	ldr	r2, [r7, #4]
 8022b48:	6812      	ldr	r2, [r2, #0]
 8022b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022b4e:	f023 0301 	bic.w	r3, r3, #1
 8022b52:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022b54:	687b      	ldr	r3, [r7, #4]
 8022b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	f7fe fbf3 	bl	8021346 <USBD_LL_Resume>
    break;
 8022b60:	e01c      	b.n	8022b9c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022b6a:	681b      	ldr	r3, [r3, #0]
 8022b6c:	687a      	ldr	r2, [r7, #4]
 8022b6e:	6812      	ldr	r2, [r2, #0]
 8022b70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022b74:	f043 0301 	orr.w	r3, r3, #1
 8022b78:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022b80:	4618      	mov	r0, r3
 8022b82:	f7fe fbca 	bl	802131a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	6a1b      	ldr	r3, [r3, #32]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d005      	beq.n	8022b9a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022b8e:	4b05      	ldr	r3, [pc, #20]	; (8022ba4 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b90:	691b      	ldr	r3, [r3, #16]
 8022b92:	4a04      	ldr	r2, [pc, #16]	; (8022ba4 <HAL_PCDEx_LPM_Callback+0x98>)
 8022b94:	f043 0306 	orr.w	r3, r3, #6
 8022b98:	6113      	str	r3, [r2, #16]
    break;
 8022b9a:	bf00      	nop
}
 8022b9c:	bf00      	nop
 8022b9e:	3708      	adds	r7, #8
 8022ba0:	46bd      	mov	sp, r7
 8022ba2:	bd80      	pop	{r7, pc}
 8022ba4:	e000ed00 	.word	0xe000ed00

08022ba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022ba8:	b480      	push	{r7}
 8022baa:	b083      	sub	sp, #12
 8022bac:	af00      	add	r7, sp, #0
 8022bae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022bb0:	4b03      	ldr	r3, [pc, #12]	; (8022bc0 <USBD_static_malloc+0x18>)
}
 8022bb2:	4618      	mov	r0, r3
 8022bb4:	370c      	adds	r7, #12
 8022bb6:	46bd      	mov	sp, r7
 8022bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bbc:	4770      	bx	lr
 8022bbe:	bf00      	nop
 8022bc0:	200007b0 	.word	0x200007b0

08022bc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022bc4:	b480      	push	{r7}
 8022bc6:	b083      	sub	sp, #12
 8022bc8:	af00      	add	r7, sp, #0
 8022bca:	6078      	str	r0, [r7, #4]

}
 8022bcc:	bf00      	nop
 8022bce:	370c      	adds	r7, #12
 8022bd0:	46bd      	mov	sp, r7
 8022bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bd6:	4770      	bx	lr

08022bd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022bd8:	b480      	push	{r7}
 8022bda:	b085      	sub	sp, #20
 8022bdc:	af00      	add	r7, sp, #0
 8022bde:	4603      	mov	r3, r0
 8022be0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022be2:	2300      	movs	r3, #0
 8022be4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022be6:	79fb      	ldrb	r3, [r7, #7]
 8022be8:	2b03      	cmp	r3, #3
 8022bea:	d817      	bhi.n	8022c1c <USBD_Get_USB_Status+0x44>
 8022bec:	a201      	add	r2, pc, #4	; (adr r2, 8022bf4 <USBD_Get_USB_Status+0x1c>)
 8022bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022bf2:	bf00      	nop
 8022bf4:	08022c05 	.word	0x08022c05
 8022bf8:	08022c0b 	.word	0x08022c0b
 8022bfc:	08022c11 	.word	0x08022c11
 8022c00:	08022c17 	.word	0x08022c17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022c04:	2300      	movs	r3, #0
 8022c06:	73fb      	strb	r3, [r7, #15]
    break;
 8022c08:	e00b      	b.n	8022c22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022c0a:	2303      	movs	r3, #3
 8022c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8022c0e:	e008      	b.n	8022c22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022c10:	2301      	movs	r3, #1
 8022c12:	73fb      	strb	r3, [r7, #15]
    break;
 8022c14:	e005      	b.n	8022c22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022c16:	2303      	movs	r3, #3
 8022c18:	73fb      	strb	r3, [r7, #15]
    break;
 8022c1a:	e002      	b.n	8022c22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022c1c:	2303      	movs	r3, #3
 8022c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8022c20:	bf00      	nop
  }
  return usb_status;
 8022c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c24:	4618      	mov	r0, r3
 8022c26:	3714      	adds	r7, #20
 8022c28:	46bd      	mov	sp, r7
 8022c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c2e:	4770      	bx	lr

08022c30 <__errno>:
 8022c30:	4b01      	ldr	r3, [pc, #4]	; (8022c38 <__errno+0x8>)
 8022c32:	6818      	ldr	r0, [r3, #0]
 8022c34:	4770      	bx	lr
 8022c36:	bf00      	nop
 8022c38:	200006fc 	.word	0x200006fc

08022c3c <__libc_init_array>:
 8022c3c:	b570      	push	{r4, r5, r6, lr}
 8022c3e:	4d0d      	ldr	r5, [pc, #52]	; (8022c74 <__libc_init_array+0x38>)
 8022c40:	4c0d      	ldr	r4, [pc, #52]	; (8022c78 <__libc_init_array+0x3c>)
 8022c42:	1b64      	subs	r4, r4, r5
 8022c44:	10a4      	asrs	r4, r4, #2
 8022c46:	2600      	movs	r6, #0
 8022c48:	42a6      	cmp	r6, r4
 8022c4a:	d109      	bne.n	8022c60 <__libc_init_array+0x24>
 8022c4c:	4d0b      	ldr	r5, [pc, #44]	; (8022c7c <__libc_init_array+0x40>)
 8022c4e:	4c0c      	ldr	r4, [pc, #48]	; (8022c80 <__libc_init_array+0x44>)
 8022c50:	f000 f906 	bl	8022e60 <_init>
 8022c54:	1b64      	subs	r4, r4, r5
 8022c56:	10a4      	asrs	r4, r4, #2
 8022c58:	2600      	movs	r6, #0
 8022c5a:	42a6      	cmp	r6, r4
 8022c5c:	d105      	bne.n	8022c6a <__libc_init_array+0x2e>
 8022c5e:	bd70      	pop	{r4, r5, r6, pc}
 8022c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8022c64:	4798      	blx	r3
 8022c66:	3601      	adds	r6, #1
 8022c68:	e7ee      	b.n	8022c48 <__libc_init_array+0xc>
 8022c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8022c6e:	4798      	blx	r3
 8022c70:	3601      	adds	r6, #1
 8022c72:	e7f2      	b.n	8022c5a <__libc_init_array+0x1e>
 8022c74:	08022e80 	.word	0x08022e80
 8022c78:	08022e80 	.word	0x08022e80
 8022c7c:	08022e80 	.word	0x08022e80
 8022c80:	08022e84 	.word	0x08022e84

08022c84 <malloc>:
 8022c84:	4b02      	ldr	r3, [pc, #8]	; (8022c90 <malloc+0xc>)
 8022c86:	4601      	mov	r1, r0
 8022c88:	6818      	ldr	r0, [r3, #0]
 8022c8a:	f000 b871 	b.w	8022d70 <_malloc_r>
 8022c8e:	bf00      	nop
 8022c90:	200006fc 	.word	0x200006fc

08022c94 <free>:
 8022c94:	4b02      	ldr	r3, [pc, #8]	; (8022ca0 <free+0xc>)
 8022c96:	4601      	mov	r1, r0
 8022c98:	6818      	ldr	r0, [r3, #0]
 8022c9a:	f000 b819 	b.w	8022cd0 <_free_r>
 8022c9e:	bf00      	nop
 8022ca0:	200006fc 	.word	0x200006fc

08022ca4 <memcpy>:
 8022ca4:	440a      	add	r2, r1
 8022ca6:	4291      	cmp	r1, r2
 8022ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8022cac:	d100      	bne.n	8022cb0 <memcpy+0xc>
 8022cae:	4770      	bx	lr
 8022cb0:	b510      	push	{r4, lr}
 8022cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022cba:	4291      	cmp	r1, r2
 8022cbc:	d1f9      	bne.n	8022cb2 <memcpy+0xe>
 8022cbe:	bd10      	pop	{r4, pc}

08022cc0 <memset>:
 8022cc0:	4402      	add	r2, r0
 8022cc2:	4603      	mov	r3, r0
 8022cc4:	4293      	cmp	r3, r2
 8022cc6:	d100      	bne.n	8022cca <memset+0xa>
 8022cc8:	4770      	bx	lr
 8022cca:	f803 1b01 	strb.w	r1, [r3], #1
 8022cce:	e7f9      	b.n	8022cc4 <memset+0x4>

08022cd0 <_free_r>:
 8022cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cd2:	2900      	cmp	r1, #0
 8022cd4:	d048      	beq.n	8022d68 <_free_r+0x98>
 8022cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022cda:	9001      	str	r0, [sp, #4]
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	f1a1 0404 	sub.w	r4, r1, #4
 8022ce2:	bfb8      	it	lt
 8022ce4:	18e4      	addlt	r4, r4, r3
 8022ce6:	f000 f8ad 	bl	8022e44 <__malloc_lock>
 8022cea:	4a20      	ldr	r2, [pc, #128]	; (8022d6c <_free_r+0x9c>)
 8022cec:	9801      	ldr	r0, [sp, #4]
 8022cee:	6813      	ldr	r3, [r2, #0]
 8022cf0:	4615      	mov	r5, r2
 8022cf2:	b933      	cbnz	r3, 8022d02 <_free_r+0x32>
 8022cf4:	6063      	str	r3, [r4, #4]
 8022cf6:	6014      	str	r4, [r2, #0]
 8022cf8:	b003      	add	sp, #12
 8022cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022cfe:	f000 b8a7 	b.w	8022e50 <__malloc_unlock>
 8022d02:	42a3      	cmp	r3, r4
 8022d04:	d90b      	bls.n	8022d1e <_free_r+0x4e>
 8022d06:	6821      	ldr	r1, [r4, #0]
 8022d08:	1862      	adds	r2, r4, r1
 8022d0a:	4293      	cmp	r3, r2
 8022d0c:	bf04      	itt	eq
 8022d0e:	681a      	ldreq	r2, [r3, #0]
 8022d10:	685b      	ldreq	r3, [r3, #4]
 8022d12:	6063      	str	r3, [r4, #4]
 8022d14:	bf04      	itt	eq
 8022d16:	1852      	addeq	r2, r2, r1
 8022d18:	6022      	streq	r2, [r4, #0]
 8022d1a:	602c      	str	r4, [r5, #0]
 8022d1c:	e7ec      	b.n	8022cf8 <_free_r+0x28>
 8022d1e:	461a      	mov	r2, r3
 8022d20:	685b      	ldr	r3, [r3, #4]
 8022d22:	b10b      	cbz	r3, 8022d28 <_free_r+0x58>
 8022d24:	42a3      	cmp	r3, r4
 8022d26:	d9fa      	bls.n	8022d1e <_free_r+0x4e>
 8022d28:	6811      	ldr	r1, [r2, #0]
 8022d2a:	1855      	adds	r5, r2, r1
 8022d2c:	42a5      	cmp	r5, r4
 8022d2e:	d10b      	bne.n	8022d48 <_free_r+0x78>
 8022d30:	6824      	ldr	r4, [r4, #0]
 8022d32:	4421      	add	r1, r4
 8022d34:	1854      	adds	r4, r2, r1
 8022d36:	42a3      	cmp	r3, r4
 8022d38:	6011      	str	r1, [r2, #0]
 8022d3a:	d1dd      	bne.n	8022cf8 <_free_r+0x28>
 8022d3c:	681c      	ldr	r4, [r3, #0]
 8022d3e:	685b      	ldr	r3, [r3, #4]
 8022d40:	6053      	str	r3, [r2, #4]
 8022d42:	4421      	add	r1, r4
 8022d44:	6011      	str	r1, [r2, #0]
 8022d46:	e7d7      	b.n	8022cf8 <_free_r+0x28>
 8022d48:	d902      	bls.n	8022d50 <_free_r+0x80>
 8022d4a:	230c      	movs	r3, #12
 8022d4c:	6003      	str	r3, [r0, #0]
 8022d4e:	e7d3      	b.n	8022cf8 <_free_r+0x28>
 8022d50:	6825      	ldr	r5, [r4, #0]
 8022d52:	1961      	adds	r1, r4, r5
 8022d54:	428b      	cmp	r3, r1
 8022d56:	bf04      	itt	eq
 8022d58:	6819      	ldreq	r1, [r3, #0]
 8022d5a:	685b      	ldreq	r3, [r3, #4]
 8022d5c:	6063      	str	r3, [r4, #4]
 8022d5e:	bf04      	itt	eq
 8022d60:	1949      	addeq	r1, r1, r5
 8022d62:	6021      	streq	r1, [r4, #0]
 8022d64:	6054      	str	r4, [r2, #4]
 8022d66:	e7c7      	b.n	8022cf8 <_free_r+0x28>
 8022d68:	b003      	add	sp, #12
 8022d6a:	bd30      	pop	{r4, r5, pc}
 8022d6c:	20000a28 	.word	0x20000a28

08022d70 <_malloc_r>:
 8022d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d72:	1ccd      	adds	r5, r1, #3
 8022d74:	f025 0503 	bic.w	r5, r5, #3
 8022d78:	3508      	adds	r5, #8
 8022d7a:	2d0c      	cmp	r5, #12
 8022d7c:	bf38      	it	cc
 8022d7e:	250c      	movcc	r5, #12
 8022d80:	2d00      	cmp	r5, #0
 8022d82:	4606      	mov	r6, r0
 8022d84:	db01      	blt.n	8022d8a <_malloc_r+0x1a>
 8022d86:	42a9      	cmp	r1, r5
 8022d88:	d903      	bls.n	8022d92 <_malloc_r+0x22>
 8022d8a:	230c      	movs	r3, #12
 8022d8c:	6033      	str	r3, [r6, #0]
 8022d8e:	2000      	movs	r0, #0
 8022d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d92:	f000 f857 	bl	8022e44 <__malloc_lock>
 8022d96:	4921      	ldr	r1, [pc, #132]	; (8022e1c <_malloc_r+0xac>)
 8022d98:	680a      	ldr	r2, [r1, #0]
 8022d9a:	4614      	mov	r4, r2
 8022d9c:	b99c      	cbnz	r4, 8022dc6 <_malloc_r+0x56>
 8022d9e:	4f20      	ldr	r7, [pc, #128]	; (8022e20 <_malloc_r+0xb0>)
 8022da0:	683b      	ldr	r3, [r7, #0]
 8022da2:	b923      	cbnz	r3, 8022dae <_malloc_r+0x3e>
 8022da4:	4621      	mov	r1, r4
 8022da6:	4630      	mov	r0, r6
 8022da8:	f000 f83c 	bl	8022e24 <_sbrk_r>
 8022dac:	6038      	str	r0, [r7, #0]
 8022dae:	4629      	mov	r1, r5
 8022db0:	4630      	mov	r0, r6
 8022db2:	f000 f837 	bl	8022e24 <_sbrk_r>
 8022db6:	1c43      	adds	r3, r0, #1
 8022db8:	d123      	bne.n	8022e02 <_malloc_r+0x92>
 8022dba:	230c      	movs	r3, #12
 8022dbc:	6033      	str	r3, [r6, #0]
 8022dbe:	4630      	mov	r0, r6
 8022dc0:	f000 f846 	bl	8022e50 <__malloc_unlock>
 8022dc4:	e7e3      	b.n	8022d8e <_malloc_r+0x1e>
 8022dc6:	6823      	ldr	r3, [r4, #0]
 8022dc8:	1b5b      	subs	r3, r3, r5
 8022dca:	d417      	bmi.n	8022dfc <_malloc_r+0x8c>
 8022dcc:	2b0b      	cmp	r3, #11
 8022dce:	d903      	bls.n	8022dd8 <_malloc_r+0x68>
 8022dd0:	6023      	str	r3, [r4, #0]
 8022dd2:	441c      	add	r4, r3
 8022dd4:	6025      	str	r5, [r4, #0]
 8022dd6:	e004      	b.n	8022de2 <_malloc_r+0x72>
 8022dd8:	6863      	ldr	r3, [r4, #4]
 8022dda:	42a2      	cmp	r2, r4
 8022ddc:	bf0c      	ite	eq
 8022dde:	600b      	streq	r3, [r1, #0]
 8022de0:	6053      	strne	r3, [r2, #4]
 8022de2:	4630      	mov	r0, r6
 8022de4:	f000 f834 	bl	8022e50 <__malloc_unlock>
 8022de8:	f104 000b 	add.w	r0, r4, #11
 8022dec:	1d23      	adds	r3, r4, #4
 8022dee:	f020 0007 	bic.w	r0, r0, #7
 8022df2:	1ac2      	subs	r2, r0, r3
 8022df4:	d0cc      	beq.n	8022d90 <_malloc_r+0x20>
 8022df6:	1a1b      	subs	r3, r3, r0
 8022df8:	50a3      	str	r3, [r4, r2]
 8022dfa:	e7c9      	b.n	8022d90 <_malloc_r+0x20>
 8022dfc:	4622      	mov	r2, r4
 8022dfe:	6864      	ldr	r4, [r4, #4]
 8022e00:	e7cc      	b.n	8022d9c <_malloc_r+0x2c>
 8022e02:	1cc4      	adds	r4, r0, #3
 8022e04:	f024 0403 	bic.w	r4, r4, #3
 8022e08:	42a0      	cmp	r0, r4
 8022e0a:	d0e3      	beq.n	8022dd4 <_malloc_r+0x64>
 8022e0c:	1a21      	subs	r1, r4, r0
 8022e0e:	4630      	mov	r0, r6
 8022e10:	f000 f808 	bl	8022e24 <_sbrk_r>
 8022e14:	3001      	adds	r0, #1
 8022e16:	d1dd      	bne.n	8022dd4 <_malloc_r+0x64>
 8022e18:	e7cf      	b.n	8022dba <_malloc_r+0x4a>
 8022e1a:	bf00      	nop
 8022e1c:	20000a28 	.word	0x20000a28
 8022e20:	20000a2c 	.word	0x20000a2c

08022e24 <_sbrk_r>:
 8022e24:	b538      	push	{r3, r4, r5, lr}
 8022e26:	4d06      	ldr	r5, [pc, #24]	; (8022e40 <_sbrk_r+0x1c>)
 8022e28:	2300      	movs	r3, #0
 8022e2a:	4604      	mov	r4, r0
 8022e2c:	4608      	mov	r0, r1
 8022e2e:	602b      	str	r3, [r5, #0]
 8022e30:	f7f5 fa2e 	bl	8018290 <_sbrk>
 8022e34:	1c43      	adds	r3, r0, #1
 8022e36:	d102      	bne.n	8022e3e <_sbrk_r+0x1a>
 8022e38:	682b      	ldr	r3, [r5, #0]
 8022e3a:	b103      	cbz	r3, 8022e3e <_sbrk_r+0x1a>
 8022e3c:	6023      	str	r3, [r4, #0]
 8022e3e:	bd38      	pop	{r3, r4, r5, pc}
 8022e40:	20007514 	.word	0x20007514

08022e44 <__malloc_lock>:
 8022e44:	4801      	ldr	r0, [pc, #4]	; (8022e4c <__malloc_lock+0x8>)
 8022e46:	f000 b809 	b.w	8022e5c <__retarget_lock_acquire_recursive>
 8022e4a:	bf00      	nop
 8022e4c:	2000751c 	.word	0x2000751c

08022e50 <__malloc_unlock>:
 8022e50:	4801      	ldr	r0, [pc, #4]	; (8022e58 <__malloc_unlock+0x8>)
 8022e52:	f000 b804 	b.w	8022e5e <__retarget_lock_release_recursive>
 8022e56:	bf00      	nop
 8022e58:	2000751c 	.word	0x2000751c

08022e5c <__retarget_lock_acquire_recursive>:
 8022e5c:	4770      	bx	lr

08022e5e <__retarget_lock_release_recursive>:
 8022e5e:	4770      	bx	lr

08022e60 <_init>:
 8022e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e62:	bf00      	nop
 8022e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022e66:	bc08      	pop	{r3}
 8022e68:	469e      	mov	lr, r3
 8022e6a:	4770      	bx	lr

08022e6c <_fini>:
 8022e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e6e:	bf00      	nop
 8022e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022e72:	bc08      	pop	{r3}
 8022e74:	469e      	mov	lr, r3
 8022e76:	4770      	bx	lr
