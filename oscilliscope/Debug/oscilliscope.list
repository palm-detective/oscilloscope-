
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001adec  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026dec  08026dec  00040710  2**0
                  CONTENTS
  4 .ARM          00000008  08026dec  08026dec  00036dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026df4  08026df4  00040710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026df4  08026df4  00036df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026df8  08026df8  00036df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000710  20000000  08026dfc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a06c  20000710  0802750c  00040710  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2000a77c  0802750c  0004a77c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040710  2**0
                  CONTENTS, READONLY
 12 .debug_info   000277e6  00000000  00000000  00040740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006875  00000000  00000000  00067f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  00070770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c807  00000000  00000000  00072420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f878  00000000  00000000  0009ec27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78ca  00000000  00000000  000ce49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b5d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000854c  00000000  00000000  001b5dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000710 	.word	0x20000710
 800c01c:	00000000 	.word	0x00000000
 800c020:	08026dd4 	.word	0x08026dd4

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000714 	.word	0x20000714
 800c03c:	08026dd4 	.word	0x08026dd4

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b974 	b.w	800c350 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468e      	mov	lr, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d14d      	bne.n	800c12a <__udivmoddi4+0xaa>
 800c08e:	428a      	cmp	r2, r1
 800c090:	4694      	mov	ip, r2
 800c092:	d969      	bls.n	800c168 <__udivmoddi4+0xe8>
 800c094:	fab2 f282 	clz	r2, r2
 800c098:	b152      	cbz	r2, 800c0b0 <__udivmoddi4+0x30>
 800c09a:	fa01 f302 	lsl.w	r3, r1, r2
 800c09e:	f1c2 0120 	rsb	r1, r2, #32
 800c0a2:	fa20 f101 	lsr.w	r1, r0, r1
 800c0a6:	fa0c fc02 	lsl.w	ip, ip, r2
 800c0aa:	ea41 0e03 	orr.w	lr, r1, r3
 800c0ae:	4094      	lsls	r4, r2
 800c0b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c0b4:	0c21      	lsrs	r1, r4, #16
 800c0b6:	fbbe f6f8 	udiv	r6, lr, r8
 800c0ba:	fa1f f78c 	uxth.w	r7, ip
 800c0be:	fb08 e316 	mls	r3, r8, r6, lr
 800c0c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0c6:	fb06 f107 	mul.w	r1, r6, r7
 800c0ca:	4299      	cmp	r1, r3
 800c0cc:	d90a      	bls.n	800c0e4 <__udivmoddi4+0x64>
 800c0ce:	eb1c 0303 	adds.w	r3, ip, r3
 800c0d2:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d6:	f080 811f 	bcs.w	800c318 <__udivmoddi4+0x298>
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	f240 811c 	bls.w	800c318 <__udivmoddi4+0x298>
 800c0e0:	3e02      	subs	r6, #2
 800c0e2:	4463      	add	r3, ip
 800c0e4:	1a5b      	subs	r3, r3, r1
 800c0e6:	b2a4      	uxth	r4, r4
 800c0e8:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0ec:	fb08 3310 	mls	r3, r8, r0, r3
 800c0f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f4:	fb00 f707 	mul.w	r7, r0, r7
 800c0f8:	42a7      	cmp	r7, r4
 800c0fa:	d90a      	bls.n	800c112 <__udivmoddi4+0x92>
 800c0fc:	eb1c 0404 	adds.w	r4, ip, r4
 800c100:	f100 33ff 	add.w	r3, r0, #4294967295
 800c104:	f080 810a 	bcs.w	800c31c <__udivmoddi4+0x29c>
 800c108:	42a7      	cmp	r7, r4
 800c10a:	f240 8107 	bls.w	800c31c <__udivmoddi4+0x29c>
 800c10e:	4464      	add	r4, ip
 800c110:	3802      	subs	r0, #2
 800c112:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c116:	1be4      	subs	r4, r4, r7
 800c118:	2600      	movs	r6, #0
 800c11a:	b11d      	cbz	r5, 800c124 <__udivmoddi4+0xa4>
 800c11c:	40d4      	lsrs	r4, r2
 800c11e:	2300      	movs	r3, #0
 800c120:	e9c5 4300 	strd	r4, r3, [r5]
 800c124:	4631      	mov	r1, r6
 800c126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12a:	428b      	cmp	r3, r1
 800c12c:	d909      	bls.n	800c142 <__udivmoddi4+0xc2>
 800c12e:	2d00      	cmp	r5, #0
 800c130:	f000 80ef 	beq.w	800c312 <__udivmoddi4+0x292>
 800c134:	2600      	movs	r6, #0
 800c136:	e9c5 0100 	strd	r0, r1, [r5]
 800c13a:	4630      	mov	r0, r6
 800c13c:	4631      	mov	r1, r6
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	fab3 f683 	clz	r6, r3
 800c146:	2e00      	cmp	r6, #0
 800c148:	d14a      	bne.n	800c1e0 <__udivmoddi4+0x160>
 800c14a:	428b      	cmp	r3, r1
 800c14c:	d302      	bcc.n	800c154 <__udivmoddi4+0xd4>
 800c14e:	4282      	cmp	r2, r0
 800c150:	f200 80f9 	bhi.w	800c346 <__udivmoddi4+0x2c6>
 800c154:	1a84      	subs	r4, r0, r2
 800c156:	eb61 0303 	sbc.w	r3, r1, r3
 800c15a:	2001      	movs	r0, #1
 800c15c:	469e      	mov	lr, r3
 800c15e:	2d00      	cmp	r5, #0
 800c160:	d0e0      	beq.n	800c124 <__udivmoddi4+0xa4>
 800c162:	e9c5 4e00 	strd	r4, lr, [r5]
 800c166:	e7dd      	b.n	800c124 <__udivmoddi4+0xa4>
 800c168:	b902      	cbnz	r2, 800c16c <__udivmoddi4+0xec>
 800c16a:	deff      	udf	#255	; 0xff
 800c16c:	fab2 f282 	clz	r2, r2
 800c170:	2a00      	cmp	r2, #0
 800c172:	f040 8092 	bne.w	800c29a <__udivmoddi4+0x21a>
 800c176:	eba1 010c 	sub.w	r1, r1, ip
 800c17a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c17e:	fa1f fe8c 	uxth.w	lr, ip
 800c182:	2601      	movs	r6, #1
 800c184:	0c20      	lsrs	r0, r4, #16
 800c186:	fbb1 f3f7 	udiv	r3, r1, r7
 800c18a:	fb07 1113 	mls	r1, r7, r3, r1
 800c18e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c192:	fb0e f003 	mul.w	r0, lr, r3
 800c196:	4288      	cmp	r0, r1
 800c198:	d908      	bls.n	800c1ac <__udivmoddi4+0x12c>
 800c19a:	eb1c 0101 	adds.w	r1, ip, r1
 800c19e:	f103 38ff 	add.w	r8, r3, #4294967295
 800c1a2:	d202      	bcs.n	800c1aa <__udivmoddi4+0x12a>
 800c1a4:	4288      	cmp	r0, r1
 800c1a6:	f200 80cb 	bhi.w	800c340 <__udivmoddi4+0x2c0>
 800c1aa:	4643      	mov	r3, r8
 800c1ac:	1a09      	subs	r1, r1, r0
 800c1ae:	b2a4      	uxth	r4, r4
 800c1b0:	fbb1 f0f7 	udiv	r0, r1, r7
 800c1b4:	fb07 1110 	mls	r1, r7, r0, r1
 800c1b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c1bc:	fb0e fe00 	mul.w	lr, lr, r0
 800c1c0:	45a6      	cmp	lr, r4
 800c1c2:	d908      	bls.n	800c1d6 <__udivmoddi4+0x156>
 800c1c4:	eb1c 0404 	adds.w	r4, ip, r4
 800c1c8:	f100 31ff 	add.w	r1, r0, #4294967295
 800c1cc:	d202      	bcs.n	800c1d4 <__udivmoddi4+0x154>
 800c1ce:	45a6      	cmp	lr, r4
 800c1d0:	f200 80bb 	bhi.w	800c34a <__udivmoddi4+0x2ca>
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	eba4 040e 	sub.w	r4, r4, lr
 800c1da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c1de:	e79c      	b.n	800c11a <__udivmoddi4+0x9a>
 800c1e0:	f1c6 0720 	rsb	r7, r6, #32
 800c1e4:	40b3      	lsls	r3, r6
 800c1e6:	fa22 fc07 	lsr.w	ip, r2, r7
 800c1ea:	ea4c 0c03 	orr.w	ip, ip, r3
 800c1ee:	fa20 f407 	lsr.w	r4, r0, r7
 800c1f2:	fa01 f306 	lsl.w	r3, r1, r6
 800c1f6:	431c      	orrs	r4, r3
 800c1f8:	40f9      	lsrs	r1, r7
 800c1fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c1fe:	fa00 f306 	lsl.w	r3, r0, r6
 800c202:	fbb1 f8f9 	udiv	r8, r1, r9
 800c206:	0c20      	lsrs	r0, r4, #16
 800c208:	fa1f fe8c 	uxth.w	lr, ip
 800c20c:	fb09 1118 	mls	r1, r9, r8, r1
 800c210:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c214:	fb08 f00e 	mul.w	r0, r8, lr
 800c218:	4288      	cmp	r0, r1
 800c21a:	fa02 f206 	lsl.w	r2, r2, r6
 800c21e:	d90b      	bls.n	800c238 <__udivmoddi4+0x1b8>
 800c220:	eb1c 0101 	adds.w	r1, ip, r1
 800c224:	f108 3aff 	add.w	sl, r8, #4294967295
 800c228:	f080 8088 	bcs.w	800c33c <__udivmoddi4+0x2bc>
 800c22c:	4288      	cmp	r0, r1
 800c22e:	f240 8085 	bls.w	800c33c <__udivmoddi4+0x2bc>
 800c232:	f1a8 0802 	sub.w	r8, r8, #2
 800c236:	4461      	add	r1, ip
 800c238:	1a09      	subs	r1, r1, r0
 800c23a:	b2a4      	uxth	r4, r4
 800c23c:	fbb1 f0f9 	udiv	r0, r1, r9
 800c240:	fb09 1110 	mls	r1, r9, r0, r1
 800c244:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800c248:	fb00 fe0e 	mul.w	lr, r0, lr
 800c24c:	458e      	cmp	lr, r1
 800c24e:	d908      	bls.n	800c262 <__udivmoddi4+0x1e2>
 800c250:	eb1c 0101 	adds.w	r1, ip, r1
 800c254:	f100 34ff 	add.w	r4, r0, #4294967295
 800c258:	d26c      	bcs.n	800c334 <__udivmoddi4+0x2b4>
 800c25a:	458e      	cmp	lr, r1
 800c25c:	d96a      	bls.n	800c334 <__udivmoddi4+0x2b4>
 800c25e:	3802      	subs	r0, #2
 800c260:	4461      	add	r1, ip
 800c262:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c266:	fba0 9402 	umull	r9, r4, r0, r2
 800c26a:	eba1 010e 	sub.w	r1, r1, lr
 800c26e:	42a1      	cmp	r1, r4
 800c270:	46c8      	mov	r8, r9
 800c272:	46a6      	mov	lr, r4
 800c274:	d356      	bcc.n	800c324 <__udivmoddi4+0x2a4>
 800c276:	d053      	beq.n	800c320 <__udivmoddi4+0x2a0>
 800c278:	b15d      	cbz	r5, 800c292 <__udivmoddi4+0x212>
 800c27a:	ebb3 0208 	subs.w	r2, r3, r8
 800c27e:	eb61 010e 	sbc.w	r1, r1, lr
 800c282:	fa01 f707 	lsl.w	r7, r1, r7
 800c286:	fa22 f306 	lsr.w	r3, r2, r6
 800c28a:	40f1      	lsrs	r1, r6
 800c28c:	431f      	orrs	r7, r3
 800c28e:	e9c5 7100 	strd	r7, r1, [r5]
 800c292:	2600      	movs	r6, #0
 800c294:	4631      	mov	r1, r6
 800c296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29a:	f1c2 0320 	rsb	r3, r2, #32
 800c29e:	40d8      	lsrs	r0, r3
 800c2a0:	fa0c fc02 	lsl.w	ip, ip, r2
 800c2a4:	fa21 f303 	lsr.w	r3, r1, r3
 800c2a8:	4091      	lsls	r1, r2
 800c2aa:	4301      	orrs	r1, r0
 800c2ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c2b0:	fa1f fe8c 	uxth.w	lr, ip
 800c2b4:	fbb3 f0f7 	udiv	r0, r3, r7
 800c2b8:	fb07 3610 	mls	r6, r7, r0, r3
 800c2bc:	0c0b      	lsrs	r3, r1, #16
 800c2be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c2c2:	fb00 f60e 	mul.w	r6, r0, lr
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	fa04 f402 	lsl.w	r4, r4, r2
 800c2cc:	d908      	bls.n	800c2e0 <__udivmoddi4+0x260>
 800c2ce:	eb1c 0303 	adds.w	r3, ip, r3
 800c2d2:	f100 38ff 	add.w	r8, r0, #4294967295
 800c2d6:	d22f      	bcs.n	800c338 <__udivmoddi4+0x2b8>
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	d92d      	bls.n	800c338 <__udivmoddi4+0x2b8>
 800c2dc:	3802      	subs	r0, #2
 800c2de:	4463      	add	r3, ip
 800c2e0:	1b9b      	subs	r3, r3, r6
 800c2e2:	b289      	uxth	r1, r1
 800c2e4:	fbb3 f6f7 	udiv	r6, r3, r7
 800c2e8:	fb07 3316 	mls	r3, r7, r6, r3
 800c2ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2f0:	fb06 f30e 	mul.w	r3, r6, lr
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	d908      	bls.n	800c30a <__udivmoddi4+0x28a>
 800c2f8:	eb1c 0101 	adds.w	r1, ip, r1
 800c2fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800c300:	d216      	bcs.n	800c330 <__udivmoddi4+0x2b0>
 800c302:	428b      	cmp	r3, r1
 800c304:	d914      	bls.n	800c330 <__udivmoddi4+0x2b0>
 800c306:	3e02      	subs	r6, #2
 800c308:	4461      	add	r1, ip
 800c30a:	1ac9      	subs	r1, r1, r3
 800c30c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800c310:	e738      	b.n	800c184 <__udivmoddi4+0x104>
 800c312:	462e      	mov	r6, r5
 800c314:	4628      	mov	r0, r5
 800c316:	e705      	b.n	800c124 <__udivmoddi4+0xa4>
 800c318:	4606      	mov	r6, r0
 800c31a:	e6e3      	b.n	800c0e4 <__udivmoddi4+0x64>
 800c31c:	4618      	mov	r0, r3
 800c31e:	e6f8      	b.n	800c112 <__udivmoddi4+0x92>
 800c320:	454b      	cmp	r3, r9
 800c322:	d2a9      	bcs.n	800c278 <__udivmoddi4+0x1f8>
 800c324:	ebb9 0802 	subs.w	r8, r9, r2
 800c328:	eb64 0e0c 	sbc.w	lr, r4, ip
 800c32c:	3801      	subs	r0, #1
 800c32e:	e7a3      	b.n	800c278 <__udivmoddi4+0x1f8>
 800c330:	4646      	mov	r6, r8
 800c332:	e7ea      	b.n	800c30a <__udivmoddi4+0x28a>
 800c334:	4620      	mov	r0, r4
 800c336:	e794      	b.n	800c262 <__udivmoddi4+0x1e2>
 800c338:	4640      	mov	r0, r8
 800c33a:	e7d1      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c33c:	46d0      	mov	r8, sl
 800c33e:	e77b      	b.n	800c238 <__udivmoddi4+0x1b8>
 800c340:	3b02      	subs	r3, #2
 800c342:	4461      	add	r1, ip
 800c344:	e732      	b.n	800c1ac <__udivmoddi4+0x12c>
 800c346:	4630      	mov	r0, r6
 800c348:	e709      	b.n	800c15e <__udivmoddi4+0xde>
 800c34a:	4464      	add	r4, ip
 800c34c:	3802      	subs	r0, #2
 800c34e:	e742      	b.n	800c1d6 <__udivmoddi4+0x156>

0800c350 <__aeabi_idiv0>:
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop

0800c354 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <BIOS_Info+0x28>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	e000      	b.n	800c36e <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c36c:	2300      	movs	r3, #0
  }
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	2000673c 	.word	0x2000673c

0800c380 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	6039      	str	r1, [r7, #0]
 800c38a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	2b08      	cmp	r3, #8
 800c390:	f200 8151 	bhi.w	800c636 <BIOS_Ctrl+0x2b6>
 800c394:	a201      	add	r2, pc, #4	; (adr r2, 800c39c <BIOS_Ctrl+0x1c>)
 800c396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39a:	bf00      	nop
 800c39c:	0800c537 	.word	0x0800c537
 800c3a0:	0800c4e5 	.word	0x0800c4e5
 800c3a4:	0800c52b 	.word	0x0800c52b
 800c3a8:	0800c4f5 	.word	0x0800c4f5
 800c3ac:	0800c3c1 	.word	0x0800c3c1
 800c3b0:	0800c423 	.word	0x0800c423
 800c3b4:	0800c44d 	.word	0x0800c44d
 800c3b8:	0800c475 	.word	0x0800c475
 800c3bc:	0800c4d7 	.word	0x0800c4d7
    case SMPL_ST: if(Val == DISABLE)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3c6:	4b9e      	ldr	r3, [pc, #632]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	4b9c      	ldr	r3, [pc, #624]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f022 0201 	bic.w	r2, r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3d6:	e130      	b.n	800c63a <BIOS_Ctrl+0x2ba>
    				  if(Val == ENABLE)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	f040 812d 	bne.w	800c63a <BIOS_Ctrl+0x2ba>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3e0:	4b97      	ldr	r3, [pc, #604]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0201 	orr.w	r2, r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3f0:	4b94      	ldr	r3, [pc, #592]	; (800c644 <BIOS_Ctrl+0x2c4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2c4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c400:	4b91      	ldr	r3, [pc, #580]	; (800c648 <BIOS_Ctrl+0x2c8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2c8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c410:	4b8e      	ldr	r3, [pc, #568]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	4b8d      	ldr	r3, [pc, #564]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0201 	orr.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]
    			  break;
 800c420:	e10b      	b.n	800c63a <BIOS_Ctrl+0x2ba>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	085b      	lsrs	r3, r3, #1
 800c428:	4a89      	ldr	r2, [pc, #548]	; (800c650 <BIOS_Ctrl+0x2d0>)
 800c42a:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c42c:	2201      	movs	r2, #1
 800c42e:	4988      	ldr	r1, [pc, #544]	; (800c650 <BIOS_Ctrl+0x2d0>)
 800c430:	4886      	ldr	r0, [pc, #536]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c432:	f010 fe8b 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c436:	4b85      	ldr	r3, [pc, #532]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c438:	2200      	movs	r2, #0
 800c43a:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3b01      	subs	r3, #1
 800c440:	4a82      	ldr	r2, [pc, #520]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c442:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c444:	4881      	ldr	r0, [pc, #516]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c446:	f010 fcb9 	bl	801cdbc <HAL_TIM_Base_Init>
                  break;
 800c44a:	e112      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c44c:	4b7f      	ldr	r3, [pc, #508]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	4b7e      	ldr	r3, [pc, #504]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 0204 	bic.w	r2, r2, #4
 800c45a:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c45c:	4b7b      	ldr	r3, [pc, #492]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c45e:	2200      	movs	r2, #0
 800c460:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c462:	487a      	ldr	r0, [pc, #488]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c464:	f010 fcaa 	bl	801cdbc <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	4b74      	ldr	r3, [pc, #464]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	605a      	str	r2, [r3, #4]
                  break;
 800c472:	e0fe      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case AiRANGE: if(Val & DC)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c47e:	2201      	movs	r2, #1
 800c480:	2110      	movs	r1, #16
 800c482:	4874      	ldr	r0, [pc, #464]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c484:	f00d fa10 	bl	80198a8 <HAL_GPIO_WritePin>
 800c488:	e004      	b.n	800c494 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c48a:	2200      	movs	r2, #0
 800c48c:	2110      	movs	r1, #16
 800c48e:	4871      	ldr	r0, [pc, #452]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c490:	f00d fa0a 	bl	80198a8 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c49e:	2201      	movs	r2, #1
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486c      	ldr	r0, [pc, #432]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c4a4:	f00d fa00 	bl	80198a8 <HAL_GPIO_WritePin>
 800c4a8:	e004      	b.n	800c4b4 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2120      	movs	r1, #32
 800c4ae:	4869      	ldr	r0, [pc, #420]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c4b0:	f00d f9fa 	bl	80198a8 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	f003 0304 	and.w	r3, r3, #4
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4be:	2201      	movs	r2, #1
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4865      	ldr	r0, [pc, #404]	; (800c658 <BIOS_Ctrl+0x2d8>)
 800c4c4:	f00d f9f0 	bl	80198a8 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4c8:	e0d3      	b.n	800c672 <BIOS_Ctrl+0x2f2>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4862      	ldr	r0, [pc, #392]	; (800c658 <BIOS_Ctrl+0x2d8>)
 800c4d0:	f00d f9ea 	bl	80198a8 <HAL_GPIO_WritePin>
                  break;
 800c4d4:	e0cd      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	2110      	movs	r1, #16
 800c4dc:	485f      	ldr	r0, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c4de:	f00c f9ce 	bl	801887e <HAL_DAC_SetValue>
                  break;
 800c4e2:	e0c6      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	4a5d      	ldr	r2, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2e0>)
 800c4ea:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4ec:	485c      	ldr	r0, [pc, #368]	; (800c660 <BIOS_Ctrl+0x2e0>)
 800c4ee:	f010 fc65 	bl	801cdbc <HAL_TIM_Base_Init>
    			  break;
 800c4f2:	e0be      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4f4:	4b5b      	ldr	r3, [pc, #364]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	4b5a      	ldr	r3, [pc, #360]	; (800c668 <BIOS_Ctrl+0x2e8>)
 800c500:	4013      	ands	r3, r2
 800c502:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c50a:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c50c:	4b55      	ldr	r3, [pc, #340]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c514:	4b51      	ldr	r3, [pc, #324]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	4b52      	ldr	r3, [pc, #328]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6892      	ldr	r2, [r2, #8]
 800c51e:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c520:	4b50      	ldr	r3, [pc, #320]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	60da      	str	r2, [r3, #12]
                  break;
 800c528:	e0a3      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	4b4d      	ldr	r3, [pc, #308]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	605a      	str	r2, [r3, #4]
    			  break;
 800c534:	e09d      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c536:	2301      	movs	r3, #1
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d00a      	beq.n	800c556 <BIOS_Ctrl+0x1d6>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b04      	cmp	r3, #4
 800c544:	f200 8094 	bhi.w	800c670 <BIOS_Ctrl+0x2f0>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d04d      	beq.n	800c5ea <BIOS_Ctrl+0x26a>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d025      	beq.n	800c5a0 <BIOS_Ctrl+0x220>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c554:	e08c      	b.n	800c670 <BIOS_Ctrl+0x2f0>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c556:	4b43      	ldr	r3, [pc, #268]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	4b41      	ldr	r3, [pc, #260]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f022 0201 	bic.w	r2, r2, #1
 800c564:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c566:	4b3d      	ldr	r3, [pc, #244]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b3b      	ldr	r3, [pc, #236]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c576:	2304      	movs	r3, #4
 800c578:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c57a:	2302      	movs	r3, #2
 800c57c:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4619      	mov	r1, r3
 800c584:	4839      	ldr	r0, [pc, #228]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c586:	f00c ffe3 	bl	8019550 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c58a:	2310      	movs	r3, #16
 800c58c:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c592:	f107 0308 	add.w	r3, r7, #8
 800c596:	4619      	mov	r1, r3
 800c598:	4834      	ldr	r0, [pc, #208]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c59a:	f00c ffd9 	bl	8019550 <HAL_GPIO_Init>
                                  break;
 800c59e:	e049      	b.n	800c634 <BIOS_Ctrl+0x2b4>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5a0:	2304      	movs	r3, #4
 800c5a2:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c5a8:	f107 0308 	add.w	r3, r7, #8
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	482f      	ldr	r0, [pc, #188]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c5b0:	f00c ffce 	bl	8019550 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	482a      	ldr	r0, [pc, #168]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c5c4:	f00c ffc4 	bl	8019550 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5c8:	4b26      	ldr	r3, [pc, #152]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	4b25      	ldr	r3, [pc, #148]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f042 0201 	orr.w	r2, r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5d8:	4b20      	ldr	r3, [pc, #128]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b1f      	ldr	r3, [pc, #124]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f042 0201 	orr.w	r2, r2, #1
 800c5e6:	601a      	str	r2, [r3, #0]
                                  break;
 800c5e8:	e024      	b.n	800c634 <BIOS_Ctrl+0x2b4>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b1c      	ldr	r3, [pc, #112]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0201 	bic.w	r2, r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5fa:	4b18      	ldr	r3, [pc, #96]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	4b16      	ldr	r3, [pc, #88]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c60a:	2304      	movs	r3, #4
 800c60c:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c60e:	2302      	movs	r3, #2
 800c610:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c612:	f107 0308 	add.w	r3, r7, #8
 800c616:	4619      	mov	r1, r3
 800c618:	4814      	ldr	r0, [pc, #80]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c61a:	f00c ff99 	bl	8019550 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c61e:	2310      	movs	r3, #16
 800c620:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c622:	2300      	movs	r3, #0
 800c624:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4619      	mov	r1, r3
 800c62c:	480f      	ldr	r0, [pc, #60]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c62e:	f00c ff8f 	bl	8019550 <HAL_GPIO_Init>
                                  break;
 800c632:	bf00      	nop
                  break;
 800c634:	e01c      	b.n	800c670 <BIOS_Ctrl+0x2f0>

    default: break;
 800c636:	bf00      	nop
 800c638:	e01b      	b.n	800c672 <BIOS_Ctrl+0x2f2>
    			  break;
 800c63a:	bf00      	nop
 800c63c:	e019      	b.n	800c672 <BIOS_Ctrl+0x2f2>
 800c63e:	bf00      	nop
 800c640:	2000673c 	.word	0x2000673c
 800c644:	200066ac 	.word	0x200066ac
 800c648:	200066f4 	.word	0x200066f4
 800c64c:	200068c0 	.word	0x200068c0
 800c650:	200069e0 	.word	0x200069e0
 800c654:	40020800 	.word	0x40020800
 800c658:	40020400 	.word	0x40020400
 800c65c:	2000679c 	.word	0x2000679c
 800c660:	20006998 	.word	0x20006998
 800c664:	200067b0 	.word	0x200067b0
 800c668:	0ffffede 	.word	0x0ffffede
 800c66c:	40020000 	.word	0x40020000
                  break;
 800c670:	bf00      	nop
  }
}
 800c672:	bf00      	nop
 800c674:	3720      	adds	r7, #32
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop

0800c67c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c68a:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <Set_Base+0x5c>)
 800c68c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c690:	3301      	adds	r3, #1
 800c692:	0fda      	lsrs	r2, r3, #31
 800c694:	4413      	add	r3, r2
 800c696:	105b      	asrs	r3, r3, #1
 800c698:	461a      	mov	r2, r3
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <Set_Base+0x60>)
 800c69c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c69e:	2201      	movs	r2, #1
 800c6a0:	490e      	ldr	r1, [pc, #56]	; (800c6dc <Set_Base+0x60>)
 800c6a2:	480f      	ldr	r0, [pc, #60]	; (800c6e0 <Set_Base+0x64>)
 800c6a4:	f010 fd52 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a0d      	ldr	r2, [pc, #52]	; (800c6e4 <Set_Base+0x68>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <Set_Base+0x64>)
 800c6b6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6bc:	4a06      	ldr	r2, [pc, #24]	; (800c6d8 <Set_Base+0x5c>)
 800c6be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <Set_Base+0x64>)
 800c6c6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6c8:	4805      	ldr	r0, [pc, #20]	; (800c6e0 <Set_Base+0x64>)
 800c6ca:	f010 fb77 	bl	801cdbc <HAL_TIM_Base_Init>
}
 800c6ce:	bf00      	nop
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	08000bcc 	.word	0x08000bcc
 800c6dc:	200069e0 	.word	0x200069e0
 800c6e0:	200068c0 	.word	0x200068c0
 800c6e4:	08000ba4 	.word	0x08000ba4

0800c6e8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6ec:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <Set_Duty+0x44>)
 800c6ee:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b0e      	ldr	r3, [pc, #56]	; (800c730 <Set_Duty+0x48>)
 800c6f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	4a0b      	ldr	r2, [pc, #44]	; (800c72c <Set_Duty+0x44>)
 800c6fe:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c702:	f1c2 020a 	rsb	r2, r2, #10
 800c706:	fb02 f303 	mul.w	r3, r2, r3
 800c70a:	4a0a      	ldr	r2, [pc, #40]	; (800c734 <Set_Duty+0x4c>)
 800c70c:	fb82 1203 	smull	r1, r2, r2, r3
 800c710:	1092      	asrs	r2, r2, #2
 800c712:	17db      	asrs	r3, r3, #31
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	461a      	mov	r2, r3
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <Set_Duty+0x50>)
 800c71a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c71c:	2203      	movs	r2, #3
 800c71e:	4906      	ldr	r1, [pc, #24]	; (800c738 <Set_Duty+0x50>)
 800c720:	4806      	ldr	r0, [pc, #24]	; (800c73c <Set_Duty+0x54>)
 800c722:	f010 fd13 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
}
 800c726:	bf00      	nop
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000274 	.word	0x20000274
 800c730:	08000b84 	.word	0x08000b84
 800c734:	66666667 	.word	0x66666667
 800c738:	20006a18 	.word	0x20006a18
 800c73c:	20006950 	.word	0x20006950

0800c740 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c74e:	4a13      	ldr	r2, [pc, #76]	; (800c79c <Set_Fout+0x5c>)
 800c750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c754:	3301      	adds	r3, #1
 800c756:	0fda      	lsrs	r2, r3, #31
 800c758:	4413      	add	r3, r2
 800c75a:	105b      	asrs	r3, r3, #1
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <Set_Fout+0x60>)
 800c760:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c762:	2203      	movs	r2, #3
 800c764:	490e      	ldr	r1, [pc, #56]	; (800c7a0 <Set_Fout+0x60>)
 800c766:	480f      	ldr	r0, [pc, #60]	; (800c7a4 <Set_Fout+0x64>)
 800c768:	f010 fcf0 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a0d      	ldr	r2, [pc, #52]	; (800c7a8 <Set_Fout+0x68>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <Set_Fout+0x64>)
 800c77a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c77c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c780:	4a06      	ldr	r2, [pc, #24]	; (800c79c <Set_Fout+0x5c>)
 800c782:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c786:	461a      	mov	r2, r3
 800c788:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <Set_Fout+0x64>)
 800c78a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c78c:	4805      	ldr	r0, [pc, #20]	; (800c7a4 <Set_Fout+0x64>)
 800c78e:	f010 fb15 	bl	801cdbc <HAL_TIM_Base_Init>
}
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	08000b84 	.word	0x08000b84
 800c7a0:	20006a18 	.word	0x20006a18
 800c7a4:	20006950 	.word	0x20006950
 800c7a8:	08000b64 	.word	0x08000b64

0800c7ac <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7b0:	4b20      	ldr	r3, [pc, #128]	; (800c834 <ADC_Start+0x88>)
 800c7b2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7b6:	4b20      	ldr	r3, [pc, #128]	; (800c838 <ADC_Start+0x8c>)
 800c7b8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7ba:	4b20      	ldr	r3, [pc, #128]	; (800c83c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	4b1e      	ldr	r3, [pc, #120]	; (800c83c <ADC_Start+0x90>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0201 	bic.w	r2, r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ca:	4b1c      	ldr	r3, [pc, #112]	; (800c83c <ADC_Start+0x90>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a1c      	ldr	r2, [pc, #112]	; (800c840 <ADC_Start+0x94>)
 800c7d0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7d2:	4b18      	ldr	r3, [pc, #96]	; (800c834 <ADC_Start+0x88>)
 800c7d4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d8:	2b05      	cmp	r3, #5
 800c7da:	d004      	beq.n	800c7e6 <ADC_Start+0x3a>
 800c7dc:	4b15      	ldr	r3, [pc, #84]	; (800c834 <ADC_Start+0x88>)
 800c7de:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d10e      	bne.n	800c804 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7e6:	4b13      	ldr	r3, [pc, #76]	; (800c834 <ADC_Start+0x88>)
 800c7e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7ec:	2b0b      	cmp	r3, #11
 800c7ee:	dd09      	ble.n	800c804 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7f0:	4b12      	ldr	r3, [pc, #72]	; (800c83c <ADC_Start+0x90>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7f8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7fa:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <ADC_Start+0x88>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c802:	e00a      	b.n	800c81a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c804:	4b0b      	ldr	r3, [pc, #44]	; (800c834 <ADC_Start+0x88>)
 800c806:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c80a:	461a      	mov	r2, r3
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <ADC_Start+0x98>)
 800c80e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c812:	b29a      	uxth	r2, r3
 800c814:	4b09      	ldr	r3, [pc, #36]	; (800c83c <ADC_Start+0x90>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c81a:	4b08      	ldr	r3, [pc, #32]	; (800c83c <ADC_Start+0x90>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <ADC_Start+0x90>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f042 0201 	orr.w	r2, r2, #1
 800c828:	601a      	str	r2, [r3, #0]
}
 800c82a:	bf00      	nop
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20000274 	.word	0x20000274
 800c838:	200026a4 	.word	0x200026a4
 800c83c:	2000673c 	.word	0x2000673c
 800c840:	200026a8 	.word	0x200026a8
 800c844:	0800230c 	.word	0x0800230c

0800c848 <Valid_Button>:

// returns 0 if invalad or code
char Valid_Button(short x,short y)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	460a      	mov	r2, r1
 800c852:	80fb      	strh	r3, [r7, #6]
 800c854:	4613      	mov	r3, r2
 800c856:	80bb      	strh	r3, [r7, #4]
	char valid;
	valid =0;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]

	x=x/4;
 800c85c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c860:	2b00      	cmp	r3, #0
 800c862:	da00      	bge.n	800c866 <Valid_Button+0x1e>
 800c864:	3303      	adds	r3, #3
 800c866:	109b      	asrs	r3, r3, #2
 800c868:	80fb      	strh	r3, [r7, #6]
	y=y/4;
 800c86a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da00      	bge.n	800c874 <Valid_Button+0x2c>
 800c872:	3303      	adds	r3, #3
 800c874:	109b      	asrs	r3, r3, #2
 800c876:	80bb      	strh	r3, [r7, #4]

	if(y<=205)  //lower screen
 800c878:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c87c:	2bcd      	cmp	r3, #205	; 0xcd
 800c87e:	dc17      	bgt.n	800c8b0 <Valid_Button+0x68>
	{
		if((x>359) && (x<664))  //middle screen bottom
 800c880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c884:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c888:	db06      	blt.n	800c898 <Valid_Button+0x50>
 800c88a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c88e:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c892:	da01      	bge.n	800c898 <Valid_Button+0x50>
			valid =KEYCODE_DOWN;
 800c894:	2304      	movs	r3, #4
 800c896:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c89c:	2bcd      	cmp	r3, #205	; 0xcd
 800c89e:	dd05      	ble.n	800c8ac <Valid_Button+0x64>
 800c8a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8a4:	f240 3231 	movw	r2, #817	; 0x331
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	dd01      	ble.n	800c8b0 <Valid_Button+0x68>
			valid = KEYCODE_MANU;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	73fb      	strb	r3, [r7, #15]
	}

	if(y >= 818)  //upper screen
 800c8b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8b4:	f240 3231 	movw	r2, #817	; 0x331
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	dd17      	ble.n	800c8ec <Valid_Button+0xa4>
	{
		if((x>359) && (x<664))  //middle screen up
 800c8bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8c0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800c8c4:	db06      	blt.n	800c8d4 <Valid_Button+0x8c>
 800c8c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ca:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 800c8ce:	da01      	bge.n	800c8d4 <Valid_Button+0x8c>
			valid =KEYCODE_UP;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	73fb      	strb	r3, [r7, #15]
		if((x <= 205)||(x >= 818)) //left or right screen
 800c8d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d8:	2bcd      	cmp	r3, #205	; 0xcd
 800c8da:	dd05      	ble.n	800c8e8 <Valid_Button+0xa0>
 800c8dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8e0:	f240 3231 	movw	r2, #817	; 0x331
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	dd01      	ble.n	800c8ec <Valid_Button+0xa4>
			valid = KEYCODE_PLAY;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	73fb      	strb	r3, [r7, #15]
	}

	if((y>409) && (y<613))  //middle screen
 800c8ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8f0:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c8f4:	db12      	blt.n	800c91c <Valid_Button+0xd4>
 800c8f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8fa:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800c8fe:	dc0d      	bgt.n	800c91c <Valid_Button+0xd4>
	{
		if(x <= 306) //left screen
 800c900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c904:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c908:	dc01      	bgt.n	800c90e <Valid_Button+0xc6>
			valid=KEYCODE_LEFT;
 800c90a:	2305      	movs	r3, #5
 800c90c:	73fb      	strb	r3, [r7, #15]
		if(x >= 717) //right screen
 800c90e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c912:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800c916:	dd01      	ble.n	800c91c <Valid_Button+0xd4>
			valid=KEYCODE_RIGHT;
 800c918:	2306      	movs	r3, #6
 800c91a:	73fb      	strb	r3, [r7, #15]
	}

	return valid;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
	...

0800c92c <touchscan>:
//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
	short x,y;
	char Code, TmpCode, Touched;

	TmpCode = Code =0;
 800c932:	2300      	movs	r3, #0
 800c934:	71fb      	strb	r3, [r7, #7]
 800c936:	79fb      	ldrb	r3, [r7, #7]
 800c938:	71bb      	strb	r3, [r7, #6]
	Touched = Touch_Read(&x,&y);
 800c93a:	463a      	mov	r2, r7
 800c93c:	1cbb      	adds	r3, r7, #2
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f009 f8c3 	bl	8015acc <Touch_Read>
 800c946:	4603      	mov	r3, r0
 800c948:	717b      	strb	r3, [r7, #5]

	if(Touched!=0)
 800c94a:	797b      	ldrb	r3, [r7, #5]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 8087 	beq.w	800ca60 <touchscan+0x134>
	{  // there was a touch
		TmpCode = Valid_Button(x, y);
 800c952:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c956:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff ff73 	bl	800c848 <Valid_Button>
 800c962:	4603      	mov	r3, r0
 800c964:	71bb      	strb	r3, [r7, #6]
		if((TmpCode!=0) && (TmpCode != Lastcode))  //changed to pressed
 800c966:	79bb      	ldrb	r3, [r7, #6]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d03c      	beq.n	800c9e6 <touchscan+0xba>
 800c96c:	4b62      	ldr	r3, [pc, #392]	; (800caf8 <touchscan+0x1cc>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	79ba      	ldrb	r2, [r7, #6]
 800c974:	429a      	cmp	r2, r3
 800c976:	d036      	beq.n	800c9e6 <touchscan+0xba>
		{
		    Key_Wait_Cnt   = 50;                              // ���ó������� 1.0S ����
 800c978:	4b60      	ldr	r3, [pc, #384]	; (800cafc <touchscan+0x1d0>)
 800c97a:	2232      	movs	r2, #50	; 0x32
 800c97c:	701a      	strb	r2, [r3, #0]
		    Key_Repeat_Cnt = 3;                               // �趨 60mS �Զ��ظ�����
 800c97e:	4b60      	ldr	r3, [pc, #384]	; (800cb00 <touchscan+0x1d4>)
 800c980:	2203      	movs	r2, #3
 800c982:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_PLAY)
 800c984:	79bb      	ldrb	r3, [r7, #6]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d102      	bne.n	800c990 <touchscan+0x64>
		    	TmpKeyP = KEYCODE_PLAY;        // KeyCode(Play/A)
 800c98a:	4b5e      	ldr	r3, [pc, #376]	; (800cb04 <touchscan+0x1d8>)
 800c98c:	2201      	movs	r2, #1
 800c98e:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c990:	79bb      	ldrb	r3, [r7, #6]
 800c992:	2b02      	cmp	r3, #2
 800c994:	d121      	bne.n	800c9da <touchscan+0xae>
		    {
		        if(KeymS_F)
 800c996:	4b5c      	ldr	r3, [pc, #368]	; (800cb08 <touchscan+0x1dc>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d013      	beq.n	800c9c6 <touchscan+0x9a>
		        {                            // OK��˫��
		             KeymS_F = 0;                        //�������ʱ��־��KeymS_Cnt��ʱ
 800c99e:	4b5a      	ldr	r3, [pc, #360]	; (800cb08 <touchscan+0x1dc>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
		             if(KeymS_Cnt < KEYTIME)
 800c9a4:	4b59      	ldr	r3, [pc, #356]	; (800cb0c <touchscan+0x1e0>)
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	b21a      	sxth	r2, r3
 800c9aa:	4b59      	ldr	r3, [pc, #356]	; (800cb10 <touchscan+0x1e4>)
 800c9ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	da02      	bge.n	800c9ba <touchscan+0x8e>
		             {            // KEYTIME�������������μ���Ϊ˫��
		                  Code = KEYCODE_D_MANU;
 800c9b4:	230a      	movs	r3, #10
 800c9b6:	71fb      	strb	r3, [r7, #7]
 800c9b8:	e001      	b.n	800c9be <touchscan+0x92>
		             }
		             else
		             {
		                  Code = KEYCODE_MANU;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	71fb      	strb	r3, [r7, #7]
		             }
		             KeymS_Cnt = 0;
 800c9be:	4b53      	ldr	r3, [pc, #332]	; (800cb0c <touchscan+0x1e0>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	801a      	strh	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9c4:	e04b      	b.n	800ca5e <touchscan+0x132>
		        }
		        else
		        {                                  // OK��˫��
		                KeymS_Cnt = 0;
 800c9c6:	4b51      	ldr	r3, [pc, #324]	; (800cb0c <touchscan+0x1e0>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	801a      	strh	r2, [r3, #0]
		                KeymS_F = 1;
 800c9cc:	4b4e      	ldr	r3, [pc, #312]	; (800cb08 <touchscan+0x1dc>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	701a      	strb	r2, [r3, #0]
		                TmpKeyOK = KEYCODE_MANU;
 800c9d2:	4b50      	ldr	r3, [pc, #320]	; (800cb14 <touchscan+0x1e8>)
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9d8:	e041      	b.n	800ca5e <touchscan+0x132>
		        }
		    }
		    else
		    {
			    if(TmpCode != KEYCODE_PLAY)
 800c9da:	79bb      	ldrb	r3, [r7, #6]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d03e      	beq.n	800ca5e <touchscan+0x132>
			    	Code = TmpCode;
 800c9e0:	79bb      	ldrb	r3, [r7, #6]
 800c9e2:	71fb      	strb	r3, [r7, #7]
		    if(TmpCode == KEYCODE_MANU)
 800c9e4:	e03b      	b.n	800ca5e <touchscan+0x132>
		    }
		}
		else
		{
			if(TmpCode != 0)  // same press
 800c9e6:	79bb      	ldrb	r3, [r7, #6]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d039      	beq.n	800ca60 <touchscan+0x134>
			{
			      if((Key_Wait_Cnt < 25)&&(Key_Repeat_Cnt == 0))
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <touchscan+0x1d0>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b18      	cmp	r3, #24
 800c9f4:	d80f      	bhi.n	800ca16 <touchscan+0xea>
 800c9f6:	4b42      	ldr	r3, [pc, #264]	; (800cb00 <touchscan+0x1d4>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <touchscan+0xea>
			      { // �������� 0.5S ����
			    	  if((TmpCode != KEYCODE_PLAY) && (TmpCode != KEYCODE_MANU))
 800ca00:	79bb      	ldrb	r3, [r7, #6]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d007      	beq.n	800ca16 <touchscan+0xea>
 800ca06:	79bb      	ldrb	r3, [r7, #6]
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d004      	beq.n	800ca16 <touchscan+0xea>
			    	  {
						  Key_Repeat_Cnt = 3;        // �趨 60mS �Զ��ظ�����
 800ca0c:	4b3c      	ldr	r3, [pc, #240]	; (800cb00 <touchscan+0x1d4>)
 800ca0e:	2203      	movs	r2, #3
 800ca10:	701a      	strb	r2, [r3, #0]
						  Code = TmpCode;
 800ca12:	79bb      	ldrb	r3, [r7, #6]
 800ca14:	71fb      	strb	r3, [r7, #7]
					  }
			      }
			      if((Key_Wait_Cnt == 0)&&(Key_Repeat_Cnt == 0))
 800ca16:	4b39      	ldr	r3, [pc, #228]	; (800cafc <touchscan+0x1d0>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d11f      	bne.n	800ca60 <touchscan+0x134>
 800ca20:	4b37      	ldr	r3, [pc, #220]	; (800cb00 <touchscan+0x1d4>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d11a      	bne.n	800ca60 <touchscan+0x134>
			      { // �������� 1.0S ����
			    	  if((TmpCode == KEYCODE_PLAY) || (TmpCode == KEYCODE_MANU))
 800ca2a:	79bb      	ldrb	r3, [r7, #6]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d002      	beq.n	800ca36 <touchscan+0x10a>
 800ca30:	79bb      	ldrb	r3, [r7, #6]
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d114      	bne.n	800ca60 <touchscan+0x134>
			    	  {
			    		  if(TmpCode == KEYCODE_PLAY)
 800ca36:	79bb      	ldrb	r3, [r7, #6]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d104      	bne.n	800ca46 <touchscan+0x11a>
			    		  {
			    			  Code = KEYCODE_ACT; TmpKeyP = 0;
 800ca3c:	2308      	movs	r3, #8
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	4b30      	ldr	r3, [pc, #192]	; (800cb04 <touchscan+0x1d8>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
			    		  }
			    		  if(TmpCode == KEYCODE_MANU)
 800ca46:	79bb      	ldrb	r3, [r7, #6]
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d104      	bne.n	800ca56 <touchscan+0x12a>
			    		  {
			    			  Code = KEYCODE_MEM; TmpKeyM = 0;
 800ca4c:	2309      	movs	r3, #9
 800ca4e:	71fb      	strb	r3, [r7, #7]
 800ca50:	4b31      	ldr	r3, [pc, #196]	; (800cb18 <touchscan+0x1ec>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
			    		  }
			         	  Key_Repeat_Cnt = 50;       //�趨 1.0S �Զ��ظ�����
 800ca56:	4b2a      	ldr	r3, [pc, #168]	; (800cb00 <touchscan+0x1d4>)
 800ca58:	2232      	movs	r2, #50	; 0x32
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	e000      	b.n	800ca60 <touchscan+0x134>
		    if(TmpCode == KEYCODE_MANU)
 800ca5e:	bf00      	nop
			    	  }
			      }
			}
		}
	}
	if((Touched == 0)||((TmpCode == 0) && (TmpCode == Lastcode)))
 800ca60:	797b      	ldrb	r3, [r7, #5]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <touchscan+0x14c>
 800ca66:	79bb      	ldrb	r3, [r7, #6]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d13c      	bne.n	800cae6 <touchscan+0x1ba>
 800ca6c:	4b22      	ldr	r3, [pc, #136]	; (800caf8 <touchscan+0x1cc>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	79ba      	ldrb	r2, [r7, #6]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d136      	bne.n	800cae6 <touchscan+0x1ba>
	{  // untouched
	    if(TmpKeyP)
 800ca78:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <touchscan+0x1d8>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d005      	beq.n	800ca8e <touchscan+0x162>
	    {
	    	Code = TmpKeyP;
 800ca82:	4b20      	ldr	r3, [pc, #128]	; (800cb04 <touchscan+0x1d8>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	71fb      	strb	r3, [r7, #7]
	    	TmpKeyP = 0;
 800ca88:	4b1e      	ldr	r3, [pc, #120]	; (800cb04 <touchscan+0x1d8>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	701a      	strb	r2, [r3, #0]
	    }
	    if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800ca8e:	4b21      	ldr	r3, [pc, #132]	; (800cb14 <touchscan+0x1e8>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d018      	beq.n	800caca <touchscan+0x19e>
 800ca98:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <touchscan+0x1dc>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d014      	beq.n	800caca <touchscan+0x19e>
 800caa0:	4b1a      	ldr	r3, [pc, #104]	; (800cb0c <touchscan+0x1e0>)
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	b21a      	sxth	r2, r3
 800caa6:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <touchscan+0x1e4>)
 800caa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caac:	429a      	cmp	r2, r3
 800caae:	dd0c      	ble.n	800caca <touchscan+0x19e>
	    {
	        Code = TmpKeyOK;
 800cab0:	4b18      	ldr	r3, [pc, #96]	; (800cb14 <touchscan+0x1e8>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	71fb      	strb	r3, [r7, #7]
	        TmpKeyOK  = 0;
 800cab6:	4b17      	ldr	r3, [pc, #92]	; (800cb14 <touchscan+0x1e8>)
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
	        KeymS_F = 0;
 800cabc:	4b12      	ldr	r3, [pc, #72]	; (800cb08 <touchscan+0x1dc>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
	        KeymS_Cnt = 0;
 800cac2:	4b12      	ldr	r3, [pc, #72]	; (800cb0c <touchscan+0x1e0>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	801a      	strh	r2, [r3, #0]
 800cac8:	e00a      	b.n	800cae0 <touchscan+0x1b4>
	    }
	    else
	    	if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800caca:	4b13      	ldr	r3, [pc, #76]	; (800cb18 <touchscan+0x1ec>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d005      	beq.n	800cae0 <touchscan+0x1b4>
 800cad4:	4b10      	ldr	r3, [pc, #64]	; (800cb18 <touchscan+0x1ec>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	71fb      	strb	r3, [r7, #7]
 800cada:	4b0f      	ldr	r3, [pc, #60]	; (800cb18 <touchscan+0x1ec>)
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <touchscan+0x1d0>)
 800cae2:	2232      	movs	r2, #50	; 0x32
 800cae4:	701a      	strb	r2, [r3, #0]
	}
	Lastcode = TmpCode;
 800cae6:	4a04      	ldr	r2, [pc, #16]	; (800caf8 <touchscan+0x1cc>)
 800cae8:	79bb      	ldrb	r3, [r7, #6]
 800caea:	7013      	strb	r3, [r2, #0]
	return Code;
 800caec:	79fb      	ldrb	r3, [r7, #7]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	2000073e 	.word	0x2000073e
 800cafc:	20000741 	.word	0x20000741
 800cb00:	20000740 	.word	0x20000740
 800cb04:	2000072f 	.word	0x2000072f
 800cb08:	2000073f 	.word	0x2000073f
 800cb0c:	2000073a 	.word	0x2000073a
 800cb10:	20000732 	.word	0x20000732
 800cb14:	20000731 	.word	0x20000731
 800cb18:	20000730 	.word	0x20000730

0800cb1c <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800cb22:	4b73      	ldr	r3, [pc, #460]	; (800ccf0 <Tim3_ISP+0x1d4>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d008      	beq.n	800cb3c <Tim3_ISP+0x20>
 800cb2a:	4b72      	ldr	r3, [pc, #456]	; (800ccf4 <Tim3_ISP+0x1d8>)
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b21b      	sxth	r3, r3
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	3301      	adds	r3, #1
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	b21a      	sxth	r2, r3
 800cb38:	4b6e      	ldr	r3, [pc, #440]	; (800ccf4 <Tim3_ISP+0x1d8>)
 800cb3a:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800cb3c:	4b6e      	ldr	r3, [pc, #440]	; (800ccf8 <Tim3_ISP+0x1dc>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	b21b      	sxth	r3, r3
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	3301      	adds	r3, #1
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	b21a      	sxth	r2, r3
 800cb4a:	4b6b      	ldr	r3, [pc, #428]	; (800ccf8 <Tim3_ISP+0x1dc>)
 800cb4c:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800cb4e:	4b6b      	ldr	r3, [pc, #428]	; (800ccfc <Tim3_ISP+0x1e0>)
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	b21b      	sxth	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd08      	ble.n	800cb6a <Tim3_ISP+0x4e>
 800cb58:	4b68      	ldr	r3, [pc, #416]	; (800ccfc <Tim3_ISP+0x1e0>)
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	b21b      	sxth	r3, r3
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	3b01      	subs	r3, #1
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	b21a      	sxth	r2, r3
 800cb66:	4b65      	ldr	r3, [pc, #404]	; (800ccfc <Tim3_ISP+0x1e0>)
 800cb68:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800cb6a:	4b65      	ldr	r3, [pc, #404]	; (800cd00 <Tim3_ISP+0x1e4>)
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	b21b      	sxth	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f340 8081 	ble.w	800cc78 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800cb76:	4b62      	ldr	r3, [pc, #392]	; (800cd00 <Tim3_ISP+0x1e4>)
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	b21b      	sxth	r3, r3
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	b21a      	sxth	r2, r3
 800cb84:	4b5e      	ldr	r3, [pc, #376]	; (800cd00 <Tim3_ISP+0x1e4>)
 800cb86:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800cb88:	4b5d      	ldr	r3, [pc, #372]	; (800cd00 <Tim3_ISP+0x1e4>)
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	b21a      	sxth	r2, r3
 800cb8e:	4b5d      	ldr	r3, [pc, #372]	; (800cd04 <Tim3_ISP+0x1e8>)
 800cb90:	fb83 1302 	smull	r1, r3, r3, r2
 800cb94:	10d9      	asrs	r1, r3, #3
 800cb96:	17d3      	asrs	r3, r2, #31
 800cb98:	1ac9      	subs	r1, r1, r3
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	440b      	add	r3, r1
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	b21b      	sxth	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f040 809d 	bne.w	800cce6 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800cbac:	4b56      	ldr	r3, [pc, #344]	; (800cd08 <Tim3_ISP+0x1ec>)
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d006      	beq.n	800cbc4 <Tim3_ISP+0xa8>
 800cbb6:	4b54      	ldr	r3, [pc, #336]	; (800cd08 <Tim3_ISP+0x1ec>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	4b51      	ldr	r3, [pc, #324]	; (800cd08 <Tim3_ISP+0x1ec>)
 800cbc2:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800cbc4:	4b51      	ldr	r3, [pc, #324]	; (800cd0c <Tim3_ISP+0x1f0>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d006      	beq.n	800cbdc <Tim3_ISP+0xc0>
 800cbce:	4b4f      	ldr	r3, [pc, #316]	; (800cd0c <Tim3_ISP+0x1f0>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	4b4c      	ldr	r3, [pc, #304]	; (800cd0c <Tim3_ISP+0x1f0>)
 800cbda:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	71fb      	strb	r3, [r7, #7]
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800cbe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbe8:	4849      	ldr	r0, [pc, #292]	; (800cd10 <Tim3_ISP+0x1f4>)
 800cbea:	f00c fe45 	bl	8019878 <HAL_GPIO_ReadPin>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	4b48      	ldr	r3, [pc, #288]	; (800cd14 <Tim3_ISP+0x1f8>)
 800cbf4:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800cbf6:	4b47      	ldr	r3, [pc, #284]	; (800cd14 <Tim3_ISP+0x1f8>)
 800cbf8:	781a      	ldrb	r2, [r3, #0]
 800cbfa:	4b47      	ldr	r3, [pc, #284]	; (800cd18 <Tim3_ISP+0x1fc>)
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d006      	beq.n	800cc10 <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800cc02:	2301      	movs	r3, #1
 800cc04:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800cc06:	4b43      	ldr	r3, [pc, #268]	; (800cd14 <Tim3_ISP+0x1f8>)
 800cc08:	781a      	ldrb	r2, [r3, #0]
 800cc0a:	4b43      	ldr	r3, [pc, #268]	; (800cd18 <Tim3_ISP+0x1fc>)
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e005      	b.n	800cc1c <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800cc10:	4b40      	ldr	r3, [pc, #256]	; (800cd14 <Tim3_ISP+0x1f8>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800cc22:	f7ff fe83 	bl	800c92c <touchscan>
 800cc26:	4603      	mov	r3, r0
 800cc28:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800cc2a:	79bb      	ldrb	r3, [r7, #6]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <Tim3_ISP+0x11a>
 800cc30:	4a3a      	ldr	r2, [pc, #232]	; (800cd1c <Tim3_ISP+0x200>)
 800cc32:	79bb      	ldrb	r3, [r7, #6]
 800cc34:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800cc36:	4b3a      	ldr	r3, [pc, #232]	; (800cd20 <Tim3_ISP+0x204>)
 800cc38:	881b      	ldrh	r3, [r3, #0]
 800cc3a:	b21b      	sxth	r3, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd09      	ble.n	800cc54 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800cc40:	4b37      	ldr	r3, [pc, #220]	; (800cd20 <Tim3_ISP+0x204>)
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	b21a      	sxth	r2, r3
 800cc4e:	4b34      	ldr	r3, [pc, #208]	; (800cd20 <Tim3_ISP+0x204>)
 800cc50:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800cc52:	e048      	b.n	800cce6 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800cc54:	4b32      	ldr	r3, [pc, #200]	; (800cd20 <Tim3_ISP+0x204>)
 800cc56:	220c      	movs	r2, #12
 800cc58:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800cc5a:	4b32      	ldr	r3, [pc, #200]	; (800cd24 <Tim3_ISP+0x208>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bf0c      	ite	eq
 800cc64:	2301      	moveq	r3, #1
 800cc66:	2300      	movne	r3, #0
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b2d      	ldr	r3, [pc, #180]	; (800cd24 <Tim3_ISP+0x208>)
 800cc6e:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800cc70:	4b2d      	ldr	r3, [pc, #180]	; (800cd28 <Tim3_ISP+0x20c>)
 800cc72:	2201      	movs	r2, #1
 800cc74:	701a      	strb	r2, [r3, #0]
}
 800cc76:	e036      	b.n	800cce6 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800cc78:	4b21      	ldr	r3, [pc, #132]	; (800cd00 <Tim3_ISP+0x1e4>)
 800cc7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc7e:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800cc80:	4b2a      	ldr	r3, [pc, #168]	; (800cd2c <Tim3_ISP+0x210>)
 800cc82:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00d      	beq.n	800cca6 <Tim3_ISP+0x18a>
 800cc8a:	4b29      	ldr	r3, [pc, #164]	; (800cd30 <Tim3_ISP+0x214>)
 800cc8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	dd08      	ble.n	800cca6 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cc94:	4b26      	ldr	r3, [pc, #152]	; (800cd30 <Tim3_ISP+0x214>)
 800cc96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	b21a      	sxth	r2, r3
 800cca2:	4b23      	ldr	r3, [pc, #140]	; (800cd30 <Tim3_ISP+0x214>)
 800cca4:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800cca6:	4b23      	ldr	r3, [pc, #140]	; (800cd34 <Tim3_ISP+0x218>)
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	b21b      	sxth	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dd0d      	ble.n	800cccc <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800ccb0:	4b21      	ldr	r3, [pc, #132]	; (800cd38 <Tim3_ISP+0x21c>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d116      	bne.n	800cce6 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <Tim3_ISP+0x218>)
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b21b      	sxth	r3, r3
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <Tim3_ISP+0x218>)
 800ccc8:	801a      	strh	r2, [r3, #0]
}
 800ccca:	e00c      	b.n	800cce6 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800cccc:	f001 ff06 	bl	800eadc <Close_Pop>
      if(Windows_Pop)
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	; (800cd3c <Tim3_ISP+0x220>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d006      	beq.n	800cce6 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800ccd8:	4b18      	ldr	r3, [pc, #96]	; (800cd3c <Tim3_ISP+0x220>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ccde:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800cce2:	f007 f86f 	bl	8013dc4 <Clr_WavePosi>
}
 800cce6:	bf00      	nop
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	2000073f 	.word	0x2000073f
 800ccf4:	2000073a 	.word	0x2000073a
 800ccf8:	20000738 	.word	0x20000738
 800ccfc:	2000073c 	.word	0x2000073c
 800cd00:	20000736 	.word	0x20000736
 800cd04:	66666667 	.word	0x66666667
 800cd08:	20000741 	.word	0x20000741
 800cd0c:	20000740 	.word	0x20000740
 800cd10:	40020400 	.word	0x40020400
 800cd14:	20000742 	.word	0x20000742
 800cd18:	20000743 	.word	0x20000743
 800cd1c:	2000072e 	.word	0x2000072e
 800cd20:	20000734 	.word	0x20000734
 800cd24:	2000072c 	.word	0x2000072c
 800cd28:	2000072d 	.word	0x2000072d
 800cd2c:	20000274 	.word	0x20000274
 800cd30:	20002652 	.word	0x20002652
 800cd34:	20000000 	.word	0x20000000
 800cd38:	20000192 	.word	0x20000192
 800cd3c:	2000265c 	.word	0x2000265c

0800cd40 <Fill_Base>:
unsigned short AA[205];  //one more than orginal size

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pBuf, R5:Cnt, R6:Tmp,
//void Fill_Base(R3 = u32 Color)// �л��������ɫ RET: R4+202 Used: R3-R5
void Fill_Base(void)
{
 800cd40:	b480      	push	{r7}
 800cd42:	af00      	add	r7, sp, #0
	R4.A = (char*) &AA[204]; // 204��/2 ��408 Bytes
 800cd44:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <Fill_Base+0x50>)
 800cd46:	4a13      	ldr	r2, [pc, #76]	; (800cd94 <Fill_Base+0x54>)
 800cd48:	601a      	str	r2, [r3, #0]
	R5 =102;
 800cd4a:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <Fill_Base+0x58>)
 800cd4c:	2266      	movs	r2, #102	; 0x66
 800cd4e:	601a      	str	r2, [r3, #0]

Fill_Loop0:
	*(unsigned*)R4.A =R3;
 800cd50:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <Fill_Base+0x50>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a11      	ldr	r2, [pc, #68]	; (800cd9c <Fill_Base+0x5c>)
 800cd56:	6812      	ldr	r2, [r2, #0]
 800cd58:	601a      	str	r2, [r3, #0]
	R4.A= R4.A +4;
 800cd5a:	4b0d      	ldr	r3, [pc, #52]	; (800cd90 <Fill_Base+0x50>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4a0b      	ldr	r2, [pc, #44]	; (800cd90 <Fill_Base+0x50>)
 800cd62:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <Fill_Base+0x58>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	4a0b      	ldr	r2, [pc, #44]	; (800cd98 <Fill_Base+0x58>)
 800cd6c:	6013      	str	r3, [r2, #0]
	if (R5!=0)
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <Fill_Base+0x58>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d000      	beq.n	800cd78 <Fill_Base+0x38>
	{
		goto Fill_Loop0;
 800cd76:	e7eb      	b.n	800cd50 <Fill_Base+0x10>
	}
	R4.A = (char*) &AA[203];
 800cd78:	4b05      	ldr	r3, [pc, #20]	; (800cd90 <Fill_Base+0x50>)
 800cd7a:	4a09      	ldr	r2, [pc, #36]	; (800cda0 <Fill_Base+0x60>)
 800cd7c:	601a      	str	r2, [r3, #0]
	R3= GRID;
 800cd7e:	4b07      	ldr	r3, [pc, #28]	; (800cd9c <Fill_Base+0x5c>)
 800cd80:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cd84:	601a      	str	r2, [r3, #0]
}
 800cd86:	bf00      	nop
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	20000774 	.word	0x20000774
 800cd94:	20000910 	.word	0x20000910
 800cd98:	20000754 	.word	0x20000754
 800cd9c:	20000750 	.word	0x20000750
 800cda0:	2000090e 	.word	0x2000090e

0800cda4 <Buld_0>:

/*// void Buld_0(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R5*/
void Buld_0(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800cda8:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <Buld_0+0x14>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdae:	f7ff ffc7 	bl	800cd40 <Fill_Base>
}
 800cdb2:	bf00      	nop
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	20000750 	.word	0x20000750

0800cdbc <Buld_1>:

// void Buld_1(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_1(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
	R3 = GRID_COLOR;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <Buld_1+0x40>)
 800cdc2:	4a0f      	ldr	r2, [pc, #60]	; (800ce00 <Buld_1+0x44>)
 800cdc4:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdc6:	f7ff ffbb 	bl	800cd40 <Fill_Base>
	R3 =0;
 800cdca:	4b0c      	ldr	r3, [pc, #48]	; (800cdfc <Buld_1+0x40>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
	R5=402;
 800cdd0:	4b0c      	ldr	r3, [pc, #48]	; (800ce04 <Buld_1+0x48>)
 800cdd2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cdd6:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cdd8:	4b08      	ldr	r3, [pc, #32]	; (800cdfc <Buld_1+0x40>)
 800cdda:	6819      	ldr	r1, [r3, #0]
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <Buld_1+0x4c>)
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	4b08      	ldr	r3, [pc, #32]	; (800ce04 <Buld_1+0x48>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4413      	add	r3, r2
 800cde6:	b28a      	uxth	r2, r1
 800cde8:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A -2)=R3;
 800cdea:	4b04      	ldr	r3, [pc, #16]	; (800cdfc <Buld_1+0x40>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <Buld_1+0x4c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3b02      	subs	r3, #2
 800cdf4:	b292      	uxth	r2, r2
 800cdf6:	801a      	strh	r2, [r3, #0]
}
 800cdf8:	bf00      	nop
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20000750 	.word	0x20000750
 800ce00:	7bef7bef 	.word	0x7bef7bef
 800ce04:	20000754 	.word	0x20000754
 800ce08:	20000774 	.word	0x20000774

0800ce0c <Buld_2>:

// void Buld_2(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_2(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce10:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <Buld_2+0x38>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce16:	f7ff ff93 	bl	800cd40 <Fill_Base>
	R5 =400;
 800ce1a:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <Buld_2+0x3c>)
 800ce1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce20:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce22:	4b08      	ldr	r3, [pc, #32]	; (800ce44 <Buld_2+0x38>)
 800ce24:	6819      	ldr	r1, [r3, #0]
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <Buld_2+0x40>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <Buld_2+0x3c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4413      	add	r3, r2
 800ce30:	b28a      	uxth	r2, r1
 800ce32:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A)=R3;
 800ce34:	4b03      	ldr	r3, [pc, #12]	; (800ce44 <Buld_2+0x38>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b04      	ldr	r3, [pc, #16]	; (800ce4c <Buld_2+0x40>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	801a      	strh	r2, [r3, #0]
}
 800ce40:	bf00      	nop
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20000750 	.word	0x20000750
 800ce48:	20000754 	.word	0x20000754
 800ce4c:	20000774 	.word	0x20000774

0800ce50 <Buld_3>:

// void Buld_3(R4 = u16* pCol)   // ��������л������ı������� Used: R3-R6
void Buld_3(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce54:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <Buld_3+0x40>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce5a:	f7ff ff71 	bl	800cd40 <Fill_Base>
	R5=450;
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <Buld_3+0x44>)
 800ce60:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ce64:	601a      	str	r2, [r3, #0]

Loop3:
	R5 = R5 -50;
 800ce66:	4b0b      	ldr	r3, [pc, #44]	; (800ce94 <Buld_3+0x44>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3b32      	subs	r3, #50	; 0x32
 800ce6c:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <Buld_3+0x44>)
 800ce6e:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <Buld_3+0x40>)
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <Buld_3+0x48>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <Buld_3+0x44>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	b28a      	uxth	r2, r1
 800ce80:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ce82:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <Buld_3+0x44>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d000      	beq.n	800ce8c <Buld_3+0x3c>
	{
		goto Loop3;
 800ce8a:	e7ec      	b.n	800ce66 <Buld_3+0x16>
	}
	return;
 800ce8c:	bf00      	nop
}
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	20000750 	.word	0x20000750
 800ce94:	20000754 	.word	0x20000754
 800ce98:	20000774 	.word	0x20000774

0800ce9c <Buld_4>:

// void Buld_4(R4 = u16* pCol)   // ���������л������ı�������
void Buld_4(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800cea0:	4b0e      	ldr	r3, [pc, #56]	; (800cedc <Buld_4+0x40>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cea6:	f7ff ff4b 	bl	800cd40 <Fill_Base>
	R5=410;
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <Buld_4+0x44>)
 800ceac:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ceb0:	601a      	str	r2, [r3, #0]

Loop7:
	R5 = R5 -10;
 800ceb2:	4b0b      	ldr	r3, [pc, #44]	; (800cee0 <Buld_4+0x44>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3b0a      	subs	r3, #10
 800ceb8:	4a09      	ldr	r2, [pc, #36]	; (800cee0 <Buld_4+0x44>)
 800ceba:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cebc:	4b07      	ldr	r3, [pc, #28]	; (800cedc <Buld_4+0x40>)
 800cebe:	6819      	ldr	r1, [r3, #0]
 800cec0:	4b08      	ldr	r3, [pc, #32]	; (800cee4 <Buld_4+0x48>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <Buld_4+0x44>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4413      	add	r3, r2
 800ceca:	b28a      	uxth	r2, r1
 800cecc:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <Buld_4+0x44>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d000      	beq.n	800ced8 <Buld_4+0x3c>
	{
		goto Loop7;
 800ced6:	e7ec      	b.n	800ceb2 <Buld_4+0x16>
	}
	return;
 800ced8:	bf00      	nop
}
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	20000750 	.word	0x20000750
 800cee0:	20000754 	.word	0x20000754
 800cee4:	20000774 	.word	0x20000774

0800cee8 <Draw_Digit_Analog>:

// Draw_Digit(R0:pDat, R2:Col, R3:Color, R4:Posi, R8:Mask)// �����ֲ��� Used: R5-R7
// Draw_Analog(R2:Col, R3:Color, R4:pDat)// ��ģ�Ⲩ������  Used: R3-R7
void Draw_Digit_Analog(unsigned short DorA)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	4603      	mov	r3, r0
 800cef0:	80fb      	strh	r3, [r7, #6]
	if(DorA == 1)  //draw digit
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d144      	bne.n	800cf82 <Draw_Digit_Analog+0x9a>
	{
	R7 =R0 +900;
 800cef8:	4b7d      	ldr	r3, [pc, #500]	; (800d0f0 <Draw_Digit_Analog+0x208>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cf00:	4a7c      	ldr	r2, [pc, #496]	; (800d0f4 <Draw_Digit_Analog+0x20c>)
 800cf02:	6013      	str	r3, [r2, #0]
	R7 = R7 + R2;
 800cf04:	4b7b      	ldr	r3, [pc, #492]	; (800d0f4 <Draw_Digit_Analog+0x20c>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	4b7b      	ldr	r3, [pc, #492]	; (800d0f8 <Draw_Digit_Analog+0x210>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	4a79      	ldr	r2, [pc, #484]	; (800d0f4 <Draw_Digit_Analog+0x20c>)
 800cf10:	6013      	str	r3, [r2, #0]
	R5 = *(char*) R7;
 800cf12:	4b78      	ldr	r3, [pc, #480]	; (800d0f4 <Draw_Digit_Analog+0x20c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4b78      	ldr	r3, [pc, #480]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf1c:	601a      	str	r2, [r3, #0]
	R6 = *(char*) (R7 -1);
 800cf1e:	4b75      	ldr	r3, [pc, #468]	; (800d0f4 <Draw_Digit_Analog+0x20c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	4b75      	ldr	r3, [pc, #468]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cf2a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I >> 1;
 800cf2c:	4b75      	ldr	r3, [pc, #468]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	085b      	lsrs	r3, r3, #1
 800cf32:	4a74      	ldr	r2, [pc, #464]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf34:	6013      	str	r3, [r2, #0]
	R5 = R5 & R8;
 800cf36:	4b71      	ldr	r3, [pc, #452]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	4b73      	ldr	r3, [pc, #460]	; (800d108 <Draw_Digit_Analog+0x220>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4013      	ands	r3, r2
 800cf40:	4a6e      	ldr	r2, [pc, #440]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf42:	6013      	str	r3, [r2, #0]
	if (R5 == 0 )
 800cf44:	4b6d      	ldr	r3, [pc, #436]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <Draw_Digit_Analog+0x6e>
		R5 = R4.I;
 800cf4c:	4b6d      	ldr	r3, [pc, #436]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a6a      	ldr	r2, [pc, #424]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	e004      	b.n	800cf60 <Draw_Digit_Analog+0x78>
	else
		R5 = R4.I + 30;
 800cf56:	4b6b      	ldr	r3, [pc, #428]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	331e      	adds	r3, #30
 800cf5c:	4a67      	ldr	r2, [pc, #412]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf5e:	6013      	str	r3, [r2, #0]
	R6 = R6 & R8;
 800cf60:	4b67      	ldr	r3, [pc, #412]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	4b68      	ldr	r3, [pc, #416]	; (800d108 <Draw_Digit_Analog+0x220>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4013      	ands	r3, r2
 800cf6a:	4a65      	ldr	r2, [pc, #404]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cf6c:	6013      	str	r3, [r2, #0]
	if( R6 != 0)
 800cf6e:	4b64      	ldr	r3, [pc, #400]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d01c      	beq.n	800cfb0 <Draw_Digit_Analog+0xc8>
		R4.I = R4.I + 30;
 800cf76:	4b63      	ldr	r3, [pc, #396]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	331e      	adds	r3, #30
 800cf7c:	4a61      	ldr	r2, [pc, #388]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf7e:	6013      	str	r3, [r2, #0]
	goto Analog0;
 800cf80:	e016      	b.n	800cfb0 <Draw_Digit_Analog+0xc8>
	}

	if(DorA == 0)  //draw analog
 800cf82:	88fb      	ldrh	r3, [r7, #6]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f040 80a5 	bne.w	800d0d4 <Draw_Digit_Analog+0x1ec>
	{
		R4.A = R4.A +2;
 800cf8a:	4b5e      	ldr	r3, [pc, #376]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3302      	adds	r3, #2
 800cf90:	4a5c      	ldr	r2, [pc, #368]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf92:	6013      	str	r3, [r2, #0]
		R5 = *(char*)R4.A; //n1
 800cf94:	4b5b      	ldr	r3, [pc, #364]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	4b57      	ldr	r3, [pc, #348]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cf9e:	601a      	str	r2, [r3, #0]
		R4.I = *(char*)(R4.A-1); //n0
 800cfa0:	4b58      	ldr	r3, [pc, #352]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	4b56      	ldr	r3, [pc, #344]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cfac:	601a      	str	r2, [r3, #0]
		goto Analog0;
 800cfae:	e000      	b.n	800cfb2 <Draw_Digit_Analog+0xca>
	goto Analog0;
 800cfb0:	bf00      	nop

	R5 = R5 +50;
	R4.I =R4.I +50;

	Analog0:
	if (R5 == 255)
 800cfb2:	4b52      	ldr	r3, [pc, #328]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2bff      	cmp	r3, #255	; 0xff
 800cfb8:	f000 808e 	beq.w	800d0d8 <Draw_Digit_Analog+0x1f0>
		return;
	if (R5 == 0)
 800cfbc:	4b4f      	ldr	r3, [pc, #316]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f000 808b 	beq.w	800d0dc <Draw_Digit_Analog+0x1f4>
		return;

	if(R5 >= R4.I)  // R5 = | n1 - n0 |
 800cfc6:	4b4f      	ldr	r3, [pc, #316]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4b4c      	ldr	r3, [pc, #304]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d80b      	bhi.n	800cfea <Draw_Digit_Analog+0x102>
	{
		R6 =R4.I;
 800cfd2:	4b4c      	ldr	r3, [pc, #304]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a4a      	ldr	r2, [pc, #296]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cfd8:	6013      	str	r3, [r2, #0]
		R5 = R5 -R4.I;
 800cfda:	4b48      	ldr	r3, [pc, #288]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	4b49      	ldr	r3, [pc, #292]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	4a45      	ldr	r2, [pc, #276]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	e00a      	b.n	800d000 <Draw_Digit_Analog+0x118>
	}
	else
	{
		R6 = R5;  // n1, n0 ����С���� R6
 800cfea:	4b44      	ldr	r3, [pc, #272]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4a44      	ldr	r2, [pc, #272]	; (800d100 <Draw_Digit_Analog+0x218>)
 800cff0:	6013      	str	r3, [r2, #0]
		R5 = R4.I -R5;
 800cff2:	4b44      	ldr	r3, [pc, #272]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	4b41      	ldr	r3, [pc, #260]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	4a3f      	ldr	r2, [pc, #252]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800cffe:	6013      	str	r3, [r2, #0]
	}

	if(R6 > 199)
 800d000:	4b3f      	ldr	r3, [pc, #252]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2bc7      	cmp	r3, #199	; 0xc7
 800d006:	d86b      	bhi.n	800d0e0 <Draw_Digit_Analog+0x1f8>
		return;

	R4.I = R5 +R6;
 800d008:	4b3c      	ldr	r3, [pc, #240]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	4b3c      	ldr	r3, [pc, #240]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4413      	add	r3, r2
 800d012:	4a3c      	ldr	r2, [pc, #240]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800d014:	6013      	str	r3, [r2, #0]
	if(R4.I >199)
 800d016:	4b3b      	ldr	r3, [pc, #236]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2bc7      	cmp	r3, #199	; 0xc7
 800d01c:	d906      	bls.n	800d02c <Draw_Digit_Analog+0x144>
	{
		R5 = 199 - R6;
 800d01e:	4b38      	ldr	r3, [pc, #224]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800d026:	4a35      	ldr	r2, [pc, #212]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d028:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d02a:	e020      	b.n	800d06e <Draw_Digit_Analog+0x186>
	}

	if( R4.I < 3 )
 800d02c:	4b35      	ldr	r3, [pc, #212]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d957      	bls.n	800d0e4 <Draw_Digit_Analog+0x1fc>
		return;

	if( R6 <3)
 800d034:	4b32      	ldr	r3, [pc, #200]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d808      	bhi.n	800d04e <Draw_Digit_Analog+0x166>
	{
		R6 = 3;
 800d03c:	4b30      	ldr	r3, [pc, #192]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d03e:	2203      	movs	r2, #3
 800d040:	601a      	str	r2, [r3, #0]
		R5 =R4.I -3;
 800d042:	4b30      	ldr	r3, [pc, #192]	; (800d104 <Draw_Digit_Analog+0x21c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	3b03      	subs	r3, #3
 800d048:	4a2c      	ldr	r2, [pc, #176]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d04a:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d04c:	e00f      	b.n	800d06e <Draw_Digit_Analog+0x186>
	}

	if(R5 ==0 )
 800d04e:	4b2b      	ldr	r3, [pc, #172]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <Draw_Digit_Analog+0x184>
	{
		R6 = R6 -1;
 800d056:	4b2a      	ldr	r3, [pc, #168]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	4a28      	ldr	r2, [pc, #160]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d05e:	6013      	str	r3, [r2, #0]
		R5 = R5 +2;
 800d060:	4b26      	ldr	r3, [pc, #152]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3302      	adds	r3, #2
 800d066:	4a25      	ldr	r2, [pc, #148]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	e000      	b.n	800d06e <Draw_Digit_Analog+0x186>
	}

Analog2:
 800d06c:	bf00      	nop
	if( R5>= 20)
 800d06e:	4b23      	ldr	r3, [pc, #140]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b13      	cmp	r3, #19
 800d074:	d904      	bls.n	800d080 <Draw_Digit_Analog+0x198>
		R3= R3 +20;
 800d076:	4b25      	ldr	r3, [pc, #148]	; (800d10c <Draw_Digit_Analog+0x224>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3314      	adds	r3, #20
 800d07c:	4a23      	ldr	r2, [pc, #140]	; (800d10c <Draw_Digit_Analog+0x224>)
 800d07e:	6013      	str	r3, [r2, #0]

	R3 =  *(unsigned short*) (R1 +R3);
 800d080:	4b23      	ldr	r3, [pc, #140]	; (800d110 <Draw_Digit_Analog+0x228>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	4b21      	ldr	r3, [pc, #132]	; (800d10c <Draw_Digit_Analog+0x224>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4413      	add	r3, r2
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	461a      	mov	r2, r3
 800d08e:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <Draw_Digit_Analog+0x224>)
 800d090:	601a      	str	r2, [r3, #0]
	R6 = R6 << 1;
 800d092:	4b1b      	ldr	r3, [pc, #108]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	4a19      	ldr	r2, [pc, #100]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d09a:	6013      	str	r3, [r2, #0]
//    ADD     R6,  SP, R6            ;// ȷ����ʾλ��
    R6 = (unsigned) &AA[204- R6/2];
 800d09c:	4b18      	ldr	r3, [pc, #96]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	085b      	lsrs	r3, r3, #1
 800d0a2:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d0a6:	005b      	lsls	r3, r3, #1
 800d0a8:	4a1a      	ldr	r2, [pc, #104]	; (800d114 <Draw_Digit_Analog+0x22c>)
 800d0aa:	4413      	add	r3, r2
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4b14      	ldr	r3, [pc, #80]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d0b0:	601a      	str	r2, [r3, #0]

Analog3:
	*(unsigned short*)R6 = R3;
 800d0b2:	4b16      	ldr	r3, [pc, #88]	; (800d10c <Draw_Digit_Analog+0x224>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	4b12      	ldr	r3, [pc, #72]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	b292      	uxth	r2, r2
 800d0bc:	801a      	strh	r2, [r3, #0]
	R6 =R6 +2;
 800d0be:	4b10      	ldr	r3, [pc, #64]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3302      	adds	r3, #2
 800d0c4:	4a0e      	ldr	r2, [pc, #56]	; (800d100 <Draw_Digit_Analog+0x218>)
 800d0c6:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800d0c8:	4b0c      	ldr	r3, [pc, #48]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	4a0b      	ldr	r2, [pc, #44]	; (800d0fc <Draw_Digit_Analog+0x214>)
 800d0d0:	6013      	str	r3, [r2, #0]
	if(R5>=0)
		goto Analog3;
 800d0d2:	e7ee      	b.n	800d0b2 <Draw_Digit_Analog+0x1ca>
	return;
 800d0d4:	bf00      	nop
 800d0d6:	e006      	b.n	800d0e6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0d8:	bf00      	nop
 800d0da:	e004      	b.n	800d0e6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0dc:	bf00      	nop
 800d0de:	e002      	b.n	800d0e6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <Draw_Digit_Analog+0x1fe>
		return;
 800d0e4:	bf00      	nop

return;
}
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	20000744 	.word	0x20000744
 800d0f4:	2000075c 	.word	0x2000075c
 800d0f8:	2000074c 	.word	0x2000074c
 800d0fc:	20000754 	.word	0x20000754
 800d100:	20000758 	.word	0x20000758
 800d104:	20000774 	.word	0x20000774
 800d108:	20000760 	.word	0x20000760
 800d10c:	20000750 	.word	0x20000750
 800d110:	20000748 	.word	0x20000748
 800d114:	20000778 	.word	0x20000778

0800d118 <Cursor_0>:

// Cursor_0(R1:pTab, R2:Col)// ���������α�˵�  Used: R3-R6
void Cursor_0(short *pTab)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d120:	4b3c      	ldr	r3, [pc, #240]	; (800d214 <Cursor_0+0xfc>)
 800d122:	2206      	movs	r2, #6
 800d124:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d126:	4b3c      	ldr	r3, [pc, #240]	; (800d218 <Cursor_0+0x100>)
 800d128:	4a3c      	ldr	r2, [pc, #240]	; (800d21c <Cursor_0+0x104>)
 800d12a:	601a      	str	r2, [r3, #0]

Cursor01:
	R5 = pTab[R3];
 800d12c:	4b39      	ldr	r3, [pc, #228]	; (800d214 <Cursor_0+0xfc>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d13a:	461a      	mov	r2, r3
 800d13c:	4b38      	ldr	r3, [pc, #224]	; (800d220 <Cursor_0+0x108>)
 800d13e:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d140:	4b37      	ldr	r3, [pc, #220]	; (800d220 <Cursor_0+0x108>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d15c      	bne.n	800d206 <Cursor_0+0xee>
	{
		goto Cursor02;
	}
	R5 = pTab[R3 +10];
 800d14c:	4b31      	ldr	r3, [pc, #196]	; (800d214 <Cursor_0+0xfc>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	330a      	adds	r3, #10
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	4413      	add	r3, r2
 800d158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d15c:	461a      	mov	r2, r3
 800d15e:	4b30      	ldr	r3, [pc, #192]	; (800d220 <Cursor_0+0x108>)
 800d160:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d162:	4b2f      	ldr	r3, [pc, #188]	; (800d220 <Cursor_0+0x108>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	085b      	lsrs	r3, r3, #1
 800d168:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4a2d      	ldr	r2, [pc, #180]	; (800d224 <Cursor_0+0x10c>)
 800d170:	4413      	add	r3, r2
 800d172:	4a29      	ldr	r2, [pc, #164]	; (800d218 <Cursor_0+0x100>)
 800d174:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d176:	4b27      	ldr	r3, [pc, #156]	; (800d214 <Cursor_0+0xfc>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3314      	adds	r3, #20
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	4413      	add	r3, r2
 800d182:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d186:	461a      	mov	r2, r3
 800d188:	4b27      	ldr	r3, [pc, #156]	; (800d228 <Cursor_0+0x110>)
 800d18a:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -4;
 800d18c:	4b22      	ldr	r3, [pc, #136]	; (800d218 <Cursor_0+0x100>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3b04      	subs	r3, #4
 800d192:	4a21      	ldr	r2, [pc, #132]	; (800d218 <Cursor_0+0x100>)
 800d194:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d196:	4b24      	ldr	r3, [pc, #144]	; (800d228 <Cursor_0+0x110>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	4b1f      	ldr	r3, [pc, #124]	; (800d218 <Cursor_0+0x100>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	b292      	uxth	r2, r2
 800d1a0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1a2:	4b1d      	ldr	r3, [pc, #116]	; (800d218 <Cursor_0+0x100>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3302      	adds	r3, #2
 800d1a8:	4a1b      	ldr	r2, [pc, #108]	; (800d218 <Cursor_0+0x100>)
 800d1aa:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1ac:	4b1e      	ldr	r3, [pc, #120]	; (800d228 <Cursor_0+0x110>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	4b19      	ldr	r3, [pc, #100]	; (800d218 <Cursor_0+0x100>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	b292      	uxth	r2, r2
 800d1b6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1b8:	4b17      	ldr	r3, [pc, #92]	; (800d218 <Cursor_0+0x100>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3302      	adds	r3, #2
 800d1be:	4a16      	ldr	r2, [pc, #88]	; (800d218 <Cursor_0+0x100>)
 800d1c0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1c2:	4b19      	ldr	r3, [pc, #100]	; (800d228 <Cursor_0+0x110>)
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	4b14      	ldr	r3, [pc, #80]	; (800d218 <Cursor_0+0x100>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	b292      	uxth	r2, r2
 800d1cc:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1ce:	4b12      	ldr	r3, [pc, #72]	; (800d218 <Cursor_0+0x100>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	3302      	adds	r3, #2
 800d1d4:	4a10      	ldr	r2, [pc, #64]	; (800d218 <Cursor_0+0x100>)
 800d1d6:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1d8:	4b13      	ldr	r3, [pc, #76]	; (800d228 <Cursor_0+0x110>)
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <Cursor_0+0x100>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	b292      	uxth	r2, r2
 800d1e2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <Cursor_0+0x100>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3302      	adds	r3, #2
 800d1ea:	4a0b      	ldr	r2, [pc, #44]	; (800d218 <Cursor_0+0x100>)
 800d1ec:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1ee:	4b0e      	ldr	r3, [pc, #56]	; (800d228 <Cursor_0+0x110>)
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	4b09      	ldr	r3, [pc, #36]	; (800d218 <Cursor_0+0x100>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1fa:	4b07      	ldr	r3, [pc, #28]	; (800d218 <Cursor_0+0x100>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3302      	adds	r3, #2
 800d200:	4a05      	ldr	r2, [pc, #20]	; (800d218 <Cursor_0+0x100>)
 800d202:	6013      	str	r3, [r2, #0]
 800d204:	e000      	b.n	800d208 <Cursor_0+0xf0>
		goto Cursor02;
 800d206:	bf00      	nop

Cursor02:
	R3 = R3 -1;
 800d208:	4b02      	ldr	r3, [pc, #8]	; (800d214 <Cursor_0+0xfc>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4a01      	ldr	r2, [pc, #4]	; (800d214 <Cursor_0+0xfc>)
 800d210:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor01;
 800d212:	e78b      	b.n	800d12c <Cursor_0+0x14>
 800d214:	20000750 	.word	0x20000750
 800d218:	20000774 	.word	0x20000774
 800d21c:	20000910 	.word	0x20000910
 800d220:	20000754 	.word	0x20000754
 800d224:	20000778 	.word	0x20000778
 800d228:	20000758 	.word	0x20000758

0800d22c <Cursor_1>:
	}
	return;
}

void Cursor_1(short *pTab)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d234:	4b31      	ldr	r3, [pc, #196]	; (800d2fc <Cursor_1+0xd0>)
 800d236:	2206      	movs	r2, #6
 800d238:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d23a:	4b31      	ldr	r3, [pc, #196]	; (800d300 <Cursor_1+0xd4>)
 800d23c:	4a31      	ldr	r2, [pc, #196]	; (800d304 <Cursor_1+0xd8>)
 800d23e:	601a      	str	r2, [r3, #0]

Cursor11:
	R5 = pTab[R3];
 800d240:	4b2e      	ldr	r3, [pc, #184]	; (800d2fc <Cursor_1+0xd0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	4413      	add	r3, r2
 800d24a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d24e:	461a      	mov	r2, r3
 800d250:	4b2d      	ldr	r3, [pc, #180]	; (800d308 <Cursor_1+0xdc>)
 800d252:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d254:	4b2c      	ldr	r3, [pc, #176]	; (800d308 <Cursor_1+0xdc>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 0301 	and.w	r3, r3, #1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d146      	bne.n	800d2ee <Cursor_1+0xc2>
	{
		goto Cursor12;
	}
	R5 = pTab[R3 +10];
 800d260:	4b26      	ldr	r3, [pc, #152]	; (800d2fc <Cursor_1+0xd0>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	330a      	adds	r3, #10
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	4413      	add	r3, r2
 800d26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d270:	461a      	mov	r2, r3
 800d272:	4b25      	ldr	r3, [pc, #148]	; (800d308 <Cursor_1+0xdc>)
 800d274:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d276:	4b24      	ldr	r3, [pc, #144]	; (800d308 <Cursor_1+0xdc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	085b      	lsrs	r3, r3, #1
 800d27c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	4a22      	ldr	r2, [pc, #136]	; (800d30c <Cursor_1+0xe0>)
 800d284:	4413      	add	r3, r2
 800d286:	4a1e      	ldr	r2, [pc, #120]	; (800d300 <Cursor_1+0xd4>)
 800d288:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d28a:	4b1c      	ldr	r3, [pc, #112]	; (800d2fc <Cursor_1+0xd0>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3314      	adds	r3, #20
 800d290:	005b      	lsls	r3, r3, #1
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	4413      	add	r3, r2
 800d296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d29a:	461a      	mov	r2, r3
 800d29c:	4b1c      	ldr	r3, [pc, #112]	; (800d310 <Cursor_1+0xe4>)
 800d29e:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -2;
 800d2a0:	4b17      	ldr	r3, [pc, #92]	; (800d300 <Cursor_1+0xd4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3b02      	subs	r3, #2
 800d2a6:	4a16      	ldr	r2, [pc, #88]	; (800d300 <Cursor_1+0xd4>)
 800d2a8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2aa:	4b19      	ldr	r3, [pc, #100]	; (800d310 <Cursor_1+0xe4>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	4b14      	ldr	r3, [pc, #80]	; (800d300 <Cursor_1+0xd4>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2b6:	4b12      	ldr	r3, [pc, #72]	; (800d300 <Cursor_1+0xd4>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3302      	adds	r3, #2
 800d2bc:	4a10      	ldr	r2, [pc, #64]	; (800d300 <Cursor_1+0xd4>)
 800d2be:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2c0:	4b13      	ldr	r3, [pc, #76]	; (800d310 <Cursor_1+0xe4>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	4b0e      	ldr	r3, [pc, #56]	; (800d300 <Cursor_1+0xd4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	b292      	uxth	r2, r2
 800d2ca:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <Cursor_1+0xd4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3302      	adds	r3, #2
 800d2d2:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <Cursor_1+0xd4>)
 800d2d4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2d6:	4b0e      	ldr	r3, [pc, #56]	; (800d310 <Cursor_1+0xe4>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b09      	ldr	r3, [pc, #36]	; (800d300 <Cursor_1+0xd4>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	b292      	uxth	r2, r2
 800d2e0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2e2:	4b07      	ldr	r3, [pc, #28]	; (800d300 <Cursor_1+0xd4>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3302      	adds	r3, #2
 800d2e8:	4a05      	ldr	r2, [pc, #20]	; (800d300 <Cursor_1+0xd4>)
 800d2ea:	6013      	str	r3, [r2, #0]
 800d2ec:	e000      	b.n	800d2f0 <Cursor_1+0xc4>
		goto Cursor12;
 800d2ee:	bf00      	nop

Cursor12:
	R3 = R3 -1;
 800d2f0:	4b02      	ldr	r3, [pc, #8]	; (800d2fc <Cursor_1+0xd0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	4a01      	ldr	r2, [pc, #4]	; (800d2fc <Cursor_1+0xd0>)
 800d2f8:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor11;
 800d2fa:	e7a1      	b.n	800d240 <Cursor_1+0x14>
 800d2fc:	20000750 	.word	0x20000750
 800d300:	20000774 	.word	0x20000774
 800d304:	20000910 	.word	0x20000910
 800d308:	20000754 	.word	0x20000754
 800d30c:	20000778 	.word	0x20000778
 800d310:	20000758 	.word	0x20000758

0800d314 <Cursor_2>:
	}
	return;
}

void Cursor_2(short *pTab)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d31c:	4b21      	ldr	r3, [pc, #132]	; (800d3a4 <Cursor_2+0x90>)
 800d31e:	2206      	movs	r2, #6
 800d320:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d322:	4b21      	ldr	r3, [pc, #132]	; (800d3a8 <Cursor_2+0x94>)
 800d324:	4a21      	ldr	r2, [pc, #132]	; (800d3ac <Cursor_2+0x98>)
 800d326:	601a      	str	r2, [r3, #0]

Cursor21:
	R5 = pTab[R3];
 800d328:	4b1e      	ldr	r3, [pc, #120]	; (800d3a4 <Cursor_2+0x90>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	4413      	add	r3, r2
 800d332:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d336:	461a      	mov	r2, r3
 800d338:	4b1d      	ldr	r3, [pc, #116]	; (800d3b0 <Cursor_2+0x9c>)
 800d33a:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d33c:	4b1c      	ldr	r3, [pc, #112]	; (800d3b0 <Cursor_2+0x9c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	d126      	bne.n	800d396 <Cursor_2+0x82>
	{
		goto Cursor22;
	}
	R5 = pTab[R3 +10];
 800d348:	4b16      	ldr	r3, [pc, #88]	; (800d3a4 <Cursor_2+0x90>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	330a      	adds	r3, #10
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	4413      	add	r3, r2
 800d354:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d358:	461a      	mov	r2, r3
 800d35a:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <Cursor_2+0x9c>)
 800d35c:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d35e:	4b14      	ldr	r3, [pc, #80]	; (800d3b0 <Cursor_2+0x9c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	085b      	lsrs	r3, r3, #1
 800d364:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	4a12      	ldr	r2, [pc, #72]	; (800d3b4 <Cursor_2+0xa0>)
 800d36c:	4413      	add	r3, r2
 800d36e:	4a0e      	ldr	r2, [pc, #56]	; (800d3a8 <Cursor_2+0x94>)
 800d370:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d372:	4b0c      	ldr	r3, [pc, #48]	; (800d3a4 <Cursor_2+0x90>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3314      	adds	r3, #20
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	4413      	add	r3, r2
 800d37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d382:	461a      	mov	r2, r3
 800d384:	4b0c      	ldr	r3, [pc, #48]	; (800d3b8 <Cursor_2+0xa4>)
 800d386:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d388:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <Cursor_2+0xa4>)
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	4b06      	ldr	r3, [pc, #24]	; (800d3a8 <Cursor_2+0x94>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	b292      	uxth	r2, r2
 800d392:	801a      	strh	r2, [r3, #0]
 800d394:	e000      	b.n	800d398 <Cursor_2+0x84>
		goto Cursor22;
 800d396:	bf00      	nop

Cursor22:
	R3 = R3 -1;
 800d398:	4b02      	ldr	r3, [pc, #8]	; (800d3a4 <Cursor_2+0x90>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	4a01      	ldr	r2, [pc, #4]	; (800d3a4 <Cursor_2+0x90>)
 800d3a0:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor21;
 800d3a2:	e7c1      	b.n	800d328 <Cursor_2+0x14>
 800d3a4:	20000750 	.word	0x20000750
 800d3a8:	20000774 	.word	0x20000774
 800d3ac:	20000910 	.word	0x20000910
 800d3b0:	20000754 	.word	0x20000754
 800d3b4:	20000778 	.word	0x20000778
 800d3b8:	20000758 	.word	0x20000758

0800d3bc <Cursor_3>:
	return;
}

// Cursor_3(R1:pTab, R2:Col)// ���������α���  Used: R3-R6
void Cursor_3(short *pTab)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d3c4:	4b2a      	ldr	r3, [pc, #168]	; (800d470 <Cursor_3+0xb4>)
 800d3c6:	2206      	movs	r2, #6
 800d3c8:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d3ca:	4b2a      	ldr	r3, [pc, #168]	; (800d474 <Cursor_3+0xb8>)
 800d3cc:	4a2a      	ldr	r2, [pc, #168]	; (800d478 <Cursor_3+0xbc>)
 800d3ce:	601a      	str	r2, [r3, #0]

Cursor31:
	R5 = pTab[R3];
 800d3d0:	4b27      	ldr	r3, [pc, #156]	; (800d470 <Cursor_3+0xb4>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	005b      	lsls	r3, r3, #1
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	4413      	add	r3, r2
 800d3da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4b26      	ldr	r3, [pc, #152]	; (800d47c <Cursor_3+0xc0>)
 800d3e2:	601a      	str	r2, [r3, #0]
	if( (R5&2) != 0)
 800d3e4:	4b25      	ldr	r3, [pc, #148]	; (800d47c <Cursor_3+0xc0>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0302 	and.w	r3, r3, #2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d135      	bne.n	800d45c <Cursor_3+0xa0>
	{
		goto Cursor32;
	}

	R5= R2 -1;
 800d3f0:	4b23      	ldr	r3, [pc, #140]	; (800d480 <Cursor_3+0xc4>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	4a21      	ldr	r2, [pc, #132]	; (800d47c <Cursor_3+0xc0>)
 800d3f8:	6013      	str	r3, [r2, #0]
	R5 = R5 &3;
 800d3fa:	4b20      	ldr	r3, [pc, #128]	; (800d47c <Cursor_3+0xc0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0303 	and.w	r3, r3, #3
 800d402:	4a1e      	ldr	r2, [pc, #120]	; (800d47c <Cursor_3+0xc0>)
 800d404:	6013      	str	r3, [r2, #0]
	if( R5 != 0)
 800d406:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <Cursor_3+0xc0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d128      	bne.n	800d460 <Cursor_3+0xa4>
	{
		goto Cursor32;
	}

	R5 = pTab[R3 +10];
 800d40e:	4b18      	ldr	r3, [pc, #96]	; (800d470 <Cursor_3+0xb4>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	330a      	adds	r3, #10
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4413      	add	r3, r2
 800d41a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d41e:	461a      	mov	r2, r3
 800d420:	4b16      	ldr	r3, [pc, #88]	; (800d47c <Cursor_3+0xc0>)
 800d422:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d424:	4b15      	ldr	r3, [pc, #84]	; (800d47c <Cursor_3+0xc0>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	085b      	lsrs	r3, r3, #1
 800d42a:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	4a14      	ldr	r2, [pc, #80]	; (800d484 <Cursor_3+0xc8>)
 800d432:	4413      	add	r3, r2
 800d434:	4a0f      	ldr	r2, [pc, #60]	; (800d474 <Cursor_3+0xb8>)
 800d436:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d438:	4b0d      	ldr	r3, [pc, #52]	; (800d470 <Cursor_3+0xb4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3314      	adds	r3, #20
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	4413      	add	r3, r2
 800d444:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d448:	461a      	mov	r2, r3
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <Cursor_3+0xcc>)
 800d44c:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d44e:	4b0e      	ldr	r3, [pc, #56]	; (800d488 <Cursor_3+0xcc>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b08      	ldr	r3, [pc, #32]	; (800d474 <Cursor_3+0xb8>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	b292      	uxth	r2, r2
 800d458:	801a      	strh	r2, [r3, #0]
 800d45a:	e002      	b.n	800d462 <Cursor_3+0xa6>
		goto Cursor32;
 800d45c:	bf00      	nop
 800d45e:	e000      	b.n	800d462 <Cursor_3+0xa6>
		goto Cursor32;
 800d460:	bf00      	nop

Cursor32:
	R3 = R3 -1;
 800d462:	4b03      	ldr	r3, [pc, #12]	; (800d470 <Cursor_3+0xb4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3b01      	subs	r3, #1
 800d468:	4a01      	ldr	r2, [pc, #4]	; (800d470 <Cursor_3+0xb4>)
 800d46a:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor31;
 800d46c:	e7b0      	b.n	800d3d0 <Cursor_3+0x14>
 800d46e:	bf00      	nop
 800d470:	20000750 	.word	0x20000750
 800d474:	20000774 	.word	0x20000774
 800d478:	20000910 	.word	0x20000910
 800d47c:	20000754 	.word	0x20000754
 800d480:	2000074c 	.word	0x2000074c
 800d484:	20000778 	.word	0x20000778
 800d488:	20000758 	.word	0x20000758

0800d48c <Cursor_4>:
	return;
}

// Cursor_4(R1:pTab, R2:Col)// �����л��α�˵�  Used: R3-R8
void Cursor_4(short *pTab)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
	R3 = 7;
 800d494:	4b7a      	ldr	r3, [pc, #488]	; (800d680 <Cursor_4+0x1f4>)
 800d496:	2207      	movs	r2, #7
 800d498:	601a      	str	r2, [r3, #0]

Cursor40:
	R4.A = (char*) &AA[204];
 800d49a:	4b7a      	ldr	r3, [pc, #488]	; (800d684 <Cursor_4+0x1f8>)
 800d49c:	4a7a      	ldr	r2, [pc, #488]	; (800d688 <Cursor_4+0x1fc>)
 800d49e:	601a      	str	r2, [r3, #0]
	R5 = pTab[R3];
 800d4a0:	4b77      	ldr	r3, [pc, #476]	; (800d680 <Cursor_4+0x1f4>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	4b76      	ldr	r3, [pc, #472]	; (800d68c <Cursor_4+0x200>)
 800d4b2:	601a      	str	r2, [r3, #0]
	if((R5 & 1) == 0)
 800d4b4:	4b75      	ldr	r3, [pc, #468]	; (800d68c <Cursor_4+0x200>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 8145 	bne.w	800d74c <Cursor_4+0x2c0>
	{
		goto Cursor41;
 800d4c2:	bf00      	nop
	}
	goto Cursor49;

Cursor41:
	R5 = pTab[R3+10];
 800d4c4:	4b6e      	ldr	r3, [pc, #440]	; (800d680 <Cursor_4+0x1f4>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	330a      	adds	r3, #10
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4b6d      	ldr	r3, [pc, #436]	; (800d68c <Cursor_4+0x200>)
 800d4d8:	601a      	str	r2, [r3, #0]
	R6 = pTab[R3+20];
 800d4da:	4b69      	ldr	r3, [pc, #420]	; (800d680 <Cursor_4+0x1f4>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3314      	adds	r3, #20
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	4b68      	ldr	r3, [pc, #416]	; (800d690 <Cursor_4+0x204>)
 800d4ee:	601a      	str	r2, [r3, #0]

	R8 =R5 -2;
 800d4f0:	4b66      	ldr	r3, [pc, #408]	; (800d68c <Cursor_4+0x200>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3b02      	subs	r3, #2
 800d4f6:	4a67      	ldr	r2, [pc, #412]	; (800d694 <Cursor_4+0x208>)
 800d4f8:	6013      	str	r3, [r2, #0]
	if (R5 != R8)
 800d4fa:	4b64      	ldr	r3, [pc, #400]	; (800d68c <Cursor_4+0x200>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	4b65      	ldr	r3, [pc, #404]	; (800d694 <Cursor_4+0x208>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	429a      	cmp	r2, r3
 800d504:	d112      	bne.n	800d52c <Cursor_4+0xa0>
	{
		goto Cursor42;
	}

	*(unsigned short*)R4.A =R6;
 800d506:	4b62      	ldr	r3, [pc, #392]	; (800d690 <Cursor_4+0x204>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4b5e      	ldr	r3, [pc, #376]	; (800d684 <Cursor_4+0x1f8>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	b292      	uxth	r2, r2
 800d510:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +404;
 800d512:	4b5c      	ldr	r3, [pc, #368]	; (800d684 <Cursor_4+0x1f8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d51a:	4a5a      	ldr	r2, [pc, #360]	; (800d684 <Cursor_4+0x1f8>)
 800d51c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d51e:	4b5c      	ldr	r3, [pc, #368]	; (800d690 <Cursor_4+0x204>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4b58      	ldr	r3, [pc, #352]	; (800d684 <Cursor_4+0x1f8>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	b292      	uxth	r2, r2
 800d528:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d52a:	e114      	b.n	800d756 <Cursor_4+0x2ca>
		goto Cursor42;
 800d52c:	bf00      	nop

Cursor42:
	R8 = R8 +1;
 800d52e:	4b59      	ldr	r3, [pc, #356]	; (800d694 <Cursor_4+0x208>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3301      	adds	r3, #1
 800d534:	4a57      	ldr	r2, [pc, #348]	; (800d694 <Cursor_4+0x208>)
 800d536:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d538:	4b57      	ldr	r3, [pc, #348]	; (800d698 <Cursor_4+0x20c>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	4b55      	ldr	r3, [pc, #340]	; (800d694 <Cursor_4+0x208>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	429a      	cmp	r2, r3
 800d542:	d128      	bne.n	800d596 <Cursor_4+0x10a>
	{
		goto Cursor43;
	}

	*(unsigned short*)R4.A =R6;
 800d544:	4b52      	ldr	r3, [pc, #328]	; (800d690 <Cursor_4+0x204>)
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	4b4e      	ldr	r3, [pc, #312]	; (800d684 <Cursor_4+0x1f8>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	b292      	uxth	r2, r2
 800d54e:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d550:	4b4c      	ldr	r3, [pc, #304]	; (800d684 <Cursor_4+0x1f8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3302      	adds	r3, #2
 800d556:	4a4b      	ldr	r2, [pc, #300]	; (800d684 <Cursor_4+0x1f8>)
 800d558:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d55a:	4b4d      	ldr	r3, [pc, #308]	; (800d690 <Cursor_4+0x204>)
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	4b49      	ldr	r3, [pc, #292]	; (800d684 <Cursor_4+0x1f8>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	b292      	uxth	r2, r2
 800d564:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +400;
 800d566:	4b47      	ldr	r3, [pc, #284]	; (800d684 <Cursor_4+0x1f8>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d56e:	4a45      	ldr	r2, [pc, #276]	; (800d684 <Cursor_4+0x1f8>)
 800d570:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d572:	4b47      	ldr	r3, [pc, #284]	; (800d690 <Cursor_4+0x204>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	4b43      	ldr	r3, [pc, #268]	; (800d684 <Cursor_4+0x1f8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	b292      	uxth	r2, r2
 800d57c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d57e:	4b41      	ldr	r3, [pc, #260]	; (800d684 <Cursor_4+0x1f8>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3302      	adds	r3, #2
 800d584:	4a3f      	ldr	r2, [pc, #252]	; (800d684 <Cursor_4+0x1f8>)
 800d586:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d588:	4b41      	ldr	r3, [pc, #260]	; (800d690 <Cursor_4+0x204>)
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	4b3d      	ldr	r3, [pc, #244]	; (800d684 <Cursor_4+0x1f8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	b292      	uxth	r2, r2
 800d592:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d594:	e0df      	b.n	800d756 <Cursor_4+0x2ca>
		goto Cursor43;
 800d596:	bf00      	nop

Cursor43:
	R8 = R8 +1;
 800d598:	4b3e      	ldr	r3, [pc, #248]	; (800d694 <Cursor_4+0x208>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3301      	adds	r3, #1
 800d59e:	4a3d      	ldr	r2, [pc, #244]	; (800d694 <Cursor_4+0x208>)
 800d5a0:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d5a2:	4b3d      	ldr	r3, [pc, #244]	; (800d698 <Cursor_4+0x20c>)
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	4b3b      	ldr	r3, [pc, #236]	; (800d694 <Cursor_4+0x208>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d166      	bne.n	800d67c <Cursor_4+0x1f0>
	{
		goto Cursor45;
	}

	*(unsigned short*)R4.A =R6;
 800d5ae:	4b38      	ldr	r3, [pc, #224]	; (800d690 <Cursor_4+0x204>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b34      	ldr	r3, [pc, #208]	; (800d684 <Cursor_4+0x1f8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	b292      	uxth	r2, r2
 800d5b8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5ba:	4b32      	ldr	r3, [pc, #200]	; (800d684 <Cursor_4+0x1f8>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3302      	adds	r3, #2
 800d5c0:	4a30      	ldr	r2, [pc, #192]	; (800d684 <Cursor_4+0x1f8>)
 800d5c2:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5c4:	4b32      	ldr	r3, [pc, #200]	; (800d690 <Cursor_4+0x204>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	4b2e      	ldr	r3, [pc, #184]	; (800d684 <Cursor_4+0x1f8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	b292      	uxth	r2, r2
 800d5ce:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5d0:	4b2c      	ldr	r3, [pc, #176]	; (800d684 <Cursor_4+0x1f8>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3302      	adds	r3, #2
 800d5d6:	4a2b      	ldr	r2, [pc, #172]	; (800d684 <Cursor_4+0x1f8>)
 800d5d8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5da:	4b2d      	ldr	r3, [pc, #180]	; (800d690 <Cursor_4+0x204>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	4b29      	ldr	r3, [pc, #164]	; (800d684 <Cursor_4+0x1f8>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	b292      	uxth	r2, r2
 800d5e4:	801a      	strh	r2, [r3, #0]
	R4.A = (char*) &AA[4];
 800d5e6:	4b27      	ldr	r3, [pc, #156]	; (800d684 <Cursor_4+0x1f8>)
 800d5e8:	4a2c      	ldr	r2, [pc, #176]	; (800d69c <Cursor_4+0x210>)
 800d5ea:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d5ec:	4b28      	ldr	r3, [pc, #160]	; (800d690 <Cursor_4+0x204>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	4b24      	ldr	r3, [pc, #144]	; (800d684 <Cursor_4+0x1f8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	b292      	uxth	r2, r2
 800d5f6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5f8:	4b22      	ldr	r3, [pc, #136]	; (800d684 <Cursor_4+0x1f8>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	3302      	adds	r3, #2
 800d5fe:	4a21      	ldr	r2, [pc, #132]	; (800d684 <Cursor_4+0x1f8>)
 800d600:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d602:	4b23      	ldr	r3, [pc, #140]	; (800d690 <Cursor_4+0x204>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	4b1f      	ldr	r3, [pc, #124]	; (800d684 <Cursor_4+0x1f8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	b292      	uxth	r2, r2
 800d60c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d60e:	4b1d      	ldr	r3, [pc, #116]	; (800d684 <Cursor_4+0x1f8>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3302      	adds	r3, #2
 800d614:	4a1b      	ldr	r2, [pc, #108]	; (800d684 <Cursor_4+0x1f8>)
 800d616:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d618:	4b1d      	ldr	r3, [pc, #116]	; (800d690 <Cursor_4+0x204>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	4b19      	ldr	r3, [pc, #100]	; (800d684 <Cursor_4+0x1f8>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	b292      	uxth	r2, r2
 800d622:	801a      	strh	r2, [r3, #0]
	R5 = pTab[R3+10];
 800d624:	4b16      	ldr	r3, [pc, #88]	; (800d680 <Cursor_4+0x1f4>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	330a      	adds	r3, #10
 800d62a:	005b      	lsls	r3, r3, #1
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	4413      	add	r3, r2
 800d630:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d634:	461a      	mov	r2, r3
 800d636:	4b15      	ldr	r3, [pc, #84]	; (800d68c <Cursor_4+0x200>)
 800d638:	601a      	str	r2, [r3, #0]
	if((R5 & 2) != 0)
 800d63a:	4b14      	ldr	r3, [pc, #80]	; (800d68c <Cursor_4+0x200>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d12e      	bne.n	800d6a4 <Cursor_4+0x218>
	{
		goto Cursor45;
	}
	R4.A = (char*) &AA[204];
 800d646:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <Cursor_4+0x1f8>)
 800d648:	4a0f      	ldr	r2, [pc, #60]	; (800d688 <Cursor_4+0x1fc>)
 800d64a:	601a      	str	r2, [r3, #0]
	R7 = R4.I +400;
 800d64c:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <Cursor_4+0x1f8>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d654:	4a12      	ldr	r2, [pc, #72]	; (800d6a0 <Cursor_4+0x214>)
 800d656:	6013      	str	r3, [r2, #0]

Cursor44:
	R4.A= R4.A +8;
 800d658:	4b0a      	ldr	r3, [pc, #40]	; (800d684 <Cursor_4+0x1f8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3308      	adds	r3, #8
 800d65e:	4a09      	ldr	r2, [pc, #36]	; (800d684 <Cursor_4+0x1f8>)
 800d660:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d662:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <Cursor_4+0x204>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	4b07      	ldr	r3, [pc, #28]	; (800d684 <Cursor_4+0x1f8>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	b292      	uxth	r2, r2
 800d66c:	801a      	strh	r2, [r3, #0]
	if(R7 >= R4.I)
 800d66e:	4b05      	ldr	r3, [pc, #20]	; (800d684 <Cursor_4+0x1f8>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <Cursor_4+0x214>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d86a      	bhi.n	800d750 <Cursor_4+0x2c4>
	{
		goto Cursor44;
 800d67a:	e7ed      	b.n	800d658 <Cursor_4+0x1cc>
		goto Cursor45;
 800d67c:	bf00      	nop
 800d67e:	e012      	b.n	800d6a6 <Cursor_4+0x21a>
 800d680:	20000750 	.word	0x20000750
 800d684:	20000774 	.word	0x20000774
 800d688:	20000910 	.word	0x20000910
 800d68c:	20000754 	.word	0x20000754
 800d690:	20000758 	.word	0x20000758
 800d694:	20000760 	.word	0x20000760
 800d698:	2000074c 	.word	0x2000074c
 800d69c:	20000780 	.word	0x20000780
 800d6a0:	2000075c 	.word	0x2000075c
		goto Cursor45;
 800d6a4:	bf00      	nop
	}
	goto Cursor49;

Cursor45:
	R8 = R8 +1;
 800d6a6:	4b34      	ldr	r3, [pc, #208]	; (800d778 <Cursor_4+0x2ec>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	4a32      	ldr	r2, [pc, #200]	; (800d778 <Cursor_4+0x2ec>)
 800d6ae:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d6b0:	4b31      	ldr	r3, [pc, #196]	; (800d778 <Cursor_4+0x2ec>)
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	4b31      	ldr	r3, [pc, #196]	; (800d77c <Cursor_4+0x2f0>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d128      	bne.n	800d70e <Cursor_4+0x282>
	{
		goto Cursor46;
	}
	*(unsigned short*)R4.A =R6;
 800d6bc:	4b30      	ldr	r3, [pc, #192]	; (800d780 <Cursor_4+0x2f4>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	4b30      	ldr	r3, [pc, #192]	; (800d784 <Cursor_4+0x2f8>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	b292      	uxth	r2, r2
 800d6c6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6c8:	4b2e      	ldr	r3, [pc, #184]	; (800d784 <Cursor_4+0x2f8>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3302      	adds	r3, #2
 800d6ce:	4a2d      	ldr	r2, [pc, #180]	; (800d784 <Cursor_4+0x2f8>)
 800d6d0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6d2:	4b2b      	ldr	r3, [pc, #172]	; (800d780 <Cursor_4+0x2f4>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	4b2b      	ldr	r3, [pc, #172]	; (800d784 <Cursor_4+0x2f8>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	b292      	uxth	r2, r2
 800d6dc:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +400;
 800d6de:	4b29      	ldr	r3, [pc, #164]	; (800d784 <Cursor_4+0x2f8>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6e6:	4a27      	ldr	r2, [pc, #156]	; (800d784 <Cursor_4+0x2f8>)
 800d6e8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6ea:	4b25      	ldr	r3, [pc, #148]	; (800d780 <Cursor_4+0x2f4>)
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	4b25      	ldr	r3, [pc, #148]	; (800d784 <Cursor_4+0x2f8>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	b292      	uxth	r2, r2
 800d6f4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6f6:	4b23      	ldr	r3, [pc, #140]	; (800d784 <Cursor_4+0x2f8>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	3302      	adds	r3, #2
 800d6fc:	4a21      	ldr	r2, [pc, #132]	; (800d784 <Cursor_4+0x2f8>)
 800d6fe:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d700:	4b1f      	ldr	r3, [pc, #124]	; (800d780 <Cursor_4+0x2f4>)
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	4b1f      	ldr	r3, [pc, #124]	; (800d784 <Cursor_4+0x2f8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	b292      	uxth	r2, r2
 800d70a:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d70c:	e023      	b.n	800d756 <Cursor_4+0x2ca>
		goto Cursor46;
 800d70e:	bf00      	nop

Cursor46:
	R8 = R8 +1;
 800d710:	4b19      	ldr	r3, [pc, #100]	; (800d778 <Cursor_4+0x2ec>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3301      	adds	r3, #1
 800d716:	4a18      	ldr	r2, [pc, #96]	; (800d778 <Cursor_4+0x2ec>)
 800d718:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d71a:	4b17      	ldr	r3, [pc, #92]	; (800d778 <Cursor_4+0x2ec>)
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	4b17      	ldr	r3, [pc, #92]	; (800d77c <Cursor_4+0x2f0>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d116      	bne.n	800d754 <Cursor_4+0x2c8>
	{
		goto Cursor49;
	}
	*(unsigned short*)R4.A =R6;
 800d726:	4b16      	ldr	r3, [pc, #88]	; (800d780 <Cursor_4+0x2f4>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	4b16      	ldr	r3, [pc, #88]	; (800d784 <Cursor_4+0x2f8>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	b292      	uxth	r2, r2
 800d730:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +404;
 800d732:	4b14      	ldr	r3, [pc, #80]	; (800d784 <Cursor_4+0x2f8>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d73a:	4a12      	ldr	r2, [pc, #72]	; (800d784 <Cursor_4+0x2f8>)
 800d73c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <Cursor_4+0x2f4>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	4b10      	ldr	r3, [pc, #64]	; (800d784 <Cursor_4+0x2f8>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	b292      	uxth	r2, r2
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	e004      	b.n	800d756 <Cursor_4+0x2ca>
	goto Cursor49;
 800d74c:	bf00      	nop
 800d74e:	e002      	b.n	800d756 <Cursor_4+0x2ca>
	goto Cursor49;
 800d750:	bf00      	nop
 800d752:	e000      	b.n	800d756 <Cursor_4+0x2ca>
		goto Cursor49;
 800d754:	bf00      	nop

Cursor49:
	R3 = R3 +1;
 800d756:	4b0c      	ldr	r3, [pc, #48]	; (800d788 <Cursor_4+0x2fc>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3301      	adds	r3, #1
 800d75c:	4a0a      	ldr	r2, [pc, #40]	; (800d788 <Cursor_4+0x2fc>)
 800d75e:	6013      	str	r3, [r2, #0]
	if (R3 != 10)
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <Cursor_4+0x2fc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b0a      	cmp	r3, #10
 800d766:	d000      	beq.n	800d76a <Cursor_4+0x2de>
		goto Cursor40;
 800d768:	e697      	b.n	800d49a <Cursor_4+0xe>

return;
 800d76a:	bf00      	nop
}
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	20000760 	.word	0x20000760
 800d77c:	2000074c 	.word	0x2000074c
 800d780:	20000758 	.word	0x20000758
 800d784:	20000774 	.word	0x20000774
 800d788:	20000750 	.word	0x20000750

0800d78c <Send_LCD>:

// R0:pDat, R1:pTab, R2:Col, R3:Tmp, R4:pBuf, R5:WR , R6:LCD, R7:Ctrl, R8:RS
// void Send_LCD(u16* pBuf, u16 Row) // �ӻ���������һ�����ݵ�LCD Used: R3-R8
void Send_LCD(short* pTab)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	R5 = (unsigned)&AA[204];
 800d794:	4a12      	ldr	r2, [pc, #72]	; (800d7e0 <Send_LCD+0x54>)
 800d796:	4b13      	ldr	r3, [pc, #76]	; (800d7e4 <Send_LCD+0x58>)
 800d798:	601a      	str	r2, [r3, #0]

	LCD_Set_Posi(R2, WINDOW_Y0);
 800d79a:	4b13      	ldr	r3, [pc, #76]	; (800d7e8 <Send_LCD+0x5c>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	b21b      	sxth	r3, r3
 800d7a0:	2113      	movs	r1, #19
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f004 f8ca 	bl	801193c <LCD_Set_Posi>
	R4.I =203;
 800d7a8:	4b10      	ldr	r3, [pc, #64]	; (800d7ec <Send_LCD+0x60>)
 800d7aa:	22cb      	movs	r2, #203	; 0xcb
 800d7ac:	601a      	str	r2, [r3, #0]

Send_LCD_Loop:
	LCD_Set_Pixel( *(unsigned short*)R5);
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <Send_LCD+0x58>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f004 f90f 	bl	80119d8 <LCD_Set_Pixel>
	R5 = R5+2;
 800d7ba:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <Send_LCD+0x58>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	3302      	adds	r3, #2
 800d7c0:	4a08      	ldr	r2, [pc, #32]	; (800d7e4 <Send_LCD+0x58>)
 800d7c2:	6013      	str	r3, [r2, #0]
	R4.I = R4.I - 1;
 800d7c4:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <Send_LCD+0x60>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	4a08      	ldr	r2, [pc, #32]	; (800d7ec <Send_LCD+0x60>)
 800d7cc:	6013      	str	r3, [r2, #0]
	if(R4.I !=0 )
 800d7ce:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <Send_LCD+0x60>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d000      	beq.n	800d7d8 <Send_LCD+0x4c>
		goto Send_LCD_Loop;
 800d7d6:	e7ea      	b.n	800d7ae <Send_LCD+0x22>

	return;
 800d7d8:	bf00      	nop
}
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20000910 	.word	0x20000910
 800d7e4:	20000754 	.word	0x20000754
 800d7e8:	2000074c 	.word	0x2000074c
 800d7ec:	20000774 	.word	0x20000774

0800d7f0 <Draw_Pop>:

// Draw_Pop(R2:Col, R10:pPop, R11:By0, R12:By1)// ���������� Used: R5-R7
void Draw_Pop(short* pTab)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	R7 = 0x10001;
 800d7f8:	4b85      	ldr	r3, [pc, #532]	; (800da10 <Draw_Pop+0x220>)
 800d7fa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d7fe:	601a      	str	r2, [r3, #0]
	R5 = pTab[36];
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	3348      	adds	r3, #72	; 0x48
 800d804:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d808:	461a      	mov	r2, r3
 800d80a:	4b82      	ldr	r3, [pc, #520]	; (800da14 <Draw_Pop+0x224>)
 800d80c:	601a      	str	r2, [r3, #0]
	R6 = pTab[37];
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	334a      	adds	r3, #74	; 0x4a
 800d812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d816:	461a      	mov	r2, r3
 800d818:	4b7f      	ldr	r3, [pc, #508]	; (800da18 <Draw_Pop+0x228>)
 800d81a:	601a      	str	r2, [r3, #0]

	R3 = R11;
 800d81c:	4b7f      	ldr	r3, [pc, #508]	; (800da1c <Draw_Pop+0x22c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a7f      	ldr	r2, [pc, #508]	; (800da20 <Draw_Pop+0x230>)
 800d822:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d824:	4b7f      	ldr	r3, [pc, #508]	; (800da24 <Draw_Pop+0x234>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	4b7d      	ldr	r3, [pc, #500]	; (800da20 <Draw_Pop+0x230>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d10d      	bne.n	800d84c <Draw_Pop+0x5c>
	{
		R5 = R5 +6;
 800d830:	4b78      	ldr	r3, [pc, #480]	; (800da14 <Draw_Pop+0x224>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3306      	adds	r3, #6
 800d836:	4a77      	ldr	r2, [pc, #476]	; (800da14 <Draw_Pop+0x224>)
 800d838:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d83a:	4b77      	ldr	r3, [pc, #476]	; (800da18 <Draw_Pop+0x228>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3b0c      	subs	r3, #12
 800d840:	4a75      	ldr	r2, [pc, #468]	; (800da18 <Draw_Pop+0x228>)
 800d842:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d844:	4b72      	ldr	r3, [pc, #456]	; (800da10 <Draw_Pop+0x220>)
 800d846:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d84a:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 1;
 800d84c:	4b73      	ldr	r3, [pc, #460]	; (800da1c <Draw_Pop+0x22c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3301      	adds	r3, #1
 800d852:	4a73      	ldr	r2, [pc, #460]	; (800da20 <Draw_Pop+0x230>)
 800d854:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d856:	4b73      	ldr	r3, [pc, #460]	; (800da24 <Draw_Pop+0x234>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	4b71      	ldr	r3, [pc, #452]	; (800da20 <Draw_Pop+0x230>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d10d      	bne.n	800d87e <Draw_Pop+0x8e>
	{
		R5 = R5 +4;
 800d862:	4b6c      	ldr	r3, [pc, #432]	; (800da14 <Draw_Pop+0x224>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3304      	adds	r3, #4
 800d868:	4a6a      	ldr	r2, [pc, #424]	; (800da14 <Draw_Pop+0x224>)
 800d86a:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d86c:	4b6a      	ldr	r3, [pc, #424]	; (800da18 <Draw_Pop+0x228>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3b08      	subs	r3, #8
 800d872:	4a69      	ldr	r2, [pc, #420]	; (800da18 <Draw_Pop+0x228>)
 800d874:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d876:	4b66      	ldr	r3, [pc, #408]	; (800da10 <Draw_Pop+0x220>)
 800d878:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d87c:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 2;
 800d87e:	4b67      	ldr	r3, [pc, #412]	; (800da1c <Draw_Pop+0x22c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3302      	adds	r3, #2
 800d884:	4a66      	ldr	r2, [pc, #408]	; (800da20 <Draw_Pop+0x230>)
 800d886:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d888:	4b66      	ldr	r3, [pc, #408]	; (800da24 <Draw_Pop+0x234>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	4b64      	ldr	r3, [pc, #400]	; (800da20 <Draw_Pop+0x230>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d10d      	bne.n	800d8b0 <Draw_Pop+0xc0>
	{
		R5 = R5 +2;
 800d894:	4b5f      	ldr	r3, [pc, #380]	; (800da14 <Draw_Pop+0x224>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3302      	adds	r3, #2
 800d89a:	4a5e      	ldr	r2, [pc, #376]	; (800da14 <Draw_Pop+0x224>)
 800d89c:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d89e:	4b5e      	ldr	r3, [pc, #376]	; (800da18 <Draw_Pop+0x228>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3b04      	subs	r3, #4
 800d8a4:	4a5c      	ldr	r2, [pc, #368]	; (800da18 <Draw_Pop+0x228>)
 800d8a6:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8a8:	4b59      	ldr	r3, [pc, #356]	; (800da10 <Draw_Pop+0x220>)
 800d8aa:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8ae:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -3;
 800d8b0:	4b5d      	ldr	r3, [pc, #372]	; (800da28 <Draw_Pop+0x238>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3b03      	subs	r3, #3
 800d8b6:	4a5a      	ldr	r2, [pc, #360]	; (800da20 <Draw_Pop+0x230>)
 800d8b8:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8ba:	4b5a      	ldr	r3, [pc, #360]	; (800da24 <Draw_Pop+0x234>)
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	4b58      	ldr	r3, [pc, #352]	; (800da20 <Draw_Pop+0x230>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d10d      	bne.n	800d8e2 <Draw_Pop+0xf2>
	{
		R5 = R5 +2;
 800d8c6:	4b53      	ldr	r3, [pc, #332]	; (800da14 <Draw_Pop+0x224>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	4a51      	ldr	r2, [pc, #324]	; (800da14 <Draw_Pop+0x224>)
 800d8ce:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d8d0:	4b51      	ldr	r3, [pc, #324]	; (800da18 <Draw_Pop+0x228>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3b04      	subs	r3, #4
 800d8d6:	4a50      	ldr	r2, [pc, #320]	; (800da18 <Draw_Pop+0x228>)
 800d8d8:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8da:	4b4d      	ldr	r3, [pc, #308]	; (800da10 <Draw_Pop+0x220>)
 800d8dc:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8e0:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -2;
 800d8e2:	4b51      	ldr	r3, [pc, #324]	; (800da28 <Draw_Pop+0x238>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3b02      	subs	r3, #2
 800d8e8:	4a4d      	ldr	r2, [pc, #308]	; (800da20 <Draw_Pop+0x230>)
 800d8ea:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8ec:	4b4d      	ldr	r3, [pc, #308]	; (800da24 <Draw_Pop+0x234>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	4b4b      	ldr	r3, [pc, #300]	; (800da20 <Draw_Pop+0x230>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d10d      	bne.n	800d914 <Draw_Pop+0x124>
	{
		R5 = R5 +4;
 800d8f8:	4b46      	ldr	r3, [pc, #280]	; (800da14 <Draw_Pop+0x224>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4a45      	ldr	r2, [pc, #276]	; (800da14 <Draw_Pop+0x224>)
 800d900:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d902:	4b45      	ldr	r3, [pc, #276]	; (800da18 <Draw_Pop+0x228>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	3b08      	subs	r3, #8
 800d908:	4a43      	ldr	r2, [pc, #268]	; (800da18 <Draw_Pop+0x228>)
 800d90a:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d90c:	4b40      	ldr	r3, [pc, #256]	; (800da10 <Draw_Pop+0x220>)
 800d90e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d912:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -1;
 800d914:	4b44      	ldr	r3, [pc, #272]	; (800da28 <Draw_Pop+0x238>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3b01      	subs	r3, #1
 800d91a:	4a41      	ldr	r2, [pc, #260]	; (800da20 <Draw_Pop+0x230>)
 800d91c:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d91e:	4b41      	ldr	r3, [pc, #260]	; (800da24 <Draw_Pop+0x234>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	4b3f      	ldr	r3, [pc, #252]	; (800da20 <Draw_Pop+0x230>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d10d      	bne.n	800d946 <Draw_Pop+0x156>
	{
		R5 = R5 +6;
 800d92a:	4b3a      	ldr	r3, [pc, #232]	; (800da14 <Draw_Pop+0x224>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3306      	adds	r3, #6
 800d930:	4a38      	ldr	r2, [pc, #224]	; (800da14 <Draw_Pop+0x224>)
 800d932:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d934:	4b38      	ldr	r3, [pc, #224]	; (800da18 <Draw_Pop+0x228>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3b0c      	subs	r3, #12
 800d93a:	4a37      	ldr	r2, [pc, #220]	; (800da18 <Draw_Pop+0x228>)
 800d93c:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d93e:	4b34      	ldr	r3, [pc, #208]	; (800da10 <Draw_Pop+0x220>)
 800d940:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d944:	601a      	str	r2, [r3, #0]
	}

//    ADD     R4,  SP, R5
	R4.A = (char*) &AA[204-R5/2];
 800d946:	4b33      	ldr	r3, [pc, #204]	; (800da14 <Draw_Pop+0x224>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	085b      	lsrs	r3, r3, #1
 800d94c:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4a36      	ldr	r2, [pc, #216]	; (800da2c <Draw_Pop+0x23c>)
 800d954:	4413      	add	r3, r2
 800d956:	4a36      	ldr	r2, [pc, #216]	; (800da30 <Draw_Pop+0x240>)
 800d958:	6013      	str	r3, [r2, #0]
	R8 = pTab[39];
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	334e      	adds	r3, #78	; 0x4e
 800d95e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d962:	461a      	mov	r2, r3
 800d964:	4b33      	ldr	r3, [pc, #204]	; (800da34 <Draw_Pop+0x244>)
 800d966:	601a      	str	r2, [r3, #0]
	R9 = pTab[40];
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3350      	adds	r3, #80	; 0x50
 800d96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d970:	461a      	mov	r2, r3
 800d972:	4b31      	ldr	r3, [pc, #196]	; (800da38 <Draw_Pop+0x248>)
 800d974:	601a      	str	r2, [r3, #0]
	R3 =  *(unsigned short*) R10;
 800d976:	4b31      	ldr	r3, [pc, #196]	; (800da3c <Draw_Pop+0x24c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	461a      	mov	r2, r3
 800d97e:	4b28      	ldr	r3, [pc, #160]	; (800da20 <Draw_Pop+0x230>)
 800d980:	601a      	str	r2, [r3, #0]
	R10= R10+2;
 800d982:	4b2e      	ldr	r3, [pc, #184]	; (800da3c <Draw_Pop+0x24c>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	3302      	adds	r3, #2
 800d988:	4a2c      	ldr	r2, [pc, #176]	; (800da3c <Draw_Pop+0x24c>)
 800d98a:	6013      	str	r3, [r2, #0]

	if(R8 == 0)
 800d98c:	4b29      	ldr	r3, [pc, #164]	; (800da34 <Draw_Pop+0x244>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d100      	bne.n	800d996 <Draw_Pop+0x1a6>
	{
		goto Pop_Loop_Penetrate;
 800d994:	e054      	b.n	800da40 <Draw_Pop+0x250>
	}

Pop_Loop:
 800d996:	bf00      	nop
	if((R3 & R7) != 0)
 800d998:	4b21      	ldr	r3, [pc, #132]	; (800da20 <Draw_Pop+0x230>)
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	4b1c      	ldr	r3, [pc, #112]	; (800da10 <Draw_Pop+0x220>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d006      	beq.n	800d9b4 <Draw_Pop+0x1c4>
		R9 = *R4.A;
 800d9a6:	4b22      	ldr	r3, [pc, #136]	; (800da30 <Draw_Pop+0x240>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4b22      	ldr	r3, [pc, #136]	; (800da38 <Draw_Pop+0x248>)
 800d9b0:	601a      	str	r2, [r3, #0]
 800d9b2:	e005      	b.n	800d9c0 <Draw_Pop+0x1d0>
	else
		R8 = *R4.A;
 800d9b4:	4b1e      	ldr	r3, [pc, #120]	; (800da30 <Draw_Pop+0x240>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <Draw_Pop+0x244>)
 800d9be:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d9c0:	4b1b      	ldr	r3, [pc, #108]	; (800da30 <Draw_Pop+0x240>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	4a1a      	ldr	r2, [pc, #104]	; (800da30 <Draw_Pop+0x240>)
 800d9c8:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d9ca:	4b13      	ldr	r3, [pc, #76]	; (800da18 <Draw_Pop+0x228>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3b02      	subs	r3, #2
 800d9d0:	4a11      	ldr	r2, [pc, #68]	; (800da18 <Draw_Pop+0x228>)
 800d9d2:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d9d4:	4b10      	ldr	r3, [pc, #64]	; (800da18 <Draw_Pop+0x228>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d066      	beq.n	800daaa <Draw_Pop+0x2ba>
		return;

	if((R7 & 0x80000000) != 0 )
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <Draw_Pop+0x220>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	da0f      	bge.n	800da04 <Draw_Pop+0x214>
	{
		R3 = *(unsigned short*) R10;
 800d9e4:	4b15      	ldr	r3, [pc, #84]	; (800da3c <Draw_Pop+0x24c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <Draw_Pop+0x230>)
 800d9ee:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d9f0:	4b12      	ldr	r3, [pc, #72]	; (800da3c <Draw_Pop+0x24c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3302      	adds	r3, #2
 800d9f6:	4a11      	ldr	r2, [pc, #68]	; (800da3c <Draw_Pop+0x24c>)
 800d9f8:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800d9fa:	4b05      	ldr	r3, [pc, #20]	; (800da10 <Draw_Pop+0x220>)
 800d9fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	e7c9      	b.n	800d998 <Draw_Pop+0x1a8>
	}
	else
		R7 = R7 << 1;
 800da04:	4b02      	ldr	r3, [pc, #8]	; (800da10 <Draw_Pop+0x220>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	4a01      	ldr	r2, [pc, #4]	; (800da10 <Draw_Pop+0x220>)
 800da0c:	6013      	str	r3, [r2, #0]
	goto Pop_Loop;
 800da0e:	e7c3      	b.n	800d998 <Draw_Pop+0x1a8>
 800da10:	2000075c 	.word	0x2000075c
 800da14:	20000754 	.word	0x20000754
 800da18:	20000758 	.word	0x20000758
 800da1c:	20000768 	.word	0x20000768
 800da20:	20000750 	.word	0x20000750
 800da24:	2000074c 	.word	0x2000074c
 800da28:	2000076c 	.word	0x2000076c
 800da2c:	20000778 	.word	0x20000778
 800da30:	20000774 	.word	0x20000774
 800da34:	20000760 	.word	0x20000760
 800da38:	20000764 	.word	0x20000764
 800da3c:	20000770 	.word	0x20000770

Pop_Loop_Penetrate:
	if((R2 & R7) != 0)
 800da40:	4b1e      	ldr	r3, [pc, #120]	; (800dabc <Draw_Pop+0x2cc>)
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	4b1e      	ldr	r3, [pc, #120]	; (800dac0 <Draw_Pop+0x2d0>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4013      	ands	r3, r2
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d005      	beq.n	800da5a <Draw_Pop+0x26a>
		R9 = *R4.A;
 800da4e:	4b1d      	ldr	r3, [pc, #116]	; (800dac4 <Draw_Pop+0x2d4>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	461a      	mov	r2, r3
 800da56:	4b1c      	ldr	r3, [pc, #112]	; (800dac8 <Draw_Pop+0x2d8>)
 800da58:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800da5a:	4b1a      	ldr	r3, [pc, #104]	; (800dac4 <Draw_Pop+0x2d4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3301      	adds	r3, #1
 800da60:	4a18      	ldr	r2, [pc, #96]	; (800dac4 <Draw_Pop+0x2d4>)
 800da62:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800da64:	4b19      	ldr	r3, [pc, #100]	; (800dacc <Draw_Pop+0x2dc>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3b02      	subs	r3, #2
 800da6a:	4a18      	ldr	r2, [pc, #96]	; (800dacc <Draw_Pop+0x2dc>)
 800da6c:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800da6e:	4b17      	ldr	r3, [pc, #92]	; (800dacc <Draw_Pop+0x2dc>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d01b      	beq.n	800daae <Draw_Pop+0x2be>
		return;

	if((R7 & 0x80000000) != 0 )
 800da76:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <Draw_Pop+0x2d0>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	da0f      	bge.n	800da9e <Draw_Pop+0x2ae>
	{
		R3 = *(unsigned short*) R10;
 800da7e:	4b14      	ldr	r3, [pc, #80]	; (800dad0 <Draw_Pop+0x2e0>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	461a      	mov	r2, r3
 800da86:	4b13      	ldr	r3, [pc, #76]	; (800dad4 <Draw_Pop+0x2e4>)
 800da88:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <Draw_Pop+0x2e0>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3302      	adds	r3, #2
 800da90:	4a0f      	ldr	r2, [pc, #60]	; (800dad0 <Draw_Pop+0x2e0>)
 800da92:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800da94:	4b0a      	ldr	r3, [pc, #40]	; (800dac0 <Draw_Pop+0x2d0>)
 800da96:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	e7d0      	b.n	800da40 <Draw_Pop+0x250>
		}
	else
		R7 = R7 << 1;
 800da9e:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <Draw_Pop+0x2d0>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4a06      	ldr	r2, [pc, #24]	; (800dac0 <Draw_Pop+0x2d0>)
 800daa6:	6013      	str	r3, [r2, #0]
	goto Pop_Loop_Penetrate;
 800daa8:	e7ca      	b.n	800da40 <Draw_Pop+0x250>
		return;
 800daaa:	bf00      	nop
 800daac:	e000      	b.n	800dab0 <Draw_Pop+0x2c0>
		return;
 800daae:	bf00      	nop

}
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	2000074c 	.word	0x2000074c
 800dac0:	2000075c 	.word	0x2000075c
 800dac4:	20000774 	.word	0x20000774
 800dac8:	20000764 	.word	0x20000764
 800dacc:	20000758 	.word	0x20000758
 800dad0:	20000770 	.word	0x20000770
 800dad4:	20000750 	.word	0x20000750

0800dad8 <DrawWindow>:

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pCol, R5:Cnt, R6:Tmp,
// R0:pBuf, R1:pTab, R2:Col, R3:LCD, R4:Ctrl, R5:WR,  R6:Tmp, R7:Cnt, R8:RS
void DrawWindow(char* pBuf, short* pTab)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
	R0 = (unsigned)&pBuf[0];
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a96      	ldr	r2, [pc, #600]	; (800dd40 <DrawWindow+0x268>)
 800dae6:	6013      	str	r3, [r2, #0]
	R2 = 0;
 800dae8:	4b96      	ldr	r3, [pc, #600]	; (800dd44 <DrawWindow+0x26c>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
	R10 = &pBuf[900];
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800daf4:	4a94      	ldr	r2, [pc, #592]	; (800dd48 <DrawWindow+0x270>)
 800daf6:	6013      	str	r3, [r2, #0]
	R11 = pTab[34];
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	3344      	adds	r3, #68	; 0x44
 800dafc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db00:	461a      	mov	r2, r3
 800db02:	4b92      	ldr	r3, [pc, #584]	; (800dd4c <DrawWindow+0x274>)
 800db04:	601a      	str	r2, [r3, #0]
	R12 = pTab[35];
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	3346      	adds	r3, #70	; 0x46
 800db0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db0e:	461a      	mov	r2, r3
 800db10:	4b8f      	ldr	r3, [pc, #572]	; (800dd50 <DrawWindow+0x278>)
 800db12:	601a      	str	r2, [r3, #0]
	R12 = R11 + R12;
 800db14:	4b8d      	ldr	r3, [pc, #564]	; (800dd4c <DrawWindow+0x274>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	4b8d      	ldr	r3, [pc, #564]	; (800dd50 <DrawWindow+0x278>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4413      	add	r3, r2
 800db1e:	4a8c      	ldr	r2, [pc, #560]	; (800dd50 <DrawWindow+0x278>)
 800db20:	6013      	str	r3, [r2, #0]

Draw_Loop:
	if (R2 == 0)
 800db22:	4b88      	ldr	r3, [pc, #544]	; (800dd44 <DrawWindow+0x26c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d102      	bne.n	800db30 <DrawWindow+0x58>
	{
		Buld_0();
 800db2a:	f7ff f93b 	bl	800cda4 <Buld_0>
		goto Draw_Wave;
 800db2e:	e064      	b.n	800dbfa <DrawWindow+0x122>
	}

	if (R2 == 302)
 800db30:	4b84      	ldr	r3, [pc, #528]	; (800dd44 <DrawWindow+0x26c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db38:	d102      	bne.n	800db40 <DrawWindow+0x68>
	{
		Buld_0();
 800db3a:	f7ff f933 	bl	800cda4 <Buld_0>
		goto Draw_Wave;
 800db3e:	e05c      	b.n	800dbfa <DrawWindow+0x122>
	}

	if (R2 == 1)
 800db40:	4b80      	ldr	r3, [pc, #512]	; (800dd44 <DrawWindow+0x26c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b01      	cmp	r3, #1
 800db46:	d102      	bne.n	800db4e <DrawWindow+0x76>
	{
		Buld_1();
 800db48:	f7ff f938 	bl	800cdbc <Buld_1>
		goto Draw_Wave;
 800db4c:	e055      	b.n	800dbfa <DrawWindow+0x122>
	}
	R3 = 301;
 800db4e:	4b81      	ldr	r3, [pc, #516]	; (800dd54 <DrawWindow+0x27c>)
 800db50:	f240 122d 	movw	r2, #301	; 0x12d
 800db54:	601a      	str	r2, [r3, #0]

	if (R2 == R3)
 800db56:	4b7b      	ldr	r3, [pc, #492]	; (800dd44 <DrawWindow+0x26c>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	4b7e      	ldr	r3, [pc, #504]	; (800dd54 <DrawWindow+0x27c>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d102      	bne.n	800db68 <DrawWindow+0x90>
	{
		Buld_1();
 800db62:	f7ff f92b 	bl	800cdbc <Buld_1>
		goto Draw_Wave;
 800db66:	e048      	b.n	800dbfa <DrawWindow+0x122>
	}

	R3 = R2 - 1;
 800db68:	4b76      	ldr	r3, [pc, #472]	; (800dd44 <DrawWindow+0x26c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	3b01      	subs	r3, #1
 800db6e:	4a79      	ldr	r2, [pc, #484]	; (800dd54 <DrawWindow+0x27c>)
 800db70:	6013      	str	r3, [r2, #0]
	R6 = 25;
 800db72:	4b79      	ldr	r3, [pc, #484]	; (800dd58 <DrawWindow+0x280>)
 800db74:	2219      	movs	r2, #25
 800db76:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800db78:	4b76      	ldr	r3, [pc, #472]	; (800dd54 <DrawWindow+0x27c>)
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	4b76      	ldr	r3, [pc, #472]	; (800dd58 <DrawWindow+0x280>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	fbb2 f3f3 	udiv	r3, r2, r3
 800db84:	4a75      	ldr	r2, [pc, #468]	; (800dd5c <DrawWindow+0x284>)
 800db86:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800db88:	4b74      	ldr	r3, [pc, #464]	; (800dd5c <DrawWindow+0x284>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a72      	ldr	r2, [pc, #456]	; (800dd58 <DrawWindow+0x280>)
 800db8e:	6812      	ldr	r2, [r2, #0]
 800db90:	fb02 f303 	mul.w	r3, r2, r3
 800db94:	4a71      	ldr	r2, [pc, #452]	; (800dd5c <DrawWindow+0x284>)
 800db96:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800db98:	4b6e      	ldr	r3, [pc, #440]	; (800dd54 <DrawWindow+0x27c>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4b6f      	ldr	r3, [pc, #444]	; (800dd5c <DrawWindow+0x284>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	4a6e      	ldr	r2, [pc, #440]	; (800dd5c <DrawWindow+0x284>)
 800dba4:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dba6:	4b6d      	ldr	r3, [pc, #436]	; (800dd5c <DrawWindow+0x284>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d102      	bne.n	800dbb4 <DrawWindow+0xdc>
	{
		Buld_4();
 800dbae:	f7ff f975 	bl	800ce9c <Buld_4>
		goto Draw_Wave;
 800dbb2:	e022      	b.n	800dbfa <DrawWindow+0x122>
	}

	R6 = 5;
 800dbb4:	4b68      	ldr	r3, [pc, #416]	; (800dd58 <DrawWindow+0x280>)
 800dbb6:	2205      	movs	r2, #5
 800dbb8:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800dbba:	4b66      	ldr	r3, [pc, #408]	; (800dd54 <DrawWindow+0x27c>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b66      	ldr	r3, [pc, #408]	; (800dd58 <DrawWindow+0x280>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc6:	4a65      	ldr	r2, [pc, #404]	; (800dd5c <DrawWindow+0x284>)
 800dbc8:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800dbca:	4b64      	ldr	r3, [pc, #400]	; (800dd5c <DrawWindow+0x284>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a62      	ldr	r2, [pc, #392]	; (800dd58 <DrawWindow+0x280>)
 800dbd0:	6812      	ldr	r2, [r2, #0]
 800dbd2:	fb02 f303 	mul.w	r3, r2, r3
 800dbd6:	4a61      	ldr	r2, [pc, #388]	; (800dd5c <DrawWindow+0x284>)
 800dbd8:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800dbda:	4b5e      	ldr	r3, [pc, #376]	; (800dd54 <DrawWindow+0x27c>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	4b5f      	ldr	r3, [pc, #380]	; (800dd5c <DrawWindow+0x284>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	4a5d      	ldr	r2, [pc, #372]	; (800dd5c <DrawWindow+0x284>)
 800dbe6:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dbe8:	4b5c      	ldr	r3, [pc, #368]	; (800dd5c <DrawWindow+0x284>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d102      	bne.n	800dbf6 <DrawWindow+0x11e>
	{
		Buld_3();
 800dbf0:	f7ff f92e 	bl	800ce50 <Buld_3>
		goto Draw_Wave;
 800dbf4:	e001      	b.n	800dbfa <DrawWindow+0x122>
	}
	Buld_2();
 800dbf6:	f7ff f909 	bl	800ce0c <Buld_2>

Draw_Wave:
	if( (R2<3) || (R2 >= 300) ) //3 to 299
 800dbfa:	4b52      	ldr	r3, [pc, #328]	; (800dd44 <DrawWindow+0x26c>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d96c      	bls.n	800dcdc <DrawWindow+0x204>
 800dc02:	4b50      	ldr	r3, [pc, #320]	; (800dd44 <DrawWindow+0x26c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dc0a:	d267      	bcs.n	800dcdc <DrawWindow+0x204>
	{
		goto Horozontal;
	}
	R3 = pTab[3]; //Ch_3
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	3306      	adds	r3, #6
 800dc10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc14:	461a      	mov	r2, r3
 800dc16:	4b4f      	ldr	r3, [pc, #316]	; (800dd54 <DrawWindow+0x27c>)
 800dc18:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc1a:	4b4e      	ldr	r3, [pc, #312]	; (800dd54 <DrawWindow+0x27c>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 0304 	and.w	r3, r3, #4
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10f      	bne.n	800dc46 <DrawWindow+0x16e>
	{
		R3 = 46;
 800dc26:	4b4b      	ldr	r3, [pc, #300]	; (800dd54 <DrawWindow+0x27c>)
 800dc28:	222e      	movs	r2, #46	; 0x2e
 800dc2a:	601a      	str	r2, [r3, #0]
		R4.I = pTab[13];
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	331a      	adds	r3, #26
 800dc30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc34:	461a      	mov	r2, r3
 800dc36:	4b4a      	ldr	r3, [pc, #296]	; (800dd60 <DrawWindow+0x288>)
 800dc38:	601a      	str	r2, [r3, #0]
		R8 = 8;
 800dc3a:	4b4a      	ldr	r3, [pc, #296]	; (800dd64 <DrawWindow+0x28c>)
 800dc3c:	2208      	movs	r2, #8
 800dc3e:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc40:	2001      	movs	r0, #1
 800dc42:	f7ff f951 	bl	800cee8 <Draw_Digit_Analog>
	}

	R3 =pTab[2]; //Ch_2
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	3304      	adds	r3, #4
 800dc4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	4b40      	ldr	r3, [pc, #256]	; (800dd54 <DrawWindow+0x27c>)
 800dc52:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc54:	4b3f      	ldr	r3, [pc, #252]	; (800dd54 <DrawWindow+0x27c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 0304 	and.w	r3, r3, #4
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10f      	bne.n	800dc80 <DrawWindow+0x1a8>
	{
		R3 = 44;
 800dc60:	4b3c      	ldr	r3, [pc, #240]	; (800dd54 <DrawWindow+0x27c>)
 800dc62:	222c      	movs	r2, #44	; 0x2c
 800dc64:	601a      	str	r2, [r3, #0]
		R4.I = pTab[12];
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3318      	adds	r3, #24
 800dc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	4b3b      	ldr	r3, [pc, #236]	; (800dd60 <DrawWindow+0x288>)
 800dc72:	601a      	str	r2, [r3, #0]
		R8 = 4;
 800dc74:	4b3b      	ldr	r3, [pc, #236]	; (800dd64 <DrawWindow+0x28c>)
 800dc76:	2204      	movs	r2, #4
 800dc78:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	f7ff f934 	bl	800cee8 <Draw_Digit_Analog>
	}

	R3 =pTab[1]; //Ch_1
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	3302      	adds	r3, #2
 800dc84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	4b32      	ldr	r3, [pc, #200]	; (800dd54 <DrawWindow+0x27c>)
 800dc8c:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc8e:	4b31      	ldr	r3, [pc, #196]	; (800dd54 <DrawWindow+0x27c>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <DrawWindow+0x1d8>
	{
		R3 = 42;
 800dc9a:	4b2e      	ldr	r3, [pc, #184]	; (800dd54 <DrawWindow+0x27c>)
 800dc9c:	222a      	movs	r2, #42	; 0x2a
 800dc9e:	601a      	str	r2, [r3, #0]
		R4.A = &pBuf[300];
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dca6:	4a2e      	ldr	r2, [pc, #184]	; (800dd60 <DrawWindow+0x288>)
 800dca8:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f7ff f91c 	bl	800cee8 <Draw_Digit_Analog>
	}

	R3 =pTab[0]; //Ch_0
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	4b26      	ldr	r3, [pc, #152]	; (800dd54 <DrawWindow+0x27c>)
 800dcba:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dcbc:	4b25      	ldr	r3, [pc, #148]	; (800dd54 <DrawWindow+0x27c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f003 0304 	and.w	r3, r3, #4
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10b      	bne.n	800dce0 <DrawWindow+0x208>
	{
		R3 = 40;
 800dcc8:	4b22      	ldr	r3, [pc, #136]	; (800dd54 <DrawWindow+0x27c>)
 800dcca:	2228      	movs	r2, #40	; 0x28
 800dccc:	601a      	str	r2, [r3, #0]
		R4.A = pBuf;
 800dcce:	4a24      	ldr	r2, [pc, #144]	; (800dd60 <DrawWindow+0x288>)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	f7ff f907 	bl	800cee8 <Draw_Digit_Analog>
 800dcda:	e002      	b.n	800dce2 <DrawWindow+0x20a>
		goto Horozontal;
 800dcdc:	bf00      	nop
 800dcde:	e000      	b.n	800dce2 <DrawWindow+0x20a>
	}

Horozontal:
 800dce0:	bf00      	nop
	if(R2 == 0)
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <DrawWindow+0x26c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d103      	bne.n	800dcf2 <DrawWindow+0x21a>
	{
		Cursor_0(pTab);
 800dcea:	6838      	ldr	r0, [r7, #0]
 800dcec:	f7ff fa14 	bl	800d118 <Cursor_0>
		goto Vertical;
 800dcf0:	e046      	b.n	800dd80 <DrawWindow+0x2a8>
	}

	if(R2 == 302)
 800dcf2:	4b14      	ldr	r3, [pc, #80]	; (800dd44 <DrawWindow+0x26c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dcfa:	d103      	bne.n	800dd04 <DrawWindow+0x22c>
	{
		Cursor_0(pTab);
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f7ff fa0b 	bl	800d118 <Cursor_0>
		goto Vertical;
 800dd02:	e03d      	b.n	800dd80 <DrawWindow+0x2a8>
	}

	if(R2 == 1)
 800dd04:	4b0f      	ldr	r3, [pc, #60]	; (800dd44 <DrawWindow+0x26c>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d103      	bne.n	800dd14 <DrawWindow+0x23c>
	{
		Cursor_1(pTab);
 800dd0c:	6838      	ldr	r0, [r7, #0]
 800dd0e:	f7ff fa8d 	bl	800d22c <Cursor_1>
		goto Vertical;
 800dd12:	e035      	b.n	800dd80 <DrawWindow+0x2a8>
	}
	R5 = 301;
 800dd14:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <DrawWindow+0x284>)
 800dd16:	f240 122d 	movw	r2, #301	; 0x12d
 800dd1a:	601a      	str	r2, [r3, #0]
	if(R2 == R5)
 800dd1c:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <DrawWindow+0x26c>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <DrawWindow+0x284>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d103      	bne.n	800dd30 <DrawWindow+0x258>
	{
		Cursor_1(pTab);
 800dd28:	6838      	ldr	r0, [r7, #0]
 800dd2a:	f7ff fa7f 	bl	800d22c <Cursor_1>
		goto Vertical;
 800dd2e:	e027      	b.n	800dd80 <DrawWindow+0x2a8>
	}

	if(R2 == 2)
 800dd30:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <DrawWindow+0x26c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d117      	bne.n	800dd68 <DrawWindow+0x290>
	{
		Cursor_2(pTab);
 800dd38:	6838      	ldr	r0, [r7, #0]
 800dd3a:	f7ff faeb 	bl	800d314 <Cursor_2>
		goto Vertical;
 800dd3e:	e01f      	b.n	800dd80 <DrawWindow+0x2a8>
 800dd40:	20000744 	.word	0x20000744
 800dd44:	2000074c 	.word	0x2000074c
 800dd48:	20000770 	.word	0x20000770
 800dd4c:	20000768 	.word	0x20000768
 800dd50:	2000076c 	.word	0x2000076c
 800dd54:	20000750 	.word	0x20000750
 800dd58:	20000758 	.word	0x20000758
 800dd5c:	20000754 	.word	0x20000754
 800dd60:	20000774 	.word	0x20000774
 800dd64:	20000760 	.word	0x20000760
	}
	if(R2 == 300)
 800dd68:	4b21      	ldr	r3, [pc, #132]	; (800ddf0 <DrawWindow+0x318>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dd70:	d103      	bne.n	800dd7a <DrawWindow+0x2a2>
	{
		Cursor_2(pTab);
 800dd72:	6838      	ldr	r0, [r7, #0]
 800dd74:	f7ff face 	bl	800d314 <Cursor_2>
		goto Vertical;
 800dd78:	e002      	b.n	800dd80 <DrawWindow+0x2a8>
	}
	Cursor_3(pTab);
 800dd7a:	6838      	ldr	r0, [r7, #0]
 800dd7c:	f7ff fb1e 	bl	800d3bc <Cursor_3>

Vertical:
	Cursor_4(pTab);
 800dd80:	6838      	ldr	r0, [r7, #0]
 800dd82:	f7ff fb83 	bl	800d48c <Cursor_4>

	R3 = pTab[38];
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	334c      	adds	r3, #76	; 0x4c
 800dd8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4b18      	ldr	r3, [pc, #96]	; (800ddf4 <DrawWindow+0x31c>)
 800dd92:	601a      	str	r2, [r3, #0]
	if( (R3&1) !=1 )
 800dd94:	4b17      	ldr	r3, [pc, #92]	; (800ddf4 <DrawWindow+0x31c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00f      	beq.n	800ddc0 <DrawWindow+0x2e8>
	{
		goto Send;
	}

	if(R2 < R11)
 800dda0:	4b13      	ldr	r3, [pc, #76]	; (800ddf0 <DrawWindow+0x318>)
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <DrawWindow+0x320>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d30b      	bcc.n	800ddc4 <DrawWindow+0x2ec>
	{
		goto Send;
	}

	if(R2 < R12)
 800ddac:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <DrawWindow+0x318>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <DrawWindow+0x324>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d207      	bcs.n	800ddc8 <DrawWindow+0x2f0>
	{
		Draw_Pop(pTab);
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f7ff fd19 	bl	800d7f0 <Draw_Pop>
 800ddbe:	e004      	b.n	800ddca <DrawWindow+0x2f2>
		goto Send;
 800ddc0:	bf00      	nop
 800ddc2:	e002      	b.n	800ddca <DrawWindow+0x2f2>
		goto Send;
 800ddc4:	bf00      	nop
 800ddc6:	e000      	b.n	800ddca <DrawWindow+0x2f2>
	}

Send:
 800ddc8:	bf00      	nop
	Send_LCD(pTab);
 800ddca:	6838      	ldr	r0, [r7, #0]
 800ddcc:	f7ff fcde 	bl	800d78c <Send_LCD>

	if( R2 != 302 )
 800ddd0:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <DrawWindow+0x318>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800ddd8:	d005      	beq.n	800dde6 <DrawWindow+0x30e>
	{
		R2 =R2 +1;
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <DrawWindow+0x318>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	3301      	adds	r3, #1
 800dde0:	4a03      	ldr	r2, [pc, #12]	; (800ddf0 <DrawWindow+0x318>)
 800dde2:	6013      	str	r3, [r2, #0]
		goto Draw_Loop;
 800dde4:	e69d      	b.n	800db22 <DrawWindow+0x4a>
	}

	return;
 800dde6:	bf00      	nop
}
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	2000074c 	.word	0x2000074c
 800ddf4:	20000750 	.word	0x20000750
 800ddf8:	20000768 	.word	0x20000768
 800ddfc:	2000076c 	.word	0x2000076c

0800de00 <DispChar8x14>:
//+======+======+======+======+======+======+======+======+======+======+======+

char  WaveBuf[TRACK1_SIZE + TRACK2_SIZE + TRACK23_SIZE + POP_SIZE]; // ��ʾ������

void DispChar8x14(char Mode, char Code)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	460a      	mov	r2, r1
 800de0a:	71fb      	strb	r3, [r7, #7]
 800de0c:	4613      	mov	r3, r2
 800de0e:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<8; ++i)
 800de10:	2300      	movs	r3, #0
 800de12:	81fb      	strh	r3, [r7, #14]
 800de14:	e06d      	b.n	800def2 <DispChar8x14+0xf2>
  {
    if(Mode & SYMB)
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	f003 0310 	and.w	r3, r3, #16
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <DispChar8x14+0x36>
    	k = SYMB8x14[(Code - '@')*8 + i];
 800de20:	79bb      	ldrb	r3, [r7, #6]
 800de22:	3b40      	subs	r3, #64	; 0x40
 800de24:	00da      	lsls	r2, r3, #3
 800de26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de2a:	4413      	add	r3, r2
 800de2c:	4a35      	ldr	r2, [pc, #212]	; (800df04 <DispChar8x14+0x104>)
 800de2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de32:	817b      	strh	r3, [r7, #10]
 800de34:	e005      	b.n	800de42 <DispChar8x14+0x42>
    else
        k = CHAR8x14[i];
 800de36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de3a:	4a33      	ldr	r2, [pc, #204]	; (800df08 <DispChar8x14+0x108>)
 800de3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de40:	817b      	strh	r3, [r7, #10]

    if(Mode & VOID)
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	f003 0320 	and.w	r3, r3, #32
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <DispChar8x14+0x66>
    	k &= (i%2)? 0xAAAA : 0x5555;
 800de4c:	89fb      	ldrh	r3, [r7, #14]
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	b29b      	uxth	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <DispChar8x14+0x5c>
 800de58:	4a2c      	ldr	r2, [pc, #176]	; (800df0c <DispChar8x14+0x10c>)
 800de5a:	e001      	b.n	800de60 <DispChar8x14+0x60>
 800de5c:	f245 5255 	movw	r2, #21845	; 0x5555
 800de60:	897b      	ldrh	r3, [r7, #10]
 800de62:	4013      	ands	r3, r2
 800de64:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800de66:	4b2a      	ldr	r3, [pc, #168]	; (800df10 <DispChar8x14+0x110>)
 800de68:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de6c:	4a29      	ldr	r2, [pc, #164]	; (800df14 <DispChar8x14+0x114>)
 800de6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de72:	4611      	mov	r1, r2
 800de74:	4618      	mov	r0, r3
 800de76:	f003 fd61 	bl	801193c <LCD_Set_Posi>
    for(j=0; j<14; ++j)
 800de7a:	2300      	movs	r3, #0
 800de7c:	81bb      	strh	r3, [r7, #12]
 800de7e:	e027      	b.n	800ded0 <DispChar8x14+0xd0>
    {
      if(k & 4)
 800de80:	897b      	ldrh	r3, [r7, #10]
 800de82:	f003 0304 	and.w	r3, r3, #4
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00d      	beq.n	800dea6 <DispChar8x14+0xa6>
    	  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800de8a:	79fb      	ldrb	r3, [r7, #7]
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d002      	beq.n	800de9a <DispChar8x14+0x9a>
 800de94:	4b20      	ldr	r3, [pc, #128]	; (800df18 <DispChar8x14+0x118>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	e001      	b.n	800de9e <DispChar8x14+0x9e>
 800de9a:	4b20      	ldr	r3, [pc, #128]	; (800df1c <DispChar8x14+0x11c>)
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f003 fd9a 	bl	80119d8 <LCD_Set_Pixel>
 800dea4:	e00c      	b.n	800dec0 <DispChar8x14+0xc0>
      else
    	  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <DispChar8x14+0xb6>
 800deb0:	4b1a      	ldr	r3, [pc, #104]	; (800df1c <DispChar8x14+0x11c>)
 800deb2:	881b      	ldrh	r3, [r3, #0]
 800deb4:	e001      	b.n	800deba <DispChar8x14+0xba>
 800deb6:	4b18      	ldr	r3, [pc, #96]	; (800df18 <DispChar8x14+0x118>)
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	4618      	mov	r0, r3
 800debc:	f003 fd8c 	bl	80119d8 <LCD_Set_Pixel>
      k >>= 1;
 800dec0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dec4:	105b      	asrs	r3, r3, #1
 800dec6:	817b      	strh	r3, [r7, #10]
    for(j=0; j<14; ++j)
 800dec8:	89bb      	ldrh	r3, [r7, #12]
 800deca:	3301      	adds	r3, #1
 800decc:	b29b      	uxth	r3, r3
 800dece:	81bb      	strh	r3, [r7, #12]
 800ded0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ded4:	2b0d      	cmp	r3, #13
 800ded6:	ddd3      	ble.n	800de80 <DispChar8x14+0x80>
    }
    Sx++;
 800ded8:	4b0d      	ldr	r3, [pc, #52]	; (800df10 <DispChar8x14+0x110>)
 800deda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	3301      	adds	r3, #1
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	b21a      	sxth	r2, r3
 800dee6:	4b0a      	ldr	r3, [pc, #40]	; (800df10 <DispChar8x14+0x110>)
 800dee8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<8; ++i)
 800deea:	89fb      	ldrh	r3, [r7, #14]
 800deec:	3301      	adds	r3, #1
 800deee:	b29b      	uxth	r3, r3
 800def0:	81fb      	strh	r3, [r7, #14]
 800def2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800def6:	2b07      	cmp	r3, #7
 800def8:	dd8d      	ble.n	800de16 <DispChar8x14+0x16>
  }
}
 800defa:	bf00      	nop
 800defc:	bf00      	nop
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	0800132c 	.word	0x0800132c
 800df08:	08000d2c 	.word	0x08000d2c
 800df0c:	ffffaaaa 	.word	0xffffaaaa
 800df10:	20000916 	.word	0x20000916
 800df14:	20000918 	.word	0x20000918
 800df18:	20000912 	.word	0x20000912
 800df1c:	20000914 	.word	0x20000914

0800df20 <DispStr8x14>:

//Mode = bit0: Normal/Inv, bit1: Char/Map
void DispStr8x14(short x0, short y0, char Mode, char *Str)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	607b      	str	r3, [r7, #4]
 800df28:	4603      	mov	r3, r0
 800df2a:	81fb      	strh	r3, [r7, #14]
 800df2c:	460b      	mov	r3, r1
 800df2e:	81bb      	strh	r3, [r7, #12]
 800df30:	4613      	mov	r3, r2
 800df32:	72fb      	strb	r3, [r7, #11]
	  short i;
	  Sx = x0; Sy = y0;
 800df34:	4a22      	ldr	r2, [pc, #136]	; (800dfc0 <DispStr8x14+0xa0>)
 800df36:	89fb      	ldrh	r3, [r7, #14]
 800df38:	8013      	strh	r3, [r2, #0]
 800df3a:	4a22      	ldr	r2, [pc, #136]	; (800dfc4 <DispStr8x14+0xa4>)
 800df3c:	89bb      	ldrh	r3, [r7, #12]
 800df3e:	8013      	strh	r3, [r2, #0]
	  LCD_Set_Posi(Sx, Sy);
 800df40:	4b1f      	ldr	r3, [pc, #124]	; (800dfc0 <DispStr8x14+0xa0>)
 800df42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df46:	4a1f      	ldr	r2, [pc, #124]	; (800dfc4 <DispStr8x14+0xa4>)
 800df48:	f9b2 2000 	ldrsh.w	r2, [r2]
 800df4c:	4611      	mov	r1, r2
 800df4e:	4618      	mov	r0, r3
 800df50:	f003 fcf4 	bl	801193c <LCD_Set_Posi>
	  for (i=0; i<14; i++)
 800df54:	2300      	movs	r3, #0
 800df56:	82fb      	strh	r3, [r7, #22]
 800df58:	e012      	b.n	800df80 <DispStr8x14+0x60>
	  {
		  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df5a:	7afb      	ldrb	r3, [r7, #11]
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <DispStr8x14+0x4a>
 800df64:	4b18      	ldr	r3, [pc, #96]	; (800dfc8 <DispStr8x14+0xa8>)
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	e001      	b.n	800df6e <DispStr8x14+0x4e>
 800df6a:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <DispStr8x14+0xac>)
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	4618      	mov	r0, r3
 800df70:	f003 fd32 	bl	80119d8 <LCD_Set_Pixel>
	  for (i=0; i<14; i++)
 800df74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	3301      	adds	r3, #1
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	82fb      	strh	r3, [r7, #22]
 800df80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df84:	2b0d      	cmp	r3, #13
 800df86:	dde8      	ble.n	800df5a <DispStr8x14+0x3a>
	  }
	  Sx++;
 800df88:	4b0d      	ldr	r3, [pc, #52]	; (800dfc0 <DispStr8x14+0xa0>)
 800df8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	3301      	adds	r3, #1
 800df92:	b29b      	uxth	r3, r3
 800df94:	b21a      	sxth	r2, r3
 800df96:	4b0a      	ldr	r3, [pc, #40]	; (800dfc0 <DispStr8x14+0xa0>)
 800df98:	801a      	strh	r2, [r3, #0]
	  while(*Str != 0)
 800df9a:	e008      	b.n	800dfae <DispStr8x14+0x8e>
	  {
	    DispChar8x14(Mode, *Str++);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	781a      	ldrb	r2, [r3, #0]
 800dfa4:	7afb      	ldrb	r3, [r7, #11]
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff ff29 	bl	800de00 <DispChar8x14>
	  while(*Str != 0)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1f2      	bne.n	800df9c <DispStr8x14+0x7c>
	  }
}
 800dfb6:	bf00      	nop
 800dfb8:	bf00      	nop
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}
 800dfc0:	20000916 	.word	0x20000916
 800dfc4:	20000918 	.word	0x20000918
 800dfc8:	20000914 	.word	0x20000914
 800dfcc:	20000912 	.word	0x20000912

0800dfd0 <SetColor>:

void SetColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	460a      	mov	r2, r1
 800dfda:	80fb      	strh	r3, [r7, #6]
 800dfdc:	4613      	mov	r3, r2
 800dfde:	80bb      	strh	r3, [r7, #4]
	  Background = Board_Color;
 800dfe0:	4a05      	ldr	r2, [pc, #20]	; (800dff8 <SetColor+0x28>)
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	8013      	strh	r3, [r2, #0]
	  Foreground = Text_Color;
 800dfe6:	4a05      	ldr	r2, [pc, #20]	; (800dffc <SetColor+0x2c>)
 800dfe8:	88bb      	ldrh	r3, [r7, #4]
 800dfea:	8013      	strh	r3, [r2, #0]
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr
 800dff8:	20000912 	.word	0x20000912
 800dffc:	20000914 	.word	0x20000914

0800e000 <DispStr>:

/*******************************************************************************
  DispStr: ����Ļ��ʾ�ַ�/ͼ�鴮        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr(short x0, short y0, char Mode, char *Str)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	607b      	str	r3, [r7, #4]
 800e008:	4603      	mov	r3, r0
 800e00a:	81fb      	strh	r3, [r7, #14]
 800e00c:	460b      	mov	r3, r1
 800e00e:	81bb      	strh	r3, [r7, #12]
 800e010:	4613      	mov	r3, r2
 800e012:	72fb      	strb	r3, [r7, #11]
  char Code;
  short i, j, k;

  Sx = x0; Sy = y0;
 800e014:	4a5e      	ldr	r2, [pc, #376]	; (800e190 <DispStr+0x190>)
 800e016:	89fb      	ldrh	r3, [r7, #14]
 800e018:	8013      	strh	r3, [r2, #0]
 800e01a:	4a5e      	ldr	r2, [pc, #376]	; (800e194 <DispStr+0x194>)
 800e01c:	89bb      	ldrh	r3, [r7, #12]
 800e01e:	8013      	strh	r3, [r2, #0]
  LCD_Set_Posi(Sx, Sy);
 800e020:	4b5b      	ldr	r3, [pc, #364]	; (800e190 <DispStr+0x190>)
 800e022:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e026:	4a5b      	ldr	r2, [pc, #364]	; (800e194 <DispStr+0x194>)
 800e028:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e02c:	4611      	mov	r1, r2
 800e02e:	4618      	mov	r0, r3
 800e030:	f003 fc84 	bl	801193c <LCD_Set_Posi>

  while(*Str != 0)
 800e034:	e0a1      	b.n	800e17a <DispStr+0x17a>
  {
    Code = *Str++;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	747b      	strb	r3, [r7, #17]
    for(i=0; i<6; ++i)
 800e040:	2300      	movs	r3, #0
 800e042:	82fb      	strh	r3, [r7, #22]
 800e044:	e094      	b.n	800e170 <DispStr+0x170>
    {
      if(!(Mode & SYMB))
 800e046:	7afb      	ldrb	r3, [r7, #11]
 800e048:	f003 0310 	and.w	r3, r3, #16
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10e      	bne.n	800e06e <DispStr+0x6e>
    	  k = CHAR6x8[((Code-0X21)*6)+i];
 800e050:	7c7b      	ldrb	r3, [r7, #17]
 800e052:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e056:	4613      	mov	r3, r2
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	4413      	add	r3, r2
 800e05c:	005b      	lsls	r3, r3, #1
 800e05e:	461a      	mov	r2, r3
 800e060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e064:	4413      	add	r3, r2
 800e066:	4a4c      	ldr	r2, [pc, #304]	; (800e198 <DispStr+0x198>)
 800e068:	5cd3      	ldrb	r3, [r2, r3]
 800e06a:	827b      	strh	r3, [r7, #18]
 800e06c:	e00d      	b.n	800e08a <DispStr+0x8a>
      else
    	  k = SYMB6x8[(Code - '!')*6 + i];
 800e06e:	7c7b      	ldrb	r3, [r7, #17]
 800e070:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e074:	4613      	mov	r3, r2
 800e076:	005b      	lsls	r3, r3, #1
 800e078:	4413      	add	r3, r2
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	461a      	mov	r2, r3
 800e07e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e082:	4413      	add	r3, r2
 800e084:	4a45      	ldr	r2, [pc, #276]	; (800e19c <DispStr+0x19c>)
 800e086:	5cd3      	ldrb	r3, [r2, r3]
 800e088:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID)
 800e08a:	7afb      	ldrb	r3, [r7, #11]
 800e08c:	f003 0320 	and.w	r3, r3, #32
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00c      	beq.n	800e0ae <DispStr+0xae>
    	  k &= (i%2)? 0xAAAA : 0x5555;
 800e094:	8afb      	ldrh	r3, [r7, #22]
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <DispStr+0xa4>
 800e0a0:	4a3f      	ldr	r2, [pc, #252]	; (800e1a0 <DispStr+0x1a0>)
 800e0a2:	e001      	b.n	800e0a8 <DispStr+0xa8>
 800e0a4:	f245 5255 	movw	r2, #21845	; 0x5555
 800e0a8:	8a7b      	ldrh	r3, [r7, #18]
 800e0aa:	4013      	ands	r3, r2
 800e0ac:	827b      	strh	r3, [r7, #18]
      LCD_Set_Posi(Sx, Sy);
 800e0ae:	4b38      	ldr	r3, [pc, #224]	; (800e190 <DispStr+0x190>)
 800e0b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b4:	4a37      	ldr	r2, [pc, #220]	; (800e194 <DispStr+0x194>)
 800e0b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f003 fc3d 	bl	801193c <LCD_Set_Posi>
      LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e0c2:	7afb      	ldrb	r3, [r7, #11]
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <DispStr+0xd2>
 800e0cc:	4b35      	ldr	r3, [pc, #212]	; (800e1a4 <DispStr+0x1a4>)
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	e001      	b.n	800e0d6 <DispStr+0xd6>
 800e0d2:	4b35      	ldr	r3, [pc, #212]	; (800e1a8 <DispStr+0x1a8>)
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f003 fc7e 	bl	80119d8 <LCD_Set_Pixel>
      LCD_Set_Posi(Sx, Sy+1);
 800e0dc:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <DispStr+0x190>)
 800e0de:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e0e2:	4b2c      	ldr	r3, [pc, #176]	; (800e194 <DispStr+0x194>)
 800e0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	b21b      	sxth	r3, r3
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	f003 fc22 	bl	801193c <LCD_Set_Posi>
      for(j=0; j<10; ++j)
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	82bb      	strh	r3, [r7, #20]
 800e0fc:	e027      	b.n	800e14e <DispStr+0x14e>
      {  //j<8ʱ�����У�j<10������   �����¸�������
        if(k & 1)
 800e0fe:	8a7b      	ldrh	r3, [r7, #18]
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00d      	beq.n	800e124 <DispStr+0x124>
        	LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <DispStr+0x118>
 800e112:	4b25      	ldr	r3, [pc, #148]	; (800e1a8 <DispStr+0x1a8>)
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	e001      	b.n	800e11c <DispStr+0x11c>
 800e118:	4b22      	ldr	r3, [pc, #136]	; (800e1a4 <DispStr+0x1a4>)
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f003 fc5b 	bl	80119d8 <LCD_Set_Pixel>
 800e122:	e00c      	b.n	800e13e <DispStr+0x13e>
        else
        	LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e124:	7afb      	ldrb	r3, [r7, #11]
 800e126:	f003 0301 	and.w	r3, r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d002      	beq.n	800e134 <DispStr+0x134>
 800e12e:	4b1d      	ldr	r3, [pc, #116]	; (800e1a4 <DispStr+0x1a4>)
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	e001      	b.n	800e138 <DispStr+0x138>
 800e134:	4b1c      	ldr	r3, [pc, #112]	; (800e1a8 <DispStr+0x1a8>)
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	4618      	mov	r0, r3
 800e13a:	f003 fc4d 	bl	80119d8 <LCD_Set_Pixel>
       k >>= 1;
 800e13e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e142:	105b      	asrs	r3, r3, #1
 800e144:	827b      	strh	r3, [r7, #18]
      for(j=0; j<10; ++j)
 800e146:	8abb      	ldrh	r3, [r7, #20]
 800e148:	3301      	adds	r3, #1
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	82bb      	strh	r3, [r7, #20]
 800e14e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e152:	2b09      	cmp	r3, #9
 800e154:	ddd3      	ble.n	800e0fe <DispStr+0xfe>
      }
      Sx++;                 //��ʾλ��ˮƽ����+1
 800e156:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <DispStr+0x190>)
 800e158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	3301      	adds	r3, #1
 800e160:	b29b      	uxth	r3, r3
 800e162:	b21a      	sxth	r2, r3
 800e164:	4b0a      	ldr	r3, [pc, #40]	; (800e190 <DispStr+0x190>)
 800e166:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i)
 800e168:	8afb      	ldrh	r3, [r7, #22]
 800e16a:	3301      	adds	r3, #1
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	82fb      	strh	r3, [r7, #22]
 800e170:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e174:	2b05      	cmp	r3, #5
 800e176:	f77f af66 	ble.w	800e046 <DispStr+0x46>
  while(*Str != 0)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f47f af59 	bne.w	800e036 <DispStr+0x36>
    }
  }
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3718      	adds	r7, #24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	20000916 	.word	0x20000916
 800e194:	20000918 	.word	0x20000918
 800e198:	08001760 	.word	0x08001760
 800e19c:	0800152c 	.word	0x0800152c
 800e1a0:	ffffaaaa 	.word	0xffffaaaa
 800e1a4:	20000914 	.word	0x20000914
 800e1a8:	20000912 	.word	0x20000912

0800e1ac <Draw_Circle_D>:

/*******************************************************************************
����Ŀ��˫��Բ�ǿ�
*******************************************************************************/
void Draw_Circle_D(char Mode, short Posi_x, short Posi_y, short High, short Width, short Distance)
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4623      	mov	r3, r4
 800e1bc:	71fb      	strb	r3, [r7, #7]
 800e1be:	4603      	mov	r3, r0
 800e1c0:	80bb      	strh	r3, [r7, #4]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	807b      	strh	r3, [r7, #2]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	803b      	strh	r3, [r7, #0]
  short x, y, i, j;

  Distance = Distance + Width*2 + 5 ;
 800e1ca:	8c3b      	ldrh	r3, [r7, #32]
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1d2:	4413      	add	r3, r2
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3305      	adds	r3, #5
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	84bb      	strh	r3, [r7, #36]	; 0x24
  Posi_x = Posi_x - Width;
 800e1dc:	88ba      	ldrh	r2, [r7, #4]
 800e1de:	8c3b      	ldrh	r3, [r7, #32]
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	80bb      	strh	r3, [r7, #4]

  x = Posi_x;
 800e1e6:	88bb      	ldrh	r3, [r7, #4]
 800e1e8:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 2;
 800e1ea:	887b      	ldrh	r3, [r7, #2]
 800e1ec:	3302      	adds	r3, #2
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e1f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e1f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f003 fb9d 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e202:	2300      	movs	r3, #0
 800e204:	81bb      	strh	r3, [r7, #12]
 800e206:	e012      	b.n	800e22e <Draw_Circle_D+0x82>
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <Draw_Circle_D+0x6c>
 800e212:	4b9c      	ldr	r3, [pc, #624]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	e001      	b.n	800e21c <Draw_Circle_D+0x70>
 800e218:	4b9b      	ldr	r3, [pc, #620]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f003 fbdb 	bl	80119d8 <LCD_Set_Pixel>
 800e222:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e226:	b29b      	uxth	r3, r3
 800e228:	3301      	adds	r3, #1
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	81bb      	strh	r3, [r7, #12]
 800e22e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e232:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e236:	3b04      	subs	r3, #4
 800e238:	429a      	cmp	r2, r3
 800e23a:	dbe5      	blt.n	800e208 <Draw_Circle_D+0x5c>
  x = Posi_x + Distance;
 800e23c:	88ba      	ldrh	r2, [r7, #4]
 800e23e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e240:	4413      	add	r3, r2
 800e242:	b29b      	uxth	r3, r3
 800e244:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e246:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e24a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f003 fb73 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e256:	2300      	movs	r3, #0
 800e258:	81bb      	strh	r3, [r7, #12]
 800e25a:	e012      	b.n	800e282 <Draw_Circle_D+0xd6>
 800e25c:	79fb      	ldrb	r3, [r7, #7]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <Draw_Circle_D+0xc0>
 800e266:	4b87      	ldr	r3, [pc, #540]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	e001      	b.n	800e270 <Draw_Circle_D+0xc4>
 800e26c:	4b86      	ldr	r3, [pc, #536]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f003 fbb1 	bl	80119d8 <LCD_Set_Pixel>
 800e276:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	3301      	adds	r3, #1
 800e27e:	b29b      	uxth	r3, r3
 800e280:	81bb      	strh	r3, [r7, #12]
 800e282:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e286:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e28a:	3b04      	subs	r3, #4
 800e28c:	429a      	cmp	r2, r3
 800e28e:	dbe5      	blt.n	800e25c <Draw_Circle_D+0xb0>

  x = Posi_x + 1;
 800e290:	88bb      	ldrh	r3, [r7, #4]
 800e292:	3301      	adds	r3, #1
 800e294:	b29b      	uxth	r3, r3
 800e296:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 1;
 800e298:	887b      	ldrh	r3, [r7, #2]
 800e29a:	3301      	adds	r3, #1
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e2a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f003 fb46 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	81bb      	strh	r3, [r7, #12]
 800e2b4:	e012      	b.n	800e2dc <Draw_Circle_D+0x130>
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	f003 0301 	and.w	r3, r3, #1
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <Draw_Circle_D+0x11a>
 800e2c0:	4b70      	ldr	r3, [pc, #448]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e2c2:	881b      	ldrh	r3, [r3, #0]
 800e2c4:	e001      	b.n	800e2ca <Draw_Circle_D+0x11e>
 800e2c6:	4b70      	ldr	r3, [pc, #448]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f003 fb84 	bl	80119d8 <LCD_Set_Pixel>
 800e2d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	81bb      	strh	r3, [r7, #12]
 800e2dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2e4:	3b02      	subs	r3, #2
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	dbe5      	blt.n	800e2b6 <Draw_Circle_D+0x10a>
  x = Posi_x + Distance-1;
 800e2ea:	88ba      	ldrh	r2, [r7, #4]
 800e2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ee:	4413      	add	r3, r2
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e2f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e300:	4611      	mov	r1, r2
 800e302:	4618      	mov	r0, r3
 800e304:	f003 fb1a 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e308:	2300      	movs	r3, #0
 800e30a:	81bb      	strh	r3, [r7, #12]
 800e30c:	e012      	b.n	800e334 <Draw_Circle_D+0x188>
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <Draw_Circle_D+0x172>
 800e318:	4b5a      	ldr	r3, [pc, #360]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	e001      	b.n	800e322 <Draw_Circle_D+0x176>
 800e31e:	4b5a      	ldr	r3, [pc, #360]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	4618      	mov	r0, r3
 800e324:	f003 fb58 	bl	80119d8 <LCD_Set_Pixel>
 800e328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	3301      	adds	r3, #1
 800e330:	b29b      	uxth	r3, r3
 800e332:	81bb      	strh	r3, [r7, #12]
 800e334:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e338:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e33c:	3b02      	subs	r3, #2
 800e33e:	429a      	cmp	r2, r3
 800e340:	dbe5      	blt.n	800e30e <Draw_Circle_D+0x162>

  x = Posi_x + 2;
 800e342:	88bb      	ldrh	r3, [r7, #4]
 800e344:	3302      	adds	r3, #2
 800e346:	b29b      	uxth	r3, r3
 800e348:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e34a:	887b      	ldrh	r3, [r7, #2]
 800e34c:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e34e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e352:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e356:	4611      	mov	r1, r2
 800e358:	4618      	mov	r0, r3
 800e35a:	f003 faef 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e35e:	2300      	movs	r3, #0
 800e360:	81bb      	strh	r3, [r7, #12]
 800e362:	e012      	b.n	800e38a <Draw_Circle_D+0x1de>
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <Draw_Circle_D+0x1c8>
 800e36e:	4b45      	ldr	r3, [pc, #276]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	e001      	b.n	800e378 <Draw_Circle_D+0x1cc>
 800e374:	4b44      	ldr	r3, [pc, #272]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	4618      	mov	r0, r3
 800e37a:	f003 fb2d 	bl	80119d8 <LCD_Set_Pixel>
 800e37e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e382:	b29b      	uxth	r3, r3
 800e384:	3301      	adds	r3, #1
 800e386:	b29b      	uxth	r3, r3
 800e388:	81bb      	strh	r3, [r7, #12]
 800e38a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e38e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e392:	429a      	cmp	r2, r3
 800e394:	dbe6      	blt.n	800e364 <Draw_Circle_D+0x1b8>
  x = Posi_x + Distance-2;
 800e396:	88ba      	ldrh	r2, [r7, #4]
 800e398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e39a:	4413      	add	r3, r2
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b02      	subs	r3, #2
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e3a4:	887b      	ldrh	r3, [r7, #2]
 800e3a6:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e3a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f003 fac2 	bl	801193c <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	81bb      	strh	r3, [r7, #12]
 800e3bc:	e012      	b.n	800e3e4 <Draw_Circle_D+0x238>
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	f003 0301 	and.w	r3, r3, #1
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <Draw_Circle_D+0x222>
 800e3c8:	4b2e      	ldr	r3, [pc, #184]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e3ca:	881b      	ldrh	r3, [r3, #0]
 800e3cc:	e001      	b.n	800e3d2 <Draw_Circle_D+0x226>
 800e3ce:	4b2e      	ldr	r3, [pc, #184]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f003 fb00 	bl	80119d8 <LCD_Set_Pixel>
 800e3d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	3301      	adds	r3, #1
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	81bb      	strh	r3, [r7, #12]
 800e3e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e3e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	dbe6      	blt.n	800e3be <Draw_Circle_D+0x212>

  y = Posi_y;
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	813b      	strh	r3, [r7, #8]

  for(i=0;i<Width;i++){
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	81fb      	strh	r3, [r7, #14]
 800e3f8:	e05f      	b.n	800e4ba <Draw_Circle_D+0x30e>
    LCD_Set_Posi(Posi_x+3+i, y);
 800e3fa:	88ba      	ldrh	r2, [r7, #4]
 800e3fc:	89fb      	ldrh	r3, [r7, #14]
 800e3fe:	4413      	add	r3, r2
 800e400:	b29b      	uxth	r3, r3
 800e402:	3303      	adds	r3, #3
 800e404:	b29b      	uxth	r3, r3
 800e406:	b21b      	sxth	r3, r3
 800e408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f003 fa94 	bl	801193c <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e414:	2300      	movs	r3, #0
 800e416:	81bb      	strh	r3, [r7, #12]
 800e418:	e012      	b.n	800e440 <Draw_Circle_D+0x294>
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	f003 0301 	and.w	r3, r3, #1
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <Draw_Circle_D+0x27e>
 800e424:	4b17      	ldr	r3, [pc, #92]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	e001      	b.n	800e42e <Draw_Circle_D+0x282>
 800e42a:	4b17      	ldr	r3, [pc, #92]	; (800e488 <Draw_Circle_D+0x2dc>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f003 fad2 	bl	80119d8 <LCD_Set_Pixel>
 800e434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	3301      	adds	r3, #1
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	81bb      	strh	r3, [r7, #12]
 800e440:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e444:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e448:	429a      	cmp	r2, r3
 800e44a:	dbe6      	blt.n	800e41a <Draw_Circle_D+0x26e>
    LCD_Set_Posi(Posi_x+Distance-3-i, y);
 800e44c:	88ba      	ldrh	r2, [r7, #4]
 800e44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e450:	4413      	add	r3, r2
 800e452:	b29a      	uxth	r2, r3
 800e454:	89fb      	ldrh	r3, [r7, #14]
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	b29b      	uxth	r3, r3
 800e45a:	3b03      	subs	r3, #3
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	b21b      	sxth	r3, r3
 800e460:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e464:	4611      	mov	r1, r2
 800e466:	4618      	mov	r0, r3
 800e468:	f003 fa68 	bl	801193c <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e46c:	2300      	movs	r3, #0
 800e46e:	81bb      	strh	r3, [r7, #12]
 800e470:	e017      	b.n	800e4a2 <Draw_Circle_D+0x2f6>
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	f003 0301 	and.w	r3, r3, #1
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d007      	beq.n	800e48c <Draw_Circle_D+0x2e0>
 800e47c:	4b01      	ldr	r3, [pc, #4]	; (800e484 <Draw_Circle_D+0x2d8>)
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	e006      	b.n	800e490 <Draw_Circle_D+0x2e4>
 800e482:	bf00      	nop
 800e484:	20000914 	.word	0x20000914
 800e488:	20000912 	.word	0x20000912
 800e48c:	4b10      	ldr	r3, [pc, #64]	; (800e4d0 <Draw_Circle_D+0x324>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f003 faa1 	bl	80119d8 <LCD_Set_Pixel>
 800e496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	3301      	adds	r3, #1
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	81bb      	strh	r3, [r7, #12]
 800e4a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e4a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	dbe1      	blt.n	800e472 <Draw_Circle_D+0x2c6>
  for(i=0;i<Width;i++){
 800e4ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	81fb      	strh	r3, [r7, #14]
 800e4ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e4be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	db99      	blt.n	800e3fa <Draw_Circle_D+0x24e>
  }
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}
 800e4d0:	20000912 	.word	0x20000912

0800e4d4 <DispStr10x14>:

/*******************************************************************************
  DispStr:                               Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr10x14(short x0, short y0, char Mode, char *Str)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	607b      	str	r3, [r7, #4]
 800e4dc:	4603      	mov	r3, r0
 800e4de:	81fb      	strh	r3, [r7, #14]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	81bb      	strh	r3, [r7, #12]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	72fb      	strb	r3, [r7, #11]
  Sx = x0; Sy = y0;
 800e4e8:	4a0c      	ldr	r2, [pc, #48]	; (800e51c <DispStr10x14+0x48>)
 800e4ea:	89fb      	ldrh	r3, [r7, #14]
 800e4ec:	8013      	strh	r3, [r2, #0]
 800e4ee:	4a0c      	ldr	r2, [pc, #48]	; (800e520 <DispStr10x14+0x4c>)
 800e4f0:	89bb      	ldrh	r3, [r7, #12]
 800e4f2:	8013      	strh	r3, [r2, #0]
  while(*Str != 0)
 800e4f4:	e008      	b.n	800e508 <DispStr10x14+0x34>
  {
    DispChar10x14(Mode, *Str++);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	781a      	ldrb	r2, [r3, #0]
 800e4fe:	7afb      	ldrb	r3, [r7, #11]
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f000 f80e 	bl	800e524 <DispChar10x14>
  while(*Str != 0)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1f2      	bne.n	800e4f6 <DispStr10x14+0x22>
  }
}
 800e510:	bf00      	nop
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	20000916 	.word	0x20000916
 800e520:	20000918 	.word	0x20000918

0800e524 <DispChar10x14>:
/*******************************************************************************
 Disp_Char10x14:                        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispChar10x14(char Mode, char Code)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	460a      	mov	r2, r1
 800e52e:	71fb      	strb	r3, [r7, #7]
 800e530:	4613      	mov	r3, r2
 800e532:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<10; ++i)
 800e534:	2300      	movs	r3, #0
 800e536:	81fb      	strh	r3, [r7, #14]
 800e538:	e0fe      	b.n	800e738 <DispChar10x14+0x214>
  {
    if(Mode & SYMB) k = SYMB10x14[(Code - '@')*10 + i];
 800e53a:	79fb      	ldrb	r3, [r7, #7]
 800e53c:	f003 0310 	and.w	r3, r3, #16
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00f      	beq.n	800e564 <DispChar10x14+0x40>
 800e544:	79bb      	ldrb	r3, [r7, #6]
 800e546:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	461a      	mov	r2, r3
 800e554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e558:	4413      	add	r3, r2
 800e55a:	4a7c      	ldr	r2, [pc, #496]	; (800e74c <DispChar10x14+0x228>)
 800e55c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e560:	817b      	strh	r3, [r7, #10]
 800e562:	e00e      	b.n	800e582 <DispChar10x14+0x5e>
    else            k = CHAR10x14[((Code-0X21)*10)+i];
 800e564:	79bb      	ldrb	r3, [r7, #6]
 800e566:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e56a:	4613      	mov	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	005b      	lsls	r3, r3, #1
 800e572:	461a      	mov	r2, r3
 800e574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e578:	4413      	add	r3, r2
 800e57a:	4a75      	ldr	r2, [pc, #468]	; (800e750 <DispChar10x14+0x22c>)
 800e57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e580:	817b      	strh	r3, [r7, #10]
    if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	f003 0320 	and.w	r3, r3, #32
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00c      	beq.n	800e5a6 <DispChar10x14+0x82>
 800e58c:	89fb      	ldrh	r3, [r7, #14]
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	b29b      	uxth	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <DispChar10x14+0x78>
 800e598:	4a6e      	ldr	r2, [pc, #440]	; (800e754 <DispChar10x14+0x230>)
 800e59a:	e001      	b.n	800e5a0 <DispChar10x14+0x7c>
 800e59c:	f245 5255 	movw	r2, #21845	; 0x5555
 800e5a0:	897b      	ldrh	r3, [r7, #10]
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800e5a6:	4b6c      	ldr	r3, [pc, #432]	; (800e758 <DispChar10x14+0x234>)
 800e5a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5ac:	4a6b      	ldr	r2, [pc, #428]	; (800e75c <DispChar10x14+0x238>)
 800e5ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f003 f9c1 	bl	801193c <LCD_Set_Posi>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	f003 0310 	and.w	r3, r3, #16
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d038      	beq.n	800e636 <DispChar10x14+0x112>
 800e5c4:	79bb      	ldrb	r3, [r7, #6]
 800e5c6:	2b43      	cmp	r3, #67	; 0x43
 800e5c8:	d005      	beq.n	800e5d6 <DispChar10x14+0xb2>
 800e5ca:	79bb      	ldrb	r3, [r7, #6]
 800e5cc:	2b44      	cmp	r3, #68	; 0x44
 800e5ce:	d002      	beq.n	800e5d6 <DispChar10x14+0xb2>
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	2b45      	cmp	r3, #69	; 0x45
 800e5d4:	d12f      	bne.n	800e636 <DispChar10x14+0x112>
      for(j=0; j<11; ++j){
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	81bb      	strh	r3, [r7, #12]
 800e5da:	e027      	b.n	800e62c <DispChar10x14+0x108>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e5dc:	897b      	ldrh	r3, [r7, #10]
 800e5de:	f003 0304 	and.w	r3, r3, #4
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00d      	beq.n	800e602 <DispChar10x14+0xde>
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <DispChar10x14+0xd2>
 800e5f0:	4b5b      	ldr	r3, [pc, #364]	; (800e760 <DispChar10x14+0x23c>)
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	e001      	b.n	800e5fa <DispChar10x14+0xd6>
 800e5f6:	4b5b      	ldr	r3, [pc, #364]	; (800e764 <DispChar10x14+0x240>)
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f003 f9ec 	bl	80119d8 <LCD_Set_Pixel>
 800e600:	e00c      	b.n	800e61c <DispChar10x14+0xf8>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <DispChar10x14+0xee>
 800e60c:	4b55      	ldr	r3, [pc, #340]	; (800e764 <DispChar10x14+0x240>)
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	e001      	b.n	800e616 <DispChar10x14+0xf2>
 800e612:	4b53      	ldr	r3, [pc, #332]	; (800e760 <DispChar10x14+0x23c>)
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	4618      	mov	r0, r3
 800e618:	f003 f9de 	bl	80119d8 <LCD_Set_Pixel>
        k >>= 1;}
 800e61c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e620:	105b      	asrs	r3, r3, #1
 800e622:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e624:	89bb      	ldrh	r3, [r7, #12]
 800e626:	3301      	adds	r3, #1
 800e628:	b29b      	uxth	r3, r3
 800e62a:	81bb      	strh	r3, [r7, #12]
 800e62c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e630:	2b0a      	cmp	r3, #10
 800e632:	ddd3      	ble.n	800e5dc <DispChar10x14+0xb8>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e634:	e073      	b.n	800e71e <DispChar10x14+0x1fa>
    }
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	f003 0310 	and.w	r3, r3, #16
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d03f      	beq.n	800e6c0 <DispChar10x14+0x19c>
 800e640:	79bb      	ldrb	r3, [r7, #6]
 800e642:	2b4c      	cmp	r3, #76	; 0x4c
 800e644:	d002      	beq.n	800e64c <DispChar10x14+0x128>
 800e646:	79bb      	ldrb	r3, [r7, #6]
 800e648:	2b48      	cmp	r3, #72	; 0x48
 800e64a:	d139      	bne.n	800e6c0 <DispChar10x14+0x19c>
      LCD_Set_Posi(Sx, Sy);
 800e64c:	4b42      	ldr	r3, [pc, #264]	; (800e758 <DispChar10x14+0x234>)
 800e64e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e652:	4a42      	ldr	r2, [pc, #264]	; (800e75c <DispChar10x14+0x238>)
 800e654:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f003 f96e 	bl	801193c <LCD_Set_Posi>
      for(j=0; j<11; ++j){
 800e660:	2300      	movs	r3, #0
 800e662:	81bb      	strh	r3, [r7, #12]
 800e664:	e027      	b.n	800e6b6 <DispChar10x14+0x192>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e666:	897b      	ldrh	r3, [r7, #10]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00d      	beq.n	800e68c <DispChar10x14+0x168>
 800e670:	79fb      	ldrb	r3, [r7, #7]
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <DispChar10x14+0x15c>
 800e67a:	4b39      	ldr	r3, [pc, #228]	; (800e760 <DispChar10x14+0x23c>)
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	e001      	b.n	800e684 <DispChar10x14+0x160>
 800e680:	4b38      	ldr	r3, [pc, #224]	; (800e764 <DispChar10x14+0x240>)
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	f003 f9a7 	bl	80119d8 <LCD_Set_Pixel>
 800e68a:	e00c      	b.n	800e6a6 <DispChar10x14+0x182>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	f003 0301 	and.w	r3, r3, #1
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <DispChar10x14+0x178>
 800e696:	4b33      	ldr	r3, [pc, #204]	; (800e764 <DispChar10x14+0x240>)
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	e001      	b.n	800e6a0 <DispChar10x14+0x17c>
 800e69c:	4b30      	ldr	r3, [pc, #192]	; (800e760 <DispChar10x14+0x23c>)
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f003 f999 	bl	80119d8 <LCD_Set_Pixel>
        k >>= 1;
 800e6a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e6aa:	105b      	asrs	r3, r3, #1
 800e6ac:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e6ae:	89bb      	ldrh	r3, [r7, #12]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	81bb      	strh	r3, [r7, #12]
 800e6b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e6ba:	2b0a      	cmp	r3, #10
 800e6bc:	ddd3      	ble.n	800e666 <DispChar10x14+0x142>
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e6be:	e02e      	b.n	800e71e <DispChar10x14+0x1fa>
      }
    }
    else{
      for(j=0; j<14; ++j){
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	81bb      	strh	r3, [r7, #12]
 800e6c4:	e027      	b.n	800e716 <DispChar10x14+0x1f2>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e6c6:	897b      	ldrh	r3, [r7, #10]
 800e6c8:	f003 0304 	and.w	r3, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d00d      	beq.n	800e6ec <DispChar10x14+0x1c8>
 800e6d0:	79fb      	ldrb	r3, [r7, #7]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <DispChar10x14+0x1bc>
 800e6da:	4b21      	ldr	r3, [pc, #132]	; (800e760 <DispChar10x14+0x23c>)
 800e6dc:	881b      	ldrh	r3, [r3, #0]
 800e6de:	e001      	b.n	800e6e4 <DispChar10x14+0x1c0>
 800e6e0:	4b20      	ldr	r3, [pc, #128]	; (800e764 <DispChar10x14+0x240>)
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f003 f977 	bl	80119d8 <LCD_Set_Pixel>
 800e6ea:	e00c      	b.n	800e706 <DispChar10x14+0x1e2>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e6ec:	79fb      	ldrb	r3, [r7, #7]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d002      	beq.n	800e6fc <DispChar10x14+0x1d8>
 800e6f6:	4b1b      	ldr	r3, [pc, #108]	; (800e764 <DispChar10x14+0x240>)
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	e001      	b.n	800e700 <DispChar10x14+0x1dc>
 800e6fc:	4b18      	ldr	r3, [pc, #96]	; (800e760 <DispChar10x14+0x23c>)
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	4618      	mov	r0, r3
 800e702:	f003 f969 	bl	80119d8 <LCD_Set_Pixel>
        k >>= 1;
 800e706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e70a:	105b      	asrs	r3, r3, #1
 800e70c:	817b      	strh	r3, [r7, #10]
      for(j=0; j<14; ++j){
 800e70e:	89bb      	ldrh	r3, [r7, #12]
 800e710:	3301      	adds	r3, #1
 800e712:	b29b      	uxth	r3, r3
 800e714:	81bb      	strh	r3, [r7, #12]
 800e716:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e71a:	2b0d      	cmp	r3, #13
 800e71c:	ddd3      	ble.n	800e6c6 <DispChar10x14+0x1a2>
      }
    }
    Sx++;
 800e71e:	4b0e      	ldr	r3, [pc, #56]	; (800e758 <DispChar10x14+0x234>)
 800e720:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e724:	b29b      	uxth	r3, r3
 800e726:	3301      	adds	r3, #1
 800e728:	b29b      	uxth	r3, r3
 800e72a:	b21a      	sxth	r2, r3
 800e72c:	4b0a      	ldr	r3, [pc, #40]	; (800e758 <DispChar10x14+0x234>)
 800e72e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<10; ++i)
 800e730:	89fb      	ldrh	r3, [r7, #14]
 800e732:	3301      	adds	r3, #1
 800e734:	b29b      	uxth	r3, r3
 800e736:	81fb      	strh	r3, [r7, #14]
 800e738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	f77f aefc 	ble.w	800e53a <DispChar10x14+0x16>
  }
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	08001994 	.word	0x08001994
 800e750:	08001a34 	.word	0x08001a34
 800e754:	ffffaaaa 	.word	0xffffaaaa
 800e758:	20000916 	.word	0x20000916
 800e75c:	20000918 	.word	0x20000918
 800e760:	20000912 	.word	0x20000912
 800e764:	20000914 	.word	0x20000914

0800e768 <NotePixel>:

/*******************************************************************************
 NotePixel: ��������������     Color: ������ɫ(1/0)  ���ض�λ: Nx, Ny
*******************************************************************************/
void NotePixel(char Color)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	71fb      	strb	r3, [r7, #7]
  short i, j, *pBuf = (short*)&WaveBuf[300 + 300 + 300];
 800e772:	4b42      	ldr	r3, [pc, #264]	; (800e87c <NotePixel+0x114>)
 800e774:	60fb      	str	r3, [r7, #12]

  Nx = Nx%ParamTab[WXx1];
 800e776:	4b42      	ldr	r3, [pc, #264]	; (800e880 <NotePixel+0x118>)
 800e778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e77c:	4a41      	ldr	r2, [pc, #260]	; (800e884 <NotePixel+0x11c>)
 800e77e:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e782:	fb93 f1f2 	sdiv	r1, r3, r2
 800e786:	fb01 f202 	mul.w	r2, r1, r2
 800e78a:	1a9b      	subs	r3, r3, r2
 800e78c:	b21a      	sxth	r2, r3
 800e78e:	4b3c      	ldr	r3, [pc, #240]	; (800e880 <NotePixel+0x118>)
 800e790:	801a      	strh	r2, [r3, #0]
  Ny = Ny%ParamTab[HYx2];             // Nx, Ny �����򷵻����
 800e792:	4b3d      	ldr	r3, [pc, #244]	; (800e888 <NotePixel+0x120>)
 800e794:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e798:	4a3a      	ldr	r2, [pc, #232]	; (800e884 <NotePixel+0x11c>)
 800e79a:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e79e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e7a2:	fb01 f202 	mul.w	r2, r1, r2
 800e7a6:	1a9b      	subs	r3, r3, r2
 800e7a8:	b21a      	sxth	r2, r3
 800e7aa:	4b37      	ldr	r3, [pc, #220]	; (800e888 <NotePixel+0x120>)
 800e7ac:	801a      	strh	r2, [r3, #0]
  i  = Nx*(ParamTab[HYx2]/32)+ Ny/16;
 800e7ae:	4b35      	ldr	r3, [pc, #212]	; (800e884 <NotePixel+0x11c>)
 800e7b0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	da00      	bge.n	800e7ba <NotePixel+0x52>
 800e7b8:	331f      	adds	r3, #31
 800e7ba:	115b      	asrs	r3, r3, #5
 800e7bc:	b21b      	sxth	r3, r3
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	4b2f      	ldr	r3, [pc, #188]	; (800e880 <NotePixel+0x118>)
 800e7c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	fb12 f303 	smulbb	r3, r2, r3
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	4b2e      	ldr	r3, [pc, #184]	; (800e888 <NotePixel+0x120>)
 800e7d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	da00      	bge.n	800e7da <NotePixel+0x72>
 800e7d8:	330f      	adds	r3, #15
 800e7da:	111b      	asrs	r3, r3, #4
 800e7dc:	b21b      	sxth	r3, r3
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	4413      	add	r3, r2
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	817b      	strh	r3, [r7, #10]
  j  = Ny%16;
 800e7e6:	4b28      	ldr	r3, [pc, #160]	; (800e888 <NotePixel+0x120>)
 800e7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7ec:	425a      	negs	r2, r3
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	f002 020f 	and.w	r2, r2, #15
 800e7f6:	bf58      	it	pl
 800e7f8:	4253      	negpl	r3, r2
 800e7fa:	813b      	strh	r3, [r7, #8]
  if(Color) pBuf[i] |=  1 << j;
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d015      	beq.n	800e82e <NotePixel+0xc6>
 800e802:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4413      	add	r3, r2
 800e80c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e810:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e814:	2201      	movs	r2, #1
 800e816:	fa02 f303 	lsl.w	r3, r2, r3
 800e81a:	b21a      	sxth	r2, r3
 800e81c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	4403      	add	r3, r0
 800e826:	430a      	orrs	r2, r1
 800e828:	b212      	sxth	r2, r2
 800e82a:	801a      	strh	r2, [r3, #0]
 800e82c:	e016      	b.n	800e85c <NotePixel+0xf4>
  else      pBuf[i] &=~(1 << j);
 800e82e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	4413      	add	r3, r2
 800e838:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e83c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e840:	2201      	movs	r2, #1
 800e842:	fa02 f303 	lsl.w	r3, r2, r3
 800e846:	b21b      	sxth	r3, r3
 800e848:	43db      	mvns	r3, r3
 800e84a:	b21a      	sxth	r2, r3
 800e84c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	4403      	add	r3, r0
 800e856:	400a      	ands	r2, r1
 800e858:	b212      	sxth	r2, r2
 800e85a:	801a      	strh	r2, [r3, #0]
  Ny++;
 800e85c:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <NotePixel+0x120>)
 800e85e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e862:	b29b      	uxth	r3, r3
 800e864:	3301      	adds	r3, #1
 800e866:	b29b      	uxth	r3, r3
 800e868:	b21a      	sxth	r2, r3
 800e86a:	4b07      	ldr	r3, [pc, #28]	; (800e888 <NotePixel+0x120>)
 800e86c:	801a      	strh	r2, [r3, #0]
}
 800e86e:	bf00      	nop
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	20000ca0 	.word	0x20000ca0
 800e880:	20000002 	.word	0x20000002
 800e884:	20000140 	.word	0x20000140
 800e888:	20000004 	.word	0x20000004

0800e88c <Buil_Pop>:

/*******************************************************************************
  Bull_Pop: ������������ݼ���������   �������: Nx, Ny, Wx, Hy
*******************************************************************************/
void Buil_Pop(void)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
  short i;
  memset(&WaveBuf[TRACK1_SIZE+TRACK2_SIZE+TRACK23_SIZE], BLK, POP_SIZE);
 800e892:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e896:	2100      	movs	r1, #0
 800e898:	487f      	ldr	r0, [pc, #508]	; (800ea98 <Buil_Pop+0x20c>)
 800e89a:	f017 fdc3 	bl	8026424 <memset>
  Nx = 0; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e89e:	4b7f      	ldr	r3, [pc, #508]	; (800ea9c <Buil_Pop+0x210>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	801a      	strh	r2, [r3, #0]
 800e8a4:	4b7e      	ldr	r3, [pc, #504]	; (800eaa0 <Buil_Pop+0x214>)
 800e8a6:	2203      	movs	r2, #3
 800e8a8:	801a      	strh	r2, [r3, #0]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	80fb      	strh	r3, [r7, #6]
 800e8ae:	e008      	b.n	800e8c2 <Buil_Pop+0x36>
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	f7ff ff59 	bl	800e768 <NotePixel>
 800e8b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	3301      	adds	r3, #1
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	80fb      	strh	r3, [r7, #6]
 800e8c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8c6:	4b77      	ldr	r3, [pc, #476]	; (800eaa4 <Buil_Pop+0x218>)
 800e8c8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8cc:	0fd9      	lsrs	r1, r3, #31
 800e8ce:	440b      	add	r3, r1
 800e8d0:	105b      	asrs	r3, r3, #1
 800e8d2:	b21b      	sxth	r3, r3
 800e8d4:	3b06      	subs	r3, #6
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	dbea      	blt.n	800e8b0 <Buil_Pop+0x24>
  Nx = 1; Ny = 2;                    NotePixel(1);
 800e8da:	4b70      	ldr	r3, [pc, #448]	; (800ea9c <Buil_Pop+0x210>)
 800e8dc:	2201      	movs	r2, #1
 800e8de:	801a      	strh	r2, [r3, #0]
 800e8e0:	4b6f      	ldr	r3, [pc, #444]	; (800eaa0 <Buil_Pop+0x214>)
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	801a      	strh	r2, [r3, #0]
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	f7ff ff3e 	bl	800e768 <NotePixel>
  Nx = 1; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e8ec:	4b6b      	ldr	r3, [pc, #428]	; (800ea9c <Buil_Pop+0x210>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	801a      	strh	r2, [r3, #0]
 800e8f2:	4b6c      	ldr	r3, [pc, #432]	; (800eaa4 <Buil_Pop+0x218>)
 800e8f4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8f8:	0fda      	lsrs	r2, r3, #31
 800e8fa:	4413      	add	r3, r2
 800e8fc:	105b      	asrs	r3, r3, #1
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	b29b      	uxth	r3, r3
 800e902:	3b03      	subs	r3, #3
 800e904:	b29b      	uxth	r3, r3
 800e906:	b21a      	sxth	r2, r3
 800e908:	4b65      	ldr	r3, [pc, #404]	; (800eaa0 <Buil_Pop+0x214>)
 800e90a:	801a      	strh	r2, [r3, #0]
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7ff ff2b 	bl	800e768 <NotePixel>
  Nx = 2; Ny = 1;                    NotePixel(1);
 800e912:	4b62      	ldr	r3, [pc, #392]	; (800ea9c <Buil_Pop+0x210>)
 800e914:	2202      	movs	r2, #2
 800e916:	801a      	strh	r2, [r3, #0]
 800e918:	4b61      	ldr	r3, [pc, #388]	; (800eaa0 <Buil_Pop+0x214>)
 800e91a:	2201      	movs	r2, #1
 800e91c:	801a      	strh	r2, [r3, #0]
 800e91e:	2001      	movs	r0, #1
 800e920:	f7ff ff22 	bl	800e768 <NotePixel>
  Nx = 2; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e924:	4b5d      	ldr	r3, [pc, #372]	; (800ea9c <Buil_Pop+0x210>)
 800e926:	2202      	movs	r2, #2
 800e928:	801a      	strh	r2, [r3, #0]
 800e92a:	4b5e      	ldr	r3, [pc, #376]	; (800eaa4 <Buil_Pop+0x218>)
 800e92c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e930:	0fda      	lsrs	r2, r3, #31
 800e932:	4413      	add	r3, r2
 800e934:	105b      	asrs	r3, r3, #1
 800e936:	b21b      	sxth	r3, r3
 800e938:	b29b      	uxth	r3, r3
 800e93a:	3b02      	subs	r3, #2
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	b21a      	sxth	r2, r3
 800e940:	4b57      	ldr	r3, [pc, #348]	; (800eaa0 <Buil_Pop+0x214>)
 800e942:	801a      	strh	r2, [r3, #0]
 800e944:	2001      	movs	r0, #1
 800e946:	f7ff ff0f 	bl	800e768 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e94a:	4b54      	ldr	r3, [pc, #336]	; (800ea9c <Buil_Pop+0x210>)
 800e94c:	2203      	movs	r2, #3
 800e94e:	801a      	strh	r2, [r3, #0]
 800e950:	e01e      	b.n	800e990 <Buil_Pop+0x104>
  {
    Ny = 0;                     NotePixel(1);
 800e952:	4b53      	ldr	r3, [pc, #332]	; (800eaa0 <Buil_Pop+0x214>)
 800e954:	2200      	movs	r2, #0
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	2001      	movs	r0, #1
 800e95a:	f7ff ff05 	bl	800e768 <NotePixel>
    Ny = ParamTab[HYx2]/2 - 1;; NotePixel(1);
 800e95e:	4b51      	ldr	r3, [pc, #324]	; (800eaa4 <Buil_Pop+0x218>)
 800e960:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e964:	0fda      	lsrs	r2, r3, #31
 800e966:	4413      	add	r3, r2
 800e968:	105b      	asrs	r3, r3, #1
 800e96a:	b21b      	sxth	r3, r3
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	3b01      	subs	r3, #1
 800e970:	b29b      	uxth	r3, r3
 800e972:	b21a      	sxth	r2, r3
 800e974:	4b4a      	ldr	r3, [pc, #296]	; (800eaa0 <Buil_Pop+0x214>)
 800e976:	801a      	strh	r2, [r3, #0]
 800e978:	2001      	movs	r0, #1
 800e97a:	f7ff fef5 	bl	800e768 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e97e:	4b47      	ldr	r3, [pc, #284]	; (800ea9c <Buil_Pop+0x210>)
 800e980:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e984:	b29b      	uxth	r3, r3
 800e986:	3301      	adds	r3, #1
 800e988:	b29b      	uxth	r3, r3
 800e98a:	b21a      	sxth	r2, r3
 800e98c:	4b43      	ldr	r3, [pc, #268]	; (800ea9c <Buil_Pop+0x210>)
 800e98e:	801a      	strh	r2, [r3, #0]
 800e990:	4b42      	ldr	r3, [pc, #264]	; (800ea9c <Buil_Pop+0x210>)
 800e992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e996:	461a      	mov	r2, r3
 800e998:	4b42      	ldr	r3, [pc, #264]	; (800eaa4 <Buil_Pop+0x218>)
 800e99a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e99e:	3b02      	subs	r3, #2
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	dbd6      	blt.n	800e952 <Buil_Pop+0xc6>
  }
  Nx = ParamTab[WXx1]-3; Ny = 1;                    NotePixel(1);
 800e9a4:	4b3f      	ldr	r3, [pc, #252]	; (800eaa4 <Buil_Pop+0x218>)
 800e9a6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	3b03      	subs	r3, #3
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	b21a      	sxth	r2, r3
 800e9b2:	4b3a      	ldr	r3, [pc, #232]	; (800ea9c <Buil_Pop+0x210>)
 800e9b4:	801a      	strh	r2, [r3, #0]
 800e9b6:	4b3a      	ldr	r3, [pc, #232]	; (800eaa0 <Buil_Pop+0x214>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	801a      	strh	r2, [r3, #0]
 800e9bc:	2001      	movs	r0, #1
 800e9be:	f7ff fed3 	bl	800e768 <NotePixel>
  Nx = ParamTab[WXx1]-3; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e9c2:	4b38      	ldr	r3, [pc, #224]	; (800eaa4 <Buil_Pop+0x218>)
 800e9c4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	3b03      	subs	r3, #3
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	b21a      	sxth	r2, r3
 800e9d0:	4b32      	ldr	r3, [pc, #200]	; (800ea9c <Buil_Pop+0x210>)
 800e9d2:	801a      	strh	r2, [r3, #0]
 800e9d4:	4b33      	ldr	r3, [pc, #204]	; (800eaa4 <Buil_Pop+0x218>)
 800e9d6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9da:	0fda      	lsrs	r2, r3, #31
 800e9dc:	4413      	add	r3, r2
 800e9de:	105b      	asrs	r3, r3, #1
 800e9e0:	b21b      	sxth	r3, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	3b02      	subs	r3, #2
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	b21a      	sxth	r2, r3
 800e9ea:	4b2d      	ldr	r3, [pc, #180]	; (800eaa0 <Buil_Pop+0x214>)
 800e9ec:	801a      	strh	r2, [r3, #0]
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	f7ff feba 	bl	800e768 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = 2;                    NotePixel(1);
 800e9f4:	4b2b      	ldr	r3, [pc, #172]	; (800eaa4 <Buil_Pop+0x218>)
 800e9f6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	3b02      	subs	r3, #2
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	b21a      	sxth	r2, r3
 800ea02:	4b26      	ldr	r3, [pc, #152]	; (800ea9c <Buil_Pop+0x210>)
 800ea04:	801a      	strh	r2, [r3, #0]
 800ea06:	4b26      	ldr	r3, [pc, #152]	; (800eaa0 <Buil_Pop+0x214>)
 800ea08:	2202      	movs	r2, #2
 800ea0a:	801a      	strh	r2, [r3, #0]
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	f7ff feab 	bl	800e768 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800ea12:	4b24      	ldr	r3, [pc, #144]	; (800eaa4 <Buil_Pop+0x218>)
 800ea14:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3b02      	subs	r3, #2
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	b21a      	sxth	r2, r3
 800ea20:	4b1e      	ldr	r3, [pc, #120]	; (800ea9c <Buil_Pop+0x210>)
 800ea22:	801a      	strh	r2, [r3, #0]
 800ea24:	4b1f      	ldr	r3, [pc, #124]	; (800eaa4 <Buil_Pop+0x218>)
 800ea26:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea2a:	0fda      	lsrs	r2, r3, #31
 800ea2c:	4413      	add	r3, r2
 800ea2e:	105b      	asrs	r3, r3, #1
 800ea30:	b21b      	sxth	r3, r3
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	3b03      	subs	r3, #3
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	b21a      	sxth	r2, r3
 800ea3a:	4b19      	ldr	r3, [pc, #100]	; (800eaa0 <Buil_Pop+0x214>)
 800ea3c:	801a      	strh	r2, [r3, #0]
 800ea3e:	2001      	movs	r0, #1
 800ea40:	f7ff fe92 	bl	800e768 <NotePixel>
  Nx = ParamTab[WXx1]-1; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800ea44:	4b17      	ldr	r3, [pc, #92]	; (800eaa4 <Buil_Pop+0x218>)
 800ea46:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	b21a      	sxth	r2, r3
 800ea52:	4b12      	ldr	r3, [pc, #72]	; (800ea9c <Buil_Pop+0x210>)
 800ea54:	801a      	strh	r2, [r3, #0]
 800ea56:	4b12      	ldr	r3, [pc, #72]	; (800eaa0 <Buil_Pop+0x214>)
 800ea58:	2203      	movs	r2, #3
 800ea5a:	801a      	strh	r2, [r3, #0]
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	80fb      	strh	r3, [r7, #6]
 800ea60:	e008      	b.n	800ea74 <Buil_Pop+0x1e8>
 800ea62:	2001      	movs	r0, #1
 800ea64:	f7ff fe80 	bl	800e768 <NotePixel>
 800ea68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	3301      	adds	r3, #1
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	80fb      	strh	r3, [r7, #6]
 800ea74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea78:	4b0a      	ldr	r3, [pc, #40]	; (800eaa4 <Buil_Pop+0x218>)
 800ea7a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea7e:	0fd9      	lsrs	r1, r3, #31
 800ea80:	440b      	add	r3, r1
 800ea82:	105b      	asrs	r3, r3, #1
 800ea84:	b21b      	sxth	r3, r3
 800ea86:	3b06      	subs	r3, #6
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	dbea      	blt.n	800ea62 <Buil_Pop+0x1d6>
}
 800ea8c:	bf00      	nop
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	20000ca0 	.word	0x20000ca0
 800ea9c:	20000002 	.word	0x20000002
 800eaa0:	20000004 	.word	0x20000004
 800eaa4:	20000140 	.word	0x20000140

0800eaa8 <PopColor>:

/*******************************************************************************
 PopColor: ��������ɫ����
*******************************************************************************/
void PopColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	460a      	mov	r2, r1
 800eab2:	80fb      	strh	r3, [r7, #6]
 800eab4:	4613      	mov	r3, r2
 800eab6:	80bb      	strh	r3, [r7, #4]
  ParamTab[POP_B] = Board_Color;
 800eab8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <PopColor+0x30>)
 800eabe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  ParamTab[POP_T] = Text_Color;
 800eac2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800eac6:	4b04      	ldr	r3, [pc, #16]	; (800ead8 <PopColor+0x30>)
 800eac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	20000140 	.word	0x20000140

0800eadc <Close_Pop>:

/*******************************************************************************
  Close_Pop: �رղ˵������Ự��
*******************************************************************************/
void Close_Pop(void)
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
  PopType &= ~(LIST_POP | DAILOG_POP);
 800eae0:	4b07      	ldr	r3, [pc, #28]	; (800eb00 <Close_Pop+0x24>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	f023 0306 	bic.w	r3, r3, #6
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <Close_Pop+0x24>)
 800eaec:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = P_HID;
 800eaee:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <Close_Pop+0x28>)
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eaf6:	bf00      	nop
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	2000091a 	.word	0x2000091a
 800eb04:	20000140 	.word	0x20000140

0800eb08 <List_Pop>:

/*******************************************************************************
  List_Pop: �򿪲˵���
*******************************************************************************/
void List_Pop(void)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	af00      	add	r7, sp, #0
  PopType |= LIST_POP;
 800eb0c:	4b07      	ldr	r3, [pc, #28]	; (800eb2c <List_Pop+0x24>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f043 0302 	orr.w	r3, r3, #2
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <List_Pop+0x24>)
 800eb18:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = SHOW;
 800eb1a:	4b05      	ldr	r3, [pc, #20]	; (800eb30 <List_Pop+0x28>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eb22:	bf00      	nop
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	2000091a 	.word	0x2000091a
 800eb30:	20000140 	.word	0x20000140

0800eb34 <Dialog_Pop>:

/*******************************************************************************
  Dialog_Pop: �����Ự��
*******************************************************************************/
void Dialog_Pop(char* Str)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af02      	add	r7, sp, #8
 800eb3a:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800eb3c:	4b2a      	ldr	r3, [pc, #168]	; (800ebe8 <Dialog_Pop+0xb4>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	f043 0304 	orr.w	r3, r3, #4
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	4b28      	ldr	r3, [pc, #160]	; (800ebe8 <Dialog_Pop+0xb4>)
 800eb48:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 16*8;
 800eb4a:	4b28      	ldr	r3, [pc, #160]	; (800ebec <Dialog_Pop+0xb8>)
 800eb4c:	2280      	movs	r2, #128	; 0x80
 800eb4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 2*3*16;
 800eb52:	4b26      	ldr	r3, [pc, #152]	; (800ebec <Dialog_Pop+0xb8>)
 800eb54:	2260      	movs	r2, #96	; 0x60
 800eb56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 80;
 800eb5a:	4b24      	ldr	r3, [pc, #144]	; (800ebec <Dialog_Pop+0xb8>)
 800eb5c:	2250      	movs	r2, #80	; 0x50
 800eb5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800eb62:	4b22      	ldr	r3, [pc, #136]	; (800ebec <Dialog_Pop+0xb8>)
 800eb64:	22c8      	movs	r2, #200	; 0xc8
 800eb66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800eb6a:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eb6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eb72:	f7ff ff99 	bl	800eaa8 <PopColor>
  Buil_Pop();
 800eb76:	f7ff fe89 	bl	800e88c <Buil_Pop>
  NoteSTR( 1*8, 28, PRN, Str);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	211c      	movs	r1, #28
 800eb80:	2008      	movs	r0, #8
 800eb82:	f000 f8e1 	bl	800ed48 <NoteSTR>
  NoteSTR( 2*6, 8, SYMB+INV,  "{|");
 800eb86:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <Dialog_Pop+0xbc>)
 800eb88:	2211      	movs	r2, #17
 800eb8a:	2108      	movs	r1, #8
 800eb8c:	200c      	movs	r0, #12
 800eb8e:	f000 f8db 	bl	800ed48 <NoteSTR>
  Note_4Point(PRN, 2*6, 8, 2, 10);
 800eb92:	230a      	movs	r3, #10
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	2302      	movs	r3, #2
 800eb98:	2208      	movs	r2, #8
 800eb9a:	210c      	movs	r1, #12
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	f000 f979 	bl	800ee94 <Note_4Point>
  NoteSTR( 4*6, 8, PRN,  ": Yes");
 800eba2:	4b14      	ldr	r3, [pc, #80]	; (800ebf4 <Dialog_Pop+0xc0>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	2108      	movs	r1, #8
 800eba8:	2018      	movs	r0, #24
 800ebaa:	f000 f8cd 	bl	800ed48 <NoteSTR>
  NoteSTR(12*6, 8, SYMB+INV,  "yz");
 800ebae:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <Dialog_Pop+0xc4>)
 800ebb0:	2211      	movs	r2, #17
 800ebb2:	2108      	movs	r1, #8
 800ebb4:	2048      	movs	r0, #72	; 0x48
 800ebb6:	f000 f8c7 	bl	800ed48 <NoteSTR>
  Note_4Point(PRN, 12*6, 8, 2, 10);
 800ebba:	230a      	movs	r3, #10
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	2208      	movs	r2, #8
 800ebc2:	2148      	movs	r1, #72	; 0x48
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	f000 f965 	bl	800ee94 <Note_4Point>
  NoteSTR(14*6, 8, PRN,  ": No");
 800ebca:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <Dialog_Pop+0xc8>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	2108      	movs	r1, #8
 800ebd0:	2054      	movs	r0, #84	; 0x54
 800ebd2:	f000 f8b9 	bl	800ed48 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ebd6:	4b05      	ldr	r3, [pc, #20]	; (800ebec <Dialog_Pop+0xb8>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ebde:	bf00      	nop
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	2000091a 	.word	0x2000091a
 800ebec:	20000140 	.word	0x20000140
 800ebf0:	080001c4 	.word	0x080001c4
 800ebf4:	080001c8 	.word	0x080001c8
 800ebf8:	080001d0 	.word	0x080001d0
 800ebfc:	080001d4 	.word	0x080001d4

0800ec00 <Calibrate_Pop>:

/*******************************************************************************
  Calibrate_Pop: �����Ự��
*******************************************************************************/
void Calibrate_Pop(char* Str)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec08:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <Calibrate_Pop+0x64>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	f043 0304 	orr.w	r3, r3, #4
 800ec10:	b2da      	uxtb	r2, r3
 800ec12:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <Calibrate_Pop+0x64>)
 800ec14:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 25*8;
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <Calibrate_Pop+0x68>)
 800ec18:	22c8      	movs	r2, #200	; 0xc8
 800ec1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 4*16;
 800ec1e:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <Calibrate_Pop+0x68>)
 800ec20:	2240      	movs	r2, #64	; 0x40
 800ec22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 50;
 800ec26:	4b10      	ldr	r3, [pc, #64]	; (800ec68 <Calibrate_Pop+0x68>)
 800ec28:	2232      	movs	r2, #50	; 0x32
 800ec2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 230;
 800ec2e:	4b0e      	ldr	r3, [pc, #56]	; (800ec68 <Calibrate_Pop+0x68>)
 800ec30:	22e6      	movs	r2, #230	; 0xe6
 800ec32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec36:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec3e:	f7ff ff33 	bl	800eaa8 <PopColor>
  Buil_Pop();
 800ec42:	f7ff fe23 	bl	800e88c <Buil_Pop>
  NoteSTR( 2*8, 10, PRN, Str);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	210a      	movs	r1, #10
 800ec4c:	2010      	movs	r0, #16
 800ec4e:	f000 f87b 	bl	800ed48 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ec52:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <Calibrate_Pop+0x68>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	2000091a 	.word	0x2000091a
 800ec68:	20000140 	.word	0x20000140

0800ec6c <CalSave_Pop>:

/*******************************************************************************
  CalSaveg_Pop: �����Ự��
*******************************************************************************/
void CalSave_Pop(char* Str)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af02      	add	r7, sp, #8
 800ec72:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec74:	4b2d      	ldr	r3, [pc, #180]	; (800ed2c <CalSave_Pop+0xc0>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	f043 0304 	orr.w	r3, r3, #4
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	4b2b      	ldr	r3, [pc, #172]	; (800ed2c <CalSave_Pop+0xc0>)
 800ec80:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 13*16;
 800ec82:	4b2b      	ldr	r3, [pc, #172]	; (800ed30 <CalSave_Pop+0xc4>)
 800ec84:	22d0      	movs	r2, #208	; 0xd0
 800ec86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 6*16;
 800ec8a:	4b29      	ldr	r3, [pc, #164]	; (800ed30 <CalSave_Pop+0xc4>)
 800ec8c:	2260      	movs	r2, #96	; 0x60
 800ec8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 30;
 800ec92:	4b27      	ldr	r3, [pc, #156]	; (800ed30 <CalSave_Pop+0xc4>)
 800ec94:	221e      	movs	r2, #30
 800ec96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800ec9a:	4b25      	ldr	r3, [pc, #148]	; (800ed30 <CalSave_Pop+0xc4>)
 800ec9c:	22c8      	movs	r2, #200	; 0xc8
 800ec9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800eca2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eca6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ecaa:	f7ff fefd 	bl	800eaa8 <PopColor>
  Buil_Pop();
 800ecae:	f7ff fded 	bl	800e88c <Buil_Pop>
  NoteSTR( 1*6, 28, PRN, "Complete Cal,");
 800ecb2:	4b20      	ldr	r3, [pc, #128]	; (800ed34 <CalSave_Pop+0xc8>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	211c      	movs	r1, #28
 800ecb8:	2006      	movs	r0, #6
 800ecba:	f000 f845 	bl	800ed48 <NoteSTR>
  NoteSTR( 15*6, 28, PRN, Str);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	211c      	movs	r1, #28
 800ecc4:	205a      	movs	r0, #90	; 0x5a
 800ecc6:	f000 f83f 	bl	800ed48 <NoteSTR>
  NoteSTR( 5*6, 8, SYMB+INV,  "{|");
 800ecca:	4b1b      	ldr	r3, [pc, #108]	; (800ed38 <CalSave_Pop+0xcc>)
 800eccc:	2211      	movs	r2, #17
 800ecce:	2108      	movs	r1, #8
 800ecd0:	201e      	movs	r0, #30
 800ecd2:	f000 f839 	bl	800ed48 <NoteSTR>
  Note_4Point(PRN, 5*6, 8, 2, 10);
 800ecd6:	230a      	movs	r3, #10
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	2302      	movs	r3, #2
 800ecdc:	2208      	movs	r2, #8
 800ecde:	211e      	movs	r1, #30
 800ece0:	2000      	movs	r0, #0
 800ece2:	f000 f8d7 	bl	800ee94 <Note_4Point>
  NoteSTR( 7*6, 8, PRN,  ": Yes");
 800ece6:	4b15      	ldr	r3, [pc, #84]	; (800ed3c <CalSave_Pop+0xd0>)
 800ece8:	2200      	movs	r2, #0
 800ecea:	2108      	movs	r1, #8
 800ecec:	202a      	movs	r0, #42	; 0x2a
 800ecee:	f000 f82b 	bl	800ed48 <NoteSTR>
  NoteSTR(20*6, 8, SYMB+INV,  "yz");
 800ecf2:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <CalSave_Pop+0xd4>)
 800ecf4:	2211      	movs	r2, #17
 800ecf6:	2108      	movs	r1, #8
 800ecf8:	2078      	movs	r0, #120	; 0x78
 800ecfa:	f000 f825 	bl	800ed48 <NoteSTR>
  Note_4Point(PRN, 20*6, 8, 2, 10);
 800ecfe:	230a      	movs	r3, #10
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	2302      	movs	r3, #2
 800ed04:	2208      	movs	r2, #8
 800ed06:	2178      	movs	r1, #120	; 0x78
 800ed08:	2000      	movs	r0, #0
 800ed0a:	f000 f8c3 	bl	800ee94 <Note_4Point>
  NoteSTR(22*6, 8, PRN,  ": No");
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <CalSave_Pop+0xd8>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	2108      	movs	r1, #8
 800ed14:	2084      	movs	r0, #132	; 0x84
 800ed16:	f000 f817 	bl	800ed48 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ed1a:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <CalSave_Pop+0xc4>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ed22:	bf00      	nop
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	2000091a 	.word	0x2000091a
 800ed30:	20000140 	.word	0x20000140
 800ed34:	080001dc 	.word	0x080001dc
 800ed38:	080001c4 	.word	0x080001c4
 800ed3c:	080001c8 	.word	0x080001c8
 800ed40:	080001d0 	.word	0x080001d0
 800ed44:	080001d4 	.word	0x080001d4

0800ed48 <NoteSTR>:

/*******************************************************************************
 NoteSTR: ����������ʾ�ַ�/ͼ�鴮      Mode = bit0: Normal/Inv, bit1: Char/Symb
*******************************************************************************/
void NoteSTR(short Nx0, short Ny0, char Mode, char *Str)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	607b      	str	r3, [r7, #4]
 800ed50:	4603      	mov	r3, r0
 800ed52:	81fb      	strh	r3, [r7, #14]
 800ed54:	460b      	mov	r3, r1
 800ed56:	81bb      	strh	r3, [r7, #12]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	72fb      	strb	r3, [r7, #11]

  char Code;
  short i, j, k;

  Nx = Nx0, Ny = Ny0;
 800ed5c:	4a48      	ldr	r2, [pc, #288]	; (800ee80 <NoteSTR+0x138>)
 800ed5e:	89fb      	ldrh	r3, [r7, #14]
 800ed60:	8013      	strh	r3, [r2, #0]
 800ed62:	4a48      	ldr	r2, [pc, #288]	; (800ee84 <NoteSTR+0x13c>)
 800ed64:	89bb      	ldrh	r3, [r7, #12]
 800ed66:	8013      	strh	r3, [r2, #0]

  while(*Str != 0){
 800ed68:	e080      	b.n	800ee6c <NoteSTR+0x124>
    Code = *Str++;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	747b      	strb	r3, [r7, #17]

    for(i=0; i<6; ++i){
 800ed74:	2300      	movs	r3, #0
 800ed76:	82fb      	strh	r3, [r7, #22]
 800ed78:	e074      	b.n	800ee64 <NoteSTR+0x11c>
      if(!(Mode & SYMB)) k = CHAR6x8[((Code-0X21)*6)+ i];
 800ed7a:	7afb      	ldrb	r3, [r7, #11]
 800ed7c:	f003 0310 	and.w	r3, r3, #16
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10e      	bne.n	800eda2 <NoteSTR+0x5a>
 800ed84:	7c7b      	ldrb	r3, [r7, #17]
 800ed86:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	005b      	lsls	r3, r3, #1
 800ed8e:	4413      	add	r3, r2
 800ed90:	005b      	lsls	r3, r3, #1
 800ed92:	461a      	mov	r2, r3
 800ed94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed98:	4413      	add	r3, r2
 800ed9a:	4a3b      	ldr	r2, [pc, #236]	; (800ee88 <NoteSTR+0x140>)
 800ed9c:	5cd3      	ldrb	r3, [r2, r3]
 800ed9e:	827b      	strh	r3, [r7, #18]
 800eda0:	e00d      	b.n	800edbe <NoteSTR+0x76>
      else               k = SYMB6x8[(Code - '!')*6 + i];
 800eda2:	7c7b      	ldrb	r3, [r7, #17]
 800eda4:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800eda8:	4613      	mov	r3, r2
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	4413      	add	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	461a      	mov	r2, r3
 800edb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edb6:	4413      	add	r3, r2
 800edb8:	4a34      	ldr	r2, [pc, #208]	; (800ee8c <NoteSTR+0x144>)
 800edba:	5cd3      	ldrb	r3, [r2, r3]
 800edbc:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800edbe:	7afb      	ldrb	r3, [r7, #11]
 800edc0:	f003 0320 	and.w	r3, r3, #32
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00c      	beq.n	800ede2 <NoteSTR+0x9a>
 800edc8:	8afb      	ldrh	r3, [r7, #22]
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <NoteSTR+0x90>
 800edd4:	4a2e      	ldr	r2, [pc, #184]	; (800ee90 <NoteSTR+0x148>)
 800edd6:	e001      	b.n	800eddc <NoteSTR+0x94>
 800edd8:	f245 5255 	movw	r2, #21845	; 0x5555
 800eddc:	8a7b      	ldrh	r3, [r7, #18]
 800edde:	4013      	ands	r3, r2
 800ede0:	827b      	strh	r3, [r7, #18]
      k <<= 2;
 800ede2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800edea:	2300      	movs	r3, #0
 800edec:	82bb      	strh	r3, [r7, #20]
 800edee:	e01f      	b.n	800ee30 <NoteSTR+0xe8>
        if(k & 1)  NotePixel((Mode & INV)? 0 : 1);
 800edf0:	8a7b      	ldrh	r3, [r7, #18]
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00b      	beq.n	800ee12 <NoteSTR+0xca>
 800edfa:	7afb      	ldrb	r3, [r7, #11]
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	bf0c      	ite	eq
 800ee04:	2301      	moveq	r3, #1
 800ee06:	2300      	movne	r3, #0
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fcac 	bl	800e768 <NotePixel>
 800ee10:	e006      	b.n	800ee20 <NoteSTR+0xd8>
        else       NotePixel((Mode & INV)? 1 : 0);
 800ee12:	7afb      	ldrb	r3, [r7, #11]
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff fca4 	bl	800e768 <NotePixel>
       k >>= 1;
 800ee20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee24:	105b      	asrs	r3, r3, #1
 800ee26:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800ee28:	8abb      	ldrh	r3, [r7, #20]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	82bb      	strh	r3, [r7, #20]
 800ee30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee34:	2b0d      	cmp	r3, #13
 800ee36:	dddb      	ble.n	800edf0 <NoteSTR+0xa8>
      }
      Nx++; Ny -= 14;
 800ee38:	4b11      	ldr	r3, [pc, #68]	; (800ee80 <NoteSTR+0x138>)
 800ee3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	3301      	adds	r3, #1
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	b21a      	sxth	r2, r3
 800ee46:	4b0e      	ldr	r3, [pc, #56]	; (800ee80 <NoteSTR+0x138>)
 800ee48:	801a      	strh	r2, [r3, #0]
 800ee4a:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <NoteSTR+0x13c>)
 800ee4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	3b0e      	subs	r3, #14
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	b21a      	sxth	r2, r3
 800ee58:	4b0a      	ldr	r3, [pc, #40]	; (800ee84 <NoteSTR+0x13c>)
 800ee5a:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i){
 800ee5c:	8afb      	ldrh	r3, [r7, #22]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	82fb      	strh	r3, [r7, #22]
 800ee64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee68:	2b05      	cmp	r3, #5
 800ee6a:	dd86      	ble.n	800ed7a <NoteSTR+0x32>
  while(*Str != 0){
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f47f af7a 	bne.w	800ed6a <NoteSTR+0x22>
    }
  }
}
 800ee76:	bf00      	nop
 800ee78:	bf00      	nop
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20000002 	.word	0x20000002
 800ee84:	20000004 	.word	0x20000004
 800ee88:	08001760 	.word	0x08001760
 800ee8c:	0800152c 	.word	0x0800152c
 800ee90:	ffffaaaa 	.word	0xffffaaaa

0800ee94 <Note_4Point>:

/*******************************************************************************
Note_4Point:���Ķ��ǵ�
*******************************************************************************/
void Note_4Point(char Mode, short x, short y, char Str_Cnt, char High)
{
 800ee94:	b590      	push	{r4, r7, lr}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	4611      	mov	r1, r2
 800eea0:	461a      	mov	r2, r3
 800eea2:	4623      	mov	r3, r4
 800eea4:	71fb      	strb	r3, [r7, #7]
 800eea6:	4603      	mov	r3, r0
 800eea8:	80bb      	strh	r3, [r7, #4]
 800eeaa:	460b      	mov	r3, r1
 800eeac:	807b      	strh	r3, [r7, #2]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	71bb      	strb	r3, [r7, #6]
  High = High+4;
 800eeb2:	7e3b      	ldrb	r3, [r7, #24]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	763b      	strb	r3, [r7, #24]

  Nx = x, Ny = y;
 800eeb8:	4a2e      	ldr	r2, [pc, #184]	; (800ef74 <Note_4Point+0xe0>)
 800eeba:	88bb      	ldrh	r3, [r7, #4]
 800eebc:	8013      	strh	r3, [r2, #0]
 800eebe:	4a2e      	ldr	r2, [pc, #184]	; (800ef78 <Note_4Point+0xe4>)
 800eec0:	887b      	ldrh	r3, [r7, #2]
 800eec2:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	f003 0301 	and.w	r3, r3, #1
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fc4b 	bl	800e768 <NotePixel>
  Nx = x, Ny = y+High-1;
 800eed2:	4a28      	ldr	r2, [pc, #160]	; (800ef74 <Note_4Point+0xe0>)
 800eed4:	88bb      	ldrh	r3, [r7, #4]
 800eed6:	8013      	strh	r3, [r2, #0]
 800eed8:	7e3b      	ldrb	r3, [r7, #24]
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	887b      	ldrh	r3, [r7, #2]
 800eede:	4413      	add	r3, r2
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	3b01      	subs	r3, #1
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	b21a      	sxth	r2, r3
 800eee8:	4b23      	ldr	r3, [pc, #140]	; (800ef78 <Note_4Point+0xe4>)
 800eeea:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	f003 0301 	and.w	r3, r3, #1
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff fc37 	bl	800e768 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y;
 800eefa:	79bb      	ldrb	r3, [r7, #6]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	461a      	mov	r2, r3
 800ef00:	0052      	lsls	r2, r2, #1
 800ef02:	4413      	add	r3, r2
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	88bb      	ldrh	r3, [r7, #4]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	b21a      	sxth	r2, r3
 800ef14:	4b17      	ldr	r3, [pc, #92]	; (800ef74 <Note_4Point+0xe0>)
 800ef16:	801a      	strh	r2, [r3, #0]
 800ef18:	4a17      	ldr	r2, [pc, #92]	; (800ef78 <Note_4Point+0xe4>)
 800ef1a:	887b      	ldrh	r3, [r7, #2]
 800ef1c:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef1e:	79fb      	ldrb	r3, [r7, #7]
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fc1e 	bl	800e768 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y+High-1;
 800ef2c:	79bb      	ldrb	r3, [r7, #6]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	461a      	mov	r2, r3
 800ef32:	0052      	lsls	r2, r2, #1
 800ef34:	4413      	add	r3, r2
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	88bb      	ldrh	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	3b01      	subs	r3, #1
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	b21a      	sxth	r2, r3
 800ef46:	4b0b      	ldr	r3, [pc, #44]	; (800ef74 <Note_4Point+0xe0>)
 800ef48:	801a      	strh	r2, [r3, #0]
 800ef4a:	7e3b      	ldrb	r3, [r7, #24]
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	887b      	ldrh	r3, [r7, #2]
 800ef50:	4413      	add	r3, r2
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	b21a      	sxth	r2, r3
 800ef5a:	4b07      	ldr	r3, [pc, #28]	; (800ef78 <Note_4Point+0xe4>)
 800ef5c:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef5e:	79fb      	ldrb	r3, [r7, #7]
 800ef60:	f003 0301 	and.w	r3, r3, #1
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff fbfe 	bl	800e768 <NotePixel>

}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd90      	pop	{r4, r7, pc}
 800ef74:	20000002 	.word	0x20000002
 800ef78:	20000004 	.word	0x20000004

0800ef7c <Color_Num>:

/*******************************************************************************
Color_Num: �����ǰ��ɫ�Ķ�Ӧ��ɫ����
*******************************************************************************/
char Color_Num(short Color)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	80fb      	strh	r3, [r7, #6]
  if(Color == WHT)                  return 0;
  else if((Color & CYN  )== CYN  )  return 1;
 800ef86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ef8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ef8e:	4013      	ands	r3, r2
 800ef90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d101      	bne.n	800ef9c <Color_Num+0x20>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e068      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & CYN_ )== CYN_ )  return 2;
 800ef9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800efa4:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800efa8:	d101      	bne.n	800efae <Color_Num+0x32>
 800efaa:	2302      	movs	r3, #2
 800efac:	e05f      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & YEL  )== YEL  )  return 3;
 800efae:	88fb      	ldrh	r3, [r7, #6]
 800efb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800efb4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800efb8:	4293      	cmp	r3, r2
 800efba:	d101      	bne.n	800efc0 <Color_Num+0x44>
 800efbc:	2303      	movs	r3, #3
 800efbe:	e056      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & YEL_ )== YEL_ )  return 4;
 800efc0:	88fb      	ldrh	r3, [r7, #6]
 800efc2:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800efc6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800efca:	d101      	bne.n	800efd0 <Color_Num+0x54>
 800efcc:	2304      	movs	r3, #4
 800efce:	e04e      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & PUR  )== PUR  )  return 5;
 800efd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efd4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800efd8:	4013      	ands	r3, r2
 800efda:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800efde:	4293      	cmp	r3, r2
 800efe0:	d101      	bne.n	800efe6 <Color_Num+0x6a>
 800efe2:	2305      	movs	r3, #5
 800efe4:	e043      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & PUR_ )== PUR_ )  return 6;
 800efe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efea:	f248 0310 	movw	r3, #32784	; 0x8010
 800efee:	4013      	ands	r3, r2
 800eff0:	f248 0210 	movw	r2, #32784	; 0x8010
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d101      	bne.n	800effc <Color_Num+0x80>
 800eff8:	2306      	movs	r3, #6
 800effa:	e038      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & GRN  )== GRN  )  return 7;
 800effc:	88fb      	ldrh	r3, [r7, #6]
 800effe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f002:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f006:	d101      	bne.n	800f00c <Color_Num+0x90>
 800f008:	2307      	movs	r3, #7
 800f00a:	e030      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & GRN_ )== GRN_ )  return 8;
 800f00c:	88fb      	ldrh	r3, [r7, #6]
 800f00e:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f012:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f016:	d101      	bne.n	800f01c <Color_Num+0xa0>
 800f018:	2308      	movs	r3, #8
 800f01a:	e028      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & GRY  )== GRY  )  return 9;
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	461a      	mov	r2, r3
 800f020:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f024:	4013      	ands	r3, r2
 800f026:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d101      	bne.n	800f032 <Color_Num+0xb6>
 800f02e:	2309      	movs	r3, #9
 800f030:	e01d      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & ORN  )== ORN  )  return 10;
 800f032:	88fb      	ldrh	r3, [r7, #6]
 800f034:	461a      	mov	r2, r3
 800f036:	f240 531f 	movw	r3, #1311	; 0x51f
 800f03a:	4013      	ands	r3, r2
 800f03c:	f240 521f 	movw	r2, #1311	; 0x51f
 800f040:	4293      	cmp	r3, r2
 800f042:	d101      	bne.n	800f048 <Color_Num+0xcc>
 800f044:	230a      	movs	r3, #10
 800f046:	e012      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & BLU  )== BLU  )  return 11;
 800f048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f04c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f050:	4013      	ands	r3, r2
 800f052:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f056:	4293      	cmp	r3, r2
 800f058:	d101      	bne.n	800f05e <Color_Num+0xe2>
 800f05a:	230b      	movs	r3, #11
 800f05c:	e007      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & RED  )== RED  )  return 12;
 800f05e:	88fb      	ldrh	r3, [r7, #6]
 800f060:	f003 031f 	and.w	r3, r3, #31
 800f064:	2b1f      	cmp	r3, #31
 800f066:	d101      	bne.n	800f06c <Color_Num+0xf0>
 800f068:	230c      	movs	r3, #12
 800f06a:	e000      	b.n	800f06e <Color_Num+0xf2>
  else if((Color & BLK  )== BLK  )  return 13;
 800f06c:	230d      	movs	r3, #13
  else if((Color & LGN  )== LGN  )  return 14;
  else                              return 15;
}
 800f06e:	4618      	mov	r0, r3
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr
	...

0800f07c <PrintClk>:

/*******************************************************************************
 Print_Clk: ����ָʾ
*******************************************************************************/
void PrintClk(short x0, short y0, char Phase)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	4603      	mov	r3, r0
 800f084:	80fb      	strh	r3, [r7, #6]
 800f086:	460b      	mov	r3, r1
 800f088:	80bb      	strh	r3, [r7, #4]
 800f08a:	4613      	mov	r3, r2
 800f08c:	70fb      	strb	r3, [r7, #3]
  short i, j, b;
  SetColor(GRY, TCOLOR[FN]);
 800f08e:	4b31      	ldr	r3, [pc, #196]	; (800f154 <PrintClk+0xd8>)
 800f090:	895b      	ldrh	r3, [r3, #10]
 800f092:	4619      	mov	r1, r3
 800f094:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f098:	f7fe ff9a 	bl	800dfd0 <SetColor>
  x0=S_X[SAVE_BMP]+30;
 800f09c:	4b2e      	ldr	r3, [pc, #184]	; (800f158 <PrintClk+0xdc>)
 800f09e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	331e      	adds	r3, #30
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	80fb      	strh	r3, [r7, #6]
  DispStr(S_X[SAVE_BMP]-3, LABLE_Y, PRN, "             ");
 800f0aa:	4b2b      	ldr	r3, [pc, #172]	; (800f158 <PrintClk+0xdc>)
 800f0ac:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	3b03      	subs	r3, #3
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	b218      	sxth	r0, r3
 800f0b8:	4b28      	ldr	r3, [pc, #160]	; (800f15c <PrintClk+0xe0>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	2103      	movs	r1, #3
 800f0be:	f7fe ff9f 	bl	800e000 <DispStr>
  for(i=1; i<11; ++i){
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	81fb      	strh	r3, [r7, #14]
 800f0c6:	e03c      	b.n	800f142 <PrintClk+0xc6>
    b = CLK_TAB[Phase *11 + i];
 800f0c8:	78fa      	ldrb	r2, [r7, #3]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	441a      	add	r2, r3
 800f0d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0d8:	4413      	add	r3, r2
 800f0da:	4a21      	ldr	r2, [pc, #132]	; (800f160 <PrintClk+0xe4>)
 800f0dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0e0:	817b      	strh	r3, [r7, #10]
    for(j=0; j<11; ++j){
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	81bb      	strh	r3, [r7, #12]
 800f0e6:	e024      	b.n	800f132 <PrintClk+0xb6>
      LCD_Set_Posi((x0+j), (y0+i));
 800f0e8:	88fa      	ldrh	r2, [r7, #6]
 800f0ea:	89bb      	ldrh	r3, [r7, #12]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	b218      	sxth	r0, r3
 800f0f2:	88ba      	ldrh	r2, [r7, #4]
 800f0f4:	89fb      	ldrh	r3, [r7, #14]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	b21b      	sxth	r3, r3
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	f002 fc1d 	bl	801193c <LCD_Set_Posi>
      if((b >> j)& 0x001)
 800f102:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f106:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f10a:	fa42 f303 	asr.w	r3, r2, r3
 800f10e:	f003 0301 	and.w	r3, r3, #1
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <PrintClk+0xa4>
        LCD_Set_Pixel(BLU);
 800f116:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f11a:	f002 fc5d 	bl	80119d8 <LCD_Set_Pixel>
 800f11e:	e004      	b.n	800f12a <PrintClk+0xae>
      else
        LCD_Set_Pixel(Background);
 800f120:	4b10      	ldr	r3, [pc, #64]	; (800f164 <PrintClk+0xe8>)
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	4618      	mov	r0, r3
 800f126:	f002 fc57 	bl	80119d8 <LCD_Set_Pixel>
    for(j=0; j<11; ++j){
 800f12a:	89bb      	ldrh	r3, [r7, #12]
 800f12c:	3301      	adds	r3, #1
 800f12e:	b29b      	uxth	r3, r3
 800f130:	81bb      	strh	r3, [r7, #12]
 800f132:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f136:	2b0a      	cmp	r3, #10
 800f138:	ddd6      	ble.n	800f0e8 <PrintClk+0x6c>
  for(i=1; i<11; ++i){
 800f13a:	89fb      	ldrh	r3, [r7, #14]
 800f13c:	3301      	adds	r3, #1
 800f13e:	b29b      	uxth	r3, r3
 800f140:	81fb      	strh	r3, [r7, #14]
 800f142:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f146:	2b0a      	cmp	r3, #10
 800f148:	ddbe      	ble.n	800f0c8 <PrintClk+0x4c>
    }
  }
}
 800f14a:	bf00      	nop
 800f14c:	bf00      	nop
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	08001fa4 	.word	0x08001fa4
 800f158:	080021f8 	.word	0x080021f8
 800f15c:	080001ec 	.word	0x080001ec
 800f160:	08001c58 	.word	0x08001c58
 800f164:	20000912 	.word	0x20000912

0800f168 <WriteVar>:

/*******************************************************************************
 WriteVar
*******************************************************************************/
void WriteVar(short Var, short* pClu)
  {
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	6039      	str	r1, [r7, #0]
 800f172:	80fb      	strh	r3, [r7, #6]
    short temp_addr,temp_len;
    unsigned j;

    memset(Num, 0, 4);
 800f174:	2204      	movs	r2, #4
 800f176:	2100      	movs	r1, #0
 800f178:	4847      	ldr	r0, [pc, #284]	; (800f298 <WriteVar+0x130>)
 800f17a:	f017 f953 	bl	8026424 <memset>
    u16ToDec4Str(Num,Var);
 800f17e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f182:	4619      	mov	r1, r3
 800f184:	4844      	ldr	r0, [pc, #272]	; (800f298 <WriteVar+0x130>)
 800f186:	f002 f957 	bl	8011438 <u16ToDec4Str>
    Length = strlen((char const*)Num);
 800f18a:	4843      	ldr	r0, [pc, #268]	; (800f298 <WriteVar+0x130>)
 800f18c:	f7fc ff58 	bl	800c040 <strlen>
 800f190:	4603      	mov	r3, r0
 800f192:	b21a      	sxth	r2, r3
 800f194:	4b41      	ldr	r3, [pc, #260]	; (800f29c <WriteVar+0x134>)
 800f196:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Num, Length);
 800f198:	4b41      	ldr	r3, [pc, #260]	; (800f2a0 <WriteVar+0x138>)
 800f19a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4b40      	ldr	r3, [pc, #256]	; (800f2a4 <WriteVar+0x13c>)
 800f1a2:	4413      	add	r3, r2
 800f1a4:	4a3d      	ldr	r2, [pc, #244]	; (800f29c <WriteVar+0x134>)
 800f1a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f1aa:	493b      	ldr	r1, [pc, #236]	; (800f298 <WriteVar+0x130>)
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f017 f92b 	bl	8026408 <memcpy>
    Addr = Addr + Length;
 800f1b2:	4b3b      	ldr	r3, [pc, #236]	; (800f2a0 <WriteVar+0x138>)
 800f1b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	4b38      	ldr	r3, [pc, #224]	; (800f29c <WriteVar+0x134>)
 800f1bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	b21a      	sxth	r2, r3
 800f1c8:	4b35      	ldr	r3, [pc, #212]	; (800f2a0 <WriteVar+0x138>)
 800f1ca:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f1cc:	4b33      	ldr	r3, [pc, #204]	; (800f29c <WriteVar+0x134>)
 800f1ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4b34      	ldr	r3, [pc, #208]	; (800f2a8 <WriteVar+0x140>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4413      	add	r3, r2
 800f1da:	4a33      	ldr	r2, [pc, #204]	; (800f2a8 <WriteVar+0x140>)
 800f1dc:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f1de:	4b30      	ldr	r3, [pc, #192]	; (800f2a0 <WriteVar+0x138>)
 800f1e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1e8:	db52      	blt.n	800f290 <WriteVar+0x128>
    {
      f_write(&USERFile, F_Buff, 4096, &j);
 800f1ea:	f107 0308 	add.w	r3, r7, #8
 800f1ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f1f2:	492c      	ldr	r1, [pc, #176]	; (800f2a4 <WriteVar+0x13c>)
 800f1f4:	482d      	ldr	r0, [pc, #180]	; (800f2ac <WriteVar+0x144>)
 800f1f6:	f015 fca8 	bl	8024b4a <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);  // ����ָʾ
 800f1fa:	4b2d      	ldr	r3, [pc, #180]	; (800f2b0 <WriteVar+0x148>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	492b      	ldr	r1, [pc, #172]	; (800f2b0 <WriteVar+0x148>)
 800f202:	600a      	str	r2, [r1, #0]
 800f204:	105b      	asrs	r3, r3, #1
 800f206:	b2db      	uxtb	r3, r3
 800f208:	f003 0303 	and.w	r3, r3, #3
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	2102      	movs	r1, #2
 800f212:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f216:	f7ff ff31 	bl	800f07c <PrintClk>
      temp_len = Addr -4096;
 800f21a:	4b21      	ldr	r3, [pc, #132]	; (800f2a0 <WriteVar+0x138>)
 800f21c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f220:	b29b      	uxth	r3, r3
 800f222:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f226:	b29b      	uxth	r3, r3
 800f228:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f22a:	4b1c      	ldr	r3, [pc, #112]	; (800f29c <WriteVar+0x134>)
 800f22c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f230:	b29a      	uxth	r2, r3
 800f232:	89fb      	ldrh	r3, [r7, #14]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	b29b      	uxth	r3, r3
 800f238:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f23a:	4b19      	ldr	r3, [pc, #100]	; (800f2a0 <WriteVar+0x138>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f244:	2100      	movs	r1, #0
 800f246:	4817      	ldr	r0, [pc, #92]	; (800f2a4 <WriteVar+0x13c>)
 800f248:	f017 f8ec 	bl	8026424 <memset>
      memset(Data,0,310);
 800f24c:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f250:	2100      	movs	r1, #0
 800f252:	4818      	ldr	r0, [pc, #96]	; (800f2b4 <WriteVar+0x14c>)
 800f254:	f017 f8e6 	bl	8026424 <memset>
      memcpy(&F_Buff[Addr],Num + temp_addr, temp_len);
 800f258:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <WriteVar+0x138>)
 800f25a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f25e:	461a      	mov	r2, r3
 800f260:	4b10      	ldr	r3, [pc, #64]	; (800f2a4 <WriteVar+0x13c>)
 800f262:	18d0      	adds	r0, r2, r3
 800f264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f268:	4a0b      	ldr	r2, [pc, #44]	; (800f298 <WriteVar+0x130>)
 800f26a:	4413      	add	r3, r2
 800f26c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f270:	4619      	mov	r1, r3
 800f272:	f017 f8c9 	bl	8026408 <memcpy>
      Addr = Addr + temp_len;
 800f276:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <WriteVar+0x138>)
 800f278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	89fb      	ldrh	r3, [r7, #14]
 800f280:	4413      	add	r3, r2
 800f282:	b29b      	uxth	r3, r3
 800f284:	b21a      	sxth	r2, r3
 800f286:	4b06      	ldr	r3, [pc, #24]	; (800f2a0 <WriteVar+0x138>)
 800f288:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f28a:	4b04      	ldr	r3, [pc, #16]	; (800f29c <WriteVar+0x134>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	801a      	strh	r2, [r3, #0]
    }
  }
 800f290:	bf00      	nop
 800f292:	3710      	adds	r7, #16
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	20002524 	.word	0x20002524
 800f29c:	2000251e 	.word	0x2000251e
 800f2a0:	2000251c 	.word	0x2000251c
 800f2a4:	200012e0 	.word	0x200012e0
 800f2a8:	20002520 	.word	0x20002520
 800f2ac:	20007aa8 	.word	0x20007aa8
 800f2b0:	20002528 	.word	0x20002528
 800f2b4:	20000008 	.word	0x20000008

0800f2b8 <WriteStr>:

/*******************************************************************************
 WriteStr
*******************************************************************************/
void WriteStr(char* Str, short* pClu)
  {
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
    short temp_addr,temp_len;
    unsigned j;

    Length = strlen((char const*)Str);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7fc febc 	bl	800c040 <strlen>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	b21a      	sxth	r2, r3
 800f2cc:	4b40      	ldr	r3, [pc, #256]	; (800f3d0 <WriteStr+0x118>)
 800f2ce:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Str, Length);
 800f2d0:	4b40      	ldr	r3, [pc, #256]	; (800f3d4 <WriteStr+0x11c>)
 800f2d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	4b3f      	ldr	r3, [pc, #252]	; (800f3d8 <WriteStr+0x120>)
 800f2da:	4413      	add	r3, r2
 800f2dc:	4a3c      	ldr	r2, [pc, #240]	; (800f3d0 <WriteStr+0x118>)
 800f2de:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f017 f88f 	bl	8026408 <memcpy>
    Addr = Addr + Length;
 800f2ea:	4b3a      	ldr	r3, [pc, #232]	; (800f3d4 <WriteStr+0x11c>)
 800f2ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	4b37      	ldr	r3, [pc, #220]	; (800f3d0 <WriteStr+0x118>)
 800f2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4413      	add	r3, r2
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	b21a      	sxth	r2, r3
 800f300:	4b34      	ldr	r3, [pc, #208]	; (800f3d4 <WriteStr+0x11c>)
 800f302:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f304:	4b32      	ldr	r3, [pc, #200]	; (800f3d0 <WriteStr+0x118>)
 800f306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f30a:	461a      	mov	r2, r3
 800f30c:	4b33      	ldr	r3, [pc, #204]	; (800f3dc <WriteStr+0x124>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4413      	add	r3, r2
 800f312:	4a32      	ldr	r2, [pc, #200]	; (800f3dc <WriteStr+0x124>)
 800f314:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f316:	4b2f      	ldr	r3, [pc, #188]	; (800f3d4 <WriteStr+0x11c>)
 800f318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f31c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f320:	db52      	blt.n	800f3c8 <WriteStr+0x110>
    {
        f_write(&USERFile, F_Buff, 4096, &j);
 800f322:	f107 0308 	add.w	r3, r7, #8
 800f326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f32a:	492b      	ldr	r1, [pc, #172]	; (800f3d8 <WriteStr+0x120>)
 800f32c:	482c      	ldr	r0, [pc, #176]	; (800f3e0 <WriteStr+0x128>)
 800f32e:	f015 fc0c 	bl	8024b4a <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);     // ����ָʾ
 800f332:	4b2c      	ldr	r3, [pc, #176]	; (800f3e4 <WriteStr+0x12c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	492a      	ldr	r1, [pc, #168]	; (800f3e4 <WriteStr+0x12c>)
 800f33a:	600a      	str	r2, [r1, #0]
 800f33c:	105b      	asrs	r3, r3, #1
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	b2db      	uxtb	r3, r3
 800f346:	461a      	mov	r2, r3
 800f348:	2102      	movs	r1, #2
 800f34a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f34e:	f7ff fe95 	bl	800f07c <PrintClk>
      temp_len = Addr -4096;
 800f352:	4b20      	ldr	r3, [pc, #128]	; (800f3d4 <WriteStr+0x11c>)
 800f354:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f358:	b29b      	uxth	r3, r3
 800f35a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f35e:	b29b      	uxth	r3, r3
 800f360:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f362:	4b1b      	ldr	r3, [pc, #108]	; (800f3d0 <WriteStr+0x118>)
 800f364:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f368:	b29a      	uxth	r2, r3
 800f36a:	89fb      	ldrh	r3, [r7, #14]
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	b29b      	uxth	r3, r3
 800f370:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f372:	4b18      	ldr	r3, [pc, #96]	; (800f3d4 <WriteStr+0x11c>)
 800f374:	2200      	movs	r2, #0
 800f376:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f37c:	2100      	movs	r1, #0
 800f37e:	4816      	ldr	r0, [pc, #88]	; (800f3d8 <WriteStr+0x120>)
 800f380:	f017 f850 	bl	8026424 <memset>
      memset(Data,0,310);
 800f384:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f388:	2100      	movs	r1, #0
 800f38a:	4817      	ldr	r0, [pc, #92]	; (800f3e8 <WriteStr+0x130>)
 800f38c:	f017 f84a 	bl	8026424 <memset>
      memcpy(&F_Buff[Addr],Str + temp_addr, temp_len);
 800f390:	4b10      	ldr	r3, [pc, #64]	; (800f3d4 <WriteStr+0x11c>)
 800f392:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f396:	461a      	mov	r2, r3
 800f398:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <WriteStr+0x120>)
 800f39a:	18d0      	adds	r0, r2, r3
 800f39c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	f017 f82d 	bl	8026408 <memcpy>
      Addr = Addr + temp_len;
 800f3ae:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <WriteStr+0x11c>)
 800f3b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	89fb      	ldrh	r3, [r7, #14]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	b21a      	sxth	r2, r3
 800f3be:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <WriteStr+0x11c>)
 800f3c0:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f3c2:	4b03      	ldr	r3, [pc, #12]	; (800f3d0 <WriteStr+0x118>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	801a      	strh	r2, [r3, #0]
    }
  }
 800f3c8:	bf00      	nop
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	2000251e 	.word	0x2000251e
 800f3d4:	2000251c 	.word	0x2000251c
 800f3d8:	200012e0 	.word	0x200012e0
 800f3dc:	20002520 	.word	0x20002520
 800f3e0:	20007aa8 	.word	0x20007aa8
 800f3e4:	20002528 	.word	0x20002528
 800f3e8:	20000008 	.word	0x20000008

0800f3ec <Make_Filename>:

/*******************************************************************************

*******************************************************************************/
void Make_Filename(short FileNo, char* FileName)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	6039      	str	r1, [r7, #0]
 800f3f6:	80fb      	strh	r3, [r7, #6]
  char Num[4];
  u8ToDec3(Num, FileNo);
 800f3f8:	88fb      	ldrh	r3, [r7, #6]
 800f3fa:	b2da      	uxtb	r2, r3
 800f3fc:	f107 030c 	add.w	r3, r7, #12
 800f400:	4611      	mov	r1, r2
 800f402:	4618      	mov	r0, r3
 800f404:	f001 fe72 	bl	80110ec <u8ToDec3>
  FileName[4] = Num[0];
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	3304      	adds	r3, #4
 800f40c:	7b3a      	ldrb	r2, [r7, #12]
 800f40e:	701a      	strb	r2, [r3, #0]
  FileName[5] = Num[1];
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	3305      	adds	r3, #5
 800f414:	7b7a      	ldrb	r2, [r7, #13]
 800f416:	701a      	strb	r2, [r3, #0]
  FileName[6] = Num[2];
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	3306      	adds	r3, #6
 800f41c:	7bba      	ldrb	r2, [r7, #14]
 800f41e:	701a      	strb	r2, [r3, #0]
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <Load_File_Num>:

/*******************************************************************************
Load_File_Num(char Tpye)
*******************************************************************************/
short Load_File_Num(char Type)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	71fb      	strb	r3, [r7, #7]
  short FileNo=0;
 800f432:	2300      	movs	r3, #0
 800f434:	82fb      	strh	r3, [r7, #22]
  char  pFileName[13]="FILE       ";
 800f436:	4a35      	ldr	r2, [pc, #212]	; (800f50c <Load_File_Num+0xe4>)
 800f438:	f107 0308 	add.w	r3, r7, #8
 800f43c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f43e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f442:	2300      	movs	r3, #0
 800f444:	753b      	strb	r3, [r7, #20]

  switch(Type)
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	3b1d      	subs	r3, #29
 800f44a:	2b04      	cmp	r3, #4
 800f44c:	d834      	bhi.n	800f4b8 <Load_File_Num+0x90>
 800f44e:	a201      	add	r2, pc, #4	; (adr r2, 800f454 <Load_File_Num+0x2c>)
 800f450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f454:	0800f469 	.word	0x0800f469
 800f458:	0800f479 	.word	0x0800f479
 800f45c:	0800f489 	.word	0x0800f489
 800f460:	0800f499 	.word	0x0800f499
 800f464:	0800f4a9 	.word	0x0800f4a9
  {
  case SAVE_BMP:
    memcpy(pFileName,"IMG_   .BMP",12);
 800f468:	f107 0308 	add.w	r3, r7, #8
 800f46c:	220c      	movs	r2, #12
 800f46e:	4928      	ldr	r1, [pc, #160]	; (800f510 <Load_File_Num+0xe8>)
 800f470:	4618      	mov	r0, r3
 800f472:	f016 ffc9 	bl	8026408 <memcpy>
    break;
 800f476:	e01f      	b.n	800f4b8 <Load_File_Num+0x90>
  case SAVE_DAT:
    memcpy(pFileName,"FILE   .DAT",12);
 800f478:	f107 0308 	add.w	r3, r7, #8
 800f47c:	220c      	movs	r2, #12
 800f47e:	4925      	ldr	r1, [pc, #148]	; (800f514 <Load_File_Num+0xec>)
 800f480:	4618      	mov	r0, r3
 800f482:	f016 ffc1 	bl	8026408 <memcpy>
    break;
 800f486:	e017      	b.n	800f4b8 <Load_File_Num+0x90>
  case SAVE_BUF:
    memcpy(pFileName,"DATA   .BUF",12);
 800f488:	f107 0308 	add.w	r3, r7, #8
 800f48c:	220c      	movs	r2, #12
 800f48e:	4922      	ldr	r1, [pc, #136]	; (800f518 <Load_File_Num+0xf0>)
 800f490:	4618      	mov	r0, r3
 800f492:	f016 ffb9 	bl	8026408 <memcpy>
    break;
 800f496:	e00f      	b.n	800f4b8 <Load_File_Num+0x90>
  case SAVE_CSV:
    memcpy(pFileName,"DATA   .CSV",12);
 800f498:	f107 0308 	add.w	r3, r7, #8
 800f49c:	220c      	movs	r2, #12
 800f49e:	491f      	ldr	r1, [pc, #124]	; (800f51c <Load_File_Num+0xf4>)
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f016 ffb1 	bl	8026408 <memcpy>
    break;
 800f4a6:	e007      	b.n	800f4b8 <Load_File_Num+0x90>
  case SAVE_SVG:
    memcpy(pFileName,"DATA   .SVG",12);
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	220c      	movs	r2, #12
 800f4ae:	491c      	ldr	r1, [pc, #112]	; (800f520 <Load_File_Num+0xf8>)
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f016 ffa9 	bl	8026408 <memcpy>
    break;
 800f4b6:	bf00      	nop
  }
    Make_Filename(FileNo, pFileName);
 800f4b8:	f107 0208 	add.w	r2, r7, #8
 800f4bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff ff92 	bl	800f3ec <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4c8:	e010      	b.n	800f4ec <Load_File_Num+0xc4>
    {
      f_close(&USERFile);
 800f4ca:	4816      	ldr	r0, [pc, #88]	; (800f524 <Load_File_Num+0xfc>)
 800f4cc:	f015 fd0a 	bl	8024ee4 <f_close>
      FileNo++;
 800f4d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	82fb      	strh	r3, [r7, #22]
      Make_Filename(FileNo, pFileName);
 800f4dc:	f107 0208 	add.w	r2, r7, #8
 800f4e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff ff80 	bl	800f3ec <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4ec:	f107 0308 	add.w	r3, r7, #8
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	480b      	ldr	r0, [pc, #44]	; (800f524 <Load_File_Num+0xfc>)
 800f4f6:	f015 f853 	bl	80245a0 <f_open>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d0e4      	beq.n	800f4ca <Load_File_Num+0xa2>
    }

  return FileNo;
 800f500:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	08000238 	.word	0x08000238
 800f510:	080001fc 	.word	0x080001fc
 800f514:	08000208 	.word	0x08000208
 800f518:	08000214 	.word	0x08000214
 800f51c:	08000220 	.word	0x08000220
 800f520:	0800022c 	.word	0x0800022c
 800f524:	20007aa8 	.word	0x20007aa8

0800f528 <File_Num>:

/*******************************************************************************
void File_Num(void)
*******************************************************************************/
void File_Num(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  List[SAVE_BMP].Val =  Load_File_Num(SAVE_BMP);
 800f52c:	201d      	movs	r0, #29
 800f52e:	f7ff ff7b 	bl	800f428 <Load_File_Num>
 800f532:	4603      	mov	r3, r0
 800f534:	461a      	mov	r2, r3
 800f536:	4b12      	ldr	r3, [pc, #72]	; (800f580 <File_Num+0x58>)
 800f538:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  List[SAVE_DAT].Val =  Load_File_Num(SAVE_DAT);
 800f53c:	201e      	movs	r0, #30
 800f53e:	f7ff ff73 	bl	800f428 <Load_File_Num>
 800f542:	4603      	mov	r3, r0
 800f544:	461a      	mov	r2, r3
 800f546:	4b0e      	ldr	r3, [pc, #56]	; (800f580 <File_Num+0x58>)
 800f548:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  List[SAVE_BUF].Val =  Load_File_Num(SAVE_BUF);
 800f54c:	201f      	movs	r0, #31
 800f54e:	f7ff ff6b 	bl	800f428 <Load_File_Num>
 800f552:	4603      	mov	r3, r0
 800f554:	461a      	mov	r2, r3
 800f556:	4b0a      	ldr	r3, [pc, #40]	; (800f580 <File_Num+0x58>)
 800f558:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  List[SAVE_CSV].Val =  Load_File_Num(SAVE_CSV);
 800f55c:	2020      	movs	r0, #32
 800f55e:	f7ff ff63 	bl	800f428 <Load_File_Num>
 800f562:	4603      	mov	r3, r0
 800f564:	461a      	mov	r2, r3
 800f566:	4b06      	ldr	r3, [pc, #24]	; (800f580 <File_Num+0x58>)
 800f568:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  List[SAVE_SVG].Val =  Load_File_Num(SAVE_SVG);
 800f56c:	2021      	movs	r0, #33	; 0x21
 800f56e:	f7ff ff5b 	bl	800f428 <Load_File_Num>
 800f572:	4603      	mov	r3, r0
 800f574:	461a      	mov	r2, r3
 800f576:	4b02      	ldr	r3, [pc, #8]	; (800f580 <File_Num+0x58>)
 800f578:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 800f57c:	bf00      	nop
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	20000274 	.word	0x20000274

0800f584 <Load_Buf>:

/*******************************************************************************
Load_Buf: ���ر�����Ĳɼ����ݻ�����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Buf(short FileNo)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08c      	sub	sp, #48	; 0x30
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f58e:	4a68      	ldr	r2, [pc, #416]	; (800f730 <Load_Buf+0x1ac>)
 800f590:	f107 0310 	add.w	r3, r7, #16
 800f594:	ca07      	ldmia	r2, {r0, r1, r2}
 800f596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f59a:	2300      	movs	r3, #0
 800f59c:	773b      	strb	r3, [r7, #28]
  short *ptr;
  int i,Rvalue,n;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f59e:	f107 0210 	add.w	r2, r7, #16
 800f5a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7ff ff1f 	bl	800f3ec <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800f5ae:	f107 0310 	add.w	r3, r7, #16
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	485f      	ldr	r0, [pc, #380]	; (800f734 <Load_Buf+0x1b0>)
 800f5b8:	f014 fff2 	bl	80245a0 <f_open>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	627b      	str	r3, [r7, #36]	; 0x24
  if(Rvalue !=FR_OK)
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <Load_Buf+0x48>
	  return Rvalue;
 800f5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	e0ac      	b.n	800f726 <Load_Buf+0x1a2>
  n=2;
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if(List[SMPL_DPTH].Val==3)
 800f5d0:	4b59      	ldr	r3, [pc, #356]	; (800f738 <Load_Buf+0x1b4>)
 800f5d2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f5d6:	2b03      	cmp	r3, #3
 800f5d8:	d101      	bne.n	800f5de <Load_Buf+0x5a>
	  n =4 ;//8K
 800f5da:	2304      	movs	r3, #4
 800f5dc:	62bb      	str	r3, [r7, #40]	; 0x28
  for(i=0;i<n;i++)
 800f5de:	2300      	movs	r3, #0
 800f5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5e2:	e021      	b.n	800f628 <Load_Buf+0xa4>
  {
    if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f5e4:	f107 030c 	add.w	r3, r7, #12
 800f5e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f5ec:	4953      	ldr	r1, [pc, #332]	; (800f73c <Load_Buf+0x1b8>)
 800f5ee:	4851      	ldr	r0, [pc, #324]	; (800f734 <Load_Buf+0x1b0>)
 800f5f0:	f015 f992 	bl	8024918 <f_read>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <Load_Buf+0x7a>
    	return FILE_RW_ERR;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e093      	b.n	800f726 <Load_Buf+0x1a2>
    if(j != 4096)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f604:	d001      	beq.n	800f60a <Load_Buf+0x86>
    	return FILE_RW_ERR;
 800f606:	2303      	movs	r3, #3
 800f608:	e08d      	b.n	800f726 <Load_Buf+0x1a2>
    memcpy(&(Sampl[i*4096/2+2]),F_Buff,4096);
 800f60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60c:	02db      	lsls	r3, r3, #11
 800f60e:	3302      	adds	r3, #2
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4a4b      	ldr	r2, [pc, #300]	; (800f740 <Load_Buf+0x1bc>)
 800f614:	4413      	add	r3, r2
 800f616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f61a:	4948      	ldr	r1, [pc, #288]	; (800f73c <Load_Buf+0x1b8>)
 800f61c:	4618      	mov	r0, r3
 800f61e:	f016 fef3 	bl	8026408 <memcpy>
  for(i=0;i<n;i++)
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	3301      	adds	r3, #1
 800f626:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62c:	429a      	cmp	r2, r3
 800f62e:	dbd9      	blt.n	800f5e4 <Load_Buf+0x60>
  }
  if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f630:	f107 030c 	add.w	r3, r7, #12
 800f634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f638:	4940      	ldr	r1, [pc, #256]	; (800f73c <Load_Buf+0x1b8>)
 800f63a:	483e      	ldr	r0, [pc, #248]	; (800f734 <Load_Buf+0x1b0>)
 800f63c:	f015 f96c 	bl	8024918 <f_read>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <Load_Buf+0xc6>
  	return FILE_RW_ERR;
 800f646:	2303      	movs	r3, #3
 800f648:	e06d      	b.n	800f726 <Load_Buf+0x1a2>
  f_close(&USERFile);
 800f64a:	483a      	ldr	r0, [pc, #232]	; (800f734 <Load_Buf+0x1b0>)
 800f64c:	f015 fc4a 	bl	8024ee4 <f_close>

  ptr=(short*)F_Sector;                               //�����ֳ�
 800f650:	4b3c      	ldr	r3, [pc, #240]	; (800f744 <Load_Buf+0x1c0>)
 800f652:	623b      	str	r3, [r7, #32]
  *ptr++=0xaa55;
 800f654:	6a3b      	ldr	r3, [r7, #32]
 800f656:	1c9a      	adds	r2, r3, #2
 800f658:	623a      	str	r2, [r7, #32]
 800f65a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800f65e:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[0];
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	1c9a      	adds	r2, r3, #2
 800f664:	623a      	str	r2, [r7, #32]
 800f666:	4a36      	ldr	r2, [pc, #216]	; (800f740 <Load_Buf+0x1bc>)
 800f668:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f66c:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[1];
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	1c9a      	adds	r2, r3, #2
 800f672:	623a      	str	r2, [r7, #32]
 800f674:	4a32      	ldr	r2, [pc, #200]	; (800f740 <Load_Buf+0x1bc>)
 800f676:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f67a:	801a      	strh	r2, [r3, #0]
  *ptr++=List[Y_RANGES].Val;
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	1c9a      	adds	r2, r3, #2
 800f680:	623a      	str	r2, [r7, #32]
 800f682:	4a2d      	ldr	r2, [pc, #180]	; (800f738 <Load_Buf+0x1b4>)
 800f684:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f688:	801a      	strh	r2, [r3, #0]
  *ptr++=List[PROBEATT].Val;
 800f68a:	6a3b      	ldr	r3, [r7, #32]
 800f68c:	1c9a      	adds	r2, r3, #2
 800f68e:	623a      	str	r2, [r7, #32]
 800f690:	4a29      	ldr	r2, [pc, #164]	; (800f738 <Load_Buf+0x1b4>)
 800f692:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f696:	801a      	strh	r2, [r3, #0]
  *ptr++=List[SMPL_DPTH].Val;
 800f698:	6a3b      	ldr	r3, [r7, #32]
 800f69a:	1c9a      	adds	r2, r3, #2
 800f69c:	623a      	str	r2, [r7, #32]
 800f69e:	4a26      	ldr	r2, [pc, #152]	; (800f738 <Load_Buf+0x1b4>)
 800f6a0:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f6a4:	801a      	strh	r2, [r3, #0]
  ptr =(short*)F_Buff;                            //��ԭ���Ĳ���
 800f6a6:	4b25      	ldr	r3, [pc, #148]	; (800f73c <Load_Buf+0x1b8>)
 800f6a8:	623b      	str	r3, [r7, #32]
  Sampl[0]=*ptr++;
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	1c9a      	adds	r2, r3, #2
 800f6ae:	623a      	str	r2, [r7, #32]
 800f6b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6b4:	4b22      	ldr	r3, [pc, #136]	; (800f740 <Load_Buf+0x1bc>)
 800f6b6:	801a      	strh	r2, [r3, #0]
  Sampl[1]=*ptr++;
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	1c9a      	adds	r2, r3, #2
 800f6bc:	623a      	str	r2, [r7, #32]
 800f6be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6c2:	4b1f      	ldr	r3, [pc, #124]	; (800f740 <Load_Buf+0x1bc>)
 800f6c4:	805a      	strh	r2, [r3, #2]
  List[Y_RANGES].Val=*ptr++;
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	1c9a      	adds	r2, r3, #2
 800f6ca:	623a      	str	r2, [r7, #32]
 800f6cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6d0:	4b19      	ldr	r3, [pc, #100]	; (800f738 <Load_Buf+0x1b4>)
 800f6d2:	809a      	strh	r2, [r3, #4]
  List[PROBEATT].Val=*ptr++;
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	1c9a      	adds	r2, r3, #2
 800f6d8:	623a      	str	r2, [r7, #32]
 800f6da:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6de:	4b16      	ldr	r3, [pc, #88]	; (800f738 <Load_Buf+0x1b4>)
 800f6e0:	829a      	strh	r2, [r3, #20]
  List[SMPL_DPTH].Val=*ptr++;
 800f6e2:	6a3b      	ldr	r3, [r7, #32]
 800f6e4:	1c9a      	adds	r2, r3, #2
 800f6e6:	623a      	str	r2, [r7, #32]
 800f6e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6ec:	4b12      	ldr	r3, [pc, #72]	; (800f738 <Load_Buf+0x1b4>)
 800f6ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  Status |=  STOP;
 800f6f2:	4b15      	ldr	r3, [pc, #84]	; (800f748 <Load_Buf+0x1c4>)
 800f6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6f8:	f043 0301 	orr.w	r3, r3, #1
 800f6fc:	b21a      	sxth	r2, r3
 800f6fe:	4b12      	ldr	r3, [pc, #72]	; (800f748 <Load_Buf+0x1c4>)
 800f700:	801a      	strh	r2, [r3, #0]
  DispStatus();
 800f702:	f004 fa2d 	bl	8013b60 <DispStatus>
  if(List[LOAD_BUF].Val<99)
 800f706:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <Load_Buf+0x1b4>)
 800f708:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f70c:	2b62      	cmp	r3, #98	; 0x62
 800f70e:	dc09      	bgt.n	800f724 <Load_Buf+0x1a0>
	  List[LOAD_BUF].Val++;
 800f710:	4b09      	ldr	r3, [pc, #36]	; (800f738 <Load_Buf+0x1b4>)
 800f712:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f716:	b29b      	uxth	r3, r3
 800f718:	3301      	adds	r3, #1
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	b21a      	sxth	r2, r3
 800f71e:	4b06      	ldr	r3, [pc, #24]	; (800f738 <Load_Buf+0x1b4>)
 800f720:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  return 0;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3730      	adds	r7, #48	; 0x30
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	08000248 	.word	0x08000248
 800f734:	20007aa8 	.word	0x20007aa8
 800f738:	20000274 	.word	0x20000274
 800f73c:	200012e0 	.word	0x200012e0
 800f740:	200026a4 	.word	0x200026a4
 800f744:	2000231c 	.word	0x2000231c
 800f748:	20002656 	.word	0x20002656

0800f74c <Save_Buf>:

/*******************************************************************************
Save_Buf: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Buf(short FileNo)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08a      	sub	sp, #40	; 0x28
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f756:	4a55      	ldr	r2, [pc, #340]	; (800f8ac <Save_Buf+0x160>)
 800f758:	f107 030c 	add.w	r3, r7, #12
 800f75c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f75e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f762:	2300      	movs	r3, #0
 800f764:	763b      	strb	r3, [r7, #24]
  int i;
  short *p;
  char  l=0;
 800f766:	2300      	movs	r3, #0
 800f768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  short n;
  unsigned j;

  n=2;
 800f76c:	2302      	movs	r3, #2
 800f76e:	843b      	strh	r3, [r7, #32]

  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 800f770:	4b4f      	ldr	r3, [pc, #316]	; (800f8b0 <Save_Buf+0x164>)
 800f772:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f776:	2b03      	cmp	r3, #3
 800f778:	d101      	bne.n	800f77e <Save_Buf+0x32>
 800f77a:	2304      	movs	r3, #4
 800f77c:	843b      	strh	r3, [r7, #32]

  Make_Filename(FileNo, pFileName);
 800f77e:	f107 020c 	add.w	r2, r7, #12
 800f782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f786:	4611      	mov	r1, r2
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff fe2f 	bl	800f3ec <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f78e:	f107 030c 	add.w	r3, r7, #12
 800f792:	2213      	movs	r2, #19
 800f794:	4619      	mov	r1, r3
 800f796:	4847      	ldr	r0, [pc, #284]	; (800f8b4 <Save_Buf+0x168>)
 800f798:	f014 ff02 	bl	80245a0 <f_open>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <Save_Buf+0x5a>
	  return DISK_RW_ERR;
 800f7a2:	2304      	movs	r3, #4
 800f7a4:	e07d      	b.n	800f8a2 <Save_Buf+0x156>

  for(i=0; i<n; i++)
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f7aa:	e02b      	b.n	800f804 <Save_Buf+0xb8>
  {
    memcpy(F_Buff,&(Sampl[i*4096/2+2]),4096);
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ae:	02db      	lsls	r3, r3, #11
 800f7b0:	3302      	adds	r3, #2
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	4a40      	ldr	r2, [pc, #256]	; (800f8b8 <Save_Buf+0x16c>)
 800f7b6:	4413      	add	r3, r2
 800f7b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7bc:	4619      	mov	r1, r3
 800f7be:	483f      	ldr	r0, [pc, #252]	; (800f8bc <Save_Buf+0x170>)
 800f7c0:	f016 fe22 	bl	8026408 <memcpy>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f7c4:	f107 0308 	add.w	r3, r7, #8
 800f7c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7cc:	493b      	ldr	r1, [pc, #236]	; (800f8bc <Save_Buf+0x170>)
 800f7ce:	4839      	ldr	r0, [pc, #228]	; (800f8b4 <Save_Buf+0x168>)
 800f7d0:	f015 f9bb 	bl	8024b4a <f_write>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <Save_Buf+0x92>
 800f7da:	2303      	movs	r3, #3
 800f7dc:	e061      	b.n	800f8a2 <Save_Buf+0x156>
    PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 800f7de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7e2:	1c5a      	adds	r2, r3, #1
 800f7e4:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800f7e8:	085b      	lsrs	r3, r3, #1
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	f003 0303 	and.w	r3, r3, #3
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	2102      	movs	r1, #2
 800f7f6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f7fa:	f7ff fc3f 	bl	800f07c <PrintClk>
  for(i=0; i<n; i++)
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	3301      	adds	r3, #1
 800f802:	627b      	str	r3, [r7, #36]	; 0x24
 800f804:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80a:	429a      	cmp	r2, r3
 800f80c:	dbce      	blt.n	800f7ac <Save_Buf+0x60>
  }
  memset(F_Buff,0,4096);
 800f80e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f812:	2100      	movs	r1, #0
 800f814:	4829      	ldr	r0, [pc, #164]	; (800f8bc <Save_Buf+0x170>)
 800f816:	f016 fe05 	bl	8026424 <memset>
  p =(short*)&F_Buff;
 800f81a:	4b28      	ldr	r3, [pc, #160]	; (800f8bc <Save_Buf+0x170>)
 800f81c:	61fb      	str	r3, [r7, #28]
  *p++=Sampl[0];
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	1c9a      	adds	r2, r3, #2
 800f822:	61fa      	str	r2, [r7, #28]
 800f824:	4a24      	ldr	r2, [pc, #144]	; (800f8b8 <Save_Buf+0x16c>)
 800f826:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f82a:	801a      	strh	r2, [r3, #0]
  *p++=Sampl[1];
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	1c9a      	adds	r2, r3, #2
 800f830:	61fa      	str	r2, [r7, #28]
 800f832:	4a21      	ldr	r2, [pc, #132]	; (800f8b8 <Save_Buf+0x16c>)
 800f834:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f838:	801a      	strh	r2, [r3, #0]
  *p++=List[Y_RANGES].Val;
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	1c9a      	adds	r2, r3, #2
 800f83e:	61fa      	str	r2, [r7, #28]
 800f840:	4a1b      	ldr	r2, [pc, #108]	; (800f8b0 <Save_Buf+0x164>)
 800f842:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f846:	801a      	strh	r2, [r3, #0]
  *p++=List[PROBEATT].Val;
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	1c9a      	adds	r2, r3, #2
 800f84c:	61fa      	str	r2, [r7, #28]
 800f84e:	4a18      	ldr	r2, [pc, #96]	; (800f8b0 <Save_Buf+0x164>)
 800f850:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f854:	801a      	strh	r2, [r3, #0]
  *p++=List[SMPL_DPTH].Val;
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	1c9a      	adds	r2, r3, #2
 800f85a:	61fa      	str	r2, [r7, #28]
 800f85c:	4a14      	ldr	r2, [pc, #80]	; (800f8b0 <Save_Buf+0x164>)
 800f85e:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f862:	801a      	strh	r2, [r3, #0]
  if(f_write( &USERFile, F_Buff, 12, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f864:	f107 0308 	add.w	r3, r7, #8
 800f868:	220c      	movs	r2, #12
 800f86a:	4914      	ldr	r1, [pc, #80]	; (800f8bc <Save_Buf+0x170>)
 800f86c:	4811      	ldr	r0, [pc, #68]	; (800f8b4 <Save_Buf+0x168>)
 800f86e:	f015 f96c 	bl	8024b4a <f_write>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d001      	beq.n	800f87c <Save_Buf+0x130>
 800f878:	2303      	movs	r3, #3
 800f87a:	e012      	b.n	800f8a2 <Save_Buf+0x156>
  f_close(&USERFile);
 800f87c:	480d      	ldr	r0, [pc, #52]	; (800f8b4 <Save_Buf+0x168>)
 800f87e:	f015 fb31 	bl	8024ee4 <f_close>
  if(List[SAVE_BUF].Val<99)
 800f882:	4b0b      	ldr	r3, [pc, #44]	; (800f8b0 <Save_Buf+0x164>)
 800f884:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f888:	2b62      	cmp	r3, #98	; 0x62
 800f88a:	dc09      	bgt.n	800f8a0 <Save_Buf+0x154>
	  List[SAVE_BUF].Val++;
 800f88c:	4b08      	ldr	r3, [pc, #32]	; (800f8b0 <Save_Buf+0x164>)
 800f88e:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f892:	b29b      	uxth	r3, r3
 800f894:	3301      	adds	r3, #1
 800f896:	b29b      	uxth	r3, r3
 800f898:	b21a      	sxth	r2, r3
 800f89a:	4b05      	ldr	r3, [pc, #20]	; (800f8b0 <Save_Buf+0x164>)
 800f89c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  return OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3728      	adds	r7, #40	; 0x28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	08000248 	.word	0x08000248
 800f8b0:	20000274 	.word	0x20000274
 800f8b4:	20007aa8 	.word	0x20007aa8
 800f8b8:	200026a4 	.word	0x200026a4
 800f8bc:	200012e0 	.word	0x200012e0

0800f8c0 <Save_Dat>:

/*******************************************************************************
Save_Dat: ���浱ǰ��Ļ��ʾͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Dat(short FileNo)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b088      	sub	sp, #32
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f8ca:	4a3c      	ldr	r2, [pc, #240]	; (800f9bc <Save_Dat+0xfc>)
 800f8cc:	f107 0310 	add.w	r3, r7, #16
 800f8d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	773b      	strb	r3, [r7, #28]
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f8da:	f107 0210 	add.w	r2, r7, #16
 800f8de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff fd81 	bl	800f3ec <Make_Filename>
  memset(F_Buff,0,4096);
 800f8ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	4833      	ldr	r0, [pc, #204]	; (800f9c0 <Save_Dat+0x100>)
 800f8f2:	f016 fd97 	bl	8026424 <memset>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f8f6:	f107 0310 	add.w	r3, r7, #16
 800f8fa:	2213      	movs	r2, #19
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	4831      	ldr	r0, [pc, #196]	; (800f9c4 <Save_Dat+0x104>)
 800f900:	f014 fe4e 	bl	80245a0 <f_open>
 800f904:	4603      	mov	r3, r0
 800f906:	2b00      	cmp	r3, #0
 800f908:	d001      	beq.n	800f90e <Save_Dat+0x4e>
	  return DISK_RW_ERR;
 800f90a:	2304      	movs	r3, #4
 800f90c:	e052      	b.n	800f9b4 <Save_Dat+0xf4>
  F_Buff[0]  = 1;              //Ver0001
 800f90e:	4b2c      	ldr	r3, [pc, #176]	; (800f9c0 <Save_Dat+0x100>)
 800f910:	2201      	movs	r2, #1
 800f912:	701a      	strb	r2, [r3, #0]
  F_Buff[1]  = List[V0_POSI].Val;
 800f914:	4b2c      	ldr	r3, [pc, #176]	; (800f9c8 <Save_Dat+0x108>)
 800f916:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	4b28      	ldr	r3, [pc, #160]	; (800f9c0 <Save_Dat+0x100>)
 800f91e:	705a      	strb	r2, [r3, #1]
  F_Buff[2]  = List[EXT_POSI].Val;
 800f920:	4b29      	ldr	r3, [pc, #164]	; (800f9c8 <Save_Dat+0x108>)
 800f922:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 800f926:	b2da      	uxtb	r2, r3
 800f928:	4b25      	ldr	r3, [pc, #148]	; (800f9c0 <Save_Dat+0x100>)
 800f92a:	709a      	strb	r2, [r3, #2]
  F_Buff[3]  = List[TIM_BASE].Val;
 800f92c:	4b26      	ldr	r3, [pc, #152]	; (800f9c8 <Save_Dat+0x108>)
 800f92e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f932:	b2da      	uxtb	r2, r3
 800f934:	4b22      	ldr	r3, [pc, #136]	; (800f9c0 <Save_Dat+0x100>)
 800f936:	70da      	strb	r2, [r3, #3]
  F_Buff[4]  = List[Y_RANGES].Val;
 800f938:	4b23      	ldr	r3, [pc, #140]	; (800f9c8 <Save_Dat+0x108>)
 800f93a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	4b1f      	ldr	r3, [pc, #124]	; (800f9c0 <Save_Dat+0x100>)
 800f942:	711a      	strb	r2, [r3, #4]
  F_Buff[5]  = List[COUPLING].Val;
 800f944:	4b20      	ldr	r3, [pc, #128]	; (800f9c8 <Save_Dat+0x108>)
 800f946:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	4b1c      	ldr	r3, [pc, #112]	; (800f9c0 <Save_Dat+0x100>)
 800f94e:	715a      	strb	r2, [r3, #5]
  F_Buff[6]  = List[PROBEATT].Val;
 800f950:	4b1d      	ldr	r3, [pc, #116]	; (800f9c8 <Save_Dat+0x108>)
 800f952:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f956:	b2da      	uxtb	r2, r3
 800f958:	4b19      	ldr	r3, [pc, #100]	; (800f9c0 <Save_Dat+0x100>)
 800f95a:	719a      	strb	r2, [r3, #6]
  F_Buff[7]  = List[TR_MODE].Val;
 800f95c:	4b1a      	ldr	r3, [pc, #104]	; (800f9c8 <Save_Dat+0x108>)
 800f95e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f962:	b2da      	uxtb	r2, r3
 800f964:	4b16      	ldr	r3, [pc, #88]	; (800f9c0 <Save_Dat+0x100>)
 800f966:	71da      	strb	r2, [r3, #7]

  memcpy(&F_Buff[10], WaveBuf, 300);
 800f968:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f96c:	4917      	ldr	r1, [pc, #92]	; (800f9cc <Save_Dat+0x10c>)
 800f96e:	4818      	ldr	r0, [pc, #96]	; (800f9d0 <Save_Dat+0x110>)
 800f970:	f016 fd4a 	bl	8026408 <memcpy>
  if(f_write( &USERFile, F_Buff, 310, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f974:	f107 030c 	add.w	r3, r7, #12
 800f978:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f97c:	4910      	ldr	r1, [pc, #64]	; (800f9c0 <Save_Dat+0x100>)
 800f97e:	4811      	ldr	r0, [pc, #68]	; (800f9c4 <Save_Dat+0x104>)
 800f980:	f015 f8e3 	bl	8024b4a <f_write>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <Save_Dat+0xce>
 800f98a:	2303      	movs	r3, #3
 800f98c:	e012      	b.n	800f9b4 <Save_Dat+0xf4>
  f_close(&USERFile);
 800f98e:	480d      	ldr	r0, [pc, #52]	; (800f9c4 <Save_Dat+0x104>)
 800f990:	f015 faa8 	bl	8024ee4 <f_close>
  if(List[SAVE_DAT].Val<99)List[SAVE_DAT].Val++;
 800f994:	4b0c      	ldr	r3, [pc, #48]	; (800f9c8 <Save_Dat+0x108>)
 800f996:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f99a:	2b62      	cmp	r3, #98	; 0x62
 800f99c:	dc09      	bgt.n	800f9b2 <Save_Dat+0xf2>
 800f99e:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <Save_Dat+0x108>)
 800f9a0:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	b21a      	sxth	r2, r3
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <Save_Dat+0x108>)
 800f9ae:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  return OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3720      	adds	r7, #32
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	08000258 	.word	0x08000258
 800f9c0:	200012e0 	.word	0x200012e0
 800f9c4:	20007aa8 	.word	0x20007aa8
 800f9c8:	20000274 	.word	0x20000274
 800f9cc:	2000091c 	.word	0x2000091c
 800f9d0:	200012ea 	.word	0x200012ea

0800f9d4 <Load_Dat>:

/*******************************************************************************
Load_Dat: ���ر��������Ļͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Dat(short FileNo)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b088      	sub	sp, #32
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	4603      	mov	r3, r0
 800f9dc:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f9de:	4a52      	ldr	r2, [pc, #328]	; (800fb28 <Load_Dat+0x154>)
 800f9e0:	f107 030c 	add.w	r3, r7, #12
 800f9e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	763b      	strb	r3, [r7, #24]
  short  Rvalue;
  int i;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f9ee:	f107 020c 	add.w	r2, r7, #12
 800f9f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff fcf7 	bl	800f3ec <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800f9fe:	f107 030c 	add.w	r3, r7, #12
 800fa02:	2201      	movs	r2, #1
 800fa04:	4619      	mov	r1, r3
 800fa06:	4849      	ldr	r0, [pc, #292]	; (800fb2c <Load_Dat+0x158>)
 800fa08:	f014 fdca 	bl	80245a0 <f_open>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	837b      	strh	r3, [r7, #26]
  if(Rvalue !=FR_OK)
 800fa10:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <Load_Dat+0x4a>
	  return Rvalue;
 800fa18:	8b7b      	ldrh	r3, [r7, #26]
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	e07f      	b.n	800fb1e <Load_Dat+0x14a>

  if(f_read(&USERFile, F_Buff, 310, &j)!= FR_OK)
 800fa1e:	f107 0308 	add.w	r3, r7, #8
 800fa22:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa26:	4942      	ldr	r1, [pc, #264]	; (800fb30 <Load_Dat+0x15c>)
 800fa28:	4840      	ldr	r0, [pc, #256]	; (800fb2c <Load_Dat+0x158>)
 800fa2a:	f014 ff75 	bl	8024918 <f_read>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <Load_Dat+0x64>
   	return FILE_RW_ERR;
 800fa34:	2303      	movs	r3, #3
 800fa36:	e072      	b.n	800fb1e <Load_Dat+0x14a>
   if(j != 310)
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800fa3e:	d001      	beq.n	800fa44 <Load_Dat+0x70>
   	return FILE_RW_ERR;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e06c      	b.n	800fb1e <Load_Dat+0x14a>

  memcpy(Data, F_Buff, 310);
 800fa44:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa48:	4939      	ldr	r1, [pc, #228]	; (800fb30 <Load_Dat+0x15c>)
 800fa4a:	483a      	ldr	r0, [pc, #232]	; (800fb34 <Load_Dat+0x160>)
 800fa4c:	f016 fcdc 	bl	8026408 <memcpy>

  List[TIM_BASE].Val = F_Buff[3];
 800fa50:	4b37      	ldr	r3, [pc, #220]	; (800fb30 <Load_Dat+0x15c>)
 800fa52:	78db      	ldrb	r3, [r3, #3]
 800fa54:	b21a      	sxth	r2, r3
 800fa56:	4b38      	ldr	r3, [pc, #224]	; (800fb38 <Load_Dat+0x164>)
 800fa58:	879a      	strh	r2, [r3, #60]	; 0x3c
  List[Y_RANGES].Val = F_Buff[4];
 800fa5a:	4b35      	ldr	r3, [pc, #212]	; (800fb30 <Load_Dat+0x15c>)
 800fa5c:	791b      	ldrb	r3, [r3, #4]
 800fa5e:	b21a      	sxth	r2, r3
 800fa60:	4b35      	ldr	r3, [pc, #212]	; (800fb38 <Load_Dat+0x164>)
 800fa62:	809a      	strh	r2, [r3, #4]
  List[COUPLING].Val = F_Buff[5];
 800fa64:	4b32      	ldr	r3, [pc, #200]	; (800fb30 <Load_Dat+0x15c>)
 800fa66:	795b      	ldrb	r3, [r3, #5]
 800fa68:	b21a      	sxth	r2, r3
 800fa6a:	4b33      	ldr	r3, [pc, #204]	; (800fb38 <Load_Dat+0x164>)
 800fa6c:	819a      	strh	r2, [r3, #12]
  List[PROBEATT].Val = F_Buff[6];
 800fa6e:	4b30      	ldr	r3, [pc, #192]	; (800fb30 <Load_Dat+0x15c>)
 800fa70:	799b      	ldrb	r3, [r3, #6]
 800fa72:	b21a      	sxth	r2, r3
 800fa74:	4b30      	ldr	r3, [pc, #192]	; (800fb38 <Load_Dat+0x164>)
 800fa76:	829a      	strh	r2, [r3, #20]
  List[TR_MODE].Val  = F_Buff[7];
 800fa78:	4b2d      	ldr	r3, [pc, #180]	; (800fb30 <Load_Dat+0x15c>)
 800fa7a:	79db      	ldrb	r3, [r3, #7]
 800fa7c:	b21a      	sxth	r2, r3
 800fa7e:	4b2e      	ldr	r3, [pc, #184]	; (800fb38 <Load_Dat+0x164>)
 800fa80:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

  for(i=0;i<4;i++)List[i].Flg |= UPD;
 800fa84:	2300      	movs	r3, #0
 800fa86:	61fb      	str	r3, [r7, #28]
 800fa88:	e010      	b.n	800faac <Load_Dat+0xd8>
 800fa8a:	4a2b      	ldr	r2, [pc, #172]	; (800fb38 <Load_Dat+0x164>)
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	00db      	lsls	r3, r3, #3
 800fa90:	4413      	add	r3, r2
 800fa92:	799b      	ldrb	r3, [r3, #6]
 800fa94:	f043 0320 	orr.w	r3, r3, #32
 800fa98:	b2d9      	uxtb	r1, r3
 800fa9a:	4a27      	ldr	r2, [pc, #156]	; (800fb38 <Load_Dat+0x164>)
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	00db      	lsls	r3, r3, #3
 800faa0:	4413      	add	r3, r2
 800faa2:	460a      	mov	r2, r1
 800faa4:	719a      	strb	r2, [r3, #6]
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	3301      	adds	r3, #1
 800faaa:	61fb      	str	r3, [r7, #28]
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	2b03      	cmp	r3, #3
 800fab0:	ddeb      	ble.n	800fa8a <Load_Dat+0xb6>
  List[EXT_REFN].Flg |= UPD;
 800fab2:	4b21      	ldr	r3, [pc, #132]	; (800fb38 <Load_Dat+0x164>)
 800fab4:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 800fab8:	f043 0320 	orr.w	r3, r3, #32
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	4b1e      	ldr	r3, [pc, #120]	; (800fb38 <Load_Dat+0x164>)
 800fac0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  List[EXT_POSI].Flg |= UPD;
 800fac4:	4b1c      	ldr	r3, [pc, #112]	; (800fb38 <Load_Dat+0x164>)
 800fac6:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800faca:	f043 0320 	orr.w	r3, r3, #32
 800face:	b2da      	uxtb	r2, r3
 800fad0:	4b19      	ldr	r3, [pc, #100]	; (800fb38 <Load_Dat+0x164>)
 800fad2:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  List[TIM_BASE].Flg |= UPD;
 800fad6:	4b18      	ldr	r3, [pc, #96]	; (800fb38 <Load_Dat+0x164>)
 800fad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fadc:	f043 0320 	orr.w	r3, r3, #32
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	4b15      	ldr	r3, [pc, #84]	; (800fb38 <Load_Dat+0x164>)
 800fae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  List[TR_MODE].Flg |= UPD;
 800fae8:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <Load_Dat+0x164>)
 800faea:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800faee:	f043 0320 	orr.w	r3, r3, #32
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	4b10      	ldr	r3, [pc, #64]	; (800fb38 <Load_Dat+0x164>)
 800faf6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  Update_Detail();
 800fafa:	f002 ff9f 	bl	8012a3c <Update_Detail>
  if(List[LOAD_DAT].Val<99)List[LOAD_DAT].Val++;
 800fafe:	4b0e      	ldr	r3, [pc, #56]	; (800fb38 <Load_Dat+0x164>)
 800fb00:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800fb04:	2b62      	cmp	r3, #98	; 0x62
 800fb06:	dc09      	bgt.n	800fb1c <Load_Dat+0x148>
 800fb08:	4b0b      	ldr	r3, [pc, #44]	; (800fb38 <Load_Dat+0x164>)
 800fb0a:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	3301      	adds	r3, #1
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	b21a      	sxth	r2, r3
 800fb16:	4b08      	ldr	r3, [pc, #32]	; (800fb38 <Load_Dat+0x164>)
 800fb18:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  return OK;
 800fb1c:	2300      	movs	r3, #0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3720      	adds	r7, #32
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	08000258 	.word	0x08000258
 800fb2c:	20007aa8 	.word	0x20007aa8
 800fb30:	200012e0 	.word	0x200012e0
 800fb34:	20000008 	.word	0x20000008
 800fb38:	20000274 	.word	0x20000274

0800fb3c <Save_Bmp>:

/*******************************************************************************
Save_Bmp: ���浱ǰ��Ļ��ʾͼ��ΪBMP��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Bmp(short FileNo)
{
 800fb3c:	b5b0      	push	{r4, r5, r7, lr}
 800fb3e:	b08c      	sub	sp, #48	; 0x30
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	80fb      	strh	r3, [r7, #6]
  char  pFileName[13]="IMG_   .BMP";
 800fb46:	4aa2      	ldr	r2, [pc, #648]	; (800fdd0 <Save_Bmp+0x294>)
 800fb48:	f107 0310 	add.w	r3, r7, #16
 800fb4c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb52:	2300      	movs	r3, #0
 800fb54:	773b      	strb	r3, [r7, #28]
  short x, y, i=54, j,ColorH,ColorL ;
 800fb56:	2336      	movs	r3, #54	; 0x36
 800fb58:	857b      	strh	r3, [r7, #42]	; 0x2a
  short k=0, l=0;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb5e:	2300      	movs	r3, #0
 800fb60:	84bb      	strh	r3, [r7, #36]	; 0x24
  unsigned m;

  if(Current == FN)
 800fb62:	4b9c      	ldr	r3, [pc, #624]	; (800fdd4 <Save_Bmp+0x298>)
 800fb64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb68:	2b05      	cmp	r3, #5
 800fb6a:	d105      	bne.n	800fb78 <Save_Bmp+0x3c>
  {
    Close_Pop();
 800fb6c:	f7fe ffb6 	bl	800eadc <Close_Pop>
    DrawWindow(WaveBuf, ParamTab);
 800fb70:	4999      	ldr	r1, [pc, #612]	; (800fdd8 <Save_Bmp+0x29c>)
 800fb72:	489a      	ldr	r0, [pc, #616]	; (800fddc <Save_Bmp+0x2a0>)
 800fb74:	f7fd ffb0 	bl	800dad8 <DrawWindow>
  }
  Make_Filename(FileNo, pFileName);
 800fb78:	f107 0210 	add.w	r2, r7, #16
 800fb7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff fc32 	bl	800f3ec <Make_Filename>

  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fb88:	f107 0310 	add.w	r3, r7, #16
 800fb8c:	2213      	movs	r2, #19
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4893      	ldr	r0, [pc, #588]	; (800fde0 <Save_Bmp+0x2a4>)
 800fb92:	f014 fd05 	bl	80245a0 <f_open>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <Save_Bmp+0x64>
	  return DISK_RW_ERR;
 800fb9c:	2304      	movs	r3, #4
 800fb9e:	e112      	b.n	800fdc6 <Save_Bmp+0x28a>
  memcpy(F_Buff, BmpHead, 54);
 800fba0:	4a90      	ldr	r2, [pc, #576]	; (800fde4 <Save_Bmp+0x2a8>)
 800fba2:	4b91      	ldr	r3, [pc, #580]	; (800fde8 <Save_Bmp+0x2ac>)
 800fba4:	4614      	mov	r4, r2
 800fba6:	461d      	mov	r5, r3
 800fba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbb8:	6020      	str	r0, [r4, #0]
 800fbba:	3404      	adds	r4, #4
 800fbbc:	8021      	strh	r1, [r4, #0]
  i = 0x0036;                                     // ��ɫ���ſ�ʼ��ַ
 800fbbe:	2336      	movs	r3, #54	; 0x36
 800fbc0:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(j=0; j<16; ++j)
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	853b      	strh	r3, [r7, #40]	; 0x28
 800fbc6:	e042      	b.n	800fc4e <Save_Bmp+0x112>
  {
    F_Buff[j*4 +i+0]=(BMP_Color[j] & 0xF800)>>8;  // Bule
 800fbc8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbcc:	4a87      	ldr	r2, [pc, #540]	; (800fdec <Save_Bmp+0x2b0>)
 800fbce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbd2:	121b      	asrs	r3, r3, #8
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbda:	0099      	lsls	r1, r3, #2
 800fbdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fbe0:	440b      	add	r3, r1
 800fbe2:	f022 0207 	bic.w	r2, r2, #7
 800fbe6:	b2d1      	uxtb	r1, r2
 800fbe8:	4a7e      	ldr	r2, [pc, #504]	; (800fde4 <Save_Bmp+0x2a8>)
 800fbea:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+1]=(BMP_Color[j] & 0x07E0)>>3;  // Green&
 800fbec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbf0:	4a7e      	ldr	r2, [pc, #504]	; (800fdec <Save_Bmp+0x2b0>)
 800fbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbf6:	10db      	asrs	r3, r3, #3
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbfe:	0099      	lsls	r1, r3, #2
 800fc00:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc04:	440b      	add	r3, r1
 800fc06:	3301      	adds	r3, #1
 800fc08:	f022 0203 	bic.w	r2, r2, #3
 800fc0c:	b2d1      	uxtb	r1, r2
 800fc0e:	4a75      	ldr	r2, [pc, #468]	; (800fde4 <Save_Bmp+0x2a8>)
 800fc10:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+2]=(BMP_Color[j] & 0x001F)<<3;  // Red
 800fc12:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc16:	4a75      	ldr	r2, [pc, #468]	; (800fdec <Save_Bmp+0x2b0>)
 800fc18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc1c:	00d9      	lsls	r1, r3, #3
 800fc1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc22:	009a      	lsls	r2, r3, #2
 800fc24:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc28:	4413      	add	r3, r2
 800fc2a:	3302      	adds	r3, #2
 800fc2c:	b2c9      	uxtb	r1, r1
 800fc2e:	4a6d      	ldr	r2, [pc, #436]	; (800fde4 <Save_Bmp+0x2a8>)
 800fc30:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+3]= 0;                          // Alpha
 800fc32:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc36:	009a      	lsls	r2, r3, #2
 800fc38:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc3c:	4413      	add	r3, r2
 800fc3e:	3303      	adds	r3, #3
 800fc40:	4a68      	ldr	r2, [pc, #416]	; (800fde4 <Save_Bmp+0x2a8>)
 800fc42:	2100      	movs	r1, #0
 800fc44:	54d1      	strb	r1, [r2, r3]
  for(j=0; j<16; ++j)
 800fc46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc48:	3301      	adds	r3, #1
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	853b      	strh	r3, [r7, #40]	; 0x28
 800fc4e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc52:	2b0f      	cmp	r3, #15
 800fc54:	ddb8      	ble.n	800fbc8 <Save_Bmp+0x8c>
  }
  i = 0x0076;                                     // ͼ�����ݿ�ʼ��ŵ�ַ
 800fc56:	2376      	movs	r3, #118	; 0x76
 800fc58:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(y=0; y<240; y++)
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fc5e:	e07b      	b.n	800fd58 <Save_Bmp+0x21c>
  {
    for(x=0; x<320 ; x+=2)
 800fc60:	2300      	movs	r3, #0
 800fc62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc64:	e06d      	b.n	800fd42 <Save_Bmp+0x206>
    {
      LCD_Set_Posi(x, y);
 800fc66:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc6a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fc6e:	4611      	mov	r1, r2
 800fc70:	4618      	mov	r0, r3
 800fc72:	f001 fe63 	bl	801193c <LCD_Set_Posi>
      ColorH = LCD_Get_Pixel();
 800fc76:	f001 fed7 	bl	8011a28 <LCD_Get_Pixel>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	847b      	strh	r3, [r7, #34]	; 0x22
      LCD_Set_Posi(x+1, y);
 800fc7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc80:	3301      	adds	r3, #1
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	b21b      	sxth	r3, r3
 800fc86:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f001 fe55 	bl	801193c <LCD_Set_Posi>
      ColorL = LCD_Get_Pixel();
 800fc92:	f001 fec9 	bl	8011a28 <LCD_Get_Pixel>
 800fc96:	4603      	mov	r3, r0
 800fc98:	843b      	strh	r3, [r7, #32]
      F_Buff[i] =(Color_Num(ColorH)<<4)+ Color_Num(ColorL);
 800fc9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff f96c 	bl	800ef7c <Color_Num>
 800fca4:	4603      	mov	r3, r0
 800fca6:	011b      	lsls	r3, r3, #4
 800fca8:	b2dc      	uxtb	r4, r3
 800fcaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff f964 	bl	800ef7c <Color_Num>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcbc:	4422      	add	r2, r4
 800fcbe:	b2d1      	uxtb	r1, r2
 800fcc0:	4a48      	ldr	r2, [pc, #288]	; (800fde4 <Save_Bmp+0x2a8>)
 800fcc2:	54d1      	strb	r1, [r2, r3]
      i++;
 800fcc4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	3301      	adds	r3, #1
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	857b      	strh	r3, [r7, #42]	; 0x2a
      if(i>=4096)
 800fcd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcd8:	db2f      	blt.n	800fd3a <Save_Bmp+0x1fe>
      {
        i=0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	857b      	strh	r3, [r7, #42]	; 0x2a
        if(f_write( &USERFile, F_Buff, 4096, &m)!= FR_OK) return FILE_RW_ERR; // д������
 800fcde:	f107 030c 	add.w	r3, r7, #12
 800fce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fce6:	493f      	ldr	r1, [pc, #252]	; (800fde4 <Save_Bmp+0x2a8>)
 800fce8:	483d      	ldr	r0, [pc, #244]	; (800fde0 <Save_Bmp+0x2a4>)
 800fcea:	f014 ff2e 	bl	8024b4a <f_write>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <Save_Bmp+0x1bc>
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e066      	b.n	800fdc6 <Save_Bmp+0x28a>
        if(l==0)
 800fcf8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d110      	bne.n	800fd22 <Save_Bmp+0x1e6>
        	PrintClk(168,2,(k++ >>1)& 3);         // ����ָʾ
 800fd00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	3201      	adds	r2, #1
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	84fa      	strh	r2, [r7, #38]	; 0x26
 800fd0c:	105b      	asrs	r3, r3, #1
 800fd0e:	b21b      	sxth	r3, r3
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	f003 0303 	and.w	r3, r3, #3
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	461a      	mov	r2, r3
 800fd1a:	2102      	movs	r1, #2
 800fd1c:	20a8      	movs	r0, #168	; 0xa8
 800fd1e:	f7ff f9ad 	bl	800f07c <PrintClk>
        l++;
 800fd22:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	3301      	adds	r3, #1
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(l>=2)l=0;
 800fd2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	dd01      	ble.n	800fd3a <Save_Bmp+0x1fe>
 800fd36:	2300      	movs	r3, #0
 800fd38:	84bb      	strh	r3, [r7, #36]	; 0x24
    for(x=0; x<320 ; x+=2)
 800fd3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd3c:	3302      	adds	r3, #2
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fd42:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fd46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800fd4a:	db8c      	blt.n	800fc66 <Save_Bmp+0x12a>
  for(y=0; y<240; y++)
 800fd4c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	3301      	adds	r3, #1
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fd58:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd5c:	2bef      	cmp	r3, #239	; 0xef
 800fd5e:	f77f af7f 	ble.w	800fc60 <Save_Bmp+0x124>
      }
    }
  }
  if(i!=0)
 800fd62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00e      	beq.n	800fd88 <Save_Bmp+0x24c>
  {
      if(f_write( &USERFile, F_Buff, i, &m)!= FR_OK)
 800fd6a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800fd6e:	f107 030c 	add.w	r3, r7, #12
 800fd72:	491c      	ldr	r1, [pc, #112]	; (800fde4 <Save_Bmp+0x2a8>)
 800fd74:	481a      	ldr	r0, [pc, #104]	; (800fde0 <Save_Bmp+0x2a4>)
 800fd76:	f014 fee8 	bl	8024b4a <f_write>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d003      	beq.n	800fd88 <Save_Bmp+0x24c>
      {
    	  List_Pop();
 800fd80:	f7fe fec2 	bl	800eb08 <List_Pop>
    	  return FILE_RW_ERR;
 800fd84:	2303      	movs	r3, #3
 800fd86:	e01e      	b.n	800fdc6 <Save_Bmp+0x28a>
      } // д������
  }
  if(f_close(&USERFile)!= FR_OK )
 800fd88:	4815      	ldr	r0, [pc, #84]	; (800fde0 <Save_Bmp+0x2a4>)
 800fd8a:	f015 f8ab 	bl	8024ee4 <f_close>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d001      	beq.n	800fd98 <Save_Bmp+0x25c>
	  return FILE_RW_ERR;
 800fd94:	2303      	movs	r3, #3
 800fd96:	e016      	b.n	800fdc6 <Save_Bmp+0x28a>
  if(Current == FN)
 800fd98:	4b0e      	ldr	r3, [pc, #56]	; (800fdd4 <Save_Bmp+0x298>)
 800fd9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd9e:	2b05      	cmp	r3, #5
 800fda0:	d101      	bne.n	800fda6 <Save_Bmp+0x26a>
	  List_Pop();
 800fda2:	f7fe feb1 	bl	800eb08 <List_Pop>
  if(List[SAVE_BMP].Val<99)
 800fda6:	4b12      	ldr	r3, [pc, #72]	; (800fdf0 <Save_Bmp+0x2b4>)
 800fda8:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdac:	2b62      	cmp	r3, #98	; 0x62
 800fdae:	dc09      	bgt.n	800fdc4 <Save_Bmp+0x288>
	  List[SAVE_BMP].Val++;
 800fdb0:	4b0f      	ldr	r3, [pc, #60]	; (800fdf0 <Save_Bmp+0x2b4>)
 800fdb2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	3301      	adds	r3, #1
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	b21a      	sxth	r2, r3
 800fdbe:	4b0c      	ldr	r3, [pc, #48]	; (800fdf0 <Save_Bmp+0x2b4>)
 800fdc0:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

  return OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3730      	adds	r7, #48	; 0x30
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bdb0      	pop	{r4, r5, r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08000268 	.word	0x08000268
 800fdd4:	20002654 	.word	0x20002654
 800fdd8:	20000140 	.word	0x20000140
 800fddc:	2000091c 	.word	0x2000091c
 800fde0:	20007aa8 	.word	0x20007aa8
 800fde4:	200012e0 	.word	0x200012e0
 800fde8:	08001c20 	.word	0x08001c20
 800fdec:	08001c00 	.word	0x08001c00
 800fdf0:	20000274 	.word	0x20000274

0800fdf4 <Save_Csv>:

/*******************************************************************************
Save_Csv: ����ɼ����ݻ�����ΪCSV��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Csv(short FileNo)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b08e      	sub	sp, #56	; 0x38
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	80fb      	strh	r3, [r7, #6]

  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 800fdfe:	4bae      	ldr	r3, [pc, #696]	; (80100b8 <Save_Csv+0x2c4>)
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	4bae      	ldr	r3, [pc, #696]	; (80100bc <Save_Csv+0x2c8>)
 800fe04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4bad      	ldr	r3, [pc, #692]	; (80100c0 <Save_Csv+0x2cc>)
 800fe0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	bf14      	ite	ne
 800fe14:	2301      	movne	r3, #1
 800fe16:	2300      	moveq	r3, #0
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	440b      	add	r3, r1
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	4413      	add	r3, r2
 800fe20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	4aa7      	ldr	r2, [pc, #668]	; (80100c4 <Save_Csv+0x2d0>)
 800fe28:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	4aa6      	ldr	r2, [pc, #664]	; (80100c8 <Save_Csv+0x2d4>)
 800fe30:	5c52      	ldrb	r2, [r2, r1]
 800fe32:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe36:	62bb      	str	r3, [r7, #40]	; 0x28

  char pFileName[13]="DATA   .CSV";
 800fe38:	4aa4      	ldr	r2, [pc, #656]	; (80100cc <Save_Csv+0x2d8>)
 800fe3a:	f107 0314 	add.w	r3, r7, #20
 800fe3e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 3020 	strb.w	r3, [r7, #32]
  short i,k=0,l=0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800fe4e:	2300      	movs	r3, #0
 800fe50:	867b      	strh	r3, [r7, #50]	; 0x32
  short temp;
  short count;
  char* ptr;
  char* buf;

  Make_Filename(FileNo, pFileName);
 800fe52:	f107 0214 	add.w	r2, r7, #20
 800fe56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe5a:	4611      	mov	r1, r2
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7ff fac5 	bl	800f3ec <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fe62:	f107 0314 	add.w	r3, r7, #20
 800fe66:	2213      	movs	r2, #19
 800fe68:	4619      	mov	r1, r3
 800fe6a:	4899      	ldr	r0, [pc, #612]	; (80100d0 <Save_Csv+0x2dc>)
 800fe6c:	f014 fb98 	bl	80245a0 <f_open>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d001      	beq.n	800fe7a <Save_Csv+0x86>
	  return DISK_RW_ERR;
 800fe76:	2304      	movs	r3, #4
 800fe78:	e1d1      	b.n	801021e <Save_Csv+0x42a>
  memcpy(&F_Buff[0],TimeBase_Str[List[TIM_BASE].Val],5);
 800fe7a:	4b96      	ldr	r3, [pc, #600]	; (80100d4 <Save_Csv+0x2e0>)
 800fe7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe80:	00db      	lsls	r3, r3, #3
 800fe82:	4a95      	ldr	r2, [pc, #596]	; (80100d8 <Save_Csv+0x2e4>)
 800fe84:	4413      	add	r3, r2
 800fe86:	2205      	movs	r2, #5
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4894      	ldr	r0, [pc, #592]	; (80100dc <Save_Csv+0x2e8>)
 800fe8c:	f016 fabc 	bl	8026408 <memcpy>
  memcpy(&F_Buff[5],"   ",3);
 800fe90:	2203      	movs	r2, #3
 800fe92:	4993      	ldr	r1, [pc, #588]	; (80100e0 <Save_Csv+0x2ec>)
 800fe94:	4893      	ldr	r0, [pc, #588]	; (80100e4 <Save_Csv+0x2f0>)
 800fe96:	f016 fab7 	bl	8026408 <memcpy>
  buf=&F_Buff[8];
 800fe9a:	4b93      	ldr	r3, [pc, #588]	; (80100e8 <Save_Csv+0x2f4>)
 800fe9c:	627b      	str	r3, [r7, #36]	; 0x24
  //------------------------------------------------------------------
    i=0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	86fb      	strh	r3, [r7, #54]	; 0x36
    ptr=(char*)&R[List[Y_RANGES].Val];
 800fea2:	4b8c      	ldr	r3, [pc, #560]	; (80100d4 <Save_Csv+0x2e0>)
 800fea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fea8:	461a      	mov	r2, r3
 800feaa:	4613      	mov	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4413      	add	r3, r2
 800feb0:	005b      	lsls	r3, r3, #1
 800feb2:	4a8e      	ldr	r2, [pc, #568]	; (80100ec <Save_Csv+0x2f8>)
 800feb4:	4413      	add	r3, r2
 800feb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800feb8:	e00c      	b.n	800fed4 <Save_Csv+0xe0>
    	buf[i++] = *ptr++;
 800feba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fec0:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800fec4:	b28a      	uxth	r2, r1
 800fec6:	3201      	adds	r2, #1
 800fec8:	b292      	uxth	r2, r2
 800feca:	86fa      	strh	r2, [r7, #54]	; 0x36
 800fecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fece:	440a      	add	r2, r1
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1ee      	bne.n	800feba <Save_Csv+0xc6>
    buf[i++]   = 0x2a;
 800fedc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800fee0:	b293      	uxth	r3, r2
 800fee2:	3301      	adds	r3, #1
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	4413      	add	r3, r2
 800feec:	222a      	movs	r2, #42	; 0x2a
 800feee:	701a      	strb	r2, [r3, #0]
    ptr=(char*)&N[List[PROBEATT].Val];
 800fef0:	4b78      	ldr	r3, [pc, #480]	; (80100d4 <Save_Csv+0x2e0>)
 800fef2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800fef6:	461a      	mov	r2, r3
 800fef8:	4613      	mov	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	4413      	add	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4a7b      	ldr	r2, [pc, #492]	; (80100f0 <Save_Csv+0x2fc>)
 800ff02:	4413      	add	r3, r2
 800ff04:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800ff06:	e00c      	b.n	800ff22 <Save_Csv+0x12e>
    	buf[i++] = *ptr++;
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	1c5a      	adds	r2, r3, #1
 800ff0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff0e:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800ff12:	b28a      	uxth	r2, r1
 800ff14:	3201      	adds	r2, #1
 800ff16:	b292      	uxth	r2, r2
 800ff18:	86fa      	strh	r2, [r7, #54]	; 0x36
 800ff1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff1c:	440a      	add	r2, r1
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d1ee      	bne.n	800ff08 <Save_Csv+0x114>
    buf[i]   = 0x2c;
 800ff2a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff30:	4413      	add	r3, r2
 800ff32:	222c      	movs	r2, #44	; 0x2c
 800ff34:	701a      	strb	r2, [r3, #0]
    buf[i+1] = 0;
 800ff36:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff3e:	4413      	add	r3, r2
 800ff40:	2200      	movs	r2, #0
 800ff42:	701a      	strb	r2, [r3, #0]
    count = i+1;
 800ff44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff46:	3301      	adds	r3, #1
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	863b      	strh	r3, [r7, #48]	; 0x30

  k=8+count;
 800ff4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff4e:	3308      	adds	r3, #8
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	86bb      	strh	r3, [r7, #52]	; 0x34
  memcpy(&F_Buff[k],"\r\n",2);
 800ff54:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ff58:	4a60      	ldr	r2, [pc, #384]	; (80100dc <Save_Csv+0x2e8>)
 800ff5a:	4413      	add	r3, r2
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	4965      	ldr	r1, [pc, #404]	; (80100f4 <Save_Csv+0x300>)
 800ff60:	4618      	mov	r0, r3
 800ff62:	f016 fa51 	bl	8026408 <memcpy>
  k+=2;
 800ff66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ff68:	3302      	adds	r3, #2
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	86bb      	strh	r3, [r7, #52]	; 0x34
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 800ff6e:	2300      	movs	r3, #0
 800ff70:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ff72:	e0ef      	b.n	8010154 <Save_Csv+0x360>
  {
    temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 800ff74:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff78:	3302      	adds	r3, #2
 800ff7a:	4a5f      	ldr	r2, [pc, #380]	; (80100f8 <Save_Csv+0x304>)
 800ff7c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff80:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ff84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff86:	fb02 f303 	mul.w	r3, r2, r3
 800ff8a:	131b      	asrs	r3, r3, #12
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	3364      	adds	r3, #100	; 0x64
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	847b      	strh	r3, [r7, #34]	; 0x22

    if(temp > 0)
 800ff94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dd0a      	ble.n	800ffb2 <Save_Csv+0x1be>
    {
      if(temp > 200)  track[0] = 199;
 800ff9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffa0:	2bc8      	cmp	r3, #200	; 0xc8
 800ffa2:	dd02      	ble.n	800ffaa <Save_Csv+0x1b6>
 800ffa4:	23c7      	movs	r3, #199	; 0xc7
 800ffa6:	723b      	strb	r3, [r7, #8]
 800ffa8:	e005      	b.n	800ffb6 <Save_Csv+0x1c2>
      else            track[0] = temp;
 800ffaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	723b      	strb	r3, [r7, #8]
 800ffb0:	e001      	b.n	800ffb6 <Save_Csv+0x1c2>
    } else            track[0] = 0;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	723b      	strb	r3, [r7, #8]
    u8ToDec3(Num,track[0]);
 800ffb6:	7a3a      	ldrb	r2, [r7, #8]
 800ffb8:	f107 030c 	add.w	r3, r7, #12
 800ffbc:	4611      	mov	r1, r2
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f001 f894 	bl	80110ec <u8ToDec3>
    for(count=0; count<3; count++)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	863b      	strh	r3, [r7, #48]	; 0x30
 800ffc8:	e042      	b.n	8010050 <Save_Csv+0x25c>
    {
      if(Num[count] == 0) break;
 800ffca:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffce:	3338      	adds	r3, #56	; 0x38
 800ffd0:	443b      	add	r3, r7
 800ffd2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d03f      	beq.n	801005a <Save_Csv+0x266>
      F_Buff[k++] = Num[count];
 800ffda:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffde:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 800ffe2:	b28a      	uxth	r2, r1
 800ffe4:	3201      	adds	r2, #1
 800ffe6:	b292      	uxth	r2, r2
 800ffe8:	86ba      	strh	r2, [r7, #52]	; 0x34
 800ffea:	460a      	mov	r2, r1
 800ffec:	3338      	adds	r3, #56	; 0x38
 800ffee:	443b      	add	r3, r7
 800fff0:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 800fff4:	4b39      	ldr	r3, [pc, #228]	; (80100dc <Save_Csv+0x2e8>)
 800fff6:	5499      	strb	r1, [r3, r2]
      if(k >= 4096)
 800fff8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800fffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010000:	db20      	blt.n	8010044 <Save_Csv+0x250>
      {
        if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 8010002:	f107 0310 	add.w	r3, r7, #16
 8010006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801000a:	4934      	ldr	r1, [pc, #208]	; (80100dc <Save_Csv+0x2e8>)
 801000c:	4830      	ldr	r0, [pc, #192]	; (80100d0 <Save_Csv+0x2dc>)
 801000e:	f014 fd9c 	bl	8024b4a <f_write>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <Save_Csv+0x228>
 8010018:	2303      	movs	r3, #3
 801001a:	e100      	b.n	801021e <Save_Csv+0x42a>
        PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 801001c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010020:	b29a      	uxth	r2, r3
 8010022:	3201      	adds	r2, #1
 8010024:	b292      	uxth	r2, r2
 8010026:	867a      	strh	r2, [r7, #50]	; 0x32
 8010028:	105b      	asrs	r3, r3, #1
 801002a:	b21b      	sxth	r3, r3
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0303 	and.w	r3, r3, #3
 8010032:	b2db      	uxtb	r3, r3
 8010034:	461a      	mov	r2, r3
 8010036:	2102      	movs	r1, #2
 8010038:	f44f 7084 	mov.w	r0, #264	; 0x108
 801003c:	f7ff f81e 	bl	800f07c <PrintClk>
        k = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	86bb      	strh	r3, [r7, #52]	; 0x34
    for(count=0; count<3; count++)
 8010044:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010048:	b29b      	uxth	r3, r3
 801004a:	3301      	adds	r3, #1
 801004c:	b29b      	uxth	r3, r3
 801004e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010050:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010054:	2b02      	cmp	r3, #2
 8010056:	ddb8      	ble.n	800ffca <Save_Csv+0x1d6>
 8010058:	e000      	b.n	801005c <Save_Csv+0x268>
      if(Num[count] == 0) break;
 801005a:	bf00      	nop
      }
    }
    F_Buff[k++] = 0x2c;
 801005c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010060:	b293      	uxth	r3, r2
 8010062:	3301      	adds	r3, #1
 8010064:	b29b      	uxth	r3, r3
 8010066:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010068:	4b1c      	ldr	r3, [pc, #112]	; (80100dc <Save_Csv+0x2e8>)
 801006a:	212c      	movs	r1, #44	; 0x2c
 801006c:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0d;
 801006e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010072:	b293      	uxth	r3, r2
 8010074:	3301      	adds	r3, #1
 8010076:	b29b      	uxth	r3, r3
 8010078:	86bb      	strh	r3, [r7, #52]	; 0x34
 801007a:	4b18      	ldr	r3, [pc, #96]	; (80100dc <Save_Csv+0x2e8>)
 801007c:	210d      	movs	r1, #13
 801007e:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0a;
 8010080:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010084:	b293      	uxth	r3, r2
 8010086:	3301      	adds	r3, #1
 8010088:	b29b      	uxth	r3, r3
 801008a:	86bb      	strh	r3, [r7, #52]	; 0x34
 801008c:	4b13      	ldr	r3, [pc, #76]	; (80100dc <Save_Csv+0x2e8>)
 801008e:	210a      	movs	r1, #10
 8010090:	5499      	strb	r1, [r3, r2]
    if(k >= 4096)
 8010092:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801009a:	db55      	blt.n	8010148 <Save_Csv+0x354>
    {
      if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 801009c:	f107 0310 	add.w	r3, r7, #16
 80100a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100a4:	490d      	ldr	r1, [pc, #52]	; (80100dc <Save_Csv+0x2e8>)
 80100a6:	480a      	ldr	r0, [pc, #40]	; (80100d0 <Save_Csv+0x2dc>)
 80100a8:	f014 fd4f 	bl	8024b4a <f_write>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d024      	beq.n	80100fc <Save_Csv+0x308>
 80100b2:	2303      	movs	r3, #3
 80100b4:	e0b3      	b.n	801021e <Save_Csv+0x42a>
 80100b6:	bf00      	nop
 80100b8:	20000558 	.word	0x20000558
 80100bc:	20002692 	.word	0x20002692
 80100c0:	2000268c 	.word	0x2000268c
 80100c4:	20002690 	.word	0x20002690
 80100c8:	2000053c 	.word	0x2000053c
 80100cc:	08000280 	.word	0x08000280
 80100d0:	20007aa8 	.word	0x20007aa8
 80100d4:	20000274 	.word	0x20000274
 80100d8:	200001ac 	.word	0x200001ac
 80100dc:	200012e0 	.word	0x200012e0
 80100e0:	08000278 	.word	0x08000278
 80100e4:	200012e5 	.word	0x200012e5
 80100e8:	200012e8 	.word	0x200012e8
 80100ec:	08001e44 	.word	0x08001e44
 80100f0:	08001d70 	.word	0x08001d70
 80100f4:	0800027c 	.word	0x0800027c
 80100f8:	200026a4 	.word	0x200026a4
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 80100fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010100:	b29a      	uxth	r2, r3
 8010102:	3201      	adds	r2, #1
 8010104:	b292      	uxth	r2, r2
 8010106:	867a      	strh	r2, [r7, #50]	; 0x32
 8010108:	105b      	asrs	r3, r3, #1
 801010a:	b21b      	sxth	r3, r3
 801010c:	b2db      	uxtb	r3, r3
 801010e:	f003 0303 	and.w	r3, r3, #3
 8010112:	b2db      	uxtb	r3, r3
 8010114:	461a      	mov	r2, r3
 8010116:	2102      	movs	r1, #2
 8010118:	f44f 7084 	mov.w	r0, #264	; 0x108
 801011c:	f7fe ffae 	bl	800f07c <PrintClk>
      k = k - 4096;
 8010120:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010122:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8010126:	b29b      	uxth	r3, r3
 8010128:	86bb      	strh	r3, [r7, #52]	; 0x34
      memcpy(&F_Buff[k], &F_Buff[k+4096], k);
 801012a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801012e:	4a3e      	ldr	r2, [pc, #248]	; (8010228 <Save_Csv+0x434>)
 8010130:	1898      	adds	r0, r3, r2
 8010132:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801013a:	4a3b      	ldr	r2, [pc, #236]	; (8010228 <Save_Csv+0x434>)
 801013c:	4413      	add	r3, r2
 801013e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010142:	4619      	mov	r1, r3
 8010144:	f016 f960 	bl	8026408 <memcpy>
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 8010148:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801014c:	b29b      	uxth	r3, r3
 801014e:	3301      	adds	r3, #1
 8010150:	b29b      	uxth	r3, r3
 8010152:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010154:	4b35      	ldr	r3, [pc, #212]	; (801022c <Save_Csv+0x438>)
 8010156:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801015a:	461a      	mov	r2, r3
 801015c:	4b34      	ldr	r3, [pc, #208]	; (8010230 <Save_Csv+0x43c>)
 801015e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010162:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8010166:	429a      	cmp	r2, r3
 8010168:	f6ff af04 	blt.w	800ff74 <Save_Csv+0x180>
    }
  }
  if(k != 0)
 801016c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010170:	2b00      	cmp	r3, #0
 8010172:	d03c      	beq.n	80101ee <Save_Csv+0x3fa>
  {
    F_Buff[k++]=0x0d;
 8010174:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010178:	b293      	uxth	r3, r2
 801017a:	3301      	adds	r3, #1
 801017c:	b29b      	uxth	r3, r3
 801017e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010180:	4b29      	ldr	r3, [pc, #164]	; (8010228 <Save_Csv+0x434>)
 8010182:	210d      	movs	r1, #13
 8010184:	5499      	strb	r1, [r3, r2]
    F_Buff[k++]=0x0a;
 8010186:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801018a:	b293      	uxth	r3, r2
 801018c:	3301      	adds	r3, #1
 801018e:	b29b      	uxth	r3, r3
 8010190:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010192:	4b25      	ldr	r3, [pc, #148]	; (8010228 <Save_Csv+0x434>)
 8010194:	210a      	movs	r1, #10
 8010196:	5499      	strb	r1, [r3, r2]
    memset(&F_Buff[k],32,(4096-k)); //32->�ո�
 8010198:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801019c:	4a22      	ldr	r2, [pc, #136]	; (8010228 <Save_Csv+0x434>)
 801019e:	1898      	adds	r0, r3, r2
 80101a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80101a4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80101a8:	461a      	mov	r2, r3
 80101aa:	2120      	movs	r1, #32
 80101ac:	f016 f93a 	bl	8026424 <memset>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 80101b0:	f107 0310 	add.w	r3, r7, #16
 80101b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101b8:	491b      	ldr	r1, [pc, #108]	; (8010228 <Save_Csv+0x434>)
 80101ba:	481e      	ldr	r0, [pc, #120]	; (8010234 <Save_Csv+0x440>)
 80101bc:	f014 fcc5 	bl	8024b4a <f_write>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <Save_Csv+0x3d6>
 80101c6:	2303      	movs	r3, #3
 80101c8:	e029      	b.n	801021e <Save_Csv+0x42a>
    PrintClk(264,2,(l++ >>1)& 3);                     // ����ָʾ
 80101ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	3201      	adds	r2, #1
 80101d2:	b292      	uxth	r2, r2
 80101d4:	867a      	strh	r2, [r7, #50]	; 0x32
 80101d6:	105b      	asrs	r3, r3, #1
 80101d8:	b21b      	sxth	r3, r3
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	f003 0303 	and.w	r3, r3, #3
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	461a      	mov	r2, r3
 80101e4:	2102      	movs	r1, #2
 80101e6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80101ea:	f7fe ff47 	bl	800f07c <PrintClk>
  }
  if(f_close(&USERFile)!= FR_OK )
 80101ee:	4811      	ldr	r0, [pc, #68]	; (8010234 <Save_Csv+0x440>)
 80101f0:	f014 fe78 	bl	8024ee4 <f_close>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <Save_Csv+0x40a>
	  return FILE_RW_ERR;
 80101fa:	2303      	movs	r3, #3
 80101fc:	e00f      	b.n	801021e <Save_Csv+0x42a>
  if(List[SAVE_CSV].Val<99)List[SAVE_CSV].Val++;
 80101fe:	4b0b      	ldr	r3, [pc, #44]	; (801022c <Save_Csv+0x438>)
 8010200:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010204:	2b62      	cmp	r3, #98	; 0x62
 8010206:	dc09      	bgt.n	801021c <Save_Csv+0x428>
 8010208:	4b08      	ldr	r3, [pc, #32]	; (801022c <Save_Csv+0x438>)
 801020a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 801020e:	b29b      	uxth	r3, r3
 8010210:	3301      	adds	r3, #1
 8010212:	b29b      	uxth	r3, r3
 8010214:	b21a      	sxth	r2, r3
 8010216:	4b05      	ldr	r3, [pc, #20]	; (801022c <Save_Csv+0x438>)
 8010218:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  return OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3738      	adds	r7, #56	; 0x38
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	200012e0 	.word	0x200012e0
 801022c:	20000274 	.word	0x20000274
 8010230:	0800230c 	.word	0x0800230c
 8010234:	20007aa8 	.word	0x20007aa8

08010238 <Save_Svg>:

/*******************************************************************************
Save_Svg: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Svg(short FileNo)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b092      	sub	sp, #72	; 0x48
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .SVG";
 8010242:	4ab8      	ldr	r2, [pc, #736]	; (8010524 <Save_Svg+0x2ec>)
 8010244:	f107 0320 	add.w	r3, r7, #32
 8010248:	ca07      	ldmia	r2, {r0, r1, r2}
 801024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801024e:	2300      	movs	r3, #0
 8010250:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  short pCluster[3];
  short track[4];
  int l = 0;
 8010254:	2300      	movs	r3, #0
 8010256:	63bb      	str	r3, [r7, #56]	; 0x38
  short i,x, y;
  short temp;
  char  *str;
  short Posi1 = 0;
 8010258:	2300      	movs	r3, #0
 801025a:	86fb      	strh	r3, [r7, #54]	; 0x36
  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801025c:	4bb2      	ldr	r3, [pc, #712]	; (8010528 <Save_Svg+0x2f0>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	4bb2      	ldr	r3, [pc, #712]	; (801052c <Save_Svg+0x2f4>)
 8010262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010266:	4619      	mov	r1, r3
 8010268:	4bb1      	ldr	r3, [pc, #708]	; (8010530 <Save_Svg+0x2f8>)
 801026a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801026e:	2b00      	cmp	r3, #0
 8010270:	bf14      	ite	ne
 8010272:	2301      	movne	r3, #1
 8010274:	2300      	moveq	r3, #0
 8010276:	b2db      	uxtb	r3, r3
 8010278:	440b      	add	r3, r1
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	4413      	add	r3, r2
 801027e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	4aab      	ldr	r2, [pc, #684]	; (8010534 <Save_Svg+0x2fc>)
 8010286:	f9b2 2000 	ldrsh.w	r2, [r2]
 801028a:	4611      	mov	r1, r2
 801028c:	4aaa      	ldr	r2, [pc, #680]	; (8010538 <Save_Svg+0x300>)
 801028e:	5c52      	ldrb	r2, [r2, r1]
 8010290:	fb93 f3f2 	sdiv	r3, r3, r2
 8010294:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned j;

  Svg_Cnt = 0;
 8010296:	4ba9      	ldr	r3, [pc, #676]	; (801053c <Save_Svg+0x304>)
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]
  Addr = 0, Length = 0;
 801029c:	4ba8      	ldr	r3, [pc, #672]	; (8010540 <Save_Svg+0x308>)
 801029e:	2200      	movs	r2, #0
 80102a0:	801a      	strh	r2, [r3, #0]
 80102a2:	4ba8      	ldr	r3, [pc, #672]	; (8010544 <Save_Svg+0x30c>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	801a      	strh	r2, [r3, #0]
  str = (char*)&Data;
 80102a8:	4ba7      	ldr	r3, [pc, #668]	; (8010548 <Save_Svg+0x310>)
 80102aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  memset(Data,0,310);
 80102ac:	f44f 729b 	mov.w	r2, #310	; 0x136
 80102b0:	2100      	movs	r1, #0
 80102b2:	48a5      	ldr	r0, [pc, #660]	; (8010548 <Save_Svg+0x310>)
 80102b4:	f016 f8b6 	bl	8026424 <memset>
  memset(F_Buff,0,4096);
 80102b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102bc:	2100      	movs	r1, #0
 80102be:	48a3      	ldr	r0, [pc, #652]	; (801054c <Save_Svg+0x314>)
 80102c0:	f016 f8b0 	bl	8026424 <memset>
  Make_Filename(FileNo, pFileName);
 80102c4:	f107 0220 	add.w	r2, r7, #32
 80102c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff f88c 	bl	800f3ec <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 80102d4:	f107 0320 	add.w	r3, r7, #32
 80102d8:	2213      	movs	r2, #19
 80102da:	4619      	mov	r1, r3
 80102dc:	489c      	ldr	r0, [pc, #624]	; (8010550 <Save_Svg+0x318>)
 80102de:	f014 f95f 	bl	80245a0 <f_open>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <Save_Svg+0xb4>
	  return DISK_RW_ERR;
 80102e8:	2304      	movs	r3, #4
 80102ea:	e3d9      	b.n	8010aa0 <Save_Svg+0x868>
  //SVG �ĵ���ĳЩ��������SVG ,ָ���ⲿ��DTD
  str = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
 80102ec:	4b99      	ldr	r3, [pc, #612]	; (8010554 <Save_Svg+0x31c>)
 80102ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80102f0:	f107 0318 	add.w	r3, r7, #24
 80102f4:	4619      	mov	r1, r3
 80102f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80102f8:	f7fe ffde 	bl	800f2b8 <WriteStr>
  str = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n";
 80102fc:	4b96      	ldr	r3, [pc, #600]	; (8010558 <Save_Svg+0x320>)
 80102fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010300:	f107 0318 	add.w	r3, r7, #24
 8010304:	4619      	mov	r1, r3
 8010306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010308:	f7fe ffd6 	bl	800f2b8 <WriteStr>
  str = "<svg width=\"";
 801030c:	4b93      	ldr	r3, [pc, #588]	; (801055c <Save_Svg+0x324>)
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010310:	f107 0318 	add.w	r3, r7, #24
 8010314:	4619      	mov	r1, r3
 8010316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010318:	f7fe ffce 	bl	800f2b8 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 801031c:	4b90      	ldr	r3, [pc, #576]	; (8010560 <Save_Svg+0x328>)
 801031e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010322:	461a      	mov	r2, r3
 8010324:	4b8f      	ldr	r3, [pc, #572]	; (8010564 <Save_Svg+0x32c>)
 8010326:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801032a:	f107 0218 	add.w	r2, r7, #24
 801032e:	4611      	mov	r1, r2
 8010330:	4618      	mov	r0, r3
 8010332:	f7fe ff19 	bl	800f168 <WriteVar>
  str = "\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" onload=\"init(evt)\" onmousemove=\"msMove(evt)\">\n";
 8010336:	4b8c      	ldr	r3, [pc, #560]	; (8010568 <Save_Svg+0x330>)
 8010338:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801033a:	f107 0318 	add.w	r3, r7, #24
 801033e:	4619      	mov	r1, r3
 8010340:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010342:	f7fe ffb9 	bl	800f2b8 <WriteStr>

  //�������С��ɫ
  str = "<path stroke=\"none\" fill=\"black\" d=\"M0,0 H";
 8010346:	4b89      	ldr	r3, [pc, #548]	; (801056c <Save_Svg+0x334>)
 8010348:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801034a:	f107 0318 	add.w	r3, r7, #24
 801034e:	4619      	mov	r1, r3
 8010350:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010352:	f7fe ffb1 	bl	800f2b8 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010356:	4b82      	ldr	r3, [pc, #520]	; (8010560 <Save_Svg+0x328>)
 8010358:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801035c:	461a      	mov	r2, r3
 801035e:	4b81      	ldr	r3, [pc, #516]	; (8010564 <Save_Svg+0x32c>)
 8010360:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010364:	f107 0218 	add.w	r2, r7, #24
 8010368:	4611      	mov	r1, r2
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fefc 	bl	800f168 <WriteVar>
  str = " V200 H0 V0\"/>\n";
 8010370:	4b7f      	ldr	r3, [pc, #508]	; (8010570 <Save_Svg+0x338>)
 8010372:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010374:	f107 0318 	add.w	r3, r7, #24
 8010378:	4619      	mov	r1, r3
 801037a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801037c:	f7fe ff9c 	bl	800f2b8 <WriteStr>
  //��ǰ���ڱ���
  str = "<path stroke=\"none\" fill=\"#400040\" d=\"M";  //��ɫ
 8010380:	4b7c      	ldr	r3, [pc, #496]	; (8010574 <Save_Svg+0x33c>)
 8010382:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010384:	f107 0318 	add.w	r3, r7, #24
 8010388:	4619      	mov	r1, r3
 801038a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801038c:	f7fe ff94 	bl	800f2b8 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010390:	4b73      	ldr	r3, [pc, #460]	; (8010560 <Save_Svg+0x328>)
 8010392:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010396:	f107 0218 	add.w	r2, r7, #24
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fee3 	bl	800f168 <WriteVar>
  str = ",0 H";
 80103a2:	4b75      	ldr	r3, [pc, #468]	; (8010578 <Save_Svg+0x340>)
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103a6:	f107 0318 	add.w	r3, r7, #24
 80103aa:	4619      	mov	r1, r3
 80103ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103ae:	f7fe ff83 	bl	800f2b8 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 80103b2:	4b6b      	ldr	r3, [pc, #428]	; (8010560 <Save_Svg+0x328>)
 80103b4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103b8:	f107 0218 	add.w	r2, r7, #24
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fe fed2 	bl	800f168 <WriteVar>
  str = " V200 H";
 80103c4:	4b6d      	ldr	r3, [pc, #436]	; (801057c <Save_Svg+0x344>)
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103c8:	f107 0318 	add.w	r3, r7, #24
 80103cc:	4619      	mov	r1, r3
 80103ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103d0:	f7fe ff72 	bl	800f2b8 <WriteStr>
  WriteVar(List[VIEWPOSI].Val+300, pCluster);
 80103d4:	4b62      	ldr	r3, [pc, #392]	; (8010560 <Save_Svg+0x328>)
 80103d6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103da:	b29b      	uxth	r3, r3
 80103dc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	b21b      	sxth	r3, r3
 80103e4:	f107 0218 	add.w	r2, r7, #24
 80103e8:	4611      	mov	r1, r2
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fe febc 	bl	800f168 <WriteVar>
  str = "  V0\"/>\n";
 80103f0:	4b63      	ldr	r3, [pc, #396]	; (8010580 <Save_Svg+0x348>)
 80103f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103f4:	f107 0318 	add.w	r3, r7, #24
 80103f8:	4619      	mov	r1, r3
 80103fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103fc:	f7fe ff5c 	bl	800f2b8 <WriteStr>
  //��������
 for (y=0; y<=200; y+=25){
 8010400:	2300      	movs	r3, #0
 8010402:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010406:	e032      	b.n	801046e <Save_Svg+0x236>
    //<path stroke="#404040" d="M0,0 H4096"/>
    str = "<path stroke=\"#404040\" d=\"M0,";
 8010408:	4b5e      	ldr	r3, [pc, #376]	; (8010584 <Save_Svg+0x34c>)
 801040a:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801040c:	f107 0318 	add.w	r3, r7, #24
 8010410:	4619      	mov	r1, r3
 8010412:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010414:	f7fe ff50 	bl	800f2b8 <WriteStr>
    WriteVar(y, pCluster);
 8010418:	f107 0218 	add.w	r2, r7, #24
 801041c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fea0 	bl	800f168 <WriteVar>
    str = " H";
 8010428:	4b57      	ldr	r3, [pc, #348]	; (8010588 <Save_Svg+0x350>)
 801042a:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801042c:	f107 0318 	add.w	r3, r7, #24
 8010430:	4619      	mov	r1, r3
 8010432:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010434:	f7fe ff40 	bl	800f2b8 <WriteStr>
    WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010438:	4b49      	ldr	r3, [pc, #292]	; (8010560 <Save_Svg+0x328>)
 801043a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801043e:	461a      	mov	r2, r3
 8010440:	4b48      	ldr	r3, [pc, #288]	; (8010564 <Save_Svg+0x32c>)
 8010442:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010446:	f107 0218 	add.w	r2, r7, #24
 801044a:	4611      	mov	r1, r2
 801044c:	4618      	mov	r0, r3
 801044e:	f7fe fe8b 	bl	800f168 <WriteVar>
    str = "\"/>\n";
 8010452:	4b4e      	ldr	r3, [pc, #312]	; (801058c <Save_Svg+0x354>)
 8010454:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010456:	f107 0318 	add.w	r3, r7, #24
 801045a:	4619      	mov	r1, r3
 801045c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801045e:	f7fe ff2b 	bl	800f2b8 <WriteStr>
 for (y=0; y<=200; y+=25){
 8010462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010466:	3319      	adds	r3, #25
 8010468:	b29b      	uxth	r3, r3
 801046a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801046e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010472:	2bc8      	cmp	r3, #200	; 0xc8
 8010474:	ddc8      	ble.n	8010408 <Save_Svg+0x1d0>
  }
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 8010476:	2300      	movs	r3, #0
 8010478:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801047c:	e01d      	b.n	80104ba <Save_Svg+0x282>
  {
    //<path stroke="#404040" d="M0,0 V256"/>
    str = "<path stroke=\"#404040\" d=\"M";
 801047e:	4b44      	ldr	r3, [pc, #272]	; (8010590 <Save_Svg+0x358>)
 8010480:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010482:	f107 0318 	add.w	r3, r7, #24
 8010486:	4619      	mov	r1, r3
 8010488:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801048a:	f7fe ff15 	bl	800f2b8 <WriteStr>
    WriteVar(x, pCluster);
 801048e:	f107 0218 	add.w	r2, r7, #24
 8010492:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010496:	4611      	mov	r1, r2
 8010498:	4618      	mov	r0, r3
 801049a:	f7fe fe65 	bl	800f168 <WriteVar>
    str = ",0 V200\"/>\n";
 801049e:	4b3d      	ldr	r3, [pc, #244]	; (8010594 <Save_Svg+0x35c>)
 80104a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80104a2:	f107 0318 	add.w	r3, r7, #24
 80104a6:	4619      	mov	r1, r3
 80104a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104aa:	f7fe ff05 	bl	800f2b8 <WriteStr>
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 80104ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80104b2:	3319      	adds	r3, #25
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80104ba:	4b29      	ldr	r3, [pc, #164]	; (8010560 <Save_Svg+0x328>)
 80104bc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80104c0:	461a      	mov	r2, r3
 80104c2:	4b28      	ldr	r3, [pc, #160]	; (8010564 <Save_Svg+0x32c>)
 80104c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80104c8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80104cc:	429a      	cmp	r2, r3
 80104ce:	ddd6      	ble.n	801047e <Save_Svg+0x246>
  }
  //ͨ��A����
  str = "<path stroke=\"cyan\" fill=\"none\" stroke-width=\"1\" d=\"";
 80104d0:	4b31      	ldr	r3, [pc, #196]	; (8010598 <Save_Svg+0x360>)
 80104d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80104d4:	f107 0318 	add.w	r3, r7, #24
 80104d8:	4619      	mov	r1, r3
 80104da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104dc:	f7fe feec 	bl	800f2b8 <WriteStr>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 80104e0:	2300      	movs	r3, #0
 80104e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80104e6:	e093      	b.n	8010610 <Save_Svg+0x3d8>
  {
      temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 80104e8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80104ec:	3302      	adds	r3, #2
 80104ee:	4a2b      	ldr	r2, [pc, #172]	; (801059c <Save_Svg+0x364>)
 80104f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80104f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80104f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104fa:	fb02 f303 	mul.w	r3, r2, r3
 80104fe:	131b      	asrs	r3, r3, #12
 8010500:	b29b      	uxth	r3, r3
 8010502:	3364      	adds	r3, #100	; 0x64
 8010504:	b29b      	uxth	r3, r3
 8010506:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(temp > 0)
 8010508:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801050c:	2b00      	cmp	r3, #0
 801050e:	dd47      	ble.n	80105a0 <Save_Svg+0x368>
    {
      if(temp > 200)  track[0] = 199;
 8010510:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010514:	2bc8      	cmp	r3, #200	; 0xc8
 8010516:	dd02      	ble.n	801051e <Save_Svg+0x2e6>
 8010518:	23c7      	movs	r3, #199	; 0xc7
 801051a:	823b      	strh	r3, [r7, #16]
 801051c:	e042      	b.n	80105a4 <Save_Svg+0x36c>
      else            track[0] = temp;
 801051e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010520:	823b      	strh	r3, [r7, #16]
 8010522:	e03f      	b.n	80105a4 <Save_Svg+0x36c>
 8010524:	0800098c 	.word	0x0800098c
 8010528:	20000558 	.word	0x20000558
 801052c:	20002692 	.word	0x20002692
 8010530:	2000268c 	.word	0x2000268c
 8010534:	20002690 	.word	0x20002690
 8010538:	2000053c 	.word	0x2000053c
 801053c:	20002520 	.word	0x20002520
 8010540:	2000251c 	.word	0x2000251c
 8010544:	2000251e 	.word	0x2000251e
 8010548:	20000008 	.word	0x20000008
 801054c:	200012e0 	.word	0x200012e0
 8010550:	20007aa8 	.word	0x20007aa8
 8010554:	08000290 	.word	0x08000290
 8010558:	080002c0 	.word	0x080002c0
 801055c:	0800032c 	.word	0x0800032c
 8010560:	20000274 	.word	0x20000274
 8010564:	0800230c 	.word	0x0800230c
 8010568:	0800033c 	.word	0x0800033c
 801056c:	080003c8 	.word	0x080003c8
 8010570:	080003f4 	.word	0x080003f4
 8010574:	08000404 	.word	0x08000404
 8010578:	0800042c 	.word	0x0800042c
 801057c:	08000434 	.word	0x08000434
 8010580:	0800043c 	.word	0x0800043c
 8010584:	08000448 	.word	0x08000448
 8010588:	08000468 	.word	0x08000468
 801058c:	0800046c 	.word	0x0800046c
 8010590:	08000474 	.word	0x08000474
 8010594:	08000490 	.word	0x08000490
 8010598:	0800049c 	.word	0x0800049c
 801059c:	200026a4 	.word	0x200026a4
    } else            track[0] = 0;
 80105a0:	2300      	movs	r3, #0
 80105a2:	823b      	strh	r3, [r7, #16]
    track[0] =  200- track[0];
 80105a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	b21b      	sxth	r3, r3
 80105b2:	823b      	strh	r3, [r7, #16]
    if(i==0)str = "M";
 80105b4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d102      	bne.n	80105c2 <Save_Svg+0x38a>
 80105bc:	4b3b      	ldr	r3, [pc, #236]	; (80106ac <Save_Svg+0x474>)
 80105be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105c0:	e001      	b.n	80105c6 <Save_Svg+0x38e>
    else    str = " L";
 80105c2:	4b3b      	ldr	r3, [pc, #236]	; (80106b0 <Save_Svg+0x478>)
 80105c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105c6:	f107 0318 	add.w	r3, r7, #24
 80105ca:	4619      	mov	r1, r3
 80105cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105ce:	f7fe fe73 	bl	800f2b8 <WriteStr>
    WriteVar(i, pCluster);
 80105d2:	f107 0218 	add.w	r2, r7, #24
 80105d6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80105da:	4611      	mov	r1, r2
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe fdc3 	bl	800f168 <WriteVar>
    str = ",";
 80105e2:	4b34      	ldr	r3, [pc, #208]	; (80106b4 <Save_Svg+0x47c>)
 80105e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105e6:	f107 0318 	add.w	r3, r7, #24
 80105ea:	4619      	mov	r1, r3
 80105ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105ee:	f7fe fe63 	bl	800f2b8 <WriteStr>
    WriteVar(track[0], pCluster);
 80105f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80105f6:	f107 0218 	add.w	r2, r7, #24
 80105fa:	4611      	mov	r1, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fe fdb3 	bl	800f168 <WriteVar>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 8010602:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010606:	b29b      	uxth	r3, r3
 8010608:	3301      	adds	r3, #1
 801060a:	b29b      	uxth	r3, r3
 801060c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010610:	4b29      	ldr	r3, [pc, #164]	; (80106b8 <Save_Svg+0x480>)
 8010612:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010616:	461a      	mov	r2, r3
 8010618:	4b28      	ldr	r3, [pc, #160]	; (80106bc <Save_Svg+0x484>)
 801061a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801061e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010622:	429a      	cmp	r2, r3
 8010624:	f77f af60 	ble.w	80104e8 <Save_Svg+0x2b0>
  }
  str = "\"/>\n";
 8010628:	4b25      	ldr	r3, [pc, #148]	; (80106c0 <Save_Svg+0x488>)
 801062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801062c:	f107 0318 	add.w	r3, r7, #24
 8010630:	4619      	mov	r1, r3
 8010632:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010634:	f7fe fe40 	bl	800f2b8 <WriteStr>

  //�Ҷ˵�λ��ʱ������
  str = "<text font-family=\"Arial\" x=\"638\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"end\" id=\"CH1s\">CH1: ";
 8010638:	4b22      	ldr	r3, [pc, #136]	; (80106c4 <Save_Svg+0x48c>)
 801063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801063c:	f107 0318 	add.w	r3, r7, #24
 8010640:	4619      	mov	r1, r3
 8010642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010644:	f7fe fe38 	bl	800f2b8 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)Vol_10X[List[Y_RANGES].Val];
 8010648:	4b1b      	ldr	r3, [pc, #108]	; (80106b8 <Save_Svg+0x480>)
 801064a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d007      	beq.n	8010662 <Save_Svg+0x42a>
 8010652:	4b19      	ldr	r3, [pc, #100]	; (80106b8 <Save_Svg+0x480>)
 8010654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010658:	00db      	lsls	r3, r3, #3
 801065a:	4a1b      	ldr	r2, [pc, #108]	; (80106c8 <Save_Svg+0x490>)
 801065c:	4413      	add	r3, r2
 801065e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010660:	e006      	b.n	8010670 <Save_Svg+0x438>
  else                         str = (char*)Vol_Str[List[Y_RANGES].Val];
 8010662:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <Save_Svg+0x480>)
 8010664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010668:	00db      	lsls	r3, r3, #3
 801066a:	4a18      	ldr	r2, [pc, #96]	; (80106cc <Save_Svg+0x494>)
 801066c:	4413      	add	r3, r2
 801066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010670:	f107 0318 	add.w	r3, r7, #24
 8010674:	4619      	mov	r1, r3
 8010676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010678:	f7fe fe1e 	bl	800f2b8 <WriteStr>
  str = "/div ";
 801067c:	4b14      	ldr	r3, [pc, #80]	; (80106d0 <Save_Svg+0x498>)
 801067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010680:	f107 0318 	add.w	r3, r7, #24
 8010684:	4619      	mov	r1, r3
 8010686:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010688:	f7fe fe16 	bl	800f2b8 <WriteStr>
  str = "(";
 801068c:	4b11      	ldr	r3, [pc, #68]	; (80106d4 <Save_Svg+0x49c>)
 801068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010690:	f107 0318 	add.w	r3, r7, #24
 8010694:	4619      	mov	r1, r3
 8010696:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010698:	f7fe fe0e 	bl	800f2b8 <WriteStr>
  if(List[PROBEATT].Val)str = "X10";        //X10
 801069c:	4b06      	ldr	r3, [pc, #24]	; (80106b8 <Save_Svg+0x480>)
 801069e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d01a      	beq.n	80106dc <Save_Svg+0x4a4>
 80106a6:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <Save_Svg+0x4a0>)
 80106a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106aa:	e019      	b.n	80106e0 <Save_Svg+0x4a8>
 80106ac:	080004d4 	.word	0x080004d4
 80106b0:	080004d8 	.word	0x080004d8
 80106b4:	080004dc 	.word	0x080004dc
 80106b8:	20000274 	.word	0x20000274
 80106bc:	0800230c 	.word	0x0800230c
 80106c0:	0800046c 	.word	0x0800046c
 80106c4:	080004e0 	.word	0x080004e0
 80106c8:	08001a98 	.word	0x08001a98
 80106cc:	08001a48 	.word	0x08001a48
 80106d0:	08000548 	.word	0x08000548
 80106d4:	08000550 	.word	0x08000550
 80106d8:	08000554 	.word	0x08000554
  else                         str = "X1";  //X1
 80106dc:	4bb3      	ldr	r3, [pc, #716]	; (80109ac <Save_Svg+0x774>)
 80106de:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106e0:	f107 0318 	add.w	r3, r7, #24
 80106e4:	4619      	mov	r1, r3
 80106e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106e8:	f7fe fde6 	bl	800f2b8 <WriteStr>
  str = ") ";
 80106ec:	4bb0      	ldr	r3, [pc, #704]	; (80109b0 <Save_Svg+0x778>)
 80106ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106f0:	f107 0318 	add.w	r3, r7, #24
 80106f4:	4619      	mov	r1, r3
 80106f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106f8:	f7fe fdde 	bl	800f2b8 <WriteStr>
  str = (char*)TimeBase_Str[List[TIM_BASE].Val]; //Timebase
 80106fc:	4bad      	ldr	r3, [pc, #692]	; (80109b4 <Save_Svg+0x77c>)
 80106fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	4aac      	ldr	r2, [pc, #688]	; (80109b8 <Save_Svg+0x780>)
 8010706:	4413      	add	r3, r2
 8010708:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801070a:	f107 0318 	add.w	r3, r7, #24
 801070e:	4619      	mov	r1, r3
 8010710:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010712:	f7fe fdd1 	bl	800f2b8 <WriteStr>
  str = "/div</text>\n";
 8010716:	4ba9      	ldr	r3, [pc, #676]	; (80109bc <Save_Svg+0x784>)
 8010718:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801071a:	f107 0318 	add.w	r3, r7, #24
 801071e:	4619      	mov	r1, r3
 8010720:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010722:	f7fe fdc9 	bl	800f2b8 <WriteStr>
  str = "<text font-family=\"Arial\" x=\"2\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"start\" id=\"CH1\"> </text>\n";
 8010726:	4ba6      	ldr	r3, [pc, #664]	; (80109c0 <Save_Svg+0x788>)
 8010728:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801072a:	f107 0318 	add.w	r3, r7, #24
 801072e:	4619      	mov	r1, r3
 8010730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010732:	f7fe fdc1 	bl	800f2b8 <WriteStr>
 //===============================
  //����
  Posi1 = 199-List[V0_POSI].Val;
 8010736:	4b9f      	ldr	r3, [pc, #636]	; (80109b4 <Save_Svg+0x77c>)
 8010738:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801073c:	b29b      	uxth	r3, r3
 801073e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010742:	b29b      	uxth	r3, r3
 8010744:	86fb      	strh	r3, [r7, #54]	; 0x36
  //===============================
  str = "<script type=\"text/ecmascript\"><![CDATA[\n";
 8010746:	4b9f      	ldr	r3, [pc, #636]	; (80109c4 <Save_Svg+0x78c>)
 8010748:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801074a:	f107 0318 	add.w	r3, r7, #24
 801074e:	4619      	mov	r1, r3
 8010750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010752:	f7fe fdb1 	bl	800f2b8 <WriteStr>
  str = "function init(evt) { if ( window.svgDocument == null ) svgDocument = evt.target.ownerDocument; }\n";
 8010756:	4b9c      	ldr	r3, [pc, #624]	; (80109c8 <Save_Svg+0x790>)
 8010758:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801075a:	f107 0318 	add.w	r3, r7, #24
 801075e:	4619      	mov	r1, r3
 8010760:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010762:	f7fe fda9 	bl	800f2b8 <WriteStr>
  str = "function fmtT(val, div) {\n";
 8010766:	4b99      	ldr	r3, [pc, #612]	; (80109cc <Save_Svg+0x794>)
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801076a:	f107 0318 	add.w	r3, r7, #24
 801076e:	4619      	mov	r1, r3
 8010770:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010772:	f7fe fda1 	bl	800f2b8 <WriteStr>
  str = "if (div > 10000) return Math.floor(val*div/25/1000) + \" ms\";\n";
 8010776:	4b96      	ldr	r3, [pc, #600]	; (80109d0 <Save_Svg+0x798>)
 8010778:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801077a:	f107 0318 	add.w	r3, r7, #24
 801077e:	4619      	mov	r1, r3
 8010780:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010782:	f7fe fd99 	bl	800f2b8 <WriteStr>
  str = "if (div > 250) return Math.floor(val*div/25)/1000 + \" ms\";\n";
 8010786:	4b93      	ldr	r3, [pc, #588]	; (80109d4 <Save_Svg+0x79c>)
 8010788:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801078a:	f107 0318 	add.w	r3, r7, #24
 801078e:	4619      	mov	r1, r3
 8010790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010792:	f7fe fd91 	bl	800f2b8 <WriteStr>
  str = "return Math.floor(val*div*1000/25)/1000 + \" us\";\n";
 8010796:	4b90      	ldr	r3, [pc, #576]	; (80109d8 <Save_Svg+0x7a0>)
 8010798:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801079a:	f107 0318 	add.w	r3, r7, #24
 801079e:	4619      	mov	r1, r3
 80107a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107a2:	f7fe fd89 	bl	800f2b8 <WriteStr>
  str = "}\n";
 80107a6:	4b8d      	ldr	r3, [pc, #564]	; (80109dc <Save_Svg+0x7a4>)
 80107a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107aa:	f107 0318 	add.w	r3, r7, #24
 80107ae:	4619      	mov	r1, r3
 80107b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107b2:	f7fe fd81 	bl	800f2b8 <WriteStr>
  str = "function fmtU(val, div, shift) { return Math.floor((shift-val)*div/25) + \" mV\"; }\n";
 80107b6:	4b8a      	ldr	r3, [pc, #552]	; (80109e0 <Save_Svg+0x7a8>)
 80107b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107ba:	f107 0318 	add.w	r3, r7, #24
 80107be:	4619      	mov	r1, r3
 80107c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107c2:	f7fe fd79 	bl	800f2b8 <WriteStr>
  str = "function msMove (evt)\n";
 80107c6:	4b87      	ldr	r3, [pc, #540]	; (80109e4 <Save_Svg+0x7ac>)
 80107c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107ca:	f107 0318 	add.w	r3, r7, #24
 80107ce:	4619      	mov	r1, r3
 80107d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107d2:	f7fe fd71 	bl	800f2b8 <WriteStr>
  str = "{\n";
 80107d6:	4b84      	ldr	r3, [pc, #528]	; (80109e8 <Save_Svg+0x7b0>)
 80107d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107da:	f107 0318 	add.w	r3, r7, #24
 80107de:	4619      	mov	r1, r3
 80107e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107e2:	f7fe fd69 	bl	800f2b8 <WriteStr>
  str = "var x = evt.pageX;\n";
 80107e6:	4b81      	ldr	r3, [pc, #516]	; (80109ec <Save_Svg+0x7b4>)
 80107e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107ea:	f107 0318 	add.w	r3, r7, #24
 80107ee:	4619      	mov	r1, r3
 80107f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107f2:	f7fe fd61 	bl	800f2b8 <WriteStr>
  str = "var y = evt.clientY;\n";
 80107f6:	4b7e      	ldr	r3, [pc, #504]	; (80109f0 <Save_Svg+0x7b8>)
 80107f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107fa:	f107 0318 	add.w	r3, r7, #24
 80107fe:	4619      	mov	r1, r3
 8010800:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010802:	f7fe fd59 	bl	800f2b8 <WriteStr>
  str = "if (x < 0 || y < 0 || x >= ";
 8010806:	4b7b      	ldr	r3, [pc, #492]	; (80109f4 <Save_Svg+0x7bc>)
 8010808:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801080a:	f107 0318 	add.w	r3, r7, #24
 801080e:	4619      	mov	r1, r3
 8010810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010812:	f7fe fd51 	bl	800f2b8 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010816:	4b67      	ldr	r3, [pc, #412]	; (80109b4 <Save_Svg+0x77c>)
 8010818:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801081c:	461a      	mov	r2, r3
 801081e:	4b76      	ldr	r3, [pc, #472]	; (80109f8 <Save_Svg+0x7c0>)
 8010820:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010824:	f107 0218 	add.w	r2, r7, #24
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe fc9c 	bl	800f168 <WriteVar>
  str = "|| y >= 200)\n";
 8010830:	4b72      	ldr	r3, [pc, #456]	; (80109fc <Save_Svg+0x7c4>)
 8010832:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010834:	f107 0318 	add.w	r3, r7, #24
 8010838:	4619      	mov	r1, r3
 801083a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801083c:	f7fe fd3c 	bl	800f2b8 <WriteStr>
  str = "return;\n";
 8010840:	4b6f      	ldr	r3, [pc, #444]	; (8010a00 <Save_Svg+0x7c8>)
 8010842:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010844:	f107 0318 	add.w	r3, r7, #24
 8010848:	4619      	mov	r1, r3
 801084a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801084c:	f7fe fd34 	bl	800f2b8 <WriteStr>
  str = "var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);\n";
 8010850:	4b6c      	ldr	r3, [pc, #432]	; (8010a04 <Save_Svg+0x7cc>)
 8010852:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010854:	f107 0318 	add.w	r3, r7, #24
 8010858:	4619      	mov	r1, r3
 801085a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801085c:	f7fe fd2c 	bl	800f2b8 <WriteStr>
  str = "var width = window.innerWidth;\n";
 8010860:	4b69      	ldr	r3, [pc, #420]	; (8010a08 <Save_Svg+0x7d0>)
 8010862:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010864:	f107 0318 	add.w	r3, r7, #24
 8010868:	4619      	mov	r1, r3
 801086a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801086c:	f7fe fd24 	bl	800f2b8 <WriteStr>
  str = "\n";
 8010870:	4b66      	ldr	r3, [pc, #408]	; (8010a0c <Save_Svg+0x7d4>)
 8010872:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010874:	f107 0318 	add.w	r3, r7, #24
 8010878:	4619      	mov	r1, r3
 801087a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801087c:	f7fe fd1c 	bl	800f2b8 <WriteStr>
  str = "svgDocument.getElementById(\"CH1\").setAttribute(\"x\", hscroll+20);\n";
 8010880:	4b63      	ldr	r3, [pc, #396]	; (8010a10 <Save_Svg+0x7d8>)
 8010882:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010884:	f107 0318 	add.w	r3, r7, #24
 8010888:	4619      	mov	r1, r3
 801088a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801088c:	f7fe fd14 	bl	800f2b8 <WriteStr>
  str = "svgDocument.getElementById(\"CH1s\").setAttribute(\"x\", hscroll+width-20);\n";
 8010890:	4b60      	ldr	r3, [pc, #384]	; (8010a14 <Save_Svg+0x7dc>)
 8010892:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010894:	f107 0318 	add.w	r3, r7, #24
 8010898:	4619      	mov	r1, r3
 801089a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801089c:	f7fe fd0c 	bl	800f2b8 <WriteStr>
  str = "\n";
 80108a0:	4b5a      	ldr	r3, [pc, #360]	; (8010a0c <Save_Svg+0x7d4>)
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108a4:	f107 0318 	add.w	r3, r7, #24
 80108a8:	4619      	mov	r1, r3
 80108aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108ac:	f7fe fd04 	bl	800f2b8 <WriteStr>
  //==============================
  str = "svgDocument.getElementById(\"CH1\").firstChild.data = \"CH1: \"+fmtU(y, ";
 80108b0:	4b59      	ldr	r3, [pc, #356]	; (8010a18 <Save_Svg+0x7e0>)
 80108b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108b4:	f107 0318 	add.w	r3, r7, #24
 80108b8:	4619      	mov	r1, r3
 80108ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108bc:	f7fe fcfc 	bl	800f2b8 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)VScale_Str_10X[List[Y_RANGES].Val];
 80108c0:	4b3c      	ldr	r3, [pc, #240]	; (80109b4 <Save_Svg+0x77c>)
 80108c2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00b      	beq.n	80108e2 <Save_Svg+0x6aa>
 80108ca:	4b3a      	ldr	r3, [pc, #232]	; (80109b4 <Save_Svg+0x77c>)
 80108cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108d0:	461a      	mov	r2, r3
 80108d2:	4613      	mov	r3, r2
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	4413      	add	r3, r2
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	4a50      	ldr	r2, [pc, #320]	; (8010a1c <Save_Svg+0x7e4>)
 80108dc:	4413      	add	r3, r2
 80108de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108e0:	e00a      	b.n	80108f8 <Save_Svg+0x6c0>
  else str = (char*)VScale_Str[List[Y_RANGES].Val];
 80108e2:	4b34      	ldr	r3, [pc, #208]	; (80109b4 <Save_Svg+0x77c>)
 80108e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108e8:	461a      	mov	r2, r3
 80108ea:	4613      	mov	r3, r2
 80108ec:	005b      	lsls	r3, r3, #1
 80108ee:	4413      	add	r3, r2
 80108f0:	005b      	lsls	r3, r3, #1
 80108f2:	4a4b      	ldr	r2, [pc, #300]	; (8010a20 <Save_Svg+0x7e8>)
 80108f4:	4413      	add	r3, r2
 80108f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108f8:	f107 0318 	add.w	r3, r7, #24
 80108fc:	4619      	mov	r1, r3
 80108fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010900:	f7fe fcda 	bl	800f2b8 <WriteStr>
  str = ", ";
 8010904:	4b47      	ldr	r3, [pc, #284]	; (8010a24 <Save_Svg+0x7ec>)
 8010906:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010908:	f107 0318 	add.w	r3, r7, #24
 801090c:	4619      	mov	r1, r3
 801090e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010910:	f7fe fcd2 	bl	800f2b8 <WriteStr>
  WriteVar((short)Posi1, pCluster);
 8010914:	f107 0218 	add.w	r2, r7, #24
 8010918:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801091c:	4611      	mov	r1, r2
 801091e:	4618      	mov	r0, r3
 8010920:	f7fe fc22 	bl	800f168 <WriteVar>
  str = ") + \" \" + fmtT(x, ";
 8010924:	4b40      	ldr	r3, [pc, #256]	; (8010a28 <Save_Svg+0x7f0>)
 8010926:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010928:	f107 0318 	add.w	r3, r7, #24
 801092c:	4619      	mov	r1, r3
 801092e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010930:	f7fe fcc2 	bl	800f2b8 <WriteStr>
  str = (char*)TScale_Str[List[TIM_BASE].Val]; //Timebase
 8010934:	4b1f      	ldr	r3, [pc, #124]	; (80109b4 <Save_Svg+0x77c>)
 8010936:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801093a:	00db      	lsls	r3, r3, #3
 801093c:	4a3b      	ldr	r2, [pc, #236]	; (8010a2c <Save_Svg+0x7f4>)
 801093e:	4413      	add	r3, r2
 8010940:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010942:	f107 0318 	add.w	r3, r7, #24
 8010946:	4619      	mov	r1, r3
 8010948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801094a:	f7fe fcb5 	bl	800f2b8 <WriteStr>
  str = ");\n";
 801094e:	4b38      	ldr	r3, [pc, #224]	; (8010a30 <Save_Svg+0x7f8>)
 8010950:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010952:	f107 0318 	add.w	r3, r7, #24
 8010956:	4619      	mov	r1, r3
 8010958:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801095a:	f7fe fcad 	bl	800f2b8 <WriteStr>

  //==============================
  str = "}\n";
 801095e:	4b1f      	ldr	r3, [pc, #124]	; (80109dc <Save_Svg+0x7a4>)
 8010960:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010962:	f107 0318 	add.w	r3, r7, #24
 8010966:	4619      	mov	r1, r3
 8010968:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801096a:	f7fe fca5 	bl	800f2b8 <WriteStr>
  str = "]]></script>\n";
 801096e:	4b31      	ldr	r3, [pc, #196]	; (8010a34 <Save_Svg+0x7fc>)
 8010970:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010972:	f107 0318 	add.w	r3, r7, #24
 8010976:	4619      	mov	r1, r3
 8010978:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801097a:	f7fe fc9d 	bl	800f2b8 <WriteStr>
  str = "</svg>\n";
 801097e:	4b2e      	ldr	r3, [pc, #184]	; (8010a38 <Save_Svg+0x800>)
 8010980:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010982:	f107 0318 	add.w	r3, r7, #24
 8010986:	4619      	mov	r1, r3
 8010988:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801098a:	f7fe fc95 	bl	800f2b8 <WriteStr>
  if(f_write( &USERFile, F_Buff, Length, &j)!= FR_OK) return FILE_RW_ERR; // д������
 801098e:	4b2b      	ldr	r3, [pc, #172]	; (8010a3c <Save_Svg+0x804>)
 8010990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010994:	461a      	mov	r2, r3
 8010996:	f107 030c 	add.w	r3, r7, #12
 801099a:	4929      	ldr	r1, [pc, #164]	; (8010a40 <Save_Svg+0x808>)
 801099c:	4829      	ldr	r0, [pc, #164]	; (8010a44 <Save_Svg+0x80c>)
 801099e:	f014 f8d4 	bl	8024b4a <f_write>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d04f      	beq.n	8010a48 <Save_Svg+0x810>
 80109a8:	2303      	movs	r3, #3
 80109aa:	e079      	b.n	8010aa0 <Save_Svg+0x868>
 80109ac:	08000558 	.word	0x08000558
 80109b0:	0800055c 	.word	0x0800055c
 80109b4:	20000274 	.word	0x20000274
 80109b8:	200001ac 	.word	0x200001ac
 80109bc:	08000560 	.word	0x08000560
 80109c0:	08000570 	.word	0x08000570
 80109c4:	080005dc 	.word	0x080005dc
 80109c8:	08000608 	.word	0x08000608
 80109cc:	0800066c 	.word	0x0800066c
 80109d0:	08000688 	.word	0x08000688
 80109d4:	080006c8 	.word	0x080006c8
 80109d8:	08000704 	.word	0x08000704
 80109dc:	08000738 	.word	0x08000738
 80109e0:	0800073c 	.word	0x0800073c
 80109e4:	08000790 	.word	0x08000790
 80109e8:	080007a8 	.word	0x080007a8
 80109ec:	080007ac 	.word	0x080007ac
 80109f0:	080007c0 	.word	0x080007c0
 80109f4:	080007d8 	.word	0x080007d8
 80109f8:	0800230c 	.word	0x0800230c
 80109fc:	080007f4 	.word	0x080007f4
 8010a00:	08000804 	.word	0x08000804
 8010a04:	08000810 	.word	0x08000810
 8010a08:	0800085c 	.word	0x0800085c
 8010a0c:	0800087c 	.word	0x0800087c
 8010a10:	08000880 	.word	0x08000880
 8010a14:	080008c4 	.word	0x080008c4
 8010a18:	08000910 	.word	0x08000910
 8010a1c:	08001b24 	.word	0x08001b24
 8010a20:	08001ae8 	.word	0x08001ae8
 8010a24:	08000958 	.word	0x08000958
 8010a28:	0800095c 	.word	0x0800095c
 8010a2c:	08001b60 	.word	0x08001b60
 8010a30:	08000970 	.word	0x08000970
 8010a34:	08000974 	.word	0x08000974
 8010a38:	08000984 	.word	0x08000984
 8010a3c:	2000251e 	.word	0x2000251e
 8010a40:	200012e0 	.word	0x200012e0
 8010a44:	20007aa8 	.word	0x20007aa8
  PrintClk(264,2,(l++ >>1)& 3);                               // ����ָʾ
 8010a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a4e:	105b      	asrs	r3, r3, #1
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	f003 0303 	and.w	r3, r3, #3
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	461a      	mov	r2, r3
 8010a5a:	2102      	movs	r1, #2
 8010a5c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a60:	f7fe fb0c 	bl	800f07c <PrintClk>

  if(f_close(&USERFile)!= FR_OK )
 8010a64:	4810      	ldr	r0, [pc, #64]	; (8010aa8 <Save_Svg+0x870>)
 8010a66:	f014 fa3d 	bl	8024ee4 <f_close>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <Save_Svg+0x83c>
	  return FILE_RW_ERR;
 8010a70:	2303      	movs	r3, #3
 8010a72:	e015      	b.n	8010aa0 <Save_Svg+0x868>
  if(List[SAVE_SVG].Val<99)List[SAVE_SVG].Val++;
 8010a74:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <Save_Svg+0x874>)
 8010a76:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a7a:	2b62      	cmp	r3, #98	; 0x62
 8010a7c:	dc09      	bgt.n	8010a92 <Save_Svg+0x85a>
 8010a7e:	4b0b      	ldr	r3, [pc, #44]	; (8010aac <Save_Svg+0x874>)
 8010a80:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	3301      	adds	r3, #1
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	b21a      	sxth	r2, r3
 8010a8c:	4b07      	ldr	r3, [pc, #28]	; (8010aac <Save_Svg+0x874>)
 8010a8e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  memset(Data,0,310);
 8010a92:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010a96:	2100      	movs	r1, #0
 8010a98:	4805      	ldr	r0, [pc, #20]	; (8010ab0 <Save_Svg+0x878>)
 8010a9a:	f015 fcc3 	bl	8026424 <memset>
  return OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3748      	adds	r7, #72	; 0x48
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	20007aa8 	.word	0x20007aa8
 8010aac:	20000274 	.word	0x20000274
 8010ab0:	20000008 	.word	0x20000008

08010ab4 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 8010aba:	4b10      	ldr	r3, [pc, #64]	; (8010afc <Read_CalFlag+0x48>)
 8010abc:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	1c9a      	adds	r2, r3, #2
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d10e      	bne.n	8010aec <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	1c9a      	adds	r2, r3, #2
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ada:	d109      	bne.n	8010af0 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	1c9a      	adds	r2, r3, #2
 8010ae0:	607a      	str	r2, [r7, #4]
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b06      	ldr	r3, [pc, #24]	; (8010b00 <Read_CalFlag+0x4c>)
 8010ae8:	701a      	strb	r2, [r3, #0]
	  return;
 8010aea:	e002      	b.n	8010af2 <Read_CalFlag+0x3e>
		  return;
 8010aec:	bf00      	nop
 8010aee:	e000      	b.n	8010af2 <Read_CalFlag+0x3e>
		  return;
 8010af0:	bf00      	nop
 }
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr
 8010afc:	08004000 	.word	0x08004000
 8010b00:	20000192 	.word	0x20000192

08010b04 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8010b04:	b5b0      	push	{r4, r5, r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8010b0a:	4b47      	ldr	r3, [pc, #284]	; (8010c28 <Save_Parameter+0x124>)
 8010b0c:	2202      	movs	r2, #2
 8010b0e:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010b10:	f008 fa8a 	bl	8019028 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010b14:	4945      	ldr	r1, [pc, #276]	; (8010c2c <Save_Parameter+0x128>)
 8010b16:	4844      	ldr	r0, [pc, #272]	; (8010c28 <Save_Parameter+0x124>)
 8010b18:	f008 fbf8 	bl	801930c <HAL_FLASHEx_Erase>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010b20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d176      	bne.n	8010c16 <Save_Parameter+0x112>
   {
     ptr=Flash_Buff;
 8010b28:	4b41      	ldr	r3, [pc, #260]	; (8010c30 <Save_Parameter+0x12c>)
 8010b2a:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	1c9a      	adds	r2, r3, #2
 8010b30:	603a      	str	r2, [r7, #0]
 8010b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b36:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8010b38:	4b3e      	ldr	r3, [pc, #248]	; (8010c34 <Save_Parameter+0x130>)
 8010b3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	1c9a      	adds	r2, r3, #2
 8010b42:	603a      	str	r2, [r7, #0]
 8010b44:	b28a      	uxth	r2, r1
 8010b46:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8010b48:	4b3b      	ldr	r3, [pc, #236]	; (8010c38 <Save_Parameter+0x134>)
 8010b4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	1c9a      	adds	r2, r3, #2
 8010b52:	603a      	str	r2, [r7, #0]
 8010b54:	b28a      	uxth	r2, r1
 8010b56:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b58:	2300      	movs	r3, #0
 8010b5a:	80fb      	strh	r3, [r7, #6]
 8010b5c:	e011      	b.n	8010b82 <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8010b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b62:	4a36      	ldr	r2, [pc, #216]	; (8010c3c <Save_Parameter+0x138>)
 8010b64:	00db      	lsls	r3, r3, #3
 8010b66:	4413      	add	r3, r2
 8010b68:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	1c9a      	adds	r2, r3, #2
 8010b70:	603a      	str	r2, [r7, #0]
 8010b72:	b28a      	uxth	r2, r1
 8010b74:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	80fb      	strh	r3, [r7, #6]
 8010b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b86:	2b29      	cmp	r3, #41	; 0x29
 8010b88:	dde9      	ble.n	8010b5e <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	80fb      	strh	r3, [r7, #6]
 8010b8e:	e00f      	b.n	8010bb0 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8010b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b94:	4a2a      	ldr	r2, [pc, #168]	; (8010c40 <Save_Parameter+0x13c>)
 8010b96:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	1c9a      	adds	r2, r3, #2
 8010b9e:	603a      	str	r2, [r7, #0]
 8010ba0:	b28a      	uxth	r2, r1
 8010ba2:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8010ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	3301      	adds	r3, #1
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	80fb      	strh	r3, [r7, #6]
 8010bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bb4:	2b07      	cmp	r3, #7
 8010bb6:	ddeb      	ble.n	8010b90 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	1c9a      	adds	r2, r3, #2
 8010bbc:	603a      	str	r2, [r7, #0]
 8010bbe:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010bc2:	801a      	strh	r2, [r3, #0]
     ptr=Flash_Buff;
 8010bc4:	4b1a      	ldr	r3, [pc, #104]	; (8010c30 <Save_Parameter+0x12c>)
 8010bc6:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010bc8:	2300      	movs	r3, #0
 8010bca:	80fb      	strh	r3, [r7, #6]
 8010bcc:	e01d      	b.n	8010c0a <Save_Parameter+0x106>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8010bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bd2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010bd6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010bda:	4619      	mov	r1, r3
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	1c9a      	adds	r2, r3, #2
 8010be0:	603a      	str	r2, [r7, #0]
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	2200      	movs	r2, #0
 8010be8:	461c      	mov	r4, r3
 8010bea:	4615      	mov	r5, r2
 8010bec:	4622      	mov	r2, r4
 8010bee:	462b      	mov	r3, r5
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	f008 f9c5 	bl	8018f80 <HAL_FLASH_Program>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010bfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d108      	bne.n	8010c14 <Save_Parameter+0x110>
     for(i=0; i<256; i+=2)
 8010c02:	88fb      	ldrh	r3, [r7, #6]
 8010c04:	3302      	adds	r3, #2
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	80fb      	strh	r3, [r7, #6]
 8010c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c0e:	2bff      	cmp	r3, #255	; 0xff
 8010c10:	dddd      	ble.n	8010bce <Save_Parameter+0xca>
 8010c12:	e000      	b.n	8010c16 <Save_Parameter+0x112>
    	   break;
 8010c14:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010c16:	f008 fa29 	bl	801906c <HAL_FLASH_Lock>

   return j;
 8010c1a:	88bb      	ldrh	r3, [r7, #4]
 8010c1c:	b2db      	uxtb	r3, r3
 }
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bdb0      	pop	{r4, r5, r7, pc}
 8010c26:	bf00      	nop
 8010c28:	20000194 	.word	0x20000194
 8010c2c:	20002630 	.word	0x20002630
 8010c30:	20002530 	.word	0x20002530
 8010c34:	20002654 	.word	0x20002654
 8010c38:	20002656 	.word	0x20002656
 8010c3c:	20000274 	.word	0x20000274
 8010c40:	20000514 	.word	0x20000514

08010c44 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 8010c4a:	4b3f      	ldr	r3, [pc, #252]	; (8010d48 <Read_Parameter+0x104>)
 8010c4c:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010c4e:	4b3f      	ldr	r3, [pc, #252]	; (8010d4c <Read_Parameter+0x108>)
 8010c50:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010c54:	4b3e      	ldr	r3, [pc, #248]	; (8010d50 <Read_Parameter+0x10c>)
 8010c56:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010c58:	4b3c      	ldr	r3, [pc, #240]	; (8010d4c <Read_Parameter+0x108>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d166      	bne.n	8010d38 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 8010c6a:	4b3a      	ldr	r3, [pc, #232]	; (8010d54 <Read_Parameter+0x110>)
 8010c6c:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	1c9a      	adds	r2, r3, #2
 8010c72:	603a      	str	r2, [r7, #0]
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c7a:	d15f      	bne.n	8010d3c <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	1c9a      	adds	r2, r3, #2
 8010c80:	603a      	str	r2, [r7, #0]
 8010c82:	881b      	ldrh	r3, [r3, #0]
 8010c84:	b21a      	sxth	r2, r3
 8010c86:	4b34      	ldr	r3, [pc, #208]	; (8010d58 <Read_Parameter+0x114>)
 8010c88:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010c8a:	4b33      	ldr	r3, [pc, #204]	; (8010d58 <Read_Parameter+0x114>)
 8010c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c90:	461a      	mov	r2, r3
 8010c92:	4b32      	ldr	r3, [pc, #200]	; (8010d5c <Read_Parameter+0x118>)
 8010c94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c98:	4a2c      	ldr	r2, [pc, #176]	; (8010d4c <Read_Parameter+0x108>)
 8010c9a:	00db      	lsls	r3, r3, #3
 8010c9c:	4413      	add	r3, r2
 8010c9e:	799b      	ldrb	r3, [r3, #6]
 8010ca0:	4a2d      	ldr	r2, [pc, #180]	; (8010d58 <Read_Parameter+0x114>)
 8010ca2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ca6:	4611      	mov	r1, r2
 8010ca8:	4a2c      	ldr	r2, [pc, #176]	; (8010d5c <Read_Parameter+0x118>)
 8010caa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010cae:	4610      	mov	r0, r2
 8010cb0:	f043 0320 	orr.w	r3, r3, #32
 8010cb4:	b2d9      	uxtb	r1, r3
 8010cb6:	4a25      	ldr	r2, [pc, #148]	; (8010d4c <Read_Parameter+0x108>)
 8010cb8:	00c3      	lsls	r3, r0, #3
 8010cba:	4413      	add	r3, r2
 8010cbc:	460a      	mov	r2, r1
 8010cbe:	719a      	strb	r2, [r3, #6]
   ptr++;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	3302      	adds	r3, #2
 8010cc4:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	80fb      	strh	r3, [r7, #6]
 8010cca:	e011      	b.n	8010cf0 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	1c9a      	adds	r2, r3, #2
 8010cd0:	603a      	str	r2, [r7, #0]
 8010cd2:	881a      	ldrh	r2, [r3, #0]
 8010cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cd8:	b211      	sxth	r1, r2
 8010cda:	4a1c      	ldr	r2, [pc, #112]	; (8010d4c <Read_Parameter+0x108>)
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	4413      	add	r3, r2
 8010ce0:	460a      	mov	r2, r1
 8010ce2:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	3301      	adds	r3, #1
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	80fb      	strh	r3, [r7, #6]
 8010cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cf4:	2b29      	cmp	r3, #41	; 0x29
 8010cf6:	dde9      	ble.n	8010ccc <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	80fb      	strh	r3, [r7, #6]
 8010cfc:	e00f      	b.n	8010d1e <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	1c9a      	adds	r2, r3, #2
 8010d02:	603a      	str	r2, [r7, #0]
 8010d04:	881a      	ldrh	r2, [r3, #0]
 8010d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d0a:	b211      	sxth	r1, r2
 8010d0c:	4a13      	ldr	r2, [pc, #76]	; (8010d5c <Read_Parameter+0x118>)
 8010d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	3301      	adds	r3, #1
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	80fb      	strh	r3, [r7, #6]
 8010d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d22:	2b07      	cmp	r3, #7
 8010d24:	ddeb      	ble.n	8010cfe <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010d26:	4b09      	ldr	r3, [pc, #36]	; (8010d4c <Read_Parameter+0x108>)
 8010d28:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010d2c:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <Read_Parameter+0x10c>)
 8010d2e:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010d30:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <Read_Parameter+0x108>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8010d36:	e002      	b.n	8010d3e <Read_Parameter+0xfa>
	   return ;
 8010d38:	bf00      	nop
 8010d3a:	e000      	b.n	8010d3e <Read_Parameter+0xfa>
	   return ;
 8010d3c:	bf00      	nop
 }
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	0800806e 	.word	0x0800806e
 8010d4c:	20000274 	.word	0x20000274
 8010d50:	2000252c 	.word	0x2000252c
 8010d54:	08008000 	.word	0x08008000
 8010d58:	20002654 	.word	0x20002654
 8010d5c:	20000514 	.word	0x20000514

08010d60 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8010d60:	b5b0      	push	{r4, r5, r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8010d66:	4b36      	ldr	r3, [pc, #216]	; (8010e40 <Save_Kpg+0xe0>)
 8010d68:	2201      	movs	r2, #1
 8010d6a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010d6c:	f008 f95c 	bl	8019028 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010d70:	4934      	ldr	r1, [pc, #208]	; (8010e44 <Save_Kpg+0xe4>)
 8010d72:	4833      	ldr	r0, [pc, #204]	; (8010e40 <Save_Kpg+0xe0>)
 8010d74:	f008 faca 	bl	801930c <HAL_FLASHEx_Erase>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010d7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d154      	bne.n	8010e2e <Save_Kpg+0xce>
   {
     ptr=Flash_Buff;
 8010d84:	4b30      	ldr	r3, [pc, #192]	; (8010e48 <Save_Kpg+0xe8>)
 8010d86:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	1c9a      	adds	r2, r3, #2
 8010d8c:	603a      	str	r2, [r7, #0]
 8010d8e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010d92:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	1c9a      	adds	r2, r3, #2
 8010d98:	603a      	str	r2, [r7, #0]
 8010d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010d9e:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8010da0:	4b2a      	ldr	r3, [pc, #168]	; (8010e4c <Save_Kpg+0xec>)
 8010da2:	7819      	ldrb	r1, [r3, #0]
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	1c9a      	adds	r2, r3, #2
 8010da8:	603a      	str	r2, [r7, #0]
 8010daa:	b28a      	uxth	r2, r1
 8010dac:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010dae:	2300      	movs	r3, #0
 8010db0:	80fb      	strh	r3, [r7, #6]
 8010db2:	e00f      	b.n	8010dd4 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8010db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010db8:	4a25      	ldr	r2, [pc, #148]	; (8010e50 <Save_Kpg+0xf0>)
 8010dba:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	1c9a      	adds	r2, r3, #2
 8010dc2:	603a      	str	r2, [r7, #0]
 8010dc4:	b28a      	uxth	r2, r1
 8010dc6:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	3301      	adds	r3, #1
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	80fb      	strh	r3, [r7, #6]
 8010dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dd8:	2b02      	cmp	r3, #2
 8010dda:	ddeb      	ble.n	8010db4 <Save_Kpg+0x54>
     ptr=Flash_Buff;
 8010ddc:	4b1a      	ldr	r3, [pc, #104]	; (8010e48 <Save_Kpg+0xe8>)
 8010dde:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010de0:	2300      	movs	r3, #0
 8010de2:	80fb      	strh	r3, [r7, #6]
 8010de4:	e01d      	b.n	8010e22 <Save_Kpg+0xc2>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8010de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dea:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010dee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010df2:	4619      	mov	r1, r3
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	1c9a      	adds	r2, r3, #2
 8010df8:	603a      	str	r2, [r7, #0]
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	2200      	movs	r2, #0
 8010e00:	461c      	mov	r4, r3
 8010e02:	4615      	mov	r5, r2
 8010e04:	4622      	mov	r2, r4
 8010e06:	462b      	mov	r3, r5
 8010e08:	2001      	movs	r0, #1
 8010e0a:	f008 f8b9 	bl	8018f80 <HAL_FLASH_Program>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d108      	bne.n	8010e2c <Save_Kpg+0xcc>
     for(i=0; i<256; i+=2)
 8010e1a:	88fb      	ldrh	r3, [r7, #6]
 8010e1c:	3302      	adds	r3, #2
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	80fb      	strh	r3, [r7, #6]
 8010e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e26:	2bff      	cmp	r3, #255	; 0xff
 8010e28:	dddd      	ble.n	8010de6 <Save_Kpg+0x86>
 8010e2a:	e000      	b.n	8010e2e <Save_Kpg+0xce>
    	   break;
 8010e2c:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010e2e:	f008 f91d 	bl	801906c <HAL_FLASH_Lock>
   return j;
 8010e32:	88bb      	ldrh	r3, [r7, #4]
 8010e34:	b2db      	uxtb	r3, r3
 }
 8010e36:	4618      	mov	r0, r3
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	20000194 	.word	0x20000194
 8010e44:	20002630 	.word	0x20002630
 8010e48:	20002530 	.word	0x20002530
 8010e4c:	20000192 	.word	0x20000192
 8010e50:	20000548 	.word	0x20000548

08010e54 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8010e5a:	4b1c      	ldr	r3, [pc, #112]	; (8010ecc <Read_Kpg+0x78>)
 8010e5c:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	1c9a      	adds	r2, r3, #2
 8010e62:	603a      	str	r2, [r7, #0]
 8010e64:	881b      	ldrh	r3, [r3, #0]
 8010e66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d125      	bne.n	8010eba <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	1c9a      	adds	r2, r3, #2
 8010e72:	603a      	str	r2, [r7, #0]
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e7a:	d120      	bne.n	8010ebe <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	1c9a      	adds	r2, r3, #2
 8010e80:	603a      	str	r2, [r7, #0]
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <Read_Kpg+0x7c>)
 8010e88:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	80fb      	strh	r3, [r7, #6]
 8010e8e:	e00f      	b.n	8010eb0 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	1c9a      	adds	r2, r3, #2
 8010e94:	603a      	str	r2, [r7, #0]
 8010e96:	881a      	ldrh	r2, [r3, #0]
 8010e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e9c:	b211      	sxth	r1, r2
 8010e9e:	4a0d      	ldr	r2, [pc, #52]	; (8010ed4 <Read_Kpg+0x80>)
 8010ea0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8010ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	80fb      	strh	r3, [r7, #6]
 8010eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	ddeb      	ble.n	8010e90 <Read_Kpg+0x3c>
   return ;
 8010eb8:	e002      	b.n	8010ec0 <Read_Kpg+0x6c>
	   return ;
 8010eba:	bf00      	nop
 8010ebc:	e000      	b.n	8010ec0 <Read_Kpg+0x6c>
	   return ;
 8010ebe:	bf00      	nop
 }
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	08004000 	.word	0x08004000
 8010ed0:	20000192 	.word	0x20000192
 8010ed4:	20000548 	.word	0x20000548

08010ed8 <Restore>:

 void Restore(void)
 {
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010ede:	4b2d      	ldr	r3, [pc, #180]	; (8010f94 <Restore+0xbc>)
 8010ee0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010ee4:	4b2c      	ldr	r3, [pc, #176]	; (8010f98 <Restore+0xc0>)
 8010ee6:	801a      	strh	r2, [r3, #0]
   Current=0;
 8010ee8:	4b2c      	ldr	r3, [pc, #176]	; (8010f9c <Restore+0xc4>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010eee:	4b2b      	ldr	r3, [pc, #172]	; (8010f9c <Restore+0xc4>)
 8010ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4b2a      	ldr	r3, [pc, #168]	; (8010fa0 <Restore+0xc8>)
 8010ef8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010efc:	4a25      	ldr	r2, [pc, #148]	; (8010f94 <Restore+0xbc>)
 8010efe:	00db      	lsls	r3, r3, #3
 8010f00:	4413      	add	r3, r2
 8010f02:	799b      	ldrb	r3, [r3, #6]
 8010f04:	4a25      	ldr	r2, [pc, #148]	; (8010f9c <Restore+0xc4>)
 8010f06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	4a24      	ldr	r2, [pc, #144]	; (8010fa0 <Restore+0xc8>)
 8010f0e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010f12:	4610      	mov	r0, r2
 8010f14:	f043 0320 	orr.w	r3, r3, #32
 8010f18:	b2d9      	uxtb	r1, r3
 8010f1a:	4a1e      	ldr	r2, [pc, #120]	; (8010f94 <Restore+0xbc>)
 8010f1c:	00c3      	lsls	r3, r0, #3
 8010f1e:	4413      	add	r3, r2
 8010f20:	460a      	mov	r2, r1
 8010f22:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8010f24:	2300      	movs	r3, #0
 8010f26:	80fb      	strh	r3, [r7, #6]
 8010f28:	e013      	b.n	8010f52 <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8010f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f32:	491c      	ldr	r1, [pc, #112]	; (8010fa4 <Restore+0xcc>)
 8010f34:	00db      	lsls	r3, r3, #3
 8010f36:	440b      	add	r3, r1
 8010f38:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8010f3c:	4915      	ldr	r1, [pc, #84]	; (8010f94 <Restore+0xbc>)
 8010f3e:	00d3      	lsls	r3, r2, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	4602      	mov	r2, r0
 8010f44:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	80fb      	strh	r3, [r7, #6]
 8010f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f56:	2b29      	cmp	r3, #41	; 0x29
 8010f58:	dde7      	ble.n	8010f2a <Restore+0x52>
   for(i=0;i<8;i++)
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	80fb      	strh	r3, [r7, #6]
 8010f5e:	e00f      	b.n	8010f80 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8010f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f68:	490f      	ldr	r1, [pc, #60]	; (8010fa8 <Restore+0xd0>)
 8010f6a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8010f6e:	4a0c      	ldr	r2, [pc, #48]	; (8010fa0 <Restore+0xc8>)
 8010f70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	80fb      	strh	r3, [r7, #6]
 8010f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f84:	2b07      	cmp	r3, #7
 8010f86:	ddeb      	ble.n	8010f60 <Restore+0x88>
   Update_Title();
 8010f88:	f000 fdec 	bl	8011b64 <Update_Title>
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	20000274 	.word	0x20000274
 8010f98:	2000252c 	.word	0x2000252c
 8010f9c:	20002654 	.word	0x20002654
 8010fa0:	20000514 	.word	0x20000514
 8010fa4:	200003c4 	.word	0x200003c4
 8010fa8:	08001f94 	.word	0x08001f94

08010fac <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
   short i = 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8010fb6:	4b47      	ldr	r3, [pc, #284]	; (80110d4 <Restore_CalPar+0x128>)
 8010fb8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010fbc:	f043 0320 	orr.w	r3, r3, #32
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	4b44      	ldr	r3, [pc, #272]	; (80110d4 <Restore_CalPar+0x128>)
 8010fc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010fc8:	4b42      	ldr	r3, [pc, #264]	; (80110d4 <Restore_CalPar+0x128>)
 8010fca:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010fce:	4b42      	ldr	r3, [pc, #264]	; (80110d8 <Restore_CalPar+0x12c>)
 8010fd0:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010fd2:	4b40      	ldr	r3, [pc, #256]	; (80110d4 <Restore_CalPar+0x128>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8010fd8:	4b40      	ldr	r3, [pc, #256]	; (80110dc <Restore_CalPar+0x130>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010fde:	4b3f      	ldr	r3, [pc, #252]	; (80110dc <Restore_CalPar+0x130>)
 8010fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4b3e      	ldr	r3, [pc, #248]	; (80110e0 <Restore_CalPar+0x134>)
 8010fe8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010fec:	4a39      	ldr	r2, [pc, #228]	; (80110d4 <Restore_CalPar+0x128>)
 8010fee:	00db      	lsls	r3, r3, #3
 8010ff0:	4413      	add	r3, r2
 8010ff2:	799b      	ldrb	r3, [r3, #6]
 8010ff4:	4a39      	ldr	r2, [pc, #228]	; (80110dc <Restore_CalPar+0x130>)
 8010ff6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010ffa:	4611      	mov	r1, r2
 8010ffc:	4a38      	ldr	r2, [pc, #224]	; (80110e0 <Restore_CalPar+0x134>)
 8010ffe:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8011002:	4610      	mov	r0, r2
 8011004:	f043 0320 	orr.w	r3, r3, #32
 8011008:	b2d9      	uxtb	r1, r3
 801100a:	4a32      	ldr	r2, [pc, #200]	; (80110d4 <Restore_CalPar+0x128>)
 801100c:	00c3      	lsls	r3, r0, #3
 801100e:	4413      	add	r3, r2
 8011010:	460a      	mov	r2, r1
 8011012:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011014:	2300      	movs	r3, #0
 8011016:	80fb      	strh	r3, [r7, #6]
 8011018:	e013      	b.n	8011042 <Restore_CalPar+0x96>
 801101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801101e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011022:	4930      	ldr	r1, [pc, #192]	; (80110e4 <Restore_CalPar+0x138>)
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	440b      	add	r3, r1
 8011028:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 801102c:	4929      	ldr	r1, [pc, #164]	; (80110d4 <Restore_CalPar+0x128>)
 801102e:	00d3      	lsls	r3, r2, #3
 8011030:	440b      	add	r3, r1
 8011032:	4602      	mov	r2, r0
 8011034:	809a      	strh	r2, [r3, #4]
 8011036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801103a:	b29b      	uxth	r3, r3
 801103c:	3301      	adds	r3, #1
 801103e:	b29b      	uxth	r3, r3
 8011040:	80fb      	strh	r3, [r7, #6]
 8011042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011046:	2b29      	cmp	r3, #41	; 0x29
 8011048:	dde7      	ble.n	801101a <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 801104a:	2300      	movs	r3, #0
 801104c:	80fb      	strh	r3, [r7, #6]
 801104e:	e00f      	b.n	8011070 <Restore_CalPar+0xc4>
 8011050:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011058:	4923      	ldr	r1, [pc, #140]	; (80110e8 <Restore_CalPar+0x13c>)
 801105a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801105e:	4a20      	ldr	r2, [pc, #128]	; (80110e0 <Restore_CalPar+0x134>)
 8011060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011068:	b29b      	uxth	r3, r3
 801106a:	3301      	adds	r3, #1
 801106c:	b29b      	uxth	r3, r3
 801106e:	80fb      	strh	r3, [r7, #6]
 8011070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011074:	2b07      	cmp	r3, #7
 8011076:	ddeb      	ble.n	8011050 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011078:	4b16      	ldr	r3, [pc, #88]	; (80110d4 <Restore_CalPar+0x128>)
 801107a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801107e:	4b16      	ldr	r3, [pc, #88]	; (80110d8 <Restore_CalPar+0x12c>)
 8011080:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8011082:	4b14      	ldr	r3, [pc, #80]	; (80110d4 <Restore_CalPar+0x128>)
 8011084:	2200      	movs	r2, #0
 8011086:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011088:	2300      	movs	r3, #0
 801108a:	80fb      	strh	r3, [r7, #6]
 801108c:	e015      	b.n	80110ba <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 801108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011092:	4a10      	ldr	r2, [pc, #64]	; (80110d4 <Restore_CalPar+0x128>)
 8011094:	00db      	lsls	r3, r3, #3
 8011096:	4413      	add	r3, r2
 8011098:	799a      	ldrb	r2, [r3, #6]
 801109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801109e:	f042 0220 	orr.w	r2, r2, #32
 80110a2:	b2d1      	uxtb	r1, r2
 80110a4:	4a0b      	ldr	r2, [pc, #44]	; (80110d4 <Restore_CalPar+0x128>)
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	4413      	add	r3, r2
 80110aa:	460a      	mov	r2, r1
 80110ac:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 80110ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	3301      	adds	r3, #1
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	80fb      	strh	r3, [r7, #6]
 80110ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110be:	2b29      	cmp	r3, #41	; 0x29
 80110c0:	dde5      	ble.n	801108e <Restore_CalPar+0xe2>
   }
   Update_Title();
 80110c2:	f000 fd4f 	bl	8011b64 <Update_Title>
   Close_Pop();
 80110c6:	f7fd fd09 	bl	800eadc <Close_Pop>
 }
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20000274 	.word	0x20000274
 80110d8:	2000252c 	.word	0x2000252c
 80110dc:	20002654 	.word	0x20002654
 80110e0:	20000514 	.word	0x20000514
 80110e4:	200003c4 	.word	0x200003c4
 80110e8:	08001f94 	.word	0x08001f94

080110ec <u8ToDec3>:

/*******************************************************************************
 u8ToDec3: Change Byte to 3 decimal number string
*******************************************************************************/
void u8ToDec3(char *p, char n)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/100;
 80110f8:	78fb      	ldrb	r3, [r7, #3]
 80110fa:	4a1e      	ldr	r2, [pc, #120]	; (8011174 <u8ToDec3+0x88>)
 80110fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011100:	095b      	lsrs	r3, r3, #5
 8011102:	b2da      	uxtb	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	1c59      	adds	r1, r3, #1
 8011108:	6079      	str	r1, [r7, #4]
 801110a:	3230      	adds	r2, #48	; 0x30
 801110c:	b2d2      	uxtb	r2, r2
 801110e:	701a      	strb	r2, [r3, #0]
    n %= 100;
 8011110:	78fb      	ldrb	r3, [r7, #3]
 8011112:	4a18      	ldr	r2, [pc, #96]	; (8011174 <u8ToDec3+0x88>)
 8011114:	fba2 1203 	umull	r1, r2, r2, r3
 8011118:	0952      	lsrs	r2, r2, #5
 801111a:	2164      	movs	r1, #100	; 0x64
 801111c:	fb01 f202 	mul.w	r2, r1, r2
 8011120:	1a9b      	subs	r3, r3, r2
 8011122:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/10;
 8011124:	78fb      	ldrb	r3, [r7, #3]
 8011126:	4a14      	ldr	r2, [pc, #80]	; (8011178 <u8ToDec3+0x8c>)
 8011128:	fba2 2303 	umull	r2, r3, r2, r3
 801112c:	08db      	lsrs	r3, r3, #3
 801112e:	b2da      	uxtb	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	1c59      	adds	r1, r3, #1
 8011134:	6079      	str	r1, [r7, #4]
 8011136:	3230      	adds	r2, #48	; 0x30
 8011138:	b2d2      	uxtb	r2, r2
 801113a:	701a      	strb	r2, [r3, #0]
    n %= 10;
 801113c:	78fa      	ldrb	r2, [r7, #3]
 801113e:	4b0e      	ldr	r3, [pc, #56]	; (8011178 <u8ToDec3+0x8c>)
 8011140:	fba3 1302 	umull	r1, r3, r3, r2
 8011144:	08d9      	lsrs	r1, r3, #3
 8011146:	460b      	mov	r3, r1
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	440b      	add	r3, r1
 801114c:	005b      	lsls	r3, r3, #1
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	1c5a      	adds	r2, r3, #1
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	3230      	adds	r2, #48	; 0x30
 801115c:	b2d2      	uxtb	r2, r2
 801115e:	701a      	strb	r2, [r3, #0]
    *p = 0;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2200      	movs	r2, #0
 8011164:	701a      	strb	r2, [r3, #0]
}
 8011166:	bf00      	nop
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	51eb851f 	.word	0x51eb851f
 8011178:	cccccccd 	.word	0xcccccccd

0801117c <memset16>:

// 16 bit memset

void memset16(unsigned short* ptr, unsigned short value, short len)
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	807b      	strh	r3, [r7, #2]
 8011188:	4613      	mov	r3, r2
 801118a:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 801118c:	e00a      	b.n	80111a4 <memset16+0x28>
	{
		*ptr++ = value;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	1c9a      	adds	r2, r3, #2
 8011192:	607a      	str	r2, [r7, #4]
 8011194:	887a      	ldrh	r2, [r7, #2]
 8011196:	801a      	strh	r2, [r3, #0]
		len--;
 8011198:	f9b7 3000 	ldrsh.w	r3, [r7]
 801119c:	b29b      	uxth	r3, r3
 801119e:	3b01      	subs	r3, #1
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 80111a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1f0      	bne.n	801118e <memset16+0x12>
	}
}
 80111ac:	bf00      	nop
 80111ae:	bf00      	nop
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
	...

080111bc <Value2Str>:

/*******************************************************************************
 Value2Str: 32λ��תeλ��Ч���ַ��� + �����ַ������ṹΪUnit[][6]��+  ģʽ
*******************************************************************************/
void Value2Str(char *p, long n, const char *pUnit, char e, char Mode)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b088      	sub	sp, #32
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
 80111c8:	70fb      	strb	r3, [r7, #3]
  short i = 0;
 80111ca:	2300      	movs	r3, #0
 80111cc:	83fb      	strh	r3, [r7, #30]
  long m = n, c = 5;
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	61bb      	str	r3, [r7, #24]
 80111d2:	2305      	movs	r3, #5
 80111d4:	617b      	str	r3, [r7, #20]

  if(Mode == SIGN)
 80111d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d129      	bne.n	8011232 <Value2Str+0x76>
  {
    if(n == 0) *p++ = ' ';
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d104      	bne.n	80111ee <Value2Str+0x32>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	1c5a      	adds	r2, r3, #1
 80111e8:	60fa      	str	r2, [r7, #12]
 80111ea:	2220      	movs	r2, #32
 80111ec:	701a      	strb	r2, [r3, #0]
    if(n >  0) *p++ = '+';
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dd04      	ble.n	80111fe <Value2Str+0x42>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	1c5a      	adds	r2, r3, #1
 80111f8:	60fa      	str	r2, [r7, #12]
 80111fa:	222b      	movs	r2, #43	; 0x2b
 80111fc:	701a      	strb	r2, [r3, #0]
    if(n <  0){*p++ = '-'; n = -n;}
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	da16      	bge.n	8011232 <Value2Str+0x76>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	1c5a      	adds	r2, r3, #1
 8011208:	60fa      	str	r2, [r7, #12]
 801120a:	222d      	movs	r2, #45	; 0x2d
 801120c:	701a      	strb	r2, [r3, #0]
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	425b      	negs	r3, r3
 8011212:	60bb      	str	r3, [r7, #8]
  }
  while(m >= 10){m /= 10; i++;} // ���� n ����Чλ�� i
 8011214:	e00d      	b.n	8011232 <Value2Str+0x76>
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	4a64      	ldr	r2, [pc, #400]	; (80113ac <Value2Str+0x1f0>)
 801121a:	fb82 1203 	smull	r1, r2, r2, r3
 801121e:	1092      	asrs	r2, r2, #2
 8011220:	17db      	asrs	r3, r3, #31
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	61bb      	str	r3, [r7, #24]
 8011226:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801122a:	b29b      	uxth	r3, r3
 801122c:	3301      	adds	r3, #1
 801122e:	b29b      	uxth	r3, r3
 8011230:	83fb      	strh	r3, [r7, #30]
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	2b09      	cmp	r3, #9
 8011236:	dcee      	bgt.n	8011216 <Value2Str+0x5a>
  if((i%3 == 2)&&(e == 2)) e++;
 8011238:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801123c:	4b5c      	ldr	r3, [pc, #368]	; (80113b0 <Value2Str+0x1f4>)
 801123e:	fb83 3102 	smull	r3, r1, r3, r2
 8011242:	17d3      	asrs	r3, r2, #31
 8011244:	1ac9      	subs	r1, r1, r3
 8011246:	460b      	mov	r3, r1
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	440b      	add	r3, r1
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	b21b      	sxth	r3, r3
 8011250:	2b02      	cmp	r3, #2
 8011252:	d105      	bne.n	8011260 <Value2Str+0xa4>
 8011254:	78fb      	ldrb	r3, [r7, #3]
 8011256:	2b02      	cmp	r3, #2
 8011258:	d102      	bne.n	8011260 <Value2Str+0xa4>
 801125a:	78fb      	ldrb	r3, [r7, #3]
 801125c:	3301      	adds	r3, #1
 801125e:	70fb      	strb	r3, [r7, #3]
  m = n; i = 0;
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	61bb      	str	r3, [r7, #24]
 8011264:	2300      	movs	r3, #0
 8011266:	83fb      	strh	r3, [r7, #30]
  while(m >= 10)
 8011268:	e016      	b.n	8011298 <Value2Str+0xdc>
  {
    m /= 10;
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	4a4f      	ldr	r2, [pc, #316]	; (80113ac <Value2Str+0x1f0>)
 801126e:	fb82 1203 	smull	r1, r2, r2, r3
 8011272:	1092      	asrs	r2, r2, #2
 8011274:	17db      	asrs	r3, r3, #31
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	61bb      	str	r3, [r7, #24]
    if(++i > e) c *= 10;        // n ����Чλ�� i ����e�������������ֵ
 801127a:	8bfb      	ldrh	r3, [r7, #30]
 801127c:	3301      	adds	r3, #1
 801127e:	b29b      	uxth	r3, r3
 8011280:	83fb      	strh	r3, [r7, #30]
 8011282:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011286:	78fb      	ldrb	r3, [r7, #3]
 8011288:	429a      	cmp	r2, r3
 801128a:	dd05      	ble.n	8011298 <Value2Str+0xdc>
 801128c:	697a      	ldr	r2, [r7, #20]
 801128e:	4613      	mov	r3, r2
 8011290:	009b      	lsls	r3, r3, #2
 8011292:	4413      	add	r3, r2
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	617b      	str	r3, [r7, #20]
  while(m >= 10)
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	2b09      	cmp	r3, #9
 801129c:	dce5      	bgt.n	801126a <Value2Str+0xae>
  }
  if(i >= e) n += c;            // n ������������ֵ
 801129e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80112a2:	78fb      	ldrb	r3, [r7, #3]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	db03      	blt.n	80112b0 <Value2Str+0xf4>
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	4413      	add	r3, r2
 80112ae:	60bb      	str	r3, [r7, #8]
  m = n; i = 0;
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	61bb      	str	r3, [r7, #24]
 80112b4:	2300      	movs	r3, #0
 80112b6:	83fb      	strh	r3, [r7, #30]
  while(m >= 10){m /= 10; i++;} // ���¼��� n ����Чλ�� i
 80112b8:	e00d      	b.n	80112d6 <Value2Str+0x11a>
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	4a3b      	ldr	r2, [pc, #236]	; (80113ac <Value2Str+0x1f0>)
 80112be:	fb82 1203 	smull	r1, r2, r2, r3
 80112c2:	1092      	asrs	r2, r2, #2
 80112c4:	17db      	asrs	r3, r3, #31
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	61bb      	str	r3, [r7, #24]
 80112ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	3301      	adds	r3, #1
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	83fb      	strh	r3, [r7, #30]
 80112d6:	69bb      	ldr	r3, [r7, #24]
 80112d8:	2b09      	cmp	r3, #9
 80112da:	dcee      	bgt.n	80112ba <Value2Str+0xfe>

  m = i/3;                      // �������ٵ�λȡֵƫ����
 80112dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112e0:	4a33      	ldr	r2, [pc, #204]	; (80113b0 <Value2Str+0x1f4>)
 80112e2:	fb82 1203 	smull	r1, r2, r2, r3
 80112e6:	17db      	asrs	r3, r3, #31
 80112e8:	1ad3      	subs	r3, r2, r3
 80112ea:	b21b      	sxth	r3, r3
 80112ec:	61bb      	str	r3, [r7, #24]
  while(e--)
 80112ee:	e03e      	b.n	801136e <Value2Str+0x1b2>
  {
    *p++ = '0'+ n/Exp(i);
 80112f0:	8bfb      	ldrh	r3, [r7, #30]
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 f85d 	bl	80113b4 <Exp>
 80112fa:	4602      	mov	r2, r0
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8011302:	b2da      	uxtb	r2, r3
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	1c59      	adds	r1, r3, #1
 8011308:	60f9      	str	r1, [r7, #12]
 801130a:	3230      	adds	r2, #48	; 0x30
 801130c:	b2d2      	uxtb	r2, r2
 801130e:	701a      	strb	r2, [r3, #0]
    if(e &&(i%3 == 0)) *p++ = '.';
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d012      	beq.n	801133c <Value2Str+0x180>
 8011316:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801131a:	4b25      	ldr	r3, [pc, #148]	; (80113b0 <Value2Str+0x1f4>)
 801131c:	fb83 3102 	smull	r3, r1, r3, r2
 8011320:	17d3      	asrs	r3, r2, #31
 8011322:	1ac9      	subs	r1, r1, r3
 8011324:	460b      	mov	r3, r1
 8011326:	005b      	lsls	r3, r3, #1
 8011328:	440b      	add	r3, r1
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	b21b      	sxth	r3, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	d104      	bne.n	801133c <Value2Str+0x180>
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	1c5a      	adds	r2, r3, #1
 8011336:	60fa      	str	r2, [r7, #12]
 8011338:	222e      	movs	r2, #46	; 0x2e
 801133a:	701a      	strb	r2, [r3, #0]
    n = (i < 0)? 0 : n%Exp(i);
 801133c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011340:	2b00      	cmp	r3, #0
 8011342:	db0c      	blt.n	801135e <Value2Str+0x1a2>
 8011344:	8bfb      	ldrh	r3, [r7, #30]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	4618      	mov	r0, r3
 801134a:	f000 f833 	bl	80113b4 <Exp>
 801134e:	4602      	mov	r2, r0
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	fb93 f1f2 	sdiv	r1, r3, r2
 8011356:	fb01 f202 	mul.w	r2, r1, r2
 801135a:	1a9b      	subs	r3, r3, r2
 801135c:	e000      	b.n	8011360 <Value2Str+0x1a4>
 801135e:	2300      	movs	r3, #0
 8011360:	60bb      	str	r3, [r7, #8]
    i--;
 8011362:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011366:	b29b      	uxth	r3, r3
 8011368:	3b01      	subs	r3, #1
 801136a:	b29b      	uxth	r3, r3
 801136c:	83fb      	strh	r3, [r7, #30]
  while(e--)
 801136e:	78fb      	ldrb	r3, [r7, #3]
 8011370:	1e5a      	subs	r2, r3, #1
 8011372:	70fa      	strb	r2, [r7, #3]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d1bb      	bne.n	80112f0 <Value2Str+0x134>
  }
  pUnit += 6*m;                 //
 8011378:	69ba      	ldr	r2, [r7, #24]
 801137a:	4613      	mov	r3, r2
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	4413      	add	r3, r2
 8011380:	005b      	lsls	r3, r3, #1
 8011382:	461a      	mov	r2, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4413      	add	r3, r2
 8011388:	607b      	str	r3, [r7, #4]
  do {*p++ = *pUnit;}
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	1c5a      	adds	r2, r3, #1
 801138e:	60fa      	str	r2, [r7, #12]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	7812      	ldrb	r2, [r2, #0]
 8011394:	701a      	strb	r2, [r3, #0]
  while(*pUnit++);              // ���������ַ��ַ���
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	607a      	str	r2, [r7, #4]
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d1f3      	bne.n	801138a <Value2Str+0x1ce>
}
 80113a2:	bf00      	nop
 80113a4:	bf00      	nop
 80113a6:	3720      	adds	r7, #32
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	66666667 	.word	0x66666667
 80113b0:	55555556 	.word	0x55555556

080113b4 <Exp>:

/*******************************************************************************
  ���� 10 �� x �η�
*******************************************************************************/
long Exp(char x)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	4603      	mov	r3, r0
 80113bc:	71fb      	strb	r3, [r7, #7]
  long m = 1;
 80113be:	2301      	movs	r3, #1
 80113c0:	60fb      	str	r3, [r7, #12]

  while(x--)
 80113c2:	e005      	b.n	80113d0 <Exp+0x1c>
	  m *= 10;
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	4613      	mov	r3, r2
 80113c8:	009b      	lsls	r3, r3, #2
 80113ca:	4413      	add	r3, r2
 80113cc:	005b      	lsls	r3, r3, #1
 80113ce:	60fb      	str	r3, [r7, #12]
  while(x--)
 80113d0:	79fb      	ldrb	r3, [r7, #7]
 80113d2:	1e5a      	subs	r2, r3, #1
 80113d4:	71fa      	strb	r2, [r7, #7]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1f4      	bne.n	80113c4 <Exp+0x10>
  return m;
 80113da:	68fb      	ldr	r3, [r7, #12]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <Sqrt32>:

/*******************************************************************************
 Int_sqrt: unsigned int square root
*******************************************************************************/
short Sqrt32(int n)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
	int k;
  if ( n == 0 ) return 0;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <Sqrt32+0x12>
 80113f6:	2300      	movs	r3, #0
 80113f8:	e019      	b.n	801142e <Sqrt32+0x46>
  k = 2*Sqrt32(n/4)+1;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	da00      	bge.n	8011402 <Sqrt32+0x1a>
 8011400:	3303      	adds	r3, #3
 8011402:	109b      	asrs	r3, r3, #2
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff ffef 	bl	80113e8 <Sqrt32>
 801140a:	4603      	mov	r3, r0
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	3301      	adds	r3, #1
 8011410:	60fb      	str	r3, [r7, #12]
  if ( k*k > n ) return k-1;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	fb03 f303 	mul.w	r3, r3, r3
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	429a      	cmp	r2, r3
 801141c:	da05      	bge.n	801142a <Sqrt32+0x42>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	3b01      	subs	r3, #1
 8011424:	b29b      	uxth	r3, r3
 8011426:	b21b      	sxth	r3, r3
 8011428:	e001      	b.n	801142e <Sqrt32+0x46>
  else return k;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	b21b      	sxth	r3, r3
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <u16ToDec4Str>:

/*******************************************************************************
 u16ToDec4Str: �޷���16λ��������ת4λʮ�����ַ�������Ч����ǰ��ո�
*******************************************************************************/
void u16ToDec4Str(char *p, short n)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	807b      	strh	r3, [r7, #2]
  if(n/10000){
 8011444:	887b      	ldrh	r3, [r7, #2]
 8011446:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 801144a:	330f      	adds	r3, #15
 801144c:	b29b      	uxth	r3, r3
 801144e:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011452:	4293      	cmp	r3, r2
 8011454:	d917      	bls.n	8011486 <u16ToDec4Str+0x4e>
    *p++ = 'O';
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	607a      	str	r2, [r7, #4]
 801145c:	224f      	movs	r2, #79	; 0x4f
 801145e:	701a      	strb	r2, [r3, #0]
    *p++ = 'v';
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	1c5a      	adds	r2, r3, #1
 8011464:	607a      	str	r2, [r7, #4]
 8011466:	2276      	movs	r2, #118	; 0x76
 8011468:	701a      	strb	r2, [r3, #0]
    *p++ = 'e';
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	2265      	movs	r2, #101	; 0x65
 8011472:	701a      	strb	r2, [r3, #0]
    *p++ = 'r';
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	1c5a      	adds	r2, r3, #1
 8011478:	607a      	str	r2, [r7, #4]
 801147a:	2272      	movs	r2, #114	; 0x72
 801147c:	701a      	strb	r2, [r3, #0]
    *p   = 0;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2200      	movs	r2, #0
 8011482:	701a      	strb	r2, [r3, #0]
    return;
 8011484:	e07e      	b.n	8011584 <u16ToDec4Str+0x14c>
  }
  *p++ = '0'+n/1000;
 8011486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801148a:	4a41      	ldr	r2, [pc, #260]	; (8011590 <u16ToDec4Str+0x158>)
 801148c:	fb82 1203 	smull	r1, r2, r2, r3
 8011490:	1192      	asrs	r2, r2, #6
 8011492:	17db      	asrs	r3, r3, #31
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	b21b      	sxth	r3, r3
 8011498:	b2da      	uxtb	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	1c59      	adds	r1, r3, #1
 801149e:	6079      	str	r1, [r7, #4]
 80114a0:	3230      	adds	r2, #48	; 0x30
 80114a2:	b2d2      	uxtb	r2, r2
 80114a4:	701a      	strb	r2, [r3, #0]
  n %= 1000;
 80114a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114aa:	4a39      	ldr	r2, [pc, #228]	; (8011590 <u16ToDec4Str+0x158>)
 80114ac:	fb82 1203 	smull	r1, r2, r2, r3
 80114b0:	1191      	asrs	r1, r2, #6
 80114b2:	17da      	asrs	r2, r3, #31
 80114b4:	1a8a      	subs	r2, r1, r2
 80114b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80114ba:	fb01 f202 	mul.w	r2, r1, r2
 80114be:	1a9b      	subs	r3, r3, r2
 80114c0:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/100;
 80114c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114c6:	4a33      	ldr	r2, [pc, #204]	; (8011594 <u16ToDec4Str+0x15c>)
 80114c8:	fb82 1203 	smull	r1, r2, r2, r3
 80114cc:	1152      	asrs	r2, r2, #5
 80114ce:	17db      	asrs	r3, r3, #31
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	1c59      	adds	r1, r3, #1
 80114da:	6079      	str	r1, [r7, #4]
 80114dc:	3230      	adds	r2, #48	; 0x30
 80114de:	b2d2      	uxtb	r2, r2
 80114e0:	701a      	strb	r2, [r3, #0]
  n %= 100;
 80114e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114e6:	4a2b      	ldr	r2, [pc, #172]	; (8011594 <u16ToDec4Str+0x15c>)
 80114e8:	fb82 1203 	smull	r1, r2, r2, r3
 80114ec:	1151      	asrs	r1, r2, #5
 80114ee:	17da      	asrs	r2, r3, #31
 80114f0:	1a8a      	subs	r2, r1, r2
 80114f2:	2164      	movs	r1, #100	; 0x64
 80114f4:	fb01 f202 	mul.w	r2, r1, r2
 80114f8:	1a9b      	subs	r3, r3, r2
 80114fa:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/10;
 80114fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011500:	4a25      	ldr	r2, [pc, #148]	; (8011598 <u16ToDec4Str+0x160>)
 8011502:	fb82 1203 	smull	r1, r2, r2, r3
 8011506:	1092      	asrs	r2, r2, #2
 8011508:	17db      	asrs	r3, r3, #31
 801150a:	1ad3      	subs	r3, r2, r3
 801150c:	b21b      	sxth	r3, r3
 801150e:	b2da      	uxtb	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	1c59      	adds	r1, r3, #1
 8011514:	6079      	str	r1, [r7, #4]
 8011516:	3230      	adds	r2, #48	; 0x30
 8011518:	b2d2      	uxtb	r2, r2
 801151a:	701a      	strb	r2, [r3, #0]
  n %= 10;
 801151c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011520:	4b1d      	ldr	r3, [pc, #116]	; (8011598 <u16ToDec4Str+0x160>)
 8011522:	fb83 1302 	smull	r1, r3, r3, r2
 8011526:	1099      	asrs	r1, r3, #2
 8011528:	17d3      	asrs	r3, r2, #31
 801152a:	1ac9      	subs	r1, r1, r3
 801152c:	460b      	mov	r3, r1
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	440b      	add	r3, r1
 8011532:	005b      	lsls	r3, r3, #1
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n;
 8011538:	887b      	ldrh	r3, [r7, #2]
 801153a:	b2da      	uxtb	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	1c59      	adds	r1, r3, #1
 8011540:	6079      	str	r1, [r7, #4]
 8011542:	3230      	adds	r2, #48	; 0x30
 8011544:	b2d2      	uxtb	r2, r2
 8011546:	701a      	strb	r2, [r3, #0]
  *p = 0;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	701a      	strb	r2, [r3, #0]
  if(p[-4] == '0'){
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3b04      	subs	r3, #4
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	2b30      	cmp	r3, #48	; 0x30
 8011556:	d115      	bne.n	8011584 <u16ToDec4Str+0x14c>
    p[-4] = ' ';
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	3b04      	subs	r3, #4
 801155c:	2220      	movs	r2, #32
 801155e:	701a      	strb	r2, [r3, #0]
    if(p[-3] == '0'){
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	3b03      	subs	r3, #3
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	2b30      	cmp	r3, #48	; 0x30
 8011568:	d10c      	bne.n	8011584 <u16ToDec4Str+0x14c>
      p[-3] = ' ';
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	3b03      	subs	r3, #3
 801156e:	2220      	movs	r2, #32
 8011570:	701a      	strb	r2, [r3, #0]
      if(p[-2] == '0') p[-2] = ' ';
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	3b02      	subs	r3, #2
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b30      	cmp	r3, #48	; 0x30
 801157a:	d103      	bne.n	8011584 <u16ToDec4Str+0x14c>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	3b02      	subs	r3, #2
 8011580:	2220      	movs	r2, #32
 8011582:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	10624dd3 	.word	0x10624dd3
 8011594:	51eb851f 	.word	0x51eb851f
 8011598:	66666667 	.word	0x66666667

0801159c <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	603a      	str	r2, [r7, #0]
 80115a6:	80fb      	strh	r3, [r7, #6]
 80115a8:	460b      	mov	r3, r1
 80115aa:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 80115ac:	2200      	movs	r2, #0
 80115ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115b2:	480e      	ldr	r0, [pc, #56]	; (80115ec <lcd_write_cmd_data+0x50>)
 80115b4:	f008 f978 	bl	80198a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 80115b8:	1db9      	adds	r1, r7, #6
 80115ba:	2301      	movs	r3, #1
 80115bc:	2201      	movs	r2, #1
 80115be:	480c      	ldr	r0, [pc, #48]	; (80115f0 <lcd_write_cmd_data+0x54>)
 80115c0:	f00a fdbf 	bl	801c142 <HAL_SPI_Transmit>

	if(Len !=0)
 80115c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00b      	beq.n	80115e4 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 80115cc:	2201      	movs	r2, #1
 80115ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115d2:	4806      	ldr	r0, [pc, #24]	; (80115ec <lcd_write_cmd_data+0x50>)
 80115d4:	f008 f968 	bl	80198a8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 80115d8:	88ba      	ldrh	r2, [r7, #4]
 80115da:	2301      	movs	r3, #1
 80115dc:	6839      	ldr	r1, [r7, #0]
 80115de:	4804      	ldr	r0, [pc, #16]	; (80115f0 <lcd_write_cmd_data+0x54>)
 80115e0:	f00a fdaf 	bl	801c142 <HAL_SPI_Transmit>
	}
}
 80115e4:	bf00      	nop
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	40020800 	.word	0x40020800
 80115f0:	20006868 	.word	0x20006868

080115f4 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80115f8:	2200      	movs	r2, #0
 80115fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80115fe:	4885      	ldr	r0, [pc, #532]	; (8011814 <Init_LCD+0x220>)
 8011600:	f008 f952 	bl	80198a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011604:	2201      	movs	r2, #1
 8011606:	f44f 7100 	mov.w	r1, #512	; 0x200
 801160a:	4883      	ldr	r0, [pc, #524]	; (8011818 <Init_LCD+0x224>)
 801160c:	f008 f94c 	bl	80198a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011610:	2001      	movs	r0, #1
 8011612:	f006 fd6b 	bl	80180ec <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011616:	2200      	movs	r2, #0
 8011618:	f44f 7100 	mov.w	r1, #512	; 0x200
 801161c:	487e      	ldr	r0, [pc, #504]	; (8011818 <Init_LCD+0x224>)
 801161e:	f008 f943 	bl	80198a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011622:	200a      	movs	r0, #10
 8011624:	f006 fd62 	bl	80180ec <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011628:	2201      	movs	r2, #1
 801162a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801162e:	487a      	ldr	r0, [pc, #488]	; (8011818 <Init_LCD+0x224>)
 8011630:	f008 f93a 	bl	80198a8 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011634:	2078      	movs	r0, #120	; 0x78
 8011636:	f006 fd59 	bl	80180ec <HAL_Delay>

	data[0]=0;
 801163a:	4b78      	ldr	r3, [pc, #480]	; (801181c <Init_LCD+0x228>)
 801163c:	2200      	movs	r2, #0
 801163e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011640:	4a76      	ldr	r2, [pc, #472]	; (801181c <Init_LCD+0x228>)
 8011642:	2101      	movs	r1, #1
 8011644:	20b0      	movs	r0, #176	; 0xb0
 8011646:	f7ff ffa9 	bl	801159c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 801164a:	4a74      	ldr	r2, [pc, #464]	; (801181c <Init_LCD+0x228>)
 801164c:	2100      	movs	r1, #0
 801164e:	2011      	movs	r0, #17
 8011650:	f7ff ffa4 	bl	801159c <lcd_write_cmd_data>
	HAL_Delay(120);
 8011654:	2078      	movs	r0, #120	; 0x78
 8011656:	f006 fd49 	bl	80180ec <HAL_Delay>
	data[0]=0x55;
 801165a:	4b70      	ldr	r3, [pc, #448]	; (801181c <Init_LCD+0x228>)
 801165c:	2255      	movs	r2, #85	; 0x55
 801165e:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011660:	4a6e      	ldr	r2, [pc, #440]	; (801181c <Init_LCD+0x228>)
 8011662:	2101      	movs	r1, #1
 8011664:	203a      	movs	r0, #58	; 0x3a
 8011666:	f7ff ff99 	bl	801159c <lcd_write_cmd_data>
	data[0]=data[1]=9;
 801166a:	4b6c      	ldr	r3, [pc, #432]	; (801181c <Init_LCD+0x228>)
 801166c:	2209      	movs	r2, #9
 801166e:	805a      	strh	r2, [r3, #2]
 8011670:	4b6a      	ldr	r3, [pc, #424]	; (801181c <Init_LCD+0x228>)
 8011672:	885a      	ldrh	r2, [r3, #2]
 8011674:	4b69      	ldr	r3, [pc, #420]	; (801181c <Init_LCD+0x228>)
 8011676:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011678:	4a68      	ldr	r2, [pc, #416]	; (801181c <Init_LCD+0x228>)
 801167a:	2102      	movs	r1, #2
 801167c:	20c0      	movs	r0, #192	; 0xc0
 801167e:	f7ff ff8d 	bl	801159c <lcd_write_cmd_data>
	data[0]= 0x41;
 8011682:	4b66      	ldr	r3, [pc, #408]	; (801181c <Init_LCD+0x228>)
 8011684:	2241      	movs	r2, #65	; 0x41
 8011686:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011688:	4b64      	ldr	r3, [pc, #400]	; (801181c <Init_LCD+0x228>)
 801168a:	2200      	movs	r2, #0
 801168c:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 801168e:	4a63      	ldr	r2, [pc, #396]	; (801181c <Init_LCD+0x228>)
 8011690:	2102      	movs	r1, #2
 8011692:	20c1      	movs	r0, #193	; 0xc1
 8011694:	f7ff ff82 	bl	801159c <lcd_write_cmd_data>
	data[0]= 0x33;
 8011698:	4b60      	ldr	r3, [pc, #384]	; (801181c <Init_LCD+0x228>)
 801169a:	2233      	movs	r2, #51	; 0x33
 801169c:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 801169e:	4a5f      	ldr	r2, [pc, #380]	; (801181c <Init_LCD+0x228>)
 80116a0:	2101      	movs	r1, #1
 80116a2:	20c2      	movs	r0, #194	; 0xc2
 80116a4:	f7ff ff7a 	bl	801159c <lcd_write_cmd_data>
	data[0]=data[1]=0;
 80116a8:	4b5c      	ldr	r3, [pc, #368]	; (801181c <Init_LCD+0x228>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	805a      	strh	r2, [r3, #2]
 80116ae:	4b5b      	ldr	r3, [pc, #364]	; (801181c <Init_LCD+0x228>)
 80116b0:	885a      	ldrh	r2, [r3, #2]
 80116b2:	4b5a      	ldr	r3, [pc, #360]	; (801181c <Init_LCD+0x228>)
 80116b4:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 80116b6:	4b59      	ldr	r3, [pc, #356]	; (801181c <Init_LCD+0x228>)
 80116b8:	2200      	movs	r2, #0
 80116ba:	80da      	strh	r2, [r3, #6]
 80116bc:	4b57      	ldr	r3, [pc, #348]	; (801181c <Init_LCD+0x228>)
 80116be:	88da      	ldrh	r2, [r3, #6]
 80116c0:	4b56      	ldr	r3, [pc, #344]	; (801181c <Init_LCD+0x228>)
 80116c2:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 80116c4:	4a55      	ldr	r2, [pc, #340]	; (801181c <Init_LCD+0x228>)
 80116c6:	2104      	movs	r1, #4
 80116c8:	20c5      	movs	r0, #197	; 0xc5
 80116ca:	f7ff ff67 	bl	801159c <lcd_write_cmd_data>

	data[0]=  0;
 80116ce:	4b53      	ldr	r3, [pc, #332]	; (801181c <Init_LCD+0x228>)
 80116d0:	2200      	movs	r2, #0
 80116d2:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 80116d4:	4a51      	ldr	r2, [pc, #324]	; (801181c <Init_LCD+0x228>)
 80116d6:	2101      	movs	r1, #1
 80116d8:	2036      	movs	r0, #54	; 0x36
 80116da:	f7ff ff5f 	bl	801159c <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 80116de:	4b4f      	ldr	r3, [pc, #316]	; (801181c <Init_LCD+0x228>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	839a      	strh	r2, [r3, #28]
 80116e4:	4b4d      	ldr	r3, [pc, #308]	; (801181c <Init_LCD+0x228>)
 80116e6:	8b9a      	ldrh	r2, [r3, #28]
 80116e8:	4b4c      	ldr	r3, [pc, #304]	; (801181c <Init_LCD+0x228>)
 80116ea:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 80116ec:	4b4b      	ldr	r3, [pc, #300]	; (801181c <Init_LCD+0x228>)
 80116ee:	222c      	movs	r2, #44	; 0x2c
 80116f0:	809a      	strh	r2, [r3, #4]
 80116f2:	4b4a      	ldr	r3, [pc, #296]	; (801181c <Init_LCD+0x228>)
 80116f4:	889a      	ldrh	r2, [r3, #4]
 80116f6:	4b49      	ldr	r3, [pc, #292]	; (801181c <Init_LCD+0x228>)
 80116f8:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 80116fa:	4b48      	ldr	r3, [pc, #288]	; (801181c <Init_LCD+0x228>)
 80116fc:	220b      	movs	r2, #11
 80116fe:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8011700:	4b46      	ldr	r3, [pc, #280]	; (801181c <Init_LCD+0x228>)
 8011702:	220c      	movs	r2, #12
 8011704:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011706:	4b45      	ldr	r3, [pc, #276]	; (801181c <Init_LCD+0x228>)
 8011708:	2204      	movs	r2, #4
 801170a:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 801170c:	4b43      	ldr	r3, [pc, #268]	; (801181c <Init_LCD+0x228>)
 801170e:	224c      	movs	r2, #76	; 0x4c
 8011710:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8011712:	4b42      	ldr	r3, [pc, #264]	; (801181c <Init_LCD+0x228>)
 8011714:	2264      	movs	r2, #100	; 0x64
 8011716:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011718:	4b40      	ldr	r3, [pc, #256]	; (801181c <Init_LCD+0x228>)
 801171a:	2236      	movs	r2, #54	; 0x36
 801171c:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801171e:	4b3f      	ldr	r3, [pc, #252]	; (801181c <Init_LCD+0x228>)
 8011720:	2203      	movs	r2, #3
 8011722:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011724:	4b3d      	ldr	r3, [pc, #244]	; (801181c <Init_LCD+0x228>)
 8011726:	220e      	movs	r2, #14
 8011728:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 801172a:	4b3c      	ldr	r3, [pc, #240]	; (801181c <Init_LCD+0x228>)
 801172c:	222c      	movs	r2, #44	; 0x2c
 801172e:	835a      	strh	r2, [r3, #26]
 8011730:	4b3a      	ldr	r3, [pc, #232]	; (801181c <Init_LCD+0x228>)
 8011732:	8b5a      	ldrh	r2, [r3, #26]
 8011734:	4b39      	ldr	r3, [pc, #228]	; (801181c <Init_LCD+0x228>)
 8011736:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011738:	4b38      	ldr	r3, [pc, #224]	; (801181c <Init_LCD+0x228>)
 801173a:	2210      	movs	r2, #16
 801173c:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 801173e:	4a37      	ldr	r2, [pc, #220]	; (801181c <Init_LCD+0x228>)
 8011740:	210f      	movs	r1, #15
 8011742:	20e0      	movs	r0, #224	; 0xe0
 8011744:	f7ff ff2a 	bl	801159c <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011748:	4b34      	ldr	r3, [pc, #208]	; (801181c <Init_LCD+0x228>)
 801174a:	220f      	movs	r2, #15
 801174c:	839a      	strh	r2, [r3, #28]
 801174e:	4b33      	ldr	r3, [pc, #204]	; (801181c <Init_LCD+0x228>)
 8011750:	8b9a      	ldrh	r2, [r3, #28]
 8011752:	4b32      	ldr	r3, [pc, #200]	; (801181c <Init_LCD+0x228>)
 8011754:	811a      	strh	r2, [r3, #8]
 8011756:	4b31      	ldr	r3, [pc, #196]	; (801181c <Init_LCD+0x228>)
 8011758:	891a      	ldrh	r2, [r3, #8]
 801175a:	4b30      	ldr	r3, [pc, #192]	; (801181c <Init_LCD+0x228>)
 801175c:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 801175e:	4b2f      	ldr	r3, [pc, #188]	; (801181c <Init_LCD+0x228>)
 8011760:	2237      	movs	r2, #55	; 0x37
 8011762:	809a      	strh	r2, [r3, #4]
 8011764:	4b2d      	ldr	r3, [pc, #180]	; (801181c <Init_LCD+0x228>)
 8011766:	889a      	ldrh	r2, [r3, #4]
 8011768:	4b2c      	ldr	r3, [pc, #176]	; (801181c <Init_LCD+0x228>)
 801176a:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 801176c:	4b2b      	ldr	r3, [pc, #172]	; (801181c <Init_LCD+0x228>)
 801176e:	220c      	movs	r2, #12
 8011770:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8011772:	4b2a      	ldr	r3, [pc, #168]	; (801181c <Init_LCD+0x228>)
 8011774:	2205      	movs	r2, #5
 8011776:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011778:	4b28      	ldr	r3, [pc, #160]	; (801181c <Init_LCD+0x228>)
 801177a:	2250      	movs	r2, #80	; 0x50
 801177c:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 801177e:	4b27      	ldr	r3, [pc, #156]	; (801181c <Init_LCD+0x228>)
 8011780:	2232      	movs	r2, #50	; 0x32
 8011782:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011784:	4b25      	ldr	r3, [pc, #148]	; (801181c <Init_LCD+0x228>)
 8011786:	2236      	movs	r2, #54	; 0x36
 8011788:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 801178a:	4b24      	ldr	r3, [pc, #144]	; (801181c <Init_LCD+0x228>)
 801178c:	2204      	movs	r2, #4
 801178e:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8011790:	4b22      	ldr	r3, [pc, #136]	; (801181c <Init_LCD+0x228>)
 8011792:	220b      	movs	r2, #11
 8011794:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8011796:	4b21      	ldr	r3, [pc, #132]	; (801181c <Init_LCD+0x228>)
 8011798:	2200      	movs	r2, #0
 801179a:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 801179c:	4b1f      	ldr	r3, [pc, #124]	; (801181c <Init_LCD+0x228>)
 801179e:	2219      	movs	r2, #25
 80117a0:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 80117a2:	4b1e      	ldr	r3, [pc, #120]	; (801181c <Init_LCD+0x228>)
 80117a4:	2214      	movs	r2, #20
 80117a6:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 80117a8:	4a1c      	ldr	r2, [pc, #112]	; (801181c <Init_LCD+0x228>)
 80117aa:	210f      	movs	r1, #15
 80117ac:	20e1      	movs	r0, #225	; 0xe1
 80117ae:	f7ff fef5 	bl	801159c <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 80117b2:	4b1a      	ldr	r3, [pc, #104]	; (801181c <Init_LCD+0x228>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80117b8:	4b18      	ldr	r3, [pc, #96]	; (801181c <Init_LCD+0x228>)
 80117ba:	2202      	movs	r2, #2
 80117bc:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80117be:	4b17      	ldr	r3, [pc, #92]	; (801181c <Init_LCD+0x228>)
 80117c0:	223b      	movs	r2, #59	; 0x3b
 80117c2:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80117c4:	4a15      	ldr	r2, [pc, #84]	; (801181c <Init_LCD+0x228>)
 80117c6:	2103      	movs	r1, #3
 80117c8:	20b6      	movs	r0, #182	; 0xb6
 80117ca:	f7ff fee7 	bl	801159c <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80117ce:	4a13      	ldr	r2, [pc, #76]	; (801181c <Init_LCD+0x228>)
 80117d0:	2100      	movs	r1, #0
 80117d2:	2011      	movs	r0, #17
 80117d4:	f7ff fee2 	bl	801159c <lcd_write_cmd_data>
	HAL_Delay(120);
 80117d8:	2078      	movs	r0, #120	; 0x78
 80117da:	f006 fc87 	bl	80180ec <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80117de:	4a0f      	ldr	r2, [pc, #60]	; (801181c <Init_LCD+0x228>)
 80117e0:	2100      	movs	r1, #0
 80117e2:	2029      	movs	r0, #41	; 0x29
 80117e4:	f7ff feda 	bl	801159c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 80117e8:	4a0c      	ldr	r2, [pc, #48]	; (801181c <Init_LCD+0x228>)
 80117ea:	2100      	movs	r1, #0
 80117ec:	2038      	movs	r0, #56	; 0x38
 80117ee:	f7ff fed5 	bl	801159c <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 80117f2:	4a0a      	ldr	r2, [pc, #40]	; (801181c <Init_LCD+0x228>)
 80117f4:	2100      	movs	r1, #0
 80117f6:	2013      	movs	r0, #19
 80117f8:	f7ff fed0 	bl	801159c <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 80117fc:	2201      	movs	r2, #1
 80117fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011802:	4804      	ldr	r0, [pc, #16]	; (8011814 <Init_LCD+0x220>)
 8011804:	f008 f850 	bl	80198a8 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8011808:	2000      	movs	r0, #0
 801180a:	f000 f809 	bl	8011820 <LCD_ClrScrn>
}
 801180e:	bf00      	nop
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	40020800 	.word	0x40020800
 8011818:	40020400 	.word	0x40020400
 801181c:	20002634 	.word	0x20002634

08011820 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	4603      	mov	r3, r0
 8011828:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 801182a:	f44f 7020 	mov.w	r0, #640	; 0x280
 801182e:	f014 fddb 	bl	80263e8 <malloc>
 8011832:	4603      	mov	r3, r0
 8011834:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011836:	2200      	movs	r2, #0
 8011838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801183c:	483d      	ldr	r0, [pc, #244]	; (8011934 <LCD_ClrScrn+0x114>)
 801183e:	f008 f833 	bl	80198a8 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 8011842:	2300      	movs	r3, #0
 8011844:	81fb      	strh	r3, [r7, #14]
 8011846:	e03c      	b.n	80118c2 <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8011848:	4b3b      	ldr	r3, [pc, #236]	; (8011938 <LCD_ClrScrn+0x118>)
 801184a:	2200      	movs	r2, #0
 801184c:	805a      	strh	r2, [r3, #2]
 801184e:	4b3a      	ldr	r3, [pc, #232]	; (8011938 <LCD_ClrScrn+0x118>)
 8011850:	885a      	ldrh	r2, [r3, #2]
 8011852:	4b39      	ldr	r3, [pc, #228]	; (8011938 <LCD_ClrScrn+0x118>)
 8011854:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8011856:	4b38      	ldr	r3, [pc, #224]	; (8011938 <LCD_ClrScrn+0x118>)
 8011858:	2201      	movs	r2, #1
 801185a:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 801185c:	4b36      	ldr	r3, [pc, #216]	; (8011938 <LCD_ClrScrn+0x118>)
 801185e:	223f      	movs	r2, #63	; 0x3f
 8011860:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8011862:	4a35      	ldr	r2, [pc, #212]	; (8011938 <LCD_ClrScrn+0x118>)
 8011864:	2104      	movs	r1, #4
 8011866:	202a      	movs	r0, #42	; 0x2a
 8011868:	f7ff fe98 	bl	801159c <lcd_write_cmd_data>
	data[0]= y>>8;
 801186c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011870:	121b      	asrs	r3, r3, #8
 8011872:	b21b      	sxth	r3, r3
 8011874:	b29a      	uxth	r2, r3
 8011876:	4b30      	ldr	r3, [pc, #192]	; (8011938 <LCD_ClrScrn+0x118>)
 8011878:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 801187a:	89fb      	ldrh	r3, [r7, #14]
 801187c:	b2db      	uxtb	r3, r3
 801187e:	b29a      	uxth	r2, r3
 8011880:	4b2d      	ldr	r3, [pc, #180]	; (8011938 <LCD_ClrScrn+0x118>)
 8011882:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 8011884:	4b2c      	ldr	r3, [pc, #176]	; (8011938 <LCD_ClrScrn+0x118>)
 8011886:	2201      	movs	r2, #1
 8011888:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 801188a:	4b2b      	ldr	r3, [pc, #172]	; (8011938 <LCD_ClrScrn+0x118>)
 801188c:	22df      	movs	r2, #223	; 0xdf
 801188e:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8011890:	4a29      	ldr	r2, [pc, #164]	; (8011938 <LCD_ClrScrn+0x118>)
 8011892:	2104      	movs	r1, #4
 8011894:	202b      	movs	r0, #43	; 0x2b
 8011896:	f7ff fe81 	bl	801159c <lcd_write_cmd_data>

	if(ptr != NULL)
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d016      	beq.n	80118ce <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80118a0:	88fb      	ldrh	r3, [r7, #6]
 80118a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80118a6:	4619      	mov	r1, r3
 80118a8:	68b8      	ldr	r0, [r7, #8]
 80118aa:	f7ff fc67 	bl	801117c <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80118ae:	68ba      	ldr	r2, [r7, #8]
 80118b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80118b4:	202c      	movs	r0, #44	; 0x2c
 80118b6:	f7ff fe71 	bl	801159c <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80118ba:	89fb      	ldrh	r3, [r7, #14]
 80118bc:	3301      	adds	r3, #1
 80118be:	b29b      	uxth	r3, r3
 80118c0:	81fb      	strh	r3, [r7, #14]
 80118c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80118c6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80118ca:	dbbd      	blt.n	8011848 <LCD_ClrScrn+0x28>
 80118cc:	e000      	b.n	80118d0 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80118ce:	bf00      	nop
}

free(ptr);
 80118d0:	68b8      	ldr	r0, [r7, #8]
 80118d2:	f014 fd91 	bl	80263f8 <free>

data[0]=data[1]= 0;
 80118d6:	4b18      	ldr	r3, [pc, #96]	; (8011938 <LCD_ClrScrn+0x118>)
 80118d8:	2200      	movs	r2, #0
 80118da:	805a      	strh	r2, [r3, #2]
 80118dc:	4b16      	ldr	r3, [pc, #88]	; (8011938 <LCD_ClrScrn+0x118>)
 80118de:	885a      	ldrh	r2, [r3, #2]
 80118e0:	4b15      	ldr	r3, [pc, #84]	; (8011938 <LCD_ClrScrn+0x118>)
 80118e2:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 80118e4:	4b14      	ldr	r3, [pc, #80]	; (8011938 <LCD_ClrScrn+0x118>)
 80118e6:	2201      	movs	r2, #1
 80118e8:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 80118ea:	4b13      	ldr	r3, [pc, #76]	; (8011938 <LCD_ClrScrn+0x118>)
 80118ec:	223f      	movs	r2, #63	; 0x3f
 80118ee:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 80118f0:	4a11      	ldr	r2, [pc, #68]	; (8011938 <LCD_ClrScrn+0x118>)
 80118f2:	2104      	movs	r1, #4
 80118f4:	202a      	movs	r0, #42	; 0x2a
 80118f6:	f7ff fe51 	bl	801159c <lcd_write_cmd_data>
data[0]=data[1]= 0;
 80118fa:	4b0f      	ldr	r3, [pc, #60]	; (8011938 <LCD_ClrScrn+0x118>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	805a      	strh	r2, [r3, #2]
 8011900:	4b0d      	ldr	r3, [pc, #52]	; (8011938 <LCD_ClrScrn+0x118>)
 8011902:	885a      	ldrh	r2, [r3, #2]
 8011904:	4b0c      	ldr	r3, [pc, #48]	; (8011938 <LCD_ClrScrn+0x118>)
 8011906:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8011908:	4b0b      	ldr	r3, [pc, #44]	; (8011938 <LCD_ClrScrn+0x118>)
 801190a:	2201      	movs	r2, #1
 801190c:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801190e:	4b0a      	ldr	r3, [pc, #40]	; (8011938 <LCD_ClrScrn+0x118>)
 8011910:	22df      	movs	r2, #223	; 0xdf
 8011912:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8011914:	4a08      	ldr	r2, [pc, #32]	; (8011938 <LCD_ClrScrn+0x118>)
 8011916:	2104      	movs	r1, #4
 8011918:	202b      	movs	r0, #43	; 0x2b
 801191a:	f7ff fe3f 	bl	801159c <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801191e:	2201      	movs	r2, #1
 8011920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011924:	4803      	ldr	r0, [pc, #12]	; (8011934 <LCD_ClrScrn+0x114>)
 8011926:	f007 ffbf 	bl	80198a8 <HAL_GPIO_WritePin>

}
 801192a:	bf00      	nop
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	40020800 	.word	0x40020800
 8011938:	20002634 	.word	0x20002634

0801193c <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	460a      	mov	r2, r1
 8011946:	80fb      	strh	r3, [r7, #6]
 8011948:	4613      	mov	r3, r2
 801194a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801194c:	2200      	movs	r2, #0
 801194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011952:	481f      	ldr	r0, [pc, #124]	; (80119d0 <LCD_Set_Posi+0x94>)
 8011954:	f007 ffa8 	bl	80198a8 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8011958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801195c:	121b      	asrs	r3, r3, #8
 801195e:	b21b      	sxth	r3, r3
 8011960:	b29a      	uxth	r2, r3
 8011962:	4b1c      	ldr	r3, [pc, #112]	; (80119d4 <LCD_Set_Posi+0x98>)
 8011964:	809a      	strh	r2, [r3, #4]
 8011966:	4b1b      	ldr	r3, [pc, #108]	; (80119d4 <LCD_Set_Posi+0x98>)
 8011968:	889a      	ldrh	r2, [r3, #4]
 801196a:	4b1a      	ldr	r3, [pc, #104]	; (80119d4 <LCD_Set_Posi+0x98>)
 801196c:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 801196e:	88fb      	ldrh	r3, [r7, #6]
 8011970:	b2db      	uxtb	r3, r3
 8011972:	b29a      	uxth	r2, r3
 8011974:	4b17      	ldr	r3, [pc, #92]	; (80119d4 <LCD_Set_Posi+0x98>)
 8011976:	80da      	strh	r2, [r3, #6]
 8011978:	4b16      	ldr	r3, [pc, #88]	; (80119d4 <LCD_Set_Posi+0x98>)
 801197a:	88da      	ldrh	r2, [r3, #6]
 801197c:	4b15      	ldr	r3, [pc, #84]	; (80119d4 <LCD_Set_Posi+0x98>)
 801197e:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8011980:	4a14      	ldr	r2, [pc, #80]	; (80119d4 <LCD_Set_Posi+0x98>)
 8011982:	2104      	movs	r1, #4
 8011984:	202a      	movs	r0, #42	; 0x2a
 8011986:	f7ff fe09 	bl	801159c <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 801198a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801198e:	121b      	asrs	r3, r3, #8
 8011990:	b21b      	sxth	r3, r3
 8011992:	b29a      	uxth	r2, r3
 8011994:	4b0f      	ldr	r3, [pc, #60]	; (80119d4 <LCD_Set_Posi+0x98>)
 8011996:	805a      	strh	r2, [r3, #2]
 8011998:	4b0e      	ldr	r3, [pc, #56]	; (80119d4 <LCD_Set_Posi+0x98>)
 801199a:	885a      	ldrh	r2, [r3, #2]
 801199c:	4b0d      	ldr	r3, [pc, #52]	; (80119d4 <LCD_Set_Posi+0x98>)
 801199e:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80119a0:	88bb      	ldrh	r3, [r7, #4]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <LCD_Set_Posi+0x98>)
 80119a8:	80da      	strh	r2, [r3, #6]
 80119aa:	4b0a      	ldr	r3, [pc, #40]	; (80119d4 <LCD_Set_Posi+0x98>)
 80119ac:	88da      	ldrh	r2, [r3, #6]
 80119ae:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <LCD_Set_Posi+0x98>)
 80119b0:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80119b2:	4a08      	ldr	r2, [pc, #32]	; (80119d4 <LCD_Set_Posi+0x98>)
 80119b4:	2104      	movs	r1, #4
 80119b6:	202b      	movs	r0, #43	; 0x2b
 80119b8:	f7ff fdf0 	bl	801159c <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80119bc:	2201      	movs	r2, #1
 80119be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119c2:	4803      	ldr	r0, [pc, #12]	; (80119d0 <LCD_Set_Posi+0x94>)
 80119c4:	f007 ff70 	bl	80198a8 <HAL_GPIO_WritePin>
}
 80119c8:	bf00      	nop
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	40020800 	.word	0x40020800
 80119d4:	20002634 	.word	0x20002634

080119d8 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80119e2:	2200      	movs	r2, #0
 80119e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119e8:	480d      	ldr	r0, [pc, #52]	; (8011a20 <LCD_Set_Pixel+0x48>)
 80119ea:	f007 ff5d 	bl	80198a8 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 80119ee:	88fb      	ldrh	r3, [r7, #6]
 80119f0:	0a1b      	lsrs	r3, r3, #8
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	4b0b      	ldr	r3, [pc, #44]	; (8011a24 <LCD_Set_Pixel+0x4c>)
 80119f6:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 80119f8:	88fb      	ldrh	r3, [r7, #6]
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	4b09      	ldr	r3, [pc, #36]	; (8011a24 <LCD_Set_Pixel+0x4c>)
 8011a00:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8011a02:	4a08      	ldr	r2, [pc, #32]	; (8011a24 <LCD_Set_Pixel+0x4c>)
 8011a04:	2102      	movs	r1, #2
 8011a06:	202c      	movs	r0, #44	; 0x2c
 8011a08:	f7ff fdc8 	bl	801159c <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a12:	4803      	ldr	r0, [pc, #12]	; (8011a20 <LCD_Set_Pixel+0x48>)
 8011a14:	f007 ff48 	bl	80198a8 <HAL_GPIO_WritePin>
}
 8011a18:	bf00      	nop
 8011a1a:	3708      	adds	r7, #8
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	40020800 	.word	0x40020800
 8011a24:	20002634 	.word	0x20002634

08011a28 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a34:	4814      	ldr	r0, [pc, #80]	; (8011a88 <LCD_Get_Pixel+0x60>)
 8011a36:	f007 ff37 	bl	80198a8 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8011a3a:	4a14      	ldr	r2, [pc, #80]	; (8011a8c <LCD_Get_Pixel+0x64>)
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	202e      	movs	r0, #46	; 0x2e
 8011a40:	f7ff fdac 	bl	801159c <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8011a44:	2301      	movs	r3, #1
 8011a46:	2202      	movs	r2, #2
 8011a48:	4910      	ldr	r1, [pc, #64]	; (8011a8c <LCD_Get_Pixel+0x64>)
 8011a4a:	4811      	ldr	r0, [pc, #68]	; (8011a90 <LCD_Get_Pixel+0x68>)
 8011a4c:	f00a fcb5 	bl	801c3ba <HAL_SPI_Receive>
 8011a50:	4603      	mov	r3, r0
 8011a52:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8011a54:	2201      	movs	r2, #1
 8011a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a5a:	480b      	ldr	r0, [pc, #44]	; (8011a88 <LCD_Get_Pixel+0x60>)
 8011a5c:	f007 ff24 	bl	80198a8 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8011a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d10a      	bne.n	8011a7e <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8011a68:	4b08      	ldr	r3, [pc, #32]	; (8011a8c <LCD_Get_Pixel+0x64>)
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	021b      	lsls	r3, r3, #8
 8011a6e:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8011a70:	4b06      	ldr	r3, [pc, #24]	; (8011a8c <LCD_Get_Pixel+0x64>)
 8011a72:	885a      	ldrh	r2, [r3, #2]
 8011a74:	88bb      	ldrh	r3, [r7, #4]
 8011a76:	4313      	orrs	r3, r2
 8011a78:	80bb      	strh	r3, [r7, #4]
		return (fred);
 8011a7a:	88bb      	ldrh	r3, [r7, #4]
 8011a7c:	e000      	b.n	8011a80 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 8011a7e:	2300      	movs	r3, #0

}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	40020800 	.word	0x40020800
 8011a8c:	20002634 	.word	0x20002634
 8011a90:	20006868 	.word	0x20006868

08011a94 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8011a94:	b590      	push	{r4, r7, lr}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	4623      	mov	r3, r4
 8011aa4:	80fb      	strh	r3, [r7, #6]
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	80bb      	strh	r3, [r7, #4]
 8011aaa:	460b      	mov	r3, r1
 8011aac:	70fb      	strb	r3, [r7, #3]
 8011aae:	4613      	mov	r3, r2
 8011ab0:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8011ab2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aba:	4611      	mov	r1, r2
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7ff ff3d 	bl	801193c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011ac2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011ac6:	f7ff ff87 	bl	80119d8 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 8011aca:	78bb      	ldrb	r3, [r7, #2]
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	88bb      	ldrh	r3, [r7, #4]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	b21a      	sxth	r2, r3
 8011ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ade:	4611      	mov	r1, r2
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7ff ff2b 	bl	801193c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011ae6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011aea:	f7ff ff75 	bl	80119d8 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8011aee:	78fb      	ldrb	r3, [r7, #3]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	78ba      	ldrb	r2, [r7, #2]
 8011af4:	2a0a      	cmp	r2, #10
 8011af6:	d901      	bls.n	8011afc <Draw_4Point+0x68>
 8011af8:	2208      	movs	r2, #8
 8011afa:	e000      	b.n	8011afe <Draw_4Point+0x6a>
 8011afc:	2206      	movs	r2, #6
 8011afe:	fb12 f303 	smulbb	r3, r2, r3
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	88fb      	ldrh	r3, [r7, #6]
 8011b06:	4413      	add	r3, r2
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	b21b      	sxth	r3, r3
 8011b0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b10:	4611      	mov	r1, r2
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7ff ff12 	bl	801193c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b18:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b1c:	f7ff ff5c 	bl	80119d8 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8011b20:	78fb      	ldrb	r3, [r7, #3]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	78ba      	ldrb	r2, [r7, #2]
 8011b26:	2a0a      	cmp	r2, #10
 8011b28:	d901      	bls.n	8011b2e <Draw_4Point+0x9a>
 8011b2a:	2208      	movs	r2, #8
 8011b2c:	e000      	b.n	8011b30 <Draw_4Point+0x9c>
 8011b2e:	2206      	movs	r2, #6
 8011b30:	fb12 f303 	smulbb	r3, r2, r3
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	88fb      	ldrh	r3, [r7, #6]
 8011b38:	4413      	add	r3, r2
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	b218      	sxth	r0, r3
 8011b3e:	78bb      	ldrb	r3, [r7, #2]
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	88bb      	ldrh	r3, [r7, #4]
 8011b44:	4413      	add	r3, r2
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	b21b      	sxth	r3, r3
 8011b4e:	4619      	mov	r1, r3
 8011b50:	f7ff fef4 	bl	801193c <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b54:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b58:	f7ff ff3e 	bl	80119d8 <LCD_Set_Pixel>
}
 8011b5c:	bf00      	nop
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd90      	pop	{r4, r7, pc}

08011b64 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	80fb      	strh	r3, [r7, #6]
 8011b6e:	e03b      	b.n	8011be8 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8011b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b74:	4a21      	ldr	r2, [pc, #132]	; (8011bfc <Update_Title+0x98>)
 8011b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b80:	f7fc fa26 	bl	800dfd0 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 8011b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b88:	4a1d      	ldr	r2, [pc, #116]	; (8011c00 <Update_Title+0x9c>)
 8011b8a:	5cd3      	ldrb	r3, [r2, r3]
 8011b8c:	b219      	sxth	r1, r3
 8011b8e:	4b1d      	ldr	r3, [pc, #116]	; (8011c04 <Update_Title+0xa0>)
 8011b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	bf0c      	ite	eq
 8011b9c:	2301      	moveq	r3, #1
 8011b9e:	2300      	movne	r3, #0
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ba8:	009b      	lsls	r3, r3, #2
 8011baa:	4a17      	ldr	r2, [pc, #92]	; (8011c08 <Update_Title+0xa4>)
 8011bac:	4413      	add	r3, r2
 8011bae:	4602      	mov	r2, r0
 8011bb0:	f240 102f 	movw	r0, #303	; 0x12f
 8011bb4:	f7fc f9b4 	bl	800df20 <DispStr8x14>
    if(Current == i)
 8011bb8:	4b12      	ldr	r3, [pc, #72]	; (8011c04 <Update_Title+0xa0>)
 8011bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d10a      	bne.n	8011bdc <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 8011bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bca:	4a0d      	ldr	r2, [pc, #52]	; (8011c00 <Update_Title+0x9c>)
 8011bcc:	5cd3      	ldrb	r3, [r2, r3]
 8011bce:	b219      	sxth	r1, r3
 8011bd0:	230e      	movs	r3, #14
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	f240 102f 	movw	r0, #303	; 0x12f
 8011bd8:	f7ff ff5c 	bl	8011a94 <Draw_4Point>
  for(i=0; i<8; i++)
 8011bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	3301      	adds	r3, #1
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	80fb      	strh	r3, [r7, #6]
 8011be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bec:	2b07      	cmp	r3, #7
 8011bee:	ddbf      	ble.n	8011b70 <Update_Title+0xc>
    }
  }
}
 8011bf0:	bf00      	nop
 8011bf2:	bf00      	nop
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	08001fa4 	.word	0x08001fa4
 8011c00:	08001fd4 	.word	0x08001fd4
 8011c04:	20002654 	.word	0x20002654
 8011c08:	08001fb4 	.word	0x08001fb4

08011c0c <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8011c0c:	b590      	push	{r4, r7, lr}
 8011c0e:	b087      	sub	sp, #28
 8011c10:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8011c12:	4bbd      	ldr	r3, [pc, #756]	; (8011f08 <Update_Blink+0x2fc>)
 8011c14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	4bbb      	ldr	r3, [pc, #748]	; (8011f08 <Update_Blink+0x2fc>)
 8011c1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	4619      	mov	r1, r3
 8011c24:	0089      	lsls	r1, r1, #2
 8011c26:	440b      	add	r3, r1
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	4413      	add	r3, r2
 8011c2e:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8011c30:	4bb6      	ldr	r3, [pc, #728]	; (8011f0c <Update_Blink+0x300>)
 8011c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c36:	461a      	mov	r2, r3
 8011c38:	4bb5      	ldr	r3, [pc, #724]	; (8011f10 <Update_Blink+0x304>)
 8011c3a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011c3e:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8011c40:	89bb      	ldrh	r3, [r7, #12]
 8011c42:	4ab1      	ldr	r2, [pc, #708]	; (8011f08 <Update_Blink+0x2fc>)
 8011c44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011c48:	89bb      	ldrh	r3, [r7, #12]
 8011c4a:	49af      	ldr	r1, [pc, #700]	; (8011f08 <Update_Blink+0x2fc>)
 8011c4c:	00db      	lsls	r3, r3, #3
 8011c4e:	440b      	add	r3, r1
 8011c50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c54:	4619      	mov	r1, r3
 8011c56:	460b      	mov	r3, r1
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	440b      	add	r3, r1
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	4413      	add	r3, r2
 8011c60:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 8011c62:	4bac      	ldr	r3, [pc, #688]	; (8011f14 <Update_Blink+0x308>)
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	f040 86ca 	bne.w	8012a02 <Update_Blink+0xdf6>
  {
    Blink = 0;
 8011c6e:	4ba9      	ldr	r3, [pc, #676]	; (8011f14 <Update_Blink+0x308>)
 8011c70:	2200      	movs	r2, #0
 8011c72:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8011c74:	4ba6      	ldr	r3, [pc, #664]	; (8011f10 <Update_Blink+0x304>)
 8011c76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c7a:	4aa3      	ldr	r2, [pc, #652]	; (8011f08 <Update_Blink+0x2fc>)
 8011c7c:	00db      	lsls	r3, r3, #3
 8011c7e:	4413      	add	r3, r2
 8011c80:	799b      	ldrb	r3, [r3, #6]
 8011c82:	4aa3      	ldr	r2, [pc, #652]	; (8011f10 <Update_Blink+0x304>)
 8011c84:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011c88:	4610      	mov	r0, r2
 8011c8a:	f043 0320 	orr.w	r3, r3, #32
 8011c8e:	b2d9      	uxtb	r1, r3
 8011c90:	4a9d      	ldr	r2, [pc, #628]	; (8011f08 <Update_Blink+0x2fc>)
 8011c92:	00c3      	lsls	r3, r0, #3
 8011c94:	4413      	add	r3, r2
 8011c96:	460a      	mov	r2, r1
 8011c98:	719a      	strb	r2, [r3, #6]
    switch(i)
 8011c9a:	89bb      	ldrh	r3, [r7, #12]
 8011c9c:	2b29      	cmp	r3, #41	; 0x29
 8011c9e:	f200 86aa 	bhi.w	80129f6 <Update_Blink+0xdea>
 8011ca2:	a201      	add	r2, pc, #4	; (adr r2, 8011ca8 <Update_Blink+0x9c>)
 8011ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca8:	08011e13 	.word	0x08011e13
 8011cac:	08011e13 	.word	0x08011e13
 8011cb0:	08011e13 	.word	0x08011e13
 8011cb4:	08011ea7 	.word	0x08011ea7
 8011cb8:	08011ed9 	.word	0x08011ed9
 8011cbc:	08011ed9 	.word	0x08011ed9
 8011cc0:	0801200f 	.word	0x0801200f
 8011cc4:	0801206d 	.word	0x0801206d
 8011cc8:	080120c5 	.word	0x080120c5
 8011ccc:	080120f7 	.word	0x080120f7
 8011cd0:	08012163 	.word	0x08012163
 8011cd4:	08012163 	.word	0x08012163
 8011cd8:	080122c5 	.word	0x080122c5
 8011cdc:	0801231f 	.word	0x0801231f
 8011ce0:	0801237d 	.word	0x0801237d
 8011ce4:	0801244d 	.word	0x0801244d
 8011ce8:	08012477 	.word	0x08012477
 8011cec:	0801237d 	.word	0x0801237d
 8011cf0:	080124a5 	.word	0x080124a5
 8011cf4:	080129f7 	.word	0x080129f7
 8011cf8:	080129f7 	.word	0x080129f7
 8011cfc:	080129f7 	.word	0x080129f7
 8011d00:	080129f7 	.word	0x080129f7
 8011d04:	080129f7 	.word	0x080129f7
 8011d08:	080129f7 	.word	0x080129f7
 8011d0c:	080129f7 	.word	0x080129f7
 8011d10:	0801251d 	.word	0x0801251d
 8011d14:	08012599 	.word	0x08012599
 8011d18:	080125c7 	.word	0x080125c7
 8011d1c:	08011d51 	.word	0x08011d51
 8011d20:	08011d51 	.word	0x08011d51
 8011d24:	08011d51 	.word	0x08011d51
 8011d28:	08011d51 	.word	0x08011d51
 8011d2c:	08011d51 	.word	0x08011d51
 8011d30:	08011d51 	.word	0x08011d51
 8011d34:	08011d51 	.word	0x08011d51
 8011d38:	08012643 	.word	0x08012643
 8011d3c:	080126dd 	.word	0x080126dd
 8011d40:	080127a1 	.word	0x080127a1
 8011d44:	0801284f 	.word	0x0801284f
 8011d48:	080128e9 	.word	0x080128e9
 8011d4c:	08012957 	.word	0x08012957
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8011d50:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8011d54:	4619      	mov	r1, r3
 8011d56:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011d5a:	f7fc f939 	bl	800dfd0 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8011d5e:	89bb      	ldrh	r3, [r7, #12]
 8011d60:	4a69      	ldr	r2, [pc, #420]	; (8011f08 <Update_Blink+0x2fc>)
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	4413      	add	r3, r2
 8011d66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	486a      	ldr	r0, [pc, #424]	; (8011f18 <Update_Blink+0x30c>)
 8011d70:	f7ff f9bc 	bl	80110ec <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8011d74:	4b69      	ldr	r3, [pc, #420]	; (8011f1c <Update_Blink+0x310>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	b2d8      	uxtb	r0, r3
 8011d7a:	89bb      	ldrh	r3, [r7, #12]
 8011d7c:	4a68      	ldr	r2, [pc, #416]	; (8011f20 <Update_Blink+0x314>)
 8011d7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	3b03      	subs	r3, #3
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	b219      	sxth	r1, r3
 8011d8a:	2342      	movs	r3, #66	; 0x42
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	230b      	movs	r3, #11
 8011d94:	2203      	movs	r2, #3
 8011d96:	f7fc fa09 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8011d9a:	89bb      	ldrh	r3, [r7, #12]
 8011d9c:	4a60      	ldr	r2, [pc, #384]	; (8011f20 <Update_Blink+0x314>)
 8011d9e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8011da2:	4b5e      	ldr	r3, [pc, #376]	; (8011f1c <Update_Blink+0x310>)
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	89bb      	ldrh	r3, [r7, #12]
 8011daa:	2b21      	cmp	r3, #33	; 0x21
 8011dac:	d901      	bls.n	8011db2 <Update_Blink+0x1a6>
 8011dae:	4b5d      	ldr	r3, [pc, #372]	; (8011f24 <Update_Blink+0x318>)
 8011db0:	e000      	b.n	8011db4 <Update_Blink+0x1a8>
 8011db2:	4b5d      	ldr	r3, [pc, #372]	; (8011f28 <Update_Blink+0x31c>)
 8011db4:	2103      	movs	r1, #3
 8011db6:	f7fc f923 	bl	800e000 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 8011dba:	89bb      	ldrh	r3, [r7, #12]
 8011dbc:	4a58      	ldr	r2, [pc, #352]	; (8011f20 <Update_Blink+0x314>)
 8011dbe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	3318      	adds	r3, #24
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	b218      	sxth	r0, r3
 8011dca:	4b54      	ldr	r3, [pc, #336]	; (8011f1c <Update_Blink+0x310>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	4b51      	ldr	r3, [pc, #324]	; (8011f18 <Update_Blink+0x30c>)
 8011dd2:	2103      	movs	r1, #3
 8011dd4:	f7fc f914 	bl	800e000 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8011dd8:	89bb      	ldrh	r3, [r7, #12]
 8011dda:	4a51      	ldr	r2, [pc, #324]	; (8011f20 <Update_Blink+0x314>)
 8011ddc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	332a      	adds	r3, #42	; 0x2a
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	b218      	sxth	r0, r3
 8011de8:	4b4c      	ldr	r3, [pc, #304]	; (8011f1c <Update_Blink+0x310>)
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	b2dc      	uxtb	r4, r3
 8011dee:	89bb      	ldrh	r3, [r7, #12]
 8011df0:	4a45      	ldr	r2, [pc, #276]	; (8011f08 <Update_Blink+0x2fc>)
 8011df2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011df6:	89bb      	ldrh	r3, [r7, #12]
 8011df8:	f1a3 021d 	sub.w	r2, r3, #29
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	4413      	add	r3, r2
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	440b      	add	r3, r1
 8011e06:	4622      	mov	r2, r4
 8011e08:	2103      	movs	r1, #3
 8011e0a:	f7fc f8f9 	bl	800e000 <DispStr>
      break;
 8011e0e:	f000 bdf2 	b.w	80129f6 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8011e12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011e16:	4619      	mov	r1, r3
 8011e18:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011e1c:	f7fc f8d8 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8011e20:	4b3e      	ldr	r3, [pc, #248]	; (8011f1c <Update_Blink+0x310>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	b2d8      	uxtb	r0, r3
 8011e26:	232f      	movs	r3, #47	; 0x2f
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	3b03      	subs	r3, #3
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	b219      	sxth	r1, r3
 8011e30:	232a      	movs	r3, #42	; 0x2a
 8011e32:	9301      	str	r3, [sp, #4]
 8011e34:	2300      	movs	r3, #0
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	230b      	movs	r3, #11
 8011e3a:	22e1      	movs	r2, #225	; 0xe1
 8011e3c:	f7fc f9b6 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8011e40:	242f      	movs	r4, #47	; 0x2f
 8011e42:	4b36      	ldr	r3, [pc, #216]	; (8011f1c <Update_Blink+0x310>)
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	b2d8      	uxtb	r0, r3
 8011e48:	4b2f      	ldr	r3, [pc, #188]	; (8011f08 <Update_Blink+0x2fc>)
 8011e4a:	6819      	ldr	r1, [r3, #0]
 8011e4c:	89fa      	ldrh	r2, [r7, #14]
 8011e4e:	4613      	mov	r3, r2
 8011e50:	005b      	lsls	r3, r3, #1
 8011e52:	4413      	add	r3, r2
 8011e54:	005b      	lsls	r3, r3, #1
 8011e56:	440b      	add	r3, r1
 8011e58:	4602      	mov	r2, r0
 8011e5a:	21e1      	movs	r1, #225	; 0xe1
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f7fc f8cf 	bl	800e000 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8011e62:	2047      	movs	r0, #71	; 0x47
 8011e64:	4b2d      	ldr	r3, [pc, #180]	; (8011f1c <Update_Blink+0x310>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	b2d9      	uxtb	r1, r3
 8011e6a:	4b27      	ldr	r3, [pc, #156]	; (8011f08 <Update_Blink+0x2fc>)
 8011e6c:	689a      	ldr	r2, [r3, #8]
 8011e6e:	4b26      	ldr	r3, [pc, #152]	; (8011f08 <Update_Blink+0x2fc>)
 8011e70:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011e74:	461c      	mov	r4, r3
 8011e76:	4623      	mov	r3, r4
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	4423      	add	r3, r4
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	4413      	add	r3, r2
 8011e80:	460a      	mov	r2, r1
 8011e82:	21e1      	movs	r1, #225	; 0xe1
 8011e84:	f7fc f8bc 	bl	800e000 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8011e88:	2020      	movs	r0, #32
 8011e8a:	4b1f      	ldr	r3, [pc, #124]	; (8011f08 <Update_Blink+0x2fc>)
 8011e8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d001      	beq.n	8011e98 <Update_Blink+0x28c>
 8011e94:	4b25      	ldr	r3, [pc, #148]	; (8011f2c <Update_Blink+0x320>)
 8011e96:	e000      	b.n	8011e9a <Update_Blink+0x28e>
 8011e98:	4b25      	ldr	r3, [pc, #148]	; (8011f30 <Update_Blink+0x324>)
 8011e9a:	2210      	movs	r2, #16
 8011e9c:	21e1      	movs	r1, #225	; 0xe1
 8011e9e:	f7fc fb19 	bl	800e4d4 <DispStr10x14>
      break;
 8011ea2:	f000 bda8 	b.w	80129f6 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 8011ea6:	4b1d      	ldr	r3, [pc, #116]	; (8011f1c <Update_Blink+0x310>)
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d009      	beq.n	8011ec4 <Update_Blink+0x2b8>
 8011eb0:	4b20      	ldr	r3, [pc, #128]	; (8011f34 <Update_Blink+0x328>)
 8011eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011eb6:	f043 0301 	orr.w	r3, r3, #1
 8011eba:	b21a      	sxth	r2, r3
 8011ebc:	4b1d      	ldr	r3, [pc, #116]	; (8011f34 <Update_Blink+0x328>)
 8011ebe:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8011ec0:	f000 bd99 	b.w	80129f6 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8011ec4:	4b1b      	ldr	r3, [pc, #108]	; (8011f34 <Update_Blink+0x328>)
 8011ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011eca:	f023 0301 	bic.w	r3, r3, #1
 8011ece:	b21a      	sxth	r2, r3
 8011ed0:	4b18      	ldr	r3, [pc, #96]	; (8011f34 <Update_Blink+0x328>)
 8011ed2:	801a      	strh	r2, [r3, #0]
      break;
 8011ed4:	f000 bd8f 	b.w	80129f6 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8011ed8:	89bb      	ldrh	r3, [r7, #12]
 8011eda:	2b04      	cmp	r3, #4
 8011edc:	d101      	bne.n	8011ee2 <Update_Blink+0x2d6>
 8011ede:	2305      	movs	r3, #5
 8011ee0:	e000      	b.n	8011ee4 <Update_Blink+0x2d8>
 8011ee2:	2306      	movs	r3, #6
 8011ee4:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8011ee6:	4b0d      	ldr	r3, [pc, #52]	; (8011f1c <Update_Blink+0x310>)
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d023      	beq.n	8011f38 <Update_Blink+0x32c>
 8011ef0:	4a10      	ldr	r2, [pc, #64]	; (8011f34 <Update_Blink+0x328>)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011ef8:	f043 0301 	orr.w	r3, r3, #1
 8011efc:	b219      	sxth	r1, r3
 8011efe:	4a0d      	ldr	r2, [pc, #52]	; (8011f34 <Update_Blink+0x328>)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011f06:	e022      	b.n	8011f4e <Update_Blink+0x342>
 8011f08:	20000274 	.word	0x20000274
 8011f0c:	20002654 	.word	0x20002654
 8011f10:	20000514 	.word	0x20000514
 8011f14:	2000072d 	.word	0x2000072d
 8011f18:	20002660 	.word	0x20002660
 8011f1c:	2000072c 	.word	0x2000072c
 8011f20:	080021f8 	.word	0x080021f8
 8011f24:	0800099c 	.word	0x0800099c
 8011f28:	080009a4 	.word	0x080009a4
 8011f2c:	080009ac 	.word	0x080009ac
 8011f30:	080009b0 	.word	0x080009b0
 8011f34:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8011f38:	4ab1      	ldr	r2, [pc, #708]	; (8012200 <Update_Blink+0x5f4>)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011f40:	f023 0301 	bic.w	r3, r3, #1
 8011f44:	b219      	sxth	r1, r3
 8011f46:	4aae      	ldr	r2, [pc, #696]	; (8012200 <Update_Blink+0x5f4>)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8011f4e:	4bac      	ldr	r3, [pc, #688]	; (8012200 <Update_Blink+0x5f4>)
 8011f50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8011f54:	461a      	mov	r2, r3
 8011f56:	4baa      	ldr	r3, [pc, #680]	; (8012200 <Update_Blink+0x5f4>)
 8011f58:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	0fda      	lsrs	r2, r3, #31
 8011f60:	4413      	add	r3, r2
 8011f62:	105b      	asrs	r3, r3, #1
 8011f64:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8011f66:	89fb      	ldrh	r3, [r7, #14]
 8011f68:	4aa6      	ldr	r2, [pc, #664]	; (8012204 <Update_Blink+0x5f8>)
 8011f6a:	5cd3      	ldrb	r3, [r2, r3]
 8011f6c:	461c      	mov	r4, r3
 8011f6e:	89fb      	ldrh	r3, [r7, #14]
 8011f70:	4aa5      	ldr	r2, [pc, #660]	; (8012208 <Update_Blink+0x5fc>)
 8011f72:	5cd3      	ldrb	r3, [r2, r3]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff fa1d 	bl	80113b4 <Exp>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	fb03 f204 	mul.w	r2, r3, r4
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	fb02 f303 	mul.w	r3, r2, r3
 8011f86:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8011f88:	2301      	movs	r3, #1
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	2303      	movs	r3, #3
 8011f8e:	4a9f      	ldr	r2, [pc, #636]	; (801220c <Update_Blink+0x600>)
 8011f90:	6879      	ldr	r1, [r7, #4]
 8011f92:	489f      	ldr	r0, [pc, #636]	; (8012210 <Update_Blink+0x604>)
 8011f94:	f7ff f912 	bl	80111bc <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8011f98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011fa2:	f7fc f815 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8011fa6:	4b9b      	ldr	r3, [pc, #620]	; (8012214 <Update_Blink+0x608>)
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	b2d8      	uxtb	r0, r3
 8011fac:	2307      	movs	r3, #7
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	3b03      	subs	r3, #3
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	b219      	sxth	r1, r3
 8011fb6:	2336      	movs	r3, #54	; 0x36
 8011fb8:	9301      	str	r3, [sp, #4]
 8011fba:	2300      	movs	r3, #0
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	230b      	movs	r3, #11
 8011fc0:	2203      	movs	r2, #3
 8011fc2:	f7fc f8f3 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8011fc6:	2007      	movs	r0, #7
 8011fc8:	4b92      	ldr	r3, [pc, #584]	; (8012214 <Update_Blink+0x608>)
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	3310      	adds	r3, #16
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	4b91      	ldr	r3, [pc, #580]	; (8012218 <Update_Blink+0x60c>)
 8011fd4:	2103      	movs	r1, #3
 8011fd6:	f7fc f813 	bl	800e000 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8011fda:	2307      	movs	r3, #7
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	3306      	adds	r3, #6
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	b218      	sxth	r0, r3
 8011fe4:	4b8b      	ldr	r3, [pc, #556]	; (8012214 <Update_Blink+0x608>)
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	b2da      	uxtb	r2, r3
 8011fea:	4b8c      	ldr	r3, [pc, #560]	; (801221c <Update_Blink+0x610>)
 8011fec:	2103      	movs	r1, #3
 8011fee:	f7fc f807 	bl	800e000 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8011ff2:	2307      	movs	r3, #7
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	3312      	adds	r3, #18
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	b218      	sxth	r0, r3
 8011ffc:	4b85      	ldr	r3, [pc, #532]	; (8012214 <Update_Blink+0x608>)
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	b2da      	uxtb	r2, r3
 8012002:	4b83      	ldr	r3, [pc, #524]	; (8012210 <Update_Blink+0x604>)
 8012004:	2103      	movs	r1, #3
 8012006:	f7fb fffb 	bl	800e000 <DispStr>
      break;
 801200a:	f000 bcf4 	b.w	80129f6 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 801200e:	4b81      	ldr	r3, [pc, #516]	; (8012214 <Update_Blink+0x608>)
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	b2db      	uxtb	r3, r3
 8012014:	2b00      	cmp	r3, #0
 8012016:	d008      	beq.n	801202a <Update_Blink+0x41e>
 8012018:	4b79      	ldr	r3, [pc, #484]	; (8012200 <Update_Blink+0x5f4>)
 801201a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801201e:	f043 0301 	orr.w	r3, r3, #1
 8012022:	b21a      	sxth	r2, r3
 8012024:	4b76      	ldr	r3, [pc, #472]	; (8012200 <Update_Blink+0x5f4>)
 8012026:	815a      	strh	r2, [r3, #10]
 8012028:	e007      	b.n	801203a <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 801202a:	4b75      	ldr	r3, [pc, #468]	; (8012200 <Update_Blink+0x5f4>)
 801202c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012030:	f023 0301 	bic.w	r3, r3, #1
 8012034:	b21a      	sxth	r2, r3
 8012036:	4b72      	ldr	r3, [pc, #456]	; (8012200 <Update_Blink+0x5f4>)
 8012038:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 801203a:	4b76      	ldr	r3, [pc, #472]	; (8012214 <Update_Blink+0x608>)
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	d009      	beq.n	8012058 <Update_Blink+0x44c>
 8012044:	4b6e      	ldr	r3, [pc, #440]	; (8012200 <Update_Blink+0x5f4>)
 8012046:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801204a:	f043 0301 	orr.w	r3, r3, #1
 801204e:	b21a      	sxth	r2, r3
 8012050:	4b6b      	ldr	r3, [pc, #428]	; (8012200 <Update_Blink+0x5f4>)
 8012052:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012054:	f000 bccf 	b.w	80129f6 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012058:	4b69      	ldr	r3, [pc, #420]	; (8012200 <Update_Blink+0x5f4>)
 801205a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801205e:	f023 0301 	bic.w	r3, r3, #1
 8012062:	b21a      	sxth	r2, r3
 8012064:	4b66      	ldr	r3, [pc, #408]	; (8012200 <Update_Blink+0x5f4>)
 8012066:	819a      	strh	r2, [r3, #12]
      break;
 8012068:	f000 bcc5 	b.w	80129f6 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 801206c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012070:	4619      	mov	r1, r3
 8012072:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012076:	f7fb ffab 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 801207a:	4b66      	ldr	r3, [pc, #408]	; (8012214 <Update_Blink+0x608>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	b2d8      	uxtb	r0, r3
 8012080:	89bb      	ldrh	r3, [r7, #12]
 8012082:	4a67      	ldr	r2, [pc, #412]	; (8012220 <Update_Blink+0x614>)
 8012084:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012088:	b29b      	uxth	r3, r3
 801208a:	3b03      	subs	r3, #3
 801208c:	b29b      	uxth	r3, r3
 801208e:	b219      	sxth	r1, r3
 8012090:	231e      	movs	r3, #30
 8012092:	9301      	str	r3, [sp, #4]
 8012094:	2302      	movs	r3, #2
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	230b      	movs	r3, #11
 801209a:	22e1      	movs	r2, #225	; 0xe1
 801209c:	f7fc f886 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 80120a0:	89bb      	ldrh	r3, [r7, #12]
 80120a2:	4a5f      	ldr	r2, [pc, #380]	; (8012220 <Update_Blink+0x614>)
 80120a4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80120a8:	4b5a      	ldr	r3, [pc, #360]	; (8012214 <Update_Blink+0x608>)
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	4b5d      	ldr	r3, [pc, #372]	; (8012224 <Update_Blink+0x618>)
 80120b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	495c      	ldr	r1, [pc, #368]	; (8012228 <Update_Blink+0x61c>)
 80120b8:	440b      	add	r3, r1
 80120ba:	21e1      	movs	r1, #225	; 0xe1
 80120bc:	f7fb ffa0 	bl	800e000 <DispStr>
      break;
 80120c0:	f000 bc99 	b.w	80129f6 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 80120c4:	4b53      	ldr	r3, [pc, #332]	; (8012214 <Update_Blink+0x608>)
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d009      	beq.n	80120e2 <Update_Blink+0x4d6>
 80120ce:	4b4c      	ldr	r3, [pc, #304]	; (8012200 <Update_Blink+0x5f4>)
 80120d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120d4:	f043 0301 	orr.w	r3, r3, #1
 80120d8:	b21a      	sxth	r2, r3
 80120da:	4b49      	ldr	r3, [pc, #292]	; (8012200 <Update_Blink+0x5f4>)
 80120dc:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 80120de:	f000 bc8a 	b.w	80129f6 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 80120e2:	4b47      	ldr	r3, [pc, #284]	; (8012200 <Update_Blink+0x5f4>)
 80120e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120e8:	f023 0301 	bic.w	r3, r3, #1
 80120ec:	b21a      	sxth	r2, r3
 80120ee:	4b44      	ldr	r3, [pc, #272]	; (8012200 <Update_Blink+0x5f4>)
 80120f0:	81da      	strh	r2, [r3, #14]
      break;
 80120f2:	f000 bc80 	b.w	80129f6 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 80120f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80120fa:	4619      	mov	r1, r3
 80120fc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012100:	f7fb ff66 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012104:	4b43      	ldr	r3, [pc, #268]	; (8012214 <Update_Blink+0x608>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	b2d8      	uxtb	r0, r3
 801210a:	23f8      	movs	r3, #248	; 0xf8
 801210c:	b29b      	uxth	r3, r3
 801210e:	3b03      	subs	r3, #3
 8012110:	b29b      	uxth	r3, r3
 8012112:	b219      	sxth	r1, r3
 8012114:	2342      	movs	r3, #66	; 0x42
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	2300      	movs	r3, #0
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	230b      	movs	r3, #11
 801211e:	2203      	movs	r2, #3
 8012120:	f7fc f844 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012124:	20f8      	movs	r0, #248	; 0xf8
 8012126:	4b3b      	ldr	r3, [pc, #236]	; (8012214 <Update_Blink+0x608>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	b2da      	uxtb	r2, r3
 801212c:	4b3f      	ldr	r3, [pc, #252]	; (801222c <Update_Blink+0x620>)
 801212e:	2103      	movs	r1, #3
 8012130:	f7fb ff66 	bl	800e000 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012134:	23f8      	movs	r3, #248	; 0xf8
 8012136:	b29b      	uxth	r3, r3
 8012138:	3336      	adds	r3, #54	; 0x36
 801213a:	b29b      	uxth	r3, r3
 801213c:	b218      	sxth	r0, r3
 801213e:	4b35      	ldr	r3, [pc, #212]	; (8012214 <Update_Blink+0x608>)
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	b2da      	uxtb	r2, r3
 8012144:	4b37      	ldr	r3, [pc, #220]	; (8012224 <Update_Blink+0x618>)
 8012146:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801214a:	4619      	mov	r1, r3
 801214c:	460b      	mov	r3, r1
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	440b      	add	r3, r1
 8012152:	005b      	lsls	r3, r3, #1
 8012154:	4936      	ldr	r1, [pc, #216]	; (8012230 <Update_Blink+0x624>)
 8012156:	440b      	add	r3, r1
 8012158:	2103      	movs	r1, #3
 801215a:	f7fb ff51 	bl	800e000 <DispStr>
      break;
 801215e:	f000 bc4a 	b.w	80129f6 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 8012162:	89bb      	ldrh	r3, [r7, #12]
 8012164:	2b0a      	cmp	r3, #10
 8012166:	d101      	bne.n	801216c <Update_Blink+0x560>
 8012168:	2308      	movs	r3, #8
 801216a:	e000      	b.n	801216e <Update_Blink+0x562>
 801216c:	2309      	movs	r3, #9
 801216e:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8012170:	4b28      	ldr	r3, [pc, #160]	; (8012214 <Update_Blink+0x608>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	b2db      	uxtb	r3, r3
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00b      	beq.n	8012192 <Update_Blink+0x586>
 801217a:	4a21      	ldr	r2, [pc, #132]	; (8012200 <Update_Blink+0x5f4>)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012182:	f043 0301 	orr.w	r3, r3, #1
 8012186:	b219      	sxth	r1, r3
 8012188:	4a1d      	ldr	r2, [pc, #116]	; (8012200 <Update_Blink+0x5f4>)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012190:	e00a      	b.n	80121a8 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 8012192:	4a1b      	ldr	r2, [pc, #108]	; (8012200 <Update_Blink+0x5f4>)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801219a:	f023 0301 	bic.w	r3, r3, #1
 801219e:	b219      	sxth	r1, r3
 80121a0:	4a17      	ldr	r2, [pc, #92]	; (8012200 <Update_Blink+0x5f4>)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 80121a8:	4b15      	ldr	r3, [pc, #84]	; (8012200 <Update_Blink+0x5f4>)
 80121aa:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80121ae:	461a      	mov	r2, r3
 80121b0:	4b13      	ldr	r3, [pc, #76]	; (8012200 <Update_Blink+0x5f4>)
 80121b2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80121b6:	1ad3      	subs	r3, r2, r3
 80121b8:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 80121ba:	4b1a      	ldr	r3, [pc, #104]	; (8012224 <Update_Blink+0x618>)
 80121bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121c0:	461a      	mov	r2, r3
 80121c2:	4b1c      	ldr	r3, [pc, #112]	; (8012234 <Update_Blink+0x628>)
 80121c4:	5c9b      	ldrb	r3, [r3, r2]
 80121c6:	461c      	mov	r4, r3
 80121c8:	4b16      	ldr	r3, [pc, #88]	; (8012224 <Update_Blink+0x618>)
 80121ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121ce:	461a      	mov	r2, r3
 80121d0:	4b19      	ldr	r3, [pc, #100]	; (8012238 <Update_Blink+0x62c>)
 80121d2:	5c9b      	ldrb	r3, [r3, r2]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7ff f8ed 	bl	80113b4 <Exp>
 80121da:	4603      	mov	r3, r0
 80121dc:	fb03 f204 	mul.w	r2, r3, r4
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	db28      	blt.n	8012240 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80121ee:	2301      	movs	r3, #1
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	2303      	movs	r3, #3
 80121f4:	4a11      	ldr	r2, [pc, #68]	; (801223c <Update_Blink+0x630>)
 80121f6:	6879      	ldr	r1, [r7, #4]
 80121f8:	4805      	ldr	r0, [pc, #20]	; (8012210 <Update_Blink+0x604>)
 80121fa:	f7fe ffdf 	bl	80111bc <Value2Str>
 80121fe:	e027      	b.n	8012250 <Update_Blink+0x644>
 8012200:	20000140 	.word	0x20000140
 8012204:	080021cc 	.word	0x080021cc
 8012208:	080021a4 	.word	0x080021a4
 801220c:	08001d9c 	.word	0x08001d9c
 8012210:	20002660 	.word	0x20002660
 8012214:	2000072c 	.word	0x2000072c
 8012218:	080009b4 	.word	0x080009b4
 801221c:	080009b8 	.word	0x080009b8
 8012220:	080021f8 	.word	0x080021f8
 8012224:	20000274 	.word	0x20000274
 8012228:	200001ac 	.word	0x200001ac
 801222c:	080009c4 	.word	0x080009c4
 8012230:	08001ce8 	.word	0x08001ce8
 8012234:	080021b8 	.word	0x080021b8
 8012238:	08002190 	.word	0x08002190
 801223c:	08001d84 	.word	0x08001d84
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 8012240:	2300      	movs	r3, #0
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	2303      	movs	r3, #3
 8012246:	4aa3      	ldr	r2, [pc, #652]	; (80124d4 <Update_Blink+0x8c8>)
 8012248:	6879      	ldr	r1, [r7, #4]
 801224a:	48a3      	ldr	r0, [pc, #652]	; (80124d8 <Update_Blink+0x8cc>)
 801224c:	f7fe ffb6 	bl	80111bc <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 8012250:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012254:	4619      	mov	r1, r3
 8012256:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801225a:	f7fb feb9 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801225e:	4b9f      	ldr	r3, [pc, #636]	; (80124dc <Update_Blink+0x8d0>)
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	b2d8      	uxtb	r0, r3
 8012264:	2307      	movs	r3, #7
 8012266:	b29b      	uxth	r3, r3
 8012268:	3b03      	subs	r3, #3
 801226a:	b29b      	uxth	r3, r3
 801226c:	b219      	sxth	r1, r3
 801226e:	2336      	movs	r3, #54	; 0x36
 8012270:	9301      	str	r3, [sp, #4]
 8012272:	2300      	movs	r3, #0
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	230b      	movs	r3, #11
 8012278:	2203      	movs	r2, #3
 801227a:	f7fb ff97 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801227e:	2007      	movs	r0, #7
 8012280:	4b96      	ldr	r3, [pc, #600]	; (80124dc <Update_Blink+0x8d0>)
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	b2db      	uxtb	r3, r3
 8012286:	3310      	adds	r3, #16
 8012288:	b2da      	uxtb	r2, r3
 801228a:	4b95      	ldr	r3, [pc, #596]	; (80124e0 <Update_Blink+0x8d4>)
 801228c:	2103      	movs	r1, #3
 801228e:	f7fb feb7 	bl	800e000 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 8012292:	2307      	movs	r3, #7
 8012294:	b29b      	uxth	r3, r3
 8012296:	3306      	adds	r3, #6
 8012298:	b29b      	uxth	r3, r3
 801229a:	b218      	sxth	r0, r3
 801229c:	4b8f      	ldr	r3, [pc, #572]	; (80124dc <Update_Blink+0x8d0>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	b2da      	uxtb	r2, r3
 80122a2:	4b90      	ldr	r3, [pc, #576]	; (80124e4 <Update_Blink+0x8d8>)
 80122a4:	2103      	movs	r1, #3
 80122a6:	f7fb feab 	bl	800e000 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 80122aa:	2307      	movs	r3, #7
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	3312      	adds	r3, #18
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	b218      	sxth	r0, r3
 80122b4:	4b89      	ldr	r3, [pc, #548]	; (80124dc <Update_Blink+0x8d0>)
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	4b87      	ldr	r3, [pc, #540]	; (80124d8 <Update_Blink+0x8cc>)
 80122bc:	2103      	movs	r1, #3
 80122be:	f7fb fe9f 	bl	800e000 <DispStr>
      break;
 80122c2:	e398      	b.n	80129f6 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 80122c4:	4b85      	ldr	r3, [pc, #532]	; (80124dc <Update_Blink+0x8d0>)
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d008      	beq.n	80122e0 <Update_Blink+0x6d4>
 80122ce:	4b86      	ldr	r3, [pc, #536]	; (80124e8 <Update_Blink+0x8dc>)
 80122d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122d4:	f043 0301 	orr.w	r3, r3, #1
 80122d8:	b21a      	sxth	r2, r3
 80122da:	4b83      	ldr	r3, [pc, #524]	; (80124e8 <Update_Blink+0x8dc>)
 80122dc:	821a      	strh	r2, [r3, #16]
 80122de:	e007      	b.n	80122f0 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 80122e0:	4b81      	ldr	r3, [pc, #516]	; (80124e8 <Update_Blink+0x8dc>)
 80122e2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122e6:	f023 0301 	bic.w	r3, r3, #1
 80122ea:	b21a      	sxth	r2, r3
 80122ec:	4b7e      	ldr	r3, [pc, #504]	; (80124e8 <Update_Blink+0x8dc>)
 80122ee:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 80122f0:	4b7a      	ldr	r3, [pc, #488]	; (80124dc <Update_Blink+0x8d0>)
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d008      	beq.n	801230c <Update_Blink+0x700>
 80122fa:	4b7b      	ldr	r3, [pc, #492]	; (80124e8 <Update_Blink+0x8dc>)
 80122fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012300:	f043 0301 	orr.w	r3, r3, #1
 8012304:	b21a      	sxth	r2, r3
 8012306:	4b78      	ldr	r3, [pc, #480]	; (80124e8 <Update_Blink+0x8dc>)
 8012308:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 801230a:	e374      	b.n	80129f6 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 801230c:	4b76      	ldr	r3, [pc, #472]	; (80124e8 <Update_Blink+0x8dc>)
 801230e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012312:	f023 0301 	bic.w	r3, r3, #1
 8012316:	b21a      	sxth	r2, r3
 8012318:	4b73      	ldr	r3, [pc, #460]	; (80124e8 <Update_Blink+0x8dc>)
 801231a:	825a      	strh	r2, [r3, #18]
      break;
 801231c:	e36b      	b.n	80129f6 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 801231e:	4b73      	ldr	r3, [pc, #460]	; (80124ec <Update_Blink+0x8e0>)
 8012320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012324:	b29b      	uxth	r3, r3
 8012326:	f003 0301 	and.w	r3, r3, #1
 801232a:	2b00      	cmp	r3, #0
 801232c:	f040 8362 	bne.w	80129f4 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012330:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012334:	4619      	mov	r1, r3
 8012336:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801233a:	f7fb fe49 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 801233e:	4b67      	ldr	r3, [pc, #412]	; (80124dc <Update_Blink+0x8d0>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	b2d8      	uxtb	r0, r3
 8012344:	89bb      	ldrh	r3, [r7, #12]
 8012346:	4a6a      	ldr	r2, [pc, #424]	; (80124f0 <Update_Blink+0x8e4>)
 8012348:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801234c:	b29b      	uxth	r3, r3
 801234e:	3b03      	subs	r3, #3
 8012350:	b29b      	uxth	r3, r3
 8012352:	b219      	sxth	r1, r3
 8012354:	2318      	movs	r3, #24
 8012356:	9301      	str	r3, [sp, #4]
 8012358:	2301      	movs	r3, #1
 801235a:	9300      	str	r3, [sp, #0]
 801235c:	230b      	movs	r3, #11
 801235e:	22e1      	movs	r2, #225	; 0xe1
 8012360:	f7fb ff24 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012364:	89bb      	ldrh	r3, [r7, #12]
 8012366:	4a62      	ldr	r2, [pc, #392]	; (80124f0 <Update_Blink+0x8e4>)
 8012368:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801236c:	4b5b      	ldr	r3, [pc, #364]	; (80124dc <Update_Blink+0x8d0>)
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	b2da      	uxtb	r2, r3
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	21e1      	movs	r1, #225	; 0xe1
 8012376:	f7fb fe43 	bl	800e000 <DispStr>
      }
      break;
 801237a:	e33b      	b.n	80129f4 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 801237c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012380:	4619      	mov	r1, r3
 8012382:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012386:	f7fb fe23 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 801238a:	4b54      	ldr	r3, [pc, #336]	; (80124dc <Update_Blink+0x8d0>)
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	b2d8      	uxtb	r0, r3
 8012390:	23dd      	movs	r3, #221	; 0xdd
 8012392:	b29b      	uxth	r3, r3
 8012394:	3b03      	subs	r3, #3
 8012396:	b29b      	uxth	r3, r3
 8012398:	b219      	sxth	r1, r3
 801239a:	2330      	movs	r3, #48	; 0x30
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	2300      	movs	r3, #0
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	230b      	movs	r3, #11
 80123a4:	22e1      	movs	r2, #225	; 0xe1
 80123a6:	f7fb ff01 	bl	800e1ac <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80123aa:	20dd      	movs	r0, #221	; 0xdd
 80123ac:	4b4b      	ldr	r3, [pc, #300]	; (80124dc <Update_Blink+0x8d0>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	3310      	adds	r3, #16
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	4b4f      	ldr	r3, [pc, #316]	; (80124f4 <Update_Blink+0x8e8>)
 80123b8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d001      	beq.n	80123c4 <Update_Blink+0x7b8>
 80123c0:	4b4d      	ldr	r3, [pc, #308]	; (80124f8 <Update_Blink+0x8ec>)
 80123c2:	e000      	b.n	80123c6 <Update_Blink+0x7ba>
 80123c4:	4b4d      	ldr	r3, [pc, #308]	; (80124fc <Update_Blink+0x8f0>)
 80123c6:	21e1      	movs	r1, #225	; 0xe1
 80123c8:	f7fc f884 	bl	800e4d4 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 80123cc:	4b49      	ldr	r3, [pc, #292]	; (80124f4 <Update_Blink+0x8e8>)
 80123ce:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80123d2:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80123d4:	89fb      	ldrh	r3, [r7, #14]
 80123d6:	4a4a      	ldr	r2, [pc, #296]	; (8012500 <Update_Blink+0x8f4>)
 80123d8:	5cd3      	ldrb	r3, [r2, r3]
 80123da:	461c      	mov	r4, r3
 80123dc:	89fb      	ldrh	r3, [r7, #14]
 80123de:	4a49      	ldr	r2, [pc, #292]	; (8012504 <Update_Blink+0x8f8>)
 80123e0:	5cd3      	ldrb	r3, [r2, r3]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fe ffe6 	bl	80113b4 <Exp>
 80123e8:	4603      	mov	r3, r0
 80123ea:	fb03 f204 	mul.w	r2, r3, r4
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	fb02 f303 	mul.w	r3, r2, r3
 80123f4:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 80123f6:	2301      	movs	r3, #1
 80123f8:	9300      	str	r3, [sp, #0]
 80123fa:	2302      	movs	r3, #2
 80123fc:	4a42      	ldr	r2, [pc, #264]	; (8012508 <Update_Blink+0x8fc>)
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	4835      	ldr	r0, [pc, #212]	; (80124d8 <Update_Blink+0x8cc>)
 8012402:	f7fe fedb 	bl	80111bc <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012406:	23e7      	movs	r3, #231	; 0xe7
 8012408:	b29b      	uxth	r3, r3
 801240a:	3309      	adds	r3, #9
 801240c:	b29b      	uxth	r3, r3
 801240e:	b218      	sxth	r0, r3
 8012410:	4b32      	ldr	r3, [pc, #200]	; (80124dc <Update_Blink+0x8d0>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	b2da      	uxtb	r2, r3
 8012416:	4b3d      	ldr	r3, [pc, #244]	; (801250c <Update_Blink+0x900>)
 8012418:	21e1      	movs	r1, #225	; 0xe1
 801241a:	f7fb fdf1 	bl	800e000 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 801241e:	20e7      	movs	r0, #231	; 0xe7
 8012420:	4b2e      	ldr	r3, [pc, #184]	; (80124dc <Update_Blink+0x8d0>)
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	b2db      	uxtb	r3, r3
 8012426:	3310      	adds	r3, #16
 8012428:	b2da      	uxtb	r2, r3
 801242a:	4b39      	ldr	r3, [pc, #228]	; (8012510 <Update_Blink+0x904>)
 801242c:	21e1      	movs	r1, #225	; 0xe1
 801242e:	f7fc f851 	bl	800e4d4 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012432:	23e7      	movs	r3, #231	; 0xe7
 8012434:	b29b      	uxth	r3, r3
 8012436:	3309      	adds	r3, #9
 8012438:	b29b      	uxth	r3, r3
 801243a:	b218      	sxth	r0, r3
 801243c:	4b27      	ldr	r3, [pc, #156]	; (80124dc <Update_Blink+0x8d0>)
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	b2da      	uxtb	r2, r3
 8012442:	4b25      	ldr	r3, [pc, #148]	; (80124d8 <Update_Blink+0x8cc>)
 8012444:	21e1      	movs	r1, #225	; 0xe1
 8012446:	f7fb fddb 	bl	800e000 <DispStr>
      break;
 801244a:	e2d4      	b.n	80129f6 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 801244c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012450:	4619      	mov	r1, r3
 8012452:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012456:	f7fb fdbb 	bl	800dfd0 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 801245a:	20cf      	movs	r0, #207	; 0xcf
 801245c:	4b25      	ldr	r3, [pc, #148]	; (80124f4 <Update_Blink+0x8e8>)
 801245e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012462:	2b00      	cmp	r3, #0
 8012464:	d001      	beq.n	801246a <Update_Blink+0x85e>
 8012466:	4b2b      	ldr	r3, [pc, #172]	; (8012514 <Update_Blink+0x908>)
 8012468:	e000      	b.n	801246c <Update_Blink+0x860>
 801246a:	4b2b      	ldr	r3, [pc, #172]	; (8012518 <Update_Blink+0x90c>)
 801246c:	2210      	movs	r2, #16
 801246e:	21e1      	movs	r1, #225	; 0xe1
 8012470:	f7fc f830 	bl	800e4d4 <DispStr10x14>
      break;
 8012474:	e2bf      	b.n	80129f6 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012476:	4b19      	ldr	r3, [pc, #100]	; (80124dc <Update_Blink+0x8d0>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	d008      	beq.n	8012492 <Update_Blink+0x886>
 8012480:	4b19      	ldr	r3, [pc, #100]	; (80124e8 <Update_Blink+0x8dc>)
 8012482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012486:	f043 0301 	orr.w	r3, r3, #1
 801248a:	b21a      	sxth	r2, r3
 801248c:	4b16      	ldr	r3, [pc, #88]	; (80124e8 <Update_Blink+0x8dc>)
 801248e:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012490:	e2b1      	b.n	80129f6 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012492:	4b15      	ldr	r3, [pc, #84]	; (80124e8 <Update_Blink+0x8dc>)
 8012494:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012498:	f023 0301 	bic.w	r3, r3, #1
 801249c:	b21a      	sxth	r2, r3
 801249e:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <Update_Blink+0x8dc>)
 80124a0:	811a      	strh	r2, [r3, #8]
      break;
 80124a2:	e2a8      	b.n	80129f6 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 80124a4:	4b0d      	ldr	r3, [pc, #52]	; (80124dc <Update_Blink+0x8d0>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d008      	beq.n	80124c0 <Update_Blink+0x8b4>
 80124ae:	4b0e      	ldr	r3, [pc, #56]	; (80124e8 <Update_Blink+0x8dc>)
 80124b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124b4:	f043 0301 	orr.w	r3, r3, #1
 80124b8:	b21a      	sxth	r2, r3
 80124ba:	4b0b      	ldr	r3, [pc, #44]	; (80124e8 <Update_Blink+0x8dc>)
 80124bc:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 80124be:	e29a      	b.n	80129f6 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 80124c0:	4b09      	ldr	r3, [pc, #36]	; (80124e8 <Update_Blink+0x8dc>)
 80124c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124c6:	f023 0301 	bic.w	r3, r3, #1
 80124ca:	b21a      	sxth	r2, r3
 80124cc:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <Update_Blink+0x8dc>)
 80124ce:	811a      	strh	r2, [r3, #8]
      break;
 80124d0:	e291      	b.n	80129f6 <Update_Blink+0xdea>
 80124d2:	bf00      	nop
 80124d4:	08001d84 	.word	0x08001d84
 80124d8:	20002660 	.word	0x20002660
 80124dc:	2000072c 	.word	0x2000072c
 80124e0:	080009b4 	.word	0x080009b4
 80124e4:	080009d0 	.word	0x080009d0
 80124e8:	20000140 	.word	0x20000140
 80124ec:	20002656 	.word	0x20002656
 80124f0:	080021f8 	.word	0x080021f8
 80124f4:	20000274 	.word	0x20000274
 80124f8:	080009dc 	.word	0x080009dc
 80124fc:	080009e0 	.word	0x080009e0
 8012500:	080021cc 	.word	0x080021cc
 8012504:	080021a4 	.word	0x080021a4
 8012508:	08001d9c 	.word	0x08001d9c
 801250c:	080009e4 	.word	0x080009e4
 8012510:	080009ec 	.word	0x080009ec
 8012514:	080009f0 	.word	0x080009f0
 8012518:	080009b0 	.word	0x080009b0

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 801251c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012520:	4619      	mov	r1, r3
 8012522:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012526:	f7fb fd53 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 801252a:	4b93      	ldr	r3, [pc, #588]	; (8012778 <Update_Blink+0xb6c>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	b2d8      	uxtb	r0, r3
 8012530:	89bb      	ldrh	r3, [r7, #12]
 8012532:	4a92      	ldr	r2, [pc, #584]	; (801277c <Update_Blink+0xb70>)
 8012534:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012538:	b29b      	uxth	r3, r3
 801253a:	3b03      	subs	r3, #3
 801253c:	b29b      	uxth	r3, r3
 801253e:	b219      	sxth	r1, r3
 8012540:	231e      	movs	r3, #30
 8012542:	9301      	str	r3, [sp, #4]
 8012544:	2301      	movs	r3, #1
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	230b      	movs	r3, #11
 801254a:	22e1      	movs	r2, #225	; 0xe1
 801254c:	f7fb fe2e 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012550:	89bb      	ldrh	r3, [r7, #12]
 8012552:	4a8a      	ldr	r2, [pc, #552]	; (801277c <Update_Blink+0xb70>)
 8012554:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012558:	4b87      	ldr	r3, [pc, #540]	; (8012778 <Update_Blink+0xb6c>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	b2da      	uxtb	r2, r3
 801255e:	4b88      	ldr	r3, [pc, #544]	; (8012780 <Update_Blink+0xb74>)
 8012560:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00a      	beq.n	801257e <Update_Blink+0x972>
 8012568:	4b85      	ldr	r3, [pc, #532]	; (8012780 <Update_Blink+0xb74>)
 801256a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801256e:	4619      	mov	r1, r3
 8012570:	460b      	mov	r3, r1
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	440b      	add	r3, r1
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	4982      	ldr	r1, [pc, #520]	; (8012784 <Update_Blink+0xb78>)
 801257a:	440b      	add	r3, r1
 801257c:	e000      	b.n	8012580 <Update_Blink+0x974>
 801257e:	4b82      	ldr	r3, [pc, #520]	; (8012788 <Update_Blink+0xb7c>)
 8012580:	21e1      	movs	r1, #225	; 0xe1
 8012582:	f7fb fd3d 	bl	800e000 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012586:	4b81      	ldr	r3, [pc, #516]	; (801278c <Update_Blink+0xb80>)
 8012588:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801258c:	f023 0301 	bic.w	r3, r3, #1
 8012590:	b21a      	sxth	r2, r3
 8012592:	4b7e      	ldr	r3, [pc, #504]	; (801278c <Update_Blink+0xb80>)
 8012594:	805a      	strh	r2, [r3, #2]
      break;
 8012596:	e22e      	b.n	80129f6 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012598:	4b77      	ldr	r3, [pc, #476]	; (8012778 <Update_Blink+0xb6c>)
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	b2db      	uxtb	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d008      	beq.n	80125b4 <Update_Blink+0x9a8>
 80125a2:	4b7a      	ldr	r3, [pc, #488]	; (801278c <Update_Blink+0xb80>)
 80125a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125a8:	f043 0301 	orr.w	r3, r3, #1
 80125ac:	b21a      	sxth	r2, r3
 80125ae:	4b77      	ldr	r3, [pc, #476]	; (801278c <Update_Blink+0xb80>)
 80125b0:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 80125b2:	e220      	b.n	80129f6 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 80125b4:	4b75      	ldr	r3, [pc, #468]	; (801278c <Update_Blink+0xb80>)
 80125b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125ba:	f023 0301 	bic.w	r3, r3, #1
 80125be:	b21a      	sxth	r2, r3
 80125c0:	4b72      	ldr	r3, [pc, #456]	; (801278c <Update_Blink+0xb80>)
 80125c2:	805a      	strh	r2, [r3, #2]
      break;
 80125c4:	e217      	b.n	80129f6 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 80125c6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80125ca:	4619      	mov	r1, r3
 80125cc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125d0:	f7fb fcfe 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 80125d4:	4b68      	ldr	r3, [pc, #416]	; (8012778 <Update_Blink+0xb6c>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	b2d8      	uxtb	r0, r3
 80125da:	89bb      	ldrh	r3, [r7, #12]
 80125dc:	4a67      	ldr	r2, [pc, #412]	; (801277c <Update_Blink+0xb70>)
 80125de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	3b03      	subs	r3, #3
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	b219      	sxth	r1, r3
 80125ea:	231e      	movs	r3, #30
 80125ec:	9301      	str	r3, [sp, #4]
 80125ee:	2301      	movs	r3, #1
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	230b      	movs	r3, #11
 80125f4:	22e1      	movs	r2, #225	; 0xe1
 80125f6:	f7fb fdd9 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80125fa:	89bb      	ldrh	r3, [r7, #12]
 80125fc:	4a5f      	ldr	r2, [pc, #380]	; (801277c <Update_Blink+0xb70>)
 80125fe:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012602:	4b5d      	ldr	r3, [pc, #372]	; (8012778 <Update_Blink+0xb6c>)
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	b2da      	uxtb	r2, r3
 8012608:	4b5d      	ldr	r3, [pc, #372]	; (8012780 <Update_Blink+0xb74>)
 801260a:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00a      	beq.n	8012628 <Update_Blink+0xa1c>
 8012612:	4b5b      	ldr	r3, [pc, #364]	; (8012780 <Update_Blink+0xb74>)
 8012614:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012618:	4619      	mov	r1, r3
 801261a:	460b      	mov	r3, r1
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	440b      	add	r3, r1
 8012620:	005b      	lsls	r3, r3, #1
 8012622:	4958      	ldr	r1, [pc, #352]	; (8012784 <Update_Blink+0xb78>)
 8012624:	440b      	add	r3, r1
 8012626:	e000      	b.n	801262a <Update_Blink+0xa1e>
 8012628:	4b57      	ldr	r3, [pc, #348]	; (8012788 <Update_Blink+0xb7c>)
 801262a:	21e1      	movs	r1, #225	; 0xe1
 801262c:	f7fb fce8 	bl	800e000 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012630:	4b56      	ldr	r3, [pc, #344]	; (801278c <Update_Blink+0xb80>)
 8012632:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012636:	f023 0301 	bic.w	r3, r3, #1
 801263a:	b21a      	sxth	r2, r3
 801263c:	4b53      	ldr	r3, [pc, #332]	; (801278c <Update_Blink+0xb80>)
 801263e:	805a      	strh	r2, [r3, #2]
      break;
 8012640:	e1d9      	b.n	80129f6 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012642:	f240 531f 	movw	r3, #1311	; 0x51f
 8012646:	4619      	mov	r1, r3
 8012648:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801264c:	f7fb fcc0 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012650:	4b49      	ldr	r3, [pc, #292]	; (8012778 <Update_Blink+0xb6c>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	b2d8      	uxtb	r0, r3
 8012656:	2307      	movs	r3, #7
 8012658:	b29b      	uxth	r3, r3
 801265a:	3b03      	subs	r3, #3
 801265c:	b29b      	uxth	r3, r3
 801265e:	b219      	sxth	r1, r3
 8012660:	2336      	movs	r3, #54	; 0x36
 8012662:	9301      	str	r3, [sp, #4]
 8012664:	2300      	movs	r3, #0
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	230b      	movs	r3, #11
 801266a:	2203      	movs	r2, #3
 801266c:	f7fb fd9e 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012670:	89bb      	ldrh	r3, [r7, #12]
 8012672:	4a42      	ldr	r2, [pc, #264]	; (801277c <Update_Blink+0xb70>)
 8012674:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012678:	4b3f      	ldr	r3, [pc, #252]	; (8012778 <Update_Blink+0xb6c>)
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	b2da      	uxtb	r2, r3
 801267e:	4b44      	ldr	r3, [pc, #272]	; (8012790 <Update_Blink+0xb84>)
 8012680:	2103      	movs	r1, #3
 8012682:	f7fb fcbd 	bl	800e000 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012686:	89bb      	ldrh	r3, [r7, #12]
 8012688:	4a3c      	ldr	r2, [pc, #240]	; (801277c <Update_Blink+0xb70>)
 801268a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801268e:	b29b      	uxth	r3, r3
 8012690:	3318      	adds	r3, #24
 8012692:	b29b      	uxth	r3, r3
 8012694:	b218      	sxth	r0, r3
 8012696:	4b38      	ldr	r3, [pc, #224]	; (8012778 <Update_Blink+0xb6c>)
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	b2da      	uxtb	r2, r3
 801269c:	4b3d      	ldr	r3, [pc, #244]	; (8012794 <Update_Blink+0xb88>)
 801269e:	2103      	movs	r1, #3
 80126a0:	f7fb fcae 	bl	800e000 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 80126a4:	89bb      	ldrh	r3, [r7, #12]
 80126a6:	4a35      	ldr	r2, [pc, #212]	; (801277c <Update_Blink+0xb70>)
 80126a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	3318      	adds	r3, #24
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	b218      	sxth	r0, r3
 80126b4:	4b30      	ldr	r3, [pc, #192]	; (8012778 <Update_Blink+0xb6c>)
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	89bb      	ldrh	r3, [r7, #12]
 80126bc:	4930      	ldr	r1, [pc, #192]	; (8012780 <Update_Blink+0xb74>)
 80126be:	00db      	lsls	r3, r3, #3
 80126c0:	440b      	add	r3, r1
 80126c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80126c6:	4619      	mov	r1, r3
 80126c8:	460b      	mov	r3, r1
 80126ca:	005b      	lsls	r3, r3, #1
 80126cc:	440b      	add	r3, r1
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	4931      	ldr	r1, [pc, #196]	; (8012798 <Update_Blink+0xb8c>)
 80126d2:	440b      	add	r3, r1
 80126d4:	2103      	movs	r1, #3
 80126d6:	f7fb fc93 	bl	800e000 <DispStr>
      break;
 80126da:	e18c      	b.n	80129f6 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80126dc:	f240 531f 	movw	r3, #1311	; 0x51f
 80126e0:	4619      	mov	r1, r3
 80126e2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126e6:	f7fb fc73 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 80126ea:	4b23      	ldr	r3, [pc, #140]	; (8012778 <Update_Blink+0xb6c>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	b2d8      	uxtb	r0, r3
 80126f0:	2307      	movs	r3, #7
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	3b03      	subs	r3, #3
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	b219      	sxth	r1, r3
 80126fa:	2336      	movs	r3, #54	; 0x36
 80126fc:	9301      	str	r3, [sp, #4]
 80126fe:	2300      	movs	r3, #0
 8012700:	9300      	str	r3, [sp, #0]
 8012702:	230b      	movs	r3, #11
 8012704:	2203      	movs	r2, #3
 8012706:	f7fb fd51 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 801270a:	89bb      	ldrh	r3, [r7, #12]
 801270c:	4a1b      	ldr	r2, [pc, #108]	; (801277c <Update_Blink+0xb70>)
 801270e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012712:	4b19      	ldr	r3, [pc, #100]	; (8012778 <Update_Blink+0xb6c>)
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	b2da      	uxtb	r2, r3
 8012718:	4b1d      	ldr	r3, [pc, #116]	; (8012790 <Update_Blink+0xb84>)
 801271a:	2103      	movs	r1, #3
 801271c:	f7fb fc70 	bl	800e000 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012720:	89bb      	ldrh	r3, [r7, #12]
 8012722:	4a16      	ldr	r2, [pc, #88]	; (801277c <Update_Blink+0xb70>)
 8012724:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012728:	b29b      	uxth	r3, r3
 801272a:	3318      	adds	r3, #24
 801272c:	b29b      	uxth	r3, r3
 801272e:	b218      	sxth	r0, r3
 8012730:	4b11      	ldr	r3, [pc, #68]	; (8012778 <Update_Blink+0xb6c>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	b2da      	uxtb	r2, r3
 8012736:	4b17      	ldr	r3, [pc, #92]	; (8012794 <Update_Blink+0xb88>)
 8012738:	2103      	movs	r1, #3
 801273a:	f7fb fc61 	bl	800e000 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 801273e:	89bb      	ldrh	r3, [r7, #12]
 8012740:	4a0e      	ldr	r2, [pc, #56]	; (801277c <Update_Blink+0xb70>)
 8012742:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012746:	b29b      	uxth	r3, r3
 8012748:	3318      	adds	r3, #24
 801274a:	b29b      	uxth	r3, r3
 801274c:	b218      	sxth	r0, r3
 801274e:	4b0a      	ldr	r3, [pc, #40]	; (8012778 <Update_Blink+0xb6c>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	b2da      	uxtb	r2, r3
 8012754:	89bb      	ldrh	r3, [r7, #12]
 8012756:	490a      	ldr	r1, [pc, #40]	; (8012780 <Update_Blink+0xb74>)
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	440b      	add	r3, r1
 801275c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012760:	4619      	mov	r1, r3
 8012762:	460b      	mov	r3, r1
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	440b      	add	r3, r1
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	490c      	ldr	r1, [pc, #48]	; (801279c <Update_Blink+0xb90>)
 801276c:	440b      	add	r3, r1
 801276e:	2103      	movs	r1, #3
 8012770:	f7fb fc46 	bl	800e000 <DispStr>
      break;
 8012774:	e13f      	b.n	80129f6 <Update_Blink+0xdea>
 8012776:	bf00      	nop
 8012778:	2000072c 	.word	0x2000072c
 801277c:	080021f8 	.word	0x080021f8
 8012780:	20000274 	.word	0x20000274
 8012784:	08001d24 	.word	0x08001d24
 8012788:	08001d48 	.word	0x08001d48
 801278c:	20000140 	.word	0x20000140
 8012790:	080009f4 	.word	0x080009f4
 8012794:	080009e4 	.word	0x080009e4
 8012798:	08001dec 	.word	0x08001dec
 801279c:	08001f34 	.word	0x08001f34

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 80127a0:	f240 531f 	movw	r3, #1311	; 0x51f
 80127a4:	4619      	mov	r1, r3
 80127a6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80127aa:	f7fb fc11 	bl	800dfd0 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 80127ae:	89bb      	ldrh	r3, [r7, #12]
 80127b0:	4a96      	ldr	r2, [pc, #600]	; (8012a0c <Update_Blink+0xe00>)
 80127b2:	00db      	lsls	r3, r3, #3
 80127b4:	4413      	add	r3, r2
 80127b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127ba:	461a      	mov	r2, r3
 80127bc:	4613      	mov	r3, r2
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	005b      	lsls	r3, r3, #1
 80127c4:	4619      	mov	r1, r3
 80127c6:	89bb      	ldrh	r3, [r7, #12]
 80127c8:	4a90      	ldr	r2, [pc, #576]	; (8012a0c <Update_Blink+0xe00>)
 80127ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127ce:	2301      	movs	r3, #1
 80127d0:	9300      	str	r3, [sp, #0]
 80127d2:	2302      	movs	r3, #2
 80127d4:	488e      	ldr	r0, [pc, #568]	; (8012a10 <Update_Blink+0xe04>)
 80127d6:	f7fe fcf1 	bl	80111bc <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80127da:	4b8e      	ldr	r3, [pc, #568]	; (8012a14 <Update_Blink+0xe08>)
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	b2d8      	uxtb	r0, r3
 80127e0:	2307      	movs	r3, #7
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	3b03      	subs	r3, #3
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	b219      	sxth	r1, r3
 80127ea:	2336      	movs	r3, #54	; 0x36
 80127ec:	9301      	str	r3, [sp, #4]
 80127ee:	2300      	movs	r3, #0
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	230b      	movs	r3, #11
 80127f4:	2203      	movs	r2, #3
 80127f6:	f7fb fcd9 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 80127fa:	89bb      	ldrh	r3, [r7, #12]
 80127fc:	4a86      	ldr	r2, [pc, #536]	; (8012a18 <Update_Blink+0xe0c>)
 80127fe:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012802:	4b84      	ldr	r3, [pc, #528]	; (8012a14 <Update_Blink+0xe08>)
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	b2da      	uxtb	r2, r3
 8012808:	4b84      	ldr	r3, [pc, #528]	; (8012a1c <Update_Blink+0xe10>)
 801280a:	2103      	movs	r1, #3
 801280c:	f7fb fbf8 	bl	800e000 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8012810:	89bb      	ldrh	r3, [r7, #12]
 8012812:	4a81      	ldr	r2, [pc, #516]	; (8012a18 <Update_Blink+0xe0c>)
 8012814:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012818:	b29b      	uxth	r3, r3
 801281a:	3324      	adds	r3, #36	; 0x24
 801281c:	b29b      	uxth	r3, r3
 801281e:	b218      	sxth	r0, r3
 8012820:	4b7c      	ldr	r3, [pc, #496]	; (8012a14 <Update_Blink+0xe08>)
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	b2da      	uxtb	r2, r3
 8012826:	4b7e      	ldr	r3, [pc, #504]	; (8012a20 <Update_Blink+0xe14>)
 8012828:	2103      	movs	r1, #3
 801282a:	f7fb fbe9 	bl	800e000 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801282e:	89bb      	ldrh	r3, [r7, #12]
 8012830:	4a79      	ldr	r2, [pc, #484]	; (8012a18 <Update_Blink+0xe0c>)
 8012832:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012836:	b29b      	uxth	r3, r3
 8012838:	3324      	adds	r3, #36	; 0x24
 801283a:	b29b      	uxth	r3, r3
 801283c:	b218      	sxth	r0, r3
 801283e:	4b75      	ldr	r3, [pc, #468]	; (8012a14 <Update_Blink+0xe08>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	b2da      	uxtb	r2, r3
 8012844:	4b72      	ldr	r3, [pc, #456]	; (8012a10 <Update_Blink+0xe04>)
 8012846:	2103      	movs	r1, #3
 8012848:	f7fb fbda 	bl	800e000 <DispStr>
      break;
 801284c:	e0d3      	b.n	80129f6 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801284e:	4b71      	ldr	r3, [pc, #452]	; (8012a14 <Update_Blink+0xe08>)
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	b2db      	uxtb	r3, r3
 8012854:	2b00      	cmp	r3, #0
 8012856:	d008      	beq.n	801286a <Update_Blink+0xc5e>
 8012858:	4b72      	ldr	r3, [pc, #456]	; (8012a24 <Update_Blink+0xe18>)
 801285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801285e:	f043 0304 	orr.w	r3, r3, #4
 8012862:	b21a      	sxth	r2, r3
 8012864:	4b6f      	ldr	r3, [pc, #444]	; (8012a24 <Update_Blink+0xe18>)
 8012866:	801a      	strh	r2, [r3, #0]
 8012868:	e007      	b.n	801287a <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 801286a:	4b6e      	ldr	r3, [pc, #440]	; (8012a24 <Update_Blink+0xe18>)
 801286c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012870:	f023 0304 	bic.w	r3, r3, #4
 8012874:	b21a      	sxth	r2, r3
 8012876:	4b6b      	ldr	r3, [pc, #428]	; (8012a24 <Update_Blink+0xe18>)
 8012878:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 801287a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801287e:	4619      	mov	r1, r3
 8012880:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012884:	f7fb fba4 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012888:	4b62      	ldr	r3, [pc, #392]	; (8012a14 <Update_Blink+0xe08>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	b2d8      	uxtb	r0, r3
 801288e:	89bb      	ldrh	r3, [r7, #12]
 8012890:	4a61      	ldr	r2, [pc, #388]	; (8012a18 <Update_Blink+0xe0c>)
 8012892:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012896:	b29b      	uxth	r3, r3
 8012898:	3b03      	subs	r3, #3
 801289a:	b29b      	uxth	r3, r3
 801289c:	b219      	sxth	r1, r3
 801289e:	2336      	movs	r3, #54	; 0x36
 80128a0:	9301      	str	r3, [sp, #4]
 80128a2:	2300      	movs	r3, #0
 80128a4:	9300      	str	r3, [sp, #0]
 80128a6:	230b      	movs	r3, #11
 80128a8:	2203      	movs	r2, #3
 80128aa:	f7fb fc7f 	bl	800e1ac <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80128ae:	89bb      	ldrh	r3, [r7, #12]
 80128b0:	4a59      	ldr	r2, [pc, #356]	; (8012a18 <Update_Blink+0xe0c>)
 80128b2:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80128b6:	4b57      	ldr	r3, [pc, #348]	; (8012a14 <Update_Blink+0xe08>)
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	4b5a      	ldr	r3, [pc, #360]	; (8012a28 <Update_Blink+0xe1c>)
 80128be:	2103      	movs	r1, #3
 80128c0:	f7fb fb9e 	bl	800e000 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80128c4:	89bb      	ldrh	r3, [r7, #12]
 80128c6:	4a54      	ldr	r2, [pc, #336]	; (8012a18 <Update_Blink+0xe0c>)
 80128c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	3328      	adds	r3, #40	; 0x28
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	b218      	sxth	r0, r3
 80128d4:	4b4f      	ldr	r3, [pc, #316]	; (8012a14 <Update_Blink+0xe08>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	3310      	adds	r3, #16
 80128dc:	b2da      	uxtb	r2, r3
 80128de:	4b53      	ldr	r3, [pc, #332]	; (8012a2c <Update_Blink+0xe20>)
 80128e0:	2103      	movs	r1, #3
 80128e2:	f7fb fb8d 	bl	800e000 <DispStr>
      break;
 80128e6:	e086      	b.n	80129f6 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 80128e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80128ec:	4619      	mov	r1, r3
 80128ee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128f2:	f7fb fb6d 	bl	800dfd0 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80128f6:	4b47      	ldr	r3, [pc, #284]	; (8012a14 <Update_Blink+0xe08>)
 80128f8:	781b      	ldrb	r3, [r3, #0]
 80128fa:	b2d8      	uxtb	r0, r3
 80128fc:	89bb      	ldrh	r3, [r7, #12]
 80128fe:	4a46      	ldr	r2, [pc, #280]	; (8012a18 <Update_Blink+0xe0c>)
 8012900:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012904:	b29b      	uxth	r3, r3
 8012906:	3b03      	subs	r3, #3
 8012908:	b29b      	uxth	r3, r3
 801290a:	b219      	sxth	r1, r3
 801290c:	2336      	movs	r3, #54	; 0x36
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	2300      	movs	r3, #0
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	230b      	movs	r3, #11
 8012916:	2203      	movs	r2, #3
 8012918:	f7fb fc48 	bl	800e1ac <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 801291c:	89bb      	ldrh	r3, [r7, #12]
 801291e:	4a3e      	ldr	r2, [pc, #248]	; (8012a18 <Update_Blink+0xe0c>)
 8012920:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012924:	4b3b      	ldr	r3, [pc, #236]	; (8012a14 <Update_Blink+0xe08>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	b2da      	uxtb	r2, r3
 801292a:	4b3f      	ldr	r3, [pc, #252]	; (8012a28 <Update_Blink+0xe1c>)
 801292c:	2103      	movs	r1, #3
 801292e:	f7fb fb67 	bl	800e000 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 8012932:	89bb      	ldrh	r3, [r7, #12]
 8012934:	4a38      	ldr	r2, [pc, #224]	; (8012a18 <Update_Blink+0xe0c>)
 8012936:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801293a:	b29b      	uxth	r3, r3
 801293c:	3328      	adds	r3, #40	; 0x28
 801293e:	b29b      	uxth	r3, r3
 8012940:	b218      	sxth	r0, r3
 8012942:	4b34      	ldr	r3, [pc, #208]	; (8012a14 <Update_Blink+0xe08>)
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	b2db      	uxtb	r3, r3
 8012948:	3310      	adds	r3, #16
 801294a:	b2da      	uxtb	r2, r3
 801294c:	4b37      	ldr	r3, [pc, #220]	; (8012a2c <Update_Blink+0xe20>)
 801294e:	2103      	movs	r1, #3
 8012950:	f7fb fb56 	bl	800e000 <DispStr>
      break;
 8012954:	e04f      	b.n	80129f6 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 8012956:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801295a:	4619      	mov	r1, r3
 801295c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012960:	f7fb fb36 	bl	800dfd0 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8012964:	4b29      	ldr	r3, [pc, #164]	; (8012a0c <Update_Blink+0xe00>)
 8012966:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 801296a:	4619      	mov	r1, r3
 801296c:	2301      	movs	r3, #1
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	2302      	movs	r3, #2
 8012972:	4a2f      	ldr	r2, [pc, #188]	; (8012a30 <Update_Blink+0xe24>)
 8012974:	4826      	ldr	r0, [pc, #152]	; (8012a10 <Update_Blink+0xe04>)
 8012976:	f7fe fc21 	bl	80111bc <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801297a:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <Update_Blink+0xe08>)
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	b2d8      	uxtb	r0, r3
 8012980:	89bb      	ldrh	r3, [r7, #12]
 8012982:	4a25      	ldr	r2, [pc, #148]	; (8012a18 <Update_Blink+0xe0c>)
 8012984:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012988:	b29b      	uxth	r3, r3
 801298a:	3b03      	subs	r3, #3
 801298c:	b29b      	uxth	r3, r3
 801298e:	b219      	sxth	r1, r3
 8012990:	2336      	movs	r3, #54	; 0x36
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	2300      	movs	r3, #0
 8012996:	9300      	str	r3, [sp, #0]
 8012998:	230b      	movs	r3, #11
 801299a:	2203      	movs	r2, #3
 801299c:	f7fb fc06 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80129a0:	89bb      	ldrh	r3, [r7, #12]
 80129a2:	4a1d      	ldr	r2, [pc, #116]	; (8012a18 <Update_Blink+0xe0c>)
 80129a4:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80129a8:	4b1a      	ldr	r3, [pc, #104]	; (8012a14 <Update_Blink+0xe08>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	b2da      	uxtb	r2, r3
 80129ae:	4b21      	ldr	r3, [pc, #132]	; (8012a34 <Update_Blink+0xe28>)
 80129b0:	2103      	movs	r1, #3
 80129b2:	f7fb fb25 	bl	800e000 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80129b6:	89bb      	ldrh	r3, [r7, #12]
 80129b8:	4a17      	ldr	r2, [pc, #92]	; (8012a18 <Update_Blink+0xe0c>)
 80129ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129be:	b29b      	uxth	r3, r3
 80129c0:	3306      	adds	r3, #6
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	b218      	sxth	r0, r3
 80129c6:	4b13      	ldr	r3, [pc, #76]	; (8012a14 <Update_Blink+0xe08>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	b2da      	uxtb	r2, r3
 80129cc:	4b10      	ldr	r3, [pc, #64]	; (8012a10 <Update_Blink+0xe04>)
 80129ce:	2103      	movs	r1, #3
 80129d0:	f7fb fb16 	bl	800e000 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80129d4:	89bb      	ldrh	r3, [r7, #12]
 80129d6:	4a10      	ldr	r2, [pc, #64]	; (8012a18 <Update_Blink+0xe0c>)
 80129d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	331e      	adds	r3, #30
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	b218      	sxth	r0, r3
 80129e4:	4b0b      	ldr	r3, [pc, #44]	; (8012a14 <Update_Blink+0xe08>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	4b13      	ldr	r3, [pc, #76]	; (8012a38 <Update_Blink+0xe2c>)
 80129ec:	2103      	movs	r1, #3
 80129ee:	f7fb fb07 	bl	800e000 <DispStr>
      break;
 80129f2:	e000      	b.n	80129f6 <Update_Blink+0xdea>
      break;
 80129f4:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 80129f6:	89bb      	ldrh	r3, [r7, #12]
 80129f8:	2b03      	cmp	r3, #3
 80129fa:	d002      	beq.n	8012a02 <Update_Blink+0xdf6>
 80129fc:	4b09      	ldr	r3, [pc, #36]	; (8012a24 <Update_Blink+0xe18>)
 80129fe:	2202      	movs	r2, #2
 8012a00:	801a      	strh	r2, [r3, #0]
  }
}
 8012a02:	bf00      	nop
 8012a04:	3714      	adds	r7, #20
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd90      	pop	{r4, r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	20000274 	.word	0x20000274
 8012a10:	20002660 	.word	0x20002660
 8012a14:	2000072c 	.word	0x2000072c
 8012a18:	080021f8 	.word	0x080021f8
 8012a1c:	080009fc 	.word	0x080009fc
 8012a20:	08000a04 	.word	0x08000a04
 8012a24:	20000140 	.word	0x20000140
 8012a28:	08000a08 	.word	0x08000a08
 8012a2c:	08000a14 	.word	0x08000a14
 8012a30:	20000524 	.word	0x20000524
 8012a34:	08000a18 	.word	0x08000a18
 8012a38:	08000a1c 	.word	0x08000a1c

08012a3c <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8012a3c:	b590      	push	{r4, r7, lr}
 8012a3e:	b089      	sub	sp, #36	; 0x24
 8012a40:	af02      	add	r7, sp, #8
  long scale = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8012a46:	4ba9      	ldr	r3, [pc, #676]	; (8012cec <Update_Detail+0x2b0>)
 8012a48:	681a      	ldr	r2, [r3, #0]
 8012a4a:	4ba9      	ldr	r3, [pc, #676]	; (8012cf0 <Update_Detail+0x2b4>)
 8012a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a50:	4619      	mov	r1, r3
 8012a52:	4ba8      	ldr	r3, [pc, #672]	; (8012cf4 <Update_Detail+0x2b8>)
 8012a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	bf14      	ite	ne
 8012a5c:	2301      	movne	r3, #1
 8012a5e:	2300      	moveq	r3, #0
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	440b      	add	r3, r1
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	4413      	add	r3, r2
 8012a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4aa2      	ldr	r2, [pc, #648]	; (8012cf8 <Update_Detail+0x2bc>)
 8012a70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012a74:	4611      	mov	r1, r2
 8012a76:	4aa1      	ldr	r2, [pc, #644]	; (8012cfc <Update_Detail+0x2c0>)
 8012a78:	5c52      	ldrb	r2, [r2, r1]
 8012a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a7e:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 8012a80:	4b9f      	ldr	r3, [pc, #636]	; (8012d00 <Update_Detail+0x2c4>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	4b9f      	ldr	r3, [pc, #636]	; (8012d04 <Update_Detail+0x2c8>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	4413      	add	r3, r2
 8012a8e:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012a94:	4b9c      	ldr	r3, [pc, #624]	; (8012d08 <Update_Detail+0x2cc>)
 8012a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	4b9a      	ldr	r3, [pc, #616]	; (8012d08 <Update_Detail+0x2cc>)
 8012a9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	0089      	lsls	r1, r1, #2
 8012aa8:	440b      	add	r3, r1
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	4413      	add	r3, r2
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	82fb      	strh	r3, [r7, #22]
 8012ab8:	f000 bfb3 	b.w	8013a22 <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8012abc:	8afb      	ldrh	r3, [r7, #22]
 8012abe:	2b13      	cmp	r3, #19
 8012ac0:	d118      	bne.n	8012af4 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8012ac2:	4b92      	ldr	r3, [pc, #584]	; (8012d0c <Update_Detail+0x2d0>)
 8012ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ac8:	2b0a      	cmp	r3, #10
 8012aca:	dd0a      	ble.n	8012ae2 <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8012acc:	4b8f      	ldr	r3, [pc, #572]	; (8012d0c <Update_Detail+0x2d0>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8012ad2:	4b8f      	ldr	r3, [pc, #572]	; (8012d10 <Update_Detail+0x2d4>)
 8012ad4:	781b      	ldrb	r3, [r3, #0]
 8012ad6:	f043 0320 	orr.w	r3, r3, #32
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	4b8c      	ldr	r3, [pc, #560]	; (8012d10 <Update_Detail+0x2d4>)
 8012ade:	701a      	strb	r2, [r3, #0]
 8012ae0:	e008      	b.n	8012af4 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8012ae2:	4b8a      	ldr	r3, [pc, #552]	; (8012d0c <Update_Detail+0x2d0>)
 8012ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	3301      	adds	r3, #1
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	b21a      	sxth	r2, r3
 8012af0:	4b86      	ldr	r3, [pc, #536]	; (8012d0c <Update_Detail+0x2d0>)
 8012af2:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8012af4:	8afb      	ldrh	r3, [r7, #22]
 8012af6:	4a84      	ldr	r2, [pc, #528]	; (8012d08 <Update_Detail+0x2cc>)
 8012af8:	00db      	lsls	r3, r3, #3
 8012afa:	4413      	add	r3, r2
 8012afc:	799b      	ldrb	r3, [r3, #6]
 8012afe:	f003 0320 	and.w	r3, r3, #32
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f000 878a 	beq.w	8013a1c <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8012b08:	8afb      	ldrh	r3, [r7, #22]
 8012b0a:	4a7f      	ldr	r2, [pc, #508]	; (8012d08 <Update_Detail+0x2cc>)
 8012b0c:	00db      	lsls	r3, r3, #3
 8012b0e:	4413      	add	r3, r2
 8012b10:	799a      	ldrb	r2, [r3, #6]
 8012b12:	8afb      	ldrh	r3, [r7, #22]
 8012b14:	f022 0220 	bic.w	r2, r2, #32
 8012b18:	b2d1      	uxtb	r1, r2
 8012b1a:	4a7b      	ldr	r2, [pc, #492]	; (8012d08 <Update_Detail+0x2cc>)
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	4413      	add	r3, r2
 8012b20:	460a      	mov	r2, r1
 8012b22:	719a      	strb	r2, [r3, #6]
      switch (i){
 8012b24:	8afb      	ldrh	r3, [r7, #22]
 8012b26:	2b29      	cmp	r3, #41	; 0x29
 8012b28:	f200 8739 	bhi.w	801399e <Update_Detail+0xf62>
 8012b2c:	a201      	add	r2, pc, #4	; (adr r2, 8012b34 <Update_Detail+0xf8>)
 8012b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b32:	bf00      	nop
 8012b34:	08012bdd 	.word	0x08012bdd
 8012b38:	08012bdd 	.word	0x08012bdd
 8012b3c:	08012bdd 	.word	0x08012bdd
 8012b40:	08012bdd 	.word	0x08012bdd
 8012b44:	08012bdd 	.word	0x08012bdd
 8012b48:	08012bdd 	.word	0x08012bdd
 8012b4c:	08012bdd 	.word	0x08012bdd
 8012b50:	080133db 	.word	0x080133db
 8012b54:	080133db 	.word	0x080133db
 8012b58:	080133db 	.word	0x080133db
 8012b5c:	080133db 	.word	0x080133db
 8012b60:	080133db 	.word	0x080133db
 8012b64:	080133db 	.word	0x080133db
 8012b68:	0801327b 	.word	0x0801327b
 8012b6c:	0801327b 	.word	0x0801327b
 8012b70:	0801327b 	.word	0x0801327b
 8012b74:	0801327b 	.word	0x0801327b
 8012b78:	0801327b 	.word	0x0801327b
 8012b7c:	0801327b 	.word	0x0801327b
 8012b80:	0801361d 	.word	0x0801361d
 8012b84:	08013691 	.word	0x08013691
 8012b88:	080136b1 	.word	0x080136b1
 8012b8c:	080137b7 	.word	0x080137b7
 8012b90:	08013727 	.word	0x08013727
 8012b94:	08013891 	.word	0x08013891
 8012b98:	08013917 	.word	0x08013917
 8012b9c:	0801315f 	.word	0x0801315f
 8012ba0:	0801315f 	.word	0x0801315f
 8012ba4:	080131f7 	.word	0x080131f7
 8012ba8:	08012edd 	.word	0x08012edd
 8012bac:	08012edd 	.word	0x08012edd
 8012bb0:	08012edd 	.word	0x08012edd
 8012bb4:	08012edd 	.word	0x08012edd
 8012bb8:	08012edd 	.word	0x08012edd
 8012bbc:	08012edd 	.word	0x08012edd
 8012bc0:	08012edd 	.word	0x08012edd
 8012bc4:	08012f8d 	.word	0x08012f8d
 8012bc8:	08013079 	.word	0x08013079
 8012bcc:	0801311b 	.word	0x0801311b
 8012bd0:	0801399f 	.word	0x0801399f
 8012bd4:	0801399f 	.word	0x0801399f
 8012bd8:	0801399f 	.word	0x0801399f
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8012bdc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012be0:	4619      	mov	r1, r3
 8012be2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012be6:	f7fb f9f3 	bl	800dfd0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8012bea:	8afb      	ldrh	r3, [r7, #22]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d005      	beq.n	8012bfc <Update_Detail+0x1c0>
 8012bf0:	8afb      	ldrh	r3, [r7, #22]
 8012bf2:	2b01      	cmp	r3, #1
 8012bf4:	d002      	beq.n	8012bfc <Update_Detail+0x1c0>
 8012bf6:	8afb      	ldrh	r3, [r7, #22]
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d138      	bne.n	8012c6e <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012bfc:	232f      	movs	r3, #47	; 0x2f
 8012bfe:	b29b      	uxth	r3, r3
 8012c00:	3b03      	subs	r3, #3
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	b219      	sxth	r1, r3
 8012c06:	232a      	movs	r3, #42	; 0x2a
 8012c08:	9301      	str	r3, [sp, #4]
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	230b      	movs	r3, #11
 8012c10:	22e1      	movs	r2, #225	; 0xe1
 8012c12:	2001      	movs	r0, #1
 8012c14:	f7fb faca 	bl	800e1ac <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8012c18:	202f      	movs	r0, #47	; 0x2f
 8012c1a:	4b3b      	ldr	r3, [pc, #236]	; (8012d08 <Update_Detail+0x2cc>)
 8012c1c:	6819      	ldr	r1, [r3, #0]
 8012c1e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c22:	4613      	mov	r3, r2
 8012c24:	005b      	lsls	r3, r3, #1
 8012c26:	4413      	add	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	440b      	add	r3, r1
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	21e1      	movs	r1, #225	; 0xe1
 8012c30:	f7fb f9e6 	bl	800e000 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8012c34:	2047      	movs	r0, #71	; 0x47
 8012c36:	4b34      	ldr	r3, [pc, #208]	; (8012d08 <Update_Detail+0x2cc>)
 8012c38:	689a      	ldr	r2, [r3, #8]
 8012c3a:	4b33      	ldr	r3, [pc, #204]	; (8012d08 <Update_Detail+0x2cc>)
 8012c3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c40:	4619      	mov	r1, r3
 8012c42:	460b      	mov	r3, r1
 8012c44:	005b      	lsls	r3, r3, #1
 8012c46:	440b      	add	r3, r1
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	21e1      	movs	r1, #225	; 0xe1
 8012c50:	f7fb f9d6 	bl	800e000 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8012c54:	2020      	movs	r0, #32
 8012c56:	4b2c      	ldr	r3, [pc, #176]	; (8012d08 <Update_Detail+0x2cc>)
 8012c58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d001      	beq.n	8012c64 <Update_Detail+0x228>
 8012c60:	4b2c      	ldr	r3, [pc, #176]	; (8012d14 <Update_Detail+0x2d8>)
 8012c62:	e000      	b.n	8012c66 <Update_Detail+0x22a>
 8012c64:	4b2c      	ldr	r3, [pc, #176]	; (8012d18 <Update_Detail+0x2dc>)
 8012c66:	2210      	movs	r2, #16
 8012c68:	21e1      	movs	r1, #225	; 0xe1
 8012c6a:	f7fb fc33 	bl	800e4d4 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8012c6e:	4b26      	ldr	r3, [pc, #152]	; (8012d08 <Update_Detail+0x2cc>)
 8012c70:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012c74:	3301      	adds	r3, #1
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	005b      	lsls	r3, r3, #1
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	b21a      	sxth	r2, r3
 8012c7e:	4b27      	ldr	r3, [pc, #156]	; (8012d1c <Update_Detail+0x2e0>)
 8012c80:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8012c82:	4b26      	ldr	r3, [pc, #152]	; (8012d1c <Update_Detail+0x2e0>)
 8012c84:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c88:	b29a      	uxth	r2, r3
 8012c8a:	4b1f      	ldr	r3, [pc, #124]	; (8012d08 <Update_Detail+0x2cc>)
 8012c8c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8012c90:	3301      	adds	r3, #1
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	4413      	add	r3, r2
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	b21a      	sxth	r2, r3
 8012c9e:	4b1f      	ldr	r3, [pc, #124]	; (8012d1c <Update_Detail+0x2e0>)
 8012ca0:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8012ca2:	4b19      	ldr	r3, [pc, #100]	; (8012d08 <Update_Detail+0x2cc>)
 8012ca4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012ca8:	3301      	adds	r3, #1
 8012caa:	b29b      	uxth	r3, r3
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21a      	sxth	r2, r3
 8012cb2:	4b1a      	ldr	r3, [pc, #104]	; (8012d1c <Update_Detail+0x2e0>)
 8012cb4:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 8012cb6:	4b14      	ldr	r3, [pc, #80]	; (8012d08 <Update_Detail+0x2cc>)
 8012cb8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	005b      	lsls	r3, r3, #1
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	b21a      	sxth	r2, r3
 8012cc6:	4b15      	ldr	r3, [pc, #84]	; (8012d1c <Update_Detail+0x2e0>)
 8012cc8:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cca:	4b0f      	ldr	r3, [pc, #60]	; (8012d08 <Update_Detail+0x2cc>)
 8012ccc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d001      	beq.n	8012cd8 <Update_Detail+0x29c>
 8012cd4:	2202      	movs	r2, #2
 8012cd6:	e000      	b.n	8012cda <Update_Detail+0x29e>
 8012cd8:	2200      	movs	r2, #0
 8012cda:	4b10      	ldr	r3, [pc, #64]	; (8012d1c <Update_Detail+0x2e0>)
 8012cdc:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cde:	4b0a      	ldr	r3, [pc, #40]	; (8012d08 <Update_Detail+0x2cc>)
 8012ce0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d01b      	beq.n	8012d20 <Update_Detail+0x2e4>
 8012ce8:	2202      	movs	r2, #2
 8012cea:	e01a      	b.n	8012d22 <Update_Detail+0x2e6>
 8012cec:	20000558 	.word	0x20000558
 8012cf0:	20002692 	.word	0x20002692
 8012cf4:	2000268c 	.word	0x2000268c
 8012cf8:	20002690 	.word	0x20002690
 8012cfc:	2000053c 	.word	0x2000053c
 8012d00:	20002680 	.word	0x20002680
 8012d04:	2000267c 	.word	0x2000267c
 8012d08:	20000274 	.word	0x20000274
 8012d0c:	2000265a 	.word	0x2000265a
 8012d10:	200001a8 	.word	0x200001a8
 8012d14:	080009ac 	.word	0x080009ac
 8012d18:	080009b0 	.word	0x080009b0
 8012d1c:	20000140 	.word	0x20000140
 8012d20:	2200      	movs	r2, #0
 8012d22:	4ba6      	ldr	r3, [pc, #664]	; (8012fbc <Update_Detail+0x580>)
 8012d24:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8012d26:	4ba5      	ldr	r3, [pc, #660]	; (8012fbc <Update_Detail+0x580>)
 8012d28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4ba3      	ldr	r3, [pc, #652]	; (8012fbc <Update_Detail+0x580>)
 8012d30:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	0fda      	lsrs	r2, r3, #31
 8012d38:	4413      	add	r3, r2
 8012d3a:	105b      	asrs	r3, r3, #1
 8012d3c:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012d3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d42:	4a9f      	ldr	r2, [pc, #636]	; (8012fc0 <Update_Detail+0x584>)
 8012d44:	5cd3      	ldrb	r3, [r2, r3]
 8012d46:	461c      	mov	r4, r3
 8012d48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d4c:	4a9d      	ldr	r2, [pc, #628]	; (8012fc4 <Update_Detail+0x588>)
 8012d4e:	5cd3      	ldrb	r3, [r2, r3]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fe fb2f 	bl	80113b4 <Exp>
 8012d56:	4603      	mov	r3, r0
 8012d58:	fb03 f204 	mul.w	r2, r3, r4
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	fb02 f303 	mul.w	r3, r2, r3
 8012d62:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012d64:	2301      	movs	r3, #1
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	2303      	movs	r3, #3
 8012d6a:	4a97      	ldr	r2, [pc, #604]	; (8012fc8 <Update_Detail+0x58c>)
 8012d6c:	6939      	ldr	r1, [r7, #16]
 8012d6e:	4897      	ldr	r0, [pc, #604]	; (8012fcc <Update_Detail+0x590>)
 8012d70:	f7fe fa24 	bl	80111bc <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012d74:	2307      	movs	r3, #7
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	3b03      	subs	r3, #3
 8012d7a:	b29b      	uxth	r3, r3
 8012d7c:	b219      	sxth	r1, r3
 8012d7e:	2336      	movs	r3, #54	; 0x36
 8012d80:	9301      	str	r3, [sp, #4]
 8012d82:	2300      	movs	r3, #0
 8012d84:	9300      	str	r3, [sp, #0]
 8012d86:	230b      	movs	r3, #11
 8012d88:	2203      	movs	r2, #3
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	f7fb fa0e 	bl	800e1ac <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8012d90:	2007      	movs	r0, #7
 8012d92:	4b8f      	ldr	r3, [pc, #572]	; (8012fd0 <Update_Detail+0x594>)
 8012d94:	2211      	movs	r2, #17
 8012d96:	2103      	movs	r1, #3
 8012d98:	f7fb f932 	bl	800e000 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8012d9c:	2307      	movs	r3, #7
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	3306      	adds	r3, #6
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	b218      	sxth	r0, r3
 8012da6:	4b8b      	ldr	r3, [pc, #556]	; (8012fd4 <Update_Detail+0x598>)
 8012da8:	2201      	movs	r2, #1
 8012daa:	2103      	movs	r1, #3
 8012dac:	f7fb f928 	bl	800e000 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8012db0:	2307      	movs	r3, #7
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	332a      	adds	r3, #42	; 0x2a
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	b218      	sxth	r0, r3
 8012dba:	4b87      	ldr	r3, [pc, #540]	; (8012fd8 <Update_Detail+0x59c>)
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	2103      	movs	r1, #3
 8012dc0:	f7fb f91e 	bl	800e000 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8012dc4:	2307      	movs	r3, #7
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	3312      	adds	r3, #18
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	b218      	sxth	r0, r3
 8012dce:	4b7f      	ldr	r3, [pc, #508]	; (8012fcc <Update_Detail+0x590>)
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	2103      	movs	r1, #3
 8012dd4:	f7fb f914 	bl	800e000 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8012dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ddc:	4619      	mov	r1, r3
 8012dde:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012de2:	f7fb f8f5 	bl	800dfd0 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8012de6:	4b7d      	ldr	r3, [pc, #500]	; (8012fdc <Update_Detail+0x5a0>)
 8012de8:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012dec:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012dee:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012df2:	4a73      	ldr	r2, [pc, #460]	; (8012fc0 <Update_Detail+0x584>)
 8012df4:	5cd3      	ldrb	r3, [r2, r3]
 8012df6:	461c      	mov	r4, r3
 8012df8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012dfc:	4a71      	ldr	r2, [pc, #452]	; (8012fc4 <Update_Detail+0x588>)
 8012dfe:	5cd3      	ldrb	r3, [r2, r3]
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fe fad7 	bl	80113b4 <Exp>
 8012e06:	4603      	mov	r3, r0
 8012e08:	fb03 f204 	mul.w	r2, r3, r4
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	fb02 f303 	mul.w	r3, r2, r3
 8012e12:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8012e14:	2301      	movs	r3, #1
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	2302      	movs	r3, #2
 8012e1a:	4a6b      	ldr	r2, [pc, #428]	; (8012fc8 <Update_Detail+0x58c>)
 8012e1c:	6939      	ldr	r1, [r7, #16]
 8012e1e:	486b      	ldr	r0, [pc, #428]	; (8012fcc <Update_Detail+0x590>)
 8012e20:	f7fe f9cc 	bl	80111bc <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8012e24:	23e7      	movs	r3, #231	; 0xe7
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	3309      	adds	r3, #9
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	b218      	sxth	r0, r3
 8012e2e:	4b6c      	ldr	r3, [pc, #432]	; (8012fe0 <Update_Detail+0x5a4>)
 8012e30:	2201      	movs	r2, #1
 8012e32:	21e1      	movs	r1, #225	; 0xe1
 8012e34:	f7fb f8e4 	bl	800e000 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8012e38:	23e7      	movs	r3, #231	; 0xe7
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	3309      	adds	r3, #9
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	b218      	sxth	r0, r3
 8012e42:	4b62      	ldr	r3, [pc, #392]	; (8012fcc <Update_Detail+0x590>)
 8012e44:	2201      	movs	r2, #1
 8012e46:	21e1      	movs	r1, #225	; 0xe1
 8012e48:	f7fb f8da 	bl	800e000 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8012e4c:	20e7      	movs	r0, #231	; 0xe7
 8012e4e:	4b65      	ldr	r3, [pc, #404]	; (8012fe4 <Update_Detail+0x5a8>)
 8012e50:	2211      	movs	r2, #17
 8012e52:	21e1      	movs	r1, #225	; 0xe1
 8012e54:	f7fb fb3e 	bl	800e4d4 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8012e58:	4b60      	ldr	r3, [pc, #384]	; (8012fdc <Update_Detail+0x5a0>)
 8012e5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	b21a      	sxth	r2, r3
 8012e62:	4b61      	ldr	r3, [pc, #388]	; (8012fe8 <Update_Detail+0x5ac>)
 8012e64:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8012e66:	4b5d      	ldr	r3, [pc, #372]	; (8012fdc <Update_Detail+0x5a0>)
 8012e68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d903      	bls.n	8012e7a <Update_Detail+0x43e>
          KindA  = HV;
 8012e72:	4b5e      	ldr	r3, [pc, #376]	; (8012fec <Update_Detail+0x5b0>)
 8012e74:	2201      	movs	r2, #1
 8012e76:	801a      	strh	r2, [r3, #0]
 8012e78:	e002      	b.n	8012e80 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8012e7a:	4b5c      	ldr	r3, [pc, #368]	; (8012fec <Update_Detail+0x5b0>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 8012e80:	4b56      	ldr	r3, [pc, #344]	; (8012fdc <Update_Detail+0x5a0>)
 8012e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	2b05      	cmp	r3, #5
 8012e8a:	d901      	bls.n	8012e90 <Update_Detail+0x454>
 8012e8c:	2204      	movs	r2, #4
 8012e8e:	e000      	b.n	8012e92 <Update_Detail+0x456>
 8012e90:	2200      	movs	r2, #0
 8012e92:	4b57      	ldr	r3, [pc, #348]	; (8012ff0 <Update_Detail+0x5b4>)
 8012e94:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8012e96:	4b51      	ldr	r3, [pc, #324]	; (8012fdc <Update_Detail+0x5a0>)
 8012e98:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d001      	beq.n	8012ea4 <Update_Detail+0x468>
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	e000      	b.n	8012ea6 <Update_Detail+0x46a>
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	4b53      	ldr	r3, [pc, #332]	; (8012ff4 <Update_Detail+0x5b8>)
 8012ea8:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8012eaa:	4b50      	ldr	r3, [pc, #320]	; (8012fec <Update_Detail+0x5b0>)
 8012eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	4b50      	ldr	r3, [pc, #320]	; (8012ff4 <Update_Detail+0x5b8>)
 8012eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012eb8:	4413      	add	r3, r2
 8012eba:	4a4d      	ldr	r2, [pc, #308]	; (8012ff0 <Update_Detail+0x5b4>)
 8012ebc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	2007      	movs	r0, #7
 8012ec6:	f7f9 fa5b 	bl	800c380 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8012eca:	4b44      	ldr	r3, [pc, #272]	; (8012fdc <Update_Detail+0x5a0>)
 8012ecc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f001 fc62 	bl	801479c <AiPosi>
        break;
 8012ed8:	f000 bd61 	b.w	801399e <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8012edc:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ee6:	f7fb f873 	bl	800dfd0 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8012eea:	8afb      	ldrh	r3, [r7, #22]
 8012eec:	4a3b      	ldr	r2, [pc, #236]	; (8012fdc <Update_Detail+0x5a0>)
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	4413      	add	r3, r2
 8012ef2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	4619      	mov	r1, r3
 8012efa:	4834      	ldr	r0, [pc, #208]	; (8012fcc <Update_Detail+0x590>)
 8012efc:	f7fe f8f6 	bl	80110ec <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012f00:	8afb      	ldrh	r3, [r7, #22]
 8012f02:	4a3d      	ldr	r2, [pc, #244]	; (8012ff8 <Update_Detail+0x5bc>)
 8012f04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	3b03      	subs	r3, #3
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	b219      	sxth	r1, r3
 8012f10:	2342      	movs	r3, #66	; 0x42
 8012f12:	9301      	str	r3, [sp, #4]
 8012f14:	2300      	movs	r3, #0
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	230b      	movs	r3, #11
 8012f1a:	2203      	movs	r2, #3
 8012f1c:	2001      	movs	r0, #1
 8012f1e:	f7fb f945 	bl	800e1ac <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8012f22:	8afb      	ldrh	r3, [r7, #22]
 8012f24:	4a34      	ldr	r2, [pc, #208]	; (8012ff8 <Update_Detail+0x5bc>)
 8012f26:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f2a:	8afb      	ldrh	r3, [r7, #22]
 8012f2c:	2b21      	cmp	r3, #33	; 0x21
 8012f2e:	d901      	bls.n	8012f34 <Update_Detail+0x4f8>
 8012f30:	4b32      	ldr	r3, [pc, #200]	; (8012ffc <Update_Detail+0x5c0>)
 8012f32:	e000      	b.n	8012f36 <Update_Detail+0x4fa>
 8012f34:	4b32      	ldr	r3, [pc, #200]	; (8013000 <Update_Detail+0x5c4>)
 8012f36:	2201      	movs	r2, #1
 8012f38:	2103      	movs	r1, #3
 8012f3a:	f7fb f861 	bl	800e000 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8012f3e:	8afb      	ldrh	r3, [r7, #22]
 8012f40:	4a2d      	ldr	r2, [pc, #180]	; (8012ff8 <Update_Detail+0x5bc>)
 8012f42:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	3318      	adds	r3, #24
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	b218      	sxth	r0, r3
 8012f4e:	4b1f      	ldr	r3, [pc, #124]	; (8012fcc <Update_Detail+0x590>)
 8012f50:	2201      	movs	r2, #1
 8012f52:	2103      	movs	r1, #3
 8012f54:	f7fb f854 	bl	800e000 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8012f58:	8afb      	ldrh	r3, [r7, #22]
 8012f5a:	4a27      	ldr	r2, [pc, #156]	; (8012ff8 <Update_Detail+0x5bc>)
 8012f5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	332a      	adds	r3, #42	; 0x2a
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	b218      	sxth	r0, r3
 8012f68:	8afb      	ldrh	r3, [r7, #22]
 8012f6a:	4a1c      	ldr	r2, [pc, #112]	; (8012fdc <Update_Detail+0x5a0>)
 8012f6c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012f70:	8afb      	ldrh	r3, [r7, #22]
 8012f72:	f1a3 021d 	sub.w	r2, r3, #29
 8012f76:	4613      	mov	r3, r2
 8012f78:	005b      	lsls	r3, r3, #1
 8012f7a:	4413      	add	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	440b      	add	r3, r1
 8012f80:	2201      	movs	r2, #1
 8012f82:	2103      	movs	r1, #3
 8012f84:	f7fb f83c 	bl	800e000 <DispStr>
        break;
 8012f88:	f000 bd09 	b.w	801399e <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8012f8c:	4b13      	ldr	r3, [pc, #76]	; (8012fdc <Update_Detail+0x5a0>)
 8012f8e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d136      	bne.n	8013004 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8012f96:	2100      	movs	r1, #0
 8012f98:	2000      	movs	r0, #0
 8012f9a:	f7f9 f9f1 	bl	800c380 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	; (8012fdc <Update_Detail+0x5a0>)
 8012fa0:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f9 fbcb 	bl	800c740 <Set_Fout>
          Set_Duty();
 8012faa:	f7f9 fb9d 	bl	800c6e8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8012fae:	2104      	movs	r1, #4
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	f7f9 f9e5 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8012fb6:	f000 bcf2 	b.w	801399e <Update_Detail+0xf62>
 8012fba:	bf00      	nop
 8012fbc:	20000140 	.word	0x20000140
 8012fc0:	080021cc 	.word	0x080021cc
 8012fc4:	080021a4 	.word	0x080021a4
 8012fc8:	08001d9c 	.word	0x08001d9c
 8012fcc:	20002660 	.word	0x20002660
 8012fd0:	080009b4 	.word	0x080009b4
 8012fd4:	080009b8 	.word	0x080009b8
 8012fd8:	08000a24 	.word	0x08000a24
 8012fdc:	20000274 	.word	0x20000274
 8012fe0:	080009e4 	.word	0x080009e4
 8012fe4:	080009ec 	.word	0x080009ec
 8012fe8:	20002690 	.word	0x20002690
 8012fec:	20002692 	.word	0x20002692
 8012ff0:	2000268c 	.word	0x2000268c
 8012ff4:	2000268e 	.word	0x2000268e
 8012ff8:	080021f8 	.word	0x080021f8
 8012ffc:	0800099c 	.word	0x0800099c
 8013000:	080009a4 	.word	0x080009a4
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013004:	4bb7      	ldr	r3, [pc, #732]	; (80132e4 <Update_Detail+0x8a8>)
 8013006:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801300a:	2b09      	cmp	r3, #9
 801300c:	dd03      	ble.n	8013016 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 801300e:	4bb5      	ldr	r3, [pc, #724]	; (80132e4 <Update_Detail+0x8a8>)
 8013010:	2209      	movs	r2, #9
 8013012:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013016:	2100      	movs	r1, #0
 8013018:	2000      	movs	r0, #0
 801301a:	f7f9 f9b1 	bl	800c380 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 801301e:	4bb1      	ldr	r3, [pc, #708]	; (80132e4 <Update_Detail+0x8a8>)
 8013020:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013024:	461a      	mov	r2, r3
 8013026:	4bb0      	ldr	r3, [pc, #704]	; (80132e8 <Update_Detail+0x8ac>)
 8013028:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801302c:	3b01      	subs	r3, #1
 801302e:	461a      	mov	r2, r3
 8013030:	4bae      	ldr	r3, [pc, #696]	; (80132ec <Update_Detail+0x8b0>)
 8013032:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013034:	4bab      	ldr	r3, [pc, #684]	; (80132e4 <Update_Detail+0x8a8>)
 8013036:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801303a:	461a      	mov	r2, r3
 801303c:	4bac      	ldr	r3, [pc, #688]	; (80132f0 <Update_Detail+0x8b4>)
 801303e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013042:	3b01      	subs	r3, #1
 8013044:	4619      	mov	r1, r3
 8013046:	2001      	movs	r0, #1
 8013048:	f7f9 f99a 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 801304c:	21b4      	movs	r1, #180	; 0xb4
 801304e:	2002      	movs	r0, #2
 8013050:	f7f9 f996 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013054:	4ba3      	ldr	r3, [pc, #652]	; (80132e4 <Update_Detail+0x8a8>)
 8013056:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801305a:	b2db      	uxtb	r3, r3
 801305c:	4618      	mov	r0, r3
 801305e:	f7f9 f979 	bl	800c354 <BIOS_Info>
 8013062:	4603      	mov	r3, r0
 8013064:	4619      	mov	r1, r3
 8013066:	2003      	movs	r0, #3
 8013068:	f7f9 f98a 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 801306c:	2102      	movs	r1, #2
 801306e:	2000      	movs	r0, #0
 8013070:	f7f9 f986 	bl	800c380 <BIOS_Ctrl>
      break;
 8013074:	f000 bc93 	b.w	801399e <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013078:	4b9a      	ldr	r3, [pc, #616]	; (80132e4 <Update_Detail+0x8a8>)
 801307a:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801307e:	2b00      	cmp	r3, #0
 8013080:	d111      	bne.n	80130a6 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013082:	2100      	movs	r1, #0
 8013084:	2000      	movs	r0, #0
 8013086:	f7f9 f97b 	bl	800c380 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 801308a:	4b96      	ldr	r3, [pc, #600]	; (80132e4 <Update_Detail+0x8a8>)
 801308c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013090:	4618      	mov	r0, r3
 8013092:	f7f9 fb55 	bl	800c740 <Set_Fout>
          Set_Duty();
 8013096:	f7f9 fb27 	bl	800c6e8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 801309a:	2104      	movs	r1, #4
 801309c:	2000      	movs	r0, #0
 801309e:	f7f9 f96f 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 80130a2:	f000 bc7c 	b.w	801399e <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80130a6:	4b8f      	ldr	r3, [pc, #572]	; (80132e4 <Update_Detail+0x8a8>)
 80130a8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130ac:	2b09      	cmp	r3, #9
 80130ae:	dd03      	ble.n	80130b8 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 80130b0:	4b8c      	ldr	r3, [pc, #560]	; (80132e4 <Update_Detail+0x8a8>)
 80130b2:	2209      	movs	r2, #9
 80130b4:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80130b8:	2100      	movs	r1, #0
 80130ba:	2000      	movs	r0, #0
 80130bc:	f7f9 f960 	bl	800c380 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80130c0:	4b88      	ldr	r3, [pc, #544]	; (80132e4 <Update_Detail+0x8a8>)
 80130c2:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130c6:	461a      	mov	r2, r3
 80130c8:	4b87      	ldr	r3, [pc, #540]	; (80132e8 <Update_Detail+0x8ac>)
 80130ca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	461a      	mov	r2, r3
 80130d2:	4b86      	ldr	r3, [pc, #536]	; (80132ec <Update_Detail+0x8b0>)
 80130d4:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80130d6:	4b83      	ldr	r3, [pc, #524]	; (80132e4 <Update_Detail+0x8a8>)
 80130d8:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130dc:	461a      	mov	r2, r3
 80130de:	4b84      	ldr	r3, [pc, #528]	; (80132f0 <Update_Detail+0x8b4>)
 80130e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130e4:	3b01      	subs	r3, #1
 80130e6:	4619      	mov	r1, r3
 80130e8:	2001      	movs	r0, #1
 80130ea:	f7f9 f949 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 80130ee:	21b4      	movs	r1, #180	; 0xb4
 80130f0:	2002      	movs	r0, #2
 80130f2:	f7f9 f945 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80130f6:	4b7b      	ldr	r3, [pc, #492]	; (80132e4 <Update_Detail+0x8a8>)
 80130f8:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f9 f928 	bl	800c354 <BIOS_Info>
 8013104:	4603      	mov	r3, r0
 8013106:	4619      	mov	r1, r3
 8013108:	2003      	movs	r0, #3
 801310a:	f7f9 f939 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 801310e:	2102      	movs	r1, #2
 8013110:	2000      	movs	r0, #0
 8013112:	f7f9 f935 	bl	800c380 <BIOS_Ctrl>
        break;
 8013116:	f000 bc42 	b.w	801399e <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 801311a:	f240 531f 	movw	r3, #1311	; 0x51f
 801311e:	4619      	mov	r1, r3
 8013120:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013124:	f7fa ff54 	bl	800dfd0 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013128:	8afb      	ldrh	r3, [r7, #22]
 801312a:	4a72      	ldr	r2, [pc, #456]	; (80132f4 <Update_Detail+0x8b8>)
 801312c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013130:	b29b      	uxth	r3, r3
 8013132:	3b03      	subs	r3, #3
 8013134:	b29b      	uxth	r3, r3
 8013136:	b219      	sxth	r1, r3
 8013138:	2336      	movs	r3, #54	; 0x36
 801313a:	9301      	str	r3, [sp, #4]
 801313c:	2300      	movs	r3, #0
 801313e:	9300      	str	r3, [sp, #0]
 8013140:	230b      	movs	r3, #11
 8013142:	2203      	movs	r2, #3
 8013144:	2001      	movs	r0, #1
 8013146:	f7fb f831 	bl	800e1ac <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 801314a:	4b66      	ldr	r3, [pc, #408]	; (80132e4 <Update_Detail+0x8a8>)
 801314c:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013150:	2b00      	cmp	r3, #0
 8013152:	f040 8423 	bne.w	801399c <Update_Detail+0xf60>
        {
          Set_Duty();
 8013156:	f7f9 fac7 	bl	800c6e8 <Set_Duty>
        }
        break;
 801315a:	f000 bc1f 	b.w	801399c <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 801315e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013162:	4619      	mov	r1, r3
 8013164:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013168:	f7fa ff32 	bl	800dfd0 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 801316c:	8afb      	ldrh	r3, [r7, #22]
 801316e:	2b1a      	cmp	r3, #26
 8013170:	d002      	beq.n	8013178 <Update_Detail+0x73c>
 8013172:	8afb      	ldrh	r3, [r7, #22]
 8013174:	2b1b      	cmp	r3, #27
 8013176:	d123      	bne.n	80131c0 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013178:	23a8      	movs	r3, #168	; 0xa8
 801317a:	b29b      	uxth	r3, r3
 801317c:	3b03      	subs	r3, #3
 801317e:	b29b      	uxth	r3, r3
 8013180:	b219      	sxth	r1, r3
 8013182:	231e      	movs	r3, #30
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	2301      	movs	r3, #1
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	230b      	movs	r3, #11
 801318c:	22e1      	movs	r2, #225	; 0xe1
 801318e:	2001      	movs	r0, #1
 8013190:	f7fb f80c 	bl	800e1ac <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013194:	20a8      	movs	r0, #168	; 0xa8
 8013196:	4b53      	ldr	r3, [pc, #332]	; (80132e4 <Update_Detail+0x8a8>)
 8013198:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00a      	beq.n	80131b6 <Update_Detail+0x77a>
 80131a0:	4b50      	ldr	r3, [pc, #320]	; (80132e4 <Update_Detail+0x8a8>)
 80131a2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131a6:	461a      	mov	r2, r3
 80131a8:	4613      	mov	r3, r2
 80131aa:	005b      	lsls	r3, r3, #1
 80131ac:	4413      	add	r3, r2
 80131ae:	005b      	lsls	r3, r3, #1
 80131b0:	4a51      	ldr	r2, [pc, #324]	; (80132f8 <Update_Detail+0x8bc>)
 80131b2:	4413      	add	r3, r2
 80131b4:	e000      	b.n	80131b8 <Update_Detail+0x77c>
 80131b6:	4b51      	ldr	r3, [pc, #324]	; (80132fc <Update_Detail+0x8c0>)
 80131b8:	2201      	movs	r2, #1
 80131ba:	21e1      	movs	r1, #225	; 0xe1
 80131bc:	f7fa ff20 	bl	800e000 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 80131c0:	4b48      	ldr	r3, [pc, #288]	; (80132e4 <Update_Detail+0x8a8>)
 80131c2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131c6:	2b05      	cmp	r3, #5
 80131c8:	dc0a      	bgt.n	80131e0 <Update_Detail+0x7a4>
 80131ca:	4b46      	ldr	r3, [pc, #280]	; (80132e4 <Update_Detail+0x8a8>)
 80131cc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80131d0:	3301      	adds	r3, #1
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	b21a      	sxth	r2, r3
 80131da:	4b49      	ldr	r3, [pc, #292]	; (8013300 <Update_Detail+0x8c4>)
 80131dc:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 80131de:	e3de      	b.n	801399e <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 80131e0:	4b40      	ldr	r3, [pc, #256]	; (80132e4 <Update_Detail+0x8a8>)
 80131e2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80131e6:	3301      	adds	r3, #1
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	005b      	lsls	r3, r3, #1
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	b21a      	sxth	r2, r3
 80131f0:	4b43      	ldr	r3, [pc, #268]	; (8013300 <Update_Detail+0x8c4>)
 80131f2:	82da      	strh	r2, [r3, #22]
        break;
 80131f4:	e3d3      	b.n	801399e <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 80131f6:	4b3b      	ldr	r3, [pc, #236]	; (80132e4 <Update_Detail+0x8a8>)
 80131f8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d108      	bne.n	8013212 <Update_Detail+0x7d6>
 8013200:	4b3f      	ldr	r3, [pc, #252]	; (8013300 <Update_Detail+0x8c4>)
 8013202:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013206:	f043 0304 	orr.w	r3, r3, #4
 801320a:	b21a      	sxth	r2, r3
 801320c:	4b3c      	ldr	r3, [pc, #240]	; (8013300 <Update_Detail+0x8c4>)
 801320e:	805a      	strh	r2, [r3, #2]
 8013210:	e007      	b.n	8013222 <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 8013212:	4b3b      	ldr	r3, [pc, #236]	; (8013300 <Update_Detail+0x8c4>)
 8013214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013218:	f023 0304 	bic.w	r3, r3, #4
 801321c:	b21a      	sxth	r2, r3
 801321e:	4b38      	ldr	r3, [pc, #224]	; (8013300 <Update_Detail+0x8c4>)
 8013220:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 8013222:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013226:	4619      	mov	r1, r3
 8013228:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801322c:	f7fa fed0 	bl	800dfd0 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013230:	23a8      	movs	r3, #168	; 0xa8
 8013232:	b29b      	uxth	r3, r3
 8013234:	3b03      	subs	r3, #3
 8013236:	b29b      	uxth	r3, r3
 8013238:	b219      	sxth	r1, r3
 801323a:	231e      	movs	r3, #30
 801323c:	9301      	str	r3, [sp, #4]
 801323e:	2301      	movs	r3, #1
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	230b      	movs	r3, #11
 8013244:	22e1      	movs	r2, #225	; 0xe1
 8013246:	2001      	movs	r0, #1
 8013248:	f7fa ffb0 	bl	800e1ac <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801324c:	20a8      	movs	r0, #168	; 0xa8
 801324e:	4b25      	ldr	r3, [pc, #148]	; (80132e4 <Update_Detail+0x8a8>)
 8013250:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00a      	beq.n	801326e <Update_Detail+0x832>
 8013258:	4b22      	ldr	r3, [pc, #136]	; (80132e4 <Update_Detail+0x8a8>)
 801325a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801325e:	461a      	mov	r2, r3
 8013260:	4613      	mov	r3, r2
 8013262:	005b      	lsls	r3, r3, #1
 8013264:	4413      	add	r3, r2
 8013266:	005b      	lsls	r3, r3, #1
 8013268:	4a23      	ldr	r2, [pc, #140]	; (80132f8 <Update_Detail+0x8bc>)
 801326a:	4413      	add	r3, r2
 801326c:	e000      	b.n	8013270 <Update_Detail+0x834>
 801326e:	4b23      	ldr	r3, [pc, #140]	; (80132fc <Update_Detail+0x8c0>)
 8013270:	2201      	movs	r2, #1
 8013272:	21e1      	movs	r1, #225	; 0xe1
 8013274:	f7fa fec4 	bl	800e000 <DispStr>
      break;
 8013278:	e391      	b.n	801399e <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 801327a:	f000 fc71 	bl	8013b60 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 801327e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013282:	4619      	mov	r1, r3
 8013284:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013288:	f7fa fea2 	bl	800dfd0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 801328c:	8afb      	ldrh	r3, [r7, #22]
 801328e:	2b0e      	cmp	r3, #14
 8013290:	d002      	beq.n	8013298 <Update_Detail+0x85c>
 8013292:	8afb      	ldrh	r3, [r7, #22]
 8013294:	2b11      	cmp	r3, #17
 8013296:	d11a      	bne.n	80132ce <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013298:	23dd      	movs	r3, #221	; 0xdd
 801329a:	b29b      	uxth	r3, r3
 801329c:	3b03      	subs	r3, #3
 801329e:	b29b      	uxth	r3, r3
 80132a0:	b219      	sxth	r1, r3
 80132a2:	2330      	movs	r3, #48	; 0x30
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	2300      	movs	r3, #0
 80132a8:	9300      	str	r3, [sp, #0]
 80132aa:	230b      	movs	r3, #11
 80132ac:	22e1      	movs	r2, #225	; 0xe1
 80132ae:	2001      	movs	r0, #1
 80132b0:	f7fa ff7c 	bl	800e1ac <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80132b4:	20dd      	movs	r0, #221	; 0xdd
 80132b6:	4b0b      	ldr	r3, [pc, #44]	; (80132e4 <Update_Detail+0x8a8>)
 80132b8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d001      	beq.n	80132c4 <Update_Detail+0x888>
 80132c0:	4b10      	ldr	r3, [pc, #64]	; (8013304 <Update_Detail+0x8c8>)
 80132c2:	e000      	b.n	80132c6 <Update_Detail+0x88a>
 80132c4:	4b10      	ldr	r3, [pc, #64]	; (8013308 <Update_Detail+0x8cc>)
 80132c6:	2211      	movs	r2, #17
 80132c8:	21e1      	movs	r1, #225	; 0xe1
 80132ca:	f7fb f903 	bl	800e4d4 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80132ce:	8afb      	ldrh	r3, [r7, #22]
 80132d0:	2b0f      	cmp	r3, #15
 80132d2:	d12f      	bne.n	8013334 <Update_Detail+0x8f8>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80132d4:	20cf      	movs	r0, #207	; 0xcf
 80132d6:	4b03      	ldr	r3, [pc, #12]	; (80132e4 <Update_Detail+0x8a8>)
 80132d8:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d017      	beq.n	8013310 <Update_Detail+0x8d4>
 80132e0:	4b0a      	ldr	r3, [pc, #40]	; (801330c <Update_Detail+0x8d0>)
 80132e2:	e016      	b.n	8013312 <Update_Detail+0x8d6>
 80132e4:	20000274 	.word	0x20000274
 80132e8:	080023d4 	.word	0x080023d4
 80132ec:	20006998 	.word	0x20006998
 80132f0:	08001e2c 	.word	0x08001e2c
 80132f4:	080021f8 	.word	0x080021f8
 80132f8:	08001d24 	.word	0x08001d24
 80132fc:	08001d48 	.word	0x08001d48
 8013300:	20000140 	.word	0x20000140
 8013304:	080009dc 	.word	0x080009dc
 8013308:	080009e0 	.word	0x080009e0
 801330c:	080009f0 	.word	0x080009f0
 8013310:	4b81      	ldr	r3, [pc, #516]	; (8013518 <Update_Detail+0xadc>)
 8013312:	2210      	movs	r2, #16
 8013314:	21e1      	movs	r1, #225	; 0xe1
 8013316:	f7fb f8dd 	bl	800e4d4 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 801331a:	4b80      	ldr	r3, [pc, #512]	; (801351c <Update_Detail+0xae0>)
 801331c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013320:	2b00      	cmp	r3, #0
 8013322:	d004      	beq.n	801332e <Update_Detail+0x8f2>
 8013324:	4b7e      	ldr	r3, [pc, #504]	; (8013520 <Update_Detail+0xae4>)
 8013326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801332a:	801a      	strh	r2, [r3, #0]
 801332c:	e002      	b.n	8013334 <Update_Detail+0x8f8>
          else KEYTIME = 0;
 801332e:	4b7c      	ldr	r3, [pc, #496]	; (8013520 <Update_Detail+0xae4>)
 8013330:	2200      	movs	r2, #0
 8013332:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013334:	4b7b      	ldr	r3, [pc, #492]	; (8013524 <Update_Detail+0xae8>)
 8013336:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801333a:	b29a      	uxth	r2, r3
 801333c:	4b77      	ldr	r3, [pc, #476]	; (801351c <Update_Detail+0xae0>)
 801333e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013342:	b29b      	uxth	r3, r3
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	b29b      	uxth	r3, r3
 8013348:	4413      	add	r3, r2
 801334a:	b29b      	uxth	r3, r3
 801334c:	b21a      	sxth	r2, r3
 801334e:	4b75      	ldr	r3, [pc, #468]	; (8013524 <Update_Detail+0xae8>)
 8013350:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013352:	4b72      	ldr	r3, [pc, #456]	; (801351c <Update_Detail+0xae0>)
 8013354:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013358:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801335a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801335e:	4a72      	ldr	r2, [pc, #456]	; (8013528 <Update_Detail+0xaec>)
 8013360:	5cd3      	ldrb	r3, [r2, r3]
 8013362:	461c      	mov	r4, r3
 8013364:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013368:	4a70      	ldr	r2, [pc, #448]	; (801352c <Update_Detail+0xaf0>)
 801336a:	5cd3      	ldrb	r3, [r2, r3]
 801336c:	4618      	mov	r0, r3
 801336e:	f7fe f821 	bl	80113b4 <Exp>
 8013372:	4603      	mov	r3, r0
 8013374:	fb03 f204 	mul.w	r2, r3, r4
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	fb02 f303 	mul.w	r3, r2, r3
 801337e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013380:	2301      	movs	r3, #1
 8013382:	9300      	str	r3, [sp, #0]
 8013384:	2302      	movs	r3, #2
 8013386:	4a6a      	ldr	r2, [pc, #424]	; (8013530 <Update_Detail+0xaf4>)
 8013388:	6939      	ldr	r1, [r7, #16]
 801338a:	486a      	ldr	r0, [pc, #424]	; (8013534 <Update_Detail+0xaf8>)
 801338c:	f7fd ff16 	bl	80111bc <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013390:	20e7      	movs	r0, #231	; 0xe7
 8013392:	4b69      	ldr	r3, [pc, #420]	; (8013538 <Update_Detail+0xafc>)
 8013394:	2211      	movs	r2, #17
 8013396:	21e1      	movs	r1, #225	; 0xe1
 8013398:	f7fb f89c 	bl	800e4d4 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 801339c:	23e7      	movs	r3, #231	; 0xe7
 801339e:	b29b      	uxth	r3, r3
 80133a0:	3309      	adds	r3, #9
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	b218      	sxth	r0, r3
 80133a6:	4b65      	ldr	r3, [pc, #404]	; (801353c <Update_Detail+0xb00>)
 80133a8:	2201      	movs	r2, #1
 80133aa:	21e1      	movs	r1, #225	; 0xe1
 80133ac:	f7fa fe28 	bl	800e000 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80133b0:	23e7      	movs	r3, #231	; 0xe7
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	3309      	adds	r3, #9
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	b218      	sxth	r0, r3
 80133ba:	4b5e      	ldr	r3, [pc, #376]	; (8013534 <Update_Detail+0xaf8>)
 80133bc:	2201      	movs	r2, #1
 80133be:	21e1      	movs	r1, #225	; 0xe1
 80133c0:	f7fa fe1e 	bl	800e000 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80133c4:	4b55      	ldr	r3, [pc, #340]	; (801351c <Update_Detail+0xae0>)
 80133c6:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d001      	beq.n	80133d2 <Update_Detail+0x996>
 80133ce:	2202      	movs	r2, #2
 80133d0:	e000      	b.n	80133d4 <Update_Detail+0x998>
 80133d2:	2200      	movs	r2, #0
 80133d4:	4b53      	ldr	r3, [pc, #332]	; (8013524 <Update_Detail+0xae8>)
 80133d6:	811a      	strh	r2, [r3, #8]
        break;
 80133d8:	e2e1      	b.n	801399e <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 80133da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80133de:	4619      	mov	r1, r3
 80133e0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80133e4:	f7fa fdf4 	bl	800dfd0 <SetColor>
        if(i == TIM_BASE)
 80133e8:	8afb      	ldrh	r3, [r7, #22]
 80133ea:	2b07      	cmp	r3, #7
 80133ec:	d11e      	bne.n	801342c <Update_Detail+0x9f0>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80133ee:	8afb      	ldrh	r3, [r7, #22]
 80133f0:	4a53      	ldr	r2, [pc, #332]	; (8013540 <Update_Detail+0xb04>)
 80133f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	3b03      	subs	r3, #3
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	b219      	sxth	r1, r3
 80133fe:	231e      	movs	r3, #30
 8013400:	9301      	str	r3, [sp, #4]
 8013402:	2302      	movs	r3, #2
 8013404:	9300      	str	r3, [sp, #0]
 8013406:	230b      	movs	r3, #11
 8013408:	22e1      	movs	r2, #225	; 0xe1
 801340a:	2001      	movs	r0, #1
 801340c:	f7fa fece 	bl	800e1ac <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013410:	8afb      	ldrh	r3, [r7, #22]
 8013412:	4a4b      	ldr	r2, [pc, #300]	; (8013540 <Update_Detail+0xb04>)
 8013414:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013418:	4b40      	ldr	r3, [pc, #256]	; (801351c <Update_Detail+0xae0>)
 801341a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801341e:	00db      	lsls	r3, r3, #3
 8013420:	4a48      	ldr	r2, [pc, #288]	; (8013544 <Update_Detail+0xb08>)
 8013422:	4413      	add	r3, r2
 8013424:	2201      	movs	r2, #1
 8013426:	21e1      	movs	r1, #225	; 0xe1
 8013428:	f7fa fdea 	bl	800e000 <DispStr>
        }
        if(i == SMPL_DPTH){
 801342c:	8afb      	ldrh	r3, [r7, #22]
 801342e:	2b09      	cmp	r3, #9
 8013430:	d126      	bne.n	8013480 <Update_Detail+0xa44>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013432:	23f8      	movs	r3, #248	; 0xf8
 8013434:	b29b      	uxth	r3, r3
 8013436:	3b03      	subs	r3, #3
 8013438:	b29b      	uxth	r3, r3
 801343a:	b219      	sxth	r1, r3
 801343c:	2342      	movs	r3, #66	; 0x42
 801343e:	9301      	str	r3, [sp, #4]
 8013440:	2300      	movs	r3, #0
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	230b      	movs	r3, #11
 8013446:	2203      	movs	r2, #3
 8013448:	2001      	movs	r0, #1
 801344a:	f7fa feaf 	bl	800e1ac <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 801344e:	20f8      	movs	r0, #248	; 0xf8
 8013450:	4b3d      	ldr	r3, [pc, #244]	; (8013548 <Update_Detail+0xb0c>)
 8013452:	2201      	movs	r2, #1
 8013454:	2103      	movs	r1, #3
 8013456:	f7fa fdd3 	bl	800e000 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 801345a:	23f8      	movs	r3, #248	; 0xf8
 801345c:	b29b      	uxth	r3, r3
 801345e:	3336      	adds	r3, #54	; 0x36
 8013460:	b29b      	uxth	r3, r3
 8013462:	b218      	sxth	r0, r3
 8013464:	4b2d      	ldr	r3, [pc, #180]	; (801351c <Update_Detail+0xae0>)
 8013466:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801346a:	461a      	mov	r2, r3
 801346c:	4613      	mov	r3, r2
 801346e:	005b      	lsls	r3, r3, #1
 8013470:	4413      	add	r3, r2
 8013472:	005b      	lsls	r3, r3, #1
 8013474:	4a35      	ldr	r2, [pc, #212]	; (801354c <Update_Detail+0xb10>)
 8013476:	4413      	add	r3, r2
 8013478:	2201      	movs	r2, #1
 801347a:	2103      	movs	r1, #3
 801347c:	f7fa fdc0 	bl	800e000 <DispStr>
        }
        Update_Windows();
 8013480:	f000 fbb8 	bl	8013bf4 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013484:	4b32      	ldr	r3, [pc, #200]	; (8013550 <Update_Detail+0xb14>)
 8013486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801348a:	b29a      	uxth	r2, r3
 801348c:	4b23      	ldr	r3, [pc, #140]	; (801351c <Update_Detail+0xae0>)
 801348e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013492:	b29b      	uxth	r3, r3
 8013494:	1ad3      	subs	r3, r2, r3
 8013496:	b29b      	uxth	r3, r3
 8013498:	3302      	adds	r3, #2
 801349a:	b29b      	uxth	r3, r3
 801349c:	b21a      	sxth	r2, r3
 801349e:	4b21      	ldr	r3, [pc, #132]	; (8013524 <Update_Detail+0xae8>)
 80134a0:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 80134a2:	4b20      	ldr	r3, [pc, #128]	; (8013524 <Update_Detail+0xae8>)
 80134a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80134a8:	f023 0301 	bic.w	r3, r3, #1
 80134ac:	b21a      	sxth	r2, r3
 80134ae:	4b1d      	ldr	r3, [pc, #116]	; (8013524 <Update_Detail+0xae8>)
 80134b0:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 80134b2:	4b1c      	ldr	r3, [pc, #112]	; (8013524 <Update_Detail+0xae8>)
 80134b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134b8:	f023 0301 	bic.w	r3, r3, #1
 80134bc:	b21a      	sxth	r2, r3
 80134be:	4b19      	ldr	r3, [pc, #100]	; (8013524 <Update_Detail+0xae8>)
 80134c0:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 80134c2:	4b18      	ldr	r3, [pc, #96]	; (8013524 <Update_Detail+0xae8>)
 80134c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134c8:	f023 0301 	bic.w	r3, r3, #1
 80134cc:	b21a      	sxth	r2, r3
 80134ce:	4b15      	ldr	r3, [pc, #84]	; (8013524 <Update_Detail+0xae8>)
 80134d0:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 80134d2:	4b12      	ldr	r3, [pc, #72]	; (801351c <Update_Detail+0xae0>)
 80134d4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80134d8:	b29b      	uxth	r3, r3
 80134da:	3301      	adds	r3, #1
 80134dc:	b29b      	uxth	r3, r3
 80134de:	b21a      	sxth	r2, r3
 80134e0:	4b10      	ldr	r3, [pc, #64]	; (8013524 <Update_Detail+0xae8>)
 80134e2:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 80134e4:	4b0d      	ldr	r3, [pc, #52]	; (801351c <Update_Detail+0xae0>)
 80134e6:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	3301      	adds	r3, #1
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	b21a      	sxth	r2, r3
 80134f2:	4b0c      	ldr	r3, [pc, #48]	; (8013524 <Update_Detail+0xae8>)
 80134f4:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 80134f6:	4b09      	ldr	r3, [pc, #36]	; (801351c <Update_Detail+0xae0>)
 80134f8:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d001      	beq.n	8013504 <Update_Detail+0xac8>
 8013500:	2202      	movs	r2, #2
 8013502:	e000      	b.n	8013506 <Update_Detail+0xaca>
 8013504:	2200      	movs	r2, #0
 8013506:	4b07      	ldr	r3, [pc, #28]	; (8013524 <Update_Detail+0xae8>)
 8013508:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 801350a:	4b04      	ldr	r3, [pc, #16]	; (801351c <Update_Detail+0xae0>)
 801350c:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013510:	2b00      	cmp	r3, #0
 8013512:	d01f      	beq.n	8013554 <Update_Detail+0xb18>
 8013514:	2202      	movs	r2, #2
 8013516:	e01e      	b.n	8013556 <Update_Detail+0xb1a>
 8013518:	080009b0 	.word	0x080009b0
 801351c:	20000274 	.word	0x20000274
 8013520:	20000732 	.word	0x20000732
 8013524:	20000140 	.word	0x20000140
 8013528:	080021cc 	.word	0x080021cc
 801352c:	080021a4 	.word	0x080021a4
 8013530:	08001d9c 	.word	0x08001d9c
 8013534:	20002660 	.word	0x20002660
 8013538:	080009ec 	.word	0x080009ec
 801353c:	080009e4 	.word	0x080009e4
 8013540:	080021f8 	.word	0x080021f8
 8013544:	200001ac 	.word	0x200001ac
 8013548:	080009c4 	.word	0x080009c4
 801354c:	08001ce8 	.word	0x08001ce8
 8013550:	20000536 	.word	0x20000536
 8013554:	2200      	movs	r2, #0
 8013556:	4ba6      	ldr	r3, [pc, #664]	; (80137f0 <Update_Detail+0xdb4>)
 8013558:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 801355a:	4ba5      	ldr	r3, [pc, #660]	; (80137f0 <Update_Detail+0xdb4>)
 801355c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013560:	461a      	mov	r2, r3
 8013562:	4ba3      	ldr	r3, [pc, #652]	; (80137f0 <Update_Detail+0xdb4>)
 8013564:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 801356c:	4ba1      	ldr	r3, [pc, #644]	; (80137f4 <Update_Detail+0xdb8>)
 801356e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013572:	461a      	mov	r2, r3
 8013574:	4ba0      	ldr	r3, [pc, #640]	; (80137f8 <Update_Detail+0xdbc>)
 8013576:	5c9b      	ldrb	r3, [r3, r2]
 8013578:	461c      	mov	r4, r3
 801357a:	4b9e      	ldr	r3, [pc, #632]	; (80137f4 <Update_Detail+0xdb8>)
 801357c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013580:	461a      	mov	r2, r3
 8013582:	4b9e      	ldr	r3, [pc, #632]	; (80137fc <Update_Detail+0xdc0>)
 8013584:	5c9b      	ldrb	r3, [r3, r2]
 8013586:	4618      	mov	r0, r3
 8013588:	f7fd ff14 	bl	80113b4 <Exp>
 801358c:	4603      	mov	r3, r0
 801358e:	fb03 f204 	mul.w	r2, r3, r4
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	fb02 f303 	mul.w	r3, r2, r3
 8013598:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 801359a:	2301      	movs	r3, #1
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	2303      	movs	r3, #3
 80135a0:	4a97      	ldr	r2, [pc, #604]	; (8013800 <Update_Detail+0xdc4>)
 80135a2:	6939      	ldr	r1, [r7, #16]
 80135a4:	4897      	ldr	r0, [pc, #604]	; (8013804 <Update_Detail+0xdc8>)
 80135a6:	f7fd fe09 	bl	80111bc <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80135aa:	2307      	movs	r3, #7
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	3b03      	subs	r3, #3
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	b219      	sxth	r1, r3
 80135b4:	2336      	movs	r3, #54	; 0x36
 80135b6:	9301      	str	r3, [sp, #4]
 80135b8:	2300      	movs	r3, #0
 80135ba:	9300      	str	r3, [sp, #0]
 80135bc:	230b      	movs	r3, #11
 80135be:	2203      	movs	r2, #3
 80135c0:	2001      	movs	r0, #1
 80135c2:	f7fa fdf3 	bl	800e1ac <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80135c6:	2007      	movs	r0, #7
 80135c8:	4b8f      	ldr	r3, [pc, #572]	; (8013808 <Update_Detail+0xdcc>)
 80135ca:	2211      	movs	r2, #17
 80135cc:	2103      	movs	r1, #3
 80135ce:	f7fa fd17 	bl	800e000 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 80135d2:	2307      	movs	r3, #7
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	3306      	adds	r3, #6
 80135d8:	b29b      	uxth	r3, r3
 80135da:	b218      	sxth	r0, r3
 80135dc:	4b8b      	ldr	r3, [pc, #556]	; (801380c <Update_Detail+0xdd0>)
 80135de:	2201      	movs	r2, #1
 80135e0:	2103      	movs	r1, #3
 80135e2:	f7fa fd0d 	bl	800e000 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80135e6:	2307      	movs	r3, #7
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	332a      	adds	r3, #42	; 0x2a
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	b218      	sxth	r0, r3
 80135f0:	4b87      	ldr	r3, [pc, #540]	; (8013810 <Update_Detail+0xdd4>)
 80135f2:	2201      	movs	r2, #1
 80135f4:	2103      	movs	r1, #3
 80135f6:	f7fa fd03 	bl	800e000 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 80135fa:	2307      	movs	r3, #7
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	3312      	adds	r3, #18
 8013600:	b29b      	uxth	r3, r3
 8013602:	b218      	sxth	r0, r3
 8013604:	4b7f      	ldr	r3, [pc, #508]	; (8013804 <Update_Detail+0xdc8>)
 8013606:	2201      	movs	r2, #1
 8013608:	2103      	movs	r1, #3
 801360a:	f7fa fcf9 	bl	800e000 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 801360e:	4b79      	ldr	r3, [pc, #484]	; (80137f4 <Update_Detail+0xdb8>)
 8013610:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013614:	4618      	mov	r0, r3
 8013616:	f7f9 f831 	bl	800c67c <Set_Base>
      break;
 801361a:	e1c0      	b.n	801399e <Update_Detail+0xf62>

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 801361c:	4b7d      	ldr	r3, [pc, #500]	; (8013814 <Update_Detail+0xdd8>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013624:	fb02 f303 	mul.w	r3, r2, r3
 8013628:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 801362a:	4b72      	ldr	r3, [pc, #456]	; (80137f4 <Update_Detail+0xdb8>)
 801362c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013630:	2b08      	cmp	r3, #8
 8013632:	dc05      	bgt.n	8013640 <Update_Detail+0xc04>
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	4a78      	ldr	r2, [pc, #480]	; (8013818 <Update_Detail+0xddc>)
 8013638:	fb02 f303 	mul.w	r3, r2, r3
 801363c:	60fb      	str	r3, [r7, #12]
 801363e:	e00a      	b.n	8013656 <Update_Detail+0xc1a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013640:	4b6c      	ldr	r3, [pc, #432]	; (80137f4 <Update_Detail+0xdb8>)
 8013642:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013646:	2b11      	cmp	r3, #17
 8013648:	dc05      	bgt.n	8013656 <Update_Detail+0xc1a>
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013650:	fb02 f303 	mul.w	r3, r2, r3
 8013654:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013656:	4b67      	ldr	r3, [pc, #412]	; (80137f4 <Update_Detail+0xdb8>)
 8013658:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801365c:	461a      	mov	r2, r3
 801365e:	4b6f      	ldr	r3, [pc, #444]	; (801381c <Update_Detail+0xde0>)
 8013660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013664:	461a      	mov	r2, r3
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	fbb3 f3f2 	udiv	r3, r3, r2
 801366c:	4a61      	ldr	r2, [pc, #388]	; (80137f4 <Update_Detail+0xdb8>)
 801366e:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013672:	4611      	mov	r1, r2
 8013674:	4a6a      	ldr	r2, [pc, #424]	; (8013820 <Update_Detail+0xde4>)
 8013676:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801367a:	fbb3 f3f2 	udiv	r3, r3, r2
 801367e:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013680:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2201      	movs	r2, #1
 8013688:	2101      	movs	r1, #1
 801368a:	f000 f9e9 	bl	8013a60 <DispMeter>
      break;
 801368e:	e186      	b.n	801399e <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013690:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013694:	887b      	ldrh	r3, [r7, #2]
 8013696:	b2d9      	uxtb	r1, r3
 8013698:	4b62      	ldr	r3, [pc, #392]	; (8013824 <Update_Detail+0xde8>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2264      	movs	r2, #100	; 0x64
 801369e:	fb03 f202 	mul.w	r2, r3, r2
 80136a2:	887b      	ldrh	r3, [r7, #2]
 80136a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80136a8:	2201      	movs	r2, #1
 80136aa:	f000 f9d9 	bl	8013a60 <DispMeter>
        break;
 80136ae:	e176      	b.n	801399e <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 80136b0:	4b5d      	ldr	r3, [pc, #372]	; (8013828 <Update_Detail+0xdec>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	f113 0f03 	cmn.w	r3, #3
 80136b8:	db06      	blt.n	80136c8 <Update_Detail+0xc8c>
 80136ba:	4b5b      	ldr	r3, [pc, #364]	; (8013828 <Update_Detail+0xdec>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2b03      	cmp	r3, #3
 80136c0:	dc02      	bgt.n	80136c8 <Update_Detail+0xc8c>
        {
          Tmp = 0.00;
 80136c2:	2300      	movs	r3, #0
 80136c4:	613b      	str	r3, [r7, #16]
 80136c6:	e026      	b.n	8013716 <Update_Detail+0xcda>
        }else{
		  scale = (List[PROBEATT].Val?
 80136c8:	4b4a      	ldr	r3, [pc, #296]	; (80137f4 <Update_Detail+0xdb8>)
 80136ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d00b      	beq.n	80136ea <Update_Detail+0xcae>
 80136d2:	4b48      	ldr	r3, [pc, #288]	; (80137f4 <Update_Detail+0xdb8>)
 80136d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136d8:	461a      	mov	r2, r3
 80136da:	4b54      	ldr	r3, [pc, #336]	; (801382c <Update_Detail+0xdf0>)
 80136dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136e0:	4613      	mov	r3, r2
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	4413      	add	r3, r2
 80136e6:	00db      	lsls	r3, r3, #3
 80136e8:	e00a      	b.n	8013700 <Update_Detail+0xcc4>
 80136ea:	4b42      	ldr	r3, [pc, #264]	; (80137f4 <Update_Detail+0xdb8>)
 80136ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136f0:	461a      	mov	r2, r3
 80136f2:	4b4f      	ldr	r3, [pc, #316]	; (8013830 <Update_Detail+0xdf4>)
 80136f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136f8:	4613      	mov	r3, r2
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4413      	add	r3, r2
 80136fe:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013700:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8013702:	4b49      	ldr	r3, [pc, #292]	; (8013828 <Update_Detail+0xdec>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	fb02 f303 	mul.w	r3, r2, r3
 801370c:	131a      	asrs	r2, r3, #12
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	fb02 f303 	mul.w	r3, r2, r3
 8013714:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013716:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	2201      	movs	r2, #1
 801371e:	2101      	movs	r1, #1
 8013720:	f000 f99e 	bl	8013a60 <DispMeter>
        break;
 8013724:	e13b      	b.n	801399e <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013726:	4b43      	ldr	r3, [pc, #268]	; (8013834 <Update_Detail+0xdf8>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f113 0f06 	cmn.w	r3, #6
 801372e:	db06      	blt.n	801373e <Update_Detail+0xd02>
 8013730:	4b40      	ldr	r3, [pc, #256]	; (8013834 <Update_Detail+0xdf8>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b06      	cmp	r3, #6
 8013736:	dc02      	bgt.n	801373e <Update_Detail+0xd02>
          Tmp = 0.00;
 8013738:	2300      	movs	r3, #0
 801373a:	613b      	str	r3, [r7, #16]
 801373c:	e033      	b.n	80137a6 <Update_Detail+0xd6a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 801373e:	4b2d      	ldr	r3, [pc, #180]	; (80137f4 <Update_Detail+0xdb8>)
 8013740:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00b      	beq.n	8013760 <Update_Detail+0xd24>
 8013748:	4b2a      	ldr	r3, [pc, #168]	; (80137f4 <Update_Detail+0xdb8>)
 801374a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801374e:	461a      	mov	r2, r3
 8013750:	4b36      	ldr	r3, [pc, #216]	; (801382c <Update_Detail+0xdf0>)
 8013752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013756:	4613      	mov	r3, r2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	4413      	add	r3, r2
 801375c:	00db      	lsls	r3, r3, #3
 801375e:	e00a      	b.n	8013776 <Update_Detail+0xd3a>
 8013760:	4b24      	ldr	r3, [pc, #144]	; (80137f4 <Update_Detail+0xdb8>)
 8013762:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013766:	461a      	mov	r2, r3
 8013768:	4b31      	ldr	r3, [pc, #196]	; (8013830 <Update_Detail+0xdf4>)
 801376a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801376e:	4613      	mov	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	4413      	add	r3, r2
 8013774:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013776:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013778:	4b2f      	ldr	r3, [pc, #188]	; (8013838 <Update_Detail+0xdfc>)
 801377a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801377e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	fb02 f303 	mul.w	r3, r2, r3
 8013788:	131a      	asrs	r2, r3, #12
 801378a:	4b2c      	ldr	r3, [pc, #176]	; (801383c <Update_Detail+0xe00>)
 801378c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013790:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013794:	6879      	ldr	r1, [r7, #4]
 8013796:	fb01 f303 	mul.w	r3, r1, r3
 801379a:	131b      	asrs	r3, r3, #12
 801379c:	1ad2      	subs	r2, r2, r3
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	fb02 f303 	mul.w	r3, r2, r3
 80137a4:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80137a6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	2201      	movs	r2, #1
 80137ae:	2101      	movs	r1, #1
 80137b0:	f000 f956 	bl	8013a60 <DispMeter>
        break;
 80137b4:	e0f3      	b.n	801399e <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80137b6:	4b22      	ldr	r3, [pc, #136]	; (8013840 <Update_Detail+0xe04>)
 80137b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	bfb8      	it	lt
 80137c0:	425b      	neglt	r3, r3
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	2b03      	cmp	r3, #3
 80137c6:	d802      	bhi.n	80137ce <Update_Detail+0xd92>
        {
          Tmp = 0.00;
 80137c8:	2300      	movs	r3, #0
 80137ca:	613b      	str	r3, [r7, #16]
 80137cc:	e058      	b.n	8013880 <Update_Detail+0xe44>
        }else{
          scale = (List[PROBEATT].Val?
 80137ce:	4b09      	ldr	r3, [pc, #36]	; (80137f4 <Update_Detail+0xdb8>)
 80137d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d035      	beq.n	8013844 <Update_Detail+0xe08>
 80137d8:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <Update_Detail+0xdb8>)
 80137da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137de:	461a      	mov	r2, r3
 80137e0:	4b12      	ldr	r3, [pc, #72]	; (801382c <Update_Detail+0xdf0>)
 80137e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80137e6:	4613      	mov	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	4413      	add	r3, r2
 80137ec:	00db      	lsls	r3, r3, #3
 80137ee:	e034      	b.n	801385a <Update_Detail+0xe1e>
 80137f0:	20000140 	.word	0x20000140
 80137f4:	20000274 	.word	0x20000274
 80137f8:	080021b8 	.word	0x080021b8
 80137fc:	08002190 	.word	0x08002190
 8013800:	08001d84 	.word	0x08001d84
 8013804:	20002660 	.word	0x20002660
 8013808:	080009b4 	.word	0x080009b4
 801380c:	080009d0 	.word	0x080009d0
 8013810:	08000a24 	.word	0x08000a24
 8013814:	20002684 	.word	0x20002684
 8013818:	000f4240 	.word	0x000f4240
 801381c:	0800233c 	.word	0x0800233c
 8013820:	0800230c 	.word	0x0800230c
 8013824:	20002680 	.word	0x20002680
 8013828:	20002674 	.word	0x20002674
 801382c:	2000024c 	.word	0x2000024c
 8013830:	08001e04 	.word	0x08001e04
 8013834:	20002678 	.word	0x20002678
 8013838:	2000266c 	.word	0x2000266c
 801383c:	2000266e 	.word	0x2000266e
 8013840:	20002672 	.word	0x20002672
 8013844:	4b7b      	ldr	r3, [pc, #492]	; (8013a34 <Update_Detail+0xff8>)
 8013846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801384a:	461a      	mov	r2, r3
 801384c:	4b7a      	ldr	r3, [pc, #488]	; (8013a38 <Update_Detail+0xffc>)
 801384e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013852:	4613      	mov	r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4413      	add	r3, r2
 8013858:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 801385a:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 801385c:	4b77      	ldr	r3, [pc, #476]	; (8013a3c <Update_Detail+0x1000>)
 801385e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013862:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	fb02 f303 	mul.w	r3, r2, r3
 801386c:	131b      	asrs	r3, r3, #12
 801386e:	3364      	adds	r3, #100	; 0x64
 8013870:	4a70      	ldr	r2, [pc, #448]	; (8013a34 <Update_Detail+0xff8>)
 8013872:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013876:	1a9a      	subs	r2, r3, r2
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	fb02 f303 	mul.w	r3, r2, r3
 801387e:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013880:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	2201      	movs	r2, #1
 8013888:	2101      	movs	r1, #1
 801388a:	f000 f8e9 	bl	8013a60 <DispMeter>
        break;
 801388e:	e086      	b.n	801399e <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8013890:	4b6b      	ldr	r3, [pc, #428]	; (8013a40 <Update_Detail+0x1004>)
 8013892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013896:	2b00      	cmp	r3, #0
 8013898:	bfb8      	it	lt
 801389a:	425b      	neglt	r3, r3
 801389c:	b29b      	uxth	r3, r3
 801389e:	2b03      	cmp	r3, #3
 80138a0:	d802      	bhi.n	80138a8 <Update_Detail+0xe6c>
          Tmp = 0.00;
 80138a2:	2300      	movs	r3, #0
 80138a4:	613b      	str	r3, [r7, #16]
 80138a6:	e02e      	b.n	8013906 <Update_Detail+0xeca>
        }else{
		  scale = (List[PROBEATT].Val?
 80138a8:	4b62      	ldr	r3, [pc, #392]	; (8013a34 <Update_Detail+0xff8>)
 80138aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d00b      	beq.n	80138ca <Update_Detail+0xe8e>
 80138b2:	4b60      	ldr	r3, [pc, #384]	; (8013a34 <Update_Detail+0xff8>)
 80138b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138b8:	461a      	mov	r2, r3
 80138ba:	4b62      	ldr	r3, [pc, #392]	; (8013a44 <Update_Detail+0x1008>)
 80138bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80138c0:	4613      	mov	r3, r2
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	4413      	add	r3, r2
 80138c6:	00db      	lsls	r3, r3, #3
 80138c8:	e00a      	b.n	80138e0 <Update_Detail+0xea4>
 80138ca:	4b5a      	ldr	r3, [pc, #360]	; (8013a34 <Update_Detail+0xff8>)
 80138cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138d0:	461a      	mov	r2, r3
 80138d2:	4b59      	ldr	r3, [pc, #356]	; (8013a38 <Update_Detail+0xffc>)
 80138d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80138d8:	4613      	mov	r3, r2
 80138da:	009b      	lsls	r3, r3, #2
 80138dc:	4413      	add	r3, r2
 80138de:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80138e0:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80138e2:	4b57      	ldr	r3, [pc, #348]	; (8013a40 <Update_Detail+0x1004>)
 80138e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	fb02 f303 	mul.w	r3, r2, r3
 80138f2:	131b      	asrs	r3, r3, #12
 80138f4:	3364      	adds	r3, #100	; 0x64
 80138f6:	4a4f      	ldr	r2, [pc, #316]	; (8013a34 <Update_Detail+0xff8>)
 80138f8:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80138fc:	1a9a      	subs	r2, r3, r2
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	fb02 f303 	mul.w	r3, r2, r3
 8013904:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013906:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2201      	movs	r2, #1
 801390e:	2101      	movs	r1, #1
 8013910:	f000 f8a6 	bl	8013a60 <DispMeter>
        break;
 8013914:	e043      	b.n	801399e <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8013916:	4b4c      	ldr	r3, [pc, #304]	; (8013a48 <Update_Detail+0x100c>)
 8013918:	f9b3 3000 	ldrsh.w	r3, [r3]
 801391c:	2b00      	cmp	r3, #0
 801391e:	bfb8      	it	lt
 8013920:	425b      	neglt	r3, r3
 8013922:	b29b      	uxth	r3, r3
 8013924:	2b03      	cmp	r3, #3
 8013926:	d802      	bhi.n	801392e <Update_Detail+0xef2>
          Tmp = 0.00;
 8013928:	2300      	movs	r3, #0
 801392a:	613b      	str	r3, [r7, #16]
 801392c:	e02e      	b.n	801398c <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801392e:	4b41      	ldr	r3, [pc, #260]	; (8013a34 <Update_Detail+0xff8>)
 8013930:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013934:	2b00      	cmp	r3, #0
 8013936:	d00b      	beq.n	8013950 <Update_Detail+0xf14>
 8013938:	4b3e      	ldr	r3, [pc, #248]	; (8013a34 <Update_Detail+0xff8>)
 801393a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801393e:	461a      	mov	r2, r3
 8013940:	4b40      	ldr	r3, [pc, #256]	; (8013a44 <Update_Detail+0x1008>)
 8013942:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013946:	4613      	mov	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	4413      	add	r3, r2
 801394c:	00db      	lsls	r3, r3, #3
 801394e:	e00a      	b.n	8013966 <Update_Detail+0xf2a>
 8013950:	4b38      	ldr	r3, [pc, #224]	; (8013a34 <Update_Detail+0xff8>)
 8013952:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013956:	461a      	mov	r2, r3
 8013958:	4b37      	ldr	r3, [pc, #220]	; (8013a38 <Update_Detail+0xffc>)
 801395a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801395e:	4613      	mov	r3, r2
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4413      	add	r3, r2
 8013964:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013966:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013968:	4b37      	ldr	r3, [pc, #220]	; (8013a48 <Update_Detail+0x100c>)
 801396a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801396e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013972:	687a      	ldr	r2, [r7, #4]
 8013974:	fb02 f303 	mul.w	r3, r2, r3
 8013978:	131b      	asrs	r3, r3, #12
 801397a:	3364      	adds	r3, #100	; 0x64
 801397c:	4a2d      	ldr	r2, [pc, #180]	; (8013a34 <Update_Detail+0xff8>)
 801397e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013982:	1a9a      	subs	r2, r3, r2
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	fb02 f303 	mul.w	r3, r2, r3
 801398a:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 801398c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	2200      	movs	r2, #0
 8013994:	2101      	movs	r1, #1
 8013996:	f000 f863 	bl	8013a60 <DispMeter>
        break;
 801399a:	e000      	b.n	801399e <Update_Detail+0xf62>
        break;
 801399c:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 801399e:	4b2b      	ldr	r3, [pc, #172]	; (8013a4c <Update_Detail+0x1010>)
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d03a      	beq.n	8013a1c <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80139a6:	4b29      	ldr	r3, [pc, #164]	; (8013a4c <Update_Detail+0x1010>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80139ac:	4b28      	ldr	r3, [pc, #160]	; (8013a50 <Update_Detail+0x1014>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80139ba:	4b1e      	ldr	r3, [pc, #120]	; (8013a34 <Update_Detail+0xff8>)
 80139bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139c0:	2b08      	cmp	r3, #8
 80139c2:	dc05      	bgt.n	80139d0 <Update_Detail+0xf94>
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	4a23      	ldr	r2, [pc, #140]	; (8013a54 <Update_Detail+0x1018>)
 80139c8:	fb02 f303 	mul.w	r3, r2, r3
 80139cc:	60fb      	str	r3, [r7, #12]
 80139ce:	e00a      	b.n	80139e6 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80139d0:	4b18      	ldr	r3, [pc, #96]	; (8013a34 <Update_Detail+0xff8>)
 80139d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139d6:	2b11      	cmp	r3, #17
 80139d8:	dc05      	bgt.n	80139e6 <Update_Detail+0xfaa>
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80139e0:	fb02 f303 	mul.w	r3, r2, r3
 80139e4:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80139e6:	4b13      	ldr	r3, [pc, #76]	; (8013a34 <Update_Detail+0xff8>)
 80139e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139ec:	461a      	mov	r2, r3
 80139ee:	4b1a      	ldr	r3, [pc, #104]	; (8013a58 <Update_Detail+0x101c>)
 80139f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139f4:	461a      	mov	r2, r3
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80139fc:	4a0d      	ldr	r2, [pc, #52]	; (8013a34 <Update_Detail+0xff8>)
 80139fe:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013a02:	4611      	mov	r1, r2
 8013a04:	4a15      	ldr	r2, [pc, #84]	; (8013a5c <Update_Detail+0x1020>)
 8013a06:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a0e:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	461a      	mov	r2, r3
 8013a14:	2101      	movs	r1, #1
 8013a16:	2001      	movs	r0, #1
 8013a18:	f000 fa0e 	bl	8013e38 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8013a1c:	8afb      	ldrh	r3, [r7, #22]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	82fb      	strh	r3, [r7, #22]
 8013a22:	8afb      	ldrh	r3, [r7, #22]
 8013a24:	2b29      	cmp	r3, #41	; 0x29
 8013a26:	f67f a849 	bls.w	8012abc <Update_Detail+0x80>
      }
    }
  }

}
 8013a2a:	bf00      	nop
 8013a2c:	bf00      	nop
 8013a2e:	371c      	adds	r7, #28
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd90      	pop	{r4, r7, pc}
 8013a34:	20000274 	.word	0x20000274
 8013a38:	08001e04 	.word	0x08001e04
 8013a3c:	20002672 	.word	0x20002672
 8013a40:	2000266c 	.word	0x2000266c
 8013a44:	2000024c 	.word	0x2000024c
 8013a48:	2000266e 	.word	0x2000266e
 8013a4c:	200001a8 	.word	0x200001a8
 8013a50:	20002684 	.word	0x20002684
 8013a54:	000f4240 	.word	0x000f4240
 8013a58:	0800233c 	.word	0x0800233c
 8013a5c:	0800230c 	.word	0x0800230c

08013a60 <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af02      	add	r7, sp, #8
 8013a66:	603b      	str	r3, [r7, #0]
 8013a68:	4603      	mov	r3, r0
 8013a6a:	80fb      	strh	r3, [r7, #6]
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	717b      	strb	r3, [r7, #5]
 8013a70:	4613      	mov	r3, r2
 8013a72:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8013a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a78:	4619      	mov	r1, r3
 8013a7a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a7e:	f7fa faa7 	bl	800dfd0 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 8013a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a86:	4a30      	ldr	r2, [pc, #192]	; (8013b48 <DispMeter+0xe8>)
 8013a88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	3b03      	subs	r3, #3
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	b219      	sxth	r1, r3
 8013a94:	2348      	movs	r3, #72	; 0x48
 8013a96:	9301      	str	r3, [sp, #4]
 8013a98:	2300      	movs	r3, #0
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	230b      	movs	r3, #11
 8013a9e:	2203      	movs	r2, #3
 8013aa0:	2001      	movs	r0, #1
 8013aa2:	f7fa fb83 	bl	800e1ac <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 8013aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013aaa:	4a27      	ldr	r2, [pc, #156]	; (8013b48 <DispMeter+0xe8>)
 8013aac:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ab4:	f1a3 0213 	sub.w	r2, r3, #19
 8013ab8:	4613      	mov	r3, r2
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	4413      	add	r3, r2
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	4a22      	ldr	r2, [pc, #136]	; (8013b4c <DispMeter+0xec>)
 8013ac2:	4413      	add	r3, r2
 8013ac4:	2201      	movs	r2, #1
 8013ac6:	2103      	movs	r1, #3
 8013ac8:	f7fa fa9a 	bl	800e000 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8013acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ad0:	4a1f      	ldr	r2, [pc, #124]	; (8013b50 <DispMeter+0xf0>)
 8013ad2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013ad6:	793b      	ldrb	r3, [r7, #4]
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	2303      	movs	r3, #3
 8013adc:	6839      	ldr	r1, [r7, #0]
 8013ade:	481d      	ldr	r0, [pc, #116]	; (8013b54 <DispMeter+0xf4>)
 8013ae0:	f7fd fb6c 	bl	80111bc <Value2Str>

  if(St)
 8013ae4:	797b      	ldrb	r3, [r7, #5]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d01c      	beq.n	8013b24 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8013aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013aee:	4a16      	ldr	r2, [pc, #88]	; (8013b48 <DispMeter+0xe8>)
 8013af0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	3318      	adds	r3, #24
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	b218      	sxth	r0, r3
 8013afc:	4b16      	ldr	r3, [pc, #88]	; (8013b58 <DispMeter+0xf8>)
 8013afe:	2201      	movs	r2, #1
 8013b00:	2103      	movs	r1, #3
 8013b02:	f7fa fa7d 	bl	800e000 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b0a:	4a0f      	ldr	r2, [pc, #60]	; (8013b48 <DispMeter+0xe8>)
 8013b0c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	331e      	adds	r3, #30
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	b218      	sxth	r0, r3
 8013b18:	4b0e      	ldr	r3, [pc, #56]	; (8013b54 <DispMeter+0xf4>)
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	2103      	movs	r1, #3
 8013b1e:	f7fa fa6f 	bl	800e000 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8013b22:	e00d      	b.n	8013b40 <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8013b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b28:	4a07      	ldr	r2, [pc, #28]	; (8013b48 <DispMeter+0xe8>)
 8013b2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	3318      	adds	r3, #24
 8013b32:	b29b      	uxth	r3, r3
 8013b34:	b218      	sxth	r0, r3
 8013b36:	4b09      	ldr	r3, [pc, #36]	; (8013b5c <DispMeter+0xfc>)
 8013b38:	2201      	movs	r2, #1
 8013b3a:	2103      	movs	r1, #3
 8013b3c:	f7fa fa60 	bl	800e000 <DispStr>
}
 8013b40:	bf00      	nop
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	080021f8 	.word	0x080021f8
 8013b4c:	08001db4 	.word	0x08001db4
 8013b50:	20000274 	.word	0x20000274
 8013b54:	20002660 	.word	0x20002660
 8013b58:	08000a28 	.word	0x08000a28
 8013b5c:	08000a34 	.word	0x08000a34

08013b60 <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8013b66:	4b20      	ldr	r3, [pc, #128]	; (8013be8 <DispStatus+0x88>)
 8013b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	f003 0301 	and.w	r3, r3, #1
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d102      	bne.n	8013b7c <DispStatus+0x1c>
 8013b76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013b7a:	e000      	b.n	8013b7e <DispStatus+0x1e>
 8013b7c:	231f      	movs	r3, #31
 8013b7e:	4619      	mov	r1, r3
 8013b80:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b84:	f7fa fa24 	bl	800dfd0 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8013b88:	4b17      	ldr	r3, [pc, #92]	; (8013be8 <DispStatus+0x88>)
 8013b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	f003 0301 	and.w	r3, r3, #1
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10b      	bne.n	8013bb0 <DispStatus+0x50>
 8013b98:	4b14      	ldr	r3, [pc, #80]	; (8013bec <DispStatus+0x8c>)
 8013b9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013b9c:	4b13      	ldr	r3, [pc, #76]	; (8013bec <DispStatus+0x8c>)
 8013b9e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	005b      	lsls	r3, r3, #1
 8013ba8:	440b      	add	r3, r1
 8013baa:	005b      	lsls	r3, r3, #1
 8013bac:	4413      	add	r3, r2
 8013bae:	e000      	b.n	8013bb2 <DispStatus+0x52>
 8013bb0:	4b0f      	ldr	r3, [pc, #60]	; (8013bf0 <DispStatus+0x90>)
 8013bb2:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8013bb4:	f240 1321 	movw	r3, #289	; 0x121
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	3b03      	subs	r3, #3
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	b219      	sxth	r1, r3
 8013bc0:	2318      	movs	r3, #24
 8013bc2:	9301      	str	r3, [sp, #4]
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	230b      	movs	r3, #11
 8013bca:	22e1      	movs	r2, #225	; 0xe1
 8013bcc:	2001      	movs	r0, #1
 8013bce:	f7fa faed 	bl	800e1ac <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 8013bd2:	f240 1021 	movw	r0, #289	; 0x121
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	21e1      	movs	r1, #225	; 0xe1
 8013bdc:	f7fa fa10 	bl	800e000 <DispStr>
}
 8013be0:	bf00      	nop
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	20002656 	.word	0x20002656
 8013bec:	20000274 	.word	0x20000274
 8013bf0:	08001d50 	.word	0x08001d50

08013bf4 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8013bfa:	4b6a      	ldr	r3, [pc, #424]	; (8013da4 <Update_Windows+0x1b0>)
 8013bfc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013c00:	461a      	mov	r2, r3
 8013c02:	4b69      	ldr	r3, [pc, #420]	; (8013da8 <Update_Windows+0x1b4>)
 8013c04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013c08:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8013c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c0e:	4a67      	ldr	r2, [pc, #412]	; (8013dac <Update_Windows+0x1b8>)
 8013c10:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c14:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8013c16:	4b66      	ldr	r3, [pc, #408]	; (8013db0 <Update_Windows+0x1bc>)
 8013c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	f040 80a9 	bne.w	8013d74 <Update_Windows+0x180>
 8013c22:	4b64      	ldr	r3, [pc, #400]	; (8013db4 <Update_Windows+0x1c0>)
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	f003 0302 	and.w	r3, r3, #2
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f000 80a2 	beq.w	8013d74 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8013c30:	4b61      	ldr	r3, [pc, #388]	; (8013db8 <Update_Windows+0x1c4>)
 8013c32:	2201      	movs	r2, #1
 8013c34:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013c36:	4b5b      	ldr	r3, [pc, #364]	; (8013da4 <Update_Windows+0x1b0>)
 8013c38:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013c3c:	461a      	mov	r2, r3
 8013c3e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013c42:	fb03 f202 	mul.w	r2, r3, r2
 8013c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	3302      	adds	r3, #2
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	81fb      	strh	r3, [r7, #14]
      x=2;
 8013c56:	2302      	movs	r3, #2
 8013c58:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013c5a:	230f      	movs	r3, #15
 8013c5c:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 8013c5e:	2300      	movs	r3, #0
 8013c60:	817b      	strh	r3, [r7, #10]
 8013c62:	e029      	b.n	8013cb8 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8013c64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013c68:	b293      	uxth	r3, r2
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	81bb      	strh	r3, [r7, #12]
 8013c70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c74:	4619      	mov	r1, r3
 8013c76:	4610      	mov	r0, r2
 8013c78:	f7fd fe60 	bl	801193c <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8013c7c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c80:	f7fd feaa 	bl	80119d8 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8013c84:	2300      	movs	r3, #0
 8013c86:	813b      	strh	r3, [r7, #8]
 8013c88:	e008      	b.n	8013c9c <Update_Windows+0xa8>
 8013c8a:	201f      	movs	r0, #31
 8013c8c:	f7fd fea4 	bl	80119d8 <LCD_Set_Pixel>
 8013c90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	3301      	adds	r3, #1
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	813b      	strh	r3, [r7, #8]
 8013c9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	ddf2      	ble.n	8013c8a <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8013ca4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013ca8:	f7fd fe96 	bl	80119d8 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8013cac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	b29b      	uxth	r3, r3
 8013cb6:	817b      	strh	r3, [r7, #10]
 8013cb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013cbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013cc0:	dbd0      	blt.n	8013c64 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 8013cc2:	4b3b      	ldr	r3, [pc, #236]	; (8013db0 <Update_Windows+0x1bc>)
 8013cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d122      	bne.n	8013d12 <Update_Windows+0x11e>
 8013ccc:	4b3b      	ldr	r3, [pc, #236]	; (8013dbc <Update_Windows+0x1c8>)
 8013cce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013cd2:	2b09      	cmp	r3, #9
 8013cd4:	d11d      	bne.n	8013d12 <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 8013cd6:	4b3a      	ldr	r3, [pc, #232]	; (8013dc0 <Update_Windows+0x1cc>)
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	2b06      	cmp	r3, #6
 8013cde:	d004      	beq.n	8013cea <Update_Windows+0xf6>
 8013ce0:	4b37      	ldr	r3, [pc, #220]	; (8013dc0 <Update_Windows+0x1cc>)
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	2b05      	cmp	r3, #5
 8013ce8:	d113      	bne.n	8013d12 <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8013cea:	4b2e      	ldr	r3, [pc, #184]	; (8013da4 <Update_Windows+0x1b0>)
 8013cec:	2200      	movs	r2, #0
 8013cee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013cf2:	4b2c      	ldr	r3, [pc, #176]	; (8013da4 <Update_Windows+0x1b0>)
 8013cf4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013cfe:	fb03 f202 	mul.w	r2, r3, r2
 8013d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	3302      	adds	r3, #2
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8013d12:	89fb      	ldrh	r3, [r7, #14]
 8013d14:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013d16:	230f      	movs	r3, #15
 8013d18:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	817b      	strh	r3, [r7, #10]
 8013d1e:	e022      	b.n	8013d66 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8013d20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013d24:	b293      	uxth	r3, r2
 8013d26:	3301      	adds	r3, #1
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	81bb      	strh	r3, [r7, #12]
 8013d2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d30:	4619      	mov	r1, r3
 8013d32:	4610      	mov	r0, r2
 8013d34:	f7fd fe02 	bl	801193c <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8013d38:	2300      	movs	r3, #0
 8013d3a:	813b      	strh	r3, [r7, #8]
 8013d3c:	e009      	b.n	8013d52 <Update_Windows+0x15e>
 8013d3e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8013d42:	f7fd fe49 	bl	80119d8 <LCD_Set_Pixel>
 8013d46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	813b      	strh	r3, [r7, #8]
 8013d52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d56:	2b03      	cmp	r3, #3
 8013d58:	ddf1      	ble.n	8013d3e <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8013d5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	3301      	adds	r3, #1
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	817b      	strh	r3, [r7, #10]
 8013d66:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013d6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	dbd6      	blt.n	8013d20 <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 8013d72:	e012      	b.n	8013d9a <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8013d74:	4b0e      	ldr	r3, [pc, #56]	; (8013db0 <Update_Windows+0x1bc>)
 8013d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d10d      	bne.n	8013d9a <Update_Windows+0x1a6>
 8013d7e:	4b0d      	ldr	r3, [pc, #52]	; (8013db4 <Update_Windows+0x1c0>)
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	f003 0302 	and.w	r3, r3, #2
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d107      	bne.n	8013d9a <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 8013d8a:	4b0b      	ldr	r3, [pc, #44]	; (8013db8 <Update_Windows+0x1c4>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 8013d90:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013d94:	f000 f816 	bl	8013dc4 <Clr_WavePosi>
  }
}
 8013d98:	e7ff      	b.n	8013d9a <Update_Windows+0x1a6>
 8013d9a:	bf00      	nop
 8013d9c:	3710      	adds	r7, #16
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
 8013da2:	bf00      	nop
 8013da4:	20000274 	.word	0x20000274
 8013da8:	0800230c 	.word	0x0800230c
 8013dac:	00015f90 	.word	0x00015f90
 8013db0:	20002654 	.word	0x20002654
 8013db4:	2000091a 	.word	0x2000091a
 8013db8:	2000265c 	.word	0x2000265c
 8013dbc:	20000514 	.word	0x20000514
 8013dc0:	2000072e 	.word	0x2000072e

08013dc4 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	4603      	mov	r3, r0
 8013dcc:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8013dce:	2302      	movs	r3, #2
 8013dd0:	81fb      	strh	r3, [r7, #14]
  y=14;
 8013dd2:	230e      	movs	r3, #14
 8013dd4:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	81bb      	strh	r3, [r7, #12]
 8013dda:	e022      	b.n	8013e22 <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8013ddc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013de0:	b293      	uxth	r3, r2
 8013de2:	3301      	adds	r3, #1
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	81fb      	strh	r3, [r7, #14]
 8013de8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013dec:	4619      	mov	r1, r3
 8013dee:	4610      	mov	r0, r2
 8013df0:	f7fd fda4 	bl	801193c <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8013df4:	2300      	movs	r3, #0
 8013df6:	817b      	strh	r3, [r7, #10]
 8013df8:	e009      	b.n	8013e0e <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8013dfa:	88fb      	ldrh	r3, [r7, #6]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fd fdeb 	bl	80119d8 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8013e02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	3301      	adds	r3, #1
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	817b      	strh	r3, [r7, #10]
 8013e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e12:	2b05      	cmp	r3, #5
 8013e14:	ddf1      	ble.n	8013dfa <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8013e16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	81bb      	strh	r3, [r7, #12]
 8013e22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e2a:	dbd7      	blt.n	8013ddc <Clr_WavePosi+0x18>
  }
}
 8013e2c:	bf00      	nop
 8013e2e:	bf00      	nop
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
	...

08013e38 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af02      	add	r7, sp, #8
 8013e3e:	4603      	mov	r3, r0
 8013e40:	603a      	str	r2, [r7, #0]
 8013e42:	71fb      	strb	r3, [r7, #7]
 8013e44:	460b      	mov	r3, r1
 8013e46:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8013e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e52:	f7fa f8bd 	bl	800dfd0 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8013e56:	23a2      	movs	r3, #162	; 0xa2
 8013e58:	b29b      	uxth	r3, r3
 8013e5a:	3b59      	subs	r3, #89	; 0x59
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	b219      	sxth	r1, r3
 8013e60:	2348      	movs	r3, #72	; 0x48
 8013e62:	9301      	str	r3, [sp, #4]
 8013e64:	2300      	movs	r3, #0
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	230b      	movs	r3, #11
 8013e6a:	2203      	movs	r2, #3
 8013e6c:	2001      	movs	r0, #1
 8013e6e:	f7fa f99d 	bl	800e1ac <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8013e72:	23a2      	movs	r3, #162	; 0xa2
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	3b56      	subs	r3, #86	; 0x56
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	b218      	sxth	r0, r3
 8013e7c:	4b1a      	ldr	r3, [pc, #104]	; (8013ee8 <DispFreq+0xb0>)
 8013e7e:	2201      	movs	r2, #1
 8013e80:	2103      	movs	r1, #3
 8013e82:	f7fa f8bd 	bl	800e000 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8013e86:	4b19      	ldr	r3, [pc, #100]	; (8013eec <DispFreq+0xb4>)
 8013e88:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013e8c:	79bb      	ldrb	r3, [r7, #6]
 8013e8e:	9300      	str	r3, [sp, #0]
 8013e90:	2303      	movs	r3, #3
 8013e92:	6839      	ldr	r1, [r7, #0]
 8013e94:	4816      	ldr	r0, [pc, #88]	; (8013ef0 <DispFreq+0xb8>)
 8013e96:	f7fd f991 	bl	80111bc <Value2Str>

  if(St) {
 8013e9a:	79fb      	ldrb	r3, [r7, #7]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d014      	beq.n	8013eca <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8013ea0:	23a2      	movs	r3, #162	; 0xa2
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	3b3e      	subs	r3, #62	; 0x3e
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	b218      	sxth	r0, r3
 8013eaa:	4b12      	ldr	r3, [pc, #72]	; (8013ef4 <DispFreq+0xbc>)
 8013eac:	2201      	movs	r2, #1
 8013eae:	2103      	movs	r1, #3
 8013eb0:	f7fa f8a6 	bl	800e000 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013eb4:	23a2      	movs	r3, #162	; 0xa2
 8013eb6:	b29b      	uxth	r3, r3
 8013eb8:	3b38      	subs	r3, #56	; 0x38
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	b218      	sxth	r0, r3
 8013ebe:	4b0c      	ldr	r3, [pc, #48]	; (8013ef0 <DispFreq+0xb8>)
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	2103      	movs	r1, #3
 8013ec4:	f7fa f89c 	bl	800e000 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8013ec8:	e009      	b.n	8013ede <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8013eca:	23a2      	movs	r3, #162	; 0xa2
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	3b3e      	subs	r3, #62	; 0x3e
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	b218      	sxth	r0, r3
 8013ed4:	4b08      	ldr	r3, [pc, #32]	; (8013ef8 <DispFreq+0xc0>)
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	2103      	movs	r1, #3
 8013eda:	f7fa f891 	bl	800e000 <DispStr>
}
 8013ede:	bf00      	nop
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	08001db4 	.word	0x08001db4
 8013eec:	20000274 	.word	0x20000274
 8013ef0:	20002660 	.word	0x20002660
 8013ef4:	08000a28 	.word	0x08000a28
 8013ef8:	08000a40 	.word	0x08000a40

08013efc <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b088      	sub	sp, #32
 8013f00:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8013f02:	4b59      	ldr	r3, [pc, #356]	; (8014068 <Show_List+0x16c>)
 8013f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f08:	461a      	mov	r2, r3
 8013f0a:	4b58      	ldr	r3, [pc, #352]	; (801406c <Show_List+0x170>)
 8013f0c:	5c9b      	ldrb	r3, [r3, r2]
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	4b55      	ldr	r3, [pc, #340]	; (8014068 <Show_List+0x16c>)
 8013f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f16:	4619      	mov	r1, r3
 8013f18:	4b55      	ldr	r3, [pc, #340]	; (8014070 <Show_List+0x174>)
 8013f1a:	5c5b      	ldrb	r3, [r3, r1]
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	4413      	add	r3, r2
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8013f28:	4b4f      	ldr	r3, [pc, #316]	; (8014068 <Show_List+0x16c>)
 8013f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	4b50      	ldr	r3, [pc, #320]	; (8014074 <Show_List+0x178>)
 8013f32:	5c9b      	ldrb	r3, [r3, r2]
 8013f34:	b21a      	sxth	r2, r3
 8013f36:	4b50      	ldr	r3, [pc, #320]	; (8014078 <Show_List+0x17c>)
 8013f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8013f3c:	4b4a      	ldr	r3, [pc, #296]	; (8014068 <Show_List+0x16c>)
 8013f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f42:	461a      	mov	r2, r3
 8013f44:	4b4d      	ldr	r3, [pc, #308]	; (801407c <Show_List+0x180>)
 8013f46:	5c9b      	ldrb	r3, [r3, r2]
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	b29b      	uxth	r3, r3
 8013f4e:	b21a      	sxth	r2, r3
 8013f50:	4b49      	ldr	r3, [pc, #292]	; (8014078 <Show_List+0x17c>)
 8013f52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8013f56:	4b44      	ldr	r3, [pc, #272]	; (8014068 <Show_List+0x16c>)
 8013f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	4b48      	ldr	r3, [pc, #288]	; (8014080 <Show_List+0x184>)
 8013f60:	5c9b      	ldrb	r3, [r3, r2]
 8013f62:	b21a      	sxth	r2, r3
 8013f64:	4b44      	ldr	r3, [pc, #272]	; (8014078 <Show_List+0x17c>)
 8013f66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8013f6a:	4b3f      	ldr	r3, [pc, #252]	; (8014068 <Show_List+0x16c>)
 8013f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f70:	461a      	mov	r2, r3
 8013f72:	4b3f      	ldr	r3, [pc, #252]	; (8014070 <Show_List+0x174>)
 8013f74:	5c9b      	ldrb	r3, [r3, r2]
 8013f76:	3301      	adds	r3, #1
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	015b      	lsls	r3, r3, #5
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	b21a      	sxth	r2, r3
 8013f80:	4b3d      	ldr	r3, [pc, #244]	; (8014078 <Show_List+0x17c>)
 8013f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8013f86:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013f8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013f8e:	f7fa fd8b 	bl	800eaa8 <PopColor>
  Buil_Pop();
 8013f92:	f7fa fc7b 	bl	800e88c <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8013f96:	4b34      	ldr	r3, [pc, #208]	; (8014068 <Show_List+0x16c>)
 8013f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	4b33      	ldr	r3, [pc, #204]	; (801406c <Show_List+0x170>)
 8013fa0:	5c9b      	ldrb	r3, [r3, r2]
 8013fa2:	82fb      	strh	r3, [r7, #22]
 8013fa4:	e054      	b.n	8014050 <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8013fa6:	4b30      	ldr	r3, [pc, #192]	; (8014068 <Show_List+0x16c>)
 8013fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fac:	461a      	mov	r2, r3
 8013fae:	4b35      	ldr	r3, [pc, #212]	; (8014084 <Show_List+0x188>)
 8013fb0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d102      	bne.n	8013fc2 <Show_List+0xc6>
      Flag = INV;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	757b      	strb	r3, [r7, #21]
 8013fc0:	e007      	b.n	8013fd2 <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8013fc2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013fca:	f7fa fd6d 	bl	800eaa8 <PopColor>
      Flag = PRN;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8013fd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8013fd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	461a      	mov	r2, r3
 8013fe0:	0112      	lsls	r2, r2, #4
 8013fe2:	4413      	add	r3, r2
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	3b0a      	subs	r3, #10
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8013fec:	2304      	movs	r3, #4
 8013fee:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8013ff0:	463b      	mov	r3, r7
 8013ff2:	220c      	movs	r2, #12
 8013ff4:	2100      	movs	r1, #0
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f012 fa14 	bl	8026424 <memset>
    memcpy(str,&ESTR[i],10);
 8013ffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014000:	4613      	mov	r3, r2
 8014002:	009b      	lsls	r3, r3, #2
 8014004:	4413      	add	r3, r2
 8014006:	005b      	lsls	r3, r3, #1
 8014008:	4a1f      	ldr	r2, [pc, #124]	; (8014088 <Show_List+0x18c>)
 801400a:	1899      	adds	r1, r3, r2
 801400c:	463b      	mov	r3, r7
 801400e:	220a      	movs	r2, #10
 8014010:	4618      	mov	r0, r3
 8014012:	f012 f9f9 	bl	8026408 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014016:	463b      	mov	r3, r7
 8014018:	7d7a      	ldrb	r2, [r7, #21]
 801401a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801401e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8014022:	f7fa fe91 	bl	800ed48 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014026:	463b      	mov	r3, r7
 8014028:	4618      	mov	r0, r3
 801402a:	f7f8 f809 	bl	800c040 <strlen>
 801402e:	4603      	mov	r3, r0
 8014030:	b2db      	uxtb	r3, r3
 8014032:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014036:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801403a:	200a      	movs	r0, #10
 801403c:	9000      	str	r0, [sp, #0]
 801403e:	2000      	movs	r0, #0
 8014040:	f7fa ff28 	bl	800ee94 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014044:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014048:	b29b      	uxth	r3, r3
 801404a:	3301      	adds	r3, #1
 801404c:	b29b      	uxth	r3, r3
 801404e:	82fb      	strh	r3, [r7, #22]
 8014050:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014058:	429a      	cmp	r2, r3
 801405a:	dba4      	blt.n	8013fa6 <Show_List+0xaa>
  }
  List_Pop();
 801405c:	f7fa fd54 	bl	800eb08 <List_Pop>
}
 8014060:	bf00      	nop
 8014062:	3718      	adds	r7, #24
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}
 8014068:	20002654 	.word	0x20002654
 801406c:	08001fdc 	.word	0x08001fdc
 8014070:	08001fe4 	.word	0x08001fe4
 8014074:	080021e0 	.word	0x080021e0
 8014078:	20000140 	.word	0x20000140
 801407c:	080021e8 	.word	0x080021e8
 8014080:	080021f0 	.word	0x080021f0
 8014084:	20000514 	.word	0x20000514
 8014088:	08001fec 	.word	0x08001fec

0801408c <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af02      	add	r7, sp, #8
 8014092:	4603      	mov	r3, r0
 8014094:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 8014096:	f64f 4110 	movw	r1, #64528	; 0xfc10
 801409a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801409e:	f7f9 ff97 	bl	800dfd0 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80140a2:	23f8      	movs	r3, #248	; 0xf8
 80140a4:	b29b      	uxth	r3, r3
 80140a6:	3b03      	subs	r3, #3
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	b219      	sxth	r1, r3
 80140ac:	2342      	movs	r3, #66	; 0x42
 80140ae:	9301      	str	r3, [sp, #4]
 80140b0:	2300      	movs	r3, #0
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	230b      	movs	r3, #11
 80140b6:	2203      	movs	r2, #3
 80140b8:	2001      	movs	r0, #1
 80140ba:	f7fa f877 	bl	800e1ac <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 80140be:	20f8      	movs	r0, #248	; 0xf8
 80140c0:	79fb      	ldrb	r3, [r7, #7]
 80140c2:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80140c6:	fb02 f303 	mul.w	r3, r2, r3
 80140ca:	4a07      	ldr	r2, [pc, #28]	; (80140e8 <DispFileInfo+0x5c>)
 80140cc:	4413      	add	r3, r2
 80140ce:	2201      	movs	r2, #1
 80140d0:	2103      	movs	r1, #3
 80140d2:	f7f9 ff95 	bl	800e000 <DispStr>
  HAL_Delay(2000);
 80140d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80140da:	f004 f807 	bl	80180ec <HAL_Delay>

}
 80140de:	bf00      	nop
 80140e0:	3708      	adds	r7, #8
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	0800238c 	.word	0x0800238c

080140ec <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 80140f2:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80140f6:	4619      	mov	r1, r3
 80140f8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80140fc:	f7f9 ff68 	bl	800dfd0 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 8014100:	4b1a      	ldr	r3, [pc, #104]	; (801416c <DispBMPInfo+0x80>)
 8014102:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014106:	b2db      	uxtb	r3, r3
 8014108:	4619      	mov	r1, r3
 801410a:	4819      	ldr	r0, [pc, #100]	; (8014170 <DispBMPInfo+0x84>)
 801410c:	f7fc ffee 	bl	80110ec <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 8014110:	23f8      	movs	r3, #248	; 0xf8
 8014112:	b29b      	uxth	r3, r3
 8014114:	3b03      	subs	r3, #3
 8014116:	b29b      	uxth	r3, r3
 8014118:	b219      	sxth	r1, r3
 801411a:	2342      	movs	r3, #66	; 0x42
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	2300      	movs	r3, #0
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	230b      	movs	r3, #11
 8014124:	2203      	movs	r2, #3
 8014126:	2001      	movs	r0, #1
 8014128:	f7fa f840 	bl	800e1ac <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 801412c:	20f8      	movs	r0, #248	; 0xf8
 801412e:	4b11      	ldr	r3, [pc, #68]	; (8014174 <DispBMPInfo+0x88>)
 8014130:	2201      	movs	r2, #1
 8014132:	2103      	movs	r1, #3
 8014134:	f7f9 ff64 	bl	800e000 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014138:	23f8      	movs	r3, #248	; 0xf8
 801413a:	b29b      	uxth	r3, r3
 801413c:	3318      	adds	r3, #24
 801413e:	b29b      	uxth	r3, r3
 8014140:	b218      	sxth	r0, r3
 8014142:	4b0b      	ldr	r3, [pc, #44]	; (8014170 <DispBMPInfo+0x84>)
 8014144:	2201      	movs	r2, #1
 8014146:	2103      	movs	r1, #3
 8014148:	f7f9 ff5a 	bl	800e000 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 801414c:	23f8      	movs	r3, #248	; 0xf8
 801414e:	b29b      	uxth	r3, r3
 8014150:	332a      	adds	r3, #42	; 0x2a
 8014152:	b29b      	uxth	r3, r3
 8014154:	b218      	sxth	r0, r3
 8014156:	4b05      	ldr	r3, [pc, #20]	; (801416c <DispBMPInfo+0x80>)
 8014158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801415c:	2201      	movs	r2, #1
 801415e:	2103      	movs	r1, #3
 8014160:	f7f9 ff4e 	bl	800e000 <DispStr>
}
 8014164:	bf00      	nop
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	20000274 	.word	0x20000274
 8014170:	20002660 	.word	0x20002660
 8014174:	080009a4 	.word	0x080009a4

08014178 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014178:	b590      	push	{r4, r7, lr}
 801417a:	b087      	sub	sp, #28
 801417c:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 801417e:	2300      	movs	r3, #0
 8014180:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8014182:	4ba3      	ldr	r3, [pc, #652]	; (8014410 <Update_Proc_All+0x298>)
 8014184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014188:	b29a      	uxth	r2, r3
 801418a:	4ba1      	ldr	r3, [pc, #644]	; (8014410 <Update_Proc_All+0x298>)
 801418c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014190:	b29b      	uxth	r3, r3
 8014192:	4619      	mov	r1, r3
 8014194:	0089      	lsls	r1, r1, #2
 8014196:	440b      	add	r3, r1
 8014198:	005b      	lsls	r3, r3, #1
 801419a:	b29b      	uxth	r3, r3
 801419c:	4413      	add	r3, r2
 801419e:	b29b      	uxth	r3, r3
 80141a0:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 80141a2:	2300      	movs	r3, #0
 80141a4:	81fb      	strh	r3, [r7, #14]
 80141a6:	e015      	b.n	80141d4 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 80141a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141ac:	4a98      	ldr	r2, [pc, #608]	; (8014410 <Update_Proc_All+0x298>)
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	4413      	add	r3, r2
 80141b2:	799a      	ldrb	r2, [r3, #6]
 80141b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141b8:	f042 0220 	orr.w	r2, r2, #32
 80141bc:	b2d1      	uxtb	r1, r2
 80141be:	4a94      	ldr	r2, [pc, #592]	; (8014410 <Update_Proc_All+0x298>)
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	4413      	add	r3, r2
 80141c4:	460a      	mov	r2, r1
 80141c6:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 80141c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	3301      	adds	r3, #1
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	81fb      	strh	r3, [r7, #14]
 80141d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141d8:	2b29      	cmp	r3, #41	; 0x29
 80141da:	dde5      	ble.n	80141a8 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 80141dc:	2300      	movs	r3, #0
 80141de:	81fb      	strh	r3, [r7, #14]
 80141e0:	e1be      	b.n	8014560 <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 80141e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141e6:	4a8a      	ldr	r2, [pc, #552]	; (8014410 <Update_Proc_All+0x298>)
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	4413      	add	r3, r2
 80141ec:	799b      	ldrb	r3, [r3, #6]
 80141ee:	f003 0320 	and.w	r3, r3, #32
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	f000 81ad 	beq.w	8014552 <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 80141f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141fc:	4a84      	ldr	r2, [pc, #528]	; (8014410 <Update_Proc_All+0x298>)
 80141fe:	00db      	lsls	r3, r3, #3
 8014200:	4413      	add	r3, r2
 8014202:	799a      	ldrb	r2, [r3, #6]
 8014204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014208:	f022 0220 	bic.w	r2, r2, #32
 801420c:	b2d1      	uxtb	r1, r2
 801420e:	4a80      	ldr	r2, [pc, #512]	; (8014410 <Update_Proc_All+0x298>)
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	4413      	add	r3, r2
 8014214:	460a      	mov	r2, r1
 8014216:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801421c:	2b12      	cmp	r3, #18
 801421e:	f300 8199 	bgt.w	8014554 <Update_Proc_All+0x3dc>
 8014222:	2b0d      	cmp	r3, #13
 8014224:	f280 80ac 	bge.w	8014380 <Update_Proc_All+0x208>
 8014228:	2b03      	cmp	r3, #3
 801422a:	dc02      	bgt.n	8014232 <Update_Proc_All+0xba>
 801422c:	2b00      	cmp	r3, #0
 801422e:	da04      	bge.n	801423a <Update_Proc_All+0xc2>
 8014230:	e190      	b.n	8014554 <Update_Proc_All+0x3dc>
 8014232:	2b07      	cmp	r3, #7
 8014234:	f000 815a 	beq.w	80144ec <Update_Proc_All+0x374>
 8014238:	e18c      	b.n	8014554 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 801423a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801423e:	4619      	mov	r1, r3
 8014240:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014244:	f7f9 fec4 	bl	800dfd0 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d007      	beq.n	8014260 <Update_Proc_All+0xe8>
 8014250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014254:	2b01      	cmp	r3, #1
 8014256:	d003      	beq.n	8014260 <Update_Proc_All+0xe8>
 8014258:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801425c:	2b02      	cmp	r3, #2
 801425e:	d138      	bne.n	80142d2 <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8014260:	232f      	movs	r3, #47	; 0x2f
 8014262:	b29b      	uxth	r3, r3
 8014264:	3b03      	subs	r3, #3
 8014266:	b29b      	uxth	r3, r3
 8014268:	b219      	sxth	r1, r3
 801426a:	232a      	movs	r3, #42	; 0x2a
 801426c:	9301      	str	r3, [sp, #4]
 801426e:	2300      	movs	r3, #0
 8014270:	9300      	str	r3, [sp, #0]
 8014272:	230b      	movs	r3, #11
 8014274:	22e1      	movs	r2, #225	; 0xe1
 8014276:	2001      	movs	r0, #1
 8014278:	f7f9 ff98 	bl	800e1ac <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 801427c:	202f      	movs	r0, #47	; 0x2f
 801427e:	4b64      	ldr	r3, [pc, #400]	; (8014410 <Update_Proc_All+0x298>)
 8014280:	6819      	ldr	r1, [r3, #0]
 8014282:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	005b      	lsls	r3, r3, #1
 801428e:	440b      	add	r3, r1
 8014290:	2201      	movs	r2, #1
 8014292:	21e1      	movs	r1, #225	; 0xe1
 8014294:	f7f9 feb4 	bl	800e000 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8014298:	2047      	movs	r0, #71	; 0x47
 801429a:	4b5d      	ldr	r3, [pc, #372]	; (8014410 <Update_Proc_All+0x298>)
 801429c:	689a      	ldr	r2, [r3, #8]
 801429e:	4b5c      	ldr	r3, [pc, #368]	; (8014410 <Update_Proc_All+0x298>)
 80142a0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80142a4:	4619      	mov	r1, r3
 80142a6:	460b      	mov	r3, r1
 80142a8:	005b      	lsls	r3, r3, #1
 80142aa:	440b      	add	r3, r1
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	4413      	add	r3, r2
 80142b0:	2201      	movs	r2, #1
 80142b2:	21e1      	movs	r1, #225	; 0xe1
 80142b4:	f7f9 fea4 	bl	800e000 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80142b8:	2020      	movs	r0, #32
 80142ba:	4b55      	ldr	r3, [pc, #340]	; (8014410 <Update_Proc_All+0x298>)
 80142bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d001      	beq.n	80142c8 <Update_Proc_All+0x150>
 80142c4:	4b53      	ldr	r3, [pc, #332]	; (8014414 <Update_Proc_All+0x29c>)
 80142c6:	e000      	b.n	80142ca <Update_Proc_All+0x152>
 80142c8:	4b53      	ldr	r3, [pc, #332]	; (8014418 <Update_Proc_All+0x2a0>)
 80142ca:	2210      	movs	r2, #16
 80142cc:	21e1      	movs	r1, #225	; 0xe1
 80142ce:	f7fa f901 	bl	800e4d4 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80142d2:	4b4f      	ldr	r3, [pc, #316]	; (8014410 <Update_Proc_All+0x298>)
 80142d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80142d8:	3301      	adds	r3, #1
 80142da:	b29b      	uxth	r3, r3
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	b29b      	uxth	r3, r3
 80142e0:	b21a      	sxth	r2, r3
 80142e2:	4b4e      	ldr	r3, [pc, #312]	; (801441c <Update_Proc_All+0x2a4>)
 80142e4:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80142e6:	4b4d      	ldr	r3, [pc, #308]	; (801441c <Update_Proc_All+0x2a4>)
 80142e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	4b48      	ldr	r3, [pc, #288]	; (8014410 <Update_Proc_All+0x298>)
 80142f0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80142f4:	3301      	adds	r3, #1
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	005b      	lsls	r3, r3, #1
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	4413      	add	r3, r2
 80142fe:	b29b      	uxth	r3, r3
 8014300:	b21a      	sxth	r2, r3
 8014302:	4b46      	ldr	r3, [pc, #280]	; (801441c <Update_Proc_All+0x2a4>)
 8014304:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014306:	4b42      	ldr	r3, [pc, #264]	; (8014410 <Update_Proc_All+0x298>)
 8014308:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801430c:	2b05      	cmp	r3, #5
 801430e:	dd01      	ble.n	8014314 <Update_Proc_All+0x19c>
 8014310:	2204      	movs	r2, #4
 8014312:	e000      	b.n	8014316 <Update_Proc_All+0x19e>
 8014314:	2200      	movs	r2, #0
 8014316:	4b42      	ldr	r3, [pc, #264]	; (8014420 <Update_Proc_All+0x2a8>)
 8014318:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 801431a:	4b3d      	ldr	r3, [pc, #244]	; (8014410 <Update_Proc_All+0x298>)
 801431c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014320:	4b40      	ldr	r3, [pc, #256]	; (8014424 <Update_Proc_All+0x2ac>)
 8014322:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014324:	4b3a      	ldr	r3, [pc, #232]	; (8014410 <Update_Proc_All+0x298>)
 8014326:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801432a:	2b01      	cmp	r3, #1
 801432c:	dd03      	ble.n	8014336 <Update_Proc_All+0x1be>
          KindA  = HV;
 801432e:	4b3e      	ldr	r3, [pc, #248]	; (8014428 <Update_Proc_All+0x2b0>)
 8014330:	2201      	movs	r2, #1
 8014332:	801a      	strh	r2, [r3, #0]
 8014334:	e002      	b.n	801433c <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014336:	4b3c      	ldr	r3, [pc, #240]	; (8014428 <Update_Proc_All+0x2b0>)
 8014338:	2200      	movs	r2, #0
 801433a:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 801433c:	4b34      	ldr	r3, [pc, #208]	; (8014410 <Update_Proc_All+0x298>)
 801433e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d001      	beq.n	801434a <Update_Proc_All+0x1d2>
 8014346:	2200      	movs	r2, #0
 8014348:	e000      	b.n	801434c <Update_Proc_All+0x1d4>
 801434a:	2202      	movs	r2, #2
 801434c:	4b37      	ldr	r3, [pc, #220]	; (801442c <Update_Proc_All+0x2b4>)
 801434e:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014350:	4b35      	ldr	r3, [pc, #212]	; (8014428 <Update_Proc_All+0x2b0>)
 8014352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014356:	461a      	mov	r2, r3
 8014358:	4b34      	ldr	r3, [pc, #208]	; (801442c <Update_Proc_All+0x2b4>)
 801435a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801435e:	4413      	add	r3, r2
 8014360:	4a2f      	ldr	r2, [pc, #188]	; (8014420 <Update_Proc_All+0x2a8>)
 8014362:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014366:	4413      	add	r3, r2
 8014368:	4619      	mov	r1, r3
 801436a:	2007      	movs	r0, #7
 801436c:	f7f8 f808 	bl	800c380 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014370:	4b27      	ldr	r3, [pc, #156]	; (8014410 <Update_Proc_All+0x298>)
 8014372:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014376:	b2db      	uxtb	r3, r3
 8014378:	4618      	mov	r0, r3
 801437a:	f000 fa0f 	bl	801479c <AiPosi>

        break;
 801437e:	e0e9      	b.n	8014554 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014380:	f7ff fbee 	bl	8013b60 <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014384:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014388:	4619      	mov	r1, r3
 801438a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801438e:	f7f9 fe1f 	bl	800dfd0 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014396:	2b0e      	cmp	r3, #14
 8014398:	d003      	beq.n	80143a2 <Update_Proc_All+0x22a>
 801439a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801439e:	2b11      	cmp	r3, #17
 80143a0:	d11a      	bne.n	80143d8 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 80143a2:	23dd      	movs	r3, #221	; 0xdd
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	3b03      	subs	r3, #3
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	b219      	sxth	r1, r3
 80143ac:	2330      	movs	r3, #48	; 0x30
 80143ae:	9301      	str	r3, [sp, #4]
 80143b0:	2300      	movs	r3, #0
 80143b2:	9300      	str	r3, [sp, #0]
 80143b4:	230b      	movs	r3, #11
 80143b6:	22e1      	movs	r2, #225	; 0xe1
 80143b8:	2001      	movs	r0, #1
 80143ba:	f7f9 fef7 	bl	800e1ac <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80143be:	20dd      	movs	r0, #221	; 0xdd
 80143c0:	4b13      	ldr	r3, [pc, #76]	; (8014410 <Update_Proc_All+0x298>)
 80143c2:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d001      	beq.n	80143ce <Update_Proc_All+0x256>
 80143ca:	4b19      	ldr	r3, [pc, #100]	; (8014430 <Update_Proc_All+0x2b8>)
 80143cc:	e000      	b.n	80143d0 <Update_Proc_All+0x258>
 80143ce:	4b19      	ldr	r3, [pc, #100]	; (8014434 <Update_Proc_All+0x2bc>)
 80143d0:	2211      	movs	r2, #17
 80143d2:	21e1      	movs	r1, #225	; 0xe1
 80143d4:	f7fa f87e 	bl	800e4d4 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80143d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80143dc:	2b0f      	cmp	r3, #15
 80143de:	d132      	bne.n	8014446 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80143e0:	20cf      	movs	r0, #207	; 0xcf
 80143e2:	4b0b      	ldr	r3, [pc, #44]	; (8014410 <Update_Proc_All+0x298>)
 80143e4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d001      	beq.n	80143f0 <Update_Proc_All+0x278>
 80143ec:	4b12      	ldr	r3, [pc, #72]	; (8014438 <Update_Proc_All+0x2c0>)
 80143ee:	e000      	b.n	80143f2 <Update_Proc_All+0x27a>
 80143f0:	4b09      	ldr	r3, [pc, #36]	; (8014418 <Update_Proc_All+0x2a0>)
 80143f2:	2210      	movs	r2, #16
 80143f4:	21e1      	movs	r1, #225	; 0xe1
 80143f6:	f7fa f86d 	bl	800e4d4 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 80143fa:	4b05      	ldr	r3, [pc, #20]	; (8014410 <Update_Proc_All+0x298>)
 80143fc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014400:	2b00      	cmp	r3, #0
 8014402:	d01d      	beq.n	8014440 <Update_Proc_All+0x2c8>
 8014404:	4b0d      	ldr	r3, [pc, #52]	; (801443c <Update_Proc_All+0x2c4>)
 8014406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801440a:	801a      	strh	r2, [r3, #0]
 801440c:	e01b      	b.n	8014446 <Update_Proc_All+0x2ce>
 801440e:	bf00      	nop
 8014410:	20000274 	.word	0x20000274
 8014414:	080009ac 	.word	0x080009ac
 8014418:	080009b0 	.word	0x080009b0
 801441c:	20000140 	.word	0x20000140
 8014420:	2000268c 	.word	0x2000268c
 8014424:	20002690 	.word	0x20002690
 8014428:	20002692 	.word	0x20002692
 801442c:	2000268e 	.word	0x2000268e
 8014430:	080009dc 	.word	0x080009dc
 8014434:	080009e0 	.word	0x080009e0
 8014438:	080009f0 	.word	0x080009f0
 801443c:	20000732 	.word	0x20000732
          else KEYTIME = 0;
 8014440:	4b4c      	ldr	r3, [pc, #304]	; (8014574 <Update_Proc_All+0x3fc>)
 8014442:	2200      	movs	r2, #0
 8014444:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014446:	4b4c      	ldr	r3, [pc, #304]	; (8014578 <Update_Proc_All+0x400>)
 8014448:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801444c:	b29a      	uxth	r2, r3
 801444e:	4b4b      	ldr	r3, [pc, #300]	; (801457c <Update_Proc_All+0x404>)
 8014450:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014454:	b29b      	uxth	r3, r3
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	b29b      	uxth	r3, r3
 801445a:	4413      	add	r3, r2
 801445c:	b29b      	uxth	r3, r3
 801445e:	b21a      	sxth	r2, r3
 8014460:	4b45      	ldr	r3, [pc, #276]	; (8014578 <Update_Proc_All+0x400>)
 8014462:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014464:	4b45      	ldr	r3, [pc, #276]	; (801457c <Update_Proc_All+0x404>)
 8014466:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 801446a:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 801446c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014470:	4a43      	ldr	r2, [pc, #268]	; (8014580 <Update_Proc_All+0x408>)
 8014472:	5cd3      	ldrb	r3, [r2, r3]
 8014474:	461c      	mov	r4, r3
 8014476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801447a:	4a42      	ldr	r2, [pc, #264]	; (8014584 <Update_Proc_All+0x40c>)
 801447c:	5cd3      	ldrb	r3, [r2, r3]
 801447e:	4618      	mov	r0, r3
 8014480:	f7fc ff98 	bl	80113b4 <Exp>
 8014484:	4603      	mov	r3, r0
 8014486:	fb03 f204 	mul.w	r2, r3, r4
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	fb02 f303 	mul.w	r3, r2, r3
 8014490:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014492:	2301      	movs	r3, #1
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	2302      	movs	r3, #2
 8014498:	4a3b      	ldr	r2, [pc, #236]	; (8014588 <Update_Proc_All+0x410>)
 801449a:	68b9      	ldr	r1, [r7, #8]
 801449c:	483b      	ldr	r0, [pc, #236]	; (801458c <Update_Proc_All+0x414>)
 801449e:	f7fc fe8d 	bl	80111bc <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 80144a2:	20e7      	movs	r0, #231	; 0xe7
 80144a4:	4b3a      	ldr	r3, [pc, #232]	; (8014590 <Update_Proc_All+0x418>)
 80144a6:	2211      	movs	r2, #17
 80144a8:	21e1      	movs	r1, #225	; 0xe1
 80144aa:	f7fa f813 	bl	800e4d4 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 80144ae:	23e7      	movs	r3, #231	; 0xe7
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	3309      	adds	r3, #9
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	b218      	sxth	r0, r3
 80144b8:	4b36      	ldr	r3, [pc, #216]	; (8014594 <Update_Proc_All+0x41c>)
 80144ba:	2201      	movs	r2, #1
 80144bc:	21e1      	movs	r1, #225	; 0xe1
 80144be:	f7f9 fd9f 	bl	800e000 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80144c2:	23e7      	movs	r3, #231	; 0xe7
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	3309      	adds	r3, #9
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	b218      	sxth	r0, r3
 80144cc:	4b2f      	ldr	r3, [pc, #188]	; (801458c <Update_Proc_All+0x414>)
 80144ce:	2201      	movs	r2, #1
 80144d0:	21e1      	movs	r1, #225	; 0xe1
 80144d2:	f7f9 fd95 	bl	800e000 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80144d6:	4b29      	ldr	r3, [pc, #164]	; (801457c <Update_Proc_All+0x404>)
 80144d8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d001      	beq.n	80144e4 <Update_Proc_All+0x36c>
 80144e0:	2202      	movs	r2, #2
 80144e2:	e000      	b.n	80144e6 <Update_Proc_All+0x36e>
 80144e4:	2200      	movs	r2, #0
 80144e6:	4b24      	ldr	r3, [pc, #144]	; (8014578 <Update_Proc_All+0x400>)
 80144e8:	811a      	strh	r2, [r3, #8]
        break;
 80144ea:	e033      	b.n	8014554 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 80144ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80144f0:	4619      	mov	r1, r3
 80144f2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144f6:	f7f9 fd6b 	bl	800dfd0 <SetColor>
        if(i == TIM_BASE)
 80144fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144fe:	2b07      	cmp	r3, #7
 8014500:	d120      	bne.n	8014544 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014506:	4a24      	ldr	r2, [pc, #144]	; (8014598 <Update_Proc_All+0x420>)
 8014508:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801450c:	b29b      	uxth	r3, r3
 801450e:	3b03      	subs	r3, #3
 8014510:	b29b      	uxth	r3, r3
 8014512:	b219      	sxth	r1, r3
 8014514:	231e      	movs	r3, #30
 8014516:	9301      	str	r3, [sp, #4]
 8014518:	2302      	movs	r3, #2
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	230b      	movs	r3, #11
 801451e:	22e1      	movs	r2, #225	; 0xe1
 8014520:	2001      	movs	r0, #1
 8014522:	f7f9 fe43 	bl	800e1ac <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801452a:	4a1b      	ldr	r2, [pc, #108]	; (8014598 <Update_Proc_All+0x420>)
 801452c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014530:	4b12      	ldr	r3, [pc, #72]	; (801457c <Update_Proc_All+0x404>)
 8014532:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	4a18      	ldr	r2, [pc, #96]	; (801459c <Update_Proc_All+0x424>)
 801453a:	4413      	add	r3, r2
 801453c:	2201      	movs	r2, #1
 801453e:	21e1      	movs	r1, #225	; 0xe1
 8014540:	f7f9 fd5e 	bl	800e000 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014544:	4b0d      	ldr	r3, [pc, #52]	; (801457c <Update_Proc_All+0x404>)
 8014546:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801454a:	4618      	mov	r0, r3
 801454c:	f7f8 f896 	bl	800c67c <Set_Base>
      break;
 8014550:	e000      	b.n	8014554 <Update_Proc_All+0x3dc>

      }
    }
 8014552:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014558:	b29b      	uxth	r3, r3
 801455a:	3301      	adds	r3, #1
 801455c:	b29b      	uxth	r3, r3
 801455e:	81fb      	strh	r3, [r7, #14]
 8014560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014564:	2b29      	cmp	r3, #41	; 0x29
 8014566:	f77f ae3c 	ble.w	80141e2 <Update_Proc_All+0x6a>
  }
}
 801456a:	bf00      	nop
 801456c:	bf00      	nop
 801456e:	3714      	adds	r7, #20
 8014570:	46bd      	mov	sp, r7
 8014572:	bd90      	pop	{r4, r7, pc}
 8014574:	20000732 	.word	0x20000732
 8014578:	20000140 	.word	0x20000140
 801457c:	20000274 	.word	0x20000274
 8014580:	080021cc 	.word	0x080021cc
 8014584:	080021a4 	.word	0x080021a4
 8014588:	08001da8 	.word	0x08001da8
 801458c:	20002660 	.word	0x20002660
 8014590:	080009ec 	.word	0x080009ec
 8014594:	080009e4 	.word	0x080009e4
 8014598:	080021f8 	.word	0x080021f8
 801459c:	200001ac 	.word	0x200001ac

080145a0 <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 80145a6:	2300      	movs	r3, #0
 80145a8:	807b      	strh	r3, [r7, #2]
 80145aa:	2300      	movs	r3, #0
 80145ac:	80bb      	strh	r3, [r7, #4]

  Analys();
 80145ae:	f000 f8b1 	bl	8014714 <Analys>
  for(i=0; i<100; i++)
 80145b2:	2300      	movs	r3, #0
 80145b4:	80fb      	strh	r3, [r7, #6]
 80145b6:	e051      	b.n	801465c <Align_Set+0xbc>
  {
    AiPosi(100);
 80145b8:	2064      	movs	r0, #100	; 0x64
 80145ba:	f000 f8ef 	bl	801479c <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 80145be:	200a      	movs	r0, #10
 80145c0:	f003 fd94 	bl	80180ec <HAL_Delay>
    Analys();
 80145c4:	f000 f8a6 	bl	8014714 <Analys>
    TmpA = 2048-Vavg;
 80145c8:	4b28      	ldr	r3, [pc, #160]	; (801466c <Align_Set+0xcc>)
 80145ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80145d4:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 80145d6:	887b      	ldrh	r3, [r7, #2]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d036      	beq.n	801464a <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 80145dc:	4b24      	ldr	r3, [pc, #144]	; (8014670 <Align_Set+0xd0>)
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	4b24      	ldr	r3, [pc, #144]	; (8014674 <Align_Set+0xd4>)
 80145e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145e6:	4619      	mov	r1, r3
 80145e8:	4b23      	ldr	r3, [pc, #140]	; (8014678 <Align_Set+0xd8>)
 80145ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	bf14      	ite	ne
 80145f2:	2301      	movne	r3, #1
 80145f4:	2300      	moveq	r3, #0
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	440b      	add	r3, r1
 80145fa:	005b      	lsls	r3, r3, #1
 80145fc:	4413      	add	r3, r2
 80145fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014602:	b29a      	uxth	r2, r3
 8014604:	887b      	ldrh	r3, [r7, #2]
 8014606:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801460a:	fb01 f303 	mul.w	r3, r1, r3
 801460e:	2b00      	cmp	r3, #0
 8014610:	da01      	bge.n	8014616 <Align_Set+0x76>
 8014612:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014616:	12db      	asrs	r3, r3, #11
 8014618:	b29b      	uxth	r3, r3
 801461a:	4413      	add	r3, r2
 801461c:	b299      	uxth	r1, r3
 801461e:	4b14      	ldr	r3, [pc, #80]	; (8014670 <Align_Set+0xd0>)
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	4b14      	ldr	r3, [pc, #80]	; (8014674 <Align_Set+0xd4>)
 8014624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014628:	4618      	mov	r0, r3
 801462a:	4b13      	ldr	r3, [pc, #76]	; (8014678 <Align_Set+0xd8>)
 801462c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014630:	2b00      	cmp	r3, #0
 8014632:	bf14      	ite	ne
 8014634:	2301      	movne	r3, #1
 8014636:	2300      	moveq	r3, #0
 8014638:	b2db      	uxtb	r3, r3
 801463a:	4403      	add	r3, r0
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	b20a      	sxth	r2, r1
 8014642:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014644:	2300      	movs	r3, #0
 8014646:	80bb      	strh	r3, [r7, #4]
 8014648:	e002      	b.n	8014650 <Align_Set+0xb0>
    }
    else
      StA++;
 801464a:	88bb      	ldrh	r3, [r7, #4]
 801464c:	3301      	adds	r3, #1
 801464e:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014650:	88bb      	ldrh	r3, [r7, #4]
 8014652:	2b04      	cmp	r3, #4
 8014654:	d806      	bhi.n	8014664 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014656:	88fb      	ldrh	r3, [r7, #6]
 8014658:	3301      	adds	r3, #1
 801465a:	80fb      	strh	r3, [r7, #6]
 801465c:	88fb      	ldrh	r3, [r7, #6]
 801465e:	2b63      	cmp	r3, #99	; 0x63
 8014660:	d9aa      	bls.n	80145b8 <Align_Set+0x18>
 8014662:	e000      	b.n	8014666 <Align_Set+0xc6>
    	return;
 8014664:	bf00      	nop
  }

}
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}
 801466c:	20002672 	.word	0x20002672
 8014670:	20000554 	.word	0x20000554
 8014674:	20002692 	.word	0x20002692
 8014678:	2000268c 	.word	0x2000268c

0801467c <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014680:	4b21      	ldr	r3, [pc, #132]	; (8014708 <Zero_Align+0x8c>)
 8014682:	2200      	movs	r2, #0
 8014684:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014686:	4b21      	ldr	r3, [pc, #132]	; (801470c <Zero_Align+0x90>)
 8014688:	2201      	movs	r2, #1
 801468a:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 801468c:	4b20      	ldr	r3, [pc, #128]	; (8014710 <Zero_Align+0x94>)
 801468e:	2204      	movs	r2, #4
 8014690:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014692:	2105      	movs	r1, #5
 8014694:	2007      	movs	r0, #7
 8014696:	f7f7 fe73 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 801469a:	2064      	movs	r0, #100	; 0x64
 801469c:	f000 f87e 	bl	801479c <AiPosi>
  HAL_Delay(1000);
 80146a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146a4:	f003 fd22 	bl	80180ec <HAL_Delay>
  Align_Set();
 80146a8:	f7ff ff7a 	bl	80145a0 <Align_Set>

  GainA  = 0;//0x20;
 80146ac:	4b16      	ldr	r3, [pc, #88]	; (8014708 <Zero_Align+0x8c>)
 80146ae:	2200      	movs	r2, #0
 80146b0:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 80146b2:	4b16      	ldr	r3, [pc, #88]	; (801470c <Zero_Align+0x90>)
 80146b4:	2201      	movs	r2, #1
 80146b6:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80146b8:	4b15      	ldr	r3, [pc, #84]	; (8014710 <Zero_Align+0x94>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 80146be:	2101      	movs	r1, #1
 80146c0:	2007      	movs	r0, #7
 80146c2:	f7f7 fe5d 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 80146c6:	2064      	movs	r0, #100	; 0x64
 80146c8:	f000 f868 	bl	801479c <AiPosi>
  HAL_Delay(1000);
 80146cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146d0:	f003 fd0c 	bl	80180ec <HAL_Delay>
  Align_Set();
 80146d4:	f7ff ff64 	bl	80145a0 <Align_Set>

  GainA  = 0;//0x20;
 80146d8:	4b0b      	ldr	r3, [pc, #44]	; (8014708 <Zero_Align+0x8c>)
 80146da:	2200      	movs	r2, #0
 80146dc:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 80146de:	4b0b      	ldr	r3, [pc, #44]	; (801470c <Zero_Align+0x90>)
 80146e0:	2200      	movs	r2, #0
 80146e2:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80146e4:	4b0a      	ldr	r3, [pc, #40]	; (8014710 <Zero_Align+0x94>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 80146ea:	2100      	movs	r1, #0
 80146ec:	2007      	movs	r0, #7
 80146ee:	f7f7 fe47 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 80146f2:	2064      	movs	r0, #100	; 0x64
 80146f4:	f000 f852 	bl	801479c <AiPosi>
  HAL_Delay(1000);
 80146f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146fc:	f003 fcf6 	bl	80180ec <HAL_Delay>
  Align_Set();
 8014700:	f7ff ff4e 	bl	80145a0 <Align_Set>

}
 8014704:	bf00      	nop
 8014706:	bd80      	pop	{r7, pc}
 8014708:	20002690 	.word	0x20002690
 801470c:	20002692 	.word	0x20002692
 8014710:	2000268c 	.word	0x2000268c

08014714 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 801471a:	2300      	movs	r3, #0
 801471c:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 801471e:	2100      	movs	r1, #0
 8014720:	2004      	movs	r0, #4
 8014722:	f7f7 fe2d 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014726:	f240 21cf 	movw	r1, #719	; 0x2cf
 801472a:	2005      	movs	r0, #5
 801472c:	f7f7 fe28 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014734:	2006      	movs	r0, #6
 8014736:	f7f7 fe23 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 801473a:	2101      	movs	r1, #1
 801473c:	2004      	movs	r0, #4
 801473e:	f7f7 fe1f 	bl	800c380 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014742:	bf00      	nop
 8014744:	2000      	movs	r0, #0
 8014746:	f7f7 fe05 	bl	800c354 <BIOS_Info>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d1f9      	bne.n	8014744 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014750:	2302      	movs	r3, #2
 8014752:	607b      	str	r3, [r7, #4]
 8014754:	e00a      	b.n	801476c <Analys+0x58>
    SumA += Sampl[i];
 8014756:	4a0e      	ldr	r2, [pc, #56]	; (8014790 <Analys+0x7c>)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801475e:	461a      	mov	r2, r3
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	4413      	add	r3, r2
 8014764:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	3301      	adds	r3, #1
 801476a:	607b      	str	r3, [r7, #4]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014772:	4293      	cmp	r3, r2
 8014774:	d9ef      	bls.n	8014756 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	4a06      	ldr	r2, [pc, #24]	; (8014794 <Analys+0x80>)
 801477a:	fba2 2303 	umull	r2, r3, r2, r3
 801477e:	0a1b      	lsrs	r3, r3, #8
 8014780:	b21a      	sxth	r2, r3
 8014782:	4b05      	ldr	r3, [pc, #20]	; (8014798 <Analys+0x84>)
 8014784:	801a      	strh	r2, [r3, #0]
}
 8014786:	bf00      	nop
 8014788:	3708      	adds	r7, #8
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}
 801478e:	bf00      	nop
 8014790:	200026a4 	.word	0x200026a4
 8014794:	10624dd3 	.word	0x10624dd3
 8014798:	20002672 	.word	0x20002672

0801479c <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	4603      	mov	r3, r0
 80147a4:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 80147a6:	79fb      	ldrb	r3, [r7, #7]
 80147a8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80147ac:	4b28      	ldr	r3, [pc, #160]	; (8014850 <AiPosi+0xb4>)
 80147ae:	6819      	ldr	r1, [r3, #0]
 80147b0:	4b28      	ldr	r3, [pc, #160]	; (8014854 <AiPosi+0xb8>)
 80147b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147b6:	4618      	mov	r0, r3
 80147b8:	4b27      	ldr	r3, [pc, #156]	; (8014858 <AiPosi+0xbc>)
 80147ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	bf14      	ite	ne
 80147c2:	2301      	movne	r3, #1
 80147c4:	2300      	moveq	r3, #0
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	4403      	add	r3, r0
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	440b      	add	r3, r1
 80147ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147d2:	0fd9      	lsrs	r1, r3, #31
 80147d4:	440b      	add	r3, r1
 80147d6:	105b      	asrs	r3, r3, #1
 80147d8:	b21b      	sxth	r3, r3
 80147da:	fb02 f303 	mul.w	r3, r2, r3
 80147de:	4a1f      	ldr	r2, [pc, #124]	; (801485c <AiPosi+0xc0>)
 80147e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147e4:	4611      	mov	r1, r2
 80147e6:	4a1e      	ldr	r2, [pc, #120]	; (8014860 <AiPosi+0xc4>)
 80147e8:	5c52      	ldrb	r2, [r2, r1]
 80147ea:	fb02 f303 	mul.w	r3, r2, r3
 80147ee:	4a1d      	ldr	r2, [pc, #116]	; (8014864 <AiPosi+0xc8>)
 80147f0:	6811      	ldr	r1, [r2, #0]
 80147f2:	4a18      	ldr	r2, [pc, #96]	; (8014854 <AiPosi+0xb8>)
 80147f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147f8:	4610      	mov	r0, r2
 80147fa:	4a17      	ldr	r2, [pc, #92]	; (8014858 <AiPosi+0xbc>)
 80147fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014800:	2a00      	cmp	r2, #0
 8014802:	bf14      	ite	ne
 8014804:	2201      	movne	r2, #1
 8014806:	2200      	moveq	r2, #0
 8014808:	b2d2      	uxtb	r2, r2
 801480a:	4402      	add	r2, r0
 801480c:	0052      	lsls	r2, r2, #1
 801480e:	440a      	add	r2, r1
 8014810:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014814:	fb93 f3f2 	sdiv	r3, r3, r2
 8014818:	4a0d      	ldr	r2, [pc, #52]	; (8014850 <AiPosi+0xb4>)
 801481a:	6811      	ldr	r1, [r2, #0]
 801481c:	4a0d      	ldr	r2, [pc, #52]	; (8014854 <AiPosi+0xb8>)
 801481e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014822:	4610      	mov	r0, r2
 8014824:	4a0c      	ldr	r2, [pc, #48]	; (8014858 <AiPosi+0xbc>)
 8014826:	f9b2 2000 	ldrsh.w	r2, [r2]
 801482a:	2a00      	cmp	r2, #0
 801482c:	bf14      	ite	ne
 801482e:	2201      	movne	r2, #1
 8014830:	2200      	moveq	r2, #0
 8014832:	b2d2      	uxtb	r2, r2
 8014834:	4402      	add	r2, r0
 8014836:	0052      	lsls	r2, r2, #1
 8014838:	440a      	add	r2, r1
 801483a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801483e:	4413      	add	r3, r2
 8014840:	4619      	mov	r1, r3
 8014842:	2008      	movs	r0, #8
 8014844:	f7f7 fd9c 	bl	800c380 <BIOS_Ctrl>
}
 8014848:	bf00      	nop
 801484a:	3708      	adds	r7, #8
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	20000554 	.word	0x20000554
 8014854:	20002692 	.word	0x20002692
 8014858:	2000268c 	.word	0x2000268c
 801485c:	20002690 	.word	0x20002690
 8014860:	2000053c 	.word	0x2000053c
 8014864:	20000558 	.word	0x20000558

08014868 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b094      	sub	sp, #80	; 0x50
 801486c:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801486e:	4bb0      	ldr	r3, [pc, #704]	; (8014b30 <WaveProcess+0x2c8>)
 8014870:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8014872:	4bb0      	ldr	r3, [pc, #704]	; (8014b34 <WaveProcess+0x2cc>)
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	4bb0      	ldr	r3, [pc, #704]	; (8014b38 <WaveProcess+0x2d0>)
 8014878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801487c:	4619      	mov	r1, r3
 801487e:	4baf      	ldr	r3, [pc, #700]	; (8014b3c <WaveProcess+0x2d4>)
 8014880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014884:	2b00      	cmp	r3, #0
 8014886:	bf14      	ite	ne
 8014888:	2301      	movne	r3, #1
 801488a:	2300      	moveq	r3, #0
 801488c:	b2db      	uxtb	r3, r3
 801488e:	440b      	add	r3, r1
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	4413      	add	r3, r2
 8014894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	4aa9      	ldr	r2, [pc, #676]	; (8014b40 <WaveProcess+0x2d8>)
 801489c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80148a0:	4611      	mov	r1, r2
 80148a2:	4aa8      	ldr	r2, [pc, #672]	; (8014b44 <WaveProcess+0x2dc>)
 80148a4:	5c52      	ldrb	r2, [r2, r1]
 80148a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80148aa:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80148b2:	2300      	movs	r3, #0
 80148b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80148b6:	2300      	movs	r3, #0
 80148b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80148ba:	2300      	movs	r3, #0
 80148bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80148be:	2302      	movs	r3, #2
 80148c0:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80148c2:	2300      	movs	r3, #0
 80148c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80148c6:	2300      	movs	r3, #0
 80148c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80148ca:	2300      	movs	r3, #0
 80148cc:	863b      	strh	r3, [r7, #48]	; 0x30
 80148ce:	2300      	movs	r3, #0
 80148d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80148d2:	2300      	movs	r3, #0
 80148d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80148d6:	f04f 33ff 	mov.w	r3, #4294967295
 80148da:	627b      	str	r3, [r7, #36]	; 0x24
 80148dc:	2300      	movs	r3, #0
 80148de:	623b      	str	r3, [r7, #32]
 80148e0:	2300      	movs	r3, #0
 80148e2:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80148e4:	4b98      	ldr	r3, [pc, #608]	; (8014b48 <WaveProcess+0x2e0>)
 80148e6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80148ea:	461a      	mov	r2, r3
 80148ec:	4b97      	ldr	r3, [pc, #604]	; (8014b4c <WaveProcess+0x2e4>)
 80148ee:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	3b01      	subs	r3, #1
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 80148fa:	2397      	movs	r3, #151	; 0x97
 80148fc:	81fb      	strh	r3, [r7, #14]
 80148fe:	4b92      	ldr	r3, [pc, #584]	; (8014b48 <WaveProcess+0x2e0>)
 8014900:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014904:	f003 0301 	and.w	r3, r3, #1
 8014908:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 801490a:	4b8f      	ldr	r3, [pc, #572]	; (8014b48 <WaveProcess+0x2e0>)
 801490c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014910:	461a      	mov	r2, r3
 8014912:	4b8f      	ldr	r3, [pc, #572]	; (8014b50 <WaveProcess+0x2e8>)
 8014914:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014918:	817b      	strh	r3, [r7, #10]
 801491a:	4b8b      	ldr	r3, [pc, #556]	; (8014b48 <WaveProcess+0x2e0>)
 801491c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8014920:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 8014922:	4b89      	ldr	r3, [pc, #548]	; (8014b48 <WaveProcess+0x2e0>)
 8014924:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8014928:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 801492a:	4b8a      	ldr	r3, [pc, #552]	; (8014b54 <WaveProcess+0x2ec>)
 801492c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014930:	2b01      	cmp	r3, #1
 8014932:	d13c      	bne.n	80149ae <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8014934:	4b88      	ldr	r3, [pc, #544]	; (8014b58 <WaveProcess+0x2f0>)
 8014936:	f9b3 3000 	ldrsh.w	r3, [r3]
 801493a:	461a      	mov	r2, r3
 801493c:	4b87      	ldr	r3, [pc, #540]	; (8014b5c <WaveProcess+0x2f4>)
 801493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014942:	4413      	add	r3, r2
 8014944:	4a80      	ldr	r2, [pc, #512]	; (8014b48 <WaveProcess+0x2e0>)
 8014946:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801494a:	1a9b      	subs	r3, r3, r2
 801494c:	3b64      	subs	r3, #100	; 0x64
 801494e:	031a      	lsls	r2, r3, #12
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	fb92 f3f3 	sdiv	r3, r2, r3
 8014956:	b29b      	uxth	r3, r3
 8014958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801495c:	b29b      	uxth	r3, r3
 801495e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8014962:	4b7d      	ldr	r3, [pc, #500]	; (8014b58 <WaveProcess+0x2f0>)
 8014964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014968:	461a      	mov	r2, r3
 801496a:	4b7c      	ldr	r3, [pc, #496]	; (8014b5c <WaveProcess+0x2f4>)
 801496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014970:	4413      	add	r3, r2
 8014972:	4a75      	ldr	r2, [pc, #468]	; (8014b48 <WaveProcess+0x2e0>)
 8014974:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8014978:	4413      	add	r3, r2
 801497a:	3b64      	subs	r3, #100	; 0x64
 801497c:	031a      	lsls	r2, r3, #12
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	fb92 f3f3 	sdiv	r3, r2, r3
 8014984:	b29b      	uxth	r3, r3
 8014986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801498a:	b29b      	uxth	r3, r3
 801498c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 8014990:	4b6d      	ldr	r3, [pc, #436]	; (8014b48 <WaveProcess+0x2e0>)
 8014992:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014996:	3b64      	subs	r3, #100	; 0x64
 8014998:	031a      	lsls	r2, r3, #12
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	fb92 f3f3 	sdiv	r3, r2, r3
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80149ac:	e03b      	b.n	8014a26 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80149ae:	4b66      	ldr	r3, [pc, #408]	; (8014b48 <WaveProcess+0x2e0>)
 80149b0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80149b4:	461a      	mov	r2, r3
 80149b6:	4b64      	ldr	r3, [pc, #400]	; (8014b48 <WaveProcess+0x2e0>)
 80149b8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149bc:	4413      	add	r3, r2
 80149be:	4a62      	ldr	r2, [pc, #392]	; (8014b48 <WaveProcess+0x2e0>)
 80149c0:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149c4:	1a9b      	subs	r3, r3, r2
 80149c6:	3b64      	subs	r3, #100	; 0x64
 80149c8:	031a      	lsls	r2, r3, #12
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80149dc:	4b5a      	ldr	r3, [pc, #360]	; (8014b48 <WaveProcess+0x2e0>)
 80149de:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80149e2:	461a      	mov	r2, r3
 80149e4:	4b58      	ldr	r3, [pc, #352]	; (8014b48 <WaveProcess+0x2e0>)
 80149e6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149ea:	4413      	add	r3, r2
 80149ec:	4a56      	ldr	r2, [pc, #344]	; (8014b48 <WaveProcess+0x2e0>)
 80149ee:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149f2:	4413      	add	r3, r2
 80149f4:	3b64      	subs	r3, #100	; 0x64
 80149f6:	031a      	lsls	r2, r3, #12
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 8014a0a:	4b4f      	ldr	r3, [pc, #316]	; (8014b48 <WaveProcess+0x2e0>)
 8014a0c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014a10:	3b64      	subs	r3, #100	; 0x64
 8014a12:	031a      	lsls	r2, r3, #12
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8014a26:	4b48      	ldr	r3, [pc, #288]	; (8014b48 <WaveProcess+0x2e0>)
 8014a28:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a2c:	2b05      	cmp	r3, #5
 8014a2e:	d004      	beq.n	8014a3a <WaveProcess+0x1d2>
 8014a30:	4b45      	ldr	r3, [pc, #276]	; (8014b48 <WaveProcess+0x2e0>)
 8014a32:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a36:	2b01      	cmp	r3, #1
 8014a38:	d10b      	bne.n	8014a52 <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8014a3a:	4b43      	ldr	r3, [pc, #268]	; (8014b48 <WaveProcess+0x2e0>)
 8014a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014a40:	2b0b      	cmp	r3, #11
 8014a42:	dd06      	ble.n	8014a52 <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8014a44:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8014a48:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8014a4a:	4b3f      	ldr	r3, [pc, #252]	; (8014b48 <WaveProcess+0x2e0>)
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8014a52:	2300      	movs	r3, #0
 8014a54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014a58:	e0ad      	b.n	8014bb6 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8014a5a:	4b41      	ldr	r3, [pc, #260]	; (8014b60 <WaveProcess+0x2f8>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014a64:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014a68:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8014a6c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014a70:	1acb      	subs	r3, r1, r3
 8014a72:	429a      	cmp	r2, r3
 8014a74:	f280 80a7 	bge.w	8014bc6 <WaveProcess+0x35e>
    ViA = Ain[i];
 8014a78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a7c:	005b      	lsls	r3, r3, #1
 8014a7e:	697a      	ldr	r2, [r7, #20]
 8014a80:	4413      	add	r3, r2
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 8014a86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	da02      	bge.n	8014a96 <WaveProcess+0x22e>
 8014a90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a94:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 8014a96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	dd02      	ble.n	8014aa6 <WaveProcess+0x23e>
 8014aa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 8014aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014aaa:	6a3a      	ldr	r2, [r7, #32]
 8014aac:	4413      	add	r3, r2
 8014aae:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8014ab0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014ab4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8014ab8:	1ad3      	subs	r3, r2, r3
 8014aba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014abe:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8014ac2:	1a8a      	subs	r2, r1, r2
 8014ac4:	fb02 f303 	mul.w	r3, r2, r3
 8014ac8:	69fa      	ldr	r2, [r7, #28]
 8014aca:	4413      	add	r3, r2
 8014acc:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8014ace:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	d102      	bne.n	8014adc <WaveProcess+0x274>
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014ada:	e005      	b.n	8014ae8 <WaveProcess+0x280>
    else         DtA++;
 8014adc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	b29b      	uxth	r3, r3
 8014ae6:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8014ae8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014aec:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8014af0:	429a      	cmp	r2, r3
 8014af2:	dd37      	ble.n	8014b64 <WaveProcess+0x2fc>
      if(StA == 0){
 8014af4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d115      	bne.n	8014b28 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8014afc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014afe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b00:	4413      	add	r3, r2
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014b06:	2300      	movs	r3, #0
 8014b08:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014b0a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	3301      	adds	r3, #1
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8014b16:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8014b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	da02      	bge.n	8014b28 <WaveProcess+0x2c0>
 8014b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014b26:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8014b28:	2301      	movs	r3, #1
 8014b2a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8014b2c:	e03c      	b.n	8014ba8 <WaveProcess+0x340>
 8014b2e:	bf00      	nop
 8014b30:	200026a8 	.word	0x200026a8
 8014b34:	20000558 	.word	0x20000558
 8014b38:	20002692 	.word	0x20002692
 8014b3c:	2000268c 	.word	0x2000268c
 8014b40:	20002690 	.word	0x20002690
 8014b44:	2000053c 	.word	0x2000053c
 8014b48:	20000274 	.word	0x20000274
 8014b4c:	0800230c 	.word	0x0800230c
 8014b50:	08002314 	.word	0x08002314
 8014b54:	20002656 	.word	0x20002656
 8014b58:	20002698 	.word	0x20002698
 8014b5c:	20002694 	.word	0x20002694
 8014b60:	2000673c 	.word	0x2000673c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8014b64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014b68:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	da1b      	bge.n	8014ba8 <WaveProcess+0x340>
      if(StA == 1){
 8014b70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d115      	bne.n	8014ba4 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8014b78:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014b7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b7c:	4413      	add	r3, r2
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	873b      	strh	r3, [r7, #56]	; 0x38
 8014b82:	2300      	movs	r3, #0
 8014b84:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014b86:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 8014b92:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8014b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	da02      	bge.n	8014ba4 <WaveProcess+0x33c>
 8014b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8014ba8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	3301      	adds	r3, #1
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014bb6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014bba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	f6ff af4b 	blt.w	8014a5a <WaveProcess+0x1f2>
 8014bc4:	e000      	b.n	8014bc8 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014bc6:	bf00      	nop
    }
  }
  if(n == 0)
 8014bc8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d14f      	bne.n	8014c70 <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8014bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd2:	b21a      	sxth	r2, r3
 8014bd4:	4b9a      	ldr	r3, [pc, #616]	; (8014e40 <WaveProcess+0x5d8>)
 8014bd6:	801a      	strh	r2, [r3, #0]
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	b21a      	sxth	r2, r3
 8014bdc:	4b99      	ldr	r3, [pc, #612]	; (8014e44 <WaveProcess+0x5dc>)
 8014bde:	801a      	strh	r2, [r3, #0]
 8014be0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014be4:	6a3a      	ldr	r2, [r7, #32]
 8014be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bea:	b21a      	sxth	r2, r3
 8014bec:	4b96      	ldr	r3, [pc, #600]	; (8014e48 <WaveProcess+0x5e0>)
 8014bee:	801a      	strh	r2, [r3, #0]
 8014bf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	69fa      	ldr	r2, [r7, #28]
 8014bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bfc:	4a93      	ldr	r2, [pc, #588]	; (8014e4c <WaveProcess+0x5e4>)
 8014bfe:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8014c00:	4b92      	ldr	r3, [pc, #584]	; (8014e4c <WaveProcess+0x5e4>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7fc fbef 	bl	80113e8 <Sqrt32>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	4b90      	ldr	r3, [pc, #576]	; (8014e50 <WaveProcess+0x5e8>)
 8014c10:	601a      	str	r2, [r3, #0]
 8014c12:	4b8b      	ldr	r3, [pc, #556]	; (8014e40 <WaveProcess+0x5d8>)
 8014c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c18:	461a      	mov	r2, r3
 8014c1a:	4b8a      	ldr	r3, [pc, #552]	; (8014e44 <WaveProcess+0x5dc>)
 8014c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c20:	4413      	add	r3, r2
 8014c22:	0fda      	lsrs	r2, r3, #31
 8014c24:	4413      	add	r3, r2
 8014c26:	105b      	asrs	r3, r3, #1
 8014c28:	b21a      	sxth	r2, r3
 8014c2a:	4b8a      	ldr	r3, [pc, #552]	; (8014e54 <WaveProcess+0x5ec>)
 8014c2c:	801a      	strh	r2, [r3, #0]
 8014c2e:	4b84      	ldr	r3, [pc, #528]	; (8014e40 <WaveProcess+0x5d8>)
 8014c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c34:	461a      	mov	r2, r3
 8014c36:	4b83      	ldr	r3, [pc, #524]	; (8014e44 <WaveProcess+0x5dc>)
 8014c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c3c:	1ad3      	subs	r3, r2, r3
 8014c3e:	4a86      	ldr	r2, [pc, #536]	; (8014e58 <WaveProcess+0x5f0>)
 8014c40:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8014c42:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8014c46:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c4e:	4a83      	ldr	r2, [pc, #524]	; (8014e5c <WaveProcess+0x5f4>)
 8014c50:	6013      	str	r3, [r2, #0]
 8014c52:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014c56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c5e:	4a80      	ldr	r2, [pc, #512]	; (8014e60 <WaveProcess+0x5f8>)
 8014c60:	6013      	str	r3, [r2, #0]
 8014c62:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8014c66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c6a:	4413      	add	r3, r2
 8014c6c:	4a7d      	ldr	r2, [pc, #500]	; (8014e64 <WaveProcess+0x5fc>)
 8014c6e:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8014c70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c74:	2b05      	cmp	r3, #5
 8014c76:	d003      	beq.n	8014c80 <WaveProcess+0x418>
 8014c78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d12f      	bne.n	8014ce0 <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8014c80:	4b79      	ldr	r3, [pc, #484]	; (8014e68 <WaveProcess+0x600>)
 8014c82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c86:	2b0b      	cmp	r3, #11
 8014c88:	dd03      	ble.n	8014c92 <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014c90:	e033      	b.n	8014cfa <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014c92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d101      	bne.n	8014c9e <WaveProcess+0x436>
 8014c9a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c9c:	e000      	b.n	8014ca0 <WaveProcess+0x438>
 8014c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014ca0:	89fa      	ldrh	r2, [r7, #14]
 8014ca2:	1a9b      	subs	r3, r3, r2
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014caa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014cae:	2b01      	cmp	r3, #1
 8014cb0:	d123      	bne.n	8014cfa <WaveProcess+0x492>
 8014cb2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	da1f      	bge.n	8014cfa <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014cba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	da00      	bge.n	8014cc4 <WaveProcess+0x45c>
 8014cc2:	3303      	adds	r3, #3
 8014cc4:	109b      	asrs	r3, r3, #2
 8014cc6:	b21b      	sxth	r3, r3
 8014cc8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	dd03      	ble.n	8014cd8 <WaveProcess+0x470>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014cd6:	e010      	b.n	8014cfa <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8014cd8:	2300      	movs	r3, #0
 8014cda:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014cde:	e00c      	b.n	8014cfa <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d101      	bne.n	8014cec <WaveProcess+0x484>
 8014ce8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014cea:	e000      	b.n	8014cee <WaveProcess+0x486>
 8014cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014cee:	89fa      	ldrh	r2, [r7, #14]
 8014cf0:	1a9b      	subs	r3, r3, r2
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014cf8:	e000      	b.n	8014cfc <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8014cfa:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8014cfc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d10c      	bne.n	8014d1e <WaveProcess+0x4b6>
 8014d04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d08:	2b04      	cmp	r3, #4
 8014d0a:	d108      	bne.n	8014d1e <WaveProcess+0x4b6>
 8014d0c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	dd04      	ble.n	8014d1e <WaveProcess+0x4b6>
    Status = STOP;
 8014d14:	4b55      	ldr	r3, [pc, #340]	; (8014e6c <WaveProcess+0x604>)
 8014d16:	2201      	movs	r2, #1
 8014d18:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8014d1a:	f7fe ff21 	bl	8013b60 <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014d1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d22:	2b02      	cmp	r3, #2
 8014d24:	d115      	bne.n	8014d52 <WaveProcess+0x4ea>
 8014d26:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	da11      	bge.n	8014d52 <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014d2e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	da00      	bge.n	8014d38 <WaveProcess+0x4d0>
 8014d36:	3303      	adds	r3, #3
 8014d38:	109b      	asrs	r3, r3, #2
 8014d3a:	b21b      	sxth	r3, r3
 8014d3c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014d40:	429a      	cmp	r2, r3
 8014d42:	dd03      	ble.n	8014d4c <WaveProcess+0x4e4>
 8014d44:	2301      	movs	r3, #1
 8014d46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014d4a:	e002      	b.n	8014d52 <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8014d52:	4a47      	ldr	r2, [pc, #284]	; (8014e70 <WaveProcess+0x608>)
 8014d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014d58:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8014d5a:	4b45      	ldr	r3, [pc, #276]	; (8014e70 <WaveProcess+0x608>)
 8014d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	dd02      	ble.n	8014d6a <WaveProcess+0x502>
 8014d64:	4b43      	ldr	r3, [pc, #268]	; (8014e74 <WaveProcess+0x60c>)
 8014d66:	2201      	movs	r2, #1
 8014d68:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8014d6a:	4b43      	ldr	r3, [pc, #268]	; (8014e78 <WaveProcess+0x610>)
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d016      	beq.n	8014da0 <WaveProcess+0x538>
 8014d72:	4b3e      	ldr	r3, [pc, #248]	; (8014e6c <WaveProcess+0x604>)
 8014d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	d111      	bne.n	8014da0 <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8014d7c:	4b3a      	ldr	r3, [pc, #232]	; (8014e68 <WaveProcess+0x600>)
 8014d7e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8014d82:	4b3e      	ldr	r3, [pc, #248]	; (8014e7c <WaveProcess+0x614>)
 8014d84:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 8014d86:	4b38      	ldr	r3, [pc, #224]	; (8014e68 <WaveProcess+0x600>)
 8014d88:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8014d8c:	4b3c      	ldr	r3, [pc, #240]	; (8014e80 <WaveProcess+0x618>)
 8014d8e:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 8014d90:	4b35      	ldr	r3, [pc, #212]	; (8014e68 <WaveProcess+0x600>)
 8014d92:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8014d96:	4b3b      	ldr	r3, [pc, #236]	; (8014e84 <WaveProcess+0x61c>)
 8014d98:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8014d9a:	4b37      	ldr	r3, [pc, #220]	; (8014e78 <WaveProcess+0x610>)
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8014da0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	f340 8104 	ble.w	8014fb2 <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8014daa:	4b2f      	ldr	r3, [pc, #188]	; (8014e68 <WaveProcess+0x600>)
 8014dac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014db0:	b29a      	uxth	r2, r3
 8014db2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014db6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8014dba:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014dbe:	fb01 f303 	mul.w	r3, r1, r3
 8014dc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	da01      	bge.n	8014dce <WaveProcess+0x566>
 8014dca:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014dce:	129b      	asrs	r3, r3, #10
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	4413      	add	r3, r2
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014dda:	4413      	add	r3, r2
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014de2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014de6:	005b      	lsls	r3, r3, #1
 8014de8:	697a      	ldr	r2, [r7, #20]
 8014dea:	4413      	add	r3, r2
 8014dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014df0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014df4:	693a      	ldr	r2, [r7, #16]
 8014df6:	fb02 f303 	mul.w	r3, r2, r3
 8014dfa:	131b      	asrs	r3, r3, #12
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	3364      	adds	r3, #100	; 0x64
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8014e06:	2300      	movs	r3, #0
 8014e08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014e0c:	e0c7      	b.n	8014f9e <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014e0e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	697a      	ldr	r2, [r7, #20]
 8014e16:	4413      	add	r3, r2
 8014e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e1c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e20:	693a      	ldr	r2, [r7, #16]
 8014e22:	fb02 f303 	mul.w	r3, r2, r3
 8014e26:	131b      	asrs	r3, r3, #12
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	3364      	adds	r3, #100	; 0x64
 8014e2c:	b29b      	uxth	r3, r3
 8014e2e:	80bb      	strh	r3, [r7, #4]
      k++;
 8014e30:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	3301      	adds	r3, #1
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8014e3e:	e09e      	b.n	8014f7e <WaveProcess+0x716>
 8014e40:	2000266c 	.word	0x2000266c
 8014e44:	2000266e 	.word	0x2000266e
 8014e48:	20002672 	.word	0x20002672
 8014e4c:	20002688 	.word	0x20002688
 8014e50:	20002674 	.word	0x20002674
 8014e54:	20002670 	.word	0x20002670
 8014e58:	20002678 	.word	0x20002678
 8014e5c:	20002680 	.word	0x20002680
 8014e60:	2000267c 	.word	0x2000267c
 8014e64:	20002684 	.word	0x20002684
 8014e68:	20000274 	.word	0x20000274
 8014e6c:	20002656 	.word	0x20002656
 8014e70:	2000269a 	.word	0x2000269a
 8014e74:	200026a3 	.word	0x200026a3
 8014e78:	20000538 	.word	0x20000538
 8014e7c:	20002694 	.word	0x20002694
 8014e80:	20002696 	.word	0x20002696
 8014e84:	20002698 	.word	0x20002698
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8014e88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014e8c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014e90:	1ad3      	subs	r3, r2, r3
 8014e92:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8014e96:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014e9a:	fb02 f303 	mul.w	r3, r2, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	da01      	bge.n	8014ea6 <WaveProcess+0x63e>
 8014ea2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014ea6:	129b      	asrs	r3, r3, #10
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014eae:	4413      	add	r3, r2
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8014eb4:	4b63      	ldr	r3, [pc, #396]	; (8015044 <WaveProcess+0x7dc>)
 8014eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	d132      	bne.n	8014f24 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8014ebe:	4b62      	ldr	r3, [pc, #392]	; (8015048 <WaveProcess+0x7e0>)
 8014ec0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	4b61      	ldr	r3, [pc, #388]	; (801504c <WaveProcess+0x7e4>)
 8014ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	1ad3      	subs	r3, r2, r3
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ed4:	4413      	add	r3, r2
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	b21a      	sxth	r2, r3
 8014eda:	4b5d      	ldr	r3, [pc, #372]	; (8015050 <WaveProcess+0x7e8>)
 8014edc:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8014ede:	4b5c      	ldr	r3, [pc, #368]	; (8015050 <WaveProcess+0x7e8>)
 8014ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ee4:	2bc7      	cmp	r3, #199	; 0xc7
 8014ee6:	dd02      	ble.n	8014eee <WaveProcess+0x686>
 8014ee8:	4b59      	ldr	r3, [pc, #356]	; (8015050 <WaveProcess+0x7e8>)
 8014eea:	22ca      	movs	r2, #202	; 0xca
 8014eec:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8014eee:	4b58      	ldr	r3, [pc, #352]	; (8015050 <WaveProcess+0x7e8>)
 8014ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ef4:	2b02      	cmp	r3, #2
 8014ef6:	dc02      	bgt.n	8014efe <WaveProcess+0x696>
 8014ef8:	4b55      	ldr	r3, [pc, #340]	; (8015050 <WaveProcess+0x7e8>)
 8014efa:	2201      	movs	r2, #1
 8014efc:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8014efe:	4b54      	ldr	r3, [pc, #336]	; (8015050 <WaveProcess+0x7e8>)
 8014f00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f04:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f08:	b2d1      	uxtb	r1, r2
 8014f0a:	4a52      	ldr	r2, [pc, #328]	; (8015054 <WaveProcess+0x7ec>)
 8014f0c:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014f0e:	4b4e      	ldr	r3, [pc, #312]	; (8015048 <WaveProcess+0x7e0>)
 8014f10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f14:	b2da      	uxtb	r2, r3
 8014f16:	79f9      	ldrb	r1, [r7, #7]
 8014f18:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f000 f89d 	bl	801505c <Build_Ext>
 8014f22:	e01b      	b.n	8014f5c <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8014f24:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f28:	2bc7      	cmp	r3, #199	; 0xc7
 8014f2a:	dd01      	ble.n	8014f30 <WaveProcess+0x6c8>
 8014f2c:	23ca      	movs	r3, #202	; 0xca
 8014f2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8014f30:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f34:	2b02      	cmp	r3, #2
 8014f36:	dc01      	bgt.n	8014f3c <WaveProcess+0x6d4>
 8014f38:	2302      	movs	r3, #2
 8014f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8014f3c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f40:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f42:	b2d1      	uxtb	r1, r2
 8014f44:	4a43      	ldr	r2, [pc, #268]	; (8015054 <WaveProcess+0x7ec>)
 8014f46:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014f48:	4b3f      	ldr	r3, [pc, #252]	; (8015048 <WaveProcess+0x7e0>)
 8014f4a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f4e:	b2da      	uxtb	r2, r3
 8014f50:	79f9      	ldrb	r1, [r7, #7]
 8014f52:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f56:	4618      	mov	r0, r3
 8014f58:	f000 f880 	bl	801505c <Build_Ext>
        }

        if(n++ >= 300) break;
 8014f5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	3201      	adds	r2, #1
 8014f64:	b292      	uxth	r2, r2
 8014f66:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014f6a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f6e:	da0b      	bge.n	8014f88 <WaveProcess+0x720>
        p -= Ks;
 8014f70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014f74:	897b      	ldrh	r3, [r7, #10]
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8014f7e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	dc80      	bgt.n	8014e88 <WaveProcess+0x620>
 8014f86:	e000      	b.n	8014f8a <WaveProcess+0x722>
        if(n++ >= 300) break;
 8014f88:	bf00      	nop
      }
      p += 1024;
 8014f8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8014f98:	88bb      	ldrh	r3, [r7, #4]
 8014f9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8014f9e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fa2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014fa6:	f6ff af32 	blt.w	8014e0e <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8014faa:	4b2b      	ldr	r3, [pc, #172]	; (8015058 <WaveProcess+0x7f0>)
 8014fac:	2200      	movs	r2, #0
 8014fae:	701a      	strb	r2, [r3, #0]
 8014fb0:	e037      	b.n	8015022 <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 8014fb2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	da33      	bge.n	8015022 <WaveProcess+0x7ba>
 8014fba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014fbe:	2b03      	cmp	r3, #3
 8014fc0:	d103      	bne.n	8014fca <WaveProcess+0x762>
 8014fc2:	4b25      	ldr	r3, [pc, #148]	; (8015058 <WaveProcess+0x7f0>)
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d02b      	beq.n	8015022 <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014fd0:	e022      	b.n	8015018 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8014fd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fd6:	4a1f      	ldr	r2, [pc, #124]	; (8015054 <WaveProcess+0x7ec>)
 8014fd8:	21ff      	movs	r1, #255	; 0xff
 8014fda:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8014fdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fe0:	b29a      	uxth	r2, r3
 8014fe2:	3201      	adds	r2, #1
 8014fe4:	b292      	uxth	r2, r2
 8014fe6:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014fea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014fee:	da0b      	bge.n	8015008 <WaveProcess+0x7a0>
        p -= Ks;
 8014ff0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014ff4:	897b      	ldrh	r3, [r7, #10]
 8014ff6:	1ad3      	subs	r3, r2, r3
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8014ffe:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8015002:	2b00      	cmp	r3, #0
 8015004:	dce5      	bgt.n	8014fd2 <WaveProcess+0x76a>
 8015006:	e000      	b.n	801500a <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015008:	bf00      	nop
      }
      p += 1024;
 801500a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801500e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015012:	b29b      	uxth	r3, r3
 8015014:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015018:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801501c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015020:	dbed      	blt.n	8014ffe <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 8015022:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015026:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801502a:	429a      	cmp	r2, r3
 801502c:	d106      	bne.n	801503c <WaveProcess+0x7d4>
 801502e:	4b05      	ldr	r3, [pc, #20]	; (8015044 <WaveProcess+0x7dc>)
 8015030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015034:	2b01      	cmp	r3, #1
 8015036:	d001      	beq.n	801503c <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015038:	f7f7 fbb8 	bl	800c7ac <ADC_Start>
  }
}
 801503c:	bf00      	nop
 801503e:	3750      	adds	r7, #80	; 0x50
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	20002656 	.word	0x20002656
 8015048:	20000274 	.word	0x20000274
 801504c:	20002694 	.word	0x20002694
 8015050:	200026a0 	.word	0x200026a0
 8015054:	2000091c 	.word	0x2000091c
 8015058:	200026a2 	.word	0x200026a2

0801505c <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 801505c:	b480      	push	{r7}
 801505e:	b085      	sub	sp, #20
 8015060:	af00      	add	r7, sp, #0
 8015062:	4603      	mov	r3, r0
 8015064:	80fb      	strh	r3, [r7, #6]
 8015066:	460b      	mov	r3, r1
 8015068:	717b      	strb	r3, [r7, #5]
 801506a:	4613      	mov	r3, r2
 801506c:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801506e:	4b69      	ldr	r3, [pc, #420]	; (8015214 <Build_Ext+0x1b8>)
 8015070:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 8015072:	4b69      	ldr	r3, [pc, #420]	; (8015218 <Build_Ext+0x1bc>)
 8015074:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015078:	b29a      	uxth	r2, r3
 801507a:	4b68      	ldr	r3, [pc, #416]	; (801521c <Build_Ext+0x1c0>)
 801507c:	785b      	ldrb	r3, [r3, #1]
 801507e:	b29b      	uxth	r3, r3
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	b29a      	uxth	r2, r3
 8015084:	4b64      	ldr	r3, [pc, #400]	; (8015218 <Build_Ext+0x1bc>)
 8015086:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801508a:	b29b      	uxth	r3, r3
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	b29b      	uxth	r3, r3
 8015090:	b21a      	sxth	r2, r3
 8015092:	4b63      	ldr	r3, [pc, #396]	; (8015220 <Build_Ext+0x1c4>)
 8015094:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 8015096:	4b60      	ldr	r3, [pc, #384]	; (8015218 <Build_Ext+0x1bc>)
 8015098:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 801509c:	4b61      	ldr	r3, [pc, #388]	; (8015224 <Build_Ext+0x1c8>)
 801509e:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80150a0:	797b      	ldrb	r3, [r7, #5]
 80150a2:	2b05      	cmp	r3, #5
 80150a4:	f200 809c 	bhi.w	80151e0 <Build_Ext+0x184>
 80150a8:	a201      	add	r2, pc, #4	; (adr r2, 80150b0 <Build_Ext+0x54>)
 80150aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150ae:	bf00      	nop
 80150b0:	080150c9 	.word	0x080150c9
 80150b4:	080150ef 	.word	0x080150ef
 80150b8:	08015115 	.word	0x08015115
 80150bc:	0801513f 	.word	0x0801513f
 80150c0:	0801517f 	.word	0x0801517f
 80150c4:	080151bf 	.word	0x080151bf
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 80150c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150cc:	330a      	adds	r3, #10
 80150ce:	4a53      	ldr	r2, [pc, #332]	; (801521c <Build_Ext+0x1c0>)
 80150d0:	5cd3      	ldrb	r3, [r2, r3]
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	4b51      	ldr	r3, [pc, #324]	; (801521c <Build_Ext+0x1c0>)
 80150d6:	785b      	ldrb	r3, [r3, #1]
 80150d8:	b29b      	uxth	r3, r3
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	b29a      	uxth	r2, r3
 80150de:	4b4e      	ldr	r3, [pc, #312]	; (8015218 <Build_Ext+0x1bc>)
 80150e0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4413      	add	r3, r2
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	81fb      	strh	r3, [r7, #14]
 80150ec:	e078      	b.n	80151e0 <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 80150ee:	4b4a      	ldr	r3, [pc, #296]	; (8015218 <Build_Ext+0x1bc>)
 80150f0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	4b49      	ldr	r3, [pc, #292]	; (801521c <Build_Ext+0x1c0>)
 80150f8:	785b      	ldrb	r3, [r3, #1]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	4413      	add	r3, r2
 80150fe:	b29a      	uxth	r2, r3
 8015100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015104:	330a      	adds	r3, #10
 8015106:	4945      	ldr	r1, [pc, #276]	; (801521c <Build_Ext+0x1c0>)
 8015108:	5ccb      	ldrb	r3, [r1, r3]
 801510a:	b29b      	uxth	r3, r3
 801510c:	1ad3      	subs	r3, r2, r3
 801510e:	b29b      	uxth	r3, r3
 8015110:	81fb      	strh	r3, [r7, #14]
 8015112:	e065      	b.n	80151e0 <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015118:	330a      	adds	r3, #10
 801511a:	4a40      	ldr	r2, [pc, #256]	; (801521c <Build_Ext+0x1c0>)
 801511c:	5cd3      	ldrb	r3, [r2, r3]
 801511e:	b29a      	uxth	r2, r3
 8015120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015124:	4940      	ldr	r1, [pc, #256]	; (8015228 <Build_Ext+0x1cc>)
 8015126:	5ccb      	ldrb	r3, [r1, r3]
 8015128:	b29b      	uxth	r3, r3
 801512a:	4413      	add	r3, r2
 801512c:	b29a      	uxth	r2, r3
 801512e:	4b3c      	ldr	r3, [pc, #240]	; (8015220 <Build_Ext+0x1c4>)
 8015130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015134:	b29b      	uxth	r3, r3
 8015136:	4413      	add	r3, r2
 8015138:	b29b      	uxth	r3, r3
 801513a:	81fb      	strh	r3, [r7, #14]
 801513c:	e050      	b.n	80151e0 <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 801513e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015142:	330a      	adds	r3, #10
 8015144:	4a35      	ldr	r2, [pc, #212]	; (801521c <Build_Ext+0x1c0>)
 8015146:	5cd3      	ldrb	r3, [r2, r3]
 8015148:	b29a      	uxth	r2, r3
 801514a:	4b34      	ldr	r3, [pc, #208]	; (801521c <Build_Ext+0x1c0>)
 801514c:	785b      	ldrb	r3, [r3, #1]
 801514e:	b29b      	uxth	r3, r3
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	b29a      	uxth	r2, r3
 8015154:	4b30      	ldr	r3, [pc, #192]	; (8015218 <Build_Ext+0x1bc>)
 8015156:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801515a:	b299      	uxth	r1, r3
 801515c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015160:	4831      	ldr	r0, [pc, #196]	; (8015228 <Build_Ext+0x1cc>)
 8015162:	5cc3      	ldrb	r3, [r0, r3]
 8015164:	b29b      	uxth	r3, r3
 8015166:	1acb      	subs	r3, r1, r3
 8015168:	b29b      	uxth	r3, r3
 801516a:	4413      	add	r3, r2
 801516c:	b29a      	uxth	r2, r3
 801516e:	4b2a      	ldr	r3, [pc, #168]	; (8015218 <Build_Ext+0x1bc>)
 8015170:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015174:	b29b      	uxth	r3, r3
 8015176:	4413      	add	r3, r2
 8015178:	b29b      	uxth	r3, r3
 801517a:	81fb      	strh	r3, [r7, #14]
 801517c:	e030      	b.n	80151e0 <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 801517e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015182:	4a29      	ldr	r2, [pc, #164]	; (8015228 <Build_Ext+0x1cc>)
 8015184:	5cd3      	ldrb	r3, [r2, r3]
 8015186:	b29a      	uxth	r2, r3
 8015188:	4b23      	ldr	r3, [pc, #140]	; (8015218 <Build_Ext+0x1bc>)
 801518a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801518e:	b29b      	uxth	r3, r3
 8015190:	1ad3      	subs	r3, r2, r3
 8015192:	b29a      	uxth	r2, r3
 8015194:	4b21      	ldr	r3, [pc, #132]	; (801521c <Build_Ext+0x1c0>)
 8015196:	785b      	ldrb	r3, [r3, #1]
 8015198:	b299      	uxth	r1, r3
 801519a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801519e:	330a      	adds	r3, #10
 80151a0:	481e      	ldr	r0, [pc, #120]	; (801521c <Build_Ext+0x1c0>)
 80151a2:	5cc3      	ldrb	r3, [r0, r3]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	1acb      	subs	r3, r1, r3
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	4413      	add	r3, r2
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	4b1a      	ldr	r3, [pc, #104]	; (8015218 <Build_Ext+0x1bc>)
 80151b0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	4413      	add	r3, r2
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	81fb      	strh	r3, [r7, #14]
 80151bc:	e010      	b.n	80151e0 <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 80151be:	793b      	ldrb	r3, [r7, #4]
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	4b15      	ldr	r3, [pc, #84]	; (8015218 <Build_Ext+0x1bc>)
 80151c4:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	4413      	add	r3, r2
 80151cc:	b29a      	uxth	r2, r3
 80151ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151d2:	4915      	ldr	r1, [pc, #84]	; (8015228 <Build_Ext+0x1cc>)
 80151d4:	5ccb      	ldrb	r3, [r1, r3]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	b29b      	uxth	r3, r3
 80151dc:	81fb      	strh	r3, [r7, #14]
 80151de:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 80151e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151e4:	2bc7      	cmp	r3, #199	; 0xc7
 80151e6:	dd01      	ble.n	80151ec <Build_Ext+0x190>
 80151e8:	23ca      	movs	r3, #202	; 0xca
 80151ea:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 80151ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151f0:	2b02      	cmp	r3, #2
 80151f2:	dc01      	bgt.n	80151f8 <Build_Ext+0x19c>
 80151f4:	2301      	movs	r3, #1
 80151f6:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 80151f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	4413      	add	r3, r2
 8015200:	89fa      	ldrh	r2, [r7, #14]
 8015202:	b2d2      	uxtb	r2, r2
 8015204:	701a      	strb	r2, [r3, #0]
}
 8015206:	bf00      	nop
 8015208:	3714      	adds	r7, #20
 801520a:	46bd      	mov	sp, r7
 801520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015210:	4770      	bx	lr
 8015212:	bf00      	nop
 8015214:	20000a48 	.word	0x20000a48
 8015218:	20000274 	.word	0x20000274
 801521c:	20000008 	.word	0x20000008
 8015220:	2000269c 	.word	0x2000269c
 8015224:	2000269e 	.word	0x2000269e
 8015228:	2000091c 	.word	0x2000091c

0801522c <Auto_Fit>:

void Auto_Fit(void)
{
 801522c:	b590      	push	{r4, r7, lr}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
  char i,j,k=0;
 8015232:	2300      	movs	r3, #0
 8015234:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015236:	4b38      	ldr	r3, [pc, #224]	; (8015318 <Auto_Fit+0xec>)
 8015238:	f9b3 3000 	ldrsh.w	r3, [r3]
 801523c:	2b01      	cmp	r3, #1
 801523e:	f000 83de 	beq.w	80159fe <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 8015242:	2300      	movs	r3, #0
 8015244:	71fb      	strb	r3, [r7, #7]
 8015246:	e098      	b.n	801537a <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015248:	4b34      	ldr	r3, [pc, #208]	; (801531c <Auto_Fit+0xf0>)
 801524a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801524e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015252:	4a33      	ldr	r2, [pc, #204]	; (8015320 <Auto_Fit+0xf4>)
 8015254:	6811      	ldr	r1, [r2, #0]
 8015256:	4a33      	ldr	r2, [pc, #204]	; (8015324 <Auto_Fit+0xf8>)
 8015258:	f9b2 2000 	ldrsh.w	r2, [r2]
 801525c:	4610      	mov	r0, r2
 801525e:	4a32      	ldr	r2, [pc, #200]	; (8015328 <Auto_Fit+0xfc>)
 8015260:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015264:	2a00      	cmp	r2, #0
 8015266:	bf14      	ite	ne
 8015268:	2201      	movne	r2, #1
 801526a:	2200      	moveq	r2, #0
 801526c:	b2d2      	uxtb	r2, r2
 801526e:	4402      	add	r2, r0
 8015270:	0052      	lsls	r2, r2, #1
 8015272:	440a      	add	r2, r1
 8015274:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015278:	0092      	lsls	r2, r2, #2
 801527a:	492c      	ldr	r1, [pc, #176]	; (801532c <Auto_Fit+0x100>)
 801527c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015280:	4608      	mov	r0, r1
 8015282:	492b      	ldr	r1, [pc, #172]	; (8015330 <Auto_Fit+0x104>)
 8015284:	5c09      	ldrb	r1, [r1, r0]
 8015286:	fb92 f2f1 	sdiv	r2, r2, r1
 801528a:	fb02 f303 	mul.w	r3, r2, r3
 801528e:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015290:	b29a      	uxth	r2, r3
 8015292:	4b28      	ldr	r3, [pc, #160]	; (8015334 <Auto_Fit+0x108>)
 8015294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015298:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801529c:	4920      	ldr	r1, [pc, #128]	; (8015320 <Auto_Fit+0xf4>)
 801529e:	6808      	ldr	r0, [r1, #0]
 80152a0:	4920      	ldr	r1, [pc, #128]	; (8015324 <Auto_Fit+0xf8>)
 80152a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152a6:	460c      	mov	r4, r1
 80152a8:	491f      	ldr	r1, [pc, #124]	; (8015328 <Auto_Fit+0xfc>)
 80152aa:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152ae:	2900      	cmp	r1, #0
 80152b0:	bf14      	ite	ne
 80152b2:	2101      	movne	r1, #1
 80152b4:	2100      	moveq	r1, #0
 80152b6:	b2c9      	uxtb	r1, r1
 80152b8:	4421      	add	r1, r4
 80152ba:	0049      	lsls	r1, r1, #1
 80152bc:	4401      	add	r1, r0
 80152be:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152c2:	0089      	lsls	r1, r1, #2
 80152c4:	4819      	ldr	r0, [pc, #100]	; (801532c <Auto_Fit+0x100>)
 80152c6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80152ca:	4604      	mov	r4, r0
 80152cc:	4818      	ldr	r0, [pc, #96]	; (8015330 <Auto_Fit+0x104>)
 80152ce:	5d00      	ldrb	r0, [r0, r4]
 80152d0:	fb91 f1f0 	sdiv	r1, r1, r0
 80152d4:	fb01 f303 	mul.w	r3, r1, r3
 80152d8:	131b      	asrs	r3, r3, #12
 80152da:	b29b      	uxth	r3, r3
 80152dc:	1ad3      	subs	r3, r2, r3
 80152de:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80152e0:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 80152e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80152e6:	2b27      	cmp	r3, #39	; 0x27
 80152e8:	dc28      	bgt.n	801533c <Auto_Fit+0x110>
 80152ea:	4b13      	ldr	r3, [pc, #76]	; (8015338 <Auto_Fit+0x10c>)
 80152ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	dd23      	ble.n	801533c <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 80152f4:	4b10      	ldr	r3, [pc, #64]	; (8015338 <Auto_Fit+0x10c>)
 80152f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	3b01      	subs	r3, #1
 80152fe:	b29b      	uxth	r3, r3
 8015300:	b21a      	sxth	r2, r3
 8015302:	4b0d      	ldr	r3, [pc, #52]	; (8015338 <Auto_Fit+0x10c>)
 8015304:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015306:	4b0c      	ldr	r3, [pc, #48]	; (8015338 <Auto_Fit+0x10c>)
 8015308:	2264      	movs	r2, #100	; 0x64
 801530a:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 801530c:	f7ff faac 	bl	8014868 <WaveProcess>
        Update_Proc_All();
 8015310:	f7fe ff32 	bl	8014178 <Update_Proc_All>
 8015314:	e02b      	b.n	801536e <Auto_Fit+0x142>
 8015316:	bf00      	nop
 8015318:	20002656 	.word	0x20002656
 801531c:	2000266c 	.word	0x2000266c
 8015320:	20000558 	.word	0x20000558
 8015324:	20002692 	.word	0x20002692
 8015328:	2000268c 	.word	0x2000268c
 801532c:	20002690 	.word	0x20002690
 8015330:	2000053c 	.word	0x2000053c
 8015334:	2000266e 	.word	0x2000266e
 8015338:	20000274 	.word	0x20000274
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 801533c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015340:	2b6e      	cmp	r3, #110	; 0x6e
 8015342:	dd14      	ble.n	801536e <Auto_Fit+0x142>
 8015344:	4bba      	ldr	r3, [pc, #744]	; (8015630 <Auto_Fit+0x404>)
 8015346:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801534a:	2b08      	cmp	r3, #8
 801534c:	dc0f      	bgt.n	801536e <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 801534e:	4bb8      	ldr	r3, [pc, #736]	; (8015630 <Auto_Fit+0x404>)
 8015350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015354:	b29b      	uxth	r3, r3
 8015356:	3301      	adds	r3, #1
 8015358:	b29b      	uxth	r3, r3
 801535a:	b21a      	sxth	r2, r3
 801535c:	4bb4      	ldr	r3, [pc, #720]	; (8015630 <Auto_Fit+0x404>)
 801535e:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015360:	4bb3      	ldr	r3, [pc, #716]	; (8015630 <Auto_Fit+0x404>)
 8015362:	2264      	movs	r2, #100	; 0x64
 8015364:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015366:	f7ff fa7f 	bl	8014868 <WaveProcess>
        Update_Proc_All();
 801536a:	f7fe ff05 	bl	8014178 <Update_Proc_All>
      }
      HAL_Delay(50);
 801536e:	2032      	movs	r0, #50	; 0x32
 8015370:	f002 febc 	bl	80180ec <HAL_Delay>
    for(i=0;i<9;i++){
 8015374:	79fb      	ldrb	r3, [r7, #7]
 8015376:	3301      	adds	r3, #1
 8015378:	71fb      	strb	r3, [r7, #7]
 801537a:	79fb      	ldrb	r3, [r7, #7]
 801537c:	2b08      	cmp	r3, #8
 801537e:	f67f af63 	bls.w	8015248 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015382:	4bac      	ldr	r3, [pc, #688]	; (8015634 <Auto_Fit+0x408>)
 8015384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015388:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801538c:	4aaa      	ldr	r2, [pc, #680]	; (8015638 <Auto_Fit+0x40c>)
 801538e:	6811      	ldr	r1, [r2, #0]
 8015390:	4aaa      	ldr	r2, [pc, #680]	; (801563c <Auto_Fit+0x410>)
 8015392:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015396:	4610      	mov	r0, r2
 8015398:	4aa9      	ldr	r2, [pc, #676]	; (8015640 <Auto_Fit+0x414>)
 801539a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801539e:	2a00      	cmp	r2, #0
 80153a0:	bf14      	ite	ne
 80153a2:	2201      	movne	r2, #1
 80153a4:	2200      	moveq	r2, #0
 80153a6:	b2d2      	uxtb	r2, r2
 80153a8:	4402      	add	r2, r0
 80153aa:	0052      	lsls	r2, r2, #1
 80153ac:	440a      	add	r2, r1
 80153ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153b2:	0092      	lsls	r2, r2, #2
 80153b4:	49a3      	ldr	r1, [pc, #652]	; (8015644 <Auto_Fit+0x418>)
 80153b6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153ba:	4608      	mov	r0, r1
 80153bc:	49a2      	ldr	r1, [pc, #648]	; (8015648 <Auto_Fit+0x41c>)
 80153be:	5c09      	ldrb	r1, [r1, r0]
 80153c0:	fb92 f2f1 	sdiv	r2, r2, r1
 80153c4:	fb02 f303 	mul.w	r3, r2, r3
 80153c8:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 80153ca:	4ba0      	ldr	r3, [pc, #640]	; (801564c <Auto_Fit+0x420>)
 80153cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153d4:	4998      	ldr	r1, [pc, #608]	; (8015638 <Auto_Fit+0x40c>)
 80153d6:	6808      	ldr	r0, [r1, #0]
 80153d8:	4998      	ldr	r1, [pc, #608]	; (801563c <Auto_Fit+0x410>)
 80153da:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153de:	460c      	mov	r4, r1
 80153e0:	4997      	ldr	r1, [pc, #604]	; (8015640 <Auto_Fit+0x414>)
 80153e2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153e6:	2900      	cmp	r1, #0
 80153e8:	bf14      	ite	ne
 80153ea:	2101      	movne	r1, #1
 80153ec:	2100      	moveq	r1, #0
 80153ee:	b2c9      	uxtb	r1, r1
 80153f0:	4421      	add	r1, r4
 80153f2:	0049      	lsls	r1, r1, #1
 80153f4:	4401      	add	r1, r0
 80153f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153fa:	0089      	lsls	r1, r1, #2
 80153fc:	4891      	ldr	r0, [pc, #580]	; (8015644 <Auto_Fit+0x418>)
 80153fe:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015402:	4604      	mov	r4, r0
 8015404:	4890      	ldr	r0, [pc, #576]	; (8015648 <Auto_Fit+0x41c>)
 8015406:	5d00      	ldrb	r0, [r0, r4]
 8015408:	fb91 f1f0 	sdiv	r1, r1, r0
 801540c:	fb01 f303 	mul.w	r3, r1, r3
 8015410:	131b      	asrs	r3, r3, #12
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	2b00      	cmp	r3, #0
 8015416:	da00      	bge.n	801541a <Auto_Fit+0x1ee>
 8015418:	3303      	adds	r3, #3
 801541a:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801541c:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 801541e:	4b84      	ldr	r3, [pc, #528]	; (8015630 <Auto_Fit+0x404>)
 8015420:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015424:	4618      	mov	r0, r3
 8015426:	4b8a      	ldr	r3, [pc, #552]	; (8015650 <Auto_Fit+0x424>)
 8015428:	f9b3 3000 	ldrsh.w	r3, [r3]
 801542c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015430:	4a81      	ldr	r2, [pc, #516]	; (8015638 <Auto_Fit+0x40c>)
 8015432:	6811      	ldr	r1, [r2, #0]
 8015434:	4a81      	ldr	r2, [pc, #516]	; (801563c <Auto_Fit+0x410>)
 8015436:	f9b2 2000 	ldrsh.w	r2, [r2]
 801543a:	4614      	mov	r4, r2
 801543c:	4a80      	ldr	r2, [pc, #512]	; (8015640 <Auto_Fit+0x414>)
 801543e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015442:	2a00      	cmp	r2, #0
 8015444:	bf14      	ite	ne
 8015446:	2201      	movne	r2, #1
 8015448:	2200      	moveq	r2, #0
 801544a:	b2d2      	uxtb	r2, r2
 801544c:	4422      	add	r2, r4
 801544e:	0052      	lsls	r2, r2, #1
 8015450:	440a      	add	r2, r1
 8015452:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015456:	0092      	lsls	r2, r2, #2
 8015458:	497a      	ldr	r1, [pc, #488]	; (8015644 <Auto_Fit+0x418>)
 801545a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801545e:	460c      	mov	r4, r1
 8015460:	4979      	ldr	r1, [pc, #484]	; (8015648 <Auto_Fit+0x41c>)
 8015462:	5d09      	ldrb	r1, [r1, r4]
 8015464:	fb92 f2f1 	sdiv	r2, r2, r1
 8015468:	fb02 f303 	mul.w	r3, r2, r3
 801546c:	131b      	asrs	r3, r3, #12
 801546e:	3364      	adds	r3, #100	; 0x64
 8015470:	4a6f      	ldr	r2, [pc, #444]	; (8015630 <Auto_Fit+0x404>)
 8015472:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015476:	1a9a      	subs	r2, r3, r2
 8015478:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801547c:	4413      	add	r3, r2
 801547e:	4298      	cmp	r0, r3
 8015480:	dc32      	bgt.n	80154e8 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015482:	4b6b      	ldr	r3, [pc, #428]	; (8015630 <Auto_Fit+0x404>)
 8015484:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015488:	4618      	mov	r0, r3
 801548a:	4b71      	ldr	r3, [pc, #452]	; (8015650 <Auto_Fit+0x424>)
 801548c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015490:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015494:	4a68      	ldr	r2, [pc, #416]	; (8015638 <Auto_Fit+0x40c>)
 8015496:	6811      	ldr	r1, [r2, #0]
 8015498:	4a68      	ldr	r2, [pc, #416]	; (801563c <Auto_Fit+0x410>)
 801549a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801549e:	4614      	mov	r4, r2
 80154a0:	4a67      	ldr	r2, [pc, #412]	; (8015640 <Auto_Fit+0x414>)
 80154a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	bf14      	ite	ne
 80154aa:	2201      	movne	r2, #1
 80154ac:	2200      	moveq	r2, #0
 80154ae:	b2d2      	uxtb	r2, r2
 80154b0:	4422      	add	r2, r4
 80154b2:	0052      	lsls	r2, r2, #1
 80154b4:	440a      	add	r2, r1
 80154b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154ba:	0092      	lsls	r2, r2, #2
 80154bc:	4961      	ldr	r1, [pc, #388]	; (8015644 <Auto_Fit+0x418>)
 80154be:	f9b1 1000 	ldrsh.w	r1, [r1]
 80154c2:	460c      	mov	r4, r1
 80154c4:	4960      	ldr	r1, [pc, #384]	; (8015648 <Auto_Fit+0x41c>)
 80154c6:	5d09      	ldrb	r1, [r1, r4]
 80154c8:	fb92 f2f1 	sdiv	r2, r2, r1
 80154cc:	fb02 f303 	mul.w	r3, r2, r3
 80154d0:	131b      	asrs	r3, r3, #12
 80154d2:	3364      	adds	r3, #100	; 0x64
 80154d4:	4a56      	ldr	r2, [pc, #344]	; (8015630 <Auto_Fit+0x404>)
 80154d6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80154da:	1a9a      	subs	r2, r3, r2
 80154dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154e0:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 80154e2:	4298      	cmp	r0, r3
 80154e4:	f280 808e 	bge.w	8015604 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 80154e8:	4b59      	ldr	r3, [pc, #356]	; (8015650 <Auto_Fit+0x424>)
 80154ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80154f2:	4a51      	ldr	r2, [pc, #324]	; (8015638 <Auto_Fit+0x40c>)
 80154f4:	6811      	ldr	r1, [r2, #0]
 80154f6:	4a51      	ldr	r2, [pc, #324]	; (801563c <Auto_Fit+0x410>)
 80154f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154fc:	4610      	mov	r0, r2
 80154fe:	4a50      	ldr	r2, [pc, #320]	; (8015640 <Auto_Fit+0x414>)
 8015500:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015504:	2a00      	cmp	r2, #0
 8015506:	bf14      	ite	ne
 8015508:	2201      	movne	r2, #1
 801550a:	2200      	moveq	r2, #0
 801550c:	b2d2      	uxtb	r2, r2
 801550e:	4402      	add	r2, r0
 8015510:	0052      	lsls	r2, r2, #1
 8015512:	440a      	add	r2, r1
 8015514:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015518:	0092      	lsls	r2, r2, #2
 801551a:	494a      	ldr	r1, [pc, #296]	; (8015644 <Auto_Fit+0x418>)
 801551c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015520:	4608      	mov	r0, r1
 8015522:	4949      	ldr	r1, [pc, #292]	; (8015648 <Auto_Fit+0x41c>)
 8015524:	5c09      	ldrb	r1, [r1, r0]
 8015526:	fb92 f2f1 	sdiv	r2, r2, r1
 801552a:	fb02 f303 	mul.w	r3, r2, r3
 801552e:	131b      	asrs	r3, r3, #12
 8015530:	3364      	adds	r3, #100	; 0x64
 8015532:	4a3f      	ldr	r2, [pc, #252]	; (8015630 <Auto_Fit+0x404>)
 8015534:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015538:	1a9b      	subs	r3, r3, r2
 801553a:	330f      	adds	r3, #15
 801553c:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015540:	db5c      	blt.n	80155fc <Auto_Fit+0x3d0>
 8015542:	4b43      	ldr	r3, [pc, #268]	; (8015650 <Auto_Fit+0x424>)
 8015544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015548:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801554c:	4a3a      	ldr	r2, [pc, #232]	; (8015638 <Auto_Fit+0x40c>)
 801554e:	6811      	ldr	r1, [r2, #0]
 8015550:	4a3a      	ldr	r2, [pc, #232]	; (801563c <Auto_Fit+0x410>)
 8015552:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015556:	4610      	mov	r0, r2
 8015558:	4a39      	ldr	r2, [pc, #228]	; (8015640 <Auto_Fit+0x414>)
 801555a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801555e:	2a00      	cmp	r2, #0
 8015560:	bf14      	ite	ne
 8015562:	2201      	movne	r2, #1
 8015564:	2200      	moveq	r2, #0
 8015566:	b2d2      	uxtb	r2, r2
 8015568:	4402      	add	r2, r0
 801556a:	0052      	lsls	r2, r2, #1
 801556c:	440a      	add	r2, r1
 801556e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015572:	0092      	lsls	r2, r2, #2
 8015574:	4933      	ldr	r1, [pc, #204]	; (8015644 <Auto_Fit+0x418>)
 8015576:	f9b1 1000 	ldrsh.w	r1, [r1]
 801557a:	4608      	mov	r0, r1
 801557c:	4932      	ldr	r1, [pc, #200]	; (8015648 <Auto_Fit+0x41c>)
 801557e:	5c09      	ldrb	r1, [r1, r0]
 8015580:	fb92 f2f1 	sdiv	r2, r2, r1
 8015584:	fb02 f303 	mul.w	r3, r2, r3
 8015588:	131b      	asrs	r3, r3, #12
 801558a:	3364      	adds	r3, #100	; 0x64
 801558c:	4a28      	ldr	r2, [pc, #160]	; (8015630 <Auto_Fit+0x404>)
 801558e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015592:	1a9b      	subs	r3, r3, r2
 8015594:	330f      	adds	r3, #15
 8015596:	2bc2      	cmp	r3, #194	; 0xc2
 8015598:	dc30      	bgt.n	80155fc <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 801559a:	4b2d      	ldr	r3, [pc, #180]	; (8015650 <Auto_Fit+0x424>)
 801559c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80155a4:	4a24      	ldr	r2, [pc, #144]	; (8015638 <Auto_Fit+0x40c>)
 80155a6:	6811      	ldr	r1, [r2, #0]
 80155a8:	4a24      	ldr	r2, [pc, #144]	; (801563c <Auto_Fit+0x410>)
 80155aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155ae:	4610      	mov	r0, r2
 80155b0:	4a23      	ldr	r2, [pc, #140]	; (8015640 <Auto_Fit+0x414>)
 80155b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155b6:	2a00      	cmp	r2, #0
 80155b8:	bf14      	ite	ne
 80155ba:	2201      	movne	r2, #1
 80155bc:	2200      	moveq	r2, #0
 80155be:	b2d2      	uxtb	r2, r2
 80155c0:	4402      	add	r2, r0
 80155c2:	0052      	lsls	r2, r2, #1
 80155c4:	440a      	add	r2, r1
 80155c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155ca:	0092      	lsls	r2, r2, #2
 80155cc:	491d      	ldr	r1, [pc, #116]	; (8015644 <Auto_Fit+0x418>)
 80155ce:	f9b1 1000 	ldrsh.w	r1, [r1]
 80155d2:	4608      	mov	r0, r1
 80155d4:	491c      	ldr	r1, [pc, #112]	; (8015648 <Auto_Fit+0x41c>)
 80155d6:	5c09      	ldrb	r1, [r1, r0]
 80155d8:	fb92 f2f1 	sdiv	r2, r2, r1
 80155dc:	fb02 f303 	mul.w	r3, r2, r3
 80155e0:	131b      	asrs	r3, r3, #12
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	4b12      	ldr	r3, [pc, #72]	; (8015630 <Auto_Fit+0x404>)
 80155e6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	1ad3      	subs	r3, r2, r3
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	3373      	adds	r3, #115	; 0x73
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	b21a      	sxth	r2, r3
 80155f6:	4b0e      	ldr	r3, [pc, #56]	; (8015630 <Auto_Fit+0x404>)
 80155f8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 80155fc:	f7ff f934 	bl	8014868 <WaveProcess>
           Update_Proc_All();
 8015600:	f7fe fdba 	bl	8014178 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015604:	4b13      	ldr	r3, [pc, #76]	; (8015654 <Auto_Fit+0x428>)
 8015606:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801560a:	b29a      	uxth	r2, r3
 801560c:	4b08      	ldr	r3, [pc, #32]	; (8015630 <Auto_Fit+0x404>)
 801560e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015612:	b29b      	uxth	r3, r3
 8015614:	005b      	lsls	r3, r3, #1
 8015616:	b29b      	uxth	r3, r3
 8015618:	4413      	add	r3, r2
 801561a:	b29b      	uxth	r3, r3
 801561c:	b21a      	sxth	r2, r3
 801561e:	4b0d      	ldr	r3, [pc, #52]	; (8015654 <Auto_Fit+0x428>)
 8015620:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015622:	4b03      	ldr	r3, [pc, #12]	; (8015630 <Auto_Fit+0x404>)
 8015624:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015628:	f043 0320 	orr.w	r3, r3, #32
 801562c:	b2da      	uxtb	r2, r3
 801562e:	e013      	b.n	8015658 <Auto_Fit+0x42c>
 8015630:	20000274 	.word	0x20000274
 8015634:	2000266c 	.word	0x2000266c
 8015638:	20000558 	.word	0x20000558
 801563c:	20002692 	.word	0x20002692
 8015640:	2000268c 	.word	0x2000268c
 8015644:	20002690 	.word	0x20002690
 8015648:	2000053c 	.word	0x2000053c
 801564c:	2000266e 	.word	0x2000266e
 8015650:	20002670 	.word	0x20002670
 8015654:	20000140 	.word	0x20000140
 8015658:	4ba7      	ldr	r3, [pc, #668]	; (80158f8 <Auto_Fit+0x6cc>)
 801565a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 801565e:	f7fc fa81 	bl	8011b64 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015662:	2064      	movs	r0, #100	; 0x64
 8015664:	f002 fd42 	bl	80180ec <HAL_Delay>

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015668:	4ba4      	ldr	r3, [pc, #656]	; (80158fc <Auto_Fit+0x6d0>)
 801566a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801566e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015672:	4aa3      	ldr	r2, [pc, #652]	; (8015900 <Auto_Fit+0x6d4>)
 8015674:	6811      	ldr	r1, [r2, #0]
 8015676:	4aa3      	ldr	r2, [pc, #652]	; (8015904 <Auto_Fit+0x6d8>)
 8015678:	f9b2 2000 	ldrsh.w	r2, [r2]
 801567c:	4610      	mov	r0, r2
 801567e:	4aa2      	ldr	r2, [pc, #648]	; (8015908 <Auto_Fit+0x6dc>)
 8015680:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015684:	2a00      	cmp	r2, #0
 8015686:	bf14      	ite	ne
 8015688:	2201      	movne	r2, #1
 801568a:	2200      	moveq	r2, #0
 801568c:	b2d2      	uxtb	r2, r2
 801568e:	4402      	add	r2, r0
 8015690:	0052      	lsls	r2, r2, #1
 8015692:	440a      	add	r2, r1
 8015694:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015698:	0092      	lsls	r2, r2, #2
 801569a:	499c      	ldr	r1, [pc, #624]	; (801590c <Auto_Fit+0x6e0>)
 801569c:	f9b1 1000 	ldrsh.w	r1, [r1]
 80156a0:	4608      	mov	r0, r1
 80156a2:	499b      	ldr	r1, [pc, #620]	; (8015910 <Auto_Fit+0x6e4>)
 80156a4:	5c09      	ldrb	r1, [r1, r0]
 80156a6:	fb92 f2f1 	sdiv	r2, r2, r1
 80156aa:	fb02 f303 	mul.w	r3, r2, r3
 80156ae:	131b      	asrs	r3, r3, #12
 80156b0:	3364      	adds	r3, #100	; 0x64
 80156b2:	4a91      	ldr	r2, [pc, #580]	; (80158f8 <Auto_Fit+0x6cc>)
 80156b4:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80156b8:	1a9b      	subs	r3, r3, r2
 80156ba:	2b0a      	cmp	r3, #10
 80156bc:	dd76      	ble.n	80157ac <Auto_Fit+0x580>
      WaveProcess();
 80156be:	f7ff f8d3 	bl	8014868 <WaveProcess>
      Update_Proc_All();
 80156c2:	f7fe fd59 	bl	8014178 <Update_Proc_All>
      HAL_Delay(100);
 80156c6:	2064      	movs	r0, #100	; 0x64
 80156c8:	f002 fd10 	bl	80180ec <HAL_Delay>
      for(i=0;i<9;i++){
 80156cc:	2300      	movs	r3, #0
 80156ce:	71fb      	strb	r3, [r7, #7]
 80156d0:	e068      	b.n	80157a4 <Auto_Fit+0x578>
        WaveProcess();
 80156d2:	f7ff f8c9 	bl	8014868 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 80156d6:	4b8f      	ldr	r3, [pc, #572]	; (8015914 <Auto_Fit+0x6e8>)
 80156d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156dc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80156e0:	4a87      	ldr	r2, [pc, #540]	; (8015900 <Auto_Fit+0x6d4>)
 80156e2:	6811      	ldr	r1, [r2, #0]
 80156e4:	4a87      	ldr	r2, [pc, #540]	; (8015904 <Auto_Fit+0x6d8>)
 80156e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156ea:	4610      	mov	r0, r2
 80156ec:	4a86      	ldr	r2, [pc, #536]	; (8015908 <Auto_Fit+0x6dc>)
 80156ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156f2:	2a00      	cmp	r2, #0
 80156f4:	bf14      	ite	ne
 80156f6:	2201      	movne	r2, #1
 80156f8:	2200      	moveq	r2, #0
 80156fa:	b2d2      	uxtb	r2, r2
 80156fc:	4402      	add	r2, r0
 80156fe:	0052      	lsls	r2, r2, #1
 8015700:	440a      	add	r2, r1
 8015702:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015706:	0092      	lsls	r2, r2, #2
 8015708:	4980      	ldr	r1, [pc, #512]	; (801590c <Auto_Fit+0x6e0>)
 801570a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801570e:	4608      	mov	r0, r1
 8015710:	497f      	ldr	r1, [pc, #508]	; (8015910 <Auto_Fit+0x6e4>)
 8015712:	5c09      	ldrb	r1, [r1, r0]
 8015714:	fb92 f2f1 	sdiv	r2, r2, r1
 8015718:	fb02 f303 	mul.w	r3, r2, r3
 801571c:	131b      	asrs	r3, r3, #12
 801571e:	b29a      	uxth	r2, r3
 8015720:	4b75      	ldr	r3, [pc, #468]	; (80158f8 <Auto_Fit+0x6cc>)
 8015722:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015726:	b29b      	uxth	r3, r3
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	b29b      	uxth	r3, r3
 801572c:	3364      	adds	r3, #100	; 0x64
 801572e:	b29b      	uxth	r3, r3
 8015730:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015732:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015736:	2b27      	cmp	r3, #39	; 0x27
 8015738:	dc15      	bgt.n	8015766 <Auto_Fit+0x53a>
 801573a:	4b6f      	ldr	r3, [pc, #444]	; (80158f8 <Auto_Fit+0x6cc>)
 801573c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015740:	2b02      	cmp	r3, #2
 8015742:	dd10      	ble.n	8015766 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015744:	4b6c      	ldr	r3, [pc, #432]	; (80158f8 <Auto_Fit+0x6cc>)
 8015746:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801574a:	b29b      	uxth	r3, r3
 801574c:	3b01      	subs	r3, #1
 801574e:	b29b      	uxth	r3, r3
 8015750:	b21a      	sxth	r2, r3
 8015752:	4b69      	ldr	r3, [pc, #420]	; (80158f8 <Auto_Fit+0x6cc>)
 8015754:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015756:	4b68      	ldr	r3, [pc, #416]	; (80158f8 <Auto_Fit+0x6cc>)
 8015758:	2264      	movs	r2, #100	; 0x64
 801575a:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 801575c:	f7ff f884 	bl	8014868 <WaveProcess>
          Update_Proc_All();
 8015760:	f7fe fd0a 	bl	8014178 <Update_Proc_All>
 8015764:	e018      	b.n	8015798 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015766:	f9b7 3000 	ldrsh.w	r3, [r7]
 801576a:	2b64      	cmp	r3, #100	; 0x64
 801576c:	dd14      	ble.n	8015798 <Auto_Fit+0x56c>
 801576e:	4b62      	ldr	r3, [pc, #392]	; (80158f8 <Auto_Fit+0x6cc>)
 8015770:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015774:	2b08      	cmp	r3, #8
 8015776:	dc0f      	bgt.n	8015798 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015778:	4b5f      	ldr	r3, [pc, #380]	; (80158f8 <Auto_Fit+0x6cc>)
 801577a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801577e:	b29b      	uxth	r3, r3
 8015780:	3301      	adds	r3, #1
 8015782:	b29b      	uxth	r3, r3
 8015784:	b21a      	sxth	r2, r3
 8015786:	4b5c      	ldr	r3, [pc, #368]	; (80158f8 <Auto_Fit+0x6cc>)
 8015788:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 801578a:	4b5b      	ldr	r3, [pc, #364]	; (80158f8 <Auto_Fit+0x6cc>)
 801578c:	2264      	movs	r2, #100	; 0x64
 801578e:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015790:	f7ff f86a 	bl	8014868 <WaveProcess>
          Update_Proc_All();
 8015794:	f7fe fcf0 	bl	8014178 <Update_Proc_All>
        }
        HAL_Delay(50);
 8015798:	2032      	movs	r0, #50	; 0x32
 801579a:	f002 fca7 	bl	80180ec <HAL_Delay>
      for(i=0;i<9;i++){
 801579e:	79fb      	ldrb	r3, [r7, #7]
 80157a0:	3301      	adds	r3, #1
 80157a2:	71fb      	strb	r3, [r7, #7]
 80157a4:	79fb      	ldrb	r3, [r7, #7]
 80157a6:	2b08      	cmp	r3, #8
 80157a8:	d993      	bls.n	80156d2 <Auto_Fit+0x4a6>
 80157aa:	e054      	b.n	8015856 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80157ac:	4b59      	ldr	r3, [pc, #356]	; (8015914 <Auto_Fit+0x6e8>)
 80157ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80157b6:	4a52      	ldr	r2, [pc, #328]	; (8015900 <Auto_Fit+0x6d4>)
 80157b8:	6811      	ldr	r1, [r2, #0]
 80157ba:	4a52      	ldr	r2, [pc, #328]	; (8015904 <Auto_Fit+0x6d8>)
 80157bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157c0:	4610      	mov	r0, r2
 80157c2:	4a51      	ldr	r2, [pc, #324]	; (8015908 <Auto_Fit+0x6dc>)
 80157c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157c8:	2a00      	cmp	r2, #0
 80157ca:	bf14      	ite	ne
 80157cc:	2201      	movne	r2, #1
 80157ce:	2200      	moveq	r2, #0
 80157d0:	b2d2      	uxtb	r2, r2
 80157d2:	4402      	add	r2, r0
 80157d4:	0052      	lsls	r2, r2, #1
 80157d6:	440a      	add	r2, r1
 80157d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157dc:	0092      	lsls	r2, r2, #2
 80157de:	494b      	ldr	r1, [pc, #300]	; (801590c <Auto_Fit+0x6e0>)
 80157e0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80157e4:	4608      	mov	r0, r1
 80157e6:	494a      	ldr	r1, [pc, #296]	; (8015910 <Auto_Fit+0x6e4>)
 80157e8:	5c09      	ldrb	r1, [r1, r0]
 80157ea:	fb92 f2f1 	sdiv	r2, r2, r1
 80157ee:	fb02 f303 	mul.w	r3, r2, r3
 80157f2:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 80157f4:	4b48      	ldr	r3, [pc, #288]	; (8015918 <Auto_Fit+0x6ec>)
 80157f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157fa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80157fe:	4940      	ldr	r1, [pc, #256]	; (8015900 <Auto_Fit+0x6d4>)
 8015800:	6808      	ldr	r0, [r1, #0]
 8015802:	4940      	ldr	r1, [pc, #256]	; (8015904 <Auto_Fit+0x6d8>)
 8015804:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015808:	460c      	mov	r4, r1
 801580a:	493f      	ldr	r1, [pc, #252]	; (8015908 <Auto_Fit+0x6dc>)
 801580c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015810:	2900      	cmp	r1, #0
 8015812:	bf14      	ite	ne
 8015814:	2101      	movne	r1, #1
 8015816:	2100      	moveq	r1, #0
 8015818:	b2c9      	uxtb	r1, r1
 801581a:	4421      	add	r1, r4
 801581c:	0049      	lsls	r1, r1, #1
 801581e:	4401      	add	r1, r0
 8015820:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015824:	0089      	lsls	r1, r1, #2
 8015826:	4839      	ldr	r0, [pc, #228]	; (801590c <Auto_Fit+0x6e0>)
 8015828:	f9b0 0000 	ldrsh.w	r0, [r0]
 801582c:	4604      	mov	r4, r0
 801582e:	4838      	ldr	r0, [pc, #224]	; (8015910 <Auto_Fit+0x6e4>)
 8015830:	5d00      	ldrb	r0, [r0, r4]
 8015832:	fb91 f1f0 	sdiv	r1, r1, r0
 8015836:	fb01 f303 	mul.w	r3, r1, r3
 801583a:	131b      	asrs	r3, r3, #12
 801583c:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801583e:	2b09      	cmp	r3, #9
 8015840:	dc09      	bgt.n	8015856 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8015842:	4b2d      	ldr	r3, [pc, #180]	; (80158f8 <Auto_Fit+0x6cc>)
 8015844:	2207      	movs	r2, #7
 8015846:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8015848:	f7ff f80e 	bl	8014868 <WaveProcess>
        Update_Proc_All();
 801584c:	f7fe fc94 	bl	8014178 <Update_Proc_All>
        HAL_Delay(50);
 8015850:	2032      	movs	r0, #50	; 0x32
 8015852:	f002 fc4b 	bl	80180ec <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015856:	4b2f      	ldr	r3, [pc, #188]	; (8015914 <Auto_Fit+0x6e8>)
 8015858:	f9b3 3000 	ldrsh.w	r3, [r3]
 801585c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015860:	4a27      	ldr	r2, [pc, #156]	; (8015900 <Auto_Fit+0x6d4>)
 8015862:	6811      	ldr	r1, [r2, #0]
 8015864:	4a27      	ldr	r2, [pc, #156]	; (8015904 <Auto_Fit+0x6d8>)
 8015866:	f9b2 2000 	ldrsh.w	r2, [r2]
 801586a:	4610      	mov	r0, r2
 801586c:	4a26      	ldr	r2, [pc, #152]	; (8015908 <Auto_Fit+0x6dc>)
 801586e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015872:	2a00      	cmp	r2, #0
 8015874:	bf14      	ite	ne
 8015876:	2201      	movne	r2, #1
 8015878:	2200      	moveq	r2, #0
 801587a:	b2d2      	uxtb	r2, r2
 801587c:	4402      	add	r2, r0
 801587e:	0052      	lsls	r2, r2, #1
 8015880:	440a      	add	r2, r1
 8015882:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015886:	0092      	lsls	r2, r2, #2
 8015888:	4920      	ldr	r1, [pc, #128]	; (801590c <Auto_Fit+0x6e0>)
 801588a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801588e:	4608      	mov	r0, r1
 8015890:	491f      	ldr	r1, [pc, #124]	; (8015910 <Auto_Fit+0x6e4>)
 8015892:	5c09      	ldrb	r1, [r1, r0]
 8015894:	fb92 f2f1 	sdiv	r2, r2, r1
 8015898:	fb02 f303 	mul.w	r3, r2, r3
 801589c:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 801589e:	b29a      	uxth	r2, r3
 80158a0:	4b1d      	ldr	r3, [pc, #116]	; (8015918 <Auto_Fit+0x6ec>)
 80158a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158a6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80158aa:	4915      	ldr	r1, [pc, #84]	; (8015900 <Auto_Fit+0x6d4>)
 80158ac:	6808      	ldr	r0, [r1, #0]
 80158ae:	4915      	ldr	r1, [pc, #84]	; (8015904 <Auto_Fit+0x6d8>)
 80158b0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158b4:	460c      	mov	r4, r1
 80158b6:	4914      	ldr	r1, [pc, #80]	; (8015908 <Auto_Fit+0x6dc>)
 80158b8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158bc:	2900      	cmp	r1, #0
 80158be:	bf14      	ite	ne
 80158c0:	2101      	movne	r1, #1
 80158c2:	2100      	moveq	r1, #0
 80158c4:	b2c9      	uxtb	r1, r1
 80158c6:	4421      	add	r1, r4
 80158c8:	0049      	lsls	r1, r1, #1
 80158ca:	4401      	add	r1, r0
 80158cc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158d0:	0089      	lsls	r1, r1, #2
 80158d2:	480e      	ldr	r0, [pc, #56]	; (801590c <Auto_Fit+0x6e0>)
 80158d4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80158d8:	4604      	mov	r4, r0
 80158da:	480d      	ldr	r0, [pc, #52]	; (8015910 <Auto_Fit+0x6e4>)
 80158dc:	5d00      	ldrb	r0, [r0, r4]
 80158de:	fb91 f1f0 	sdiv	r1, r1, r0
 80158e2:	fb01 f303 	mul.w	r3, r1, r3
 80158e6:	131b      	asrs	r3, r3, #12
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	1ad3      	subs	r3, r2, r3
 80158ec:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80158ee:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 80158f0:	2300      	movs	r3, #0
 80158f2:	71bb      	strb	r3, [r7, #6]
 80158f4:	e06e      	b.n	80159d4 <Auto_Fit+0x7a8>
 80158f6:	bf00      	nop
 80158f8:	20000274 	.word	0x20000274
 80158fc:	20002670 	.word	0x20002670
 8015900:	20000558 	.word	0x20000558
 8015904:	20002692 	.word	0x20002692
 8015908:	2000268c 	.word	0x2000268c
 801590c:	20002690 	.word	0x20002690
 8015910:	2000053c 	.word	0x2000053c
 8015914:	2000266c 	.word	0x2000266c
 8015918:	2000266e 	.word	0x2000266e
        WaveProcess();
 801591c:	f7fe ffa4 	bl	8014868 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 8015920:	797b      	ldrb	r3, [r7, #5]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d114      	bne.n	8015950 <Auto_Fit+0x724>
 8015926:	4b38      	ldr	r3, [pc, #224]	; (8015a08 <Auto_Fit+0x7dc>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b3b      	cmp	r3, #59	; 0x3b
 801592c:	dc10      	bgt.n	8015950 <Auto_Fit+0x724>
 801592e:	4b37      	ldr	r3, [pc, #220]	; (8015a0c <Auto_Fit+0x7e0>)
 8015930:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015934:	2b05      	cmp	r3, #5
 8015936:	dd0b      	ble.n	8015950 <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8015938:	2005      	movs	r0, #5
 801593a:	f7f6 fe9f 	bl	800c67c <Set_Base>
          List[TIM_BASE].Val = 5;
 801593e:	4b33      	ldr	r3, [pc, #204]	; (8015a0c <Auto_Fit+0x7e0>)
 8015940:	2205      	movs	r2, #5
 8015942:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8015944:	f7fe ff90 	bl	8014868 <WaveProcess>
          Update_Proc_All();
 8015948:	f7fe fc16 	bl	8014178 <Update_Proc_All>
          k=1;
 801594c:	2301      	movs	r3, #1
 801594e:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 8015950:	4b2d      	ldr	r3, [pc, #180]	; (8015a08 <Auto_Fit+0x7dc>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2bb4      	cmp	r3, #180	; 0xb4
 8015956:	dd1b      	ble.n	8015990 <Auto_Fit+0x764>
 8015958:	4b2c      	ldr	r3, [pc, #176]	; (8015a0c <Auto_Fit+0x7e0>)
 801595a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801595e:	2b02      	cmp	r3, #2
 8015960:	dd16      	ble.n	8015990 <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 8015962:	4b2a      	ldr	r3, [pc, #168]	; (8015a0c <Auto_Fit+0x7e0>)
 8015964:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015968:	b29b      	uxth	r3, r3
 801596a:	3b01      	subs	r3, #1
 801596c:	b29b      	uxth	r3, r3
 801596e:	b21a      	sxth	r2, r3
 8015970:	4b26      	ldr	r3, [pc, #152]	; (8015a0c <Auto_Fit+0x7e0>)
 8015972:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8015974:	4b25      	ldr	r3, [pc, #148]	; (8015a0c <Auto_Fit+0x7e0>)
 8015976:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801597a:	4618      	mov	r0, r3
 801597c:	f7f6 fe7e 	bl	800c67c <Set_Base>
          WaveProcess();
 8015980:	f7fe ff72 	bl	8014868 <WaveProcess>
                 Update_Proc_All();
 8015984:	f7fe fbf8 	bl	8014178 <Update_Proc_All>
          HAL_Delay(50);
 8015988:	2032      	movs	r0, #50	; 0x32
 801598a:	f002 fbaf 	bl	80180ec <HAL_Delay>
 801598e:	e01e      	b.n	80159ce <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 8015990:	4b1d      	ldr	r3, [pc, #116]	; (8015a08 <Auto_Fit+0x7dc>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	2b4f      	cmp	r3, #79	; 0x4f
 8015996:	dc1a      	bgt.n	80159ce <Auto_Fit+0x7a2>
 8015998:	4b1c      	ldr	r3, [pc, #112]	; (8015a0c <Auto_Fit+0x7e0>)
 801599a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801599e:	2b0a      	cmp	r3, #10
 80159a0:	dc15      	bgt.n	80159ce <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80159a2:	4b1a      	ldr	r3, [pc, #104]	; (8015a0c <Auto_Fit+0x7e0>)
 80159a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	3301      	adds	r3, #1
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	b21a      	sxth	r2, r3
 80159b0:	4b16      	ldr	r3, [pc, #88]	; (8015a0c <Auto_Fit+0x7e0>)
 80159b2:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80159b4:	4b15      	ldr	r3, [pc, #84]	; (8015a0c <Auto_Fit+0x7e0>)
 80159b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7f6 fe5e 	bl	800c67c <Set_Base>
          WaveProcess();
 80159c0:	f7fe ff52 	bl	8014868 <WaveProcess>
                 Update_Proc_All();
 80159c4:	f7fe fbd8 	bl	8014178 <Update_Proc_All>
          HAL_Delay(50);
 80159c8:	2032      	movs	r0, #50	; 0x32
 80159ca:	f002 fb8f 	bl	80180ec <HAL_Delay>
      for(j=0;j<11;j++){
 80159ce:	79bb      	ldrb	r3, [r7, #6]
 80159d0:	3301      	adds	r3, #1
 80159d2:	71bb      	strb	r3, [r7, #6]
 80159d4:	79bb      	ldrb	r3, [r7, #6]
 80159d6:	2b0a      	cmp	r3, #10
 80159d8:	d9a0      	bls.n	801591c <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80159da:	f9b7 3000 	ldrsh.w	r3, [r7]
 80159de:	2b13      	cmp	r3, #19
 80159e0:	dc0b      	bgt.n	80159fa <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80159e2:	4b0a      	ldr	r3, [pc, #40]	; (8015a0c <Auto_Fit+0x7e0>)
 80159e4:	2205      	movs	r2, #5
 80159e6:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80159e8:	4b08      	ldr	r3, [pc, #32]	; (8015a0c <Auto_Fit+0x7e0>)
 80159ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7f6 fe44 	bl	800c67c <Set_Base>
        HAL_Delay(50);
 80159f4:	2032      	movs	r0, #50	; 0x32
 80159f6:	f002 fb79 	bl	80180ec <HAL_Delay>
      }
       Update_Proc_All();
 80159fa:	f7fe fbbd 	bl	8014178 <Update_Proc_All>
  }
}
 80159fe:	bf00      	nop
 8015a00:	370c      	adds	r7, #12
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd90      	pop	{r4, r7, pc}
 8015a06:	bf00      	nop
 8015a08:	20002684 	.word	0x20002684
 8015a0c:	20000274 	.word	0x20000274

08015a10 <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	af00      	add	r7, sp, #0
	Touch_SPI();
 8015a14:	f000 f810 	bl	8015a38 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8015a18:	2200      	movs	r2, #0
 8015a1a:	2140      	movs	r1, #64	; 0x40
 8015a1c:	4805      	ldr	r0, [pc, #20]	; (8015a34 <Init_Touch+0x24>)
 8015a1e:	f003 ff43 	bl	80198a8 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015a22:	2201      	movs	r2, #1
 8015a24:	2140      	movs	r1, #64	; 0x40
 8015a26:	4803      	ldr	r0, [pc, #12]	; (8015a34 <Init_Touch+0x24>)
 8015a28:	f003 ff3e 	bl	80198a8 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015a2c:	f000 f814 	bl	8015a58 <LCD_SPI>
}
 8015a30:	bf00      	nop
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	40020400 	.word	0x40020400

08015a38 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8015a3c:	4b05      	ldr	r3, [pc, #20]	; (8015a54 <Touch_SPI+0x1c>)
 8015a3e:	2200      	movs	r2, #0
 8015a40:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8015a42:	4b04      	ldr	r3, [pc, #16]	; (8015a54 <Touch_SPI+0x1c>)
 8015a44:	2218      	movs	r2, #24
 8015a46:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a48:	4802      	ldr	r0, [pc, #8]	; (8015a54 <Touch_SPI+0x1c>)
 8015a4a:	f006 faf1 	bl	801c030 <HAL_SPI_Init>
}
 8015a4e:	bf00      	nop
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	20006868 	.word	0x20006868

08015a58 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8015a5c:	4b05      	ldr	r3, [pc, #20]	; (8015a74 <LCD_SPI+0x1c>)
 8015a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a62:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8015a64:	4b03      	ldr	r3, [pc, #12]	; (8015a74 <LCD_SPI+0x1c>)
 8015a66:	2210      	movs	r2, #16
 8015a68:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a6a:	4802      	ldr	r0, [pc, #8]	; (8015a74 <LCD_SPI+0x1c>)
 8015a6c:	f006 fae0 	bl	801c030 <HAL_SPI_Init>
}
 8015a70:	bf00      	nop
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	20006868 	.word	0x20006868

08015a78 <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	4603      	mov	r3, r0
 8015a80:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 8015a82:	1df9      	adds	r1, r7, #7
 8015a84:	2301      	movs	r3, #1
 8015a86:	2201      	movs	r2, #1
 8015a88:	480e      	ldr	r0, [pc, #56]	; (8015ac4 <read_2046+0x4c>)
 8015a8a:	f006 fb5a 	bl	801c142 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 8015a8e:	2301      	movs	r3, #1
 8015a90:	2202      	movs	r2, #2
 8015a92:	490d      	ldr	r1, [pc, #52]	; (8015ac8 <read_2046+0x50>)
 8015a94:	480b      	ldr	r0, [pc, #44]	; (8015ac4 <read_2046+0x4c>)
 8015a96:	f006 fc90 	bl	801c3ba <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 8015a9a:	4b0b      	ldr	r3, [pc, #44]	; (8015ac8 <read_2046+0x50>)
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	021b      	lsls	r3, r3, #8
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	4b08      	ldr	r3, [pc, #32]	; (8015ac8 <read_2046+0x50>)
 8015aa6:	785b      	ldrb	r3, [r3, #1]
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	4413      	add	r3, r2
 8015aac:	b29b      	uxth	r3, r3
 8015aae:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 8015ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015ab4:	10db      	asrs	r3, r3, #3
 8015ab6:	81fb      	strh	r3, [r7, #14]
	return xyz;
 8015ab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3710      	adds	r7, #16
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	20006868 	.word	0x20006868
 8015ac8:	200066a8 	.word	0x200066a8

08015acc <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 8015ada:	f7ff ffad 	bl	8015a38 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8015ade:	2200      	movs	r2, #0
 8015ae0:	2140      	movs	r1, #64	; 0x40
 8015ae2:	481f      	ldr	r0, [pc, #124]	; (8015b60 <Touch_Read+0x94>)
 8015ae4:	f003 fee0 	bl	80198a8 <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 8015ae8:	20b0      	movs	r0, #176	; 0xb0
 8015aea:	f7ff ffc5 	bl	8015a78 <read_2046>
 8015aee:	4603      	mov	r3, r0
 8015af0:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 8015af2:	20c0      	movs	r0, #192	; 0xc0
 8015af4:	f7ff ffc0 	bl	8015a78 <read_2046>
 8015af8:	4603      	mov	r3, r0
 8015afa:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 8015afc:	89bb      	ldrh	r3, [r7, #12]
 8015afe:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 8015b06:	89fa      	ldrh	r2, [r7, #14]
 8015b08:	897b      	ldrh	r3, [r7, #10]
 8015b0a:	1ad3      	subs	r3, r2, r3
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 8015b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b14:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8015b18:	db0d      	blt.n	8015b36 <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 8015b1a:	20d0      	movs	r0, #208	; 0xd0
 8015b1c:	f7ff ffac 	bl	8015a78 <read_2046>
 8015b20:	4603      	mov	r3, r0
 8015b22:	461a      	mov	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 8015b28:	2090      	movs	r0, #144	; 0x90
 8015b2a:	f7ff ffa5 	bl	8015a78 <read_2046>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	461a      	mov	r2, r3
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015b36:	2201      	movs	r2, #1
 8015b38:	2140      	movs	r1, #64	; 0x40
 8015b3a:	4809      	ldr	r0, [pc, #36]	; (8015b60 <Touch_Read+0x94>)
 8015b3c:	f003 feb4 	bl	80198a8 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015b40:	f7ff ff8a 	bl	8015a58 <LCD_SPI>

	return (press<400)?0:1;
 8015b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b48:	f240 128f 	movw	r2, #399	; 0x18f
 8015b4c:	4293      	cmp	r3, r2
 8015b4e:	bfcc      	ite	gt
 8015b50:	2301      	movgt	r3, #1
 8015b52:	2300      	movle	r3, #0
 8015b54:	b2db      	uxtb	r3, r3
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	3710      	adds	r7, #16
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}
 8015b5e:	bf00      	nop
 8015b60:	40020400 	.word	0x40020400

08015b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015b72:	f002 fa49 	bl	8018008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015b76:	f001 f863 	bl	8016c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015b7a:	f001 fc05 	bl	8017388 <MX_GPIO_Init>
  MX_DMA_Init();
 8015b7e:	f001 fbcd 	bl	801731c <MX_DMA_Init>
  MX_ADC1_Init();
 8015b82:	f001 f8d1 	bl	8016d28 <MX_ADC1_Init>
  MX_ADC2_Init();
 8015b86:	f001 f921 	bl	8016dcc <MX_ADC2_Init>
  MX_DAC_Init();
 8015b8a:	f001 f971 	bl	8016e70 <MX_DAC_Init>
  MX_SPI2_Init();
 8015b8e:	f001 f9ad 	bl	8016eec <MX_SPI2_Init>
  MX_SPI3_Init();
 8015b92:	f001 f9e1 	bl	8016f58 <MX_SPI3_Init>
  MX_TIM1_Init();
 8015b96:	f001 fa17 	bl	8016fc8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8015b9a:	f001 fa8b 	bl	80170b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8015b9e:	f001 fae9 	bl	8017174 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8015ba2:	f00f fe4b 	bl	802583c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8015ba6:	f001 fb73 	bl	8017290 <MX_TIM7_Init>
  MX_FATFS_Init();
 8015baa:	f009 fbdd 	bl	801f368 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 8015bae:	4bb1      	ldr	r3, [pc, #708]	; (8015e74 <main+0x310>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	681a      	ldr	r2, [r3, #0]
 8015bb4:	4baf      	ldr	r3, [pc, #700]	; (8015e74 <main+0x310>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	f022 0201 	bic.w	r2, r2, #1
 8015bbc:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 8015bbe:	4bad      	ldr	r3, [pc, #692]	; (8015e74 <main+0x310>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 8015bc6:	683a      	ldr	r2, [r7, #0]
 8015bc8:	4bab      	ldr	r3, [pc, #684]	; (8015e78 <main+0x314>)
 8015bca:	4013      	ands	r3, r2
 8015bcc:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8015bd4:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 8015bd6:	4ba7      	ldr	r3, [pc, #668]	; (8015e74 <main+0x310>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	683a      	ldr	r2, [r7, #0]
 8015bdc:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 8015bde:	4ba5      	ldr	r3, [pc, #660]	; (8015e74 <main+0x310>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	4aa6      	ldr	r2, [pc, #664]	; (8015e7c <main+0x318>)
 8015be4:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 8015be6:	4ba6      	ldr	r3, [pc, #664]	; (8015e80 <main+0x31c>)
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	4ba2      	ldr	r3, [pc, #648]	; (8015e74 <main+0x310>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015bf0:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 8015bf2:	4ba0      	ldr	r3, [pc, #640]	; (8015e74 <main+0x310>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015bfa:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 8015bfc:	4b9d      	ldr	r3, [pc, #628]	; (8015e74 <main+0x310>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	4b9c      	ldr	r3, [pc, #624]	; (8015e74 <main+0x310>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	f042 0201 	orr.w	r2, r2, #1
 8015c0a:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 8015c0c:	f7fb fcf2 	bl	80115f4 <Init_LCD>
  Init_Touch();
 8015c10:	f7ff fefe 	bl	8015a10 <Init_Touch>

  SetColor(BLK, WHT);
 8015c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c18:	2000      	movs	r0, #0
 8015c1a:	f7f8 f9d9 	bl	800dfd0 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8015c1e:	4b99      	ldr	r3, [pc, #612]	; (8015e84 <main+0x320>)
 8015c20:	2200      	movs	r2, #0
 8015c22:	215a      	movs	r1, #90	; 0x5a
 8015c24:	2008      	movs	r0, #8
 8015c26:	f7f8 f97b 	bl	800df20 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8015c2a:	4b97      	ldr	r3, [pc, #604]	; (8015e88 <main+0x324>)
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	215a      	movs	r1, #90	; 0x5a
 8015c30:	20b8      	movs	r0, #184	; 0xb8
 8015c32:	f7f8 f975 	bl	800df20 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8015c36:	4b95      	ldr	r3, [pc, #596]	; (8015e8c <main+0x328>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	2146      	movs	r1, #70	; 0x46
 8015c3c:	2008      	movs	r0, #8
 8015c3e:	f7f8 f96f 	bl	800df20 <DispStr8x14>

  HAL_Delay(1000);
 8015c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015c46:	f002 fa51 	bl	80180ec <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8015c4a:	f7fa ff33 	bl	8010ab4 <Read_CalFlag>

  if(Cal_Flag == 1)
 8015c4e:	4b90      	ldr	r3, [pc, #576]	; (8015e90 <main+0x32c>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d10f      	bne.n	8015c76 <main+0x112>
  {
	  Cal_Flag = 0;
 8015c56:	4b8e      	ldr	r3, [pc, #568]	; (8015e90 <main+0x32c>)
 8015c58:	2200      	movs	r2, #0
 8015c5a:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8015c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c60:	2000      	movs	r0, #0
 8015c62:	f7f8 f9b5 	bl	800dfd0 <SetColor>
	  Zero_Align();                              //set zero
 8015c66:	f7fe fd09 	bl	801467c <Zero_Align>
	  Restore();                                 //restore list
 8015c6a:	f7fb f935 	bl	8010ed8 <Restore>
	  Save_Parameter();                          //save list
 8015c6e:	f7fa ff49 	bl	8010b04 <Save_Parameter>
	  Save_Kpg();
 8015c72:	f7fb f875 	bl	8010d60 <Save_Kpg>
  }
  Read_Kpg();
 8015c76:	f7fb f8ed 	bl	8010e54 <Read_Kpg>
  Read_Parameter();
 8015c7a:	f7fa ffe3 	bl	8010c44 <Read_Parameter>
  File_Num();
 8015c7e:	f7f9 fc53 	bl	800f528 <File_Num>
  memcpy(Data, DEMO, 310);
 8015c82:	f44f 729b 	mov.w	r2, #310	; 0x136
 8015c86:	4983      	ldr	r1, [pc, #524]	; (8015e94 <main+0x330>)
 8015c88:	4883      	ldr	r0, [pc, #524]	; (8015e98 <main+0x334>)
 8015c8a:	f010 fbbd 	bl	8026408 <memcpy>

  LCD_ClrScrn(GRY);
 8015c8e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8015c92:	f7fb fdc5 	bl	8011820 <LCD_ClrScrn>
  Update_Title();
 8015c96:	f7fb ff65 	bl	8011b64 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 8015c9a:	4b80      	ldr	r3, [pc, #512]	; (8015e9c <main+0x338>)
 8015c9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8015ca0:	f043 0320 	orr.w	r3, r3, #32
 8015ca4:	b2da      	uxtb	r2, r3
 8015ca6:	4b7d      	ldr	r3, [pc, #500]	; (8015e9c <main+0x338>)
 8015ca8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 8015cac:	4b7b      	ldr	r3, [pc, #492]	; (8015e9c <main+0x338>)
 8015cae:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	0112      	lsls	r2, r2, #4
 8015cb8:	1ad3      	subs	r3, r2, r3
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	b21a      	sxth	r2, r3
 8015cc0:	4b77      	ldr	r3, [pc, #476]	; (8015ea0 <main+0x33c>)
 8015cc2:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8015cc4:	4877      	ldr	r0, [pc, #476]	; (8015ea4 <main+0x340>)
 8015cc6:	f007 f8c9 	bl	801ce5c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8015cca:	4b74      	ldr	r3, [pc, #464]	; (8015e9c <main+0x338>)
 8015ccc:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d007      	beq.n	8015ce4 <main+0x180>
 8015cd4:	4b72      	ldr	r3, [pc, #456]	; (8015ea0 <main+0x33c>)
 8015cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d102      	bne.n	8015ce4 <main+0x180>
	    {
	      StdBy_Flag = 1;
 8015cde:	4b72      	ldr	r3, [pc, #456]	; (8015ea8 <main+0x344>)
 8015ce0:	2201      	movs	r2, #1
 8015ce2:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 8015ce4:	f7fc feaa 	bl	8012a3c <Update_Detail>
	    Update_Blink();
 8015ce8:	f7fb ff90 	bl	8011c0c <Update_Blink>
	    WaveProcess();
 8015cec:	f7fe fdbc 	bl	8014868 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 8015cf0:	496e      	ldr	r1, [pc, #440]	; (8015eac <main+0x348>)
 8015cf2:	486f      	ldr	r0, [pc, #444]	; (8015eb0 <main+0x34c>)
 8015cf4:	f7f7 fef0 	bl	800dad8 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8015cf8:	4b6e      	ldr	r3, [pc, #440]	; (8015eb4 <main+0x350>)
 8015cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d01c      	beq.n	8015d3c <main+0x1d8>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 8015d02:	4b6c      	ldr	r3, [pc, #432]	; (8015eb4 <main+0x350>)
 8015d04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d08:	4b64      	ldr	r3, [pc, #400]	; (8015e9c <main+0x338>)
 8015d0a:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8015d0c:	4b63      	ldr	r3, [pc, #396]	; (8015e9c <main+0x338>)
 8015d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d12:	f043 0320 	orr.w	r3, r3, #32
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	4b60      	ldr	r3, [pc, #384]	; (8015e9c <main+0x338>)
 8015d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8015d1e:	4b66      	ldr	r3, [pc, #408]	; (8015eb8 <main+0x354>)
 8015d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d24:	4b63      	ldr	r3, [pc, #396]	; (8015eb4 <main+0x350>)
 8015d26:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8015d28:	f7fb ff1c 	bl	8011b64 <Update_Title>
	      Current=TIM_BASE_Val;
 8015d2c:	4b61      	ldr	r3, [pc, #388]	; (8015eb4 <main+0x350>)
 8015d2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d32:	4b61      	ldr	r3, [pc, #388]	; (8015eb8 <main+0x354>)
 8015d34:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8015d36:	4b5f      	ldr	r3, [pc, #380]	; (8015eb4 <main+0x350>)
 8015d38:	2200      	movs	r2, #0
 8015d3a:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8015d3c:	4b5f      	ldr	r3, [pc, #380]	; (8015ebc <main+0x358>)
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	b2db      	uxtb	r3, r3
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d0c1      	beq.n	8015cca <main+0x166>
	    {
	      StdBy_Flag = 0;
 8015d46:	4b58      	ldr	r3, [pc, #352]	; (8015ea8 <main+0x344>)
 8015d48:	2200      	movs	r2, #0
 8015d4a:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8015d4c:	4b5c      	ldr	r3, [pc, #368]	; (8015ec0 <main+0x35c>)
 8015d4e:	220a      	movs	r2, #10
 8015d50:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8015d52:	4b59      	ldr	r3, [pc, #356]	; (8015eb8 <main+0x354>)
 8015d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d58:	461a      	mov	r2, r3
 8015d5a:	4b5a      	ldr	r3, [pc, #360]	; (8015ec4 <main+0x360>)
 8015d5c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015d60:	4a4e      	ldr	r2, [pc, #312]	; (8015e9c <main+0x338>)
 8015d62:	00db      	lsls	r3, r3, #3
 8015d64:	4413      	add	r3, r2
 8015d66:	799b      	ldrb	r3, [r3, #6]
 8015d68:	4a53      	ldr	r2, [pc, #332]	; (8015eb8 <main+0x354>)
 8015d6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d6e:	4611      	mov	r1, r2
 8015d70:	4a54      	ldr	r2, [pc, #336]	; (8015ec4 <main+0x360>)
 8015d72:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8015d76:	4610      	mov	r0, r2
 8015d78:	f043 0320 	orr.w	r3, r3, #32
 8015d7c:	b2d9      	uxtb	r1, r3
 8015d7e:	4a47      	ldr	r2, [pc, #284]	; (8015e9c <main+0x338>)
 8015d80:	00c3      	lsls	r3, r0, #3
 8015d82:	4413      	add	r3, r2
 8015d84:	460a      	mov	r2, r1
 8015d86:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 8015d88:	4b4c      	ldr	r3, [pc, #304]	; (8015ebc <main+0x358>)
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	3b01      	subs	r3, #1
 8015d90:	2b09      	cmp	r3, #9
 8015d92:	f200 8712 	bhi.w	8016bba <main+0x1056>
 8015d96:	a201      	add	r2, pc, #4	; (adr r2, 8015d9c <main+0x238>)
 8015d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d9c:	08015e0d 	.word	0x08015e0d
 8015da0:	08016121 	.word	0x08016121
 8015da4:	08016279 	.word	0x08016279
 8015da8:	08016327 	.word	0x08016327
 8015dac:	080163dd 	.word	0x080163dd
 8015db0:	08016783 	.word	0x08016783
 8015db4:	08016bbb 	.word	0x08016bbb
 8015db8:	08015de7 	.word	0x08015de7
 8015dbc:	08015dc5 	.word	0x08015dc5
 8015dc0:	0801610d 	.word	0x0801610d
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8015dc4:	4b35      	ldr	r3, [pc, #212]	; (8015e9c <main+0x338>)
 8015dc6:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7f9 feb6 	bl	800fb3c <Save_Bmp>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8015dd4:	88fb      	ldrh	r3, [r7, #6]
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7fe f957 	bl	801408c <DispFileInfo>
	         DispBMPInfo();
 8015dde:	f7fe f985 	bl	80140ec <DispBMPInfo>
	        break;
 8015de2:	f000 beea 	b.w	8016bba <main+0x1056>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8015de6:	2300      	movs	r3, #0
 8015de8:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8015dea:	4b37      	ldr	r3, [pc, #220]	; (8015ec8 <main+0x364>)
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	f003 0304 	and.w	r3, r3, #4
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d003      	beq.n	8015dfe <main+0x29a>
 8015df6:	f7f8 fe71 	bl	800eadc <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8015dfa:	f000 bede 	b.w	8016bba <main+0x1056>
	         Dialog_Pop("Save All ParamTab?");
 8015dfe:	4833      	ldr	r0, [pc, #204]	; (8015ecc <main+0x368>)
 8015e00:	f7f8 fe98 	bl	800eb34 <Dialog_Pop>
	         Pop_Num = 1;
 8015e04:	2301      	movs	r3, #1
 8015e06:	713b      	strb	r3, [r7, #4]
	       break;
 8015e08:	f000 bed7 	b.w	8016bba <main+0x1056>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8015e0c:	4b2a      	ldr	r3, [pc, #168]	; (8015eb8 <main+0x354>)
 8015e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e12:	2b07      	cmp	r3, #7
 8015e14:	f040 8080 	bne.w	8015f18 <main+0x3b4>
 8015e18:	4b1d      	ldr	r3, [pc, #116]	; (8015e90 <main+0x32c>)
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d17b      	bne.n	8015f18 <main+0x3b4>
	       {
	         if(PopType & DAILOG_POP){
 8015e20:	4b29      	ldr	r3, [pc, #164]	; (8015ec8 <main+0x364>)
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	f003 0304 	and.w	r3, r3, #4
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00e      	beq.n	8015e4a <main+0x2e6>
	           if(Pop_Num == 1){
 8015e2c:	793b      	ldrb	r3, [r7, #4]
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d105      	bne.n	8015e3e <main+0x2da>
	             Save_Parameter();
 8015e32:	f7fa fe67 	bl	8010b04 <Save_Parameter>
	             Close_Pop();
 8015e36:	f7f8 fe51 	bl	800eadc <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8015e3a:	f000 bea5 	b.w	8016b88 <main+0x1024>
	             Close_Pop();
 8015e3e:	f7f8 fe4d 	bl	800eadc <Close_Pop>
	             List_Pop();
 8015e42:	f7f8 fe61 	bl	800eb08 <List_Pop>
	         break;
 8015e46:	f000 be9f 	b.w	8016b88 <main+0x1024>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8015e4a:	4b1f      	ldr	r3, [pc, #124]	; (8015ec8 <main+0x364>)
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	f003 0302 	and.w	r3, r3, #2
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d03c      	beq.n	8015ed0 <main+0x36c>
 8015e56:	4b1b      	ldr	r3, [pc, #108]	; (8015ec4 <main+0x360>)
 8015e58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e5c:	2b28      	cmp	r3, #40	; 0x28
 8015e5e:	d137      	bne.n	8015ed0 <main+0x36c>
	           Restore_CalPar();
 8015e60:	f7fb f8a4 	bl	8010fac <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8015e64:	4819      	ldr	r0, [pc, #100]	; (8015ecc <main+0x368>)
 8015e66:	f7f8 fe65 	bl	800eb34 <Dialog_Pop>
	           Cal_Flag = 1;
 8015e6a:	4b09      	ldr	r3, [pc, #36]	; (8015e90 <main+0x32c>)
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	701a      	strb	r2, [r3, #0]
	         break;
 8015e70:	f000 be8a 	b.w	8016b88 <main+0x1024>
 8015e74:	2000673c 	.word	0x2000673c
 8015e78:	0ffcfffe 	.word	0x0ffcfffe
 8015e7c:	200026a8 	.word	0x200026a8
 8015e80:	200066ac 	.word	0x200066ac
 8015e84:	08000a48 	.word	0x08000a48
 8015e88:	2000055c 	.word	0x2000055c
 8015e8c:	08000a6c 	.word	0x08000a6c
 8015e90:	20000192 	.word	0x20000192
 8015e94:	08000bf4 	.word	0x08000bf4
 8015e98:	20000008 	.word	0x20000008
 8015e9c:	20000274 	.word	0x20000274
 8015ea0:	20002652 	.word	0x20002652
 8015ea4:	20006908 	.word	0x20006908
 8015ea8:	20002658 	.word	0x20002658
 8015eac:	20000140 	.word	0x20000140
 8015eb0:	2000091c 	.word	0x2000091c
 8015eb4:	2000252c 	.word	0x2000252c
 8015eb8:	20002654 	.word	0x20002654
 8015ebc:	2000072e 	.word	0x2000072e
 8015ec0:	20000000 	.word	0x20000000
 8015ec4:	20000514 	.word	0x20000514
 8015ec8:	2000091a 	.word	0x2000091a
 8015ecc:	08000a94 	.word	0x08000a94
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8015ed0:	4baf      	ldr	r3, [pc, #700]	; (8016190 <main+0x62c>)
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	f003 0302 	and.w	r3, r3, #2
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	f000 8655 	beq.w	8016b88 <main+0x1024>
 8015ede:	4bad      	ldr	r3, [pc, #692]	; (8016194 <main+0x630>)
 8015ee0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ee4:	2b27      	cmp	r3, #39	; 0x27
 8015ee6:	f040 864f 	bne.w	8016b88 <main+0x1024>
	           Close_Pop();
 8015eea:	f7f8 fdf7 	bl	800eadc <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8015eee:	48aa      	ldr	r0, [pc, #680]	; (8016198 <main+0x634>)
 8015ef0:	f7f8 fe86 	bl	800ec00 <Calibrate_Pop>
	           Cal_Flag = 1;
 8015ef4:	4ba9      	ldr	r3, [pc, #676]	; (801619c <main+0x638>)
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8015efa:	49a9      	ldr	r1, [pc, #676]	; (80161a0 <main+0x63c>)
 8015efc:	48a9      	ldr	r0, [pc, #676]	; (80161a4 <main+0x640>)
 8015efe:	f7f7 fdeb 	bl	800dad8 <DrawWindow>
	           Zero_Align();
 8015f02:	f7fe fbbb 	bl	801467c <Zero_Align>
	           Update_Proc_All();
 8015f06:	f7fe f937 	bl	8014178 <Update_Proc_All>
	           Close_Pop();
 8015f0a:	f7f8 fde7 	bl	800eadc <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8015f0e:	48a6      	ldr	r0, [pc, #664]	; (80161a8 <main+0x644>)
 8015f10:	f7f8 feac 	bl	800ec6c <CalSave_Pop>
	         break;
 8015f14:	f000 be38 	b.w	8016b88 <main+0x1024>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8015f18:	4ba4      	ldr	r3, [pc, #656]	; (80161ac <main+0x648>)
 8015f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f1e:	2b07      	cmp	r3, #7
 8015f20:	d113      	bne.n	8015f4a <main+0x3e6>
 8015f22:	4b9e      	ldr	r3, [pc, #632]	; (801619c <main+0x638>)
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d10f      	bne.n	8015f4a <main+0x3e6>
	         if(PopType & DAILOG_POP){
 8015f2a:	4b99      	ldr	r3, [pc, #612]	; (8016190 <main+0x62c>)
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	f003 0304 	and.w	r3, r3, #4
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	f000 862a 	beq.w	8016b8c <main+0x1028>
	           Save_Kpg();
 8015f38:	f7fa ff12 	bl	8010d60 <Save_Kpg>
	           Close_Pop();
 8015f3c:	f7f8 fdce 	bl	800eadc <Close_Pop>
	           Cal_Flag = 0;
 8015f40:	4b96      	ldr	r3, [pc, #600]	; (801619c <main+0x638>)
 8015f42:	2200      	movs	r2, #0
 8015f44:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8015f46:	f000 be21 	b.w	8016b8c <main+0x1028>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8015f4a:	4b98      	ldr	r3, [pc, #608]	; (80161ac <main+0x648>)
 8015f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f50:	2b05      	cmp	r3, #5
 8015f52:	d177      	bne.n	8016044 <main+0x4e0>
 8015f54:	4b8e      	ldr	r3, [pc, #568]	; (8016190 <main+0x62c>)
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	f003 0302 	and.w	r3, r3, #2
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d071      	beq.n	8016044 <main+0x4e0>
	         i = 0;
 8015f60:	2300      	movs	r3, #0
 8015f62:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8015f64:	797b      	ldrb	r3, [r7, #5]
 8015f66:	2b09      	cmp	r3, #9
 8015f68:	d101      	bne.n	8015f6e <main+0x40a>
 8015f6a:	f7f8 fdb7 	bl	800eadc <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8015f6e:	4b89      	ldr	r3, [pc, #548]	; (8016194 <main+0x630>)
 8015f70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f74:	2b1d      	cmp	r3, #29
 8015f76:	d107      	bne.n	8015f88 <main+0x424>
 8015f78:	4b8d      	ldr	r3, [pc, #564]	; (80161b0 <main+0x64c>)
 8015f7a:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7f9 fddc 	bl	800fb3c <Save_Bmp>
 8015f84:	4603      	mov	r3, r0
 8015f86:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8015f88:	4b82      	ldr	r3, [pc, #520]	; (8016194 <main+0x630>)
 8015f8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f8e:	2b1e      	cmp	r3, #30
 8015f90:	d107      	bne.n	8015fa2 <main+0x43e>
 8015f92:	4b87      	ldr	r3, [pc, #540]	; (80161b0 <main+0x64c>)
 8015f94:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7f9 fc91 	bl	800f8c0 <Save_Dat>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8015fa2:	4b7c      	ldr	r3, [pc, #496]	; (8016194 <main+0x630>)
 8015fa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fa8:	2b1f      	cmp	r3, #31
 8015faa:	d107      	bne.n	8015fbc <main+0x458>
 8015fac:	4b80      	ldr	r3, [pc, #512]	; (80161b0 <main+0x64c>)
 8015fae:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7f9 fbca 	bl	800f74c <Save_Buf>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8015fbc:	4b75      	ldr	r3, [pc, #468]	; (8016194 <main+0x630>)
 8015fbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fc2:	2b20      	cmp	r3, #32
 8015fc4:	d107      	bne.n	8015fd6 <main+0x472>
 8015fc6:	4b7a      	ldr	r3, [pc, #488]	; (80161b0 <main+0x64c>)
 8015fc8:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7f9 ff11 	bl	800fdf4 <Save_Csv>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8015fd6:	4b6f      	ldr	r3, [pc, #444]	; (8016194 <main+0x630>)
 8015fd8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fdc:	2b21      	cmp	r3, #33	; 0x21
 8015fde:	d107      	bne.n	8015ff0 <main+0x48c>
 8015fe0:	4b73      	ldr	r3, [pc, #460]	; (80161b0 <main+0x64c>)
 8015fe2:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fa f926 	bl	8010238 <Save_Svg>
 8015fec:	4603      	mov	r3, r0
 8015fee:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8015ff0:	4b68      	ldr	r3, [pc, #416]	; (8016194 <main+0x630>)
 8015ff2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015ff6:	2b22      	cmp	r3, #34	; 0x22
 8015ff8:	d107      	bne.n	801600a <main+0x4a6>
 8015ffa:	4b6d      	ldr	r3, [pc, #436]	; (80161b0 <main+0x64c>)
 8015ffc:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016000:	4618      	mov	r0, r3
 8016002:	f7f9 fce7 	bl	800f9d4 <Load_Dat>
 8016006:	4603      	mov	r3, r0
 8016008:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 801600a:	4b62      	ldr	r3, [pc, #392]	; (8016194 <main+0x630>)
 801600c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016010:	2b23      	cmp	r3, #35	; 0x23
 8016012:	d107      	bne.n	8016024 <main+0x4c0>
 8016014:	4b66      	ldr	r3, [pc, #408]	; (80161b0 <main+0x64c>)
 8016016:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 801601a:	4618      	mov	r0, r3
 801601c:	f7f9 fab2 	bl	800f584 <Load_Buf>
 8016020:	4603      	mov	r3, r0
 8016022:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016024:	2300      	movs	r3, #0
 8016026:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016028:	88fb      	ldrh	r3, [r7, #6]
 801602a:	b2db      	uxtb	r3, r3
 801602c:	4618      	mov	r0, r3
 801602e:	f7fe f82d 	bl	801408c <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016032:	4b57      	ldr	r3, [pc, #348]	; (8016190 <main+0x62c>)
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	f003 0304 	and.w	r3, r3, #4
 801603a:	2b00      	cmp	r3, #0
 801603c:	d062      	beq.n	8016104 <main+0x5a0>
 801603e:	f7f8 fd4d 	bl	800eadc <Close_Pop>
 8016042:	e05f      	b.n	8016104 <main+0x5a0>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016044:	4b52      	ldr	r3, [pc, #328]	; (8016190 <main+0x62c>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	f003 0304 	and.w	r3, r3, #4
 801604c:	2b00      	cmp	r3, #0
 801604e:	d00b      	beq.n	8016068 <main+0x504>
 8016050:	797b      	ldrb	r3, [r7, #5]
 8016052:	2b09      	cmp	r3, #9
 8016054:	d008      	beq.n	8016068 <main+0x504>
	         Save_Parameter();
 8016056:	f7fa fd55 	bl	8010b04 <Save_Parameter>
	         Cal_Flag = 0;
 801605a:	4b50      	ldr	r3, [pc, #320]	; (801619c <main+0x638>)
 801605c:	2200      	movs	r2, #0
 801605e:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016060:	f7f8 fd3c 	bl	800eadc <Close_Pop>
	         break;
 8016064:	f000 bda9 	b.w	8016bba <main+0x1056>
	       }
	       else {
	          if(Status & STOP){
 8016068:	4b52      	ldr	r3, [pc, #328]	; (80161b4 <main+0x650>)
 801606a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801606e:	b29b      	uxth	r3, r3
 8016070:	f003 0301 	and.w	r3, r3, #1
 8016074:	2b00      	cmp	r3, #0
 8016076:	d02e      	beq.n	80160d6 <main+0x572>
	            if(Status & LOADM )Status &= ~LOADM;
 8016078:	4b4e      	ldr	r3, [pc, #312]	; (80161b4 <main+0x650>)
 801607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801607e:	b29b      	uxth	r3, r3
 8016080:	f003 0310 	and.w	r3, r3, #16
 8016084:	2b00      	cmp	r3, #0
 8016086:	d007      	beq.n	8016098 <main+0x534>
 8016088:	4b4a      	ldr	r3, [pc, #296]	; (80161b4 <main+0x650>)
 801608a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801608e:	f023 0310 	bic.w	r3, r3, #16
 8016092:	b21a      	sxth	r2, r3
 8016094:	4b47      	ldr	r3, [pc, #284]	; (80161b4 <main+0x650>)
 8016096:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 8016098:	4b46      	ldr	r3, [pc, #280]	; (80161b4 <main+0x650>)
 801609a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801609e:	f023 0301 	bic.w	r3, r3, #1
 80160a2:	b21a      	sxth	r2, r3
 80160a4:	4b43      	ldr	r3, [pc, #268]	; (80161b4 <main+0x650>)
 80160a6:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80160a8:	4b41      	ldr	r3, [pc, #260]	; (80161b0 <main+0x64c>)
 80160aa:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80160ae:	2b04      	cmp	r3, #4
 80160b0:	d101      	bne.n	80160b6 <main+0x552>
 80160b2:	f7f6 fb7b 	bl	800c7ac <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80160b6:	4b3e      	ldr	r3, [pc, #248]	; (80161b0 <main+0x64c>)
 80160b8:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80160bc:	2b03      	cmp	r3, #3
 80160be:	d101      	bne.n	80160c4 <main+0x560>
 80160c0:	f7f6 fb74 	bl	800c7ac <ADC_Start>
	            Norm_Clr = 1;
 80160c4:	4b3c      	ldr	r3, [pc, #240]	; (80161b8 <main+0x654>)
 80160c6:	2201      	movs	r2, #1
 80160c8:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80160ca:	4b3c      	ldr	r3, [pc, #240]	; (80161bc <main+0x658>)
 80160cc:	2201      	movs	r2, #1
 80160ce:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80160d0:	f7fe f852 	bl	8014178 <Update_Proc_All>
 80160d4:	e016      	b.n	8016104 <main+0x5a0>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80160d6:	4b37      	ldr	r3, [pc, #220]	; (80161b4 <main+0x650>)
 80160d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160dc:	f043 0301 	orr.w	r3, r3, #1
 80160e0:	b21a      	sxth	r2, r3
 80160e2:	4b34      	ldr	r3, [pc, #208]	; (80161b4 <main+0x650>)
 80160e4:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80160e6:	4b32      	ldr	r3, [pc, #200]	; (80161b0 <main+0x64c>)
 80160e8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80160ec:	4b34      	ldr	r3, [pc, #208]	; (80161c0 <main+0x65c>)
 80160ee:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 80160f0:	4b2f      	ldr	r3, [pc, #188]	; (80161b0 <main+0x64c>)
 80160f2:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80160f6:	4b33      	ldr	r3, [pc, #204]	; (80161c4 <main+0x660>)
 80160f8:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 80160fa:	4b2d      	ldr	r3, [pc, #180]	; (80161b0 <main+0x64c>)
 80160fc:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016100:	4b31      	ldr	r3, [pc, #196]	; (80161c8 <main+0x664>)
 8016102:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016104:	f7fd fd2c 	bl	8013b60 <DispStatus>
 	       break;
 8016108:	f000 bd57 	b.w	8016bba <main+0x1056>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 801610c:	4b28      	ldr	r3, [pc, #160]	; (80161b0 <main+0x64c>)
 801610e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016112:	2b00      	cmp	r3, #0
 8016114:	f000 853c 	beq.w	8016b90 <main+0x102c>
	        {
	          Auto_Fit();
 8016118:	f7ff f888 	bl	801522c <Auto_Fit>
	        }
	        break;
 801611c:	f000 bd38 	b.w	8016b90 <main+0x102c>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016120:	4b1b      	ldr	r3, [pc, #108]	; (8016190 <main+0x62c>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	f003 0302 	and.w	r3, r3, #2
 8016128:	2b00      	cmp	r3, #0
 801612a:	d111      	bne.n	8016150 <main+0x5ec>
	            if(Cal_Flag){
 801612c:	4b1b      	ldr	r3, [pc, #108]	; (801619c <main+0x638>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <main+0x5de>
	              Cal_Flag = 0;
 8016134:	4b19      	ldr	r3, [pc, #100]	; (801619c <main+0x638>)
 8016136:	2200      	movs	r2, #0
 8016138:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 801613a:	f7f8 fccf 	bl	800eadc <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 801613e:	f000 bd3c 	b.w	8016bba <main+0x1056>
	              Cal_Flag = 0;
 8016142:	4b16      	ldr	r3, [pc, #88]	; (801619c <main+0x638>)
 8016144:	2200      	movs	r2, #0
 8016146:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016148:	f7f8 fcde 	bl	800eb08 <List_Pop>
	        break;
 801614c:	f000 bd35 	b.w	8016bba <main+0x1056>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016150:	f7f8 fcc4 	bl	800eadc <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016154:	4b15      	ldr	r3, [pc, #84]	; (80161ac <main+0x648>)
 8016156:	f9b3 3000 	ldrsh.w	r3, [r3]
 801615a:	2b01      	cmp	r3, #1
 801615c:	d109      	bne.n	8016172 <main+0x60e>
 801615e:	4b14      	ldr	r3, [pc, #80]	; (80161b0 <main+0x64c>)
 8016160:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016164:	f043 0320 	orr.w	r3, r3, #32
 8016168:	b2da      	uxtb	r2, r3
 801616a:	4b11      	ldr	r3, [pc, #68]	; (80161b0 <main+0x64c>)
 801616c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016170:	e03f      	b.n	80161f2 <main+0x68e>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016172:	4b0e      	ldr	r3, [pc, #56]	; (80161ac <main+0x648>)
 8016174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d127      	bne.n	80161cc <main+0x668>
 801617c:	4b0c      	ldr	r3, [pc, #48]	; (80161b0 <main+0x64c>)
 801617e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016182:	f043 0320 	orr.w	r3, r3, #32
 8016186:	b2da      	uxtb	r2, r3
 8016188:	4b09      	ldr	r3, [pc, #36]	; (80161b0 <main+0x64c>)
 801618a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801618e:	e030      	b.n	80161f2 <main+0x68e>
 8016190:	2000091a 	.word	0x2000091a
 8016194:	20000514 	.word	0x20000514
 8016198:	08000aa8 	.word	0x08000aa8
 801619c:	20000192 	.word	0x20000192
 80161a0:	20000140 	.word	0x20000140
 80161a4:	2000091c 	.word	0x2000091c
 80161a8:	08000ac4 	.word	0x08000ac4
 80161ac:	20002654 	.word	0x20002654
 80161b0:	20000274 	.word	0x20000274
 80161b4:	20002656 	.word	0x20002656
 80161b8:	200026a2 	.word	0x200026a2
 80161bc:	20000538 	.word	0x20000538
 80161c0:	20002694 	.word	0x20002694
 80161c4:	20002696 	.word	0x20002696
 80161c8:	20002698 	.word	0x20002698
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80161cc:	4b7d      	ldr	r3, [pc, #500]	; (80163c4 <main+0x860>)
 80161ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80161d2:	4a7d      	ldr	r2, [pc, #500]	; (80163c8 <main+0x864>)
 80161d4:	00db      	lsls	r3, r3, #3
 80161d6:	4413      	add	r3, r2
 80161d8:	799b      	ldrb	r3, [r3, #6]
 80161da:	4a7a      	ldr	r2, [pc, #488]	; (80163c4 <main+0x860>)
 80161dc:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80161e0:	4610      	mov	r0, r2
 80161e2:	f043 0320 	orr.w	r3, r3, #32
 80161e6:	b2d9      	uxtb	r1, r3
 80161e8:	4a77      	ldr	r2, [pc, #476]	; (80163c8 <main+0x864>)
 80161ea:	00c3      	lsls	r3, r0, #3
 80161ec:	4413      	add	r3, r2
 80161ee:	460a      	mov	r2, r1
 80161f0:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80161f2:	4b76      	ldr	r3, [pc, #472]	; (80163cc <main+0x868>)
 80161f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80161f8:	461a      	mov	r2, r3
 80161fa:	4b72      	ldr	r3, [pc, #456]	; (80163c4 <main+0x860>)
 80161fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016200:	2b09      	cmp	r3, #9
 8016202:	d10a      	bne.n	801621a <main+0x6b6>
 8016204:	4b70      	ldr	r3, [pc, #448]	; (80163c8 <main+0x864>)
 8016206:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801620a:	f043 0320 	orr.w	r3, r3, #32
 801620e:	b2da      	uxtb	r2, r3
 8016210:	4b6d      	ldr	r3, [pc, #436]	; (80163c8 <main+0x864>)
 8016212:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016216:	f000 bcd0 	b.w	8016bba <main+0x1056>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 801621a:	4b6c      	ldr	r3, [pc, #432]	; (80163cc <main+0x868>)
 801621c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016220:	2b05      	cmp	r3, #5
 8016222:	d114      	bne.n	801624e <main+0x6ea>
 8016224:	4b67      	ldr	r3, [pc, #412]	; (80163c4 <main+0x860>)
 8016226:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801622a:	4a67      	ldr	r2, [pc, #412]	; (80163c8 <main+0x864>)
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	4413      	add	r3, r2
 8016230:	799b      	ldrb	r3, [r3, #6]
 8016232:	4a64      	ldr	r2, [pc, #400]	; (80163c4 <main+0x860>)
 8016234:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016238:	4610      	mov	r0, r2
 801623a:	f043 0320 	orr.w	r3, r3, #32
 801623e:	b2d9      	uxtb	r1, r3
 8016240:	4a61      	ldr	r2, [pc, #388]	; (80163c8 <main+0x864>)
 8016242:	00c3      	lsls	r3, r0, #3
 8016244:	4413      	add	r3, r2
 8016246:	460a      	mov	r2, r1
 8016248:	719a      	strb	r2, [r3, #6]
	        break;
 801624a:	f000 bcb6 	b.w	8016bba <main+0x1056>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 801624e:	4b5d      	ldr	r3, [pc, #372]	; (80163c4 <main+0x860>)
 8016250:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016254:	4a5c      	ldr	r2, [pc, #368]	; (80163c8 <main+0x864>)
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	4413      	add	r3, r2
 801625a:	799b      	ldrb	r3, [r3, #6]
 801625c:	4a59      	ldr	r2, [pc, #356]	; (80163c4 <main+0x860>)
 801625e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016262:	4610      	mov	r0, r2
 8016264:	f043 0320 	orr.w	r3, r3, #32
 8016268:	b2d9      	uxtb	r1, r3
 801626a:	4a57      	ldr	r2, [pc, #348]	; (80163c8 <main+0x864>)
 801626c:	00c3      	lsls	r3, r0, #3
 801626e:	4413      	add	r3, r2
 8016270:	460a      	mov	r2, r1
 8016272:	719a      	strb	r2, [r3, #6]
	        break;
 8016274:	f000 bca1 	b.w	8016bba <main+0x1056>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016278:	4b55      	ldr	r3, [pc, #340]	; (80163d0 <main+0x86c>)
 801627a:	781b      	ldrb	r3, [r3, #0]
 801627c:	f003 0302 	and.w	r3, r3, #2
 8016280:	2b00      	cmp	r3, #0
 8016282:	d03b      	beq.n	80162fc <main+0x798>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016284:	4b51      	ldr	r3, [pc, #324]	; (80163cc <main+0x868>)
 8016286:	f9b3 3000 	ldrsh.w	r3, [r3]
 801628a:	461a      	mov	r2, r3
 801628c:	4b4d      	ldr	r3, [pc, #308]	; (80163c4 <main+0x860>)
 801628e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016292:	461a      	mov	r2, r3
 8016294:	4b4d      	ldr	r3, [pc, #308]	; (80163cc <main+0x868>)
 8016296:	f9b3 3000 	ldrsh.w	r3, [r3]
 801629a:	4619      	mov	r1, r3
 801629c:	4b4d      	ldr	r3, [pc, #308]	; (80163d4 <main+0x870>)
 801629e:	5c5b      	ldrb	r3, [r3, r1]
 80162a0:	429a      	cmp	r2, r3
 80162a2:	dd0e      	ble.n	80162c2 <main+0x75e>
 80162a4:	4b49      	ldr	r3, [pc, #292]	; (80163cc <main+0x868>)
 80162a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162aa:	4a46      	ldr	r2, [pc, #280]	; (80163c4 <main+0x860>)
 80162ac:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80162b0:	b292      	uxth	r2, r2
 80162b2:	3a01      	subs	r2, #1
 80162b4:	b292      	uxth	r2, r2
 80162b6:	b211      	sxth	r1, r2
 80162b8:	4a42      	ldr	r2, [pc, #264]	; (80163c4 <main+0x860>)
 80162ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 80162be:	f000 bc7c 	b.w	8016bba <main+0x1056>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80162c2:	4b42      	ldr	r3, [pc, #264]	; (80163cc <main+0x868>)
 80162c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162c8:	461a      	mov	r2, r3
 80162ca:	4b3e      	ldr	r3, [pc, #248]	; (80163c4 <main+0x860>)
 80162cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	4b3e      	ldr	r3, [pc, #248]	; (80163cc <main+0x868>)
 80162d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162d8:	4619      	mov	r1, r3
 80162da:	4b3f      	ldr	r3, [pc, #252]	; (80163d8 <main+0x874>)
 80162dc:	5c5b      	ldrb	r3, [r3, r1]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	4413      	add	r3, r2
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	3b01      	subs	r3, #1
 80162e6:	b299      	uxth	r1, r3
 80162e8:	4b38      	ldr	r3, [pc, #224]	; (80163cc <main+0x868>)
 80162ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ee:	461a      	mov	r2, r3
 80162f0:	b209      	sxth	r1, r1
 80162f2:	4b34      	ldr	r3, [pc, #208]	; (80163c4 <main+0x860>)
 80162f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 80162f8:	f000 bc5f 	b.w	8016bba <main+0x1056>
	          if (Current > 0) Current--;
 80162fc:	4b33      	ldr	r3, [pc, #204]	; (80163cc <main+0x868>)
 80162fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016302:	2b00      	cmp	r3, #0
 8016304:	dd0a      	ble.n	801631c <main+0x7b8>
 8016306:	4b31      	ldr	r3, [pc, #196]	; (80163cc <main+0x868>)
 8016308:	f9b3 3000 	ldrsh.w	r3, [r3]
 801630c:	b29b      	uxth	r3, r3
 801630e:	3b01      	subs	r3, #1
 8016310:	b29b      	uxth	r3, r3
 8016312:	b21a      	sxth	r2, r3
 8016314:	4b2d      	ldr	r3, [pc, #180]	; (80163cc <main+0x868>)
 8016316:	801a      	strh	r2, [r3, #0]
	        break;
 8016318:	f000 bc4f 	b.w	8016bba <main+0x1056>
	          else             Current = ST;
 801631c:	4b2b      	ldr	r3, [pc, #172]	; (80163cc <main+0x868>)
 801631e:	2207      	movs	r2, #7
 8016320:	801a      	strh	r2, [r3, #0]
	        break;
 8016322:	f000 bc4a 	b.w	8016bba <main+0x1056>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016326:	4b2a      	ldr	r3, [pc, #168]	; (80163d0 <main+0x86c>)
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	f003 0302 	and.w	r3, r3, #2
 801632e:	2b00      	cmp	r3, #0
 8016330:	d034      	beq.n	801639c <main+0x838>
	          MenuNow[Current]++;
 8016332:	4b26      	ldr	r3, [pc, #152]	; (80163cc <main+0x868>)
 8016334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016338:	4a22      	ldr	r2, [pc, #136]	; (80163c4 <main+0x860>)
 801633a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 801633e:	b292      	uxth	r2, r2
 8016340:	3201      	adds	r2, #1
 8016342:	b292      	uxth	r2, r2
 8016344:	b211      	sxth	r1, r2
 8016346:	4a1f      	ldr	r2, [pc, #124]	; (80163c4 <main+0x860>)
 8016348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 801634c:	4b1f      	ldr	r3, [pc, #124]	; (80163cc <main+0x868>)
 801634e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016352:	461a      	mov	r2, r3
 8016354:	4b1b      	ldr	r3, [pc, #108]	; (80163c4 <main+0x860>)
 8016356:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801635a:	461a      	mov	r2, r3
 801635c:	4b1b      	ldr	r3, [pc, #108]	; (80163cc <main+0x868>)
 801635e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016362:	4619      	mov	r1, r3
 8016364:	4b1b      	ldr	r3, [pc, #108]	; (80163d4 <main+0x870>)
 8016366:	5c5b      	ldrb	r3, [r3, r1]
 8016368:	4619      	mov	r1, r3
 801636a:	4b18      	ldr	r3, [pc, #96]	; (80163cc <main+0x868>)
 801636c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016370:	4618      	mov	r0, r3
 8016372:	4b19      	ldr	r3, [pc, #100]	; (80163d8 <main+0x874>)
 8016374:	5c1b      	ldrb	r3, [r3, r0]
 8016376:	440b      	add	r3, r1
 8016378:	429a      	cmp	r2, r3
 801637a:	f2c0 840b 	blt.w	8016b94 <main+0x1030>
	            MenuNow[Current] = MU_BEGN[Current];
 801637e:	4b13      	ldr	r3, [pc, #76]	; (80163cc <main+0x868>)
 8016380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016384:	461a      	mov	r2, r3
 8016386:	4b13      	ldr	r3, [pc, #76]	; (80163d4 <main+0x870>)
 8016388:	5c99      	ldrb	r1, [r3, r2]
 801638a:	4b10      	ldr	r3, [pc, #64]	; (80163cc <main+0x868>)
 801638c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016390:	461a      	mov	r2, r3
 8016392:	b209      	sxth	r1, r1
 8016394:	4b0b      	ldr	r3, [pc, #44]	; (80163c4 <main+0x860>)
 8016396:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 801639a:	e3fb      	b.n	8016b94 <main+0x1030>
	          if (Current < 7) Current++;
 801639c:	4b0b      	ldr	r3, [pc, #44]	; (80163cc <main+0x868>)
 801639e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163a2:	2b06      	cmp	r3, #6
 80163a4:	dc09      	bgt.n	80163ba <main+0x856>
 80163a6:	4b09      	ldr	r3, [pc, #36]	; (80163cc <main+0x868>)
 80163a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163ac:	b29b      	uxth	r3, r3
 80163ae:	3301      	adds	r3, #1
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	b21a      	sxth	r2, r3
 80163b4:	4b05      	ldr	r3, [pc, #20]	; (80163cc <main+0x868>)
 80163b6:	801a      	strh	r2, [r3, #0]
	        break;
 80163b8:	e3ec      	b.n	8016b94 <main+0x1030>
	          else             Current = YN;
 80163ba:	4b04      	ldr	r3, [pc, #16]	; (80163cc <main+0x868>)
 80163bc:	2200      	movs	r2, #0
 80163be:	801a      	strh	r2, [r3, #0]
	        break;
 80163c0:	e3e8      	b.n	8016b94 <main+0x1030>
 80163c2:	bf00      	nop
 80163c4:	20000514 	.word	0x20000514
 80163c8:	20000274 	.word	0x20000274
 80163cc:	20002654 	.word	0x20002654
 80163d0:	2000091a 	.word	0x2000091a
 80163d4:	08001fdc 	.word	0x08001fdc
 80163d8:	08001fe4 	.word	0x08001fe4

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80163dc:	4ba8      	ldr	r3, [pc, #672]	; (8016680 <main+0xb1c>)
 80163de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163e2:	2b07      	cmp	r3, #7
 80163e4:	d106      	bne.n	80163f4 <main+0x890>
 80163e6:	4ba7      	ldr	r3, [pc, #668]	; (8016684 <main+0xb20>)
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	f003 0302 	and.w	r3, r3, #2
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f000 83d2 	beq.w	8016b98 <main+0x1034>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80163f4:	4ba2      	ldr	r3, [pc, #648]	; (8016680 <main+0xb1c>)
 80163f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163fa:	461a      	mov	r2, r3
 80163fc:	4ba2      	ldr	r3, [pc, #648]	; (8016688 <main+0xb24>)
 80163fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016402:	4aa2      	ldr	r2, [pc, #648]	; (801668c <main+0xb28>)
 8016404:	00db      	lsls	r3, r3, #3
 8016406:	4413      	add	r3, r2
 8016408:	799b      	ldrb	r3, [r3, #6]
 801640a:	4a9d      	ldr	r2, [pc, #628]	; (8016680 <main+0xb1c>)
 801640c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016410:	4611      	mov	r1, r2
 8016412:	4a9d      	ldr	r2, [pc, #628]	; (8016688 <main+0xb24>)
 8016414:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016418:	4610      	mov	r0, r2
 801641a:	f043 0320 	orr.w	r3, r3, #32
 801641e:	b2d9      	uxtb	r1, r3
 8016420:	4a9a      	ldr	r2, [pc, #616]	; (801668c <main+0xb28>)
 8016422:	00c3      	lsls	r3, r0, #3
 8016424:	4413      	add	r3, r2
 8016426:	460a      	mov	r2, r1
 8016428:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 801642a:	4b95      	ldr	r3, [pc, #596]	; (8016680 <main+0xb1c>)
 801642c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016430:	461a      	mov	r2, r3
 8016432:	4b95      	ldr	r3, [pc, #596]	; (8016688 <main+0xb24>)
 8016434:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016438:	4a94      	ldr	r2, [pc, #592]	; (801668c <main+0xb28>)
 801643a:	00db      	lsls	r3, r3, #3
 801643c:	4413      	add	r3, r2
 801643e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016442:	4b8f      	ldr	r3, [pc, #572]	; (8016680 <main+0xb1c>)
 8016444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016448:	4619      	mov	r1, r3
 801644a:	4b8f      	ldr	r3, [pc, #572]	; (8016688 <main+0xb24>)
 801644c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016450:	4619      	mov	r1, r3
 8016452:	4b8f      	ldr	r3, [pc, #572]	; (8016690 <main+0xb2c>)
 8016454:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016458:	429a      	cmp	r2, r3
 801645a:	dc73      	bgt.n	8016544 <main+0x9e0>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801645c:	4b88      	ldr	r3, [pc, #544]	; (8016680 <main+0xb1c>)
 801645e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016462:	461a      	mov	r2, r3
 8016464:	4b88      	ldr	r3, [pc, #544]	; (8016688 <main+0xb24>)
 8016466:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801646a:	2b01      	cmp	r3, #1
 801646c:	d051      	beq.n	8016512 <main+0x9ae>
 801646e:	4b84      	ldr	r3, [pc, #528]	; (8016680 <main+0xb1c>)
 8016470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016474:	461a      	mov	r2, r3
 8016476:	4b84      	ldr	r3, [pc, #528]	; (8016688 <main+0xb24>)
 8016478:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801647c:	2b06      	cmp	r3, #6
 801647e:	d048      	beq.n	8016512 <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016480:	4b7f      	ldr	r3, [pc, #508]	; (8016680 <main+0xb1c>)
 8016482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016486:	461a      	mov	r2, r3
 8016488:	4b7f      	ldr	r3, [pc, #508]	; (8016688 <main+0xb24>)
 801648a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801648e:	2b0c      	cmp	r3, #12
 8016490:	d03f      	beq.n	8016512 <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016492:	4b7b      	ldr	r3, [pc, #492]	; (8016680 <main+0xb1c>)
 8016494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016498:	461a      	mov	r2, r3
 801649a:	4b7b      	ldr	r3, [pc, #492]	; (8016688 <main+0xb24>)
 801649c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164a0:	2b1c      	cmp	r3, #28
 80164a2:	d036      	beq.n	8016512 <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164a4:	4b76      	ldr	r3, [pc, #472]	; (8016680 <main+0xb1c>)
 80164a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164aa:	461a      	mov	r2, r3
 80164ac:	4b76      	ldr	r3, [pc, #472]	; (8016688 <main+0xb24>)
 80164ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 80164b2:	2b0f      	cmp	r3, #15
 80164b4:	d02d      	beq.n	8016512 <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164b6:	4b72      	ldr	r3, [pc, #456]	; (8016680 <main+0xb1c>)
 80164b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164bc:	461a      	mov	r2, r3
 80164be:	4b72      	ldr	r3, [pc, #456]	; (8016688 <main+0xb24>)
 80164c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164c4:	2b0e      	cmp	r3, #14
 80164c6:	d024      	beq.n	8016512 <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164c8:	4b6d      	ldr	r3, [pc, #436]	; (8016680 <main+0xb1c>)
 80164ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ce:	461a      	mov	r2, r3
 80164d0:	4b6d      	ldr	r3, [pc, #436]	; (8016688 <main+0xb24>)
 80164d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164d6:	2b0d      	cmp	r3, #13
 80164d8:	d01b      	beq.n	8016512 <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164da:	4b69      	ldr	r3, [pc, #420]	; (8016680 <main+0xb1c>)
 80164dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164e0:	461a      	mov	r2, r3
 80164e2:	4b69      	ldr	r3, [pc, #420]	; (8016688 <main+0xb24>)
 80164e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164e8:	2b1a      	cmp	r3, #26
 80164ea:	d012      	beq.n	8016512 <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80164ec:	4b64      	ldr	r3, [pc, #400]	; (8016680 <main+0xb1c>)
 80164ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164f2:	461a      	mov	r2, r3
 80164f4:	4b64      	ldr	r3, [pc, #400]	; (8016688 <main+0xb24>)
 80164f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164fa:	2b02      	cmp	r3, #2
 80164fc:	d009      	beq.n	8016512 <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80164fe:	4b60      	ldr	r3, [pc, #384]	; (8016680 <main+0xb1c>)
 8016500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016504:	461a      	mov	r2, r3
 8016506:	4b60      	ldr	r3, [pc, #384]	; (8016688 <main+0xb24>)
 8016508:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801650c:	2b24      	cmp	r3, #36	; 0x24
 801650e:	f040 8129 	bne.w	8016764 <main+0xc00>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016512:	4b5b      	ldr	r3, [pc, #364]	; (8016680 <main+0xb1c>)
 8016514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016518:	461a      	mov	r2, r3
 801651a:	4b5b      	ldr	r3, [pc, #364]	; (8016688 <main+0xb24>)
 801651c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016520:	461a      	mov	r2, r3
 8016522:	4b57      	ldr	r3, [pc, #348]	; (8016680 <main+0xb1c>)
 8016524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016528:	4619      	mov	r1, r3
 801652a:	4b57      	ldr	r3, [pc, #348]	; (8016688 <main+0xb24>)
 801652c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016530:	4618      	mov	r0, r3
 8016532:	4b58      	ldr	r3, [pc, #352]	; (8016694 <main+0xb30>)
 8016534:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016538:	4a54      	ldr	r2, [pc, #336]	; (801668c <main+0xb28>)
 801653a:	00c3      	lsls	r3, r0, #3
 801653c:	4413      	add	r3, r2
 801653e:	460a      	mov	r2, r1
 8016540:	809a      	strh	r2, [r3, #4]
 8016542:	e10f      	b.n	8016764 <main+0xc00>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016544:	4b4e      	ldr	r3, [pc, #312]	; (8016680 <main+0xb1c>)
 8016546:	f9b3 3000 	ldrsh.w	r3, [r3]
 801654a:	461a      	mov	r2, r3
 801654c:	4b4e      	ldr	r3, [pc, #312]	; (8016688 <main+0xb24>)
 801654e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016552:	2b08      	cmp	r3, #8
 8016554:	d12a      	bne.n	80165ac <main+0xa48>
 8016556:	4b4a      	ldr	r3, [pc, #296]	; (8016680 <main+0xb1c>)
 8016558:	f9b3 3000 	ldrsh.w	r3, [r3]
 801655c:	461a      	mov	r2, r3
 801655e:	4b4a      	ldr	r3, [pc, #296]	; (8016688 <main+0xb24>)
 8016560:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016564:	4a49      	ldr	r2, [pc, #292]	; (801668c <main+0xb28>)
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	4413      	add	r3, r2
 801656a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801656e:	2b95      	cmp	r3, #149	; 0x95
 8016570:	dd1c      	ble.n	80165ac <main+0xa48>
	            List[MenuNow[Current]].Val-=25;
 8016572:	4b43      	ldr	r3, [pc, #268]	; (8016680 <main+0xb1c>)
 8016574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016578:	461a      	mov	r2, r3
 801657a:	4b43      	ldr	r3, [pc, #268]	; (8016688 <main+0xb24>)
 801657c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016580:	4a42      	ldr	r2, [pc, #264]	; (801668c <main+0xb28>)
 8016582:	00db      	lsls	r3, r3, #3
 8016584:	4413      	add	r3, r2
 8016586:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801658a:	b29b      	uxth	r3, r3
 801658c:	3b19      	subs	r3, #25
 801658e:	b29a      	uxth	r2, r3
 8016590:	4b3b      	ldr	r3, [pc, #236]	; (8016680 <main+0xb1c>)
 8016592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016596:	4619      	mov	r1, r3
 8016598:	4b3b      	ldr	r3, [pc, #236]	; (8016688 <main+0xb24>)
 801659a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801659e:	b211      	sxth	r1, r2
 80165a0:	4a3a      	ldr	r2, [pc, #232]	; (801668c <main+0xb28>)
 80165a2:	00db      	lsls	r3, r3, #3
 80165a4:	4413      	add	r3, r2
 80165a6:	460a      	mov	r2, r1
 80165a8:	809a      	strh	r2, [r3, #4]
 80165aa:	e0ad      	b.n	8016708 <main+0xba4>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 80165ac:	4b34      	ldr	r3, [pc, #208]	; (8016680 <main+0xb1c>)
 80165ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165b2:	461a      	mov	r2, r3
 80165b4:	4b34      	ldr	r3, [pc, #208]	; (8016688 <main+0xb24>)
 80165b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165ba:	2b10      	cmp	r3, #16
 80165bc:	d121      	bne.n	8016602 <main+0xa9e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 80165be:	4b33      	ldr	r3, [pc, #204]	; (801668c <main+0xb28>)
 80165c0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80165c4:	461a      	mov	r2, r3
 80165c6:	4b31      	ldr	r3, [pc, #196]	; (801668c <main+0xb28>)
 80165c8:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80165cc:	4413      	add	r3, r2
 80165ce:	2b02      	cmp	r3, #2
 80165d0:	f340 809a 	ble.w	8016708 <main+0xba4>
	                List[MenuNow[Current]].Val--;
 80165d4:	4b2a      	ldr	r3, [pc, #168]	; (8016680 <main+0xb1c>)
 80165d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165da:	461a      	mov	r2, r3
 80165dc:	4b2a      	ldr	r3, [pc, #168]	; (8016688 <main+0xb24>)
 80165de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165e2:	461a      	mov	r2, r3
 80165e4:	4929      	ldr	r1, [pc, #164]	; (801668c <main+0xb28>)
 80165e6:	00d3      	lsls	r3, r2, #3
 80165e8:	440b      	add	r3, r1
 80165ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	3b01      	subs	r3, #1
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	b218      	sxth	r0, r3
 80165f6:	4925      	ldr	r1, [pc, #148]	; (801668c <main+0xb28>)
 80165f8:	00d3      	lsls	r3, r2, #3
 80165fa:	440b      	add	r3, r1
 80165fc:	4602      	mov	r2, r0
 80165fe:	809a      	strh	r2, [r3, #4]
 8016600:	e082      	b.n	8016708 <main+0xba4>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016602:	4b1f      	ldr	r3, [pc, #124]	; (8016680 <main+0xb1c>)
 8016604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016608:	461a      	mov	r2, r3
 801660a:	4b1f      	ldr	r3, [pc, #124]	; (8016688 <main+0xb24>)
 801660c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016610:	2b03      	cmp	r3, #3
 8016612:	d141      	bne.n	8016698 <main+0xb34>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016614:	4b1d      	ldr	r3, [pc, #116]	; (801668c <main+0xb28>)
 8016616:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801661a:	461a      	mov	r2, r3
 801661c:	4b1b      	ldr	r3, [pc, #108]	; (801668c <main+0xb28>)
 801661e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016622:	4413      	add	r3, r2
 8016624:	2b01      	cmp	r3, #1
 8016626:	dc13      	bgt.n	8016650 <main+0xaec>
	                List[V0_POSI].Val--;
 8016628:	4b18      	ldr	r3, [pc, #96]	; (801668c <main+0xb28>)
 801662a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801662e:	b29b      	uxth	r3, r3
 8016630:	3b01      	subs	r3, #1
 8016632:	b29b      	uxth	r3, r3
 8016634:	b21a      	sxth	r2, r3
 8016636:	4b15      	ldr	r3, [pc, #84]	; (801668c <main+0xb28>)
 8016638:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 801663a:	4b14      	ldr	r3, [pc, #80]	; (801668c <main+0xb28>)
 801663c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016640:	b29b      	uxth	r3, r3
 8016642:	3301      	adds	r3, #1
 8016644:	b29b      	uxth	r3, r3
 8016646:	b21a      	sxth	r2, r3
 8016648:	4b10      	ldr	r3, [pc, #64]	; (801668c <main+0xb28>)
 801664a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801664e:	e05b      	b.n	8016708 <main+0xba4>
	              }else List[MenuNow[Current]].Val--;
 8016650:	4b0b      	ldr	r3, [pc, #44]	; (8016680 <main+0xb1c>)
 8016652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016656:	461a      	mov	r2, r3
 8016658:	4b0b      	ldr	r3, [pc, #44]	; (8016688 <main+0xb24>)
 801665a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801665e:	461a      	mov	r2, r3
 8016660:	490a      	ldr	r1, [pc, #40]	; (801668c <main+0xb28>)
 8016662:	00d3      	lsls	r3, r2, #3
 8016664:	440b      	add	r3, r1
 8016666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801666a:	b29b      	uxth	r3, r3
 801666c:	3b01      	subs	r3, #1
 801666e:	b29b      	uxth	r3, r3
 8016670:	b218      	sxth	r0, r3
 8016672:	4906      	ldr	r1, [pc, #24]	; (801668c <main+0xb28>)
 8016674:	00d3      	lsls	r3, r2, #3
 8016676:	440b      	add	r3, r1
 8016678:	4602      	mov	r2, r0
 801667a:	809a      	strh	r2, [r3, #4]
 801667c:	e044      	b.n	8016708 <main+0xba4>
 801667e:	bf00      	nop
 8016680:	20002654 	.word	0x20002654
 8016684:	2000091a 	.word	0x2000091a
 8016688:	20000514 	.word	0x20000514
 801668c:	20000274 	.word	0x20000274
 8016690:	080022b0 	.word	0x080022b0
 8016694:	08002254 	.word	0x08002254
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016698:	4b94      	ldr	r3, [pc, #592]	; (80168ec <main+0xd88>)
 801669a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801669e:	461a      	mov	r2, r3
 80166a0:	4b93      	ldr	r3, [pc, #588]	; (80168f0 <main+0xd8c>)
 80166a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166a6:	2b04      	cmp	r3, #4
 80166a8:	d118      	bne.n	80166dc <main+0xb78>
 80166aa:	4b92      	ldr	r3, [pc, #584]	; (80168f4 <main+0xd90>)
 80166ac:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80166b0:	4b90      	ldr	r3, [pc, #576]	; (80168f4 <main+0xd90>)
 80166b2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80166b6:	429a      	cmp	r2, r3
 80166b8:	dc10      	bgt.n	80166dc <main+0xb78>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 80166ba:	4b8c      	ldr	r3, [pc, #560]	; (80168ec <main+0xd88>)
 80166bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166c0:	461a      	mov	r2, r3
 80166c2:	4b8b      	ldr	r3, [pc, #556]	; (80168f0 <main+0xd8c>)
 80166c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166c8:	4618      	mov	r0, r3
 80166ca:	4b8a      	ldr	r3, [pc, #552]	; (80168f4 <main+0xd90>)
 80166cc:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 80166d0:	4a88      	ldr	r2, [pc, #544]	; (80168f4 <main+0xd90>)
 80166d2:	00c3      	lsls	r3, r0, #3
 80166d4:	4413      	add	r3, r2
 80166d6:	460a      	mov	r2, r1
 80166d8:	809a      	strh	r2, [r3, #4]
 80166da:	e015      	b.n	8016708 <main+0xba4>
	            else List[MenuNow[Current]].Val--;
 80166dc:	4b83      	ldr	r3, [pc, #524]	; (80168ec <main+0xd88>)
 80166de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166e2:	461a      	mov	r2, r3
 80166e4:	4b82      	ldr	r3, [pc, #520]	; (80168f0 <main+0xd8c>)
 80166e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166ea:	461a      	mov	r2, r3
 80166ec:	4981      	ldr	r1, [pc, #516]	; (80168f4 <main+0xd90>)
 80166ee:	00d3      	lsls	r3, r2, #3
 80166f0:	440b      	add	r3, r1
 80166f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	3b01      	subs	r3, #1
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	b218      	sxth	r0, r3
 80166fe:	497d      	ldr	r1, [pc, #500]	; (80168f4 <main+0xd90>)
 8016700:	00d3      	lsls	r3, r2, #3
 8016702:	440b      	add	r3, r1
 8016704:	4602      	mov	r2, r0
 8016706:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016708:	4b78      	ldr	r3, [pc, #480]	; (80168ec <main+0xd88>)
 801670a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801670e:	461a      	mov	r2, r3
 8016710:	4b77      	ldr	r3, [pc, #476]	; (80168f0 <main+0xd8c>)
 8016712:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016716:	2b09      	cmp	r3, #9
 8016718:	d103      	bne.n	8016722 <main+0xbbe>
	              List[VIEWPOSI].Val=1 ;
 801671a:	4b76      	ldr	r3, [pc, #472]	; (80168f4 <main+0xd90>)
 801671c:	2201      	movs	r2, #1
 801671e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016722:	4b72      	ldr	r3, [pc, #456]	; (80168ec <main+0xd88>)
 8016724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016728:	461a      	mov	r2, r3
 801672a:	4b71      	ldr	r3, [pc, #452]	; (80168f0 <main+0xd8c>)
 801672c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016730:	2b0b      	cmp	r3, #11
 8016732:	d117      	bne.n	8016764 <main+0xc00>
 8016734:	4b6f      	ldr	r3, [pc, #444]	; (80168f4 <main+0xd90>)
 8016736:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 801673a:	4b6e      	ldr	r3, [pc, #440]	; (80168f4 <main+0xd90>)
 801673c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016740:	429a      	cmp	r2, r3
 8016742:	dc0f      	bgt.n	8016764 <main+0xc00>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016744:	4b69      	ldr	r3, [pc, #420]	; (80168ec <main+0xd88>)
 8016746:	f9b3 3000 	ldrsh.w	r3, [r3]
 801674a:	461a      	mov	r2, r3
 801674c:	4b68      	ldr	r3, [pc, #416]	; (80168f0 <main+0xd8c>)
 801674e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016752:	4618      	mov	r0, r3
 8016754:	4b67      	ldr	r3, [pc, #412]	; (80168f4 <main+0xd90>)
 8016756:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 801675a:	4a66      	ldr	r2, [pc, #408]	; (80168f4 <main+0xd90>)
 801675c:	00c3      	lsls	r3, r0, #3
 801675e:	4413      	add	r3, r2
 8016760:	460a      	mov	r2, r1
 8016762:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016764:	4b61      	ldr	r3, [pc, #388]	; (80168ec <main+0xd88>)
 8016766:	f9b3 3000 	ldrsh.w	r3, [r3]
 801676a:	2b02      	cmp	r3, #2
 801676c:	f040 8216 	bne.w	8016b9c <main+0x1038>
 8016770:	4b61      	ldr	r3, [pc, #388]	; (80168f8 <main+0xd94>)
 8016772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016776:	f023 0301 	bic.w	r3, r3, #1
 801677a:	b21a      	sxth	r2, r3
 801677c:	4b5e      	ldr	r3, [pc, #376]	; (80168f8 <main+0xd94>)
 801677e:	801a      	strh	r2, [r3, #0]
	        break;
 8016780:	e20c      	b.n	8016b9c <main+0x1038>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016782:	4b5a      	ldr	r3, [pc, #360]	; (80168ec <main+0xd88>)
 8016784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016788:	2b07      	cmp	r3, #7
 801678a:	d106      	bne.n	801679a <main+0xc36>
 801678c:	4b5b      	ldr	r3, [pc, #364]	; (80168fc <main+0xd98>)
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	f003 0302 	and.w	r3, r3, #2
 8016794:	2b00      	cmp	r3, #0
 8016796:	f000 8203 	beq.w	8016ba0 <main+0x103c>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 801679a:	4b54      	ldr	r3, [pc, #336]	; (80168ec <main+0xd88>)
 801679c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167a0:	461a      	mov	r2, r3
 80167a2:	4b53      	ldr	r3, [pc, #332]	; (80168f0 <main+0xd8c>)
 80167a4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167a8:	4a52      	ldr	r2, [pc, #328]	; (80168f4 <main+0xd90>)
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	4413      	add	r3, r2
 80167ae:	799b      	ldrb	r3, [r3, #6]
 80167b0:	4a4e      	ldr	r2, [pc, #312]	; (80168ec <main+0xd88>)
 80167b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80167b6:	4611      	mov	r1, r2
 80167b8:	4a4d      	ldr	r2, [pc, #308]	; (80168f0 <main+0xd8c>)
 80167ba:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80167be:	4610      	mov	r0, r2
 80167c0:	f043 0320 	orr.w	r3, r3, #32
 80167c4:	b2d9      	uxtb	r1, r3
 80167c6:	4a4b      	ldr	r2, [pc, #300]	; (80168f4 <main+0xd90>)
 80167c8:	00c3      	lsls	r3, r0, #3
 80167ca:	4413      	add	r3, r2
 80167cc:	460a      	mov	r2, r1
 80167ce:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 80167d0:	4b46      	ldr	r3, [pc, #280]	; (80168ec <main+0xd88>)
 80167d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167d6:	461a      	mov	r2, r3
 80167d8:	4b45      	ldr	r3, [pc, #276]	; (80168f0 <main+0xd8c>)
 80167da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167de:	4a45      	ldr	r2, [pc, #276]	; (80168f4 <main+0xd90>)
 80167e0:	00db      	lsls	r3, r3, #3
 80167e2:	4413      	add	r3, r2
 80167e4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80167e8:	4b40      	ldr	r3, [pc, #256]	; (80168ec <main+0xd88>)
 80167ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ee:	4619      	mov	r1, r3
 80167f0:	4b3f      	ldr	r3, [pc, #252]	; (80168f0 <main+0xd8c>)
 80167f2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80167f6:	4619      	mov	r1, r3
 80167f8:	4b41      	ldr	r3, [pc, #260]	; (8016900 <main+0xd9c>)
 80167fa:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80167fe:	429a      	cmp	r2, r3
 8016800:	f2c0 8082 	blt.w	8016908 <main+0xda4>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016804:	4b39      	ldr	r3, [pc, #228]	; (80168ec <main+0xd88>)
 8016806:	f9b3 3000 	ldrsh.w	r3, [r3]
 801680a:	461a      	mov	r2, r3
 801680c:	4b38      	ldr	r3, [pc, #224]	; (80168f0 <main+0xd8c>)
 801680e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016812:	2b01      	cmp	r3, #1
 8016814:	d051      	beq.n	80168ba <main+0xd56>
 8016816:	4b35      	ldr	r3, [pc, #212]	; (80168ec <main+0xd88>)
 8016818:	f9b3 3000 	ldrsh.w	r3, [r3]
 801681c:	461a      	mov	r2, r3
 801681e:	4b34      	ldr	r3, [pc, #208]	; (80168f0 <main+0xd8c>)
 8016820:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016824:	2b06      	cmp	r3, #6
 8016826:	d048      	beq.n	80168ba <main+0xd56>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016828:	4b30      	ldr	r3, [pc, #192]	; (80168ec <main+0xd88>)
 801682a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801682e:	461a      	mov	r2, r3
 8016830:	4b2f      	ldr	r3, [pc, #188]	; (80168f0 <main+0xd8c>)
 8016832:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016836:	2b0c      	cmp	r3, #12
 8016838:	d03f      	beq.n	80168ba <main+0xd56>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801683a:	4b2c      	ldr	r3, [pc, #176]	; (80168ec <main+0xd88>)
 801683c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016840:	461a      	mov	r2, r3
 8016842:	4b2b      	ldr	r3, [pc, #172]	; (80168f0 <main+0xd8c>)
 8016844:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016848:	2b1c      	cmp	r3, #28
 801684a:	d036      	beq.n	80168ba <main+0xd56>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801684c:	4b27      	ldr	r3, [pc, #156]	; (80168ec <main+0xd88>)
 801684e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016852:	461a      	mov	r2, r3
 8016854:	4b26      	ldr	r3, [pc, #152]	; (80168f0 <main+0xd8c>)
 8016856:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801685a:	2b0f      	cmp	r3, #15
 801685c:	d02d      	beq.n	80168ba <main+0xd56>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801685e:	4b23      	ldr	r3, [pc, #140]	; (80168ec <main+0xd88>)
 8016860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016864:	461a      	mov	r2, r3
 8016866:	4b22      	ldr	r3, [pc, #136]	; (80168f0 <main+0xd8c>)
 8016868:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801686c:	2b0e      	cmp	r3, #14
 801686e:	d024      	beq.n	80168ba <main+0xd56>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016870:	4b1e      	ldr	r3, [pc, #120]	; (80168ec <main+0xd88>)
 8016872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016876:	461a      	mov	r2, r3
 8016878:	4b1d      	ldr	r3, [pc, #116]	; (80168f0 <main+0xd8c>)
 801687a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801687e:	2b0d      	cmp	r3, #13
 8016880:	d01b      	beq.n	80168ba <main+0xd56>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016882:	4b1a      	ldr	r3, [pc, #104]	; (80168ec <main+0xd88>)
 8016884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016888:	461a      	mov	r2, r3
 801688a:	4b19      	ldr	r3, [pc, #100]	; (80168f0 <main+0xd8c>)
 801688c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016890:	2b1a      	cmp	r3, #26
 8016892:	d012      	beq.n	80168ba <main+0xd56>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016894:	4b15      	ldr	r3, [pc, #84]	; (80168ec <main+0xd88>)
 8016896:	f9b3 3000 	ldrsh.w	r3, [r3]
 801689a:	461a      	mov	r2, r3
 801689c:	4b14      	ldr	r3, [pc, #80]	; (80168f0 <main+0xd8c>)
 801689e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80168a2:	2b02      	cmp	r3, #2
 80168a4:	d009      	beq.n	80168ba <main+0xd56>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80168a6:	4b11      	ldr	r3, [pc, #68]	; (80168ec <main+0xd88>)
 80168a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ac:	461a      	mov	r2, r3
 80168ae:	4b10      	ldr	r3, [pc, #64]	; (80168f0 <main+0xd8c>)
 80168b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168b4:	2b24      	cmp	r3, #36	; 0x24
 80168b6:	f040 8152 	bne.w	8016b5e <main+0xffa>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 80168ba:	4b0c      	ldr	r3, [pc, #48]	; (80168ec <main+0xd88>)
 80168bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168c0:	461a      	mov	r2, r3
 80168c2:	4b0b      	ldr	r3, [pc, #44]	; (80168f0 <main+0xd8c>)
 80168c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168c8:	461a      	mov	r2, r3
 80168ca:	4b08      	ldr	r3, [pc, #32]	; (80168ec <main+0xd88>)
 80168cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d0:	4619      	mov	r1, r3
 80168d2:	4b07      	ldr	r3, [pc, #28]	; (80168f0 <main+0xd8c>)
 80168d4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80168d8:	4618      	mov	r0, r3
 80168da:	4b0a      	ldr	r3, [pc, #40]	; (8016904 <main+0xda0>)
 80168dc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80168e0:	4a04      	ldr	r2, [pc, #16]	; (80168f4 <main+0xd90>)
 80168e2:	00c3      	lsls	r3, r0, #3
 80168e4:	4413      	add	r3, r2
 80168e6:	460a      	mov	r2, r1
 80168e8:	809a      	strh	r2, [r3, #4]
 80168ea:	e138      	b.n	8016b5e <main+0xffa>
 80168ec:	20002654 	.word	0x20002654
 80168f0:	20000514 	.word	0x20000514
 80168f4:	20000274 	.word	0x20000274
 80168f8:	20002656 	.word	0x20002656
 80168fc:	2000091a 	.word	0x2000091a
 8016900:	08002254 	.word	0x08002254
 8016904:	080022b0 	.word	0x080022b0
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8016908:	4ba6      	ldr	r3, [pc, #664]	; (8016ba4 <main+0x1040>)
 801690a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801690e:	461a      	mov	r2, r3
 8016910:	4ba5      	ldr	r3, [pc, #660]	; (8016ba8 <main+0x1044>)
 8016912:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016916:	2b08      	cmp	r3, #8
 8016918:	d15f      	bne.n	80169da <main+0xe76>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 801691a:	4ba2      	ldr	r3, [pc, #648]	; (8016ba4 <main+0x1040>)
 801691c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016920:	461a      	mov	r2, r3
 8016922:	4ba1      	ldr	r3, [pc, #644]	; (8016ba8 <main+0x1044>)
 8016924:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016928:	4aa0      	ldr	r2, [pc, #640]	; (8016bac <main+0x1048>)
 801692a:	00db      	lsls	r3, r3, #3
 801692c:	4413      	add	r3, r2
 801692e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016932:	461a      	mov	r2, r3
 8016934:	4b9d      	ldr	r3, [pc, #628]	; (8016bac <main+0x1048>)
 8016936:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801693a:	4619      	mov	r1, r3
 801693c:	4b9c      	ldr	r3, [pc, #624]	; (8016bb0 <main+0x104c>)
 801693e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016942:	4619      	mov	r1, r3
 8016944:	4b99      	ldr	r3, [pc, #612]	; (8016bac <main+0x1048>)
 8016946:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801694a:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 801694e:	1acb      	subs	r3, r1, r3
 8016950:	429a      	cmp	r2, r3
 8016952:	f280 80e3 	bge.w	8016b1c <main+0xfb8>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8016956:	4b93      	ldr	r3, [pc, #588]	; (8016ba4 <main+0x1040>)
 8016958:	f9b3 3000 	ldrsh.w	r3, [r3]
 801695c:	461a      	mov	r2, r3
 801695e:	4b92      	ldr	r3, [pc, #584]	; (8016ba8 <main+0x1044>)
 8016960:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016964:	4a91      	ldr	r2, [pc, #580]	; (8016bac <main+0x1048>)
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	4413      	add	r3, r2
 801696a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801696e:	2b96      	cmp	r3, #150	; 0x96
 8016970:	dd1c      	ble.n	80169ac <main+0xe48>
	                  List[MenuNow[Current]].Val += 25;
 8016972:	4b8c      	ldr	r3, [pc, #560]	; (8016ba4 <main+0x1040>)
 8016974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016978:	461a      	mov	r2, r3
 801697a:	4b8b      	ldr	r3, [pc, #556]	; (8016ba8 <main+0x1044>)
 801697c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016980:	4a8a      	ldr	r2, [pc, #552]	; (8016bac <main+0x1048>)
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	4413      	add	r3, r2
 8016986:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801698a:	b29b      	uxth	r3, r3
 801698c:	3319      	adds	r3, #25
 801698e:	b29a      	uxth	r2, r3
 8016990:	4b84      	ldr	r3, [pc, #528]	; (8016ba4 <main+0x1040>)
 8016992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016996:	4619      	mov	r1, r3
 8016998:	4b83      	ldr	r3, [pc, #524]	; (8016ba8 <main+0x1044>)
 801699a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801699e:	b211      	sxth	r1, r2
 80169a0:	4a82      	ldr	r2, [pc, #520]	; (8016bac <main+0x1048>)
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	4413      	add	r3, r2
 80169a6:	460a      	mov	r2, r1
 80169a8:	809a      	strh	r2, [r3, #4]
 80169aa:	e0b7      	b.n	8016b1c <main+0xfb8>
	                else
	                  List[MenuNow[Current]].Val++;
 80169ac:	4b7d      	ldr	r3, [pc, #500]	; (8016ba4 <main+0x1040>)
 80169ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169b2:	461a      	mov	r2, r3
 80169b4:	4b7c      	ldr	r3, [pc, #496]	; (8016ba8 <main+0x1044>)
 80169b6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169ba:	461a      	mov	r2, r3
 80169bc:	497b      	ldr	r1, [pc, #492]	; (8016bac <main+0x1048>)
 80169be:	00d3      	lsls	r3, r2, #3
 80169c0:	440b      	add	r3, r1
 80169c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	3301      	adds	r3, #1
 80169ca:	b29b      	uxth	r3, r3
 80169cc:	b218      	sxth	r0, r3
 80169ce:	4977      	ldr	r1, [pc, #476]	; (8016bac <main+0x1048>)
 80169d0:	00d3      	lsls	r3, r2, #3
 80169d2:	440b      	add	r3, r1
 80169d4:	4602      	mov	r2, r0
 80169d6:	809a      	strh	r2, [r3, #4]
 80169d8:	e0a0      	b.n	8016b1c <main+0xfb8>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80169da:	4b72      	ldr	r3, [pc, #456]	; (8016ba4 <main+0x1040>)
 80169dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169e0:	461a      	mov	r2, r3
 80169e2:	4b71      	ldr	r3, [pc, #452]	; (8016ba8 <main+0x1044>)
 80169e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169e8:	2b10      	cmp	r3, #16
 80169ea:	d121      	bne.n	8016a30 <main+0xecc>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80169ec:	4b6f      	ldr	r3, [pc, #444]	; (8016bac <main+0x1048>)
 80169ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80169f2:	461a      	mov	r2, r3
 80169f4:	4b6d      	ldr	r3, [pc, #436]	; (8016bac <main+0x1048>)
 80169f6:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80169fa:	4413      	add	r3, r2
 80169fc:	2bc5      	cmp	r3, #197	; 0xc5
 80169fe:	f300 808d 	bgt.w	8016b1c <main+0xfb8>
	                 List[MenuNow[Current]].Val++;
 8016a02:	4b68      	ldr	r3, [pc, #416]	; (8016ba4 <main+0x1040>)
 8016a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	4b67      	ldr	r3, [pc, #412]	; (8016ba8 <main+0x1044>)
 8016a0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a10:	461a      	mov	r2, r3
 8016a12:	4966      	ldr	r1, [pc, #408]	; (8016bac <main+0x1048>)
 8016a14:	00d3      	lsls	r3, r2, #3
 8016a16:	440b      	add	r3, r1
 8016a18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	3301      	adds	r3, #1
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	b218      	sxth	r0, r3
 8016a24:	4961      	ldr	r1, [pc, #388]	; (8016bac <main+0x1048>)
 8016a26:	00d3      	lsls	r3, r2, #3
 8016a28:	440b      	add	r3, r1
 8016a2a:	4602      	mov	r2, r0
 8016a2c:	809a      	strh	r2, [r3, #4]
 8016a2e:	e075      	b.n	8016b1c <main+0xfb8>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8016a30:	4b5c      	ldr	r3, [pc, #368]	; (8016ba4 <main+0x1040>)
 8016a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a36:	461a      	mov	r2, r3
 8016a38:	4b5b      	ldr	r3, [pc, #364]	; (8016ba8 <main+0x1044>)
 8016a3a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a3e:	2b03      	cmp	r3, #3
 8016a40:	d134      	bne.n	8016aac <main+0xf48>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8016a42:	4b5a      	ldr	r3, [pc, #360]	; (8016bac <main+0x1048>)
 8016a44:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a48:	461a      	mov	r2, r3
 8016a4a:	4b58      	ldr	r3, [pc, #352]	; (8016bac <main+0x1048>)
 8016a4c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a50:	4413      	add	r3, r2
 8016a52:	2bc6      	cmp	r3, #198	; 0xc6
 8016a54:	dd13      	ble.n	8016a7e <main+0xf1a>
	                  List[V0_POSI].Val++;
 8016a56:	4b55      	ldr	r3, [pc, #340]	; (8016bac <main+0x1048>)
 8016a58:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	3301      	adds	r3, #1
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	b21a      	sxth	r2, r3
 8016a64:	4b51      	ldr	r3, [pc, #324]	; (8016bac <main+0x1048>)
 8016a66:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 8016a68:	4b50      	ldr	r3, [pc, #320]	; (8016bac <main+0x1048>)
 8016a6a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	3b01      	subs	r3, #1
 8016a72:	b29b      	uxth	r3, r3
 8016a74:	b21a      	sxth	r2, r3
 8016a76:	4b4d      	ldr	r3, [pc, #308]	; (8016bac <main+0x1048>)
 8016a78:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016a7c:	e04e      	b.n	8016b1c <main+0xfb8>
	                }else List[MenuNow[Current]].Val++;
 8016a7e:	4b49      	ldr	r3, [pc, #292]	; (8016ba4 <main+0x1040>)
 8016a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a84:	461a      	mov	r2, r3
 8016a86:	4b48      	ldr	r3, [pc, #288]	; (8016ba8 <main+0x1044>)
 8016a88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	4947      	ldr	r1, [pc, #284]	; (8016bac <main+0x1048>)
 8016a90:	00d3      	lsls	r3, r2, #3
 8016a92:	440b      	add	r3, r1
 8016a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	3301      	adds	r3, #1
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	b218      	sxth	r0, r3
 8016aa0:	4942      	ldr	r1, [pc, #264]	; (8016bac <main+0x1048>)
 8016aa2:	00d3      	lsls	r3, r2, #3
 8016aa4:	440b      	add	r3, r1
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	809a      	strh	r2, [r3, #4]
 8016aaa:	e037      	b.n	8016b1c <main+0xfb8>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 8016aac:	4b3d      	ldr	r3, [pc, #244]	; (8016ba4 <main+0x1040>)
 8016aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ab2:	461a      	mov	r2, r3
 8016ab4:	4b3c      	ldr	r3, [pc, #240]	; (8016ba8 <main+0x1044>)
 8016ab6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016aba:	2b05      	cmp	r3, #5
 8016abc:	d118      	bne.n	8016af0 <main+0xf8c>
 8016abe:	4b3b      	ldr	r3, [pc, #236]	; (8016bac <main+0x1048>)
 8016ac0:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8016ac4:	4b39      	ldr	r3, [pc, #228]	; (8016bac <main+0x1048>)
 8016ac6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8016aca:	429a      	cmp	r2, r3
 8016acc:	db10      	blt.n	8016af0 <main+0xf8c>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8016ace:	4b35      	ldr	r3, [pc, #212]	; (8016ba4 <main+0x1040>)
 8016ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ad4:	461a      	mov	r2, r3
 8016ad6:	4b34      	ldr	r3, [pc, #208]	; (8016ba8 <main+0x1044>)
 8016ad8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016adc:	4618      	mov	r0, r3
 8016ade:	4b33      	ldr	r3, [pc, #204]	; (8016bac <main+0x1048>)
 8016ae0:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8016ae4:	4a31      	ldr	r2, [pc, #196]	; (8016bac <main+0x1048>)
 8016ae6:	00c3      	lsls	r3, r0, #3
 8016ae8:	4413      	add	r3, r2
 8016aea:	460a      	mov	r2, r1
 8016aec:	809a      	strh	r2, [r3, #4]
 8016aee:	e015      	b.n	8016b1c <main+0xfb8>
	              else List[MenuNow[Current]].Val++;
 8016af0:	4b2c      	ldr	r3, [pc, #176]	; (8016ba4 <main+0x1040>)
 8016af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af6:	461a      	mov	r2, r3
 8016af8:	4b2b      	ldr	r3, [pc, #172]	; (8016ba8 <main+0x1044>)
 8016afa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016afe:	461a      	mov	r2, r3
 8016b00:	492a      	ldr	r1, [pc, #168]	; (8016bac <main+0x1048>)
 8016b02:	00d3      	lsls	r3, r2, #3
 8016b04:	440b      	add	r3, r1
 8016b06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b0a:	b29b      	uxth	r3, r3
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	b218      	sxth	r0, r3
 8016b12:	4926      	ldr	r1, [pc, #152]	; (8016bac <main+0x1048>)
 8016b14:	00d3      	lsls	r3, r2, #3
 8016b16:	440b      	add	r3, r1
 8016b18:	4602      	mov	r2, r0
 8016b1a:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 8016b1c:	4b21      	ldr	r3, [pc, #132]	; (8016ba4 <main+0x1040>)
 8016b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b22:	461a      	mov	r2, r3
 8016b24:	4b20      	ldr	r3, [pc, #128]	; (8016ba8 <main+0x1044>)
 8016b26:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b2a:	2b0a      	cmp	r3, #10
 8016b2c:	d117      	bne.n	8016b5e <main+0xffa>
 8016b2e:	4b1f      	ldr	r3, [pc, #124]	; (8016bac <main+0x1048>)
 8016b30:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8016b34:	4b1d      	ldr	r3, [pc, #116]	; (8016bac <main+0x1048>)
 8016b36:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	db0f      	blt.n	8016b5e <main+0xffa>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8016b3e:	4b19      	ldr	r3, [pc, #100]	; (8016ba4 <main+0x1040>)
 8016b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b44:	461a      	mov	r2, r3
 8016b46:	4b18      	ldr	r3, [pc, #96]	; (8016ba8 <main+0x1044>)
 8016b48:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	4b17      	ldr	r3, [pc, #92]	; (8016bac <main+0x1048>)
 8016b50:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8016b54:	4a15      	ldr	r2, [pc, #84]	; (8016bac <main+0x1048>)
 8016b56:	00c3      	lsls	r3, r0, #3
 8016b58:	4413      	add	r3, r2
 8016b5a:	460a      	mov	r2, r1
 8016b5c:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016b5e:	4b11      	ldr	r3, [pc, #68]	; (8016ba4 <main+0x1040>)
 8016b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b64:	2b02      	cmp	r3, #2
 8016b66:	d127      	bne.n	8016bb8 <main+0x1054>
 8016b68:	4b12      	ldr	r3, [pc, #72]	; (8016bb4 <main+0x1050>)
 8016b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b6e:	f023 0301 	bic.w	r3, r3, #1
 8016b72:	b21a      	sxth	r2, r3
 8016b74:	4b0f      	ldr	r3, [pc, #60]	; (8016bb4 <main+0x1050>)
 8016b76:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 8016b78:	4b0c      	ldr	r3, [pc, #48]	; (8016bac <main+0x1048>)
 8016b7a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016b7e:	2b04      	cmp	r3, #4
 8016b80:	d11a      	bne.n	8016bb8 <main+0x1054>
 8016b82:	f7f5 fe13 	bl	800c7ac <ADC_Start>
	        break;
 8016b86:	e017      	b.n	8016bb8 <main+0x1054>
	         break;
 8016b88:	bf00      	nop
 8016b8a:	e016      	b.n	8016bba <main+0x1056>
	         break;
 8016b8c:	bf00      	nop
 8016b8e:	e014      	b.n	8016bba <main+0x1056>
	        break;
 8016b90:	bf00      	nop
 8016b92:	e012      	b.n	8016bba <main+0x1056>
	        break;
 8016b94:	bf00      	nop
 8016b96:	e010      	b.n	8016bba <main+0x1056>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016b98:	bf00      	nop
 8016b9a:	e00e      	b.n	8016bba <main+0x1056>
	        break;
 8016b9c:	bf00      	nop
 8016b9e:	e00c      	b.n	8016bba <main+0x1056>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016ba0:	bf00      	nop
 8016ba2:	e00a      	b.n	8016bba <main+0x1056>
 8016ba4:	20002654 	.word	0x20002654
 8016ba8:	20000514 	.word	0x20000514
 8016bac:	20000274 	.word	0x20000274
 8016bb0:	0800230c 	.word	0x0800230c
 8016bb4:	20002656 	.word	0x20002656
	        break;
 8016bb8:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8016bba:	4b1b      	ldr	r3, [pc, #108]	; (8016c28 <main+0x10c4>)
 8016bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bc0:	461a      	mov	r2, r3
 8016bc2:	4b1a      	ldr	r3, [pc, #104]	; (8016c2c <main+0x10c8>)
 8016bc4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bc8:	4a19      	ldr	r2, [pc, #100]	; (8016c30 <main+0x10cc>)
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	4413      	add	r3, r2
 8016bce:	799b      	ldrb	r3, [r3, #6]
 8016bd0:	4a15      	ldr	r2, [pc, #84]	; (8016c28 <main+0x10c4>)
 8016bd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016bd6:	4611      	mov	r1, r2
 8016bd8:	4a14      	ldr	r2, [pc, #80]	; (8016c2c <main+0x10c8>)
 8016bda:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016bde:	4610      	mov	r0, r2
 8016be0:	f043 0320 	orr.w	r3, r3, #32
 8016be4:	b2d9      	uxtb	r1, r3
 8016be6:	4a12      	ldr	r2, [pc, #72]	; (8016c30 <main+0x10cc>)
 8016be8:	00c3      	lsls	r3, r0, #3
 8016bea:	4413      	add	r3, r2
 8016bec:	460a      	mov	r2, r1
 8016bee:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 8016bf0:	4b0f      	ldr	r3, [pc, #60]	; (8016c30 <main+0x10cc>)
 8016bf2:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	0112      	lsls	r2, r2, #4
 8016bfc:	1ad3      	subs	r3, r2, r3
 8016bfe:	009b      	lsls	r3, r3, #2
 8016c00:	b29b      	uxth	r3, r3
 8016c02:	b21a      	sxth	r2, r3
 8016c04:	4b0b      	ldr	r3, [pc, #44]	; (8016c34 <main+0x10d0>)
 8016c06:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8016c08:	4b0b      	ldr	r3, [pc, #44]	; (8016c38 <main+0x10d4>)
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	f003 0302 	and.w	r3, r3, #2
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d001      	beq.n	8016c18 <main+0x10b4>
 8016c14:	f7fd f972 	bl	8013efc <Show_List>
	      Update_Title();
 8016c18:	f7fa ffa4 	bl	8011b64 <Update_Title>
	      Key_Buffer = 0;
 8016c1c:	4b07      	ldr	r3, [pc, #28]	; (8016c3c <main+0x10d8>)
 8016c1e:	2200      	movs	r2, #0
 8016c20:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8016c22:	f7ff b852 	b.w	8015cca <main+0x166>
 8016c26:	bf00      	nop
 8016c28:	20002654 	.word	0x20002654
 8016c2c:	20000514 	.word	0x20000514
 8016c30:	20000274 	.word	0x20000274
 8016c34:	20002652 	.word	0x20002652
 8016c38:	2000091a 	.word	0x2000091a
 8016c3c:	2000072e 	.word	0x2000072e

08016c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b094      	sub	sp, #80	; 0x50
 8016c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016c46:	f107 031c 	add.w	r3, r7, #28
 8016c4a:	2234      	movs	r2, #52	; 0x34
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f00f fbe8 	bl	8026424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016c54:	f107 0308 	add.w	r3, r7, #8
 8016c58:	2200      	movs	r2, #0
 8016c5a:	601a      	str	r2, [r3, #0]
 8016c5c:	605a      	str	r2, [r3, #4]
 8016c5e:	609a      	str	r2, [r3, #8]
 8016c60:	60da      	str	r2, [r3, #12]
 8016c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016c64:	2300      	movs	r3, #0
 8016c66:	607b      	str	r3, [r7, #4]
 8016c68:	4b2d      	ldr	r3, [pc, #180]	; (8016d20 <SystemClock_Config+0xe0>)
 8016c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c6c:	4a2c      	ldr	r2, [pc, #176]	; (8016d20 <SystemClock_Config+0xe0>)
 8016c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016c72:	6413      	str	r3, [r2, #64]	; 0x40
 8016c74:	4b2a      	ldr	r3, [pc, #168]	; (8016d20 <SystemClock_Config+0xe0>)
 8016c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016c7c:	607b      	str	r3, [r7, #4]
 8016c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016c80:	2300      	movs	r3, #0
 8016c82:	603b      	str	r3, [r7, #0]
 8016c84:	4b27      	ldr	r3, [pc, #156]	; (8016d24 <SystemClock_Config+0xe4>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	4a26      	ldr	r2, [pc, #152]	; (8016d24 <SystemClock_Config+0xe4>)
 8016c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016c8e:	6013      	str	r3, [r2, #0]
 8016c90:	4b24      	ldr	r3, [pc, #144]	; (8016d24 <SystemClock_Config+0xe4>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016c98:	603b      	str	r3, [r7, #0]
 8016c9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016ca4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016ca6:	2302      	movs	r3, #2
 8016ca8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016cae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8016cb0:	2319      	movs	r3, #25
 8016cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8016cb4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016cb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016cba:	2302      	movs	r3, #2
 8016cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8016cbe:	2305      	movs	r3, #5
 8016cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8016cc2:	2302      	movs	r3, #2
 8016cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016cc6:	f107 031c 	add.w	r3, r7, #28
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f004 ff12 	bl	801baf4 <HAL_RCC_OscConfig>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d001      	beq.n	8016cda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8016cd6:	f000 fc1d 	bl	8017514 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8016cda:	f004 f8f5 	bl	801aec8 <HAL_PWREx_EnableOverDrive>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d001      	beq.n	8016ce8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8016ce4:	f000 fc16 	bl	8017514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016ce8:	230f      	movs	r3, #15
 8016cea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016cec:	2302      	movs	r3, #2
 8016cee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016cf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016cf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016cfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016d00:	f107 0308 	add.w	r3, r7, #8
 8016d04:	2105      	movs	r1, #5
 8016d06:	4618      	mov	r0, r3
 8016d08:	f004 f92e 	bl	801af68 <HAL_RCC_ClockConfig>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d001      	beq.n	8016d16 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8016d12:	f000 fbff 	bl	8017514 <Error_Handler>
  }
}
 8016d16:	bf00      	nop
 8016d18:	3750      	adds	r7, #80	; 0x50
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	40023800 	.word	0x40023800
 8016d24:	40007000 	.word	0x40007000

08016d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b084      	sub	sp, #16
 8016d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016d2e:	463b      	mov	r3, r7
 8016d30:	2200      	movs	r2, #0
 8016d32:	601a      	str	r2, [r3, #0]
 8016d34:	605a      	str	r2, [r3, #4]
 8016d36:	609a      	str	r2, [r3, #8]
 8016d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8016d3a:	4b22      	ldr	r3, [pc, #136]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d3c:	4a22      	ldr	r2, [pc, #136]	; (8016dc8 <MX_ADC1_Init+0xa0>)
 8016d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016d40:	4b20      	ldr	r3, [pc, #128]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8016d48:	4b1e      	ldr	r3, [pc, #120]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8016d4e:	4b1d      	ldr	r3, [pc, #116]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d50:	2200      	movs	r2, #0
 8016d52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016d54:	4b1b      	ldr	r3, [pc, #108]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d56:	2200      	movs	r2, #0
 8016d58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016d5a:	4b1a      	ldr	r3, [pc, #104]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016d62:	4b18      	ldr	r3, [pc, #96]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016d6a:	4b16      	ldr	r3, [pc, #88]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016d70:	4b14      	ldr	r3, [pc, #80]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d72:	2200      	movs	r2, #0
 8016d74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016d76:	4b13      	ldr	r3, [pc, #76]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d78:	2201      	movs	r2, #1
 8016d7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8016d7c:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016d84:	4b0f      	ldr	r3, [pc, #60]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d86:	2201      	movs	r2, #1
 8016d88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8016d8a:	480e      	ldr	r0, [pc, #56]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016d8c:	f001 f9d2 	bl	8018134 <HAL_ADC_Init>
 8016d90:	4603      	mov	r3, r0
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d001      	beq.n	8016d9a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8016d96:	f000 fbbd 	bl	8017514 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8016d9a:	2306      	movs	r3, #6
 8016d9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016d9e:	2301      	movs	r3, #1
 8016da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016da2:	2300      	movs	r3, #0
 8016da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016da6:	463b      	mov	r3, r7
 8016da8:	4619      	mov	r1, r3
 8016daa:	4806      	ldr	r0, [pc, #24]	; (8016dc4 <MX_ADC1_Init+0x9c>)
 8016dac:	f001 fa06 	bl	80181bc <HAL_ADC_ConfigChannel>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d001      	beq.n	8016dba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8016db6:	f000 fbad 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8016dba:	bf00      	nop
 8016dbc:	3710      	adds	r7, #16
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}
 8016dc2:	bf00      	nop
 8016dc4:	200066ac 	.word	0x200066ac
 8016dc8:	40012000 	.word	0x40012000

08016dcc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016dd2:	463b      	mov	r3, r7
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	601a      	str	r2, [r3, #0]
 8016dd8:	605a      	str	r2, [r3, #4]
 8016dda:	609a      	str	r2, [r3, #8]
 8016ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8016dde:	4b22      	ldr	r3, [pc, #136]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016de0:	4a22      	ldr	r2, [pc, #136]	; (8016e6c <MX_ADC2_Init+0xa0>)
 8016de2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016de4:	4b20      	ldr	r3, [pc, #128]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016dea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8016dec:	4b1e      	ldr	r3, [pc, #120]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016dee:	2200      	movs	r2, #0
 8016df0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8016df2:	4b1d      	ldr	r3, [pc, #116]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016df4:	2200      	movs	r2, #0
 8016df6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016df8:	4b1b      	ldr	r3, [pc, #108]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016dfe:	4b1a      	ldr	r3, [pc, #104]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e00:	2200      	movs	r2, #0
 8016e02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016e06:	4b18      	ldr	r3, [pc, #96]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016e0e:	4b16      	ldr	r3, [pc, #88]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e10:	2200      	movs	r2, #0
 8016e12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016e14:	4b14      	ldr	r3, [pc, #80]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e16:	2200      	movs	r2, #0
 8016e18:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016e1a:	4b13      	ldr	r3, [pc, #76]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e1c:	2201      	movs	r2, #1
 8016e1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8016e20:	4b11      	ldr	r3, [pc, #68]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e22:	2200      	movs	r2, #0
 8016e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016e28:	4b0f      	ldr	r3, [pc, #60]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e2a:	2201      	movs	r2, #1
 8016e2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8016e2e:	480e      	ldr	r0, [pc, #56]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e30:	f001 f980 	bl	8018134 <HAL_ADC_Init>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d001      	beq.n	8016e3e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8016e3a:	f000 fb6b 	bl	8017514 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8016e3e:	2307      	movs	r3, #7
 8016e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016e42:	2301      	movs	r3, #1
 8016e44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016e46:	2300      	movs	r3, #0
 8016e48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8016e4a:	463b      	mov	r3, r7
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	4806      	ldr	r0, [pc, #24]	; (8016e68 <MX_ADC2_Init+0x9c>)
 8016e50:	f001 f9b4 	bl	80181bc <HAL_ADC_ConfigChannel>
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d001      	beq.n	8016e5e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8016e5a:	f000 fb5b 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8016e5e:	bf00      	nop
 8016e60:	3710      	adds	r7, #16
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}
 8016e66:	bf00      	nop
 8016e68:	200066f4 	.word	0x200066f4
 8016e6c:	40012100 	.word	0x40012100

08016e70 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8016e76:	463b      	mov	r3, r7
 8016e78:	2200      	movs	r2, #0
 8016e7a:	601a      	str	r2, [r3, #0]
 8016e7c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8016e7e:	4b19      	ldr	r3, [pc, #100]	; (8016ee4 <MX_DAC_Init+0x74>)
 8016e80:	4a19      	ldr	r2, [pc, #100]	; (8016ee8 <MX_DAC_Init+0x78>)
 8016e82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8016e84:	4817      	ldr	r0, [pc, #92]	; (8016ee4 <MX_DAC_Init+0x74>)
 8016e86:	f001 fcd8 	bl	801883a <HAL_DAC_Init>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d001      	beq.n	8016e94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8016e90:	f000 fb40 	bl	8017514 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8016e94:	2300      	movs	r3, #0
 8016e96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8016e9c:	463b      	mov	r3, r7
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	4810      	ldr	r0, [pc, #64]	; (8016ee4 <MX_DAC_Init+0x74>)
 8016ea4:	f001 fd10 	bl	80188c8 <HAL_DAC_ConfigChannel>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8016eae:	f000 fb31 	bl	8017514 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8016eb2:	2302      	movs	r3, #2
 8016eb4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8016eb6:	463b      	mov	r3, r7
 8016eb8:	2210      	movs	r2, #16
 8016eba:	4619      	mov	r1, r3
 8016ebc:	4809      	ldr	r0, [pc, #36]	; (8016ee4 <MX_DAC_Init+0x74>)
 8016ebe:	f001 fd03 	bl	80188c8 <HAL_DAC_ConfigChannel>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d001      	beq.n	8016ecc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8016ec8:	f000 fb24 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8016ecc:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	2110      	movs	r1, #16
 8016ed4:	4803      	ldr	r0, [pc, #12]	; (8016ee4 <MX_DAC_Init+0x74>)
 8016ed6:	f001 fcd2 	bl	801887e <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8016eda:	bf00      	nop
 8016edc:	3708      	adds	r7, #8
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	2000679c 	.word	0x2000679c
 8016ee8:	40007400 	.word	0x40007400

08016eec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016ef0:	4b17      	ldr	r3, [pc, #92]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016ef2:	4a18      	ldr	r2, [pc, #96]	; (8016f54 <MX_SPI2_Init+0x68>)
 8016ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8016ef6:	4b16      	ldr	r3, [pc, #88]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016efe:	4b14      	ldr	r3, [pc, #80]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f00:	2200      	movs	r2, #0
 8016f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8016f04:	4b12      	ldr	r3, [pc, #72]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f06:	2200      	movs	r2, #0
 8016f08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8016f0a:	4b11      	ldr	r3, [pc, #68]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f0c:	2202      	movs	r2, #2
 8016f0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016f10:	4b0f      	ldr	r3, [pc, #60]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f12:	2201      	movs	r2, #1
 8016f14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8016f16:	4b0e      	ldr	r3, [pc, #56]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016f1e:	4b0c      	ldr	r3, [pc, #48]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f20:	2200      	movs	r2, #0
 8016f22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f24:	4b0a      	ldr	r3, [pc, #40]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f26:	2200      	movs	r2, #0
 8016f28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f2a:	4b09      	ldr	r3, [pc, #36]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f30:	4b07      	ldr	r3, [pc, #28]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8016f36:	4b06      	ldr	r3, [pc, #24]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f38:	220a      	movs	r2, #10
 8016f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8016f3c:	4804      	ldr	r0, [pc, #16]	; (8016f50 <MX_SPI2_Init+0x64>)
 8016f3e:	f005 f877 	bl	801c030 <HAL_SPI_Init>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d001      	beq.n	8016f4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8016f48:	f000 fae4 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016f4c:	bf00      	nop
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	20006810 	.word	0x20006810
 8016f54:	40003800 	.word	0x40003800

08016f58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8016f5c:	4b18      	ldr	r3, [pc, #96]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f5e:	4a19      	ldr	r2, [pc, #100]	; (8016fc4 <MX_SPI3_Init+0x6c>)
 8016f60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016f62:	4b17      	ldr	r3, [pc, #92]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016f68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8016f6a:	4b15      	ldr	r3, [pc, #84]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016f70:	4b13      	ldr	r3, [pc, #76]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016f78:	4b11      	ldr	r3, [pc, #68]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016f7e:	4b10      	ldr	r3, [pc, #64]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f80:	2200      	movs	r2, #0
 8016f82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016f84:	4b0e      	ldr	r3, [pc, #56]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016f8c:	4b0c      	ldr	r3, [pc, #48]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f8e:	2210      	movs	r2, #16
 8016f90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f92:	4b0b      	ldr	r3, [pc, #44]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f94:	2200      	movs	r2, #0
 8016f96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f98:	4b09      	ldr	r3, [pc, #36]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f9e:	4b08      	ldr	r3, [pc, #32]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8016fa4:	4b06      	ldr	r3, [pc, #24]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016fa6:	220a      	movs	r2, #10
 8016fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016faa:	4805      	ldr	r0, [pc, #20]	; (8016fc0 <MX_SPI3_Init+0x68>)
 8016fac:	f005 f840 	bl	801c030 <HAL_SPI_Init>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d001      	beq.n	8016fba <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8016fb6:	f000 faad 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016fba:	bf00      	nop
 8016fbc:	bd80      	pop	{r7, pc}
 8016fbe:	bf00      	nop
 8016fc0:	20006868 	.word	0x20006868
 8016fc4:	40003c00 	.word	0x40003c00

08016fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b086      	sub	sp, #24
 8016fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016fce:	f107 0308 	add.w	r3, r7, #8
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	601a      	str	r2, [r3, #0]
 8016fd6:	605a      	str	r2, [r3, #4]
 8016fd8:	609a      	str	r2, [r3, #8]
 8016fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016fdc:	463b      	mov	r3, r7
 8016fde:	2200      	movs	r2, #0
 8016fe0:	601a      	str	r2, [r3, #0]
 8016fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8016fe4:	4b30      	ldr	r3, [pc, #192]	; (80170a8 <MX_TIM1_Init+0xe0>)
 8016fe6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016fea:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8016fec:	4b2e      	ldr	r3, [pc, #184]	; (80170a8 <MX_TIM1_Init+0xe0>)
 8016fee:	2270      	movs	r2, #112	; 0x70
 8016ff0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8016ff2:	4b2e      	ldr	r3, [pc, #184]	; (80170ac <MX_TIM1_Init+0xe4>)
 8016ff4:	4a2e      	ldr	r2, [pc, #184]	; (80170b0 <MX_TIM1_Init+0xe8>)
 8016ff6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8016ff8:	4b2c      	ldr	r3, [pc, #176]	; (80170ac <MX_TIM1_Init+0xe4>)
 8016ffa:	2259      	movs	r2, #89	; 0x59
 8016ffc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8016ffe:	4b2b      	ldr	r3, [pc, #172]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017000:	2210      	movs	r2, #16
 8017002:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017004:	4b29      	ldr	r3, [pc, #164]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017006:	f240 32e7 	movw	r2, #999	; 0x3e7
 801700a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801700c:	4b27      	ldr	r3, [pc, #156]	; (80170ac <MX_TIM1_Init+0xe4>)
 801700e:	2200      	movs	r2, #0
 8017010:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017012:	4b26      	ldr	r3, [pc, #152]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017014:	2200      	movs	r2, #0
 8017016:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017018:	4b24      	ldr	r3, [pc, #144]	; (80170ac <MX_TIM1_Init+0xe4>)
 801701a:	2280      	movs	r2, #128	; 0x80
 801701c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801701e:	4823      	ldr	r0, [pc, #140]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017020:	f005 fecc 	bl	801cdbc <HAL_TIM_Base_Init>
 8017024:	4603      	mov	r3, r0
 8017026:	2b00      	cmp	r3, #0
 8017028:	d001      	beq.n	801702e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 801702a:	f000 fa73 	bl	8017514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801702e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017032:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017034:	f107 0308 	add.w	r3, r7, #8
 8017038:	4619      	mov	r1, r3
 801703a:	481c      	ldr	r0, [pc, #112]	; (80170ac <MX_TIM1_Init+0xe4>)
 801703c:	f006 f8e2 	bl	801d204 <HAL_TIM_ConfigClockSource>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d001      	beq.n	801704a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017046:	f000 fa65 	bl	8017514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801704a:	2300      	movs	r3, #0
 801704c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801704e:	2300      	movs	r3, #0
 8017050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017052:	463b      	mov	r3, r7
 8017054:	4619      	mov	r1, r3
 8017056:	4815      	ldr	r0, [pc, #84]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017058:	f006 fcae 	bl	801d9b8 <HAL_TIMEx_MasterConfigSynchronization>
 801705c:	4603      	mov	r3, r0
 801705e:	2b00      	cmp	r3, #0
 8017060:	d001      	beq.n	8017066 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017062:	f000 fa57 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017066:	2201      	movs	r2, #1
 8017068:	490f      	ldr	r1, [pc, #60]	; (80170a8 <MX_TIM1_Init+0xe0>)
 801706a:	4810      	ldr	r0, [pc, #64]	; (80170ac <MX_TIM1_Init+0xe4>)
 801706c:	f006 f86e 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017070:	4b0e      	ldr	r3, [pc, #56]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	4b0d      	ldr	r3, [pc, #52]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	f042 0204 	orr.w	r2, r2, #4
 801707e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017080:	4b0a      	ldr	r3, [pc, #40]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	68da      	ldr	r2, [r3, #12]
 8017086:	4b09      	ldr	r3, [pc, #36]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801708e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017090:	4b06      	ldr	r3, [pc, #24]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	681a      	ldr	r2, [r3, #0]
 8017096:	4b05      	ldr	r3, [pc, #20]	; (80170ac <MX_TIM1_Init+0xe4>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	f042 0201 	orr.w	r2, r2, #1
 801709e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 80170a0:	bf00      	nop
 80170a2:	3718      	adds	r7, #24
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	200069e0 	.word	0x200069e0
 80170ac:	200068c0 	.word	0x200068c0
 80170b0:	40010000 	.word	0x40010000

080170b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b086      	sub	sp, #24
 80170b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80170ba:	f107 0308 	add.w	r3, r7, #8
 80170be:	2200      	movs	r2, #0
 80170c0:	601a      	str	r2, [r3, #0]
 80170c2:	605a      	str	r2, [r3, #4]
 80170c4:	609a      	str	r2, [r3, #8]
 80170c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80170c8:	463b      	mov	r3, r7
 80170ca:	2200      	movs	r2, #0
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 80170d0:	4b25      	ldr	r3, [pc, #148]	; (8017168 <MX_TIM3_Init+0xb4>)
 80170d2:	f640 62a6 	movw	r2, #3750	; 0xea6
 80170d6:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80170d8:	4b24      	ldr	r3, [pc, #144]	; (801716c <MX_TIM3_Init+0xb8>)
 80170da:	4a25      	ldr	r2, [pc, #148]	; (8017170 <MX_TIM3_Init+0xbc>)
 80170dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80170de:	4b23      	ldr	r3, [pc, #140]	; (801716c <MX_TIM3_Init+0xb8>)
 80170e0:	220b      	movs	r2, #11
 80170e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80170e4:	4b21      	ldr	r3, [pc, #132]	; (801716c <MX_TIM3_Init+0xb8>)
 80170e6:	2200      	movs	r2, #0
 80170e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80170ea:	4b20      	ldr	r3, [pc, #128]	; (801716c <MX_TIM3_Init+0xb8>)
 80170ec:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80170f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80170f2:	4b1e      	ldr	r3, [pc, #120]	; (801716c <MX_TIM3_Init+0xb8>)
 80170f4:	2200      	movs	r2, #0
 80170f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80170f8:	4b1c      	ldr	r3, [pc, #112]	; (801716c <MX_TIM3_Init+0xb8>)
 80170fa:	2280      	movs	r2, #128	; 0x80
 80170fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80170fe:	481b      	ldr	r0, [pc, #108]	; (801716c <MX_TIM3_Init+0xb8>)
 8017100:	f005 fe5c 	bl	801cdbc <HAL_TIM_Base_Init>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d001      	beq.n	801710e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 801710a:	f000 fa03 	bl	8017514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801710e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017112:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017114:	f107 0308 	add.w	r3, r7, #8
 8017118:	4619      	mov	r1, r3
 801711a:	4814      	ldr	r0, [pc, #80]	; (801716c <MX_TIM3_Init+0xb8>)
 801711c:	f006 f872 	bl	801d204 <HAL_TIM_ConfigClockSource>
 8017120:	4603      	mov	r3, r0
 8017122:	2b00      	cmp	r3, #0
 8017124:	d001      	beq.n	801712a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017126:	f000 f9f5 	bl	8017514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801712a:	2320      	movs	r3, #32
 801712c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801712e:	2300      	movs	r3, #0
 8017130:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017132:	463b      	mov	r3, r7
 8017134:	4619      	mov	r1, r3
 8017136:	480d      	ldr	r0, [pc, #52]	; (801716c <MX_TIM3_Init+0xb8>)
 8017138:	f006 fc3e 	bl	801d9b8 <HAL_TIMEx_MasterConfigSynchronization>
 801713c:	4603      	mov	r3, r0
 801713e:	2b00      	cmp	r3, #0
 8017140:	d001      	beq.n	8017146 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8017142:	f000 f9e7 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017146:	2201      	movs	r2, #1
 8017148:	4907      	ldr	r1, [pc, #28]	; (8017168 <MX_TIM3_Init+0xb4>)
 801714a:	4808      	ldr	r0, [pc, #32]	; (801716c <MX_TIM3_Init+0xb8>)
 801714c:	f005 fffe 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 8017150:	4b06      	ldr	r3, [pc, #24]	; (801716c <MX_TIM3_Init+0xb8>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	4b05      	ldr	r3, [pc, #20]	; (801716c <MX_TIM3_Init+0xb8>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	f042 0201 	orr.w	r2, r2, #1
 801715e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 8017160:	bf00      	nop
 8017162:	3718      	adds	r7, #24
 8017164:	46bd      	mov	sp, r7
 8017166:	bd80      	pop	{r7, pc}
 8017168:	200069fc 	.word	0x200069fc
 801716c:	20006908 	.word	0x20006908
 8017170:	40000400 	.word	0x40000400

08017174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b086      	sub	sp, #24
 8017178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801717a:	f107 0308 	add.w	r3, r7, #8
 801717e:	2200      	movs	r2, #0
 8017180:	601a      	str	r2, [r3, #0]
 8017182:	605a      	str	r2, [r3, #4]
 8017184:	609a      	str	r2, [r3, #8]
 8017186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017188:	463b      	mov	r3, r7
 801718a:	2200      	movs	r2, #0
 801718c:	601a      	str	r2, [r3, #0]
 801718e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 8017190:	4b3a      	ldr	r3, [pc, #232]	; (801727c <MX_TIM5_Init+0x108>)
 8017192:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017196:	461a      	mov	r2, r3
 8017198:	4b39      	ldr	r3, [pc, #228]	; (8017280 <MX_TIM5_Init+0x10c>)
 801719a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801719e:	3301      	adds	r3, #1
 80171a0:	0fda      	lsrs	r2, r3, #31
 80171a2:	4413      	add	r3, r2
 80171a4:	105b      	asrs	r3, r3, #1
 80171a6:	461a      	mov	r2, r3
 80171a8:	4b36      	ldr	r3, [pc, #216]	; (8017284 <MX_TIM5_Init+0x110>)
 80171aa:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 80171ac:	4b35      	ldr	r3, [pc, #212]	; (8017284 <MX_TIM5_Init+0x110>)
 80171ae:	2270      	movs	r2, #112	; 0x70
 80171b0:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 80171b2:	4b34      	ldr	r3, [pc, #208]	; (8017284 <MX_TIM5_Init+0x110>)
 80171b4:	2204      	movs	r2, #4
 80171b6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80171b8:	4b33      	ldr	r3, [pc, #204]	; (8017288 <MX_TIM5_Init+0x114>)
 80171ba:	4a34      	ldr	r2, [pc, #208]	; (801728c <MX_TIM5_Init+0x118>)
 80171bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80171be:	4b32      	ldr	r3, [pc, #200]	; (8017288 <MX_TIM5_Init+0x114>)
 80171c0:	2209      	movs	r2, #9
 80171c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80171c4:	4b30      	ldr	r3, [pc, #192]	; (8017288 <MX_TIM5_Init+0x114>)
 80171c6:	2200      	movs	r2, #0
 80171c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 80171ca:	4b2f      	ldr	r3, [pc, #188]	; (8017288 <MX_TIM5_Init+0x114>)
 80171cc:	f244 6250 	movw	r2, #18000	; 0x4650
 80171d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80171d2:	4b2d      	ldr	r3, [pc, #180]	; (8017288 <MX_TIM5_Init+0x114>)
 80171d4:	2200      	movs	r2, #0
 80171d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80171d8:	4b2b      	ldr	r3, [pc, #172]	; (8017288 <MX_TIM5_Init+0x114>)
 80171da:	2280      	movs	r2, #128	; 0x80
 80171dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80171de:	482a      	ldr	r0, [pc, #168]	; (8017288 <MX_TIM5_Init+0x114>)
 80171e0:	f005 fdec 	bl	801cdbc <HAL_TIM_Base_Init>
 80171e4:	4603      	mov	r3, r0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d001      	beq.n	80171ee <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80171ea:	f000 f993 	bl	8017514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80171ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80171f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80171f4:	f107 0308 	add.w	r3, r7, #8
 80171f8:	4619      	mov	r1, r3
 80171fa:	4823      	ldr	r0, [pc, #140]	; (8017288 <MX_TIM5_Init+0x114>)
 80171fc:	f006 f802 	bl	801d204 <HAL_TIM_ConfigClockSource>
 8017200:	4603      	mov	r3, r0
 8017202:	2b00      	cmp	r3, #0
 8017204:	d001      	beq.n	801720a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017206:	f000 f985 	bl	8017514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801720a:	2300      	movs	r3, #0
 801720c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801720e:	2300      	movs	r3, #0
 8017210:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017212:	463b      	mov	r3, r7
 8017214:	4619      	mov	r1, r3
 8017216:	481c      	ldr	r0, [pc, #112]	; (8017288 <MX_TIM5_Init+0x114>)
 8017218:	f006 fbce 	bl	801d9b8 <HAL_TIMEx_MasterConfigSynchronization>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8017222:	f000 f977 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017226:	4b15      	ldr	r3, [pc, #84]	; (801727c <MX_TIM5_Init+0x108>)
 8017228:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801722c:	461a      	mov	r2, r3
 801722e:	4b14      	ldr	r3, [pc, #80]	; (8017280 <MX_TIM5_Init+0x10c>)
 8017230:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017234:	461a      	mov	r2, r3
 8017236:	4b14      	ldr	r3, [pc, #80]	; (8017288 <MX_TIM5_Init+0x114>)
 8017238:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801723a:	4813      	ldr	r0, [pc, #76]	; (8017288 <MX_TIM5_Init+0x114>)
 801723c:	f005 fdbe 	bl	801cdbc <HAL_TIM_Base_Init>
 8017240:	4603      	mov	r3, r0
 8017242:	2b00      	cmp	r3, #0
 8017244:	d001      	beq.n	801724a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017246:	f000 f965 	bl	8017514 <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 801724a:	2203      	movs	r2, #3
 801724c:	490d      	ldr	r1, [pc, #52]	; (8017284 <MX_TIM5_Init+0x110>)
 801724e:	480e      	ldr	r0, [pc, #56]	; (8017288 <MX_TIM5_Init+0x114>)
 8017250:	f005 ff7c 	bl	801d14c <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017254:	4b0c      	ldr	r3, [pc, #48]	; (8017288 <MX_TIM5_Init+0x114>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	681a      	ldr	r2, [r3, #0]
 801725a:	4b0b      	ldr	r3, [pc, #44]	; (8017288 <MX_TIM5_Init+0x114>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	f042 0204 	orr.w	r2, r2, #4
 8017262:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017264:	4b08      	ldr	r3, [pc, #32]	; (8017288 <MX_TIM5_Init+0x114>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	4b07      	ldr	r3, [pc, #28]	; (8017288 <MX_TIM5_Init+0x114>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f042 0201 	orr.w	r2, r2, #1
 8017272:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017274:	bf00      	nop
 8017276:	3718      	adds	r7, #24
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}
 801727c:	20000274 	.word	0x20000274
 8017280:	08000b84 	.word	0x08000b84
 8017284:	20006a18 	.word	0x20006a18
 8017288:	20006950 	.word	0x20006950
 801728c:	40000c00 	.word	0x40000c00

08017290 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017296:	463b      	mov	r3, r7
 8017298:	2200      	movs	r2, #0
 801729a:	601a      	str	r2, [r3, #0]
 801729c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801729e:	4b1d      	ldr	r3, [pc, #116]	; (8017314 <MX_TIM7_Init+0x84>)
 80172a0:	4a1d      	ldr	r2, [pc, #116]	; (8017318 <MX_TIM7_Init+0x88>)
 80172a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 80172a4:	4b1b      	ldr	r3, [pc, #108]	; (8017314 <MX_TIM7_Init+0x84>)
 80172a6:	2202      	movs	r2, #2
 80172a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80172aa:	4b1a      	ldr	r3, [pc, #104]	; (8017314 <MX_TIM7_Init+0x84>)
 80172ac:	2200      	movs	r2, #0
 80172ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80172b0:	4b18      	ldr	r3, [pc, #96]	; (8017314 <MX_TIM7_Init+0x84>)
 80172b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80172b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80172b8:	4b16      	ldr	r3, [pc, #88]	; (8017314 <MX_TIM7_Init+0x84>)
 80172ba:	2200      	movs	r2, #0
 80172bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80172be:	4815      	ldr	r0, [pc, #84]	; (8017314 <MX_TIM7_Init+0x84>)
 80172c0:	f005 fd7c 	bl	801cdbc <HAL_TIM_Base_Init>
 80172c4:	4603      	mov	r3, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d001      	beq.n	80172ce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80172ca:	f000 f923 	bl	8017514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80172ce:	2300      	movs	r3, #0
 80172d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80172d2:	2300      	movs	r3, #0
 80172d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80172d6:	463b      	mov	r3, r7
 80172d8:	4619      	mov	r1, r3
 80172da:	480e      	ldr	r0, [pc, #56]	; (8017314 <MX_TIM7_Init+0x84>)
 80172dc:	f006 fb6c 	bl	801d9b8 <HAL_TIMEx_MasterConfigSynchronization>
 80172e0:	4603      	mov	r3, r0
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d001      	beq.n	80172ea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80172e6:	f000 f915 	bl	8017514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80172ea:	4b0a      	ldr	r3, [pc, #40]	; (8017314 <MX_TIM7_Init+0x84>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	68da      	ldr	r2, [r3, #12]
 80172f0:	4b08      	ldr	r3, [pc, #32]	; (8017314 <MX_TIM7_Init+0x84>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80172f8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 80172fa:	4b06      	ldr	r3, [pc, #24]	; (8017314 <MX_TIM7_Init+0x84>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	4b04      	ldr	r3, [pc, #16]	; (8017314 <MX_TIM7_Init+0x84>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	f042 0201 	orr.w	r2, r2, #1
 8017308:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 801730a:	bf00      	nop
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	20006998 	.word	0x20006998
 8017318:	40001400 	.word	0x40001400

0801731c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8017322:	2300      	movs	r3, #0
 8017324:	607b      	str	r3, [r7, #4]
 8017326:	4b17      	ldr	r3, [pc, #92]	; (8017384 <MX_DMA_Init+0x68>)
 8017328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801732a:	4a16      	ldr	r2, [pc, #88]	; (8017384 <MX_DMA_Init+0x68>)
 801732c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017330:	6313      	str	r3, [r2, #48]	; 0x30
 8017332:	4b14      	ldr	r3, [pc, #80]	; (8017384 <MX_DMA_Init+0x68>)
 8017334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801733a:	607b      	str	r3, [r7, #4]
 801733c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801733e:	2300      	movs	r3, #0
 8017340:	603b      	str	r3, [r7, #0]
 8017342:	4b10      	ldr	r3, [pc, #64]	; (8017384 <MX_DMA_Init+0x68>)
 8017344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017346:	4a0f      	ldr	r2, [pc, #60]	; (8017384 <MX_DMA_Init+0x68>)
 8017348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801734c:	6313      	str	r3, [r2, #48]	; 0x30
 801734e:	4b0d      	ldr	r3, [pc, #52]	; (8017384 <MX_DMA_Init+0x68>)
 8017350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017356:	603b      	str	r3, [r7, #0]
 8017358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801735a:	2200      	movs	r2, #0
 801735c:	2100      	movs	r1, #0
 801735e:	2010      	movs	r0, #16
 8017360:	f001 fa35 	bl	80187ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017364:	2010      	movs	r0, #16
 8017366:	f001 fa4e 	bl	8018806 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 801736a:	2200      	movs	r2, #0
 801736c:	2100      	movs	r1, #0
 801736e:	2038      	movs	r0, #56	; 0x38
 8017370:	f001 fa2d 	bl	80187ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017374:	2038      	movs	r0, #56	; 0x38
 8017376:	f001 fa46 	bl	8018806 <HAL_NVIC_EnableIRQ>

}
 801737a:	bf00      	nop
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	40023800 	.word	0x40023800

08017388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b08a      	sub	sp, #40	; 0x28
 801738c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801738e:	f107 0314 	add.w	r3, r7, #20
 8017392:	2200      	movs	r2, #0
 8017394:	601a      	str	r2, [r3, #0]
 8017396:	605a      	str	r2, [r3, #4]
 8017398:	609a      	str	r2, [r3, #8]
 801739a:	60da      	str	r2, [r3, #12]
 801739c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801739e:	2300      	movs	r3, #0
 80173a0:	613b      	str	r3, [r7, #16]
 80173a2:	4b4e      	ldr	r3, [pc, #312]	; (80174dc <MX_GPIO_Init+0x154>)
 80173a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173a6:	4a4d      	ldr	r2, [pc, #308]	; (80174dc <MX_GPIO_Init+0x154>)
 80173a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173ac:	6313      	str	r3, [r2, #48]	; 0x30
 80173ae:	4b4b      	ldr	r3, [pc, #300]	; (80174dc <MX_GPIO_Init+0x154>)
 80173b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173b6:	613b      	str	r3, [r7, #16]
 80173b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80173ba:	2300      	movs	r3, #0
 80173bc:	60fb      	str	r3, [r7, #12]
 80173be:	4b47      	ldr	r3, [pc, #284]	; (80174dc <MX_GPIO_Init+0x154>)
 80173c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173c2:	4a46      	ldr	r2, [pc, #280]	; (80174dc <MX_GPIO_Init+0x154>)
 80173c4:	f043 0301 	orr.w	r3, r3, #1
 80173c8:	6313      	str	r3, [r2, #48]	; 0x30
 80173ca:	4b44      	ldr	r3, [pc, #272]	; (80174dc <MX_GPIO_Init+0x154>)
 80173cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ce:	f003 0301 	and.w	r3, r3, #1
 80173d2:	60fb      	str	r3, [r7, #12]
 80173d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80173d6:	2300      	movs	r3, #0
 80173d8:	60bb      	str	r3, [r7, #8]
 80173da:	4b40      	ldr	r3, [pc, #256]	; (80174dc <MX_GPIO_Init+0x154>)
 80173dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173de:	4a3f      	ldr	r2, [pc, #252]	; (80174dc <MX_GPIO_Init+0x154>)
 80173e0:	f043 0304 	orr.w	r3, r3, #4
 80173e4:	6313      	str	r3, [r2, #48]	; 0x30
 80173e6:	4b3d      	ldr	r3, [pc, #244]	; (80174dc <MX_GPIO_Init+0x154>)
 80173e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ea:	f003 0304 	and.w	r3, r3, #4
 80173ee:	60bb      	str	r3, [r7, #8]
 80173f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80173f2:	2300      	movs	r3, #0
 80173f4:	607b      	str	r3, [r7, #4]
 80173f6:	4b39      	ldr	r3, [pc, #228]	; (80174dc <MX_GPIO_Init+0x154>)
 80173f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173fa:	4a38      	ldr	r2, [pc, #224]	; (80174dc <MX_GPIO_Init+0x154>)
 80173fc:	f043 0302 	orr.w	r3, r3, #2
 8017400:	6313      	str	r3, [r2, #48]	; 0x30
 8017402:	4b36      	ldr	r3, [pc, #216]	; (80174dc <MX_GPIO_Init+0x154>)
 8017404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017406:	f003 0302 	and.w	r3, r3, #2
 801740a:	607b      	str	r3, [r7, #4]
 801740c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 801740e:	2200      	movs	r2, #0
 8017410:	2104      	movs	r1, #4
 8017412:	4833      	ldr	r0, [pc, #204]	; (80174e0 <MX_GPIO_Init+0x158>)
 8017414:	f002 fa48 	bl	80198a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017418:	2200      	movs	r2, #0
 801741a:	f44f 6103 	mov.w	r1, #2096	; 0x830
 801741e:	4831      	ldr	r0, [pc, #196]	; (80174e4 <MX_GPIO_Init+0x15c>)
 8017420:	f002 fa42 	bl	80198a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017424:	2200      	movs	r2, #0
 8017426:	f240 2101 	movw	r1, #513	; 0x201
 801742a:	482f      	ldr	r0, [pc, #188]	; (80174e8 <MX_GPIO_Init+0x160>)
 801742c:	f002 fa3c 	bl	80198a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017430:	2201      	movs	r2, #1
 8017432:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017436:	482c      	ldr	r0, [pc, #176]	; (80174e8 <MX_GPIO_Init+0x160>)
 8017438:	f002 fa36 	bl	80198a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 801743c:	2201      	movs	r2, #1
 801743e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017442:	4828      	ldr	r0, [pc, #160]	; (80174e4 <MX_GPIO_Init+0x15c>)
 8017444:	f002 fa30 	bl	80198a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017448:	2304      	movs	r3, #4
 801744a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801744c:	2301      	movs	r3, #1
 801744e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017450:	2300      	movs	r3, #0
 8017452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017454:	2300      	movs	r3, #0
 8017456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017458:	f107 0314 	add.w	r3, r7, #20
 801745c:	4619      	mov	r1, r3
 801745e:	4820      	ldr	r0, [pc, #128]	; (80174e0 <MX_GPIO_Init+0x158>)
 8017460:	f002 f876 	bl	8019550 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017464:	f641 0330 	movw	r3, #6192	; 0x1830
 8017468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801746a:	2301      	movs	r3, #1
 801746c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801746e:	2300      	movs	r3, #0
 8017470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017472:	2300      	movs	r3, #0
 8017474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017476:	f107 0314 	add.w	r3, r7, #20
 801747a:	4619      	mov	r1, r3
 801747c:	4819      	ldr	r0, [pc, #100]	; (80174e4 <MX_GPIO_Init+0x15c>)
 801747e:	f002 f867 	bl	8019550 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017482:	f241 2341 	movw	r3, #4673	; 0x1241
 8017486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017488:	2301      	movs	r3, #1
 801748a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801748c:	2300      	movs	r3, #0
 801748e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017490:	2300      	movs	r3, #0
 8017492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017494:	f107 0314 	add.w	r3, r7, #20
 8017498:	4619      	mov	r1, r3
 801749a:	4813      	ldr	r0, [pc, #76]	; (80174e8 <MX_GPIO_Init+0x160>)
 801749c:	f002 f858 	bl	8019550 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 80174a0:	2304      	movs	r3, #4
 80174a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80174a4:	2300      	movs	r3, #0
 80174a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a8:	2300      	movs	r3, #0
 80174aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 80174ac:	f107 0314 	add.w	r3, r7, #20
 80174b0:	4619      	mov	r1, r3
 80174b2:	480d      	ldr	r0, [pc, #52]	; (80174e8 <MX_GPIO_Init+0x160>)
 80174b4:	f002 f84c 	bl	8019550 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 80174b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80174bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80174be:	2300      	movs	r3, #0
 80174c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80174c2:	2301      	movs	r3, #1
 80174c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 80174c6:	f107 0314 	add.w	r3, r7, #20
 80174ca:	4619      	mov	r1, r3
 80174cc:	4806      	ldr	r0, [pc, #24]	; (80174e8 <MX_GPIO_Init+0x160>)
 80174ce:	f002 f83f 	bl	8019550 <HAL_GPIO_Init>

}
 80174d2:	bf00      	nop
 80174d4:	3728      	adds	r7, #40	; 0x28
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	40023800 	.word	0x40023800
 80174e0:	40020000 	.word	0x40020000
 80174e4:	40020800 	.word	0x40020800
 80174e8:	40020400 	.word	0x40020400

080174ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b082      	sub	sp, #8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	4a06      	ldr	r2, [pc, #24]	; (8017510 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80174f8:	4293      	cmp	r3, r2
 80174fa:	d105      	bne.n	8017508 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	2200      	movs	r2, #0
 8017502:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 8017504:	f7f5 fb0a 	bl	800cb1c <Tim3_ISP>
  }
}
 8017508:	bf00      	nop
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	20006908 	.word	0x20006908

08017514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017514:	b480      	push	{r7}
 8017516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017518:	b672      	cpsid	i
}
 801751a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801751c:	e7fe      	b.n	801751c <Error_Handler+0x8>
	...

08017520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017520:	b480      	push	{r7}
 8017522:	b083      	sub	sp, #12
 8017524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017526:	2300      	movs	r3, #0
 8017528:	607b      	str	r3, [r7, #4]
 801752a:	4b10      	ldr	r3, [pc, #64]	; (801756c <HAL_MspInit+0x4c>)
 801752c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801752e:	4a0f      	ldr	r2, [pc, #60]	; (801756c <HAL_MspInit+0x4c>)
 8017530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017534:	6453      	str	r3, [r2, #68]	; 0x44
 8017536:	4b0d      	ldr	r3, [pc, #52]	; (801756c <HAL_MspInit+0x4c>)
 8017538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801753a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801753e:	607b      	str	r3, [r7, #4]
 8017540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017542:	2300      	movs	r3, #0
 8017544:	603b      	str	r3, [r7, #0]
 8017546:	4b09      	ldr	r3, [pc, #36]	; (801756c <HAL_MspInit+0x4c>)
 8017548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801754a:	4a08      	ldr	r2, [pc, #32]	; (801756c <HAL_MspInit+0x4c>)
 801754c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017550:	6413      	str	r3, [r2, #64]	; 0x40
 8017552:	4b06      	ldr	r3, [pc, #24]	; (801756c <HAL_MspInit+0x4c>)
 8017554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801755a:	603b      	str	r3, [r7, #0]
 801755c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801755e:	bf00      	nop
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	40023800 	.word	0x40023800

08017570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b08c      	sub	sp, #48	; 0x30
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017578:	f107 031c 	add.w	r3, r7, #28
 801757c:	2200      	movs	r2, #0
 801757e:	601a      	str	r2, [r3, #0]
 8017580:	605a      	str	r2, [r3, #4]
 8017582:	609a      	str	r2, [r3, #8]
 8017584:	60da      	str	r2, [r3, #12]
 8017586:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	4a45      	ldr	r2, [pc, #276]	; (80176a4 <HAL_ADC_MspInit+0x134>)
 801758e:	4293      	cmp	r3, r2
 8017590:	d157      	bne.n	8017642 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017592:	2300      	movs	r3, #0
 8017594:	61bb      	str	r3, [r7, #24]
 8017596:	4b44      	ldr	r3, [pc, #272]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 8017598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801759a:	4a43      	ldr	r2, [pc, #268]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 801759c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80175a0:	6453      	str	r3, [r2, #68]	; 0x44
 80175a2:	4b41      	ldr	r3, [pc, #260]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 80175a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80175aa:	61bb      	str	r3, [r7, #24]
 80175ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80175ae:	2300      	movs	r3, #0
 80175b0:	617b      	str	r3, [r7, #20]
 80175b2:	4b3d      	ldr	r3, [pc, #244]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 80175b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175b6:	4a3c      	ldr	r2, [pc, #240]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 80175b8:	f043 0301 	orr.w	r3, r3, #1
 80175bc:	6313      	str	r3, [r2, #48]	; 0x30
 80175be:	4b3a      	ldr	r3, [pc, #232]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 80175c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175c2:	f003 0301 	and.w	r3, r3, #1
 80175c6:	617b      	str	r3, [r7, #20]
 80175c8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 80175ca:	2340      	movs	r3, #64	; 0x40
 80175cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80175ce:	2303      	movs	r3, #3
 80175d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175d2:	2300      	movs	r3, #0
 80175d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 80175d6:	f107 031c 	add.w	r3, r7, #28
 80175da:	4619      	mov	r1, r3
 80175dc:	4833      	ldr	r0, [pc, #204]	; (80176ac <HAL_ADC_MspInit+0x13c>)
 80175de:	f001 ffb7 	bl	8019550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80175e2:	4b33      	ldr	r3, [pc, #204]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 80175e4:	4a33      	ldr	r2, [pc, #204]	; (80176b4 <HAL_ADC_MspInit+0x144>)
 80175e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80175e8:	4b31      	ldr	r3, [pc, #196]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80175ee:	4b30      	ldr	r3, [pc, #192]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80175f4:	4b2e      	ldr	r3, [pc, #184]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 80175f6:	2200      	movs	r2, #0
 80175f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80175fa:	4b2d      	ldr	r3, [pc, #180]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 80175fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017600:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017602:	4b2b      	ldr	r3, [pc, #172]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 8017604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017608:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801760a:	4b29      	ldr	r3, [pc, #164]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 801760c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017610:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017612:	4b27      	ldr	r3, [pc, #156]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 8017614:	2200      	movs	r2, #0
 8017616:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017618:	4b25      	ldr	r3, [pc, #148]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 801761a:	2200      	movs	r2, #0
 801761c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801761e:	4b24      	ldr	r3, [pc, #144]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 8017620:	2200      	movs	r2, #0
 8017622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017624:	4822      	ldr	r0, [pc, #136]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 8017626:	f001 f99f 	bl	8018968 <HAL_DMA_Init>
 801762a:	4603      	mov	r3, r0
 801762c:	2b00      	cmp	r3, #0
 801762e:	d001      	beq.n	8017634 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017630:	f7ff ff70 	bl	8017514 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4a1e      	ldr	r2, [pc, #120]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 8017638:	639a      	str	r2, [r3, #56]	; 0x38
 801763a:	4a1d      	ldr	r2, [pc, #116]	; (80176b0 <HAL_ADC_MspInit+0x140>)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017640:	e02c      	b.n	801769c <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	4a1c      	ldr	r2, [pc, #112]	; (80176b8 <HAL_ADC_MspInit+0x148>)
 8017648:	4293      	cmp	r3, r2
 801764a:	d127      	bne.n	801769c <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 801764c:	2300      	movs	r3, #0
 801764e:	613b      	str	r3, [r7, #16]
 8017650:	4b15      	ldr	r3, [pc, #84]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 8017652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017654:	4a14      	ldr	r2, [pc, #80]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 8017656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801765a:	6453      	str	r3, [r2, #68]	; 0x44
 801765c:	4b12      	ldr	r3, [pc, #72]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 801765e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017664:	613b      	str	r3, [r7, #16]
 8017666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017668:	2300      	movs	r3, #0
 801766a:	60fb      	str	r3, [r7, #12]
 801766c:	4b0e      	ldr	r3, [pc, #56]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 801766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017670:	4a0d      	ldr	r2, [pc, #52]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 8017672:	f043 0301 	orr.w	r3, r3, #1
 8017676:	6313      	str	r3, [r2, #48]	; 0x30
 8017678:	4b0b      	ldr	r3, [pc, #44]	; (80176a8 <HAL_ADC_MspInit+0x138>)
 801767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801767c:	f003 0301 	and.w	r3, r3, #1
 8017680:	60fb      	str	r3, [r7, #12]
 8017682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017684:	2380      	movs	r3, #128	; 0x80
 8017686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017688:	2303      	movs	r3, #3
 801768a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801768c:	2300      	movs	r3, #0
 801768e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017690:	f107 031c 	add.w	r3, r7, #28
 8017694:	4619      	mov	r1, r3
 8017696:	4805      	ldr	r0, [pc, #20]	; (80176ac <HAL_ADC_MspInit+0x13c>)
 8017698:	f001 ff5a 	bl	8019550 <HAL_GPIO_Init>
}
 801769c:	bf00      	nop
 801769e:	3730      	adds	r7, #48	; 0x30
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	40012000 	.word	0x40012000
 80176a8:	40023800 	.word	0x40023800
 80176ac:	40020000 	.word	0x40020000
 80176b0:	2000673c 	.word	0x2000673c
 80176b4:	40026410 	.word	0x40026410
 80176b8:	40012100 	.word	0x40012100

080176bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b08a      	sub	sp, #40	; 0x28
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80176c4:	f107 0314 	add.w	r3, r7, #20
 80176c8:	2200      	movs	r2, #0
 80176ca:	601a      	str	r2, [r3, #0]
 80176cc:	605a      	str	r2, [r3, #4]
 80176ce:	609a      	str	r2, [r3, #8]
 80176d0:	60da      	str	r2, [r3, #12]
 80176d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	4a33      	ldr	r2, [pc, #204]	; (80177a8 <HAL_DAC_MspInit+0xec>)
 80176da:	4293      	cmp	r3, r2
 80176dc:	d15f      	bne.n	801779e <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80176de:	2300      	movs	r3, #0
 80176e0:	613b      	str	r3, [r7, #16]
 80176e2:	4b32      	ldr	r3, [pc, #200]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 80176e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e6:	4a31      	ldr	r2, [pc, #196]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 80176e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80176ec:	6413      	str	r3, [r2, #64]	; 0x40
 80176ee:	4b2f      	ldr	r3, [pc, #188]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 80176f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80176f6:	613b      	str	r3, [r7, #16]
 80176f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176fa:	2300      	movs	r3, #0
 80176fc:	60fb      	str	r3, [r7, #12]
 80176fe:	4b2b      	ldr	r3, [pc, #172]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 8017700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017702:	4a2a      	ldr	r2, [pc, #168]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 8017704:	f043 0301 	orr.w	r3, r3, #1
 8017708:	6313      	str	r3, [r2, #48]	; 0x30
 801770a:	4b28      	ldr	r3, [pc, #160]	; (80177ac <HAL_DAC_MspInit+0xf0>)
 801770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801770e:	f003 0301 	and.w	r3, r3, #1
 8017712:	60fb      	str	r3, [r7, #12]
 8017714:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017716:	2330      	movs	r3, #48	; 0x30
 8017718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801771a:	2303      	movs	r3, #3
 801771c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801771e:	2300      	movs	r3, #0
 8017720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017722:	f107 0314 	add.w	r3, r7, #20
 8017726:	4619      	mov	r1, r3
 8017728:	4821      	ldr	r0, [pc, #132]	; (80177b0 <HAL_DAC_MspInit+0xf4>)
 801772a:	f001 ff11 	bl	8019550 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 801772e:	4b21      	ldr	r3, [pc, #132]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017730:	4a21      	ldr	r2, [pc, #132]	; (80177b8 <HAL_DAC_MspInit+0xfc>)
 8017732:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017734:	4b1f      	ldr	r3, [pc, #124]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017736:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 801773a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801773c:	4b1d      	ldr	r3, [pc, #116]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 801773e:	2240      	movs	r2, #64	; 0x40
 8017740:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017742:	4b1c      	ldr	r3, [pc, #112]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017744:	2200      	movs	r2, #0
 8017746:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017748:	4b1a      	ldr	r3, [pc, #104]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 801774a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801774e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017750:	4b18      	ldr	r3, [pc, #96]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017756:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017758:	4b16      	ldr	r3, [pc, #88]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 801775a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801775e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017760:	4b14      	ldr	r3, [pc, #80]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017762:	2200      	movs	r2, #0
 8017764:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017766:	4b13      	ldr	r3, [pc, #76]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017768:	2200      	movs	r2, #0
 801776a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801776c:	4b11      	ldr	r3, [pc, #68]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 801776e:	2200      	movs	r2, #0
 8017770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017772:	4810      	ldr	r0, [pc, #64]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017774:	f001 f8f8 	bl	8018968 <HAL_DMA_Init>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	d001      	beq.n	8017782 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 801777e:	f7ff fec9 	bl	8017514 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	4a0b      	ldr	r2, [pc, #44]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 8017786:	609a      	str	r2, [r3, #8]
 8017788:	4a0a      	ldr	r2, [pc, #40]	; (80177b4 <HAL_DAC_MspInit+0xf8>)
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 801778e:	2200      	movs	r2, #0
 8017790:	2100      	movs	r1, #0
 8017792:	2036      	movs	r0, #54	; 0x36
 8017794:	f001 f81b 	bl	80187ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017798:	2036      	movs	r0, #54	; 0x36
 801779a:	f001 f834 	bl	8018806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 801779e:	bf00      	nop
 80177a0:	3728      	adds	r7, #40	; 0x28
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}
 80177a6:	bf00      	nop
 80177a8:	40007400 	.word	0x40007400
 80177ac:	40023800 	.word	0x40023800
 80177b0:	40020000 	.word	0x40020000
 80177b4:	200067b0 	.word	0x200067b0
 80177b8:	40026088 	.word	0x40026088

080177bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b08c      	sub	sp, #48	; 0x30
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80177c4:	f107 031c 	add.w	r3, r7, #28
 80177c8:	2200      	movs	r2, #0
 80177ca:	601a      	str	r2, [r3, #0]
 80177cc:	605a      	str	r2, [r3, #4]
 80177ce:	609a      	str	r2, [r3, #8]
 80177d0:	60da      	str	r2, [r3, #12]
 80177d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	4a3a      	ldr	r2, [pc, #232]	; (80178c4 <HAL_SPI_MspInit+0x108>)
 80177da:	4293      	cmp	r3, r2
 80177dc:	d135      	bne.n	801784a <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80177de:	2300      	movs	r3, #0
 80177e0:	61bb      	str	r3, [r7, #24]
 80177e2:	4b39      	ldr	r3, [pc, #228]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 80177e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e6:	4a38      	ldr	r2, [pc, #224]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 80177e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177ec:	6413      	str	r3, [r2, #64]	; 0x40
 80177ee:	4b36      	ldr	r3, [pc, #216]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 80177f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177f6:	61bb      	str	r3, [r7, #24]
 80177f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177fa:	2300      	movs	r3, #0
 80177fc:	617b      	str	r3, [r7, #20]
 80177fe:	4b32      	ldr	r3, [pc, #200]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 8017800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017802:	4a31      	ldr	r2, [pc, #196]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 8017804:	f043 0302 	orr.w	r3, r3, #2
 8017808:	6313      	str	r3, [r2, #48]	; 0x30
 801780a:	4b2f      	ldr	r3, [pc, #188]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 801780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801780e:	f003 0302 	and.w	r3, r3, #2
 8017812:	617b      	str	r3, [r7, #20]
 8017814:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017816:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801781a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801781c:	2302      	movs	r3, #2
 801781e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017820:	2300      	movs	r3, #0
 8017822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017824:	2303      	movs	r3, #3
 8017826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017828:	2305      	movs	r3, #5
 801782a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801782c:	f107 031c 	add.w	r3, r7, #28
 8017830:	4619      	mov	r1, r3
 8017832:	4826      	ldr	r0, [pc, #152]	; (80178cc <HAL_SPI_MspInit+0x110>)
 8017834:	f001 fe8c 	bl	8019550 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017838:	2200      	movs	r2, #0
 801783a:	2101      	movs	r1, #1
 801783c:	2024      	movs	r0, #36	; 0x24
 801783e:	f000 ffc6 	bl	80187ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017842:	2024      	movs	r0, #36	; 0x24
 8017844:	f000 ffdf 	bl	8018806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017848:	e038      	b.n	80178bc <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4a20      	ldr	r2, [pc, #128]	; (80178d0 <HAL_SPI_MspInit+0x114>)
 8017850:	4293      	cmp	r3, r2
 8017852:	d133      	bne.n	80178bc <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017854:	2300      	movs	r3, #0
 8017856:	613b      	str	r3, [r7, #16]
 8017858:	4b1b      	ldr	r3, [pc, #108]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 801785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801785c:	4a1a      	ldr	r2, [pc, #104]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 801785e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017862:	6413      	str	r3, [r2, #64]	; 0x40
 8017864:	4b18      	ldr	r3, [pc, #96]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 8017866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801786c:	613b      	str	r3, [r7, #16]
 801786e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017870:	2300      	movs	r3, #0
 8017872:	60fb      	str	r3, [r7, #12]
 8017874:	4b14      	ldr	r3, [pc, #80]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 8017876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017878:	4a13      	ldr	r2, [pc, #76]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 801787a:	f043 0302 	orr.w	r3, r3, #2
 801787e:	6313      	str	r3, [r2, #48]	; 0x30
 8017880:	4b11      	ldr	r3, [pc, #68]	; (80178c8 <HAL_SPI_MspInit+0x10c>)
 8017882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017884:	f003 0302 	and.w	r3, r3, #2
 8017888:	60fb      	str	r3, [r7, #12]
 801788a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 801788c:	2338      	movs	r3, #56	; 0x38
 801788e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017890:	2302      	movs	r3, #2
 8017892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017894:	2300      	movs	r3, #0
 8017896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017898:	2303      	movs	r3, #3
 801789a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801789c:	2306      	movs	r3, #6
 801789e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80178a0:	f107 031c 	add.w	r3, r7, #28
 80178a4:	4619      	mov	r1, r3
 80178a6:	4809      	ldr	r0, [pc, #36]	; (80178cc <HAL_SPI_MspInit+0x110>)
 80178a8:	f001 fe52 	bl	8019550 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80178ac:	2200      	movs	r2, #0
 80178ae:	2101      	movs	r1, #1
 80178b0:	2033      	movs	r0, #51	; 0x33
 80178b2:	f000 ff8c 	bl	80187ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80178b6:	2033      	movs	r0, #51	; 0x33
 80178b8:	f000 ffa5 	bl	8018806 <HAL_NVIC_EnableIRQ>
}
 80178bc:	bf00      	nop
 80178be:	3730      	adds	r7, #48	; 0x30
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	40003800 	.word	0x40003800
 80178c8:	40023800 	.word	0x40023800
 80178cc:	40020400 	.word	0x40020400
 80178d0:	40003c00 	.word	0x40003c00

080178d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b086      	sub	sp, #24
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	4a2c      	ldr	r2, [pc, #176]	; (8017994 <HAL_TIM_Base_MspInit+0xc0>)
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d10e      	bne.n	8017904 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80178e6:	2300      	movs	r3, #0
 80178e8:	617b      	str	r3, [r7, #20]
 80178ea:	4b2b      	ldr	r3, [pc, #172]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 80178ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ee:	4a2a      	ldr	r2, [pc, #168]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 80178f0:	f043 0301 	orr.w	r3, r3, #1
 80178f4:	6453      	str	r3, [r2, #68]	; 0x44
 80178f6:	4b28      	ldr	r3, [pc, #160]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 80178f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178fa:	f003 0301 	and.w	r3, r3, #1
 80178fe:	617b      	str	r3, [r7, #20]
 8017900:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8017902:	e042      	b.n	801798a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4a24      	ldr	r2, [pc, #144]	; (801799c <HAL_TIM_Base_MspInit+0xc8>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d116      	bne.n	801793c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801790e:	2300      	movs	r3, #0
 8017910:	613b      	str	r3, [r7, #16]
 8017912:	4b21      	ldr	r3, [pc, #132]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017916:	4a20      	ldr	r2, [pc, #128]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017918:	f043 0302 	orr.w	r3, r3, #2
 801791c:	6413      	str	r3, [r2, #64]	; 0x40
 801791e:	4b1e      	ldr	r3, [pc, #120]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017922:	f003 0302 	and.w	r3, r3, #2
 8017926:	613b      	str	r3, [r7, #16]
 8017928:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 801792a:	2200      	movs	r2, #0
 801792c:	2100      	movs	r1, #0
 801792e:	201d      	movs	r0, #29
 8017930:	f000 ff4d 	bl	80187ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017934:	201d      	movs	r0, #29
 8017936:	f000 ff66 	bl	8018806 <HAL_NVIC_EnableIRQ>
}
 801793a:	e026      	b.n	801798a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	4a17      	ldr	r2, [pc, #92]	; (80179a0 <HAL_TIM_Base_MspInit+0xcc>)
 8017942:	4293      	cmp	r3, r2
 8017944:	d10e      	bne.n	8017964 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8017946:	2300      	movs	r3, #0
 8017948:	60fb      	str	r3, [r7, #12]
 801794a:	4b13      	ldr	r3, [pc, #76]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 801794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801794e:	4a12      	ldr	r2, [pc, #72]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017950:	f043 0308 	orr.w	r3, r3, #8
 8017954:	6413      	str	r3, [r2, #64]	; 0x40
 8017956:	4b10      	ldr	r3, [pc, #64]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801795a:	f003 0308 	and.w	r3, r3, #8
 801795e:	60fb      	str	r3, [r7, #12]
 8017960:	68fb      	ldr	r3, [r7, #12]
}
 8017962:	e012      	b.n	801798a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	4a0e      	ldr	r2, [pc, #56]	; (80179a4 <HAL_TIM_Base_MspInit+0xd0>)
 801796a:	4293      	cmp	r3, r2
 801796c:	d10d      	bne.n	801798a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 801796e:	2300      	movs	r3, #0
 8017970:	60bb      	str	r3, [r7, #8]
 8017972:	4b09      	ldr	r3, [pc, #36]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017976:	4a08      	ldr	r2, [pc, #32]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017978:	f043 0320 	orr.w	r3, r3, #32
 801797c:	6413      	str	r3, [r2, #64]	; 0x40
 801797e:	4b06      	ldr	r3, [pc, #24]	; (8017998 <HAL_TIM_Base_MspInit+0xc4>)
 8017980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017982:	f003 0320 	and.w	r3, r3, #32
 8017986:	60bb      	str	r3, [r7, #8]
 8017988:	68bb      	ldr	r3, [r7, #8]
}
 801798a:	bf00      	nop
 801798c:	3718      	adds	r7, #24
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	40010000 	.word	0x40010000
 8017998:	40023800 	.word	0x40023800
 801799c:	40000400 	.word	0x40000400
 80179a0:	40000c00 	.word	0x40000c00
 80179a4:	40001400 	.word	0x40001400

080179a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80179a8:	b480      	push	{r7}
 80179aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80179ac:	e7fe      	b.n	80179ac <NMI_Handler+0x4>

080179ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80179ae:	b480      	push	{r7}
 80179b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80179b2:	e7fe      	b.n	80179b2 <HardFault_Handler+0x4>

080179b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80179b4:	b480      	push	{r7}
 80179b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80179b8:	e7fe      	b.n	80179b8 <MemManage_Handler+0x4>

080179ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80179ba:	b480      	push	{r7}
 80179bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80179be:	e7fe      	b.n	80179be <BusFault_Handler+0x4>

080179c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80179c0:	b480      	push	{r7}
 80179c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80179c4:	e7fe      	b.n	80179c4 <UsageFault_Handler+0x4>

080179c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80179c6:	b480      	push	{r7}
 80179c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80179ca:	bf00      	nop
 80179cc:	46bd      	mov	sp, r7
 80179ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d2:	4770      	bx	lr

080179d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80179d4:	b480      	push	{r7}
 80179d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80179d8:	bf00      	nop
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr

080179e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80179e2:	b480      	push	{r7}
 80179e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80179e6:	bf00      	nop
 80179e8:	46bd      	mov	sp, r7
 80179ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ee:	4770      	bx	lr

080179f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80179f4:	f000 fb5a 	bl	80180ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80179f8:	bf00      	nop
 80179fa:	bd80      	pop	{r7, pc}

080179fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8017a00:	4802      	ldr	r0, [pc, #8]	; (8017a0c <DMA1_Stream5_IRQHandler+0x10>)
 8017a02:	f001 f881 	bl	8018b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8017a06:	bf00      	nop
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	200067b0 	.word	0x200067b0

08017a10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017a14:	4802      	ldr	r0, [pc, #8]	; (8017a20 <TIM3_IRQHandler+0x10>)
 8017a16:	f005 fa91 	bl	801cf3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017a1a:	bf00      	nop
 8017a1c:	bd80      	pop	{r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	20006908 	.word	0x20006908

08017a24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8017a28:	4802      	ldr	r0, [pc, #8]	; (8017a34 <SPI2_IRQHandler+0x10>)
 8017a2a:	f004 ff79 	bl	801c920 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8017a2e:	bf00      	nop
 8017a30:	bd80      	pop	{r7, pc}
 8017a32:	bf00      	nop
 8017a34:	20006810 	.word	0x20006810

08017a38 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8017a3c:	4802      	ldr	r0, [pc, #8]	; (8017a48 <SPI3_IRQHandler+0x10>)
 8017a3e:	f004 ff6f 	bl	801c920 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8017a42:	bf00      	nop
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	20006868 	.word	0x20006868

08017a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017a50:	4802      	ldr	r0, [pc, #8]	; (8017a5c <DMA2_Stream0_IRQHandler+0x10>)
 8017a52:	f001 f859 	bl	8018b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017a56:	bf00      	nop
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	2000673c 	.word	0x2000673c

08017a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8017a64:	4802      	ldr	r0, [pc, #8]	; (8017a70 <OTG_FS_IRQHandler+0x10>)
 8017a66:	f002 f88f 	bl	8019b88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017a6a:	bf00      	nop
 8017a6c:	bd80      	pop	{r7, pc}
 8017a6e:	bf00      	nop
 8017a70:	20009fe8 	.word	0x20009fe8

08017a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b086      	sub	sp, #24
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017a7c:	4a14      	ldr	r2, [pc, #80]	; (8017ad0 <_sbrk+0x5c>)
 8017a7e:	4b15      	ldr	r3, [pc, #84]	; (8017ad4 <_sbrk+0x60>)
 8017a80:	1ad3      	subs	r3, r2, r3
 8017a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017a84:	697b      	ldr	r3, [r7, #20]
 8017a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017a88:	4b13      	ldr	r3, [pc, #76]	; (8017ad8 <_sbrk+0x64>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d102      	bne.n	8017a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017a90:	4b11      	ldr	r3, [pc, #68]	; (8017ad8 <_sbrk+0x64>)
 8017a92:	4a12      	ldr	r2, [pc, #72]	; (8017adc <_sbrk+0x68>)
 8017a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017a96:	4b10      	ldr	r3, [pc, #64]	; (8017ad8 <_sbrk+0x64>)
 8017a98:	681a      	ldr	r2, [r3, #0]
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	693a      	ldr	r2, [r7, #16]
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d207      	bcs.n	8017ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017aa4:	f00e fc76 	bl	8026394 <__errno>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	220c      	movs	r2, #12
 8017aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017aae:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab2:	e009      	b.n	8017ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017ab4:	4b08      	ldr	r3, [pc, #32]	; (8017ad8 <_sbrk+0x64>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017aba:	4b07      	ldr	r3, [pc, #28]	; (8017ad8 <_sbrk+0x64>)
 8017abc:	681a      	ldr	r2, [r3, #0]
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	4413      	add	r3, r2
 8017ac2:	4a05      	ldr	r2, [pc, #20]	; (8017ad8 <_sbrk+0x64>)
 8017ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3718      	adds	r7, #24
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}
 8017ad0:	20020000 	.word	0x20020000
 8017ad4:	00001000 	.word	0x00001000
 8017ad8:	20006a34 	.word	0x20006a34
 8017adc:	2000a780 	.word	0x2000a780

08017ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017ae0:	b480      	push	{r7}
 8017ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017ae4:	4b06      	ldr	r3, [pc, #24]	; (8017b00 <SystemInit+0x20>)
 8017ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017aea:	4a05      	ldr	r2, [pc, #20]	; (8017b00 <SystemInit+0x20>)
 8017aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017af4:	bf00      	nop
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	e000ed00 	.word	0xe000ed00

08017b04 <W25Qx_Init>:
/**
  * @brief  Initializes the W25QXXXX interface.
  * @retval None
  */
uint8_t W25Qx_Init(void)
{ 
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
	uint8_t state;
	/* Reset W25Qxxx */
	W25Qx_Reset();
 8017b0a:	f000 f80d 	bl	8017b28 <W25Qx_Reset>
	
	state = W25Qx_Get_Parameter(&W25Qx_Para);
 8017b0e:	4805      	ldr	r0, [pc, #20]	; (8017b24 <W25Qx_Init+0x20>)
 8017b10:	f000 f8c8 	bl	8017ca4 <W25Qx_Get_Parameter>
 8017b14:	4603      	mov	r3, r0
 8017b16:	71fb      	strb	r3, [r7, #7]
	
	return state;
 8017b18:	79fb      	ldrb	r3, [r7, #7]
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	20006a38 	.word	0x20006a38

08017b28 <W25Qx_Reset>:
/**
  * @brief  This function reset the W25Qx.
  * @retval None
  */
void	W25Qx_Reset(void)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8017b2e:	f649 1366 	movw	r3, #39270	; 0x9966
 8017b32:	80bb      	strh	r3, [r7, #4]
	
	W25Qx_Enable();
 8017b34:	2200      	movs	r2, #0
 8017b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b3a:	480a      	ldr	r0, [pc, #40]	; (8017b64 <W25Qx_Reset+0x3c>)
 8017b3c:	f001 feb4 	bl	80198a8 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25QXXXX_TIMEOUT_VALUE);
 8017b40:	1d39      	adds	r1, r7, #4
 8017b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b46:	2202      	movs	r2, #2
 8017b48:	4807      	ldr	r0, [pc, #28]	; (8017b68 <W25Qx_Reset+0x40>)
 8017b4a:	f004 fafa 	bl	801c142 <HAL_SPI_Transmit>
	W25Qx_Disable();
 8017b4e:	2201      	movs	r2, #1
 8017b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b54:	4803      	ldr	r0, [pc, #12]	; (8017b64 <W25Qx_Reset+0x3c>)
 8017b56:	f001 fea7 	bl	80198a8 <HAL_GPIO_WritePin>

}
 8017b5a:	bf00      	nop
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	bf00      	nop
 8017b64:	40020400 	.word	0x40020400
 8017b68:	20006810 	.word	0x20006810

08017b6c <W25Qx_GetStatus>:
/**
  * @brief  Reads current status of the W25QXXXX.
  * @retval W25QXXXX memory status
  */
uint8_t W25Qx_GetStatus(void)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8017b72:	2305      	movs	r3, #5
 8017b74:	713b      	strb	r3, [r7, #4]
	uint8_t status;
	
	W25Qx_Enable();
 8017b76:	2200      	movs	r2, #0
 8017b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b7c:	4811      	ldr	r0, [pc, #68]	; (8017bc4 <W25Qx_GetStatus+0x58>)
 8017b7e:	f001 fe93 	bl	80198a8 <HAL_GPIO_WritePin>
	
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017b82:	1d39      	adds	r1, r7, #4
 8017b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b88:	2201      	movs	r2, #1
 8017b8a:	480f      	ldr	r0, [pc, #60]	; (8017bc8 <W25Qx_GetStatus+0x5c>)
 8017b8c:	f004 fad9 	bl	801c142 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,&status, 1, W25QXXXX_TIMEOUT_VALUE);
 8017b90:	1cf9      	adds	r1, r7, #3
 8017b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b96:	2201      	movs	r2, #1
 8017b98:	480b      	ldr	r0, [pc, #44]	; (8017bc8 <W25Qx_GetStatus+0x5c>)
 8017b9a:	f004 fc0e 	bl	801c3ba <HAL_SPI_Receive>
	W25Qx_Disable();
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017ba4:	4807      	ldr	r0, [pc, #28]	; (8017bc4 <W25Qx_GetStatus+0x58>)
 8017ba6:	f001 fe7f 	bl	80198a8 <HAL_GPIO_WritePin>
	
	/* Check the value of the register */
  if((status & W25QXXXX_FSR_BUSY) != 0)
 8017baa:	78fb      	ldrb	r3, [r7, #3]
 8017bac:	f003 0301 	and.w	r3, r3, #1
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d001      	beq.n	8017bb8 <W25Qx_GetStatus+0x4c>
  {
    return W25Qx_BUSY;
 8017bb4:	2302      	movs	r3, #2
 8017bb6:	e000      	b.n	8017bba <W25Qx_GetStatus+0x4e>
  }
	else
	{
		return W25Qx_OK;
 8017bb8:	2300      	movs	r3, #0
	}		
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	3708      	adds	r7, #8
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	40020400 	.word	0x40020400
 8017bc8:	20006810 	.word	0x20006810

08017bcc <W25Qx_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @retval None
  */
uint8_t W25Qx_WriteEnable(void)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8017bd2:	2306      	movs	r3, #6
 8017bd4:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = get_tick();
 8017bd6:	f000 fa7d 	bl	80180d4 <HAL_GetTick>
 8017bda:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017bdc:	2200      	movs	r2, #0
 8017bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017be2:	4814      	ldr	r0, [pc, #80]	; (8017c34 <W25Qx_WriteEnable+0x68>)
 8017be4:	f001 fe60 	bl	80198a8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017be8:	4639      	mov	r1, r7
 8017bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bee:	2201      	movs	r2, #1
 8017bf0:	4811      	ldr	r0, [pc, #68]	; (8017c38 <W25Qx_WriteEnable+0x6c>)
 8017bf2:	f004 faa6 	bl	801c142 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bfc:	480d      	ldr	r0, [pc, #52]	; (8017c34 <W25Qx_WriteEnable+0x68>)
 8017bfe:	f001 fe53 	bl	80198a8 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017c02:	e00c      	b.n	8017c1e <W25Qx_WriteEnable+0x52>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017c04:	f000 fa66 	bl	80180d4 <HAL_GetTick>
 8017c08:	4602      	mov	r2, r0
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	1ad3      	subs	r3, r2, r3
 8017c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c12:	d901      	bls.n	8017c18 <W25Qx_WriteEnable+0x4c>
    {        
			return W25Qx_TIMEOUT;
 8017c14:	2303      	movs	r3, #3
 8017c16:	e008      	b.n	8017c2a <W25Qx_WriteEnable+0x5e>
    }
	  delay(1);
 8017c18:	2001      	movs	r0, #1
 8017c1a:	f000 fa67 	bl	80180ec <HAL_Delay>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017c1e:	f7ff ffa5 	bl	8017b6c <W25Qx_GetStatus>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	d0ed      	beq.n	8017c04 <W25Qx_WriteEnable+0x38>
	}
	
	return W25Qx_OK;
 8017c28:	2300      	movs	r3, #0
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3708      	adds	r7, #8
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	40020400 	.word	0x40020400
 8017c38:	20006810 	.word	0x20006810

08017c3c <W25Qx_Read_ID>:
/   0XEF15,��ʾоƬ�ͺ�ΪW25Q32   
/   0XEF16,��ʾоƬ�ͺ�ΪW25Q64  
  * @retval None
  */
void W25Qx_Read_ID(uint16_t *ID)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b084      	sub	sp, #16
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
	uint8_t idt[2];
	
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 8017c44:	2390      	movs	r3, #144	; 0x90
 8017c46:	60bb      	str	r3, [r7, #8]
	
	W25Qx_Enable();
 8017c48:	2200      	movs	r2, #0
 8017c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c4e:	4813      	ldr	r0, [pc, #76]	; (8017c9c <W25Qx_Read_ID+0x60>)
 8017c50:	f001 fe2a 	bl	80198a8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017c54:	f107 0108 	add.w	r1, r7, #8
 8017c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c5c:	2204      	movs	r2, #4
 8017c5e:	4810      	ldr	r0, [pc, #64]	; (8017ca0 <W25Qx_Read_ID+0x64>)
 8017c60:	f004 fa6f 	bl	801c142 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,idt, 2, W25QXXXX_TIMEOUT_VALUE);
 8017c64:	f107 010c 	add.w	r1, r7, #12
 8017c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c6c:	2202      	movs	r2, #2
 8017c6e:	480c      	ldr	r0, [pc, #48]	; (8017ca0 <W25Qx_Read_ID+0x64>)
 8017c70:	f004 fba3 	bl	801c3ba <HAL_SPI_Receive>
	
	*ID = (idt[0] << 8) + idt[1]; 
 8017c74:	7b3b      	ldrb	r3, [r7, #12]
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	021b      	lsls	r3, r3, #8
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	7b7b      	ldrb	r3, [r7, #13]
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	4413      	add	r3, r2
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	801a      	strh	r2, [r3, #0]
	
	W25Qx_Disable();
 8017c88:	2201      	movs	r2, #1
 8017c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c8e:	4803      	ldr	r0, [pc, #12]	; (8017c9c <W25Qx_Read_ID+0x60>)
 8017c90:	f001 fe0a 	bl	80198a8 <HAL_GPIO_WritePin>
		
}
 8017c94:	bf00      	nop
 8017c96:	3710      	adds	r7, #16
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}
 8017c9c:	40020400 	.word	0x40020400
 8017ca0:	20006810 	.word	0x20006810

08017ca4 <W25Qx_Get_Parameter>:
  * @brief  Get W25QX Parameter.
  * @param  Para: W25Qx_Parameter
  * @retval NULL
  */
uint8_t W25Qx_Get_Parameter(W25Qx_Parameter *Para)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b084      	sub	sp, #16
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
	uint16_t id;
	uint32_t size;
	
	Para->PAGE_SIZE = 256;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017cb2:	81da      	strh	r2, [r3, #14]
	Para->SUBSECTOR_SIZE = 4096;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017cba:	819a      	strh	r2, [r3, #12]
	Para->SECTOR_SIZE = 0x10000;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017cc2:	605a      	str	r2, [r3, #4]
	
	W25Qx_Read_ID(&id);
 8017cc4:	f107 030a 	add.w	r3, r7, #10
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7ff ffb7 	bl	8017c3c <W25Qx_Read_ID>
	if ((id < W25Q80 || id > W25Q256) &&
 8017cce:	897b      	ldrh	r3, [r7, #10]
 8017cd0:	f64e 7212 	movw	r2, #61202	; 0xef12
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	d904      	bls.n	8017ce2 <W25Qx_Get_Parameter+0x3e>
 8017cd8:	897b      	ldrh	r3, [r7, #10]
 8017cda:	f64e 7218 	movw	r2, #61208	; 0xef18
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	d90b      	bls.n	8017cfa <W25Qx_Get_Parameter+0x56>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017ce2:	897b      	ldrh	r3, [r7, #10]
	if ((id < W25Q80 || id > W25Q256) &&
 8017ce4:	f64c 0215 	movw	r2, #51221	; 0xc815
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d904      	bls.n	8017cf6 <W25Qx_Get_Parameter+0x52>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017cec:	897b      	ldrh	r3, [r7, #10]
 8017cee:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017cf2:	4293      	cmp	r3, r2
 8017cf4:	d901      	bls.n	8017cfa <W25Qx_Get_Parameter+0x56>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	e049      	b.n	8017d8e <W25Qx_Get_Parameter+0xea>
	
	if (id > GD25Q256) //wq25q part
 8017cfa:	897b      	ldrh	r3, [r7, #10]
 8017cfc:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d916      	bls.n	8017d32 <W25Qx_Get_Parameter+0x8e>
		size = (uint32_t) powf(2,(id - 0xEF13)) * 1024 * 1024;
 8017d04:	897b      	ldrh	r3, [r7, #10]
 8017d06:	f5a3 436f 	sub.w	r3, r3, #61184	; 0xef00
 8017d0a:	3b13      	subs	r3, #19
 8017d0c:	ee07 3a90 	vmov	s15, r3
 8017d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d14:	eef0 0a67 	vmov.f32	s1, s15
 8017d18:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017d1c:	f00e fc88 	bl	8026630 <powf>
 8017d20:	eef0 7a40 	vmov.f32	s15, s0
 8017d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d28:	ee17 3a90 	vmov	r3, s15
 8017d2c:	051b      	lsls	r3, r3, #20
 8017d2e:	60fb      	str	r3, [r7, #12]
 8017d30:	e015      	b.n	8017d5e <W25Qx_Get_Parameter+0xba>
	else  //gd25q part
		size = (uint32_t) powf(2,(id - 0xC816)) * 1024 * 1024 * 8;
 8017d32:	897b      	ldrh	r3, [r7, #10]
 8017d34:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8017d38:	3b16      	subs	r3, #22
 8017d3a:	ee07 3a90 	vmov	s15, r3
 8017d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d42:	eef0 0a67 	vmov.f32	s1, s15
 8017d46:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017d4a:	f00e fc71 	bl	8026630 <powf>
 8017d4e:	eef0 7a40 	vmov.f32	s15, s0
 8017d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d56:	ee17 3a90 	vmov	r3, s15
 8017d5a:	05db      	lsls	r3, r3, #23
 8017d5c:	60fb      	str	r3, [r7, #12]

	Para->FLASH_ID = id;
 8017d5e:	897a      	ldrh	r2, [r7, #10]
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	801a      	strh	r2, [r3, #0]
	Para->FLASH_SIZE = size;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	68fa      	ldr	r2, [r7, #12]
 8017d68:	611a      	str	r2, [r3, #16]
	Para->SUBSECTOR_COUNT = Para->FLASH_SIZE / Para->SUBSECTOR_SIZE;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	691b      	ldr	r3, [r3, #16]
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	8992      	ldrh	r2, [r2, #12]
 8017d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	609a      	str	r2, [r3, #8]
	Para->SECTOR_COUNT = Para->FLASH_SIZE / Para->SECTOR_SIZE;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	691a      	ldr	r2, [r3, #16]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	805a      	strh	r2, [r3, #2]
	
	return W25Qx_OK;
 8017d8c:	2300      	movs	r3, #0
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3710      	adds	r7, #16
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
	...

08017d98 <W25Qx_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	60b9      	str	r1, [r7, #8]
 8017da2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8017da4:	2303      	movs	r3, #3
 8017da6:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	0c1b      	lsrs	r3, r3, #16
 8017dac:	b2db      	uxtb	r3, r3
 8017dae:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	0a1b      	lsrs	r3, r3, #8
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	b2db      	uxtb	r3, r3
 8017dbc:	75fb      	strb	r3, [r7, #23]
	
	W25Qx_Enable();
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017dc4:	4811      	ldr	r0, [pc, #68]	; (8017e0c <W25Qx_Read+0x74>)
 8017dc6:	f001 fd6f 	bl	80198a8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017dca:	f107 0114 	add.w	r1, r7, #20
 8017dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017dd2:	2204      	movs	r2, #4
 8017dd4:	480e      	ldr	r0, [pc, #56]	; (8017e10 <W25Qx_Read+0x78>)
 8017dd6:	f004 f9b4 	bl	801c142 <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData,Size,W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	b29a      	uxth	r2, r3
 8017dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017de2:	68f9      	ldr	r1, [r7, #12]
 8017de4:	480a      	ldr	r0, [pc, #40]	; (8017e10 <W25Qx_Read+0x78>)
 8017de6:	f004 fae8 	bl	801c3ba <HAL_SPI_Receive>
 8017dea:	4603      	mov	r3, r0
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d001      	beq.n	8017df4 <W25Qx_Read+0x5c>
  {
    return W25Qx_ERROR;
 8017df0:	2301      	movs	r3, #1
 8017df2:	e006      	b.n	8017e02 <W25Qx_Read+0x6a>
  }
	W25Qx_Disable();
 8017df4:	2201      	movs	r2, #1
 8017df6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017dfa:	4804      	ldr	r0, [pc, #16]	; (8017e0c <W25Qx_Read+0x74>)
 8017dfc:	f001 fd54 	bl	80198a8 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8017e00:	2300      	movs	r3, #0
}
 8017e02:	4618      	mov	r0, r3
 8017e04:	3718      	adds	r7, #24
 8017e06:	46bd      	mov	sp, r7
 8017e08:	bd80      	pop	{r7, pc}
 8017e0a:	bf00      	nop
 8017e0c:	40020400 	.word	0x40020400
 8017e10:	20006810 	.word	0x20006810

08017e14 <W25Qx_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write,No more than 256byte.    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b08a      	sub	sp, #40	; 0x28
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = get_tick();
 8017e20:	f000 f958 	bl	80180d4 <HAL_GetTick>
 8017e24:	61f8      	str	r0, [r7, #28]
	
	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 8017e2a:	e003      	b.n	8017e34 <W25Qx_Write+0x20>
  {
    current_addr += W25QXXXX_PAGE_SIZE;
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017e32:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 8017e34:	6a3a      	ldr	r2, [r7, #32]
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	d9f7      	bls.n	8017e2c <W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 8017e3c:	6a3a      	ldr	r2, [r7, #32]
 8017e3e:	68bb      	ldr	r3, [r7, #8]
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8017e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d901      	bls.n	8017e50 <W25Qx_Write+0x3c>
  {
    current_size = Size;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	4413      	add	r3, r2
 8017e5a:	61bb      	str	r3, [r7, #24]
	
  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 8017e5c:	2302      	movs	r3, #2
 8017e5e:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 8017e60:	6a3b      	ldr	r3, [r7, #32]
 8017e62:	0c1b      	lsrs	r3, r3, #16
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 8017e68:	6a3b      	ldr	r3, [r7, #32]
 8017e6a:	0a1b      	lsrs	r3, r3, #8
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 8017e70:	6a3b      	ldr	r3, [r7, #32]
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		W25Qx_WriteEnable();
 8017e76:	f7ff fea9 	bl	8017bcc <W25Qx_WriteEnable>
	
		W25Qx_Enable();
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e80:	4828      	ldr	r0, [pc, #160]	; (8017f24 <W25Qx_Write+0x110>)
 8017e82:	f001 fd11 	bl	80198a8 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&hspi2,cmd, 4, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017e86:	f107 0114 	add.w	r1, r7, #20
 8017e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e8e:	2204      	movs	r2, #4
 8017e90:	4825      	ldr	r0, [pc, #148]	; (8017f28 <W25Qx_Write+0x114>)
 8017e92:	f004 f956 	bl	801c142 <HAL_SPI_Transmit>
 8017e96:	4603      	mov	r3, r0
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d001      	beq.n	8017ea0 <W25Qx_Write+0x8c>
    {
      return W25Qx_ERROR;
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	e03c      	b.n	8017f1a <W25Qx_Write+0x106>
    }
    
    /* Transmission of the data */
    if (HAL_SPI_Transmit(&hspi2, pData,current_size, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea2:	b29a      	uxth	r2, r3
 8017ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ea8:	68f9      	ldr	r1, [r7, #12]
 8017eaa:	481f      	ldr	r0, [pc, #124]	; (8017f28 <W25Qx_Write+0x114>)
 8017eac:	f004 f949 	bl	801c142 <HAL_SPI_Transmit>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d001      	beq.n	8017eba <W25Qx_Write+0xa6>
    {
      return W25Qx_ERROR;
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	e02f      	b.n	8017f1a <W25Qx_Write+0x106>
    }
		W25Qx_Disable();
 8017eba:	2201      	movs	r2, #1
 8017ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017ec0:	4818      	ldr	r0, [pc, #96]	; (8017f24 <W25Qx_Write+0x110>)
 8017ec2:	f001 fcf1 	bl	80198a8 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017ec6:	e009      	b.n	8017edc <W25Qx_Write+0xc8>
		{
			/* Check for the Timeout */
			if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017ec8:	f000 f904 	bl	80180d4 <HAL_GetTick>
 8017ecc:	4602      	mov	r2, r0
 8017ece:	69fb      	ldr	r3, [r7, #28]
 8017ed0:	1ad3      	subs	r3, r2, r3
 8017ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ed6:	d901      	bls.n	8017edc <W25Qx_Write+0xc8>
			{        
				return W25Qx_TIMEOUT;
 8017ed8:	2303      	movs	r3, #3
 8017eda:	e01e      	b.n	8017f1a <W25Qx_Write+0x106>
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017edc:	f7ff fe46 	bl	8017b6c <W25Qx_GetStatus>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	d0f0      	beq.n	8017ec8 <W25Qx_Write+0xb4>
			}
			//delay(1);
		}
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8017ee6:	6a3a      	ldr	r2, [r7, #32]
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	4413      	add	r3, r2
 8017eec:	623b      	str	r3, [r7, #32]
    pData += current_size;
 8017eee:	68fa      	ldr	r2, [r7, #12]
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	4413      	add	r3, r2
 8017ef4:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25QXXXX_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25QXXXX_PAGE_SIZE;
 8017ef6:	6a3b      	ldr	r3, [r7, #32]
 8017ef8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017efc:	69ba      	ldr	r2, [r7, #24]
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d203      	bcs.n	8017f0a <W25Qx_Write+0xf6>
 8017f02:	69ba      	ldr	r2, [r7, #24]
 8017f04:	6a3b      	ldr	r3, [r7, #32]
 8017f06:	1ad3      	subs	r3, r2, r3
 8017f08:	e001      	b.n	8017f0e <W25Qx_Write+0xfa>
 8017f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017f0e:	627b      	str	r3, [r7, #36]	; 0x24
  } while (current_addr < end_addr);
 8017f10:	6a3a      	ldr	r2, [r7, #32]
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d3a1      	bcc.n	8017e5c <W25Qx_Write+0x48>

	
	return W25Qx_OK;
 8017f18:	2300      	movs	r3, #0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3728      	adds	r7, #40	; 0x28
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	40020400 	.word	0x40020400
 8017f28:	20006810 	.word	0x20006810

08017f2c <W25Qx_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t W25Qx_Erase_Block(uint32_t Address)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = get_tick();
 8017f34:	f000 f8ce 	bl	80180d4 <HAL_GetTick>
 8017f38:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 8017f3a:	2320      	movs	r3, #32
 8017f3c:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t)(Address >> 16);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	0c1b      	lsrs	r3, r3, #16
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)(Address >> 8);
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	0a1b      	lsrs	r3, r3, #8
 8017f4a:	b2db      	uxtb	r3, r3
 8017f4c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(Address);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	b2db      	uxtb	r3, r3
 8017f52:	72fb      	strb	r3, [r7, #11]
	
	/* Enable write operations */
	W25Qx_WriteEnable();
 8017f54:	f7ff fe3a 	bl	8017bcc <W25Qx_WriteEnable>
	
	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017f58:	2200      	movs	r2, #0
 8017f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f5e:	4813      	ldr	r0, [pc, #76]	; (8017fac <W25Qx_Erase_Block+0x80>)
 8017f60:	f001 fca2 	bl	80198a8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017f64:	f107 0108 	add.w	r1, r7, #8
 8017f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f6c:	2204      	movs	r2, #4
 8017f6e:	4810      	ldr	r0, [pc, #64]	; (8017fb0 <W25Qx_Erase_Block+0x84>)
 8017f70:	f004 f8e7 	bl	801c142 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017f74:	2201      	movs	r2, #1
 8017f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f7a:	480c      	ldr	r0, [pc, #48]	; (8017fac <W25Qx_Erase_Block+0x80>)
 8017f7c:	f001 fc94 	bl	80198a8 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f80:	e00a      	b.n	8017f98 <W25Qx_Erase_Block+0x6c>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_SECTOR_ERASE_MAX_TIME)
 8017f82:	f000 f8a7 	bl	80180d4 <HAL_GetTick>
 8017f86:	4602      	mov	r2, r0
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	1ad3      	subs	r3, r2, r3
 8017f8c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d901      	bls.n	8017f98 <W25Qx_Erase_Block+0x6c>
    {        
			return W25Qx_TIMEOUT;
 8017f94:	2303      	movs	r3, #3
 8017f96:	e005      	b.n	8017fa4 <W25Qx_Erase_Block+0x78>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f98:	f7ff fde8 	bl	8017b6c <W25Qx_GetStatus>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b02      	cmp	r3, #2
 8017fa0:	d0ef      	beq.n	8017f82 <W25Qx_Erase_Block+0x56>
    }
	  //delay(1);
	}
	return W25Qx_OK;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3710      	adds	r7, #16
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}
 8017fac:	40020400 	.word	0x40020400
 8017fb0:	20006810 	.word	0x20006810

08017fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8017fb8:	480d      	ldr	r0, [pc, #52]	; (8017ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8017fba:	490e      	ldr	r1, [pc, #56]	; (8017ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8017fbc:	4a0e      	ldr	r2, [pc, #56]	; (8017ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8017fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017fc0:	e002      	b.n	8017fc8 <LoopCopyDataInit>

08017fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017fc6:	3304      	adds	r3, #4

08017fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017fcc:	d3f9      	bcc.n	8017fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017fce:	4a0b      	ldr	r2, [pc, #44]	; (8017ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8017fd0:	4c0b      	ldr	r4, [pc, #44]	; (8018000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8017fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017fd4:	e001      	b.n	8017fda <LoopFillZerobss>

08017fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017fd8:	3204      	adds	r2, #4

08017fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017fdc:	d3fb      	bcc.n	8017fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017fde:	f7ff fd7f 	bl	8017ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017fe2:	f00e f9dd 	bl	80263a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017fe6:	f7fd fdbd 	bl	8015b64 <main>
  bx  lr    
 8017fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8017ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017ff4:	20000710 	.word	0x20000710
  ldr r2, =_sidata
 8017ff8:	08026dfc 	.word	0x08026dfc
  ldr r2, =_sbss
 8017ffc:	20000710 	.word	0x20000710
  ldr r4, =_ebss
 8018000:	2000a77c 	.word	0x2000a77c

08018004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018004:	e7fe      	b.n	8018004 <ADC_IRQHandler>
	...

08018008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801800c:	4b0e      	ldr	r3, [pc, #56]	; (8018048 <HAL_Init+0x40>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	4a0d      	ldr	r2, [pc, #52]	; (8018048 <HAL_Init+0x40>)
 8018012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018018:	4b0b      	ldr	r3, [pc, #44]	; (8018048 <HAL_Init+0x40>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	4a0a      	ldr	r2, [pc, #40]	; (8018048 <HAL_Init+0x40>)
 801801e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018024:	4b08      	ldr	r3, [pc, #32]	; (8018048 <HAL_Init+0x40>)
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4a07      	ldr	r2, [pc, #28]	; (8018048 <HAL_Init+0x40>)
 801802a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801802e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018030:	2003      	movs	r0, #3
 8018032:	f000 fbc1 	bl	80187b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018036:	2000      	movs	r0, #0
 8018038:	f000 f808 	bl	801804c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801803c:	f7ff fa70 	bl	8017520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018040:	2300      	movs	r3, #0
}
 8018042:	4618      	mov	r0, r3
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	40023c00 	.word	0x40023c00

0801804c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018054:	4b12      	ldr	r3, [pc, #72]	; (80180a0 <HAL_InitTick+0x54>)
 8018056:	681a      	ldr	r2, [r3, #0]
 8018058:	4b12      	ldr	r3, [pc, #72]	; (80180a4 <HAL_InitTick+0x58>)
 801805a:	781b      	ldrb	r3, [r3, #0]
 801805c:	4619      	mov	r1, r3
 801805e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018062:	fbb3 f3f1 	udiv	r3, r3, r1
 8018066:	fbb2 f3f3 	udiv	r3, r2, r3
 801806a:	4618      	mov	r0, r3
 801806c:	f000 fbd9 	bl	8018822 <HAL_SYSTICK_Config>
 8018070:	4603      	mov	r3, r0
 8018072:	2b00      	cmp	r3, #0
 8018074:	d001      	beq.n	801807a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018076:	2301      	movs	r3, #1
 8018078:	e00e      	b.n	8018098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2b0f      	cmp	r3, #15
 801807e:	d80a      	bhi.n	8018096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018080:	2200      	movs	r2, #0
 8018082:	6879      	ldr	r1, [r7, #4]
 8018084:	f04f 30ff 	mov.w	r0, #4294967295
 8018088:	f000 fba1 	bl	80187ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801808c:	4a06      	ldr	r2, [pc, #24]	; (80180a8 <HAL_InitTick+0x5c>)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018092:	2300      	movs	r3, #0
 8018094:	e000      	b.n	8018098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018096:	2301      	movs	r3, #1
}
 8018098:	4618      	mov	r0, r3
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}
 80180a0:	20000564 	.word	0x20000564
 80180a4:	2000056c 	.word	0x2000056c
 80180a8:	20000568 	.word	0x20000568

080180ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80180ac:	b480      	push	{r7}
 80180ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80180b0:	4b06      	ldr	r3, [pc, #24]	; (80180cc <HAL_IncTick+0x20>)
 80180b2:	781b      	ldrb	r3, [r3, #0]
 80180b4:	461a      	mov	r2, r3
 80180b6:	4b06      	ldr	r3, [pc, #24]	; (80180d0 <HAL_IncTick+0x24>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	4413      	add	r3, r2
 80180bc:	4a04      	ldr	r2, [pc, #16]	; (80180d0 <HAL_IncTick+0x24>)
 80180be:	6013      	str	r3, [r2, #0]
}
 80180c0:	bf00      	nop
 80180c2:	46bd      	mov	sp, r7
 80180c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c8:	4770      	bx	lr
 80180ca:	bf00      	nop
 80180cc:	2000056c 	.word	0x2000056c
 80180d0:	20006a4c 	.word	0x20006a4c

080180d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80180d4:	b480      	push	{r7}
 80180d6:	af00      	add	r7, sp, #0
  return uwTick;
 80180d8:	4b03      	ldr	r3, [pc, #12]	; (80180e8 <HAL_GetTick+0x14>)
 80180da:	681b      	ldr	r3, [r3, #0]
}
 80180dc:	4618      	mov	r0, r3
 80180de:	46bd      	mov	sp, r7
 80180e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e4:	4770      	bx	lr
 80180e6:	bf00      	nop
 80180e8:	20006a4c 	.word	0x20006a4c

080180ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80180f4:	f7ff ffee 	bl	80180d4 <HAL_GetTick>
 80180f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018104:	d005      	beq.n	8018112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018106:	4b0a      	ldr	r3, [pc, #40]	; (8018130 <HAL_Delay+0x44>)
 8018108:	781b      	ldrb	r3, [r3, #0]
 801810a:	461a      	mov	r2, r3
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	4413      	add	r3, r2
 8018110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018112:	bf00      	nop
 8018114:	f7ff ffde 	bl	80180d4 <HAL_GetTick>
 8018118:	4602      	mov	r2, r0
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	1ad3      	subs	r3, r2, r3
 801811e:	68fa      	ldr	r2, [r7, #12]
 8018120:	429a      	cmp	r2, r3
 8018122:	d8f7      	bhi.n	8018114 <HAL_Delay+0x28>
  {
  }
}
 8018124:	bf00      	nop
 8018126:	bf00      	nop
 8018128:	3710      	adds	r7, #16
 801812a:	46bd      	mov	sp, r7
 801812c:	bd80      	pop	{r7, pc}
 801812e:	bf00      	nop
 8018130:	2000056c 	.word	0x2000056c

08018134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b084      	sub	sp, #16
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801813c:	2300      	movs	r3, #0
 801813e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d101      	bne.n	801814a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018146:	2301      	movs	r3, #1
 8018148:	e033      	b.n	80181b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801814e:	2b00      	cmp	r3, #0
 8018150:	d109      	bne.n	8018166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f7ff fa0c 	bl	8017570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	2200      	movs	r2, #0
 801815c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2200      	movs	r2, #0
 8018162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801816a:	f003 0310 	and.w	r3, r3, #16
 801816e:	2b00      	cmp	r3, #0
 8018170:	d118      	bne.n	80181a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801817a:	f023 0302 	bic.w	r3, r3, #2
 801817e:	f043 0202 	orr.w	r2, r3, #2
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f000 f94a 	bl	8018420 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2200      	movs	r2, #0
 8018190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018196:	f023 0303 	bic.w	r3, r3, #3
 801819a:	f043 0201 	orr.w	r2, r3, #1
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	641a      	str	r2, [r3, #64]	; 0x40
 80181a2:	e001      	b.n	80181a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80181a4:	2301      	movs	r3, #1
 80181a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2200      	movs	r2, #0
 80181ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80181b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	3710      	adds	r7, #16
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd80      	pop	{r7, pc}
	...

080181bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80181bc:	b480      	push	{r7}
 80181be:	b085      	sub	sp, #20
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
 80181c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80181c6:	2300      	movs	r3, #0
 80181c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d101      	bne.n	80181d8 <HAL_ADC_ConfigChannel+0x1c>
 80181d4:	2302      	movs	r3, #2
 80181d6:	e113      	b.n	8018400 <HAL_ADC_ConfigChannel+0x244>
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2201      	movs	r2, #1
 80181dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b09      	cmp	r3, #9
 80181e6:	d925      	bls.n	8018234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	68d9      	ldr	r1, [r3, #12]
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	461a      	mov	r2, r3
 80181f6:	4613      	mov	r3, r2
 80181f8:	005b      	lsls	r3, r3, #1
 80181fa:	4413      	add	r3, r2
 80181fc:	3b1e      	subs	r3, #30
 80181fe:	2207      	movs	r2, #7
 8018200:	fa02 f303 	lsl.w	r3, r2, r3
 8018204:	43da      	mvns	r2, r3
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	400a      	ands	r2, r1
 801820c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	68d9      	ldr	r1, [r3, #12]
 8018214:	683b      	ldr	r3, [r7, #0]
 8018216:	689a      	ldr	r2, [r3, #8]
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	b29b      	uxth	r3, r3
 801821e:	4618      	mov	r0, r3
 8018220:	4603      	mov	r3, r0
 8018222:	005b      	lsls	r3, r3, #1
 8018224:	4403      	add	r3, r0
 8018226:	3b1e      	subs	r3, #30
 8018228:	409a      	lsls	r2, r3
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	430a      	orrs	r2, r1
 8018230:	60da      	str	r2, [r3, #12]
 8018232:	e022      	b.n	801827a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	6919      	ldr	r1, [r3, #16]
 801823a:	683b      	ldr	r3, [r7, #0]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	b29b      	uxth	r3, r3
 8018240:	461a      	mov	r2, r3
 8018242:	4613      	mov	r3, r2
 8018244:	005b      	lsls	r3, r3, #1
 8018246:	4413      	add	r3, r2
 8018248:	2207      	movs	r2, #7
 801824a:	fa02 f303 	lsl.w	r3, r2, r3
 801824e:	43da      	mvns	r2, r3
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	400a      	ands	r2, r1
 8018256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	6919      	ldr	r1, [r3, #16]
 801825e:	683b      	ldr	r3, [r7, #0]
 8018260:	689a      	ldr	r2, [r3, #8]
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	b29b      	uxth	r3, r3
 8018268:	4618      	mov	r0, r3
 801826a:	4603      	mov	r3, r0
 801826c:	005b      	lsls	r3, r3, #1
 801826e:	4403      	add	r3, r0
 8018270:	409a      	lsls	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	430a      	orrs	r2, r1
 8018278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	2b06      	cmp	r3, #6
 8018280:	d824      	bhi.n	80182cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	685a      	ldr	r2, [r3, #4]
 801828c:	4613      	mov	r3, r2
 801828e:	009b      	lsls	r3, r3, #2
 8018290:	4413      	add	r3, r2
 8018292:	3b05      	subs	r3, #5
 8018294:	221f      	movs	r2, #31
 8018296:	fa02 f303 	lsl.w	r3, r2, r3
 801829a:	43da      	mvns	r2, r3
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	400a      	ands	r2, r1
 80182a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	4618      	mov	r0, r3
 80182b2:	683b      	ldr	r3, [r7, #0]
 80182b4:	685a      	ldr	r2, [r3, #4]
 80182b6:	4613      	mov	r3, r2
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	4413      	add	r3, r2
 80182bc:	3b05      	subs	r3, #5
 80182be:	fa00 f203 	lsl.w	r2, r0, r3
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	430a      	orrs	r2, r1
 80182c8:	635a      	str	r2, [r3, #52]	; 0x34
 80182ca:	e04c      	b.n	8018366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	2b0c      	cmp	r3, #12
 80182d2:	d824      	bhi.n	801831e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	685a      	ldr	r2, [r3, #4]
 80182de:	4613      	mov	r3, r2
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	4413      	add	r3, r2
 80182e4:	3b23      	subs	r3, #35	; 0x23
 80182e6:	221f      	movs	r2, #31
 80182e8:	fa02 f303 	lsl.w	r3, r2, r3
 80182ec:	43da      	mvns	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	400a      	ands	r2, r1
 80182f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	b29b      	uxth	r3, r3
 8018302:	4618      	mov	r0, r3
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	685a      	ldr	r2, [r3, #4]
 8018308:	4613      	mov	r3, r2
 801830a:	009b      	lsls	r3, r3, #2
 801830c:	4413      	add	r3, r2
 801830e:	3b23      	subs	r3, #35	; 0x23
 8018310:	fa00 f203 	lsl.w	r2, r0, r3
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	430a      	orrs	r2, r1
 801831a:	631a      	str	r2, [r3, #48]	; 0x30
 801831c:	e023      	b.n	8018366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018324:	683b      	ldr	r3, [r7, #0]
 8018326:	685a      	ldr	r2, [r3, #4]
 8018328:	4613      	mov	r3, r2
 801832a:	009b      	lsls	r3, r3, #2
 801832c:	4413      	add	r3, r2
 801832e:	3b41      	subs	r3, #65	; 0x41
 8018330:	221f      	movs	r2, #31
 8018332:	fa02 f303 	lsl.w	r3, r2, r3
 8018336:	43da      	mvns	r2, r3
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	400a      	ands	r2, r1
 801833e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	b29b      	uxth	r3, r3
 801834c:	4618      	mov	r0, r3
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	685a      	ldr	r2, [r3, #4]
 8018352:	4613      	mov	r3, r2
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	4413      	add	r3, r2
 8018358:	3b41      	subs	r3, #65	; 0x41
 801835a:	fa00 f203 	lsl.w	r2, r0, r3
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	430a      	orrs	r2, r1
 8018364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018366:	4b29      	ldr	r3, [pc, #164]	; (801840c <HAL_ADC_ConfigChannel+0x250>)
 8018368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	4a28      	ldr	r2, [pc, #160]	; (8018410 <HAL_ADC_ConfigChannel+0x254>)
 8018370:	4293      	cmp	r3, r2
 8018372:	d10f      	bne.n	8018394 <HAL_ADC_ConfigChannel+0x1d8>
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	2b12      	cmp	r3, #18
 801837a:	d10b      	bne.n	8018394 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	685b      	ldr	r3, [r3, #4]
 8018380:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	4a1d      	ldr	r2, [pc, #116]	; (8018410 <HAL_ADC_ConfigChannel+0x254>)
 801839a:	4293      	cmp	r3, r2
 801839c:	d12b      	bne.n	80183f6 <HAL_ADC_ConfigChannel+0x23a>
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	4a1c      	ldr	r2, [pc, #112]	; (8018414 <HAL_ADC_ConfigChannel+0x258>)
 80183a4:	4293      	cmp	r3, r2
 80183a6:	d003      	beq.n	80183b0 <HAL_ADC_ConfigChannel+0x1f4>
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b11      	cmp	r3, #17
 80183ae:	d122      	bne.n	80183f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	4a11      	ldr	r2, [pc, #68]	; (8018414 <HAL_ADC_ConfigChannel+0x258>)
 80183ce:	4293      	cmp	r3, r2
 80183d0:	d111      	bne.n	80183f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80183d2:	4b11      	ldr	r3, [pc, #68]	; (8018418 <HAL_ADC_ConfigChannel+0x25c>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	4a11      	ldr	r2, [pc, #68]	; (801841c <HAL_ADC_ConfigChannel+0x260>)
 80183d8:	fba2 2303 	umull	r2, r3, r2, r3
 80183dc:	0c9a      	lsrs	r2, r3, #18
 80183de:	4613      	mov	r3, r2
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	4413      	add	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80183e8:	e002      	b.n	80183f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	3b01      	subs	r3, #1
 80183ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d1f9      	bne.n	80183ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2200      	movs	r2, #0
 80183fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80183fe:	2300      	movs	r3, #0
}
 8018400:	4618      	mov	r0, r3
 8018402:	3714      	adds	r7, #20
 8018404:	46bd      	mov	sp, r7
 8018406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840a:	4770      	bx	lr
 801840c:	40012300 	.word	0x40012300
 8018410:	40012000 	.word	0x40012000
 8018414:	10000012 	.word	0x10000012
 8018418:	20000564 	.word	0x20000564
 801841c:	431bde83 	.word	0x431bde83

08018420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018420:	b480      	push	{r7}
 8018422:	b085      	sub	sp, #20
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018428:	4b79      	ldr	r3, [pc, #484]	; (8018610 <ADC_Init+0x1f0>)
 801842a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	685a      	ldr	r2, [r3, #4]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	431a      	orrs	r2, r3
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	685a      	ldr	r2, [r3, #4]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	6859      	ldr	r1, [r3, #4]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	691b      	ldr	r3, [r3, #16]
 8018460:	021a      	lsls	r2, r3, #8
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	430a      	orrs	r2, r1
 8018468:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	685a      	ldr	r2, [r3, #4]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	6859      	ldr	r1, [r3, #4]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	689a      	ldr	r2, [r3, #8]
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	430a      	orrs	r2, r1
 801848a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	689a      	ldr	r2, [r3, #8]
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801849a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	6899      	ldr	r1, [r3, #8]
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	68da      	ldr	r2, [r3, #12]
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	430a      	orrs	r2, r1
 80184ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184b2:	4a58      	ldr	r2, [pc, #352]	; (8018614 <ADC_Init+0x1f4>)
 80184b4:	4293      	cmp	r3, r2
 80184b6:	d022      	beq.n	80184fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	689a      	ldr	r2, [r3, #8]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80184c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	6899      	ldr	r1, [r3, #8]
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	430a      	orrs	r2, r1
 80184d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	689a      	ldr	r2, [r3, #8]
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80184e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	6899      	ldr	r1, [r3, #8]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	430a      	orrs	r2, r1
 80184fa:	609a      	str	r2, [r3, #8]
 80184fc:	e00f      	b.n	801851e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	689a      	ldr	r2, [r3, #8]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801850c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	689a      	ldr	r2, [r3, #8]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801851c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	689a      	ldr	r2, [r3, #8]
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	f022 0202 	bic.w	r2, r2, #2
 801852c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	6899      	ldr	r1, [r3, #8]
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	7e1b      	ldrb	r3, [r3, #24]
 8018538:	005a      	lsls	r2, r3, #1
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	430a      	orrs	r2, r1
 8018540:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d01b      	beq.n	8018584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	685a      	ldr	r2, [r3, #4]
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801855a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	685a      	ldr	r2, [r3, #4]
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801856a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	6859      	ldr	r1, [r3, #4]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018576:	3b01      	subs	r3, #1
 8018578:	035a      	lsls	r2, r3, #13
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	430a      	orrs	r2, r1
 8018580:	605a      	str	r2, [r3, #4]
 8018582:	e007      	b.n	8018594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	685a      	ldr	r2, [r3, #4]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018592:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80185a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	69db      	ldr	r3, [r3, #28]
 80185ae:	3b01      	subs	r3, #1
 80185b0:	051a      	lsls	r2, r3, #20
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	430a      	orrs	r2, r1
 80185b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	689a      	ldr	r2, [r3, #8]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80185c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	6899      	ldr	r1, [r3, #8]
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80185d6:	025a      	lsls	r2, r3, #9
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	430a      	orrs	r2, r1
 80185de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	689a      	ldr	r2, [r3, #8]
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80185ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	6899      	ldr	r1, [r3, #8]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	695b      	ldr	r3, [r3, #20]
 80185fa:	029a      	lsls	r2, r3, #10
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	430a      	orrs	r2, r1
 8018602:	609a      	str	r2, [r3, #8]
}
 8018604:	bf00      	nop
 8018606:	3714      	adds	r7, #20
 8018608:	46bd      	mov	sp, r7
 801860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860e:	4770      	bx	lr
 8018610:	40012300 	.word	0x40012300
 8018614:	0f000001 	.word	0x0f000001

08018618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018618:	b480      	push	{r7}
 801861a:	b085      	sub	sp, #20
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f003 0307 	and.w	r3, r3, #7
 8018626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018628:	4b0c      	ldr	r3, [pc, #48]	; (801865c <__NVIC_SetPriorityGrouping+0x44>)
 801862a:	68db      	ldr	r3, [r3, #12]
 801862c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801862e:	68ba      	ldr	r2, [r7, #8]
 8018630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018634:	4013      	ands	r3, r2
 8018636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801864a:	4a04      	ldr	r2, [pc, #16]	; (801865c <__NVIC_SetPriorityGrouping+0x44>)
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	60d3      	str	r3, [r2, #12]
}
 8018650:	bf00      	nop
 8018652:	3714      	adds	r7, #20
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr
 801865c:	e000ed00 	.word	0xe000ed00

08018660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018660:	b480      	push	{r7}
 8018662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018664:	4b04      	ldr	r3, [pc, #16]	; (8018678 <__NVIC_GetPriorityGrouping+0x18>)
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	0a1b      	lsrs	r3, r3, #8
 801866a:	f003 0307 	and.w	r3, r3, #7
}
 801866e:	4618      	mov	r0, r3
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr
 8018678:	e000ed00 	.word	0xe000ed00

0801867c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801867c:	b480      	push	{r7}
 801867e:	b083      	sub	sp, #12
 8018680:	af00      	add	r7, sp, #0
 8018682:	4603      	mov	r3, r0
 8018684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801868a:	2b00      	cmp	r3, #0
 801868c:	db0b      	blt.n	80186a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801868e:	79fb      	ldrb	r3, [r7, #7]
 8018690:	f003 021f 	and.w	r2, r3, #31
 8018694:	4907      	ldr	r1, [pc, #28]	; (80186b4 <__NVIC_EnableIRQ+0x38>)
 8018696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801869a:	095b      	lsrs	r3, r3, #5
 801869c:	2001      	movs	r0, #1
 801869e:	fa00 f202 	lsl.w	r2, r0, r2
 80186a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80186a6:	bf00      	nop
 80186a8:	370c      	adds	r7, #12
 80186aa:	46bd      	mov	sp, r7
 80186ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b0:	4770      	bx	lr
 80186b2:	bf00      	nop
 80186b4:	e000e100 	.word	0xe000e100

080186b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
 80186be:	4603      	mov	r3, r0
 80186c0:	6039      	str	r1, [r7, #0]
 80186c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80186c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	db0a      	blt.n	80186e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	b2da      	uxtb	r2, r3
 80186d0:	490c      	ldr	r1, [pc, #48]	; (8018704 <__NVIC_SetPriority+0x4c>)
 80186d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186d6:	0112      	lsls	r2, r2, #4
 80186d8:	b2d2      	uxtb	r2, r2
 80186da:	440b      	add	r3, r1
 80186dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80186e0:	e00a      	b.n	80186f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186e2:	683b      	ldr	r3, [r7, #0]
 80186e4:	b2da      	uxtb	r2, r3
 80186e6:	4908      	ldr	r1, [pc, #32]	; (8018708 <__NVIC_SetPriority+0x50>)
 80186e8:	79fb      	ldrb	r3, [r7, #7]
 80186ea:	f003 030f 	and.w	r3, r3, #15
 80186ee:	3b04      	subs	r3, #4
 80186f0:	0112      	lsls	r2, r2, #4
 80186f2:	b2d2      	uxtb	r2, r2
 80186f4:	440b      	add	r3, r1
 80186f6:	761a      	strb	r2, [r3, #24]
}
 80186f8:	bf00      	nop
 80186fa:	370c      	adds	r7, #12
 80186fc:	46bd      	mov	sp, r7
 80186fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018702:	4770      	bx	lr
 8018704:	e000e100 	.word	0xe000e100
 8018708:	e000ed00 	.word	0xe000ed00

0801870c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801870c:	b480      	push	{r7}
 801870e:	b089      	sub	sp, #36	; 0x24
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	f003 0307 	and.w	r3, r3, #7
 801871e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018720:	69fb      	ldr	r3, [r7, #28]
 8018722:	f1c3 0307 	rsb	r3, r3, #7
 8018726:	2b04      	cmp	r3, #4
 8018728:	bf28      	it	cs
 801872a:	2304      	movcs	r3, #4
 801872c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801872e:	69fb      	ldr	r3, [r7, #28]
 8018730:	3304      	adds	r3, #4
 8018732:	2b06      	cmp	r3, #6
 8018734:	d902      	bls.n	801873c <NVIC_EncodePriority+0x30>
 8018736:	69fb      	ldr	r3, [r7, #28]
 8018738:	3b03      	subs	r3, #3
 801873a:	e000      	b.n	801873e <NVIC_EncodePriority+0x32>
 801873c:	2300      	movs	r3, #0
 801873e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018740:	f04f 32ff 	mov.w	r2, #4294967295
 8018744:	69bb      	ldr	r3, [r7, #24]
 8018746:	fa02 f303 	lsl.w	r3, r2, r3
 801874a:	43da      	mvns	r2, r3
 801874c:	68bb      	ldr	r3, [r7, #8]
 801874e:	401a      	ands	r2, r3
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018754:	f04f 31ff 	mov.w	r1, #4294967295
 8018758:	697b      	ldr	r3, [r7, #20]
 801875a:	fa01 f303 	lsl.w	r3, r1, r3
 801875e:	43d9      	mvns	r1, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018764:	4313      	orrs	r3, r2
         );
}
 8018766:	4618      	mov	r0, r3
 8018768:	3724      	adds	r7, #36	; 0x24
 801876a:	46bd      	mov	sp, r7
 801876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018770:	4770      	bx	lr
	...

08018774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	3b01      	subs	r3, #1
 8018780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018784:	d301      	bcc.n	801878a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8018786:	2301      	movs	r3, #1
 8018788:	e00f      	b.n	80187aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801878a:	4a0a      	ldr	r2, [pc, #40]	; (80187b4 <SysTick_Config+0x40>)
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	3b01      	subs	r3, #1
 8018790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018792:	210f      	movs	r1, #15
 8018794:	f04f 30ff 	mov.w	r0, #4294967295
 8018798:	f7ff ff8e 	bl	80186b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801879c:	4b05      	ldr	r3, [pc, #20]	; (80187b4 <SysTick_Config+0x40>)
 801879e:	2200      	movs	r2, #0
 80187a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80187a2:	4b04      	ldr	r3, [pc, #16]	; (80187b4 <SysTick_Config+0x40>)
 80187a4:	2207      	movs	r2, #7
 80187a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80187a8:	2300      	movs	r3, #0
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3708      	adds	r7, #8
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	e000e010 	.word	0xe000e010

080187b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	f7ff ff29 	bl	8018618 <__NVIC_SetPriorityGrouping>
}
 80187c6:	bf00      	nop
 80187c8:	3708      	adds	r7, #8
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}

080187ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80187ce:	b580      	push	{r7, lr}
 80187d0:	b086      	sub	sp, #24
 80187d2:	af00      	add	r7, sp, #0
 80187d4:	4603      	mov	r3, r0
 80187d6:	60b9      	str	r1, [r7, #8]
 80187d8:	607a      	str	r2, [r7, #4]
 80187da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80187dc:	2300      	movs	r3, #0
 80187de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80187e0:	f7ff ff3e 	bl	8018660 <__NVIC_GetPriorityGrouping>
 80187e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80187e6:	687a      	ldr	r2, [r7, #4]
 80187e8:	68b9      	ldr	r1, [r7, #8]
 80187ea:	6978      	ldr	r0, [r7, #20]
 80187ec:	f7ff ff8e 	bl	801870c <NVIC_EncodePriority>
 80187f0:	4602      	mov	r2, r0
 80187f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187f6:	4611      	mov	r1, r2
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7ff ff5d 	bl	80186b8 <__NVIC_SetPriority>
}
 80187fe:	bf00      	nop
 8018800:	3718      	adds	r7, #24
 8018802:	46bd      	mov	sp, r7
 8018804:	bd80      	pop	{r7, pc}

08018806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018806:	b580      	push	{r7, lr}
 8018808:	b082      	sub	sp, #8
 801880a:	af00      	add	r7, sp, #0
 801880c:	4603      	mov	r3, r0
 801880e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018814:	4618      	mov	r0, r3
 8018816:	f7ff ff31 	bl	801867c <__NVIC_EnableIRQ>
}
 801881a:	bf00      	nop
 801881c:	3708      	adds	r7, #8
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}

08018822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018822:	b580      	push	{r7, lr}
 8018824:	b082      	sub	sp, #8
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f7ff ffa2 	bl	8018774 <SysTick_Config>
 8018830:	4603      	mov	r3, r0
}
 8018832:	4618      	mov	r0, r3
 8018834:	3708      	adds	r7, #8
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}

0801883a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 801883a:	b580      	push	{r7, lr}
 801883c:	b082      	sub	sp, #8
 801883e:	af00      	add	r7, sp, #0
 8018840:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d101      	bne.n	801884c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018848:	2301      	movs	r3, #1
 801884a:	e014      	b.n	8018876 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	791b      	ldrb	r3, [r3, #4]
 8018850:	b2db      	uxtb	r3, r3
 8018852:	2b00      	cmp	r3, #0
 8018854:	d105      	bne.n	8018862 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2200      	movs	r2, #0
 801885a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f7fe ff2d 	bl	80176bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	2202      	movs	r2, #2
 8018866:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	2200      	movs	r2, #0
 801886c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	2201      	movs	r2, #1
 8018872:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018874:	2300      	movs	r3, #0
}
 8018876:	4618      	mov	r0, r3
 8018878:	3708      	adds	r7, #8
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}

0801887e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 801887e:	b480      	push	{r7}
 8018880:	b087      	sub	sp, #28
 8018882:	af00      	add	r7, sp, #0
 8018884:	60f8      	str	r0, [r7, #12]
 8018886:	60b9      	str	r1, [r7, #8]
 8018888:	607a      	str	r2, [r7, #4]
 801888a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 801888c:	2300      	movs	r3, #0
 801888e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d105      	bne.n	80188a8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 801889c:	697a      	ldr	r2, [r7, #20]
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	4413      	add	r3, r2
 80188a2:	3308      	adds	r3, #8
 80188a4:	617b      	str	r3, [r7, #20]
 80188a6:	e004      	b.n	80188b2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80188a8:	697a      	ldr	r2, [r7, #20]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	4413      	add	r3, r2
 80188ae:	3314      	adds	r3, #20
 80188b0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	461a      	mov	r2, r3
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80188ba:	2300      	movs	r3, #0
}
 80188bc:	4618      	mov	r0, r3
 80188be:	371c      	adds	r7, #28
 80188c0:	46bd      	mov	sp, r7
 80188c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c6:	4770      	bx	lr

080188c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80188c8:	b480      	push	{r7}
 80188ca:	b087      	sub	sp, #28
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	60f8      	str	r0, [r7, #12]
 80188d0:	60b9      	str	r1, [r7, #8]
 80188d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	795b      	ldrb	r3, [r3, #5]
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d101      	bne.n	80188e0 <HAL_DAC_ConfigChannel+0x18>
 80188dc:	2302      	movs	r3, #2
 80188de:	e03c      	b.n	801895a <HAL_DAC_ConfigChannel+0x92>
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	2201      	movs	r2, #1
 80188e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	2202      	movs	r2, #2
 80188ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f003 0310 	and.w	r3, r3, #16
 80188fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80188fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018902:	43db      	mvns	r3, r3
 8018904:	697a      	ldr	r2, [r7, #20]
 8018906:	4013      	ands	r3, r2
 8018908:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	4313      	orrs	r3, r2
 8018914:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f003 0310 	and.w	r3, r3, #16
 801891c:	693a      	ldr	r2, [r7, #16]
 801891e:	fa02 f303 	lsl.w	r3, r2, r3
 8018922:	697a      	ldr	r2, [r7, #20]
 8018924:	4313      	orrs	r3, r2
 8018926:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	697a      	ldr	r2, [r7, #20]
 801892e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	6819      	ldr	r1, [r3, #0]
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	f003 0310 	and.w	r3, r3, #16
 801893c:	22c0      	movs	r2, #192	; 0xc0
 801893e:	fa02 f303 	lsl.w	r3, r2, r3
 8018942:	43da      	mvns	r2, r3
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	400a      	ands	r2, r1
 801894a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	2201      	movs	r2, #1
 8018950:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	2200      	movs	r2, #0
 8018956:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018958:	2300      	movs	r3, #0
}
 801895a:	4618      	mov	r0, r3
 801895c:	371c      	adds	r7, #28
 801895e:	46bd      	mov	sp, r7
 8018960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018964:	4770      	bx	lr
	...

08018968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b086      	sub	sp, #24
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018970:	2300      	movs	r3, #0
 8018972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018974:	f7ff fbae 	bl	80180d4 <HAL_GetTick>
 8018978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d101      	bne.n	8018984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018980:	2301      	movs	r3, #1
 8018982:	e099      	b.n	8018ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2202      	movs	r2, #2
 8018988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2200      	movs	r2, #0
 8018990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	681a      	ldr	r2, [r3, #0]
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	f022 0201 	bic.w	r2, r2, #1
 80189a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80189a4:	e00f      	b.n	80189c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80189a6:	f7ff fb95 	bl	80180d4 <HAL_GetTick>
 80189aa:	4602      	mov	r2, r0
 80189ac:	693b      	ldr	r3, [r7, #16]
 80189ae:	1ad3      	subs	r3, r2, r3
 80189b0:	2b05      	cmp	r3, #5
 80189b2:	d908      	bls.n	80189c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2220      	movs	r2, #32
 80189b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2203      	movs	r2, #3
 80189be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80189c2:	2303      	movs	r3, #3
 80189c4:	e078      	b.n	8018ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f003 0301 	and.w	r3, r3, #1
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d1e8      	bne.n	80189a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80189dc:	697a      	ldr	r2, [r7, #20]
 80189de:	4b38      	ldr	r3, [pc, #224]	; (8018ac0 <HAL_DMA_Init+0x158>)
 80189e0:	4013      	ands	r3, r2
 80189e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	685a      	ldr	r2, [r3, #4]
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	689b      	ldr	r3, [r3, #8]
 80189ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80189f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	691b      	ldr	r3, [r3, #16]
 80189f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80189fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	699b      	ldr	r3, [r3, #24]
 8018a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	6a1b      	ldr	r3, [r3, #32]
 8018a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a12:	697a      	ldr	r2, [r7, #20]
 8018a14:	4313      	orrs	r3, r2
 8018a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a1c:	2b04      	cmp	r3, #4
 8018a1e:	d107      	bne.n	8018a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a28:	4313      	orrs	r3, r2
 8018a2a:	697a      	ldr	r2, [r7, #20]
 8018a2c:	4313      	orrs	r3, r2
 8018a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	697a      	ldr	r2, [r7, #20]
 8018a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	695b      	ldr	r3, [r3, #20]
 8018a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	f023 0307 	bic.w	r3, r3, #7
 8018a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a4c:	697a      	ldr	r2, [r7, #20]
 8018a4e:	4313      	orrs	r3, r2
 8018a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a56:	2b04      	cmp	r3, #4
 8018a58:	d117      	bne.n	8018a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a5e:	697a      	ldr	r2, [r7, #20]
 8018a60:	4313      	orrs	r3, r2
 8018a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d00e      	beq.n	8018a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f000 fa0b 	bl	8018e88 <DMA_CheckFifoParam>
 8018a72:	4603      	mov	r3, r0
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d008      	beq.n	8018a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2240      	movs	r2, #64	; 0x40
 8018a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2201      	movs	r2, #1
 8018a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018a86:	2301      	movs	r3, #1
 8018a88:	e016      	b.n	8018ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	697a      	ldr	r2, [r7, #20]
 8018a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f000 f9c2 	bl	8018e1c <DMA_CalcBaseAndBitshift>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018aa0:	223f      	movs	r2, #63	; 0x3f
 8018aa2:	409a      	lsls	r2, r3
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018ab6:	2300      	movs	r3, #0
}
 8018ab8:	4618      	mov	r0, r3
 8018aba:	3718      	adds	r7, #24
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	f010803f 	.word	0xf010803f

08018ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018ad2:	b2db      	uxtb	r3, r3
 8018ad4:	2b02      	cmp	r3, #2
 8018ad6:	d004      	beq.n	8018ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2280      	movs	r2, #128	; 0x80
 8018adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018ade:	2301      	movs	r3, #1
 8018ae0:	e00c      	b.n	8018afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	2205      	movs	r2, #5
 8018ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	681a      	ldr	r2, [r3, #0]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f022 0201 	bic.w	r2, r2, #1
 8018af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018afa:	2300      	movs	r3, #0
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	370c      	adds	r7, #12
 8018b00:	46bd      	mov	sp, r7
 8018b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b06:	4770      	bx	lr

08018b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b086      	sub	sp, #24
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018b10:	2300      	movs	r3, #0
 8018b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018b14:	4b8e      	ldr	r3, [pc, #568]	; (8018d50 <HAL_DMA_IRQHandler+0x248>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	4a8e      	ldr	r2, [pc, #568]	; (8018d54 <HAL_DMA_IRQHandler+0x24c>)
 8018b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8018b1e:	0a9b      	lsrs	r3, r3, #10
 8018b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b32:	2208      	movs	r2, #8
 8018b34:	409a      	lsls	r2, r3
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	4013      	ands	r3, r2
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d01a      	beq.n	8018b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	f003 0304 	and.w	r3, r3, #4
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d013      	beq.n	8018b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	681a      	ldr	r2, [r3, #0]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f022 0204 	bic.w	r2, r2, #4
 8018b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b60:	2208      	movs	r2, #8
 8018b62:	409a      	lsls	r2, r3
 8018b64:	693b      	ldr	r3, [r7, #16]
 8018b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b6c:	f043 0201 	orr.w	r2, r3, #1
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b78:	2201      	movs	r2, #1
 8018b7a:	409a      	lsls	r2, r3
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	4013      	ands	r3, r2
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d012      	beq.n	8018baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	695b      	ldr	r3, [r3, #20]
 8018b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d00b      	beq.n	8018baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b96:	2201      	movs	r2, #1
 8018b98:	409a      	lsls	r2, r3
 8018b9a:	693b      	ldr	r3, [r7, #16]
 8018b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ba2:	f043 0202 	orr.w	r2, r3, #2
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bae:	2204      	movs	r2, #4
 8018bb0:	409a      	lsls	r2, r3
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	4013      	ands	r3, r2
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d012      	beq.n	8018be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	f003 0302 	and.w	r3, r3, #2
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d00b      	beq.n	8018be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bcc:	2204      	movs	r2, #4
 8018bce:	409a      	lsls	r2, r3
 8018bd0:	693b      	ldr	r3, [r7, #16]
 8018bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018bd8:	f043 0204 	orr.w	r2, r3, #4
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018be4:	2210      	movs	r2, #16
 8018be6:	409a      	lsls	r2, r3
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	4013      	ands	r3, r2
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d043      	beq.n	8018c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	f003 0308 	and.w	r3, r3, #8
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d03c      	beq.n	8018c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c02:	2210      	movs	r2, #16
 8018c04:	409a      	lsls	r2, r3
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d018      	beq.n	8018c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d108      	bne.n	8018c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d024      	beq.n	8018c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	4798      	blx	r3
 8018c36:	e01f      	b.n	8018c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d01b      	beq.n	8018c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	4798      	blx	r3
 8018c48:	e016      	b.n	8018c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d107      	bne.n	8018c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	681a      	ldr	r2, [r3, #0]
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f022 0208 	bic.w	r2, r2, #8
 8018c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d003      	beq.n	8018c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c7c:	2220      	movs	r2, #32
 8018c7e:	409a      	lsls	r2, r3
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	4013      	ands	r3, r2
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	f000 808f 	beq.w	8018da8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	f003 0310 	and.w	r3, r3, #16
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	f000 8087 	beq.w	8018da8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c9e:	2220      	movs	r2, #32
 8018ca0:	409a      	lsls	r2, r3
 8018ca2:	693b      	ldr	r3, [r7, #16]
 8018ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018cac:	b2db      	uxtb	r3, r3
 8018cae:	2b05      	cmp	r3, #5
 8018cb0:	d136      	bne.n	8018d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f022 0216 	bic.w	r2, r2, #22
 8018cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	695a      	ldr	r2, [r3, #20]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d103      	bne.n	8018ce2 <HAL_DMA_IRQHandler+0x1da>
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d007      	beq.n	8018cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f022 0208 	bic.w	r2, r2, #8
 8018cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cf6:	223f      	movs	r2, #63	; 0x3f
 8018cf8:	409a      	lsls	r2, r3
 8018cfa:	693b      	ldr	r3, [r7, #16]
 8018cfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	2201      	movs	r2, #1
 8018d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2200      	movs	r2, #0
 8018d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d07e      	beq.n	8018e14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	4798      	blx	r3
        }
        return;
 8018d1e:	e079      	b.n	8018e14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d01d      	beq.n	8018d6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d10d      	bne.n	8018d58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d031      	beq.n	8018da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	4798      	blx	r3
 8018d4c:	e02c      	b.n	8018da8 <HAL_DMA_IRQHandler+0x2a0>
 8018d4e:	bf00      	nop
 8018d50:	20000564 	.word	0x20000564
 8018d54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d023      	beq.n	8018da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	4798      	blx	r3
 8018d68:	e01e      	b.n	8018da8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d10f      	bne.n	8018d98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	681a      	ldr	r2, [r3, #0]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	f022 0210 	bic.w	r2, r2, #16
 8018d86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2201      	movs	r2, #1
 8018d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2200      	movs	r2, #0
 8018d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d003      	beq.n	8018da8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d032      	beq.n	8018e16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018db4:	f003 0301 	and.w	r3, r3, #1
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d022      	beq.n	8018e02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	2205      	movs	r2, #5
 8018dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	681a      	ldr	r2, [r3, #0]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	f022 0201 	bic.w	r2, r2, #1
 8018dd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	60bb      	str	r3, [r7, #8]
 8018dda:	697a      	ldr	r2, [r7, #20]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d307      	bcc.n	8018df0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	f003 0301 	and.w	r3, r3, #1
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d1f2      	bne.n	8018dd4 <HAL_DMA_IRQHandler+0x2cc>
 8018dee:	e000      	b.n	8018df2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8018df0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	2201      	movs	r2, #1
 8018df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d005      	beq.n	8018e16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e0e:	6878      	ldr	r0, [r7, #4]
 8018e10:	4798      	blx	r3
 8018e12:	e000      	b.n	8018e16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8018e14:	bf00      	nop
    }
  }
}
 8018e16:	3718      	adds	r7, #24
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}

08018e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8018e1c:	b480      	push	{r7}
 8018e1e:	b085      	sub	sp, #20
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	b2db      	uxtb	r3, r3
 8018e2a:	3b10      	subs	r3, #16
 8018e2c:	4a14      	ldr	r2, [pc, #80]	; (8018e80 <DMA_CalcBaseAndBitshift+0x64>)
 8018e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8018e32:	091b      	lsrs	r3, r3, #4
 8018e34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8018e36:	4a13      	ldr	r2, [pc, #76]	; (8018e84 <DMA_CalcBaseAndBitshift+0x68>)
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	4413      	add	r3, r2
 8018e3c:	781b      	ldrb	r3, [r3, #0]
 8018e3e:	461a      	mov	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	2b03      	cmp	r3, #3
 8018e48:	d909      	bls.n	8018e5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018e52:	f023 0303 	bic.w	r3, r3, #3
 8018e56:	1d1a      	adds	r2, r3, #4
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8018e5c:	e007      	b.n	8018e6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018e66:	f023 0303 	bic.w	r3, r3, #3
 8018e6a:	687a      	ldr	r2, [r7, #4]
 8018e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8018e72:	4618      	mov	r0, r3
 8018e74:	3714      	adds	r7, #20
 8018e76:	46bd      	mov	sp, r7
 8018e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7c:	4770      	bx	lr
 8018e7e:	bf00      	nop
 8018e80:	aaaaaaab 	.word	0xaaaaaaab
 8018e84:	080023fc 	.word	0x080023fc

08018e88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8018e88:	b480      	push	{r7}
 8018e8a:	b085      	sub	sp, #20
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018e90:	2300      	movs	r3, #0
 8018e92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	699b      	ldr	r3, [r3, #24]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d11f      	bne.n	8018ee2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	2b03      	cmp	r3, #3
 8018ea6:	d856      	bhi.n	8018f56 <DMA_CheckFifoParam+0xce>
 8018ea8:	a201      	add	r2, pc, #4	; (adr r2, 8018eb0 <DMA_CheckFifoParam+0x28>)
 8018eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eae:	bf00      	nop
 8018eb0:	08018ec1 	.word	0x08018ec1
 8018eb4:	08018ed3 	.word	0x08018ed3
 8018eb8:	08018ec1 	.word	0x08018ec1
 8018ebc:	08018f57 	.word	0x08018f57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d046      	beq.n	8018f5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8018ecc:	2301      	movs	r3, #1
 8018ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018ed0:	e043      	b.n	8018f5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ed6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018eda:	d140      	bne.n	8018f5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8018edc:	2301      	movs	r3, #1
 8018ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018ee0:	e03d      	b.n	8018f5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	699b      	ldr	r3, [r3, #24]
 8018ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018eea:	d121      	bne.n	8018f30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	2b03      	cmp	r3, #3
 8018ef0:	d837      	bhi.n	8018f62 <DMA_CheckFifoParam+0xda>
 8018ef2:	a201      	add	r2, pc, #4	; (adr r2, 8018ef8 <DMA_CheckFifoParam+0x70>)
 8018ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef8:	08018f09 	.word	0x08018f09
 8018efc:	08018f0f 	.word	0x08018f0f
 8018f00:	08018f09 	.word	0x08018f09
 8018f04:	08018f21 	.word	0x08018f21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8018f0c:	e030      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d025      	beq.n	8018f66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018f1e:	e022      	b.n	8018f66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018f28:	d11f      	bne.n	8018f6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8018f2e:	e01c      	b.n	8018f6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8018f30:	68bb      	ldr	r3, [r7, #8]
 8018f32:	2b02      	cmp	r3, #2
 8018f34:	d903      	bls.n	8018f3e <DMA_CheckFifoParam+0xb6>
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	2b03      	cmp	r3, #3
 8018f3a:	d003      	beq.n	8018f44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8018f3c:	e018      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8018f3e:	2301      	movs	r3, #1
 8018f40:	73fb      	strb	r3, [r7, #15]
      break;
 8018f42:	e015      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d00e      	beq.n	8018f6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8018f50:	2301      	movs	r3, #1
 8018f52:	73fb      	strb	r3, [r7, #15]
      break;
 8018f54:	e00b      	b.n	8018f6e <DMA_CheckFifoParam+0xe6>
      break;
 8018f56:	bf00      	nop
 8018f58:	e00a      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;
 8018f5a:	bf00      	nop
 8018f5c:	e008      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;
 8018f5e:	bf00      	nop
 8018f60:	e006      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;
 8018f62:	bf00      	nop
 8018f64:	e004      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;
 8018f66:	bf00      	nop
 8018f68:	e002      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;   
 8018f6a:	bf00      	nop
 8018f6c:	e000      	b.n	8018f70 <DMA_CheckFifoParam+0xe8>
      break;
 8018f6e:	bf00      	nop
    }
  } 
  
  return status; 
 8018f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3714      	adds	r7, #20
 8018f76:	46bd      	mov	sp, r7
 8018f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7c:	4770      	bx	lr
 8018f7e:	bf00      	nop

08018f80 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b086      	sub	sp, #24
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018f8e:	2301      	movs	r3, #1
 8018f90:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8018f92:	4b23      	ldr	r3, [pc, #140]	; (8019020 <HAL_FLASH_Program+0xa0>)
 8018f94:	7e1b      	ldrb	r3, [r3, #24]
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d101      	bne.n	8018f9e <HAL_FLASH_Program+0x1e>
 8018f9a:	2302      	movs	r3, #2
 8018f9c:	e03b      	b.n	8019016 <HAL_FLASH_Program+0x96>
 8018f9e:	4b20      	ldr	r3, [pc, #128]	; (8019020 <HAL_FLASH_Program+0xa0>)
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018fa8:	f000 f870 	bl	801908c <FLASH_WaitForLastOperation>
 8018fac:	4603      	mov	r3, r0
 8018fae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8018fb0:	7dfb      	ldrb	r3, [r7, #23]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d12b      	bne.n	801900e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d105      	bne.n	8018fc8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8018fbc:	783b      	ldrb	r3, [r7, #0]
 8018fbe:	4619      	mov	r1, r3
 8018fc0:	68b8      	ldr	r0, [r7, #8]
 8018fc2:	f000 f91b 	bl	80191fc <FLASH_Program_Byte>
 8018fc6:	e016      	b.n	8018ff6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d105      	bne.n	8018fda <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8018fce:	883b      	ldrh	r3, [r7, #0]
 8018fd0:	4619      	mov	r1, r3
 8018fd2:	68b8      	ldr	r0, [r7, #8]
 8018fd4:	f000 f8ee 	bl	80191b4 <FLASH_Program_HalfWord>
 8018fd8:	e00d      	b.n	8018ff6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	2b02      	cmp	r3, #2
 8018fde:	d105      	bne.n	8018fec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	4619      	mov	r1, r3
 8018fe4:	68b8      	ldr	r0, [r7, #8]
 8018fe6:	f000 f8c3 	bl	8019170 <FLASH_Program_Word>
 8018fea:	e004      	b.n	8018ff6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8018fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ff0:	68b8      	ldr	r0, [r7, #8]
 8018ff2:	f000 f88b 	bl	801910c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018ff6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018ffa:	f000 f847 	bl	801908c <FLASH_WaitForLastOperation>
 8018ffe:	4603      	mov	r3, r0
 8019000:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019002:	4b08      	ldr	r3, [pc, #32]	; (8019024 <HAL_FLASH_Program+0xa4>)
 8019004:	691b      	ldr	r3, [r3, #16]
 8019006:	4a07      	ldr	r2, [pc, #28]	; (8019024 <HAL_FLASH_Program+0xa4>)
 8019008:	f023 0301 	bic.w	r3, r3, #1
 801900c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801900e:	4b04      	ldr	r3, [pc, #16]	; (8019020 <HAL_FLASH_Program+0xa0>)
 8019010:	2200      	movs	r2, #0
 8019012:	761a      	strb	r2, [r3, #24]
  
  return status;
 8019014:	7dfb      	ldrb	r3, [r7, #23]
}
 8019016:	4618      	mov	r0, r3
 8019018:	3718      	adds	r7, #24
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	20006a50 	.word	0x20006a50
 8019024:	40023c00 	.word	0x40023c00

08019028 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019028:	b480      	push	{r7}
 801902a:	b083      	sub	sp, #12
 801902c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801902e:	2300      	movs	r3, #0
 8019030:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019032:	4b0b      	ldr	r3, [pc, #44]	; (8019060 <HAL_FLASH_Unlock+0x38>)
 8019034:	691b      	ldr	r3, [r3, #16]
 8019036:	2b00      	cmp	r3, #0
 8019038:	da0b      	bge.n	8019052 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801903a:	4b09      	ldr	r3, [pc, #36]	; (8019060 <HAL_FLASH_Unlock+0x38>)
 801903c:	4a09      	ldr	r2, [pc, #36]	; (8019064 <HAL_FLASH_Unlock+0x3c>)
 801903e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019040:	4b07      	ldr	r3, [pc, #28]	; (8019060 <HAL_FLASH_Unlock+0x38>)
 8019042:	4a09      	ldr	r2, [pc, #36]	; (8019068 <HAL_FLASH_Unlock+0x40>)
 8019044:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8019046:	4b06      	ldr	r3, [pc, #24]	; (8019060 <HAL_FLASH_Unlock+0x38>)
 8019048:	691b      	ldr	r3, [r3, #16]
 801904a:	2b00      	cmp	r3, #0
 801904c:	da01      	bge.n	8019052 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801904e:	2301      	movs	r3, #1
 8019050:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8019052:	79fb      	ldrb	r3, [r7, #7]
}
 8019054:	4618      	mov	r0, r3
 8019056:	370c      	adds	r7, #12
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr
 8019060:	40023c00 	.word	0x40023c00
 8019064:	45670123 	.word	0x45670123
 8019068:	cdef89ab 	.word	0xcdef89ab

0801906c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801906c:	b480      	push	{r7}
 801906e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019070:	4b05      	ldr	r3, [pc, #20]	; (8019088 <HAL_FLASH_Lock+0x1c>)
 8019072:	691b      	ldr	r3, [r3, #16]
 8019074:	4a04      	ldr	r2, [pc, #16]	; (8019088 <HAL_FLASH_Lock+0x1c>)
 8019076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801907a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801907c:	2300      	movs	r3, #0
}
 801907e:	4618      	mov	r0, r3
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr
 8019088:	40023c00 	.word	0x40023c00

0801908c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019094:	2300      	movs	r3, #0
 8019096:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019098:	4b1a      	ldr	r3, [pc, #104]	; (8019104 <FLASH_WaitForLastOperation+0x78>)
 801909a:	2200      	movs	r2, #0
 801909c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801909e:	f7ff f819 	bl	80180d4 <HAL_GetTick>
 80190a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80190a4:	e010      	b.n	80190c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190ac:	d00c      	beq.n	80190c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d007      	beq.n	80190c4 <FLASH_WaitForLastOperation+0x38>
 80190b4:	f7ff f80e 	bl	80180d4 <HAL_GetTick>
 80190b8:	4602      	mov	r2, r0
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	1ad3      	subs	r3, r2, r3
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d201      	bcs.n	80190c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80190c4:	2303      	movs	r3, #3
 80190c6:	e019      	b.n	80190fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80190c8:	4b0f      	ldr	r3, [pc, #60]	; (8019108 <FLASH_WaitForLastOperation+0x7c>)
 80190ca:	68db      	ldr	r3, [r3, #12]
 80190cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d1e8      	bne.n	80190a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80190d4:	4b0c      	ldr	r3, [pc, #48]	; (8019108 <FLASH_WaitForLastOperation+0x7c>)
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	f003 0301 	and.w	r3, r3, #1
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d002      	beq.n	80190e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80190e0:	4b09      	ldr	r3, [pc, #36]	; (8019108 <FLASH_WaitForLastOperation+0x7c>)
 80190e2:	2201      	movs	r2, #1
 80190e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80190e6:	4b08      	ldr	r3, [pc, #32]	; (8019108 <FLASH_WaitForLastOperation+0x7c>)
 80190e8:	68db      	ldr	r3, [r3, #12]
 80190ea:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d003      	beq.n	80190fa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80190f2:	f000 f8a5 	bl	8019240 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80190f6:	2301      	movs	r3, #1
 80190f8:	e000      	b.n	80190fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80190fa:	2300      	movs	r3, #0
  
}  
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	20006a50 	.word	0x20006a50
 8019108:	40023c00 	.word	0x40023c00

0801910c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801910c:	b480      	push	{r7}
 801910e:	b085      	sub	sp, #20
 8019110:	af00      	add	r7, sp, #0
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019118:	4b14      	ldr	r3, [pc, #80]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 801911a:	691b      	ldr	r3, [r3, #16]
 801911c:	4a13      	ldr	r2, [pc, #76]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 801911e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8019124:	4b11      	ldr	r3, [pc, #68]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 8019126:	691b      	ldr	r3, [r3, #16]
 8019128:	4a10      	ldr	r2, [pc, #64]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 801912a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801912e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019130:	4b0e      	ldr	r3, [pc, #56]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 8019132:	691b      	ldr	r3, [r3, #16]
 8019134:	4a0d      	ldr	r2, [pc, #52]	; (801916c <FLASH_Program_DoubleWord+0x60>)
 8019136:	f043 0301 	orr.w	r3, r3, #1
 801913a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	683a      	ldr	r2, [r7, #0]
 8019140:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8019142:	f3bf 8f6f 	isb	sy
}
 8019146:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019148:	e9d7 0100 	ldrd	r0, r1, [r7]
 801914c:	f04f 0200 	mov.w	r2, #0
 8019150:	f04f 0300 	mov.w	r3, #0
 8019154:	000a      	movs	r2, r1
 8019156:	2300      	movs	r3, #0
 8019158:	68f9      	ldr	r1, [r7, #12]
 801915a:	3104      	adds	r1, #4
 801915c:	4613      	mov	r3, r2
 801915e:	600b      	str	r3, [r1, #0]
}
 8019160:	bf00      	nop
 8019162:	3714      	adds	r7, #20
 8019164:	46bd      	mov	sp, r7
 8019166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916a:	4770      	bx	lr
 801916c:	40023c00 	.word	0x40023c00

08019170 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019170:	b480      	push	{r7}
 8019172:	b083      	sub	sp, #12
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
 8019178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801917a:	4b0d      	ldr	r3, [pc, #52]	; (80191b0 <FLASH_Program_Word+0x40>)
 801917c:	691b      	ldr	r3, [r3, #16]
 801917e:	4a0c      	ldr	r2, [pc, #48]	; (80191b0 <FLASH_Program_Word+0x40>)
 8019180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019184:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8019186:	4b0a      	ldr	r3, [pc, #40]	; (80191b0 <FLASH_Program_Word+0x40>)
 8019188:	691b      	ldr	r3, [r3, #16]
 801918a:	4a09      	ldr	r2, [pc, #36]	; (80191b0 <FLASH_Program_Word+0x40>)
 801918c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019190:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019192:	4b07      	ldr	r3, [pc, #28]	; (80191b0 <FLASH_Program_Word+0x40>)
 8019194:	691b      	ldr	r3, [r3, #16]
 8019196:	4a06      	ldr	r2, [pc, #24]	; (80191b0 <FLASH_Program_Word+0x40>)
 8019198:	f043 0301 	orr.w	r3, r3, #1
 801919c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	683a      	ldr	r2, [r7, #0]
 80191a2:	601a      	str	r2, [r3, #0]
}
 80191a4:	bf00      	nop
 80191a6:	370c      	adds	r7, #12
 80191a8:	46bd      	mov	sp, r7
 80191aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ae:	4770      	bx	lr
 80191b0:	40023c00 	.word	0x40023c00

080191b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80191b4:	b480      	push	{r7}
 80191b6:	b083      	sub	sp, #12
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	460b      	mov	r3, r1
 80191be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80191c0:	4b0d      	ldr	r3, [pc, #52]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191c2:	691b      	ldr	r3, [r3, #16]
 80191c4:	4a0c      	ldr	r2, [pc, #48]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80191ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80191cc:	4b0a      	ldr	r3, [pc, #40]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191ce:	691b      	ldr	r3, [r3, #16]
 80191d0:	4a09      	ldr	r2, [pc, #36]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80191d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80191d8:	4b07      	ldr	r3, [pc, #28]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191da:	691b      	ldr	r3, [r3, #16]
 80191dc:	4a06      	ldr	r2, [pc, #24]	; (80191f8 <FLASH_Program_HalfWord+0x44>)
 80191de:	f043 0301 	orr.w	r3, r3, #1
 80191e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	887a      	ldrh	r2, [r7, #2]
 80191e8:	801a      	strh	r2, [r3, #0]
}
 80191ea:	bf00      	nop
 80191ec:	370c      	adds	r7, #12
 80191ee:	46bd      	mov	sp, r7
 80191f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f4:	4770      	bx	lr
 80191f6:	bf00      	nop
 80191f8:	40023c00 	.word	0x40023c00

080191fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80191fc:	b480      	push	{r7}
 80191fe:	b083      	sub	sp, #12
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	460b      	mov	r3, r1
 8019206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019208:	4b0c      	ldr	r3, [pc, #48]	; (801923c <FLASH_Program_Byte+0x40>)
 801920a:	691b      	ldr	r3, [r3, #16]
 801920c:	4a0b      	ldr	r2, [pc, #44]	; (801923c <FLASH_Program_Byte+0x40>)
 801920e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8019214:	4b09      	ldr	r3, [pc, #36]	; (801923c <FLASH_Program_Byte+0x40>)
 8019216:	4a09      	ldr	r2, [pc, #36]	; (801923c <FLASH_Program_Byte+0x40>)
 8019218:	691b      	ldr	r3, [r3, #16]
 801921a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801921c:	4b07      	ldr	r3, [pc, #28]	; (801923c <FLASH_Program_Byte+0x40>)
 801921e:	691b      	ldr	r3, [r3, #16]
 8019220:	4a06      	ldr	r2, [pc, #24]	; (801923c <FLASH_Program_Byte+0x40>)
 8019222:	f043 0301 	orr.w	r3, r3, #1
 8019226:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	78fa      	ldrb	r2, [r7, #3]
 801922c:	701a      	strb	r2, [r3, #0]
}
 801922e:	bf00      	nop
 8019230:	370c      	adds	r7, #12
 8019232:	46bd      	mov	sp, r7
 8019234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019238:	4770      	bx	lr
 801923a:	bf00      	nop
 801923c:	40023c00 	.word	0x40023c00

08019240 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019240:	b480      	push	{r7}
 8019242:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8019244:	4b2f      	ldr	r3, [pc, #188]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 8019246:	68db      	ldr	r3, [r3, #12]
 8019248:	f003 0310 	and.w	r3, r3, #16
 801924c:	2b00      	cmp	r3, #0
 801924e:	d008      	beq.n	8019262 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019250:	4b2d      	ldr	r3, [pc, #180]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 8019252:	69db      	ldr	r3, [r3, #28]
 8019254:	f043 0310 	orr.w	r3, r3, #16
 8019258:	4a2b      	ldr	r2, [pc, #172]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 801925a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801925c:	4b29      	ldr	r3, [pc, #164]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 801925e:	2210      	movs	r2, #16
 8019260:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8019262:	4b28      	ldr	r3, [pc, #160]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 8019264:	68db      	ldr	r3, [r3, #12]
 8019266:	f003 0320 	and.w	r3, r3, #32
 801926a:	2b00      	cmp	r3, #0
 801926c:	d008      	beq.n	8019280 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801926e:	4b26      	ldr	r3, [pc, #152]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 8019270:	69db      	ldr	r3, [r3, #28]
 8019272:	f043 0308 	orr.w	r3, r3, #8
 8019276:	4a24      	ldr	r2, [pc, #144]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 8019278:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801927a:	4b22      	ldr	r3, [pc, #136]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 801927c:	2220      	movs	r2, #32
 801927e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019280:	4b20      	ldr	r3, [pc, #128]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019288:	2b00      	cmp	r3, #0
 801928a:	d008      	beq.n	801929e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801928c:	4b1e      	ldr	r3, [pc, #120]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 801928e:	69db      	ldr	r3, [r3, #28]
 8019290:	f043 0304 	orr.w	r3, r3, #4
 8019294:	4a1c      	ldr	r2, [pc, #112]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 8019296:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8019298:	4b1a      	ldr	r3, [pc, #104]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 801929a:	2240      	movs	r2, #64	; 0x40
 801929c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801929e:	4b19      	ldr	r3, [pc, #100]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192a0:	68db      	ldr	r3, [r3, #12]
 80192a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d008      	beq.n	80192bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80192aa:	4b17      	ldr	r3, [pc, #92]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192ac:	69db      	ldr	r3, [r3, #28]
 80192ae:	f043 0302 	orr.w	r3, r3, #2
 80192b2:	4a15      	ldr	r2, [pc, #84]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80192b6:	4b13      	ldr	r3, [pc, #76]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192b8:	2280      	movs	r2, #128	; 0x80
 80192ba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80192bc:	4b11      	ldr	r3, [pc, #68]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192be:	68db      	ldr	r3, [r3, #12]
 80192c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d009      	beq.n	80192dc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80192c8:	4b0f      	ldr	r3, [pc, #60]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192ca:	69db      	ldr	r3, [r3, #28]
 80192cc:	f043 0301 	orr.w	r3, r3, #1
 80192d0:	4a0d      	ldr	r2, [pc, #52]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80192d4:	4b0b      	ldr	r3, [pc, #44]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80192da:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80192dc:	4b09      	ldr	r3, [pc, #36]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192de:	68db      	ldr	r3, [r3, #12]
 80192e0:	f003 0302 	and.w	r3, r3, #2
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d008      	beq.n	80192fa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80192e8:	4b07      	ldr	r3, [pc, #28]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192ea:	69db      	ldr	r3, [r3, #28]
 80192ec:	f043 0320 	orr.w	r3, r3, #32
 80192f0:	4a05      	ldr	r2, [pc, #20]	; (8019308 <FLASH_SetErrorCode+0xc8>)
 80192f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80192f4:	4b03      	ldr	r3, [pc, #12]	; (8019304 <FLASH_SetErrorCode+0xc4>)
 80192f6:	2202      	movs	r2, #2
 80192f8:	60da      	str	r2, [r3, #12]
  }
}
 80192fa:	bf00      	nop
 80192fc:	46bd      	mov	sp, r7
 80192fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019302:	4770      	bx	lr
 8019304:	40023c00 	.word	0x40023c00
 8019308:	20006a50 	.word	0x20006a50

0801930c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
 8019314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019316:	2301      	movs	r3, #1
 8019318:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801931a:	2300      	movs	r3, #0
 801931c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801931e:	4b31      	ldr	r3, [pc, #196]	; (80193e4 <HAL_FLASHEx_Erase+0xd8>)
 8019320:	7e1b      	ldrb	r3, [r3, #24]
 8019322:	2b01      	cmp	r3, #1
 8019324:	d101      	bne.n	801932a <HAL_FLASHEx_Erase+0x1e>
 8019326:	2302      	movs	r3, #2
 8019328:	e058      	b.n	80193dc <HAL_FLASHEx_Erase+0xd0>
 801932a:	4b2e      	ldr	r3, [pc, #184]	; (80193e4 <HAL_FLASHEx_Erase+0xd8>)
 801932c:	2201      	movs	r2, #1
 801932e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019334:	f7ff feaa 	bl	801908c <FLASH_WaitForLastOperation>
 8019338:	4603      	mov	r3, r0
 801933a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801933c:	7bfb      	ldrb	r3, [r7, #15]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d148      	bne.n	80193d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	f04f 32ff 	mov.w	r2, #4294967295
 8019348:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	2b01      	cmp	r3, #1
 8019350:	d115      	bne.n	801937e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	691b      	ldr	r3, [r3, #16]
 8019356:	b2da      	uxtb	r2, r3
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	4619      	mov	r1, r3
 801935e:	4610      	mov	r0, r2
 8019360:	f000 f844 	bl	80193ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019368:	f7ff fe90 	bl	801908c <FLASH_WaitForLastOperation>
 801936c:	4603      	mov	r3, r0
 801936e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019370:	4b1d      	ldr	r3, [pc, #116]	; (80193e8 <HAL_FLASHEx_Erase+0xdc>)
 8019372:	691b      	ldr	r3, [r3, #16]
 8019374:	4a1c      	ldr	r2, [pc, #112]	; (80193e8 <HAL_FLASHEx_Erase+0xdc>)
 8019376:	f023 0304 	bic.w	r3, r3, #4
 801937a:	6113      	str	r3, [r2, #16]
 801937c:	e028      	b.n	80193d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	689b      	ldr	r3, [r3, #8]
 8019382:	60bb      	str	r3, [r7, #8]
 8019384:	e01c      	b.n	80193c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	691b      	ldr	r3, [r3, #16]
 801938a:	b2db      	uxtb	r3, r3
 801938c:	4619      	mov	r1, r3
 801938e:	68b8      	ldr	r0, [r7, #8]
 8019390:	f000 f850 	bl	8019434 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019394:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019398:	f7ff fe78 	bl	801908c <FLASH_WaitForLastOperation>
 801939c:	4603      	mov	r3, r0
 801939e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80193a0:	4b11      	ldr	r3, [pc, #68]	; (80193e8 <HAL_FLASHEx_Erase+0xdc>)
 80193a2:	691b      	ldr	r3, [r3, #16]
 80193a4:	4a10      	ldr	r2, [pc, #64]	; (80193e8 <HAL_FLASHEx_Erase+0xdc>)
 80193a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80193aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80193ac:	7bfb      	ldrb	r3, [r7, #15]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d003      	beq.n	80193ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	68ba      	ldr	r2, [r7, #8]
 80193b6:	601a      	str	r2, [r3, #0]
          break;
 80193b8:	e00a      	b.n	80193d0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80193ba:	68bb      	ldr	r3, [r7, #8]
 80193bc:	3301      	adds	r3, #1
 80193be:	60bb      	str	r3, [r7, #8]
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	68da      	ldr	r2, [r3, #12]
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	689b      	ldr	r3, [r3, #8]
 80193c8:	4413      	add	r3, r2
 80193ca:	68ba      	ldr	r2, [r7, #8]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d3da      	bcc.n	8019386 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80193d0:	f000 f878 	bl	80194c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80193d4:	4b03      	ldr	r3, [pc, #12]	; (80193e4 <HAL_FLASHEx_Erase+0xd8>)
 80193d6:	2200      	movs	r2, #0
 80193d8:	761a      	strb	r2, [r3, #24]

  return status;
 80193da:	7bfb      	ldrb	r3, [r7, #15]
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3710      	adds	r7, #16
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	20006a50 	.word	0x20006a50
 80193e8:	40023c00 	.word	0x40023c00

080193ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80193ec:	b480      	push	{r7}
 80193ee:	b083      	sub	sp, #12
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	4603      	mov	r3, r0
 80193f4:	6039      	str	r1, [r7, #0]
 80193f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193f8:	4b0d      	ldr	r3, [pc, #52]	; (8019430 <FLASH_MassErase+0x44>)
 80193fa:	691b      	ldr	r3, [r3, #16]
 80193fc:	4a0c      	ldr	r2, [pc, #48]	; (8019430 <FLASH_MassErase+0x44>)
 80193fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019404:	4b0a      	ldr	r3, [pc, #40]	; (8019430 <FLASH_MassErase+0x44>)
 8019406:	691b      	ldr	r3, [r3, #16]
 8019408:	4a09      	ldr	r2, [pc, #36]	; (8019430 <FLASH_MassErase+0x44>)
 801940a:	f043 0304 	orr.w	r3, r3, #4
 801940e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019410:	4b07      	ldr	r3, [pc, #28]	; (8019430 <FLASH_MassErase+0x44>)
 8019412:	691a      	ldr	r2, [r3, #16]
 8019414:	79fb      	ldrb	r3, [r7, #7]
 8019416:	021b      	lsls	r3, r3, #8
 8019418:	4313      	orrs	r3, r2
 801941a:	4a05      	ldr	r2, [pc, #20]	; (8019430 <FLASH_MassErase+0x44>)
 801941c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019420:	6113      	str	r3, [r2, #16]
}
 8019422:	bf00      	nop
 8019424:	370c      	adds	r7, #12
 8019426:	46bd      	mov	sp, r7
 8019428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801942c:	4770      	bx	lr
 801942e:	bf00      	nop
 8019430:	40023c00 	.word	0x40023c00

08019434 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8019434:	b480      	push	{r7}
 8019436:	b085      	sub	sp, #20
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	460b      	mov	r3, r1
 801943e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019440:	2300      	movs	r3, #0
 8019442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8019444:	78fb      	ldrb	r3, [r7, #3]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d102      	bne.n	8019450 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801944a:	2300      	movs	r3, #0
 801944c:	60fb      	str	r3, [r7, #12]
 801944e:	e010      	b.n	8019472 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019450:	78fb      	ldrb	r3, [r7, #3]
 8019452:	2b01      	cmp	r3, #1
 8019454:	d103      	bne.n	801945e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8019456:	f44f 7380 	mov.w	r3, #256	; 0x100
 801945a:	60fb      	str	r3, [r7, #12]
 801945c:	e009      	b.n	8019472 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801945e:	78fb      	ldrb	r3, [r7, #3]
 8019460:	2b02      	cmp	r3, #2
 8019462:	d103      	bne.n	801946c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8019464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019468:	60fb      	str	r3, [r7, #12]
 801946a:	e002      	b.n	8019472 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801946c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019470:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019472:	4b13      	ldr	r3, [pc, #76]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019474:	691b      	ldr	r3, [r3, #16]
 8019476:	4a12      	ldr	r2, [pc, #72]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801947c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801947e:	4b10      	ldr	r3, [pc, #64]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019480:	691a      	ldr	r2, [r3, #16]
 8019482:	490f      	ldr	r1, [pc, #60]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	4313      	orrs	r3, r2
 8019488:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801948a:	4b0d      	ldr	r3, [pc, #52]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 801948c:	691b      	ldr	r3, [r3, #16]
 801948e:	4a0c      	ldr	r2, [pc, #48]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019490:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019494:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8019496:	4b0a      	ldr	r3, [pc, #40]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 8019498:	691a      	ldr	r2, [r3, #16]
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	00db      	lsls	r3, r3, #3
 801949e:	4313      	orrs	r3, r2
 80194a0:	4a07      	ldr	r2, [pc, #28]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 80194a2:	f043 0302 	orr.w	r3, r3, #2
 80194a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80194a8:	4b05      	ldr	r3, [pc, #20]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 80194aa:	691b      	ldr	r3, [r3, #16]
 80194ac:	4a04      	ldr	r2, [pc, #16]	; (80194c0 <FLASH_Erase_Sector+0x8c>)
 80194ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80194b2:	6113      	str	r3, [r2, #16]
}
 80194b4:	bf00      	nop
 80194b6:	3714      	adds	r7, #20
 80194b8:	46bd      	mov	sp, r7
 80194ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194be:	4770      	bx	lr
 80194c0:	40023c00 	.word	0x40023c00

080194c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80194c4:	b480      	push	{r7}
 80194c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80194c8:	4b20      	ldr	r3, [pc, #128]	; (801954c <FLASH_FlushCaches+0x88>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d017      	beq.n	8019504 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80194d4:	4b1d      	ldr	r3, [pc, #116]	; (801954c <FLASH_FlushCaches+0x88>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	4a1c      	ldr	r2, [pc, #112]	; (801954c <FLASH_FlushCaches+0x88>)
 80194da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80194de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80194e0:	4b1a      	ldr	r3, [pc, #104]	; (801954c <FLASH_FlushCaches+0x88>)
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a19      	ldr	r2, [pc, #100]	; (801954c <FLASH_FlushCaches+0x88>)
 80194e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80194ea:	6013      	str	r3, [r2, #0]
 80194ec:	4b17      	ldr	r3, [pc, #92]	; (801954c <FLASH_FlushCaches+0x88>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4a16      	ldr	r2, [pc, #88]	; (801954c <FLASH_FlushCaches+0x88>)
 80194f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80194f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80194f8:	4b14      	ldr	r3, [pc, #80]	; (801954c <FLASH_FlushCaches+0x88>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4a13      	ldr	r2, [pc, #76]	; (801954c <FLASH_FlushCaches+0x88>)
 80194fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019502:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019504:	4b11      	ldr	r3, [pc, #68]	; (801954c <FLASH_FlushCaches+0x88>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801950c:	2b00      	cmp	r3, #0
 801950e:	d017      	beq.n	8019540 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019510:	4b0e      	ldr	r3, [pc, #56]	; (801954c <FLASH_FlushCaches+0x88>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	4a0d      	ldr	r2, [pc, #52]	; (801954c <FLASH_FlushCaches+0x88>)
 8019516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801951a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801951c:	4b0b      	ldr	r3, [pc, #44]	; (801954c <FLASH_FlushCaches+0x88>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4a0a      	ldr	r2, [pc, #40]	; (801954c <FLASH_FlushCaches+0x88>)
 8019522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019526:	6013      	str	r3, [r2, #0]
 8019528:	4b08      	ldr	r3, [pc, #32]	; (801954c <FLASH_FlushCaches+0x88>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4a07      	ldr	r2, [pc, #28]	; (801954c <FLASH_FlushCaches+0x88>)
 801952e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019532:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8019534:	4b05      	ldr	r3, [pc, #20]	; (801954c <FLASH_FlushCaches+0x88>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	4a04      	ldr	r2, [pc, #16]	; (801954c <FLASH_FlushCaches+0x88>)
 801953a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801953e:	6013      	str	r3, [r2, #0]
  }
}
 8019540:	bf00      	nop
 8019542:	46bd      	mov	sp, r7
 8019544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop
 801954c:	40023c00 	.word	0x40023c00

08019550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019550:	b480      	push	{r7}
 8019552:	b089      	sub	sp, #36	; 0x24
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801955a:	2300      	movs	r3, #0
 801955c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801955e:	2300      	movs	r3, #0
 8019560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8019562:	2300      	movs	r3, #0
 8019564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019566:	2300      	movs	r3, #0
 8019568:	61fb      	str	r3, [r7, #28]
 801956a:	e165      	b.n	8019838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801956c:	2201      	movs	r2, #1
 801956e:	69fb      	ldr	r3, [r7, #28]
 8019570:	fa02 f303 	lsl.w	r3, r2, r3
 8019574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	697a      	ldr	r2, [r7, #20]
 801957c:	4013      	ands	r3, r2
 801957e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019580:	693a      	ldr	r2, [r7, #16]
 8019582:	697b      	ldr	r3, [r7, #20]
 8019584:	429a      	cmp	r2, r3
 8019586:	f040 8154 	bne.w	8019832 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	f003 0303 	and.w	r3, r3, #3
 8019592:	2b01      	cmp	r3, #1
 8019594:	d005      	beq.n	80195a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	685b      	ldr	r3, [r3, #4]
 801959a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801959e:	2b02      	cmp	r3, #2
 80195a0:	d130      	bne.n	8019604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	689b      	ldr	r3, [r3, #8]
 80195a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80195a8:	69fb      	ldr	r3, [r7, #28]
 80195aa:	005b      	lsls	r3, r3, #1
 80195ac:	2203      	movs	r2, #3
 80195ae:	fa02 f303 	lsl.w	r3, r2, r3
 80195b2:	43db      	mvns	r3, r3
 80195b4:	69ba      	ldr	r2, [r7, #24]
 80195b6:	4013      	ands	r3, r2
 80195b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80195ba:	683b      	ldr	r3, [r7, #0]
 80195bc:	68da      	ldr	r2, [r3, #12]
 80195be:	69fb      	ldr	r3, [r7, #28]
 80195c0:	005b      	lsls	r3, r3, #1
 80195c2:	fa02 f303 	lsl.w	r3, r2, r3
 80195c6:	69ba      	ldr	r2, [r7, #24]
 80195c8:	4313      	orrs	r3, r2
 80195ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	69ba      	ldr	r2, [r7, #24]
 80195d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	685b      	ldr	r3, [r3, #4]
 80195d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80195d8:	2201      	movs	r2, #1
 80195da:	69fb      	ldr	r3, [r7, #28]
 80195dc:	fa02 f303 	lsl.w	r3, r2, r3
 80195e0:	43db      	mvns	r3, r3
 80195e2:	69ba      	ldr	r2, [r7, #24]
 80195e4:	4013      	ands	r3, r2
 80195e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	685b      	ldr	r3, [r3, #4]
 80195ec:	091b      	lsrs	r3, r3, #4
 80195ee:	f003 0201 	and.w	r2, r3, #1
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	fa02 f303 	lsl.w	r3, r2, r3
 80195f8:	69ba      	ldr	r2, [r7, #24]
 80195fa:	4313      	orrs	r3, r2
 80195fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	69ba      	ldr	r2, [r7, #24]
 8019602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	f003 0303 	and.w	r3, r3, #3
 801960c:	2b03      	cmp	r3, #3
 801960e:	d017      	beq.n	8019640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	68db      	ldr	r3, [r3, #12]
 8019614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019616:	69fb      	ldr	r3, [r7, #28]
 8019618:	005b      	lsls	r3, r3, #1
 801961a:	2203      	movs	r2, #3
 801961c:	fa02 f303 	lsl.w	r3, r2, r3
 8019620:	43db      	mvns	r3, r3
 8019622:	69ba      	ldr	r2, [r7, #24]
 8019624:	4013      	ands	r3, r2
 8019626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	689a      	ldr	r2, [r3, #8]
 801962c:	69fb      	ldr	r3, [r7, #28]
 801962e:	005b      	lsls	r3, r3, #1
 8019630:	fa02 f303 	lsl.w	r3, r2, r3
 8019634:	69ba      	ldr	r2, [r7, #24]
 8019636:	4313      	orrs	r3, r2
 8019638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	69ba      	ldr	r2, [r7, #24]
 801963e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019640:	683b      	ldr	r3, [r7, #0]
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	f003 0303 	and.w	r3, r3, #3
 8019648:	2b02      	cmp	r3, #2
 801964a:	d123      	bne.n	8019694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801964c:	69fb      	ldr	r3, [r7, #28]
 801964e:	08da      	lsrs	r2, r3, #3
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	3208      	adds	r2, #8
 8019654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801965a:	69fb      	ldr	r3, [r7, #28]
 801965c:	f003 0307 	and.w	r3, r3, #7
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	220f      	movs	r2, #15
 8019664:	fa02 f303 	lsl.w	r3, r2, r3
 8019668:	43db      	mvns	r3, r3
 801966a:	69ba      	ldr	r2, [r7, #24]
 801966c:	4013      	ands	r3, r2
 801966e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	691a      	ldr	r2, [r3, #16]
 8019674:	69fb      	ldr	r3, [r7, #28]
 8019676:	f003 0307 	and.w	r3, r3, #7
 801967a:	009b      	lsls	r3, r3, #2
 801967c:	fa02 f303 	lsl.w	r3, r2, r3
 8019680:	69ba      	ldr	r2, [r7, #24]
 8019682:	4313      	orrs	r3, r2
 8019684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8019686:	69fb      	ldr	r3, [r7, #28]
 8019688:	08da      	lsrs	r2, r3, #3
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	3208      	adds	r2, #8
 801968e:	69b9      	ldr	r1, [r7, #24]
 8019690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801969a:	69fb      	ldr	r3, [r7, #28]
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	2203      	movs	r2, #3
 80196a0:	fa02 f303 	lsl.w	r3, r2, r3
 80196a4:	43db      	mvns	r3, r3
 80196a6:	69ba      	ldr	r2, [r7, #24]
 80196a8:	4013      	ands	r3, r2
 80196aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80196ac:	683b      	ldr	r3, [r7, #0]
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	f003 0203 	and.w	r2, r3, #3
 80196b4:	69fb      	ldr	r3, [r7, #28]
 80196b6:	005b      	lsls	r3, r3, #1
 80196b8:	fa02 f303 	lsl.w	r3, r2, r3
 80196bc:	69ba      	ldr	r2, [r7, #24]
 80196be:	4313      	orrs	r3, r2
 80196c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	69ba      	ldr	r2, [r7, #24]
 80196c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80196c8:	683b      	ldr	r3, [r7, #0]
 80196ca:	685b      	ldr	r3, [r3, #4]
 80196cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f000 80ae 	beq.w	8019832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80196d6:	2300      	movs	r3, #0
 80196d8:	60fb      	str	r3, [r7, #12]
 80196da:	4b5d      	ldr	r3, [pc, #372]	; (8019850 <HAL_GPIO_Init+0x300>)
 80196dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196de:	4a5c      	ldr	r2, [pc, #368]	; (8019850 <HAL_GPIO_Init+0x300>)
 80196e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80196e4:	6453      	str	r3, [r2, #68]	; 0x44
 80196e6:	4b5a      	ldr	r3, [pc, #360]	; (8019850 <HAL_GPIO_Init+0x300>)
 80196e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80196ee:	60fb      	str	r3, [r7, #12]
 80196f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80196f2:	4a58      	ldr	r2, [pc, #352]	; (8019854 <HAL_GPIO_Init+0x304>)
 80196f4:	69fb      	ldr	r3, [r7, #28]
 80196f6:	089b      	lsrs	r3, r3, #2
 80196f8:	3302      	adds	r3, #2
 80196fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80196fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	f003 0303 	and.w	r3, r3, #3
 8019706:	009b      	lsls	r3, r3, #2
 8019708:	220f      	movs	r2, #15
 801970a:	fa02 f303 	lsl.w	r3, r2, r3
 801970e:	43db      	mvns	r3, r3
 8019710:	69ba      	ldr	r2, [r7, #24]
 8019712:	4013      	ands	r3, r2
 8019714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	4a4f      	ldr	r2, [pc, #316]	; (8019858 <HAL_GPIO_Init+0x308>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d025      	beq.n	801976a <HAL_GPIO_Init+0x21a>
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	4a4e      	ldr	r2, [pc, #312]	; (801985c <HAL_GPIO_Init+0x30c>)
 8019722:	4293      	cmp	r3, r2
 8019724:	d01f      	beq.n	8019766 <HAL_GPIO_Init+0x216>
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	4a4d      	ldr	r2, [pc, #308]	; (8019860 <HAL_GPIO_Init+0x310>)
 801972a:	4293      	cmp	r3, r2
 801972c:	d019      	beq.n	8019762 <HAL_GPIO_Init+0x212>
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	4a4c      	ldr	r2, [pc, #304]	; (8019864 <HAL_GPIO_Init+0x314>)
 8019732:	4293      	cmp	r3, r2
 8019734:	d013      	beq.n	801975e <HAL_GPIO_Init+0x20e>
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	4a4b      	ldr	r2, [pc, #300]	; (8019868 <HAL_GPIO_Init+0x318>)
 801973a:	4293      	cmp	r3, r2
 801973c:	d00d      	beq.n	801975a <HAL_GPIO_Init+0x20a>
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	4a4a      	ldr	r2, [pc, #296]	; (801986c <HAL_GPIO_Init+0x31c>)
 8019742:	4293      	cmp	r3, r2
 8019744:	d007      	beq.n	8019756 <HAL_GPIO_Init+0x206>
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	4a49      	ldr	r2, [pc, #292]	; (8019870 <HAL_GPIO_Init+0x320>)
 801974a:	4293      	cmp	r3, r2
 801974c:	d101      	bne.n	8019752 <HAL_GPIO_Init+0x202>
 801974e:	2306      	movs	r3, #6
 8019750:	e00c      	b.n	801976c <HAL_GPIO_Init+0x21c>
 8019752:	2307      	movs	r3, #7
 8019754:	e00a      	b.n	801976c <HAL_GPIO_Init+0x21c>
 8019756:	2305      	movs	r3, #5
 8019758:	e008      	b.n	801976c <HAL_GPIO_Init+0x21c>
 801975a:	2304      	movs	r3, #4
 801975c:	e006      	b.n	801976c <HAL_GPIO_Init+0x21c>
 801975e:	2303      	movs	r3, #3
 8019760:	e004      	b.n	801976c <HAL_GPIO_Init+0x21c>
 8019762:	2302      	movs	r3, #2
 8019764:	e002      	b.n	801976c <HAL_GPIO_Init+0x21c>
 8019766:	2301      	movs	r3, #1
 8019768:	e000      	b.n	801976c <HAL_GPIO_Init+0x21c>
 801976a:	2300      	movs	r3, #0
 801976c:	69fa      	ldr	r2, [r7, #28]
 801976e:	f002 0203 	and.w	r2, r2, #3
 8019772:	0092      	lsls	r2, r2, #2
 8019774:	4093      	lsls	r3, r2
 8019776:	69ba      	ldr	r2, [r7, #24]
 8019778:	4313      	orrs	r3, r2
 801977a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801977c:	4935      	ldr	r1, [pc, #212]	; (8019854 <HAL_GPIO_Init+0x304>)
 801977e:	69fb      	ldr	r3, [r7, #28]
 8019780:	089b      	lsrs	r3, r3, #2
 8019782:	3302      	adds	r3, #2
 8019784:	69ba      	ldr	r2, [r7, #24]
 8019786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801978a:	4b3a      	ldr	r3, [pc, #232]	; (8019874 <HAL_GPIO_Init+0x324>)
 801978c:	689b      	ldr	r3, [r3, #8]
 801978e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019790:	693b      	ldr	r3, [r7, #16]
 8019792:	43db      	mvns	r3, r3
 8019794:	69ba      	ldr	r2, [r7, #24]
 8019796:	4013      	ands	r3, r2
 8019798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	685b      	ldr	r3, [r3, #4]
 801979e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d003      	beq.n	80197ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80197a6:	69ba      	ldr	r2, [r7, #24]
 80197a8:	693b      	ldr	r3, [r7, #16]
 80197aa:	4313      	orrs	r3, r2
 80197ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80197ae:	4a31      	ldr	r2, [pc, #196]	; (8019874 <HAL_GPIO_Init+0x324>)
 80197b0:	69bb      	ldr	r3, [r7, #24]
 80197b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80197b4:	4b2f      	ldr	r3, [pc, #188]	; (8019874 <HAL_GPIO_Init+0x324>)
 80197b6:	68db      	ldr	r3, [r3, #12]
 80197b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80197ba:	693b      	ldr	r3, [r7, #16]
 80197bc:	43db      	mvns	r3, r3
 80197be:	69ba      	ldr	r2, [r7, #24]
 80197c0:	4013      	ands	r3, r2
 80197c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d003      	beq.n	80197d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80197d0:	69ba      	ldr	r2, [r7, #24]
 80197d2:	693b      	ldr	r3, [r7, #16]
 80197d4:	4313      	orrs	r3, r2
 80197d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80197d8:	4a26      	ldr	r2, [pc, #152]	; (8019874 <HAL_GPIO_Init+0x324>)
 80197da:	69bb      	ldr	r3, [r7, #24]
 80197dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80197de:	4b25      	ldr	r3, [pc, #148]	; (8019874 <HAL_GPIO_Init+0x324>)
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80197e4:	693b      	ldr	r3, [r7, #16]
 80197e6:	43db      	mvns	r3, r3
 80197e8:	69ba      	ldr	r2, [r7, #24]
 80197ea:	4013      	ands	r3, r2
 80197ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	685b      	ldr	r3, [r3, #4]
 80197f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d003      	beq.n	8019802 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80197fa:	69ba      	ldr	r2, [r7, #24]
 80197fc:	693b      	ldr	r3, [r7, #16]
 80197fe:	4313      	orrs	r3, r2
 8019800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019802:	4a1c      	ldr	r2, [pc, #112]	; (8019874 <HAL_GPIO_Init+0x324>)
 8019804:	69bb      	ldr	r3, [r7, #24]
 8019806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019808:	4b1a      	ldr	r3, [pc, #104]	; (8019874 <HAL_GPIO_Init+0x324>)
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801980e:	693b      	ldr	r3, [r7, #16]
 8019810:	43db      	mvns	r3, r3
 8019812:	69ba      	ldr	r2, [r7, #24]
 8019814:	4013      	ands	r3, r2
 8019816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	685b      	ldr	r3, [r3, #4]
 801981c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019820:	2b00      	cmp	r3, #0
 8019822:	d003      	beq.n	801982c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019824:	69ba      	ldr	r2, [r7, #24]
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	4313      	orrs	r3, r2
 801982a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801982c:	4a11      	ldr	r2, [pc, #68]	; (8019874 <HAL_GPIO_Init+0x324>)
 801982e:	69bb      	ldr	r3, [r7, #24]
 8019830:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019832:	69fb      	ldr	r3, [r7, #28]
 8019834:	3301      	adds	r3, #1
 8019836:	61fb      	str	r3, [r7, #28]
 8019838:	69fb      	ldr	r3, [r7, #28]
 801983a:	2b0f      	cmp	r3, #15
 801983c:	f67f ae96 	bls.w	801956c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019840:	bf00      	nop
 8019842:	bf00      	nop
 8019844:	3724      	adds	r7, #36	; 0x24
 8019846:	46bd      	mov	sp, r7
 8019848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	40023800 	.word	0x40023800
 8019854:	40013800 	.word	0x40013800
 8019858:	40020000 	.word	0x40020000
 801985c:	40020400 	.word	0x40020400
 8019860:	40020800 	.word	0x40020800
 8019864:	40020c00 	.word	0x40020c00
 8019868:	40021000 	.word	0x40021000
 801986c:	40021400 	.word	0x40021400
 8019870:	40021800 	.word	0x40021800
 8019874:	40013c00 	.word	0x40013c00

08019878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8019878:	b480      	push	{r7}
 801987a:	b085      	sub	sp, #20
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	460b      	mov	r3, r1
 8019882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	691a      	ldr	r2, [r3, #16]
 8019888:	887b      	ldrh	r3, [r7, #2]
 801988a:	4013      	ands	r3, r2
 801988c:	2b00      	cmp	r3, #0
 801988e:	d002      	beq.n	8019896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8019890:	2301      	movs	r3, #1
 8019892:	73fb      	strb	r3, [r7, #15]
 8019894:	e001      	b.n	801989a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8019896:	2300      	movs	r3, #0
 8019898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801989a:	7bfb      	ldrb	r3, [r7, #15]
}
 801989c:	4618      	mov	r0, r3
 801989e:	3714      	adds	r7, #20
 80198a0:	46bd      	mov	sp, r7
 80198a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a6:	4770      	bx	lr

080198a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b083      	sub	sp, #12
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	460b      	mov	r3, r1
 80198b2:	807b      	strh	r3, [r7, #2]
 80198b4:	4613      	mov	r3, r2
 80198b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80198b8:	787b      	ldrb	r3, [r7, #1]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d003      	beq.n	80198c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80198be:	887a      	ldrh	r2, [r7, #2]
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80198c4:	e003      	b.n	80198ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80198c6:	887b      	ldrh	r3, [r7, #2]
 80198c8:	041a      	lsls	r2, r3, #16
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	619a      	str	r2, [r3, #24]
}
 80198ce:	bf00      	nop
 80198d0:	370c      	adds	r7, #12
 80198d2:	46bd      	mov	sp, r7
 80198d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d8:	4770      	bx	lr

080198da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80198da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198dc:	b08f      	sub	sp, #60	; 0x3c
 80198de:	af0a      	add	r7, sp, #40	; 0x28
 80198e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d101      	bne.n	80198ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80198e8:	2301      	movs	r3, #1
 80198ea:	e116      	b.n	8019b1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80198f8:	b2db      	uxtb	r3, r3
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d106      	bne.n	801990c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	2200      	movs	r2, #0
 8019902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019906:	6878      	ldr	r0, [r7, #4]
 8019908:	f00c f9a0 	bl	8025c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2203      	movs	r2, #3
 8019910:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019914:	68bb      	ldr	r3, [r7, #8]
 8019916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801991c:	2b00      	cmp	r3, #0
 801991e:	d102      	bne.n	8019926 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2200      	movs	r2, #0
 8019924:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	4618      	mov	r0, r3
 801992c:	f004 f9e9 	bl	801dd02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	603b      	str	r3, [r7, #0]
 8019936:	687e      	ldr	r6, [r7, #4]
 8019938:	466d      	mov	r5, sp
 801993a:	f106 0410 	add.w	r4, r6, #16
 801993e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019946:	e894 0003 	ldmia.w	r4, {r0, r1}
 801994a:	e885 0003 	stmia.w	r5, {r0, r1}
 801994e:	1d33      	adds	r3, r6, #4
 8019950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019952:	6838      	ldr	r0, [r7, #0]
 8019954:	f004 f8c0 	bl	801dad8 <USB_CoreInit>
 8019958:	4603      	mov	r3, r0
 801995a:	2b00      	cmp	r3, #0
 801995c:	d005      	beq.n	801996a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2202      	movs	r2, #2
 8019962:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8019966:	2301      	movs	r3, #1
 8019968:	e0d7      	b.n	8019b1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	2100      	movs	r1, #0
 8019970:	4618      	mov	r0, r3
 8019972:	f004 f9d7 	bl	801dd24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019976:	2300      	movs	r3, #0
 8019978:	73fb      	strb	r3, [r7, #15]
 801997a:	e04a      	b.n	8019a12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801997c:	7bfa      	ldrb	r2, [r7, #15]
 801997e:	6879      	ldr	r1, [r7, #4]
 8019980:	4613      	mov	r3, r2
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	4413      	add	r3, r2
 8019986:	009b      	lsls	r3, r3, #2
 8019988:	440b      	add	r3, r1
 801998a:	333d      	adds	r3, #61	; 0x3d
 801998c:	2201      	movs	r2, #1
 801998e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019990:	7bfa      	ldrb	r2, [r7, #15]
 8019992:	6879      	ldr	r1, [r7, #4]
 8019994:	4613      	mov	r3, r2
 8019996:	00db      	lsls	r3, r3, #3
 8019998:	4413      	add	r3, r2
 801999a:	009b      	lsls	r3, r3, #2
 801999c:	440b      	add	r3, r1
 801999e:	333c      	adds	r3, #60	; 0x3c
 80199a0:	7bfa      	ldrb	r2, [r7, #15]
 80199a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80199a4:	7bfa      	ldrb	r2, [r7, #15]
 80199a6:	7bfb      	ldrb	r3, [r7, #15]
 80199a8:	b298      	uxth	r0, r3
 80199aa:	6879      	ldr	r1, [r7, #4]
 80199ac:	4613      	mov	r3, r2
 80199ae:	00db      	lsls	r3, r3, #3
 80199b0:	4413      	add	r3, r2
 80199b2:	009b      	lsls	r3, r3, #2
 80199b4:	440b      	add	r3, r1
 80199b6:	3344      	adds	r3, #68	; 0x44
 80199b8:	4602      	mov	r2, r0
 80199ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80199bc:	7bfa      	ldrb	r2, [r7, #15]
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	4613      	mov	r3, r2
 80199c2:	00db      	lsls	r3, r3, #3
 80199c4:	4413      	add	r3, r2
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	440b      	add	r3, r1
 80199ca:	3340      	adds	r3, #64	; 0x40
 80199cc:	2200      	movs	r2, #0
 80199ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80199d0:	7bfa      	ldrb	r2, [r7, #15]
 80199d2:	6879      	ldr	r1, [r7, #4]
 80199d4:	4613      	mov	r3, r2
 80199d6:	00db      	lsls	r3, r3, #3
 80199d8:	4413      	add	r3, r2
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	440b      	add	r3, r1
 80199de:	3348      	adds	r3, #72	; 0x48
 80199e0:	2200      	movs	r2, #0
 80199e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80199e4:	7bfa      	ldrb	r2, [r7, #15]
 80199e6:	6879      	ldr	r1, [r7, #4]
 80199e8:	4613      	mov	r3, r2
 80199ea:	00db      	lsls	r3, r3, #3
 80199ec:	4413      	add	r3, r2
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	440b      	add	r3, r1
 80199f2:	334c      	adds	r3, #76	; 0x4c
 80199f4:	2200      	movs	r2, #0
 80199f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80199f8:	7bfa      	ldrb	r2, [r7, #15]
 80199fa:	6879      	ldr	r1, [r7, #4]
 80199fc:	4613      	mov	r3, r2
 80199fe:	00db      	lsls	r3, r3, #3
 8019a00:	4413      	add	r3, r2
 8019a02:	009b      	lsls	r3, r3, #2
 8019a04:	440b      	add	r3, r1
 8019a06:	3354      	adds	r3, #84	; 0x54
 8019a08:	2200      	movs	r2, #0
 8019a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019a0c:	7bfb      	ldrb	r3, [r7, #15]
 8019a0e:	3301      	adds	r3, #1
 8019a10:	73fb      	strb	r3, [r7, #15]
 8019a12:	7bfa      	ldrb	r2, [r7, #15]
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	685b      	ldr	r3, [r3, #4]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d3af      	bcc.n	801997c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	73fb      	strb	r3, [r7, #15]
 8019a20:	e044      	b.n	8019aac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019a22:	7bfa      	ldrb	r2, [r7, #15]
 8019a24:	6879      	ldr	r1, [r7, #4]
 8019a26:	4613      	mov	r3, r2
 8019a28:	00db      	lsls	r3, r3, #3
 8019a2a:	4413      	add	r3, r2
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	440b      	add	r3, r1
 8019a30:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8019a34:	2200      	movs	r2, #0
 8019a36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019a38:	7bfa      	ldrb	r2, [r7, #15]
 8019a3a:	6879      	ldr	r1, [r7, #4]
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	00db      	lsls	r3, r3, #3
 8019a40:	4413      	add	r3, r2
 8019a42:	009b      	lsls	r3, r3, #2
 8019a44:	440b      	add	r3, r1
 8019a46:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8019a4a:	7bfa      	ldrb	r2, [r7, #15]
 8019a4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019a4e:	7bfa      	ldrb	r2, [r7, #15]
 8019a50:	6879      	ldr	r1, [r7, #4]
 8019a52:	4613      	mov	r3, r2
 8019a54:	00db      	lsls	r3, r3, #3
 8019a56:	4413      	add	r3, r2
 8019a58:	009b      	lsls	r3, r3, #2
 8019a5a:	440b      	add	r3, r1
 8019a5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019a60:	2200      	movs	r2, #0
 8019a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019a64:	7bfa      	ldrb	r2, [r7, #15]
 8019a66:	6879      	ldr	r1, [r7, #4]
 8019a68:	4613      	mov	r3, r2
 8019a6a:	00db      	lsls	r3, r3, #3
 8019a6c:	4413      	add	r3, r2
 8019a6e:	009b      	lsls	r3, r3, #2
 8019a70:	440b      	add	r3, r1
 8019a72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019a76:	2200      	movs	r2, #0
 8019a78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019a7a:	7bfa      	ldrb	r2, [r7, #15]
 8019a7c:	6879      	ldr	r1, [r7, #4]
 8019a7e:	4613      	mov	r3, r2
 8019a80:	00db      	lsls	r3, r3, #3
 8019a82:	4413      	add	r3, r2
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	440b      	add	r3, r1
 8019a88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019a90:	7bfa      	ldrb	r2, [r7, #15]
 8019a92:	6879      	ldr	r1, [r7, #4]
 8019a94:	4613      	mov	r3, r2
 8019a96:	00db      	lsls	r3, r3, #3
 8019a98:	4413      	add	r3, r2
 8019a9a:	009b      	lsls	r3, r3, #2
 8019a9c:	440b      	add	r3, r1
 8019a9e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019aa6:	7bfb      	ldrb	r3, [r7, #15]
 8019aa8:	3301      	adds	r3, #1
 8019aaa:	73fb      	strb	r3, [r7, #15]
 8019aac:	7bfa      	ldrb	r2, [r7, #15]
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	429a      	cmp	r2, r3
 8019ab4:	d3b5      	bcc.n	8019a22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	603b      	str	r3, [r7, #0]
 8019abc:	687e      	ldr	r6, [r7, #4]
 8019abe:	466d      	mov	r5, sp
 8019ac0:	f106 0410 	add.w	r4, r6, #16
 8019ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8019ad4:	1d33      	adds	r3, r6, #4
 8019ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019ad8:	6838      	ldr	r0, [r7, #0]
 8019ada:	f004 f96f 	bl	801ddbc <USB_DevInit>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d005      	beq.n	8019af0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2202      	movs	r2, #2
 8019ae8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8019aec:	2301      	movs	r3, #1
 8019aee:	e014      	b.n	8019b1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	2200      	movs	r2, #0
 8019af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	2201      	movs	r2, #1
 8019afc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b04:	2b01      	cmp	r3, #1
 8019b06:	d102      	bne.n	8019b0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019b08:	6878      	ldr	r0, [r7, #4]
 8019b0a:	f001 f9b9 	bl	801ae80 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	4618      	mov	r0, r3
 8019b14:	f005 fab1 	bl	801f07a <USB_DevDisconnect>

  return HAL_OK;
 8019b18:	2300      	movs	r3, #0
}
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	3714      	adds	r7, #20
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019b22:	b580      	push	{r7, lr}
 8019b24:	b084      	sub	sp, #16
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d101      	bne.n	8019b3e <HAL_PCD_Start+0x1c>
 8019b3a:	2302      	movs	r3, #2
 8019b3c:	e020      	b.n	8019b80 <HAL_PCD_Start+0x5e>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	2201      	movs	r2, #1
 8019b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b4a:	2b01      	cmp	r3, #1
 8019b4c:	d109      	bne.n	8019b62 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b52:	2b01      	cmp	r3, #1
 8019b54:	d005      	beq.n	8019b62 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4618      	mov	r0, r3
 8019b68:	f004 f8ba 	bl	801dce0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	4618      	mov	r0, r3
 8019b72:	f005 fa61 	bl	801f038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8019b7e:	2300      	movs	r3, #0
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3710      	adds	r7, #16
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019b88:	b590      	push	{r4, r7, lr}
 8019b8a:	b08d      	sub	sp, #52	; 0x34
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019b96:	6a3b      	ldr	r3, [r7, #32]
 8019b98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f005 fb1f 	bl	801f1e2 <USB_GetMode>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	f040 84b7 	bne.w	801a51a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f005 fa83 	bl	801f0bc <USB_ReadInterrupts>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f000 84ad 	beq.w	801a518 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8019bbe:	69fb      	ldr	r3, [r7, #28]
 8019bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019bc4:	689b      	ldr	r3, [r3, #8]
 8019bc6:	0a1b      	lsrs	r3, r3, #8
 8019bc8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	f005 fa70 	bl	801f0bc <USB_ReadInterrupts>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	f003 0302 	and.w	r3, r3, #2
 8019be2:	2b02      	cmp	r3, #2
 8019be4:	d107      	bne.n	8019bf6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	695a      	ldr	r2, [r3, #20]
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	f002 0202 	and.w	r2, r2, #2
 8019bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f005 fa5e 	bl	801f0bc <USB_ReadInterrupts>
 8019c00:	4603      	mov	r3, r0
 8019c02:	f003 0310 	and.w	r3, r3, #16
 8019c06:	2b10      	cmp	r3, #16
 8019c08:	d161      	bne.n	8019cce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	699a      	ldr	r2, [r3, #24]
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	f022 0210 	bic.w	r2, r2, #16
 8019c18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8019c1a:	6a3b      	ldr	r3, [r7, #32]
 8019c1c:	6a1b      	ldr	r3, [r3, #32]
 8019c1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8019c20:	69bb      	ldr	r3, [r7, #24]
 8019c22:	f003 020f 	and.w	r2, r3, #15
 8019c26:	4613      	mov	r3, r2
 8019c28:	00db      	lsls	r3, r3, #3
 8019c2a:	4413      	add	r3, r2
 8019c2c:	009b      	lsls	r3, r3, #2
 8019c2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019c32:	687a      	ldr	r2, [r7, #4]
 8019c34:	4413      	add	r3, r2
 8019c36:	3304      	adds	r3, #4
 8019c38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	0c5b      	lsrs	r3, r3, #17
 8019c3e:	f003 030f 	and.w	r3, r3, #15
 8019c42:	2b02      	cmp	r3, #2
 8019c44:	d124      	bne.n	8019c90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019c46:	69ba      	ldr	r2, [r7, #24]
 8019c48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019c4c:	4013      	ands	r3, r2
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d035      	beq.n	8019cbe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019c52:	697b      	ldr	r3, [r7, #20]
 8019c54:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019c56:	69bb      	ldr	r3, [r7, #24]
 8019c58:	091b      	lsrs	r3, r3, #4
 8019c5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c60:	b29b      	uxth	r3, r3
 8019c62:	461a      	mov	r2, r3
 8019c64:	6a38      	ldr	r0, [r7, #32]
 8019c66:	f005 f895 	bl	801ed94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	691a      	ldr	r2, [r3, #16]
 8019c6e:	69bb      	ldr	r3, [r7, #24]
 8019c70:	091b      	lsrs	r3, r3, #4
 8019c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c76:	441a      	add	r2, r3
 8019c78:	697b      	ldr	r3, [r7, #20]
 8019c7a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019c7c:	697b      	ldr	r3, [r7, #20]
 8019c7e:	6a1a      	ldr	r2, [r3, #32]
 8019c80:	69bb      	ldr	r3, [r7, #24]
 8019c82:	091b      	lsrs	r3, r3, #4
 8019c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019c88:	441a      	add	r2, r3
 8019c8a:	697b      	ldr	r3, [r7, #20]
 8019c8c:	621a      	str	r2, [r3, #32]
 8019c8e:	e016      	b.n	8019cbe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	0c5b      	lsrs	r3, r3, #17
 8019c94:	f003 030f 	and.w	r3, r3, #15
 8019c98:	2b06      	cmp	r3, #6
 8019c9a:	d110      	bne.n	8019cbe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019ca2:	2208      	movs	r2, #8
 8019ca4:	4619      	mov	r1, r3
 8019ca6:	6a38      	ldr	r0, [r7, #32]
 8019ca8:	f005 f874 	bl	801ed94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019cac:	697b      	ldr	r3, [r7, #20]
 8019cae:	6a1a      	ldr	r2, [r3, #32]
 8019cb0:	69bb      	ldr	r3, [r7, #24]
 8019cb2:	091b      	lsrs	r3, r3, #4
 8019cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019cb8:	441a      	add	r2, r3
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	699a      	ldr	r2, [r3, #24]
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	f042 0210 	orr.w	r2, r2, #16
 8019ccc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f005 f9f2 	bl	801f0bc <USB_ReadInterrupts>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019cde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019ce2:	f040 80a7 	bne.w	8019e34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f005 f9f7 	bl	801f0e2 <USB_ReadDevAllOutEpInterrupt>
 8019cf4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019cf6:	e099      	b.n	8019e2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cfa:	f003 0301 	and.w	r3, r3, #1
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	f000 808e 	beq.w	8019e20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d0a:	b2d2      	uxtb	r2, r2
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f005 fa1b 	bl	801f14a <USB_ReadDevOutEPInterrupt>
 8019d14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019d16:	693b      	ldr	r3, [r7, #16]
 8019d18:	f003 0301 	and.w	r3, r3, #1
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d00c      	beq.n	8019d3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	015a      	lsls	r2, r3, #5
 8019d24:	69fb      	ldr	r3, [r7, #28]
 8019d26:	4413      	add	r3, r2
 8019d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d2c:	461a      	mov	r2, r3
 8019d2e:	2301      	movs	r3, #1
 8019d30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8019d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d34:	6878      	ldr	r0, [r7, #4]
 8019d36:	f000 ff1d 	bl	801ab74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	f003 0308 	and.w	r3, r3, #8
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d00c      	beq.n	8019d5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8019d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d46:	015a      	lsls	r2, r3, #5
 8019d48:	69fb      	ldr	r3, [r7, #28]
 8019d4a:	4413      	add	r3, r2
 8019d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d50:	461a      	mov	r2, r3
 8019d52:	2308      	movs	r3, #8
 8019d54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8019d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f000 fff3 	bl	801ad44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	f003 0310 	and.w	r3, r3, #16
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d008      	beq.n	8019d7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8019d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6a:	015a      	lsls	r2, r3, #5
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	4413      	add	r3, r2
 8019d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d74:	461a      	mov	r2, r3
 8019d76:	2310      	movs	r3, #16
 8019d78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8019d7a:	693b      	ldr	r3, [r7, #16]
 8019d7c:	f003 0302 	and.w	r3, r3, #2
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d030      	beq.n	8019de6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8019d84:	6a3b      	ldr	r3, [r7, #32]
 8019d86:	695b      	ldr	r3, [r3, #20]
 8019d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d8c:	2b80      	cmp	r3, #128	; 0x80
 8019d8e:	d109      	bne.n	8019da4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8019d90:	69fb      	ldr	r3, [r7, #28]
 8019d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	69fa      	ldr	r2, [r7, #28]
 8019d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019da2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8019da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019da6:	4613      	mov	r3, r2
 8019da8:	00db      	lsls	r3, r3, #3
 8019daa:	4413      	add	r3, r2
 8019dac:	009b      	lsls	r3, r3, #2
 8019dae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019db2:	687a      	ldr	r2, [r7, #4]
 8019db4:	4413      	add	r3, r2
 8019db6:	3304      	adds	r3, #4
 8019db8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8019dba:	697b      	ldr	r3, [r7, #20]
 8019dbc:	78db      	ldrb	r3, [r3, #3]
 8019dbe:	2b01      	cmp	r3, #1
 8019dc0:	d108      	bne.n	8019dd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8019dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dca:	b2db      	uxtb	r3, r3
 8019dcc:	4619      	mov	r1, r3
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f00c f864 	bl	8025e9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8019dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd6:	015a      	lsls	r2, r3, #5
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	4413      	add	r3, r2
 8019ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019de0:	461a      	mov	r2, r3
 8019de2:	2302      	movs	r3, #2
 8019de4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	f003 0320 	and.w	r3, r3, #32
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d008      	beq.n	8019e02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8019df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df2:	015a      	lsls	r2, r3, #5
 8019df4:	69fb      	ldr	r3, [r7, #28]
 8019df6:	4413      	add	r3, r2
 8019df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	2320      	movs	r3, #32
 8019e00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d009      	beq.n	8019e20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8019e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e0e:	015a      	lsls	r2, r3, #5
 8019e10:	69fb      	ldr	r3, [r7, #28]
 8019e12:	4413      	add	r3, r2
 8019e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e18:	461a      	mov	r2, r3
 8019e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019e1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8019e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e22:	3301      	adds	r3, #1
 8019e24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e28:	085b      	lsrs	r3, r3, #1
 8019e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	f47f af62 	bne.w	8019cf8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f005 f93f 	bl	801f0bc <USB_ReadInterrupts>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8019e48:	f040 80db 	bne.w	801a002 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	4618      	mov	r0, r3
 8019e52:	f005 f960 	bl	801f116 <USB_ReadDevAllInEpInterrupt>
 8019e56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8019e5c:	e0cd      	b.n	8019ffa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8019e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e60:	f003 0301 	and.w	r3, r3, #1
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	f000 80c2 	beq.w	8019fee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e70:	b2d2      	uxtb	r2, r2
 8019e72:	4611      	mov	r1, r2
 8019e74:	4618      	mov	r0, r3
 8019e76:	f005 f986 	bl	801f186 <USB_ReadDevInEPInterrupt>
 8019e7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8019e7c:	693b      	ldr	r3, [r7, #16]
 8019e7e:	f003 0301 	and.w	r3, r3, #1
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d057      	beq.n	8019f36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8019e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e88:	f003 030f 	and.w	r3, r3, #15
 8019e8c:	2201      	movs	r2, #1
 8019e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8019e92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8019e94:	69fb      	ldr	r3, [r7, #28]
 8019e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	43db      	mvns	r3, r3
 8019ea0:	69f9      	ldr	r1, [r7, #28]
 8019ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019ea6:	4013      	ands	r3, r2
 8019ea8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8019eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eac:	015a      	lsls	r2, r3, #5
 8019eae:	69fb      	ldr	r3, [r7, #28]
 8019eb0:	4413      	add	r3, r2
 8019eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019eb6:	461a      	mov	r2, r3
 8019eb8:	2301      	movs	r3, #1
 8019eba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	691b      	ldr	r3, [r3, #16]
 8019ec0:	2b01      	cmp	r3, #1
 8019ec2:	d132      	bne.n	8019f2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8019ec4:	6879      	ldr	r1, [r7, #4]
 8019ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ec8:	4613      	mov	r3, r2
 8019eca:	00db      	lsls	r3, r3, #3
 8019ecc:	4413      	add	r3, r2
 8019ece:	009b      	lsls	r3, r3, #2
 8019ed0:	440b      	add	r3, r1
 8019ed2:	334c      	adds	r3, #76	; 0x4c
 8019ed4:	6819      	ldr	r1, [r3, #0]
 8019ed6:	6878      	ldr	r0, [r7, #4]
 8019ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019eda:	4613      	mov	r3, r2
 8019edc:	00db      	lsls	r3, r3, #3
 8019ede:	4413      	add	r3, r2
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	4403      	add	r3, r0
 8019ee4:	3348      	adds	r3, #72	; 0x48
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	4419      	add	r1, r3
 8019eea:	6878      	ldr	r0, [r7, #4]
 8019eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019eee:	4613      	mov	r3, r2
 8019ef0:	00db      	lsls	r3, r3, #3
 8019ef2:	4413      	add	r3, r2
 8019ef4:	009b      	lsls	r3, r3, #2
 8019ef6:	4403      	add	r3, r0
 8019ef8:	334c      	adds	r3, #76	; 0x4c
 8019efa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8019efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d113      	bne.n	8019f2a <HAL_PCD_IRQHandler+0x3a2>
 8019f02:	6879      	ldr	r1, [r7, #4]
 8019f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f06:	4613      	mov	r3, r2
 8019f08:	00db      	lsls	r3, r3, #3
 8019f0a:	4413      	add	r3, r2
 8019f0c:	009b      	lsls	r3, r3, #2
 8019f0e:	440b      	add	r3, r1
 8019f10:	3354      	adds	r3, #84	; 0x54
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d108      	bne.n	8019f2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	6818      	ldr	r0, [r3, #0]
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019f22:	461a      	mov	r2, r3
 8019f24:	2101      	movs	r1, #1
 8019f26:	f005 f98d 	bl	801f244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8019f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	4619      	mov	r1, r3
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f00b ff2e 	bl	8025d92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8019f36:	693b      	ldr	r3, [r7, #16]
 8019f38:	f003 0308 	and.w	r3, r3, #8
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d008      	beq.n	8019f52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8019f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f42:	015a      	lsls	r2, r3, #5
 8019f44:	69fb      	ldr	r3, [r7, #28]
 8019f46:	4413      	add	r3, r2
 8019f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f4c:	461a      	mov	r2, r3
 8019f4e:	2308      	movs	r3, #8
 8019f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8019f52:	693b      	ldr	r3, [r7, #16]
 8019f54:	f003 0310 	and.w	r3, r3, #16
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d008      	beq.n	8019f6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8019f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5e:	015a      	lsls	r2, r3, #5
 8019f60:	69fb      	ldr	r3, [r7, #28]
 8019f62:	4413      	add	r3, r2
 8019f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f68:	461a      	mov	r2, r3
 8019f6a:	2310      	movs	r3, #16
 8019f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d008      	beq.n	8019f8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8019f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7a:	015a      	lsls	r2, r3, #5
 8019f7c:	69fb      	ldr	r3, [r7, #28]
 8019f7e:	4413      	add	r3, r2
 8019f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f84:	461a      	mov	r2, r3
 8019f86:	2340      	movs	r3, #64	; 0x40
 8019f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8019f8a:	693b      	ldr	r3, [r7, #16]
 8019f8c:	f003 0302 	and.w	r3, r3, #2
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d023      	beq.n	8019fdc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8019f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019f96:	6a38      	ldr	r0, [r7, #32]
 8019f98:	f004 f86e 	bl	801e078 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8019f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f9e:	4613      	mov	r3, r2
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	4413      	add	r3, r2
 8019fa4:	009b      	lsls	r3, r3, #2
 8019fa6:	3338      	adds	r3, #56	; 0x38
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	4413      	add	r3, r2
 8019fac:	3304      	adds	r3, #4
 8019fae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8019fb0:	697b      	ldr	r3, [r7, #20]
 8019fb2:	78db      	ldrb	r3, [r3, #3]
 8019fb4:	2b01      	cmp	r3, #1
 8019fb6:	d108      	bne.n	8019fca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	2200      	movs	r2, #0
 8019fbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8019fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc0:	b2db      	uxtb	r3, r3
 8019fc2:	4619      	mov	r1, r3
 8019fc4:	6878      	ldr	r0, [r7, #4]
 8019fc6:	f00b ff7b 	bl	8025ec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8019fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fcc:	015a      	lsls	r2, r3, #5
 8019fce:	69fb      	ldr	r3, [r7, #28]
 8019fd0:	4413      	add	r3, r2
 8019fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fd6:	461a      	mov	r2, r3
 8019fd8:	2302      	movs	r3, #2
 8019fda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8019fdc:	693b      	ldr	r3, [r7, #16]
 8019fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d003      	beq.n	8019fee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8019fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fe8:	6878      	ldr	r0, [r7, #4]
 8019fea:	f000 fd35 	bl	801aa58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8019fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ff6:	085b      	lsrs	r3, r3, #1
 8019ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	f47f af2e 	bne.w	8019e5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	4618      	mov	r0, r3
 801a008:	f005 f858 	bl	801f0bc <USB_ReadInterrupts>
 801a00c:	4603      	mov	r3, r0
 801a00e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a016:	d122      	bne.n	801a05e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	69fa      	ldr	r2, [r7, #28]
 801a022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a026:	f023 0301 	bic.w	r3, r3, #1
 801a02a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801a032:	2b01      	cmp	r3, #1
 801a034:	d108      	bne.n	801a048 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	2200      	movs	r2, #0
 801a03a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a03e:	2100      	movs	r1, #0
 801a040:	6878      	ldr	r0, [r7, #4]
 801a042:	f00c f915 	bl	8026270 <HAL_PCDEx_LPM_Callback>
 801a046:	e002      	b.n	801a04e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f00b ff19 	bl	8025e80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	695a      	ldr	r2, [r3, #20]
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a05c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	4618      	mov	r0, r3
 801a064:	f005 f82a 	bl	801f0bc <USB_ReadInterrupts>
 801a068:	4603      	mov	r3, r0
 801a06a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a06e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a072:	d112      	bne.n	801a09a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a07a:	689b      	ldr	r3, [r3, #8]
 801a07c:	f003 0301 	and.w	r3, r3, #1
 801a080:	2b01      	cmp	r3, #1
 801a082:	d102      	bne.n	801a08a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	f00b fed5 	bl	8025e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	695a      	ldr	r2, [r3, #20]
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a098:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f005 f80c 	bl	801f0bc <USB_ReadInterrupts>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a0aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a0ae:	d121      	bne.n	801a0f4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	695a      	ldr	r2, [r3, #20]
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a0be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d111      	bne.n	801a0ee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2201      	movs	r2, #1
 801a0ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0d8:	089b      	lsrs	r3, r3, #2
 801a0da:	f003 020f 	and.w	r2, r3, #15
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a0e4:	2101      	movs	r1, #1
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f00c f8c2 	bl	8026270 <HAL_PCDEx_LPM_Callback>
 801a0ec:	e002      	b.n	801a0f4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f00b fea0 	bl	8025e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f004 ffdf 	bl	801f0bc <USB_ReadInterrupts>
 801a0fe:	4603      	mov	r3, r0
 801a100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a108:	f040 80b7 	bne.w	801a27a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a112:	685b      	ldr	r3, [r3, #4]
 801a114:	69fa      	ldr	r2, [r7, #28]
 801a116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a11a:	f023 0301 	bic.w	r3, r3, #1
 801a11e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	2110      	movs	r1, #16
 801a126:	4618      	mov	r0, r3
 801a128:	f003 ffa6 	bl	801e078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a12c:	2300      	movs	r3, #0
 801a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a130:	e046      	b.n	801a1c0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a134:	015a      	lsls	r2, r3, #5
 801a136:	69fb      	ldr	r3, [r7, #28]
 801a138:	4413      	add	r3, r2
 801a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a13e:	461a      	mov	r2, r3
 801a140:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a144:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a148:	015a      	lsls	r2, r3, #5
 801a14a:	69fb      	ldr	r3, [r7, #28]
 801a14c:	4413      	add	r3, r2
 801a14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a156:	0151      	lsls	r1, r2, #5
 801a158:	69fa      	ldr	r2, [r7, #28]
 801a15a:	440a      	add	r2, r1
 801a15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a164:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a168:	015a      	lsls	r2, r3, #5
 801a16a:	69fb      	ldr	r3, [r7, #28]
 801a16c:	4413      	add	r3, r2
 801a16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a172:	461a      	mov	r2, r3
 801a174:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a178:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a17c:	015a      	lsls	r2, r3, #5
 801a17e:	69fb      	ldr	r3, [r7, #28]
 801a180:	4413      	add	r3, r2
 801a182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a18a:	0151      	lsls	r1, r2, #5
 801a18c:	69fa      	ldr	r2, [r7, #28]
 801a18e:	440a      	add	r2, r1
 801a190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a194:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19c:	015a      	lsls	r2, r3, #5
 801a19e:	69fb      	ldr	r3, [r7, #28]
 801a1a0:	4413      	add	r3, r2
 801a1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1aa:	0151      	lsls	r1, r2, #5
 801a1ac:	69fa      	ldr	r2, [r7, #28]
 801a1ae:	440a      	add	r2, r1
 801a1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a1b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1bc:	3301      	adds	r3, #1
 801a1be:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d3b3      	bcc.n	801a132 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a1ca:	69fb      	ldr	r3, [r7, #28]
 801a1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1d0:	69db      	ldr	r3, [r3, #28]
 801a1d2:	69fa      	ldr	r2, [r7, #28]
 801a1d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a1d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a1dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d016      	beq.n	801a214 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a1e6:	69fb      	ldr	r3, [r7, #28]
 801a1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a1f0:	69fa      	ldr	r2, [r7, #28]
 801a1f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a1f6:	f043 030b 	orr.w	r3, r3, #11
 801a1fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a1fe:	69fb      	ldr	r3, [r7, #28]
 801a200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a206:	69fa      	ldr	r2, [r7, #28]
 801a208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a20c:	f043 030b 	orr.w	r3, r3, #11
 801a210:	6453      	str	r3, [r2, #68]	; 0x44
 801a212:	e015      	b.n	801a240 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a214:	69fb      	ldr	r3, [r7, #28]
 801a216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a21a:	695b      	ldr	r3, [r3, #20]
 801a21c:	69fa      	ldr	r2, [r7, #28]
 801a21e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a226:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a22a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a22c:	69fb      	ldr	r3, [r7, #28]
 801a22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a232:	691b      	ldr	r3, [r3, #16]
 801a234:	69fa      	ldr	r2, [r7, #28]
 801a236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a23a:	f043 030b 	orr.w	r3, r3, #11
 801a23e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a240:	69fb      	ldr	r3, [r7, #28]
 801a242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	69fa      	ldr	r2, [r7, #28]
 801a24a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a24e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a252:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6818      	ldr	r0, [r3, #0]
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	691b      	ldr	r3, [r3, #16]
 801a25c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a264:	461a      	mov	r2, r3
 801a266:	f004 ffed 	bl	801f244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	695a      	ldr	r2, [r3, #20]
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	4618      	mov	r0, r3
 801a280:	f004 ff1c 	bl	801f0bc <USB_ReadInterrupts>
 801a284:	4603      	mov	r3, r0
 801a286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a28a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a28e:	d124      	bne.n	801a2da <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	4618      	mov	r0, r3
 801a296:	f004 ffb2 	bl	801f1fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f003 ff67 	bl	801e172 <USB_GetDevSpeed>
 801a2a4:	4603      	mov	r3, r0
 801a2a6:	461a      	mov	r2, r3
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681c      	ldr	r4, [r3, #0]
 801a2b0:	f000 ff40 	bl	801b134 <HAL_RCC_GetHCLKFreq>
 801a2b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	461a      	mov	r2, r3
 801a2be:	4620      	mov	r0, r4
 801a2c0:	f003 fc6c 	bl	801db9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	f00b fd8c 	bl	8025de2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	695a      	ldr	r2, [r3, #20]
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a2d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	4618      	mov	r0, r3
 801a2e0:	f004 feec 	bl	801f0bc <USB_ReadInterrupts>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	f003 0308 	and.w	r3, r3, #8
 801a2ea:	2b08      	cmp	r3, #8
 801a2ec:	d10a      	bne.n	801a304 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	f00b fd69 	bl	8025dc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	695a      	ldr	r2, [r3, #20]
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	f002 0208 	and.w	r2, r2, #8
 801a302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	4618      	mov	r0, r3
 801a30a:	f004 fed7 	bl	801f0bc <USB_ReadInterrupts>
 801a30e:	4603      	mov	r3, r0
 801a310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a314:	2b80      	cmp	r3, #128	; 0x80
 801a316:	d122      	bne.n	801a35e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801a318:	6a3b      	ldr	r3, [r7, #32]
 801a31a:	699b      	ldr	r3, [r3, #24]
 801a31c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a320:	6a3b      	ldr	r3, [r7, #32]
 801a322:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a324:	2301      	movs	r3, #1
 801a326:	627b      	str	r3, [r7, #36]	; 0x24
 801a328:	e014      	b.n	801a354 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801a32a:	6879      	ldr	r1, [r7, #4]
 801a32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a32e:	4613      	mov	r3, r2
 801a330:	00db      	lsls	r3, r3, #3
 801a332:	4413      	add	r3, r2
 801a334:	009b      	lsls	r3, r3, #2
 801a336:	440b      	add	r3, r1
 801a338:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801a33c:	781b      	ldrb	r3, [r3, #0]
 801a33e:	2b01      	cmp	r3, #1
 801a340:	d105      	bne.n	801a34e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a344:	b2db      	uxtb	r3, r3
 801a346:	4619      	mov	r1, r3
 801a348:	6878      	ldr	r0, [r7, #4]
 801a34a:	f000 fb27 	bl	801a99c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a350:	3301      	adds	r3, #1
 801a352:	627b      	str	r3, [r7, #36]	; 0x24
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	685b      	ldr	r3, [r3, #4]
 801a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d3e5      	bcc.n	801a32a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	4618      	mov	r0, r3
 801a364:	f004 feaa 	bl	801f0bc <USB_ReadInterrupts>
 801a368:	4603      	mov	r3, r0
 801a36a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a372:	d13b      	bne.n	801a3ec <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a374:	2301      	movs	r3, #1
 801a376:	627b      	str	r3, [r7, #36]	; 0x24
 801a378:	e02b      	b.n	801a3d2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37c:	015a      	lsls	r2, r3, #5
 801a37e:	69fb      	ldr	r3, [r7, #28]
 801a380:	4413      	add	r3, r2
 801a382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801a38a:	6879      	ldr	r1, [r7, #4]
 801a38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a38e:	4613      	mov	r3, r2
 801a390:	00db      	lsls	r3, r3, #3
 801a392:	4413      	add	r3, r2
 801a394:	009b      	lsls	r3, r3, #2
 801a396:	440b      	add	r3, r1
 801a398:	3340      	adds	r3, #64	; 0x40
 801a39a:	781b      	ldrb	r3, [r3, #0]
 801a39c:	2b01      	cmp	r3, #1
 801a39e:	d115      	bne.n	801a3cc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801a3a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	da12      	bge.n	801a3cc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 801a3a6:	6879      	ldr	r1, [r7, #4]
 801a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3aa:	4613      	mov	r3, r2
 801a3ac:	00db      	lsls	r3, r3, #3
 801a3ae:	4413      	add	r3, r2
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	440b      	add	r3, r1
 801a3b4:	333f      	adds	r3, #63	; 0x3f
 801a3b6:	2201      	movs	r2, #1
 801a3b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3bc:	b2db      	uxtb	r3, r3
 801a3be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a3c2:	b2db      	uxtb	r3, r3
 801a3c4:	4619      	mov	r1, r3
 801a3c6:	6878      	ldr	r0, [r7, #4]
 801a3c8:	f000 fae8 	bl	801a99c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	3301      	adds	r3, #1
 801a3d0:	627b      	str	r3, [r7, #36]	; 0x24
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	685b      	ldr	r3, [r3, #4]
 801a3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d3ce      	bcc.n	801a37a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	695a      	ldr	r2, [r3, #20]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a3ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f004 fe63 	bl	801f0bc <USB_ReadInterrupts>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a3fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a400:	d155      	bne.n	801a4ae <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a402:	2301      	movs	r3, #1
 801a404:	627b      	str	r3, [r7, #36]	; 0x24
 801a406:	e045      	b.n	801a494 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40a:	015a      	lsls	r2, r3, #5
 801a40c:	69fb      	ldr	r3, [r7, #28]
 801a40e:	4413      	add	r3, r2
 801a410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801a418:	6879      	ldr	r1, [r7, #4]
 801a41a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a41c:	4613      	mov	r3, r2
 801a41e:	00db      	lsls	r3, r3, #3
 801a420:	4413      	add	r3, r2
 801a422:	009b      	lsls	r3, r3, #2
 801a424:	440b      	add	r3, r1
 801a426:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801a42a:	781b      	ldrb	r3, [r3, #0]
 801a42c:	2b01      	cmp	r3, #1
 801a42e:	d12e      	bne.n	801a48e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801a430:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801a432:	2b00      	cmp	r3, #0
 801a434:	da2b      	bge.n	801a48e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801a436:	69bb      	ldr	r3, [r7, #24]
 801a438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801a442:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801a446:	429a      	cmp	r2, r3
 801a448:	d121      	bne.n	801a48e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 801a44a:	6879      	ldr	r1, [r7, #4]
 801a44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a44e:	4613      	mov	r3, r2
 801a450:	00db      	lsls	r3, r3, #3
 801a452:	4413      	add	r3, r2
 801a454:	009b      	lsls	r3, r3, #2
 801a456:	440b      	add	r3, r1
 801a458:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801a45c:	2201      	movs	r2, #1
 801a45e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801a460:	6a3b      	ldr	r3, [r7, #32]
 801a462:	699b      	ldr	r3, [r3, #24]
 801a464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a468:	6a3b      	ldr	r3, [r7, #32]
 801a46a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 801a46c:	6a3b      	ldr	r3, [r7, #32]
 801a46e:	695b      	ldr	r3, [r3, #20]
 801a470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a474:	2b00      	cmp	r3, #0
 801a476:	d10a      	bne.n	801a48e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 801a478:	69fb      	ldr	r3, [r7, #28]
 801a47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	69fa      	ldr	r2, [r7, #28]
 801a482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a48a:	6053      	str	r3, [r2, #4]
            break;
 801a48c:	e007      	b.n	801a49e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a490:	3301      	adds	r3, #1
 801a492:	627b      	str	r3, [r7, #36]	; 0x24
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	685b      	ldr	r3, [r3, #4]
 801a498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a49a:	429a      	cmp	r2, r3
 801a49c:	d3b4      	bcc.n	801a408 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	695a      	ldr	r2, [r3, #20]
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a4ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f004 fe02 	bl	801f0bc <USB_ReadInterrupts>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a4be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a4c2:	d10a      	bne.n	801a4da <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a4c4:	6878      	ldr	r0, [r7, #4]
 801a4c6:	f00b fd0d 	bl	8025ee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	695a      	ldr	r2, [r3, #20]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a4d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f004 fdec 	bl	801f0bc <USB_ReadInterrupts>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	f003 0304 	and.w	r3, r3, #4
 801a4ea:	2b04      	cmp	r3, #4
 801a4ec:	d115      	bne.n	801a51a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	685b      	ldr	r3, [r3, #4]
 801a4f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a4f6:	69bb      	ldr	r3, [r7, #24]
 801a4f8:	f003 0304 	and.w	r3, r3, #4
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d002      	beq.n	801a506 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a500:	6878      	ldr	r0, [r7, #4]
 801a502:	f00b fcfd 	bl	8025f00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	6859      	ldr	r1, [r3, #4]
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	69ba      	ldr	r2, [r7, #24]
 801a512:	430a      	orrs	r2, r1
 801a514:	605a      	str	r2, [r3, #4]
 801a516:	e000      	b.n	801a51a <HAL_PCD_IRQHandler+0x992>
      return;
 801a518:	bf00      	nop
    }
  }
}
 801a51a:	3734      	adds	r7, #52	; 0x34
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd90      	pop	{r4, r7, pc}

0801a520 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b082      	sub	sp, #8
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
 801a528:	460b      	mov	r3, r1
 801a52a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a532:	2b01      	cmp	r3, #1
 801a534:	d101      	bne.n	801a53a <HAL_PCD_SetAddress+0x1a>
 801a536:	2302      	movs	r3, #2
 801a538:	e013      	b.n	801a562 <HAL_PCD_SetAddress+0x42>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	2201      	movs	r2, #1
 801a53e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	78fa      	ldrb	r2, [r7, #3]
 801a546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	78fa      	ldrb	r2, [r7, #3]
 801a550:	4611      	mov	r1, r2
 801a552:	4618      	mov	r0, r3
 801a554:	f004 fd4a 	bl	801efec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2200      	movs	r2, #0
 801a55c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a560:	2300      	movs	r3, #0
}
 801a562:	4618      	mov	r0, r3
 801a564:	3708      	adds	r7, #8
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}

0801a56a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a56a:	b580      	push	{r7, lr}
 801a56c:	b084      	sub	sp, #16
 801a56e:	af00      	add	r7, sp, #0
 801a570:	6078      	str	r0, [r7, #4]
 801a572:	4608      	mov	r0, r1
 801a574:	4611      	mov	r1, r2
 801a576:	461a      	mov	r2, r3
 801a578:	4603      	mov	r3, r0
 801a57a:	70fb      	strb	r3, [r7, #3]
 801a57c:	460b      	mov	r3, r1
 801a57e:	803b      	strh	r3, [r7, #0]
 801a580:	4613      	mov	r3, r2
 801a582:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a584:	2300      	movs	r3, #0
 801a586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	da0f      	bge.n	801a5b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a590:	78fb      	ldrb	r3, [r7, #3]
 801a592:	f003 020f 	and.w	r2, r3, #15
 801a596:	4613      	mov	r3, r2
 801a598:	00db      	lsls	r3, r3, #3
 801a59a:	4413      	add	r3, r2
 801a59c:	009b      	lsls	r3, r3, #2
 801a59e:	3338      	adds	r3, #56	; 0x38
 801a5a0:	687a      	ldr	r2, [r7, #4]
 801a5a2:	4413      	add	r3, r2
 801a5a4:	3304      	adds	r3, #4
 801a5a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	705a      	strb	r2, [r3, #1]
 801a5ae:	e00f      	b.n	801a5d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a5b0:	78fb      	ldrb	r3, [r7, #3]
 801a5b2:	f003 020f 	and.w	r2, r3, #15
 801a5b6:	4613      	mov	r3, r2
 801a5b8:	00db      	lsls	r3, r3, #3
 801a5ba:	4413      	add	r3, r2
 801a5bc:	009b      	lsls	r3, r3, #2
 801a5be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a5c2:	687a      	ldr	r2, [r7, #4]
 801a5c4:	4413      	add	r3, r2
 801a5c6:	3304      	adds	r3, #4
 801a5c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	2200      	movs	r2, #0
 801a5ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a5d0:	78fb      	ldrb	r3, [r7, #3]
 801a5d2:	f003 030f 	and.w	r3, r3, #15
 801a5d6:	b2da      	uxtb	r2, r3
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a5dc:	883a      	ldrh	r2, [r7, #0]
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	78ba      	ldrb	r2, [r7, #2]
 801a5e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	785b      	ldrb	r3, [r3, #1]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d004      	beq.n	801a5fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	781b      	ldrb	r3, [r3, #0]
 801a5f4:	b29a      	uxth	r2, r3
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a5fa:	78bb      	ldrb	r3, [r7, #2]
 801a5fc:	2b02      	cmp	r3, #2
 801a5fe:	d102      	bne.n	801a606 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	2200      	movs	r2, #0
 801a604:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d101      	bne.n	801a614 <HAL_PCD_EP_Open+0xaa>
 801a610:	2302      	movs	r3, #2
 801a612:	e00e      	b.n	801a632 <HAL_PCD_EP_Open+0xc8>
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	2201      	movs	r2, #1
 801a618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	68f9      	ldr	r1, [r7, #12]
 801a622:	4618      	mov	r0, r3
 801a624:	f003 fdca 	bl	801e1bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2200      	movs	r2, #0
 801a62c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801a630:	7afb      	ldrb	r3, [r7, #11]
}
 801a632:	4618      	mov	r0, r3
 801a634:	3710      	adds	r7, #16
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}

0801a63a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a63a:	b580      	push	{r7, lr}
 801a63c:	b084      	sub	sp, #16
 801a63e:	af00      	add	r7, sp, #0
 801a640:	6078      	str	r0, [r7, #4]
 801a642:	460b      	mov	r3, r1
 801a644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	da0f      	bge.n	801a66e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a64e:	78fb      	ldrb	r3, [r7, #3]
 801a650:	f003 020f 	and.w	r2, r3, #15
 801a654:	4613      	mov	r3, r2
 801a656:	00db      	lsls	r3, r3, #3
 801a658:	4413      	add	r3, r2
 801a65a:	009b      	lsls	r3, r3, #2
 801a65c:	3338      	adds	r3, #56	; 0x38
 801a65e:	687a      	ldr	r2, [r7, #4]
 801a660:	4413      	add	r3, r2
 801a662:	3304      	adds	r3, #4
 801a664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	2201      	movs	r2, #1
 801a66a:	705a      	strb	r2, [r3, #1]
 801a66c:	e00f      	b.n	801a68e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a66e:	78fb      	ldrb	r3, [r7, #3]
 801a670:	f003 020f 	and.w	r2, r3, #15
 801a674:	4613      	mov	r3, r2
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	4413      	add	r3, r2
 801a67a:	009b      	lsls	r3, r3, #2
 801a67c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a680:	687a      	ldr	r2, [r7, #4]
 801a682:	4413      	add	r3, r2
 801a684:	3304      	adds	r3, #4
 801a686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	2200      	movs	r2, #0
 801a68c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a68e:	78fb      	ldrb	r3, [r7, #3]
 801a690:	f003 030f 	and.w	r3, r3, #15
 801a694:	b2da      	uxtb	r2, r3
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a6a0:	2b01      	cmp	r3, #1
 801a6a2:	d101      	bne.n	801a6a8 <HAL_PCD_EP_Close+0x6e>
 801a6a4:	2302      	movs	r3, #2
 801a6a6:	e00e      	b.n	801a6c6 <HAL_PCD_EP_Close+0x8c>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	2201      	movs	r2, #1
 801a6ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	68f9      	ldr	r1, [r7, #12]
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f003 fe08 	bl	801e2cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	2200      	movs	r2, #0
 801a6c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801a6c4:	2300      	movs	r3, #0
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3710      	adds	r7, #16
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}

0801a6ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a6ce:	b580      	push	{r7, lr}
 801a6d0:	b086      	sub	sp, #24
 801a6d2:	af00      	add	r7, sp, #0
 801a6d4:	60f8      	str	r0, [r7, #12]
 801a6d6:	607a      	str	r2, [r7, #4]
 801a6d8:	603b      	str	r3, [r7, #0]
 801a6da:	460b      	mov	r3, r1
 801a6dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a6de:	7afb      	ldrb	r3, [r7, #11]
 801a6e0:	f003 020f 	and.w	r2, r3, #15
 801a6e4:	4613      	mov	r3, r2
 801a6e6:	00db      	lsls	r3, r3, #3
 801a6e8:	4413      	add	r3, r2
 801a6ea:	009b      	lsls	r3, r3, #2
 801a6ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a6f0:	68fa      	ldr	r2, [r7, #12]
 801a6f2:	4413      	add	r3, r2
 801a6f4:	3304      	adds	r3, #4
 801a6f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	687a      	ldr	r2, [r7, #4]
 801a6fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	683a      	ldr	r2, [r7, #0]
 801a702:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	2200      	movs	r2, #0
 801a708:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2200      	movs	r2, #0
 801a70e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a710:	7afb      	ldrb	r3, [r7, #11]
 801a712:	f003 030f 	and.w	r3, r3, #15
 801a716:	b2da      	uxtb	r2, r3
 801a718:	697b      	ldr	r3, [r7, #20]
 801a71a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	691b      	ldr	r3, [r3, #16]
 801a720:	2b01      	cmp	r3, #1
 801a722:	d102      	bne.n	801a72a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a72a:	7afb      	ldrb	r3, [r7, #11]
 801a72c:	f003 030f 	and.w	r3, r3, #15
 801a730:	2b00      	cmp	r3, #0
 801a732:	d109      	bne.n	801a748 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	6818      	ldr	r0, [r3, #0]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	691b      	ldr	r3, [r3, #16]
 801a73c:	b2db      	uxtb	r3, r3
 801a73e:	461a      	mov	r2, r3
 801a740:	6979      	ldr	r1, [r7, #20]
 801a742:	f004 f8e7 	bl	801e914 <USB_EP0StartXfer>
 801a746:	e008      	b.n	801a75a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	6818      	ldr	r0, [r3, #0]
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	691b      	ldr	r3, [r3, #16]
 801a750:	b2db      	uxtb	r3, r3
 801a752:	461a      	mov	r2, r3
 801a754:	6979      	ldr	r1, [r7, #20]
 801a756:	f003 fe95 	bl	801e484 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a75a:	2300      	movs	r3, #0
}
 801a75c:	4618      	mov	r0, r3
 801a75e:	3718      	adds	r7, #24
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a764:	b480      	push	{r7}
 801a766:	b083      	sub	sp, #12
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	460b      	mov	r3, r1
 801a76e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a770:	78fb      	ldrb	r3, [r7, #3]
 801a772:	f003 020f 	and.w	r2, r3, #15
 801a776:	6879      	ldr	r1, [r7, #4]
 801a778:	4613      	mov	r3, r2
 801a77a:	00db      	lsls	r3, r3, #3
 801a77c:	4413      	add	r3, r2
 801a77e:	009b      	lsls	r3, r3, #2
 801a780:	440b      	add	r3, r1
 801a782:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801a786:	681b      	ldr	r3, [r3, #0]
}
 801a788:	4618      	mov	r0, r3
 801a78a:	370c      	adds	r7, #12
 801a78c:	46bd      	mov	sp, r7
 801a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a792:	4770      	bx	lr

0801a794 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b086      	sub	sp, #24
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	607a      	str	r2, [r7, #4]
 801a79e:	603b      	str	r3, [r7, #0]
 801a7a0:	460b      	mov	r3, r1
 801a7a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a7a4:	7afb      	ldrb	r3, [r7, #11]
 801a7a6:	f003 020f 	and.w	r2, r3, #15
 801a7aa:	4613      	mov	r3, r2
 801a7ac:	00db      	lsls	r3, r3, #3
 801a7ae:	4413      	add	r3, r2
 801a7b0:	009b      	lsls	r3, r3, #2
 801a7b2:	3338      	adds	r3, #56	; 0x38
 801a7b4:	68fa      	ldr	r2, [r7, #12]
 801a7b6:	4413      	add	r3, r2
 801a7b8:	3304      	adds	r3, #4
 801a7ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	687a      	ldr	r2, [r7, #4]
 801a7c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801a7c2:	697b      	ldr	r3, [r7, #20]
 801a7c4:	683a      	ldr	r2, [r7, #0]
 801a7c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 801a7ce:	697b      	ldr	r3, [r7, #20]
 801a7d0:	2201      	movs	r2, #1
 801a7d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a7d4:	7afb      	ldrb	r3, [r7, #11]
 801a7d6:	f003 030f 	and.w	r3, r3, #15
 801a7da:	b2da      	uxtb	r2, r3
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	691b      	ldr	r3, [r3, #16]
 801a7e4:	2b01      	cmp	r3, #1
 801a7e6:	d102      	bne.n	801a7ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a7e8:	687a      	ldr	r2, [r7, #4]
 801a7ea:	697b      	ldr	r3, [r7, #20]
 801a7ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a7ee:	7afb      	ldrb	r3, [r7, #11]
 801a7f0:	f003 030f 	and.w	r3, r3, #15
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d109      	bne.n	801a80c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	6818      	ldr	r0, [r3, #0]
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	691b      	ldr	r3, [r3, #16]
 801a800:	b2db      	uxtb	r3, r3
 801a802:	461a      	mov	r2, r3
 801a804:	6979      	ldr	r1, [r7, #20]
 801a806:	f004 f885 	bl	801e914 <USB_EP0StartXfer>
 801a80a:	e008      	b.n	801a81e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	6818      	ldr	r0, [r3, #0]
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	691b      	ldr	r3, [r3, #16]
 801a814:	b2db      	uxtb	r3, r3
 801a816:	461a      	mov	r2, r3
 801a818:	6979      	ldr	r1, [r7, #20]
 801a81a:	f003 fe33 	bl	801e484 <USB_EPStartXfer>
  }

  return HAL_OK;
 801a81e:	2300      	movs	r3, #0
}
 801a820:	4618      	mov	r0, r3
 801a822:	3718      	adds	r7, #24
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}

0801a828 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
 801a830:	460b      	mov	r3, r1
 801a832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a834:	78fb      	ldrb	r3, [r7, #3]
 801a836:	f003 020f 	and.w	r2, r3, #15
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	685b      	ldr	r3, [r3, #4]
 801a83e:	429a      	cmp	r2, r3
 801a840:	d901      	bls.n	801a846 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a842:	2301      	movs	r3, #1
 801a844:	e050      	b.n	801a8e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	da0f      	bge.n	801a86e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a84e:	78fb      	ldrb	r3, [r7, #3]
 801a850:	f003 020f 	and.w	r2, r3, #15
 801a854:	4613      	mov	r3, r2
 801a856:	00db      	lsls	r3, r3, #3
 801a858:	4413      	add	r3, r2
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	3338      	adds	r3, #56	; 0x38
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	4413      	add	r3, r2
 801a862:	3304      	adds	r3, #4
 801a864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	2201      	movs	r2, #1
 801a86a:	705a      	strb	r2, [r3, #1]
 801a86c:	e00d      	b.n	801a88a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a86e:	78fa      	ldrb	r2, [r7, #3]
 801a870:	4613      	mov	r3, r2
 801a872:	00db      	lsls	r3, r3, #3
 801a874:	4413      	add	r3, r2
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a87c:	687a      	ldr	r2, [r7, #4]
 801a87e:	4413      	add	r3, r2
 801a880:	3304      	adds	r3, #4
 801a882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	2200      	movs	r2, #0
 801a888:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	2201      	movs	r2, #1
 801a88e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a890:	78fb      	ldrb	r3, [r7, #3]
 801a892:	f003 030f 	and.w	r3, r3, #15
 801a896:	b2da      	uxtb	r2, r3
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a8a2:	2b01      	cmp	r3, #1
 801a8a4:	d101      	bne.n	801a8aa <HAL_PCD_EP_SetStall+0x82>
 801a8a6:	2302      	movs	r3, #2
 801a8a8:	e01e      	b.n	801a8e8 <HAL_PCD_EP_SetStall+0xc0>
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	2201      	movs	r2, #1
 801a8ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	68f9      	ldr	r1, [r7, #12]
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	f004 fac3 	bl	801ee44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a8be:	78fb      	ldrb	r3, [r7, #3]
 801a8c0:	f003 030f 	and.w	r3, r3, #15
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d10a      	bne.n	801a8de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	6818      	ldr	r0, [r3, #0]
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	691b      	ldr	r3, [r3, #16]
 801a8d0:	b2d9      	uxtb	r1, r3
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a8d8:	461a      	mov	r2, r3
 801a8da:	f004 fcb3 	bl	801f244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a8e6:	2300      	movs	r3, #0
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3710      	adds	r7, #16
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b084      	sub	sp, #16
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
 801a8f8:	460b      	mov	r3, r1
 801a8fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a8fc:	78fb      	ldrb	r3, [r7, #3]
 801a8fe:	f003 020f 	and.w	r2, r3, #15
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	685b      	ldr	r3, [r3, #4]
 801a906:	429a      	cmp	r2, r3
 801a908:	d901      	bls.n	801a90e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801a90a:	2301      	movs	r3, #1
 801a90c:	e042      	b.n	801a994 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a90e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a912:	2b00      	cmp	r3, #0
 801a914:	da0f      	bge.n	801a936 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a916:	78fb      	ldrb	r3, [r7, #3]
 801a918:	f003 020f 	and.w	r2, r3, #15
 801a91c:	4613      	mov	r3, r2
 801a91e:	00db      	lsls	r3, r3, #3
 801a920:	4413      	add	r3, r2
 801a922:	009b      	lsls	r3, r3, #2
 801a924:	3338      	adds	r3, #56	; 0x38
 801a926:	687a      	ldr	r2, [r7, #4]
 801a928:	4413      	add	r3, r2
 801a92a:	3304      	adds	r3, #4
 801a92c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	2201      	movs	r2, #1
 801a932:	705a      	strb	r2, [r3, #1]
 801a934:	e00f      	b.n	801a956 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a936:	78fb      	ldrb	r3, [r7, #3]
 801a938:	f003 020f 	and.w	r2, r3, #15
 801a93c:	4613      	mov	r3, r2
 801a93e:	00db      	lsls	r3, r3, #3
 801a940:	4413      	add	r3, r2
 801a942:	009b      	lsls	r3, r3, #2
 801a944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a948:	687a      	ldr	r2, [r7, #4]
 801a94a:	4413      	add	r3, r2
 801a94c:	3304      	adds	r3, #4
 801a94e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	2200      	movs	r2, #0
 801a954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	2200      	movs	r2, #0
 801a95a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a95c:	78fb      	ldrb	r3, [r7, #3]
 801a95e:	f003 030f 	and.w	r3, r3, #15
 801a962:	b2da      	uxtb	r2, r3
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a96e:	2b01      	cmp	r3, #1
 801a970:	d101      	bne.n	801a976 <HAL_PCD_EP_ClrStall+0x86>
 801a972:	2302      	movs	r3, #2
 801a974:	e00e      	b.n	801a994 <HAL_PCD_EP_ClrStall+0xa4>
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2201      	movs	r2, #1
 801a97a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	68f9      	ldr	r1, [r7, #12]
 801a984:	4618      	mov	r0, r3
 801a986:	f004 facb 	bl	801ef20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2200      	movs	r2, #0
 801a98e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a992:	2300      	movs	r3, #0
}
 801a994:	4618      	mov	r0, r3
 801a996:	3710      	adds	r7, #16
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}

0801a99c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b084      	sub	sp, #16
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	460b      	mov	r3, r1
 801a9a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801a9a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	da0c      	bge.n	801a9ca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a9b0:	78fb      	ldrb	r3, [r7, #3]
 801a9b2:	f003 020f 	and.w	r2, r3, #15
 801a9b6:	4613      	mov	r3, r2
 801a9b8:	00db      	lsls	r3, r3, #3
 801a9ba:	4413      	add	r3, r2
 801a9bc:	009b      	lsls	r3, r3, #2
 801a9be:	3338      	adds	r3, #56	; 0x38
 801a9c0:	687a      	ldr	r2, [r7, #4]
 801a9c2:	4413      	add	r3, r2
 801a9c4:	3304      	adds	r3, #4
 801a9c6:	60fb      	str	r3, [r7, #12]
 801a9c8:	e00c      	b.n	801a9e4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a9ca:	78fb      	ldrb	r3, [r7, #3]
 801a9cc:	f003 020f 	and.w	r2, r3, #15
 801a9d0:	4613      	mov	r3, r2
 801a9d2:	00db      	lsls	r3, r3, #3
 801a9d4:	4413      	add	r3, r2
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a9dc:	687a      	ldr	r2, [r7, #4]
 801a9de:	4413      	add	r3, r2
 801a9e0:	3304      	adds	r3, #4
 801a9e2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	68f9      	ldr	r1, [r7, #12]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f004 f8ea 	bl	801ebc4 <USB_EPStopXfer>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	72fb      	strb	r3, [r7, #11]

  return ret;
 801a9f4:	7afb      	ldrb	r3, [r7, #11]
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	3710      	adds	r7, #16
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}

0801a9fe <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9fe:	b580      	push	{r7, lr}
 801aa00:	b082      	sub	sp, #8
 801aa02:	af00      	add	r7, sp, #0
 801aa04:	6078      	str	r0, [r7, #4]
 801aa06:	460b      	mov	r3, r1
 801aa08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801aa10:	2b01      	cmp	r3, #1
 801aa12:	d101      	bne.n	801aa18 <HAL_PCD_EP_Flush+0x1a>
 801aa14:	2302      	movs	r3, #2
 801aa16:	e01b      	b.n	801aa50 <HAL_PCD_EP_Flush+0x52>
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aa20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	da09      	bge.n	801aa3c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681a      	ldr	r2, [r3, #0]
 801aa2c:	78fb      	ldrb	r3, [r7, #3]
 801aa2e:	f003 030f 	and.w	r3, r3, #15
 801aa32:	4619      	mov	r1, r3
 801aa34:	4610      	mov	r0, r2
 801aa36:	f003 fb1f 	bl	801e078 <USB_FlushTxFifo>
 801aa3a:	e004      	b.n	801aa46 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4618      	mov	r0, r3
 801aa42:	f003 fb4d 	bl	801e0e0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	2200      	movs	r2, #0
 801aa4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801aa4e:	2300      	movs	r3, #0
}
 801aa50:	4618      	mov	r0, r3
 801aa52:	3708      	adds	r7, #8
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}

0801aa58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b08a      	sub	sp, #40	; 0x28
 801aa5c:	af02      	add	r7, sp, #8
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801aa6c:	683a      	ldr	r2, [r7, #0]
 801aa6e:	4613      	mov	r3, r2
 801aa70:	00db      	lsls	r3, r3, #3
 801aa72:	4413      	add	r3, r2
 801aa74:	009b      	lsls	r3, r3, #2
 801aa76:	3338      	adds	r3, #56	; 0x38
 801aa78:	687a      	ldr	r2, [r7, #4]
 801aa7a:	4413      	add	r3, r2
 801aa7c:	3304      	adds	r3, #4
 801aa7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	6a1a      	ldr	r2, [r3, #32]
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	699b      	ldr	r3, [r3, #24]
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d901      	bls.n	801aa90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	e06c      	b.n	801ab6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	699a      	ldr	r2, [r3, #24]
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	6a1b      	ldr	r3, [r3, #32]
 801aa98:	1ad3      	subs	r3, r2, r3
 801aa9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	68db      	ldr	r3, [r3, #12]
 801aaa0:	69fa      	ldr	r2, [r7, #28]
 801aaa2:	429a      	cmp	r2, r3
 801aaa4:	d902      	bls.n	801aaac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	68db      	ldr	r3, [r3, #12]
 801aaaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801aaac:	69fb      	ldr	r3, [r7, #28]
 801aaae:	3303      	adds	r3, #3
 801aab0:	089b      	lsrs	r3, r3, #2
 801aab2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801aab4:	e02b      	b.n	801ab0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	699a      	ldr	r2, [r3, #24]
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	6a1b      	ldr	r3, [r3, #32]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	68db      	ldr	r3, [r3, #12]
 801aac6:	69fa      	ldr	r2, [r7, #28]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d902      	bls.n	801aad2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	68db      	ldr	r3, [r3, #12]
 801aad0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801aad2:	69fb      	ldr	r3, [r7, #28]
 801aad4:	3303      	adds	r3, #3
 801aad6:	089b      	lsrs	r3, r3, #2
 801aad8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	6919      	ldr	r1, [r3, #16]
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	b2da      	uxtb	r2, r3
 801aae2:	69fb      	ldr	r3, [r7, #28]
 801aae4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	9300      	str	r3, [sp, #0]
 801aaee:	4603      	mov	r3, r0
 801aaf0:	6978      	ldr	r0, [r7, #20]
 801aaf2:	f004 f911 	bl	801ed18 <USB_WritePacket>

    ep->xfer_buff  += len;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	691a      	ldr	r2, [r3, #16]
 801aafa:	69fb      	ldr	r3, [r7, #28]
 801aafc:	441a      	add	r2, r3
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	6a1a      	ldr	r2, [r3, #32]
 801ab06:	69fb      	ldr	r3, [r7, #28]
 801ab08:	441a      	add	r2, r3
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	015a      	lsls	r2, r3, #5
 801ab12:	693b      	ldr	r3, [r7, #16]
 801ab14:	4413      	add	r3, r2
 801ab16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab1a:	699b      	ldr	r3, [r3, #24]
 801ab1c:	b29b      	uxth	r3, r3
 801ab1e:	69ba      	ldr	r2, [r7, #24]
 801ab20:	429a      	cmp	r2, r3
 801ab22:	d809      	bhi.n	801ab38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	6a1a      	ldr	r2, [r3, #32]
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab2c:	429a      	cmp	r2, r3
 801ab2e:	d203      	bcs.n	801ab38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	699b      	ldr	r3, [r3, #24]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d1be      	bne.n	801aab6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	699a      	ldr	r2, [r3, #24]
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	6a1b      	ldr	r3, [r3, #32]
 801ab40:	429a      	cmp	r2, r3
 801ab42:	d811      	bhi.n	801ab68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ab44:	683b      	ldr	r3, [r7, #0]
 801ab46:	f003 030f 	and.w	r3, r3, #15
 801ab4a:	2201      	movs	r2, #1
 801ab4c:	fa02 f303 	lsl.w	r3, r2, r3
 801ab50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ab52:	693b      	ldr	r3, [r7, #16]
 801ab54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	43db      	mvns	r3, r3
 801ab5e:	6939      	ldr	r1, [r7, #16]
 801ab60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ab64:	4013      	ands	r3, r2
 801ab66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801ab68:	2300      	movs	r3, #0
}
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	3720      	adds	r7, #32
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
	...

0801ab74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b088      	sub	sp, #32
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab84:	69fb      	ldr	r3, [r7, #28]
 801ab86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ab88:	69fb      	ldr	r3, [r7, #28]
 801ab8a:	333c      	adds	r3, #60	; 0x3c
 801ab8c:	3304      	adds	r3, #4
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	015a      	lsls	r2, r3, #5
 801ab96:	69bb      	ldr	r3, [r7, #24]
 801ab98:	4413      	add	r3, r2
 801ab9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ab9e:	689b      	ldr	r3, [r3, #8]
 801aba0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	691b      	ldr	r3, [r3, #16]
 801aba6:	2b01      	cmp	r3, #1
 801aba8:	d17b      	bne.n	801aca2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801abaa:	693b      	ldr	r3, [r7, #16]
 801abac:	f003 0308 	and.w	r3, r3, #8
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d015      	beq.n	801abe0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801abb4:	697b      	ldr	r3, [r7, #20]
 801abb6:	4a61      	ldr	r2, [pc, #388]	; (801ad3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 801abb8:	4293      	cmp	r3, r2
 801abba:	f240 80b9 	bls.w	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801abbe:	693b      	ldr	r3, [r7, #16]
 801abc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	f000 80b3 	beq.w	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801abca:	683b      	ldr	r3, [r7, #0]
 801abcc:	015a      	lsls	r2, r3, #5
 801abce:	69bb      	ldr	r3, [r7, #24]
 801abd0:	4413      	add	r3, r2
 801abd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abd6:	461a      	mov	r2, r3
 801abd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801abdc:	6093      	str	r3, [r2, #8]
 801abde:	e0a7      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801abe0:	693b      	ldr	r3, [r7, #16]
 801abe2:	f003 0320 	and.w	r3, r3, #32
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d009      	beq.n	801abfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	015a      	lsls	r2, r3, #5
 801abee:	69bb      	ldr	r3, [r7, #24]
 801abf0:	4413      	add	r3, r2
 801abf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abf6:	461a      	mov	r2, r3
 801abf8:	2320      	movs	r3, #32
 801abfa:	6093      	str	r3, [r2, #8]
 801abfc:	e098      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801abfe:	693b      	ldr	r3, [r7, #16]
 801ac00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	f040 8093 	bne.w	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac0a:	697b      	ldr	r3, [r7, #20]
 801ac0c:	4a4b      	ldr	r2, [pc, #300]	; (801ad3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d90f      	bls.n	801ac32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d00a      	beq.n	801ac32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac1c:	683b      	ldr	r3, [r7, #0]
 801ac1e:	015a      	lsls	r2, r3, #5
 801ac20:	69bb      	ldr	r3, [r7, #24]
 801ac22:	4413      	add	r3, r2
 801ac24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac28:	461a      	mov	r2, r3
 801ac2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac2e:	6093      	str	r3, [r2, #8]
 801ac30:	e07e      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801ac32:	683a      	ldr	r2, [r7, #0]
 801ac34:	4613      	mov	r3, r2
 801ac36:	00db      	lsls	r3, r3, #3
 801ac38:	4413      	add	r3, r2
 801ac3a:	009b      	lsls	r3, r3, #2
 801ac3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801ac40:	687a      	ldr	r2, [r7, #4]
 801ac42:	4413      	add	r3, r2
 801ac44:	3304      	adds	r3, #4
 801ac46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	69da      	ldr	r2, [r3, #28]
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	0159      	lsls	r1, r3, #5
 801ac50:	69bb      	ldr	r3, [r7, #24]
 801ac52:	440b      	add	r3, r1
 801ac54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac58:	691b      	ldr	r3, [r3, #16]
 801ac5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac5e:	1ad2      	subs	r2, r2, r3
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d114      	bne.n	801ac94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	699b      	ldr	r3, [r3, #24]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d109      	bne.n	801ac86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	6818      	ldr	r0, [r3, #0]
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	2101      	movs	r1, #1
 801ac80:	f004 fae0 	bl	801f244 <USB_EP0_OutStart>
 801ac84:	e006      	b.n	801ac94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	691a      	ldr	r2, [r3, #16]
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	6a1b      	ldr	r3, [r3, #32]
 801ac8e:	441a      	add	r2, r3
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ac94:	683b      	ldr	r3, [r7, #0]
 801ac96:	b2db      	uxtb	r3, r3
 801ac98:	4619      	mov	r1, r3
 801ac9a:	6878      	ldr	r0, [r7, #4]
 801ac9c:	f00b f85e 	bl	8025d5c <HAL_PCD_DataOutStageCallback>
 801aca0:	e046      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	4a26      	ldr	r2, [pc, #152]	; (801ad40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801aca6:	4293      	cmp	r3, r2
 801aca8:	d124      	bne.n	801acf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801acaa:	693b      	ldr	r3, [r7, #16]
 801acac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d00a      	beq.n	801acca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	015a      	lsls	r2, r3, #5
 801acb8:	69bb      	ldr	r3, [r7, #24]
 801acba:	4413      	add	r3, r2
 801acbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801acc0:	461a      	mov	r2, r3
 801acc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801acc6:	6093      	str	r3, [r2, #8]
 801acc8:	e032      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801acca:	693b      	ldr	r3, [r7, #16]
 801accc:	f003 0320 	and.w	r3, r3, #32
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d008      	beq.n	801ace6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	015a      	lsls	r2, r3, #5
 801acd8:	69bb      	ldr	r3, [r7, #24]
 801acda:	4413      	add	r3, r2
 801acdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ace0:	461a      	mov	r2, r3
 801ace2:	2320      	movs	r3, #32
 801ace4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	b2db      	uxtb	r3, r3
 801acea:	4619      	mov	r1, r3
 801acec:	6878      	ldr	r0, [r7, #4]
 801acee:	f00b f835 	bl	8025d5c <HAL_PCD_DataOutStageCallback>
 801acf2:	e01d      	b.n	801ad30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d114      	bne.n	801ad24 <PCD_EP_OutXfrComplete_int+0x1b0>
 801acfa:	6879      	ldr	r1, [r7, #4]
 801acfc:	683a      	ldr	r2, [r7, #0]
 801acfe:	4613      	mov	r3, r2
 801ad00:	00db      	lsls	r3, r3, #3
 801ad02:	4413      	add	r3, r2
 801ad04:	009b      	lsls	r3, r3, #2
 801ad06:	440b      	add	r3, r1
 801ad08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d108      	bne.n	801ad24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	6818      	ldr	r0, [r3, #0]
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ad1c:	461a      	mov	r2, r3
 801ad1e:	2100      	movs	r1, #0
 801ad20:	f004 fa90 	bl	801f244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	b2db      	uxtb	r3, r3
 801ad28:	4619      	mov	r1, r3
 801ad2a:	6878      	ldr	r0, [r7, #4]
 801ad2c:	f00b f816 	bl	8025d5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ad30:	2300      	movs	r3, #0
}
 801ad32:	4618      	mov	r0, r3
 801ad34:	3720      	adds	r7, #32
 801ad36:	46bd      	mov	sp, r7
 801ad38:	bd80      	pop	{r7, pc}
 801ad3a:	bf00      	nop
 801ad3c:	4f54300a 	.word	0x4f54300a
 801ad40:	4f54310a 	.word	0x4f54310a

0801ad44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b086      	sub	sp, #24
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad54:	697b      	ldr	r3, [r7, #20]
 801ad56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	333c      	adds	r3, #60	; 0x3c
 801ad5c:	3304      	adds	r3, #4
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	015a      	lsls	r2, r3, #5
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	4413      	add	r3, r2
 801ad6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad6e:	689b      	ldr	r3, [r3, #8]
 801ad70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	4a15      	ldr	r2, [pc, #84]	; (801adcc <PCD_EP_OutSetupPacket_int+0x88>)
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d90e      	bls.n	801ad98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d009      	beq.n	801ad98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	015a      	lsls	r2, r3, #5
 801ad88:	693b      	ldr	r3, [r7, #16]
 801ad8a:	4413      	add	r3, r2
 801ad8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad90:	461a      	mov	r2, r3
 801ad92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ad98:	6878      	ldr	r0, [r7, #4]
 801ad9a:	f00a ffcd 	bl	8025d38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	4a0a      	ldr	r2, [pc, #40]	; (801adcc <PCD_EP_OutSetupPacket_int+0x88>)
 801ada2:	4293      	cmp	r3, r2
 801ada4:	d90c      	bls.n	801adc0 <PCD_EP_OutSetupPacket_int+0x7c>
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	691b      	ldr	r3, [r3, #16]
 801adaa:	2b01      	cmp	r3, #1
 801adac:	d108      	bne.n	801adc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	6818      	ldr	r0, [r3, #0]
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801adb8:	461a      	mov	r2, r3
 801adba:	2101      	movs	r1, #1
 801adbc:	f004 fa42 	bl	801f244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801adc0:	2300      	movs	r3, #0
}
 801adc2:	4618      	mov	r0, r3
 801adc4:	3718      	adds	r7, #24
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd80      	pop	{r7, pc}
 801adca:	bf00      	nop
 801adcc:	4f54300a 	.word	0x4f54300a

0801add0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801add0:	b480      	push	{r7}
 801add2:	b085      	sub	sp, #20
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	460b      	mov	r3, r1
 801adda:	70fb      	strb	r3, [r7, #3]
 801addc:	4613      	mov	r3, r2
 801adde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ade6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801ade8:	78fb      	ldrb	r3, [r7, #3]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d107      	bne.n	801adfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801adee:	883b      	ldrh	r3, [r7, #0]
 801adf0:	0419      	lsls	r1, r3, #16
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	68ba      	ldr	r2, [r7, #8]
 801adf8:	430a      	orrs	r2, r1
 801adfa:	629a      	str	r2, [r3, #40]	; 0x28
 801adfc:	e028      	b.n	801ae50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae04:	0c1b      	lsrs	r3, r3, #16
 801ae06:	68ba      	ldr	r2, [r7, #8]
 801ae08:	4413      	add	r3, r2
 801ae0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	73fb      	strb	r3, [r7, #15]
 801ae10:	e00d      	b.n	801ae2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681a      	ldr	r2, [r3, #0]
 801ae16:	7bfb      	ldrb	r3, [r7, #15]
 801ae18:	3340      	adds	r3, #64	; 0x40
 801ae1a:	009b      	lsls	r3, r3, #2
 801ae1c:	4413      	add	r3, r2
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	0c1b      	lsrs	r3, r3, #16
 801ae22:	68ba      	ldr	r2, [r7, #8]
 801ae24:	4413      	add	r3, r2
 801ae26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae28:	7bfb      	ldrb	r3, [r7, #15]
 801ae2a:	3301      	adds	r3, #1
 801ae2c:	73fb      	strb	r3, [r7, #15]
 801ae2e:	7bfa      	ldrb	r2, [r7, #15]
 801ae30:	78fb      	ldrb	r3, [r7, #3]
 801ae32:	3b01      	subs	r3, #1
 801ae34:	429a      	cmp	r2, r3
 801ae36:	d3ec      	bcc.n	801ae12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801ae38:	883b      	ldrh	r3, [r7, #0]
 801ae3a:	0418      	lsls	r0, r3, #16
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	6819      	ldr	r1, [r3, #0]
 801ae40:	78fb      	ldrb	r3, [r7, #3]
 801ae42:	3b01      	subs	r3, #1
 801ae44:	68ba      	ldr	r2, [r7, #8]
 801ae46:	4302      	orrs	r2, r0
 801ae48:	3340      	adds	r3, #64	; 0x40
 801ae4a:	009b      	lsls	r3, r3, #2
 801ae4c:	440b      	add	r3, r1
 801ae4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801ae50:	2300      	movs	r3, #0
}
 801ae52:	4618      	mov	r0, r3
 801ae54:	3714      	adds	r7, #20
 801ae56:	46bd      	mov	sp, r7
 801ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5c:	4770      	bx	lr

0801ae5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801ae5e:	b480      	push	{r7}
 801ae60:	b083      	sub	sp, #12
 801ae62:	af00      	add	r7, sp, #0
 801ae64:	6078      	str	r0, [r7, #4]
 801ae66:	460b      	mov	r3, r1
 801ae68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	887a      	ldrh	r2, [r7, #2]
 801ae70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801ae72:	2300      	movs	r3, #0
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	370c      	adds	r7, #12
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7e:	4770      	bx	lr

0801ae80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801ae80:	b480      	push	{r7}
 801ae82:	b085      	sub	sp, #20
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2201      	movs	r2, #1
 801ae92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2200      	movs	r2, #0
 801ae9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	699b      	ldr	r3, [r3, #24]
 801aea2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aeae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aeb2:	f043 0303 	orr.w	r3, r3, #3
 801aeb6:	68fa      	ldr	r2, [r7, #12]
 801aeb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801aeba:	2300      	movs	r3, #0
}
 801aebc:	4618      	mov	r0, r3
 801aebe:	3714      	adds	r7, #20
 801aec0:	46bd      	mov	sp, r7
 801aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec6:	4770      	bx	lr

0801aec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b082      	sub	sp, #8
 801aecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801aece:	2300      	movs	r3, #0
 801aed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801aed2:	2300      	movs	r3, #0
 801aed4:	603b      	str	r3, [r7, #0]
 801aed6:	4b20      	ldr	r3, [pc, #128]	; (801af58 <HAL_PWREx_EnableOverDrive+0x90>)
 801aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aeda:	4a1f      	ldr	r2, [pc, #124]	; (801af58 <HAL_PWREx_EnableOverDrive+0x90>)
 801aedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aee0:	6413      	str	r3, [r2, #64]	; 0x40
 801aee2:	4b1d      	ldr	r3, [pc, #116]	; (801af58 <HAL_PWREx_EnableOverDrive+0x90>)
 801aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801aeea:	603b      	str	r3, [r7, #0]
 801aeec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801aeee:	4b1b      	ldr	r3, [pc, #108]	; (801af5c <HAL_PWREx_EnableOverDrive+0x94>)
 801aef0:	2201      	movs	r2, #1
 801aef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801aef4:	f7fd f8ee 	bl	80180d4 <HAL_GetTick>
 801aef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801aefa:	e009      	b.n	801af10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801aefc:	f7fd f8ea 	bl	80180d4 <HAL_GetTick>
 801af00:	4602      	mov	r2, r0
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	1ad3      	subs	r3, r2, r3
 801af06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af0a:	d901      	bls.n	801af10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801af0c:	2303      	movs	r3, #3
 801af0e:	e01f      	b.n	801af50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801af10:	4b13      	ldr	r3, [pc, #76]	; (801af60 <HAL_PWREx_EnableOverDrive+0x98>)
 801af12:	685b      	ldr	r3, [r3, #4]
 801af14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801af18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af1c:	d1ee      	bne.n	801aefc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801af1e:	4b11      	ldr	r3, [pc, #68]	; (801af64 <HAL_PWREx_EnableOverDrive+0x9c>)
 801af20:	2201      	movs	r2, #1
 801af22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801af24:	f7fd f8d6 	bl	80180d4 <HAL_GetTick>
 801af28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af2a:	e009      	b.n	801af40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801af2c:	f7fd f8d2 	bl	80180d4 <HAL_GetTick>
 801af30:	4602      	mov	r2, r0
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	1ad3      	subs	r3, r2, r3
 801af36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af3a:	d901      	bls.n	801af40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801af3c:	2303      	movs	r3, #3
 801af3e:	e007      	b.n	801af50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af40:	4b07      	ldr	r3, [pc, #28]	; (801af60 <HAL_PWREx_EnableOverDrive+0x98>)
 801af42:	685b      	ldr	r3, [r3, #4]
 801af44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801af4c:	d1ee      	bne.n	801af2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801af4e:	2300      	movs	r3, #0
}
 801af50:	4618      	mov	r0, r3
 801af52:	3708      	adds	r7, #8
 801af54:	46bd      	mov	sp, r7
 801af56:	bd80      	pop	{r7, pc}
 801af58:	40023800 	.word	0x40023800
 801af5c:	420e0040 	.word	0x420e0040
 801af60:	40007000 	.word	0x40007000
 801af64:	420e0044 	.word	0x420e0044

0801af68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b084      	sub	sp, #16
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d101      	bne.n	801af7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801af78:	2301      	movs	r3, #1
 801af7a:	e0cc      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801af7c:	4b68      	ldr	r3, [pc, #416]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	f003 030f 	and.w	r3, r3, #15
 801af84:	683a      	ldr	r2, [r7, #0]
 801af86:	429a      	cmp	r2, r3
 801af88:	d90c      	bls.n	801afa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801af8a:	4b65      	ldr	r3, [pc, #404]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801af8c:	683a      	ldr	r2, [r7, #0]
 801af8e:	b2d2      	uxtb	r2, r2
 801af90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801af92:	4b63      	ldr	r3, [pc, #396]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	f003 030f 	and.w	r3, r3, #15
 801af9a:	683a      	ldr	r2, [r7, #0]
 801af9c:	429a      	cmp	r2, r3
 801af9e:	d001      	beq.n	801afa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801afa0:	2301      	movs	r3, #1
 801afa2:	e0b8      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	f003 0302 	and.w	r3, r3, #2
 801afac:	2b00      	cmp	r3, #0
 801afae:	d020      	beq.n	801aff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	f003 0304 	and.w	r3, r3, #4
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d005      	beq.n	801afc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801afbc:	4b59      	ldr	r3, [pc, #356]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afbe:	689b      	ldr	r3, [r3, #8]
 801afc0:	4a58      	ldr	r2, [pc, #352]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801afc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	f003 0308 	and.w	r3, r3, #8
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d005      	beq.n	801afe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801afd4:	4b53      	ldr	r3, [pc, #332]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afd6:	689b      	ldr	r3, [r3, #8]
 801afd8:	4a52      	ldr	r2, [pc, #328]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801afde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801afe0:	4b50      	ldr	r3, [pc, #320]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afe2:	689b      	ldr	r3, [r3, #8]
 801afe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	689b      	ldr	r3, [r3, #8]
 801afec:	494d      	ldr	r1, [pc, #308]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801afee:	4313      	orrs	r3, r2
 801aff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	f003 0301 	and.w	r3, r3, #1
 801affa:	2b00      	cmp	r3, #0
 801affc:	d044      	beq.n	801b088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	2b01      	cmp	r3, #1
 801b004:	d107      	bne.n	801b016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b006:	4b47      	ldr	r3, [pc, #284]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d119      	bne.n	801b046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b012:	2301      	movs	r3, #1
 801b014:	e07f      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	685b      	ldr	r3, [r3, #4]
 801b01a:	2b02      	cmp	r3, #2
 801b01c:	d003      	beq.n	801b026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b022:	2b03      	cmp	r3, #3
 801b024:	d107      	bne.n	801b036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b026:	4b3f      	ldr	r3, [pc, #252]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d109      	bne.n	801b046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b032:	2301      	movs	r3, #1
 801b034:	e06f      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b036:	4b3b      	ldr	r3, [pc, #236]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	f003 0302 	and.w	r3, r3, #2
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d101      	bne.n	801b046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b042:	2301      	movs	r3, #1
 801b044:	e067      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b046:	4b37      	ldr	r3, [pc, #220]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b048:	689b      	ldr	r3, [r3, #8]
 801b04a:	f023 0203 	bic.w	r2, r3, #3
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	4934      	ldr	r1, [pc, #208]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b054:	4313      	orrs	r3, r2
 801b056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b058:	f7fd f83c 	bl	80180d4 <HAL_GetTick>
 801b05c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b05e:	e00a      	b.n	801b076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b060:	f7fd f838 	bl	80180d4 <HAL_GetTick>
 801b064:	4602      	mov	r2, r0
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	1ad3      	subs	r3, r2, r3
 801b06a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b06e:	4293      	cmp	r3, r2
 801b070:	d901      	bls.n	801b076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b072:	2303      	movs	r3, #3
 801b074:	e04f      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b076:	4b2b      	ldr	r3, [pc, #172]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b078:	689b      	ldr	r3, [r3, #8]
 801b07a:	f003 020c 	and.w	r2, r3, #12
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	685b      	ldr	r3, [r3, #4]
 801b082:	009b      	lsls	r3, r3, #2
 801b084:	429a      	cmp	r2, r3
 801b086:	d1eb      	bne.n	801b060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b088:	4b25      	ldr	r3, [pc, #148]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	f003 030f 	and.w	r3, r3, #15
 801b090:	683a      	ldr	r2, [r7, #0]
 801b092:	429a      	cmp	r2, r3
 801b094:	d20c      	bcs.n	801b0b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b096:	4b22      	ldr	r3, [pc, #136]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801b098:	683a      	ldr	r2, [r7, #0]
 801b09a:	b2d2      	uxtb	r2, r2
 801b09c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b09e:	4b20      	ldr	r3, [pc, #128]	; (801b120 <HAL_RCC_ClockConfig+0x1b8>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	f003 030f 	and.w	r3, r3, #15
 801b0a6:	683a      	ldr	r2, [r7, #0]
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	d001      	beq.n	801b0b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	e032      	b.n	801b116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	f003 0304 	and.w	r3, r3, #4
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d008      	beq.n	801b0ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b0bc:	4b19      	ldr	r3, [pc, #100]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b0be:	689b      	ldr	r3, [r3, #8]
 801b0c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	68db      	ldr	r3, [r3, #12]
 801b0c8:	4916      	ldr	r1, [pc, #88]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ca:	4313      	orrs	r3, r2
 801b0cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	f003 0308 	and.w	r3, r3, #8
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d009      	beq.n	801b0ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b0da:	4b12      	ldr	r3, [pc, #72]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b0dc:	689b      	ldr	r3, [r3, #8]
 801b0de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	691b      	ldr	r3, [r3, #16]
 801b0e6:	00db      	lsls	r3, r3, #3
 801b0e8:	490e      	ldr	r1, [pc, #56]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b0ea:	4313      	orrs	r3, r2
 801b0ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b0ee:	f000 fb57 	bl	801b7a0 <HAL_RCC_GetSysClockFreq>
 801b0f2:	4602      	mov	r2, r0
 801b0f4:	4b0b      	ldr	r3, [pc, #44]	; (801b124 <HAL_RCC_ClockConfig+0x1bc>)
 801b0f6:	689b      	ldr	r3, [r3, #8]
 801b0f8:	091b      	lsrs	r3, r3, #4
 801b0fa:	f003 030f 	and.w	r3, r3, #15
 801b0fe:	490a      	ldr	r1, [pc, #40]	; (801b128 <HAL_RCC_ClockConfig+0x1c0>)
 801b100:	5ccb      	ldrb	r3, [r1, r3]
 801b102:	fa22 f303 	lsr.w	r3, r2, r3
 801b106:	4a09      	ldr	r2, [pc, #36]	; (801b12c <HAL_RCC_ClockConfig+0x1c4>)
 801b108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b10a:	4b09      	ldr	r3, [pc, #36]	; (801b130 <HAL_RCC_ClockConfig+0x1c8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	4618      	mov	r0, r3
 801b110:	f7fc ff9c 	bl	801804c <HAL_InitTick>

  return HAL_OK;
 801b114:	2300      	movs	r3, #0
}
 801b116:	4618      	mov	r0, r3
 801b118:	3710      	adds	r7, #16
 801b11a:	46bd      	mov	sp, r7
 801b11c:	bd80      	pop	{r7, pc}
 801b11e:	bf00      	nop
 801b120:	40023c00 	.word	0x40023c00
 801b124:	40023800 	.word	0x40023800
 801b128:	080023ec 	.word	0x080023ec
 801b12c:	20000564 	.word	0x20000564
 801b130:	20000568 	.word	0x20000568

0801b134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b134:	b480      	push	{r7}
 801b136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b138:	4b03      	ldr	r3, [pc, #12]	; (801b148 <HAL_RCC_GetHCLKFreq+0x14>)
 801b13a:	681b      	ldr	r3, [r3, #0]
}
 801b13c:	4618      	mov	r0, r3
 801b13e:	46bd      	mov	sp, r7
 801b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b144:	4770      	bx	lr
 801b146:	bf00      	nop
 801b148:	20000564 	.word	0x20000564

0801b14c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b08c      	sub	sp, #48	; 0x30
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b154:	2300      	movs	r3, #0
 801b156:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b158:	2300      	movs	r3, #0
 801b15a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b15c:	2300      	movs	r3, #0
 801b15e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b160:	2300      	movs	r3, #0
 801b162:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b164:	2300      	movs	r3, #0
 801b166:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b168:	2300      	movs	r3, #0
 801b16a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b16c:	2300      	movs	r3, #0
 801b16e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b170:	2300      	movs	r3, #0
 801b172:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b174:	2300      	movs	r3, #0
 801b176:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	f003 0301 	and.w	r3, r3, #1
 801b180:	2b00      	cmp	r3, #0
 801b182:	d010      	beq.n	801b1a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b184:	4b6f      	ldr	r3, [pc, #444]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b18a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b192:	496c      	ldr	r1, [pc, #432]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b194:	4313      	orrs	r3, r2
 801b196:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d101      	bne.n	801b1a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b1a2:	2301      	movs	r3, #1
 801b1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	f003 0302 	and.w	r3, r3, #2
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d010      	beq.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b1b2:	4b64      	ldr	r3, [pc, #400]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b1b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1c0:	4960      	ldr	r1, [pc, #384]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1c2:	4313      	orrs	r3, r2
 801b1c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d101      	bne.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	f003 0304 	and.w	r3, r3, #4
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d017      	beq.n	801b210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b1e0:	4b58      	ldr	r3, [pc, #352]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b1e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1ee:	4955      	ldr	r1, [pc, #340]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1f0:	4313      	orrs	r3, r2
 801b1f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b1fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b1fe:	d101      	bne.n	801b204 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b200:	2301      	movs	r3, #1
 801b202:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d101      	bne.n	801b210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b20c:	2301      	movs	r3, #1
 801b20e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	f003 0308 	and.w	r3, r3, #8
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d017      	beq.n	801b24c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b21c:	4b49      	ldr	r3, [pc, #292]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b21e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b22a:	4946      	ldr	r1, [pc, #280]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b22c:	4313      	orrs	r3, r2
 801b22e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b23a:	d101      	bne.n	801b240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b23c:	2301      	movs	r3, #1
 801b23e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b244:	2b00      	cmp	r3, #0
 801b246:	d101      	bne.n	801b24c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b248:	2301      	movs	r3, #1
 801b24a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f003 0320 	and.w	r3, r3, #32
 801b254:	2b00      	cmp	r3, #0
 801b256:	f000 808a 	beq.w	801b36e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b25a:	2300      	movs	r3, #0
 801b25c:	60bb      	str	r3, [r7, #8]
 801b25e:	4b39      	ldr	r3, [pc, #228]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b262:	4a38      	ldr	r2, [pc, #224]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b268:	6413      	str	r3, [r2, #64]	; 0x40
 801b26a:	4b36      	ldr	r3, [pc, #216]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b26e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b272:	60bb      	str	r3, [r7, #8]
 801b274:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b276:	4b34      	ldr	r3, [pc, #208]	; (801b348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	4a33      	ldr	r2, [pc, #204]	; (801b348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b280:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b282:	f7fc ff27 	bl	80180d4 <HAL_GetTick>
 801b286:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b288:	e008      	b.n	801b29c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b28a:	f7fc ff23 	bl	80180d4 <HAL_GetTick>
 801b28e:	4602      	mov	r2, r0
 801b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b292:	1ad3      	subs	r3, r2, r3
 801b294:	2b02      	cmp	r3, #2
 801b296:	d901      	bls.n	801b29c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b298:	2303      	movs	r3, #3
 801b29a:	e278      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b29c:	4b2a      	ldr	r3, [pc, #168]	; (801b348 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d0f0      	beq.n	801b28a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b2a8:	4b26      	ldr	r3, [pc, #152]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b2b2:	6a3b      	ldr	r3, [r7, #32]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d02f      	beq.n	801b318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2c0:	6a3a      	ldr	r2, [r7, #32]
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d028      	beq.n	801b318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b2c6:	4b1f      	ldr	r3, [pc, #124]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b2ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b2d0:	4b1e      	ldr	r3, [pc, #120]	; (801b34c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b2d6:	4b1d      	ldr	r3, [pc, #116]	; (801b34c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b2d8:	2200      	movs	r2, #0
 801b2da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b2dc:	4a19      	ldr	r2, [pc, #100]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2de:	6a3b      	ldr	r3, [r7, #32]
 801b2e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b2e2:	4b18      	ldr	r3, [pc, #96]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2e6:	f003 0301 	and.w	r3, r3, #1
 801b2ea:	2b01      	cmp	r3, #1
 801b2ec:	d114      	bne.n	801b318 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b2ee:	f7fc fef1 	bl	80180d4 <HAL_GetTick>
 801b2f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b2f4:	e00a      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b2f6:	f7fc feed 	bl	80180d4 <HAL_GetTick>
 801b2fa:	4602      	mov	r2, r0
 801b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2fe:	1ad3      	subs	r3, r2, r3
 801b300:	f241 3288 	movw	r2, #5000	; 0x1388
 801b304:	4293      	cmp	r3, r2
 801b306:	d901      	bls.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b308:	2303      	movs	r3, #3
 801b30a:	e240      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b30c:	4b0d      	ldr	r3, [pc, #52]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b310:	f003 0302 	and.w	r3, r3, #2
 801b314:	2b00      	cmp	r3, #0
 801b316:	d0ee      	beq.n	801b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b31c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b324:	d114      	bne.n	801b350 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b326:	4b07      	ldr	r3, [pc, #28]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b328:	689b      	ldr	r3, [r3, #8]
 801b32a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b332:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b33a:	4902      	ldr	r1, [pc, #8]	; (801b344 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b33c:	4313      	orrs	r3, r2
 801b33e:	608b      	str	r3, [r1, #8]
 801b340:	e00c      	b.n	801b35c <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b342:	bf00      	nop
 801b344:	40023800 	.word	0x40023800
 801b348:	40007000 	.word	0x40007000
 801b34c:	42470e40 	.word	0x42470e40
 801b350:	4b4a      	ldr	r3, [pc, #296]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b352:	689b      	ldr	r3, [r3, #8]
 801b354:	4a49      	ldr	r2, [pc, #292]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b356:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b35a:	6093      	str	r3, [r2, #8]
 801b35c:	4b47      	ldr	r3, [pc, #284]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b35e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b368:	4944      	ldr	r1, [pc, #272]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b36a:	4313      	orrs	r3, r2
 801b36c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f003 0310 	and.w	r3, r3, #16
 801b376:	2b00      	cmp	r3, #0
 801b378:	d004      	beq.n	801b384 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b380:	4b3f      	ldr	r3, [pc, #252]	; (801b480 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b382:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d00a      	beq.n	801b3a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b390:	4b3a      	ldr	r3, [pc, #232]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b39e:	4937      	ldr	r1, [pc, #220]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3a0:	4313      	orrs	r3, r2
 801b3a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d00a      	beq.n	801b3c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b3b2:	4b32      	ldr	r3, [pc, #200]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3c0:	492e      	ldr	r1, [pc, #184]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3c2:	4313      	orrs	r3, r2
 801b3c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d011      	beq.n	801b3f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b3d4:	4b29      	ldr	r3, [pc, #164]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3e2:	4926      	ldr	r1, [pc, #152]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3e4:	4313      	orrs	r3, r2
 801b3e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b3f2:	d101      	bne.n	801b3f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b3f4:	2301      	movs	r3, #1
 801b3f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b400:	2b00      	cmp	r3, #0
 801b402:	d00a      	beq.n	801b41a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b404:	4b1d      	ldr	r3, [pc, #116]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b40a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b412:	491a      	ldr	r1, [pc, #104]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b414:	4313      	orrs	r3, r2
 801b416:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b422:	2b00      	cmp	r3, #0
 801b424:	d011      	beq.n	801b44a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b426:	4b15      	ldr	r3, [pc, #84]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b42c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b434:	4911      	ldr	r1, [pc, #68]	; (801b47c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b436:	4313      	orrs	r3, r2
 801b438:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b444:	d101      	bne.n	801b44a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b446:	2301      	movs	r3, #1
 801b448:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b44c:	2b01      	cmp	r3, #1
 801b44e:	d005      	beq.n	801b45c <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b458:	f040 80ff 	bne.w	801b65a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b45c:	4b09      	ldr	r3, [pc, #36]	; (801b484 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b45e:	2200      	movs	r2, #0
 801b460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b462:	f7fc fe37 	bl	80180d4 <HAL_GetTick>
 801b466:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b468:	e00e      	b.n	801b488 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b46a:	f7fc fe33 	bl	80180d4 <HAL_GetTick>
 801b46e:	4602      	mov	r2, r0
 801b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	2b02      	cmp	r3, #2
 801b476:	d907      	bls.n	801b488 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b478:	2303      	movs	r3, #3
 801b47a:	e188      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b47c:	40023800 	.word	0x40023800
 801b480:	424711e0 	.word	0x424711e0
 801b484:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b488:	4b7e      	ldr	r3, [pc, #504]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b490:	2b00      	cmp	r3, #0
 801b492:	d1ea      	bne.n	801b46a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	f003 0301 	and.w	r3, r3, #1
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d003      	beq.n	801b4a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d009      	beq.n	801b4bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d028      	beq.n	801b506 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d124      	bne.n	801b506 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b4bc:	4b71      	ldr	r3, [pc, #452]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b4c2:	0c1b      	lsrs	r3, r3, #16
 801b4c4:	f003 0303 	and.w	r3, r3, #3
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	005b      	lsls	r3, r3, #1
 801b4cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b4ce:	4b6d      	ldr	r3, [pc, #436]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b4d4:	0e1b      	lsrs	r3, r3, #24
 801b4d6:	f003 030f 	and.w	r3, r3, #15
 801b4da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	685a      	ldr	r2, [r3, #4]
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	689b      	ldr	r3, [r3, #8]
 801b4e4:	019b      	lsls	r3, r3, #6
 801b4e6:	431a      	orrs	r2, r3
 801b4e8:	69fb      	ldr	r3, [r7, #28]
 801b4ea:	085b      	lsrs	r3, r3, #1
 801b4ec:	3b01      	subs	r3, #1
 801b4ee:	041b      	lsls	r3, r3, #16
 801b4f0:	431a      	orrs	r2, r3
 801b4f2:	69bb      	ldr	r3, [r7, #24]
 801b4f4:	061b      	lsls	r3, r3, #24
 801b4f6:	431a      	orrs	r2, r3
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	695b      	ldr	r3, [r3, #20]
 801b4fc:	071b      	lsls	r3, r3, #28
 801b4fe:	4961      	ldr	r1, [pc, #388]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b500:	4313      	orrs	r3, r2
 801b502:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f003 0304 	and.w	r3, r3, #4
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d004      	beq.n	801b51c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b51a:	d00a      	beq.n	801b532 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b524:	2b00      	cmp	r3, #0
 801b526:	d035      	beq.n	801b594 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b52c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b530:	d130      	bne.n	801b594 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b532:	4b54      	ldr	r3, [pc, #336]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b538:	0c1b      	lsrs	r3, r3, #16
 801b53a:	f003 0303 	and.w	r3, r3, #3
 801b53e:	3301      	adds	r3, #1
 801b540:	005b      	lsls	r3, r3, #1
 801b542:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b544:	4b4f      	ldr	r3, [pc, #316]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b54a:	0f1b      	lsrs	r3, r3, #28
 801b54c:	f003 0307 	and.w	r3, r3, #7
 801b550:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	685a      	ldr	r2, [r3, #4]
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	689b      	ldr	r3, [r3, #8]
 801b55a:	019b      	lsls	r3, r3, #6
 801b55c:	431a      	orrs	r2, r3
 801b55e:	69fb      	ldr	r3, [r7, #28]
 801b560:	085b      	lsrs	r3, r3, #1
 801b562:	3b01      	subs	r3, #1
 801b564:	041b      	lsls	r3, r3, #16
 801b566:	431a      	orrs	r2, r3
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	691b      	ldr	r3, [r3, #16]
 801b56c:	061b      	lsls	r3, r3, #24
 801b56e:	431a      	orrs	r2, r3
 801b570:	697b      	ldr	r3, [r7, #20]
 801b572:	071b      	lsls	r3, r3, #28
 801b574:	4943      	ldr	r1, [pc, #268]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b576:	4313      	orrs	r3, r2
 801b578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b57c:	4b41      	ldr	r3, [pc, #260]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b57e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b582:	f023 021f 	bic.w	r2, r3, #31
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b58a:	3b01      	subs	r3, #1
 801b58c:	493d      	ldr	r1, [pc, #244]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b58e:	4313      	orrs	r3, r2
 801b590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d029      	beq.n	801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b5a8:	d124      	bne.n	801b5f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5aa:	4b36      	ldr	r3, [pc, #216]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5b0:	0c1b      	lsrs	r3, r3, #16
 801b5b2:	f003 0303 	and.w	r3, r3, #3
 801b5b6:	3301      	adds	r3, #1
 801b5b8:	005b      	lsls	r3, r3, #1
 801b5ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b5bc:	4b31      	ldr	r3, [pc, #196]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5c2:	0f1b      	lsrs	r3, r3, #28
 801b5c4:	f003 0307 	and.w	r3, r3, #7
 801b5c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	685a      	ldr	r2, [r3, #4]
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	689b      	ldr	r3, [r3, #8]
 801b5d2:	019b      	lsls	r3, r3, #6
 801b5d4:	431a      	orrs	r2, r3
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	68db      	ldr	r3, [r3, #12]
 801b5da:	085b      	lsrs	r3, r3, #1
 801b5dc:	3b01      	subs	r3, #1
 801b5de:	041b      	lsls	r3, r3, #16
 801b5e0:	431a      	orrs	r2, r3
 801b5e2:	69bb      	ldr	r3, [r7, #24]
 801b5e4:	061b      	lsls	r3, r3, #24
 801b5e6:	431a      	orrs	r2, r3
 801b5e8:	697b      	ldr	r3, [r7, #20]
 801b5ea:	071b      	lsls	r3, r3, #28
 801b5ec:	4925      	ldr	r1, [pc, #148]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5ee:	4313      	orrs	r3, r2
 801b5f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d016      	beq.n	801b62e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	685a      	ldr	r2, [r3, #4]
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	689b      	ldr	r3, [r3, #8]
 801b608:	019b      	lsls	r3, r3, #6
 801b60a:	431a      	orrs	r2, r3
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	68db      	ldr	r3, [r3, #12]
 801b610:	085b      	lsrs	r3, r3, #1
 801b612:	3b01      	subs	r3, #1
 801b614:	041b      	lsls	r3, r3, #16
 801b616:	431a      	orrs	r2, r3
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	691b      	ldr	r3, [r3, #16]
 801b61c:	061b      	lsls	r3, r3, #24
 801b61e:	431a      	orrs	r2, r3
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	695b      	ldr	r3, [r3, #20]
 801b624:	071b      	lsls	r3, r3, #28
 801b626:	4917      	ldr	r1, [pc, #92]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b628:	4313      	orrs	r3, r2
 801b62a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b62e:	4b16      	ldr	r3, [pc, #88]	; (801b688 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b630:	2201      	movs	r2, #1
 801b632:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b634:	f7fc fd4e 	bl	80180d4 <HAL_GetTick>
 801b638:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b63a:	e008      	b.n	801b64e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b63c:	f7fc fd4a 	bl	80180d4 <HAL_GetTick>
 801b640:	4602      	mov	r2, r0
 801b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b644:	1ad3      	subs	r3, r2, r3
 801b646:	2b02      	cmp	r3, #2
 801b648:	d901      	bls.n	801b64e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b64a:	2303      	movs	r3, #3
 801b64c:	e09f      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b64e:	4b0d      	ldr	r3, [pc, #52]	; (801b684 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b656:	2b00      	cmp	r3, #0
 801b658:	d0f0      	beq.n	801b63c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b65c:	2b01      	cmp	r3, #1
 801b65e:	f040 8095 	bne.w	801b78c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b662:	4b0a      	ldr	r3, [pc, #40]	; (801b68c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b664:	2200      	movs	r2, #0
 801b666:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b668:	f7fc fd34 	bl	80180d4 <HAL_GetTick>
 801b66c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b66e:	e00f      	b.n	801b690 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b670:	f7fc fd30 	bl	80180d4 <HAL_GetTick>
 801b674:	4602      	mov	r2, r0
 801b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b678:	1ad3      	subs	r3, r2, r3
 801b67a:	2b02      	cmp	r3, #2
 801b67c:	d908      	bls.n	801b690 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b67e:	2303      	movs	r3, #3
 801b680:	e085      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b682:	bf00      	nop
 801b684:	40023800 	.word	0x40023800
 801b688:	42470068 	.word	0x42470068
 801b68c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b690:	4b41      	ldr	r3, [pc, #260]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b69c:	d0e8      	beq.n	801b670 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	f003 0304 	and.w	r3, r3, #4
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d003      	beq.n	801b6b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d009      	beq.n	801b6c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d02b      	beq.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d127      	bne.n	801b716 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b6c6:	4b34      	ldr	r3, [pc, #208]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b6cc:	0c1b      	lsrs	r3, r3, #16
 801b6ce:	f003 0303 	and.w	r3, r3, #3
 801b6d2:	3301      	adds	r3, #1
 801b6d4:	005b      	lsls	r3, r3, #1
 801b6d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	699a      	ldr	r2, [r3, #24]
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	69db      	ldr	r3, [r3, #28]
 801b6e0:	019b      	lsls	r3, r3, #6
 801b6e2:	431a      	orrs	r2, r3
 801b6e4:	693b      	ldr	r3, [r7, #16]
 801b6e6:	085b      	lsrs	r3, r3, #1
 801b6e8:	3b01      	subs	r3, #1
 801b6ea:	041b      	lsls	r3, r3, #16
 801b6ec:	431a      	orrs	r2, r3
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6f2:	061b      	lsls	r3, r3, #24
 801b6f4:	4928      	ldr	r1, [pc, #160]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b6f6:	4313      	orrs	r3, r2
 801b6f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b6fc:	4b26      	ldr	r3, [pc, #152]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b6fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b702:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b70a:	3b01      	subs	r3, #1
 801b70c:	021b      	lsls	r3, r3, #8
 801b70e:	4922      	ldr	r1, [pc, #136]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b710:	4313      	orrs	r3, r2
 801b712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d01d      	beq.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b72a:	d118      	bne.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b72c:	4b1a      	ldr	r3, [pc, #104]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b732:	0e1b      	lsrs	r3, r3, #24
 801b734:	f003 030f 	and.w	r3, r3, #15
 801b738:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	699a      	ldr	r2, [r3, #24]
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	69db      	ldr	r3, [r3, #28]
 801b742:	019b      	lsls	r3, r3, #6
 801b744:	431a      	orrs	r2, r3
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	6a1b      	ldr	r3, [r3, #32]
 801b74a:	085b      	lsrs	r3, r3, #1
 801b74c:	3b01      	subs	r3, #1
 801b74e:	041b      	lsls	r3, r3, #16
 801b750:	431a      	orrs	r2, r3
 801b752:	68fb      	ldr	r3, [r7, #12]
 801b754:	061b      	lsls	r3, r3, #24
 801b756:	4910      	ldr	r1, [pc, #64]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b758:	4313      	orrs	r3, r2
 801b75a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b75e:	4b0f      	ldr	r3, [pc, #60]	; (801b79c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b760:	2201      	movs	r2, #1
 801b762:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b764:	f7fc fcb6 	bl	80180d4 <HAL_GetTick>
 801b768:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b76a:	e008      	b.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b76c:	f7fc fcb2 	bl	80180d4 <HAL_GetTick>
 801b770:	4602      	mov	r2, r0
 801b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b774:	1ad3      	subs	r3, r2, r3
 801b776:	2b02      	cmp	r3, #2
 801b778:	d901      	bls.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b77a:	2303      	movs	r3, #3
 801b77c:	e007      	b.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b77e:	4b06      	ldr	r3, [pc, #24]	; (801b798 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b78a:	d1ef      	bne.n	801b76c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b78c:	2300      	movs	r3, #0
}
 801b78e:	4618      	mov	r0, r3
 801b790:	3730      	adds	r7, #48	; 0x30
 801b792:	46bd      	mov	sp, r7
 801b794:	bd80      	pop	{r7, pc}
 801b796:	bf00      	nop
 801b798:	40023800 	.word	0x40023800
 801b79c:	42470070 	.word	0x42470070

0801b7a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b7a4:	b0a6      	sub	sp, #152	; 0x98
 801b7a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 801b7ba:	2300      	movs	r3, #0
 801b7bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b7c6:	4bc8      	ldr	r3, [pc, #800]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b7c8:	689b      	ldr	r3, [r3, #8]
 801b7ca:	f003 030c 	and.w	r3, r3, #12
 801b7ce:	2b0c      	cmp	r3, #12
 801b7d0:	f200 817e 	bhi.w	801bad0 <HAL_RCC_GetSysClockFreq+0x330>
 801b7d4:	a201      	add	r2, pc, #4	; (adr r2, 801b7dc <HAL_RCC_GetSysClockFreq+0x3c>)
 801b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7da:	bf00      	nop
 801b7dc:	0801b811 	.word	0x0801b811
 801b7e0:	0801bad1 	.word	0x0801bad1
 801b7e4:	0801bad1 	.word	0x0801bad1
 801b7e8:	0801bad1 	.word	0x0801bad1
 801b7ec:	0801b819 	.word	0x0801b819
 801b7f0:	0801bad1 	.word	0x0801bad1
 801b7f4:	0801bad1 	.word	0x0801bad1
 801b7f8:	0801bad1 	.word	0x0801bad1
 801b7fc:	0801b821 	.word	0x0801b821
 801b800:	0801bad1 	.word	0x0801bad1
 801b804:	0801bad1 	.word	0x0801bad1
 801b808:	0801bad1 	.word	0x0801bad1
 801b80c:	0801b98b 	.word	0x0801b98b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b810:	4bb6      	ldr	r3, [pc, #728]	; (801baec <HAL_RCC_GetSysClockFreq+0x34c>)
 801b812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 801b816:	e15f      	b.n	801bad8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b818:	4bb5      	ldr	r3, [pc, #724]	; (801baf0 <HAL_RCC_GetSysClockFreq+0x350>)
 801b81a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801b81e:	e15b      	b.n	801bad8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b820:	4bb1      	ldr	r3, [pc, #708]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b822:	685b      	ldr	r3, [r3, #4]
 801b824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b82c:	4bae      	ldr	r3, [pc, #696]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b82e:	685b      	ldr	r3, [r3, #4]
 801b830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b834:	2b00      	cmp	r3, #0
 801b836:	d031      	beq.n	801b89c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b838:	4bab      	ldr	r3, [pc, #684]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	099b      	lsrs	r3, r3, #6
 801b83e:	2200      	movs	r2, #0
 801b840:	66bb      	str	r3, [r7, #104]	; 0x68
 801b842:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b84a:	663b      	str	r3, [r7, #96]	; 0x60
 801b84c:	2300      	movs	r3, #0
 801b84e:	667b      	str	r3, [r7, #100]	; 0x64
 801b850:	4ba7      	ldr	r3, [pc, #668]	; (801baf0 <HAL_RCC_GetSysClockFreq+0x350>)
 801b852:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801b856:	462a      	mov	r2, r5
 801b858:	fb03 f202 	mul.w	r2, r3, r2
 801b85c:	2300      	movs	r3, #0
 801b85e:	4621      	mov	r1, r4
 801b860:	fb01 f303 	mul.w	r3, r1, r3
 801b864:	4413      	add	r3, r2
 801b866:	4aa2      	ldr	r2, [pc, #648]	; (801baf0 <HAL_RCC_GetSysClockFreq+0x350>)
 801b868:	4621      	mov	r1, r4
 801b86a:	fba1 1202 	umull	r1, r2, r1, r2
 801b86e:	67fa      	str	r2, [r7, #124]	; 0x7c
 801b870:	460a      	mov	r2, r1
 801b872:	67ba      	str	r2, [r7, #120]	; 0x78
 801b874:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b876:	4413      	add	r3, r2
 801b878:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b87e:	2200      	movs	r2, #0
 801b880:	65bb      	str	r3, [r7, #88]	; 0x58
 801b882:	65fa      	str	r2, [r7, #92]	; 0x5c
 801b884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b888:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801b88c:	f7f0 fbe0 	bl	800c050 <__aeabi_uldivmod>
 801b890:	4602      	mov	r2, r0
 801b892:	460b      	mov	r3, r1
 801b894:	4613      	mov	r3, r2
 801b896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b89a:	e064      	b.n	801b966 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b89c:	4b92      	ldr	r3, [pc, #584]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b89e:	685b      	ldr	r3, [r3, #4]
 801b8a0:	099b      	lsrs	r3, r3, #6
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	653b      	str	r3, [r7, #80]	; 0x50
 801b8a6:	657a      	str	r2, [r7, #84]	; 0x54
 801b8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8ae:	64bb      	str	r3, [r7, #72]	; 0x48
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b8b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 801b8b8:	4622      	mov	r2, r4
 801b8ba:	462b      	mov	r3, r5
 801b8bc:	f04f 0000 	mov.w	r0, #0
 801b8c0:	f04f 0100 	mov.w	r1, #0
 801b8c4:	0159      	lsls	r1, r3, #5
 801b8c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801b8ca:	0150      	lsls	r0, r2, #5
 801b8cc:	4602      	mov	r2, r0
 801b8ce:	460b      	mov	r3, r1
 801b8d0:	4621      	mov	r1, r4
 801b8d2:	1a51      	subs	r1, r2, r1
 801b8d4:	6139      	str	r1, [r7, #16]
 801b8d6:	4629      	mov	r1, r5
 801b8d8:	eb63 0301 	sbc.w	r3, r3, r1
 801b8dc:	617b      	str	r3, [r7, #20]
 801b8de:	f04f 0200 	mov.w	r2, #0
 801b8e2:	f04f 0300 	mov.w	r3, #0
 801b8e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801b8ea:	4659      	mov	r1, fp
 801b8ec:	018b      	lsls	r3, r1, #6
 801b8ee:	4651      	mov	r1, sl
 801b8f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801b8f4:	4651      	mov	r1, sl
 801b8f6:	018a      	lsls	r2, r1, #6
 801b8f8:	4651      	mov	r1, sl
 801b8fa:	ebb2 0801 	subs.w	r8, r2, r1
 801b8fe:	4659      	mov	r1, fp
 801b900:	eb63 0901 	sbc.w	r9, r3, r1
 801b904:	f04f 0200 	mov.w	r2, #0
 801b908:	f04f 0300 	mov.w	r3, #0
 801b90c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801b910:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801b914:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801b918:	4690      	mov	r8, r2
 801b91a:	4699      	mov	r9, r3
 801b91c:	4623      	mov	r3, r4
 801b91e:	eb18 0303 	adds.w	r3, r8, r3
 801b922:	60bb      	str	r3, [r7, #8]
 801b924:	462b      	mov	r3, r5
 801b926:	eb49 0303 	adc.w	r3, r9, r3
 801b92a:	60fb      	str	r3, [r7, #12]
 801b92c:	f04f 0200 	mov.w	r2, #0
 801b930:	f04f 0300 	mov.w	r3, #0
 801b934:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801b938:	4629      	mov	r1, r5
 801b93a:	028b      	lsls	r3, r1, #10
 801b93c:	4621      	mov	r1, r4
 801b93e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801b942:	4621      	mov	r1, r4
 801b944:	028a      	lsls	r2, r1, #10
 801b946:	4610      	mov	r0, r2
 801b948:	4619      	mov	r1, r3
 801b94a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b94e:	2200      	movs	r2, #0
 801b950:	643b      	str	r3, [r7, #64]	; 0x40
 801b952:	647a      	str	r2, [r7, #68]	; 0x44
 801b954:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b958:	f7f0 fb7a 	bl	800c050 <__aeabi_uldivmod>
 801b95c:	4602      	mov	r2, r0
 801b95e:	460b      	mov	r3, r1
 801b960:	4613      	mov	r3, r2
 801b962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801b966:	4b60      	ldr	r3, [pc, #384]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b968:	685b      	ldr	r3, [r3, #4]
 801b96a:	0c1b      	lsrs	r3, r3, #16
 801b96c:	f003 0303 	and.w	r3, r3, #3
 801b970:	3301      	adds	r3, #1
 801b972:	005b      	lsls	r3, r3, #1
 801b974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 801b978:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b97c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b980:	fbb2 f3f3 	udiv	r3, r2, r3
 801b984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801b988:	e0a6      	b.n	801bad8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b98a:	4b57      	ldr	r3, [pc, #348]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b996:	4b54      	ldr	r3, [pc, #336]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d02a      	beq.n	801b9f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9a2:	4b51      	ldr	r3, [pc, #324]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9a4:	685b      	ldr	r3, [r3, #4]
 801b9a6:	099b      	lsrs	r3, r3, #6
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	63bb      	str	r3, [r7, #56]	; 0x38
 801b9ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 801b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801b9b4:	2100      	movs	r1, #0
 801b9b6:	4b4e      	ldr	r3, [pc, #312]	; (801baf0 <HAL_RCC_GetSysClockFreq+0x350>)
 801b9b8:	fb03 f201 	mul.w	r2, r3, r1
 801b9bc:	2300      	movs	r3, #0
 801b9be:	fb00 f303 	mul.w	r3, r0, r3
 801b9c2:	4413      	add	r3, r2
 801b9c4:	4a4a      	ldr	r2, [pc, #296]	; (801baf0 <HAL_RCC_GetSysClockFreq+0x350>)
 801b9c6:	fba0 1202 	umull	r1, r2, r0, r2
 801b9ca:	677a      	str	r2, [r7, #116]	; 0x74
 801b9cc:	460a      	mov	r2, r1
 801b9ce:	673a      	str	r2, [r7, #112]	; 0x70
 801b9d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b9d2:	4413      	add	r3, r2
 801b9d4:	677b      	str	r3, [r7, #116]	; 0x74
 801b9d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9da:	2200      	movs	r2, #0
 801b9dc:	633b      	str	r3, [r7, #48]	; 0x30
 801b9de:	637a      	str	r2, [r7, #52]	; 0x34
 801b9e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801b9e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801b9e8:	f7f0 fb32 	bl	800c050 <__aeabi_uldivmod>
 801b9ec:	4602      	mov	r2, r0
 801b9ee:	460b      	mov	r3, r1
 801b9f0:	4613      	mov	r3, r2
 801b9f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b9f6:	e05b      	b.n	801bab0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9f8:	4b3b      	ldr	r3, [pc, #236]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9fa:	685b      	ldr	r3, [r3, #4]
 801b9fc:	099b      	lsrs	r3, r3, #6
 801b9fe:	2200      	movs	r2, #0
 801ba00:	62bb      	str	r3, [r7, #40]	; 0x28
 801ba02:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba0a:	623b      	str	r3, [r7, #32]
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	627b      	str	r3, [r7, #36]	; 0x24
 801ba10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801ba14:	4642      	mov	r2, r8
 801ba16:	464b      	mov	r3, r9
 801ba18:	f04f 0000 	mov.w	r0, #0
 801ba1c:	f04f 0100 	mov.w	r1, #0
 801ba20:	0159      	lsls	r1, r3, #5
 801ba22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ba26:	0150      	lsls	r0, r2, #5
 801ba28:	4602      	mov	r2, r0
 801ba2a:	460b      	mov	r3, r1
 801ba2c:	4641      	mov	r1, r8
 801ba2e:	ebb2 0a01 	subs.w	sl, r2, r1
 801ba32:	4649      	mov	r1, r9
 801ba34:	eb63 0b01 	sbc.w	fp, r3, r1
 801ba38:	f04f 0200 	mov.w	r2, #0
 801ba3c:	f04f 0300 	mov.w	r3, #0
 801ba40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801ba44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801ba48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801ba4c:	ebb2 040a 	subs.w	r4, r2, sl
 801ba50:	eb63 050b 	sbc.w	r5, r3, fp
 801ba54:	f04f 0200 	mov.w	r2, #0
 801ba58:	f04f 0300 	mov.w	r3, #0
 801ba5c:	00eb      	lsls	r3, r5, #3
 801ba5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ba62:	00e2      	lsls	r2, r4, #3
 801ba64:	4614      	mov	r4, r2
 801ba66:	461d      	mov	r5, r3
 801ba68:	4643      	mov	r3, r8
 801ba6a:	18e3      	adds	r3, r4, r3
 801ba6c:	603b      	str	r3, [r7, #0]
 801ba6e:	464b      	mov	r3, r9
 801ba70:	eb45 0303 	adc.w	r3, r5, r3
 801ba74:	607b      	str	r3, [r7, #4]
 801ba76:	f04f 0200 	mov.w	r2, #0
 801ba7a:	f04f 0300 	mov.w	r3, #0
 801ba7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 801ba82:	4629      	mov	r1, r5
 801ba84:	028b      	lsls	r3, r1, #10
 801ba86:	4621      	mov	r1, r4
 801ba88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801ba8c:	4621      	mov	r1, r4
 801ba8e:	028a      	lsls	r2, r1, #10
 801ba90:	4610      	mov	r0, r2
 801ba92:	4619      	mov	r1, r3
 801ba94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ba98:	2200      	movs	r2, #0
 801ba9a:	61bb      	str	r3, [r7, #24]
 801ba9c:	61fa      	str	r2, [r7, #28]
 801ba9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801baa2:	f7f0 fad5 	bl	800c050 <__aeabi_uldivmod>
 801baa6:	4602      	mov	r2, r0
 801baa8:	460b      	mov	r3, r1
 801baaa:	4613      	mov	r3, r2
 801baac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bab0:	4b0d      	ldr	r3, [pc, #52]	; (801bae8 <HAL_RCC_GetSysClockFreq+0x348>)
 801bab2:	685b      	ldr	r3, [r3, #4]
 801bab4:	0f1b      	lsrs	r3, r3, #28
 801bab6:	f003 0307 	and.w	r3, r3, #7
 801baba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 801babe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bac6:	fbb2 f3f3 	udiv	r3, r2, r3
 801baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801bace:	e003      	b.n	801bad8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bad0:	4b06      	ldr	r3, [pc, #24]	; (801baec <HAL_RCC_GetSysClockFreq+0x34c>)
 801bad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801bad6:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 801badc:	4618      	mov	r0, r3
 801bade:	3798      	adds	r7, #152	; 0x98
 801bae0:	46bd      	mov	sp, r7
 801bae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bae6:	bf00      	nop
 801bae8:	40023800 	.word	0x40023800
 801baec:	00f42400 	.word	0x00f42400
 801baf0:	017d7840 	.word	0x017d7840

0801baf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b086      	sub	sp, #24
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d101      	bne.n	801bb06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb02:	2301      	movs	r3, #1
 801bb04:	e28d      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	f003 0301 	and.w	r3, r3, #1
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	f000 8083 	beq.w	801bc1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb14:	4b94      	ldr	r3, [pc, #592]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb16:	689b      	ldr	r3, [r3, #8]
 801bb18:	f003 030c 	and.w	r3, r3, #12
 801bb1c:	2b04      	cmp	r3, #4
 801bb1e:	d019      	beq.n	801bb54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb20:	4b91      	ldr	r3, [pc, #580]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb22:	689b      	ldr	r3, [r3, #8]
 801bb24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb28:	2b08      	cmp	r3, #8
 801bb2a:	d106      	bne.n	801bb3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb2c:	4b8e      	ldr	r3, [pc, #568]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb2e:	685b      	ldr	r3, [r3, #4]
 801bb30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb38:	d00c      	beq.n	801bb54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb3a:	4b8b      	ldr	r3, [pc, #556]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb3c:	689b      	ldr	r3, [r3, #8]
 801bb3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb42:	2b0c      	cmp	r3, #12
 801bb44:	d112      	bne.n	801bb6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb46:	4b88      	ldr	r3, [pc, #544]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb48:	685b      	ldr	r3, [r3, #4]
 801bb4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb52:	d10b      	bne.n	801bb6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb54:	4b84      	ldr	r3, [pc, #528]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d05b      	beq.n	801bc18 <HAL_RCC_OscConfig+0x124>
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	685b      	ldr	r3, [r3, #4]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d157      	bne.n	801bc18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bb68:	2301      	movs	r3, #1
 801bb6a:	e25a      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb74:	d106      	bne.n	801bb84 <HAL_RCC_OscConfig+0x90>
 801bb76:	4b7c      	ldr	r3, [pc, #496]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	4a7b      	ldr	r2, [pc, #492]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb80:	6013      	str	r3, [r2, #0]
 801bb82:	e01d      	b.n	801bbc0 <HAL_RCC_OscConfig+0xcc>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	685b      	ldr	r3, [r3, #4]
 801bb88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bb8c:	d10c      	bne.n	801bba8 <HAL_RCC_OscConfig+0xb4>
 801bb8e:	4b76      	ldr	r3, [pc, #472]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	4a75      	ldr	r2, [pc, #468]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb98:	6013      	str	r3, [r2, #0]
 801bb9a:	4b73      	ldr	r3, [pc, #460]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	4a72      	ldr	r2, [pc, #456]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bba4:	6013      	str	r3, [r2, #0]
 801bba6:	e00b      	b.n	801bbc0 <HAL_RCC_OscConfig+0xcc>
 801bba8:	4b6f      	ldr	r3, [pc, #444]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	4a6e      	ldr	r2, [pc, #440]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bbae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bbb2:	6013      	str	r3, [r2, #0]
 801bbb4:	4b6c      	ldr	r3, [pc, #432]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	4a6b      	ldr	r2, [pc, #428]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bbba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bbbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	685b      	ldr	r3, [r3, #4]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d013      	beq.n	801bbf0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbc8:	f7fc fa84 	bl	80180d4 <HAL_GetTick>
 801bbcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbce:	e008      	b.n	801bbe2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bbd0:	f7fc fa80 	bl	80180d4 <HAL_GetTick>
 801bbd4:	4602      	mov	r2, r0
 801bbd6:	693b      	ldr	r3, [r7, #16]
 801bbd8:	1ad3      	subs	r3, r2, r3
 801bbda:	2b64      	cmp	r3, #100	; 0x64
 801bbdc:	d901      	bls.n	801bbe2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bbde:	2303      	movs	r3, #3
 801bbe0:	e21f      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bbe2:	4b61      	ldr	r3, [pc, #388]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d0f0      	beq.n	801bbd0 <HAL_RCC_OscConfig+0xdc>
 801bbee:	e014      	b.n	801bc1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bbf0:	f7fc fa70 	bl	80180d4 <HAL_GetTick>
 801bbf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bbf6:	e008      	b.n	801bc0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bbf8:	f7fc fa6c 	bl	80180d4 <HAL_GetTick>
 801bbfc:	4602      	mov	r2, r0
 801bbfe:	693b      	ldr	r3, [r7, #16]
 801bc00:	1ad3      	subs	r3, r2, r3
 801bc02:	2b64      	cmp	r3, #100	; 0x64
 801bc04:	d901      	bls.n	801bc0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bc06:	2303      	movs	r3, #3
 801bc08:	e20b      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc0a:	4b57      	ldr	r3, [pc, #348]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d1f0      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x104>
 801bc16:	e000      	b.n	801bc1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	f003 0302 	and.w	r3, r3, #2
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d06f      	beq.n	801bd06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc26:	4b50      	ldr	r3, [pc, #320]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc28:	689b      	ldr	r3, [r3, #8]
 801bc2a:	f003 030c 	and.w	r3, r3, #12
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d017      	beq.n	801bc62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc32:	4b4d      	ldr	r3, [pc, #308]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc34:	689b      	ldr	r3, [r3, #8]
 801bc36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc3a:	2b08      	cmp	r3, #8
 801bc3c:	d105      	bne.n	801bc4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc3e:	4b4a      	ldr	r3, [pc, #296]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc40:	685b      	ldr	r3, [r3, #4]
 801bc42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d00b      	beq.n	801bc62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc4a:	4b47      	ldr	r3, [pc, #284]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc4c:	689b      	ldr	r3, [r3, #8]
 801bc4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc52:	2b0c      	cmp	r3, #12
 801bc54:	d11c      	bne.n	801bc90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc56:	4b44      	ldr	r3, [pc, #272]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc58:	685b      	ldr	r3, [r3, #4]
 801bc5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d116      	bne.n	801bc90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc62:	4b41      	ldr	r3, [pc, #260]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	f003 0302 	and.w	r3, r3, #2
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d005      	beq.n	801bc7a <HAL_RCC_OscConfig+0x186>
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	68db      	ldr	r3, [r3, #12]
 801bc72:	2b01      	cmp	r3, #1
 801bc74:	d001      	beq.n	801bc7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bc76:	2301      	movs	r3, #1
 801bc78:	e1d3      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bc7a:	4b3b      	ldr	r3, [pc, #236]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	691b      	ldr	r3, [r3, #16]
 801bc86:	00db      	lsls	r3, r3, #3
 801bc88:	4937      	ldr	r1, [pc, #220]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bc8a:	4313      	orrs	r3, r2
 801bc8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bc8e:	e03a      	b.n	801bd06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	68db      	ldr	r3, [r3, #12]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d020      	beq.n	801bcda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bc98:	4b34      	ldr	r3, [pc, #208]	; (801bd6c <HAL_RCC_OscConfig+0x278>)
 801bc9a:	2201      	movs	r2, #1
 801bc9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc9e:	f7fc fa19 	bl	80180d4 <HAL_GetTick>
 801bca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bca4:	e008      	b.n	801bcb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bca6:	f7fc fa15 	bl	80180d4 <HAL_GetTick>
 801bcaa:	4602      	mov	r2, r0
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	1ad3      	subs	r3, r2, r3
 801bcb0:	2b02      	cmp	r3, #2
 801bcb2:	d901      	bls.n	801bcb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bcb4:	2303      	movs	r3, #3
 801bcb6:	e1b4      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bcb8:	4b2b      	ldr	r3, [pc, #172]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	f003 0302 	and.w	r3, r3, #2
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d0f0      	beq.n	801bca6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcc4:	4b28      	ldr	r3, [pc, #160]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	691b      	ldr	r3, [r3, #16]
 801bcd0:	00db      	lsls	r3, r3, #3
 801bcd2:	4925      	ldr	r1, [pc, #148]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bcd4:	4313      	orrs	r3, r2
 801bcd6:	600b      	str	r3, [r1, #0]
 801bcd8:	e015      	b.n	801bd06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bcda:	4b24      	ldr	r3, [pc, #144]	; (801bd6c <HAL_RCC_OscConfig+0x278>)
 801bcdc:	2200      	movs	r2, #0
 801bcde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bce0:	f7fc f9f8 	bl	80180d4 <HAL_GetTick>
 801bce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bce6:	e008      	b.n	801bcfa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bce8:	f7fc f9f4 	bl	80180d4 <HAL_GetTick>
 801bcec:	4602      	mov	r2, r0
 801bcee:	693b      	ldr	r3, [r7, #16]
 801bcf0:	1ad3      	subs	r3, r2, r3
 801bcf2:	2b02      	cmp	r3, #2
 801bcf4:	d901      	bls.n	801bcfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bcf6:	2303      	movs	r3, #3
 801bcf8:	e193      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bcfa:	4b1b      	ldr	r3, [pc, #108]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	f003 0302 	and.w	r3, r3, #2
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d1f0      	bne.n	801bce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	f003 0308 	and.w	r3, r3, #8
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d036      	beq.n	801bd80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	695b      	ldr	r3, [r3, #20]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d016      	beq.n	801bd48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bd1a:	4b15      	ldr	r3, [pc, #84]	; (801bd70 <HAL_RCC_OscConfig+0x27c>)
 801bd1c:	2201      	movs	r2, #1
 801bd1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd20:	f7fc f9d8 	bl	80180d4 <HAL_GetTick>
 801bd24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd26:	e008      	b.n	801bd3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd28:	f7fc f9d4 	bl	80180d4 <HAL_GetTick>
 801bd2c:	4602      	mov	r2, r0
 801bd2e:	693b      	ldr	r3, [r7, #16]
 801bd30:	1ad3      	subs	r3, r2, r3
 801bd32:	2b02      	cmp	r3, #2
 801bd34:	d901      	bls.n	801bd3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bd36:	2303      	movs	r3, #3
 801bd38:	e173      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd3a:	4b0b      	ldr	r3, [pc, #44]	; (801bd68 <HAL_RCC_OscConfig+0x274>)
 801bd3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd3e:	f003 0302 	and.w	r3, r3, #2
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d0f0      	beq.n	801bd28 <HAL_RCC_OscConfig+0x234>
 801bd46:	e01b      	b.n	801bd80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bd48:	4b09      	ldr	r3, [pc, #36]	; (801bd70 <HAL_RCC_OscConfig+0x27c>)
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd4e:	f7fc f9c1 	bl	80180d4 <HAL_GetTick>
 801bd52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd54:	e00e      	b.n	801bd74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd56:	f7fc f9bd 	bl	80180d4 <HAL_GetTick>
 801bd5a:	4602      	mov	r2, r0
 801bd5c:	693b      	ldr	r3, [r7, #16]
 801bd5e:	1ad3      	subs	r3, r2, r3
 801bd60:	2b02      	cmp	r3, #2
 801bd62:	d907      	bls.n	801bd74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bd64:	2303      	movs	r3, #3
 801bd66:	e15c      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
 801bd68:	40023800 	.word	0x40023800
 801bd6c:	42470000 	.word	0x42470000
 801bd70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd74:	4b8a      	ldr	r3, [pc, #552]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bd76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd78:	f003 0302 	and.w	r3, r3, #2
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d1ea      	bne.n	801bd56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f003 0304 	and.w	r3, r3, #4
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	f000 8097 	beq.w	801bebc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bd92:	4b83      	ldr	r3, [pc, #524]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d10f      	bne.n	801bdbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bd9e:	2300      	movs	r3, #0
 801bda0:	60bb      	str	r3, [r7, #8]
 801bda2:	4b7f      	ldr	r3, [pc, #508]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bda6:	4a7e      	ldr	r2, [pc, #504]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bda8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bdac:	6413      	str	r3, [r2, #64]	; 0x40
 801bdae:	4b7c      	ldr	r3, [pc, #496]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bdb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bdb6:	60bb      	str	r3, [r7, #8]
 801bdb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bdba:	2301      	movs	r3, #1
 801bdbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdbe:	4b79      	ldr	r3, [pc, #484]	; (801bfa4 <HAL_RCC_OscConfig+0x4b0>)
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d118      	bne.n	801bdfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bdca:	4b76      	ldr	r3, [pc, #472]	; (801bfa4 <HAL_RCC_OscConfig+0x4b0>)
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	4a75      	ldr	r2, [pc, #468]	; (801bfa4 <HAL_RCC_OscConfig+0x4b0>)
 801bdd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bdd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bdd6:	f7fc f97d 	bl	80180d4 <HAL_GetTick>
 801bdda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bddc:	e008      	b.n	801bdf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bdde:	f7fc f979 	bl	80180d4 <HAL_GetTick>
 801bde2:	4602      	mov	r2, r0
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	1ad3      	subs	r3, r2, r3
 801bde8:	2b02      	cmp	r3, #2
 801bdea:	d901      	bls.n	801bdf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bdec:	2303      	movs	r3, #3
 801bdee:	e118      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bdf0:	4b6c      	ldr	r3, [pc, #432]	; (801bfa4 <HAL_RCC_OscConfig+0x4b0>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d0f0      	beq.n	801bdde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	689b      	ldr	r3, [r3, #8]
 801be00:	2b01      	cmp	r3, #1
 801be02:	d106      	bne.n	801be12 <HAL_RCC_OscConfig+0x31e>
 801be04:	4b66      	ldr	r3, [pc, #408]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be08:	4a65      	ldr	r2, [pc, #404]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be0a:	f043 0301 	orr.w	r3, r3, #1
 801be0e:	6713      	str	r3, [r2, #112]	; 0x70
 801be10:	e01c      	b.n	801be4c <HAL_RCC_OscConfig+0x358>
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	689b      	ldr	r3, [r3, #8]
 801be16:	2b05      	cmp	r3, #5
 801be18:	d10c      	bne.n	801be34 <HAL_RCC_OscConfig+0x340>
 801be1a:	4b61      	ldr	r3, [pc, #388]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be1e:	4a60      	ldr	r2, [pc, #384]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be20:	f043 0304 	orr.w	r3, r3, #4
 801be24:	6713      	str	r3, [r2, #112]	; 0x70
 801be26:	4b5e      	ldr	r3, [pc, #376]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be2a:	4a5d      	ldr	r2, [pc, #372]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be2c:	f043 0301 	orr.w	r3, r3, #1
 801be30:	6713      	str	r3, [r2, #112]	; 0x70
 801be32:	e00b      	b.n	801be4c <HAL_RCC_OscConfig+0x358>
 801be34:	4b5a      	ldr	r3, [pc, #360]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be38:	4a59      	ldr	r2, [pc, #356]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be3a:	f023 0301 	bic.w	r3, r3, #1
 801be3e:	6713      	str	r3, [r2, #112]	; 0x70
 801be40:	4b57      	ldr	r3, [pc, #348]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be44:	4a56      	ldr	r2, [pc, #344]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be46:	f023 0304 	bic.w	r3, r3, #4
 801be4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	689b      	ldr	r3, [r3, #8]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d015      	beq.n	801be80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be54:	f7fc f93e 	bl	80180d4 <HAL_GetTick>
 801be58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be5a:	e00a      	b.n	801be72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be5c:	f7fc f93a 	bl	80180d4 <HAL_GetTick>
 801be60:	4602      	mov	r2, r0
 801be62:	693b      	ldr	r3, [r7, #16]
 801be64:	1ad3      	subs	r3, r2, r3
 801be66:	f241 3288 	movw	r2, #5000	; 0x1388
 801be6a:	4293      	cmp	r3, r2
 801be6c:	d901      	bls.n	801be72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801be6e:	2303      	movs	r3, #3
 801be70:	e0d7      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801be72:	4b4b      	ldr	r3, [pc, #300]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801be74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be76:	f003 0302 	and.w	r3, r3, #2
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d0ee      	beq.n	801be5c <HAL_RCC_OscConfig+0x368>
 801be7e:	e014      	b.n	801beaa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be80:	f7fc f928 	bl	80180d4 <HAL_GetTick>
 801be84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be86:	e00a      	b.n	801be9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801be88:	f7fc f924 	bl	80180d4 <HAL_GetTick>
 801be8c:	4602      	mov	r2, r0
 801be8e:	693b      	ldr	r3, [r7, #16]
 801be90:	1ad3      	subs	r3, r2, r3
 801be92:	f241 3288 	movw	r2, #5000	; 0x1388
 801be96:	4293      	cmp	r3, r2
 801be98:	d901      	bls.n	801be9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801be9a:	2303      	movs	r3, #3
 801be9c:	e0c1      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801be9e:	4b40      	ldr	r3, [pc, #256]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bea2:	f003 0302 	and.w	r3, r3, #2
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d1ee      	bne.n	801be88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801beaa:	7dfb      	ldrb	r3, [r7, #23]
 801beac:	2b01      	cmp	r3, #1
 801beae:	d105      	bne.n	801bebc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801beb0:	4b3b      	ldr	r3, [pc, #236]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801beb4:	4a3a      	ldr	r2, [pc, #232]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801beb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801beba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	699b      	ldr	r3, [r3, #24]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	f000 80ad 	beq.w	801c020 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bec6:	4b36      	ldr	r3, [pc, #216]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bec8:	689b      	ldr	r3, [r3, #8]
 801beca:	f003 030c 	and.w	r3, r3, #12
 801bece:	2b08      	cmp	r3, #8
 801bed0:	d060      	beq.n	801bf94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	699b      	ldr	r3, [r3, #24]
 801bed6:	2b02      	cmp	r3, #2
 801bed8:	d145      	bne.n	801bf66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801beda:	4b33      	ldr	r3, [pc, #204]	; (801bfa8 <HAL_RCC_OscConfig+0x4b4>)
 801bedc:	2200      	movs	r2, #0
 801bede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bee0:	f7fc f8f8 	bl	80180d4 <HAL_GetTick>
 801bee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bee6:	e008      	b.n	801befa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bee8:	f7fc f8f4 	bl	80180d4 <HAL_GetTick>
 801beec:	4602      	mov	r2, r0
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	1ad3      	subs	r3, r2, r3
 801bef2:	2b02      	cmp	r3, #2
 801bef4:	d901      	bls.n	801befa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bef6:	2303      	movs	r3, #3
 801bef8:	e093      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801befa:	4b29      	ldr	r3, [pc, #164]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d1f0      	bne.n	801bee8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	69da      	ldr	r2, [r3, #28]
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	6a1b      	ldr	r3, [r3, #32]
 801bf0e:	431a      	orrs	r2, r3
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf14:	019b      	lsls	r3, r3, #6
 801bf16:	431a      	orrs	r2, r3
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf1c:	085b      	lsrs	r3, r3, #1
 801bf1e:	3b01      	subs	r3, #1
 801bf20:	041b      	lsls	r3, r3, #16
 801bf22:	431a      	orrs	r2, r3
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf28:	061b      	lsls	r3, r3, #24
 801bf2a:	431a      	orrs	r2, r3
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf30:	071b      	lsls	r3, r3, #28
 801bf32:	491b      	ldr	r1, [pc, #108]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bf34:	4313      	orrs	r3, r2
 801bf36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bf38:	4b1b      	ldr	r3, [pc, #108]	; (801bfa8 <HAL_RCC_OscConfig+0x4b4>)
 801bf3a:	2201      	movs	r2, #1
 801bf3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf3e:	f7fc f8c9 	bl	80180d4 <HAL_GetTick>
 801bf42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf44:	e008      	b.n	801bf58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf46:	f7fc f8c5 	bl	80180d4 <HAL_GetTick>
 801bf4a:	4602      	mov	r2, r0
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	1ad3      	subs	r3, r2, r3
 801bf50:	2b02      	cmp	r3, #2
 801bf52:	d901      	bls.n	801bf58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bf54:	2303      	movs	r3, #3
 801bf56:	e064      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf58:	4b11      	ldr	r3, [pc, #68]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d0f0      	beq.n	801bf46 <HAL_RCC_OscConfig+0x452>
 801bf64:	e05c      	b.n	801c020 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf66:	4b10      	ldr	r3, [pc, #64]	; (801bfa8 <HAL_RCC_OscConfig+0x4b4>)
 801bf68:	2200      	movs	r2, #0
 801bf6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf6c:	f7fc f8b2 	bl	80180d4 <HAL_GetTick>
 801bf70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf72:	e008      	b.n	801bf86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf74:	f7fc f8ae 	bl	80180d4 <HAL_GetTick>
 801bf78:	4602      	mov	r2, r0
 801bf7a:	693b      	ldr	r3, [r7, #16]
 801bf7c:	1ad3      	subs	r3, r2, r3
 801bf7e:	2b02      	cmp	r3, #2
 801bf80:	d901      	bls.n	801bf86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bf82:	2303      	movs	r3, #3
 801bf84:	e04d      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf86:	4b06      	ldr	r3, [pc, #24]	; (801bfa0 <HAL_RCC_OscConfig+0x4ac>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d1f0      	bne.n	801bf74 <HAL_RCC_OscConfig+0x480>
 801bf92:	e045      	b.n	801c020 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	699b      	ldr	r3, [r3, #24]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d107      	bne.n	801bfac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bf9c:	2301      	movs	r3, #1
 801bf9e:	e040      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
 801bfa0:	40023800 	.word	0x40023800
 801bfa4:	40007000 	.word	0x40007000
 801bfa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801bfac:	4b1f      	ldr	r3, [pc, #124]	; (801c02c <HAL_RCC_OscConfig+0x538>)
 801bfae:	685b      	ldr	r3, [r3, #4]
 801bfb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	699b      	ldr	r3, [r3, #24]
 801bfb6:	2b01      	cmp	r3, #1
 801bfb8:	d030      	beq.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bfc4:	429a      	cmp	r2, r3
 801bfc6:	d129      	bne.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bfd2:	429a      	cmp	r2, r3
 801bfd4:	d122      	bne.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bfd6:	68fa      	ldr	r2, [r7, #12]
 801bfd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801bfdc:	4013      	ands	r3, r2
 801bfde:	687a      	ldr	r2, [r7, #4]
 801bfe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801bfe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	d119      	bne.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bff2:	085b      	lsrs	r3, r3, #1
 801bff4:	3b01      	subs	r3, #1
 801bff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d10f      	bne.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c008:	429a      	cmp	r2, r3
 801c00a:	d107      	bne.n	801c01c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c016:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c018:	429a      	cmp	r2, r3
 801c01a:	d001      	beq.n	801c020 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c01c:	2301      	movs	r3, #1
 801c01e:	e000      	b.n	801c022 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c020:	2300      	movs	r3, #0
}
 801c022:	4618      	mov	r0, r3
 801c024:	3718      	adds	r7, #24
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	40023800 	.word	0x40023800

0801c030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b082      	sub	sp, #8
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d101      	bne.n	801c042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c03e:	2301      	movs	r3, #1
 801c040:	e07b      	b.n	801c13a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c046:	2b00      	cmp	r3, #0
 801c048:	d108      	bne.n	801c05c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	685b      	ldr	r3, [r3, #4]
 801c04e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c052:	d009      	beq.n	801c068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2200      	movs	r2, #0
 801c058:	61da      	str	r2, [r3, #28]
 801c05a:	e005      	b.n	801c068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	2200      	movs	r2, #0
 801c060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	2200      	movs	r2, #0
 801c066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	2200      	movs	r2, #0
 801c06c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c074:	b2db      	uxtb	r3, r3
 801c076:	2b00      	cmp	r3, #0
 801c078:	d106      	bne.n	801c088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	2200      	movs	r2, #0
 801c07e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c082:	6878      	ldr	r0, [r7, #4]
 801c084:	f7fb fb9a 	bl	80177bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	2202      	movs	r2, #2
 801c08c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	681a      	ldr	r2, [r3, #0]
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c09e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	689b      	ldr	r3, [r3, #8]
 801c0ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c0b0:	431a      	orrs	r2, r3
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	68db      	ldr	r3, [r3, #12]
 801c0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c0ba:	431a      	orrs	r2, r3
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	691b      	ldr	r3, [r3, #16]
 801c0c0:	f003 0302 	and.w	r3, r3, #2
 801c0c4:	431a      	orrs	r2, r3
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	695b      	ldr	r3, [r3, #20]
 801c0ca:	f003 0301 	and.w	r3, r3, #1
 801c0ce:	431a      	orrs	r2, r3
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	699b      	ldr	r3, [r3, #24]
 801c0d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c0d8:	431a      	orrs	r2, r3
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	69db      	ldr	r3, [r3, #28]
 801c0de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c0e2:	431a      	orrs	r2, r3
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	6a1b      	ldr	r3, [r3, #32]
 801c0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c0ec:	ea42 0103 	orr.w	r1, r2, r3
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	430a      	orrs	r2, r1
 801c0fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	699b      	ldr	r3, [r3, #24]
 801c104:	0c1b      	lsrs	r3, r3, #16
 801c106:	f003 0104 	and.w	r1, r3, #4
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c10e:	f003 0210 	and.w	r2, r3, #16
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	430a      	orrs	r2, r1
 801c118:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	69da      	ldr	r2, [r3, #28]
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c128:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	2200      	movs	r2, #0
 801c12e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2201      	movs	r2, #1
 801c134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c138:	2300      	movs	r3, #0
}
 801c13a:	4618      	mov	r0, r3
 801c13c:	3708      	adds	r7, #8
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}

0801c142 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c142:	b580      	push	{r7, lr}
 801c144:	b088      	sub	sp, #32
 801c146:	af00      	add	r7, sp, #0
 801c148:	60f8      	str	r0, [r7, #12]
 801c14a:	60b9      	str	r1, [r7, #8]
 801c14c:	603b      	str	r3, [r7, #0]
 801c14e:	4613      	mov	r3, r2
 801c150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c152:	2300      	movs	r3, #0
 801c154:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c15c:	2b01      	cmp	r3, #1
 801c15e:	d101      	bne.n	801c164 <HAL_SPI_Transmit+0x22>
 801c160:	2302      	movs	r3, #2
 801c162:	e126      	b.n	801c3b2 <HAL_SPI_Transmit+0x270>
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	2201      	movs	r2, #1
 801c168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c16c:	f7fb ffb2 	bl	80180d4 <HAL_GetTick>
 801c170:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c172:	88fb      	ldrh	r3, [r7, #6]
 801c174:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c17c:	b2db      	uxtb	r3, r3
 801c17e:	2b01      	cmp	r3, #1
 801c180:	d002      	beq.n	801c188 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c182:	2302      	movs	r3, #2
 801c184:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c186:	e10b      	b.n	801c3a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c188:	68bb      	ldr	r3, [r7, #8]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d002      	beq.n	801c194 <HAL_SPI_Transmit+0x52>
 801c18e:	88fb      	ldrh	r3, [r7, #6]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d102      	bne.n	801c19a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c194:	2301      	movs	r3, #1
 801c196:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c198:	e102      	b.n	801c3a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	2203      	movs	r2, #3
 801c19e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	68ba      	ldr	r2, [r7, #8]
 801c1ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	88fa      	ldrh	r2, [r7, #6]
 801c1b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	88fa      	ldrh	r2, [r7, #6]
 801c1b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	2200      	movs	r2, #0
 801c1be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c1c6:	68fb      	ldr	r3, [r7, #12]
 801c1c8:	2200      	movs	r2, #0
 801c1ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	689b      	ldr	r3, [r3, #8]
 801c1dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1e0:	d10f      	bne.n	801c202 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	681a      	ldr	r2, [r3, #0]
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c1f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	681a      	ldr	r2, [r3, #0]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c200:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c20c:	2b40      	cmp	r3, #64	; 0x40
 801c20e:	d007      	beq.n	801c220 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	681a      	ldr	r2, [r3, #0]
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c21e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	68db      	ldr	r3, [r3, #12]
 801c224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c228:	d14b      	bne.n	801c2c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	685b      	ldr	r3, [r3, #4]
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d002      	beq.n	801c238 <HAL_SPI_Transmit+0xf6>
 801c232:	8afb      	ldrh	r3, [r7, #22]
 801c234:	2b01      	cmp	r3, #1
 801c236:	d13e      	bne.n	801c2b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c23c:	881a      	ldrh	r2, [r3, #0]
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c248:	1c9a      	adds	r2, r3, #2
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c252:	b29b      	uxth	r3, r3
 801c254:	3b01      	subs	r3, #1
 801c256:	b29a      	uxth	r2, r3
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c25c:	e02b      	b.n	801c2b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	689b      	ldr	r3, [r3, #8]
 801c264:	f003 0302 	and.w	r3, r3, #2
 801c268:	2b02      	cmp	r3, #2
 801c26a:	d112      	bne.n	801c292 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c270:	881a      	ldrh	r2, [r3, #0]
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c27c:	1c9a      	adds	r2, r3, #2
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c286:	b29b      	uxth	r3, r3
 801c288:	3b01      	subs	r3, #1
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c290:	e011      	b.n	801c2b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c292:	f7fb ff1f 	bl	80180d4 <HAL_GetTick>
 801c296:	4602      	mov	r2, r0
 801c298:	69bb      	ldr	r3, [r7, #24]
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	683a      	ldr	r2, [r7, #0]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d803      	bhi.n	801c2aa <HAL_SPI_Transmit+0x168>
 801c2a2:	683b      	ldr	r3, [r7, #0]
 801c2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2a8:	d102      	bne.n	801c2b0 <HAL_SPI_Transmit+0x16e>
 801c2aa:	683b      	ldr	r3, [r7, #0]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d102      	bne.n	801c2b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c2b0:	2303      	movs	r3, #3
 801c2b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c2b4:	e074      	b.n	801c3a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2ba:	b29b      	uxth	r3, r3
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d1ce      	bne.n	801c25e <HAL_SPI_Transmit+0x11c>
 801c2c0:	e04c      	b.n	801c35c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d002      	beq.n	801c2d0 <HAL_SPI_Transmit+0x18e>
 801c2ca:	8afb      	ldrh	r3, [r7, #22]
 801c2cc:	2b01      	cmp	r3, #1
 801c2ce:	d140      	bne.n	801c352 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	330c      	adds	r3, #12
 801c2da:	7812      	ldrb	r2, [r2, #0]
 801c2dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2e2:	1c5a      	adds	r2, r3, #1
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2ec:	b29b      	uxth	r3, r3
 801c2ee:	3b01      	subs	r3, #1
 801c2f0:	b29a      	uxth	r2, r3
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c2f6:	e02c      	b.n	801c352 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2f8:	68fb      	ldr	r3, [r7, #12]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	689b      	ldr	r3, [r3, #8]
 801c2fe:	f003 0302 	and.w	r3, r3, #2
 801c302:	2b02      	cmp	r3, #2
 801c304:	d113      	bne.n	801c32e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	330c      	adds	r3, #12
 801c310:	7812      	ldrb	r2, [r2, #0]
 801c312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c318:	1c5a      	adds	r2, r3, #1
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c322:	b29b      	uxth	r3, r3
 801c324:	3b01      	subs	r3, #1
 801c326:	b29a      	uxth	r2, r3
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	86da      	strh	r2, [r3, #54]	; 0x36
 801c32c:	e011      	b.n	801c352 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c32e:	f7fb fed1 	bl	80180d4 <HAL_GetTick>
 801c332:	4602      	mov	r2, r0
 801c334:	69bb      	ldr	r3, [r7, #24]
 801c336:	1ad3      	subs	r3, r2, r3
 801c338:	683a      	ldr	r2, [r7, #0]
 801c33a:	429a      	cmp	r2, r3
 801c33c:	d803      	bhi.n	801c346 <HAL_SPI_Transmit+0x204>
 801c33e:	683b      	ldr	r3, [r7, #0]
 801c340:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c344:	d102      	bne.n	801c34c <HAL_SPI_Transmit+0x20a>
 801c346:	683b      	ldr	r3, [r7, #0]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d102      	bne.n	801c352 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c34c:	2303      	movs	r3, #3
 801c34e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c350:	e026      	b.n	801c3a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c356:	b29b      	uxth	r3, r3
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d1cd      	bne.n	801c2f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c35c:	69ba      	ldr	r2, [r7, #24]
 801c35e:	6839      	ldr	r1, [r7, #0]
 801c360:	68f8      	ldr	r0, [r7, #12]
 801c362:	f000 fce9 	bl	801cd38 <SPI_EndRxTxTransaction>
 801c366:	4603      	mov	r3, r0
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d002      	beq.n	801c372 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	2220      	movs	r2, #32
 801c370:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	689b      	ldr	r3, [r3, #8]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d10a      	bne.n	801c390 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c37a:	2300      	movs	r3, #0
 801c37c:	613b      	str	r3, [r7, #16]
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	68db      	ldr	r3, [r3, #12]
 801c384:	613b      	str	r3, [r7, #16]
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	689b      	ldr	r3, [r3, #8]
 801c38c:	613b      	str	r3, [r7, #16]
 801c38e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c394:	2b00      	cmp	r3, #0
 801c396:	d002      	beq.n	801c39e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c398:	2301      	movs	r3, #1
 801c39a:	77fb      	strb	r3, [r7, #31]
 801c39c:	e000      	b.n	801c3a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c39e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	2201      	movs	r2, #1
 801c3a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c3b0:	7ffb      	ldrb	r3, [r7, #31]
}
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	3720      	adds	r7, #32
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bd80      	pop	{r7, pc}

0801c3ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c3ba:	b580      	push	{r7, lr}
 801c3bc:	b088      	sub	sp, #32
 801c3be:	af02      	add	r7, sp, #8
 801c3c0:	60f8      	str	r0, [r7, #12]
 801c3c2:	60b9      	str	r1, [r7, #8]
 801c3c4:	603b      	str	r3, [r7, #0]
 801c3c6:	4613      	mov	r3, r2
 801c3c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	685b      	ldr	r3, [r3, #4]
 801c3d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c3d6:	d112      	bne.n	801c3fe <HAL_SPI_Receive+0x44>
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	689b      	ldr	r3, [r3, #8]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d10e      	bne.n	801c3fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	2204      	movs	r2, #4
 801c3e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c3e8:	88fa      	ldrh	r2, [r7, #6]
 801c3ea:	683b      	ldr	r3, [r7, #0]
 801c3ec:	9300      	str	r3, [sp, #0]
 801c3ee:	4613      	mov	r3, r2
 801c3f0:	68ba      	ldr	r2, [r7, #8]
 801c3f2:	68b9      	ldr	r1, [r7, #8]
 801c3f4:	68f8      	ldr	r0, [r7, #12]
 801c3f6:	f000 f8f1 	bl	801c5dc <HAL_SPI_TransmitReceive>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	e0ea      	b.n	801c5d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c404:	2b01      	cmp	r3, #1
 801c406:	d101      	bne.n	801c40c <HAL_SPI_Receive+0x52>
 801c408:	2302      	movs	r3, #2
 801c40a:	e0e3      	b.n	801c5d4 <HAL_SPI_Receive+0x21a>
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	2201      	movs	r2, #1
 801c410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c414:	f7fb fe5e 	bl	80180d4 <HAL_GetTick>
 801c418:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c420:	b2db      	uxtb	r3, r3
 801c422:	2b01      	cmp	r3, #1
 801c424:	d002      	beq.n	801c42c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c426:	2302      	movs	r3, #2
 801c428:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c42a:	e0ca      	b.n	801c5c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d002      	beq.n	801c438 <HAL_SPI_Receive+0x7e>
 801c432:	88fb      	ldrh	r3, [r7, #6]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d102      	bne.n	801c43e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c438:	2301      	movs	r3, #1
 801c43a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c43c:	e0c1      	b.n	801c5c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	2204      	movs	r2, #4
 801c442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	2200      	movs	r2, #0
 801c44a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	68ba      	ldr	r2, [r7, #8]
 801c450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	88fa      	ldrh	r2, [r7, #6]
 801c456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	88fa      	ldrh	r2, [r7, #6]
 801c45c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	2200      	movs	r2, #0
 801c462:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	2200      	movs	r2, #0
 801c468:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	2200      	movs	r2, #0
 801c46e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	2200      	movs	r2, #0
 801c474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	2200      	movs	r2, #0
 801c47a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	689b      	ldr	r3, [r3, #8]
 801c480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c484:	d10f      	bne.n	801c4a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	681a      	ldr	r2, [r3, #0]
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c494:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	681a      	ldr	r2, [r3, #0]
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c4a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4b0:	2b40      	cmp	r3, #64	; 0x40
 801c4b2:	d007      	beq.n	801c4c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	681a      	ldr	r2, [r3, #0]
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c4c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	68db      	ldr	r3, [r3, #12]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d162      	bne.n	801c592 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c4cc:	e02e      	b.n	801c52c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	689b      	ldr	r3, [r3, #8]
 801c4d4:	f003 0301 	and.w	r3, r3, #1
 801c4d8:	2b01      	cmp	r3, #1
 801c4da:	d115      	bne.n	801c508 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	f103 020c 	add.w	r2, r3, #12
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4e8:	7812      	ldrb	r2, [r2, #0]
 801c4ea:	b2d2      	uxtb	r2, r2
 801c4ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4f2:	1c5a      	adds	r2, r3, #1
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4fc:	b29b      	uxth	r3, r3
 801c4fe:	3b01      	subs	r3, #1
 801c500:	b29a      	uxth	r2, r3
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c506:	e011      	b.n	801c52c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c508:	f7fb fde4 	bl	80180d4 <HAL_GetTick>
 801c50c:	4602      	mov	r2, r0
 801c50e:	693b      	ldr	r3, [r7, #16]
 801c510:	1ad3      	subs	r3, r2, r3
 801c512:	683a      	ldr	r2, [r7, #0]
 801c514:	429a      	cmp	r2, r3
 801c516:	d803      	bhi.n	801c520 <HAL_SPI_Receive+0x166>
 801c518:	683b      	ldr	r3, [r7, #0]
 801c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c51e:	d102      	bne.n	801c526 <HAL_SPI_Receive+0x16c>
 801c520:	683b      	ldr	r3, [r7, #0]
 801c522:	2b00      	cmp	r3, #0
 801c524:	d102      	bne.n	801c52c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c526:	2303      	movs	r3, #3
 801c528:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c52a:	e04a      	b.n	801c5c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c530:	b29b      	uxth	r3, r3
 801c532:	2b00      	cmp	r3, #0
 801c534:	d1cb      	bne.n	801c4ce <HAL_SPI_Receive+0x114>
 801c536:	e031      	b.n	801c59c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	689b      	ldr	r3, [r3, #8]
 801c53e:	f003 0301 	and.w	r3, r3, #1
 801c542:	2b01      	cmp	r3, #1
 801c544:	d113      	bne.n	801c56e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	68da      	ldr	r2, [r3, #12]
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c550:	b292      	uxth	r2, r2
 801c552:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c558:	1c9a      	adds	r2, r3, #2
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c562:	b29b      	uxth	r3, r3
 801c564:	3b01      	subs	r3, #1
 801c566:	b29a      	uxth	r2, r3
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c56c:	e011      	b.n	801c592 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c56e:	f7fb fdb1 	bl	80180d4 <HAL_GetTick>
 801c572:	4602      	mov	r2, r0
 801c574:	693b      	ldr	r3, [r7, #16]
 801c576:	1ad3      	subs	r3, r2, r3
 801c578:	683a      	ldr	r2, [r7, #0]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d803      	bhi.n	801c586 <HAL_SPI_Receive+0x1cc>
 801c57e:	683b      	ldr	r3, [r7, #0]
 801c580:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c584:	d102      	bne.n	801c58c <HAL_SPI_Receive+0x1d2>
 801c586:	683b      	ldr	r3, [r7, #0]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d102      	bne.n	801c592 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c58c:	2303      	movs	r3, #3
 801c58e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c590:	e017      	b.n	801c5c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c596:	b29b      	uxth	r3, r3
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d1cd      	bne.n	801c538 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c59c:	693a      	ldr	r2, [r7, #16]
 801c59e:	6839      	ldr	r1, [r7, #0]
 801c5a0:	68f8      	ldr	r0, [r7, #12]
 801c5a2:	f000 fb63 	bl	801cc6c <SPI_EndRxTransaction>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d002      	beq.n	801c5b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	2220      	movs	r2, #32
 801c5b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d002      	beq.n	801c5c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c5ba:	2301      	movs	r3, #1
 801c5bc:	75fb      	strb	r3, [r7, #23]
 801c5be:	e000      	b.n	801c5c2 <HAL_SPI_Receive+0x208>
  }

error :
 801c5c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	2201      	movs	r2, #1
 801c5c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	3718      	adds	r7, #24
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd80      	pop	{r7, pc}

0801c5dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b08c      	sub	sp, #48	; 0x30
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	60f8      	str	r0, [r7, #12]
 801c5e4:	60b9      	str	r1, [r7, #8]
 801c5e6:	607a      	str	r2, [r7, #4]
 801c5e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c5fa:	2b01      	cmp	r3, #1
 801c5fc:	d101      	bne.n	801c602 <HAL_SPI_TransmitReceive+0x26>
 801c5fe:	2302      	movs	r3, #2
 801c600:	e18a      	b.n	801c918 <HAL_SPI_TransmitReceive+0x33c>
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	2201      	movs	r2, #1
 801c606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c60a:	f7fb fd63 	bl	80180d4 <HAL_GetTick>
 801c60e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	685b      	ldr	r3, [r3, #4]
 801c61e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c620:	887b      	ldrh	r3, [r7, #2]
 801c622:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c628:	2b01      	cmp	r3, #1
 801c62a:	d00f      	beq.n	801c64c <HAL_SPI_TransmitReceive+0x70>
 801c62c:	69fb      	ldr	r3, [r7, #28]
 801c62e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c632:	d107      	bne.n	801c644 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	689b      	ldr	r3, [r3, #8]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d103      	bne.n	801c644 <HAL_SPI_TransmitReceive+0x68>
 801c63c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c640:	2b04      	cmp	r3, #4
 801c642:	d003      	beq.n	801c64c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c644:	2302      	movs	r3, #2
 801c646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c64a:	e15b      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c64c:	68bb      	ldr	r3, [r7, #8]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d005      	beq.n	801c65e <HAL_SPI_TransmitReceive+0x82>
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d002      	beq.n	801c65e <HAL_SPI_TransmitReceive+0x82>
 801c658:	887b      	ldrh	r3, [r7, #2]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d103      	bne.n	801c666 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c65e:	2301      	movs	r3, #1
 801c660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c664:	e14e      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c66c:	b2db      	uxtb	r3, r3
 801c66e:	2b04      	cmp	r3, #4
 801c670:	d003      	beq.n	801c67a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	2205      	movs	r2, #5
 801c676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	2200      	movs	r2, #0
 801c67e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c680:	68fb      	ldr	r3, [r7, #12]
 801c682:	687a      	ldr	r2, [r7, #4]
 801c684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	887a      	ldrh	r2, [r7, #2]
 801c68a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	887a      	ldrh	r2, [r7, #2]
 801c690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	68ba      	ldr	r2, [r7, #8]
 801c696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	887a      	ldrh	r2, [r7, #2]
 801c69c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	887a      	ldrh	r2, [r7, #2]
 801c6a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6ba:	2b40      	cmp	r3, #64	; 0x40
 801c6bc:	d007      	beq.n	801c6ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	681a      	ldr	r2, [r3, #0]
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c6cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	68db      	ldr	r3, [r3, #12]
 801c6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c6d6:	d178      	bne.n	801c7ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	685b      	ldr	r3, [r3, #4]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d002      	beq.n	801c6e6 <HAL_SPI_TransmitReceive+0x10a>
 801c6e0:	8b7b      	ldrh	r3, [r7, #26]
 801c6e2:	2b01      	cmp	r3, #1
 801c6e4:	d166      	bne.n	801c7b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ea:	881a      	ldrh	r2, [r3, #0]
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6f6:	1c9a      	adds	r2, r3, #2
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c700:	b29b      	uxth	r3, r3
 801c702:	3b01      	subs	r3, #1
 801c704:	b29a      	uxth	r2, r3
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c70a:	e053      	b.n	801c7b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	689b      	ldr	r3, [r3, #8]
 801c712:	f003 0302 	and.w	r3, r3, #2
 801c716:	2b02      	cmp	r3, #2
 801c718:	d11b      	bne.n	801c752 <HAL_SPI_TransmitReceive+0x176>
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c71e:	b29b      	uxth	r3, r3
 801c720:	2b00      	cmp	r3, #0
 801c722:	d016      	beq.n	801c752 <HAL_SPI_TransmitReceive+0x176>
 801c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c726:	2b01      	cmp	r3, #1
 801c728:	d113      	bne.n	801c752 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c72e:	881a      	ldrh	r2, [r3, #0]
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c73a:	1c9a      	adds	r2, r3, #2
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c744:	b29b      	uxth	r3, r3
 801c746:	3b01      	subs	r3, #1
 801c748:	b29a      	uxth	r2, r3
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c74e:	2300      	movs	r3, #0
 801c750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	689b      	ldr	r3, [r3, #8]
 801c758:	f003 0301 	and.w	r3, r3, #1
 801c75c:	2b01      	cmp	r3, #1
 801c75e:	d119      	bne.n	801c794 <HAL_SPI_TransmitReceive+0x1b8>
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c764:	b29b      	uxth	r3, r3
 801c766:	2b00      	cmp	r3, #0
 801c768:	d014      	beq.n	801c794 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	68da      	ldr	r2, [r3, #12]
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c774:	b292      	uxth	r2, r2
 801c776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c77c:	1c9a      	adds	r2, r3, #2
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c786:	b29b      	uxth	r3, r3
 801c788:	3b01      	subs	r3, #1
 801c78a:	b29a      	uxth	r2, r3
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c790:	2301      	movs	r3, #1
 801c792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c794:	f7fb fc9e 	bl	80180d4 <HAL_GetTick>
 801c798:	4602      	mov	r2, r0
 801c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c79c:	1ad3      	subs	r3, r2, r3
 801c79e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d807      	bhi.n	801c7b4 <HAL_SPI_TransmitReceive+0x1d8>
 801c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7aa:	d003      	beq.n	801c7b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c7ac:	2303      	movs	r3, #3
 801c7ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c7b2:	e0a7      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d1a6      	bne.n	801c70c <HAL_SPI_TransmitReceive+0x130>
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7c2:	b29b      	uxth	r3, r3
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d1a1      	bne.n	801c70c <HAL_SPI_TransmitReceive+0x130>
 801c7c8:	e07c      	b.n	801c8c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	685b      	ldr	r3, [r3, #4]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d002      	beq.n	801c7d8 <HAL_SPI_TransmitReceive+0x1fc>
 801c7d2:	8b7b      	ldrh	r3, [r7, #26]
 801c7d4:	2b01      	cmp	r3, #1
 801c7d6:	d16b      	bne.n	801c8b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	330c      	adds	r3, #12
 801c7e2:	7812      	ldrb	r2, [r2, #0]
 801c7e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7ea:	1c5a      	adds	r2, r3, #1
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c7f4:	b29b      	uxth	r3, r3
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	b29a      	uxth	r2, r3
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7fe:	e057      	b.n	801c8b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	689b      	ldr	r3, [r3, #8]
 801c806:	f003 0302 	and.w	r3, r3, #2
 801c80a:	2b02      	cmp	r3, #2
 801c80c:	d11c      	bne.n	801c848 <HAL_SPI_TransmitReceive+0x26c>
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c812:	b29b      	uxth	r3, r3
 801c814:	2b00      	cmp	r3, #0
 801c816:	d017      	beq.n	801c848 <HAL_SPI_TransmitReceive+0x26c>
 801c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c81a:	2b01      	cmp	r3, #1
 801c81c:	d114      	bne.n	801c848 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	330c      	adds	r3, #12
 801c828:	7812      	ldrb	r2, [r2, #0]
 801c82a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c830:	1c5a      	adds	r2, r3, #1
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c83a:	b29b      	uxth	r3, r3
 801c83c:	3b01      	subs	r3, #1
 801c83e:	b29a      	uxth	r2, r3
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c844:	2300      	movs	r3, #0
 801c846:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	689b      	ldr	r3, [r3, #8]
 801c84e:	f003 0301 	and.w	r3, r3, #1
 801c852:	2b01      	cmp	r3, #1
 801c854:	d119      	bne.n	801c88a <HAL_SPI_TransmitReceive+0x2ae>
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d014      	beq.n	801c88a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	68da      	ldr	r2, [r3, #12]
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c86a:	b2d2      	uxtb	r2, r2
 801c86c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c872:	1c5a      	adds	r2, r3, #1
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c87c:	b29b      	uxth	r3, r3
 801c87e:	3b01      	subs	r3, #1
 801c880:	b29a      	uxth	r2, r3
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c886:	2301      	movs	r3, #1
 801c888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c88a:	f7fb fc23 	bl	80180d4 <HAL_GetTick>
 801c88e:	4602      	mov	r2, r0
 801c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c892:	1ad3      	subs	r3, r2, r3
 801c894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c896:	429a      	cmp	r2, r3
 801c898:	d803      	bhi.n	801c8a2 <HAL_SPI_TransmitReceive+0x2c6>
 801c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8a0:	d102      	bne.n	801c8a8 <HAL_SPI_TransmitReceive+0x2cc>
 801c8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d103      	bne.n	801c8b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c8a8:	2303      	movs	r3, #3
 801c8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c8ae:	e029      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8b4:	b29b      	uxth	r3, r3
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d1a2      	bne.n	801c800 <HAL_SPI_TransmitReceive+0x224>
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d19d      	bne.n	801c800 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c8c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c8c8:	68f8      	ldr	r0, [r7, #12]
 801c8ca:	f000 fa35 	bl	801cd38 <SPI_EndRxTxTransaction>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d006      	beq.n	801c8e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	2220      	movs	r2, #32
 801c8de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c8e0:	e010      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	689b      	ldr	r3, [r3, #8]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d10b      	bne.n	801c902 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c8ea:	2300      	movs	r3, #0
 801c8ec:	617b      	str	r3, [r7, #20]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	68db      	ldr	r3, [r3, #12]
 801c8f4:	617b      	str	r3, [r7, #20]
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	689b      	ldr	r3, [r3, #8]
 801c8fc:	617b      	str	r3, [r7, #20]
 801c8fe:	697b      	ldr	r3, [r7, #20]
 801c900:	e000      	b.n	801c904 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	2201      	movs	r2, #1
 801c908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	2200      	movs	r2, #0
 801c910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c918:	4618      	mov	r0, r3
 801c91a:	3730      	adds	r7, #48	; 0x30
 801c91c:	46bd      	mov	sp, r7
 801c91e:	bd80      	pop	{r7, pc}

0801c920 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b088      	sub	sp, #32
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	685b      	ldr	r3, [r3, #4]
 801c92e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	689b      	ldr	r3, [r3, #8]
 801c936:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c938:	69bb      	ldr	r3, [r7, #24]
 801c93a:	099b      	lsrs	r3, r3, #6
 801c93c:	f003 0301 	and.w	r3, r3, #1
 801c940:	2b00      	cmp	r3, #0
 801c942:	d10f      	bne.n	801c964 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c944:	69bb      	ldr	r3, [r7, #24]
 801c946:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d00a      	beq.n	801c964 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c94e:	69fb      	ldr	r3, [r7, #28]
 801c950:	099b      	lsrs	r3, r3, #6
 801c952:	f003 0301 	and.w	r3, r3, #1
 801c956:	2b00      	cmp	r3, #0
 801c958:	d004      	beq.n	801c964 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c95e:	6878      	ldr	r0, [r7, #4]
 801c960:	4798      	blx	r3
    return;
 801c962:	e0d7      	b.n	801cb14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c964:	69bb      	ldr	r3, [r7, #24]
 801c966:	085b      	lsrs	r3, r3, #1
 801c968:	f003 0301 	and.w	r3, r3, #1
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d00a      	beq.n	801c986 <HAL_SPI_IRQHandler+0x66>
 801c970:	69fb      	ldr	r3, [r7, #28]
 801c972:	09db      	lsrs	r3, r3, #7
 801c974:	f003 0301 	and.w	r3, r3, #1
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d004      	beq.n	801c986 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c980:	6878      	ldr	r0, [r7, #4]
 801c982:	4798      	blx	r3
    return;
 801c984:	e0c6      	b.n	801cb14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c986:	69bb      	ldr	r3, [r7, #24]
 801c988:	095b      	lsrs	r3, r3, #5
 801c98a:	f003 0301 	and.w	r3, r3, #1
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d10c      	bne.n	801c9ac <HAL_SPI_IRQHandler+0x8c>
 801c992:	69bb      	ldr	r3, [r7, #24]
 801c994:	099b      	lsrs	r3, r3, #6
 801c996:	f003 0301 	and.w	r3, r3, #1
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d106      	bne.n	801c9ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c99e:	69bb      	ldr	r3, [r7, #24]
 801c9a0:	0a1b      	lsrs	r3, r3, #8
 801c9a2:	f003 0301 	and.w	r3, r3, #1
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	f000 80b4 	beq.w	801cb14 <HAL_SPI_IRQHandler+0x1f4>
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	095b      	lsrs	r3, r3, #5
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	f000 80ad 	beq.w	801cb14 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c9ba:	69bb      	ldr	r3, [r7, #24]
 801c9bc:	099b      	lsrs	r3, r3, #6
 801c9be:	f003 0301 	and.w	r3, r3, #1
 801c9c2:	2b00      	cmp	r3, #0
 801c9c4:	d023      	beq.n	801ca0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c9cc:	b2db      	uxtb	r3, r3
 801c9ce:	2b03      	cmp	r3, #3
 801c9d0:	d011      	beq.n	801c9f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9d6:	f043 0204 	orr.w	r2, r3, #4
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c9de:	2300      	movs	r3, #0
 801c9e0:	617b      	str	r3, [r7, #20]
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	68db      	ldr	r3, [r3, #12]
 801c9e8:	617b      	str	r3, [r7, #20]
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	689b      	ldr	r3, [r3, #8]
 801c9f0:	617b      	str	r3, [r7, #20]
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	e00b      	b.n	801ca0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	613b      	str	r3, [r7, #16]
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	68db      	ldr	r3, [r3, #12]
 801ca00:	613b      	str	r3, [r7, #16]
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	689b      	ldr	r3, [r3, #8]
 801ca08:	613b      	str	r3, [r7, #16]
 801ca0a:	693b      	ldr	r3, [r7, #16]
        return;
 801ca0c:	e082      	b.n	801cb14 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ca0e:	69bb      	ldr	r3, [r7, #24]
 801ca10:	095b      	lsrs	r3, r3, #5
 801ca12:	f003 0301 	and.w	r3, r3, #1
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d014      	beq.n	801ca44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca1e:	f043 0201 	orr.w	r2, r3, #1
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ca26:	2300      	movs	r3, #0
 801ca28:	60fb      	str	r3, [r7, #12]
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	689b      	ldr	r3, [r3, #8]
 801ca30:	60fb      	str	r3, [r7, #12]
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	681a      	ldr	r2, [r3, #0]
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca40:	601a      	str	r2, [r3, #0]
 801ca42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ca44:	69bb      	ldr	r3, [r7, #24]
 801ca46:	0a1b      	lsrs	r3, r3, #8
 801ca48:	f003 0301 	and.w	r3, r3, #1
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d00c      	beq.n	801ca6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca54:	f043 0208 	orr.w	r2, r3, #8
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	60bb      	str	r3, [r7, #8]
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	689b      	ldr	r3, [r3, #8]
 801ca66:	60bb      	str	r3, [r7, #8]
 801ca68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d04f      	beq.n	801cb12 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	685a      	ldr	r2, [r3, #4]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ca80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	2201      	movs	r2, #1
 801ca86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801ca8a:	69fb      	ldr	r3, [r7, #28]
 801ca8c:	f003 0302 	and.w	r3, r3, #2
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d104      	bne.n	801ca9e <HAL_SPI_IRQHandler+0x17e>
 801ca94:	69fb      	ldr	r3, [r7, #28]
 801ca96:	f003 0301 	and.w	r3, r3, #1
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d034      	beq.n	801cb08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	685a      	ldr	r2, [r3, #4]
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	f022 0203 	bic.w	r2, r2, #3
 801caac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d011      	beq.n	801cada <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801caba:	4a18      	ldr	r2, [pc, #96]	; (801cb1c <HAL_SPI_IRQHandler+0x1fc>)
 801cabc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cac2:	4618      	mov	r0, r3
 801cac4:	f7fb fffe 	bl	8018ac4 <HAL_DMA_Abort_IT>
 801cac8:	4603      	mov	r3, r0
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d005      	beq.n	801cada <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d016      	beq.n	801cb10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cae6:	4a0d      	ldr	r2, [pc, #52]	; (801cb1c <HAL_SPI_IRQHandler+0x1fc>)
 801cae8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801caee:	4618      	mov	r0, r3
 801caf0:	f7fb ffe8 	bl	8018ac4 <HAL_DMA_Abort_IT>
 801caf4:	4603      	mov	r3, r0
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d00a      	beq.n	801cb10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cafe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cb06:	e003      	b.n	801cb10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f000 f809 	bl	801cb20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cb0e:	e000      	b.n	801cb12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cb10:	bf00      	nop
    return;
 801cb12:	bf00      	nop
  }
}
 801cb14:	3720      	adds	r7, #32
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bd80      	pop	{r7, pc}
 801cb1a:	bf00      	nop
 801cb1c:	0801cb35 	.word	0x0801cb35

0801cb20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cb20:	b480      	push	{r7}
 801cb22:	b083      	sub	sp, #12
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cb28:	bf00      	nop
 801cb2a:	370c      	adds	r7, #12
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb32:	4770      	bx	lr

0801cb34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b084      	sub	sp, #16
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	2200      	movs	r2, #0
 801cb46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cb4e:	68f8      	ldr	r0, [r7, #12]
 801cb50:	f7ff ffe6 	bl	801cb20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cb54:	bf00      	nop
 801cb56:	3710      	adds	r7, #16
 801cb58:	46bd      	mov	sp, r7
 801cb5a:	bd80      	pop	{r7, pc}

0801cb5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b088      	sub	sp, #32
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	60f8      	str	r0, [r7, #12]
 801cb64:	60b9      	str	r1, [r7, #8]
 801cb66:	603b      	str	r3, [r7, #0]
 801cb68:	4613      	mov	r3, r2
 801cb6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cb6c:	f7fb fab2 	bl	80180d4 <HAL_GetTick>
 801cb70:	4602      	mov	r2, r0
 801cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb74:	1a9b      	subs	r3, r3, r2
 801cb76:	683a      	ldr	r2, [r7, #0]
 801cb78:	4413      	add	r3, r2
 801cb7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cb7c:	f7fb faaa 	bl	80180d4 <HAL_GetTick>
 801cb80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cb82:	4b39      	ldr	r3, [pc, #228]	; (801cc68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	015b      	lsls	r3, r3, #5
 801cb88:	0d1b      	lsrs	r3, r3, #20
 801cb8a:	69fa      	ldr	r2, [r7, #28]
 801cb8c:	fb02 f303 	mul.w	r3, r2, r3
 801cb90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cb92:	e054      	b.n	801cc3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb9a:	d050      	beq.n	801cc3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cb9c:	f7fb fa9a 	bl	80180d4 <HAL_GetTick>
 801cba0:	4602      	mov	r2, r0
 801cba2:	69bb      	ldr	r3, [r7, #24]
 801cba4:	1ad3      	subs	r3, r2, r3
 801cba6:	69fa      	ldr	r2, [r7, #28]
 801cba8:	429a      	cmp	r2, r3
 801cbaa:	d902      	bls.n	801cbb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801cbac:	69fb      	ldr	r3, [r7, #28]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d13d      	bne.n	801cc2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	685a      	ldr	r2, [r3, #4]
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cbc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	685b      	ldr	r3, [r3, #4]
 801cbc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cbca:	d111      	bne.n	801cbf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	689b      	ldr	r3, [r3, #8]
 801cbd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cbd4:	d004      	beq.n	801cbe0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	689b      	ldr	r3, [r3, #8]
 801cbda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cbde:	d107      	bne.n	801cbf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	681a      	ldr	r2, [r3, #0]
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cbee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cbf8:	d10f      	bne.n	801cc1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	681a      	ldr	r2, [r3, #0]
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc08:	601a      	str	r2, [r3, #0]
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	681a      	ldr	r2, [r3, #0]
 801cc10:	68fb      	ldr	r3, [r7, #12]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cc18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	2201      	movs	r2, #1
 801cc1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	2200      	movs	r2, #0
 801cc26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cc2a:	2303      	movs	r3, #3
 801cc2c:	e017      	b.n	801cc5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d101      	bne.n	801cc38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cc34:	2300      	movs	r3, #0
 801cc36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cc38:	697b      	ldr	r3, [r7, #20]
 801cc3a:	3b01      	subs	r3, #1
 801cc3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	689a      	ldr	r2, [r3, #8]
 801cc44:	68bb      	ldr	r3, [r7, #8]
 801cc46:	4013      	ands	r3, r2
 801cc48:	68ba      	ldr	r2, [r7, #8]
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	bf0c      	ite	eq
 801cc4e:	2301      	moveq	r3, #1
 801cc50:	2300      	movne	r3, #0
 801cc52:	b2db      	uxtb	r3, r3
 801cc54:	461a      	mov	r2, r3
 801cc56:	79fb      	ldrb	r3, [r7, #7]
 801cc58:	429a      	cmp	r2, r3
 801cc5a:	d19b      	bne.n	801cb94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cc5c:	2300      	movs	r3, #0
}
 801cc5e:	4618      	mov	r0, r3
 801cc60:	3720      	adds	r7, #32
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bd80      	pop	{r7, pc}
 801cc66:	bf00      	nop
 801cc68:	20000564 	.word	0x20000564

0801cc6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b086      	sub	sp, #24
 801cc70:	af02      	add	r7, sp, #8
 801cc72:	60f8      	str	r0, [r7, #12]
 801cc74:	60b9      	str	r1, [r7, #8]
 801cc76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	685b      	ldr	r3, [r3, #4]
 801cc7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc80:	d111      	bne.n	801cca6 <SPI_EndRxTransaction+0x3a>
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	689b      	ldr	r3, [r3, #8]
 801cc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc8a:	d004      	beq.n	801cc96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	689b      	ldr	r3, [r3, #8]
 801cc90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc94:	d107      	bne.n	801cca6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	681a      	ldr	r2, [r3, #0]
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cca4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	685b      	ldr	r3, [r3, #4]
 801ccaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccae:	d12a      	bne.n	801cd06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	689b      	ldr	r3, [r3, #8]
 801ccb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ccb8:	d012      	beq.n	801cce0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	9300      	str	r3, [sp, #0]
 801ccbe:	68bb      	ldr	r3, [r7, #8]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	2180      	movs	r1, #128	; 0x80
 801ccc4:	68f8      	ldr	r0, [r7, #12]
 801ccc6:	f7ff ff49 	bl	801cb5c <SPI_WaitFlagStateUntilTimeout>
 801ccca:	4603      	mov	r3, r0
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d02d      	beq.n	801cd2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccd4:	f043 0220 	orr.w	r2, r3, #32
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801ccdc:	2303      	movs	r3, #3
 801ccde:	e026      	b.n	801cd2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	9300      	str	r3, [sp, #0]
 801cce4:	68bb      	ldr	r3, [r7, #8]
 801cce6:	2200      	movs	r2, #0
 801cce8:	2101      	movs	r1, #1
 801ccea:	68f8      	ldr	r0, [r7, #12]
 801ccec:	f7ff ff36 	bl	801cb5c <SPI_WaitFlagStateUntilTimeout>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d01a      	beq.n	801cd2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccfa:	f043 0220 	orr.w	r2, r3, #32
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd02:	2303      	movs	r3, #3
 801cd04:	e013      	b.n	801cd2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	9300      	str	r3, [sp, #0]
 801cd0a:	68bb      	ldr	r3, [r7, #8]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	2101      	movs	r1, #1
 801cd10:	68f8      	ldr	r0, [r7, #12]
 801cd12:	f7ff ff23 	bl	801cb5c <SPI_WaitFlagStateUntilTimeout>
 801cd16:	4603      	mov	r3, r0
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d007      	beq.n	801cd2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd1c:	68fb      	ldr	r3, [r7, #12]
 801cd1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd20:	f043 0220 	orr.w	r2, r3, #32
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd28:	2303      	movs	r3, #3
 801cd2a:	e000      	b.n	801cd2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cd2c:	2300      	movs	r3, #0
}
 801cd2e:	4618      	mov	r0, r3
 801cd30:	3710      	adds	r7, #16
 801cd32:	46bd      	mov	sp, r7
 801cd34:	bd80      	pop	{r7, pc}
	...

0801cd38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b088      	sub	sp, #32
 801cd3c:	af02      	add	r7, sp, #8
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cd44:	4b1b      	ldr	r3, [pc, #108]	; (801cdb4 <SPI_EndRxTxTransaction+0x7c>)
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	4a1b      	ldr	r2, [pc, #108]	; (801cdb8 <SPI_EndRxTxTransaction+0x80>)
 801cd4a:	fba2 2303 	umull	r2, r3, r2, r3
 801cd4e:	0d5b      	lsrs	r3, r3, #21
 801cd50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd54:	fb02 f303 	mul.w	r3, r2, r3
 801cd58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd62:	d112      	bne.n	801cd8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	9300      	str	r3, [sp, #0]
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	2180      	movs	r1, #128	; 0x80
 801cd6e:	68f8      	ldr	r0, [r7, #12]
 801cd70:	f7ff fef4 	bl	801cb5c <SPI_WaitFlagStateUntilTimeout>
 801cd74:	4603      	mov	r3, r0
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d016      	beq.n	801cda8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd7e:	f043 0220 	orr.w	r2, r3, #32
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd86:	2303      	movs	r3, #3
 801cd88:	e00f      	b.n	801cdaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cd8a:	697b      	ldr	r3, [r7, #20]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d00a      	beq.n	801cda6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801cd90:	697b      	ldr	r3, [r7, #20]
 801cd92:	3b01      	subs	r3, #1
 801cd94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	689b      	ldr	r3, [r3, #8]
 801cd9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cda0:	2b80      	cmp	r3, #128	; 0x80
 801cda2:	d0f2      	beq.n	801cd8a <SPI_EndRxTxTransaction+0x52>
 801cda4:	e000      	b.n	801cda8 <SPI_EndRxTxTransaction+0x70>
        break;
 801cda6:	bf00      	nop
  }

  return HAL_OK;
 801cda8:	2300      	movs	r3, #0
}
 801cdaa:	4618      	mov	r0, r3
 801cdac:	3718      	adds	r7, #24
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	bd80      	pop	{r7, pc}
 801cdb2:	bf00      	nop
 801cdb4:	20000564 	.word	0x20000564
 801cdb8:	165e9f81 	.word	0x165e9f81

0801cdbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b082      	sub	sp, #8
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d101      	bne.n	801cdce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801cdca:	2301      	movs	r3, #1
 801cdcc:	e041      	b.n	801ce52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cdd4:	b2db      	uxtb	r3, r3
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d106      	bne.n	801cde8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	2200      	movs	r2, #0
 801cdde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801cde2:	6878      	ldr	r0, [r7, #4]
 801cde4:	f7fa fd76 	bl	80178d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2202      	movs	r2, #2
 801cdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681a      	ldr	r2, [r3, #0]
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	3304      	adds	r3, #4
 801cdf8:	4619      	mov	r1, r3
 801cdfa:	4610      	mov	r0, r2
 801cdfc:	f000 faf2 	bl	801d3e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	2201      	movs	r2, #1
 801ce04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	2201      	movs	r2, #1
 801ce0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	2201      	movs	r2, #1
 801ce14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	2201      	movs	r2, #1
 801ce1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	2201      	movs	r2, #1
 801ce24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	2201      	movs	r2, #1
 801ce2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2201      	movs	r2, #1
 801ce34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	2201      	movs	r2, #1
 801ce3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2201      	movs	r2, #1
 801ce44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ce50:	2300      	movs	r3, #0
}
 801ce52:	4618      	mov	r0, r3
 801ce54:	3708      	adds	r7, #8
 801ce56:	46bd      	mov	sp, r7
 801ce58:	bd80      	pop	{r7, pc}
	...

0801ce5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ce5c:	b480      	push	{r7}
 801ce5e:	b085      	sub	sp, #20
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce6a:	b2db      	uxtb	r3, r3
 801ce6c:	2b01      	cmp	r3, #1
 801ce6e:	d001      	beq.n	801ce74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ce70:	2301      	movs	r3, #1
 801ce72:	e04e      	b.n	801cf12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2202      	movs	r2, #2
 801ce78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	68da      	ldr	r2, [r3, #12]
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	f042 0201 	orr.w	r2, r2, #1
 801ce8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	4a23      	ldr	r2, [pc, #140]	; (801cf20 <HAL_TIM_Base_Start_IT+0xc4>)
 801ce92:	4293      	cmp	r3, r2
 801ce94:	d022      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce9e:	d01d      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	4a1f      	ldr	r2, [pc, #124]	; (801cf24 <HAL_TIM_Base_Start_IT+0xc8>)
 801cea6:	4293      	cmp	r3, r2
 801cea8:	d018      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	4a1e      	ldr	r2, [pc, #120]	; (801cf28 <HAL_TIM_Base_Start_IT+0xcc>)
 801ceb0:	4293      	cmp	r3, r2
 801ceb2:	d013      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	4a1c      	ldr	r2, [pc, #112]	; (801cf2c <HAL_TIM_Base_Start_IT+0xd0>)
 801ceba:	4293      	cmp	r3, r2
 801cebc:	d00e      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	4a1b      	ldr	r2, [pc, #108]	; (801cf30 <HAL_TIM_Base_Start_IT+0xd4>)
 801cec4:	4293      	cmp	r3, r2
 801cec6:	d009      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	4a19      	ldr	r2, [pc, #100]	; (801cf34 <HAL_TIM_Base_Start_IT+0xd8>)
 801cece:	4293      	cmp	r3, r2
 801ced0:	d004      	beq.n	801cedc <HAL_TIM_Base_Start_IT+0x80>
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	4a18      	ldr	r2, [pc, #96]	; (801cf38 <HAL_TIM_Base_Start_IT+0xdc>)
 801ced8:	4293      	cmp	r3, r2
 801ceda:	d111      	bne.n	801cf00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	689b      	ldr	r3, [r3, #8]
 801cee2:	f003 0307 	and.w	r3, r3, #7
 801cee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	2b06      	cmp	r3, #6
 801ceec:	d010      	beq.n	801cf10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	681a      	ldr	r2, [r3, #0]
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	f042 0201 	orr.w	r2, r2, #1
 801cefc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cefe:	e007      	b.n	801cf10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	681a      	ldr	r2, [r3, #0]
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	f042 0201 	orr.w	r2, r2, #1
 801cf0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf10:	2300      	movs	r3, #0
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	3714      	adds	r7, #20
 801cf16:	46bd      	mov	sp, r7
 801cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1c:	4770      	bx	lr
 801cf1e:	bf00      	nop
 801cf20:	40010000 	.word	0x40010000
 801cf24:	40000400 	.word	0x40000400
 801cf28:	40000800 	.word	0x40000800
 801cf2c:	40000c00 	.word	0x40000c00
 801cf30:	40010400 	.word	0x40010400
 801cf34:	40014000 	.word	0x40014000
 801cf38:	40001800 	.word	0x40001800

0801cf3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b082      	sub	sp, #8
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	691b      	ldr	r3, [r3, #16]
 801cf4a:	f003 0302 	and.w	r3, r3, #2
 801cf4e:	2b02      	cmp	r3, #2
 801cf50:	d122      	bne.n	801cf98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	68db      	ldr	r3, [r3, #12]
 801cf58:	f003 0302 	and.w	r3, r3, #2
 801cf5c:	2b02      	cmp	r3, #2
 801cf5e:	d11b      	bne.n	801cf98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	f06f 0202 	mvn.w	r2, #2
 801cf68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	2201      	movs	r2, #1
 801cf6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	699b      	ldr	r3, [r3, #24]
 801cf76:	f003 0303 	and.w	r3, r3, #3
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d003      	beq.n	801cf86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801cf7e:	6878      	ldr	r0, [r7, #4]
 801cf80:	f000 fa11 	bl	801d3a6 <HAL_TIM_IC_CaptureCallback>
 801cf84:	e005      	b.n	801cf92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801cf86:	6878      	ldr	r0, [r7, #4]
 801cf88:	f000 fa03 	bl	801d392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f000 fa14 	bl	801d3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	2200      	movs	r2, #0
 801cf96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	691b      	ldr	r3, [r3, #16]
 801cf9e:	f003 0304 	and.w	r3, r3, #4
 801cfa2:	2b04      	cmp	r3, #4
 801cfa4:	d122      	bne.n	801cfec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	68db      	ldr	r3, [r3, #12]
 801cfac:	f003 0304 	and.w	r3, r3, #4
 801cfb0:	2b04      	cmp	r3, #4
 801cfb2:	d11b      	bne.n	801cfec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	f06f 0204 	mvn.w	r2, #4
 801cfbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2202      	movs	r2, #2
 801cfc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	681b      	ldr	r3, [r3, #0]
 801cfc8:	699b      	ldr	r3, [r3, #24]
 801cfca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d003      	beq.n	801cfda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801cfd2:	6878      	ldr	r0, [r7, #4]
 801cfd4:	f000 f9e7 	bl	801d3a6 <HAL_TIM_IC_CaptureCallback>
 801cfd8:	e005      	b.n	801cfe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801cfda:	6878      	ldr	r0, [r7, #4]
 801cfdc:	f000 f9d9 	bl	801d392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f000 f9ea 	bl	801d3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	2200      	movs	r2, #0
 801cfea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	691b      	ldr	r3, [r3, #16]
 801cff2:	f003 0308 	and.w	r3, r3, #8
 801cff6:	2b08      	cmp	r3, #8
 801cff8:	d122      	bne.n	801d040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	68db      	ldr	r3, [r3, #12]
 801d000:	f003 0308 	and.w	r3, r3, #8
 801d004:	2b08      	cmp	r3, #8
 801d006:	d11b      	bne.n	801d040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	f06f 0208 	mvn.w	r2, #8
 801d010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	2204      	movs	r2, #4
 801d016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	69db      	ldr	r3, [r3, #28]
 801d01e:	f003 0303 	and.w	r3, r3, #3
 801d022:	2b00      	cmp	r3, #0
 801d024:	d003      	beq.n	801d02e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	f000 f9bd 	bl	801d3a6 <HAL_TIM_IC_CaptureCallback>
 801d02c:	e005      	b.n	801d03a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d02e:	6878      	ldr	r0, [r7, #4]
 801d030:	f000 f9af 	bl	801d392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d034:	6878      	ldr	r0, [r7, #4]
 801d036:	f000 f9c0 	bl	801d3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	2200      	movs	r2, #0
 801d03e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	691b      	ldr	r3, [r3, #16]
 801d046:	f003 0310 	and.w	r3, r3, #16
 801d04a:	2b10      	cmp	r3, #16
 801d04c:	d122      	bne.n	801d094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	68db      	ldr	r3, [r3, #12]
 801d054:	f003 0310 	and.w	r3, r3, #16
 801d058:	2b10      	cmp	r3, #16
 801d05a:	d11b      	bne.n	801d094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	f06f 0210 	mvn.w	r2, #16
 801d064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2208      	movs	r2, #8
 801d06a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	69db      	ldr	r3, [r3, #28]
 801d072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d076:	2b00      	cmp	r3, #0
 801d078:	d003      	beq.n	801d082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f000 f993 	bl	801d3a6 <HAL_TIM_IC_CaptureCallback>
 801d080:	e005      	b.n	801d08e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d082:	6878      	ldr	r0, [r7, #4]
 801d084:	f000 f985 	bl	801d392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d088:	6878      	ldr	r0, [r7, #4]
 801d08a:	f000 f996 	bl	801d3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2200      	movs	r2, #0
 801d092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	691b      	ldr	r3, [r3, #16]
 801d09a:	f003 0301 	and.w	r3, r3, #1
 801d09e:	2b01      	cmp	r3, #1
 801d0a0:	d10e      	bne.n	801d0c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	68db      	ldr	r3, [r3, #12]
 801d0a8:	f003 0301 	and.w	r3, r3, #1
 801d0ac:	2b01      	cmp	r3, #1
 801d0ae:	d107      	bne.n	801d0c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	f06f 0201 	mvn.w	r2, #1
 801d0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d0ba:	6878      	ldr	r0, [r7, #4]
 801d0bc:	f7fa fa16 	bl	80174ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	691b      	ldr	r3, [r3, #16]
 801d0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0ca:	2b80      	cmp	r3, #128	; 0x80
 801d0cc:	d10e      	bne.n	801d0ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	68db      	ldr	r3, [r3, #12]
 801d0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0d8:	2b80      	cmp	r3, #128	; 0x80
 801d0da:	d107      	bne.n	801d0ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	f000 fcec 	bl	801dac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d0f6:	2b40      	cmp	r3, #64	; 0x40
 801d0f8:	d10e      	bne.n	801d118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	68db      	ldr	r3, [r3, #12]
 801d100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d104:	2b40      	cmp	r3, #64	; 0x40
 801d106:	d107      	bne.n	801d118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d112:	6878      	ldr	r0, [r7, #4]
 801d114:	f000 f95b 	bl	801d3ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	691b      	ldr	r3, [r3, #16]
 801d11e:	f003 0320 	and.w	r3, r3, #32
 801d122:	2b20      	cmp	r3, #32
 801d124:	d10e      	bne.n	801d144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	68db      	ldr	r3, [r3, #12]
 801d12c:	f003 0320 	and.w	r3, r3, #32
 801d130:	2b20      	cmp	r3, #32
 801d132:	d107      	bne.n	801d144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	f06f 0220 	mvn.w	r2, #32
 801d13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d13e:	6878      	ldr	r0, [r7, #4]
 801d140:	f000 fcb6 	bl	801dab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d144:	bf00      	nop
 801d146:	3708      	adds	r7, #8
 801d148:	46bd      	mov	sp, r7
 801d14a:	bd80      	pop	{r7, pc}

0801d14c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b086      	sub	sp, #24
 801d150:	af00      	add	r7, sp, #0
 801d152:	60f8      	str	r0, [r7, #12]
 801d154:	60b9      	str	r1, [r7, #8]
 801d156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d158:	2300      	movs	r3, #0
 801d15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d162:	2b01      	cmp	r3, #1
 801d164:	d101      	bne.n	801d16a <HAL_TIM_OC_ConfigChannel+0x1e>
 801d166:	2302      	movs	r3, #2
 801d168:	e048      	b.n	801d1fc <HAL_TIM_OC_ConfigChannel+0xb0>
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	2201      	movs	r2, #1
 801d16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	2b0c      	cmp	r3, #12
 801d176:	d839      	bhi.n	801d1ec <HAL_TIM_OC_ConfigChannel+0xa0>
 801d178:	a201      	add	r2, pc, #4	; (adr r2, 801d180 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d17e:	bf00      	nop
 801d180:	0801d1b5 	.word	0x0801d1b5
 801d184:	0801d1ed 	.word	0x0801d1ed
 801d188:	0801d1ed 	.word	0x0801d1ed
 801d18c:	0801d1ed 	.word	0x0801d1ed
 801d190:	0801d1c3 	.word	0x0801d1c3
 801d194:	0801d1ed 	.word	0x0801d1ed
 801d198:	0801d1ed 	.word	0x0801d1ed
 801d19c:	0801d1ed 	.word	0x0801d1ed
 801d1a0:	0801d1d1 	.word	0x0801d1d1
 801d1a4:	0801d1ed 	.word	0x0801d1ed
 801d1a8:	0801d1ed 	.word	0x0801d1ed
 801d1ac:	0801d1ed 	.word	0x0801d1ed
 801d1b0:	0801d1df 	.word	0x0801d1df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	68b9      	ldr	r1, [r7, #8]
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f000 f9b2 	bl	801d524 <TIM_OC1_SetConfig>
      break;
 801d1c0:	e017      	b.n	801d1f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d1c2:	68fb      	ldr	r3, [r7, #12]
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	68b9      	ldr	r1, [r7, #8]
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f000 fa1b 	bl	801d604 <TIM_OC2_SetConfig>
      break;
 801d1ce:	e010      	b.n	801d1f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	68b9      	ldr	r1, [r7, #8]
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f000 fa8a 	bl	801d6f0 <TIM_OC3_SetConfig>
      break;
 801d1dc:	e009      	b.n	801d1f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	68b9      	ldr	r1, [r7, #8]
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f000 faf7 	bl	801d7d8 <TIM_OC4_SetConfig>
      break;
 801d1ea:	e002      	b.n	801d1f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d1ec:	2301      	movs	r3, #1
 801d1ee:	75fb      	strb	r3, [r7, #23]
      break;
 801d1f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3718      	adds	r7, #24
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}

0801d204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b084      	sub	sp, #16
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
 801d20c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d20e:	2300      	movs	r3, #0
 801d210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d218:	2b01      	cmp	r3, #1
 801d21a:	d101      	bne.n	801d220 <HAL_TIM_ConfigClockSource+0x1c>
 801d21c:	2302      	movs	r3, #2
 801d21e:	e0b4      	b.n	801d38a <HAL_TIM_ConfigClockSource+0x186>
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	2201      	movs	r2, #1
 801d224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	2202      	movs	r2, #2
 801d22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	689b      	ldr	r3, [r3, #8]
 801d236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d238:	68bb      	ldr	r3, [r7, #8]
 801d23a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d23e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	68ba      	ldr	r2, [r7, #8]
 801d24e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d250:	683b      	ldr	r3, [r7, #0]
 801d252:	681b      	ldr	r3, [r3, #0]
 801d254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d258:	d03e      	beq.n	801d2d8 <HAL_TIM_ConfigClockSource+0xd4>
 801d25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d25e:	f200 8087 	bhi.w	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d266:	f000 8086 	beq.w	801d376 <HAL_TIM_ConfigClockSource+0x172>
 801d26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d26e:	d87f      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d270:	2b70      	cmp	r3, #112	; 0x70
 801d272:	d01a      	beq.n	801d2aa <HAL_TIM_ConfigClockSource+0xa6>
 801d274:	2b70      	cmp	r3, #112	; 0x70
 801d276:	d87b      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d278:	2b60      	cmp	r3, #96	; 0x60
 801d27a:	d050      	beq.n	801d31e <HAL_TIM_ConfigClockSource+0x11a>
 801d27c:	2b60      	cmp	r3, #96	; 0x60
 801d27e:	d877      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d280:	2b50      	cmp	r3, #80	; 0x50
 801d282:	d03c      	beq.n	801d2fe <HAL_TIM_ConfigClockSource+0xfa>
 801d284:	2b50      	cmp	r3, #80	; 0x50
 801d286:	d873      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d288:	2b40      	cmp	r3, #64	; 0x40
 801d28a:	d058      	beq.n	801d33e <HAL_TIM_ConfigClockSource+0x13a>
 801d28c:	2b40      	cmp	r3, #64	; 0x40
 801d28e:	d86f      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d290:	2b30      	cmp	r3, #48	; 0x30
 801d292:	d064      	beq.n	801d35e <HAL_TIM_ConfigClockSource+0x15a>
 801d294:	2b30      	cmp	r3, #48	; 0x30
 801d296:	d86b      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d298:	2b20      	cmp	r3, #32
 801d29a:	d060      	beq.n	801d35e <HAL_TIM_ConfigClockSource+0x15a>
 801d29c:	2b20      	cmp	r3, #32
 801d29e:	d867      	bhi.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d05c      	beq.n	801d35e <HAL_TIM_ConfigClockSource+0x15a>
 801d2a4:	2b10      	cmp	r3, #16
 801d2a6:	d05a      	beq.n	801d35e <HAL_TIM_ConfigClockSource+0x15a>
 801d2a8:	e062      	b.n	801d370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	6818      	ldr	r0, [r3, #0]
 801d2ae:	683b      	ldr	r3, [r7, #0]
 801d2b0:	6899      	ldr	r1, [r3, #8]
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	685a      	ldr	r2, [r3, #4]
 801d2b6:	683b      	ldr	r3, [r7, #0]
 801d2b8:	68db      	ldr	r3, [r3, #12]
 801d2ba:	f000 fb5d 	bl	801d978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	689b      	ldr	r3, [r3, #8]
 801d2c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d2cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	68ba      	ldr	r2, [r7, #8]
 801d2d4:	609a      	str	r2, [r3, #8]
      break;
 801d2d6:	e04f      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	6818      	ldr	r0, [r3, #0]
 801d2dc:	683b      	ldr	r3, [r7, #0]
 801d2de:	6899      	ldr	r1, [r3, #8]
 801d2e0:	683b      	ldr	r3, [r7, #0]
 801d2e2:	685a      	ldr	r2, [r3, #4]
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	68db      	ldr	r3, [r3, #12]
 801d2e8:	f000 fb46 	bl	801d978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	689a      	ldr	r2, [r3, #8]
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d2fa:	609a      	str	r2, [r3, #8]
      break;
 801d2fc:	e03c      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	6818      	ldr	r0, [r3, #0]
 801d302:	683b      	ldr	r3, [r7, #0]
 801d304:	6859      	ldr	r1, [r3, #4]
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	68db      	ldr	r3, [r3, #12]
 801d30a:	461a      	mov	r2, r3
 801d30c:	f000 faba 	bl	801d884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	2150      	movs	r1, #80	; 0x50
 801d316:	4618      	mov	r0, r3
 801d318:	f000 fb13 	bl	801d942 <TIM_ITRx_SetConfig>
      break;
 801d31c:	e02c      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	6818      	ldr	r0, [r3, #0]
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	6859      	ldr	r1, [r3, #4]
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	68db      	ldr	r3, [r3, #12]
 801d32a:	461a      	mov	r2, r3
 801d32c:	f000 fad9 	bl	801d8e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	2160      	movs	r1, #96	; 0x60
 801d336:	4618      	mov	r0, r3
 801d338:	f000 fb03 	bl	801d942 <TIM_ITRx_SetConfig>
      break;
 801d33c:	e01c      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	6818      	ldr	r0, [r3, #0]
 801d342:	683b      	ldr	r3, [r7, #0]
 801d344:	6859      	ldr	r1, [r3, #4]
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	68db      	ldr	r3, [r3, #12]
 801d34a:	461a      	mov	r2, r3
 801d34c:	f000 fa9a 	bl	801d884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	2140      	movs	r1, #64	; 0x40
 801d356:	4618      	mov	r0, r3
 801d358:	f000 faf3 	bl	801d942 <TIM_ITRx_SetConfig>
      break;
 801d35c:	e00c      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681a      	ldr	r2, [r3, #0]
 801d362:	683b      	ldr	r3, [r7, #0]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	4619      	mov	r1, r3
 801d368:	4610      	mov	r0, r2
 801d36a:	f000 faea 	bl	801d942 <TIM_ITRx_SetConfig>
      break;
 801d36e:	e003      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d370:	2301      	movs	r3, #1
 801d372:	73fb      	strb	r3, [r7, #15]
      break;
 801d374:	e000      	b.n	801d378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	2201      	movs	r2, #1
 801d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	2200      	movs	r2, #0
 801d384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d388:	7bfb      	ldrb	r3, [r7, #15]
}
 801d38a:	4618      	mov	r0, r3
 801d38c:	3710      	adds	r7, #16
 801d38e:	46bd      	mov	sp, r7
 801d390:	bd80      	pop	{r7, pc}

0801d392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d392:	b480      	push	{r7}
 801d394:	b083      	sub	sp, #12
 801d396:	af00      	add	r7, sp, #0
 801d398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d39a:	bf00      	nop
 801d39c:	370c      	adds	r7, #12
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a4:	4770      	bx	lr

0801d3a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d3a6:	b480      	push	{r7}
 801d3a8:	b083      	sub	sp, #12
 801d3aa:	af00      	add	r7, sp, #0
 801d3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d3ae:	bf00      	nop
 801d3b0:	370c      	adds	r7, #12
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b8:	4770      	bx	lr

0801d3ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d3ba:	b480      	push	{r7}
 801d3bc:	b083      	sub	sp, #12
 801d3be:	af00      	add	r7, sp, #0
 801d3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d3c2:	bf00      	nop
 801d3c4:	370c      	adds	r7, #12
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3cc:	4770      	bx	lr

0801d3ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d3ce:	b480      	push	{r7}
 801d3d0:	b083      	sub	sp, #12
 801d3d2:	af00      	add	r7, sp, #0
 801d3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d3d6:	bf00      	nop
 801d3d8:	370c      	adds	r7, #12
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e0:	4770      	bx	lr
	...

0801d3e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d3e4:	b480      	push	{r7}
 801d3e6:	b085      	sub	sp, #20
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	6078      	str	r0, [r7, #4]
 801d3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	4a40      	ldr	r2, [pc, #256]	; (801d4f8 <TIM_Base_SetConfig+0x114>)
 801d3f8:	4293      	cmp	r3, r2
 801d3fa:	d013      	beq.n	801d424 <TIM_Base_SetConfig+0x40>
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d402:	d00f      	beq.n	801d424 <TIM_Base_SetConfig+0x40>
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	4a3d      	ldr	r2, [pc, #244]	; (801d4fc <TIM_Base_SetConfig+0x118>)
 801d408:	4293      	cmp	r3, r2
 801d40a:	d00b      	beq.n	801d424 <TIM_Base_SetConfig+0x40>
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	4a3c      	ldr	r2, [pc, #240]	; (801d500 <TIM_Base_SetConfig+0x11c>)
 801d410:	4293      	cmp	r3, r2
 801d412:	d007      	beq.n	801d424 <TIM_Base_SetConfig+0x40>
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	4a3b      	ldr	r2, [pc, #236]	; (801d504 <TIM_Base_SetConfig+0x120>)
 801d418:	4293      	cmp	r3, r2
 801d41a:	d003      	beq.n	801d424 <TIM_Base_SetConfig+0x40>
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	4a3a      	ldr	r2, [pc, #232]	; (801d508 <TIM_Base_SetConfig+0x124>)
 801d420:	4293      	cmp	r3, r2
 801d422:	d108      	bne.n	801d436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d42a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d42c:	683b      	ldr	r3, [r7, #0]
 801d42e:	685b      	ldr	r3, [r3, #4]
 801d430:	68fa      	ldr	r2, [r7, #12]
 801d432:	4313      	orrs	r3, r2
 801d434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	4a2f      	ldr	r2, [pc, #188]	; (801d4f8 <TIM_Base_SetConfig+0x114>)
 801d43a:	4293      	cmp	r3, r2
 801d43c:	d02b      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d444:	d027      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	4a2c      	ldr	r2, [pc, #176]	; (801d4fc <TIM_Base_SetConfig+0x118>)
 801d44a:	4293      	cmp	r3, r2
 801d44c:	d023      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	4a2b      	ldr	r2, [pc, #172]	; (801d500 <TIM_Base_SetConfig+0x11c>)
 801d452:	4293      	cmp	r3, r2
 801d454:	d01f      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	4a2a      	ldr	r2, [pc, #168]	; (801d504 <TIM_Base_SetConfig+0x120>)
 801d45a:	4293      	cmp	r3, r2
 801d45c:	d01b      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	4a29      	ldr	r2, [pc, #164]	; (801d508 <TIM_Base_SetConfig+0x124>)
 801d462:	4293      	cmp	r3, r2
 801d464:	d017      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	4a28      	ldr	r2, [pc, #160]	; (801d50c <TIM_Base_SetConfig+0x128>)
 801d46a:	4293      	cmp	r3, r2
 801d46c:	d013      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	4a27      	ldr	r2, [pc, #156]	; (801d510 <TIM_Base_SetConfig+0x12c>)
 801d472:	4293      	cmp	r3, r2
 801d474:	d00f      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	4a26      	ldr	r2, [pc, #152]	; (801d514 <TIM_Base_SetConfig+0x130>)
 801d47a:	4293      	cmp	r3, r2
 801d47c:	d00b      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	4a25      	ldr	r2, [pc, #148]	; (801d518 <TIM_Base_SetConfig+0x134>)
 801d482:	4293      	cmp	r3, r2
 801d484:	d007      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	4a24      	ldr	r2, [pc, #144]	; (801d51c <TIM_Base_SetConfig+0x138>)
 801d48a:	4293      	cmp	r3, r2
 801d48c:	d003      	beq.n	801d496 <TIM_Base_SetConfig+0xb2>
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	4a23      	ldr	r2, [pc, #140]	; (801d520 <TIM_Base_SetConfig+0x13c>)
 801d492:	4293      	cmp	r3, r2
 801d494:	d108      	bne.n	801d4a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d49c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d49e:	683b      	ldr	r3, [r7, #0]
 801d4a0:	68db      	ldr	r3, [r3, #12]
 801d4a2:	68fa      	ldr	r2, [r7, #12]
 801d4a4:	4313      	orrs	r3, r2
 801d4a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	695b      	ldr	r3, [r3, #20]
 801d4b2:	4313      	orrs	r3, r2
 801d4b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	68fa      	ldr	r2, [r7, #12]
 801d4ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	689a      	ldr	r2, [r3, #8]
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d4c4:	683b      	ldr	r3, [r7, #0]
 801d4c6:	681a      	ldr	r2, [r3, #0]
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	4a0a      	ldr	r2, [pc, #40]	; (801d4f8 <TIM_Base_SetConfig+0x114>)
 801d4d0:	4293      	cmp	r3, r2
 801d4d2:	d003      	beq.n	801d4dc <TIM_Base_SetConfig+0xf8>
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	4a0c      	ldr	r2, [pc, #48]	; (801d508 <TIM_Base_SetConfig+0x124>)
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	d103      	bne.n	801d4e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d4dc:	683b      	ldr	r3, [r7, #0]
 801d4de:	691a      	ldr	r2, [r3, #16]
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	2201      	movs	r2, #1
 801d4e8:	615a      	str	r2, [r3, #20]
}
 801d4ea:	bf00      	nop
 801d4ec:	3714      	adds	r7, #20
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f4:	4770      	bx	lr
 801d4f6:	bf00      	nop
 801d4f8:	40010000 	.word	0x40010000
 801d4fc:	40000400 	.word	0x40000400
 801d500:	40000800 	.word	0x40000800
 801d504:	40000c00 	.word	0x40000c00
 801d508:	40010400 	.word	0x40010400
 801d50c:	40014000 	.word	0x40014000
 801d510:	40014400 	.word	0x40014400
 801d514:	40014800 	.word	0x40014800
 801d518:	40001800 	.word	0x40001800
 801d51c:	40001c00 	.word	0x40001c00
 801d520:	40002000 	.word	0x40002000

0801d524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d524:	b480      	push	{r7}
 801d526:	b087      	sub	sp, #28
 801d528:	af00      	add	r7, sp, #0
 801d52a:	6078      	str	r0, [r7, #4]
 801d52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d52e:	687b      	ldr	r3, [r7, #4]
 801d530:	6a1b      	ldr	r3, [r3, #32]
 801d532:	f023 0201 	bic.w	r2, r3, #1
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	6a1b      	ldr	r3, [r3, #32]
 801d53e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	685b      	ldr	r3, [r3, #4]
 801d544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	699b      	ldr	r3, [r3, #24]
 801d54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	f023 0303 	bic.w	r3, r3, #3
 801d55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d55c:	683b      	ldr	r3, [r7, #0]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	68fa      	ldr	r2, [r7, #12]
 801d562:	4313      	orrs	r3, r2
 801d564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d566:	697b      	ldr	r3, [r7, #20]
 801d568:	f023 0302 	bic.w	r3, r3, #2
 801d56c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d56e:	683b      	ldr	r3, [r7, #0]
 801d570:	689b      	ldr	r3, [r3, #8]
 801d572:	697a      	ldr	r2, [r7, #20]
 801d574:	4313      	orrs	r3, r2
 801d576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	4a20      	ldr	r2, [pc, #128]	; (801d5fc <TIM_OC1_SetConfig+0xd8>)
 801d57c:	4293      	cmp	r3, r2
 801d57e:	d003      	beq.n	801d588 <TIM_OC1_SetConfig+0x64>
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	4a1f      	ldr	r2, [pc, #124]	; (801d600 <TIM_OC1_SetConfig+0xdc>)
 801d584:	4293      	cmp	r3, r2
 801d586:	d10c      	bne.n	801d5a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d588:	697b      	ldr	r3, [r7, #20]
 801d58a:	f023 0308 	bic.w	r3, r3, #8
 801d58e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d590:	683b      	ldr	r3, [r7, #0]
 801d592:	68db      	ldr	r3, [r3, #12]
 801d594:	697a      	ldr	r2, [r7, #20]
 801d596:	4313      	orrs	r3, r2
 801d598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	f023 0304 	bic.w	r3, r3, #4
 801d5a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	4a15      	ldr	r2, [pc, #84]	; (801d5fc <TIM_OC1_SetConfig+0xd8>)
 801d5a6:	4293      	cmp	r3, r2
 801d5a8:	d003      	beq.n	801d5b2 <TIM_OC1_SetConfig+0x8e>
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	4a14      	ldr	r2, [pc, #80]	; (801d600 <TIM_OC1_SetConfig+0xdc>)
 801d5ae:	4293      	cmp	r3, r2
 801d5b0:	d111      	bne.n	801d5d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d5b2:	693b      	ldr	r3, [r7, #16]
 801d5b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d5b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d5ba:	693b      	ldr	r3, [r7, #16]
 801d5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d5c2:	683b      	ldr	r3, [r7, #0]
 801d5c4:	695b      	ldr	r3, [r3, #20]
 801d5c6:	693a      	ldr	r2, [r7, #16]
 801d5c8:	4313      	orrs	r3, r2
 801d5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d5cc:	683b      	ldr	r3, [r7, #0]
 801d5ce:	699b      	ldr	r3, [r3, #24]
 801d5d0:	693a      	ldr	r2, [r7, #16]
 801d5d2:	4313      	orrs	r3, r2
 801d5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	693a      	ldr	r2, [r7, #16]
 801d5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	68fa      	ldr	r2, [r7, #12]
 801d5e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	685a      	ldr	r2, [r3, #4]
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	697a      	ldr	r2, [r7, #20]
 801d5ee:	621a      	str	r2, [r3, #32]
}
 801d5f0:	bf00      	nop
 801d5f2:	371c      	adds	r7, #28
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5fa:	4770      	bx	lr
 801d5fc:	40010000 	.word	0x40010000
 801d600:	40010400 	.word	0x40010400

0801d604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d604:	b480      	push	{r7}
 801d606:	b087      	sub	sp, #28
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
 801d60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	6a1b      	ldr	r3, [r3, #32]
 801d612:	f023 0210 	bic.w	r2, r3, #16
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6a1b      	ldr	r3, [r3, #32]
 801d61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	685b      	ldr	r3, [r3, #4]
 801d624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	699b      	ldr	r3, [r3, #24]
 801d62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d63a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d63c:	683b      	ldr	r3, [r7, #0]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	021b      	lsls	r3, r3, #8
 801d642:	68fa      	ldr	r2, [r7, #12]
 801d644:	4313      	orrs	r3, r2
 801d646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d648:	697b      	ldr	r3, [r7, #20]
 801d64a:	f023 0320 	bic.w	r3, r3, #32
 801d64e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d650:	683b      	ldr	r3, [r7, #0]
 801d652:	689b      	ldr	r3, [r3, #8]
 801d654:	011b      	lsls	r3, r3, #4
 801d656:	697a      	ldr	r2, [r7, #20]
 801d658:	4313      	orrs	r3, r2
 801d65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	4a22      	ldr	r2, [pc, #136]	; (801d6e8 <TIM_OC2_SetConfig+0xe4>)
 801d660:	4293      	cmp	r3, r2
 801d662:	d003      	beq.n	801d66c <TIM_OC2_SetConfig+0x68>
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	4a21      	ldr	r2, [pc, #132]	; (801d6ec <TIM_OC2_SetConfig+0xe8>)
 801d668:	4293      	cmp	r3, r2
 801d66a:	d10d      	bne.n	801d688 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d66c:	697b      	ldr	r3, [r7, #20]
 801d66e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d674:	683b      	ldr	r3, [r7, #0]
 801d676:	68db      	ldr	r3, [r3, #12]
 801d678:	011b      	lsls	r3, r3, #4
 801d67a:	697a      	ldr	r2, [r7, #20]
 801d67c:	4313      	orrs	r3, r2
 801d67e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	4a17      	ldr	r2, [pc, #92]	; (801d6e8 <TIM_OC2_SetConfig+0xe4>)
 801d68c:	4293      	cmp	r3, r2
 801d68e:	d003      	beq.n	801d698 <TIM_OC2_SetConfig+0x94>
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	4a16      	ldr	r2, [pc, #88]	; (801d6ec <TIM_OC2_SetConfig+0xe8>)
 801d694:	4293      	cmp	r3, r2
 801d696:	d113      	bne.n	801d6c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d698:	693b      	ldr	r3, [r7, #16]
 801d69a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d69e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d6a0:	693b      	ldr	r3, [r7, #16]
 801d6a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d6a8:	683b      	ldr	r3, [r7, #0]
 801d6aa:	695b      	ldr	r3, [r3, #20]
 801d6ac:	009b      	lsls	r3, r3, #2
 801d6ae:	693a      	ldr	r2, [r7, #16]
 801d6b0:	4313      	orrs	r3, r2
 801d6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d6b4:	683b      	ldr	r3, [r7, #0]
 801d6b6:	699b      	ldr	r3, [r3, #24]
 801d6b8:	009b      	lsls	r3, r3, #2
 801d6ba:	693a      	ldr	r2, [r7, #16]
 801d6bc:	4313      	orrs	r3, r2
 801d6be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	693a      	ldr	r2, [r7, #16]
 801d6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	68fa      	ldr	r2, [r7, #12]
 801d6ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d6cc:	683b      	ldr	r3, [r7, #0]
 801d6ce:	685a      	ldr	r2, [r3, #4]
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	697a      	ldr	r2, [r7, #20]
 801d6d8:	621a      	str	r2, [r3, #32]
}
 801d6da:	bf00      	nop
 801d6dc:	371c      	adds	r7, #28
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e4:	4770      	bx	lr
 801d6e6:	bf00      	nop
 801d6e8:	40010000 	.word	0x40010000
 801d6ec:	40010400 	.word	0x40010400

0801d6f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d6f0:	b480      	push	{r7}
 801d6f2:	b087      	sub	sp, #28
 801d6f4:	af00      	add	r7, sp, #0
 801d6f6:	6078      	str	r0, [r7, #4]
 801d6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	6a1b      	ldr	r3, [r3, #32]
 801d6fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	6a1b      	ldr	r3, [r3, #32]
 801d70a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	685b      	ldr	r3, [r3, #4]
 801d710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	69db      	ldr	r3, [r3, #28]
 801d716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	f023 0303 	bic.w	r3, r3, #3
 801d726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d728:	683b      	ldr	r3, [r7, #0]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	68fa      	ldr	r2, [r7, #12]
 801d72e:	4313      	orrs	r3, r2
 801d730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d73a:	683b      	ldr	r3, [r7, #0]
 801d73c:	689b      	ldr	r3, [r3, #8]
 801d73e:	021b      	lsls	r3, r3, #8
 801d740:	697a      	ldr	r2, [r7, #20]
 801d742:	4313      	orrs	r3, r2
 801d744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	4a21      	ldr	r2, [pc, #132]	; (801d7d0 <TIM_OC3_SetConfig+0xe0>)
 801d74a:	4293      	cmp	r3, r2
 801d74c:	d003      	beq.n	801d756 <TIM_OC3_SetConfig+0x66>
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	4a20      	ldr	r2, [pc, #128]	; (801d7d4 <TIM_OC3_SetConfig+0xe4>)
 801d752:	4293      	cmp	r3, r2
 801d754:	d10d      	bne.n	801d772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d75c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d75e:	683b      	ldr	r3, [r7, #0]
 801d760:	68db      	ldr	r3, [r3, #12]
 801d762:	021b      	lsls	r3, r3, #8
 801d764:	697a      	ldr	r2, [r7, #20]
 801d766:	4313      	orrs	r3, r2
 801d768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	4a16      	ldr	r2, [pc, #88]	; (801d7d0 <TIM_OC3_SetConfig+0xe0>)
 801d776:	4293      	cmp	r3, r2
 801d778:	d003      	beq.n	801d782 <TIM_OC3_SetConfig+0x92>
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	4a15      	ldr	r2, [pc, #84]	; (801d7d4 <TIM_OC3_SetConfig+0xe4>)
 801d77e:	4293      	cmp	r3, r2
 801d780:	d113      	bne.n	801d7aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d782:	693b      	ldr	r3, [r7, #16]
 801d784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d78a:	693b      	ldr	r3, [r7, #16]
 801d78c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d792:	683b      	ldr	r3, [r7, #0]
 801d794:	695b      	ldr	r3, [r3, #20]
 801d796:	011b      	lsls	r3, r3, #4
 801d798:	693a      	ldr	r2, [r7, #16]
 801d79a:	4313      	orrs	r3, r2
 801d79c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d79e:	683b      	ldr	r3, [r7, #0]
 801d7a0:	699b      	ldr	r3, [r3, #24]
 801d7a2:	011b      	lsls	r3, r3, #4
 801d7a4:	693a      	ldr	r2, [r7, #16]
 801d7a6:	4313      	orrs	r3, r2
 801d7a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	693a      	ldr	r2, [r7, #16]
 801d7ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	68fa      	ldr	r2, [r7, #12]
 801d7b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d7b6:	683b      	ldr	r3, [r7, #0]
 801d7b8:	685a      	ldr	r2, [r3, #4]
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	697a      	ldr	r2, [r7, #20]
 801d7c2:	621a      	str	r2, [r3, #32]
}
 801d7c4:	bf00      	nop
 801d7c6:	371c      	adds	r7, #28
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ce:	4770      	bx	lr
 801d7d0:	40010000 	.word	0x40010000
 801d7d4:	40010400 	.word	0x40010400

0801d7d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d7d8:	b480      	push	{r7}
 801d7da:	b087      	sub	sp, #28
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
 801d7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	6a1b      	ldr	r3, [r3, #32]
 801d7e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	6a1b      	ldr	r3, [r3, #32]
 801d7f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	685b      	ldr	r3, [r3, #4]
 801d7f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	69db      	ldr	r3, [r3, #28]
 801d7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d80e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	021b      	lsls	r3, r3, #8
 801d816:	68fa      	ldr	r2, [r7, #12]
 801d818:	4313      	orrs	r3, r2
 801d81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d81c:	693b      	ldr	r3, [r7, #16]
 801d81e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d824:	683b      	ldr	r3, [r7, #0]
 801d826:	689b      	ldr	r3, [r3, #8]
 801d828:	031b      	lsls	r3, r3, #12
 801d82a:	693a      	ldr	r2, [r7, #16]
 801d82c:	4313      	orrs	r3, r2
 801d82e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	4a12      	ldr	r2, [pc, #72]	; (801d87c <TIM_OC4_SetConfig+0xa4>)
 801d834:	4293      	cmp	r3, r2
 801d836:	d003      	beq.n	801d840 <TIM_OC4_SetConfig+0x68>
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	4a11      	ldr	r2, [pc, #68]	; (801d880 <TIM_OC4_SetConfig+0xa8>)
 801d83c:	4293      	cmp	r3, r2
 801d83e:	d109      	bne.n	801d854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d840:	697b      	ldr	r3, [r7, #20]
 801d842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d848:	683b      	ldr	r3, [r7, #0]
 801d84a:	695b      	ldr	r3, [r3, #20]
 801d84c:	019b      	lsls	r3, r3, #6
 801d84e:	697a      	ldr	r2, [r7, #20]
 801d850:	4313      	orrs	r3, r2
 801d852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	697a      	ldr	r2, [r7, #20]
 801d858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	68fa      	ldr	r2, [r7, #12]
 801d85e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d860:	683b      	ldr	r3, [r7, #0]
 801d862:	685a      	ldr	r2, [r3, #4]
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	693a      	ldr	r2, [r7, #16]
 801d86c:	621a      	str	r2, [r3, #32]
}
 801d86e:	bf00      	nop
 801d870:	371c      	adds	r7, #28
 801d872:	46bd      	mov	sp, r7
 801d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d878:	4770      	bx	lr
 801d87a:	bf00      	nop
 801d87c:	40010000 	.word	0x40010000
 801d880:	40010400 	.word	0x40010400

0801d884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d884:	b480      	push	{r7}
 801d886:	b087      	sub	sp, #28
 801d888:	af00      	add	r7, sp, #0
 801d88a:	60f8      	str	r0, [r7, #12]
 801d88c:	60b9      	str	r1, [r7, #8]
 801d88e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	6a1b      	ldr	r3, [r3, #32]
 801d894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	6a1b      	ldr	r3, [r3, #32]
 801d89a:	f023 0201 	bic.w	r2, r3, #1
 801d89e:	68fb      	ldr	r3, [r7, #12]
 801d8a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	699b      	ldr	r3, [r3, #24]
 801d8a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d8a8:	693b      	ldr	r3, [r7, #16]
 801d8aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d8ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	011b      	lsls	r3, r3, #4
 801d8b4:	693a      	ldr	r2, [r7, #16]
 801d8b6:	4313      	orrs	r3, r2
 801d8b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d8ba:	697b      	ldr	r3, [r7, #20]
 801d8bc:	f023 030a 	bic.w	r3, r3, #10
 801d8c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d8c2:	697a      	ldr	r2, [r7, #20]
 801d8c4:	68bb      	ldr	r3, [r7, #8]
 801d8c6:	4313      	orrs	r3, r2
 801d8c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	693a      	ldr	r2, [r7, #16]
 801d8ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	697a      	ldr	r2, [r7, #20]
 801d8d4:	621a      	str	r2, [r3, #32]
}
 801d8d6:	bf00      	nop
 801d8d8:	371c      	adds	r7, #28
 801d8da:	46bd      	mov	sp, r7
 801d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8e0:	4770      	bx	lr

0801d8e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d8e2:	b480      	push	{r7}
 801d8e4:	b087      	sub	sp, #28
 801d8e6:	af00      	add	r7, sp, #0
 801d8e8:	60f8      	str	r0, [r7, #12]
 801d8ea:	60b9      	str	r1, [r7, #8]
 801d8ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	6a1b      	ldr	r3, [r3, #32]
 801d8f2:	f023 0210 	bic.w	r2, r3, #16
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	699b      	ldr	r3, [r3, #24]
 801d8fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	6a1b      	ldr	r3, [r3, #32]
 801d904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d906:	697b      	ldr	r3, [r7, #20]
 801d908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d90c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	031b      	lsls	r3, r3, #12
 801d912:	697a      	ldr	r2, [r7, #20]
 801d914:	4313      	orrs	r3, r2
 801d916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d918:	693b      	ldr	r3, [r7, #16]
 801d91a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d91e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d920:	68bb      	ldr	r3, [r7, #8]
 801d922:	011b      	lsls	r3, r3, #4
 801d924:	693a      	ldr	r2, [r7, #16]
 801d926:	4313      	orrs	r3, r2
 801d928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	697a      	ldr	r2, [r7, #20]
 801d92e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	693a      	ldr	r2, [r7, #16]
 801d934:	621a      	str	r2, [r3, #32]
}
 801d936:	bf00      	nop
 801d938:	371c      	adds	r7, #28
 801d93a:	46bd      	mov	sp, r7
 801d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d940:	4770      	bx	lr

0801d942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d942:	b480      	push	{r7}
 801d944:	b085      	sub	sp, #20
 801d946:	af00      	add	r7, sp, #0
 801d948:	6078      	str	r0, [r7, #4]
 801d94a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	689b      	ldr	r3, [r3, #8]
 801d950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d95a:	683a      	ldr	r2, [r7, #0]
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	4313      	orrs	r3, r2
 801d960:	f043 0307 	orr.w	r3, r3, #7
 801d964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	68fa      	ldr	r2, [r7, #12]
 801d96a:	609a      	str	r2, [r3, #8]
}
 801d96c:	bf00      	nop
 801d96e:	3714      	adds	r7, #20
 801d970:	46bd      	mov	sp, r7
 801d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d976:	4770      	bx	lr

0801d978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d978:	b480      	push	{r7}
 801d97a:	b087      	sub	sp, #28
 801d97c:	af00      	add	r7, sp, #0
 801d97e:	60f8      	str	r0, [r7, #12]
 801d980:	60b9      	str	r1, [r7, #8]
 801d982:	607a      	str	r2, [r7, #4]
 801d984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	689b      	ldr	r3, [r3, #8]
 801d98a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d98c:	697b      	ldr	r3, [r7, #20]
 801d98e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d994:	683b      	ldr	r3, [r7, #0]
 801d996:	021a      	lsls	r2, r3, #8
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	431a      	orrs	r2, r3
 801d99c:	68bb      	ldr	r3, [r7, #8]
 801d99e:	4313      	orrs	r3, r2
 801d9a0:	697a      	ldr	r2, [r7, #20]
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	697a      	ldr	r2, [r7, #20]
 801d9aa:	609a      	str	r2, [r3, #8]
}
 801d9ac:	bf00      	nop
 801d9ae:	371c      	adds	r7, #28
 801d9b0:	46bd      	mov	sp, r7
 801d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b6:	4770      	bx	lr

0801d9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d9b8:	b480      	push	{r7}
 801d9ba:	b085      	sub	sp, #20
 801d9bc:	af00      	add	r7, sp, #0
 801d9be:	6078      	str	r0, [r7, #4]
 801d9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d9c8:	2b01      	cmp	r3, #1
 801d9ca:	d101      	bne.n	801d9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d9cc:	2302      	movs	r3, #2
 801d9ce:	e05a      	b.n	801da86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	2201      	movs	r2, #1
 801d9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	2202      	movs	r2, #2
 801d9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	685b      	ldr	r3, [r3, #4]
 801d9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	689b      	ldr	r3, [r3, #8]
 801d9ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	68fa      	ldr	r2, [r7, #12]
 801d9fe:	4313      	orrs	r3, r2
 801da00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	68fa      	ldr	r2, [r7, #12]
 801da08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	4a21      	ldr	r2, [pc, #132]	; (801da94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801da10:	4293      	cmp	r3, r2
 801da12:	d022      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da1c:	d01d      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	4a1d      	ldr	r2, [pc, #116]	; (801da98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801da24:	4293      	cmp	r3, r2
 801da26:	d018      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	4a1b      	ldr	r2, [pc, #108]	; (801da9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801da2e:	4293      	cmp	r3, r2
 801da30:	d013      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	4a1a      	ldr	r2, [pc, #104]	; (801daa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801da38:	4293      	cmp	r3, r2
 801da3a:	d00e      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	4a18      	ldr	r2, [pc, #96]	; (801daa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801da42:	4293      	cmp	r3, r2
 801da44:	d009      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	4a17      	ldr	r2, [pc, #92]	; (801daa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801da4c:	4293      	cmp	r3, r2
 801da4e:	d004      	beq.n	801da5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	4a15      	ldr	r2, [pc, #84]	; (801daac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801da56:	4293      	cmp	r3, r2
 801da58:	d10c      	bne.n	801da74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801da5a:	68bb      	ldr	r3, [r7, #8]
 801da5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801da60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	68ba      	ldr	r2, [r7, #8]
 801da68:	4313      	orrs	r3, r2
 801da6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	68ba      	ldr	r2, [r7, #8]
 801da72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	2201      	movs	r2, #1
 801da78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	2200      	movs	r2, #0
 801da80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801da84:	2300      	movs	r3, #0
}
 801da86:	4618      	mov	r0, r3
 801da88:	3714      	adds	r7, #20
 801da8a:	46bd      	mov	sp, r7
 801da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da90:	4770      	bx	lr
 801da92:	bf00      	nop
 801da94:	40010000 	.word	0x40010000
 801da98:	40000400 	.word	0x40000400
 801da9c:	40000800 	.word	0x40000800
 801daa0:	40000c00 	.word	0x40000c00
 801daa4:	40010400 	.word	0x40010400
 801daa8:	40014000 	.word	0x40014000
 801daac:	40001800 	.word	0x40001800

0801dab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dab0:	b480      	push	{r7}
 801dab2:	b083      	sub	sp, #12
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dab8:	bf00      	nop
 801daba:	370c      	adds	r7, #12
 801dabc:	46bd      	mov	sp, r7
 801dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dac2:	4770      	bx	lr

0801dac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801dac4:	b480      	push	{r7}
 801dac6:	b083      	sub	sp, #12
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801dacc:	bf00      	nop
 801dace:	370c      	adds	r7, #12
 801dad0:	46bd      	mov	sp, r7
 801dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad6:	4770      	bx	lr

0801dad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dad8:	b084      	sub	sp, #16
 801dada:	b580      	push	{r7, lr}
 801dadc:	b084      	sub	sp, #16
 801dade:	af00      	add	r7, sp, #0
 801dae0:	6078      	str	r0, [r7, #4]
 801dae2:	f107 001c 	add.w	r0, r7, #28
 801dae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daec:	2b01      	cmp	r3, #1
 801daee:	d122      	bne.n	801db36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	68db      	ldr	r3, [r3, #12]
 801db00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801db04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db08:	687a      	ldr	r2, [r7, #4]
 801db0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	68db      	ldr	r3, [r3, #12]
 801db10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801db18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db1a:	2b01      	cmp	r3, #1
 801db1c:	d105      	bne.n	801db2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	68db      	ldr	r3, [r3, #12]
 801db22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db2a:	6878      	ldr	r0, [r7, #4]
 801db2c:	f001 fbe8 	bl	801f300 <USB_CoreReset>
 801db30:	4603      	mov	r3, r0
 801db32:	73fb      	strb	r3, [r7, #15]
 801db34:	e01a      	b.n	801db6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	68db      	ldr	r3, [r3, #12]
 801db3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db42:	6878      	ldr	r0, [r7, #4]
 801db44:	f001 fbdc 	bl	801f300 <USB_CoreReset>
 801db48:	4603      	mov	r3, r0
 801db4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801db4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d106      	bne.n	801db60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	639a      	str	r2, [r3, #56]	; 0x38
 801db5e:	e005      	b.n	801db6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db6e:	2b01      	cmp	r3, #1
 801db70:	d10b      	bne.n	801db8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	689b      	ldr	r3, [r3, #8]
 801db76:	f043 0206 	orr.w	r2, r3, #6
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	689b      	ldr	r3, [r3, #8]
 801db82:	f043 0220 	orr.w	r2, r3, #32
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801db8a:	7bfb      	ldrb	r3, [r7, #15]
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	3710      	adds	r7, #16
 801db90:	46bd      	mov	sp, r7
 801db92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801db96:	b004      	add	sp, #16
 801db98:	4770      	bx	lr
	...

0801db9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801db9c:	b480      	push	{r7}
 801db9e:	b087      	sub	sp, #28
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	60f8      	str	r0, [r7, #12]
 801dba4:	60b9      	str	r1, [r7, #8]
 801dba6:	4613      	mov	r3, r2
 801dba8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dbaa:	79fb      	ldrb	r3, [r7, #7]
 801dbac:	2b02      	cmp	r3, #2
 801dbae:	d165      	bne.n	801dc7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dbb0:	68bb      	ldr	r3, [r7, #8]
 801dbb2:	4a41      	ldr	r2, [pc, #260]	; (801dcb8 <USB_SetTurnaroundTime+0x11c>)
 801dbb4:	4293      	cmp	r3, r2
 801dbb6:	d906      	bls.n	801dbc6 <USB_SetTurnaroundTime+0x2a>
 801dbb8:	68bb      	ldr	r3, [r7, #8]
 801dbba:	4a40      	ldr	r2, [pc, #256]	; (801dcbc <USB_SetTurnaroundTime+0x120>)
 801dbbc:	4293      	cmp	r3, r2
 801dbbe:	d202      	bcs.n	801dbc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dbc0:	230f      	movs	r3, #15
 801dbc2:	617b      	str	r3, [r7, #20]
 801dbc4:	e062      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dbc6:	68bb      	ldr	r3, [r7, #8]
 801dbc8:	4a3c      	ldr	r2, [pc, #240]	; (801dcbc <USB_SetTurnaroundTime+0x120>)
 801dbca:	4293      	cmp	r3, r2
 801dbcc:	d306      	bcc.n	801dbdc <USB_SetTurnaroundTime+0x40>
 801dbce:	68bb      	ldr	r3, [r7, #8]
 801dbd0:	4a3b      	ldr	r2, [pc, #236]	; (801dcc0 <USB_SetTurnaroundTime+0x124>)
 801dbd2:	4293      	cmp	r3, r2
 801dbd4:	d202      	bcs.n	801dbdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dbd6:	230e      	movs	r3, #14
 801dbd8:	617b      	str	r3, [r7, #20]
 801dbda:	e057      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dbdc:	68bb      	ldr	r3, [r7, #8]
 801dbde:	4a38      	ldr	r2, [pc, #224]	; (801dcc0 <USB_SetTurnaroundTime+0x124>)
 801dbe0:	4293      	cmp	r3, r2
 801dbe2:	d306      	bcc.n	801dbf2 <USB_SetTurnaroundTime+0x56>
 801dbe4:	68bb      	ldr	r3, [r7, #8]
 801dbe6:	4a37      	ldr	r2, [pc, #220]	; (801dcc4 <USB_SetTurnaroundTime+0x128>)
 801dbe8:	4293      	cmp	r3, r2
 801dbea:	d202      	bcs.n	801dbf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dbec:	230d      	movs	r3, #13
 801dbee:	617b      	str	r3, [r7, #20]
 801dbf0:	e04c      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dbf2:	68bb      	ldr	r3, [r7, #8]
 801dbf4:	4a33      	ldr	r2, [pc, #204]	; (801dcc4 <USB_SetTurnaroundTime+0x128>)
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	d306      	bcc.n	801dc08 <USB_SetTurnaroundTime+0x6c>
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	4a32      	ldr	r2, [pc, #200]	; (801dcc8 <USB_SetTurnaroundTime+0x12c>)
 801dbfe:	4293      	cmp	r3, r2
 801dc00:	d802      	bhi.n	801dc08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dc02:	230c      	movs	r3, #12
 801dc04:	617b      	str	r3, [r7, #20]
 801dc06:	e041      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dc08:	68bb      	ldr	r3, [r7, #8]
 801dc0a:	4a2f      	ldr	r2, [pc, #188]	; (801dcc8 <USB_SetTurnaroundTime+0x12c>)
 801dc0c:	4293      	cmp	r3, r2
 801dc0e:	d906      	bls.n	801dc1e <USB_SetTurnaroundTime+0x82>
 801dc10:	68bb      	ldr	r3, [r7, #8]
 801dc12:	4a2e      	ldr	r2, [pc, #184]	; (801dccc <USB_SetTurnaroundTime+0x130>)
 801dc14:	4293      	cmp	r3, r2
 801dc16:	d802      	bhi.n	801dc1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dc18:	230b      	movs	r3, #11
 801dc1a:	617b      	str	r3, [r7, #20]
 801dc1c:	e036      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	4a2a      	ldr	r2, [pc, #168]	; (801dccc <USB_SetTurnaroundTime+0x130>)
 801dc22:	4293      	cmp	r3, r2
 801dc24:	d906      	bls.n	801dc34 <USB_SetTurnaroundTime+0x98>
 801dc26:	68bb      	ldr	r3, [r7, #8]
 801dc28:	4a29      	ldr	r2, [pc, #164]	; (801dcd0 <USB_SetTurnaroundTime+0x134>)
 801dc2a:	4293      	cmp	r3, r2
 801dc2c:	d802      	bhi.n	801dc34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dc2e:	230a      	movs	r3, #10
 801dc30:	617b      	str	r3, [r7, #20]
 801dc32:	e02b      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dc34:	68bb      	ldr	r3, [r7, #8]
 801dc36:	4a26      	ldr	r2, [pc, #152]	; (801dcd0 <USB_SetTurnaroundTime+0x134>)
 801dc38:	4293      	cmp	r3, r2
 801dc3a:	d906      	bls.n	801dc4a <USB_SetTurnaroundTime+0xae>
 801dc3c:	68bb      	ldr	r3, [r7, #8]
 801dc3e:	4a25      	ldr	r2, [pc, #148]	; (801dcd4 <USB_SetTurnaroundTime+0x138>)
 801dc40:	4293      	cmp	r3, r2
 801dc42:	d202      	bcs.n	801dc4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dc44:	2309      	movs	r3, #9
 801dc46:	617b      	str	r3, [r7, #20]
 801dc48:	e020      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dc4a:	68bb      	ldr	r3, [r7, #8]
 801dc4c:	4a21      	ldr	r2, [pc, #132]	; (801dcd4 <USB_SetTurnaroundTime+0x138>)
 801dc4e:	4293      	cmp	r3, r2
 801dc50:	d306      	bcc.n	801dc60 <USB_SetTurnaroundTime+0xc4>
 801dc52:	68bb      	ldr	r3, [r7, #8]
 801dc54:	4a20      	ldr	r2, [pc, #128]	; (801dcd8 <USB_SetTurnaroundTime+0x13c>)
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d802      	bhi.n	801dc60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dc5a:	2308      	movs	r3, #8
 801dc5c:	617b      	str	r3, [r7, #20]
 801dc5e:	e015      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dc60:	68bb      	ldr	r3, [r7, #8]
 801dc62:	4a1d      	ldr	r2, [pc, #116]	; (801dcd8 <USB_SetTurnaroundTime+0x13c>)
 801dc64:	4293      	cmp	r3, r2
 801dc66:	d906      	bls.n	801dc76 <USB_SetTurnaroundTime+0xda>
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	4a1c      	ldr	r2, [pc, #112]	; (801dcdc <USB_SetTurnaroundTime+0x140>)
 801dc6c:	4293      	cmp	r3, r2
 801dc6e:	d202      	bcs.n	801dc76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dc70:	2307      	movs	r3, #7
 801dc72:	617b      	str	r3, [r7, #20]
 801dc74:	e00a      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dc76:	2306      	movs	r3, #6
 801dc78:	617b      	str	r3, [r7, #20]
 801dc7a:	e007      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dc7c:	79fb      	ldrb	r3, [r7, #7]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d102      	bne.n	801dc88 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dc82:	2309      	movs	r3, #9
 801dc84:	617b      	str	r3, [r7, #20]
 801dc86:	e001      	b.n	801dc8c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dc88:	2309      	movs	r3, #9
 801dc8a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	68db      	ldr	r3, [r3, #12]
 801dc90:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	68da      	ldr	r2, [r3, #12]
 801dc9c:	697b      	ldr	r3, [r7, #20]
 801dc9e:	029b      	lsls	r3, r3, #10
 801dca0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dca4:	431a      	orrs	r2, r3
 801dca6:	68fb      	ldr	r3, [r7, #12]
 801dca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dcaa:	2300      	movs	r3, #0
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	371c      	adds	r7, #28
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb6:	4770      	bx	lr
 801dcb8:	00d8acbf 	.word	0x00d8acbf
 801dcbc:	00e4e1c0 	.word	0x00e4e1c0
 801dcc0:	00f42400 	.word	0x00f42400
 801dcc4:	01067380 	.word	0x01067380
 801dcc8:	011a499f 	.word	0x011a499f
 801dccc:	01312cff 	.word	0x01312cff
 801dcd0:	014ca43f 	.word	0x014ca43f
 801dcd4:	016e3600 	.word	0x016e3600
 801dcd8:	01a6ab1f 	.word	0x01a6ab1f
 801dcdc:	01e84800 	.word	0x01e84800

0801dce0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dce0:	b480      	push	{r7}
 801dce2:	b083      	sub	sp, #12
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	689b      	ldr	r3, [r3, #8]
 801dcec:	f043 0201 	orr.w	r2, r3, #1
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dcf4:	2300      	movs	r3, #0
}
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	370c      	adds	r7, #12
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd00:	4770      	bx	lr

0801dd02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd02:	b480      	push	{r7}
 801dd04:	b083      	sub	sp, #12
 801dd06:	af00      	add	r7, sp, #0
 801dd08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	689b      	ldr	r3, [r3, #8]
 801dd0e:	f023 0201 	bic.w	r2, r3, #1
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd16:	2300      	movs	r3, #0
}
 801dd18:	4618      	mov	r0, r3
 801dd1a:	370c      	adds	r7, #12
 801dd1c:	46bd      	mov	sp, r7
 801dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd22:	4770      	bx	lr

0801dd24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b084      	sub	sp, #16
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
 801dd2c:	460b      	mov	r3, r1
 801dd2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801dd30:	2300      	movs	r3, #0
 801dd32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	68db      	ldr	r3, [r3, #12]
 801dd38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801dd40:	78fb      	ldrb	r3, [r7, #3]
 801dd42:	2b01      	cmp	r3, #1
 801dd44:	d115      	bne.n	801dd72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	68db      	ldr	r3, [r3, #12]
 801dd4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd52:	2001      	movs	r0, #1
 801dd54:	f7fa f9ca 	bl	80180ec <HAL_Delay>
      ms++;
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	3301      	adds	r3, #1
 801dd5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801dd5e:	6878      	ldr	r0, [r7, #4]
 801dd60:	f001 fa3f 	bl	801f1e2 <USB_GetMode>
 801dd64:	4603      	mov	r3, r0
 801dd66:	2b01      	cmp	r3, #1
 801dd68:	d01e      	beq.n	801dda8 <USB_SetCurrentMode+0x84>
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	2b31      	cmp	r3, #49	; 0x31
 801dd6e:	d9f0      	bls.n	801dd52 <USB_SetCurrentMode+0x2e>
 801dd70:	e01a      	b.n	801dda8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801dd72:	78fb      	ldrb	r3, [r7, #3]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d115      	bne.n	801dda4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	68db      	ldr	r3, [r3, #12]
 801dd7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd84:	2001      	movs	r0, #1
 801dd86:	f7fa f9b1 	bl	80180ec <HAL_Delay>
      ms++;
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	3301      	adds	r3, #1
 801dd8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801dd90:	6878      	ldr	r0, [r7, #4]
 801dd92:	f001 fa26 	bl	801f1e2 <USB_GetMode>
 801dd96:	4603      	mov	r3, r0
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d005      	beq.n	801dda8 <USB_SetCurrentMode+0x84>
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	2b31      	cmp	r3, #49	; 0x31
 801dda0:	d9f0      	bls.n	801dd84 <USB_SetCurrentMode+0x60>
 801dda2:	e001      	b.n	801dda8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801dda4:	2301      	movs	r3, #1
 801dda6:	e005      	b.n	801ddb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	2b32      	cmp	r3, #50	; 0x32
 801ddac:	d101      	bne.n	801ddb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801ddae:	2301      	movs	r3, #1
 801ddb0:	e000      	b.n	801ddb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801ddb2:	2300      	movs	r3, #0
}
 801ddb4:	4618      	mov	r0, r3
 801ddb6:	3710      	adds	r7, #16
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}

0801ddbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ddbc:	b084      	sub	sp, #16
 801ddbe:	b580      	push	{r7, lr}
 801ddc0:	b086      	sub	sp, #24
 801ddc2:	af00      	add	r7, sp, #0
 801ddc4:	6078      	str	r0, [r7, #4]
 801ddc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ddca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	613b      	str	r3, [r7, #16]
 801ddda:	e009      	b.n	801ddf0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801dddc:	687a      	ldr	r2, [r7, #4]
 801ddde:	693b      	ldr	r3, [r7, #16]
 801dde0:	3340      	adds	r3, #64	; 0x40
 801dde2:	009b      	lsls	r3, r3, #2
 801dde4:	4413      	add	r3, r2
 801dde6:	2200      	movs	r2, #0
 801dde8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801ddea:	693b      	ldr	r3, [r7, #16]
 801ddec:	3301      	adds	r3, #1
 801ddee:	613b      	str	r3, [r7, #16]
 801ddf0:	693b      	ldr	r3, [r7, #16]
 801ddf2:	2b0e      	cmp	r3, #14
 801ddf4:	d9f2      	bls.n	801dddc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801ddf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d11c      	bne.n	801de36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de02:	685b      	ldr	r3, [r3, #4]
 801de04:	68fa      	ldr	r2, [r7, #12]
 801de06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801de0a:	f043 0302 	orr.w	r3, r3, #2
 801de0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	601a      	str	r2, [r3, #0]
 801de34:	e005      	b.n	801de42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de48:	461a      	mov	r2, r3
 801de4a:	2300      	movs	r3, #0
 801de4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de54:	4619      	mov	r1, r3
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de5c:	461a      	mov	r2, r3
 801de5e:	680b      	ldr	r3, [r1, #0]
 801de60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801de62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de64:	2b01      	cmp	r3, #1
 801de66:	d10c      	bne.n	801de82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d104      	bne.n	801de78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801de6e:	2100      	movs	r1, #0
 801de70:	6878      	ldr	r0, [r7, #4]
 801de72:	f000 f965 	bl	801e140 <USB_SetDevSpeed>
 801de76:	e008      	b.n	801de8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801de78:	2101      	movs	r1, #1
 801de7a:	6878      	ldr	r0, [r7, #4]
 801de7c:	f000 f960 	bl	801e140 <USB_SetDevSpeed>
 801de80:	e003      	b.n	801de8a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801de82:	2103      	movs	r1, #3
 801de84:	6878      	ldr	r0, [r7, #4]
 801de86:	f000 f95b 	bl	801e140 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801de8a:	2110      	movs	r1, #16
 801de8c:	6878      	ldr	r0, [r7, #4]
 801de8e:	f000 f8f3 	bl	801e078 <USB_FlushTxFifo>
 801de92:	4603      	mov	r3, r0
 801de94:	2b00      	cmp	r3, #0
 801de96:	d001      	beq.n	801de9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801de98:	2301      	movs	r3, #1
 801de9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801de9c:	6878      	ldr	r0, [r7, #4]
 801de9e:	f000 f91f 	bl	801e0e0 <USB_FlushRxFifo>
 801dea2:	4603      	mov	r3, r0
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d001      	beq.n	801deac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801dea8:	2301      	movs	r3, #1
 801deaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801deb2:	461a      	mov	r2, r3
 801deb4:	2300      	movs	r3, #0
 801deb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801debe:	461a      	mov	r2, r3
 801dec0:	2300      	movs	r3, #0
 801dec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801deca:	461a      	mov	r2, r3
 801decc:	2300      	movs	r3, #0
 801dece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801ded0:	2300      	movs	r3, #0
 801ded2:	613b      	str	r3, [r7, #16]
 801ded4:	e043      	b.n	801df5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ded6:	693b      	ldr	r3, [r7, #16]
 801ded8:	015a      	lsls	r2, r3, #5
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	4413      	add	r3, r2
 801dede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801deec:	d118      	bne.n	801df20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801deee:	693b      	ldr	r3, [r7, #16]
 801def0:	2b00      	cmp	r3, #0
 801def2:	d10a      	bne.n	801df0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801def4:	693b      	ldr	r3, [r7, #16]
 801def6:	015a      	lsls	r2, r3, #5
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	4413      	add	r3, r2
 801defc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df00:	461a      	mov	r2, r3
 801df02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df06:	6013      	str	r3, [r2, #0]
 801df08:	e013      	b.n	801df32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801df0a:	693b      	ldr	r3, [r7, #16]
 801df0c:	015a      	lsls	r2, r3, #5
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	4413      	add	r3, r2
 801df12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df16:	461a      	mov	r2, r3
 801df18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801df1c:	6013      	str	r3, [r2, #0]
 801df1e:	e008      	b.n	801df32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	015a      	lsls	r2, r3, #5
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	4413      	add	r3, r2
 801df28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df2c:	461a      	mov	r2, r3
 801df2e:	2300      	movs	r3, #0
 801df30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801df32:	693b      	ldr	r3, [r7, #16]
 801df34:	015a      	lsls	r2, r3, #5
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	4413      	add	r3, r2
 801df3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df3e:	461a      	mov	r2, r3
 801df40:	2300      	movs	r3, #0
 801df42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801df44:	693b      	ldr	r3, [r7, #16]
 801df46:	015a      	lsls	r2, r3, #5
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	4413      	add	r3, r2
 801df4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df50:	461a      	mov	r2, r3
 801df52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801df56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df58:	693b      	ldr	r3, [r7, #16]
 801df5a:	3301      	adds	r3, #1
 801df5c:	613b      	str	r3, [r7, #16]
 801df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df60:	693a      	ldr	r2, [r7, #16]
 801df62:	429a      	cmp	r2, r3
 801df64:	d3b7      	bcc.n	801ded6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df66:	2300      	movs	r3, #0
 801df68:	613b      	str	r3, [r7, #16]
 801df6a:	e043      	b.n	801dff4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801df6c:	693b      	ldr	r3, [r7, #16]
 801df6e:	015a      	lsls	r2, r3, #5
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	4413      	add	r3, r2
 801df74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df82:	d118      	bne.n	801dfb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801df84:	693b      	ldr	r3, [r7, #16]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d10a      	bne.n	801dfa0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801df8a:	693b      	ldr	r3, [r7, #16]
 801df8c:	015a      	lsls	r2, r3, #5
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	4413      	add	r3, r2
 801df92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801df96:	461a      	mov	r2, r3
 801df98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df9c:	6013      	str	r3, [r2, #0]
 801df9e:	e013      	b.n	801dfc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801dfa0:	693b      	ldr	r3, [r7, #16]
 801dfa2:	015a      	lsls	r2, r3, #5
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	4413      	add	r3, r2
 801dfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfac:	461a      	mov	r2, r3
 801dfae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dfb2:	6013      	str	r3, [r2, #0]
 801dfb4:	e008      	b.n	801dfc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801dfb6:	693b      	ldr	r3, [r7, #16]
 801dfb8:	015a      	lsls	r2, r3, #5
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	4413      	add	r3, r2
 801dfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfc2:	461a      	mov	r2, r3
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801dfc8:	693b      	ldr	r3, [r7, #16]
 801dfca:	015a      	lsls	r2, r3, #5
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	4413      	add	r3, r2
 801dfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfd4:	461a      	mov	r2, r3
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801dfda:	693b      	ldr	r3, [r7, #16]
 801dfdc:	015a      	lsls	r2, r3, #5
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	4413      	add	r3, r2
 801dfe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfe6:	461a      	mov	r2, r3
 801dfe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801dfec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	3301      	adds	r3, #1
 801dff2:	613b      	str	r3, [r7, #16]
 801dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff6:	693a      	ldr	r2, [r7, #16]
 801dff8:	429a      	cmp	r2, r3
 801dffa:	d3b7      	bcc.n	801df6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e002:	691b      	ldr	r3, [r3, #16]
 801e004:	68fa      	ldr	r2, [r7, #12]
 801e006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e00a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e00e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	2200      	movs	r2, #0
 801e014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e01c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e020:	2b00      	cmp	r3, #0
 801e022:	d105      	bne.n	801e030 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	699b      	ldr	r3, [r3, #24]
 801e028:	f043 0210 	orr.w	r2, r3, #16
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	699a      	ldr	r2, [r3, #24]
 801e034:	4b0f      	ldr	r3, [pc, #60]	; (801e074 <USB_DevInit+0x2b8>)
 801e036:	4313      	orrs	r3, r2
 801e038:	687a      	ldr	r2, [r7, #4]
 801e03a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d005      	beq.n	801e04e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e042:	687b      	ldr	r3, [r7, #4]
 801e044:	699b      	ldr	r3, [r3, #24]
 801e046:	f043 0208 	orr.w	r2, r3, #8
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e050:	2b01      	cmp	r3, #1
 801e052:	d107      	bne.n	801e064 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	699b      	ldr	r3, [r3, #24]
 801e058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e05c:	f043 0304 	orr.w	r3, r3, #4
 801e060:	687a      	ldr	r2, [r7, #4]
 801e062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e064:	7dfb      	ldrb	r3, [r7, #23]
}
 801e066:	4618      	mov	r0, r3
 801e068:	3718      	adds	r7, #24
 801e06a:	46bd      	mov	sp, r7
 801e06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e070:	b004      	add	sp, #16
 801e072:	4770      	bx	lr
 801e074:	803c3800 	.word	0x803c3800

0801e078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e078:	b480      	push	{r7}
 801e07a:	b085      	sub	sp, #20
 801e07c:	af00      	add	r7, sp, #0
 801e07e:	6078      	str	r0, [r7, #4]
 801e080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e082:	2300      	movs	r3, #0
 801e084:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	3301      	adds	r3, #1
 801e08a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	4a13      	ldr	r2, [pc, #76]	; (801e0dc <USB_FlushTxFifo+0x64>)
 801e090:	4293      	cmp	r3, r2
 801e092:	d901      	bls.n	801e098 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801e094:	2303      	movs	r3, #3
 801e096:	e01b      	b.n	801e0d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	691b      	ldr	r3, [r3, #16]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	daf2      	bge.n	801e086 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	019b      	lsls	r3, r3, #6
 801e0a8:	f043 0220 	orr.w	r2, r3, #32
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801e0b0:	68fb      	ldr	r3, [r7, #12]
 801e0b2:	3301      	adds	r3, #1
 801e0b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	4a08      	ldr	r2, [pc, #32]	; (801e0dc <USB_FlushTxFifo+0x64>)
 801e0ba:	4293      	cmp	r3, r2
 801e0bc:	d901      	bls.n	801e0c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801e0be:	2303      	movs	r3, #3
 801e0c0:	e006      	b.n	801e0d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	691b      	ldr	r3, [r3, #16]
 801e0c6:	f003 0320 	and.w	r3, r3, #32
 801e0ca:	2b20      	cmp	r3, #32
 801e0cc:	d0f0      	beq.n	801e0b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801e0ce:	2300      	movs	r3, #0
}
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	3714      	adds	r7, #20
 801e0d4:	46bd      	mov	sp, r7
 801e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0da:	4770      	bx	lr
 801e0dc:	00030d40 	.word	0x00030d40

0801e0e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e0e0:	b480      	push	{r7}
 801e0e2:	b085      	sub	sp, #20
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	3301      	adds	r3, #1
 801e0f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e0f2:	68fb      	ldr	r3, [r7, #12]
 801e0f4:	4a11      	ldr	r2, [pc, #68]	; (801e13c <USB_FlushRxFifo+0x5c>)
 801e0f6:	4293      	cmp	r3, r2
 801e0f8:	d901      	bls.n	801e0fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801e0fa:	2303      	movs	r3, #3
 801e0fc:	e018      	b.n	801e130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	691b      	ldr	r3, [r3, #16]
 801e102:	2b00      	cmp	r3, #0
 801e104:	daf2      	bge.n	801e0ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801e106:	2300      	movs	r3, #0
 801e108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	2210      	movs	r2, #16
 801e10e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	3301      	adds	r3, #1
 801e114:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	4a08      	ldr	r2, [pc, #32]	; (801e13c <USB_FlushRxFifo+0x5c>)
 801e11a:	4293      	cmp	r3, r2
 801e11c:	d901      	bls.n	801e122 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801e11e:	2303      	movs	r3, #3
 801e120:	e006      	b.n	801e130 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	691b      	ldr	r3, [r3, #16]
 801e126:	f003 0310 	and.w	r3, r3, #16
 801e12a:	2b10      	cmp	r3, #16
 801e12c:	d0f0      	beq.n	801e110 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801e12e:	2300      	movs	r3, #0
}
 801e130:	4618      	mov	r0, r3
 801e132:	3714      	adds	r7, #20
 801e134:	46bd      	mov	sp, r7
 801e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e13a:	4770      	bx	lr
 801e13c:	00030d40 	.word	0x00030d40

0801e140 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e140:	b480      	push	{r7}
 801e142:	b085      	sub	sp, #20
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
 801e148:	460b      	mov	r3, r1
 801e14a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e156:	681a      	ldr	r2, [r3, #0]
 801e158:	78fb      	ldrb	r3, [r7, #3]
 801e15a:	68f9      	ldr	r1, [r7, #12]
 801e15c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e160:	4313      	orrs	r3, r2
 801e162:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e164:	2300      	movs	r3, #0
}
 801e166:	4618      	mov	r0, r3
 801e168:	3714      	adds	r7, #20
 801e16a:	46bd      	mov	sp, r7
 801e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e170:	4770      	bx	lr

0801e172 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e172:	b480      	push	{r7}
 801e174:	b087      	sub	sp, #28
 801e176:	af00      	add	r7, sp, #0
 801e178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e17e:	693b      	ldr	r3, [r7, #16]
 801e180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e184:	689b      	ldr	r3, [r3, #8]
 801e186:	f003 0306 	and.w	r3, r3, #6
 801e18a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d102      	bne.n	801e198 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e192:	2300      	movs	r3, #0
 801e194:	75fb      	strb	r3, [r7, #23]
 801e196:	e00a      	b.n	801e1ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	2b02      	cmp	r3, #2
 801e19c:	d002      	beq.n	801e1a4 <USB_GetDevSpeed+0x32>
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	2b06      	cmp	r3, #6
 801e1a2:	d102      	bne.n	801e1aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e1a4:	2302      	movs	r3, #2
 801e1a6:	75fb      	strb	r3, [r7, #23]
 801e1a8:	e001      	b.n	801e1ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e1aa:	230f      	movs	r3, #15
 801e1ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	371c      	adds	r7, #28
 801e1b4:	46bd      	mov	sp, r7
 801e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1ba:	4770      	bx	lr

0801e1bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e1bc:	b480      	push	{r7}
 801e1be:	b085      	sub	sp, #20
 801e1c0:	af00      	add	r7, sp, #0
 801e1c2:	6078      	str	r0, [r7, #4]
 801e1c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	781b      	ldrb	r3, [r3, #0]
 801e1ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e1d0:	683b      	ldr	r3, [r7, #0]
 801e1d2:	785b      	ldrb	r3, [r3, #1]
 801e1d4:	2b01      	cmp	r3, #1
 801e1d6:	d13a      	bne.n	801e24e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1de:	69da      	ldr	r2, [r3, #28]
 801e1e0:	683b      	ldr	r3, [r7, #0]
 801e1e2:	781b      	ldrb	r3, [r3, #0]
 801e1e4:	f003 030f 	and.w	r3, r3, #15
 801e1e8:	2101      	movs	r1, #1
 801e1ea:	fa01 f303 	lsl.w	r3, r1, r3
 801e1ee:	b29b      	uxth	r3, r3
 801e1f0:	68f9      	ldr	r1, [r7, #12]
 801e1f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e1f6:	4313      	orrs	r3, r2
 801e1f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e1fa:	68bb      	ldr	r3, [r7, #8]
 801e1fc:	015a      	lsls	r2, r3, #5
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	4413      	add	r3, r2
 801e202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d155      	bne.n	801e2bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e210:	68bb      	ldr	r3, [r7, #8]
 801e212:	015a      	lsls	r2, r3, #5
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	4413      	add	r3, r2
 801e218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e21c:	681a      	ldr	r2, [r3, #0]
 801e21e:	683b      	ldr	r3, [r7, #0]
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	791b      	ldrb	r3, [r3, #4]
 801e22a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e22c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e22e:	68bb      	ldr	r3, [r7, #8]
 801e230:	059b      	lsls	r3, r3, #22
 801e232:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e234:	4313      	orrs	r3, r2
 801e236:	68ba      	ldr	r2, [r7, #8]
 801e238:	0151      	lsls	r1, r2, #5
 801e23a:	68fa      	ldr	r2, [r7, #12]
 801e23c:	440a      	add	r2, r1
 801e23e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e24a:	6013      	str	r3, [r2, #0]
 801e24c:	e036      	b.n	801e2bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e254:	69da      	ldr	r2, [r3, #28]
 801e256:	683b      	ldr	r3, [r7, #0]
 801e258:	781b      	ldrb	r3, [r3, #0]
 801e25a:	f003 030f 	and.w	r3, r3, #15
 801e25e:	2101      	movs	r1, #1
 801e260:	fa01 f303 	lsl.w	r3, r1, r3
 801e264:	041b      	lsls	r3, r3, #16
 801e266:	68f9      	ldr	r1, [r7, #12]
 801e268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e26c:	4313      	orrs	r3, r2
 801e26e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e270:	68bb      	ldr	r3, [r7, #8]
 801e272:	015a      	lsls	r2, r3, #5
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	4413      	add	r3, r2
 801e278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e282:	2b00      	cmp	r3, #0
 801e284:	d11a      	bne.n	801e2bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e286:	68bb      	ldr	r3, [r7, #8]
 801e288:	015a      	lsls	r2, r3, #5
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	4413      	add	r3, r2
 801e28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e292:	681a      	ldr	r2, [r3, #0]
 801e294:	683b      	ldr	r3, [r7, #0]
 801e296:	68db      	ldr	r3, [r3, #12]
 801e298:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e29c:	683b      	ldr	r3, [r7, #0]
 801e29e:	791b      	ldrb	r3, [r3, #4]
 801e2a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2a2:	430b      	orrs	r3, r1
 801e2a4:	4313      	orrs	r3, r2
 801e2a6:	68ba      	ldr	r2, [r7, #8]
 801e2a8:	0151      	lsls	r1, r2, #5
 801e2aa:	68fa      	ldr	r2, [r7, #12]
 801e2ac:	440a      	add	r2, r1
 801e2ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e2b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e2ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e2bc:	2300      	movs	r3, #0
}
 801e2be:	4618      	mov	r0, r3
 801e2c0:	3714      	adds	r7, #20
 801e2c2:	46bd      	mov	sp, r7
 801e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c8:	4770      	bx	lr
	...

0801e2cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e2cc:	b480      	push	{r7}
 801e2ce:	b085      	sub	sp, #20
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	6078      	str	r0, [r7, #4]
 801e2d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e2da:	683b      	ldr	r3, [r7, #0]
 801e2dc:	781b      	ldrb	r3, [r3, #0]
 801e2de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e2e0:	683b      	ldr	r3, [r7, #0]
 801e2e2:	785b      	ldrb	r3, [r3, #1]
 801e2e4:	2b01      	cmp	r3, #1
 801e2e6:	d161      	bne.n	801e3ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e2e8:	68bb      	ldr	r3, [r7, #8]
 801e2ea:	015a      	lsls	r2, r3, #5
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	4413      	add	r3, r2
 801e2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e2fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e2fe:	d11f      	bne.n	801e340 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e300:	68bb      	ldr	r3, [r7, #8]
 801e302:	015a      	lsls	r2, r3, #5
 801e304:	68fb      	ldr	r3, [r7, #12]
 801e306:	4413      	add	r3, r2
 801e308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	68ba      	ldr	r2, [r7, #8]
 801e310:	0151      	lsls	r1, r2, #5
 801e312:	68fa      	ldr	r2, [r7, #12]
 801e314:	440a      	add	r2, r1
 801e316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e31a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e31e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e320:	68bb      	ldr	r3, [r7, #8]
 801e322:	015a      	lsls	r2, r3, #5
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	4413      	add	r3, r2
 801e328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	68ba      	ldr	r2, [r7, #8]
 801e330:	0151      	lsls	r1, r2, #5
 801e332:	68fa      	ldr	r2, [r7, #12]
 801e334:	440a      	add	r2, r1
 801e336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e33a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e33e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e348:	683b      	ldr	r3, [r7, #0]
 801e34a:	781b      	ldrb	r3, [r3, #0]
 801e34c:	f003 030f 	and.w	r3, r3, #15
 801e350:	2101      	movs	r1, #1
 801e352:	fa01 f303 	lsl.w	r3, r1, r3
 801e356:	b29b      	uxth	r3, r3
 801e358:	43db      	mvns	r3, r3
 801e35a:	68f9      	ldr	r1, [r7, #12]
 801e35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e360:	4013      	ands	r3, r2
 801e362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e36a:	69da      	ldr	r2, [r3, #28]
 801e36c:	683b      	ldr	r3, [r7, #0]
 801e36e:	781b      	ldrb	r3, [r3, #0]
 801e370:	f003 030f 	and.w	r3, r3, #15
 801e374:	2101      	movs	r1, #1
 801e376:	fa01 f303 	lsl.w	r3, r1, r3
 801e37a:	b29b      	uxth	r3, r3
 801e37c:	43db      	mvns	r3, r3
 801e37e:	68f9      	ldr	r1, [r7, #12]
 801e380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e384:	4013      	ands	r3, r2
 801e386:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e388:	68bb      	ldr	r3, [r7, #8]
 801e38a:	015a      	lsls	r2, r3, #5
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	4413      	add	r3, r2
 801e390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e394:	681a      	ldr	r2, [r3, #0]
 801e396:	68bb      	ldr	r3, [r7, #8]
 801e398:	0159      	lsls	r1, r3, #5
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	440b      	add	r3, r1
 801e39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3a2:	4619      	mov	r1, r3
 801e3a4:	4b35      	ldr	r3, [pc, #212]	; (801e47c <USB_DeactivateEndpoint+0x1b0>)
 801e3a6:	4013      	ands	r3, r2
 801e3a8:	600b      	str	r3, [r1, #0]
 801e3aa:	e060      	b.n	801e46e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e3ac:	68bb      	ldr	r3, [r7, #8]
 801e3ae:	015a      	lsls	r2, r3, #5
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	4413      	add	r3, r2
 801e3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e3be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e3c2:	d11f      	bne.n	801e404 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e3c4:	68bb      	ldr	r3, [r7, #8]
 801e3c6:	015a      	lsls	r2, r3, #5
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	4413      	add	r3, r2
 801e3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	68ba      	ldr	r2, [r7, #8]
 801e3d4:	0151      	lsls	r1, r2, #5
 801e3d6:	68fa      	ldr	r2, [r7, #12]
 801e3d8:	440a      	add	r2, r1
 801e3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e3de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e3e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	015a      	lsls	r2, r3, #5
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	4413      	add	r3, r2
 801e3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	68ba      	ldr	r2, [r7, #8]
 801e3f4:	0151      	lsls	r1, r2, #5
 801e3f6:	68fa      	ldr	r2, [r7, #12]
 801e3f8:	440a      	add	r2, r1
 801e3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e3fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e40c:	683b      	ldr	r3, [r7, #0]
 801e40e:	781b      	ldrb	r3, [r3, #0]
 801e410:	f003 030f 	and.w	r3, r3, #15
 801e414:	2101      	movs	r1, #1
 801e416:	fa01 f303 	lsl.w	r3, r1, r3
 801e41a:	041b      	lsls	r3, r3, #16
 801e41c:	43db      	mvns	r3, r3
 801e41e:	68f9      	ldr	r1, [r7, #12]
 801e420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e424:	4013      	ands	r3, r2
 801e426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e42e:	69da      	ldr	r2, [r3, #28]
 801e430:	683b      	ldr	r3, [r7, #0]
 801e432:	781b      	ldrb	r3, [r3, #0]
 801e434:	f003 030f 	and.w	r3, r3, #15
 801e438:	2101      	movs	r1, #1
 801e43a:	fa01 f303 	lsl.w	r3, r1, r3
 801e43e:	041b      	lsls	r3, r3, #16
 801e440:	43db      	mvns	r3, r3
 801e442:	68f9      	ldr	r1, [r7, #12]
 801e444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e448:	4013      	ands	r3, r2
 801e44a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	015a      	lsls	r2, r3, #5
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	4413      	add	r3, r2
 801e454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e458:	681a      	ldr	r2, [r3, #0]
 801e45a:	68bb      	ldr	r3, [r7, #8]
 801e45c:	0159      	lsls	r1, r3, #5
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	440b      	add	r3, r1
 801e462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e466:	4619      	mov	r1, r3
 801e468:	4b05      	ldr	r3, [pc, #20]	; (801e480 <USB_DeactivateEndpoint+0x1b4>)
 801e46a:	4013      	ands	r3, r2
 801e46c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e46e:	2300      	movs	r3, #0
}
 801e470:	4618      	mov	r0, r3
 801e472:	3714      	adds	r7, #20
 801e474:	46bd      	mov	sp, r7
 801e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e47a:	4770      	bx	lr
 801e47c:	ec337800 	.word	0xec337800
 801e480:	eff37800 	.word	0xeff37800

0801e484 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e484:	b580      	push	{r7, lr}
 801e486:	b08a      	sub	sp, #40	; 0x28
 801e488:	af02      	add	r7, sp, #8
 801e48a:	60f8      	str	r0, [r7, #12]
 801e48c:	60b9      	str	r1, [r7, #8]
 801e48e:	4613      	mov	r3, r2
 801e490:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	781b      	ldrb	r3, [r3, #0]
 801e49a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	785b      	ldrb	r3, [r3, #1]
 801e4a0:	2b01      	cmp	r3, #1
 801e4a2:	f040 815c 	bne.w	801e75e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	699b      	ldr	r3, [r3, #24]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d132      	bne.n	801e514 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e4ae:	69bb      	ldr	r3, [r7, #24]
 801e4b0:	015a      	lsls	r2, r3, #5
 801e4b2:	69fb      	ldr	r3, [r7, #28]
 801e4b4:	4413      	add	r3, r2
 801e4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4ba:	691b      	ldr	r3, [r3, #16]
 801e4bc:	69ba      	ldr	r2, [r7, #24]
 801e4be:	0151      	lsls	r1, r2, #5
 801e4c0:	69fa      	ldr	r2, [r7, #28]
 801e4c2:	440a      	add	r2, r1
 801e4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e4cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e4d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e4d2:	69bb      	ldr	r3, [r7, #24]
 801e4d4:	015a      	lsls	r2, r3, #5
 801e4d6:	69fb      	ldr	r3, [r7, #28]
 801e4d8:	4413      	add	r3, r2
 801e4da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4de:	691b      	ldr	r3, [r3, #16]
 801e4e0:	69ba      	ldr	r2, [r7, #24]
 801e4e2:	0151      	lsls	r1, r2, #5
 801e4e4:	69fa      	ldr	r2, [r7, #28]
 801e4e6:	440a      	add	r2, r1
 801e4e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e4f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e4f2:	69bb      	ldr	r3, [r7, #24]
 801e4f4:	015a      	lsls	r2, r3, #5
 801e4f6:	69fb      	ldr	r3, [r7, #28]
 801e4f8:	4413      	add	r3, r2
 801e4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4fe:	691b      	ldr	r3, [r3, #16]
 801e500:	69ba      	ldr	r2, [r7, #24]
 801e502:	0151      	lsls	r1, r2, #5
 801e504:	69fa      	ldr	r2, [r7, #28]
 801e506:	440a      	add	r2, r1
 801e508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e50c:	0cdb      	lsrs	r3, r3, #19
 801e50e:	04db      	lsls	r3, r3, #19
 801e510:	6113      	str	r3, [r2, #16]
 801e512:	e074      	b.n	801e5fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e514:	69bb      	ldr	r3, [r7, #24]
 801e516:	015a      	lsls	r2, r3, #5
 801e518:	69fb      	ldr	r3, [r7, #28]
 801e51a:	4413      	add	r3, r2
 801e51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e520:	691b      	ldr	r3, [r3, #16]
 801e522:	69ba      	ldr	r2, [r7, #24]
 801e524:	0151      	lsls	r1, r2, #5
 801e526:	69fa      	ldr	r2, [r7, #28]
 801e528:	440a      	add	r2, r1
 801e52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e52e:	0cdb      	lsrs	r3, r3, #19
 801e530:	04db      	lsls	r3, r3, #19
 801e532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e534:	69bb      	ldr	r3, [r7, #24]
 801e536:	015a      	lsls	r2, r3, #5
 801e538:	69fb      	ldr	r3, [r7, #28]
 801e53a:	4413      	add	r3, r2
 801e53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e540:	691b      	ldr	r3, [r3, #16]
 801e542:	69ba      	ldr	r2, [r7, #24]
 801e544:	0151      	lsls	r1, r2, #5
 801e546:	69fa      	ldr	r2, [r7, #28]
 801e548:	440a      	add	r2, r1
 801e54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e54e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e552:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e558:	69bb      	ldr	r3, [r7, #24]
 801e55a:	015a      	lsls	r2, r3, #5
 801e55c:	69fb      	ldr	r3, [r7, #28]
 801e55e:	4413      	add	r3, r2
 801e560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e564:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e566:	68bb      	ldr	r3, [r7, #8]
 801e568:	6999      	ldr	r1, [r3, #24]
 801e56a:	68bb      	ldr	r3, [r7, #8]
 801e56c:	68db      	ldr	r3, [r3, #12]
 801e56e:	440b      	add	r3, r1
 801e570:	1e59      	subs	r1, r3, #1
 801e572:	68bb      	ldr	r3, [r7, #8]
 801e574:	68db      	ldr	r3, [r3, #12]
 801e576:	fbb1 f3f3 	udiv	r3, r1, r3
 801e57a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e57c:	4b9d      	ldr	r3, [pc, #628]	; (801e7f4 <USB_EPStartXfer+0x370>)
 801e57e:	400b      	ands	r3, r1
 801e580:	69b9      	ldr	r1, [r7, #24]
 801e582:	0148      	lsls	r0, r1, #5
 801e584:	69f9      	ldr	r1, [r7, #28]
 801e586:	4401      	add	r1, r0
 801e588:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e58c:	4313      	orrs	r3, r2
 801e58e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e590:	69bb      	ldr	r3, [r7, #24]
 801e592:	015a      	lsls	r2, r3, #5
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	4413      	add	r3, r2
 801e598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e59c:	691a      	ldr	r2, [r3, #16]
 801e59e:	68bb      	ldr	r3, [r7, #8]
 801e5a0:	699b      	ldr	r3, [r3, #24]
 801e5a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e5a6:	69b9      	ldr	r1, [r7, #24]
 801e5a8:	0148      	lsls	r0, r1, #5
 801e5aa:	69f9      	ldr	r1, [r7, #28]
 801e5ac:	4401      	add	r1, r0
 801e5ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5b2:	4313      	orrs	r3, r2
 801e5b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e5b6:	68bb      	ldr	r3, [r7, #8]
 801e5b8:	791b      	ldrb	r3, [r3, #4]
 801e5ba:	2b01      	cmp	r3, #1
 801e5bc:	d11f      	bne.n	801e5fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e5be:	69bb      	ldr	r3, [r7, #24]
 801e5c0:	015a      	lsls	r2, r3, #5
 801e5c2:	69fb      	ldr	r3, [r7, #28]
 801e5c4:	4413      	add	r3, r2
 801e5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5ca:	691b      	ldr	r3, [r3, #16]
 801e5cc:	69ba      	ldr	r2, [r7, #24]
 801e5ce:	0151      	lsls	r1, r2, #5
 801e5d0:	69fa      	ldr	r2, [r7, #28]
 801e5d2:	440a      	add	r2, r1
 801e5d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e5dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e5de:	69bb      	ldr	r3, [r7, #24]
 801e5e0:	015a      	lsls	r2, r3, #5
 801e5e2:	69fb      	ldr	r3, [r7, #28]
 801e5e4:	4413      	add	r3, r2
 801e5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5ea:	691b      	ldr	r3, [r3, #16]
 801e5ec:	69ba      	ldr	r2, [r7, #24]
 801e5ee:	0151      	lsls	r1, r2, #5
 801e5f0:	69fa      	ldr	r2, [r7, #28]
 801e5f2:	440a      	add	r2, r1
 801e5f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e5f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e5fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e5fe:	79fb      	ldrb	r3, [r7, #7]
 801e600:	2b01      	cmp	r3, #1
 801e602:	d14b      	bne.n	801e69c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e604:	68bb      	ldr	r3, [r7, #8]
 801e606:	695b      	ldr	r3, [r3, #20]
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d009      	beq.n	801e620 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e60c:	69bb      	ldr	r3, [r7, #24]
 801e60e:	015a      	lsls	r2, r3, #5
 801e610:	69fb      	ldr	r3, [r7, #28]
 801e612:	4413      	add	r3, r2
 801e614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e618:	461a      	mov	r2, r3
 801e61a:	68bb      	ldr	r3, [r7, #8]
 801e61c:	695b      	ldr	r3, [r3, #20]
 801e61e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e620:	68bb      	ldr	r3, [r7, #8]
 801e622:	791b      	ldrb	r3, [r3, #4]
 801e624:	2b01      	cmp	r3, #1
 801e626:	d128      	bne.n	801e67a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e628:	69fb      	ldr	r3, [r7, #28]
 801e62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e62e:	689b      	ldr	r3, [r3, #8]
 801e630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e634:	2b00      	cmp	r3, #0
 801e636:	d110      	bne.n	801e65a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e638:	69bb      	ldr	r3, [r7, #24]
 801e63a:	015a      	lsls	r2, r3, #5
 801e63c:	69fb      	ldr	r3, [r7, #28]
 801e63e:	4413      	add	r3, r2
 801e640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	69ba      	ldr	r2, [r7, #24]
 801e648:	0151      	lsls	r1, r2, #5
 801e64a:	69fa      	ldr	r2, [r7, #28]
 801e64c:	440a      	add	r2, r1
 801e64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e656:	6013      	str	r3, [r2, #0]
 801e658:	e00f      	b.n	801e67a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e65a:	69bb      	ldr	r3, [r7, #24]
 801e65c:	015a      	lsls	r2, r3, #5
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	4413      	add	r3, r2
 801e662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	69ba      	ldr	r2, [r7, #24]
 801e66a:	0151      	lsls	r1, r2, #5
 801e66c:	69fa      	ldr	r2, [r7, #28]
 801e66e:	440a      	add	r2, r1
 801e670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e678:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e67a:	69bb      	ldr	r3, [r7, #24]
 801e67c:	015a      	lsls	r2, r3, #5
 801e67e:	69fb      	ldr	r3, [r7, #28]
 801e680:	4413      	add	r3, r2
 801e682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	69ba      	ldr	r2, [r7, #24]
 801e68a:	0151      	lsls	r1, r2, #5
 801e68c:	69fa      	ldr	r2, [r7, #28]
 801e68e:	440a      	add	r2, r1
 801e690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e698:	6013      	str	r3, [r2, #0]
 801e69a:	e133      	b.n	801e904 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e69c:	69bb      	ldr	r3, [r7, #24]
 801e69e:	015a      	lsls	r2, r3, #5
 801e6a0:	69fb      	ldr	r3, [r7, #28]
 801e6a2:	4413      	add	r3, r2
 801e6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	69ba      	ldr	r2, [r7, #24]
 801e6ac:	0151      	lsls	r1, r2, #5
 801e6ae:	69fa      	ldr	r2, [r7, #28]
 801e6b0:	440a      	add	r2, r1
 801e6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e6bc:	68bb      	ldr	r3, [r7, #8]
 801e6be:	791b      	ldrb	r3, [r3, #4]
 801e6c0:	2b01      	cmp	r3, #1
 801e6c2:	d015      	beq.n	801e6f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e6c4:	68bb      	ldr	r3, [r7, #8]
 801e6c6:	699b      	ldr	r3, [r3, #24]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	f000 811b 	beq.w	801e904 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e6ce:	69fb      	ldr	r3, [r7, #28]
 801e6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e6d6:	68bb      	ldr	r3, [r7, #8]
 801e6d8:	781b      	ldrb	r3, [r3, #0]
 801e6da:	f003 030f 	and.w	r3, r3, #15
 801e6de:	2101      	movs	r1, #1
 801e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 801e6e4:	69f9      	ldr	r1, [r7, #28]
 801e6e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e6ea:	4313      	orrs	r3, r2
 801e6ec:	634b      	str	r3, [r1, #52]	; 0x34
 801e6ee:	e109      	b.n	801e904 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e6f0:	69fb      	ldr	r3, [r7, #28]
 801e6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e6f6:	689b      	ldr	r3, [r3, #8]
 801e6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d110      	bne.n	801e722 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e700:	69bb      	ldr	r3, [r7, #24]
 801e702:	015a      	lsls	r2, r3, #5
 801e704:	69fb      	ldr	r3, [r7, #28]
 801e706:	4413      	add	r3, r2
 801e708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	69ba      	ldr	r2, [r7, #24]
 801e710:	0151      	lsls	r1, r2, #5
 801e712:	69fa      	ldr	r2, [r7, #28]
 801e714:	440a      	add	r2, r1
 801e716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e71a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e71e:	6013      	str	r3, [r2, #0]
 801e720:	e00f      	b.n	801e742 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e722:	69bb      	ldr	r3, [r7, #24]
 801e724:	015a      	lsls	r2, r3, #5
 801e726:	69fb      	ldr	r3, [r7, #28]
 801e728:	4413      	add	r3, r2
 801e72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	69ba      	ldr	r2, [r7, #24]
 801e732:	0151      	lsls	r1, r2, #5
 801e734:	69fa      	ldr	r2, [r7, #28]
 801e736:	440a      	add	r2, r1
 801e738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e740:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e742:	68bb      	ldr	r3, [r7, #8]
 801e744:	6919      	ldr	r1, [r3, #16]
 801e746:	68bb      	ldr	r3, [r7, #8]
 801e748:	781a      	ldrb	r2, [r3, #0]
 801e74a:	68bb      	ldr	r3, [r7, #8]
 801e74c:	699b      	ldr	r3, [r3, #24]
 801e74e:	b298      	uxth	r0, r3
 801e750:	79fb      	ldrb	r3, [r7, #7]
 801e752:	9300      	str	r3, [sp, #0]
 801e754:	4603      	mov	r3, r0
 801e756:	68f8      	ldr	r0, [r7, #12]
 801e758:	f000 fade 	bl	801ed18 <USB_WritePacket>
 801e75c:	e0d2      	b.n	801e904 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e75e:	69bb      	ldr	r3, [r7, #24]
 801e760:	015a      	lsls	r2, r3, #5
 801e762:	69fb      	ldr	r3, [r7, #28]
 801e764:	4413      	add	r3, r2
 801e766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e76a:	691b      	ldr	r3, [r3, #16]
 801e76c:	69ba      	ldr	r2, [r7, #24]
 801e76e:	0151      	lsls	r1, r2, #5
 801e770:	69fa      	ldr	r2, [r7, #28]
 801e772:	440a      	add	r2, r1
 801e774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e778:	0cdb      	lsrs	r3, r3, #19
 801e77a:	04db      	lsls	r3, r3, #19
 801e77c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e77e:	69bb      	ldr	r3, [r7, #24]
 801e780:	015a      	lsls	r2, r3, #5
 801e782:	69fb      	ldr	r3, [r7, #28]
 801e784:	4413      	add	r3, r2
 801e786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e78a:	691b      	ldr	r3, [r3, #16]
 801e78c:	69ba      	ldr	r2, [r7, #24]
 801e78e:	0151      	lsls	r1, r2, #5
 801e790:	69fa      	ldr	r2, [r7, #28]
 801e792:	440a      	add	r2, r1
 801e794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e79c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e7a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e7a2:	68bb      	ldr	r3, [r7, #8]
 801e7a4:	699b      	ldr	r3, [r3, #24]
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d126      	bne.n	801e7f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e7aa:	69bb      	ldr	r3, [r7, #24]
 801e7ac:	015a      	lsls	r2, r3, #5
 801e7ae:	69fb      	ldr	r3, [r7, #28]
 801e7b0:	4413      	add	r3, r2
 801e7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7b6:	691a      	ldr	r2, [r3, #16]
 801e7b8:	68bb      	ldr	r3, [r7, #8]
 801e7ba:	68db      	ldr	r3, [r3, #12]
 801e7bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e7c0:	69b9      	ldr	r1, [r7, #24]
 801e7c2:	0148      	lsls	r0, r1, #5
 801e7c4:	69f9      	ldr	r1, [r7, #28]
 801e7c6:	4401      	add	r1, r0
 801e7c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e7cc:	4313      	orrs	r3, r2
 801e7ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e7d0:	69bb      	ldr	r3, [r7, #24]
 801e7d2:	015a      	lsls	r2, r3, #5
 801e7d4:	69fb      	ldr	r3, [r7, #28]
 801e7d6:	4413      	add	r3, r2
 801e7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7dc:	691b      	ldr	r3, [r3, #16]
 801e7de:	69ba      	ldr	r2, [r7, #24]
 801e7e0:	0151      	lsls	r1, r2, #5
 801e7e2:	69fa      	ldr	r2, [r7, #28]
 801e7e4:	440a      	add	r2, r1
 801e7e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e7ee:	6113      	str	r3, [r2, #16]
 801e7f0:	e03a      	b.n	801e868 <USB_EPStartXfer+0x3e4>
 801e7f2:	bf00      	nop
 801e7f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e7f8:	68bb      	ldr	r3, [r7, #8]
 801e7fa:	699a      	ldr	r2, [r3, #24]
 801e7fc:	68bb      	ldr	r3, [r7, #8]
 801e7fe:	68db      	ldr	r3, [r3, #12]
 801e800:	4413      	add	r3, r2
 801e802:	1e5a      	subs	r2, r3, #1
 801e804:	68bb      	ldr	r3, [r7, #8]
 801e806:	68db      	ldr	r3, [r3, #12]
 801e808:	fbb2 f3f3 	udiv	r3, r2, r3
 801e80c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801e80e:	68bb      	ldr	r3, [r7, #8]
 801e810:	68db      	ldr	r3, [r3, #12]
 801e812:	8afa      	ldrh	r2, [r7, #22]
 801e814:	fb03 f202 	mul.w	r2, r3, r2
 801e818:	68bb      	ldr	r3, [r7, #8]
 801e81a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e81c:	69bb      	ldr	r3, [r7, #24]
 801e81e:	015a      	lsls	r2, r3, #5
 801e820:	69fb      	ldr	r3, [r7, #28]
 801e822:	4413      	add	r3, r2
 801e824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e828:	691a      	ldr	r2, [r3, #16]
 801e82a:	8afb      	ldrh	r3, [r7, #22]
 801e82c:	04d9      	lsls	r1, r3, #19
 801e82e:	4b38      	ldr	r3, [pc, #224]	; (801e910 <USB_EPStartXfer+0x48c>)
 801e830:	400b      	ands	r3, r1
 801e832:	69b9      	ldr	r1, [r7, #24]
 801e834:	0148      	lsls	r0, r1, #5
 801e836:	69f9      	ldr	r1, [r7, #28]
 801e838:	4401      	add	r1, r0
 801e83a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e83e:	4313      	orrs	r3, r2
 801e840:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801e842:	69bb      	ldr	r3, [r7, #24]
 801e844:	015a      	lsls	r2, r3, #5
 801e846:	69fb      	ldr	r3, [r7, #28]
 801e848:	4413      	add	r3, r2
 801e84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e84e:	691a      	ldr	r2, [r3, #16]
 801e850:	68bb      	ldr	r3, [r7, #8]
 801e852:	69db      	ldr	r3, [r3, #28]
 801e854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e858:	69b9      	ldr	r1, [r7, #24]
 801e85a:	0148      	lsls	r0, r1, #5
 801e85c:	69f9      	ldr	r1, [r7, #28]
 801e85e:	4401      	add	r1, r0
 801e860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e864:	4313      	orrs	r3, r2
 801e866:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e868:	79fb      	ldrb	r3, [r7, #7]
 801e86a:	2b01      	cmp	r3, #1
 801e86c:	d10d      	bne.n	801e88a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e86e:	68bb      	ldr	r3, [r7, #8]
 801e870:	691b      	ldr	r3, [r3, #16]
 801e872:	2b00      	cmp	r3, #0
 801e874:	d009      	beq.n	801e88a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e876:	68bb      	ldr	r3, [r7, #8]
 801e878:	6919      	ldr	r1, [r3, #16]
 801e87a:	69bb      	ldr	r3, [r7, #24]
 801e87c:	015a      	lsls	r2, r3, #5
 801e87e:	69fb      	ldr	r3, [r7, #28]
 801e880:	4413      	add	r3, r2
 801e882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e886:	460a      	mov	r2, r1
 801e888:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e88a:	68bb      	ldr	r3, [r7, #8]
 801e88c:	791b      	ldrb	r3, [r3, #4]
 801e88e:	2b01      	cmp	r3, #1
 801e890:	d128      	bne.n	801e8e4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e892:	69fb      	ldr	r3, [r7, #28]
 801e894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e898:	689b      	ldr	r3, [r3, #8]
 801e89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d110      	bne.n	801e8c4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e8a2:	69bb      	ldr	r3, [r7, #24]
 801e8a4:	015a      	lsls	r2, r3, #5
 801e8a6:	69fb      	ldr	r3, [r7, #28]
 801e8a8:	4413      	add	r3, r2
 801e8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	69ba      	ldr	r2, [r7, #24]
 801e8b2:	0151      	lsls	r1, r2, #5
 801e8b4:	69fa      	ldr	r2, [r7, #28]
 801e8b6:	440a      	add	r2, r1
 801e8b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e8c0:	6013      	str	r3, [r2, #0]
 801e8c2:	e00f      	b.n	801e8e4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e8c4:	69bb      	ldr	r3, [r7, #24]
 801e8c6:	015a      	lsls	r2, r3, #5
 801e8c8:	69fb      	ldr	r3, [r7, #28]
 801e8ca:	4413      	add	r3, r2
 801e8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	69ba      	ldr	r2, [r7, #24]
 801e8d4:	0151      	lsls	r1, r2, #5
 801e8d6:	69fa      	ldr	r2, [r7, #28]
 801e8d8:	440a      	add	r2, r1
 801e8da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e8e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e8e4:	69bb      	ldr	r3, [r7, #24]
 801e8e6:	015a      	lsls	r2, r3, #5
 801e8e8:	69fb      	ldr	r3, [r7, #28]
 801e8ea:	4413      	add	r3, r2
 801e8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	69ba      	ldr	r2, [r7, #24]
 801e8f4:	0151      	lsls	r1, r2, #5
 801e8f6:	69fa      	ldr	r2, [r7, #28]
 801e8f8:	440a      	add	r2, r1
 801e8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e8fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e902:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e904:	2300      	movs	r3, #0
}
 801e906:	4618      	mov	r0, r3
 801e908:	3720      	adds	r7, #32
 801e90a:	46bd      	mov	sp, r7
 801e90c:	bd80      	pop	{r7, pc}
 801e90e:	bf00      	nop
 801e910:	1ff80000 	.word	0x1ff80000

0801e914 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e914:	b480      	push	{r7}
 801e916:	b087      	sub	sp, #28
 801e918:	af00      	add	r7, sp, #0
 801e91a:	60f8      	str	r0, [r7, #12]
 801e91c:	60b9      	str	r1, [r7, #8]
 801e91e:	4613      	mov	r3, r2
 801e920:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	781b      	ldrb	r3, [r3, #0]
 801e92a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e92c:	68bb      	ldr	r3, [r7, #8]
 801e92e:	785b      	ldrb	r3, [r3, #1]
 801e930:	2b01      	cmp	r3, #1
 801e932:	f040 80ce 	bne.w	801ead2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e936:	68bb      	ldr	r3, [r7, #8]
 801e938:	699b      	ldr	r3, [r3, #24]
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d132      	bne.n	801e9a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e93e:	693b      	ldr	r3, [r7, #16]
 801e940:	015a      	lsls	r2, r3, #5
 801e942:	697b      	ldr	r3, [r7, #20]
 801e944:	4413      	add	r3, r2
 801e946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e94a:	691b      	ldr	r3, [r3, #16]
 801e94c:	693a      	ldr	r2, [r7, #16]
 801e94e:	0151      	lsls	r1, r2, #5
 801e950:	697a      	ldr	r2, [r7, #20]
 801e952:	440a      	add	r2, r1
 801e954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e958:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e95c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e962:	693b      	ldr	r3, [r7, #16]
 801e964:	015a      	lsls	r2, r3, #5
 801e966:	697b      	ldr	r3, [r7, #20]
 801e968:	4413      	add	r3, r2
 801e96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e96e:	691b      	ldr	r3, [r3, #16]
 801e970:	693a      	ldr	r2, [r7, #16]
 801e972:	0151      	lsls	r1, r2, #5
 801e974:	697a      	ldr	r2, [r7, #20]
 801e976:	440a      	add	r2, r1
 801e978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e97c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e980:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e982:	693b      	ldr	r3, [r7, #16]
 801e984:	015a      	lsls	r2, r3, #5
 801e986:	697b      	ldr	r3, [r7, #20]
 801e988:	4413      	add	r3, r2
 801e98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e98e:	691b      	ldr	r3, [r3, #16]
 801e990:	693a      	ldr	r2, [r7, #16]
 801e992:	0151      	lsls	r1, r2, #5
 801e994:	697a      	ldr	r2, [r7, #20]
 801e996:	440a      	add	r2, r1
 801e998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e99c:	0cdb      	lsrs	r3, r3, #19
 801e99e:	04db      	lsls	r3, r3, #19
 801e9a0:	6113      	str	r3, [r2, #16]
 801e9a2:	e04e      	b.n	801ea42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9a4:	693b      	ldr	r3, [r7, #16]
 801e9a6:	015a      	lsls	r2, r3, #5
 801e9a8:	697b      	ldr	r3, [r7, #20]
 801e9aa:	4413      	add	r3, r2
 801e9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9b0:	691b      	ldr	r3, [r3, #16]
 801e9b2:	693a      	ldr	r2, [r7, #16]
 801e9b4:	0151      	lsls	r1, r2, #5
 801e9b6:	697a      	ldr	r2, [r7, #20]
 801e9b8:	440a      	add	r2, r1
 801e9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9be:	0cdb      	lsrs	r3, r3, #19
 801e9c0:	04db      	lsls	r3, r3, #19
 801e9c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e9c4:	693b      	ldr	r3, [r7, #16]
 801e9c6:	015a      	lsls	r2, r3, #5
 801e9c8:	697b      	ldr	r3, [r7, #20]
 801e9ca:	4413      	add	r3, r2
 801e9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9d0:	691b      	ldr	r3, [r3, #16]
 801e9d2:	693a      	ldr	r2, [r7, #16]
 801e9d4:	0151      	lsls	r1, r2, #5
 801e9d6:	697a      	ldr	r2, [r7, #20]
 801e9d8:	440a      	add	r2, r1
 801e9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e9e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e9e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801e9e8:	68bb      	ldr	r3, [r7, #8]
 801e9ea:	699a      	ldr	r2, [r3, #24]
 801e9ec:	68bb      	ldr	r3, [r7, #8]
 801e9ee:	68db      	ldr	r3, [r3, #12]
 801e9f0:	429a      	cmp	r2, r3
 801e9f2:	d903      	bls.n	801e9fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801e9f4:	68bb      	ldr	r3, [r7, #8]
 801e9f6:	68da      	ldr	r2, [r3, #12]
 801e9f8:	68bb      	ldr	r3, [r7, #8]
 801e9fa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e9fc:	693b      	ldr	r3, [r7, #16]
 801e9fe:	015a      	lsls	r2, r3, #5
 801ea00:	697b      	ldr	r3, [r7, #20]
 801ea02:	4413      	add	r3, r2
 801ea04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea08:	691b      	ldr	r3, [r3, #16]
 801ea0a:	693a      	ldr	r2, [r7, #16]
 801ea0c:	0151      	lsls	r1, r2, #5
 801ea0e:	697a      	ldr	r2, [r7, #20]
 801ea10:	440a      	add	r2, r1
 801ea12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ea1c:	693b      	ldr	r3, [r7, #16]
 801ea1e:	015a      	lsls	r2, r3, #5
 801ea20:	697b      	ldr	r3, [r7, #20]
 801ea22:	4413      	add	r3, r2
 801ea24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea28:	691a      	ldr	r2, [r3, #16]
 801ea2a:	68bb      	ldr	r3, [r7, #8]
 801ea2c:	699b      	ldr	r3, [r3, #24]
 801ea2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea32:	6939      	ldr	r1, [r7, #16]
 801ea34:	0148      	lsls	r0, r1, #5
 801ea36:	6979      	ldr	r1, [r7, #20]
 801ea38:	4401      	add	r1, r0
 801ea3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea3e:	4313      	orrs	r3, r2
 801ea40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea42:	79fb      	ldrb	r3, [r7, #7]
 801ea44:	2b01      	cmp	r3, #1
 801ea46:	d11e      	bne.n	801ea86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea48:	68bb      	ldr	r3, [r7, #8]
 801ea4a:	695b      	ldr	r3, [r3, #20]
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d009      	beq.n	801ea64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea50:	693b      	ldr	r3, [r7, #16]
 801ea52:	015a      	lsls	r2, r3, #5
 801ea54:	697b      	ldr	r3, [r7, #20]
 801ea56:	4413      	add	r3, r2
 801ea58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea5c:	461a      	mov	r2, r3
 801ea5e:	68bb      	ldr	r3, [r7, #8]
 801ea60:	695b      	ldr	r3, [r3, #20]
 801ea62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea64:	693b      	ldr	r3, [r7, #16]
 801ea66:	015a      	lsls	r2, r3, #5
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	4413      	add	r3, r2
 801ea6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	693a      	ldr	r2, [r7, #16]
 801ea74:	0151      	lsls	r1, r2, #5
 801ea76:	697a      	ldr	r2, [r7, #20]
 801ea78:	440a      	add	r2, r1
 801ea7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ea82:	6013      	str	r3, [r2, #0]
 801ea84:	e097      	b.n	801ebb6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ea86:	693b      	ldr	r3, [r7, #16]
 801ea88:	015a      	lsls	r2, r3, #5
 801ea8a:	697b      	ldr	r3, [r7, #20]
 801ea8c:	4413      	add	r3, r2
 801ea8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	693a      	ldr	r2, [r7, #16]
 801ea96:	0151      	lsls	r1, r2, #5
 801ea98:	697a      	ldr	r2, [r7, #20]
 801ea9a:	440a      	add	r2, r1
 801ea9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eaa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaa4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801eaa6:	68bb      	ldr	r3, [r7, #8]
 801eaa8:	699b      	ldr	r3, [r3, #24]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	f000 8083 	beq.w	801ebb6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eab8:	68bb      	ldr	r3, [r7, #8]
 801eaba:	781b      	ldrb	r3, [r3, #0]
 801eabc:	f003 030f 	and.w	r3, r3, #15
 801eac0:	2101      	movs	r1, #1
 801eac2:	fa01 f303 	lsl.w	r3, r1, r3
 801eac6:	6979      	ldr	r1, [r7, #20]
 801eac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eacc:	4313      	orrs	r3, r2
 801eace:	634b      	str	r3, [r1, #52]	; 0x34
 801ead0:	e071      	b.n	801ebb6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ead2:	693b      	ldr	r3, [r7, #16]
 801ead4:	015a      	lsls	r2, r3, #5
 801ead6:	697b      	ldr	r3, [r7, #20]
 801ead8:	4413      	add	r3, r2
 801eada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eade:	691b      	ldr	r3, [r3, #16]
 801eae0:	693a      	ldr	r2, [r7, #16]
 801eae2:	0151      	lsls	r1, r2, #5
 801eae4:	697a      	ldr	r2, [r7, #20]
 801eae6:	440a      	add	r2, r1
 801eae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eaec:	0cdb      	lsrs	r3, r3, #19
 801eaee:	04db      	lsls	r3, r3, #19
 801eaf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eaf2:	693b      	ldr	r3, [r7, #16]
 801eaf4:	015a      	lsls	r2, r3, #5
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	4413      	add	r3, r2
 801eafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eafe:	691b      	ldr	r3, [r3, #16]
 801eb00:	693a      	ldr	r2, [r7, #16]
 801eb02:	0151      	lsls	r1, r2, #5
 801eb04:	697a      	ldr	r2, [r7, #20]
 801eb06:	440a      	add	r2, r1
 801eb08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eb16:	68bb      	ldr	r3, [r7, #8]
 801eb18:	699b      	ldr	r3, [r3, #24]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d003      	beq.n	801eb26 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801eb1e:	68bb      	ldr	r3, [r7, #8]
 801eb20:	68da      	ldr	r2, [r3, #12]
 801eb22:	68bb      	ldr	r3, [r7, #8]
 801eb24:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801eb26:	68bb      	ldr	r3, [r7, #8]
 801eb28:	68da      	ldr	r2, [r3, #12]
 801eb2a:	68bb      	ldr	r3, [r7, #8]
 801eb2c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eb2e:	693b      	ldr	r3, [r7, #16]
 801eb30:	015a      	lsls	r2, r3, #5
 801eb32:	697b      	ldr	r3, [r7, #20]
 801eb34:	4413      	add	r3, r2
 801eb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb3a:	691b      	ldr	r3, [r3, #16]
 801eb3c:	693a      	ldr	r2, [r7, #16]
 801eb3e:	0151      	lsls	r1, r2, #5
 801eb40:	697a      	ldr	r2, [r7, #20]
 801eb42:	440a      	add	r2, r1
 801eb44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801eb4e:	693b      	ldr	r3, [r7, #16]
 801eb50:	015a      	lsls	r2, r3, #5
 801eb52:	697b      	ldr	r3, [r7, #20]
 801eb54:	4413      	add	r3, r2
 801eb56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb5a:	691a      	ldr	r2, [r3, #16]
 801eb5c:	68bb      	ldr	r3, [r7, #8]
 801eb5e:	69db      	ldr	r3, [r3, #28]
 801eb60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801eb64:	6939      	ldr	r1, [r7, #16]
 801eb66:	0148      	lsls	r0, r1, #5
 801eb68:	6979      	ldr	r1, [r7, #20]
 801eb6a:	4401      	add	r1, r0
 801eb6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801eb70:	4313      	orrs	r3, r2
 801eb72:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801eb74:	79fb      	ldrb	r3, [r7, #7]
 801eb76:	2b01      	cmp	r3, #1
 801eb78:	d10d      	bne.n	801eb96 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801eb7a:	68bb      	ldr	r3, [r7, #8]
 801eb7c:	691b      	ldr	r3, [r3, #16]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d009      	beq.n	801eb96 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801eb82:	68bb      	ldr	r3, [r7, #8]
 801eb84:	6919      	ldr	r1, [r3, #16]
 801eb86:	693b      	ldr	r3, [r7, #16]
 801eb88:	015a      	lsls	r2, r3, #5
 801eb8a:	697b      	ldr	r3, [r7, #20]
 801eb8c:	4413      	add	r3, r2
 801eb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb92:	460a      	mov	r2, r1
 801eb94:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801eb96:	693b      	ldr	r3, [r7, #16]
 801eb98:	015a      	lsls	r2, r3, #5
 801eb9a:	697b      	ldr	r3, [r7, #20]
 801eb9c:	4413      	add	r3, r2
 801eb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eba2:	681b      	ldr	r3, [r3, #0]
 801eba4:	693a      	ldr	r2, [r7, #16]
 801eba6:	0151      	lsls	r1, r2, #5
 801eba8:	697a      	ldr	r2, [r7, #20]
 801ebaa:	440a      	add	r2, r1
 801ebac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ebb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ebb6:	2300      	movs	r3, #0
}
 801ebb8:	4618      	mov	r0, r3
 801ebba:	371c      	adds	r7, #28
 801ebbc:	46bd      	mov	sp, r7
 801ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebc2:	4770      	bx	lr

0801ebc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ebc4:	b480      	push	{r7}
 801ebc6:	b087      	sub	sp, #28
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	6078      	str	r0, [r7, #4]
 801ebcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801ebce:	2300      	movs	r3, #0
 801ebd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ebda:	683b      	ldr	r3, [r7, #0]
 801ebdc:	785b      	ldrb	r3, [r3, #1]
 801ebde:	2b01      	cmp	r3, #1
 801ebe0:	d14a      	bne.n	801ec78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ebe2:	683b      	ldr	r3, [r7, #0]
 801ebe4:	781b      	ldrb	r3, [r3, #0]
 801ebe6:	015a      	lsls	r2, r3, #5
 801ebe8:	693b      	ldr	r3, [r7, #16]
 801ebea:	4413      	add	r3, r2
 801ebec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ebf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ebfa:	f040 8086 	bne.w	801ed0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801ebfe:	683b      	ldr	r3, [r7, #0]
 801ec00:	781b      	ldrb	r3, [r3, #0]
 801ec02:	015a      	lsls	r2, r3, #5
 801ec04:	693b      	ldr	r3, [r7, #16]
 801ec06:	4413      	add	r3, r2
 801ec08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	683a      	ldr	r2, [r7, #0]
 801ec10:	7812      	ldrb	r2, [r2, #0]
 801ec12:	0151      	lsls	r1, r2, #5
 801ec14:	693a      	ldr	r2, [r7, #16]
 801ec16:	440a      	add	r2, r1
 801ec18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ec20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	781b      	ldrb	r3, [r3, #0]
 801ec26:	015a      	lsls	r2, r3, #5
 801ec28:	693b      	ldr	r3, [r7, #16]
 801ec2a:	4413      	add	r3, r2
 801ec2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	683a      	ldr	r2, [r7, #0]
 801ec34:	7812      	ldrb	r2, [r2, #0]
 801ec36:	0151      	lsls	r1, r2, #5
 801ec38:	693a      	ldr	r2, [r7, #16]
 801ec3a:	440a      	add	r2, r1
 801ec3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ec44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	3301      	adds	r3, #1
 801ec4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801ec4c:	68fb      	ldr	r3, [r7, #12]
 801ec4e:	f242 7210 	movw	r2, #10000	; 0x2710
 801ec52:	4293      	cmp	r3, r2
 801ec54:	d902      	bls.n	801ec5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801ec56:	2301      	movs	r3, #1
 801ec58:	75fb      	strb	r3, [r7, #23]
          break;
 801ec5a:	e056      	b.n	801ed0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801ec5c:	683b      	ldr	r3, [r7, #0]
 801ec5e:	781b      	ldrb	r3, [r3, #0]
 801ec60:	015a      	lsls	r2, r3, #5
 801ec62:	693b      	ldr	r3, [r7, #16]
 801ec64:	4413      	add	r3, r2
 801ec66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ec70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ec74:	d0e7      	beq.n	801ec46 <USB_EPStopXfer+0x82>
 801ec76:	e048      	b.n	801ed0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ec78:	683b      	ldr	r3, [r7, #0]
 801ec7a:	781b      	ldrb	r3, [r3, #0]
 801ec7c:	015a      	lsls	r2, r3, #5
 801ec7e:	693b      	ldr	r3, [r7, #16]
 801ec80:	4413      	add	r3, r2
 801ec82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ec86:	681b      	ldr	r3, [r3, #0]
 801ec88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ec8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ec90:	d13b      	bne.n	801ed0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801ec92:	683b      	ldr	r3, [r7, #0]
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	015a      	lsls	r2, r3, #5
 801ec98:	693b      	ldr	r3, [r7, #16]
 801ec9a:	4413      	add	r3, r2
 801ec9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eca0:	681b      	ldr	r3, [r3, #0]
 801eca2:	683a      	ldr	r2, [r7, #0]
 801eca4:	7812      	ldrb	r2, [r2, #0]
 801eca6:	0151      	lsls	r1, r2, #5
 801eca8:	693a      	ldr	r2, [r7, #16]
 801ecaa:	440a      	add	r2, r1
 801ecac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ecb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ecb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801ecb6:	683b      	ldr	r3, [r7, #0]
 801ecb8:	781b      	ldrb	r3, [r3, #0]
 801ecba:	015a      	lsls	r2, r3, #5
 801ecbc:	693b      	ldr	r3, [r7, #16]
 801ecbe:	4413      	add	r3, r2
 801ecc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	683a      	ldr	r2, [r7, #0]
 801ecc8:	7812      	ldrb	r2, [r2, #0]
 801ecca:	0151      	lsls	r1, r2, #5
 801eccc:	693a      	ldr	r2, [r7, #16]
 801ecce:	440a      	add	r2, r1
 801ecd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ecd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ecd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801ecda:	68fb      	ldr	r3, [r7, #12]
 801ecdc:	3301      	adds	r3, #1
 801ecde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801ece0:	68fb      	ldr	r3, [r7, #12]
 801ece2:	f242 7210 	movw	r2, #10000	; 0x2710
 801ece6:	4293      	cmp	r3, r2
 801ece8:	d902      	bls.n	801ecf0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801ecea:	2301      	movs	r3, #1
 801ecec:	75fb      	strb	r3, [r7, #23]
          break;
 801ecee:	e00c      	b.n	801ed0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801ecf0:	683b      	ldr	r3, [r7, #0]
 801ecf2:	781b      	ldrb	r3, [r3, #0]
 801ecf4:	015a      	lsls	r2, r3, #5
 801ecf6:	693b      	ldr	r3, [r7, #16]
 801ecf8:	4413      	add	r3, r2
 801ecfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ed04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ed08:	d0e7      	beq.n	801ecda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801ed0a:	7dfb      	ldrb	r3, [r7, #23]
}
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	371c      	adds	r7, #28
 801ed10:	46bd      	mov	sp, r7
 801ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed16:	4770      	bx	lr

0801ed18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ed18:	b480      	push	{r7}
 801ed1a:	b089      	sub	sp, #36	; 0x24
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	60f8      	str	r0, [r7, #12]
 801ed20:	60b9      	str	r1, [r7, #8]
 801ed22:	4611      	mov	r1, r2
 801ed24:	461a      	mov	r2, r3
 801ed26:	460b      	mov	r3, r1
 801ed28:	71fb      	strb	r3, [r7, #7]
 801ed2a:	4613      	mov	r3, r2
 801ed2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ed32:	68bb      	ldr	r3, [r7, #8]
 801ed34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ed36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d123      	bne.n	801ed86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ed3e:	88bb      	ldrh	r3, [r7, #4]
 801ed40:	3303      	adds	r3, #3
 801ed42:	089b      	lsrs	r3, r3, #2
 801ed44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ed46:	2300      	movs	r3, #0
 801ed48:	61bb      	str	r3, [r7, #24]
 801ed4a:	e018      	b.n	801ed7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ed4c:	79fb      	ldrb	r3, [r7, #7]
 801ed4e:	031a      	lsls	r2, r3, #12
 801ed50:	697b      	ldr	r3, [r7, #20]
 801ed52:	4413      	add	r3, r2
 801ed54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ed58:	461a      	mov	r2, r3
 801ed5a:	69fb      	ldr	r3, [r7, #28]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 801ed60:	69fb      	ldr	r3, [r7, #28]
 801ed62:	3301      	adds	r3, #1
 801ed64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ed66:	69fb      	ldr	r3, [r7, #28]
 801ed68:	3301      	adds	r3, #1
 801ed6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ed6c:	69fb      	ldr	r3, [r7, #28]
 801ed6e:	3301      	adds	r3, #1
 801ed70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801ed72:	69fb      	ldr	r3, [r7, #28]
 801ed74:	3301      	adds	r3, #1
 801ed76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ed78:	69bb      	ldr	r3, [r7, #24]
 801ed7a:	3301      	adds	r3, #1
 801ed7c:	61bb      	str	r3, [r7, #24]
 801ed7e:	69ba      	ldr	r2, [r7, #24]
 801ed80:	693b      	ldr	r3, [r7, #16]
 801ed82:	429a      	cmp	r2, r3
 801ed84:	d3e2      	bcc.n	801ed4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801ed86:	2300      	movs	r3, #0
}
 801ed88:	4618      	mov	r0, r3
 801ed8a:	3724      	adds	r7, #36	; 0x24
 801ed8c:	46bd      	mov	sp, r7
 801ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed92:	4770      	bx	lr

0801ed94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ed94:	b480      	push	{r7}
 801ed96:	b08b      	sub	sp, #44	; 0x2c
 801ed98:	af00      	add	r7, sp, #0
 801ed9a:	60f8      	str	r0, [r7, #12]
 801ed9c:	60b9      	str	r1, [r7, #8]
 801ed9e:	4613      	mov	r3, r2
 801eda0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801eda6:	68bb      	ldr	r3, [r7, #8]
 801eda8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801edaa:	88fb      	ldrh	r3, [r7, #6]
 801edac:	089b      	lsrs	r3, r3, #2
 801edae:	b29b      	uxth	r3, r3
 801edb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801edb2:	88fb      	ldrh	r3, [r7, #6]
 801edb4:	f003 0303 	and.w	r3, r3, #3
 801edb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801edba:	2300      	movs	r3, #0
 801edbc:	623b      	str	r3, [r7, #32]
 801edbe:	e014      	b.n	801edea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801edc0:	69bb      	ldr	r3, [r7, #24]
 801edc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801edc6:	681a      	ldr	r2, [r3, #0]
 801edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edca:	601a      	str	r2, [r3, #0]
    pDest++;
 801edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edce:	3301      	adds	r3, #1
 801edd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edd4:	3301      	adds	r3, #1
 801edd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edda:	3301      	adds	r3, #1
 801eddc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ede0:	3301      	adds	r3, #1
 801ede2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ede4:	6a3b      	ldr	r3, [r7, #32]
 801ede6:	3301      	adds	r3, #1
 801ede8:	623b      	str	r3, [r7, #32]
 801edea:	6a3a      	ldr	r2, [r7, #32]
 801edec:	697b      	ldr	r3, [r7, #20]
 801edee:	429a      	cmp	r2, r3
 801edf0:	d3e6      	bcc.n	801edc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801edf2:	8bfb      	ldrh	r3, [r7, #30]
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	d01e      	beq.n	801ee36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801edf8:	2300      	movs	r3, #0
 801edfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801edfc:	69bb      	ldr	r3, [r7, #24]
 801edfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ee02:	461a      	mov	r2, r3
 801ee04:	f107 0310 	add.w	r3, r7, #16
 801ee08:	6812      	ldr	r2, [r2, #0]
 801ee0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ee0c:	693a      	ldr	r2, [r7, #16]
 801ee0e:	6a3b      	ldr	r3, [r7, #32]
 801ee10:	b2db      	uxtb	r3, r3
 801ee12:	00db      	lsls	r3, r3, #3
 801ee14:	fa22 f303 	lsr.w	r3, r2, r3
 801ee18:	b2da      	uxtb	r2, r3
 801ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee1c:	701a      	strb	r2, [r3, #0]
      i++;
 801ee1e:	6a3b      	ldr	r3, [r7, #32]
 801ee20:	3301      	adds	r3, #1
 801ee22:	623b      	str	r3, [r7, #32]
      pDest++;
 801ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee26:	3301      	adds	r3, #1
 801ee28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ee2a:	8bfb      	ldrh	r3, [r7, #30]
 801ee2c:	3b01      	subs	r3, #1
 801ee2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ee30:	8bfb      	ldrh	r3, [r7, #30]
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	d1ea      	bne.n	801ee0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ee36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ee38:	4618      	mov	r0, r3
 801ee3a:	372c      	adds	r7, #44	; 0x2c
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee42:	4770      	bx	lr

0801ee44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ee44:	b480      	push	{r7}
 801ee46:	b085      	sub	sp, #20
 801ee48:	af00      	add	r7, sp, #0
 801ee4a:	6078      	str	r0, [r7, #4]
 801ee4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ee52:	683b      	ldr	r3, [r7, #0]
 801ee54:	781b      	ldrb	r3, [r3, #0]
 801ee56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ee58:	683b      	ldr	r3, [r7, #0]
 801ee5a:	785b      	ldrb	r3, [r3, #1]
 801ee5c:	2b01      	cmp	r3, #1
 801ee5e:	d12c      	bne.n	801eeba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ee60:	68bb      	ldr	r3, [r7, #8]
 801ee62:	015a      	lsls	r2, r3, #5
 801ee64:	68fb      	ldr	r3, [r7, #12]
 801ee66:	4413      	add	r3, r2
 801ee68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	db12      	blt.n	801ee98 <USB_EPSetStall+0x54>
 801ee72:	68bb      	ldr	r3, [r7, #8]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d00f      	beq.n	801ee98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ee78:	68bb      	ldr	r3, [r7, #8]
 801ee7a:	015a      	lsls	r2, r3, #5
 801ee7c:	68fb      	ldr	r3, [r7, #12]
 801ee7e:	4413      	add	r3, r2
 801ee80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	68ba      	ldr	r2, [r7, #8]
 801ee88:	0151      	lsls	r1, r2, #5
 801ee8a:	68fa      	ldr	r2, [r7, #12]
 801ee8c:	440a      	add	r2, r1
 801ee8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ee92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ee96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ee98:	68bb      	ldr	r3, [r7, #8]
 801ee9a:	015a      	lsls	r2, r3, #5
 801ee9c:	68fb      	ldr	r3, [r7, #12]
 801ee9e:	4413      	add	r3, r2
 801eea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	68ba      	ldr	r2, [r7, #8]
 801eea8:	0151      	lsls	r1, r2, #5
 801eeaa:	68fa      	ldr	r2, [r7, #12]
 801eeac:	440a      	add	r2, r1
 801eeae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eeb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801eeb6:	6013      	str	r3, [r2, #0]
 801eeb8:	e02b      	b.n	801ef12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801eeba:	68bb      	ldr	r3, [r7, #8]
 801eebc:	015a      	lsls	r2, r3, #5
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	4413      	add	r3, r2
 801eec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	db12      	blt.n	801eef2 <USB_EPSetStall+0xae>
 801eecc:	68bb      	ldr	r3, [r7, #8]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d00f      	beq.n	801eef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801eed2:	68bb      	ldr	r3, [r7, #8]
 801eed4:	015a      	lsls	r2, r3, #5
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	4413      	add	r3, r2
 801eeda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	68ba      	ldr	r2, [r7, #8]
 801eee2:	0151      	lsls	r1, r2, #5
 801eee4:	68fa      	ldr	r2, [r7, #12]
 801eee6:	440a      	add	r2, r1
 801eee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eeec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801eef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801eef2:	68bb      	ldr	r3, [r7, #8]
 801eef4:	015a      	lsls	r2, r3, #5
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	4413      	add	r3, r2
 801eefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	68ba      	ldr	r2, [r7, #8]
 801ef02:	0151      	lsls	r1, r2, #5
 801ef04:	68fa      	ldr	r2, [r7, #12]
 801ef06:	440a      	add	r2, r1
 801ef08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ef10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ef12:	2300      	movs	r3, #0
}
 801ef14:	4618      	mov	r0, r3
 801ef16:	3714      	adds	r7, #20
 801ef18:	46bd      	mov	sp, r7
 801ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef1e:	4770      	bx	lr

0801ef20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ef20:	b480      	push	{r7}
 801ef22:	b085      	sub	sp, #20
 801ef24:	af00      	add	r7, sp, #0
 801ef26:	6078      	str	r0, [r7, #4]
 801ef28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ef2e:	683b      	ldr	r3, [r7, #0]
 801ef30:	781b      	ldrb	r3, [r3, #0]
 801ef32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	785b      	ldrb	r3, [r3, #1]
 801ef38:	2b01      	cmp	r3, #1
 801ef3a:	d128      	bne.n	801ef8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ef3c:	68bb      	ldr	r3, [r7, #8]
 801ef3e:	015a      	lsls	r2, r3, #5
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	4413      	add	r3, r2
 801ef44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	68ba      	ldr	r2, [r7, #8]
 801ef4c:	0151      	lsls	r1, r2, #5
 801ef4e:	68fa      	ldr	r2, [r7, #12]
 801ef50:	440a      	add	r2, r1
 801ef52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ef56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ef5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	791b      	ldrb	r3, [r3, #4]
 801ef60:	2b03      	cmp	r3, #3
 801ef62:	d003      	beq.n	801ef6c <USB_EPClearStall+0x4c>
 801ef64:	683b      	ldr	r3, [r7, #0]
 801ef66:	791b      	ldrb	r3, [r3, #4]
 801ef68:	2b02      	cmp	r3, #2
 801ef6a:	d138      	bne.n	801efde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ef6c:	68bb      	ldr	r3, [r7, #8]
 801ef6e:	015a      	lsls	r2, r3, #5
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	4413      	add	r3, r2
 801ef74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	68ba      	ldr	r2, [r7, #8]
 801ef7c:	0151      	lsls	r1, r2, #5
 801ef7e:	68fa      	ldr	r2, [r7, #12]
 801ef80:	440a      	add	r2, r1
 801ef82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ef86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ef8a:	6013      	str	r3, [r2, #0]
 801ef8c:	e027      	b.n	801efde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ef8e:	68bb      	ldr	r3, [r7, #8]
 801ef90:	015a      	lsls	r2, r3, #5
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	4413      	add	r3, r2
 801ef96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef9a:	681b      	ldr	r3, [r3, #0]
 801ef9c:	68ba      	ldr	r2, [r7, #8]
 801ef9e:	0151      	lsls	r1, r2, #5
 801efa0:	68fa      	ldr	r2, [r7, #12]
 801efa2:	440a      	add	r2, r1
 801efa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801efa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801efac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801efae:	683b      	ldr	r3, [r7, #0]
 801efb0:	791b      	ldrb	r3, [r3, #4]
 801efb2:	2b03      	cmp	r3, #3
 801efb4:	d003      	beq.n	801efbe <USB_EPClearStall+0x9e>
 801efb6:	683b      	ldr	r3, [r7, #0]
 801efb8:	791b      	ldrb	r3, [r3, #4]
 801efba:	2b02      	cmp	r3, #2
 801efbc:	d10f      	bne.n	801efde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801efbe:	68bb      	ldr	r3, [r7, #8]
 801efc0:	015a      	lsls	r2, r3, #5
 801efc2:	68fb      	ldr	r3, [r7, #12]
 801efc4:	4413      	add	r3, r2
 801efc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	68ba      	ldr	r2, [r7, #8]
 801efce:	0151      	lsls	r1, r2, #5
 801efd0:	68fa      	ldr	r2, [r7, #12]
 801efd2:	440a      	add	r2, r1
 801efd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801efd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801efdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801efde:	2300      	movs	r3, #0
}
 801efe0:	4618      	mov	r0, r3
 801efe2:	3714      	adds	r7, #20
 801efe4:	46bd      	mov	sp, r7
 801efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efea:	4770      	bx	lr

0801efec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801efec:	b480      	push	{r7}
 801efee:	b085      	sub	sp, #20
 801eff0:	af00      	add	r7, sp, #0
 801eff2:	6078      	str	r0, [r7, #4]
 801eff4:	460b      	mov	r3, r1
 801eff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801effc:	68fb      	ldr	r3, [r7, #12]
 801effe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	68fa      	ldr	r2, [r7, #12]
 801f006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f00a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f00e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f016:	681a      	ldr	r2, [r3, #0]
 801f018:	78fb      	ldrb	r3, [r7, #3]
 801f01a:	011b      	lsls	r3, r3, #4
 801f01c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f020:	68f9      	ldr	r1, [r7, #12]
 801f022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f026:	4313      	orrs	r3, r2
 801f028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f02a:	2300      	movs	r3, #0
}
 801f02c:	4618      	mov	r0, r3
 801f02e:	3714      	adds	r7, #20
 801f030:	46bd      	mov	sp, r7
 801f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f036:	4770      	bx	lr

0801f038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f038:	b480      	push	{r7}
 801f03a:	b085      	sub	sp, #20
 801f03c:	af00      	add	r7, sp, #0
 801f03e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	68fa      	ldr	r2, [r7, #12]
 801f04e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f052:	f023 0303 	bic.w	r3, r3, #3
 801f056:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f05e:	685b      	ldr	r3, [r3, #4]
 801f060:	68fa      	ldr	r2, [r7, #12]
 801f062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f066:	f023 0302 	bic.w	r3, r3, #2
 801f06a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f06c:	2300      	movs	r3, #0
}
 801f06e:	4618      	mov	r0, r3
 801f070:	3714      	adds	r7, #20
 801f072:	46bd      	mov	sp, r7
 801f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f078:	4770      	bx	lr

0801f07a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f07a:	b480      	push	{r7}
 801f07c:	b085      	sub	sp, #20
 801f07e:	af00      	add	r7, sp, #0
 801f080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	68fa      	ldr	r2, [r7, #12]
 801f090:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f094:	f023 0303 	bic.w	r3, r3, #3
 801f098:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f09a:	68fb      	ldr	r3, [r7, #12]
 801f09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0a0:	685b      	ldr	r3, [r3, #4]
 801f0a2:	68fa      	ldr	r2, [r7, #12]
 801f0a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0a8:	f043 0302 	orr.w	r3, r3, #2
 801f0ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f0ae:	2300      	movs	r3, #0
}
 801f0b0:	4618      	mov	r0, r3
 801f0b2:	3714      	adds	r7, #20
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ba:	4770      	bx	lr

0801f0bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f0bc:	b480      	push	{r7}
 801f0be:	b085      	sub	sp, #20
 801f0c0:	af00      	add	r7, sp, #0
 801f0c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	695b      	ldr	r3, [r3, #20]
 801f0c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	699b      	ldr	r3, [r3, #24]
 801f0ce:	68fa      	ldr	r2, [r7, #12]
 801f0d0:	4013      	ands	r3, r2
 801f0d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f0d4:	68fb      	ldr	r3, [r7, #12]
}
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	3714      	adds	r7, #20
 801f0da:	46bd      	mov	sp, r7
 801f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0e0:	4770      	bx	lr

0801f0e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f0e2:	b480      	push	{r7}
 801f0e4:	b085      	sub	sp, #20
 801f0e6:	af00      	add	r7, sp, #0
 801f0e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0f4:	699b      	ldr	r3, [r3, #24]
 801f0f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0fe:	69db      	ldr	r3, [r3, #28]
 801f100:	68ba      	ldr	r2, [r7, #8]
 801f102:	4013      	ands	r3, r2
 801f104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f106:	68bb      	ldr	r3, [r7, #8]
 801f108:	0c1b      	lsrs	r3, r3, #16
}
 801f10a:	4618      	mov	r0, r3
 801f10c:	3714      	adds	r7, #20
 801f10e:	46bd      	mov	sp, r7
 801f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f114:	4770      	bx	lr

0801f116 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f116:	b480      	push	{r7}
 801f118:	b085      	sub	sp, #20
 801f11a:	af00      	add	r7, sp, #0
 801f11c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f128:	699b      	ldr	r3, [r3, #24]
 801f12a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f12c:	68fb      	ldr	r3, [r7, #12]
 801f12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f132:	69db      	ldr	r3, [r3, #28]
 801f134:	68ba      	ldr	r2, [r7, #8]
 801f136:	4013      	ands	r3, r2
 801f138:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f13a:	68bb      	ldr	r3, [r7, #8]
 801f13c:	b29b      	uxth	r3, r3
}
 801f13e:	4618      	mov	r0, r3
 801f140:	3714      	adds	r7, #20
 801f142:	46bd      	mov	sp, r7
 801f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f148:	4770      	bx	lr

0801f14a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f14a:	b480      	push	{r7}
 801f14c:	b085      	sub	sp, #20
 801f14e:	af00      	add	r7, sp, #0
 801f150:	6078      	str	r0, [r7, #4]
 801f152:	460b      	mov	r3, r1
 801f154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f15a:	78fb      	ldrb	r3, [r7, #3]
 801f15c:	015a      	lsls	r2, r3, #5
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	4413      	add	r3, r2
 801f162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f166:	689b      	ldr	r3, [r3, #8]
 801f168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f170:	695b      	ldr	r3, [r3, #20]
 801f172:	68ba      	ldr	r2, [r7, #8]
 801f174:	4013      	ands	r3, r2
 801f176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f178:	68bb      	ldr	r3, [r7, #8]
}
 801f17a:	4618      	mov	r0, r3
 801f17c:	3714      	adds	r7, #20
 801f17e:	46bd      	mov	sp, r7
 801f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f184:	4770      	bx	lr

0801f186 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f186:	b480      	push	{r7}
 801f188:	b087      	sub	sp, #28
 801f18a:	af00      	add	r7, sp, #0
 801f18c:	6078      	str	r0, [r7, #4]
 801f18e:	460b      	mov	r3, r1
 801f190:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f196:	697b      	ldr	r3, [r7, #20]
 801f198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f19c:	691b      	ldr	r3, [r3, #16]
 801f19e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f1a0:	697b      	ldr	r3, [r7, #20]
 801f1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f1aa:	78fb      	ldrb	r3, [r7, #3]
 801f1ac:	f003 030f 	and.w	r3, r3, #15
 801f1b0:	68fa      	ldr	r2, [r7, #12]
 801f1b2:	fa22 f303 	lsr.w	r3, r2, r3
 801f1b6:	01db      	lsls	r3, r3, #7
 801f1b8:	b2db      	uxtb	r3, r3
 801f1ba:	693a      	ldr	r2, [r7, #16]
 801f1bc:	4313      	orrs	r3, r2
 801f1be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f1c0:	78fb      	ldrb	r3, [r7, #3]
 801f1c2:	015a      	lsls	r2, r3, #5
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	4413      	add	r3, r2
 801f1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f1cc:	689b      	ldr	r3, [r3, #8]
 801f1ce:	693a      	ldr	r2, [r7, #16]
 801f1d0:	4013      	ands	r3, r2
 801f1d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f1d4:	68bb      	ldr	r3, [r7, #8]
}
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	371c      	adds	r7, #28
 801f1da:	46bd      	mov	sp, r7
 801f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1e0:	4770      	bx	lr

0801f1e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f1e2:	b480      	push	{r7}
 801f1e4:	b083      	sub	sp, #12
 801f1e6:	af00      	add	r7, sp, #0
 801f1e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	695b      	ldr	r3, [r3, #20]
 801f1ee:	f003 0301 	and.w	r3, r3, #1
}
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	370c      	adds	r7, #12
 801f1f6:	46bd      	mov	sp, r7
 801f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1fc:	4770      	bx	lr

0801f1fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f1fe:	b480      	push	{r7}
 801f200:	b085      	sub	sp, #20
 801f202:	af00      	add	r7, sp, #0
 801f204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	68fa      	ldr	r2, [r7, #12]
 801f214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f218:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f21c:	f023 0307 	bic.w	r3, r3, #7
 801f220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f222:	68fb      	ldr	r3, [r7, #12]
 801f224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f228:	685b      	ldr	r3, [r3, #4]
 801f22a:	68fa      	ldr	r2, [r7, #12]
 801f22c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f236:	2300      	movs	r3, #0
}
 801f238:	4618      	mov	r0, r3
 801f23a:	3714      	adds	r7, #20
 801f23c:	46bd      	mov	sp, r7
 801f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f242:	4770      	bx	lr

0801f244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f244:	b480      	push	{r7}
 801f246:	b087      	sub	sp, #28
 801f248:	af00      	add	r7, sp, #0
 801f24a:	60f8      	str	r0, [r7, #12]
 801f24c:	460b      	mov	r3, r1
 801f24e:	607a      	str	r2, [r7, #4]
 801f250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	333c      	adds	r3, #60	; 0x3c
 801f25a:	3304      	adds	r3, #4
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f260:	693b      	ldr	r3, [r7, #16]
 801f262:	4a26      	ldr	r2, [pc, #152]	; (801f2fc <USB_EP0_OutStart+0xb8>)
 801f264:	4293      	cmp	r3, r2
 801f266:	d90a      	bls.n	801f27e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f268:	697b      	ldr	r3, [r7, #20]
 801f26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f278:	d101      	bne.n	801f27e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f27a:	2300      	movs	r3, #0
 801f27c:	e037      	b.n	801f2ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f27e:	697b      	ldr	r3, [r7, #20]
 801f280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f284:	461a      	mov	r2, r3
 801f286:	2300      	movs	r3, #0
 801f288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f28a:	697b      	ldr	r3, [r7, #20]
 801f28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f290:	691b      	ldr	r3, [r3, #16]
 801f292:	697a      	ldr	r2, [r7, #20]
 801f294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f29c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f29e:	697b      	ldr	r3, [r7, #20]
 801f2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2a4:	691b      	ldr	r3, [r3, #16]
 801f2a6:	697a      	ldr	r2, [r7, #20]
 801f2a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2ac:	f043 0318 	orr.w	r3, r3, #24
 801f2b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f2b2:	697b      	ldr	r3, [r7, #20]
 801f2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2b8:	691b      	ldr	r3, [r3, #16]
 801f2ba:	697a      	ldr	r2, [r7, #20]
 801f2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f2c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f2c6:	7afb      	ldrb	r3, [r7, #11]
 801f2c8:	2b01      	cmp	r3, #1
 801f2ca:	d10f      	bne.n	801f2ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f2cc:	697b      	ldr	r3, [r7, #20]
 801f2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2d2:	461a      	mov	r2, r3
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f2d8:	697b      	ldr	r3, [r7, #20]
 801f2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	697a      	ldr	r2, [r7, #20]
 801f2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f2ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f2ec:	2300      	movs	r3, #0
}
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	371c      	adds	r7, #28
 801f2f2:	46bd      	mov	sp, r7
 801f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2f8:	4770      	bx	lr
 801f2fa:	bf00      	nop
 801f2fc:	4f54300a 	.word	0x4f54300a

0801f300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f300:	b480      	push	{r7}
 801f302:	b085      	sub	sp, #20
 801f304:	af00      	add	r7, sp, #0
 801f306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f308:	2300      	movs	r3, #0
 801f30a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	3301      	adds	r3, #1
 801f310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	4a13      	ldr	r2, [pc, #76]	; (801f364 <USB_CoreReset+0x64>)
 801f316:	4293      	cmp	r3, r2
 801f318:	d901      	bls.n	801f31e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801f31a:	2303      	movs	r3, #3
 801f31c:	e01b      	b.n	801f356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	691b      	ldr	r3, [r3, #16]
 801f322:	2b00      	cmp	r3, #0
 801f324:	daf2      	bge.n	801f30c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f326:	2300      	movs	r3, #0
 801f328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	691b      	ldr	r3, [r3, #16]
 801f32e:	f043 0201 	orr.w	r2, r3, #1
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	3301      	adds	r3, #1
 801f33a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801f33c:	68fb      	ldr	r3, [r7, #12]
 801f33e:	4a09      	ldr	r2, [pc, #36]	; (801f364 <USB_CoreReset+0x64>)
 801f340:	4293      	cmp	r3, r2
 801f342:	d901      	bls.n	801f348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801f344:	2303      	movs	r3, #3
 801f346:	e006      	b.n	801f356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	691b      	ldr	r3, [r3, #16]
 801f34c:	f003 0301 	and.w	r3, r3, #1
 801f350:	2b01      	cmp	r3, #1
 801f352:	d0f0      	beq.n	801f336 <USB_CoreReset+0x36>

  return HAL_OK;
 801f354:	2300      	movs	r3, #0
}
 801f356:	4618      	mov	r0, r3
 801f358:	3714      	adds	r7, #20
 801f35a:	46bd      	mov	sp, r7
 801f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f360:	4770      	bx	lr
 801f362:	bf00      	nop
 801f364:	00030d40 	.word	0x00030d40

0801f368 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
uint8_t workbuf[4096];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801f368:	b580      	push	{r7, lr}
 801f36a:	b082      	sub	sp, #8
 801f36c:	af02      	add	r7, sp, #8
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801f36e:	4918      	ldr	r1, [pc, #96]	; (801f3d0 <MX_FATFS_Init+0x68>)
 801f370:	4818      	ldr	r0, [pc, #96]	; (801f3d4 <MX_FATFS_Init+0x6c>)
 801f372:	f006 fa53 	bl	802581c <FATFS_LinkDriver>
 801f376:	4603      	mov	r3, r0
 801f378:	461a      	mov	r2, r3
 801f37a:	4b17      	ldr	r3, [pc, #92]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f37c:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
	if(retUSER == FR_OK)
 801f37e:	4b16      	ldr	r3, [pc, #88]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f380:	781b      	ldrb	r3, [r3, #0]
 801f382:	2b00      	cmp	r3, #0
 801f384:	d121      	bne.n	801f3ca <MX_FATFS_Init+0x62>
	{
		retUSER = f_mount(&USERFatFS,(TCHAR const*)USERPath,1) ;
 801f386:	2201      	movs	r2, #1
 801f388:	4911      	ldr	r1, [pc, #68]	; (801f3d0 <MX_FATFS_Init+0x68>)
 801f38a:	4814      	ldr	r0, [pc, #80]	; (801f3dc <MX_FATFS_Init+0x74>)
 801f38c:	f005 f8c2 	bl	8024514 <f_mount>
 801f390:	4603      	mov	r3, r0
 801f392:	461a      	mov	r2, r3
 801f394:	4b10      	ldr	r3, [pc, #64]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f396:	701a      	strb	r2, [r3, #0]
		if(retUSER != FR_OK)
 801f398:	4b0f      	ldr	r3, [pc, #60]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d00b      	beq.n	801f3b8 <MX_FATFS_Init+0x50>
		{
			retUSER = 2;
 801f3a0:	4b0d      	ldr	r3, [pc, #52]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f3a2:	2202      	movs	r2, #2
 801f3a4:	701a      	strb	r2, [r3, #0]
			f_mkfs((TCHAR const*)USERPath, 0, 0,workbuf,4096);
 801f3a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f3aa:	9300      	str	r3, [sp, #0]
 801f3ac:	4b0c      	ldr	r3, [pc, #48]	; (801f3e0 <MX_FATFS_Init+0x78>)
 801f3ae:	2200      	movs	r2, #0
 801f3b0:	2100      	movs	r1, #0
 801f3b2:	4807      	ldr	r0, [pc, #28]	; (801f3d0 <MX_FATFS_Init+0x68>)
 801f3b4:	f005 fdc0 	bl	8024f38 <f_mkfs>
		}

		retUSER = f_mount(&USERFatFS,"",1) ;
 801f3b8:	2201      	movs	r2, #1
 801f3ba:	490a      	ldr	r1, [pc, #40]	; (801f3e4 <MX_FATFS_Init+0x7c>)
 801f3bc:	4807      	ldr	r0, [pc, #28]	; (801f3dc <MX_FATFS_Init+0x74>)
 801f3be:	f005 f8a9 	bl	8024514 <f_mount>
 801f3c2:	4603      	mov	r3, r0
 801f3c4:	461a      	mov	r2, r3
 801f3c6:	4b04      	ldr	r3, [pc, #16]	; (801f3d8 <MX_FATFS_Init+0x70>)
 801f3c8:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END Init */
}
 801f3ca:	bf00      	nop
 801f3cc:	46bd      	mov	sp, r7
 801f3ce:	bd80      	pop	{r7, pc}
 801f3d0:	20006a74 	.word	0x20006a74
 801f3d4:	20000570 	.word	0x20000570
 801f3d8:	20006a70 	.word	0x20006a70
 801f3dc:	20006a78 	.word	0x20006a78
 801f3e0:	20008ad4 	.word	0x20008ad4
 801f3e4:	08000ad8 	.word	0x08000ad8

0801f3e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801f3e8:	b580      	push	{r7, lr}
 801f3ea:	b084      	sub	sp, #16
 801f3ec:	af00      	add	r7, sp, #0
 801f3ee:	4603      	mov	r3, r0
 801f3f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    uint8_t state;

	state = W25Qx_Init();
 801f3f2:	f7f8 fb87 	bl	8017b04 <W25Qx_Init>
 801f3f6:	4603      	mov	r3, r0
 801f3f8:	73fb      	strb	r3, [r7, #15]

	if(state != W25Qx_OK)
 801f3fa:	7bfb      	ldrb	r3, [r7, #15]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d003      	beq.n	801f408 <USER_initialize+0x20>
		Stat = RES_ERROR;
 801f400:	4b06      	ldr	r3, [pc, #24]	; (801f41c <USER_initialize+0x34>)
 801f402:	2201      	movs	r2, #1
 801f404:	701a      	strb	r2, [r3, #0]
 801f406:	e002      	b.n	801f40e <USER_initialize+0x26>
    else
    	Stat = RES_OK;
 801f408:	4b04      	ldr	r3, [pc, #16]	; (801f41c <USER_initialize+0x34>)
 801f40a:	2200      	movs	r2, #0
 801f40c:	701a      	strb	r2, [r3, #0]
    return Stat;
 801f40e:	4b03      	ldr	r3, [pc, #12]	; (801f41c <USER_initialize+0x34>)
 801f410:	781b      	ldrb	r3, [r3, #0]
 801f412:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 801f414:	4618      	mov	r0, r3
 801f416:	3710      	adds	r7, #16
 801f418:	46bd      	mov	sp, r7
 801f41a:	bd80      	pop	{r7, pc}
 801f41c:	2000056d 	.word	0x2000056d

0801f420 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801f420:	b480      	push	{r7}
 801f422:	b083      	sub	sp, #12
 801f424:	af00      	add	r7, sp, #0
 801f426:	4603      	mov	r3, r0
 801f428:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 801f42a:	4b06      	ldr	r3, [pc, #24]	; (801f444 <USER_status+0x24>)
 801f42c:	2200      	movs	r2, #0
 801f42e:	701a      	strb	r2, [r3, #0]
    return Stat;
 801f430:	4b04      	ldr	r3, [pc, #16]	; (801f444 <USER_status+0x24>)
 801f432:	781b      	ldrb	r3, [r3, #0]
 801f434:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801f436:	4618      	mov	r0, r3
 801f438:	370c      	adds	r7, #12
 801f43a:	46bd      	mov	sp, r7
 801f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f440:	4770      	bx	lr
 801f442:	bf00      	nop
 801f444:	2000056d 	.word	0x2000056d

0801f448 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801f448:	b580      	push	{r7, lr}
 801f44a:	b086      	sub	sp, #24
 801f44c:	af00      	add	r7, sp, #0
 801f44e:	60b9      	str	r1, [r7, #8]
 801f450:	607a      	str	r2, [r7, #4]
 801f452:	603b      	str	r3, [r7, #0]
 801f454:	4603      	mov	r3, r0
 801f456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	UINT i;
	for(i = 0; i < count; i ++)
 801f458:	2300      	movs	r3, #0
 801f45a:	617b      	str	r3, [r7, #20]
 801f45c:	e017      	b.n	801f48e <USER_read+0x46>
	{
		W25Qx_Read(buff,sector * (W25Qx_Para.SUBSECTOR_SIZE),W25Qx_Para.SUBSECTOR_SIZE);
 801f45e:	4b10      	ldr	r3, [pc, #64]	; (801f4a0 <USER_read+0x58>)
 801f460:	899b      	ldrh	r3, [r3, #12]
 801f462:	461a      	mov	r2, r3
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	fb02 f303 	mul.w	r3, r2, r3
 801f46a:	4a0d      	ldr	r2, [pc, #52]	; (801f4a0 <USER_read+0x58>)
 801f46c:	8992      	ldrh	r2, [r2, #12]
 801f46e:	4619      	mov	r1, r3
 801f470:	68b8      	ldr	r0, [r7, #8]
 801f472:	f7f8 fc91 	bl	8017d98 <W25Qx_Read>
		sector ++;
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	3301      	adds	r3, #1
 801f47a:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f47c:	4b08      	ldr	r3, [pc, #32]	; (801f4a0 <USER_read+0x58>)
 801f47e:	899b      	ldrh	r3, [r3, #12]
 801f480:	461a      	mov	r2, r3
 801f482:	68bb      	ldr	r3, [r7, #8]
 801f484:	4413      	add	r3, r2
 801f486:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f488:	697b      	ldr	r3, [r7, #20]
 801f48a:	3301      	adds	r3, #1
 801f48c:	617b      	str	r3, [r7, #20]
 801f48e:	697a      	ldr	r2, [r7, #20]
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	429a      	cmp	r2, r3
 801f494:	d3e3      	bcc.n	801f45e <USER_read+0x16>
	}
    return RES_OK;
 801f496:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801f498:	4618      	mov	r0, r3
 801f49a:	3718      	adds	r7, #24
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bd80      	pop	{r7, pc}
 801f4a0:	20006a38 	.word	0x20006a38

0801f4a4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801f4a4:	b580      	push	{r7, lr}
 801f4a6:	b086      	sub	sp, #24
 801f4a8:	af00      	add	r7, sp, #0
 801f4aa:	60b9      	str	r1, [r7, #8]
 801f4ac:	607a      	str	r2, [r7, #4]
 801f4ae:	603b      	str	r3, [r7, #0]
 801f4b0:	4603      	mov	r3, r0
 801f4b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	UINT i;
	for(i = 0; i < count; i ++)
 801f4b4:	2300      	movs	r3, #0
 801f4b6:	617b      	str	r3, [r7, #20]
 801f4b8:	e020      	b.n	801f4fc <USER_write+0x58>
	{
		W25Qx_Erase_Block(sector * W25Qx_Para.SUBSECTOR_SIZE);
 801f4ba:	4b15      	ldr	r3, [pc, #84]	; (801f510 <USER_write+0x6c>)
 801f4bc:	899b      	ldrh	r3, [r3, #12]
 801f4be:	461a      	mov	r2, r3
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	fb02 f303 	mul.w	r3, r2, r3
 801f4c6:	4618      	mov	r0, r3
 801f4c8:	f7f8 fd30 	bl	8017f2c <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buff,sector * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 801f4cc:	4b10      	ldr	r3, [pc, #64]	; (801f510 <USER_write+0x6c>)
 801f4ce:	899b      	ldrh	r3, [r3, #12]
 801f4d0:	461a      	mov	r2, r3
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	fb02 f303 	mul.w	r3, r2, r3
 801f4d8:	4a0d      	ldr	r2, [pc, #52]	; (801f510 <USER_write+0x6c>)
 801f4da:	8992      	ldrh	r2, [r2, #12]
 801f4dc:	4619      	mov	r1, r3
 801f4de:	68b8      	ldr	r0, [r7, #8]
 801f4e0:	f7f8 fc98 	bl	8017e14 <W25Qx_Write>
		sector ++;
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	3301      	adds	r3, #1
 801f4e8:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f4ea:	4b09      	ldr	r3, [pc, #36]	; (801f510 <USER_write+0x6c>)
 801f4ec:	899b      	ldrh	r3, [r3, #12]
 801f4ee:	461a      	mov	r2, r3
 801f4f0:	68bb      	ldr	r3, [r7, #8]
 801f4f2:	4413      	add	r3, r2
 801f4f4:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f4f6:	697b      	ldr	r3, [r7, #20]
 801f4f8:	3301      	adds	r3, #1
 801f4fa:	617b      	str	r3, [r7, #20]
 801f4fc:	697a      	ldr	r2, [r7, #20]
 801f4fe:	683b      	ldr	r3, [r7, #0]
 801f500:	429a      	cmp	r2, r3
 801f502:	d3da      	bcc.n	801f4ba <USER_write+0x16>
	}
    return RES_OK;
 801f504:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 801f506:	4618      	mov	r0, r3
 801f508:	3718      	adds	r7, #24
 801f50a:	46bd      	mov	sp, r7
 801f50c:	bd80      	pop	{r7, pc}
 801f50e:	bf00      	nop
 801f510:	20006a38 	.word	0x20006a38

0801f514 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801f514:	b480      	push	{r7}
 801f516:	b085      	sub	sp, #20
 801f518:	af00      	add	r7, sp, #0
 801f51a:	4603      	mov	r3, r0
 801f51c:	603a      	str	r2, [r7, #0]
 801f51e:	71fb      	strb	r3, [r7, #7]
 801f520:	460b      	mov	r3, r1
 801f522:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	   DRESULT res = RES_ERROR;
 801f524:	2301      	movs	r3, #1
 801f526:	73fb      	strb	r3, [r7, #15]
		 switch(cmd)
 801f528:	79bb      	ldrb	r3, [r7, #6]
 801f52a:	2b03      	cmp	r3, #3
 801f52c:	d822      	bhi.n	801f574 <USER_ioctl+0x60>
 801f52e:	a201      	add	r2, pc, #4	; (adr r2, 801f534 <USER_ioctl+0x20>)
 801f530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f534:	0801f545 	.word	0x0801f545
 801f538:	0801f567 	.word	0x0801f567
 801f53c:	0801f54b 	.word	0x0801f54b
 801f540:	0801f559 	.word	0x0801f559
		 {
			 case CTRL_SYNC:
				res = RES_OK;
 801f544:	2300      	movs	r3, #0
 801f546:	73fb      	strb	r3, [r7, #15]
				  break;
 801f548:	e017      	b.n	801f57a <USER_ioctl+0x66>
			 case GET_SECTOR_SIZE:
				  *(WORD*)buff = W25Qx_Para.SUBSECTOR_SIZE;
 801f54a:	4b0f      	ldr	r3, [pc, #60]	; (801f588 <USER_ioctl+0x74>)
 801f54c:	899a      	ldrh	r2, [r3, #12]
 801f54e:	683b      	ldr	r3, [r7, #0]
 801f550:	801a      	strh	r2, [r3, #0]
				  res = RES_OK;
 801f552:	2300      	movs	r3, #0
 801f554:	73fb      	strb	r3, [r7, #15]
				  break;
 801f556:	e010      	b.n	801f57a <USER_ioctl+0x66>
			 case GET_BLOCK_SIZE:
				  *(DWORD*)buff = W25Qx_Para.SECTOR_SIZE;
 801f558:	4b0b      	ldr	r3, [pc, #44]	; (801f588 <USER_ioctl+0x74>)
 801f55a:	685a      	ldr	r2, [r3, #4]
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f560:	2300      	movs	r3, #0
 801f562:	73fb      	strb	r3, [r7, #15]
				  break;
 801f564:	e009      	b.n	801f57a <USER_ioctl+0x66>
			 case GET_SECTOR_COUNT:
				  *(DWORD*)buff = W25Qx_Para.SUBSECTOR_COUNT;
 801f566:	4b08      	ldr	r3, [pc, #32]	; (801f588 <USER_ioctl+0x74>)
 801f568:	689a      	ldr	r2, [r3, #8]
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f56e:	2300      	movs	r3, #0
 801f570:	73fb      	strb	r3, [r7, #15]
				  break;
 801f572:	e002      	b.n	801f57a <USER_ioctl+0x66>
			 default:
				  res = RES_PARERR;
 801f574:	2304      	movs	r3, #4
 801f576:	73fb      	strb	r3, [r7, #15]
				  break;
 801f578:	bf00      	nop
		 }
	    return res;
 801f57a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801f57c:	4618      	mov	r0, r3
 801f57e:	3714      	adds	r7, #20
 801f580:	46bd      	mov	sp, r7
 801f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f586:	4770      	bx	lr
 801f588:	20006a38 	.word	0x20006a38

0801f58c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f58c:	b580      	push	{r7, lr}
 801f58e:	b084      	sub	sp, #16
 801f590:	af00      	add	r7, sp, #0
 801f592:	6078      	str	r0, [r7, #4]
 801f594:	460b      	mov	r3, r1
 801f596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f598:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f59c:	f006 feb6 	bl	802630c <USBD_static_malloc>
 801f5a0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f5a2:	68fb      	ldr	r3, [r7, #12]
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d109      	bne.n	801f5bc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	32b0      	adds	r2, #176	; 0xb0
 801f5b2:	2100      	movs	r1, #0
 801f5b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801f5b8:	2302      	movs	r3, #2
 801f5ba:	e06e      	b.n	801f69a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	32b0      	adds	r2, #176	; 0xb0
 801f5c6:	68f9      	ldr	r1, [r7, #12]
 801f5c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	32b0      	adds	r2, #176	; 0xb0
 801f5d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	7c1b      	ldrb	r3, [r3, #16]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d12b      	bne.n	801f640 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f5e8:	4b2e      	ldr	r3, [pc, #184]	; (801f6a4 <USBD_MSC_Init+0x118>)
 801f5ea:	7819      	ldrb	r1, [r3, #0]
 801f5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f5f0:	2202      	movs	r2, #2
 801f5f2:	6878      	ldr	r0, [r7, #4]
 801f5f4:	f006 fcf9 	bl	8025fea <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f5f8:	4b2a      	ldr	r3, [pc, #168]	; (801f6a4 <USBD_MSC_Init+0x118>)
 801f5fa:	781b      	ldrb	r3, [r3, #0]
 801f5fc:	f003 020f 	and.w	r2, r3, #15
 801f600:	6879      	ldr	r1, [r7, #4]
 801f602:	4613      	mov	r3, r2
 801f604:	009b      	lsls	r3, r3, #2
 801f606:	4413      	add	r3, r2
 801f608:	009b      	lsls	r3, r3, #2
 801f60a:	440b      	add	r3, r1
 801f60c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f610:	2201      	movs	r2, #1
 801f612:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f614:	4b24      	ldr	r3, [pc, #144]	; (801f6a8 <USBD_MSC_Init+0x11c>)
 801f616:	7819      	ldrb	r1, [r3, #0]
 801f618:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f61c:	2202      	movs	r2, #2
 801f61e:	6878      	ldr	r0, [r7, #4]
 801f620:	f006 fce3 	bl	8025fea <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f624:	4b20      	ldr	r3, [pc, #128]	; (801f6a8 <USBD_MSC_Init+0x11c>)
 801f626:	781b      	ldrb	r3, [r3, #0]
 801f628:	f003 020f 	and.w	r2, r3, #15
 801f62c:	6879      	ldr	r1, [r7, #4]
 801f62e:	4613      	mov	r3, r2
 801f630:	009b      	lsls	r3, r3, #2
 801f632:	4413      	add	r3, r2
 801f634:	009b      	lsls	r3, r3, #2
 801f636:	440b      	add	r3, r1
 801f638:	3324      	adds	r3, #36	; 0x24
 801f63a:	2201      	movs	r2, #1
 801f63c:	801a      	strh	r2, [r3, #0]
 801f63e:	e028      	b.n	801f692 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f640:	4b18      	ldr	r3, [pc, #96]	; (801f6a4 <USBD_MSC_Init+0x118>)
 801f642:	7819      	ldrb	r1, [r3, #0]
 801f644:	2340      	movs	r3, #64	; 0x40
 801f646:	2202      	movs	r2, #2
 801f648:	6878      	ldr	r0, [r7, #4]
 801f64a:	f006 fcce 	bl	8025fea <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f64e:	4b15      	ldr	r3, [pc, #84]	; (801f6a4 <USBD_MSC_Init+0x118>)
 801f650:	781b      	ldrb	r3, [r3, #0]
 801f652:	f003 020f 	and.w	r2, r3, #15
 801f656:	6879      	ldr	r1, [r7, #4]
 801f658:	4613      	mov	r3, r2
 801f65a:	009b      	lsls	r3, r3, #2
 801f65c:	4413      	add	r3, r2
 801f65e:	009b      	lsls	r3, r3, #2
 801f660:	440b      	add	r3, r1
 801f662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f666:	2201      	movs	r2, #1
 801f668:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f66a:	4b0f      	ldr	r3, [pc, #60]	; (801f6a8 <USBD_MSC_Init+0x11c>)
 801f66c:	7819      	ldrb	r1, [r3, #0]
 801f66e:	2340      	movs	r3, #64	; 0x40
 801f670:	2202      	movs	r2, #2
 801f672:	6878      	ldr	r0, [r7, #4]
 801f674:	f006 fcb9 	bl	8025fea <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f678:	4b0b      	ldr	r3, [pc, #44]	; (801f6a8 <USBD_MSC_Init+0x11c>)
 801f67a:	781b      	ldrb	r3, [r3, #0]
 801f67c:	f003 020f 	and.w	r2, r3, #15
 801f680:	6879      	ldr	r1, [r7, #4]
 801f682:	4613      	mov	r3, r2
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	4413      	add	r3, r2
 801f688:	009b      	lsls	r3, r3, #2
 801f68a:	440b      	add	r3, r1
 801f68c:	3324      	adds	r3, #36	; 0x24
 801f68e:	2201      	movs	r2, #1
 801f690:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f692:	6878      	ldr	r0, [r7, #4]
 801f694:	f000 fa2c 	bl	801faf0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f698:	2300      	movs	r3, #0
}
 801f69a:	4618      	mov	r0, r3
 801f69c:	3710      	adds	r7, #16
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	bd80      	pop	{r7, pc}
 801f6a2:	bf00      	nop
 801f6a4:	200005e7 	.word	0x200005e7
 801f6a8:	200005e6 	.word	0x200005e6

0801f6ac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b082      	sub	sp, #8
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
 801f6b4:	460b      	mov	r3, r1
 801f6b6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801f6b8:	4b26      	ldr	r3, [pc, #152]	; (801f754 <USBD_MSC_DeInit+0xa8>)
 801f6ba:	781b      	ldrb	r3, [r3, #0]
 801f6bc:	4619      	mov	r1, r3
 801f6be:	6878      	ldr	r0, [r7, #4]
 801f6c0:	f006 fcb9 	bl	8026036 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 801f6c4:	4b23      	ldr	r3, [pc, #140]	; (801f754 <USBD_MSC_DeInit+0xa8>)
 801f6c6:	781b      	ldrb	r3, [r3, #0]
 801f6c8:	f003 020f 	and.w	r2, r3, #15
 801f6cc:	6879      	ldr	r1, [r7, #4]
 801f6ce:	4613      	mov	r3, r2
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	4413      	add	r3, r2
 801f6d4:	009b      	lsls	r3, r3, #2
 801f6d6:	440b      	add	r3, r1
 801f6d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f6dc:	2200      	movs	r2, #0
 801f6de:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 801f6e0:	4b1d      	ldr	r3, [pc, #116]	; (801f758 <USBD_MSC_DeInit+0xac>)
 801f6e2:	781b      	ldrb	r3, [r3, #0]
 801f6e4:	4619      	mov	r1, r3
 801f6e6:	6878      	ldr	r0, [r7, #4]
 801f6e8:	f006 fca5 	bl	8026036 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 801f6ec:	4b1a      	ldr	r3, [pc, #104]	; (801f758 <USBD_MSC_DeInit+0xac>)
 801f6ee:	781b      	ldrb	r3, [r3, #0]
 801f6f0:	f003 020f 	and.w	r2, r3, #15
 801f6f4:	6879      	ldr	r1, [r7, #4]
 801f6f6:	4613      	mov	r3, r2
 801f6f8:	009b      	lsls	r3, r3, #2
 801f6fa:	4413      	add	r3, r2
 801f6fc:	009b      	lsls	r3, r3, #2
 801f6fe:	440b      	add	r3, r1
 801f700:	3324      	adds	r3, #36	; 0x24
 801f702:	2200      	movs	r2, #0
 801f704:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	32b0      	adds	r2, #176	; 0xb0
 801f710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f714:	2b00      	cmp	r3, #0
 801f716:	d018      	beq.n	801f74a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f718:	6878      	ldr	r0, [r7, #4]
 801f71a:	f000 fa67 	bl	801fbec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	32b0      	adds	r2, #176	; 0xb0
 801f728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f72c:	4618      	mov	r0, r3
 801f72e:	f006 fdfb 	bl	8026328 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	32b0      	adds	r2, #176	; 0xb0
 801f73c:	2100      	movs	r1, #0
 801f73e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	2200      	movs	r2, #0
 801f746:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f74a:	2300      	movs	r3, #0
}
 801f74c:	4618      	mov	r0, r3
 801f74e:	3708      	adds	r7, #8
 801f750:	46bd      	mov	sp, r7
 801f752:	bd80      	pop	{r7, pc}
 801f754:	200005e7 	.word	0x200005e7
 801f758:	200005e6 	.word	0x200005e6

0801f75c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f75c:	b580      	push	{r7, lr}
 801f75e:	b086      	sub	sp, #24
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
 801f764:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	32b0      	adds	r2, #176	; 0xb0
 801f770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f774:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f776:	2300      	movs	r3, #0
 801f778:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f77a:	2300      	movs	r3, #0
 801f77c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801f77e:	693b      	ldr	r3, [r7, #16]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d101      	bne.n	801f788 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 801f784:	2303      	movs	r3, #3
 801f786:	e0e1      	b.n	801f94c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f788:	683b      	ldr	r3, [r7, #0]
 801f78a:	781b      	ldrb	r3, [r3, #0]
 801f78c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f790:	2b00      	cmp	r3, #0
 801f792:	d053      	beq.n	801f83c <USBD_MSC_Setup+0xe0>
 801f794:	2b20      	cmp	r3, #32
 801f796:	f040 80d1 	bne.w	801f93c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	785b      	ldrb	r3, [r3, #1]
 801f79e:	2bfe      	cmp	r3, #254	; 0xfe
 801f7a0:	d002      	beq.n	801f7a8 <USBD_MSC_Setup+0x4c>
 801f7a2:	2bff      	cmp	r3, #255	; 0xff
 801f7a4:	d02a      	beq.n	801f7fc <USBD_MSC_Setup+0xa0>
 801f7a6:	e041      	b.n	801f82c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	885b      	ldrh	r3, [r3, #2]
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d11e      	bne.n	801f7ee <USBD_MSC_Setup+0x92>
 801f7b0:	683b      	ldr	r3, [r7, #0]
 801f7b2:	88db      	ldrh	r3, [r3, #6]
 801f7b4:	2b01      	cmp	r3, #1
 801f7b6:	d11a      	bne.n	801f7ee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f7b8:	683b      	ldr	r3, [r7, #0]
 801f7ba:	781b      	ldrb	r3, [r3, #0]
 801f7bc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	da15      	bge.n	801f7ee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801f7c8:	687a      	ldr	r2, [r7, #4]
 801f7ca:	33b0      	adds	r3, #176	; 0xb0
 801f7cc:	009b      	lsls	r3, r3, #2
 801f7ce:	4413      	add	r3, r2
 801f7d0:	685b      	ldr	r3, [r3, #4]
 801f7d2:	699b      	ldr	r3, [r3, #24]
 801f7d4:	4798      	blx	r3
 801f7d6:	4603      	mov	r3, r0
 801f7d8:	461a      	mov	r2, r3
 801f7da:	693b      	ldr	r3, [r7, #16]
 801f7dc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f7de:	693b      	ldr	r3, [r7, #16]
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	4619      	mov	r1, r3
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	f003 f923 	bl	8022a30 <USBD_CtlSendData>
 801f7ea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f7ec:	e025      	b.n	801f83a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801f7ee:	6839      	ldr	r1, [r7, #0]
 801f7f0:	6878      	ldr	r0, [r7, #4]
 801f7f2:	f003 f8ac 	bl	802294e <USBD_CtlError>
            ret = USBD_FAIL;
 801f7f6:	2303      	movs	r3, #3
 801f7f8:	75fb      	strb	r3, [r7, #23]
          break;
 801f7fa:	e01e      	b.n	801f83a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f7fc:	683b      	ldr	r3, [r7, #0]
 801f7fe:	885b      	ldrh	r3, [r3, #2]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d10c      	bne.n	801f81e <USBD_MSC_Setup+0xc2>
 801f804:	683b      	ldr	r3, [r7, #0]
 801f806:	88db      	ldrh	r3, [r3, #6]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d108      	bne.n	801f81e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f80c:	683b      	ldr	r3, [r7, #0]
 801f80e:	781b      	ldrb	r3, [r3, #0]
 801f810:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f812:	2b00      	cmp	r3, #0
 801f814:	db03      	blt.n	801f81e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801f816:	6878      	ldr	r0, [r7, #4]
 801f818:	f000 f9b4 	bl	801fb84 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f81c:	e00d      	b.n	801f83a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801f81e:	6839      	ldr	r1, [r7, #0]
 801f820:	6878      	ldr	r0, [r7, #4]
 801f822:	f003 f894 	bl	802294e <USBD_CtlError>
            ret = USBD_FAIL;
 801f826:	2303      	movs	r3, #3
 801f828:	75fb      	strb	r3, [r7, #23]
          break;
 801f82a:	e006      	b.n	801f83a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801f82c:	6839      	ldr	r1, [r7, #0]
 801f82e:	6878      	ldr	r0, [r7, #4]
 801f830:	f003 f88d 	bl	802294e <USBD_CtlError>
          ret = USBD_FAIL;
 801f834:	2303      	movs	r3, #3
 801f836:	75fb      	strb	r3, [r7, #23]
          break;
 801f838:	bf00      	nop
      }
      break;
 801f83a:	e086      	b.n	801f94a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f83c:	683b      	ldr	r3, [r7, #0]
 801f83e:	785b      	ldrb	r3, [r3, #1]
 801f840:	2b0b      	cmp	r3, #11
 801f842:	d872      	bhi.n	801f92a <USBD_MSC_Setup+0x1ce>
 801f844:	a201      	add	r2, pc, #4	; (adr r2, 801f84c <USBD_MSC_Setup+0xf0>)
 801f846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f84a:	bf00      	nop
 801f84c:	0801f87d 	.word	0x0801f87d
 801f850:	0801f8f9 	.word	0x0801f8f9
 801f854:	0801f92b 	.word	0x0801f92b
 801f858:	0801f92b 	.word	0x0801f92b
 801f85c:	0801f92b 	.word	0x0801f92b
 801f860:	0801f92b 	.word	0x0801f92b
 801f864:	0801f92b 	.word	0x0801f92b
 801f868:	0801f92b 	.word	0x0801f92b
 801f86c:	0801f92b 	.word	0x0801f92b
 801f870:	0801f92b 	.word	0x0801f92b
 801f874:	0801f8a7 	.word	0x0801f8a7
 801f878:	0801f8d1 	.word	0x0801f8d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f882:	b2db      	uxtb	r3, r3
 801f884:	2b03      	cmp	r3, #3
 801f886:	d107      	bne.n	801f898 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f888:	f107 030e 	add.w	r3, r7, #14
 801f88c:	2202      	movs	r2, #2
 801f88e:	4619      	mov	r1, r3
 801f890:	6878      	ldr	r0, [r7, #4]
 801f892:	f003 f8cd 	bl	8022a30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f896:	e050      	b.n	801f93a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f898:	6839      	ldr	r1, [r7, #0]
 801f89a:	6878      	ldr	r0, [r7, #4]
 801f89c:	f003 f857 	bl	802294e <USBD_CtlError>
            ret = USBD_FAIL;
 801f8a0:	2303      	movs	r3, #3
 801f8a2:	75fb      	strb	r3, [r7, #23]
          break;
 801f8a4:	e049      	b.n	801f93a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8ac:	b2db      	uxtb	r3, r3
 801f8ae:	2b03      	cmp	r3, #3
 801f8b0:	d107      	bne.n	801f8c2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f8b2:	693b      	ldr	r3, [r7, #16]
 801f8b4:	3304      	adds	r3, #4
 801f8b6:	2201      	movs	r2, #1
 801f8b8:	4619      	mov	r1, r3
 801f8ba:	6878      	ldr	r0, [r7, #4]
 801f8bc:	f003 f8b8 	bl	8022a30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f8c0:	e03b      	b.n	801f93a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f8c2:	6839      	ldr	r1, [r7, #0]
 801f8c4:	6878      	ldr	r0, [r7, #4]
 801f8c6:	f003 f842 	bl	802294e <USBD_CtlError>
            ret = USBD_FAIL;
 801f8ca:	2303      	movs	r3, #3
 801f8cc:	75fb      	strb	r3, [r7, #23]
          break;
 801f8ce:	e034      	b.n	801f93a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8d0:	687b      	ldr	r3, [r7, #4]
 801f8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8d6:	b2db      	uxtb	r3, r3
 801f8d8:	2b03      	cmp	r3, #3
 801f8da:	d106      	bne.n	801f8ea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f8dc:	683b      	ldr	r3, [r7, #0]
 801f8de:	885b      	ldrh	r3, [r3, #2]
 801f8e0:	b2db      	uxtb	r3, r3
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	693b      	ldr	r3, [r7, #16]
 801f8e6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f8e8:	e027      	b.n	801f93a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f8ea:	6839      	ldr	r1, [r7, #0]
 801f8ec:	6878      	ldr	r0, [r7, #4]
 801f8ee:	f003 f82e 	bl	802294e <USBD_CtlError>
            ret = USBD_FAIL;
 801f8f2:	2303      	movs	r3, #3
 801f8f4:	75fb      	strb	r3, [r7, #23]
          break;
 801f8f6:	e020      	b.n	801f93a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8fe:	b2db      	uxtb	r3, r3
 801f900:	2b03      	cmp	r3, #3
 801f902:	d119      	bne.n	801f938 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	885b      	ldrh	r3, [r3, #2]
 801f908:	2b00      	cmp	r3, #0
 801f90a:	d115      	bne.n	801f938 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f90c:	683b      	ldr	r3, [r7, #0]
 801f90e:	889b      	ldrh	r3, [r3, #4]
 801f910:	b2db      	uxtb	r3, r3
 801f912:	4619      	mov	r1, r3
 801f914:	6878      	ldr	r0, [r7, #4]
 801f916:	f006 fbad 	bl	8026074 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f91a:	683b      	ldr	r3, [r7, #0]
 801f91c:	889b      	ldrh	r3, [r3, #4]
 801f91e:	b2db      	uxtb	r3, r3
 801f920:	4619      	mov	r1, r3
 801f922:	6878      	ldr	r0, [r7, #4]
 801f924:	f000 fb2e 	bl	801ff84 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f928:	e006      	b.n	801f938 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801f92a:	6839      	ldr	r1, [r7, #0]
 801f92c:	6878      	ldr	r0, [r7, #4]
 801f92e:	f003 f80e 	bl	802294e <USBD_CtlError>
          ret = USBD_FAIL;
 801f932:	2303      	movs	r3, #3
 801f934:	75fb      	strb	r3, [r7, #23]
          break;
 801f936:	e000      	b.n	801f93a <USBD_MSC_Setup+0x1de>
          break;
 801f938:	bf00      	nop
      }
      break;
 801f93a:	e006      	b.n	801f94a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801f93c:	6839      	ldr	r1, [r7, #0]
 801f93e:	6878      	ldr	r0, [r7, #4]
 801f940:	f003 f805 	bl	802294e <USBD_CtlError>
      ret = USBD_FAIL;
 801f944:	2303      	movs	r3, #3
 801f946:	75fb      	strb	r3, [r7, #23]
      break;
 801f948:	bf00      	nop
  }

  return (uint8_t)ret;
 801f94a:	7dfb      	ldrb	r3, [r7, #23]
}
 801f94c:	4618      	mov	r0, r3
 801f94e:	3718      	adds	r7, #24
 801f950:	46bd      	mov	sp, r7
 801f952:	bd80      	pop	{r7, pc}

0801f954 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f954:	b580      	push	{r7, lr}
 801f956:	b082      	sub	sp, #8
 801f958:	af00      	add	r7, sp, #0
 801f95a:	6078      	str	r0, [r7, #4]
 801f95c:	460b      	mov	r3, r1
 801f95e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f960:	78fb      	ldrb	r3, [r7, #3]
 801f962:	4619      	mov	r1, r3
 801f964:	6878      	ldr	r0, [r7, #4]
 801f966:	f000 f959 	bl	801fc1c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f96a:	2300      	movs	r3, #0
}
 801f96c:	4618      	mov	r0, r3
 801f96e:	3708      	adds	r7, #8
 801f970:	46bd      	mov	sp, r7
 801f972:	bd80      	pop	{r7, pc}

0801f974 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f974:	b580      	push	{r7, lr}
 801f976:	b082      	sub	sp, #8
 801f978:	af00      	add	r7, sp, #0
 801f97a:	6078      	str	r0, [r7, #4]
 801f97c:	460b      	mov	r3, r1
 801f97e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f980:	78fb      	ldrb	r3, [r7, #3]
 801f982:	4619      	mov	r1, r3
 801f984:	6878      	ldr	r0, [r7, #4]
 801f986:	f000 f983 	bl	801fc90 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f98a:	2300      	movs	r3, #0
}
 801f98c:	4618      	mov	r0, r3
 801f98e:	3708      	adds	r7, #8
 801f990:	46bd      	mov	sp, r7
 801f992:	bd80      	pop	{r7, pc}

0801f994 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f994:	b580      	push	{r7, lr}
 801f996:	b084      	sub	sp, #16
 801f998:	af00      	add	r7, sp, #0
 801f99a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801f99c:	2181      	movs	r1, #129	; 0x81
 801f99e:	4812      	ldr	r0, [pc, #72]	; (801f9e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 801f9a0:	f002 f972 	bl	8021c88 <USBD_GetEpDesc>
 801f9a4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801f9a6:	2101      	movs	r1, #1
 801f9a8:	480f      	ldr	r0, [pc, #60]	; (801f9e8 <USBD_MSC_GetHSCfgDesc+0x54>)
 801f9aa:	f002 f96d 	bl	8021c88 <USBD_GetEpDesc>
 801f9ae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801f9b0:	68fb      	ldr	r3, [r7, #12]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d006      	beq.n	801f9c4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	2200      	movs	r2, #0
 801f9ba:	711a      	strb	r2, [r3, #4]
 801f9bc:	2200      	movs	r2, #0
 801f9be:	f042 0202 	orr.w	r2, r2, #2
 801f9c2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801f9c4:	68bb      	ldr	r3, [r7, #8]
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d006      	beq.n	801f9d8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801f9ca:	68bb      	ldr	r3, [r7, #8]
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	711a      	strb	r2, [r3, #4]
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	f042 0202 	orr.w	r2, r2, #2
 801f9d6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	2220      	movs	r2, #32
 801f9dc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801f9de:	4b02      	ldr	r3, [pc, #8]	; (801f9e8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 801f9e0:	4618      	mov	r0, r3
 801f9e2:	3710      	adds	r7, #16
 801f9e4:	46bd      	mov	sp, r7
 801f9e6:	bd80      	pop	{r7, pc}
 801f9e8:	200005bc 	.word	0x200005bc

0801f9ec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f9ec:	b580      	push	{r7, lr}
 801f9ee:	b084      	sub	sp, #16
 801f9f0:	af00      	add	r7, sp, #0
 801f9f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801f9f4:	2181      	movs	r1, #129	; 0x81
 801f9f6:	4812      	ldr	r0, [pc, #72]	; (801fa40 <USBD_MSC_GetFSCfgDesc+0x54>)
 801f9f8:	f002 f946 	bl	8021c88 <USBD_GetEpDesc>
 801f9fc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801f9fe:	2101      	movs	r1, #1
 801fa00:	480f      	ldr	r0, [pc, #60]	; (801fa40 <USBD_MSC_GetFSCfgDesc+0x54>)
 801fa02:	f002 f941 	bl	8021c88 <USBD_GetEpDesc>
 801fa06:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801fa08:	68fb      	ldr	r3, [r7, #12]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d006      	beq.n	801fa1c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	2200      	movs	r2, #0
 801fa12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa16:	711a      	strb	r2, [r3, #4]
 801fa18:	2200      	movs	r2, #0
 801fa1a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801fa1c:	68bb      	ldr	r3, [r7, #8]
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d006      	beq.n	801fa30 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa22:	68bb      	ldr	r3, [r7, #8]
 801fa24:	2200      	movs	r2, #0
 801fa26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa2a:	711a      	strb	r2, [r3, #4]
 801fa2c:	2200      	movs	r2, #0
 801fa2e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2220      	movs	r2, #32
 801fa34:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801fa36:	4b02      	ldr	r3, [pc, #8]	; (801fa40 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801fa38:	4618      	mov	r0, r3
 801fa3a:	3710      	adds	r7, #16
 801fa3c:	46bd      	mov	sp, r7
 801fa3e:	bd80      	pop	{r7, pc}
 801fa40:	200005bc 	.word	0x200005bc

0801fa44 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b084      	sub	sp, #16
 801fa48:	af00      	add	r7, sp, #0
 801fa4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fa4c:	2181      	movs	r1, #129	; 0x81
 801fa4e:	4812      	ldr	r0, [pc, #72]	; (801fa98 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801fa50:	f002 f91a 	bl	8021c88 <USBD_GetEpDesc>
 801fa54:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fa56:	2101      	movs	r1, #1
 801fa58:	480f      	ldr	r0, [pc, #60]	; (801fa98 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801fa5a:	f002 f915 	bl	8021c88 <USBD_GetEpDesc>
 801fa5e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	d006      	beq.n	801fa74 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa66:	68fb      	ldr	r3, [r7, #12]
 801fa68:	2200      	movs	r2, #0
 801fa6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa6e:	711a      	strb	r2, [r3, #4]
 801fa70:	2200      	movs	r2, #0
 801fa72:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801fa74:	68bb      	ldr	r3, [r7, #8]
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d006      	beq.n	801fa88 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa7a:	68bb      	ldr	r3, [r7, #8]
 801fa7c:	2200      	movs	r2, #0
 801fa7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa82:	711a      	strb	r2, [r3, #4]
 801fa84:	2200      	movs	r2, #0
 801fa86:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	2220      	movs	r2, #32
 801fa8c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801fa8e:	4b02      	ldr	r3, [pc, #8]	; (801fa98 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801fa90:	4618      	mov	r0, r3
 801fa92:	3710      	adds	r7, #16
 801fa94:	46bd      	mov	sp, r7
 801fa96:	bd80      	pop	{r7, pc}
 801fa98:	200005bc 	.word	0x200005bc

0801fa9c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801fa9c:	b480      	push	{r7}
 801fa9e:	b083      	sub	sp, #12
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	220a      	movs	r2, #10
 801faa8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801faaa:	4b03      	ldr	r3, [pc, #12]	; (801fab8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801faac:	4618      	mov	r0, r3
 801faae:	370c      	adds	r7, #12
 801fab0:	46bd      	mov	sp, r7
 801fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fab6:	4770      	bx	lr
 801fab8:	200005dc 	.word	0x200005dc

0801fabc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801fabc:	b480      	push	{r7}
 801fabe:	b083      	sub	sp, #12
 801fac0:	af00      	add	r7, sp, #0
 801fac2:	6078      	str	r0, [r7, #4]
 801fac4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801fac6:	683b      	ldr	r3, [r7, #0]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d101      	bne.n	801fad0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801facc:	2303      	movs	r3, #3
 801face:	e009      	b.n	801fae4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801fad6:	687a      	ldr	r2, [r7, #4]
 801fad8:	33b0      	adds	r3, #176	; 0xb0
 801fada:	009b      	lsls	r3, r3, #2
 801fadc:	4413      	add	r3, r2
 801fade:	683a      	ldr	r2, [r7, #0]
 801fae0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801fae2:	2300      	movs	r3, #0
}
 801fae4:	4618      	mov	r0, r3
 801fae6:	370c      	adds	r7, #12
 801fae8:	46bd      	mov	sp, r7
 801faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faee:	4770      	bx	lr

0801faf0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801faf0:	b580      	push	{r7, lr}
 801faf2:	b084      	sub	sp, #16
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	32b0      	adds	r2, #176	; 0xb0
 801fb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fb06:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fb08:	68fb      	ldr	r3, [r7, #12]
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d032      	beq.n	801fb74 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801fb0e:	68fb      	ldr	r3, [r7, #12]
 801fb10:	2200      	movs	r2, #0
 801fb12:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	2200      	movs	r2, #0
 801fb18:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	2200      	movs	r2, #0
 801fb26:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	2200      	movs	r2, #0
 801fb2e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801fb38:	687a      	ldr	r2, [r7, #4]
 801fb3a:	33b0      	adds	r3, #176	; 0xb0
 801fb3c:	009b      	lsls	r3, r3, #2
 801fb3e:	4413      	add	r3, r2
 801fb40:	685b      	ldr	r3, [r3, #4]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	2000      	movs	r0, #0
 801fb46:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801fb48:	4b0c      	ldr	r3, [pc, #48]	; (801fb7c <MSC_BOT_Init+0x8c>)
 801fb4a:	781b      	ldrb	r3, [r3, #0]
 801fb4c:	4619      	mov	r1, r3
 801fb4e:	6878      	ldr	r0, [r7, #4]
 801fb50:	f006 fa90 	bl	8026074 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 801fb54:	4b0a      	ldr	r3, [pc, #40]	; (801fb80 <MSC_BOT_Init+0x90>)
 801fb56:	781b      	ldrb	r3, [r3, #0]
 801fb58:	4619      	mov	r1, r3
 801fb5a:	6878      	ldr	r0, [r7, #4]
 801fb5c:	f006 fa8a 	bl	8026074 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fb60:	4b06      	ldr	r3, [pc, #24]	; (801fb7c <MSC_BOT_Init+0x8c>)
 801fb62:	7819      	ldrb	r1, [r3, #0]
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fb6a:	231f      	movs	r3, #31
 801fb6c:	6878      	ldr	r0, [r7, #4]
 801fb6e:	f006 fb4a 	bl	8026206 <USBD_LL_PrepareReceive>
 801fb72:	e000      	b.n	801fb76 <MSC_BOT_Init+0x86>
    return;
 801fb74:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fb76:	3710      	adds	r7, #16
 801fb78:	46bd      	mov	sp, r7
 801fb7a:	bd80      	pop	{r7, pc}
 801fb7c:	200005e7 	.word	0x200005e7
 801fb80:	200005e6 	.word	0x200005e6

0801fb84 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b084      	sub	sp, #16
 801fb88:	af00      	add	r7, sp, #0
 801fb8a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	32b0      	adds	r2, #176	; 0xb0
 801fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fb9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d01b      	beq.n	801fbda <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	2200      	movs	r2, #0
 801fba6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	2201      	movs	r2, #1
 801fbac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801fbae:	4b0d      	ldr	r3, [pc, #52]	; (801fbe4 <MSC_BOT_Reset+0x60>)
 801fbb0:	781b      	ldrb	r3, [r3, #0]
 801fbb2:	4619      	mov	r1, r3
 801fbb4:	6878      	ldr	r0, [r7, #4]
 801fbb6:	f006 fa9b 	bl	80260f0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801fbba:	4b0b      	ldr	r3, [pc, #44]	; (801fbe8 <MSC_BOT_Reset+0x64>)
 801fbbc:	781b      	ldrb	r3, [r3, #0]
 801fbbe:	4619      	mov	r1, r3
 801fbc0:	6878      	ldr	r0, [r7, #4]
 801fbc2:	f006 fa95 	bl	80260f0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fbc6:	4b08      	ldr	r3, [pc, #32]	; (801fbe8 <MSC_BOT_Reset+0x64>)
 801fbc8:	7819      	ldrb	r1, [r3, #0]
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fbd0:	231f      	movs	r3, #31
 801fbd2:	6878      	ldr	r0, [r7, #4]
 801fbd4:	f006 fb17 	bl	8026206 <USBD_LL_PrepareReceive>
 801fbd8:	e000      	b.n	801fbdc <MSC_BOT_Reset+0x58>
    return;
 801fbda:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fbdc:	3710      	adds	r7, #16
 801fbde:	46bd      	mov	sp, r7
 801fbe0:	bd80      	pop	{r7, pc}
 801fbe2:	bf00      	nop
 801fbe4:	200005e6 	.word	0x200005e6
 801fbe8:	200005e7 	.word	0x200005e7

0801fbec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801fbec:	b480      	push	{r7}
 801fbee:	b085      	sub	sp, #20
 801fbf0:	af00      	add	r7, sp, #0
 801fbf2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	32b0      	adds	r2, #176	; 0xb0
 801fbfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc02:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801fc04:	68fb      	ldr	r3, [r7, #12]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d002      	beq.n	801fc10 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801fc0a:	68fb      	ldr	r3, [r7, #12]
 801fc0c:	2200      	movs	r2, #0
 801fc0e:	721a      	strb	r2, [r3, #8]
  }
}
 801fc10:	bf00      	nop
 801fc12:	3714      	adds	r7, #20
 801fc14:	46bd      	mov	sp, r7
 801fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc1a:	4770      	bx	lr

0801fc1c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fc1c:	b580      	push	{r7, lr}
 801fc1e:	b084      	sub	sp, #16
 801fc20:	af00      	add	r7, sp, #0
 801fc22:	6078      	str	r0, [r7, #4]
 801fc24:	460b      	mov	r3, r1
 801fc26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	32b0      	adds	r2, #176	; 0xb0
 801fc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc36:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fc38:	68fb      	ldr	r3, [r7, #12]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d020      	beq.n	801fc80 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	7a1b      	ldrb	r3, [r3, #8]
 801fc42:	2b02      	cmp	r3, #2
 801fc44:	d005      	beq.n	801fc52 <MSC_BOT_DataIn+0x36>
 801fc46:	2b02      	cmp	r3, #2
 801fc48:	db1c      	blt.n	801fc84 <MSC_BOT_DataIn+0x68>
 801fc4a:	3b03      	subs	r3, #3
 801fc4c:	2b01      	cmp	r3, #1
 801fc4e:	d819      	bhi.n	801fc84 <MSC_BOT_DataIn+0x68>
 801fc50:	e011      	b.n	801fc76 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fc5e:	461a      	mov	r2, r3
 801fc60:	6878      	ldr	r0, [r7, #4]
 801fc62:	f000 f9c9 	bl	801fff8 <SCSI_ProcessCmd>
 801fc66:	4603      	mov	r3, r0
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	da0d      	bge.n	801fc88 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fc6c:	2101      	movs	r1, #1
 801fc6e:	6878      	ldr	r0, [r7, #4]
 801fc70:	f000 f90c 	bl	801fe8c <MSC_BOT_SendCSW>
      }
      break;
 801fc74:	e008      	b.n	801fc88 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fc76:	2100      	movs	r1, #0
 801fc78:	6878      	ldr	r0, [r7, #4]
 801fc7a:	f000 f907 	bl	801fe8c <MSC_BOT_SendCSW>
      break;
 801fc7e:	e004      	b.n	801fc8a <MSC_BOT_DataIn+0x6e>
    return;
 801fc80:	bf00      	nop
 801fc82:	e002      	b.n	801fc8a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 801fc84:	bf00      	nop
 801fc86:	e000      	b.n	801fc8a <MSC_BOT_DataIn+0x6e>
      break;
 801fc88:	bf00      	nop
  }
}
 801fc8a:	3710      	adds	r7, #16
 801fc8c:	46bd      	mov	sp, r7
 801fc8e:	bd80      	pop	{r7, pc}

0801fc90 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fc90:	b580      	push	{r7, lr}
 801fc92:	b084      	sub	sp, #16
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	6078      	str	r0, [r7, #4]
 801fc98:	460b      	mov	r3, r1
 801fc9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	32b0      	adds	r2, #176	; 0xb0
 801fca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fcaa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d01c      	beq.n	801fcec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fcb2:	68fb      	ldr	r3, [r7, #12]
 801fcb4:	7a1b      	ldrb	r3, [r3, #8]
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d002      	beq.n	801fcc0 <MSC_BOT_DataOut+0x30>
 801fcba:	2b01      	cmp	r3, #1
 801fcbc:	d004      	beq.n	801fcc8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801fcbe:	e018      	b.n	801fcf2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 801fcc0:	6878      	ldr	r0, [r7, #4]
 801fcc2:	f000 f819 	bl	801fcf8 <MSC_BOT_CBW_Decode>
      break;
 801fcc6:	e014      	b.n	801fcf2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fcc8:	68fb      	ldr	r3, [r7, #12]
 801fcca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fcd4:	461a      	mov	r2, r3
 801fcd6:	6878      	ldr	r0, [r7, #4]
 801fcd8:	f000 f98e 	bl	801fff8 <SCSI_ProcessCmd>
 801fcdc:	4603      	mov	r3, r0
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	da06      	bge.n	801fcf0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fce2:	2101      	movs	r1, #1
 801fce4:	6878      	ldr	r0, [r7, #4]
 801fce6:	f000 f8d1 	bl	801fe8c <MSC_BOT_SendCSW>
      break;
 801fcea:	e001      	b.n	801fcf0 <MSC_BOT_DataOut+0x60>
    return;
 801fcec:	bf00      	nop
 801fcee:	e000      	b.n	801fcf2 <MSC_BOT_DataOut+0x62>
      break;
 801fcf0:	bf00      	nop
  }
}
 801fcf2:	3710      	adds	r7, #16
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	bd80      	pop	{r7, pc}

0801fcf8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801fcf8:	b580      	push	{r7, lr}
 801fcfa:	b084      	sub	sp, #16
 801fcfc:	af00      	add	r7, sp, #0
 801fcfe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	32b0      	adds	r2, #176	; 0xb0
 801fd0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fd0e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d079      	beq.n	801fe0a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801fd1c:	68fb      	ldr	r3, [r7, #12]
 801fd1e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fd22:	68fb      	ldr	r3, [r7, #12]
 801fd24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801fd28:	68fb      	ldr	r3, [r7, #12]
 801fd2a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801fd2e:	4b3a      	ldr	r3, [pc, #232]	; (801fe18 <MSC_BOT_CBW_Decode+0x120>)
 801fd30:	781b      	ldrb	r3, [r3, #0]
 801fd32:	4619      	mov	r1, r3
 801fd34:	6878      	ldr	r0, [r7, #4]
 801fd36:	f006 fa87 	bl	8026248 <USBD_LL_GetRxDataSize>
 801fd3a:	4603      	mov	r3, r0
 801fd3c:	2b1f      	cmp	r3, #31
 801fd3e:	d114      	bne.n	801fd6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801fd46:	4a35      	ldr	r2, [pc, #212]	; (801fe1c <MSC_BOT_CBW_Decode+0x124>)
 801fd48:	4293      	cmp	r3, r2
 801fd4a:	d10e      	bne.n	801fd6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fd52:	2b01      	cmp	r3, #1
 801fd54:	d809      	bhi.n	801fd6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d004      	beq.n	801fd6a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fd66:	2b10      	cmp	r3, #16
 801fd68:	d90e      	bls.n	801fd88 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fd6a:	68fb      	ldr	r3, [r7, #12]
 801fd6c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd70:	2320      	movs	r3, #32
 801fd72:	2205      	movs	r2, #5
 801fd74:	6878      	ldr	r0, [r7, #4]
 801fd76:	f000 fe28 	bl	80209ca <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fd7a:	68fb      	ldr	r3, [r7, #12]
 801fd7c:	2202      	movs	r2, #2
 801fd7e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801fd80:	6878      	ldr	r0, [r7, #4]
 801fd82:	f000 f8bd 	bl	801ff00 <MSC_BOT_Abort>
 801fd86:	e043      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd8e:	68fb      	ldr	r3, [r7, #12]
 801fd90:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fd94:	461a      	mov	r2, r3
 801fd96:	6878      	ldr	r0, [r7, #4]
 801fd98:	f000 f92e 	bl	801fff8 <SCSI_ProcessCmd>
 801fd9c:	4603      	mov	r3, r0
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	da0c      	bge.n	801fdbc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	7a1b      	ldrb	r3, [r3, #8]
 801fda6:	2b05      	cmp	r3, #5
 801fda8:	d104      	bne.n	801fdb4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fdaa:	2101      	movs	r1, #1
 801fdac:	6878      	ldr	r0, [r7, #4]
 801fdae:	f000 f86d 	bl	801fe8c <MSC_BOT_SendCSW>
 801fdb2:	e02d      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fdb4:	6878      	ldr	r0, [r7, #4]
 801fdb6:	f000 f8a3 	bl	801ff00 <MSC_BOT_Abort>
 801fdba:	e029      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fdbc:	68fb      	ldr	r3, [r7, #12]
 801fdbe:	7a1b      	ldrb	r3, [r3, #8]
 801fdc0:	2b02      	cmp	r3, #2
 801fdc2:	d024      	beq.n	801fe0e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fdc4:	68fb      	ldr	r3, [r7, #12]
 801fdc6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fdc8:	2b01      	cmp	r3, #1
 801fdca:	d020      	beq.n	801fe0e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fdd0:	2b03      	cmp	r3, #3
 801fdd2:	d01c      	beq.n	801fe0e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	68db      	ldr	r3, [r3, #12]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d009      	beq.n	801fdf0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801fddc:	68fb      	ldr	r3, [r7, #12]
 801fdde:	f103 0110 	add.w	r1, r3, #16
 801fde2:	68fb      	ldr	r3, [r7, #12]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	461a      	mov	r2, r3
 801fde8:	6878      	ldr	r0, [r7, #4]
 801fdea:	f000 f819 	bl	801fe20 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801fdee:	e00f      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 801fdf0:	68fb      	ldr	r3, [r7, #12]
 801fdf2:	68db      	ldr	r3, [r3, #12]
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d104      	bne.n	801fe02 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fdf8:	2100      	movs	r1, #0
 801fdfa:	6878      	ldr	r0, [r7, #4]
 801fdfc:	f000 f846 	bl	801fe8c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801fe00:	e006      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fe02:	6878      	ldr	r0, [r7, #4]
 801fe04:	f000 f87c 	bl	801ff00 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801fe08:	e002      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
    return;
 801fe0a:	bf00      	nop
 801fe0c:	e000      	b.n	801fe10 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801fe0e:	bf00      	nop
    }
  }
}
 801fe10:	3710      	adds	r7, #16
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}
 801fe16:	bf00      	nop
 801fe18:	200005e7 	.word	0x200005e7
 801fe1c:	43425355 	.word	0x43425355

0801fe20 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fe20:	b580      	push	{r7, lr}
 801fe22:	b086      	sub	sp, #24
 801fe24:	af00      	add	r7, sp, #0
 801fe26:	60f8      	str	r0, [r7, #12]
 801fe28:	60b9      	str	r1, [r7, #8]
 801fe2a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fe2c:	68fb      	ldr	r3, [r7, #12]
 801fe2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe32:	68fb      	ldr	r3, [r7, #12]
 801fe34:	32b0      	adds	r2, #176	; 0xb0
 801fe36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fe3a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d01e      	beq.n	801fe80 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801fe42:	697b      	ldr	r3, [r7, #20]
 801fe44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fe48:	687a      	ldr	r2, [r7, #4]
 801fe4a:	4293      	cmp	r3, r2
 801fe4c:	bf28      	it	cs
 801fe4e:	4613      	movcs	r3, r2
 801fe50:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801fe52:	697b      	ldr	r3, [r7, #20]
 801fe54:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	1ad2      	subs	r2, r2, r3
 801fe5c:	697b      	ldr	r3, [r7, #20]
 801fe5e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fe62:	697b      	ldr	r3, [r7, #20]
 801fe64:	2200      	movs	r2, #0
 801fe66:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fe6a:	697b      	ldr	r3, [r7, #20]
 801fe6c:	2204      	movs	r2, #4
 801fe6e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe70:	4b05      	ldr	r3, [pc, #20]	; (801fe88 <MSC_BOT_SendData+0x68>)
 801fe72:	7819      	ldrb	r1, [r3, #0]
 801fe74:	693b      	ldr	r3, [r7, #16]
 801fe76:	68ba      	ldr	r2, [r7, #8]
 801fe78:	68f8      	ldr	r0, [r7, #12]
 801fe7a:	f006 f9a3 	bl	80261c4 <USBD_LL_Transmit>
 801fe7e:	e000      	b.n	801fe82 <MSC_BOT_SendData+0x62>
    return;
 801fe80:	bf00      	nop
}
 801fe82:	3718      	adds	r7, #24
 801fe84:	46bd      	mov	sp, r7
 801fe86:	bd80      	pop	{r7, pc}
 801fe88:	200005e6 	.word	0x200005e6

0801fe8c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b084      	sub	sp, #16
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	460b      	mov	r3, r1
 801fe96:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	32b0      	adds	r2, #176	; 0xb0
 801fea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fea6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fea8:	68fb      	ldr	r3, [r7, #12]
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d01d      	beq.n	801feea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	4a10      	ldr	r2, [pc, #64]	; (801fef4 <MSC_BOT_SendCSW+0x68>)
 801feb2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	78fa      	ldrb	r2, [r7, #3]
 801feba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	2200      	movs	r2, #0
 801fec2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801fec4:	4b0c      	ldr	r3, [pc, #48]	; (801fef8 <MSC_BOT_SendCSW+0x6c>)
 801fec6:	7819      	ldrb	r1, [r3, #0]
 801fec8:	68fb      	ldr	r3, [r7, #12]
 801feca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801fece:	230d      	movs	r3, #13
 801fed0:	6878      	ldr	r0, [r7, #4]
 801fed2:	f006 f977 	bl	80261c4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fed6:	4b09      	ldr	r3, [pc, #36]	; (801fefc <MSC_BOT_SendCSW+0x70>)
 801fed8:	7819      	ldrb	r1, [r3, #0]
 801feda:	68fb      	ldr	r3, [r7, #12]
 801fedc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fee0:	231f      	movs	r3, #31
 801fee2:	6878      	ldr	r0, [r7, #4]
 801fee4:	f006 f98f 	bl	8026206 <USBD_LL_PrepareReceive>
 801fee8:	e000      	b.n	801feec <MSC_BOT_SendCSW+0x60>
    return;
 801feea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801feec:	3710      	adds	r7, #16
 801feee:	46bd      	mov	sp, r7
 801fef0:	bd80      	pop	{r7, pc}
 801fef2:	bf00      	nop
 801fef4:	53425355 	.word	0x53425355
 801fef8:	200005e6 	.word	0x200005e6
 801fefc:	200005e7 	.word	0x200005e7

0801ff00 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801ff00:	b580      	push	{r7, lr}
 801ff02:	b084      	sub	sp, #16
 801ff04:	af00      	add	r7, sp, #0
 801ff06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	32b0      	adds	r2, #176	; 0xb0
 801ff12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ff16:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d02a      	beq.n	801ff74 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	d10e      	bne.n	801ff46 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 801ff28:	68fb      	ldr	r3, [r7, #12]
 801ff2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d009      	beq.n	801ff46 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801ff32:	68fb      	ldr	r3, [r7, #12]
 801ff34:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	d105      	bne.n	801ff46 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801ff3a:	4b10      	ldr	r3, [pc, #64]	; (801ff7c <MSC_BOT_Abort+0x7c>)
 801ff3c:	781b      	ldrb	r3, [r3, #0]
 801ff3e:	4619      	mov	r1, r3
 801ff40:	6878      	ldr	r0, [r7, #4]
 801ff42:	f006 f8b6 	bl	80260b2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801ff46:	4b0e      	ldr	r3, [pc, #56]	; (801ff80 <MSC_BOT_Abort+0x80>)
 801ff48:	781b      	ldrb	r3, [r3, #0]
 801ff4a:	4619      	mov	r1, r3
 801ff4c:	6878      	ldr	r0, [r7, #4]
 801ff4e:	f006 f8b0 	bl	80260b2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	7a5b      	ldrb	r3, [r3, #9]
 801ff56:	2b02      	cmp	r3, #2
 801ff58:	d10d      	bne.n	801ff76 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801ff5a:	4b09      	ldr	r3, [pc, #36]	; (801ff80 <MSC_BOT_Abort+0x80>)
 801ff5c:	781b      	ldrb	r3, [r3, #0]
 801ff5e:	4619      	mov	r1, r3
 801ff60:	6878      	ldr	r0, [r7, #4]
 801ff62:	f006 f8a6 	bl	80260b2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801ff66:	4b05      	ldr	r3, [pc, #20]	; (801ff7c <MSC_BOT_Abort+0x7c>)
 801ff68:	781b      	ldrb	r3, [r3, #0]
 801ff6a:	4619      	mov	r1, r3
 801ff6c:	6878      	ldr	r0, [r7, #4]
 801ff6e:	f006 f8a0 	bl	80260b2 <USBD_LL_StallEP>
 801ff72:	e000      	b.n	801ff76 <MSC_BOT_Abort+0x76>
    return;
 801ff74:	bf00      	nop
  }
}
 801ff76:	3710      	adds	r7, #16
 801ff78:	46bd      	mov	sp, r7
 801ff7a:	bd80      	pop	{r7, pc}
 801ff7c:	200005e7 	.word	0x200005e7
 801ff80:	200005e6 	.word	0x200005e6

0801ff84 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ff84:	b580      	push	{r7, lr}
 801ff86:	b084      	sub	sp, #16
 801ff88:	af00      	add	r7, sp, #0
 801ff8a:	6078      	str	r0, [r7, #4]
 801ff8c:	460b      	mov	r3, r1
 801ff8e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	32b0      	adds	r2, #176	; 0xb0
 801ff9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ff9e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d01d      	beq.n	801ffe2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801ffa6:	68fb      	ldr	r3, [r7, #12]
 801ffa8:	7a5b      	ldrb	r3, [r3, #9]
 801ffaa:	2b02      	cmp	r3, #2
 801ffac:	d10c      	bne.n	801ffc8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801ffae:	4b10      	ldr	r3, [pc, #64]	; (801fff0 <MSC_BOT_CplClrFeature+0x6c>)
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	4619      	mov	r1, r3
 801ffb4:	6878      	ldr	r0, [r7, #4]
 801ffb6:	f006 f87c 	bl	80260b2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801ffba:	4b0e      	ldr	r3, [pc, #56]	; (801fff4 <MSC_BOT_CplClrFeature+0x70>)
 801ffbc:	781b      	ldrb	r3, [r3, #0]
 801ffbe:	4619      	mov	r1, r3
 801ffc0:	6878      	ldr	r0, [r7, #4]
 801ffc2:	f006 f876 	bl	80260b2 <USBD_LL_StallEP>
 801ffc6:	e00f      	b.n	801ffe8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801ffc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	da0a      	bge.n	801ffe6 <MSC_BOT_CplClrFeature+0x62>
 801ffd0:	68fb      	ldr	r3, [r7, #12]
 801ffd2:	7a5b      	ldrb	r3, [r3, #9]
 801ffd4:	2b01      	cmp	r3, #1
 801ffd6:	d006      	beq.n	801ffe6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801ffd8:	2101      	movs	r1, #1
 801ffda:	6878      	ldr	r0, [r7, #4]
 801ffdc:	f7ff ff56 	bl	801fe8c <MSC_BOT_SendCSW>
 801ffe0:	e002      	b.n	801ffe8 <MSC_BOT_CplClrFeature+0x64>
    return;
 801ffe2:	bf00      	nop
 801ffe4:	e000      	b.n	801ffe8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 801ffe6:	bf00      	nop
  }
}
 801ffe8:	3710      	adds	r7, #16
 801ffea:	46bd      	mov	sp, r7
 801ffec:	bd80      	pop	{r7, pc}
 801ffee:	bf00      	nop
 801fff0:	200005e6 	.word	0x200005e6
 801fff4:	200005e7 	.word	0x200005e7

0801fff8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fff8:	b580      	push	{r7, lr}
 801fffa:	b086      	sub	sp, #24
 801fffc:	af00      	add	r7, sp, #0
 801fffe:	60f8      	str	r0, [r7, #12]
 8020000:	460b      	mov	r3, r1
 8020002:	607a      	str	r2, [r7, #4]
 8020004:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802000c:	68fb      	ldr	r3, [r7, #12]
 802000e:	32b0      	adds	r2, #176	; 0xb0
 8020010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020014:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8020016:	693b      	ldr	r3, [r7, #16]
 8020018:	2b00      	cmp	r3, #0
 802001a:	d102      	bne.n	8020022 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 802001c:	f04f 33ff 	mov.w	r3, #4294967295
 8020020:	e168      	b.n	80202f4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	781b      	ldrb	r3, [r3, #0]
 8020026:	2baa      	cmp	r3, #170	; 0xaa
 8020028:	f000 8144 	beq.w	80202b4 <SCSI_ProcessCmd+0x2bc>
 802002c:	2baa      	cmp	r3, #170	; 0xaa
 802002e:	f300 8153 	bgt.w	80202d8 <SCSI_ProcessCmd+0x2e0>
 8020032:	2ba8      	cmp	r3, #168	; 0xa8
 8020034:	f000 812c 	beq.w	8020290 <SCSI_ProcessCmd+0x298>
 8020038:	2ba8      	cmp	r3, #168	; 0xa8
 802003a:	f300 814d 	bgt.w	80202d8 <SCSI_ProcessCmd+0x2e0>
 802003e:	2b5a      	cmp	r3, #90	; 0x5a
 8020040:	f300 80c0 	bgt.w	80201c4 <SCSI_ProcessCmd+0x1cc>
 8020044:	2b00      	cmp	r3, #0
 8020046:	f2c0 8147 	blt.w	80202d8 <SCSI_ProcessCmd+0x2e0>
 802004a:	2b5a      	cmp	r3, #90	; 0x5a
 802004c:	f200 8144 	bhi.w	80202d8 <SCSI_ProcessCmd+0x2e0>
 8020050:	a201      	add	r2, pc, #4	; (adr r2, 8020058 <SCSI_ProcessCmd+0x60>)
 8020052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020056:	bf00      	nop
 8020058:	080201cb 	.word	0x080201cb
 802005c:	080202d9 	.word	0x080202d9
 8020060:	080202d9 	.word	0x080202d9
 8020064:	080201dd 	.word	0x080201dd
 8020068:	080202d9 	.word	0x080202d9
 802006c:	080202d9 	.word	0x080202d9
 8020070:	080202d9 	.word	0x080202d9
 8020074:	080202d9 	.word	0x080202d9
 8020078:	080202d9 	.word	0x080202d9
 802007c:	080202d9 	.word	0x080202d9
 8020080:	080202d9 	.word	0x080202d9
 8020084:	080202d9 	.word	0x080202d9
 8020088:	080202d9 	.word	0x080202d9
 802008c:	080202d9 	.word	0x080202d9
 8020090:	080202d9 	.word	0x080202d9
 8020094:	080202d9 	.word	0x080202d9
 8020098:	080202d9 	.word	0x080202d9
 802009c:	080202d9 	.word	0x080202d9
 80200a0:	080201ef 	.word	0x080201ef
 80200a4:	080202d9 	.word	0x080202d9
 80200a8:	080202d9 	.word	0x080202d9
 80200ac:	080202d9 	.word	0x080202d9
 80200b0:	080202d9 	.word	0x080202d9
 80200b4:	080202d9 	.word	0x080202d9
 80200b8:	080202d9 	.word	0x080202d9
 80200bc:	080202d9 	.word	0x080202d9
 80200c0:	08020225 	.word	0x08020225
 80200c4:	08020201 	.word	0x08020201
 80200c8:	080202d9 	.word	0x080202d9
 80200cc:	080202d9 	.word	0x080202d9
 80200d0:	08020213 	.word	0x08020213
 80200d4:	080202d9 	.word	0x080202d9
 80200d8:	080202d9 	.word	0x080202d9
 80200dc:	080202d9 	.word	0x080202d9
 80200e0:	080202d9 	.word	0x080202d9
 80200e4:	08020249 	.word	0x08020249
 80200e8:	080202d9 	.word	0x080202d9
 80200ec:	0802025b 	.word	0x0802025b
 80200f0:	080202d9 	.word	0x080202d9
 80200f4:	080202d9 	.word	0x080202d9
 80200f8:	0802027f 	.word	0x0802027f
 80200fc:	080202d9 	.word	0x080202d9
 8020100:	080202a3 	.word	0x080202a3
 8020104:	080202d9 	.word	0x080202d9
 8020108:	080202d9 	.word	0x080202d9
 802010c:	080202d9 	.word	0x080202d9
 8020110:	080202d9 	.word	0x080202d9
 8020114:	080202c7 	.word	0x080202c7
 8020118:	080202d9 	.word	0x080202d9
 802011c:	080202d9 	.word	0x080202d9
 8020120:	080202d9 	.word	0x080202d9
 8020124:	080202d9 	.word	0x080202d9
 8020128:	080202d9 	.word	0x080202d9
 802012c:	080202d9 	.word	0x080202d9
 8020130:	080202d9 	.word	0x080202d9
 8020134:	080202d9 	.word	0x080202d9
 8020138:	080202d9 	.word	0x080202d9
 802013c:	080202d9 	.word	0x080202d9
 8020140:	080202d9 	.word	0x080202d9
 8020144:	080202d9 	.word	0x080202d9
 8020148:	080202d9 	.word	0x080202d9
 802014c:	080202d9 	.word	0x080202d9
 8020150:	080202d9 	.word	0x080202d9
 8020154:	080202d9 	.word	0x080202d9
 8020158:	080202d9 	.word	0x080202d9
 802015c:	080202d9 	.word	0x080202d9
 8020160:	080202d9 	.word	0x080202d9
 8020164:	080202d9 	.word	0x080202d9
 8020168:	080202d9 	.word	0x080202d9
 802016c:	080202d9 	.word	0x080202d9
 8020170:	080202d9 	.word	0x080202d9
 8020174:	080202d9 	.word	0x080202d9
 8020178:	080202d9 	.word	0x080202d9
 802017c:	080202d9 	.word	0x080202d9
 8020180:	080202d9 	.word	0x080202d9
 8020184:	080202d9 	.word	0x080202d9
 8020188:	080202d9 	.word	0x080202d9
 802018c:	080202d9 	.word	0x080202d9
 8020190:	080202d9 	.word	0x080202d9
 8020194:	080202d9 	.word	0x080202d9
 8020198:	080202d9 	.word	0x080202d9
 802019c:	080202d9 	.word	0x080202d9
 80201a0:	080202d9 	.word	0x080202d9
 80201a4:	080202d9 	.word	0x080202d9
 80201a8:	080202d9 	.word	0x080202d9
 80201ac:	080202d9 	.word	0x080202d9
 80201b0:	080202d9 	.word	0x080202d9
 80201b4:	080202d9 	.word	0x080202d9
 80201b8:	080202d9 	.word	0x080202d9
 80201bc:	080202d9 	.word	0x080202d9
 80201c0:	08020237 	.word	0x08020237
 80201c4:	2b9e      	cmp	r3, #158	; 0x9e
 80201c6:	d051      	beq.n	802026c <SCSI_ProcessCmd+0x274>
 80201c8:	e086      	b.n	80202d8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80201ca:	7afb      	ldrb	r3, [r7, #11]
 80201cc:	687a      	ldr	r2, [r7, #4]
 80201ce:	4619      	mov	r1, r3
 80201d0:	68f8      	ldr	r0, [r7, #12]
 80201d2:	f000 f893 	bl	80202fc <SCSI_TestUnitReady>
 80201d6:	4603      	mov	r3, r0
 80201d8:	75fb      	strb	r3, [r7, #23]
      break;
 80201da:	e089      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80201dc:	7afb      	ldrb	r3, [r7, #11]
 80201de:	687a      	ldr	r2, [r7, #4]
 80201e0:	4619      	mov	r1, r3
 80201e2:	68f8      	ldr	r0, [r7, #12]
 80201e4:	f000 fb6e 	bl	80208c4 <SCSI_RequestSense>
 80201e8:	4603      	mov	r3, r0
 80201ea:	75fb      	strb	r3, [r7, #23]
      break;
 80201ec:	e080      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80201ee:	7afb      	ldrb	r3, [r7, #11]
 80201f0:	687a      	ldr	r2, [r7, #4]
 80201f2:	4619      	mov	r1, r3
 80201f4:	68f8      	ldr	r0, [r7, #12]
 80201f6:	f000 f8db 	bl	80203b0 <SCSI_Inquiry>
 80201fa:	4603      	mov	r3, r0
 80201fc:	75fb      	strb	r3, [r7, #23]
      break;
 80201fe:	e077      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8020200:	7afb      	ldrb	r3, [r7, #11]
 8020202:	687a      	ldr	r2, [r7, #4]
 8020204:	4619      	mov	r1, r3
 8020206:	68f8      	ldr	r0, [r7, #12]
 8020208:	f000 fc2a 	bl	8020a60 <SCSI_StartStopUnit>
 802020c:	4603      	mov	r3, r0
 802020e:	75fb      	strb	r3, [r7, #23]
      break;
 8020210:	e06e      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8020212:	7afb      	ldrb	r3, [r7, #11]
 8020214:	687a      	ldr	r2, [r7, #4]
 8020216:	4619      	mov	r1, r3
 8020218:	68f8      	ldr	r0, [r7, #12]
 802021a:	f000 fc76 	bl	8020b0a <SCSI_AllowPreventRemovable>
 802021e:	4603      	mov	r3, r0
 8020220:	75fb      	strb	r3, [r7, #23]
      break;
 8020222:	e065      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8020224:	7afb      	ldrb	r3, [r7, #11]
 8020226:	687a      	ldr	r2, [r7, #4]
 8020228:	4619      	mov	r1, r3
 802022a:	68f8      	ldr	r0, [r7, #12]
 802022c:	f000 faea 	bl	8020804 <SCSI_ModeSense6>
 8020230:	4603      	mov	r3, r0
 8020232:	75fb      	strb	r3, [r7, #23]
      break;
 8020234:	e05c      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8020236:	7afb      	ldrb	r3, [r7, #11]
 8020238:	687a      	ldr	r2, [r7, #4]
 802023a:	4619      	mov	r1, r3
 802023c:	68f8      	ldr	r0, [r7, #12]
 802023e:	f000 fb11 	bl	8020864 <SCSI_ModeSense10>
 8020242:	4603      	mov	r3, r0
 8020244:	75fb      	strb	r3, [r7, #23]
      break;
 8020246:	e053      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8020248:	7afb      	ldrb	r3, [r7, #11]
 802024a:	687a      	ldr	r2, [r7, #4]
 802024c:	4619      	mov	r1, r3
 802024e:	68f8      	ldr	r0, [r7, #12]
 8020250:	f000 fa5d 	bl	802070e <SCSI_ReadFormatCapacity>
 8020254:	4603      	mov	r3, r0
 8020256:	75fb      	strb	r3, [r7, #23]
      break;
 8020258:	e04a      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 802025a:	7afb      	ldrb	r3, [r7, #11]
 802025c:	687a      	ldr	r2, [r7, #4]
 802025e:	4619      	mov	r1, r3
 8020260:	68f8      	ldr	r0, [r7, #12]
 8020262:	f000 f923 	bl	80204ac <SCSI_ReadCapacity10>
 8020266:	4603      	mov	r3, r0
 8020268:	75fb      	strb	r3, [r7, #23]
      break;
 802026a:	e041      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 802026c:	7afb      	ldrb	r3, [r7, #11]
 802026e:	687a      	ldr	r2, [r7, #4]
 8020270:	4619      	mov	r1, r3
 8020272:	68f8      	ldr	r0, [r7, #12]
 8020274:	f000 f998 	bl	80205a8 <SCSI_ReadCapacity16>
 8020278:	4603      	mov	r3, r0
 802027a:	75fb      	strb	r3, [r7, #23]
      break;
 802027c:	e038      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 802027e:	7afb      	ldrb	r3, [r7, #11]
 8020280:	687a      	ldr	r2, [r7, #4]
 8020282:	4619      	mov	r1, r3
 8020284:	68f8      	ldr	r0, [r7, #12]
 8020286:	f000 fc6d 	bl	8020b64 <SCSI_Read10>
 802028a:	4603      	mov	r3, r0
 802028c:	75fb      	strb	r3, [r7, #23]
      break;
 802028e:	e02f      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8020290:	7afb      	ldrb	r3, [r7, #11]
 8020292:	687a      	ldr	r2, [r7, #4]
 8020294:	4619      	mov	r1, r3
 8020296:	68f8      	ldr	r0, [r7, #12]
 8020298:	f000 fd0e 	bl	8020cb8 <SCSI_Read12>
 802029c:	4603      	mov	r3, r0
 802029e:	75fb      	strb	r3, [r7, #23]
      break;
 80202a0:	e026      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80202a2:	7afb      	ldrb	r3, [r7, #11]
 80202a4:	687a      	ldr	r2, [r7, #4]
 80202a6:	4619      	mov	r1, r3
 80202a8:	68f8      	ldr	r0, [r7, #12]
 80202aa:	f000 fdb9 	bl	8020e20 <SCSI_Write10>
 80202ae:	4603      	mov	r3, r0
 80202b0:	75fb      	strb	r3, [r7, #23]
      break;
 80202b2:	e01d      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80202b4:	7afb      	ldrb	r3, [r7, #11]
 80202b6:	687a      	ldr	r2, [r7, #4]
 80202b8:	4619      	mov	r1, r3
 80202ba:	68f8      	ldr	r0, [r7, #12]
 80202bc:	f000 fe86 	bl	8020fcc <SCSI_Write12>
 80202c0:	4603      	mov	r3, r0
 80202c2:	75fb      	strb	r3, [r7, #23]
      break;
 80202c4:	e014      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80202c6:	7afb      	ldrb	r3, [r7, #11]
 80202c8:	687a      	ldr	r2, [r7, #4]
 80202ca:	4619      	mov	r1, r3
 80202cc:	68f8      	ldr	r0, [r7, #12]
 80202ce:	f000 ff63 	bl	8021198 <SCSI_Verify10>
 80202d2:	4603      	mov	r3, r0
 80202d4:	75fb      	strb	r3, [r7, #23]
      break;
 80202d6:	e00b      	b.n	80202f0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80202d8:	7af9      	ldrb	r1, [r7, #11]
 80202da:	2320      	movs	r3, #32
 80202dc:	2205      	movs	r2, #5
 80202de:	68f8      	ldr	r0, [r7, #12]
 80202e0:	f000 fb73 	bl	80209ca <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80202e4:	693b      	ldr	r3, [r7, #16]
 80202e6:	2202      	movs	r2, #2
 80202e8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80202ea:	23ff      	movs	r3, #255	; 0xff
 80202ec:	75fb      	strb	r3, [r7, #23]
      break;
 80202ee:	bf00      	nop
  }

  return ret;
 80202f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80202f4:	4618      	mov	r0, r3
 80202f6:	3718      	adds	r7, #24
 80202f8:	46bd      	mov	sp, r7
 80202fa:	bd80      	pop	{r7, pc}

080202fc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80202fc:	b580      	push	{r7, lr}
 80202fe:	b086      	sub	sp, #24
 8020300:	af00      	add	r7, sp, #0
 8020302:	60f8      	str	r0, [r7, #12]
 8020304:	460b      	mov	r3, r1
 8020306:	607a      	str	r2, [r7, #4]
 8020308:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	32b0      	adds	r2, #176	; 0xb0
 8020314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020318:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802031a:	697b      	ldr	r3, [r7, #20]
 802031c:	2b00      	cmp	r3, #0
 802031e:	d102      	bne.n	8020326 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8020320:	f04f 33ff 	mov.w	r3, #4294967295
 8020324:	e03f      	b.n	80203a6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8020326:	697b      	ldr	r3, [r7, #20]
 8020328:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802032c:	2b00      	cmp	r3, #0
 802032e:	d00a      	beq.n	8020346 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020330:	697b      	ldr	r3, [r7, #20]
 8020332:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020336:	2320      	movs	r3, #32
 8020338:	2205      	movs	r2, #5
 802033a:	68f8      	ldr	r0, [r7, #12]
 802033c:	f000 fb45 	bl	80209ca <SCSI_SenseCode>

    return -1;
 8020340:	f04f 33ff 	mov.w	r3, #4294967295
 8020344:	e02f      	b.n	80203a6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020346:	697b      	ldr	r3, [r7, #20]
 8020348:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802034c:	2b02      	cmp	r3, #2
 802034e:	d10b      	bne.n	8020368 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020350:	7af9      	ldrb	r1, [r7, #11]
 8020352:	233a      	movs	r3, #58	; 0x3a
 8020354:	2202      	movs	r2, #2
 8020356:	68f8      	ldr	r0, [r7, #12]
 8020358:	f000 fb37 	bl	80209ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 802035c:	697b      	ldr	r3, [r7, #20]
 802035e:	2205      	movs	r2, #5
 8020360:	721a      	strb	r2, [r3, #8]
    return -1;
 8020362:	f04f 33ff 	mov.w	r3, #4294967295
 8020366:	e01e      	b.n	80203a6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020368:	68fb      	ldr	r3, [r7, #12]
 802036a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802036e:	68fa      	ldr	r2, [r7, #12]
 8020370:	33b0      	adds	r3, #176	; 0xb0
 8020372:	009b      	lsls	r3, r3, #2
 8020374:	4413      	add	r3, r2
 8020376:	685b      	ldr	r3, [r3, #4]
 8020378:	689b      	ldr	r3, [r3, #8]
 802037a:	7afa      	ldrb	r2, [r7, #11]
 802037c:	4610      	mov	r0, r2
 802037e:	4798      	blx	r3
 8020380:	4603      	mov	r3, r0
 8020382:	2b00      	cmp	r3, #0
 8020384:	d00b      	beq.n	802039e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020386:	7af9      	ldrb	r1, [r7, #11]
 8020388:	233a      	movs	r3, #58	; 0x3a
 802038a:	2202      	movs	r2, #2
 802038c:	68f8      	ldr	r0, [r7, #12]
 802038e:	f000 fb1c 	bl	80209ca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8020392:	697b      	ldr	r3, [r7, #20]
 8020394:	2205      	movs	r2, #5
 8020396:	721a      	strb	r2, [r3, #8]

    return -1;
 8020398:	f04f 33ff 	mov.w	r3, #4294967295
 802039c:	e003      	b.n	80203a6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 802039e:	697b      	ldr	r3, [r7, #20]
 80203a0:	2200      	movs	r2, #0
 80203a2:	60da      	str	r2, [r3, #12]

  return 0;
 80203a4:	2300      	movs	r3, #0
}
 80203a6:	4618      	mov	r0, r3
 80203a8:	3718      	adds	r7, #24
 80203aa:	46bd      	mov	sp, r7
 80203ac:	bd80      	pop	{r7, pc}
	...

080203b0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80203b0:	b580      	push	{r7, lr}
 80203b2:	b088      	sub	sp, #32
 80203b4:	af00      	add	r7, sp, #0
 80203b6:	60f8      	str	r0, [r7, #12]
 80203b8:	460b      	mov	r3, r1
 80203ba:	607a      	str	r2, [r7, #4]
 80203bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80203c4:	68fb      	ldr	r3, [r7, #12]
 80203c6:	32b0      	adds	r2, #176	; 0xb0
 80203c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80203cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80203ce:	69bb      	ldr	r3, [r7, #24]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d102      	bne.n	80203da <SCSI_Inquiry+0x2a>
  {
    return -1;
 80203d4:	f04f 33ff 	mov.w	r3, #4294967295
 80203d8:	e05f      	b.n	802049a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80203da:	69bb      	ldr	r3, [r7, #24]
 80203dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d10a      	bne.n	80203fa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80203e4:	69bb      	ldr	r3, [r7, #24]
 80203e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80203ea:	2320      	movs	r3, #32
 80203ec:	2205      	movs	r2, #5
 80203ee:	68f8      	ldr	r0, [r7, #12]
 80203f0:	f000 faeb 	bl	80209ca <SCSI_SenseCode>
    return -1;
 80203f4:	f04f 33ff 	mov.w	r3, #4294967295
 80203f8:	e04f      	b.n	802049a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	3301      	adds	r3, #1
 80203fe:	781b      	ldrb	r3, [r3, #0]
 8020400:	f003 0301 	and.w	r3, r3, #1
 8020404:	2b00      	cmp	r3, #0
 8020406:	d020      	beq.n	802044a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	3302      	adds	r3, #2
 802040c:	781b      	ldrb	r3, [r3, #0]
 802040e:	2b00      	cmp	r3, #0
 8020410:	d105      	bne.n	802041e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8020412:	2206      	movs	r2, #6
 8020414:	4923      	ldr	r1, [pc, #140]	; (80204a4 <SCSI_Inquiry+0xf4>)
 8020416:	69b8      	ldr	r0, [r7, #24]
 8020418:	f001 f844 	bl	80214a4 <SCSI_UpdateBotData>
 802041c:	e03c      	b.n	8020498 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	3302      	adds	r3, #2
 8020422:	781b      	ldrb	r3, [r3, #0]
 8020424:	2b80      	cmp	r3, #128	; 0x80
 8020426:	d105      	bne.n	8020434 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8020428:	2208      	movs	r2, #8
 802042a:	491f      	ldr	r1, [pc, #124]	; (80204a8 <SCSI_Inquiry+0xf8>)
 802042c:	69b8      	ldr	r0, [r7, #24]
 802042e:	f001 f839 	bl	80214a4 <SCSI_UpdateBotData>
 8020432:	e031      	b.n	8020498 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8020434:	69bb      	ldr	r3, [r7, #24]
 8020436:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802043a:	2324      	movs	r3, #36	; 0x24
 802043c:	2205      	movs	r2, #5
 802043e:	68f8      	ldr	r0, [r7, #12]
 8020440:	f000 fac3 	bl	80209ca <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8020444:	f04f 33ff 	mov.w	r3, #4294967295
 8020448:	e027      	b.n	802049a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 802044a:	68fb      	ldr	r3, [r7, #12]
 802044c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020450:	68fa      	ldr	r2, [r7, #12]
 8020452:	33b0      	adds	r3, #176	; 0xb0
 8020454:	009b      	lsls	r3, r3, #2
 8020456:	4413      	add	r3, r2
 8020458:	685b      	ldr	r3, [r3, #4]
 802045a:	69d9      	ldr	r1, [r3, #28]
 802045c:	7afa      	ldrb	r2, [r7, #11]
 802045e:	4613      	mov	r3, r2
 8020460:	00db      	lsls	r3, r3, #3
 8020462:	4413      	add	r3, r2
 8020464:	009b      	lsls	r3, r3, #2
 8020466:	440b      	add	r3, r1
 8020468:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 802046a:	697b      	ldr	r3, [r7, #20]
 802046c:	3304      	adds	r3, #4
 802046e:	781b      	ldrb	r3, [r3, #0]
 8020470:	b29b      	uxth	r3, r3
 8020472:	3305      	adds	r3, #5
 8020474:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	3304      	adds	r3, #4
 802047a:	781b      	ldrb	r3, [r3, #0]
 802047c:	b29b      	uxth	r3, r3
 802047e:	8bfa      	ldrh	r2, [r7, #30]
 8020480:	429a      	cmp	r2, r3
 8020482:	d303      	bcc.n	802048c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	3304      	adds	r3, #4
 8020488:	781b      	ldrb	r3, [r3, #0]
 802048a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 802048c:	8bfb      	ldrh	r3, [r7, #30]
 802048e:	461a      	mov	r2, r3
 8020490:	6979      	ldr	r1, [r7, #20]
 8020492:	69b8      	ldr	r0, [r7, #24]
 8020494:	f001 f806 	bl	80214a4 <SCSI_UpdateBotData>
  }

  return 0;
 8020498:	2300      	movs	r3, #0
}
 802049a:	4618      	mov	r0, r3
 802049c:	3720      	adds	r7, #32
 802049e:	46bd      	mov	sp, r7
 80204a0:	bd80      	pop	{r7, pc}
 80204a2:	bf00      	nop
 80204a4:	200005e8 	.word	0x200005e8
 80204a8:	200005f0 	.word	0x200005f0

080204ac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204ac:	b580      	push	{r7, lr}
 80204ae:	b086      	sub	sp, #24
 80204b0:	af00      	add	r7, sp, #0
 80204b2:	60f8      	str	r0, [r7, #12]
 80204b4:	460b      	mov	r3, r1
 80204b6:	607a      	str	r2, [r7, #4]
 80204b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	32b0      	adds	r2, #176	; 0xb0
 80204c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80204c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d102      	bne.n	80204d6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80204d0:	f04f 33ff 	mov.w	r3, #4294967295
 80204d4:	e064      	b.n	80205a0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80204d6:	68fb      	ldr	r3, [r7, #12]
 80204d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80204dc:	68fa      	ldr	r2, [r7, #12]
 80204de:	33b0      	adds	r3, #176	; 0xb0
 80204e0:	009b      	lsls	r3, r3, #2
 80204e2:	4413      	add	r3, r2
 80204e4:	685b      	ldr	r3, [r3, #4]
 80204e6:	685b      	ldr	r3, [r3, #4]
 80204e8:	697a      	ldr	r2, [r7, #20]
 80204ea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80204ee:	697a      	ldr	r2, [r7, #20]
 80204f0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80204f4:	7af8      	ldrb	r0, [r7, #11]
 80204f6:	4798      	blx	r3
 80204f8:	4603      	mov	r3, r0
 80204fa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80204fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020500:	2b00      	cmp	r3, #0
 8020502:	d104      	bne.n	802050e <SCSI_ReadCapacity10+0x62>
 8020504:	697b      	ldr	r3, [r7, #20]
 8020506:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802050a:	2b02      	cmp	r3, #2
 802050c:	d108      	bne.n	8020520 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802050e:	7af9      	ldrb	r1, [r7, #11]
 8020510:	233a      	movs	r3, #58	; 0x3a
 8020512:	2202      	movs	r2, #2
 8020514:	68f8      	ldr	r0, [r7, #12]
 8020516:	f000 fa58 	bl	80209ca <SCSI_SenseCode>
    return -1;
 802051a:	f04f 33ff 	mov.w	r3, #4294967295
 802051e:	e03f      	b.n	80205a0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020520:	697b      	ldr	r3, [r7, #20]
 8020522:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020526:	3b01      	subs	r3, #1
 8020528:	0e1b      	lsrs	r3, r3, #24
 802052a:	b2da      	uxtb	r2, r3
 802052c:	697b      	ldr	r3, [r7, #20]
 802052e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020530:	697b      	ldr	r3, [r7, #20]
 8020532:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020536:	3b01      	subs	r3, #1
 8020538:	0c1b      	lsrs	r3, r3, #16
 802053a:	b2da      	uxtb	r2, r3
 802053c:	697b      	ldr	r3, [r7, #20]
 802053e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020540:	697b      	ldr	r3, [r7, #20]
 8020542:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020546:	3b01      	subs	r3, #1
 8020548:	0a1b      	lsrs	r3, r3, #8
 802054a:	b2da      	uxtb	r2, r3
 802054c:	697b      	ldr	r3, [r7, #20]
 802054e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020550:	697b      	ldr	r3, [r7, #20]
 8020552:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020556:	b2db      	uxtb	r3, r3
 8020558:	3b01      	subs	r3, #1
 802055a:	b2da      	uxtb	r2, r3
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8020560:	697b      	ldr	r3, [r7, #20]
 8020562:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020566:	161b      	asrs	r3, r3, #24
 8020568:	b2da      	uxtb	r2, r3
 802056a:	697b      	ldr	r3, [r7, #20]
 802056c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 802056e:	697b      	ldr	r3, [r7, #20]
 8020570:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020574:	141b      	asrs	r3, r3, #16
 8020576:	b2da      	uxtb	r2, r3
 8020578:	697b      	ldr	r3, [r7, #20]
 802057a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 802057c:	697b      	ldr	r3, [r7, #20]
 802057e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020582:	0a1b      	lsrs	r3, r3, #8
 8020584:	b29b      	uxth	r3, r3
 8020586:	b2da      	uxtb	r2, r3
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 802058c:	697b      	ldr	r3, [r7, #20]
 802058e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020592:	b2da      	uxtb	r2, r3
 8020594:	697b      	ldr	r3, [r7, #20]
 8020596:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8020598:	697b      	ldr	r3, [r7, #20]
 802059a:	2208      	movs	r2, #8
 802059c:	60da      	str	r2, [r3, #12]

  return 0;
 802059e:	2300      	movs	r3, #0

}
 80205a0:	4618      	mov	r0, r3
 80205a2:	3718      	adds	r7, #24
 80205a4:	46bd      	mov	sp, r7
 80205a6:	bd80      	pop	{r7, pc}

080205a8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80205a8:	b580      	push	{r7, lr}
 80205aa:	b088      	sub	sp, #32
 80205ac:	af00      	add	r7, sp, #0
 80205ae:	60f8      	str	r0, [r7, #12]
 80205b0:	460b      	mov	r3, r1
 80205b2:	607a      	str	r2, [r7, #4]
 80205b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	32b0      	adds	r2, #176	; 0xb0
 80205c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80205c4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80205c6:	69bb      	ldr	r3, [r7, #24]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d102      	bne.n	80205d2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80205cc:	f04f 33ff 	mov.w	r3, #4294967295
 80205d0:	e099      	b.n	8020706 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80205d2:	68fb      	ldr	r3, [r7, #12]
 80205d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80205d8:	68fa      	ldr	r2, [r7, #12]
 80205da:	33b0      	adds	r3, #176	; 0xb0
 80205dc:	009b      	lsls	r3, r3, #2
 80205de:	4413      	add	r3, r2
 80205e0:	685b      	ldr	r3, [r3, #4]
 80205e2:	685b      	ldr	r3, [r3, #4]
 80205e4:	69ba      	ldr	r2, [r7, #24]
 80205e6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80205ea:	69ba      	ldr	r2, [r7, #24]
 80205ec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80205f0:	7af8      	ldrb	r0, [r7, #11]
 80205f2:	4798      	blx	r3
 80205f4:	4603      	mov	r3, r0
 80205f6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80205f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d104      	bne.n	802060a <SCSI_ReadCapacity16+0x62>
 8020600:	69bb      	ldr	r3, [r7, #24]
 8020602:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020606:	2b02      	cmp	r3, #2
 8020608:	d108      	bne.n	802061c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802060a:	7af9      	ldrb	r1, [r7, #11]
 802060c:	233a      	movs	r3, #58	; 0x3a
 802060e:	2202      	movs	r2, #2
 8020610:	68f8      	ldr	r0, [r7, #12]
 8020612:	f000 f9da 	bl	80209ca <SCSI_SenseCode>
    return -1;
 8020616:	f04f 33ff 	mov.w	r3, #4294967295
 802061a:	e074      	b.n	8020706 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	330a      	adds	r3, #10
 8020620:	781b      	ldrb	r3, [r3, #0]
 8020622:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	330b      	adds	r3, #11
 8020628:	781b      	ldrb	r3, [r3, #0]
 802062a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 802062c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	330c      	adds	r3, #12
 8020632:	781b      	ldrb	r3, [r3, #0]
 8020634:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8020636:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020638:	687a      	ldr	r2, [r7, #4]
 802063a:	320d      	adds	r2, #13
 802063c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 802063e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020640:	69bb      	ldr	r3, [r7, #24]
 8020642:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020644:	2300      	movs	r3, #0
 8020646:	77fb      	strb	r3, [r7, #31]
 8020648:	e007      	b.n	802065a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 802064a:	7ffb      	ldrb	r3, [r7, #31]
 802064c:	69ba      	ldr	r2, [r7, #24]
 802064e:	4413      	add	r3, r2
 8020650:	2200      	movs	r2, #0
 8020652:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8020654:	7ffb      	ldrb	r3, [r7, #31]
 8020656:	3301      	adds	r3, #1
 8020658:	77fb      	strb	r3, [r7, #31]
 802065a:	7ffa      	ldrb	r2, [r7, #31]
 802065c:	69bb      	ldr	r3, [r7, #24]
 802065e:	68db      	ldr	r3, [r3, #12]
 8020660:	429a      	cmp	r2, r3
 8020662:	d3f2      	bcc.n	802064a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020664:	69bb      	ldr	r3, [r7, #24]
 8020666:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802066a:	3b01      	subs	r3, #1
 802066c:	0e1b      	lsrs	r3, r3, #24
 802066e:	b2da      	uxtb	r2, r3
 8020670:	69bb      	ldr	r3, [r7, #24]
 8020672:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020674:	69bb      	ldr	r3, [r7, #24]
 8020676:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802067a:	3b01      	subs	r3, #1
 802067c:	0c1b      	lsrs	r3, r3, #16
 802067e:	b2da      	uxtb	r2, r3
 8020680:	69bb      	ldr	r3, [r7, #24]
 8020682:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020684:	69bb      	ldr	r3, [r7, #24]
 8020686:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802068a:	3b01      	subs	r3, #1
 802068c:	0a1b      	lsrs	r3, r3, #8
 802068e:	b2da      	uxtb	r2, r3
 8020690:	69bb      	ldr	r3, [r7, #24]
 8020692:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020694:	69bb      	ldr	r3, [r7, #24]
 8020696:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802069a:	b2db      	uxtb	r3, r3
 802069c:	3b01      	subs	r3, #1
 802069e:	b2da      	uxtb	r2, r3
 80206a0:	69bb      	ldr	r3, [r7, #24]
 80206a2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80206a4:	69bb      	ldr	r3, [r7, #24]
 80206a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80206aa:	161b      	asrs	r3, r3, #24
 80206ac:	b2da      	uxtb	r2, r3
 80206ae:	69bb      	ldr	r3, [r7, #24]
 80206b0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80206b2:	69bb      	ldr	r3, [r7, #24]
 80206b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80206b8:	141b      	asrs	r3, r3, #16
 80206ba:	b2da      	uxtb	r2, r3
 80206bc:	69bb      	ldr	r3, [r7, #24]
 80206be:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80206c0:	69bb      	ldr	r3, [r7, #24]
 80206c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80206c6:	0a1b      	lsrs	r3, r3, #8
 80206c8:	b29b      	uxth	r3, r3
 80206ca:	b2da      	uxtb	r2, r3
 80206cc:	69bb      	ldr	r3, [r7, #24]
 80206ce:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80206d0:	69bb      	ldr	r3, [r7, #24]
 80206d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80206d6:	b2da      	uxtb	r2, r3
 80206d8:	69bb      	ldr	r3, [r7, #24]
 80206da:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	330a      	adds	r3, #10
 80206e0:	781b      	ldrb	r3, [r3, #0]
 80206e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	330b      	adds	r3, #11
 80206e8:	781b      	ldrb	r3, [r3, #0]
 80206ea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80206ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80206ee:	687b      	ldr	r3, [r7, #4]
 80206f0:	330c      	adds	r3, #12
 80206f2:	781b      	ldrb	r3, [r3, #0]
 80206f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80206f6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80206f8:	687a      	ldr	r2, [r7, #4]
 80206fa:	320d      	adds	r2, #13
 80206fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80206fe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020700:	69bb      	ldr	r3, [r7, #24]
 8020702:	60da      	str	r2, [r3, #12]

  return 0;
 8020704:	2300      	movs	r3, #0
}
 8020706:	4618      	mov	r0, r3
 8020708:	3720      	adds	r7, #32
 802070a:	46bd      	mov	sp, r7
 802070c:	bd80      	pop	{r7, pc}

0802070e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802070e:	b580      	push	{r7, lr}
 8020710:	b088      	sub	sp, #32
 8020712:	af00      	add	r7, sp, #0
 8020714:	60f8      	str	r0, [r7, #12]
 8020716:	460b      	mov	r3, r1
 8020718:	607a      	str	r2, [r7, #4]
 802071a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802071c:	68fb      	ldr	r3, [r7, #12]
 802071e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	32b0      	adds	r2, #176	; 0xb0
 8020726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802072a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802072c:	69bb      	ldr	r3, [r7, #24]
 802072e:	2b00      	cmp	r3, #0
 8020730:	d102      	bne.n	8020738 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8020732:	f04f 33ff 	mov.w	r3, #4294967295
 8020736:	e061      	b.n	80207fc <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8020738:	68fb      	ldr	r3, [r7, #12]
 802073a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802073e:	68fa      	ldr	r2, [r7, #12]
 8020740:	33b0      	adds	r3, #176	; 0xb0
 8020742:	009b      	lsls	r3, r3, #2
 8020744:	4413      	add	r3, r2
 8020746:	685b      	ldr	r3, [r3, #4]
 8020748:	685b      	ldr	r3, [r3, #4]
 802074a:	f107 0214 	add.w	r2, r7, #20
 802074e:	f107 0110 	add.w	r1, r7, #16
 8020752:	7af8      	ldrb	r0, [r7, #11]
 8020754:	4798      	blx	r3
 8020756:	4603      	mov	r3, r0
 8020758:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 802075a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802075e:	2b00      	cmp	r3, #0
 8020760:	d104      	bne.n	802076c <SCSI_ReadFormatCapacity+0x5e>
 8020762:	69bb      	ldr	r3, [r7, #24]
 8020764:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020768:	2b02      	cmp	r3, #2
 802076a:	d108      	bne.n	802077e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802076c:	7af9      	ldrb	r1, [r7, #11]
 802076e:	233a      	movs	r3, #58	; 0x3a
 8020770:	2202      	movs	r2, #2
 8020772:	68f8      	ldr	r0, [r7, #12]
 8020774:	f000 f929 	bl	80209ca <SCSI_SenseCode>
    return -1;
 8020778:	f04f 33ff 	mov.w	r3, #4294967295
 802077c:	e03e      	b.n	80207fc <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 802077e:	2300      	movs	r3, #0
 8020780:	83fb      	strh	r3, [r7, #30]
 8020782:	e007      	b.n	8020794 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8020784:	8bfb      	ldrh	r3, [r7, #30]
 8020786:	69ba      	ldr	r2, [r7, #24]
 8020788:	4413      	add	r3, r2
 802078a:	2200      	movs	r2, #0
 802078c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 802078e:	8bfb      	ldrh	r3, [r7, #30]
 8020790:	3301      	adds	r3, #1
 8020792:	83fb      	strh	r3, [r7, #30]
 8020794:	8bfb      	ldrh	r3, [r7, #30]
 8020796:	2b0b      	cmp	r3, #11
 8020798:	d9f4      	bls.n	8020784 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 802079a:	69bb      	ldr	r3, [r7, #24]
 802079c:	2208      	movs	r2, #8
 802079e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80207a0:	693b      	ldr	r3, [r7, #16]
 80207a2:	3b01      	subs	r3, #1
 80207a4:	0e1b      	lsrs	r3, r3, #24
 80207a6:	b2da      	uxtb	r2, r3
 80207a8:	69bb      	ldr	r3, [r7, #24]
 80207aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80207ac:	693b      	ldr	r3, [r7, #16]
 80207ae:	3b01      	subs	r3, #1
 80207b0:	0c1b      	lsrs	r3, r3, #16
 80207b2:	b2da      	uxtb	r2, r3
 80207b4:	69bb      	ldr	r3, [r7, #24]
 80207b6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80207b8:	693b      	ldr	r3, [r7, #16]
 80207ba:	3b01      	subs	r3, #1
 80207bc:	0a1b      	lsrs	r3, r3, #8
 80207be:	b2da      	uxtb	r2, r3
 80207c0:	69bb      	ldr	r3, [r7, #24]
 80207c2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80207c4:	693b      	ldr	r3, [r7, #16]
 80207c6:	b2db      	uxtb	r3, r3
 80207c8:	3b01      	subs	r3, #1
 80207ca:	b2da      	uxtb	r2, r3
 80207cc:	69bb      	ldr	r3, [r7, #24]
 80207ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80207d0:	69bb      	ldr	r3, [r7, #24]
 80207d2:	2202      	movs	r2, #2
 80207d4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80207d6:	8abb      	ldrh	r3, [r7, #20]
 80207d8:	141b      	asrs	r3, r3, #16
 80207da:	b2da      	uxtb	r2, r3
 80207dc:	69bb      	ldr	r3, [r7, #24]
 80207de:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80207e0:	8abb      	ldrh	r3, [r7, #20]
 80207e2:	0a1b      	lsrs	r3, r3, #8
 80207e4:	b29b      	uxth	r3, r3
 80207e6:	b2da      	uxtb	r2, r3
 80207e8:	69bb      	ldr	r3, [r7, #24]
 80207ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80207ec:	8abb      	ldrh	r3, [r7, #20]
 80207ee:	b2da      	uxtb	r2, r3
 80207f0:	69bb      	ldr	r3, [r7, #24]
 80207f2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80207f4:	69bb      	ldr	r3, [r7, #24]
 80207f6:	220c      	movs	r2, #12
 80207f8:	60da      	str	r2, [r3, #12]

  return 0;
 80207fa:	2300      	movs	r3, #0
}
 80207fc:	4618      	mov	r0, r3
 80207fe:	3720      	adds	r7, #32
 8020800:	46bd      	mov	sp, r7
 8020802:	bd80      	pop	{r7, pc}

08020804 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b086      	sub	sp, #24
 8020808:	af00      	add	r7, sp, #0
 802080a:	60f8      	str	r0, [r7, #12]
 802080c:	460b      	mov	r3, r1
 802080e:	607a      	str	r2, [r7, #4]
 8020810:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	32b0      	adds	r2, #176	; 0xb0
 802081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020820:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8020822:	2317      	movs	r3, #23
 8020824:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020826:	693b      	ldr	r3, [r7, #16]
 8020828:	2b00      	cmp	r3, #0
 802082a:	d102      	bne.n	8020832 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 802082c:	f04f 33ff 	mov.w	r3, #4294967295
 8020830:	e011      	b.n	8020856 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	3304      	adds	r3, #4
 8020836:	781b      	ldrb	r3, [r3, #0]
 8020838:	b29b      	uxth	r3, r3
 802083a:	8afa      	ldrh	r2, [r7, #22]
 802083c:	429a      	cmp	r2, r3
 802083e:	d303      	bcc.n	8020848 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	3304      	adds	r3, #4
 8020844:	781b      	ldrb	r3, [r3, #0]
 8020846:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020848:	8afb      	ldrh	r3, [r7, #22]
 802084a:	461a      	mov	r2, r3
 802084c:	4904      	ldr	r1, [pc, #16]	; (8020860 <SCSI_ModeSense6+0x5c>)
 802084e:	6938      	ldr	r0, [r7, #16]
 8020850:	f000 fe28 	bl	80214a4 <SCSI_UpdateBotData>

  return 0;
 8020854:	2300      	movs	r3, #0
}
 8020856:	4618      	mov	r0, r3
 8020858:	3718      	adds	r7, #24
 802085a:	46bd      	mov	sp, r7
 802085c:	bd80      	pop	{r7, pc}
 802085e:	bf00      	nop
 8020860:	200005f8 	.word	0x200005f8

08020864 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b086      	sub	sp, #24
 8020868:	af00      	add	r7, sp, #0
 802086a:	60f8      	str	r0, [r7, #12]
 802086c:	460b      	mov	r3, r1
 802086e:	607a      	str	r2, [r7, #4]
 8020870:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020872:	68fb      	ldr	r3, [r7, #12]
 8020874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020878:	68fb      	ldr	r3, [r7, #12]
 802087a:	32b0      	adds	r2, #176	; 0xb0
 802087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020880:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8020882:	231b      	movs	r3, #27
 8020884:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020886:	693b      	ldr	r3, [r7, #16]
 8020888:	2b00      	cmp	r3, #0
 802088a:	d102      	bne.n	8020892 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 802088c:	f04f 33ff 	mov.w	r3, #4294967295
 8020890:	e011      	b.n	80208b6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	3308      	adds	r3, #8
 8020896:	781b      	ldrb	r3, [r3, #0]
 8020898:	b29b      	uxth	r3, r3
 802089a:	8afa      	ldrh	r2, [r7, #22]
 802089c:	429a      	cmp	r2, r3
 802089e:	d303      	bcc.n	80208a8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	3308      	adds	r3, #8
 80208a4:	781b      	ldrb	r3, [r3, #0]
 80208a6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80208a8:	8afb      	ldrh	r3, [r7, #22]
 80208aa:	461a      	mov	r2, r3
 80208ac:	4904      	ldr	r1, [pc, #16]	; (80208c0 <SCSI_ModeSense10+0x5c>)
 80208ae:	6938      	ldr	r0, [r7, #16]
 80208b0:	f000 fdf8 	bl	80214a4 <SCSI_UpdateBotData>

  return 0;
 80208b4:	2300      	movs	r3, #0
}
 80208b6:	4618      	mov	r0, r3
 80208b8:	3718      	adds	r7, #24
 80208ba:	46bd      	mov	sp, r7
 80208bc:	bd80      	pop	{r7, pc}
 80208be:	bf00      	nop
 80208c0:	20000610 	.word	0x20000610

080208c4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b086      	sub	sp, #24
 80208c8:	af00      	add	r7, sp, #0
 80208ca:	60f8      	str	r0, [r7, #12]
 80208cc:	460b      	mov	r3, r1
 80208ce:	607a      	str	r2, [r7, #4]
 80208d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	32b0      	adds	r2, #176	; 0xb0
 80208dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80208e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80208e2:	693b      	ldr	r3, [r7, #16]
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	d102      	bne.n	80208ee <SCSI_RequestSense+0x2a>
  {
    return -1;
 80208e8:	f04f 33ff 	mov.w	r3, #4294967295
 80208ec:	e069      	b.n	80209c2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80208ee:	693b      	ldr	r3, [r7, #16]
 80208f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d10a      	bne.n	802090e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208f8:	693b      	ldr	r3, [r7, #16]
 80208fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208fe:	2320      	movs	r3, #32
 8020900:	2205      	movs	r2, #5
 8020902:	68f8      	ldr	r0, [r7, #12]
 8020904:	f000 f861 	bl	80209ca <SCSI_SenseCode>
    return -1;
 8020908:	f04f 33ff 	mov.w	r3, #4294967295
 802090c:	e059      	b.n	80209c2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802090e:	2300      	movs	r3, #0
 8020910:	75fb      	strb	r3, [r7, #23]
 8020912:	e007      	b.n	8020924 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8020914:	7dfb      	ldrb	r3, [r7, #23]
 8020916:	693a      	ldr	r2, [r7, #16]
 8020918:	4413      	add	r3, r2
 802091a:	2200      	movs	r2, #0
 802091c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802091e:	7dfb      	ldrb	r3, [r7, #23]
 8020920:	3301      	adds	r3, #1
 8020922:	75fb      	strb	r3, [r7, #23]
 8020924:	7dfb      	ldrb	r3, [r7, #23]
 8020926:	2b11      	cmp	r3, #17
 8020928:	d9f4      	bls.n	8020914 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 802092a:	693b      	ldr	r3, [r7, #16]
 802092c:	2270      	movs	r2, #112	; 0x70
 802092e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020930:	693b      	ldr	r3, [r7, #16]
 8020932:	220c      	movs	r2, #12
 8020934:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8020936:	693b      	ldr	r3, [r7, #16]
 8020938:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 802093c:	693b      	ldr	r3, [r7, #16]
 802093e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020942:	429a      	cmp	r2, r3
 8020944:	d02e      	beq.n	80209a4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8020946:	693b      	ldr	r3, [r7, #16]
 8020948:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802094c:	461a      	mov	r2, r3
 802094e:	693b      	ldr	r3, [r7, #16]
 8020950:	3248      	adds	r2, #72	; 0x48
 8020952:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8020956:	693b      	ldr	r3, [r7, #16]
 8020958:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 802095a:	693b      	ldr	r3, [r7, #16]
 802095c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020960:	693a      	ldr	r2, [r7, #16]
 8020962:	3348      	adds	r3, #72	; 0x48
 8020964:	00db      	lsls	r3, r3, #3
 8020966:	4413      	add	r3, r2
 8020968:	791a      	ldrb	r2, [r3, #4]
 802096a:	693b      	ldr	r3, [r7, #16]
 802096c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 802096e:	693b      	ldr	r3, [r7, #16]
 8020970:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020974:	693a      	ldr	r2, [r7, #16]
 8020976:	3348      	adds	r3, #72	; 0x48
 8020978:	00db      	lsls	r3, r3, #3
 802097a:	4413      	add	r3, r2
 802097c:	795a      	ldrb	r2, [r3, #5]
 802097e:	693b      	ldr	r3, [r7, #16]
 8020980:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8020982:	693b      	ldr	r3, [r7, #16]
 8020984:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020988:	3301      	adds	r3, #1
 802098a:	b2da      	uxtb	r2, r3
 802098c:	693b      	ldr	r3, [r7, #16]
 802098e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8020992:	693b      	ldr	r3, [r7, #16]
 8020994:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020998:	2b04      	cmp	r3, #4
 802099a:	d103      	bne.n	80209a4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 802099c:	693b      	ldr	r3, [r7, #16]
 802099e:	2200      	movs	r2, #0
 80209a0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80209a4:	693b      	ldr	r3, [r7, #16]
 80209a6:	2212      	movs	r2, #18
 80209a8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	3304      	adds	r3, #4
 80209ae:	781b      	ldrb	r3, [r3, #0]
 80209b0:	2b12      	cmp	r3, #18
 80209b2:	d805      	bhi.n	80209c0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	3304      	adds	r3, #4
 80209b8:	781b      	ldrb	r3, [r3, #0]
 80209ba:	461a      	mov	r2, r3
 80209bc:	693b      	ldr	r3, [r7, #16]
 80209be:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80209c0:	2300      	movs	r3, #0
}
 80209c2:	4618      	mov	r0, r3
 80209c4:	3718      	adds	r7, #24
 80209c6:	46bd      	mov	sp, r7
 80209c8:	bd80      	pop	{r7, pc}

080209ca <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80209ca:	b480      	push	{r7}
 80209cc:	b085      	sub	sp, #20
 80209ce:	af00      	add	r7, sp, #0
 80209d0:	6078      	str	r0, [r7, #4]
 80209d2:	4608      	mov	r0, r1
 80209d4:	4611      	mov	r1, r2
 80209d6:	461a      	mov	r2, r3
 80209d8:	4603      	mov	r3, r0
 80209da:	70fb      	strb	r3, [r7, #3]
 80209dc:	460b      	mov	r3, r1
 80209de:	70bb      	strb	r3, [r7, #2]
 80209e0:	4613      	mov	r3, r2
 80209e2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	32b0      	adds	r2, #176	; 0xb0
 80209ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80209f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	d02c      	beq.n	8020a54 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80209fa:	68fb      	ldr	r3, [r7, #12]
 80209fc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a00:	461a      	mov	r2, r3
 8020a02:	68fb      	ldr	r3, [r7, #12]
 8020a04:	3248      	adds	r2, #72	; 0x48
 8020a06:	78b9      	ldrb	r1, [r7, #2]
 8020a08:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a12:	68fa      	ldr	r2, [r7, #12]
 8020a14:	3348      	adds	r3, #72	; 0x48
 8020a16:	00db      	lsls	r3, r3, #3
 8020a18:	4413      	add	r3, r2
 8020a1a:	787a      	ldrb	r2, [r7, #1]
 8020a1c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8020a1e:	68fb      	ldr	r3, [r7, #12]
 8020a20:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a24:	68fa      	ldr	r2, [r7, #12]
 8020a26:	3348      	adds	r3, #72	; 0x48
 8020a28:	00db      	lsls	r3, r3, #3
 8020a2a:	4413      	add	r3, r2
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a36:	3301      	adds	r3, #1
 8020a38:	b2da      	uxtb	r2, r3
 8020a3a:	68fb      	ldr	r3, [r7, #12]
 8020a3c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a46:	2b04      	cmp	r3, #4
 8020a48:	d105      	bne.n	8020a56 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8020a52:	e000      	b.n	8020a56 <SCSI_SenseCode+0x8c>
    return;
 8020a54:	bf00      	nop
  }
}
 8020a56:	3714      	adds	r7, #20
 8020a58:	46bd      	mov	sp, r7
 8020a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a5e:	4770      	bx	lr

08020a60 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b086      	sub	sp, #24
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	60f8      	str	r0, [r7, #12]
 8020a68:	460b      	mov	r3, r1
 8020a6a:	607a      	str	r2, [r7, #4]
 8020a6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020a6e:	68fb      	ldr	r3, [r7, #12]
 8020a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	32b0      	adds	r2, #176	; 0xb0
 8020a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020a7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020a7e:	697b      	ldr	r3, [r7, #20]
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d102      	bne.n	8020a8a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8020a84:	f04f 33ff 	mov.w	r3, #4294967295
 8020a88:	e03b      	b.n	8020b02 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020a8a:	697b      	ldr	r3, [r7, #20]
 8020a8c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020a90:	2b01      	cmp	r3, #1
 8020a92:	d10f      	bne.n	8020ab4 <SCSI_StartStopUnit+0x54>
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	3304      	adds	r3, #4
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	f003 0303 	and.w	r3, r3, #3
 8020a9e:	2b02      	cmp	r3, #2
 8020aa0:	d108      	bne.n	8020ab4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020aa2:	7af9      	ldrb	r1, [r7, #11]
 8020aa4:	2324      	movs	r3, #36	; 0x24
 8020aa6:	2205      	movs	r2, #5
 8020aa8:	68f8      	ldr	r0, [r7, #12]
 8020aaa:	f7ff ff8e 	bl	80209ca <SCSI_SenseCode>

    return -1;
 8020aae:	f04f 33ff 	mov.w	r3, #4294967295
 8020ab2:	e026      	b.n	8020b02 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	3304      	adds	r3, #4
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	f003 0303 	and.w	r3, r3, #3
 8020abe:	2b01      	cmp	r3, #1
 8020ac0:	d104      	bne.n	8020acc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020ac2:	697b      	ldr	r3, [r7, #20]
 8020ac4:	2200      	movs	r2, #0
 8020ac6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020aca:	e016      	b.n	8020afa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	3304      	adds	r3, #4
 8020ad0:	781b      	ldrb	r3, [r3, #0]
 8020ad2:	f003 0303 	and.w	r3, r3, #3
 8020ad6:	2b02      	cmp	r3, #2
 8020ad8:	d104      	bne.n	8020ae4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8020ada:	697b      	ldr	r3, [r7, #20]
 8020adc:	2202      	movs	r2, #2
 8020ade:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020ae2:	e00a      	b.n	8020afa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	3304      	adds	r3, #4
 8020ae8:	781b      	ldrb	r3, [r3, #0]
 8020aea:	f003 0303 	and.w	r3, r3, #3
 8020aee:	2b03      	cmp	r3, #3
 8020af0:	d103      	bne.n	8020afa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020af2:	697b      	ldr	r3, [r7, #20]
 8020af4:	2200      	movs	r2, #0
 8020af6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8020afa:	697b      	ldr	r3, [r7, #20]
 8020afc:	2200      	movs	r2, #0
 8020afe:	60da      	str	r2, [r3, #12]

  return 0;
 8020b00:	2300      	movs	r3, #0
}
 8020b02:	4618      	mov	r0, r3
 8020b04:	3718      	adds	r7, #24
 8020b06:	46bd      	mov	sp, r7
 8020b08:	bd80      	pop	{r7, pc}

08020b0a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020b0a:	b480      	push	{r7}
 8020b0c:	b087      	sub	sp, #28
 8020b0e:	af00      	add	r7, sp, #0
 8020b10:	60f8      	str	r0, [r7, #12]
 8020b12:	460b      	mov	r3, r1
 8020b14:	607a      	str	r2, [r7, #4]
 8020b16:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020b18:	68fb      	ldr	r3, [r7, #12]
 8020b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	32b0      	adds	r2, #176	; 0xb0
 8020b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020b26:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b28:	697b      	ldr	r3, [r7, #20]
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d102      	bne.n	8020b34 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8020b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8020b32:	e011      	b.n	8020b58 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	3304      	adds	r3, #4
 8020b38:	781b      	ldrb	r3, [r3, #0]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d104      	bne.n	8020b48 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020b3e:	697b      	ldr	r3, [r7, #20]
 8020b40:	2200      	movs	r2, #0
 8020b42:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020b46:	e003      	b.n	8020b50 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020b48:	697b      	ldr	r3, [r7, #20]
 8020b4a:	2201      	movs	r2, #1
 8020b4c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020b50:	697b      	ldr	r3, [r7, #20]
 8020b52:	2200      	movs	r2, #0
 8020b54:	60da      	str	r2, [r3, #12]

  return 0;
 8020b56:	2300      	movs	r3, #0
}
 8020b58:	4618      	mov	r0, r3
 8020b5a:	371c      	adds	r7, #28
 8020b5c:	46bd      	mov	sp, r7
 8020b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b62:	4770      	bx	lr

08020b64 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020b64:	b580      	push	{r7, lr}
 8020b66:	b086      	sub	sp, #24
 8020b68:	af00      	add	r7, sp, #0
 8020b6a:	60f8      	str	r0, [r7, #12]
 8020b6c:	460b      	mov	r3, r1
 8020b6e:	607a      	str	r2, [r7, #4]
 8020b70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020b72:	68fb      	ldr	r3, [r7, #12]
 8020b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020b78:	68fb      	ldr	r3, [r7, #12]
 8020b7a:	32b0      	adds	r2, #176	; 0xb0
 8020b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020b80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d102      	bne.n	8020b8e <SCSI_Read10+0x2a>
  {
    return -1;
 8020b88:	f04f 33ff 	mov.w	r3, #4294967295
 8020b8c:	e090      	b.n	8020cb0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020b8e:	697b      	ldr	r3, [r7, #20]
 8020b90:	7a1b      	ldrb	r3, [r3, #8]
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	f040 8082 	bne.w	8020c9c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020b9e:	b25b      	sxtb	r3, r3
 8020ba0:	2b00      	cmp	r3, #0
 8020ba2:	db0a      	blt.n	8020bba <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ba4:	697b      	ldr	r3, [r7, #20]
 8020ba6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020baa:	2320      	movs	r3, #32
 8020bac:	2205      	movs	r2, #5
 8020bae:	68f8      	ldr	r0, [r7, #12]
 8020bb0:	f7ff ff0b 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8020bb8:	e07a      	b.n	8020cb0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020bc0:	2b02      	cmp	r3, #2
 8020bc2:	d108      	bne.n	8020bd6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020bc4:	7af9      	ldrb	r1, [r7, #11]
 8020bc6:	233a      	movs	r3, #58	; 0x3a
 8020bc8:	2202      	movs	r2, #2
 8020bca:	68f8      	ldr	r0, [r7, #12]
 8020bcc:	f7ff fefd 	bl	80209ca <SCSI_SenseCode>

      return -1;
 8020bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8020bd4:	e06c      	b.n	8020cb0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020bd6:	68fb      	ldr	r3, [r7, #12]
 8020bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020bdc:	68fa      	ldr	r2, [r7, #12]
 8020bde:	33b0      	adds	r3, #176	; 0xb0
 8020be0:	009b      	lsls	r3, r3, #2
 8020be2:	4413      	add	r3, r2
 8020be4:	685b      	ldr	r3, [r3, #4]
 8020be6:	689b      	ldr	r3, [r3, #8]
 8020be8:	7afa      	ldrb	r2, [r7, #11]
 8020bea:	4610      	mov	r0, r2
 8020bec:	4798      	blx	r3
 8020bee:	4603      	mov	r3, r0
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	d008      	beq.n	8020c06 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020bf4:	7af9      	ldrb	r1, [r7, #11]
 8020bf6:	233a      	movs	r3, #58	; 0x3a
 8020bf8:	2202      	movs	r2, #2
 8020bfa:	68f8      	ldr	r0, [r7, #12]
 8020bfc:	f7ff fee5 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020c00:	f04f 33ff 	mov.w	r3, #4294967295
 8020c04:	e054      	b.n	8020cb0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	3302      	adds	r3, #2
 8020c0a:	781b      	ldrb	r3, [r3, #0]
 8020c0c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	3303      	adds	r3, #3
 8020c12:	781b      	ldrb	r3, [r3, #0]
 8020c14:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c16:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	3304      	adds	r3, #4
 8020c1c:	781b      	ldrb	r3, [r3, #0]
 8020c1e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020c20:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020c22:	687a      	ldr	r2, [r7, #4]
 8020c24:	3205      	adds	r2, #5
 8020c26:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020c28:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c2a:	697b      	ldr	r3, [r7, #20]
 8020c2c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	3307      	adds	r3, #7
 8020c34:	781b      	ldrb	r3, [r3, #0]
 8020c36:	021b      	lsls	r3, r3, #8
 8020c38:	687a      	ldr	r2, [r7, #4]
 8020c3a:	3208      	adds	r2, #8
 8020c3c:	7812      	ldrb	r2, [r2, #0]
 8020c3e:	431a      	orrs	r2, r3
 8020c40:	697b      	ldr	r3, [r7, #20]
 8020c42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020c46:	697b      	ldr	r3, [r7, #20]
 8020c48:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c4c:	697b      	ldr	r3, [r7, #20]
 8020c4e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c52:	7af9      	ldrb	r1, [r7, #11]
 8020c54:	68f8      	ldr	r0, [r7, #12]
 8020c56:	f000 fadc 	bl	8021212 <SCSI_CheckAddressRange>
 8020c5a:	4603      	mov	r3, r0
 8020c5c:	2b00      	cmp	r3, #0
 8020c5e:	da02      	bge.n	8020c66 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020c60:	f04f 33ff 	mov.w	r3, #4294967295
 8020c64:	e024      	b.n	8020cb0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020c6c:	697b      	ldr	r3, [r7, #20]
 8020c6e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c72:	6979      	ldr	r1, [r7, #20]
 8020c74:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020c78:	fb01 f303 	mul.w	r3, r1, r3
 8020c7c:	429a      	cmp	r2, r3
 8020c7e:	d00a      	beq.n	8020c96 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020c80:	697b      	ldr	r3, [r7, #20]
 8020c82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020c86:	2320      	movs	r3, #32
 8020c88:	2205      	movs	r2, #5
 8020c8a:	68f8      	ldr	r0, [r7, #12]
 8020c8c:	f7ff fe9d 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020c90:	f04f 33ff 	mov.w	r3, #4294967295
 8020c94:	e00c      	b.n	8020cb0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020c96:	697b      	ldr	r3, [r7, #20]
 8020c98:	2202      	movs	r2, #2
 8020c9a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020c9c:	697b      	ldr	r3, [r7, #20]
 8020c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020ca2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020ca4:	7afb      	ldrb	r3, [r7, #11]
 8020ca6:	4619      	mov	r1, r3
 8020ca8:	68f8      	ldr	r0, [r7, #12]
 8020caa:	f000 fadf 	bl	802126c <SCSI_ProcessRead>
 8020cae:	4603      	mov	r3, r0
}
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	3718      	adds	r7, #24
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	bd80      	pop	{r7, pc}

08020cb8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b086      	sub	sp, #24
 8020cbc:	af00      	add	r7, sp, #0
 8020cbe:	60f8      	str	r0, [r7, #12]
 8020cc0:	460b      	mov	r3, r1
 8020cc2:	607a      	str	r2, [r7, #4]
 8020cc4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020cc6:	68fb      	ldr	r3, [r7, #12]
 8020cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	32b0      	adds	r2, #176	; 0xb0
 8020cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020cd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020cd6:	697b      	ldr	r3, [r7, #20]
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	d102      	bne.n	8020ce2 <SCSI_Read12+0x2a>
  {
    return -1;
 8020cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ce0:	e09a      	b.n	8020e18 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020ce2:	697b      	ldr	r3, [r7, #20]
 8020ce4:	7a1b      	ldrb	r3, [r3, #8]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	f040 808c 	bne.w	8020e04 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020cec:	697b      	ldr	r3, [r7, #20]
 8020cee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020cf2:	b25b      	sxtb	r3, r3
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	db0a      	blt.n	8020d0e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020cf8:	697b      	ldr	r3, [r7, #20]
 8020cfa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020cfe:	2320      	movs	r3, #32
 8020d00:	2205      	movs	r2, #5
 8020d02:	68f8      	ldr	r0, [r7, #12]
 8020d04:	f7ff fe61 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020d08:	f04f 33ff 	mov.w	r3, #4294967295
 8020d0c:	e084      	b.n	8020e18 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020d0e:	697b      	ldr	r3, [r7, #20]
 8020d10:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020d14:	2b02      	cmp	r3, #2
 8020d16:	d108      	bne.n	8020d2a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020d18:	7af9      	ldrb	r1, [r7, #11]
 8020d1a:	233a      	movs	r3, #58	; 0x3a
 8020d1c:	2202      	movs	r2, #2
 8020d1e:	68f8      	ldr	r0, [r7, #12]
 8020d20:	f7ff fe53 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020d24:	f04f 33ff 	mov.w	r3, #4294967295
 8020d28:	e076      	b.n	8020e18 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020d2a:	68fb      	ldr	r3, [r7, #12]
 8020d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020d30:	68fa      	ldr	r2, [r7, #12]
 8020d32:	33b0      	adds	r3, #176	; 0xb0
 8020d34:	009b      	lsls	r3, r3, #2
 8020d36:	4413      	add	r3, r2
 8020d38:	685b      	ldr	r3, [r3, #4]
 8020d3a:	689b      	ldr	r3, [r3, #8]
 8020d3c:	7afa      	ldrb	r2, [r7, #11]
 8020d3e:	4610      	mov	r0, r2
 8020d40:	4798      	blx	r3
 8020d42:	4603      	mov	r3, r0
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d008      	beq.n	8020d5a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020d48:	7af9      	ldrb	r1, [r7, #11]
 8020d4a:	233a      	movs	r3, #58	; 0x3a
 8020d4c:	2202      	movs	r2, #2
 8020d4e:	68f8      	ldr	r0, [r7, #12]
 8020d50:	f7ff fe3b 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020d54:	f04f 33ff 	mov.w	r3, #4294967295
 8020d58:	e05e      	b.n	8020e18 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	3302      	adds	r3, #2
 8020d5e:	781b      	ldrb	r3, [r3, #0]
 8020d60:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	3303      	adds	r3, #3
 8020d66:	781b      	ldrb	r3, [r3, #0]
 8020d68:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020d6a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	3304      	adds	r3, #4
 8020d70:	781b      	ldrb	r3, [r3, #0]
 8020d72:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020d74:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020d76:	687a      	ldr	r2, [r7, #4]
 8020d78:	3205      	adds	r2, #5
 8020d7a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020d7c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020d7e:	697b      	ldr	r3, [r7, #20]
 8020d80:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	3306      	adds	r3, #6
 8020d88:	781b      	ldrb	r3, [r3, #0]
 8020d8a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	3307      	adds	r3, #7
 8020d90:	781b      	ldrb	r3, [r3, #0]
 8020d92:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020d94:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	3308      	adds	r3, #8
 8020d9a:	781b      	ldrb	r3, [r3, #0]
 8020d9c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020d9e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020da0:	687a      	ldr	r2, [r7, #4]
 8020da2:	3209      	adds	r2, #9
 8020da4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020da6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020da8:	697b      	ldr	r3, [r7, #20]
 8020daa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020dae:	697b      	ldr	r3, [r7, #20]
 8020db0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020db4:	697b      	ldr	r3, [r7, #20]
 8020db6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020dba:	7af9      	ldrb	r1, [r7, #11]
 8020dbc:	68f8      	ldr	r0, [r7, #12]
 8020dbe:	f000 fa28 	bl	8021212 <SCSI_CheckAddressRange>
 8020dc2:	4603      	mov	r3, r0
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	da02      	bge.n	8020dce <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dcc:	e024      	b.n	8020e18 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020dce:	697b      	ldr	r3, [r7, #20]
 8020dd0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020dd4:	697b      	ldr	r3, [r7, #20]
 8020dd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020dda:	6979      	ldr	r1, [r7, #20]
 8020ddc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020de0:	fb01 f303 	mul.w	r3, r1, r3
 8020de4:	429a      	cmp	r2, r3
 8020de6:	d00a      	beq.n	8020dfe <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020dee:	2320      	movs	r3, #32
 8020df0:	2205      	movs	r2, #5
 8020df2:	68f8      	ldr	r0, [r7, #12]
 8020df4:	f7ff fde9 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020df8:	f04f 33ff 	mov.w	r3, #4294967295
 8020dfc:	e00c      	b.n	8020e18 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020dfe:	697b      	ldr	r3, [r7, #20]
 8020e00:	2202      	movs	r2, #2
 8020e02:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020e04:	697b      	ldr	r3, [r7, #20]
 8020e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020e0a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020e0c:	7afb      	ldrb	r3, [r7, #11]
 8020e0e:	4619      	mov	r1, r3
 8020e10:	68f8      	ldr	r0, [r7, #12]
 8020e12:	f000 fa2b 	bl	802126c <SCSI_ProcessRead>
 8020e16:	4603      	mov	r3, r0
}
 8020e18:	4618      	mov	r0, r3
 8020e1a:	3718      	adds	r7, #24
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}

08020e20 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020e20:	b580      	push	{r7, lr}
 8020e22:	b086      	sub	sp, #24
 8020e24:	af00      	add	r7, sp, #0
 8020e26:	60f8      	str	r0, [r7, #12]
 8020e28:	460b      	mov	r3, r1
 8020e2a:	607a      	str	r2, [r7, #4]
 8020e2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e34:	68fb      	ldr	r3, [r7, #12]
 8020e36:	32b0      	adds	r2, #176	; 0xb0
 8020e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e3c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020e3e:	697b      	ldr	r3, [r7, #20]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d102      	bne.n	8020e4a <SCSI_Write10+0x2a>
  {
    return -1;
 8020e44:	f04f 33ff 	mov.w	r3, #4294967295
 8020e48:	e0ba      	b.n	8020fc0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020e4a:	697b      	ldr	r3, [r7, #20]
 8020e4c:	7a1b      	ldrb	r3, [r3, #8]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	f040 80b0 	bne.w	8020fb4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020e54:	697b      	ldr	r3, [r7, #20]
 8020e56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d10a      	bne.n	8020e74 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020e5e:	697b      	ldr	r3, [r7, #20]
 8020e60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020e64:	2320      	movs	r3, #32
 8020e66:	2205      	movs	r2, #5
 8020e68:	68f8      	ldr	r0, [r7, #12]
 8020e6a:	f7ff fdae 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8020e72:	e0a5      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020e74:	697b      	ldr	r3, [r7, #20]
 8020e76:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020e7a:	b25b      	sxtb	r3, r3
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	da0a      	bge.n	8020e96 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020e80:	697b      	ldr	r3, [r7, #20]
 8020e82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020e86:	2320      	movs	r3, #32
 8020e88:	2205      	movs	r2, #5
 8020e8a:	68f8      	ldr	r0, [r7, #12]
 8020e8c:	f7ff fd9d 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020e90:	f04f 33ff 	mov.w	r3, #4294967295
 8020e94:	e094      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020e96:	68fb      	ldr	r3, [r7, #12]
 8020e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020e9c:	68fa      	ldr	r2, [r7, #12]
 8020e9e:	33b0      	adds	r3, #176	; 0xb0
 8020ea0:	009b      	lsls	r3, r3, #2
 8020ea2:	4413      	add	r3, r2
 8020ea4:	685b      	ldr	r3, [r3, #4]
 8020ea6:	689b      	ldr	r3, [r3, #8]
 8020ea8:	7afa      	ldrb	r2, [r7, #11]
 8020eaa:	4610      	mov	r0, r2
 8020eac:	4798      	blx	r3
 8020eae:	4603      	mov	r3, r0
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d008      	beq.n	8020ec6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020eb4:	7af9      	ldrb	r1, [r7, #11]
 8020eb6:	233a      	movs	r3, #58	; 0x3a
 8020eb8:	2202      	movs	r2, #2
 8020eba:	68f8      	ldr	r0, [r7, #12]
 8020ebc:	f7ff fd85 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8020ec4:	e07c      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8020ec6:	68fb      	ldr	r3, [r7, #12]
 8020ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020ecc:	68fa      	ldr	r2, [r7, #12]
 8020ece:	33b0      	adds	r3, #176	; 0xb0
 8020ed0:	009b      	lsls	r3, r3, #2
 8020ed2:	4413      	add	r3, r2
 8020ed4:	685b      	ldr	r3, [r3, #4]
 8020ed6:	68db      	ldr	r3, [r3, #12]
 8020ed8:	7afa      	ldrb	r2, [r7, #11]
 8020eda:	4610      	mov	r0, r2
 8020edc:	4798      	blx	r3
 8020ede:	4603      	mov	r3, r0
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d008      	beq.n	8020ef6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020ee4:	7af9      	ldrb	r1, [r7, #11]
 8020ee6:	2327      	movs	r3, #39	; 0x27
 8020ee8:	2202      	movs	r2, #2
 8020eea:	68f8      	ldr	r0, [r7, #12]
 8020eec:	f7ff fd6d 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8020ef4:	e064      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	3302      	adds	r3, #2
 8020efa:	781b      	ldrb	r3, [r3, #0]
 8020efc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	3303      	adds	r3, #3
 8020f02:	781b      	ldrb	r3, [r3, #0]
 8020f04:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020f06:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	3304      	adds	r3, #4
 8020f0c:	781b      	ldrb	r3, [r3, #0]
 8020f0e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020f10:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020f12:	687a      	ldr	r2, [r7, #4]
 8020f14:	3205      	adds	r2, #5
 8020f16:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020f18:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020f1a:	697b      	ldr	r3, [r7, #20]
 8020f1c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	3307      	adds	r3, #7
 8020f24:	781b      	ldrb	r3, [r3, #0]
 8020f26:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020f28:	687a      	ldr	r2, [r7, #4]
 8020f2a:	3208      	adds	r2, #8
 8020f2c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020f2e:	431a      	orrs	r2, r3
 8020f30:	697b      	ldr	r3, [r7, #20]
 8020f32:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020f36:	697b      	ldr	r3, [r7, #20]
 8020f38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020f3c:	697b      	ldr	r3, [r7, #20]
 8020f3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f42:	7af9      	ldrb	r1, [r7, #11]
 8020f44:	68f8      	ldr	r0, [r7, #12]
 8020f46:	f000 f964 	bl	8021212 <SCSI_CheckAddressRange>
 8020f4a:	4603      	mov	r3, r0
 8020f4c:	2b00      	cmp	r3, #0
 8020f4e:	da02      	bge.n	8020f56 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020f50:	f04f 33ff 	mov.w	r3, #4294967295
 8020f54:	e034      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020f56:	697b      	ldr	r3, [r7, #20]
 8020f58:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f5c:	697a      	ldr	r2, [r7, #20]
 8020f5e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020f62:	fb02 f303 	mul.w	r3, r2, r3
 8020f66:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020f6e:	693a      	ldr	r2, [r7, #16]
 8020f70:	429a      	cmp	r2, r3
 8020f72:	d00a      	beq.n	8020f8a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020f74:	697b      	ldr	r3, [r7, #20]
 8020f76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020f7a:	2320      	movs	r3, #32
 8020f7c:	2205      	movs	r2, #5
 8020f7e:	68f8      	ldr	r0, [r7, #12]
 8020f80:	f7ff fd23 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8020f84:	f04f 33ff 	mov.w	r3, #4294967295
 8020f88:	e01a      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020f8a:	693b      	ldr	r3, [r7, #16]
 8020f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f90:	bf28      	it	cs
 8020f92:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020f96:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020f98:	697b      	ldr	r3, [r7, #20]
 8020f9a:	2201      	movs	r2, #1
 8020f9c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8020f9e:	4b0a      	ldr	r3, [pc, #40]	; (8020fc8 <SCSI_Write10+0x1a8>)
 8020fa0:	7819      	ldrb	r1, [r3, #0]
 8020fa2:	697b      	ldr	r3, [r7, #20]
 8020fa4:	f103 0210 	add.w	r2, r3, #16
 8020fa8:	693b      	ldr	r3, [r7, #16]
 8020faa:	68f8      	ldr	r0, [r7, #12]
 8020fac:	f005 f92b 	bl	8026206 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	e005      	b.n	8020fc0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8020fb4:	7afb      	ldrb	r3, [r7, #11]
 8020fb6:	4619      	mov	r1, r3
 8020fb8:	68f8      	ldr	r0, [r7, #12]
 8020fba:	f000 f9dd 	bl	8021378 <SCSI_ProcessWrite>
 8020fbe:	4603      	mov	r3, r0
}
 8020fc0:	4618      	mov	r0, r3
 8020fc2:	3718      	adds	r7, #24
 8020fc4:	46bd      	mov	sp, r7
 8020fc6:	bd80      	pop	{r7, pc}
 8020fc8:	200005e7 	.word	0x200005e7

08020fcc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020fcc:	b580      	push	{r7, lr}
 8020fce:	b086      	sub	sp, #24
 8020fd0:	af00      	add	r7, sp, #0
 8020fd2:	60f8      	str	r0, [r7, #12]
 8020fd4:	460b      	mov	r3, r1
 8020fd6:	607a      	str	r2, [r7, #4]
 8020fd8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020fda:	68fb      	ldr	r3, [r7, #12]
 8020fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020fe0:	68fb      	ldr	r3, [r7, #12]
 8020fe2:	32b0      	adds	r2, #176	; 0xb0
 8020fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020fe8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020fea:	697b      	ldr	r3, [r7, #20]
 8020fec:	2b00      	cmp	r3, #0
 8020fee:	d102      	bne.n	8020ff6 <SCSI_Write12+0x2a>
  {
    return -1;
 8020ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8020ff4:	e0ca      	b.n	802118c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020ff6:	697b      	ldr	r3, [r7, #20]
 8020ff8:	7a1b      	ldrb	r3, [r3, #8]
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	f040 80c0 	bne.w	8021180 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8021000:	697b      	ldr	r3, [r7, #20]
 8021002:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8021006:	2b00      	cmp	r3, #0
 8021008:	d10a      	bne.n	8021020 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802100a:	697b      	ldr	r3, [r7, #20]
 802100c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8021010:	2320      	movs	r3, #32
 8021012:	2205      	movs	r2, #5
 8021014:	68f8      	ldr	r0, [r7, #12]
 8021016:	f7ff fcd8 	bl	80209ca <SCSI_SenseCode>
      return -1;
 802101a:	f04f 33ff 	mov.w	r3, #4294967295
 802101e:	e0b5      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8021020:	697b      	ldr	r3, [r7, #20]
 8021022:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8021026:	b25b      	sxtb	r3, r3
 8021028:	2b00      	cmp	r3, #0
 802102a:	da0a      	bge.n	8021042 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802102c:	697b      	ldr	r3, [r7, #20]
 802102e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8021032:	2320      	movs	r3, #32
 8021034:	2205      	movs	r2, #5
 8021036:	68f8      	ldr	r0, [r7, #12]
 8021038:	f7ff fcc7 	bl	80209ca <SCSI_SenseCode>
      return -1;
 802103c:	f04f 33ff 	mov.w	r3, #4294967295
 8021040:	e0a4      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8021048:	68fa      	ldr	r2, [r7, #12]
 802104a:	33b0      	adds	r3, #176	; 0xb0
 802104c:	009b      	lsls	r3, r3, #2
 802104e:	4413      	add	r3, r2
 8021050:	685b      	ldr	r3, [r3, #4]
 8021052:	689b      	ldr	r3, [r3, #8]
 8021054:	7afa      	ldrb	r2, [r7, #11]
 8021056:	4610      	mov	r0, r2
 8021058:	4798      	blx	r3
 802105a:	4603      	mov	r3, r0
 802105c:	2b00      	cmp	r3, #0
 802105e:	d00b      	beq.n	8021078 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8021060:	7af9      	ldrb	r1, [r7, #11]
 8021062:	233a      	movs	r3, #58	; 0x3a
 8021064:	2202      	movs	r2, #2
 8021066:	68f8      	ldr	r0, [r7, #12]
 8021068:	f7ff fcaf 	bl	80209ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 802106c:	697b      	ldr	r3, [r7, #20]
 802106e:	2205      	movs	r2, #5
 8021070:	721a      	strb	r2, [r3, #8]
      return -1;
 8021072:	f04f 33ff 	mov.w	r3, #4294967295
 8021076:	e089      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802107e:	68fa      	ldr	r2, [r7, #12]
 8021080:	33b0      	adds	r3, #176	; 0xb0
 8021082:	009b      	lsls	r3, r3, #2
 8021084:	4413      	add	r3, r2
 8021086:	685b      	ldr	r3, [r3, #4]
 8021088:	68db      	ldr	r3, [r3, #12]
 802108a:	7afa      	ldrb	r2, [r7, #11]
 802108c:	4610      	mov	r0, r2
 802108e:	4798      	blx	r3
 8021090:	4603      	mov	r3, r0
 8021092:	2b00      	cmp	r3, #0
 8021094:	d00b      	beq.n	80210ae <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8021096:	7af9      	ldrb	r1, [r7, #11]
 8021098:	2327      	movs	r3, #39	; 0x27
 802109a:	2202      	movs	r2, #2
 802109c:	68f8      	ldr	r0, [r7, #12]
 802109e:	f7ff fc94 	bl	80209ca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80210a2:	697b      	ldr	r3, [r7, #20]
 80210a4:	2205      	movs	r2, #5
 80210a6:	721a      	strb	r2, [r3, #8]
      return -1;
 80210a8:	f04f 33ff 	mov.w	r3, #4294967295
 80210ac:	e06e      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	3302      	adds	r3, #2
 80210b2:	781b      	ldrb	r3, [r3, #0]
 80210b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80210b6:	687b      	ldr	r3, [r7, #4]
 80210b8:	3303      	adds	r3, #3
 80210ba:	781b      	ldrb	r3, [r3, #0]
 80210bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80210be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	3304      	adds	r3, #4
 80210c4:	781b      	ldrb	r3, [r3, #0]
 80210c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80210c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80210ca:	687a      	ldr	r2, [r7, #4]
 80210cc:	3205      	adds	r2, #5
 80210ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80210d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80210d2:	697b      	ldr	r3, [r7, #20]
 80210d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	3306      	adds	r3, #6
 80210dc:	781b      	ldrb	r3, [r3, #0]
 80210de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	3307      	adds	r3, #7
 80210e4:	781b      	ldrb	r3, [r3, #0]
 80210e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80210e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	3308      	adds	r3, #8
 80210ee:	781b      	ldrb	r3, [r3, #0]
 80210f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80210f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80210f4:	687a      	ldr	r2, [r7, #4]
 80210f6:	3209      	adds	r2, #9
 80210f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80210fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80210fc:	697b      	ldr	r3, [r7, #20]
 80210fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8021102:	697b      	ldr	r3, [r7, #20]
 8021104:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021108:	697b      	ldr	r3, [r7, #20]
 802110a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802110e:	7af9      	ldrb	r1, [r7, #11]
 8021110:	68f8      	ldr	r0, [r7, #12]
 8021112:	f000 f87e 	bl	8021212 <SCSI_CheckAddressRange>
 8021116:	4603      	mov	r3, r0
 8021118:	2b00      	cmp	r3, #0
 802111a:	da02      	bge.n	8021122 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802111c:	f04f 33ff 	mov.w	r3, #4294967295
 8021120:	e034      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8021122:	697b      	ldr	r3, [r7, #20]
 8021124:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021128:	697a      	ldr	r2, [r7, #20]
 802112a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 802112e:	fb02 f303 	mul.w	r3, r2, r3
 8021132:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8021134:	697b      	ldr	r3, [r7, #20]
 8021136:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802113a:	693a      	ldr	r2, [r7, #16]
 802113c:	429a      	cmp	r2, r3
 802113e:	d00a      	beq.n	8021156 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8021140:	697b      	ldr	r3, [r7, #20]
 8021142:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8021146:	2320      	movs	r3, #32
 8021148:	2205      	movs	r2, #5
 802114a:	68f8      	ldr	r0, [r7, #12]
 802114c:	f7ff fc3d 	bl	80209ca <SCSI_SenseCode>
      return -1;
 8021150:	f04f 33ff 	mov.w	r3, #4294967295
 8021154:	e01a      	b.n	802118c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8021156:	693b      	ldr	r3, [r7, #16]
 8021158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802115c:	bf28      	it	cs
 802115e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8021162:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8021164:	697b      	ldr	r3, [r7, #20]
 8021166:	2201      	movs	r2, #1
 8021168:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 802116a:	4b0a      	ldr	r3, [pc, #40]	; (8021194 <SCSI_Write12+0x1c8>)
 802116c:	7819      	ldrb	r1, [r3, #0]
 802116e:	697b      	ldr	r3, [r7, #20]
 8021170:	f103 0210 	add.w	r2, r3, #16
 8021174:	693b      	ldr	r3, [r7, #16]
 8021176:	68f8      	ldr	r0, [r7, #12]
 8021178:	f005 f845 	bl	8026206 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 802117c:	2300      	movs	r3, #0
 802117e:	e005      	b.n	802118c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8021180:	7afb      	ldrb	r3, [r7, #11]
 8021182:	4619      	mov	r1, r3
 8021184:	68f8      	ldr	r0, [r7, #12]
 8021186:	f000 f8f7 	bl	8021378 <SCSI_ProcessWrite>
 802118a:	4603      	mov	r3, r0
}
 802118c:	4618      	mov	r0, r3
 802118e:	3718      	adds	r7, #24
 8021190:	46bd      	mov	sp, r7
 8021192:	bd80      	pop	{r7, pc}
 8021194:	200005e7 	.word	0x200005e7

08021198 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8021198:	b580      	push	{r7, lr}
 802119a:	b086      	sub	sp, #24
 802119c:	af00      	add	r7, sp, #0
 802119e:	60f8      	str	r0, [r7, #12]
 80211a0:	460b      	mov	r3, r1
 80211a2:	607a      	str	r2, [r7, #4]
 80211a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	32b0      	adds	r2, #176	; 0xb0
 80211b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80211b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80211b6:	697b      	ldr	r3, [r7, #20]
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d102      	bne.n	80211c2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80211bc:	f04f 33ff 	mov.w	r3, #4294967295
 80211c0:	e023      	b.n	802120a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80211c2:	687b      	ldr	r3, [r7, #4]
 80211c4:	3301      	adds	r3, #1
 80211c6:	781b      	ldrb	r3, [r3, #0]
 80211c8:	f003 0302 	and.w	r3, r3, #2
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d008      	beq.n	80211e2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80211d0:	7af9      	ldrb	r1, [r7, #11]
 80211d2:	2324      	movs	r3, #36	; 0x24
 80211d4:	2205      	movs	r2, #5
 80211d6:	68f8      	ldr	r0, [r7, #12]
 80211d8:	f7ff fbf7 	bl	80209ca <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80211dc:	f04f 33ff 	mov.w	r3, #4294967295
 80211e0:	e013      	b.n	802120a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80211e2:	697b      	ldr	r3, [r7, #20]
 80211e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80211e8:	697b      	ldr	r3, [r7, #20]
 80211ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80211ee:	7af9      	ldrb	r1, [r7, #11]
 80211f0:	68f8      	ldr	r0, [r7, #12]
 80211f2:	f000 f80e 	bl	8021212 <SCSI_CheckAddressRange>
 80211f6:	4603      	mov	r3, r0
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	da02      	bge.n	8021202 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80211fc:	f04f 33ff 	mov.w	r3, #4294967295
 8021200:	e003      	b.n	802120a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	2200      	movs	r2, #0
 8021206:	60da      	str	r2, [r3, #12]

  return 0;
 8021208:	2300      	movs	r3, #0
}
 802120a:	4618      	mov	r0, r3
 802120c:	3718      	adds	r7, #24
 802120e:	46bd      	mov	sp, r7
 8021210:	bd80      	pop	{r7, pc}

08021212 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8021212:	b580      	push	{r7, lr}
 8021214:	b086      	sub	sp, #24
 8021216:	af00      	add	r7, sp, #0
 8021218:	60f8      	str	r0, [r7, #12]
 802121a:	607a      	str	r2, [r7, #4]
 802121c:	603b      	str	r3, [r7, #0]
 802121e:	460b      	mov	r3, r1
 8021220:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8021222:	68fb      	ldr	r3, [r7, #12]
 8021224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	32b0      	adds	r2, #176	; 0xb0
 802122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021230:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8021232:	697b      	ldr	r3, [r7, #20]
 8021234:	2b00      	cmp	r3, #0
 8021236:	d102      	bne.n	802123e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8021238:	f04f 33ff 	mov.w	r3, #4294967295
 802123c:	e011      	b.n	8021262 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 802123e:	687a      	ldr	r2, [r7, #4]
 8021240:	683b      	ldr	r3, [r7, #0]
 8021242:	441a      	add	r2, r3
 8021244:	697b      	ldr	r3, [r7, #20]
 8021246:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802124a:	429a      	cmp	r2, r3
 802124c:	d908      	bls.n	8021260 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 802124e:	7af9      	ldrb	r1, [r7, #11]
 8021250:	2321      	movs	r3, #33	; 0x21
 8021252:	2205      	movs	r2, #5
 8021254:	68f8      	ldr	r0, [r7, #12]
 8021256:	f7ff fbb8 	bl	80209ca <SCSI_SenseCode>
    return -1;
 802125a:	f04f 33ff 	mov.w	r3, #4294967295
 802125e:	e000      	b.n	8021262 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8021260:	2300      	movs	r3, #0
}
 8021262:	4618      	mov	r0, r3
 8021264:	3718      	adds	r7, #24
 8021266:	46bd      	mov	sp, r7
 8021268:	bd80      	pop	{r7, pc}
	...

0802126c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 802126c:	b590      	push	{r4, r7, lr}
 802126e:	b085      	sub	sp, #20
 8021270:	af00      	add	r7, sp, #0
 8021272:	6078      	str	r0, [r7, #4]
 8021274:	460b      	mov	r3, r1
 8021276:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	32b0      	adds	r2, #176	; 0xb0
 8021282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021286:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8021288:	68fb      	ldr	r3, [r7, #12]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d102      	bne.n	8021294 <SCSI_ProcessRead+0x28>
  {
    return -1;
 802128e:	f04f 33ff 	mov.w	r3, #4294967295
 8021292:	e06a      	b.n	802136a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8021294:	68fb      	ldr	r3, [r7, #12]
 8021296:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802129a:	68fa      	ldr	r2, [r7, #12]
 802129c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80212a0:	fb02 f303 	mul.w	r3, r2, r3
 80212a4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80212a6:	68bb      	ldr	r3, [r7, #8]
 80212a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80212ac:	bf28      	it	cs
 80212ae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80212b2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80212ba:	687a      	ldr	r2, [r7, #4]
 80212bc:	33b0      	adds	r3, #176	; 0xb0
 80212be:	009b      	lsls	r3, r3, #2
 80212c0:	4413      	add	r3, r2
 80212c2:	685b      	ldr	r3, [r3, #4]
 80212c4:	691c      	ldr	r4, [r3, #16]
 80212c6:	68fb      	ldr	r3, [r7, #12]
 80212c8:	f103 0110 	add.w	r1, r3, #16
 80212cc:	68fb      	ldr	r3, [r7, #12]
 80212ce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80212d2:	68fb      	ldr	r3, [r7, #12]
 80212d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80212d8:	4618      	mov	r0, r3
 80212da:	68bb      	ldr	r3, [r7, #8]
 80212dc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80212e0:	b29b      	uxth	r3, r3
 80212e2:	78f8      	ldrb	r0, [r7, #3]
 80212e4:	47a0      	blx	r4
 80212e6:	4603      	mov	r3, r0
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	da08      	bge.n	80212fe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80212ec:	78f9      	ldrb	r1, [r7, #3]
 80212ee:	2311      	movs	r3, #17
 80212f0:	2204      	movs	r2, #4
 80212f2:	6878      	ldr	r0, [r7, #4]
 80212f4:	f7ff fb69 	bl	80209ca <SCSI_SenseCode>
    return -1;
 80212f8:	f04f 33ff 	mov.w	r3, #4294967295
 80212fc:	e035      	b.n	802136a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80212fe:	4b1d      	ldr	r3, [pc, #116]	; (8021374 <SCSI_ProcessRead+0x108>)
 8021300:	7819      	ldrb	r1, [r3, #0]
 8021302:	68fb      	ldr	r3, [r7, #12]
 8021304:	f103 0210 	add.w	r2, r3, #16
 8021308:	68bb      	ldr	r3, [r7, #8]
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f004 ff5a 	bl	80261c4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021316:	68fb      	ldr	r3, [r7, #12]
 8021318:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802131c:	4619      	mov	r1, r3
 802131e:	68bb      	ldr	r3, [r7, #8]
 8021320:	fbb3 f3f1 	udiv	r3, r3, r1
 8021324:	441a      	add	r2, r3
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 802132c:	68fb      	ldr	r3, [r7, #12]
 802132e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8021332:	68fb      	ldr	r3, [r7, #12]
 8021334:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021338:	4619      	mov	r1, r3
 802133a:	68bb      	ldr	r3, [r7, #8]
 802133c:	fbb3 f3f1 	udiv	r3, r3, r1
 8021340:	1ad2      	subs	r2, r2, r3
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8021348:	68fb      	ldr	r3, [r7, #12]
 802134a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 802134e:	68bb      	ldr	r3, [r7, #8]
 8021350:	1ad2      	subs	r2, r2, r3
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8021358:	68fb      	ldr	r3, [r7, #12]
 802135a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802135e:	2b00      	cmp	r3, #0
 8021360:	d102      	bne.n	8021368 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8021362:	68fb      	ldr	r3, [r7, #12]
 8021364:	2203      	movs	r2, #3
 8021366:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8021368:	2300      	movs	r3, #0
}
 802136a:	4618      	mov	r0, r3
 802136c:	3714      	adds	r7, #20
 802136e:	46bd      	mov	sp, r7
 8021370:	bd90      	pop	{r4, r7, pc}
 8021372:	bf00      	nop
 8021374:	200005e6 	.word	0x200005e6

08021378 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8021378:	b590      	push	{r4, r7, lr}
 802137a:	b085      	sub	sp, #20
 802137c:	af00      	add	r7, sp, #0
 802137e:	6078      	str	r0, [r7, #4]
 8021380:	460b      	mov	r3, r1
 8021382:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	32b0      	adds	r2, #176	; 0xb0
 802138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021392:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	2b00      	cmp	r3, #0
 8021398:	d102      	bne.n	80213a0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 802139a:	f04f 33ff 	mov.w	r3, #4294967295
 802139e:	e07a      	b.n	8021496 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80213a6:	68fa      	ldr	r2, [r7, #12]
 80213a8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80213ac:	fb02 f303 	mul.w	r3, r2, r3
 80213b0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80213b2:	68bb      	ldr	r3, [r7, #8]
 80213b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80213b8:	bf28      	it	cs
 80213ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80213be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80213c0:	687b      	ldr	r3, [r7, #4]
 80213c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80213c6:	687a      	ldr	r2, [r7, #4]
 80213c8:	33b0      	adds	r3, #176	; 0xb0
 80213ca:	009b      	lsls	r3, r3, #2
 80213cc:	4413      	add	r3, r2
 80213ce:	685b      	ldr	r3, [r3, #4]
 80213d0:	695c      	ldr	r4, [r3, #20]
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	f103 0110 	add.w	r1, r3, #16
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80213e4:	4618      	mov	r0, r3
 80213e6:	68bb      	ldr	r3, [r7, #8]
 80213e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80213ec:	b29b      	uxth	r3, r3
 80213ee:	78f8      	ldrb	r0, [r7, #3]
 80213f0:	47a0      	blx	r4
 80213f2:	4603      	mov	r3, r0
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	da08      	bge.n	802140a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80213f8:	78f9      	ldrb	r1, [r7, #3]
 80213fa:	2303      	movs	r3, #3
 80213fc:	2204      	movs	r2, #4
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f7ff fae3 	bl	80209ca <SCSI_SenseCode>
    return -1;
 8021404:	f04f 33ff 	mov.w	r3, #4294967295
 8021408:	e045      	b.n	8021496 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021416:	4619      	mov	r1, r3
 8021418:	68bb      	ldr	r3, [r7, #8]
 802141a:	fbb3 f3f1 	udiv	r3, r3, r1
 802141e:	441a      	add	r2, r3
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 802142c:	68fb      	ldr	r3, [r7, #12]
 802142e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021432:	4619      	mov	r1, r3
 8021434:	68bb      	ldr	r3, [r7, #8]
 8021436:	fbb3 f3f1 	udiv	r3, r3, r1
 802143a:	1ad2      	subs	r2, r2, r3
 802143c:	68fb      	ldr	r3, [r7, #12]
 802143e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8021448:	68bb      	ldr	r3, [r7, #8]
 802144a:	1ad2      	subs	r2, r2, r3
 802144c:	68fb      	ldr	r3, [r7, #12]
 802144e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021458:	2b00      	cmp	r3, #0
 802145a:	d104      	bne.n	8021466 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 802145c:	2100      	movs	r1, #0
 802145e:	6878      	ldr	r0, [r7, #4]
 8021460:	f7fe fd14 	bl	801fe8c <MSC_BOT_SendCSW>
 8021464:	e016      	b.n	8021494 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802146c:	68fa      	ldr	r2, [r7, #12]
 802146e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8021472:	fb02 f303 	mul.w	r3, r2, r3
 8021476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802147a:	bf28      	it	cs
 802147c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8021480:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8021482:	4b07      	ldr	r3, [pc, #28]	; (80214a0 <SCSI_ProcessWrite+0x128>)
 8021484:	7819      	ldrb	r1, [r3, #0]
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	f103 0210 	add.w	r2, r3, #16
 802148c:	68bb      	ldr	r3, [r7, #8]
 802148e:	6878      	ldr	r0, [r7, #4]
 8021490:	f004 feb9 	bl	8026206 <USBD_LL_PrepareReceive>
  }

  return 0;
 8021494:	2300      	movs	r3, #0
}
 8021496:	4618      	mov	r0, r3
 8021498:	3714      	adds	r7, #20
 802149a:	46bd      	mov	sp, r7
 802149c:	bd90      	pop	{r4, r7, pc}
 802149e:	bf00      	nop
 80214a0:	200005e7 	.word	0x200005e7

080214a4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80214a4:	b480      	push	{r7}
 80214a6:	b087      	sub	sp, #28
 80214a8:	af00      	add	r7, sp, #0
 80214aa:	60f8      	str	r0, [r7, #12]
 80214ac:	60b9      	str	r1, [r7, #8]
 80214ae:	4613      	mov	r3, r2
 80214b0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80214b2:	88fb      	ldrh	r3, [r7, #6]
 80214b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	d102      	bne.n	80214c2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80214bc:	f04f 33ff 	mov.w	r3, #4294967295
 80214c0:	e013      	b.n	80214ea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80214c2:	8afa      	ldrh	r2, [r7, #22]
 80214c4:	68fb      	ldr	r3, [r7, #12]
 80214c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80214c8:	e00b      	b.n	80214e2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80214ca:	8afb      	ldrh	r3, [r7, #22]
 80214cc:	3b01      	subs	r3, #1
 80214ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80214d0:	8afb      	ldrh	r3, [r7, #22]
 80214d2:	68ba      	ldr	r2, [r7, #8]
 80214d4:	441a      	add	r2, r3
 80214d6:	8afb      	ldrh	r3, [r7, #22]
 80214d8:	7811      	ldrb	r1, [r2, #0]
 80214da:	68fa      	ldr	r2, [r7, #12]
 80214dc:	4413      	add	r3, r2
 80214de:	460a      	mov	r2, r1
 80214e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80214e2:	8afb      	ldrh	r3, [r7, #22]
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	d1f0      	bne.n	80214ca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80214e8:	2300      	movs	r3, #0
}
 80214ea:	4618      	mov	r0, r3
 80214ec:	371c      	adds	r7, #28
 80214ee:	46bd      	mov	sp, r7
 80214f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f4:	4770      	bx	lr

080214f6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80214f6:	b580      	push	{r7, lr}
 80214f8:	b086      	sub	sp, #24
 80214fa:	af00      	add	r7, sp, #0
 80214fc:	60f8      	str	r0, [r7, #12]
 80214fe:	60b9      	str	r1, [r7, #8]
 8021500:	4613      	mov	r3, r2
 8021502:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	2b00      	cmp	r3, #0
 8021508:	d101      	bne.n	802150e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802150a:	2303      	movs	r3, #3
 802150c:	e01f      	b.n	802154e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	2200      	movs	r2, #0
 8021512:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8021516:	68fb      	ldr	r3, [r7, #12]
 8021518:	2200      	movs	r2, #0
 802151a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	2200      	movs	r2, #0
 8021522:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021526:	68bb      	ldr	r3, [r7, #8]
 8021528:	2b00      	cmp	r3, #0
 802152a:	d003      	beq.n	8021534 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802152c:	68fb      	ldr	r3, [r7, #12]
 802152e:	68ba      	ldr	r2, [r7, #8]
 8021530:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021534:	68fb      	ldr	r3, [r7, #12]
 8021536:	2201      	movs	r2, #1
 8021538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802153c:	68fb      	ldr	r3, [r7, #12]
 802153e:	79fa      	ldrb	r2, [r7, #7]
 8021540:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8021542:	68f8      	ldr	r0, [r7, #12]
 8021544:	f004 fcea 	bl	8025f1c <USBD_LL_Init>
 8021548:	4603      	mov	r3, r0
 802154a:	75fb      	strb	r3, [r7, #23]

  return ret;
 802154c:	7dfb      	ldrb	r3, [r7, #23]
}
 802154e:	4618      	mov	r0, r3
 8021550:	3718      	adds	r7, #24
 8021552:	46bd      	mov	sp, r7
 8021554:	bd80      	pop	{r7, pc}

08021556 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021556:	b580      	push	{r7, lr}
 8021558:	b084      	sub	sp, #16
 802155a:	af00      	add	r7, sp, #0
 802155c:	6078      	str	r0, [r7, #4]
 802155e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021560:	2300      	movs	r3, #0
 8021562:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8021564:	683b      	ldr	r3, [r7, #0]
 8021566:	2b00      	cmp	r3, #0
 8021568:	d101      	bne.n	802156e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802156a:	2303      	movs	r3, #3
 802156c:	e025      	b.n	80215ba <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	683a      	ldr	r2, [r7, #0]
 8021572:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	32ae      	adds	r2, #174	; 0xae
 8021580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021586:	2b00      	cmp	r3, #0
 8021588:	d00f      	beq.n	80215aa <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802158a:	687b      	ldr	r3, [r7, #4]
 802158c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	32ae      	adds	r2, #174	; 0xae
 8021594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802159a:	f107 020e 	add.w	r2, r7, #14
 802159e:	4610      	mov	r0, r2
 80215a0:	4798      	blx	r3
 80215a2:	4602      	mov	r2, r0
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80215b0:	1c5a      	adds	r2, r3, #1
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80215b8:	2300      	movs	r3, #0
}
 80215ba:	4618      	mov	r0, r3
 80215bc:	3710      	adds	r7, #16
 80215be:	46bd      	mov	sp, r7
 80215c0:	bd80      	pop	{r7, pc}

080215c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80215c2:	b580      	push	{r7, lr}
 80215c4:	b082      	sub	sp, #8
 80215c6:	af00      	add	r7, sp, #0
 80215c8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80215ca:	6878      	ldr	r0, [r7, #4]
 80215cc:	f004 fcf2 	bl	8025fb4 <USBD_LL_Start>
 80215d0:	4603      	mov	r3, r0
}
 80215d2:	4618      	mov	r0, r3
 80215d4:	3708      	adds	r7, #8
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd80      	pop	{r7, pc}

080215da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80215da:	b480      	push	{r7}
 80215dc:	b083      	sub	sp, #12
 80215de:	af00      	add	r7, sp, #0
 80215e0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80215e2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80215e4:	4618      	mov	r0, r3
 80215e6:	370c      	adds	r7, #12
 80215e8:	46bd      	mov	sp, r7
 80215ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ee:	4770      	bx	lr

080215f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80215f0:	b580      	push	{r7, lr}
 80215f2:	b084      	sub	sp, #16
 80215f4:	af00      	add	r7, sp, #0
 80215f6:	6078      	str	r0, [r7, #4]
 80215f8:	460b      	mov	r3, r1
 80215fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80215fc:	2300      	movs	r3, #0
 80215fe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021606:	2b00      	cmp	r3, #0
 8021608:	d009      	beq.n	802161e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	78fa      	ldrb	r2, [r7, #3]
 8021614:	4611      	mov	r1, r2
 8021616:	6878      	ldr	r0, [r7, #4]
 8021618:	4798      	blx	r3
 802161a:	4603      	mov	r3, r0
 802161c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021620:	4618      	mov	r0, r3
 8021622:	3710      	adds	r7, #16
 8021624:	46bd      	mov	sp, r7
 8021626:	bd80      	pop	{r7, pc}

08021628 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021628:	b580      	push	{r7, lr}
 802162a:	b084      	sub	sp, #16
 802162c:	af00      	add	r7, sp, #0
 802162e:	6078      	str	r0, [r7, #4]
 8021630:	460b      	mov	r3, r1
 8021632:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8021634:	2300      	movs	r3, #0
 8021636:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802163e:	685b      	ldr	r3, [r3, #4]
 8021640:	78fa      	ldrb	r2, [r7, #3]
 8021642:	4611      	mov	r1, r2
 8021644:	6878      	ldr	r0, [r7, #4]
 8021646:	4798      	blx	r3
 8021648:	4603      	mov	r3, r0
 802164a:	2b00      	cmp	r3, #0
 802164c:	d001      	beq.n	8021652 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802164e:	2303      	movs	r3, #3
 8021650:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8021652:	7bfb      	ldrb	r3, [r7, #15]
}
 8021654:	4618      	mov	r0, r3
 8021656:	3710      	adds	r7, #16
 8021658:	46bd      	mov	sp, r7
 802165a:	bd80      	pop	{r7, pc}

0802165c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802166c:	6839      	ldr	r1, [r7, #0]
 802166e:	4618      	mov	r0, r3
 8021670:	f001 f933 	bl	80228da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	2201      	movs	r2, #1
 8021678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8021682:	461a      	mov	r2, r3
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8021690:	f003 031f 	and.w	r3, r3, #31
 8021694:	2b02      	cmp	r3, #2
 8021696:	d01a      	beq.n	80216ce <USBD_LL_SetupStage+0x72>
 8021698:	2b02      	cmp	r3, #2
 802169a:	d822      	bhi.n	80216e2 <USBD_LL_SetupStage+0x86>
 802169c:	2b00      	cmp	r3, #0
 802169e:	d002      	beq.n	80216a6 <USBD_LL_SetupStage+0x4a>
 80216a0:	2b01      	cmp	r3, #1
 80216a2:	d00a      	beq.n	80216ba <USBD_LL_SetupStage+0x5e>
 80216a4:	e01d      	b.n	80216e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80216ac:	4619      	mov	r1, r3
 80216ae:	6878      	ldr	r0, [r7, #4]
 80216b0:	f000 fb60 	bl	8021d74 <USBD_StdDevReq>
 80216b4:	4603      	mov	r3, r0
 80216b6:	73fb      	strb	r3, [r7, #15]
      break;
 80216b8:	e020      	b.n	80216fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80216c0:	4619      	mov	r1, r3
 80216c2:	6878      	ldr	r0, [r7, #4]
 80216c4:	f000 fbc8 	bl	8021e58 <USBD_StdItfReq>
 80216c8:	4603      	mov	r3, r0
 80216ca:	73fb      	strb	r3, [r7, #15]
      break;
 80216cc:	e016      	b.n	80216fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80216d4:	4619      	mov	r1, r3
 80216d6:	6878      	ldr	r0, [r7, #4]
 80216d8:	f000 fc2a 	bl	8021f30 <USBD_StdEPReq>
 80216dc:	4603      	mov	r3, r0
 80216de:	73fb      	strb	r3, [r7, #15]
      break;
 80216e0:	e00c      	b.n	80216fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80216e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80216ec:	b2db      	uxtb	r3, r3
 80216ee:	4619      	mov	r1, r3
 80216f0:	6878      	ldr	r0, [r7, #4]
 80216f2:	f004 fcde 	bl	80260b2 <USBD_LL_StallEP>
 80216f6:	4603      	mov	r3, r0
 80216f8:	73fb      	strb	r3, [r7, #15]
      break;
 80216fa:	bf00      	nop
  }

  return ret;
 80216fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	3710      	adds	r7, #16
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}

08021706 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021706:	b580      	push	{r7, lr}
 8021708:	b086      	sub	sp, #24
 802170a:	af00      	add	r7, sp, #0
 802170c:	60f8      	str	r0, [r7, #12]
 802170e:	460b      	mov	r3, r1
 8021710:	607a      	str	r2, [r7, #4]
 8021712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8021714:	2300      	movs	r3, #0
 8021716:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8021718:	7afb      	ldrb	r3, [r7, #11]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d16e      	bne.n	80217fc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8021724:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021726:	68fb      	ldr	r3, [r7, #12]
 8021728:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802172c:	2b03      	cmp	r3, #3
 802172e:	f040 8098 	bne.w	8021862 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8021732:	693b      	ldr	r3, [r7, #16]
 8021734:	689a      	ldr	r2, [r3, #8]
 8021736:	693b      	ldr	r3, [r7, #16]
 8021738:	68db      	ldr	r3, [r3, #12]
 802173a:	429a      	cmp	r2, r3
 802173c:	d913      	bls.n	8021766 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802173e:	693b      	ldr	r3, [r7, #16]
 8021740:	689a      	ldr	r2, [r3, #8]
 8021742:	693b      	ldr	r3, [r7, #16]
 8021744:	68db      	ldr	r3, [r3, #12]
 8021746:	1ad2      	subs	r2, r2, r3
 8021748:	693b      	ldr	r3, [r7, #16]
 802174a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802174c:	693b      	ldr	r3, [r7, #16]
 802174e:	68da      	ldr	r2, [r3, #12]
 8021750:	693b      	ldr	r3, [r7, #16]
 8021752:	689b      	ldr	r3, [r3, #8]
 8021754:	4293      	cmp	r3, r2
 8021756:	bf28      	it	cs
 8021758:	4613      	movcs	r3, r2
 802175a:	461a      	mov	r2, r3
 802175c:	6879      	ldr	r1, [r7, #4]
 802175e:	68f8      	ldr	r0, [r7, #12]
 8021760:	f001 f992 	bl	8022a88 <USBD_CtlContinueRx>
 8021764:	e07d      	b.n	8021862 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802176c:	f003 031f 	and.w	r3, r3, #31
 8021770:	2b02      	cmp	r3, #2
 8021772:	d014      	beq.n	802179e <USBD_LL_DataOutStage+0x98>
 8021774:	2b02      	cmp	r3, #2
 8021776:	d81d      	bhi.n	80217b4 <USBD_LL_DataOutStage+0xae>
 8021778:	2b00      	cmp	r3, #0
 802177a:	d002      	beq.n	8021782 <USBD_LL_DataOutStage+0x7c>
 802177c:	2b01      	cmp	r3, #1
 802177e:	d003      	beq.n	8021788 <USBD_LL_DataOutStage+0x82>
 8021780:	e018      	b.n	80217b4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8021782:	2300      	movs	r3, #0
 8021784:	75bb      	strb	r3, [r7, #22]
            break;
 8021786:	e018      	b.n	80217ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802178e:	b2db      	uxtb	r3, r3
 8021790:	4619      	mov	r1, r3
 8021792:	68f8      	ldr	r0, [r7, #12]
 8021794:	f000 fa5e 	bl	8021c54 <USBD_CoreFindIF>
 8021798:	4603      	mov	r3, r0
 802179a:	75bb      	strb	r3, [r7, #22]
            break;
 802179c:	e00d      	b.n	80217ba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80217a4:	b2db      	uxtb	r3, r3
 80217a6:	4619      	mov	r1, r3
 80217a8:	68f8      	ldr	r0, [r7, #12]
 80217aa:	f000 fa60 	bl	8021c6e <USBD_CoreFindEP>
 80217ae:	4603      	mov	r3, r0
 80217b0:	75bb      	strb	r3, [r7, #22]
            break;
 80217b2:	e002      	b.n	80217ba <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80217b4:	2300      	movs	r3, #0
 80217b6:	75bb      	strb	r3, [r7, #22]
            break;
 80217b8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80217ba:	7dbb      	ldrb	r3, [r7, #22]
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d119      	bne.n	80217f4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80217c0:	68fb      	ldr	r3, [r7, #12]
 80217c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217c6:	b2db      	uxtb	r3, r3
 80217c8:	2b03      	cmp	r3, #3
 80217ca:	d113      	bne.n	80217f4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80217cc:	7dba      	ldrb	r2, [r7, #22]
 80217ce:	68fb      	ldr	r3, [r7, #12]
 80217d0:	32ae      	adds	r2, #174	; 0xae
 80217d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80217d6:	691b      	ldr	r3, [r3, #16]
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d00b      	beq.n	80217f4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80217dc:	7dba      	ldrb	r2, [r7, #22]
 80217de:	68fb      	ldr	r3, [r7, #12]
 80217e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80217e4:	7dba      	ldrb	r2, [r7, #22]
 80217e6:	68fb      	ldr	r3, [r7, #12]
 80217e8:	32ae      	adds	r2, #174	; 0xae
 80217ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80217ee:	691b      	ldr	r3, [r3, #16]
 80217f0:	68f8      	ldr	r0, [r7, #12]
 80217f2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80217f4:	68f8      	ldr	r0, [r7, #12]
 80217f6:	f001 f958 	bl	8022aaa <USBD_CtlSendStatus>
 80217fa:	e032      	b.n	8021862 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80217fc:	7afb      	ldrb	r3, [r7, #11]
 80217fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021802:	b2db      	uxtb	r3, r3
 8021804:	4619      	mov	r1, r3
 8021806:	68f8      	ldr	r0, [r7, #12]
 8021808:	f000 fa31 	bl	8021c6e <USBD_CoreFindEP>
 802180c:	4603      	mov	r3, r0
 802180e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021810:	7dbb      	ldrb	r3, [r7, #22]
 8021812:	2bff      	cmp	r3, #255	; 0xff
 8021814:	d025      	beq.n	8021862 <USBD_LL_DataOutStage+0x15c>
 8021816:	7dbb      	ldrb	r3, [r7, #22]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d122      	bne.n	8021862 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802181c:	68fb      	ldr	r3, [r7, #12]
 802181e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021822:	b2db      	uxtb	r3, r3
 8021824:	2b03      	cmp	r3, #3
 8021826:	d117      	bne.n	8021858 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8021828:	7dba      	ldrb	r2, [r7, #22]
 802182a:	68fb      	ldr	r3, [r7, #12]
 802182c:	32ae      	adds	r2, #174	; 0xae
 802182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021832:	699b      	ldr	r3, [r3, #24]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d00f      	beq.n	8021858 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8021838:	7dba      	ldrb	r2, [r7, #22]
 802183a:	68fb      	ldr	r3, [r7, #12]
 802183c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8021840:	7dba      	ldrb	r2, [r7, #22]
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	32ae      	adds	r2, #174	; 0xae
 8021846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802184a:	699b      	ldr	r3, [r3, #24]
 802184c:	7afa      	ldrb	r2, [r7, #11]
 802184e:	4611      	mov	r1, r2
 8021850:	68f8      	ldr	r0, [r7, #12]
 8021852:	4798      	blx	r3
 8021854:	4603      	mov	r3, r0
 8021856:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8021858:	7dfb      	ldrb	r3, [r7, #23]
 802185a:	2b00      	cmp	r3, #0
 802185c:	d001      	beq.n	8021862 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802185e:	7dfb      	ldrb	r3, [r7, #23]
 8021860:	e000      	b.n	8021864 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8021862:	2300      	movs	r3, #0
}
 8021864:	4618      	mov	r0, r3
 8021866:	3718      	adds	r7, #24
 8021868:	46bd      	mov	sp, r7
 802186a:	bd80      	pop	{r7, pc}

0802186c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b086      	sub	sp, #24
 8021870:	af00      	add	r7, sp, #0
 8021872:	60f8      	str	r0, [r7, #12]
 8021874:	460b      	mov	r3, r1
 8021876:	607a      	str	r2, [r7, #4]
 8021878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802187a:	7afb      	ldrb	r3, [r7, #11]
 802187c:	2b00      	cmp	r3, #0
 802187e:	d16f      	bne.n	8021960 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	3314      	adds	r3, #20
 8021884:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802188c:	2b02      	cmp	r3, #2
 802188e:	d15a      	bne.n	8021946 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8021890:	693b      	ldr	r3, [r7, #16]
 8021892:	689a      	ldr	r2, [r3, #8]
 8021894:	693b      	ldr	r3, [r7, #16]
 8021896:	68db      	ldr	r3, [r3, #12]
 8021898:	429a      	cmp	r2, r3
 802189a:	d914      	bls.n	80218c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802189c:	693b      	ldr	r3, [r7, #16]
 802189e:	689a      	ldr	r2, [r3, #8]
 80218a0:	693b      	ldr	r3, [r7, #16]
 80218a2:	68db      	ldr	r3, [r3, #12]
 80218a4:	1ad2      	subs	r2, r2, r3
 80218a6:	693b      	ldr	r3, [r7, #16]
 80218a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80218aa:	693b      	ldr	r3, [r7, #16]
 80218ac:	689b      	ldr	r3, [r3, #8]
 80218ae:	461a      	mov	r2, r3
 80218b0:	6879      	ldr	r1, [r7, #4]
 80218b2:	68f8      	ldr	r0, [r7, #12]
 80218b4:	f001 f8d7 	bl	8022a66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80218b8:	2300      	movs	r3, #0
 80218ba:	2200      	movs	r2, #0
 80218bc:	2100      	movs	r1, #0
 80218be:	68f8      	ldr	r0, [r7, #12]
 80218c0:	f004 fca1 	bl	8026206 <USBD_LL_PrepareReceive>
 80218c4:	e03f      	b.n	8021946 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80218c6:	693b      	ldr	r3, [r7, #16]
 80218c8:	68da      	ldr	r2, [r3, #12]
 80218ca:	693b      	ldr	r3, [r7, #16]
 80218cc:	689b      	ldr	r3, [r3, #8]
 80218ce:	429a      	cmp	r2, r3
 80218d0:	d11c      	bne.n	802190c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80218d2:	693b      	ldr	r3, [r7, #16]
 80218d4:	685a      	ldr	r2, [r3, #4]
 80218d6:	693b      	ldr	r3, [r7, #16]
 80218d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80218da:	429a      	cmp	r2, r3
 80218dc:	d316      	bcc.n	802190c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80218de:	693b      	ldr	r3, [r7, #16]
 80218e0:	685a      	ldr	r2, [r3, #4]
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80218e8:	429a      	cmp	r2, r3
 80218ea:	d20f      	bcs.n	802190c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80218ec:	2200      	movs	r2, #0
 80218ee:	2100      	movs	r1, #0
 80218f0:	68f8      	ldr	r0, [r7, #12]
 80218f2:	f001 f8b8 	bl	8022a66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	2200      	movs	r2, #0
 80218fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80218fe:	2300      	movs	r3, #0
 8021900:	2200      	movs	r2, #0
 8021902:	2100      	movs	r1, #0
 8021904:	68f8      	ldr	r0, [r7, #12]
 8021906:	f004 fc7e 	bl	8026206 <USBD_LL_PrepareReceive>
 802190a:	e01c      	b.n	8021946 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021912:	b2db      	uxtb	r3, r3
 8021914:	2b03      	cmp	r3, #3
 8021916:	d10f      	bne.n	8021938 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8021918:	68fb      	ldr	r3, [r7, #12]
 802191a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802191e:	68db      	ldr	r3, [r3, #12]
 8021920:	2b00      	cmp	r3, #0
 8021922:	d009      	beq.n	8021938 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	2200      	movs	r2, #0
 8021928:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802192c:	68fb      	ldr	r3, [r7, #12]
 802192e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021932:	68db      	ldr	r3, [r3, #12]
 8021934:	68f8      	ldr	r0, [r7, #12]
 8021936:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8021938:	2180      	movs	r1, #128	; 0x80
 802193a:	68f8      	ldr	r0, [r7, #12]
 802193c:	f004 fbb9 	bl	80260b2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021940:	68f8      	ldr	r0, [r7, #12]
 8021942:	f001 f8c5 	bl	8022ad0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8021946:	68fb      	ldr	r3, [r7, #12]
 8021948:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802194c:	2b00      	cmp	r3, #0
 802194e:	d03a      	beq.n	80219c6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8021950:	68f8      	ldr	r0, [r7, #12]
 8021952:	f7ff fe42 	bl	80215da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8021956:	68fb      	ldr	r3, [r7, #12]
 8021958:	2200      	movs	r2, #0
 802195a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802195e:	e032      	b.n	80219c6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8021960:	7afb      	ldrb	r3, [r7, #11]
 8021962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8021966:	b2db      	uxtb	r3, r3
 8021968:	4619      	mov	r1, r3
 802196a:	68f8      	ldr	r0, [r7, #12]
 802196c:	f000 f97f 	bl	8021c6e <USBD_CoreFindEP>
 8021970:	4603      	mov	r3, r0
 8021972:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021974:	7dfb      	ldrb	r3, [r7, #23]
 8021976:	2bff      	cmp	r3, #255	; 0xff
 8021978:	d025      	beq.n	80219c6 <USBD_LL_DataInStage+0x15a>
 802197a:	7dfb      	ldrb	r3, [r7, #23]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d122      	bne.n	80219c6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021980:	68fb      	ldr	r3, [r7, #12]
 8021982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021986:	b2db      	uxtb	r3, r3
 8021988:	2b03      	cmp	r3, #3
 802198a:	d11c      	bne.n	80219c6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802198c:	7dfa      	ldrb	r2, [r7, #23]
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	32ae      	adds	r2, #174	; 0xae
 8021992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021996:	695b      	ldr	r3, [r3, #20]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d014      	beq.n	80219c6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802199c:	7dfa      	ldrb	r2, [r7, #23]
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80219a4:	7dfa      	ldrb	r2, [r7, #23]
 80219a6:	68fb      	ldr	r3, [r7, #12]
 80219a8:	32ae      	adds	r2, #174	; 0xae
 80219aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80219ae:	695b      	ldr	r3, [r3, #20]
 80219b0:	7afa      	ldrb	r2, [r7, #11]
 80219b2:	4611      	mov	r1, r2
 80219b4:	68f8      	ldr	r0, [r7, #12]
 80219b6:	4798      	blx	r3
 80219b8:	4603      	mov	r3, r0
 80219ba:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80219bc:	7dbb      	ldrb	r3, [r7, #22]
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d001      	beq.n	80219c6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80219c2:	7dbb      	ldrb	r3, [r7, #22]
 80219c4:	e000      	b.n	80219c8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80219c6:	2300      	movs	r3, #0
}
 80219c8:	4618      	mov	r0, r3
 80219ca:	3718      	adds	r7, #24
 80219cc:	46bd      	mov	sp, r7
 80219ce:	bd80      	pop	{r7, pc}

080219d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80219d0:	b580      	push	{r7, lr}
 80219d2:	b084      	sub	sp, #16
 80219d4:	af00      	add	r7, sp, #0
 80219d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80219d8:	2300      	movs	r3, #0
 80219da:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	2201      	movs	r2, #1
 80219e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	2200      	movs	r2, #0
 80219e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	2200      	movs	r2, #0
 80219f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	2200      	movs	r2, #0
 80219f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	2200      	movs	r2, #0
 80219fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d014      	beq.n	8021a36 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a12:	685b      	ldr	r3, [r3, #4]
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d00e      	beq.n	8021a36 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a1e:	685b      	ldr	r3, [r3, #4]
 8021a20:	687a      	ldr	r2, [r7, #4]
 8021a22:	6852      	ldr	r2, [r2, #4]
 8021a24:	b2d2      	uxtb	r2, r2
 8021a26:	4611      	mov	r1, r2
 8021a28:	6878      	ldr	r0, [r7, #4]
 8021a2a:	4798      	blx	r3
 8021a2c:	4603      	mov	r3, r0
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d001      	beq.n	8021a36 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8021a32:	2303      	movs	r3, #3
 8021a34:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021a36:	2340      	movs	r3, #64	; 0x40
 8021a38:	2200      	movs	r2, #0
 8021a3a:	2100      	movs	r1, #0
 8021a3c:	6878      	ldr	r0, [r7, #4]
 8021a3e:	f004 fad4 	bl	8025fea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	2201      	movs	r2, #1
 8021a46:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	2240      	movs	r2, #64	; 0x40
 8021a4e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021a52:	2340      	movs	r3, #64	; 0x40
 8021a54:	2200      	movs	r2, #0
 8021a56:	2180      	movs	r1, #128	; 0x80
 8021a58:	6878      	ldr	r0, [r7, #4]
 8021a5a:	f004 fac6 	bl	8025fea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	2201      	movs	r2, #1
 8021a62:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	2240      	movs	r2, #64	; 0x40
 8021a68:	621a      	str	r2, [r3, #32]

  return ret;
 8021a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	3710      	adds	r7, #16
 8021a70:	46bd      	mov	sp, r7
 8021a72:	bd80      	pop	{r7, pc}

08021a74 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021a74:	b480      	push	{r7}
 8021a76:	b083      	sub	sp, #12
 8021a78:	af00      	add	r7, sp, #0
 8021a7a:	6078      	str	r0, [r7, #4]
 8021a7c:	460b      	mov	r3, r1
 8021a7e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	78fa      	ldrb	r2, [r7, #3]
 8021a84:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021a86:	2300      	movs	r3, #0
}
 8021a88:	4618      	mov	r0, r3
 8021a8a:	370c      	adds	r7, #12
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a92:	4770      	bx	lr

08021a94 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021a94:	b480      	push	{r7}
 8021a96:	b083      	sub	sp, #12
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021aa2:	b2da      	uxtb	r2, r3
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	2204      	movs	r2, #4
 8021aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8021ab2:	2300      	movs	r3, #0
}
 8021ab4:	4618      	mov	r0, r3
 8021ab6:	370c      	adds	r7, #12
 8021ab8:	46bd      	mov	sp, r7
 8021aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021abe:	4770      	bx	lr

08021ac0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021ac0:	b480      	push	{r7}
 8021ac2:	b083      	sub	sp, #12
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ace:	b2db      	uxtb	r3, r3
 8021ad0:	2b04      	cmp	r3, #4
 8021ad2:	d106      	bne.n	8021ae2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021ada:	b2da      	uxtb	r2, r3
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021ae2:	2300      	movs	r3, #0
}
 8021ae4:	4618      	mov	r0, r3
 8021ae6:	370c      	adds	r7, #12
 8021ae8:	46bd      	mov	sp, r7
 8021aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aee:	4770      	bx	lr

08021af0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021af0:	b580      	push	{r7, lr}
 8021af2:	b082      	sub	sp, #8
 8021af4:	af00      	add	r7, sp, #0
 8021af6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021afe:	b2db      	uxtb	r3, r3
 8021b00:	2b03      	cmp	r3, #3
 8021b02:	d110      	bne.n	8021b26 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d00b      	beq.n	8021b26 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b14:	69db      	ldr	r3, [r3, #28]
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d005      	beq.n	8021b26 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b20:	69db      	ldr	r3, [r3, #28]
 8021b22:	6878      	ldr	r0, [r7, #4]
 8021b24:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8021b26:	2300      	movs	r3, #0
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	3708      	adds	r7, #8
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021b30:	b580      	push	{r7, lr}
 8021b32:	b082      	sub	sp, #8
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	6078      	str	r0, [r7, #4]
 8021b38:	460b      	mov	r3, r1
 8021b3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	32ae      	adds	r2, #174	; 0xae
 8021b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	d101      	bne.n	8021b52 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8021b4e:	2303      	movs	r3, #3
 8021b50:	e01c      	b.n	8021b8c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b52:	687b      	ldr	r3, [r7, #4]
 8021b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b58:	b2db      	uxtb	r3, r3
 8021b5a:	2b03      	cmp	r3, #3
 8021b5c:	d115      	bne.n	8021b8a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	32ae      	adds	r2, #174	; 0xae
 8021b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b6c:	6a1b      	ldr	r3, [r3, #32]
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d00b      	beq.n	8021b8a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	32ae      	adds	r2, #174	; 0xae
 8021b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b80:	6a1b      	ldr	r3, [r3, #32]
 8021b82:	78fa      	ldrb	r2, [r7, #3]
 8021b84:	4611      	mov	r1, r2
 8021b86:	6878      	ldr	r0, [r7, #4]
 8021b88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021b8a:	2300      	movs	r3, #0
}
 8021b8c:	4618      	mov	r0, r3
 8021b8e:	3708      	adds	r7, #8
 8021b90:	46bd      	mov	sp, r7
 8021b92:	bd80      	pop	{r7, pc}

08021b94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	b082      	sub	sp, #8
 8021b98:	af00      	add	r7, sp, #0
 8021b9a:	6078      	str	r0, [r7, #4]
 8021b9c:	460b      	mov	r3, r1
 8021b9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	32ae      	adds	r2, #174	; 0xae
 8021baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	d101      	bne.n	8021bb6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8021bb2:	2303      	movs	r3, #3
 8021bb4:	e01c      	b.n	8021bf0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021bbc:	b2db      	uxtb	r3, r3
 8021bbe:	2b03      	cmp	r3, #3
 8021bc0:	d115      	bne.n	8021bee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	32ae      	adds	r2, #174	; 0xae
 8021bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d00b      	beq.n	8021bee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	32ae      	adds	r2, #174	; 0xae
 8021be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021be6:	78fa      	ldrb	r2, [r7, #3]
 8021be8:	4611      	mov	r1, r2
 8021bea:	6878      	ldr	r0, [r7, #4]
 8021bec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021bee:	2300      	movs	r3, #0
}
 8021bf0:	4618      	mov	r0, r3
 8021bf2:	3708      	adds	r7, #8
 8021bf4:	46bd      	mov	sp, r7
 8021bf6:	bd80      	pop	{r7, pc}

08021bf8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021bf8:	b480      	push	{r7}
 8021bfa:	b083      	sub	sp, #12
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021c00:	2300      	movs	r3, #0
}
 8021c02:	4618      	mov	r0, r3
 8021c04:	370c      	adds	r7, #12
 8021c06:	46bd      	mov	sp, r7
 8021c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c0c:	4770      	bx	lr

08021c0e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021c0e:	b580      	push	{r7, lr}
 8021c10:	b084      	sub	sp, #16
 8021c12:	af00      	add	r7, sp, #0
 8021c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8021c16:	2300      	movs	r3, #0
 8021c18:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	2201      	movs	r2, #1
 8021c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d00e      	beq.n	8021c4a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c32:	685b      	ldr	r3, [r3, #4]
 8021c34:	687a      	ldr	r2, [r7, #4]
 8021c36:	6852      	ldr	r2, [r2, #4]
 8021c38:	b2d2      	uxtb	r2, r2
 8021c3a:	4611      	mov	r1, r2
 8021c3c:	6878      	ldr	r0, [r7, #4]
 8021c3e:	4798      	blx	r3
 8021c40:	4603      	mov	r3, r0
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d001      	beq.n	8021c4a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8021c46:	2303      	movs	r3, #3
 8021c48:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8021c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c4c:	4618      	mov	r0, r3
 8021c4e:	3710      	adds	r7, #16
 8021c50:	46bd      	mov	sp, r7
 8021c52:	bd80      	pop	{r7, pc}

08021c54 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8021c54:	b480      	push	{r7}
 8021c56:	b083      	sub	sp, #12
 8021c58:	af00      	add	r7, sp, #0
 8021c5a:	6078      	str	r0, [r7, #4]
 8021c5c:	460b      	mov	r3, r1
 8021c5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8021c60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8021c62:	4618      	mov	r0, r3
 8021c64:	370c      	adds	r7, #12
 8021c66:	46bd      	mov	sp, r7
 8021c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6c:	4770      	bx	lr

08021c6e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8021c6e:	b480      	push	{r7}
 8021c70:	b083      	sub	sp, #12
 8021c72:	af00      	add	r7, sp, #0
 8021c74:	6078      	str	r0, [r7, #4]
 8021c76:	460b      	mov	r3, r1
 8021c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8021c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8021c7c:	4618      	mov	r0, r3
 8021c7e:	370c      	adds	r7, #12
 8021c80:	46bd      	mov	sp, r7
 8021c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c86:	4770      	bx	lr

08021c88 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b086      	sub	sp, #24
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
 8021c90:	460b      	mov	r3, r1
 8021c92:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8021c9c:	2300      	movs	r3, #0
 8021c9e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	885b      	ldrh	r3, [r3, #2]
 8021ca4:	b29a      	uxth	r2, r3
 8021ca6:	68fb      	ldr	r3, [r7, #12]
 8021ca8:	781b      	ldrb	r3, [r3, #0]
 8021caa:	b29b      	uxth	r3, r3
 8021cac:	429a      	cmp	r2, r3
 8021cae:	d920      	bls.n	8021cf2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8021cb0:	68fb      	ldr	r3, [r7, #12]
 8021cb2:	781b      	ldrb	r3, [r3, #0]
 8021cb4:	b29b      	uxth	r3, r3
 8021cb6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8021cb8:	e013      	b.n	8021ce2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8021cba:	f107 030a 	add.w	r3, r7, #10
 8021cbe:	4619      	mov	r1, r3
 8021cc0:	6978      	ldr	r0, [r7, #20]
 8021cc2:	f000 f81b 	bl	8021cfc <USBD_GetNextDesc>
 8021cc6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8021cc8:	697b      	ldr	r3, [r7, #20]
 8021cca:	785b      	ldrb	r3, [r3, #1]
 8021ccc:	2b05      	cmp	r3, #5
 8021cce:	d108      	bne.n	8021ce2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8021cd0:	697b      	ldr	r3, [r7, #20]
 8021cd2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8021cd4:	693b      	ldr	r3, [r7, #16]
 8021cd6:	789b      	ldrb	r3, [r3, #2]
 8021cd8:	78fa      	ldrb	r2, [r7, #3]
 8021cda:	429a      	cmp	r2, r3
 8021cdc:	d008      	beq.n	8021cf0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8021cde:	2300      	movs	r3, #0
 8021ce0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8021ce2:	68fb      	ldr	r3, [r7, #12]
 8021ce4:	885b      	ldrh	r3, [r3, #2]
 8021ce6:	b29a      	uxth	r2, r3
 8021ce8:	897b      	ldrh	r3, [r7, #10]
 8021cea:	429a      	cmp	r2, r3
 8021cec:	d8e5      	bhi.n	8021cba <USBD_GetEpDesc+0x32>
 8021cee:	e000      	b.n	8021cf2 <USBD_GetEpDesc+0x6a>
          break;
 8021cf0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8021cf2:	693b      	ldr	r3, [r7, #16]
}
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	3718      	adds	r7, #24
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd80      	pop	{r7, pc}

08021cfc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8021cfc:	b480      	push	{r7}
 8021cfe:	b085      	sub	sp, #20
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	6078      	str	r0, [r7, #4]
 8021d04:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8021d0a:	683b      	ldr	r3, [r7, #0]
 8021d0c:	881a      	ldrh	r2, [r3, #0]
 8021d0e:	68fb      	ldr	r3, [r7, #12]
 8021d10:	781b      	ldrb	r3, [r3, #0]
 8021d12:	b29b      	uxth	r3, r3
 8021d14:	4413      	add	r3, r2
 8021d16:	b29a      	uxth	r2, r3
 8021d18:	683b      	ldr	r3, [r7, #0]
 8021d1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	781b      	ldrb	r3, [r3, #0]
 8021d20:	461a      	mov	r2, r3
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	4413      	add	r3, r2
 8021d26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8021d28:	68fb      	ldr	r3, [r7, #12]
}
 8021d2a:	4618      	mov	r0, r3
 8021d2c:	3714      	adds	r7, #20
 8021d2e:	46bd      	mov	sp, r7
 8021d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d34:	4770      	bx	lr

08021d36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021d36:	b480      	push	{r7}
 8021d38:	b087      	sub	sp, #28
 8021d3a:	af00      	add	r7, sp, #0
 8021d3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021d42:	697b      	ldr	r3, [r7, #20]
 8021d44:	781b      	ldrb	r3, [r3, #0]
 8021d46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021d48:	697b      	ldr	r3, [r7, #20]
 8021d4a:	3301      	adds	r3, #1
 8021d4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021d4e:	697b      	ldr	r3, [r7, #20]
 8021d50:	781b      	ldrb	r3, [r3, #0]
 8021d52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021d54:	8a3b      	ldrh	r3, [r7, #16]
 8021d56:	021b      	lsls	r3, r3, #8
 8021d58:	b21a      	sxth	r2, r3
 8021d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021d5e:	4313      	orrs	r3, r2
 8021d60:	b21b      	sxth	r3, r3
 8021d62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021d64:	89fb      	ldrh	r3, [r7, #14]
}
 8021d66:	4618      	mov	r0, r3
 8021d68:	371c      	adds	r7, #28
 8021d6a:	46bd      	mov	sp, r7
 8021d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d70:	4770      	bx	lr
	...

08021d74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b084      	sub	sp, #16
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
 8021d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021d7e:	2300      	movs	r3, #0
 8021d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021d82:	683b      	ldr	r3, [r7, #0]
 8021d84:	781b      	ldrb	r3, [r3, #0]
 8021d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021d8a:	2b40      	cmp	r3, #64	; 0x40
 8021d8c:	d005      	beq.n	8021d9a <USBD_StdDevReq+0x26>
 8021d8e:	2b40      	cmp	r3, #64	; 0x40
 8021d90:	d857      	bhi.n	8021e42 <USBD_StdDevReq+0xce>
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	d00f      	beq.n	8021db6 <USBD_StdDevReq+0x42>
 8021d96:	2b20      	cmp	r3, #32
 8021d98:	d153      	bne.n	8021e42 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021da0:	687b      	ldr	r3, [r7, #4]
 8021da2:	32ae      	adds	r2, #174	; 0xae
 8021da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021da8:	689b      	ldr	r3, [r3, #8]
 8021daa:	6839      	ldr	r1, [r7, #0]
 8021dac:	6878      	ldr	r0, [r7, #4]
 8021dae:	4798      	blx	r3
 8021db0:	4603      	mov	r3, r0
 8021db2:	73fb      	strb	r3, [r7, #15]
      break;
 8021db4:	e04a      	b.n	8021e4c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021db6:	683b      	ldr	r3, [r7, #0]
 8021db8:	785b      	ldrb	r3, [r3, #1]
 8021dba:	2b09      	cmp	r3, #9
 8021dbc:	d83b      	bhi.n	8021e36 <USBD_StdDevReq+0xc2>
 8021dbe:	a201      	add	r2, pc, #4	; (adr r2, 8021dc4 <USBD_StdDevReq+0x50>)
 8021dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021dc4:	08021e19 	.word	0x08021e19
 8021dc8:	08021e2d 	.word	0x08021e2d
 8021dcc:	08021e37 	.word	0x08021e37
 8021dd0:	08021e23 	.word	0x08021e23
 8021dd4:	08021e37 	.word	0x08021e37
 8021dd8:	08021df7 	.word	0x08021df7
 8021ddc:	08021ded 	.word	0x08021ded
 8021de0:	08021e37 	.word	0x08021e37
 8021de4:	08021e0f 	.word	0x08021e0f
 8021de8:	08021e01 	.word	0x08021e01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021dec:	6839      	ldr	r1, [r7, #0]
 8021dee:	6878      	ldr	r0, [r7, #4]
 8021df0:	f000 fa3c 	bl	802226c <USBD_GetDescriptor>
          break;
 8021df4:	e024      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021df6:	6839      	ldr	r1, [r7, #0]
 8021df8:	6878      	ldr	r0, [r7, #4]
 8021dfa:	f000 fbcb 	bl	8022594 <USBD_SetAddress>
          break;
 8021dfe:	e01f      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021e00:	6839      	ldr	r1, [r7, #0]
 8021e02:	6878      	ldr	r0, [r7, #4]
 8021e04:	f000 fc0a 	bl	802261c <USBD_SetConfig>
 8021e08:	4603      	mov	r3, r0
 8021e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8021e0c:	e018      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021e0e:	6839      	ldr	r1, [r7, #0]
 8021e10:	6878      	ldr	r0, [r7, #4]
 8021e12:	f000 fcad 	bl	8022770 <USBD_GetConfig>
          break;
 8021e16:	e013      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021e18:	6839      	ldr	r1, [r7, #0]
 8021e1a:	6878      	ldr	r0, [r7, #4]
 8021e1c:	f000 fcde 	bl	80227dc <USBD_GetStatus>
          break;
 8021e20:	e00e      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021e22:	6839      	ldr	r1, [r7, #0]
 8021e24:	6878      	ldr	r0, [r7, #4]
 8021e26:	f000 fd0d 	bl	8022844 <USBD_SetFeature>
          break;
 8021e2a:	e009      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021e2c:	6839      	ldr	r1, [r7, #0]
 8021e2e:	6878      	ldr	r0, [r7, #4]
 8021e30:	f000 fd31 	bl	8022896 <USBD_ClrFeature>
          break;
 8021e34:	e004      	b.n	8021e40 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8021e36:	6839      	ldr	r1, [r7, #0]
 8021e38:	6878      	ldr	r0, [r7, #4]
 8021e3a:	f000 fd88 	bl	802294e <USBD_CtlError>
          break;
 8021e3e:	bf00      	nop
      }
      break;
 8021e40:	e004      	b.n	8021e4c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8021e42:	6839      	ldr	r1, [r7, #0]
 8021e44:	6878      	ldr	r0, [r7, #4]
 8021e46:	f000 fd82 	bl	802294e <USBD_CtlError>
      break;
 8021e4a:	bf00      	nop
  }

  return ret;
 8021e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8021e4e:	4618      	mov	r0, r3
 8021e50:	3710      	adds	r7, #16
 8021e52:	46bd      	mov	sp, r7
 8021e54:	bd80      	pop	{r7, pc}
 8021e56:	bf00      	nop

08021e58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021e58:	b580      	push	{r7, lr}
 8021e5a:	b084      	sub	sp, #16
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
 8021e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021e62:	2300      	movs	r3, #0
 8021e64:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021e66:	683b      	ldr	r3, [r7, #0]
 8021e68:	781b      	ldrb	r3, [r3, #0]
 8021e6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021e6e:	2b40      	cmp	r3, #64	; 0x40
 8021e70:	d005      	beq.n	8021e7e <USBD_StdItfReq+0x26>
 8021e72:	2b40      	cmp	r3, #64	; 0x40
 8021e74:	d852      	bhi.n	8021f1c <USBD_StdItfReq+0xc4>
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	d001      	beq.n	8021e7e <USBD_StdItfReq+0x26>
 8021e7a:	2b20      	cmp	r3, #32
 8021e7c:	d14e      	bne.n	8021f1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021e84:	b2db      	uxtb	r3, r3
 8021e86:	3b01      	subs	r3, #1
 8021e88:	2b02      	cmp	r3, #2
 8021e8a:	d840      	bhi.n	8021f0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021e8c:	683b      	ldr	r3, [r7, #0]
 8021e8e:	889b      	ldrh	r3, [r3, #4]
 8021e90:	b2db      	uxtb	r3, r3
 8021e92:	2b01      	cmp	r3, #1
 8021e94:	d836      	bhi.n	8021f04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8021e96:	683b      	ldr	r3, [r7, #0]
 8021e98:	889b      	ldrh	r3, [r3, #4]
 8021e9a:	b2db      	uxtb	r3, r3
 8021e9c:	4619      	mov	r1, r3
 8021e9e:	6878      	ldr	r0, [r7, #4]
 8021ea0:	f7ff fed8 	bl	8021c54 <USBD_CoreFindIF>
 8021ea4:	4603      	mov	r3, r0
 8021ea6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021ea8:	7bbb      	ldrb	r3, [r7, #14]
 8021eaa:	2bff      	cmp	r3, #255	; 0xff
 8021eac:	d01d      	beq.n	8021eea <USBD_StdItfReq+0x92>
 8021eae:	7bbb      	ldrb	r3, [r7, #14]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d11a      	bne.n	8021eea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8021eb4:	7bba      	ldrb	r2, [r7, #14]
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	32ae      	adds	r2, #174	; 0xae
 8021eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ebe:	689b      	ldr	r3, [r3, #8]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d00f      	beq.n	8021ee4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8021ec4:	7bba      	ldrb	r2, [r7, #14]
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8021ecc:	7bba      	ldrb	r2, [r7, #14]
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	32ae      	adds	r2, #174	; 0xae
 8021ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ed6:	689b      	ldr	r3, [r3, #8]
 8021ed8:	6839      	ldr	r1, [r7, #0]
 8021eda:	6878      	ldr	r0, [r7, #4]
 8021edc:	4798      	blx	r3
 8021ede:	4603      	mov	r3, r0
 8021ee0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8021ee2:	e004      	b.n	8021eee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8021ee4:	2303      	movs	r3, #3
 8021ee6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8021ee8:	e001      	b.n	8021eee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8021eea:	2303      	movs	r3, #3
 8021eec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021eee:	683b      	ldr	r3, [r7, #0]
 8021ef0:	88db      	ldrh	r3, [r3, #6]
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d110      	bne.n	8021f18 <USBD_StdItfReq+0xc0>
 8021ef6:	7bfb      	ldrb	r3, [r7, #15]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d10d      	bne.n	8021f18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8021efc:	6878      	ldr	r0, [r7, #4]
 8021efe:	f000 fdd4 	bl	8022aaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021f02:	e009      	b.n	8021f18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8021f04:	6839      	ldr	r1, [r7, #0]
 8021f06:	6878      	ldr	r0, [r7, #4]
 8021f08:	f000 fd21 	bl	802294e <USBD_CtlError>
          break;
 8021f0c:	e004      	b.n	8021f18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8021f0e:	6839      	ldr	r1, [r7, #0]
 8021f10:	6878      	ldr	r0, [r7, #4]
 8021f12:	f000 fd1c 	bl	802294e <USBD_CtlError>
          break;
 8021f16:	e000      	b.n	8021f1a <USBD_StdItfReq+0xc2>
          break;
 8021f18:	bf00      	nop
      }
      break;
 8021f1a:	e004      	b.n	8021f26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8021f1c:	6839      	ldr	r1, [r7, #0]
 8021f1e:	6878      	ldr	r0, [r7, #4]
 8021f20:	f000 fd15 	bl	802294e <USBD_CtlError>
      break;
 8021f24:	bf00      	nop
  }

  return ret;
 8021f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f28:	4618      	mov	r0, r3
 8021f2a:	3710      	adds	r7, #16
 8021f2c:	46bd      	mov	sp, r7
 8021f2e:	bd80      	pop	{r7, pc}

08021f30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b084      	sub	sp, #16
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	6078      	str	r0, [r7, #4]
 8021f38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8021f3a:	2300      	movs	r3, #0
 8021f3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8021f3e:	683b      	ldr	r3, [r7, #0]
 8021f40:	889b      	ldrh	r3, [r3, #4]
 8021f42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021f44:	683b      	ldr	r3, [r7, #0]
 8021f46:	781b      	ldrb	r3, [r3, #0]
 8021f48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021f4c:	2b40      	cmp	r3, #64	; 0x40
 8021f4e:	d007      	beq.n	8021f60 <USBD_StdEPReq+0x30>
 8021f50:	2b40      	cmp	r3, #64	; 0x40
 8021f52:	f200 817f 	bhi.w	8022254 <USBD_StdEPReq+0x324>
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d02a      	beq.n	8021fb0 <USBD_StdEPReq+0x80>
 8021f5a:	2b20      	cmp	r3, #32
 8021f5c:	f040 817a 	bne.w	8022254 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8021f60:	7bbb      	ldrb	r3, [r7, #14]
 8021f62:	4619      	mov	r1, r3
 8021f64:	6878      	ldr	r0, [r7, #4]
 8021f66:	f7ff fe82 	bl	8021c6e <USBD_CoreFindEP>
 8021f6a:	4603      	mov	r3, r0
 8021f6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021f6e:	7b7b      	ldrb	r3, [r7, #13]
 8021f70:	2bff      	cmp	r3, #255	; 0xff
 8021f72:	f000 8174 	beq.w	802225e <USBD_StdEPReq+0x32e>
 8021f76:	7b7b      	ldrb	r3, [r7, #13]
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	f040 8170 	bne.w	802225e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8021f7e:	7b7a      	ldrb	r2, [r7, #13]
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8021f86:	7b7a      	ldrb	r2, [r7, #13]
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	32ae      	adds	r2, #174	; 0xae
 8021f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021f90:	689b      	ldr	r3, [r3, #8]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	f000 8163 	beq.w	802225e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8021f98:	7b7a      	ldrb	r2, [r7, #13]
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	32ae      	adds	r2, #174	; 0xae
 8021f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021fa2:	689b      	ldr	r3, [r3, #8]
 8021fa4:	6839      	ldr	r1, [r7, #0]
 8021fa6:	6878      	ldr	r0, [r7, #4]
 8021fa8:	4798      	blx	r3
 8021faa:	4603      	mov	r3, r0
 8021fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8021fae:	e156      	b.n	802225e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021fb0:	683b      	ldr	r3, [r7, #0]
 8021fb2:	785b      	ldrb	r3, [r3, #1]
 8021fb4:	2b03      	cmp	r3, #3
 8021fb6:	d008      	beq.n	8021fca <USBD_StdEPReq+0x9a>
 8021fb8:	2b03      	cmp	r3, #3
 8021fba:	f300 8145 	bgt.w	8022248 <USBD_StdEPReq+0x318>
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	f000 809b 	beq.w	80220fa <USBD_StdEPReq+0x1ca>
 8021fc4:	2b01      	cmp	r3, #1
 8021fc6:	d03c      	beq.n	8022042 <USBD_StdEPReq+0x112>
 8021fc8:	e13e      	b.n	8022248 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021fd0:	b2db      	uxtb	r3, r3
 8021fd2:	2b02      	cmp	r3, #2
 8021fd4:	d002      	beq.n	8021fdc <USBD_StdEPReq+0xac>
 8021fd6:	2b03      	cmp	r3, #3
 8021fd8:	d016      	beq.n	8022008 <USBD_StdEPReq+0xd8>
 8021fda:	e02c      	b.n	8022036 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021fdc:	7bbb      	ldrb	r3, [r7, #14]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d00d      	beq.n	8021ffe <USBD_StdEPReq+0xce>
 8021fe2:	7bbb      	ldrb	r3, [r7, #14]
 8021fe4:	2b80      	cmp	r3, #128	; 0x80
 8021fe6:	d00a      	beq.n	8021ffe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021fe8:	7bbb      	ldrb	r3, [r7, #14]
 8021fea:	4619      	mov	r1, r3
 8021fec:	6878      	ldr	r0, [r7, #4]
 8021fee:	f004 f860 	bl	80260b2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021ff2:	2180      	movs	r1, #128	; 0x80
 8021ff4:	6878      	ldr	r0, [r7, #4]
 8021ff6:	f004 f85c 	bl	80260b2 <USBD_LL_StallEP>
 8021ffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021ffc:	e020      	b.n	8022040 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8021ffe:	6839      	ldr	r1, [r7, #0]
 8022000:	6878      	ldr	r0, [r7, #4]
 8022002:	f000 fca4 	bl	802294e <USBD_CtlError>
              break;
 8022006:	e01b      	b.n	8022040 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022008:	683b      	ldr	r3, [r7, #0]
 802200a:	885b      	ldrh	r3, [r3, #2]
 802200c:	2b00      	cmp	r3, #0
 802200e:	d10e      	bne.n	802202e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8022010:	7bbb      	ldrb	r3, [r7, #14]
 8022012:	2b00      	cmp	r3, #0
 8022014:	d00b      	beq.n	802202e <USBD_StdEPReq+0xfe>
 8022016:	7bbb      	ldrb	r3, [r7, #14]
 8022018:	2b80      	cmp	r3, #128	; 0x80
 802201a:	d008      	beq.n	802202e <USBD_StdEPReq+0xfe>
 802201c:	683b      	ldr	r3, [r7, #0]
 802201e:	88db      	ldrh	r3, [r3, #6]
 8022020:	2b00      	cmp	r3, #0
 8022022:	d104      	bne.n	802202e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8022024:	7bbb      	ldrb	r3, [r7, #14]
 8022026:	4619      	mov	r1, r3
 8022028:	6878      	ldr	r0, [r7, #4]
 802202a:	f004 f842 	bl	80260b2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802202e:	6878      	ldr	r0, [r7, #4]
 8022030:	f000 fd3b 	bl	8022aaa <USBD_CtlSendStatus>

              break;
 8022034:	e004      	b.n	8022040 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8022036:	6839      	ldr	r1, [r7, #0]
 8022038:	6878      	ldr	r0, [r7, #4]
 802203a:	f000 fc88 	bl	802294e <USBD_CtlError>
              break;
 802203e:	bf00      	nop
          }
          break;
 8022040:	e107      	b.n	8022252 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022048:	b2db      	uxtb	r3, r3
 802204a:	2b02      	cmp	r3, #2
 802204c:	d002      	beq.n	8022054 <USBD_StdEPReq+0x124>
 802204e:	2b03      	cmp	r3, #3
 8022050:	d016      	beq.n	8022080 <USBD_StdEPReq+0x150>
 8022052:	e04b      	b.n	80220ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022054:	7bbb      	ldrb	r3, [r7, #14]
 8022056:	2b00      	cmp	r3, #0
 8022058:	d00d      	beq.n	8022076 <USBD_StdEPReq+0x146>
 802205a:	7bbb      	ldrb	r3, [r7, #14]
 802205c:	2b80      	cmp	r3, #128	; 0x80
 802205e:	d00a      	beq.n	8022076 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8022060:	7bbb      	ldrb	r3, [r7, #14]
 8022062:	4619      	mov	r1, r3
 8022064:	6878      	ldr	r0, [r7, #4]
 8022066:	f004 f824 	bl	80260b2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802206a:	2180      	movs	r1, #128	; 0x80
 802206c:	6878      	ldr	r0, [r7, #4]
 802206e:	f004 f820 	bl	80260b2 <USBD_LL_StallEP>
 8022072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022074:	e040      	b.n	80220f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8022076:	6839      	ldr	r1, [r7, #0]
 8022078:	6878      	ldr	r0, [r7, #4]
 802207a:	f000 fc68 	bl	802294e <USBD_CtlError>
              break;
 802207e:	e03b      	b.n	80220f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022080:	683b      	ldr	r3, [r7, #0]
 8022082:	885b      	ldrh	r3, [r3, #2]
 8022084:	2b00      	cmp	r3, #0
 8022086:	d136      	bne.n	80220f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8022088:	7bbb      	ldrb	r3, [r7, #14]
 802208a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802208e:	2b00      	cmp	r3, #0
 8022090:	d004      	beq.n	802209c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8022092:	7bbb      	ldrb	r3, [r7, #14]
 8022094:	4619      	mov	r1, r3
 8022096:	6878      	ldr	r0, [r7, #4]
 8022098:	f004 f82a 	bl	80260f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802209c:	6878      	ldr	r0, [r7, #4]
 802209e:	f000 fd04 	bl	8022aaa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80220a2:	7bbb      	ldrb	r3, [r7, #14]
 80220a4:	4619      	mov	r1, r3
 80220a6:	6878      	ldr	r0, [r7, #4]
 80220a8:	f7ff fde1 	bl	8021c6e <USBD_CoreFindEP>
 80220ac:	4603      	mov	r3, r0
 80220ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80220b0:	7b7b      	ldrb	r3, [r7, #13]
 80220b2:	2bff      	cmp	r3, #255	; 0xff
 80220b4:	d01f      	beq.n	80220f6 <USBD_StdEPReq+0x1c6>
 80220b6:	7b7b      	ldrb	r3, [r7, #13]
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d11c      	bne.n	80220f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80220bc:	7b7a      	ldrb	r2, [r7, #13]
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80220c4:	7b7a      	ldrb	r2, [r7, #13]
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	32ae      	adds	r2, #174	; 0xae
 80220ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80220ce:	689b      	ldr	r3, [r3, #8]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	d010      	beq.n	80220f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80220d4:	7b7a      	ldrb	r2, [r7, #13]
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	32ae      	adds	r2, #174	; 0xae
 80220da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80220de:	689b      	ldr	r3, [r3, #8]
 80220e0:	6839      	ldr	r1, [r7, #0]
 80220e2:	6878      	ldr	r0, [r7, #4]
 80220e4:	4798      	blx	r3
 80220e6:	4603      	mov	r3, r0
 80220e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80220ea:	e004      	b.n	80220f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80220ec:	6839      	ldr	r1, [r7, #0]
 80220ee:	6878      	ldr	r0, [r7, #4]
 80220f0:	f000 fc2d 	bl	802294e <USBD_CtlError>
              break;
 80220f4:	e000      	b.n	80220f8 <USBD_StdEPReq+0x1c8>
              break;
 80220f6:	bf00      	nop
          }
          break;
 80220f8:	e0ab      	b.n	8022252 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022100:	b2db      	uxtb	r3, r3
 8022102:	2b02      	cmp	r3, #2
 8022104:	d002      	beq.n	802210c <USBD_StdEPReq+0x1dc>
 8022106:	2b03      	cmp	r3, #3
 8022108:	d032      	beq.n	8022170 <USBD_StdEPReq+0x240>
 802210a:	e097      	b.n	802223c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802210c:	7bbb      	ldrb	r3, [r7, #14]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d007      	beq.n	8022122 <USBD_StdEPReq+0x1f2>
 8022112:	7bbb      	ldrb	r3, [r7, #14]
 8022114:	2b80      	cmp	r3, #128	; 0x80
 8022116:	d004      	beq.n	8022122 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8022118:	6839      	ldr	r1, [r7, #0]
 802211a:	6878      	ldr	r0, [r7, #4]
 802211c:	f000 fc17 	bl	802294e <USBD_CtlError>
                break;
 8022120:	e091      	b.n	8022246 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8022126:	2b00      	cmp	r3, #0
 8022128:	da0b      	bge.n	8022142 <USBD_StdEPReq+0x212>
 802212a:	7bbb      	ldrb	r3, [r7, #14]
 802212c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022130:	4613      	mov	r3, r2
 8022132:	009b      	lsls	r3, r3, #2
 8022134:	4413      	add	r3, r2
 8022136:	009b      	lsls	r3, r3, #2
 8022138:	3310      	adds	r3, #16
 802213a:	687a      	ldr	r2, [r7, #4]
 802213c:	4413      	add	r3, r2
 802213e:	3304      	adds	r3, #4
 8022140:	e00b      	b.n	802215a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8022142:	7bbb      	ldrb	r3, [r7, #14]
 8022144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022148:	4613      	mov	r3, r2
 802214a:	009b      	lsls	r3, r3, #2
 802214c:	4413      	add	r3, r2
 802214e:	009b      	lsls	r3, r3, #2
 8022150:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8022154:	687a      	ldr	r2, [r7, #4]
 8022156:	4413      	add	r3, r2
 8022158:	3304      	adds	r3, #4
 802215a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802215c:	68bb      	ldr	r3, [r7, #8]
 802215e:	2200      	movs	r2, #0
 8022160:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8022162:	68bb      	ldr	r3, [r7, #8]
 8022164:	2202      	movs	r2, #2
 8022166:	4619      	mov	r1, r3
 8022168:	6878      	ldr	r0, [r7, #4]
 802216a:	f000 fc61 	bl	8022a30 <USBD_CtlSendData>
              break;
 802216e:	e06a      	b.n	8022246 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8022170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8022174:	2b00      	cmp	r3, #0
 8022176:	da11      	bge.n	802219c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8022178:	7bbb      	ldrb	r3, [r7, #14]
 802217a:	f003 020f 	and.w	r2, r3, #15
 802217e:	6879      	ldr	r1, [r7, #4]
 8022180:	4613      	mov	r3, r2
 8022182:	009b      	lsls	r3, r3, #2
 8022184:	4413      	add	r3, r2
 8022186:	009b      	lsls	r3, r3, #2
 8022188:	440b      	add	r3, r1
 802218a:	3324      	adds	r3, #36	; 0x24
 802218c:	881b      	ldrh	r3, [r3, #0]
 802218e:	2b00      	cmp	r3, #0
 8022190:	d117      	bne.n	80221c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8022192:	6839      	ldr	r1, [r7, #0]
 8022194:	6878      	ldr	r0, [r7, #4]
 8022196:	f000 fbda 	bl	802294e <USBD_CtlError>
                  break;
 802219a:	e054      	b.n	8022246 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802219c:	7bbb      	ldrb	r3, [r7, #14]
 802219e:	f003 020f 	and.w	r2, r3, #15
 80221a2:	6879      	ldr	r1, [r7, #4]
 80221a4:	4613      	mov	r3, r2
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	4413      	add	r3, r2
 80221aa:	009b      	lsls	r3, r3, #2
 80221ac:	440b      	add	r3, r1
 80221ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80221b2:	881b      	ldrh	r3, [r3, #0]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d104      	bne.n	80221c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80221b8:	6839      	ldr	r1, [r7, #0]
 80221ba:	6878      	ldr	r0, [r7, #4]
 80221bc:	f000 fbc7 	bl	802294e <USBD_CtlError>
                  break;
 80221c0:	e041      	b.n	8022246 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80221c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	da0b      	bge.n	80221e2 <USBD_StdEPReq+0x2b2>
 80221ca:	7bbb      	ldrb	r3, [r7, #14]
 80221cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80221d0:	4613      	mov	r3, r2
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	4413      	add	r3, r2
 80221d6:	009b      	lsls	r3, r3, #2
 80221d8:	3310      	adds	r3, #16
 80221da:	687a      	ldr	r2, [r7, #4]
 80221dc:	4413      	add	r3, r2
 80221de:	3304      	adds	r3, #4
 80221e0:	e00b      	b.n	80221fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80221e2:	7bbb      	ldrb	r3, [r7, #14]
 80221e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80221e8:	4613      	mov	r3, r2
 80221ea:	009b      	lsls	r3, r3, #2
 80221ec:	4413      	add	r3, r2
 80221ee:	009b      	lsls	r3, r3, #2
 80221f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80221f4:	687a      	ldr	r2, [r7, #4]
 80221f6:	4413      	add	r3, r2
 80221f8:	3304      	adds	r3, #4
 80221fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80221fc:	7bbb      	ldrb	r3, [r7, #14]
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d002      	beq.n	8022208 <USBD_StdEPReq+0x2d8>
 8022202:	7bbb      	ldrb	r3, [r7, #14]
 8022204:	2b80      	cmp	r3, #128	; 0x80
 8022206:	d103      	bne.n	8022210 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8022208:	68bb      	ldr	r3, [r7, #8]
 802220a:	2200      	movs	r2, #0
 802220c:	601a      	str	r2, [r3, #0]
 802220e:	e00e      	b.n	802222e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8022210:	7bbb      	ldrb	r3, [r7, #14]
 8022212:	4619      	mov	r1, r3
 8022214:	6878      	ldr	r0, [r7, #4]
 8022216:	f003 ff8a 	bl	802612e <USBD_LL_IsStallEP>
 802221a:	4603      	mov	r3, r0
 802221c:	2b00      	cmp	r3, #0
 802221e:	d003      	beq.n	8022228 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8022220:	68bb      	ldr	r3, [r7, #8]
 8022222:	2201      	movs	r2, #1
 8022224:	601a      	str	r2, [r3, #0]
 8022226:	e002      	b.n	802222e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8022228:	68bb      	ldr	r3, [r7, #8]
 802222a:	2200      	movs	r2, #0
 802222c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802222e:	68bb      	ldr	r3, [r7, #8]
 8022230:	2202      	movs	r2, #2
 8022232:	4619      	mov	r1, r3
 8022234:	6878      	ldr	r0, [r7, #4]
 8022236:	f000 fbfb 	bl	8022a30 <USBD_CtlSendData>
              break;
 802223a:	e004      	b.n	8022246 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802223c:	6839      	ldr	r1, [r7, #0]
 802223e:	6878      	ldr	r0, [r7, #4]
 8022240:	f000 fb85 	bl	802294e <USBD_CtlError>
              break;
 8022244:	bf00      	nop
          }
          break;
 8022246:	e004      	b.n	8022252 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8022248:	6839      	ldr	r1, [r7, #0]
 802224a:	6878      	ldr	r0, [r7, #4]
 802224c:	f000 fb7f 	bl	802294e <USBD_CtlError>
          break;
 8022250:	bf00      	nop
      }
      break;
 8022252:	e005      	b.n	8022260 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8022254:	6839      	ldr	r1, [r7, #0]
 8022256:	6878      	ldr	r0, [r7, #4]
 8022258:	f000 fb79 	bl	802294e <USBD_CtlError>
      break;
 802225c:	e000      	b.n	8022260 <USBD_StdEPReq+0x330>
      break;
 802225e:	bf00      	nop
  }

  return ret;
 8022260:	7bfb      	ldrb	r3, [r7, #15]
}
 8022262:	4618      	mov	r0, r3
 8022264:	3710      	adds	r7, #16
 8022266:	46bd      	mov	sp, r7
 8022268:	bd80      	pop	{r7, pc}
	...

0802226c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802226c:	b580      	push	{r7, lr}
 802226e:	b084      	sub	sp, #16
 8022270:	af00      	add	r7, sp, #0
 8022272:	6078      	str	r0, [r7, #4]
 8022274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8022276:	2300      	movs	r3, #0
 8022278:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802227a:	2300      	movs	r3, #0
 802227c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802227e:	2300      	movs	r3, #0
 8022280:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8022282:	683b      	ldr	r3, [r7, #0]
 8022284:	885b      	ldrh	r3, [r3, #2]
 8022286:	0a1b      	lsrs	r3, r3, #8
 8022288:	b29b      	uxth	r3, r3
 802228a:	3b01      	subs	r3, #1
 802228c:	2b0e      	cmp	r3, #14
 802228e:	f200 8152 	bhi.w	8022536 <USBD_GetDescriptor+0x2ca>
 8022292:	a201      	add	r2, pc, #4	; (adr r2, 8022298 <USBD_GetDescriptor+0x2c>)
 8022294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022298:	08022309 	.word	0x08022309
 802229c:	08022321 	.word	0x08022321
 80222a0:	08022361 	.word	0x08022361
 80222a4:	08022537 	.word	0x08022537
 80222a8:	08022537 	.word	0x08022537
 80222ac:	080224d7 	.word	0x080224d7
 80222b0:	08022503 	.word	0x08022503
 80222b4:	08022537 	.word	0x08022537
 80222b8:	08022537 	.word	0x08022537
 80222bc:	08022537 	.word	0x08022537
 80222c0:	08022537 	.word	0x08022537
 80222c4:	08022537 	.word	0x08022537
 80222c8:	08022537 	.word	0x08022537
 80222cc:	08022537 	.word	0x08022537
 80222d0:	080222d5 	.word	0x080222d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80222da:	69db      	ldr	r3, [r3, #28]
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d00b      	beq.n	80222f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80222e6:	69db      	ldr	r3, [r3, #28]
 80222e8:	687a      	ldr	r2, [r7, #4]
 80222ea:	7c12      	ldrb	r2, [r2, #16]
 80222ec:	f107 0108 	add.w	r1, r7, #8
 80222f0:	4610      	mov	r0, r2
 80222f2:	4798      	blx	r3
 80222f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80222f6:	e126      	b.n	8022546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80222f8:	6839      	ldr	r1, [r7, #0]
 80222fa:	6878      	ldr	r0, [r7, #4]
 80222fc:	f000 fb27 	bl	802294e <USBD_CtlError>
        err++;
 8022300:	7afb      	ldrb	r3, [r7, #11]
 8022302:	3301      	adds	r3, #1
 8022304:	72fb      	strb	r3, [r7, #11]
      break;
 8022306:	e11e      	b.n	8022546 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802230e:	681b      	ldr	r3, [r3, #0]
 8022310:	687a      	ldr	r2, [r7, #4]
 8022312:	7c12      	ldrb	r2, [r2, #16]
 8022314:	f107 0108 	add.w	r1, r7, #8
 8022318:	4610      	mov	r0, r2
 802231a:	4798      	blx	r3
 802231c:	60f8      	str	r0, [r7, #12]
      break;
 802231e:	e112      	b.n	8022546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	7c1b      	ldrb	r3, [r3, #16]
 8022324:	2b00      	cmp	r3, #0
 8022326:	d10d      	bne.n	8022344 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022330:	f107 0208 	add.w	r2, r7, #8
 8022334:	4610      	mov	r0, r2
 8022336:	4798      	blx	r3
 8022338:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802233a:	68fb      	ldr	r3, [r7, #12]
 802233c:	3301      	adds	r3, #1
 802233e:	2202      	movs	r2, #2
 8022340:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022342:	e100      	b.n	8022546 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802234c:	f107 0208 	add.w	r2, r7, #8
 8022350:	4610      	mov	r0, r2
 8022352:	4798      	blx	r3
 8022354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022356:	68fb      	ldr	r3, [r7, #12]
 8022358:	3301      	adds	r3, #1
 802235a:	2202      	movs	r2, #2
 802235c:	701a      	strb	r2, [r3, #0]
      break;
 802235e:	e0f2      	b.n	8022546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8022360:	683b      	ldr	r3, [r7, #0]
 8022362:	885b      	ldrh	r3, [r3, #2]
 8022364:	b2db      	uxtb	r3, r3
 8022366:	2b05      	cmp	r3, #5
 8022368:	f200 80ac 	bhi.w	80224c4 <USBD_GetDescriptor+0x258>
 802236c:	a201      	add	r2, pc, #4	; (adr r2, 8022374 <USBD_GetDescriptor+0x108>)
 802236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022372:	bf00      	nop
 8022374:	0802238d 	.word	0x0802238d
 8022378:	080223c1 	.word	0x080223c1
 802237c:	080223f5 	.word	0x080223f5
 8022380:	08022429 	.word	0x08022429
 8022384:	0802245d 	.word	0x0802245d
 8022388:	08022491 	.word	0x08022491
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022392:	685b      	ldr	r3, [r3, #4]
 8022394:	2b00      	cmp	r3, #0
 8022396:	d00b      	beq.n	80223b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802239e:	685b      	ldr	r3, [r3, #4]
 80223a0:	687a      	ldr	r2, [r7, #4]
 80223a2:	7c12      	ldrb	r2, [r2, #16]
 80223a4:	f107 0108 	add.w	r1, r7, #8
 80223a8:	4610      	mov	r0, r2
 80223aa:	4798      	blx	r3
 80223ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80223ae:	e091      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80223b0:	6839      	ldr	r1, [r7, #0]
 80223b2:	6878      	ldr	r0, [r7, #4]
 80223b4:	f000 facb 	bl	802294e <USBD_CtlError>
            err++;
 80223b8:	7afb      	ldrb	r3, [r7, #11]
 80223ba:	3301      	adds	r3, #1
 80223bc:	72fb      	strb	r3, [r7, #11]
          break;
 80223be:	e089      	b.n	80224d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80223c6:	689b      	ldr	r3, [r3, #8]
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	d00b      	beq.n	80223e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80223cc:	687b      	ldr	r3, [r7, #4]
 80223ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80223d2:	689b      	ldr	r3, [r3, #8]
 80223d4:	687a      	ldr	r2, [r7, #4]
 80223d6:	7c12      	ldrb	r2, [r2, #16]
 80223d8:	f107 0108 	add.w	r1, r7, #8
 80223dc:	4610      	mov	r0, r2
 80223de:	4798      	blx	r3
 80223e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80223e2:	e077      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80223e4:	6839      	ldr	r1, [r7, #0]
 80223e6:	6878      	ldr	r0, [r7, #4]
 80223e8:	f000 fab1 	bl	802294e <USBD_CtlError>
            err++;
 80223ec:	7afb      	ldrb	r3, [r7, #11]
 80223ee:	3301      	adds	r3, #1
 80223f0:	72fb      	strb	r3, [r7, #11]
          break;
 80223f2:	e06f      	b.n	80224d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80223fa:	68db      	ldr	r3, [r3, #12]
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	d00b      	beq.n	8022418 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022406:	68db      	ldr	r3, [r3, #12]
 8022408:	687a      	ldr	r2, [r7, #4]
 802240a:	7c12      	ldrb	r2, [r2, #16]
 802240c:	f107 0108 	add.w	r1, r7, #8
 8022410:	4610      	mov	r0, r2
 8022412:	4798      	blx	r3
 8022414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022416:	e05d      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8022418:	6839      	ldr	r1, [r7, #0]
 802241a:	6878      	ldr	r0, [r7, #4]
 802241c:	f000 fa97 	bl	802294e <USBD_CtlError>
            err++;
 8022420:	7afb      	ldrb	r3, [r7, #11]
 8022422:	3301      	adds	r3, #1
 8022424:	72fb      	strb	r3, [r7, #11]
          break;
 8022426:	e055      	b.n	80224d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802242e:	691b      	ldr	r3, [r3, #16]
 8022430:	2b00      	cmp	r3, #0
 8022432:	d00b      	beq.n	802244c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802243a:	691b      	ldr	r3, [r3, #16]
 802243c:	687a      	ldr	r2, [r7, #4]
 802243e:	7c12      	ldrb	r2, [r2, #16]
 8022440:	f107 0108 	add.w	r1, r7, #8
 8022444:	4610      	mov	r0, r2
 8022446:	4798      	blx	r3
 8022448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802244a:	e043      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802244c:	6839      	ldr	r1, [r7, #0]
 802244e:	6878      	ldr	r0, [r7, #4]
 8022450:	f000 fa7d 	bl	802294e <USBD_CtlError>
            err++;
 8022454:	7afb      	ldrb	r3, [r7, #11]
 8022456:	3301      	adds	r3, #1
 8022458:	72fb      	strb	r3, [r7, #11]
          break;
 802245a:	e03b      	b.n	80224d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022462:	695b      	ldr	r3, [r3, #20]
 8022464:	2b00      	cmp	r3, #0
 8022466:	d00b      	beq.n	8022480 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802246e:	695b      	ldr	r3, [r3, #20]
 8022470:	687a      	ldr	r2, [r7, #4]
 8022472:	7c12      	ldrb	r2, [r2, #16]
 8022474:	f107 0108 	add.w	r1, r7, #8
 8022478:	4610      	mov	r0, r2
 802247a:	4798      	blx	r3
 802247c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802247e:	e029      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8022480:	6839      	ldr	r1, [r7, #0]
 8022482:	6878      	ldr	r0, [r7, #4]
 8022484:	f000 fa63 	bl	802294e <USBD_CtlError>
            err++;
 8022488:	7afb      	ldrb	r3, [r7, #11]
 802248a:	3301      	adds	r3, #1
 802248c:	72fb      	strb	r3, [r7, #11]
          break;
 802248e:	e021      	b.n	80224d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022496:	699b      	ldr	r3, [r3, #24]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d00b      	beq.n	80224b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80224a2:	699b      	ldr	r3, [r3, #24]
 80224a4:	687a      	ldr	r2, [r7, #4]
 80224a6:	7c12      	ldrb	r2, [r2, #16]
 80224a8:	f107 0108 	add.w	r1, r7, #8
 80224ac:	4610      	mov	r0, r2
 80224ae:	4798      	blx	r3
 80224b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80224b2:	e00f      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80224b4:	6839      	ldr	r1, [r7, #0]
 80224b6:	6878      	ldr	r0, [r7, #4]
 80224b8:	f000 fa49 	bl	802294e <USBD_CtlError>
            err++;
 80224bc:	7afb      	ldrb	r3, [r7, #11]
 80224be:	3301      	adds	r3, #1
 80224c0:	72fb      	strb	r3, [r7, #11]
          break;
 80224c2:	e007      	b.n	80224d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80224c4:	6839      	ldr	r1, [r7, #0]
 80224c6:	6878      	ldr	r0, [r7, #4]
 80224c8:	f000 fa41 	bl	802294e <USBD_CtlError>
          err++;
 80224cc:	7afb      	ldrb	r3, [r7, #11]
 80224ce:	3301      	adds	r3, #1
 80224d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80224d2:	bf00      	nop
      }
      break;
 80224d4:	e037      	b.n	8022546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	7c1b      	ldrb	r3, [r3, #16]
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d109      	bne.n	80224f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80224e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80224e6:	f107 0208 	add.w	r2, r7, #8
 80224ea:	4610      	mov	r0, r2
 80224ec:	4798      	blx	r3
 80224ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80224f0:	e029      	b.n	8022546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80224f2:	6839      	ldr	r1, [r7, #0]
 80224f4:	6878      	ldr	r0, [r7, #4]
 80224f6:	f000 fa2a 	bl	802294e <USBD_CtlError>
        err++;
 80224fa:	7afb      	ldrb	r3, [r7, #11]
 80224fc:	3301      	adds	r3, #1
 80224fe:	72fb      	strb	r3, [r7, #11]
      break;
 8022500:	e021      	b.n	8022546 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	7c1b      	ldrb	r3, [r3, #16]
 8022506:	2b00      	cmp	r3, #0
 8022508:	d10d      	bne.n	8022526 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022512:	f107 0208 	add.w	r2, r7, #8
 8022516:	4610      	mov	r0, r2
 8022518:	4798      	blx	r3
 802251a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802251c:	68fb      	ldr	r3, [r7, #12]
 802251e:	3301      	adds	r3, #1
 8022520:	2207      	movs	r2, #7
 8022522:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022524:	e00f      	b.n	8022546 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8022526:	6839      	ldr	r1, [r7, #0]
 8022528:	6878      	ldr	r0, [r7, #4]
 802252a:	f000 fa10 	bl	802294e <USBD_CtlError>
        err++;
 802252e:	7afb      	ldrb	r3, [r7, #11]
 8022530:	3301      	adds	r3, #1
 8022532:	72fb      	strb	r3, [r7, #11]
      break;
 8022534:	e007      	b.n	8022546 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8022536:	6839      	ldr	r1, [r7, #0]
 8022538:	6878      	ldr	r0, [r7, #4]
 802253a:	f000 fa08 	bl	802294e <USBD_CtlError>
      err++;
 802253e:	7afb      	ldrb	r3, [r7, #11]
 8022540:	3301      	adds	r3, #1
 8022542:	72fb      	strb	r3, [r7, #11]
      break;
 8022544:	bf00      	nop
  }

  if (err != 0U)
 8022546:	7afb      	ldrb	r3, [r7, #11]
 8022548:	2b00      	cmp	r3, #0
 802254a:	d11e      	bne.n	802258a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 802254c:	683b      	ldr	r3, [r7, #0]
 802254e:	88db      	ldrh	r3, [r3, #6]
 8022550:	2b00      	cmp	r3, #0
 8022552:	d016      	beq.n	8022582 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8022554:	893b      	ldrh	r3, [r7, #8]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d00e      	beq.n	8022578 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 802255a:	683b      	ldr	r3, [r7, #0]
 802255c:	88da      	ldrh	r2, [r3, #6]
 802255e:	893b      	ldrh	r3, [r7, #8]
 8022560:	4293      	cmp	r3, r2
 8022562:	bf28      	it	cs
 8022564:	4613      	movcs	r3, r2
 8022566:	b29b      	uxth	r3, r3
 8022568:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802256a:	893b      	ldrh	r3, [r7, #8]
 802256c:	461a      	mov	r2, r3
 802256e:	68f9      	ldr	r1, [r7, #12]
 8022570:	6878      	ldr	r0, [r7, #4]
 8022572:	f000 fa5d 	bl	8022a30 <USBD_CtlSendData>
 8022576:	e009      	b.n	802258c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8022578:	6839      	ldr	r1, [r7, #0]
 802257a:	6878      	ldr	r0, [r7, #4]
 802257c:	f000 f9e7 	bl	802294e <USBD_CtlError>
 8022580:	e004      	b.n	802258c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8022582:	6878      	ldr	r0, [r7, #4]
 8022584:	f000 fa91 	bl	8022aaa <USBD_CtlSendStatus>
 8022588:	e000      	b.n	802258c <USBD_GetDescriptor+0x320>
    return;
 802258a:	bf00      	nop
  }
}
 802258c:	3710      	adds	r7, #16
 802258e:	46bd      	mov	sp, r7
 8022590:	bd80      	pop	{r7, pc}
 8022592:	bf00      	nop

08022594 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022594:	b580      	push	{r7, lr}
 8022596:	b084      	sub	sp, #16
 8022598:	af00      	add	r7, sp, #0
 802259a:	6078      	str	r0, [r7, #4]
 802259c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802259e:	683b      	ldr	r3, [r7, #0]
 80225a0:	889b      	ldrh	r3, [r3, #4]
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d131      	bne.n	802260a <USBD_SetAddress+0x76>
 80225a6:	683b      	ldr	r3, [r7, #0]
 80225a8:	88db      	ldrh	r3, [r3, #6]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d12d      	bne.n	802260a <USBD_SetAddress+0x76>
 80225ae:	683b      	ldr	r3, [r7, #0]
 80225b0:	885b      	ldrh	r3, [r3, #2]
 80225b2:	2b7f      	cmp	r3, #127	; 0x7f
 80225b4:	d829      	bhi.n	802260a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80225b6:	683b      	ldr	r3, [r7, #0]
 80225b8:	885b      	ldrh	r3, [r3, #2]
 80225ba:	b2db      	uxtb	r3, r3
 80225bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80225c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80225c8:	b2db      	uxtb	r3, r3
 80225ca:	2b03      	cmp	r3, #3
 80225cc:	d104      	bne.n	80225d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80225ce:	6839      	ldr	r1, [r7, #0]
 80225d0:	6878      	ldr	r0, [r7, #4]
 80225d2:	f000 f9bc 	bl	802294e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80225d6:	e01d      	b.n	8022614 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	7bfa      	ldrb	r2, [r7, #15]
 80225dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80225e0:	7bfb      	ldrb	r3, [r7, #15]
 80225e2:	4619      	mov	r1, r3
 80225e4:	6878      	ldr	r0, [r7, #4]
 80225e6:	f003 fdce 	bl	8026186 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80225ea:	6878      	ldr	r0, [r7, #4]
 80225ec:	f000 fa5d 	bl	8022aaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80225f0:	7bfb      	ldrb	r3, [r7, #15]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d004      	beq.n	8022600 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	2202      	movs	r2, #2
 80225fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80225fe:	e009      	b.n	8022614 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	2201      	movs	r2, #1
 8022604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022608:	e004      	b.n	8022614 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802260a:	6839      	ldr	r1, [r7, #0]
 802260c:	6878      	ldr	r0, [r7, #4]
 802260e:	f000 f99e 	bl	802294e <USBD_CtlError>
  }
}
 8022612:	bf00      	nop
 8022614:	bf00      	nop
 8022616:	3710      	adds	r7, #16
 8022618:	46bd      	mov	sp, r7
 802261a:	bd80      	pop	{r7, pc}

0802261c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802261c:	b580      	push	{r7, lr}
 802261e:	b084      	sub	sp, #16
 8022620:	af00      	add	r7, sp, #0
 8022622:	6078      	str	r0, [r7, #4]
 8022624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8022626:	2300      	movs	r3, #0
 8022628:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802262a:	683b      	ldr	r3, [r7, #0]
 802262c:	885b      	ldrh	r3, [r3, #2]
 802262e:	b2da      	uxtb	r2, r3
 8022630:	4b4e      	ldr	r3, [pc, #312]	; (802276c <USBD_SetConfig+0x150>)
 8022632:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022634:	4b4d      	ldr	r3, [pc, #308]	; (802276c <USBD_SetConfig+0x150>)
 8022636:	781b      	ldrb	r3, [r3, #0]
 8022638:	2b01      	cmp	r3, #1
 802263a:	d905      	bls.n	8022648 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 802263c:	6839      	ldr	r1, [r7, #0]
 802263e:	6878      	ldr	r0, [r7, #4]
 8022640:	f000 f985 	bl	802294e <USBD_CtlError>
    return USBD_FAIL;
 8022644:	2303      	movs	r3, #3
 8022646:	e08c      	b.n	8022762 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802264e:	b2db      	uxtb	r3, r3
 8022650:	2b02      	cmp	r3, #2
 8022652:	d002      	beq.n	802265a <USBD_SetConfig+0x3e>
 8022654:	2b03      	cmp	r3, #3
 8022656:	d029      	beq.n	80226ac <USBD_SetConfig+0x90>
 8022658:	e075      	b.n	8022746 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 802265a:	4b44      	ldr	r3, [pc, #272]	; (802276c <USBD_SetConfig+0x150>)
 802265c:	781b      	ldrb	r3, [r3, #0]
 802265e:	2b00      	cmp	r3, #0
 8022660:	d020      	beq.n	80226a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8022662:	4b42      	ldr	r3, [pc, #264]	; (802276c <USBD_SetConfig+0x150>)
 8022664:	781b      	ldrb	r3, [r3, #0]
 8022666:	461a      	mov	r2, r3
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 802266c:	4b3f      	ldr	r3, [pc, #252]	; (802276c <USBD_SetConfig+0x150>)
 802266e:	781b      	ldrb	r3, [r3, #0]
 8022670:	4619      	mov	r1, r3
 8022672:	6878      	ldr	r0, [r7, #4]
 8022674:	f7fe ffbc 	bl	80215f0 <USBD_SetClassConfig>
 8022678:	4603      	mov	r3, r0
 802267a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 802267c:	7bfb      	ldrb	r3, [r7, #15]
 802267e:	2b00      	cmp	r3, #0
 8022680:	d008      	beq.n	8022694 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8022682:	6839      	ldr	r1, [r7, #0]
 8022684:	6878      	ldr	r0, [r7, #4]
 8022686:	f000 f962 	bl	802294e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	2202      	movs	r2, #2
 802268e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8022692:	e065      	b.n	8022760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8022694:	6878      	ldr	r0, [r7, #4]
 8022696:	f000 fa08 	bl	8022aaa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	2203      	movs	r2, #3
 802269e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80226a2:	e05d      	b.n	8022760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80226a4:	6878      	ldr	r0, [r7, #4]
 80226a6:	f000 fa00 	bl	8022aaa <USBD_CtlSendStatus>
      break;
 80226aa:	e059      	b.n	8022760 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80226ac:	4b2f      	ldr	r3, [pc, #188]	; (802276c <USBD_SetConfig+0x150>)
 80226ae:	781b      	ldrb	r3, [r3, #0]
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d112      	bne.n	80226da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	2202      	movs	r2, #2
 80226b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80226bc:	4b2b      	ldr	r3, [pc, #172]	; (802276c <USBD_SetConfig+0x150>)
 80226be:	781b      	ldrb	r3, [r3, #0]
 80226c0:	461a      	mov	r2, r3
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80226c6:	4b29      	ldr	r3, [pc, #164]	; (802276c <USBD_SetConfig+0x150>)
 80226c8:	781b      	ldrb	r3, [r3, #0]
 80226ca:	4619      	mov	r1, r3
 80226cc:	6878      	ldr	r0, [r7, #4]
 80226ce:	f7fe ffab 	bl	8021628 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80226d2:	6878      	ldr	r0, [r7, #4]
 80226d4:	f000 f9e9 	bl	8022aaa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80226d8:	e042      	b.n	8022760 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80226da:	4b24      	ldr	r3, [pc, #144]	; (802276c <USBD_SetConfig+0x150>)
 80226dc:	781b      	ldrb	r3, [r3, #0]
 80226de:	461a      	mov	r2, r3
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	685b      	ldr	r3, [r3, #4]
 80226e4:	429a      	cmp	r2, r3
 80226e6:	d02a      	beq.n	802273e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	685b      	ldr	r3, [r3, #4]
 80226ec:	b2db      	uxtb	r3, r3
 80226ee:	4619      	mov	r1, r3
 80226f0:	6878      	ldr	r0, [r7, #4]
 80226f2:	f7fe ff99 	bl	8021628 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80226f6:	4b1d      	ldr	r3, [pc, #116]	; (802276c <USBD_SetConfig+0x150>)
 80226f8:	781b      	ldrb	r3, [r3, #0]
 80226fa:	461a      	mov	r2, r3
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8022700:	4b1a      	ldr	r3, [pc, #104]	; (802276c <USBD_SetConfig+0x150>)
 8022702:	781b      	ldrb	r3, [r3, #0]
 8022704:	4619      	mov	r1, r3
 8022706:	6878      	ldr	r0, [r7, #4]
 8022708:	f7fe ff72 	bl	80215f0 <USBD_SetClassConfig>
 802270c:	4603      	mov	r3, r0
 802270e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8022710:	7bfb      	ldrb	r3, [r7, #15]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d00f      	beq.n	8022736 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8022716:	6839      	ldr	r1, [r7, #0]
 8022718:	6878      	ldr	r0, [r7, #4]
 802271a:	f000 f918 	bl	802294e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	685b      	ldr	r3, [r3, #4]
 8022722:	b2db      	uxtb	r3, r3
 8022724:	4619      	mov	r1, r3
 8022726:	6878      	ldr	r0, [r7, #4]
 8022728:	f7fe ff7e 	bl	8021628 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	2202      	movs	r2, #2
 8022730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8022734:	e014      	b.n	8022760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8022736:	6878      	ldr	r0, [r7, #4]
 8022738:	f000 f9b7 	bl	8022aaa <USBD_CtlSendStatus>
      break;
 802273c:	e010      	b.n	8022760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802273e:	6878      	ldr	r0, [r7, #4]
 8022740:	f000 f9b3 	bl	8022aaa <USBD_CtlSendStatus>
      break;
 8022744:	e00c      	b.n	8022760 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8022746:	6839      	ldr	r1, [r7, #0]
 8022748:	6878      	ldr	r0, [r7, #4]
 802274a:	f000 f900 	bl	802294e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 802274e:	4b07      	ldr	r3, [pc, #28]	; (802276c <USBD_SetConfig+0x150>)
 8022750:	781b      	ldrb	r3, [r3, #0]
 8022752:	4619      	mov	r1, r3
 8022754:	6878      	ldr	r0, [r7, #4]
 8022756:	f7fe ff67 	bl	8021628 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 802275a:	2303      	movs	r3, #3
 802275c:	73fb      	strb	r3, [r7, #15]
      break;
 802275e:	bf00      	nop
  }

  return ret;
 8022760:	7bfb      	ldrb	r3, [r7, #15]
}
 8022762:	4618      	mov	r0, r3
 8022764:	3710      	adds	r7, #16
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}
 802276a:	bf00      	nop
 802276c:	20009ad4 	.word	0x20009ad4

08022770 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022770:	b580      	push	{r7, lr}
 8022772:	b082      	sub	sp, #8
 8022774:	af00      	add	r7, sp, #0
 8022776:	6078      	str	r0, [r7, #4]
 8022778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802277a:	683b      	ldr	r3, [r7, #0]
 802277c:	88db      	ldrh	r3, [r3, #6]
 802277e:	2b01      	cmp	r3, #1
 8022780:	d004      	beq.n	802278c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8022782:	6839      	ldr	r1, [r7, #0]
 8022784:	6878      	ldr	r0, [r7, #4]
 8022786:	f000 f8e2 	bl	802294e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802278a:	e023      	b.n	80227d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 802278c:	687b      	ldr	r3, [r7, #4]
 802278e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022792:	b2db      	uxtb	r3, r3
 8022794:	2b02      	cmp	r3, #2
 8022796:	dc02      	bgt.n	802279e <USBD_GetConfig+0x2e>
 8022798:	2b00      	cmp	r3, #0
 802279a:	dc03      	bgt.n	80227a4 <USBD_GetConfig+0x34>
 802279c:	e015      	b.n	80227ca <USBD_GetConfig+0x5a>
 802279e:	2b03      	cmp	r3, #3
 80227a0:	d00b      	beq.n	80227ba <USBD_GetConfig+0x4a>
 80227a2:	e012      	b.n	80227ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	2200      	movs	r2, #0
 80227a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	3308      	adds	r3, #8
 80227ae:	2201      	movs	r2, #1
 80227b0:	4619      	mov	r1, r3
 80227b2:	6878      	ldr	r0, [r7, #4]
 80227b4:	f000 f93c 	bl	8022a30 <USBD_CtlSendData>
        break;
 80227b8:	e00c      	b.n	80227d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	3304      	adds	r3, #4
 80227be:	2201      	movs	r2, #1
 80227c0:	4619      	mov	r1, r3
 80227c2:	6878      	ldr	r0, [r7, #4]
 80227c4:	f000 f934 	bl	8022a30 <USBD_CtlSendData>
        break;
 80227c8:	e004      	b.n	80227d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80227ca:	6839      	ldr	r1, [r7, #0]
 80227cc:	6878      	ldr	r0, [r7, #4]
 80227ce:	f000 f8be 	bl	802294e <USBD_CtlError>
        break;
 80227d2:	bf00      	nop
}
 80227d4:	bf00      	nop
 80227d6:	3708      	adds	r7, #8
 80227d8:	46bd      	mov	sp, r7
 80227da:	bd80      	pop	{r7, pc}

080227dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b082      	sub	sp, #8
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
 80227e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80227ec:	b2db      	uxtb	r3, r3
 80227ee:	3b01      	subs	r3, #1
 80227f0:	2b02      	cmp	r3, #2
 80227f2:	d81e      	bhi.n	8022832 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80227f4:	683b      	ldr	r3, [r7, #0]
 80227f6:	88db      	ldrh	r3, [r3, #6]
 80227f8:	2b02      	cmp	r3, #2
 80227fa:	d004      	beq.n	8022806 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80227fc:	6839      	ldr	r1, [r7, #0]
 80227fe:	6878      	ldr	r0, [r7, #4]
 8022800:	f000 f8a5 	bl	802294e <USBD_CtlError>
        break;
 8022804:	e01a      	b.n	802283c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	2201      	movs	r2, #1
 802280a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8022812:	2b00      	cmp	r3, #0
 8022814:	d005      	beq.n	8022822 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	68db      	ldr	r3, [r3, #12]
 802281a:	f043 0202 	orr.w	r2, r3, #2
 802281e:	687b      	ldr	r3, [r7, #4]
 8022820:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	330c      	adds	r3, #12
 8022826:	2202      	movs	r2, #2
 8022828:	4619      	mov	r1, r3
 802282a:	6878      	ldr	r0, [r7, #4]
 802282c:	f000 f900 	bl	8022a30 <USBD_CtlSendData>
      break;
 8022830:	e004      	b.n	802283c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8022832:	6839      	ldr	r1, [r7, #0]
 8022834:	6878      	ldr	r0, [r7, #4]
 8022836:	f000 f88a 	bl	802294e <USBD_CtlError>
      break;
 802283a:	bf00      	nop
  }
}
 802283c:	bf00      	nop
 802283e:	3708      	adds	r7, #8
 8022840:	46bd      	mov	sp, r7
 8022842:	bd80      	pop	{r7, pc}

08022844 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022844:	b580      	push	{r7, lr}
 8022846:	b082      	sub	sp, #8
 8022848:	af00      	add	r7, sp, #0
 802284a:	6078      	str	r0, [r7, #4]
 802284c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802284e:	683b      	ldr	r3, [r7, #0]
 8022850:	885b      	ldrh	r3, [r3, #2]
 8022852:	2b01      	cmp	r3, #1
 8022854:	d107      	bne.n	8022866 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	2201      	movs	r2, #1
 802285a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 802285e:	6878      	ldr	r0, [r7, #4]
 8022860:	f000 f923 	bl	8022aaa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8022864:	e013      	b.n	802288e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8022866:	683b      	ldr	r3, [r7, #0]
 8022868:	885b      	ldrh	r3, [r3, #2]
 802286a:	2b02      	cmp	r3, #2
 802286c:	d10b      	bne.n	8022886 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 802286e:	683b      	ldr	r3, [r7, #0]
 8022870:	889b      	ldrh	r3, [r3, #4]
 8022872:	0a1b      	lsrs	r3, r3, #8
 8022874:	b29b      	uxth	r3, r3
 8022876:	b2da      	uxtb	r2, r3
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 802287e:	6878      	ldr	r0, [r7, #4]
 8022880:	f000 f913 	bl	8022aaa <USBD_CtlSendStatus>
}
 8022884:	e003      	b.n	802288e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8022886:	6839      	ldr	r1, [r7, #0]
 8022888:	6878      	ldr	r0, [r7, #4]
 802288a:	f000 f860 	bl	802294e <USBD_CtlError>
}
 802288e:	bf00      	nop
 8022890:	3708      	adds	r7, #8
 8022892:	46bd      	mov	sp, r7
 8022894:	bd80      	pop	{r7, pc}

08022896 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022896:	b580      	push	{r7, lr}
 8022898:	b082      	sub	sp, #8
 802289a:	af00      	add	r7, sp, #0
 802289c:	6078      	str	r0, [r7, #4]
 802289e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80228a6:	b2db      	uxtb	r3, r3
 80228a8:	3b01      	subs	r3, #1
 80228aa:	2b02      	cmp	r3, #2
 80228ac:	d80b      	bhi.n	80228c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80228ae:	683b      	ldr	r3, [r7, #0]
 80228b0:	885b      	ldrh	r3, [r3, #2]
 80228b2:	2b01      	cmp	r3, #1
 80228b4:	d10c      	bne.n	80228d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	2200      	movs	r2, #0
 80228ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80228be:	6878      	ldr	r0, [r7, #4]
 80228c0:	f000 f8f3 	bl	8022aaa <USBD_CtlSendStatus>
      }
      break;
 80228c4:	e004      	b.n	80228d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80228c6:	6839      	ldr	r1, [r7, #0]
 80228c8:	6878      	ldr	r0, [r7, #4]
 80228ca:	f000 f840 	bl	802294e <USBD_CtlError>
      break;
 80228ce:	e000      	b.n	80228d2 <USBD_ClrFeature+0x3c>
      break;
 80228d0:	bf00      	nop
  }
}
 80228d2:	bf00      	nop
 80228d4:	3708      	adds	r7, #8
 80228d6:	46bd      	mov	sp, r7
 80228d8:	bd80      	pop	{r7, pc}

080228da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80228da:	b580      	push	{r7, lr}
 80228dc:	b084      	sub	sp, #16
 80228de:	af00      	add	r7, sp, #0
 80228e0:	6078      	str	r0, [r7, #4]
 80228e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80228e4:	683b      	ldr	r3, [r7, #0]
 80228e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	781a      	ldrb	r2, [r3, #0]
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80228f0:	68fb      	ldr	r3, [r7, #12]
 80228f2:	3301      	adds	r3, #1
 80228f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80228f6:	68fb      	ldr	r3, [r7, #12]
 80228f8:	781a      	ldrb	r2, [r3, #0]
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80228fe:	68fb      	ldr	r3, [r7, #12]
 8022900:	3301      	adds	r3, #1
 8022902:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8022904:	68f8      	ldr	r0, [r7, #12]
 8022906:	f7ff fa16 	bl	8021d36 <SWAPBYTE>
 802290a:	4603      	mov	r3, r0
 802290c:	461a      	mov	r2, r3
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8022912:	68fb      	ldr	r3, [r7, #12]
 8022914:	3301      	adds	r3, #1
 8022916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	3301      	adds	r3, #1
 802291c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 802291e:	68f8      	ldr	r0, [r7, #12]
 8022920:	f7ff fa09 	bl	8021d36 <SWAPBYTE>
 8022924:	4603      	mov	r3, r0
 8022926:	461a      	mov	r2, r3
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 802292c:	68fb      	ldr	r3, [r7, #12]
 802292e:	3301      	adds	r3, #1
 8022930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022932:	68fb      	ldr	r3, [r7, #12]
 8022934:	3301      	adds	r3, #1
 8022936:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8022938:	68f8      	ldr	r0, [r7, #12]
 802293a:	f7ff f9fc 	bl	8021d36 <SWAPBYTE>
 802293e:	4603      	mov	r3, r0
 8022940:	461a      	mov	r2, r3
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	80da      	strh	r2, [r3, #6]
}
 8022946:	bf00      	nop
 8022948:	3710      	adds	r7, #16
 802294a:	46bd      	mov	sp, r7
 802294c:	bd80      	pop	{r7, pc}

0802294e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802294e:	b580      	push	{r7, lr}
 8022950:	b082      	sub	sp, #8
 8022952:	af00      	add	r7, sp, #0
 8022954:	6078      	str	r0, [r7, #4]
 8022956:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8022958:	2180      	movs	r1, #128	; 0x80
 802295a:	6878      	ldr	r0, [r7, #4]
 802295c:	f003 fba9 	bl	80260b2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8022960:	2100      	movs	r1, #0
 8022962:	6878      	ldr	r0, [r7, #4]
 8022964:	f003 fba5 	bl	80260b2 <USBD_LL_StallEP>
}
 8022968:	bf00      	nop
 802296a:	3708      	adds	r7, #8
 802296c:	46bd      	mov	sp, r7
 802296e:	bd80      	pop	{r7, pc}

08022970 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022970:	b580      	push	{r7, lr}
 8022972:	b086      	sub	sp, #24
 8022974:	af00      	add	r7, sp, #0
 8022976:	60f8      	str	r0, [r7, #12]
 8022978:	60b9      	str	r1, [r7, #8]
 802297a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 802297c:	2300      	movs	r3, #0
 802297e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	2b00      	cmp	r3, #0
 8022984:	d036      	beq.n	80229f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8022986:	68fb      	ldr	r3, [r7, #12]
 8022988:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 802298a:	6938      	ldr	r0, [r7, #16]
 802298c:	f000 f836 	bl	80229fc <USBD_GetLen>
 8022990:	4603      	mov	r3, r0
 8022992:	3301      	adds	r3, #1
 8022994:	b29b      	uxth	r3, r3
 8022996:	005b      	lsls	r3, r3, #1
 8022998:	b29a      	uxth	r2, r3
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 802299e:	7dfb      	ldrb	r3, [r7, #23]
 80229a0:	68ba      	ldr	r2, [r7, #8]
 80229a2:	4413      	add	r3, r2
 80229a4:	687a      	ldr	r2, [r7, #4]
 80229a6:	7812      	ldrb	r2, [r2, #0]
 80229a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80229aa:	7dfb      	ldrb	r3, [r7, #23]
 80229ac:	3301      	adds	r3, #1
 80229ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80229b0:	7dfb      	ldrb	r3, [r7, #23]
 80229b2:	68ba      	ldr	r2, [r7, #8]
 80229b4:	4413      	add	r3, r2
 80229b6:	2203      	movs	r2, #3
 80229b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80229ba:	7dfb      	ldrb	r3, [r7, #23]
 80229bc:	3301      	adds	r3, #1
 80229be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80229c0:	e013      	b.n	80229ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80229c2:	7dfb      	ldrb	r3, [r7, #23]
 80229c4:	68ba      	ldr	r2, [r7, #8]
 80229c6:	4413      	add	r3, r2
 80229c8:	693a      	ldr	r2, [r7, #16]
 80229ca:	7812      	ldrb	r2, [r2, #0]
 80229cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80229ce:	693b      	ldr	r3, [r7, #16]
 80229d0:	3301      	adds	r3, #1
 80229d2:	613b      	str	r3, [r7, #16]
    idx++;
 80229d4:	7dfb      	ldrb	r3, [r7, #23]
 80229d6:	3301      	adds	r3, #1
 80229d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80229da:	7dfb      	ldrb	r3, [r7, #23]
 80229dc:	68ba      	ldr	r2, [r7, #8]
 80229de:	4413      	add	r3, r2
 80229e0:	2200      	movs	r2, #0
 80229e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80229e4:	7dfb      	ldrb	r3, [r7, #23]
 80229e6:	3301      	adds	r3, #1
 80229e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80229ea:	693b      	ldr	r3, [r7, #16]
 80229ec:	781b      	ldrb	r3, [r3, #0]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d1e7      	bne.n	80229c2 <USBD_GetString+0x52>
 80229f2:	e000      	b.n	80229f6 <USBD_GetString+0x86>
    return;
 80229f4:	bf00      	nop
  }
}
 80229f6:	3718      	adds	r7, #24
 80229f8:	46bd      	mov	sp, r7
 80229fa:	bd80      	pop	{r7, pc}

080229fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80229fc:	b480      	push	{r7}
 80229fe:	b085      	sub	sp, #20
 8022a00:	af00      	add	r7, sp, #0
 8022a02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022a04:	2300      	movs	r3, #0
 8022a06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022a0c:	e005      	b.n	8022a1a <USBD_GetLen+0x1e>
  {
    len++;
 8022a0e:	7bfb      	ldrb	r3, [r7, #15]
 8022a10:	3301      	adds	r3, #1
 8022a12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8022a14:	68bb      	ldr	r3, [r7, #8]
 8022a16:	3301      	adds	r3, #1
 8022a18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022a1a:	68bb      	ldr	r3, [r7, #8]
 8022a1c:	781b      	ldrb	r3, [r3, #0]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d1f5      	bne.n	8022a0e <USBD_GetLen+0x12>
  }

  return len;
 8022a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a24:	4618      	mov	r0, r3
 8022a26:	3714      	adds	r7, #20
 8022a28:	46bd      	mov	sp, r7
 8022a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a2e:	4770      	bx	lr

08022a30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8022a30:	b580      	push	{r7, lr}
 8022a32:	b084      	sub	sp, #16
 8022a34:	af00      	add	r7, sp, #0
 8022a36:	60f8      	str	r0, [r7, #12]
 8022a38:	60b9      	str	r1, [r7, #8]
 8022a3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022a3c:	68fb      	ldr	r3, [r7, #12]
 8022a3e:	2202      	movs	r2, #2
 8022a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	687a      	ldr	r2, [r7, #4]
 8022a48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022a4a:	68fb      	ldr	r3, [r7, #12]
 8022a4c:	687a      	ldr	r2, [r7, #4]
 8022a4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	68ba      	ldr	r2, [r7, #8]
 8022a54:	2100      	movs	r1, #0
 8022a56:	68f8      	ldr	r0, [r7, #12]
 8022a58:	f003 fbb4 	bl	80261c4 <USBD_LL_Transmit>

  return USBD_OK;
 8022a5c:	2300      	movs	r3, #0
}
 8022a5e:	4618      	mov	r0, r3
 8022a60:	3710      	adds	r7, #16
 8022a62:	46bd      	mov	sp, r7
 8022a64:	bd80      	pop	{r7, pc}

08022a66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022a66:	b580      	push	{r7, lr}
 8022a68:	b084      	sub	sp, #16
 8022a6a:	af00      	add	r7, sp, #0
 8022a6c:	60f8      	str	r0, [r7, #12]
 8022a6e:	60b9      	str	r1, [r7, #8]
 8022a70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	68ba      	ldr	r2, [r7, #8]
 8022a76:	2100      	movs	r1, #0
 8022a78:	68f8      	ldr	r0, [r7, #12]
 8022a7a:	f003 fba3 	bl	80261c4 <USBD_LL_Transmit>

  return USBD_OK;
 8022a7e:	2300      	movs	r3, #0
}
 8022a80:	4618      	mov	r0, r3
 8022a82:	3710      	adds	r7, #16
 8022a84:	46bd      	mov	sp, r7
 8022a86:	bd80      	pop	{r7, pc}

08022a88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b084      	sub	sp, #16
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	60f8      	str	r0, [r7, #12]
 8022a90:	60b9      	str	r1, [r7, #8]
 8022a92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	68ba      	ldr	r2, [r7, #8]
 8022a98:	2100      	movs	r1, #0
 8022a9a:	68f8      	ldr	r0, [r7, #12]
 8022a9c:	f003 fbb3 	bl	8026206 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022aa0:	2300      	movs	r3, #0
}
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	3710      	adds	r7, #16
 8022aa6:	46bd      	mov	sp, r7
 8022aa8:	bd80      	pop	{r7, pc}

08022aaa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022aaa:	b580      	push	{r7, lr}
 8022aac:	b082      	sub	sp, #8
 8022aae:	af00      	add	r7, sp, #0
 8022ab0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	2204      	movs	r2, #4
 8022ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022aba:	2300      	movs	r3, #0
 8022abc:	2200      	movs	r2, #0
 8022abe:	2100      	movs	r1, #0
 8022ac0:	6878      	ldr	r0, [r7, #4]
 8022ac2:	f003 fb7f 	bl	80261c4 <USBD_LL_Transmit>

  return USBD_OK;
 8022ac6:	2300      	movs	r3, #0
}
 8022ac8:	4618      	mov	r0, r3
 8022aca:	3708      	adds	r7, #8
 8022acc:	46bd      	mov	sp, r7
 8022ace:	bd80      	pop	{r7, pc}

08022ad0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b082      	sub	sp, #8
 8022ad4:	af00      	add	r7, sp, #0
 8022ad6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	2205      	movs	r2, #5
 8022adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	2100      	movs	r1, #0
 8022ae6:	6878      	ldr	r0, [r7, #4]
 8022ae8:	f003 fb8d 	bl	8026206 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022aec:	2300      	movs	r3, #0
}
 8022aee:	4618      	mov	r0, r3
 8022af0:	3708      	adds	r7, #8
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bd80      	pop	{r7, pc}
	...

08022af8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8022af8:	b580      	push	{r7, lr}
 8022afa:	b084      	sub	sp, #16
 8022afc:	af00      	add	r7, sp, #0
 8022afe:	4603      	mov	r3, r0
 8022b00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8022b02:	79fb      	ldrb	r3, [r7, #7]
 8022b04:	4a08      	ldr	r2, [pc, #32]	; (8022b28 <disk_status+0x30>)
 8022b06:	009b      	lsls	r3, r3, #2
 8022b08:	4413      	add	r3, r2
 8022b0a:	685b      	ldr	r3, [r3, #4]
 8022b0c:	685b      	ldr	r3, [r3, #4]
 8022b0e:	79fa      	ldrb	r2, [r7, #7]
 8022b10:	4905      	ldr	r1, [pc, #20]	; (8022b28 <disk_status+0x30>)
 8022b12:	440a      	add	r2, r1
 8022b14:	7a12      	ldrb	r2, [r2, #8]
 8022b16:	4610      	mov	r0, r2
 8022b18:	4798      	blx	r3
 8022b1a:	4603      	mov	r3, r0
 8022b1c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8022b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b20:	4618      	mov	r0, r3
 8022b22:	3710      	adds	r7, #16
 8022b24:	46bd      	mov	sp, r7
 8022b26:	bd80      	pop	{r7, pc}
 8022b28:	20009b00 	.word	0x20009b00

08022b2c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	b084      	sub	sp, #16
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	4603      	mov	r3, r0
 8022b34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8022b36:	2300      	movs	r3, #0
 8022b38:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8022b3a:	79fb      	ldrb	r3, [r7, #7]
 8022b3c:	4a0d      	ldr	r2, [pc, #52]	; (8022b74 <disk_initialize+0x48>)
 8022b3e:	5cd3      	ldrb	r3, [r2, r3]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d111      	bne.n	8022b68 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8022b44:	79fb      	ldrb	r3, [r7, #7]
 8022b46:	4a0b      	ldr	r2, [pc, #44]	; (8022b74 <disk_initialize+0x48>)
 8022b48:	2101      	movs	r1, #1
 8022b4a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8022b4c:	79fb      	ldrb	r3, [r7, #7]
 8022b4e:	4a09      	ldr	r2, [pc, #36]	; (8022b74 <disk_initialize+0x48>)
 8022b50:	009b      	lsls	r3, r3, #2
 8022b52:	4413      	add	r3, r2
 8022b54:	685b      	ldr	r3, [r3, #4]
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	79fa      	ldrb	r2, [r7, #7]
 8022b5a:	4906      	ldr	r1, [pc, #24]	; (8022b74 <disk_initialize+0x48>)
 8022b5c:	440a      	add	r2, r1
 8022b5e:	7a12      	ldrb	r2, [r2, #8]
 8022b60:	4610      	mov	r0, r2
 8022b62:	4798      	blx	r3
 8022b64:	4603      	mov	r3, r0
 8022b66:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8022b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b6a:	4618      	mov	r0, r3
 8022b6c:	3710      	adds	r7, #16
 8022b6e:	46bd      	mov	sp, r7
 8022b70:	bd80      	pop	{r7, pc}
 8022b72:	bf00      	nop
 8022b74:	20009b00 	.word	0x20009b00

08022b78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8022b78:	b590      	push	{r4, r7, lr}
 8022b7a:	b087      	sub	sp, #28
 8022b7c:	af00      	add	r7, sp, #0
 8022b7e:	60b9      	str	r1, [r7, #8]
 8022b80:	607a      	str	r2, [r7, #4]
 8022b82:	603b      	str	r3, [r7, #0]
 8022b84:	4603      	mov	r3, r0
 8022b86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8022b88:	7bfb      	ldrb	r3, [r7, #15]
 8022b8a:	4a0a      	ldr	r2, [pc, #40]	; (8022bb4 <disk_read+0x3c>)
 8022b8c:	009b      	lsls	r3, r3, #2
 8022b8e:	4413      	add	r3, r2
 8022b90:	685b      	ldr	r3, [r3, #4]
 8022b92:	689c      	ldr	r4, [r3, #8]
 8022b94:	7bfb      	ldrb	r3, [r7, #15]
 8022b96:	4a07      	ldr	r2, [pc, #28]	; (8022bb4 <disk_read+0x3c>)
 8022b98:	4413      	add	r3, r2
 8022b9a:	7a18      	ldrb	r0, [r3, #8]
 8022b9c:	683b      	ldr	r3, [r7, #0]
 8022b9e:	687a      	ldr	r2, [r7, #4]
 8022ba0:	68b9      	ldr	r1, [r7, #8]
 8022ba2:	47a0      	blx	r4
 8022ba4:	4603      	mov	r3, r0
 8022ba6:	75fb      	strb	r3, [r7, #23]
  return res;
 8022ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8022baa:	4618      	mov	r0, r3
 8022bac:	371c      	adds	r7, #28
 8022bae:	46bd      	mov	sp, r7
 8022bb0:	bd90      	pop	{r4, r7, pc}
 8022bb2:	bf00      	nop
 8022bb4:	20009b00 	.word	0x20009b00

08022bb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8022bb8:	b590      	push	{r4, r7, lr}
 8022bba:	b087      	sub	sp, #28
 8022bbc:	af00      	add	r7, sp, #0
 8022bbe:	60b9      	str	r1, [r7, #8]
 8022bc0:	607a      	str	r2, [r7, #4]
 8022bc2:	603b      	str	r3, [r7, #0]
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8022bc8:	7bfb      	ldrb	r3, [r7, #15]
 8022bca:	4a0a      	ldr	r2, [pc, #40]	; (8022bf4 <disk_write+0x3c>)
 8022bcc:	009b      	lsls	r3, r3, #2
 8022bce:	4413      	add	r3, r2
 8022bd0:	685b      	ldr	r3, [r3, #4]
 8022bd2:	68dc      	ldr	r4, [r3, #12]
 8022bd4:	7bfb      	ldrb	r3, [r7, #15]
 8022bd6:	4a07      	ldr	r2, [pc, #28]	; (8022bf4 <disk_write+0x3c>)
 8022bd8:	4413      	add	r3, r2
 8022bda:	7a18      	ldrb	r0, [r3, #8]
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	687a      	ldr	r2, [r7, #4]
 8022be0:	68b9      	ldr	r1, [r7, #8]
 8022be2:	47a0      	blx	r4
 8022be4:	4603      	mov	r3, r0
 8022be6:	75fb      	strb	r3, [r7, #23]
  return res;
 8022be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8022bea:	4618      	mov	r0, r3
 8022bec:	371c      	adds	r7, #28
 8022bee:	46bd      	mov	sp, r7
 8022bf0:	bd90      	pop	{r4, r7, pc}
 8022bf2:	bf00      	nop
 8022bf4:	20009b00 	.word	0x20009b00

08022bf8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b084      	sub	sp, #16
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	4603      	mov	r3, r0
 8022c00:	603a      	str	r2, [r7, #0]
 8022c02:	71fb      	strb	r3, [r7, #7]
 8022c04:	460b      	mov	r3, r1
 8022c06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8022c08:	79fb      	ldrb	r3, [r7, #7]
 8022c0a:	4a09      	ldr	r2, [pc, #36]	; (8022c30 <disk_ioctl+0x38>)
 8022c0c:	009b      	lsls	r3, r3, #2
 8022c0e:	4413      	add	r3, r2
 8022c10:	685b      	ldr	r3, [r3, #4]
 8022c12:	691b      	ldr	r3, [r3, #16]
 8022c14:	79fa      	ldrb	r2, [r7, #7]
 8022c16:	4906      	ldr	r1, [pc, #24]	; (8022c30 <disk_ioctl+0x38>)
 8022c18:	440a      	add	r2, r1
 8022c1a:	7a10      	ldrb	r0, [r2, #8]
 8022c1c:	79b9      	ldrb	r1, [r7, #6]
 8022c1e:	683a      	ldr	r2, [r7, #0]
 8022c20:	4798      	blx	r3
 8022c22:	4603      	mov	r3, r0
 8022c24:	73fb      	strb	r3, [r7, #15]
  return res;
 8022c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c28:	4618      	mov	r0, r3
 8022c2a:	3710      	adds	r7, #16
 8022c2c:	46bd      	mov	sp, r7
 8022c2e:	bd80      	pop	{r7, pc}
 8022c30:	20009b00 	.word	0x20009b00

08022c34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8022c34:	b480      	push	{r7}
 8022c36:	b085      	sub	sp, #20
 8022c38:	af00      	add	r7, sp, #0
 8022c3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	3301      	adds	r3, #1
 8022c40:	781b      	ldrb	r3, [r3, #0]
 8022c42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8022c44:	89fb      	ldrh	r3, [r7, #14]
 8022c46:	021b      	lsls	r3, r3, #8
 8022c48:	b21a      	sxth	r2, r3
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	781b      	ldrb	r3, [r3, #0]
 8022c4e:	b21b      	sxth	r3, r3
 8022c50:	4313      	orrs	r3, r2
 8022c52:	b21b      	sxth	r3, r3
 8022c54:	81fb      	strh	r3, [r7, #14]
	return rv;
 8022c56:	89fb      	ldrh	r3, [r7, #14]
}
 8022c58:	4618      	mov	r0, r3
 8022c5a:	3714      	adds	r7, #20
 8022c5c:	46bd      	mov	sp, r7
 8022c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c62:	4770      	bx	lr

08022c64 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8022c64:	b480      	push	{r7}
 8022c66:	b085      	sub	sp, #20
 8022c68:	af00      	add	r7, sp, #0
 8022c6a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8022c6c:	687b      	ldr	r3, [r7, #4]
 8022c6e:	3303      	adds	r3, #3
 8022c70:	781b      	ldrb	r3, [r3, #0]
 8022c72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8022c74:	68fb      	ldr	r3, [r7, #12]
 8022c76:	021b      	lsls	r3, r3, #8
 8022c78:	687a      	ldr	r2, [r7, #4]
 8022c7a:	3202      	adds	r2, #2
 8022c7c:	7812      	ldrb	r2, [r2, #0]
 8022c7e:	4313      	orrs	r3, r2
 8022c80:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8022c82:	68fb      	ldr	r3, [r7, #12]
 8022c84:	021b      	lsls	r3, r3, #8
 8022c86:	687a      	ldr	r2, [r7, #4]
 8022c88:	3201      	adds	r2, #1
 8022c8a:	7812      	ldrb	r2, [r2, #0]
 8022c8c:	4313      	orrs	r3, r2
 8022c8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8022c90:	68fb      	ldr	r3, [r7, #12]
 8022c92:	021b      	lsls	r3, r3, #8
 8022c94:	687a      	ldr	r2, [r7, #4]
 8022c96:	7812      	ldrb	r2, [r2, #0]
 8022c98:	4313      	orrs	r3, r2
 8022c9a:	60fb      	str	r3, [r7, #12]
	return rv;
 8022c9c:	68fb      	ldr	r3, [r7, #12]
}
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	3714      	adds	r7, #20
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ca8:	4770      	bx	lr

08022caa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8022caa:	b480      	push	{r7}
 8022cac:	b083      	sub	sp, #12
 8022cae:	af00      	add	r7, sp, #0
 8022cb0:	6078      	str	r0, [r7, #4]
 8022cb2:	460b      	mov	r3, r1
 8022cb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	1c5a      	adds	r2, r3, #1
 8022cba:	607a      	str	r2, [r7, #4]
 8022cbc:	887a      	ldrh	r2, [r7, #2]
 8022cbe:	b2d2      	uxtb	r2, r2
 8022cc0:	701a      	strb	r2, [r3, #0]
 8022cc2:	887b      	ldrh	r3, [r7, #2]
 8022cc4:	0a1b      	lsrs	r3, r3, #8
 8022cc6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	1c5a      	adds	r2, r3, #1
 8022ccc:	607a      	str	r2, [r7, #4]
 8022cce:	887a      	ldrh	r2, [r7, #2]
 8022cd0:	b2d2      	uxtb	r2, r2
 8022cd2:	701a      	strb	r2, [r3, #0]
}
 8022cd4:	bf00      	nop
 8022cd6:	370c      	adds	r7, #12
 8022cd8:	46bd      	mov	sp, r7
 8022cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cde:	4770      	bx	lr

08022ce0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8022ce0:	b480      	push	{r7}
 8022ce2:	b083      	sub	sp, #12
 8022ce4:	af00      	add	r7, sp, #0
 8022ce6:	6078      	str	r0, [r7, #4]
 8022ce8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022cea:	687b      	ldr	r3, [r7, #4]
 8022cec:	1c5a      	adds	r2, r3, #1
 8022cee:	607a      	str	r2, [r7, #4]
 8022cf0:	683a      	ldr	r2, [r7, #0]
 8022cf2:	b2d2      	uxtb	r2, r2
 8022cf4:	701a      	strb	r2, [r3, #0]
 8022cf6:	683b      	ldr	r3, [r7, #0]
 8022cf8:	0a1b      	lsrs	r3, r3, #8
 8022cfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	1c5a      	adds	r2, r3, #1
 8022d00:	607a      	str	r2, [r7, #4]
 8022d02:	683a      	ldr	r2, [r7, #0]
 8022d04:	b2d2      	uxtb	r2, r2
 8022d06:	701a      	strb	r2, [r3, #0]
 8022d08:	683b      	ldr	r3, [r7, #0]
 8022d0a:	0a1b      	lsrs	r3, r3, #8
 8022d0c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	1c5a      	adds	r2, r3, #1
 8022d12:	607a      	str	r2, [r7, #4]
 8022d14:	683a      	ldr	r2, [r7, #0]
 8022d16:	b2d2      	uxtb	r2, r2
 8022d18:	701a      	strb	r2, [r3, #0]
 8022d1a:	683b      	ldr	r3, [r7, #0]
 8022d1c:	0a1b      	lsrs	r3, r3, #8
 8022d1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	1c5a      	adds	r2, r3, #1
 8022d24:	607a      	str	r2, [r7, #4]
 8022d26:	683a      	ldr	r2, [r7, #0]
 8022d28:	b2d2      	uxtb	r2, r2
 8022d2a:	701a      	strb	r2, [r3, #0]
}
 8022d2c:	bf00      	nop
 8022d2e:	370c      	adds	r7, #12
 8022d30:	46bd      	mov	sp, r7
 8022d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d36:	4770      	bx	lr

08022d38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8022d38:	b480      	push	{r7}
 8022d3a:	b087      	sub	sp, #28
 8022d3c:	af00      	add	r7, sp, #0
 8022d3e:	60f8      	str	r0, [r7, #12]
 8022d40:	60b9      	str	r1, [r7, #8]
 8022d42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022d44:	68fb      	ldr	r3, [r7, #12]
 8022d46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8022d48:	68bb      	ldr	r3, [r7, #8]
 8022d4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d00d      	beq.n	8022d6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8022d52:	693a      	ldr	r2, [r7, #16]
 8022d54:	1c53      	adds	r3, r2, #1
 8022d56:	613b      	str	r3, [r7, #16]
 8022d58:	697b      	ldr	r3, [r7, #20]
 8022d5a:	1c59      	adds	r1, r3, #1
 8022d5c:	6179      	str	r1, [r7, #20]
 8022d5e:	7812      	ldrb	r2, [r2, #0]
 8022d60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	3b01      	subs	r3, #1
 8022d66:	607b      	str	r3, [r7, #4]
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d1f1      	bne.n	8022d52 <mem_cpy+0x1a>
	}
}
 8022d6e:	bf00      	nop
 8022d70:	371c      	adds	r7, #28
 8022d72:	46bd      	mov	sp, r7
 8022d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d78:	4770      	bx	lr

08022d7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8022d7a:	b480      	push	{r7}
 8022d7c:	b087      	sub	sp, #28
 8022d7e:	af00      	add	r7, sp, #0
 8022d80:	60f8      	str	r0, [r7, #12]
 8022d82:	60b9      	str	r1, [r7, #8]
 8022d84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022d86:	68fb      	ldr	r3, [r7, #12]
 8022d88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8022d8a:	697b      	ldr	r3, [r7, #20]
 8022d8c:	1c5a      	adds	r2, r3, #1
 8022d8e:	617a      	str	r2, [r7, #20]
 8022d90:	68ba      	ldr	r2, [r7, #8]
 8022d92:	b2d2      	uxtb	r2, r2
 8022d94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	3b01      	subs	r3, #1
 8022d9a:	607b      	str	r3, [r7, #4]
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	2b00      	cmp	r3, #0
 8022da0:	d1f3      	bne.n	8022d8a <mem_set+0x10>
}
 8022da2:	bf00      	nop
 8022da4:	bf00      	nop
 8022da6:	371c      	adds	r7, #28
 8022da8:	46bd      	mov	sp, r7
 8022daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dae:	4770      	bx	lr

08022db0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8022db0:	b480      	push	{r7}
 8022db2:	b089      	sub	sp, #36	; 0x24
 8022db4:	af00      	add	r7, sp, #0
 8022db6:	60f8      	str	r0, [r7, #12]
 8022db8:	60b9      	str	r1, [r7, #8]
 8022dba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8022dbc:	68fb      	ldr	r3, [r7, #12]
 8022dbe:	61fb      	str	r3, [r7, #28]
 8022dc0:	68bb      	ldr	r3, [r7, #8]
 8022dc2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8022dc4:	2300      	movs	r3, #0
 8022dc6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8022dc8:	69fb      	ldr	r3, [r7, #28]
 8022dca:	1c5a      	adds	r2, r3, #1
 8022dcc:	61fa      	str	r2, [r7, #28]
 8022dce:	781b      	ldrb	r3, [r3, #0]
 8022dd0:	4619      	mov	r1, r3
 8022dd2:	69bb      	ldr	r3, [r7, #24]
 8022dd4:	1c5a      	adds	r2, r3, #1
 8022dd6:	61ba      	str	r2, [r7, #24]
 8022dd8:	781b      	ldrb	r3, [r3, #0]
 8022dda:	1acb      	subs	r3, r1, r3
 8022ddc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	3b01      	subs	r3, #1
 8022de2:	607b      	str	r3, [r7, #4]
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d002      	beq.n	8022df0 <mem_cmp+0x40>
 8022dea:	697b      	ldr	r3, [r7, #20]
 8022dec:	2b00      	cmp	r3, #0
 8022dee:	d0eb      	beq.n	8022dc8 <mem_cmp+0x18>

	return r;
 8022df0:	697b      	ldr	r3, [r7, #20]
}
 8022df2:	4618      	mov	r0, r3
 8022df4:	3724      	adds	r7, #36	; 0x24
 8022df6:	46bd      	mov	sp, r7
 8022df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dfc:	4770      	bx	lr

08022dfe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8022dfe:	b480      	push	{r7}
 8022e00:	b083      	sub	sp, #12
 8022e02:	af00      	add	r7, sp, #0
 8022e04:	6078      	str	r0, [r7, #4]
 8022e06:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8022e08:	e002      	b.n	8022e10 <chk_chr+0x12>
 8022e0a:	687b      	ldr	r3, [r7, #4]
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	607b      	str	r3, [r7, #4]
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	781b      	ldrb	r3, [r3, #0]
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	d005      	beq.n	8022e24 <chk_chr+0x26>
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	781b      	ldrb	r3, [r3, #0]
 8022e1c:	461a      	mov	r2, r3
 8022e1e:	683b      	ldr	r3, [r7, #0]
 8022e20:	4293      	cmp	r3, r2
 8022e22:	d1f2      	bne.n	8022e0a <chk_chr+0xc>
	return *str;
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	781b      	ldrb	r3, [r3, #0]
}
 8022e28:	4618      	mov	r0, r3
 8022e2a:	370c      	adds	r7, #12
 8022e2c:	46bd      	mov	sp, r7
 8022e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e32:	4770      	bx	lr

08022e34 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022e34:	b480      	push	{r7}
 8022e36:	b085      	sub	sp, #20
 8022e38:	af00      	add	r7, sp, #0
 8022e3a:	6078      	str	r0, [r7, #4]
 8022e3c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8022e3e:	2300      	movs	r3, #0
 8022e40:	60bb      	str	r3, [r7, #8]
 8022e42:	68bb      	ldr	r3, [r7, #8]
 8022e44:	60fb      	str	r3, [r7, #12]
 8022e46:	e029      	b.n	8022e9c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8022e48:	4a27      	ldr	r2, [pc, #156]	; (8022ee8 <chk_lock+0xb4>)
 8022e4a:	68fb      	ldr	r3, [r7, #12]
 8022e4c:	011b      	lsls	r3, r3, #4
 8022e4e:	4413      	add	r3, r2
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	2b00      	cmp	r3, #0
 8022e54:	d01d      	beq.n	8022e92 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8022e56:	4a24      	ldr	r2, [pc, #144]	; (8022ee8 <chk_lock+0xb4>)
 8022e58:	68fb      	ldr	r3, [r7, #12]
 8022e5a:	011b      	lsls	r3, r3, #4
 8022e5c:	4413      	add	r3, r2
 8022e5e:	681a      	ldr	r2, [r3, #0]
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	681b      	ldr	r3, [r3, #0]
 8022e64:	429a      	cmp	r2, r3
 8022e66:	d116      	bne.n	8022e96 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8022e68:	4a1f      	ldr	r2, [pc, #124]	; (8022ee8 <chk_lock+0xb4>)
 8022e6a:	68fb      	ldr	r3, [r7, #12]
 8022e6c:	011b      	lsls	r3, r3, #4
 8022e6e:	4413      	add	r3, r2
 8022e70:	3304      	adds	r3, #4
 8022e72:	681a      	ldr	r2, [r3, #0]
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8022e78:	429a      	cmp	r2, r3
 8022e7a:	d10c      	bne.n	8022e96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8022e7c:	4a1a      	ldr	r2, [pc, #104]	; (8022ee8 <chk_lock+0xb4>)
 8022e7e:	68fb      	ldr	r3, [r7, #12]
 8022e80:	011b      	lsls	r3, r3, #4
 8022e82:	4413      	add	r3, r2
 8022e84:	3308      	adds	r3, #8
 8022e86:	681a      	ldr	r2, [r3, #0]
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8022e8c:	429a      	cmp	r2, r3
 8022e8e:	d102      	bne.n	8022e96 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8022e90:	e007      	b.n	8022ea2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8022e92:	2301      	movs	r3, #1
 8022e94:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8022e96:	68fb      	ldr	r3, [r7, #12]
 8022e98:	3301      	adds	r3, #1
 8022e9a:	60fb      	str	r3, [r7, #12]
 8022e9c:	68fb      	ldr	r3, [r7, #12]
 8022e9e:	2b01      	cmp	r3, #1
 8022ea0:	d9d2      	bls.n	8022e48 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8022ea2:	68fb      	ldr	r3, [r7, #12]
 8022ea4:	2b02      	cmp	r3, #2
 8022ea6:	d109      	bne.n	8022ebc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8022ea8:	68bb      	ldr	r3, [r7, #8]
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d102      	bne.n	8022eb4 <chk_lock+0x80>
 8022eae:	683b      	ldr	r3, [r7, #0]
 8022eb0:	2b02      	cmp	r3, #2
 8022eb2:	d101      	bne.n	8022eb8 <chk_lock+0x84>
 8022eb4:	2300      	movs	r3, #0
 8022eb6:	e010      	b.n	8022eda <chk_lock+0xa6>
 8022eb8:	2312      	movs	r3, #18
 8022eba:	e00e      	b.n	8022eda <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8022ebc:	683b      	ldr	r3, [r7, #0]
 8022ebe:	2b00      	cmp	r3, #0
 8022ec0:	d108      	bne.n	8022ed4 <chk_lock+0xa0>
 8022ec2:	4a09      	ldr	r2, [pc, #36]	; (8022ee8 <chk_lock+0xb4>)
 8022ec4:	68fb      	ldr	r3, [r7, #12]
 8022ec6:	011b      	lsls	r3, r3, #4
 8022ec8:	4413      	add	r3, r2
 8022eca:	330c      	adds	r3, #12
 8022ecc:	881b      	ldrh	r3, [r3, #0]
 8022ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022ed2:	d101      	bne.n	8022ed8 <chk_lock+0xa4>
 8022ed4:	2310      	movs	r3, #16
 8022ed6:	e000      	b.n	8022eda <chk_lock+0xa6>
 8022ed8:	2300      	movs	r3, #0
}
 8022eda:	4618      	mov	r0, r3
 8022edc:	3714      	adds	r7, #20
 8022ede:	46bd      	mov	sp, r7
 8022ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ee4:	4770      	bx	lr
 8022ee6:	bf00      	nop
 8022ee8:	20009ae0 	.word	0x20009ae0

08022eec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8022eec:	b480      	push	{r7}
 8022eee:	b083      	sub	sp, #12
 8022ef0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	607b      	str	r3, [r7, #4]
 8022ef6:	e002      	b.n	8022efe <enq_lock+0x12>
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	3301      	adds	r3, #1
 8022efc:	607b      	str	r3, [r7, #4]
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	2b01      	cmp	r3, #1
 8022f02:	d806      	bhi.n	8022f12 <enq_lock+0x26>
 8022f04:	4a09      	ldr	r2, [pc, #36]	; (8022f2c <enq_lock+0x40>)
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	011b      	lsls	r3, r3, #4
 8022f0a:	4413      	add	r3, r2
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d1f2      	bne.n	8022ef8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	2b02      	cmp	r3, #2
 8022f16:	bf14      	ite	ne
 8022f18:	2301      	movne	r3, #1
 8022f1a:	2300      	moveq	r3, #0
 8022f1c:	b2db      	uxtb	r3, r3
}
 8022f1e:	4618      	mov	r0, r3
 8022f20:	370c      	adds	r7, #12
 8022f22:	46bd      	mov	sp, r7
 8022f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f28:	4770      	bx	lr
 8022f2a:	bf00      	nop
 8022f2c:	20009ae0 	.word	0x20009ae0

08022f30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022f30:	b480      	push	{r7}
 8022f32:	b085      	sub	sp, #20
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
 8022f38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8022f3a:	2300      	movs	r3, #0
 8022f3c:	60fb      	str	r3, [r7, #12]
 8022f3e:	e01f      	b.n	8022f80 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8022f40:	4a41      	ldr	r2, [pc, #260]	; (8023048 <inc_lock+0x118>)
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	011b      	lsls	r3, r3, #4
 8022f46:	4413      	add	r3, r2
 8022f48:	681a      	ldr	r2, [r3, #0]
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	681b      	ldr	r3, [r3, #0]
 8022f4e:	429a      	cmp	r2, r3
 8022f50:	d113      	bne.n	8022f7a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8022f52:	4a3d      	ldr	r2, [pc, #244]	; (8023048 <inc_lock+0x118>)
 8022f54:	68fb      	ldr	r3, [r7, #12]
 8022f56:	011b      	lsls	r3, r3, #4
 8022f58:	4413      	add	r3, r2
 8022f5a:	3304      	adds	r3, #4
 8022f5c:	681a      	ldr	r2, [r3, #0]
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8022f62:	429a      	cmp	r2, r3
 8022f64:	d109      	bne.n	8022f7a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8022f66:	4a38      	ldr	r2, [pc, #224]	; (8023048 <inc_lock+0x118>)
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	011b      	lsls	r3, r3, #4
 8022f6c:	4413      	add	r3, r2
 8022f6e:	3308      	adds	r3, #8
 8022f70:	681a      	ldr	r2, [r3, #0]
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8022f76:	429a      	cmp	r2, r3
 8022f78:	d006      	beq.n	8022f88 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8022f7a:	68fb      	ldr	r3, [r7, #12]
 8022f7c:	3301      	adds	r3, #1
 8022f7e:	60fb      	str	r3, [r7, #12]
 8022f80:	68fb      	ldr	r3, [r7, #12]
 8022f82:	2b01      	cmp	r3, #1
 8022f84:	d9dc      	bls.n	8022f40 <inc_lock+0x10>
 8022f86:	e000      	b.n	8022f8a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8022f88:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	2b02      	cmp	r3, #2
 8022f8e:	d132      	bne.n	8022ff6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8022f90:	2300      	movs	r3, #0
 8022f92:	60fb      	str	r3, [r7, #12]
 8022f94:	e002      	b.n	8022f9c <inc_lock+0x6c>
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	3301      	adds	r3, #1
 8022f9a:	60fb      	str	r3, [r7, #12]
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	2b01      	cmp	r3, #1
 8022fa0:	d806      	bhi.n	8022fb0 <inc_lock+0x80>
 8022fa2:	4a29      	ldr	r2, [pc, #164]	; (8023048 <inc_lock+0x118>)
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	011b      	lsls	r3, r3, #4
 8022fa8:	4413      	add	r3, r2
 8022faa:	681b      	ldr	r3, [r3, #0]
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d1f2      	bne.n	8022f96 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8022fb0:	68fb      	ldr	r3, [r7, #12]
 8022fb2:	2b02      	cmp	r3, #2
 8022fb4:	d101      	bne.n	8022fba <inc_lock+0x8a>
 8022fb6:	2300      	movs	r3, #0
 8022fb8:	e040      	b.n	802303c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	681a      	ldr	r2, [r3, #0]
 8022fbe:	4922      	ldr	r1, [pc, #136]	; (8023048 <inc_lock+0x118>)
 8022fc0:	68fb      	ldr	r3, [r7, #12]
 8022fc2:	011b      	lsls	r3, r3, #4
 8022fc4:	440b      	add	r3, r1
 8022fc6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	689a      	ldr	r2, [r3, #8]
 8022fcc:	491e      	ldr	r1, [pc, #120]	; (8023048 <inc_lock+0x118>)
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	011b      	lsls	r3, r3, #4
 8022fd2:	440b      	add	r3, r1
 8022fd4:	3304      	adds	r3, #4
 8022fd6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	695a      	ldr	r2, [r3, #20]
 8022fdc:	491a      	ldr	r1, [pc, #104]	; (8023048 <inc_lock+0x118>)
 8022fde:	68fb      	ldr	r3, [r7, #12]
 8022fe0:	011b      	lsls	r3, r3, #4
 8022fe2:	440b      	add	r3, r1
 8022fe4:	3308      	adds	r3, #8
 8022fe6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8022fe8:	4a17      	ldr	r2, [pc, #92]	; (8023048 <inc_lock+0x118>)
 8022fea:	68fb      	ldr	r3, [r7, #12]
 8022fec:	011b      	lsls	r3, r3, #4
 8022fee:	4413      	add	r3, r2
 8022ff0:	330c      	adds	r3, #12
 8022ff2:	2200      	movs	r2, #0
 8022ff4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8022ff6:	683b      	ldr	r3, [r7, #0]
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d009      	beq.n	8023010 <inc_lock+0xe0>
 8022ffc:	4a12      	ldr	r2, [pc, #72]	; (8023048 <inc_lock+0x118>)
 8022ffe:	68fb      	ldr	r3, [r7, #12]
 8023000:	011b      	lsls	r3, r3, #4
 8023002:	4413      	add	r3, r2
 8023004:	330c      	adds	r3, #12
 8023006:	881b      	ldrh	r3, [r3, #0]
 8023008:	2b00      	cmp	r3, #0
 802300a:	d001      	beq.n	8023010 <inc_lock+0xe0>
 802300c:	2300      	movs	r3, #0
 802300e:	e015      	b.n	802303c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8023010:	683b      	ldr	r3, [r7, #0]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d108      	bne.n	8023028 <inc_lock+0xf8>
 8023016:	4a0c      	ldr	r2, [pc, #48]	; (8023048 <inc_lock+0x118>)
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	011b      	lsls	r3, r3, #4
 802301c:	4413      	add	r3, r2
 802301e:	330c      	adds	r3, #12
 8023020:	881b      	ldrh	r3, [r3, #0]
 8023022:	3301      	adds	r3, #1
 8023024:	b29a      	uxth	r2, r3
 8023026:	e001      	b.n	802302c <inc_lock+0xfc>
 8023028:	f44f 7280 	mov.w	r2, #256	; 0x100
 802302c:	4906      	ldr	r1, [pc, #24]	; (8023048 <inc_lock+0x118>)
 802302e:	68fb      	ldr	r3, [r7, #12]
 8023030:	011b      	lsls	r3, r3, #4
 8023032:	440b      	add	r3, r1
 8023034:	330c      	adds	r3, #12
 8023036:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8023038:	68fb      	ldr	r3, [r7, #12]
 802303a:	3301      	adds	r3, #1
}
 802303c:	4618      	mov	r0, r3
 802303e:	3714      	adds	r7, #20
 8023040:	46bd      	mov	sp, r7
 8023042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023046:	4770      	bx	lr
 8023048:	20009ae0 	.word	0x20009ae0

0802304c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 802304c:	b480      	push	{r7}
 802304e:	b085      	sub	sp, #20
 8023050:	af00      	add	r7, sp, #0
 8023052:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	3b01      	subs	r3, #1
 8023058:	607b      	str	r3, [r7, #4]
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	2b01      	cmp	r3, #1
 802305e:	d825      	bhi.n	80230ac <dec_lock+0x60>
		n = Files[i].ctr;
 8023060:	4a17      	ldr	r2, [pc, #92]	; (80230c0 <dec_lock+0x74>)
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	011b      	lsls	r3, r3, #4
 8023066:	4413      	add	r3, r2
 8023068:	330c      	adds	r3, #12
 802306a:	881b      	ldrh	r3, [r3, #0]
 802306c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 802306e:	89fb      	ldrh	r3, [r7, #14]
 8023070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023074:	d101      	bne.n	802307a <dec_lock+0x2e>
 8023076:	2300      	movs	r3, #0
 8023078:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 802307a:	89fb      	ldrh	r3, [r7, #14]
 802307c:	2b00      	cmp	r3, #0
 802307e:	d002      	beq.n	8023086 <dec_lock+0x3a>
 8023080:	89fb      	ldrh	r3, [r7, #14]
 8023082:	3b01      	subs	r3, #1
 8023084:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8023086:	4a0e      	ldr	r2, [pc, #56]	; (80230c0 <dec_lock+0x74>)
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	011b      	lsls	r3, r3, #4
 802308c:	4413      	add	r3, r2
 802308e:	330c      	adds	r3, #12
 8023090:	89fa      	ldrh	r2, [r7, #14]
 8023092:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8023094:	89fb      	ldrh	r3, [r7, #14]
 8023096:	2b00      	cmp	r3, #0
 8023098:	d105      	bne.n	80230a6 <dec_lock+0x5a>
 802309a:	4a09      	ldr	r2, [pc, #36]	; (80230c0 <dec_lock+0x74>)
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	011b      	lsls	r3, r3, #4
 80230a0:	4413      	add	r3, r2
 80230a2:	2200      	movs	r2, #0
 80230a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80230a6:	2300      	movs	r3, #0
 80230a8:	737b      	strb	r3, [r7, #13]
 80230aa:	e001      	b.n	80230b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80230ac:	2302      	movs	r3, #2
 80230ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80230b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80230b2:	4618      	mov	r0, r3
 80230b4:	3714      	adds	r7, #20
 80230b6:	46bd      	mov	sp, r7
 80230b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230bc:	4770      	bx	lr
 80230be:	bf00      	nop
 80230c0:	20009ae0 	.word	0x20009ae0

080230c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80230c4:	b480      	push	{r7}
 80230c6:	b085      	sub	sp, #20
 80230c8:	af00      	add	r7, sp, #0
 80230ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80230cc:	2300      	movs	r3, #0
 80230ce:	60fb      	str	r3, [r7, #12]
 80230d0:	e010      	b.n	80230f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80230d2:	4a0d      	ldr	r2, [pc, #52]	; (8023108 <clear_lock+0x44>)
 80230d4:	68fb      	ldr	r3, [r7, #12]
 80230d6:	011b      	lsls	r3, r3, #4
 80230d8:	4413      	add	r3, r2
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	687a      	ldr	r2, [r7, #4]
 80230de:	429a      	cmp	r2, r3
 80230e0:	d105      	bne.n	80230ee <clear_lock+0x2a>
 80230e2:	4a09      	ldr	r2, [pc, #36]	; (8023108 <clear_lock+0x44>)
 80230e4:	68fb      	ldr	r3, [r7, #12]
 80230e6:	011b      	lsls	r3, r3, #4
 80230e8:	4413      	add	r3, r2
 80230ea:	2200      	movs	r2, #0
 80230ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80230ee:	68fb      	ldr	r3, [r7, #12]
 80230f0:	3301      	adds	r3, #1
 80230f2:	60fb      	str	r3, [r7, #12]
 80230f4:	68fb      	ldr	r3, [r7, #12]
 80230f6:	2b01      	cmp	r3, #1
 80230f8:	d9eb      	bls.n	80230d2 <clear_lock+0xe>
	}
}
 80230fa:	bf00      	nop
 80230fc:	bf00      	nop
 80230fe:	3714      	adds	r7, #20
 8023100:	46bd      	mov	sp, r7
 8023102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023106:	4770      	bx	lr
 8023108:	20009ae0 	.word	0x20009ae0

0802310c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 802310c:	b580      	push	{r7, lr}
 802310e:	b086      	sub	sp, #24
 8023110:	af00      	add	r7, sp, #0
 8023112:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8023114:	2300      	movs	r3, #0
 8023116:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	78db      	ldrb	r3, [r3, #3]
 802311c:	2b00      	cmp	r3, #0
 802311e:	d034      	beq.n	802318a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023124:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	7858      	ldrb	r0, [r3, #1]
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8023130:	2301      	movs	r3, #1
 8023132:	697a      	ldr	r2, [r7, #20]
 8023134:	f7ff fd40 	bl	8022bb8 <disk_write>
 8023138:	4603      	mov	r3, r0
 802313a:	2b00      	cmp	r3, #0
 802313c:	d002      	beq.n	8023144 <sync_window+0x38>
			res = FR_DISK_ERR;
 802313e:	2301      	movs	r3, #1
 8023140:	73fb      	strb	r3, [r7, #15]
 8023142:	e022      	b.n	802318a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	2200      	movs	r2, #0
 8023148:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	6a1b      	ldr	r3, [r3, #32]
 802314e:	697a      	ldr	r2, [r7, #20]
 8023150:	1ad2      	subs	r2, r2, r3
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	699b      	ldr	r3, [r3, #24]
 8023156:	429a      	cmp	r2, r3
 8023158:	d217      	bcs.n	802318a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802315a:	687b      	ldr	r3, [r7, #4]
 802315c:	789b      	ldrb	r3, [r3, #2]
 802315e:	613b      	str	r3, [r7, #16]
 8023160:	e010      	b.n	8023184 <sync_window+0x78>
					wsect += fs->fsize;
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	699b      	ldr	r3, [r3, #24]
 8023166:	697a      	ldr	r2, [r7, #20]
 8023168:	4413      	add	r3, r2
 802316a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 802316c:	687b      	ldr	r3, [r7, #4]
 802316e:	7858      	ldrb	r0, [r3, #1]
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8023176:	2301      	movs	r3, #1
 8023178:	697a      	ldr	r2, [r7, #20]
 802317a:	f7ff fd1d 	bl	8022bb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802317e:	693b      	ldr	r3, [r7, #16]
 8023180:	3b01      	subs	r3, #1
 8023182:	613b      	str	r3, [r7, #16]
 8023184:	693b      	ldr	r3, [r7, #16]
 8023186:	2b01      	cmp	r3, #1
 8023188:	d8eb      	bhi.n	8023162 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 802318a:	7bfb      	ldrb	r3, [r7, #15]
}
 802318c:	4618      	mov	r0, r3
 802318e:	3718      	adds	r7, #24
 8023190:	46bd      	mov	sp, r7
 8023192:	bd80      	pop	{r7, pc}

08023194 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b084      	sub	sp, #16
 8023198:	af00      	add	r7, sp, #0
 802319a:	6078      	str	r0, [r7, #4]
 802319c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 802319e:	2300      	movs	r3, #0
 80231a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231a6:	683a      	ldr	r2, [r7, #0]
 80231a8:	429a      	cmp	r2, r3
 80231aa:	d01b      	beq.n	80231e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80231ac:	6878      	ldr	r0, [r7, #4]
 80231ae:	f7ff ffad 	bl	802310c <sync_window>
 80231b2:	4603      	mov	r3, r0
 80231b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80231b6:	7bfb      	ldrb	r3, [r7, #15]
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	d113      	bne.n	80231e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	7858      	ldrb	r0, [r3, #1]
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80231c6:	2301      	movs	r3, #1
 80231c8:	683a      	ldr	r2, [r7, #0]
 80231ca:	f7ff fcd5 	bl	8022b78 <disk_read>
 80231ce:	4603      	mov	r3, r0
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d004      	beq.n	80231de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80231d4:	f04f 33ff 	mov.w	r3, #4294967295
 80231d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80231da:	2301      	movs	r3, #1
 80231dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	683a      	ldr	r2, [r7, #0]
 80231e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80231e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80231e6:	4618      	mov	r0, r3
 80231e8:	3710      	adds	r7, #16
 80231ea:	46bd      	mov	sp, r7
 80231ec:	bd80      	pop	{r7, pc}
	...

080231f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80231f0:	b580      	push	{r7, lr}
 80231f2:	b084      	sub	sp, #16
 80231f4:	af00      	add	r7, sp, #0
 80231f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80231f8:	6878      	ldr	r0, [r7, #4]
 80231fa:	f7ff ff87 	bl	802310c <sync_window>
 80231fe:	4603      	mov	r3, r0
 8023200:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8023202:	7bfb      	ldrb	r3, [r7, #15]
 8023204:	2b00      	cmp	r3, #0
 8023206:	d158      	bne.n	80232ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	781b      	ldrb	r3, [r3, #0]
 802320c:	2b03      	cmp	r3, #3
 802320e:	d148      	bne.n	80232a2 <sync_fs+0xb2>
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	791b      	ldrb	r3, [r3, #4]
 8023214:	2b01      	cmp	r3, #1
 8023216:	d144      	bne.n	80232a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	3330      	adds	r3, #48	; 0x30
 802321c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023220:	2100      	movs	r1, #0
 8023222:	4618      	mov	r0, r3
 8023224:	f7ff fda9 	bl	8022d7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8023228:	687b      	ldr	r3, [r7, #4]
 802322a:	3330      	adds	r3, #48	; 0x30
 802322c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023230:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8023234:	4618      	mov	r0, r3
 8023236:	f7ff fd38 	bl	8022caa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	3330      	adds	r3, #48	; 0x30
 802323e:	4921      	ldr	r1, [pc, #132]	; (80232c4 <sync_fs+0xd4>)
 8023240:	4618      	mov	r0, r3
 8023242:	f7ff fd4d 	bl	8022ce0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	3330      	adds	r3, #48	; 0x30
 802324a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802324e:	491e      	ldr	r1, [pc, #120]	; (80232c8 <sync_fs+0xd8>)
 8023250:	4618      	mov	r0, r3
 8023252:	f7ff fd45 	bl	8022ce0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8023256:	687b      	ldr	r3, [r7, #4]
 8023258:	3330      	adds	r3, #48	; 0x30
 802325a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	691b      	ldr	r3, [r3, #16]
 8023262:	4619      	mov	r1, r3
 8023264:	4610      	mov	r0, r2
 8023266:	f7ff fd3b 	bl	8022ce0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	3330      	adds	r3, #48	; 0x30
 802326e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	68db      	ldr	r3, [r3, #12]
 8023276:	4619      	mov	r1, r3
 8023278:	4610      	mov	r0, r2
 802327a:	f7ff fd31 	bl	8022ce0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 802327e:	687b      	ldr	r3, [r7, #4]
 8023280:	69db      	ldr	r3, [r3, #28]
 8023282:	1c5a      	adds	r2, r3, #1
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	7858      	ldrb	r0, [r3, #1]
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8023292:	687b      	ldr	r3, [r7, #4]
 8023294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023296:	2301      	movs	r3, #1
 8023298:	f7ff fc8e 	bl	8022bb8 <disk_write>
			fs->fsi_flag = 0;
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	2200      	movs	r2, #0
 80232a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	785b      	ldrb	r3, [r3, #1]
 80232a6:	2200      	movs	r2, #0
 80232a8:	2100      	movs	r1, #0
 80232aa:	4618      	mov	r0, r3
 80232ac:	f7ff fca4 	bl	8022bf8 <disk_ioctl>
 80232b0:	4603      	mov	r3, r0
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d001      	beq.n	80232ba <sync_fs+0xca>
 80232b6:	2301      	movs	r3, #1
 80232b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80232ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80232bc:	4618      	mov	r0, r3
 80232be:	3710      	adds	r7, #16
 80232c0:	46bd      	mov	sp, r7
 80232c2:	bd80      	pop	{r7, pc}
 80232c4:	41615252 	.word	0x41615252
 80232c8:	61417272 	.word	0x61417272

080232cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80232cc:	b480      	push	{r7}
 80232ce:	b083      	sub	sp, #12
 80232d0:	af00      	add	r7, sp, #0
 80232d2:	6078      	str	r0, [r7, #4]
 80232d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80232d6:	683b      	ldr	r3, [r7, #0]
 80232d8:	3b02      	subs	r3, #2
 80232da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80232dc:	687b      	ldr	r3, [r7, #4]
 80232de:	695b      	ldr	r3, [r3, #20]
 80232e0:	3b02      	subs	r3, #2
 80232e2:	683a      	ldr	r2, [r7, #0]
 80232e4:	429a      	cmp	r2, r3
 80232e6:	d301      	bcc.n	80232ec <clust2sect+0x20>
 80232e8:	2300      	movs	r3, #0
 80232ea:	e008      	b.n	80232fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	895b      	ldrh	r3, [r3, #10]
 80232f0:	461a      	mov	r2, r3
 80232f2:	683b      	ldr	r3, [r7, #0]
 80232f4:	fb03 f202 	mul.w	r2, r3, r2
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80232fc:	4413      	add	r3, r2
}
 80232fe:	4618      	mov	r0, r3
 8023300:	370c      	adds	r7, #12
 8023302:	46bd      	mov	sp, r7
 8023304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023308:	4770      	bx	lr

0802330a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 802330a:	b580      	push	{r7, lr}
 802330c:	b086      	sub	sp, #24
 802330e:	af00      	add	r7, sp, #0
 8023310:	6078      	str	r0, [r7, #4]
 8023312:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 802331a:	683b      	ldr	r3, [r7, #0]
 802331c:	2b01      	cmp	r3, #1
 802331e:	d904      	bls.n	802332a <get_fat+0x20>
 8023320:	693b      	ldr	r3, [r7, #16]
 8023322:	695b      	ldr	r3, [r3, #20]
 8023324:	683a      	ldr	r2, [r7, #0]
 8023326:	429a      	cmp	r2, r3
 8023328:	d302      	bcc.n	8023330 <get_fat+0x26>
		val = 1;	/* Internal error */
 802332a:	2301      	movs	r3, #1
 802332c:	617b      	str	r3, [r7, #20]
 802332e:	e091      	b.n	8023454 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8023330:	f04f 33ff 	mov.w	r3, #4294967295
 8023334:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8023336:	693b      	ldr	r3, [r7, #16]
 8023338:	781b      	ldrb	r3, [r3, #0]
 802333a:	2b03      	cmp	r3, #3
 802333c:	d063      	beq.n	8023406 <get_fat+0xfc>
 802333e:	2b03      	cmp	r3, #3
 8023340:	dc7e      	bgt.n	8023440 <get_fat+0x136>
 8023342:	2b01      	cmp	r3, #1
 8023344:	d002      	beq.n	802334c <get_fat+0x42>
 8023346:	2b02      	cmp	r3, #2
 8023348:	d042      	beq.n	80233d0 <get_fat+0xc6>
 802334a:	e079      	b.n	8023440 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 802334c:	683b      	ldr	r3, [r7, #0]
 802334e:	60fb      	str	r3, [r7, #12]
 8023350:	68fb      	ldr	r3, [r7, #12]
 8023352:	085b      	lsrs	r3, r3, #1
 8023354:	68fa      	ldr	r2, [r7, #12]
 8023356:	4413      	add	r3, r2
 8023358:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802335a:	693b      	ldr	r3, [r7, #16]
 802335c:	6a1a      	ldr	r2, [r3, #32]
 802335e:	68fb      	ldr	r3, [r7, #12]
 8023360:	0b1b      	lsrs	r3, r3, #12
 8023362:	4413      	add	r3, r2
 8023364:	4619      	mov	r1, r3
 8023366:	6938      	ldr	r0, [r7, #16]
 8023368:	f7ff ff14 	bl	8023194 <move_window>
 802336c:	4603      	mov	r3, r0
 802336e:	2b00      	cmp	r3, #0
 8023370:	d169      	bne.n	8023446 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8023372:	68fb      	ldr	r3, [r7, #12]
 8023374:	1c5a      	adds	r2, r3, #1
 8023376:	60fa      	str	r2, [r7, #12]
 8023378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802337c:	693a      	ldr	r2, [r7, #16]
 802337e:	4413      	add	r3, r2
 8023380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023384:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023386:	693b      	ldr	r3, [r7, #16]
 8023388:	6a1a      	ldr	r2, [r3, #32]
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	0b1b      	lsrs	r3, r3, #12
 802338e:	4413      	add	r3, r2
 8023390:	4619      	mov	r1, r3
 8023392:	6938      	ldr	r0, [r7, #16]
 8023394:	f7ff fefe 	bl	8023194 <move_window>
 8023398:	4603      	mov	r3, r0
 802339a:	2b00      	cmp	r3, #0
 802339c:	d155      	bne.n	802344a <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 802339e:	68fb      	ldr	r3, [r7, #12]
 80233a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233a4:	693a      	ldr	r2, [r7, #16]
 80233a6:	4413      	add	r3, r2
 80233a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80233ac:	021b      	lsls	r3, r3, #8
 80233ae:	461a      	mov	r2, r3
 80233b0:	68bb      	ldr	r3, [r7, #8]
 80233b2:	4313      	orrs	r3, r2
 80233b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80233b6:	683b      	ldr	r3, [r7, #0]
 80233b8:	f003 0301 	and.w	r3, r3, #1
 80233bc:	2b00      	cmp	r3, #0
 80233be:	d002      	beq.n	80233c6 <get_fat+0xbc>
 80233c0:	68bb      	ldr	r3, [r7, #8]
 80233c2:	091b      	lsrs	r3, r3, #4
 80233c4:	e002      	b.n	80233cc <get_fat+0xc2>
 80233c6:	68bb      	ldr	r3, [r7, #8]
 80233c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233cc:	617b      	str	r3, [r7, #20]
			break;
 80233ce:	e041      	b.n	8023454 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80233d0:	693b      	ldr	r3, [r7, #16]
 80233d2:	6a1a      	ldr	r2, [r3, #32]
 80233d4:	683b      	ldr	r3, [r7, #0]
 80233d6:	0adb      	lsrs	r3, r3, #11
 80233d8:	4413      	add	r3, r2
 80233da:	4619      	mov	r1, r3
 80233dc:	6938      	ldr	r0, [r7, #16]
 80233de:	f7ff fed9 	bl	8023194 <move_window>
 80233e2:	4603      	mov	r3, r0
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	d132      	bne.n	802344e <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80233e8:	693b      	ldr	r3, [r7, #16]
 80233ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80233ee:	683b      	ldr	r3, [r7, #0]
 80233f0:	0059      	lsls	r1, r3, #1
 80233f2:	f640 73fe 	movw	r3, #4094	; 0xffe
 80233f6:	400b      	ands	r3, r1
 80233f8:	4413      	add	r3, r2
 80233fa:	4618      	mov	r0, r3
 80233fc:	f7ff fc1a 	bl	8022c34 <ld_word>
 8023400:	4603      	mov	r3, r0
 8023402:	617b      	str	r3, [r7, #20]
			break;
 8023404:	e026      	b.n	8023454 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8023406:	693b      	ldr	r3, [r7, #16]
 8023408:	6a1a      	ldr	r2, [r3, #32]
 802340a:	683b      	ldr	r3, [r7, #0]
 802340c:	0a9b      	lsrs	r3, r3, #10
 802340e:	4413      	add	r3, r2
 8023410:	4619      	mov	r1, r3
 8023412:	6938      	ldr	r0, [r7, #16]
 8023414:	f7ff febe 	bl	8023194 <move_window>
 8023418:	4603      	mov	r3, r0
 802341a:	2b00      	cmp	r3, #0
 802341c:	d119      	bne.n	8023452 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 802341e:	693b      	ldr	r3, [r7, #16]
 8023420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023424:	683b      	ldr	r3, [r7, #0]
 8023426:	0099      	lsls	r1, r3, #2
 8023428:	f640 73fc 	movw	r3, #4092	; 0xffc
 802342c:	400b      	ands	r3, r1
 802342e:	4413      	add	r3, r2
 8023430:	4618      	mov	r0, r3
 8023432:	f7ff fc17 	bl	8022c64 <ld_dword>
 8023436:	4603      	mov	r3, r0
 8023438:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802343c:	617b      	str	r3, [r7, #20]
			break;
 802343e:	e009      	b.n	8023454 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8023440:	2301      	movs	r3, #1
 8023442:	617b      	str	r3, [r7, #20]
 8023444:	e006      	b.n	8023454 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023446:	bf00      	nop
 8023448:	e004      	b.n	8023454 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802344a:	bf00      	nop
 802344c:	e002      	b.n	8023454 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802344e:	bf00      	nop
 8023450:	e000      	b.n	8023454 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8023452:	bf00      	nop
		}
	}

	return val;
 8023454:	697b      	ldr	r3, [r7, #20]
}
 8023456:	4618      	mov	r0, r3
 8023458:	3718      	adds	r7, #24
 802345a:	46bd      	mov	sp, r7
 802345c:	bd80      	pop	{r7, pc}

0802345e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 802345e:	b590      	push	{r4, r7, lr}
 8023460:	b089      	sub	sp, #36	; 0x24
 8023462:	af00      	add	r7, sp, #0
 8023464:	60f8      	str	r0, [r7, #12]
 8023466:	60b9      	str	r1, [r7, #8]
 8023468:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802346a:	2302      	movs	r3, #2
 802346c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 802346e:	68bb      	ldr	r3, [r7, #8]
 8023470:	2b01      	cmp	r3, #1
 8023472:	f240 80d5 	bls.w	8023620 <put_fat+0x1c2>
 8023476:	68fb      	ldr	r3, [r7, #12]
 8023478:	695b      	ldr	r3, [r3, #20]
 802347a:	68ba      	ldr	r2, [r7, #8]
 802347c:	429a      	cmp	r2, r3
 802347e:	f080 80cf 	bcs.w	8023620 <put_fat+0x1c2>
		switch (fs->fs_type) {
 8023482:	68fb      	ldr	r3, [r7, #12]
 8023484:	781b      	ldrb	r3, [r3, #0]
 8023486:	2b03      	cmp	r3, #3
 8023488:	f000 8097 	beq.w	80235ba <put_fat+0x15c>
 802348c:	2b03      	cmp	r3, #3
 802348e:	f300 80d0 	bgt.w	8023632 <put_fat+0x1d4>
 8023492:	2b01      	cmp	r3, #1
 8023494:	d002      	beq.n	802349c <put_fat+0x3e>
 8023496:	2b02      	cmp	r3, #2
 8023498:	d06e      	beq.n	8023578 <put_fat+0x11a>
 802349a:	e0ca      	b.n	8023632 <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 802349c:	68bb      	ldr	r3, [r7, #8]
 802349e:	61bb      	str	r3, [r7, #24]
 80234a0:	69bb      	ldr	r3, [r7, #24]
 80234a2:	085b      	lsrs	r3, r3, #1
 80234a4:	69ba      	ldr	r2, [r7, #24]
 80234a6:	4413      	add	r3, r2
 80234a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80234aa:	68fb      	ldr	r3, [r7, #12]
 80234ac:	6a1a      	ldr	r2, [r3, #32]
 80234ae:	69bb      	ldr	r3, [r7, #24]
 80234b0:	0b1b      	lsrs	r3, r3, #12
 80234b2:	4413      	add	r3, r2
 80234b4:	4619      	mov	r1, r3
 80234b6:	68f8      	ldr	r0, [r7, #12]
 80234b8:	f7ff fe6c 	bl	8023194 <move_window>
 80234bc:	4603      	mov	r3, r0
 80234be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80234c0:	7ffb      	ldrb	r3, [r7, #31]
 80234c2:	2b00      	cmp	r3, #0
 80234c4:	f040 80ae 	bne.w	8023624 <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 80234c8:	68fb      	ldr	r3, [r7, #12]
 80234ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80234ce:	69bb      	ldr	r3, [r7, #24]
 80234d0:	1c59      	adds	r1, r3, #1
 80234d2:	61b9      	str	r1, [r7, #24]
 80234d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80234d8:	4413      	add	r3, r2
 80234da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80234dc:	68bb      	ldr	r3, [r7, #8]
 80234de:	f003 0301 	and.w	r3, r3, #1
 80234e2:	2b00      	cmp	r3, #0
 80234e4:	d00d      	beq.n	8023502 <put_fat+0xa4>
 80234e6:	697b      	ldr	r3, [r7, #20]
 80234e8:	781b      	ldrb	r3, [r3, #0]
 80234ea:	b25b      	sxtb	r3, r3
 80234ec:	f003 030f 	and.w	r3, r3, #15
 80234f0:	b25a      	sxtb	r2, r3
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	b2db      	uxtb	r3, r3
 80234f6:	011b      	lsls	r3, r3, #4
 80234f8:	b25b      	sxtb	r3, r3
 80234fa:	4313      	orrs	r3, r2
 80234fc:	b25b      	sxtb	r3, r3
 80234fe:	b2db      	uxtb	r3, r3
 8023500:	e001      	b.n	8023506 <put_fat+0xa8>
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	b2db      	uxtb	r3, r3
 8023506:	697a      	ldr	r2, [r7, #20]
 8023508:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802350a:	68fb      	ldr	r3, [r7, #12]
 802350c:	2201      	movs	r2, #1
 802350e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	6a1a      	ldr	r2, [r3, #32]
 8023514:	69bb      	ldr	r3, [r7, #24]
 8023516:	0b1b      	lsrs	r3, r3, #12
 8023518:	4413      	add	r3, r2
 802351a:	4619      	mov	r1, r3
 802351c:	68f8      	ldr	r0, [r7, #12]
 802351e:	f7ff fe39 	bl	8023194 <move_window>
 8023522:	4603      	mov	r3, r0
 8023524:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8023526:	7ffb      	ldrb	r3, [r7, #31]
 8023528:	2b00      	cmp	r3, #0
 802352a:	d17d      	bne.n	8023628 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 802352c:	68fb      	ldr	r3, [r7, #12]
 802352e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023532:	69bb      	ldr	r3, [r7, #24]
 8023534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023538:	4413      	add	r3, r2
 802353a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 802353c:	68bb      	ldr	r3, [r7, #8]
 802353e:	f003 0301 	and.w	r3, r3, #1
 8023542:	2b00      	cmp	r3, #0
 8023544:	d003      	beq.n	802354e <put_fat+0xf0>
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	091b      	lsrs	r3, r3, #4
 802354a:	b2db      	uxtb	r3, r3
 802354c:	e00e      	b.n	802356c <put_fat+0x10e>
 802354e:	697b      	ldr	r3, [r7, #20]
 8023550:	781b      	ldrb	r3, [r3, #0]
 8023552:	b25b      	sxtb	r3, r3
 8023554:	f023 030f 	bic.w	r3, r3, #15
 8023558:	b25a      	sxtb	r2, r3
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	0a1b      	lsrs	r3, r3, #8
 802355e:	b25b      	sxtb	r3, r3
 8023560:	f003 030f 	and.w	r3, r3, #15
 8023564:	b25b      	sxtb	r3, r3
 8023566:	4313      	orrs	r3, r2
 8023568:	b25b      	sxtb	r3, r3
 802356a:	b2db      	uxtb	r3, r3
 802356c:	697a      	ldr	r2, [r7, #20]
 802356e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8023570:	68fb      	ldr	r3, [r7, #12]
 8023572:	2201      	movs	r2, #1
 8023574:	70da      	strb	r2, [r3, #3]
			break;
 8023576:	e05c      	b.n	8023632 <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8023578:	68fb      	ldr	r3, [r7, #12]
 802357a:	6a1a      	ldr	r2, [r3, #32]
 802357c:	68bb      	ldr	r3, [r7, #8]
 802357e:	0adb      	lsrs	r3, r3, #11
 8023580:	4413      	add	r3, r2
 8023582:	4619      	mov	r1, r3
 8023584:	68f8      	ldr	r0, [r7, #12]
 8023586:	f7ff fe05 	bl	8023194 <move_window>
 802358a:	4603      	mov	r3, r0
 802358c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802358e:	7ffb      	ldrb	r3, [r7, #31]
 8023590:	2b00      	cmp	r3, #0
 8023592:	d14b      	bne.n	802362c <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8023594:	68fb      	ldr	r3, [r7, #12]
 8023596:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802359a:	68bb      	ldr	r3, [r7, #8]
 802359c:	0059      	lsls	r1, r3, #1
 802359e:	f640 73fe 	movw	r3, #4094	; 0xffe
 80235a2:	400b      	ands	r3, r1
 80235a4:	4413      	add	r3, r2
 80235a6:	687a      	ldr	r2, [r7, #4]
 80235a8:	b292      	uxth	r2, r2
 80235aa:	4611      	mov	r1, r2
 80235ac:	4618      	mov	r0, r3
 80235ae:	f7ff fb7c 	bl	8022caa <st_word>
			fs->wflag = 1;
 80235b2:	68fb      	ldr	r3, [r7, #12]
 80235b4:	2201      	movs	r2, #1
 80235b6:	70da      	strb	r2, [r3, #3]
			break;
 80235b8:	e03b      	b.n	8023632 <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80235ba:	68fb      	ldr	r3, [r7, #12]
 80235bc:	6a1a      	ldr	r2, [r3, #32]
 80235be:	68bb      	ldr	r3, [r7, #8]
 80235c0:	0a9b      	lsrs	r3, r3, #10
 80235c2:	4413      	add	r3, r2
 80235c4:	4619      	mov	r1, r3
 80235c6:	68f8      	ldr	r0, [r7, #12]
 80235c8:	f7ff fde4 	bl	8023194 <move_window>
 80235cc:	4603      	mov	r3, r0
 80235ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80235d0:	7ffb      	ldrb	r3, [r7, #31]
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	d12c      	bne.n	8023630 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80235e2:	68bb      	ldr	r3, [r7, #8]
 80235e4:	0099      	lsls	r1, r3, #2
 80235e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80235ea:	400b      	ands	r3, r1
 80235ec:	4413      	add	r3, r2
 80235ee:	4618      	mov	r0, r3
 80235f0:	f7ff fb38 	bl	8022c64 <ld_dword>
 80235f4:	4603      	mov	r3, r0
 80235f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80235fa:	4323      	orrs	r3, r4
 80235fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80235fe:	68fb      	ldr	r3, [r7, #12]
 8023600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023604:	68bb      	ldr	r3, [r7, #8]
 8023606:	0099      	lsls	r1, r3, #2
 8023608:	f640 73fc 	movw	r3, #4092	; 0xffc
 802360c:	400b      	ands	r3, r1
 802360e:	4413      	add	r3, r2
 8023610:	6879      	ldr	r1, [r7, #4]
 8023612:	4618      	mov	r0, r3
 8023614:	f7ff fb64 	bl	8022ce0 <st_dword>
			fs->wflag = 1;
 8023618:	68fb      	ldr	r3, [r7, #12]
 802361a:	2201      	movs	r2, #1
 802361c:	70da      	strb	r2, [r3, #3]
			break;
 802361e:	e008      	b.n	8023632 <put_fat+0x1d4>
		}
	}
 8023620:	bf00      	nop
 8023622:	e006      	b.n	8023632 <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023624:	bf00      	nop
 8023626:	e004      	b.n	8023632 <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023628:	bf00      	nop
 802362a:	e002      	b.n	8023632 <put_fat+0x1d4>
			if (res != FR_OK) break;
 802362c:	bf00      	nop
 802362e:	e000      	b.n	8023632 <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023630:	bf00      	nop
	return res;
 8023632:	7ffb      	ldrb	r3, [r7, #31]
}
 8023634:	4618      	mov	r0, r3
 8023636:	3724      	adds	r7, #36	; 0x24
 8023638:	46bd      	mov	sp, r7
 802363a:	bd90      	pop	{r4, r7, pc}

0802363c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 802363c:	b580      	push	{r7, lr}
 802363e:	b088      	sub	sp, #32
 8023640:	af00      	add	r7, sp, #0
 8023642:	60f8      	str	r0, [r7, #12]
 8023644:	60b9      	str	r1, [r7, #8]
 8023646:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8023648:	2300      	movs	r3, #0
 802364a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 802364c:	68fb      	ldr	r3, [r7, #12]
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8023652:	68bb      	ldr	r3, [r7, #8]
 8023654:	2b01      	cmp	r3, #1
 8023656:	d904      	bls.n	8023662 <remove_chain+0x26>
 8023658:	69bb      	ldr	r3, [r7, #24]
 802365a:	695b      	ldr	r3, [r3, #20]
 802365c:	68ba      	ldr	r2, [r7, #8]
 802365e:	429a      	cmp	r2, r3
 8023660:	d301      	bcc.n	8023666 <remove_chain+0x2a>
 8023662:	2302      	movs	r3, #2
 8023664:	e04b      	b.n	80236fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	2b00      	cmp	r3, #0
 802366a:	d00c      	beq.n	8023686 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 802366c:	f04f 32ff 	mov.w	r2, #4294967295
 8023670:	6879      	ldr	r1, [r7, #4]
 8023672:	69b8      	ldr	r0, [r7, #24]
 8023674:	f7ff fef3 	bl	802345e <put_fat>
 8023678:	4603      	mov	r3, r0
 802367a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 802367c:	7ffb      	ldrb	r3, [r7, #31]
 802367e:	2b00      	cmp	r3, #0
 8023680:	d001      	beq.n	8023686 <remove_chain+0x4a>
 8023682:	7ffb      	ldrb	r3, [r7, #31]
 8023684:	e03b      	b.n	80236fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8023686:	68b9      	ldr	r1, [r7, #8]
 8023688:	68f8      	ldr	r0, [r7, #12]
 802368a:	f7ff fe3e 	bl	802330a <get_fat>
 802368e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8023690:	697b      	ldr	r3, [r7, #20]
 8023692:	2b00      	cmp	r3, #0
 8023694:	d031      	beq.n	80236fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8023696:	697b      	ldr	r3, [r7, #20]
 8023698:	2b01      	cmp	r3, #1
 802369a:	d101      	bne.n	80236a0 <remove_chain+0x64>
 802369c:	2302      	movs	r3, #2
 802369e:	e02e      	b.n	80236fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80236a0:	697b      	ldr	r3, [r7, #20]
 80236a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236a6:	d101      	bne.n	80236ac <remove_chain+0x70>
 80236a8:	2301      	movs	r3, #1
 80236aa:	e028      	b.n	80236fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80236ac:	2200      	movs	r2, #0
 80236ae:	68b9      	ldr	r1, [r7, #8]
 80236b0:	69b8      	ldr	r0, [r7, #24]
 80236b2:	f7ff fed4 	bl	802345e <put_fat>
 80236b6:	4603      	mov	r3, r0
 80236b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80236ba:	7ffb      	ldrb	r3, [r7, #31]
 80236bc:	2b00      	cmp	r3, #0
 80236be:	d001      	beq.n	80236c4 <remove_chain+0x88>
 80236c0:	7ffb      	ldrb	r3, [r7, #31]
 80236c2:	e01c      	b.n	80236fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80236c4:	69bb      	ldr	r3, [r7, #24]
 80236c6:	691a      	ldr	r2, [r3, #16]
 80236c8:	69bb      	ldr	r3, [r7, #24]
 80236ca:	695b      	ldr	r3, [r3, #20]
 80236cc:	3b02      	subs	r3, #2
 80236ce:	429a      	cmp	r2, r3
 80236d0:	d20b      	bcs.n	80236ea <remove_chain+0xae>
			fs->free_clst++;
 80236d2:	69bb      	ldr	r3, [r7, #24]
 80236d4:	691b      	ldr	r3, [r3, #16]
 80236d6:	1c5a      	adds	r2, r3, #1
 80236d8:	69bb      	ldr	r3, [r7, #24]
 80236da:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80236dc:	69bb      	ldr	r3, [r7, #24]
 80236de:	791b      	ldrb	r3, [r3, #4]
 80236e0:	f043 0301 	orr.w	r3, r3, #1
 80236e4:	b2da      	uxtb	r2, r3
 80236e6:	69bb      	ldr	r3, [r7, #24]
 80236e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80236ea:	697b      	ldr	r3, [r7, #20]
 80236ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80236ee:	69bb      	ldr	r3, [r7, #24]
 80236f0:	695b      	ldr	r3, [r3, #20]
 80236f2:	68ba      	ldr	r2, [r7, #8]
 80236f4:	429a      	cmp	r2, r3
 80236f6:	d3c6      	bcc.n	8023686 <remove_chain+0x4a>
 80236f8:	e000      	b.n	80236fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80236fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80236fc:	2300      	movs	r3, #0
}
 80236fe:	4618      	mov	r0, r3
 8023700:	3720      	adds	r7, #32
 8023702:	46bd      	mov	sp, r7
 8023704:	bd80      	pop	{r7, pc}

08023706 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8023706:	b580      	push	{r7, lr}
 8023708:	b088      	sub	sp, #32
 802370a:	af00      	add	r7, sp, #0
 802370c:	6078      	str	r0, [r7, #4]
 802370e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	681b      	ldr	r3, [r3, #0]
 8023714:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8023716:	683b      	ldr	r3, [r7, #0]
 8023718:	2b00      	cmp	r3, #0
 802371a:	d10d      	bne.n	8023738 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802371c:	693b      	ldr	r3, [r7, #16]
 802371e:	68db      	ldr	r3, [r3, #12]
 8023720:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8023722:	69bb      	ldr	r3, [r7, #24]
 8023724:	2b00      	cmp	r3, #0
 8023726:	d004      	beq.n	8023732 <create_chain+0x2c>
 8023728:	693b      	ldr	r3, [r7, #16]
 802372a:	695b      	ldr	r3, [r3, #20]
 802372c:	69ba      	ldr	r2, [r7, #24]
 802372e:	429a      	cmp	r2, r3
 8023730:	d31b      	bcc.n	802376a <create_chain+0x64>
 8023732:	2301      	movs	r3, #1
 8023734:	61bb      	str	r3, [r7, #24]
 8023736:	e018      	b.n	802376a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8023738:	6839      	ldr	r1, [r7, #0]
 802373a:	6878      	ldr	r0, [r7, #4]
 802373c:	f7ff fde5 	bl	802330a <get_fat>
 8023740:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8023742:	68fb      	ldr	r3, [r7, #12]
 8023744:	2b01      	cmp	r3, #1
 8023746:	d801      	bhi.n	802374c <create_chain+0x46>
 8023748:	2301      	movs	r3, #1
 802374a:	e070      	b.n	802382e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 802374c:	68fb      	ldr	r3, [r7, #12]
 802374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023752:	d101      	bne.n	8023758 <create_chain+0x52>
 8023754:	68fb      	ldr	r3, [r7, #12]
 8023756:	e06a      	b.n	802382e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8023758:	693b      	ldr	r3, [r7, #16]
 802375a:	695b      	ldr	r3, [r3, #20]
 802375c:	68fa      	ldr	r2, [r7, #12]
 802375e:	429a      	cmp	r2, r3
 8023760:	d201      	bcs.n	8023766 <create_chain+0x60>
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	e063      	b.n	802382e <create_chain+0x128>
		scl = clst;
 8023766:	683b      	ldr	r3, [r7, #0]
 8023768:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 802376a:	69bb      	ldr	r3, [r7, #24]
 802376c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 802376e:	69fb      	ldr	r3, [r7, #28]
 8023770:	3301      	adds	r3, #1
 8023772:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8023774:	693b      	ldr	r3, [r7, #16]
 8023776:	695b      	ldr	r3, [r3, #20]
 8023778:	69fa      	ldr	r2, [r7, #28]
 802377a:	429a      	cmp	r2, r3
 802377c:	d307      	bcc.n	802378e <create_chain+0x88>
				ncl = 2;
 802377e:	2302      	movs	r3, #2
 8023780:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8023782:	69fa      	ldr	r2, [r7, #28]
 8023784:	69bb      	ldr	r3, [r7, #24]
 8023786:	429a      	cmp	r2, r3
 8023788:	d901      	bls.n	802378e <create_chain+0x88>
 802378a:	2300      	movs	r3, #0
 802378c:	e04f      	b.n	802382e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 802378e:	69f9      	ldr	r1, [r7, #28]
 8023790:	6878      	ldr	r0, [r7, #4]
 8023792:	f7ff fdba 	bl	802330a <get_fat>
 8023796:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	2b00      	cmp	r3, #0
 802379c:	d00e      	beq.n	80237bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 802379e:	68fb      	ldr	r3, [r7, #12]
 80237a0:	2b01      	cmp	r3, #1
 80237a2:	d003      	beq.n	80237ac <create_chain+0xa6>
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80237aa:	d101      	bne.n	80237b0 <create_chain+0xaa>
 80237ac:	68fb      	ldr	r3, [r7, #12]
 80237ae:	e03e      	b.n	802382e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80237b0:	69fa      	ldr	r2, [r7, #28]
 80237b2:	69bb      	ldr	r3, [r7, #24]
 80237b4:	429a      	cmp	r2, r3
 80237b6:	d1da      	bne.n	802376e <create_chain+0x68>
 80237b8:	2300      	movs	r3, #0
 80237ba:	e038      	b.n	802382e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80237bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80237be:	f04f 32ff 	mov.w	r2, #4294967295
 80237c2:	69f9      	ldr	r1, [r7, #28]
 80237c4:	6938      	ldr	r0, [r7, #16]
 80237c6:	f7ff fe4a 	bl	802345e <put_fat>
 80237ca:	4603      	mov	r3, r0
 80237cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80237ce:	7dfb      	ldrb	r3, [r7, #23]
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d109      	bne.n	80237e8 <create_chain+0xe2>
 80237d4:	683b      	ldr	r3, [r7, #0]
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d006      	beq.n	80237e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80237da:	69fa      	ldr	r2, [r7, #28]
 80237dc:	6839      	ldr	r1, [r7, #0]
 80237de:	6938      	ldr	r0, [r7, #16]
 80237e0:	f7ff fe3d 	bl	802345e <put_fat>
 80237e4:	4603      	mov	r3, r0
 80237e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80237e8:	7dfb      	ldrb	r3, [r7, #23]
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	d116      	bne.n	802381c <create_chain+0x116>
		fs->last_clst = ncl;
 80237ee:	693b      	ldr	r3, [r7, #16]
 80237f0:	69fa      	ldr	r2, [r7, #28]
 80237f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80237f4:	693b      	ldr	r3, [r7, #16]
 80237f6:	691a      	ldr	r2, [r3, #16]
 80237f8:	693b      	ldr	r3, [r7, #16]
 80237fa:	695b      	ldr	r3, [r3, #20]
 80237fc:	3b02      	subs	r3, #2
 80237fe:	429a      	cmp	r2, r3
 8023800:	d804      	bhi.n	802380c <create_chain+0x106>
 8023802:	693b      	ldr	r3, [r7, #16]
 8023804:	691b      	ldr	r3, [r3, #16]
 8023806:	1e5a      	subs	r2, r3, #1
 8023808:	693b      	ldr	r3, [r7, #16]
 802380a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 802380c:	693b      	ldr	r3, [r7, #16]
 802380e:	791b      	ldrb	r3, [r3, #4]
 8023810:	f043 0301 	orr.w	r3, r3, #1
 8023814:	b2da      	uxtb	r2, r3
 8023816:	693b      	ldr	r3, [r7, #16]
 8023818:	711a      	strb	r2, [r3, #4]
 802381a:	e007      	b.n	802382c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 802381c:	7dfb      	ldrb	r3, [r7, #23]
 802381e:	2b01      	cmp	r3, #1
 8023820:	d102      	bne.n	8023828 <create_chain+0x122>
 8023822:	f04f 33ff 	mov.w	r3, #4294967295
 8023826:	e000      	b.n	802382a <create_chain+0x124>
 8023828:	2301      	movs	r3, #1
 802382a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 802382c:	69fb      	ldr	r3, [r7, #28]
}
 802382e:	4618      	mov	r0, r3
 8023830:	3720      	adds	r7, #32
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}

08023836 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8023836:	b580      	push	{r7, lr}
 8023838:	b086      	sub	sp, #24
 802383a:	af00      	add	r7, sp, #0
 802383c:	6078      	str	r0, [r7, #4]
 802383e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	681b      	ldr	r3, [r3, #0]
 8023844:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8023846:	683b      	ldr	r3, [r7, #0]
 8023848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802384c:	d204      	bcs.n	8023858 <dir_sdi+0x22>
 802384e:	683b      	ldr	r3, [r7, #0]
 8023850:	f003 031f 	and.w	r3, r3, #31
 8023854:	2b00      	cmp	r3, #0
 8023856:	d001      	beq.n	802385c <dir_sdi+0x26>
		return FR_INT_ERR;
 8023858:	2302      	movs	r3, #2
 802385a:	e063      	b.n	8023924 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	683a      	ldr	r2, [r7, #0]
 8023860:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8023862:	687b      	ldr	r3, [r7, #4]
 8023864:	689b      	ldr	r3, [r3, #8]
 8023866:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8023868:	697b      	ldr	r3, [r7, #20]
 802386a:	2b00      	cmp	r3, #0
 802386c:	d106      	bne.n	802387c <dir_sdi+0x46>
 802386e:	693b      	ldr	r3, [r7, #16]
 8023870:	781b      	ldrb	r3, [r3, #0]
 8023872:	2b02      	cmp	r3, #2
 8023874:	d902      	bls.n	802387c <dir_sdi+0x46>
		clst = fs->dirbase;
 8023876:	693b      	ldr	r3, [r7, #16]
 8023878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802387a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 802387c:	697b      	ldr	r3, [r7, #20]
 802387e:	2b00      	cmp	r3, #0
 8023880:	d10c      	bne.n	802389c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8023882:	683b      	ldr	r3, [r7, #0]
 8023884:	095b      	lsrs	r3, r3, #5
 8023886:	693a      	ldr	r2, [r7, #16]
 8023888:	8912      	ldrh	r2, [r2, #8]
 802388a:	4293      	cmp	r3, r2
 802388c:	d301      	bcc.n	8023892 <dir_sdi+0x5c>
 802388e:	2302      	movs	r3, #2
 8023890:	e048      	b.n	8023924 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8023892:	693b      	ldr	r3, [r7, #16]
 8023894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	61da      	str	r2, [r3, #28]
 802389a:	e029      	b.n	80238f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 802389c:	693b      	ldr	r3, [r7, #16]
 802389e:	895b      	ldrh	r3, [r3, #10]
 80238a0:	031b      	lsls	r3, r3, #12
 80238a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80238a4:	e019      	b.n	80238da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	6979      	ldr	r1, [r7, #20]
 80238aa:	4618      	mov	r0, r3
 80238ac:	f7ff fd2d 	bl	802330a <get_fat>
 80238b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80238b2:	697b      	ldr	r3, [r7, #20]
 80238b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80238b8:	d101      	bne.n	80238be <dir_sdi+0x88>
 80238ba:	2301      	movs	r3, #1
 80238bc:	e032      	b.n	8023924 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80238be:	697b      	ldr	r3, [r7, #20]
 80238c0:	2b01      	cmp	r3, #1
 80238c2:	d904      	bls.n	80238ce <dir_sdi+0x98>
 80238c4:	693b      	ldr	r3, [r7, #16]
 80238c6:	695b      	ldr	r3, [r3, #20]
 80238c8:	697a      	ldr	r2, [r7, #20]
 80238ca:	429a      	cmp	r2, r3
 80238cc:	d301      	bcc.n	80238d2 <dir_sdi+0x9c>
 80238ce:	2302      	movs	r3, #2
 80238d0:	e028      	b.n	8023924 <dir_sdi+0xee>
			ofs -= csz;
 80238d2:	683a      	ldr	r2, [r7, #0]
 80238d4:	68fb      	ldr	r3, [r7, #12]
 80238d6:	1ad3      	subs	r3, r2, r3
 80238d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80238da:	683a      	ldr	r2, [r7, #0]
 80238dc:	68fb      	ldr	r3, [r7, #12]
 80238de:	429a      	cmp	r2, r3
 80238e0:	d2e1      	bcs.n	80238a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80238e2:	6979      	ldr	r1, [r7, #20]
 80238e4:	6938      	ldr	r0, [r7, #16]
 80238e6:	f7ff fcf1 	bl	80232cc <clust2sect>
 80238ea:	4602      	mov	r2, r0
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	697a      	ldr	r2, [r7, #20]
 80238f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80238f6:	687b      	ldr	r3, [r7, #4]
 80238f8:	69db      	ldr	r3, [r3, #28]
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d101      	bne.n	8023902 <dir_sdi+0xcc>
 80238fe:	2302      	movs	r3, #2
 8023900:	e010      	b.n	8023924 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	69da      	ldr	r2, [r3, #28]
 8023906:	683b      	ldr	r3, [r7, #0]
 8023908:	0b1b      	lsrs	r3, r3, #12
 802390a:	441a      	add	r2, r3
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8023910:	693b      	ldr	r3, [r7, #16]
 8023912:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023916:	683b      	ldr	r3, [r7, #0]
 8023918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802391c:	441a      	add	r2, r3
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8023922:	2300      	movs	r3, #0
}
 8023924:	4618      	mov	r0, r3
 8023926:	3718      	adds	r7, #24
 8023928:	46bd      	mov	sp, r7
 802392a:	bd80      	pop	{r7, pc}

0802392c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 802392c:	b580      	push	{r7, lr}
 802392e:	b086      	sub	sp, #24
 8023930:	af00      	add	r7, sp, #0
 8023932:	6078      	str	r0, [r7, #4]
 8023934:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 802393c:	687b      	ldr	r3, [r7, #4]
 802393e:	695b      	ldr	r3, [r3, #20]
 8023940:	3320      	adds	r3, #32
 8023942:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	69db      	ldr	r3, [r3, #28]
 8023948:	2b00      	cmp	r3, #0
 802394a:	d003      	beq.n	8023954 <dir_next+0x28>
 802394c:	68bb      	ldr	r3, [r7, #8]
 802394e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8023952:	d301      	bcc.n	8023958 <dir_next+0x2c>
 8023954:	2304      	movs	r3, #4
 8023956:	e0aa      	b.n	8023aae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8023958:	68bb      	ldr	r3, [r7, #8]
 802395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802395e:	2b00      	cmp	r3, #0
 8023960:	f040 8098 	bne.w	8023a94 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	69db      	ldr	r3, [r3, #28]
 8023968:	1c5a      	adds	r2, r3, #1
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	699b      	ldr	r3, [r3, #24]
 8023972:	2b00      	cmp	r3, #0
 8023974:	d10b      	bne.n	802398e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8023976:	68bb      	ldr	r3, [r7, #8]
 8023978:	095b      	lsrs	r3, r3, #5
 802397a:	68fa      	ldr	r2, [r7, #12]
 802397c:	8912      	ldrh	r2, [r2, #8]
 802397e:	4293      	cmp	r3, r2
 8023980:	f0c0 8088 	bcc.w	8023a94 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	2200      	movs	r2, #0
 8023988:	61da      	str	r2, [r3, #28]
 802398a:	2304      	movs	r3, #4
 802398c:	e08f      	b.n	8023aae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 802398e:	68bb      	ldr	r3, [r7, #8]
 8023990:	0b1b      	lsrs	r3, r3, #12
 8023992:	68fa      	ldr	r2, [r7, #12]
 8023994:	8952      	ldrh	r2, [r2, #10]
 8023996:	3a01      	subs	r2, #1
 8023998:	4013      	ands	r3, r2
 802399a:	2b00      	cmp	r3, #0
 802399c:	d17a      	bne.n	8023a94 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802399e:	687a      	ldr	r2, [r7, #4]
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	699b      	ldr	r3, [r3, #24]
 80239a4:	4619      	mov	r1, r3
 80239a6:	4610      	mov	r0, r2
 80239a8:	f7ff fcaf 	bl	802330a <get_fat>
 80239ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80239ae:	697b      	ldr	r3, [r7, #20]
 80239b0:	2b01      	cmp	r3, #1
 80239b2:	d801      	bhi.n	80239b8 <dir_next+0x8c>
 80239b4:	2302      	movs	r3, #2
 80239b6:	e07a      	b.n	8023aae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80239b8:	697b      	ldr	r3, [r7, #20]
 80239ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239be:	d101      	bne.n	80239c4 <dir_next+0x98>
 80239c0:	2301      	movs	r3, #1
 80239c2:	e074      	b.n	8023aae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80239c4:	68fb      	ldr	r3, [r7, #12]
 80239c6:	695b      	ldr	r3, [r3, #20]
 80239c8:	697a      	ldr	r2, [r7, #20]
 80239ca:	429a      	cmp	r2, r3
 80239cc:	d358      	bcc.n	8023a80 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d104      	bne.n	80239de <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	2200      	movs	r2, #0
 80239d8:	61da      	str	r2, [r3, #28]
 80239da:	2304      	movs	r3, #4
 80239dc:	e067      	b.n	8023aae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80239de:	687a      	ldr	r2, [r7, #4]
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	699b      	ldr	r3, [r3, #24]
 80239e4:	4619      	mov	r1, r3
 80239e6:	4610      	mov	r0, r2
 80239e8:	f7ff fe8d 	bl	8023706 <create_chain>
 80239ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80239ee:	697b      	ldr	r3, [r7, #20]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d101      	bne.n	80239f8 <dir_next+0xcc>
 80239f4:	2307      	movs	r3, #7
 80239f6:	e05a      	b.n	8023aae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80239f8:	697b      	ldr	r3, [r7, #20]
 80239fa:	2b01      	cmp	r3, #1
 80239fc:	d101      	bne.n	8023a02 <dir_next+0xd6>
 80239fe:	2302      	movs	r3, #2
 8023a00:	e055      	b.n	8023aae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023a02:	697b      	ldr	r3, [r7, #20]
 8023a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a08:	d101      	bne.n	8023a0e <dir_next+0xe2>
 8023a0a:	2301      	movs	r3, #1
 8023a0c:	e04f      	b.n	8023aae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8023a0e:	68f8      	ldr	r0, [r7, #12]
 8023a10:	f7ff fb7c 	bl	802310c <sync_window>
 8023a14:	4603      	mov	r3, r0
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d001      	beq.n	8023a1e <dir_next+0xf2>
 8023a1a:	2301      	movs	r3, #1
 8023a1c:	e047      	b.n	8023aae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8023a1e:	68fb      	ldr	r3, [r7, #12]
 8023a20:	3330      	adds	r3, #48	; 0x30
 8023a22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023a26:	2100      	movs	r1, #0
 8023a28:	4618      	mov	r0, r3
 8023a2a:	f7ff f9a6 	bl	8022d7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023a2e:	2300      	movs	r3, #0
 8023a30:	613b      	str	r3, [r7, #16]
 8023a32:	6979      	ldr	r1, [r7, #20]
 8023a34:	68f8      	ldr	r0, [r7, #12]
 8023a36:	f7ff fc49 	bl	80232cc <clust2sect>
 8023a3a:	4602      	mov	r2, r0
 8023a3c:	68fb      	ldr	r3, [r7, #12]
 8023a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8023a40:	e012      	b.n	8023a68 <dir_next+0x13c>
						fs->wflag = 1;
 8023a42:	68fb      	ldr	r3, [r7, #12]
 8023a44:	2201      	movs	r2, #1
 8023a46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8023a48:	68f8      	ldr	r0, [r7, #12]
 8023a4a:	f7ff fb5f 	bl	802310c <sync_window>
 8023a4e:	4603      	mov	r3, r0
 8023a50:	2b00      	cmp	r3, #0
 8023a52:	d001      	beq.n	8023a58 <dir_next+0x12c>
 8023a54:	2301      	movs	r3, #1
 8023a56:	e02a      	b.n	8023aae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023a58:	693b      	ldr	r3, [r7, #16]
 8023a5a:	3301      	adds	r3, #1
 8023a5c:	613b      	str	r3, [r7, #16]
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a62:	1c5a      	adds	r2, r3, #1
 8023a64:	68fb      	ldr	r3, [r7, #12]
 8023a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8023a68:	68fb      	ldr	r3, [r7, #12]
 8023a6a:	895b      	ldrh	r3, [r3, #10]
 8023a6c:	461a      	mov	r2, r3
 8023a6e:	693b      	ldr	r3, [r7, #16]
 8023a70:	4293      	cmp	r3, r2
 8023a72:	d3e6      	bcc.n	8023a42 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8023a74:	68fb      	ldr	r3, [r7, #12]
 8023a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023a78:	693b      	ldr	r3, [r7, #16]
 8023a7a:	1ad2      	subs	r2, r2, r3
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	697a      	ldr	r2, [r7, #20]
 8023a84:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8023a86:	6979      	ldr	r1, [r7, #20]
 8023a88:	68f8      	ldr	r0, [r7, #12]
 8023a8a:	f7ff fc1f 	bl	80232cc <clust2sect>
 8023a8e:	4602      	mov	r2, r0
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	68ba      	ldr	r2, [r7, #8]
 8023a98:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8023a9a:	68fb      	ldr	r3, [r7, #12]
 8023a9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023aa0:	68bb      	ldr	r3, [r7, #8]
 8023aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023aa6:	441a      	add	r2, r3
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8023aac:	2300      	movs	r3, #0
}
 8023aae:	4618      	mov	r0, r3
 8023ab0:	3718      	adds	r7, #24
 8023ab2:	46bd      	mov	sp, r7
 8023ab4:	bd80      	pop	{r7, pc}

08023ab6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8023ab6:	b580      	push	{r7, lr}
 8023ab8:	b086      	sub	sp, #24
 8023aba:	af00      	add	r7, sp, #0
 8023abc:	6078      	str	r0, [r7, #4]
 8023abe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	681b      	ldr	r3, [r3, #0]
 8023ac4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8023ac6:	2100      	movs	r1, #0
 8023ac8:	6878      	ldr	r0, [r7, #4]
 8023aca:	f7ff feb4 	bl	8023836 <dir_sdi>
 8023ace:	4603      	mov	r3, r0
 8023ad0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8023ad2:	7dfb      	ldrb	r3, [r7, #23]
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d12b      	bne.n	8023b30 <dir_alloc+0x7a>
		n = 0;
 8023ad8:	2300      	movs	r3, #0
 8023ada:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	69db      	ldr	r3, [r3, #28]
 8023ae0:	4619      	mov	r1, r3
 8023ae2:	68f8      	ldr	r0, [r7, #12]
 8023ae4:	f7ff fb56 	bl	8023194 <move_window>
 8023ae8:	4603      	mov	r3, r0
 8023aea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8023aec:	7dfb      	ldrb	r3, [r7, #23]
 8023aee:	2b00      	cmp	r3, #0
 8023af0:	d11d      	bne.n	8023b2e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	6a1b      	ldr	r3, [r3, #32]
 8023af6:	781b      	ldrb	r3, [r3, #0]
 8023af8:	2be5      	cmp	r3, #229	; 0xe5
 8023afa:	d004      	beq.n	8023b06 <dir_alloc+0x50>
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	6a1b      	ldr	r3, [r3, #32]
 8023b00:	781b      	ldrb	r3, [r3, #0]
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d107      	bne.n	8023b16 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8023b06:	693b      	ldr	r3, [r7, #16]
 8023b08:	3301      	adds	r3, #1
 8023b0a:	613b      	str	r3, [r7, #16]
 8023b0c:	693a      	ldr	r2, [r7, #16]
 8023b0e:	683b      	ldr	r3, [r7, #0]
 8023b10:	429a      	cmp	r2, r3
 8023b12:	d102      	bne.n	8023b1a <dir_alloc+0x64>
 8023b14:	e00c      	b.n	8023b30 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8023b16:	2300      	movs	r3, #0
 8023b18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8023b1a:	2101      	movs	r1, #1
 8023b1c:	6878      	ldr	r0, [r7, #4]
 8023b1e:	f7ff ff05 	bl	802392c <dir_next>
 8023b22:	4603      	mov	r3, r0
 8023b24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8023b26:	7dfb      	ldrb	r3, [r7, #23]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d0d7      	beq.n	8023adc <dir_alloc+0x26>
 8023b2c:	e000      	b.n	8023b30 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8023b2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8023b30:	7dfb      	ldrb	r3, [r7, #23]
 8023b32:	2b04      	cmp	r3, #4
 8023b34:	d101      	bne.n	8023b3a <dir_alloc+0x84>
 8023b36:	2307      	movs	r3, #7
 8023b38:	75fb      	strb	r3, [r7, #23]
	return res;
 8023b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8023b3c:	4618      	mov	r0, r3
 8023b3e:	3718      	adds	r7, #24
 8023b40:	46bd      	mov	sp, r7
 8023b42:	bd80      	pop	{r7, pc}

08023b44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8023b44:	b580      	push	{r7, lr}
 8023b46:	b084      	sub	sp, #16
 8023b48:	af00      	add	r7, sp, #0
 8023b4a:	6078      	str	r0, [r7, #4]
 8023b4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8023b4e:	683b      	ldr	r3, [r7, #0]
 8023b50:	331a      	adds	r3, #26
 8023b52:	4618      	mov	r0, r3
 8023b54:	f7ff f86e 	bl	8022c34 <ld_word>
 8023b58:	4603      	mov	r3, r0
 8023b5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	781b      	ldrb	r3, [r3, #0]
 8023b60:	2b03      	cmp	r3, #3
 8023b62:	d109      	bne.n	8023b78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8023b64:	683b      	ldr	r3, [r7, #0]
 8023b66:	3314      	adds	r3, #20
 8023b68:	4618      	mov	r0, r3
 8023b6a:	f7ff f863 	bl	8022c34 <ld_word>
 8023b6e:	4603      	mov	r3, r0
 8023b70:	041b      	lsls	r3, r3, #16
 8023b72:	68fa      	ldr	r2, [r7, #12]
 8023b74:	4313      	orrs	r3, r2
 8023b76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8023b78:	68fb      	ldr	r3, [r7, #12]
}
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	3710      	adds	r7, #16
 8023b7e:	46bd      	mov	sp, r7
 8023b80:	bd80      	pop	{r7, pc}

08023b82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8023b82:	b580      	push	{r7, lr}
 8023b84:	b084      	sub	sp, #16
 8023b86:	af00      	add	r7, sp, #0
 8023b88:	60f8      	str	r0, [r7, #12]
 8023b8a:	60b9      	str	r1, [r7, #8]
 8023b8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8023b8e:	68bb      	ldr	r3, [r7, #8]
 8023b90:	331a      	adds	r3, #26
 8023b92:	687a      	ldr	r2, [r7, #4]
 8023b94:	b292      	uxth	r2, r2
 8023b96:	4611      	mov	r1, r2
 8023b98:	4618      	mov	r0, r3
 8023b9a:	f7ff f886 	bl	8022caa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	781b      	ldrb	r3, [r3, #0]
 8023ba2:	2b03      	cmp	r3, #3
 8023ba4:	d109      	bne.n	8023bba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8023ba6:	68bb      	ldr	r3, [r7, #8]
 8023ba8:	f103 0214 	add.w	r2, r3, #20
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	0c1b      	lsrs	r3, r3, #16
 8023bb0:	b29b      	uxth	r3, r3
 8023bb2:	4619      	mov	r1, r3
 8023bb4:	4610      	mov	r0, r2
 8023bb6:	f7ff f878 	bl	8022caa <st_word>
	}
}
 8023bba:	bf00      	nop
 8023bbc:	3710      	adds	r7, #16
 8023bbe:	46bd      	mov	sp, r7
 8023bc0:	bd80      	pop	{r7, pc}

08023bc2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8023bc2:	b580      	push	{r7, lr}
 8023bc4:	b086      	sub	sp, #24
 8023bc6:	af00      	add	r7, sp, #0
 8023bc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	681b      	ldr	r3, [r3, #0]
 8023bce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8023bd0:	2100      	movs	r1, #0
 8023bd2:	6878      	ldr	r0, [r7, #4]
 8023bd4:	f7ff fe2f 	bl	8023836 <dir_sdi>
 8023bd8:	4603      	mov	r3, r0
 8023bda:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8023bdc:	7dfb      	ldrb	r3, [r7, #23]
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	d001      	beq.n	8023be6 <dir_find+0x24>
 8023be2:	7dfb      	ldrb	r3, [r7, #23]
 8023be4:	e03e      	b.n	8023c64 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	69db      	ldr	r3, [r3, #28]
 8023bea:	4619      	mov	r1, r3
 8023bec:	6938      	ldr	r0, [r7, #16]
 8023bee:	f7ff fad1 	bl	8023194 <move_window>
 8023bf2:	4603      	mov	r3, r0
 8023bf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8023bf6:	7dfb      	ldrb	r3, [r7, #23]
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	d12f      	bne.n	8023c5c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	6a1b      	ldr	r3, [r3, #32]
 8023c00:	781b      	ldrb	r3, [r3, #0]
 8023c02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8023c04:	7bfb      	ldrb	r3, [r7, #15]
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d102      	bne.n	8023c10 <dir_find+0x4e>
 8023c0a:	2304      	movs	r3, #4
 8023c0c:	75fb      	strb	r3, [r7, #23]
 8023c0e:	e028      	b.n	8023c62 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	6a1b      	ldr	r3, [r3, #32]
 8023c14:	330b      	adds	r3, #11
 8023c16:	781b      	ldrb	r3, [r3, #0]
 8023c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023c1c:	b2da      	uxtb	r2, r3
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	6a1b      	ldr	r3, [r3, #32]
 8023c26:	330b      	adds	r3, #11
 8023c28:	781b      	ldrb	r3, [r3, #0]
 8023c2a:	f003 0308 	and.w	r3, r3, #8
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d10a      	bne.n	8023c48 <dir_find+0x86>
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	6a18      	ldr	r0, [r3, #32]
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	3324      	adds	r3, #36	; 0x24
 8023c3a:	220b      	movs	r2, #11
 8023c3c:	4619      	mov	r1, r3
 8023c3e:	f7ff f8b7 	bl	8022db0 <mem_cmp>
 8023c42:	4603      	mov	r3, r0
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	d00b      	beq.n	8023c60 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8023c48:	2100      	movs	r1, #0
 8023c4a:	6878      	ldr	r0, [r7, #4]
 8023c4c:	f7ff fe6e 	bl	802392c <dir_next>
 8023c50:	4603      	mov	r3, r0
 8023c52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8023c54:	7dfb      	ldrb	r3, [r7, #23]
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d0c5      	beq.n	8023be6 <dir_find+0x24>
 8023c5a:	e002      	b.n	8023c62 <dir_find+0xa0>
		if (res != FR_OK) break;
 8023c5c:	bf00      	nop
 8023c5e:	e000      	b.n	8023c62 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8023c60:	bf00      	nop

	return res;
 8023c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8023c64:	4618      	mov	r0, r3
 8023c66:	3718      	adds	r7, #24
 8023c68:	46bd      	mov	sp, r7
 8023c6a:	bd80      	pop	{r7, pc}

08023c6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8023c6c:	b580      	push	{r7, lr}
 8023c6e:	b084      	sub	sp, #16
 8023c70:	af00      	add	r7, sp, #0
 8023c72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8023c7a:	2101      	movs	r1, #1
 8023c7c:	6878      	ldr	r0, [r7, #4]
 8023c7e:	f7ff ff1a 	bl	8023ab6 <dir_alloc>
 8023c82:	4603      	mov	r3, r0
 8023c84:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8023c86:	7bfb      	ldrb	r3, [r7, #15]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	d11c      	bne.n	8023cc6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	69db      	ldr	r3, [r3, #28]
 8023c90:	4619      	mov	r1, r3
 8023c92:	68b8      	ldr	r0, [r7, #8]
 8023c94:	f7ff fa7e 	bl	8023194 <move_window>
 8023c98:	4603      	mov	r3, r0
 8023c9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8023c9c:	7bfb      	ldrb	r3, [r7, #15]
 8023c9e:	2b00      	cmp	r3, #0
 8023ca0:	d111      	bne.n	8023cc6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	6a1b      	ldr	r3, [r3, #32]
 8023ca6:	2220      	movs	r2, #32
 8023ca8:	2100      	movs	r1, #0
 8023caa:	4618      	mov	r0, r3
 8023cac:	f7ff f865 	bl	8022d7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	6a18      	ldr	r0, [r3, #32]
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	3324      	adds	r3, #36	; 0x24
 8023cb8:	220b      	movs	r2, #11
 8023cba:	4619      	mov	r1, r3
 8023cbc:	f7ff f83c 	bl	8022d38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8023cc0:	68bb      	ldr	r3, [r7, #8]
 8023cc2:	2201      	movs	r2, #1
 8023cc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8023cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8023cc8:	4618      	mov	r0, r3
 8023cca:	3710      	adds	r7, #16
 8023ccc:	46bd      	mov	sp, r7
 8023cce:	bd80      	pop	{r7, pc}

08023cd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8023cd0:	b580      	push	{r7, lr}
 8023cd2:	b088      	sub	sp, #32
 8023cd4:	af00      	add	r7, sp, #0
 8023cd6:	6078      	str	r0, [r7, #4]
 8023cd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8023cda:	683b      	ldr	r3, [r7, #0]
 8023cdc:	681b      	ldr	r3, [r3, #0]
 8023cde:	60fb      	str	r3, [r7, #12]
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	3324      	adds	r3, #36	; 0x24
 8023ce4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8023ce6:	220b      	movs	r2, #11
 8023ce8:	2120      	movs	r1, #32
 8023cea:	68b8      	ldr	r0, [r7, #8]
 8023cec:	f7ff f845 	bl	8022d7a <mem_set>
	si = i = 0; ni = 8;
 8023cf0:	2300      	movs	r3, #0
 8023cf2:	613b      	str	r3, [r7, #16]
 8023cf4:	693b      	ldr	r3, [r7, #16]
 8023cf6:	61fb      	str	r3, [r7, #28]
 8023cf8:	2308      	movs	r3, #8
 8023cfa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8023cfc:	69fb      	ldr	r3, [r7, #28]
 8023cfe:	1c5a      	adds	r2, r3, #1
 8023d00:	61fa      	str	r2, [r7, #28]
 8023d02:	68fa      	ldr	r2, [r7, #12]
 8023d04:	4413      	add	r3, r2
 8023d06:	781b      	ldrb	r3, [r3, #0]
 8023d08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8023d0a:	7efb      	ldrb	r3, [r7, #27]
 8023d0c:	2b20      	cmp	r3, #32
 8023d0e:	d94e      	bls.n	8023dae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8023d10:	7efb      	ldrb	r3, [r7, #27]
 8023d12:	2b2f      	cmp	r3, #47	; 0x2f
 8023d14:	d006      	beq.n	8023d24 <create_name+0x54>
 8023d16:	7efb      	ldrb	r3, [r7, #27]
 8023d18:	2b5c      	cmp	r3, #92	; 0x5c
 8023d1a:	d110      	bne.n	8023d3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8023d1c:	e002      	b.n	8023d24 <create_name+0x54>
 8023d1e:	69fb      	ldr	r3, [r7, #28]
 8023d20:	3301      	adds	r3, #1
 8023d22:	61fb      	str	r3, [r7, #28]
 8023d24:	68fa      	ldr	r2, [r7, #12]
 8023d26:	69fb      	ldr	r3, [r7, #28]
 8023d28:	4413      	add	r3, r2
 8023d2a:	781b      	ldrb	r3, [r3, #0]
 8023d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8023d2e:	d0f6      	beq.n	8023d1e <create_name+0x4e>
 8023d30:	68fa      	ldr	r2, [r7, #12]
 8023d32:	69fb      	ldr	r3, [r7, #28]
 8023d34:	4413      	add	r3, r2
 8023d36:	781b      	ldrb	r3, [r3, #0]
 8023d38:	2b5c      	cmp	r3, #92	; 0x5c
 8023d3a:	d0f0      	beq.n	8023d1e <create_name+0x4e>
			break;
 8023d3c:	e038      	b.n	8023db0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8023d3e:	7efb      	ldrb	r3, [r7, #27]
 8023d40:	2b2e      	cmp	r3, #46	; 0x2e
 8023d42:	d003      	beq.n	8023d4c <create_name+0x7c>
 8023d44:	693a      	ldr	r2, [r7, #16]
 8023d46:	697b      	ldr	r3, [r7, #20]
 8023d48:	429a      	cmp	r2, r3
 8023d4a:	d30c      	bcc.n	8023d66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8023d4c:	697b      	ldr	r3, [r7, #20]
 8023d4e:	2b0b      	cmp	r3, #11
 8023d50:	d002      	beq.n	8023d58 <create_name+0x88>
 8023d52:	7efb      	ldrb	r3, [r7, #27]
 8023d54:	2b2e      	cmp	r3, #46	; 0x2e
 8023d56:	d001      	beq.n	8023d5c <create_name+0x8c>
 8023d58:	2306      	movs	r3, #6
 8023d5a:	e044      	b.n	8023de6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8023d5c:	2308      	movs	r3, #8
 8023d5e:	613b      	str	r3, [r7, #16]
 8023d60:	230b      	movs	r3, #11
 8023d62:	617b      	str	r3, [r7, #20]
			continue;
 8023d64:	e022      	b.n	8023dac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8023d66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023d6a:	2b00      	cmp	r3, #0
 8023d6c:	da04      	bge.n	8023d78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8023d6e:	7efb      	ldrb	r3, [r7, #27]
 8023d70:	3b80      	subs	r3, #128	; 0x80
 8023d72:	4a1f      	ldr	r2, [pc, #124]	; (8023df0 <create_name+0x120>)
 8023d74:	5cd3      	ldrb	r3, [r2, r3]
 8023d76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8023d78:	7efb      	ldrb	r3, [r7, #27]
 8023d7a:	4619      	mov	r1, r3
 8023d7c:	481d      	ldr	r0, [pc, #116]	; (8023df4 <create_name+0x124>)
 8023d7e:	f7ff f83e 	bl	8022dfe <chk_chr>
 8023d82:	4603      	mov	r3, r0
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d001      	beq.n	8023d8c <create_name+0xbc>
 8023d88:	2306      	movs	r3, #6
 8023d8a:	e02c      	b.n	8023de6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8023d8c:	7efb      	ldrb	r3, [r7, #27]
 8023d8e:	2b60      	cmp	r3, #96	; 0x60
 8023d90:	d905      	bls.n	8023d9e <create_name+0xce>
 8023d92:	7efb      	ldrb	r3, [r7, #27]
 8023d94:	2b7a      	cmp	r3, #122	; 0x7a
 8023d96:	d802      	bhi.n	8023d9e <create_name+0xce>
 8023d98:	7efb      	ldrb	r3, [r7, #27]
 8023d9a:	3b20      	subs	r3, #32
 8023d9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8023d9e:	693b      	ldr	r3, [r7, #16]
 8023da0:	1c5a      	adds	r2, r3, #1
 8023da2:	613a      	str	r2, [r7, #16]
 8023da4:	68ba      	ldr	r2, [r7, #8]
 8023da6:	4413      	add	r3, r2
 8023da8:	7efa      	ldrb	r2, [r7, #27]
 8023daa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8023dac:	e7a6      	b.n	8023cfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8023dae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8023db0:	68fa      	ldr	r2, [r7, #12]
 8023db2:	69fb      	ldr	r3, [r7, #28]
 8023db4:	441a      	add	r2, r3
 8023db6:	683b      	ldr	r3, [r7, #0]
 8023db8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8023dba:	693b      	ldr	r3, [r7, #16]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d101      	bne.n	8023dc4 <create_name+0xf4>
 8023dc0:	2306      	movs	r3, #6
 8023dc2:	e010      	b.n	8023de6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8023dc4:	68bb      	ldr	r3, [r7, #8]
 8023dc6:	781b      	ldrb	r3, [r3, #0]
 8023dc8:	2be5      	cmp	r3, #229	; 0xe5
 8023dca:	d102      	bne.n	8023dd2 <create_name+0x102>
 8023dcc:	68bb      	ldr	r3, [r7, #8]
 8023dce:	2205      	movs	r2, #5
 8023dd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8023dd2:	7efb      	ldrb	r3, [r7, #27]
 8023dd4:	2b20      	cmp	r3, #32
 8023dd6:	d801      	bhi.n	8023ddc <create_name+0x10c>
 8023dd8:	2204      	movs	r2, #4
 8023dda:	e000      	b.n	8023dde <create_name+0x10e>
 8023ddc:	2200      	movs	r2, #0
 8023dde:	68bb      	ldr	r3, [r7, #8]
 8023de0:	330b      	adds	r3, #11
 8023de2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8023de4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8023de6:	4618      	mov	r0, r3
 8023de8:	3720      	adds	r7, #32
 8023dea:	46bd      	mov	sp, r7
 8023dec:	bd80      	pop	{r7, pc}
 8023dee:	bf00      	nop
 8023df0:	08002404 	.word	0x08002404
 8023df4:	08000adc 	.word	0x08000adc

08023df8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8023df8:	b580      	push	{r7, lr}
 8023dfa:	b086      	sub	sp, #24
 8023dfc:	af00      	add	r7, sp, #0
 8023dfe:	6078      	str	r0, [r7, #4]
 8023e00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8023e06:	693b      	ldr	r3, [r7, #16]
 8023e08:	681b      	ldr	r3, [r3, #0]
 8023e0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8023e0c:	e002      	b.n	8023e14 <follow_path+0x1c>
 8023e0e:	683b      	ldr	r3, [r7, #0]
 8023e10:	3301      	adds	r3, #1
 8023e12:	603b      	str	r3, [r7, #0]
 8023e14:	683b      	ldr	r3, [r7, #0]
 8023e16:	781b      	ldrb	r3, [r3, #0]
 8023e18:	2b2f      	cmp	r3, #47	; 0x2f
 8023e1a:	d0f8      	beq.n	8023e0e <follow_path+0x16>
 8023e1c:	683b      	ldr	r3, [r7, #0]
 8023e1e:	781b      	ldrb	r3, [r3, #0]
 8023e20:	2b5c      	cmp	r3, #92	; 0x5c
 8023e22:	d0f4      	beq.n	8023e0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8023e24:	693b      	ldr	r3, [r7, #16]
 8023e26:	2200      	movs	r2, #0
 8023e28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8023e2a:	683b      	ldr	r3, [r7, #0]
 8023e2c:	781b      	ldrb	r3, [r3, #0]
 8023e2e:	2b1f      	cmp	r3, #31
 8023e30:	d80a      	bhi.n	8023e48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	2280      	movs	r2, #128	; 0x80
 8023e36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8023e3a:	2100      	movs	r1, #0
 8023e3c:	6878      	ldr	r0, [r7, #4]
 8023e3e:	f7ff fcfa 	bl	8023836 <dir_sdi>
 8023e42:	4603      	mov	r3, r0
 8023e44:	75fb      	strb	r3, [r7, #23]
 8023e46:	e043      	b.n	8023ed0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023e48:	463b      	mov	r3, r7
 8023e4a:	4619      	mov	r1, r3
 8023e4c:	6878      	ldr	r0, [r7, #4]
 8023e4e:	f7ff ff3f 	bl	8023cd0 <create_name>
 8023e52:	4603      	mov	r3, r0
 8023e54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8023e56:	7dfb      	ldrb	r3, [r7, #23]
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	d134      	bne.n	8023ec6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8023e5c:	6878      	ldr	r0, [r7, #4]
 8023e5e:	f7ff feb0 	bl	8023bc2 <dir_find>
 8023e62:	4603      	mov	r3, r0
 8023e64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8023e6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8023e6e:	7dfb      	ldrb	r3, [r7, #23]
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d00a      	beq.n	8023e8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8023e74:	7dfb      	ldrb	r3, [r7, #23]
 8023e76:	2b04      	cmp	r3, #4
 8023e78:	d127      	bne.n	8023eca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8023e7a:	7afb      	ldrb	r3, [r7, #11]
 8023e7c:	f003 0304 	and.w	r3, r3, #4
 8023e80:	2b00      	cmp	r3, #0
 8023e82:	d122      	bne.n	8023eca <follow_path+0xd2>
 8023e84:	2305      	movs	r3, #5
 8023e86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8023e88:	e01f      	b.n	8023eca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8023e8a:	7afb      	ldrb	r3, [r7, #11]
 8023e8c:	f003 0304 	and.w	r3, r3, #4
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	d11c      	bne.n	8023ece <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8023e94:	693b      	ldr	r3, [r7, #16]
 8023e96:	799b      	ldrb	r3, [r3, #6]
 8023e98:	f003 0310 	and.w	r3, r3, #16
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	d102      	bne.n	8023ea6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8023ea0:	2305      	movs	r3, #5
 8023ea2:	75fb      	strb	r3, [r7, #23]
 8023ea4:	e014      	b.n	8023ed0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8023ea6:	68fb      	ldr	r3, [r7, #12]
 8023ea8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023eac:	687b      	ldr	r3, [r7, #4]
 8023eae:	695b      	ldr	r3, [r3, #20]
 8023eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023eb4:	4413      	add	r3, r2
 8023eb6:	4619      	mov	r1, r3
 8023eb8:	68f8      	ldr	r0, [r7, #12]
 8023eba:	f7ff fe43 	bl	8023b44 <ld_clust>
 8023ebe:	4602      	mov	r2, r0
 8023ec0:	693b      	ldr	r3, [r7, #16]
 8023ec2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023ec4:	e7c0      	b.n	8023e48 <follow_path+0x50>
			if (res != FR_OK) break;
 8023ec6:	bf00      	nop
 8023ec8:	e002      	b.n	8023ed0 <follow_path+0xd8>
				break;
 8023eca:	bf00      	nop
 8023ecc:	e000      	b.n	8023ed0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8023ece:	bf00      	nop
			}
		}
	}

	return res;
 8023ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8023ed2:	4618      	mov	r0, r3
 8023ed4:	3718      	adds	r7, #24
 8023ed6:	46bd      	mov	sp, r7
 8023ed8:	bd80      	pop	{r7, pc}

08023eda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8023eda:	b480      	push	{r7}
 8023edc:	b087      	sub	sp, #28
 8023ede:	af00      	add	r7, sp, #0
 8023ee0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8023ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8023ee6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	681b      	ldr	r3, [r3, #0]
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	d031      	beq.n	8023f54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8023ef0:	687b      	ldr	r3, [r7, #4]
 8023ef2:	681b      	ldr	r3, [r3, #0]
 8023ef4:	617b      	str	r3, [r7, #20]
 8023ef6:	e002      	b.n	8023efe <get_ldnumber+0x24>
 8023ef8:	697b      	ldr	r3, [r7, #20]
 8023efa:	3301      	adds	r3, #1
 8023efc:	617b      	str	r3, [r7, #20]
 8023efe:	697b      	ldr	r3, [r7, #20]
 8023f00:	781b      	ldrb	r3, [r3, #0]
 8023f02:	2b20      	cmp	r3, #32
 8023f04:	d903      	bls.n	8023f0e <get_ldnumber+0x34>
 8023f06:	697b      	ldr	r3, [r7, #20]
 8023f08:	781b      	ldrb	r3, [r3, #0]
 8023f0a:	2b3a      	cmp	r3, #58	; 0x3a
 8023f0c:	d1f4      	bne.n	8023ef8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8023f0e:	697b      	ldr	r3, [r7, #20]
 8023f10:	781b      	ldrb	r3, [r3, #0]
 8023f12:	2b3a      	cmp	r3, #58	; 0x3a
 8023f14:	d11c      	bne.n	8023f50 <get_ldnumber+0x76>
			tp = *path;
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8023f1c:	68fb      	ldr	r3, [r7, #12]
 8023f1e:	1c5a      	adds	r2, r3, #1
 8023f20:	60fa      	str	r2, [r7, #12]
 8023f22:	781b      	ldrb	r3, [r3, #0]
 8023f24:	3b30      	subs	r3, #48	; 0x30
 8023f26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8023f28:	68bb      	ldr	r3, [r7, #8]
 8023f2a:	2b09      	cmp	r3, #9
 8023f2c:	d80e      	bhi.n	8023f4c <get_ldnumber+0x72>
 8023f2e:	68fa      	ldr	r2, [r7, #12]
 8023f30:	697b      	ldr	r3, [r7, #20]
 8023f32:	429a      	cmp	r2, r3
 8023f34:	d10a      	bne.n	8023f4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8023f36:	68bb      	ldr	r3, [r7, #8]
 8023f38:	2b00      	cmp	r3, #0
 8023f3a:	d107      	bne.n	8023f4c <get_ldnumber+0x72>
					vol = (int)i;
 8023f3c:	68bb      	ldr	r3, [r7, #8]
 8023f3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8023f40:	697b      	ldr	r3, [r7, #20]
 8023f42:	3301      	adds	r3, #1
 8023f44:	617b      	str	r3, [r7, #20]
 8023f46:	687b      	ldr	r3, [r7, #4]
 8023f48:	697a      	ldr	r2, [r7, #20]
 8023f4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8023f4c:	693b      	ldr	r3, [r7, #16]
 8023f4e:	e002      	b.n	8023f56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8023f50:	2300      	movs	r3, #0
 8023f52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8023f54:	693b      	ldr	r3, [r7, #16]
}
 8023f56:	4618      	mov	r0, r3
 8023f58:	371c      	adds	r7, #28
 8023f5a:	46bd      	mov	sp, r7
 8023f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f60:	4770      	bx	lr
	...

08023f64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8023f64:	b580      	push	{r7, lr}
 8023f66:	b082      	sub	sp, #8
 8023f68:	af00      	add	r7, sp, #0
 8023f6a:	6078      	str	r0, [r7, #4]
 8023f6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	2200      	movs	r2, #0
 8023f72:	70da      	strb	r2, [r3, #3]
 8023f74:	687b      	ldr	r3, [r7, #4]
 8023f76:	f04f 32ff 	mov.w	r2, #4294967295
 8023f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8023f7c:	6839      	ldr	r1, [r7, #0]
 8023f7e:	6878      	ldr	r0, [r7, #4]
 8023f80:	f7ff f908 	bl	8023194 <move_window>
 8023f84:	4603      	mov	r3, r0
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d001      	beq.n	8023f8e <check_fs+0x2a>
 8023f8a:	2304      	movs	r3, #4
 8023f8c:	e038      	b.n	8024000 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	3330      	adds	r3, #48	; 0x30
 8023f92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023f96:	4618      	mov	r0, r3
 8023f98:	f7fe fe4c 	bl	8022c34 <ld_word>
 8023f9c:	4603      	mov	r3, r0
 8023f9e:	461a      	mov	r2, r3
 8023fa0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8023fa4:	429a      	cmp	r2, r3
 8023fa6:	d001      	beq.n	8023fac <check_fs+0x48>
 8023fa8:	2303      	movs	r3, #3
 8023faa:	e029      	b.n	8024000 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8023fac:	687b      	ldr	r3, [r7, #4]
 8023fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023fb2:	2be9      	cmp	r3, #233	; 0xe9
 8023fb4:	d009      	beq.n	8023fca <check_fs+0x66>
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023fbc:	2beb      	cmp	r3, #235	; 0xeb
 8023fbe:	d11e      	bne.n	8023ffe <check_fs+0x9a>
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8023fc6:	2b90      	cmp	r3, #144	; 0x90
 8023fc8:	d119      	bne.n	8023ffe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	3330      	adds	r3, #48	; 0x30
 8023fce:	3336      	adds	r3, #54	; 0x36
 8023fd0:	4618      	mov	r0, r3
 8023fd2:	f7fe fe47 	bl	8022c64 <ld_dword>
 8023fd6:	4603      	mov	r3, r0
 8023fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8023fdc:	4a0a      	ldr	r2, [pc, #40]	; (8024008 <check_fs+0xa4>)
 8023fde:	4293      	cmp	r3, r2
 8023fe0:	d101      	bne.n	8023fe6 <check_fs+0x82>
 8023fe2:	2300      	movs	r3, #0
 8023fe4:	e00c      	b.n	8024000 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8023fe6:	687b      	ldr	r3, [r7, #4]
 8023fe8:	3330      	adds	r3, #48	; 0x30
 8023fea:	3352      	adds	r3, #82	; 0x52
 8023fec:	4618      	mov	r0, r3
 8023fee:	f7fe fe39 	bl	8022c64 <ld_dword>
 8023ff2:	4603      	mov	r3, r0
 8023ff4:	4a05      	ldr	r2, [pc, #20]	; (802400c <check_fs+0xa8>)
 8023ff6:	4293      	cmp	r3, r2
 8023ff8:	d101      	bne.n	8023ffe <check_fs+0x9a>
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	e000      	b.n	8024000 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8023ffe:	2302      	movs	r3, #2
}
 8024000:	4618      	mov	r0, r3
 8024002:	3708      	adds	r7, #8
 8024004:	46bd      	mov	sp, r7
 8024006:	bd80      	pop	{r7, pc}
 8024008:	00544146 	.word	0x00544146
 802400c:	33544146 	.word	0x33544146

08024010 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8024010:	b580      	push	{r7, lr}
 8024012:	b096      	sub	sp, #88	; 0x58
 8024014:	af00      	add	r7, sp, #0
 8024016:	60f8      	str	r0, [r7, #12]
 8024018:	60b9      	str	r1, [r7, #8]
 802401a:	4613      	mov	r3, r2
 802401c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802401e:	68bb      	ldr	r3, [r7, #8]
 8024020:	2200      	movs	r2, #0
 8024022:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8024024:	68f8      	ldr	r0, [r7, #12]
 8024026:	f7ff ff58 	bl	8023eda <get_ldnumber>
 802402a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 802402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802402e:	2b00      	cmp	r3, #0
 8024030:	da01      	bge.n	8024036 <find_volume+0x26>
 8024032:	230b      	movs	r3, #11
 8024034:	e22d      	b.n	8024492 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8024036:	4aa1      	ldr	r2, [pc, #644]	; (80242bc <find_volume+0x2ac>)
 8024038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802403e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8024040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024042:	2b00      	cmp	r3, #0
 8024044:	d101      	bne.n	802404a <find_volume+0x3a>
 8024046:	230c      	movs	r3, #12
 8024048:	e223      	b.n	8024492 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802404a:	68bb      	ldr	r3, [r7, #8]
 802404c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802404e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8024050:	79fb      	ldrb	r3, [r7, #7]
 8024052:	f023 0301 	bic.w	r3, r3, #1
 8024056:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8024058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802405a:	781b      	ldrb	r3, [r3, #0]
 802405c:	2b00      	cmp	r3, #0
 802405e:	d01a      	beq.n	8024096 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8024060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024062:	785b      	ldrb	r3, [r3, #1]
 8024064:	4618      	mov	r0, r3
 8024066:	f7fe fd47 	bl	8022af8 <disk_status>
 802406a:	4603      	mov	r3, r0
 802406c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8024070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024074:	f003 0301 	and.w	r3, r3, #1
 8024078:	2b00      	cmp	r3, #0
 802407a:	d10c      	bne.n	8024096 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802407c:	79fb      	ldrb	r3, [r7, #7]
 802407e:	2b00      	cmp	r3, #0
 8024080:	d007      	beq.n	8024092 <find_volume+0x82>
 8024082:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024086:	f003 0304 	and.w	r3, r3, #4
 802408a:	2b00      	cmp	r3, #0
 802408c:	d001      	beq.n	8024092 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 802408e:	230a      	movs	r3, #10
 8024090:	e1ff      	b.n	8024492 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8024092:	2300      	movs	r3, #0
 8024094:	e1fd      	b.n	8024492 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8024096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024098:	2200      	movs	r2, #0
 802409a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 802409c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802409e:	b2da      	uxtb	r2, r3
 80240a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80240a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240a6:	785b      	ldrb	r3, [r3, #1]
 80240a8:	4618      	mov	r0, r3
 80240aa:	f7fe fd3f 	bl	8022b2c <disk_initialize>
 80240ae:	4603      	mov	r3, r0
 80240b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80240b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240b8:	f003 0301 	and.w	r3, r3, #1
 80240bc:	2b00      	cmp	r3, #0
 80240be:	d001      	beq.n	80240c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80240c0:	2303      	movs	r3, #3
 80240c2:	e1e6      	b.n	8024492 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80240c4:	79fb      	ldrb	r3, [r7, #7]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d007      	beq.n	80240da <find_volume+0xca>
 80240ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240ce:	f003 0304 	and.w	r3, r3, #4
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	d001      	beq.n	80240da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80240d6:	230a      	movs	r3, #10
 80240d8:	e1db      	b.n	8024492 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80240da:	2300      	movs	r3, #0
 80240dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80240de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80240e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80240e2:	f7ff ff3f 	bl	8023f64 <check_fs>
 80240e6:	4603      	mov	r3, r0
 80240e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80240ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80240f0:	2b02      	cmp	r3, #2
 80240f2:	d149      	bne.n	8024188 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80240f4:	2300      	movs	r3, #0
 80240f6:	643b      	str	r3, [r7, #64]	; 0x40
 80240f8:	e01e      	b.n	8024138 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80240fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024102:	011b      	lsls	r3, r3, #4
 8024104:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8024108:	4413      	add	r3, r2
 802410a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802410e:	3304      	adds	r3, #4
 8024110:	781b      	ldrb	r3, [r3, #0]
 8024112:	2b00      	cmp	r3, #0
 8024114:	d006      	beq.n	8024124 <find_volume+0x114>
 8024116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024118:	3308      	adds	r3, #8
 802411a:	4618      	mov	r0, r3
 802411c:	f7fe fda2 	bl	8022c64 <ld_dword>
 8024120:	4602      	mov	r2, r0
 8024122:	e000      	b.n	8024126 <find_volume+0x116>
 8024124:	2200      	movs	r2, #0
 8024126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024128:	009b      	lsls	r3, r3, #2
 802412a:	3358      	adds	r3, #88	; 0x58
 802412c:	443b      	add	r3, r7
 802412e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8024132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024134:	3301      	adds	r3, #1
 8024136:	643b      	str	r3, [r7, #64]	; 0x40
 8024138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802413a:	2b03      	cmp	r3, #3
 802413c:	d9dd      	bls.n	80240fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802413e:	2300      	movs	r3, #0
 8024140:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8024142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024144:	2b00      	cmp	r3, #0
 8024146:	d002      	beq.n	802414e <find_volume+0x13e>
 8024148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802414a:	3b01      	subs	r3, #1
 802414c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802414e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024150:	009b      	lsls	r3, r3, #2
 8024152:	3358      	adds	r3, #88	; 0x58
 8024154:	443b      	add	r3, r7
 8024156:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802415a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802415c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802415e:	2b00      	cmp	r3, #0
 8024160:	d005      	beq.n	802416e <find_volume+0x15e>
 8024162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8024166:	f7ff fefd 	bl	8023f64 <check_fs>
 802416a:	4603      	mov	r3, r0
 802416c:	e000      	b.n	8024170 <find_volume+0x160>
 802416e:	2303      	movs	r3, #3
 8024170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8024174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8024178:	2b01      	cmp	r3, #1
 802417a:	d905      	bls.n	8024188 <find_volume+0x178>
 802417c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802417e:	3301      	adds	r3, #1
 8024180:	643b      	str	r3, [r7, #64]	; 0x40
 8024182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024184:	2b03      	cmp	r3, #3
 8024186:	d9e2      	bls.n	802414e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8024188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802418c:	2b04      	cmp	r3, #4
 802418e:	d101      	bne.n	8024194 <find_volume+0x184>
 8024190:	2301      	movs	r3, #1
 8024192:	e17e      	b.n	8024492 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8024194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8024198:	2b01      	cmp	r3, #1
 802419a:	d901      	bls.n	80241a0 <find_volume+0x190>
 802419c:	230d      	movs	r3, #13
 802419e:	e178      	b.n	8024492 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80241a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241a2:	3330      	adds	r3, #48	; 0x30
 80241a4:	330b      	adds	r3, #11
 80241a6:	4618      	mov	r0, r3
 80241a8:	f7fe fd44 	bl	8022c34 <ld_word>
 80241ac:	4603      	mov	r3, r0
 80241ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80241b2:	d001      	beq.n	80241b8 <find_volume+0x1a8>
 80241b4:	230d      	movs	r3, #13
 80241b6:	e16c      	b.n	8024492 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80241b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241ba:	3330      	adds	r3, #48	; 0x30
 80241bc:	3316      	adds	r3, #22
 80241be:	4618      	mov	r0, r3
 80241c0:	f7fe fd38 	bl	8022c34 <ld_word>
 80241c4:	4603      	mov	r3, r0
 80241c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80241c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80241ca:	2b00      	cmp	r3, #0
 80241cc:	d106      	bne.n	80241dc <find_volume+0x1cc>
 80241ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241d0:	3330      	adds	r3, #48	; 0x30
 80241d2:	3324      	adds	r3, #36	; 0x24
 80241d4:	4618      	mov	r0, r3
 80241d6:	f7fe fd45 	bl	8022c64 <ld_dword>
 80241da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80241dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80241e0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80241e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241e4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80241e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80241ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241ee:	789b      	ldrb	r3, [r3, #2]
 80241f0:	2b01      	cmp	r3, #1
 80241f2:	d005      	beq.n	8024200 <find_volume+0x1f0>
 80241f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241f6:	789b      	ldrb	r3, [r3, #2]
 80241f8:	2b02      	cmp	r3, #2
 80241fa:	d001      	beq.n	8024200 <find_volume+0x1f0>
 80241fc:	230d      	movs	r3, #13
 80241fe:	e148      	b.n	8024492 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8024200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024202:	789b      	ldrb	r3, [r3, #2]
 8024204:	461a      	mov	r2, r3
 8024206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024208:	fb02 f303 	mul.w	r3, r2, r3
 802420c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024214:	b29a      	uxth	r2, r3
 8024216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024218:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802421c:	895b      	ldrh	r3, [r3, #10]
 802421e:	2b00      	cmp	r3, #0
 8024220:	d008      	beq.n	8024234 <find_volume+0x224>
 8024222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024224:	895b      	ldrh	r3, [r3, #10]
 8024226:	461a      	mov	r2, r3
 8024228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802422a:	895b      	ldrh	r3, [r3, #10]
 802422c:	3b01      	subs	r3, #1
 802422e:	4013      	ands	r3, r2
 8024230:	2b00      	cmp	r3, #0
 8024232:	d001      	beq.n	8024238 <find_volume+0x228>
 8024234:	230d      	movs	r3, #13
 8024236:	e12c      	b.n	8024492 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8024238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802423a:	3330      	adds	r3, #48	; 0x30
 802423c:	3311      	adds	r3, #17
 802423e:	4618      	mov	r0, r3
 8024240:	f7fe fcf8 	bl	8022c34 <ld_word>
 8024244:	4603      	mov	r3, r0
 8024246:	461a      	mov	r2, r3
 8024248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802424a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802424e:	891b      	ldrh	r3, [r3, #8]
 8024250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024254:	b29b      	uxth	r3, r3
 8024256:	2b00      	cmp	r3, #0
 8024258:	d001      	beq.n	802425e <find_volume+0x24e>
 802425a:	230d      	movs	r3, #13
 802425c:	e119      	b.n	8024492 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024260:	3330      	adds	r3, #48	; 0x30
 8024262:	3313      	adds	r3, #19
 8024264:	4618      	mov	r0, r3
 8024266:	f7fe fce5 	bl	8022c34 <ld_word>
 802426a:	4603      	mov	r3, r0
 802426c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024270:	2b00      	cmp	r3, #0
 8024272:	d106      	bne.n	8024282 <find_volume+0x272>
 8024274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024276:	3330      	adds	r3, #48	; 0x30
 8024278:	3320      	adds	r3, #32
 802427a:	4618      	mov	r0, r3
 802427c:	f7fe fcf2 	bl	8022c64 <ld_dword>
 8024280:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8024282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024284:	3330      	adds	r3, #48	; 0x30
 8024286:	330e      	adds	r3, #14
 8024288:	4618      	mov	r0, r3
 802428a:	f7fe fcd3 	bl	8022c34 <ld_word>
 802428e:	4603      	mov	r3, r0
 8024290:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8024292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024294:	2b00      	cmp	r3, #0
 8024296:	d101      	bne.n	802429c <find_volume+0x28c>
 8024298:	230d      	movs	r3, #13
 802429a:	e0fa      	b.n	8024492 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 802429c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80242a0:	4413      	add	r3, r2
 80242a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80242a4:	8912      	ldrh	r2, [r2, #8]
 80242a6:	09d2      	lsrs	r2, r2, #7
 80242a8:	b292      	uxth	r2, r2
 80242aa:	4413      	add	r3, r2
 80242ac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80242ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80242b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242b2:	429a      	cmp	r2, r3
 80242b4:	d204      	bcs.n	80242c0 <find_volume+0x2b0>
 80242b6:	230d      	movs	r3, #13
 80242b8:	e0eb      	b.n	8024492 <find_volume+0x482>
 80242ba:	bf00      	nop
 80242bc:	20009ad8 	.word	0x20009ad8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80242c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80242c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242c4:	1ad3      	subs	r3, r2, r3
 80242c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80242c8:	8952      	ldrh	r2, [r2, #10]
 80242ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80242ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80242d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d101      	bne.n	80242da <find_volume+0x2ca>
 80242d6:	230d      	movs	r3, #13
 80242d8:	e0db      	b.n	8024492 <find_volume+0x482>
		fmt = FS_FAT32;
 80242da:	2303      	movs	r3, #3
 80242dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80242e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80242e6:	4293      	cmp	r3, r2
 80242e8:	d802      	bhi.n	80242f0 <find_volume+0x2e0>
 80242ea:	2302      	movs	r3, #2
 80242ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80242f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80242f6:	4293      	cmp	r3, r2
 80242f8:	d802      	bhi.n	8024300 <find_volume+0x2f0>
 80242fa:	2301      	movs	r3, #1
 80242fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8024300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024302:	1c9a      	adds	r2, r3, #2
 8024304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024306:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8024308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802430a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802430c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802430e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8024310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024312:	441a      	add	r2, r3
 8024314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024316:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8024318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802431c:	441a      	add	r2, r3
 802431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024320:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8024322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8024326:	2b03      	cmp	r3, #3
 8024328:	d11e      	bne.n	8024368 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 802432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802432c:	3330      	adds	r3, #48	; 0x30
 802432e:	332a      	adds	r3, #42	; 0x2a
 8024330:	4618      	mov	r0, r3
 8024332:	f7fe fc7f 	bl	8022c34 <ld_word>
 8024336:	4603      	mov	r3, r0
 8024338:	2b00      	cmp	r3, #0
 802433a:	d001      	beq.n	8024340 <find_volume+0x330>
 802433c:	230d      	movs	r3, #13
 802433e:	e0a8      	b.n	8024492 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8024340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024342:	891b      	ldrh	r3, [r3, #8]
 8024344:	2b00      	cmp	r3, #0
 8024346:	d001      	beq.n	802434c <find_volume+0x33c>
 8024348:	230d      	movs	r3, #13
 802434a:	e0a2      	b.n	8024492 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802434e:	3330      	adds	r3, #48	; 0x30
 8024350:	332c      	adds	r3, #44	; 0x2c
 8024352:	4618      	mov	r0, r3
 8024354:	f7fe fc86 	bl	8022c64 <ld_dword>
 8024358:	4602      	mov	r2, r0
 802435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802435c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024360:	695b      	ldr	r3, [r3, #20]
 8024362:	009b      	lsls	r3, r3, #2
 8024364:	647b      	str	r3, [r7, #68]	; 0x44
 8024366:	e01f      	b.n	80243a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8024368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802436a:	891b      	ldrh	r3, [r3, #8]
 802436c:	2b00      	cmp	r3, #0
 802436e:	d101      	bne.n	8024374 <find_volume+0x364>
 8024370:	230d      	movs	r3, #13
 8024372:	e08e      	b.n	8024492 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8024374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024376:	6a1a      	ldr	r2, [r3, #32]
 8024378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802437a:	441a      	add	r2, r3
 802437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802437e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8024380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8024384:	2b02      	cmp	r3, #2
 8024386:	d103      	bne.n	8024390 <find_volume+0x380>
 8024388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802438a:	695b      	ldr	r3, [r3, #20]
 802438c:	005b      	lsls	r3, r3, #1
 802438e:	e00a      	b.n	80243a6 <find_volume+0x396>
 8024390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024392:	695a      	ldr	r2, [r3, #20]
 8024394:	4613      	mov	r3, r2
 8024396:	005b      	lsls	r3, r3, #1
 8024398:	4413      	add	r3, r2
 802439a:	085a      	lsrs	r2, r3, #1
 802439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802439e:	695b      	ldr	r3, [r3, #20]
 80243a0:	f003 0301 	and.w	r3, r3, #1
 80243a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80243a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80243a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243aa:	699a      	ldr	r2, [r3, #24]
 80243ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80243ae:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80243b2:	0b1b      	lsrs	r3, r3, #12
 80243b4:	429a      	cmp	r2, r3
 80243b6:	d201      	bcs.n	80243bc <find_volume+0x3ac>
 80243b8:	230d      	movs	r3, #13
 80243ba:	e06a      	b.n	8024492 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80243bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243be:	f04f 32ff 	mov.w	r2, #4294967295
 80243c2:	611a      	str	r2, [r3, #16]
 80243c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243c6:	691a      	ldr	r2, [r3, #16]
 80243c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80243cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243ce:	2280      	movs	r2, #128	; 0x80
 80243d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80243d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80243d6:	2b03      	cmp	r3, #3
 80243d8:	d149      	bne.n	802446e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80243da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243dc:	3330      	adds	r3, #48	; 0x30
 80243de:	3330      	adds	r3, #48	; 0x30
 80243e0:	4618      	mov	r0, r3
 80243e2:	f7fe fc27 	bl	8022c34 <ld_word>
 80243e6:	4603      	mov	r3, r0
 80243e8:	2b01      	cmp	r3, #1
 80243ea:	d140      	bne.n	802446e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80243ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80243ee:	3301      	adds	r3, #1
 80243f0:	4619      	mov	r1, r3
 80243f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80243f4:	f7fe fece 	bl	8023194 <move_window>
 80243f8:	4603      	mov	r3, r0
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d137      	bne.n	802446e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80243fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024400:	2200      	movs	r2, #0
 8024402:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8024404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024406:	3330      	adds	r3, #48	; 0x30
 8024408:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802440c:	4618      	mov	r0, r3
 802440e:	f7fe fc11 	bl	8022c34 <ld_word>
 8024412:	4603      	mov	r3, r0
 8024414:	461a      	mov	r2, r3
 8024416:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802441a:	429a      	cmp	r2, r3
 802441c:	d127      	bne.n	802446e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024420:	3330      	adds	r3, #48	; 0x30
 8024422:	4618      	mov	r0, r3
 8024424:	f7fe fc1e 	bl	8022c64 <ld_dword>
 8024428:	4603      	mov	r3, r0
 802442a:	4a1c      	ldr	r2, [pc, #112]	; (802449c <find_volume+0x48c>)
 802442c:	4293      	cmp	r3, r2
 802442e:	d11e      	bne.n	802446e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8024430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024432:	3330      	adds	r3, #48	; 0x30
 8024434:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8024438:	4618      	mov	r0, r3
 802443a:	f7fe fc13 	bl	8022c64 <ld_dword>
 802443e:	4603      	mov	r3, r0
 8024440:	4a17      	ldr	r2, [pc, #92]	; (80244a0 <find_volume+0x490>)
 8024442:	4293      	cmp	r3, r2
 8024444:	d113      	bne.n	802446e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8024446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024448:	3330      	adds	r3, #48	; 0x30
 802444a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 802444e:	4618      	mov	r0, r3
 8024450:	f7fe fc08 	bl	8022c64 <ld_dword>
 8024454:	4602      	mov	r2, r0
 8024456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024458:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 802445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802445c:	3330      	adds	r3, #48	; 0x30
 802445e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8024462:	4618      	mov	r0, r3
 8024464:	f7fe fbfe 	bl	8022c64 <ld_dword>
 8024468:	4602      	mov	r2, r0
 802446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802446c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 802446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024470:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8024474:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8024476:	4b0b      	ldr	r3, [pc, #44]	; (80244a4 <find_volume+0x494>)
 8024478:	881b      	ldrh	r3, [r3, #0]
 802447a:	3301      	adds	r3, #1
 802447c:	b29a      	uxth	r2, r3
 802447e:	4b09      	ldr	r3, [pc, #36]	; (80244a4 <find_volume+0x494>)
 8024480:	801a      	strh	r2, [r3, #0]
 8024482:	4b08      	ldr	r3, [pc, #32]	; (80244a4 <find_volume+0x494>)
 8024484:	881a      	ldrh	r2, [r3, #0]
 8024486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024488:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 802448a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802448c:	f7fe fe1a 	bl	80230c4 <clear_lock>
#endif
	return FR_OK;
 8024490:	2300      	movs	r3, #0
}
 8024492:	4618      	mov	r0, r3
 8024494:	3758      	adds	r7, #88	; 0x58
 8024496:	46bd      	mov	sp, r7
 8024498:	bd80      	pop	{r7, pc}
 802449a:	bf00      	nop
 802449c:	41615252 	.word	0x41615252
 80244a0:	61417272 	.word	0x61417272
 80244a4:	20009adc 	.word	0x20009adc

080244a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80244a8:	b580      	push	{r7, lr}
 80244aa:	b084      	sub	sp, #16
 80244ac:	af00      	add	r7, sp, #0
 80244ae:	6078      	str	r0, [r7, #4]
 80244b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80244b2:	2309      	movs	r3, #9
 80244b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	d01c      	beq.n	80244f6 <validate+0x4e>
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	681b      	ldr	r3, [r3, #0]
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d018      	beq.n	80244f6 <validate+0x4e>
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	681b      	ldr	r3, [r3, #0]
 80244c8:	781b      	ldrb	r3, [r3, #0]
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d013      	beq.n	80244f6 <validate+0x4e>
 80244ce:	687b      	ldr	r3, [r7, #4]
 80244d0:	889a      	ldrh	r2, [r3, #4]
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	681b      	ldr	r3, [r3, #0]
 80244d6:	88db      	ldrh	r3, [r3, #6]
 80244d8:	429a      	cmp	r2, r3
 80244da:	d10c      	bne.n	80244f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	785b      	ldrb	r3, [r3, #1]
 80244e2:	4618      	mov	r0, r3
 80244e4:	f7fe fb08 	bl	8022af8 <disk_status>
 80244e8:	4603      	mov	r3, r0
 80244ea:	f003 0301 	and.w	r3, r3, #1
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	d101      	bne.n	80244f6 <validate+0x4e>
			res = FR_OK;
 80244f2:	2300      	movs	r3, #0
 80244f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80244f6:	7bfb      	ldrb	r3, [r7, #15]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d102      	bne.n	8024502 <validate+0x5a>
 80244fc:	687b      	ldr	r3, [r7, #4]
 80244fe:	681b      	ldr	r3, [r3, #0]
 8024500:	e000      	b.n	8024504 <validate+0x5c>
 8024502:	2300      	movs	r3, #0
 8024504:	683a      	ldr	r2, [r7, #0]
 8024506:	6013      	str	r3, [r2, #0]
	return res;
 8024508:	7bfb      	ldrb	r3, [r7, #15]
}
 802450a:	4618      	mov	r0, r3
 802450c:	3710      	adds	r7, #16
 802450e:	46bd      	mov	sp, r7
 8024510:	bd80      	pop	{r7, pc}
	...

08024514 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8024514:	b580      	push	{r7, lr}
 8024516:	b088      	sub	sp, #32
 8024518:	af00      	add	r7, sp, #0
 802451a:	60f8      	str	r0, [r7, #12]
 802451c:	60b9      	str	r1, [r7, #8]
 802451e:	4613      	mov	r3, r2
 8024520:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8024522:	68bb      	ldr	r3, [r7, #8]
 8024524:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8024526:	f107 0310 	add.w	r3, r7, #16
 802452a:	4618      	mov	r0, r3
 802452c:	f7ff fcd5 	bl	8023eda <get_ldnumber>
 8024530:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8024532:	69fb      	ldr	r3, [r7, #28]
 8024534:	2b00      	cmp	r3, #0
 8024536:	da01      	bge.n	802453c <f_mount+0x28>
 8024538:	230b      	movs	r3, #11
 802453a:	e02b      	b.n	8024594 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802453c:	4a17      	ldr	r2, [pc, #92]	; (802459c <f_mount+0x88>)
 802453e:	69fb      	ldr	r3, [r7, #28]
 8024540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024544:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8024546:	69bb      	ldr	r3, [r7, #24]
 8024548:	2b00      	cmp	r3, #0
 802454a:	d005      	beq.n	8024558 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 802454c:	69b8      	ldr	r0, [r7, #24]
 802454e:	f7fe fdb9 	bl	80230c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8024552:	69bb      	ldr	r3, [r7, #24]
 8024554:	2200      	movs	r2, #0
 8024556:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8024558:	68fb      	ldr	r3, [r7, #12]
 802455a:	2b00      	cmp	r3, #0
 802455c:	d002      	beq.n	8024564 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 802455e:	68fb      	ldr	r3, [r7, #12]
 8024560:	2200      	movs	r2, #0
 8024562:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8024564:	68fa      	ldr	r2, [r7, #12]
 8024566:	490d      	ldr	r1, [pc, #52]	; (802459c <f_mount+0x88>)
 8024568:	69fb      	ldr	r3, [r7, #28]
 802456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 802456e:	68fb      	ldr	r3, [r7, #12]
 8024570:	2b00      	cmp	r3, #0
 8024572:	d002      	beq.n	802457a <f_mount+0x66>
 8024574:	79fb      	ldrb	r3, [r7, #7]
 8024576:	2b01      	cmp	r3, #1
 8024578:	d001      	beq.n	802457e <f_mount+0x6a>
 802457a:	2300      	movs	r3, #0
 802457c:	e00a      	b.n	8024594 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802457e:	f107 010c 	add.w	r1, r7, #12
 8024582:	f107 0308 	add.w	r3, r7, #8
 8024586:	2200      	movs	r2, #0
 8024588:	4618      	mov	r0, r3
 802458a:	f7ff fd41 	bl	8024010 <find_volume>
 802458e:	4603      	mov	r3, r0
 8024590:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8024592:	7dfb      	ldrb	r3, [r7, #23]
}
 8024594:	4618      	mov	r0, r3
 8024596:	3720      	adds	r7, #32
 8024598:	46bd      	mov	sp, r7
 802459a:	bd80      	pop	{r7, pc}
 802459c:	20009ad8 	.word	0x20009ad8

080245a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80245a0:	b580      	push	{r7, lr}
 80245a2:	b098      	sub	sp, #96	; 0x60
 80245a4:	af00      	add	r7, sp, #0
 80245a6:	60f8      	str	r0, [r7, #12]
 80245a8:	60b9      	str	r1, [r7, #8]
 80245aa:	4613      	mov	r3, r2
 80245ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80245ae:	68fb      	ldr	r3, [r7, #12]
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	d101      	bne.n	80245b8 <f_open+0x18>
 80245b4:	2309      	movs	r3, #9
 80245b6:	e1a9      	b.n	802490c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80245b8:	79fb      	ldrb	r3, [r7, #7]
 80245ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80245be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80245c0:	79fa      	ldrb	r2, [r7, #7]
 80245c2:	f107 0110 	add.w	r1, r7, #16
 80245c6:	f107 0308 	add.w	r3, r7, #8
 80245ca:	4618      	mov	r0, r3
 80245cc:	f7ff fd20 	bl	8024010 <find_volume>
 80245d0:	4603      	mov	r3, r0
 80245d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80245d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80245da:	2b00      	cmp	r3, #0
 80245dc:	f040 818d 	bne.w	80248fa <f_open+0x35a>
		dj.obj.fs = fs;
 80245e0:	693b      	ldr	r3, [r7, #16]
 80245e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80245e4:	68ba      	ldr	r2, [r7, #8]
 80245e6:	f107 0314 	add.w	r3, r7, #20
 80245ea:	4611      	mov	r1, r2
 80245ec:	4618      	mov	r0, r3
 80245ee:	f7ff fc03 	bl	8023df8 <follow_path>
 80245f2:	4603      	mov	r3, r0
 80245f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80245f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d11a      	bne.n	8024636 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8024600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8024604:	b25b      	sxtb	r3, r3
 8024606:	2b00      	cmp	r3, #0
 8024608:	da03      	bge.n	8024612 <f_open+0x72>
				res = FR_INVALID_NAME;
 802460a:	2306      	movs	r3, #6
 802460c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024610:	e011      	b.n	8024636 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8024612:	79fb      	ldrb	r3, [r7, #7]
 8024614:	f023 0301 	bic.w	r3, r3, #1
 8024618:	2b00      	cmp	r3, #0
 802461a:	bf14      	ite	ne
 802461c:	2301      	movne	r3, #1
 802461e:	2300      	moveq	r3, #0
 8024620:	b2db      	uxtb	r3, r3
 8024622:	461a      	mov	r2, r3
 8024624:	f107 0314 	add.w	r3, r7, #20
 8024628:	4611      	mov	r1, r2
 802462a:	4618      	mov	r0, r3
 802462c:	f7fe fc02 	bl	8022e34 <chk_lock>
 8024630:	4603      	mov	r3, r0
 8024632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8024636:	79fb      	ldrb	r3, [r7, #7]
 8024638:	f003 031c 	and.w	r3, r3, #28
 802463c:	2b00      	cmp	r3, #0
 802463e:	d07e      	beq.n	802473e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8024640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024644:	2b00      	cmp	r3, #0
 8024646:	d017      	beq.n	8024678 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8024648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802464c:	2b04      	cmp	r3, #4
 802464e:	d10e      	bne.n	802466e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8024650:	f7fe fc4c 	bl	8022eec <enq_lock>
 8024654:	4603      	mov	r3, r0
 8024656:	2b00      	cmp	r3, #0
 8024658:	d006      	beq.n	8024668 <f_open+0xc8>
 802465a:	f107 0314 	add.w	r3, r7, #20
 802465e:	4618      	mov	r0, r3
 8024660:	f7ff fb04 	bl	8023c6c <dir_register>
 8024664:	4603      	mov	r3, r0
 8024666:	e000      	b.n	802466a <f_open+0xca>
 8024668:	2312      	movs	r3, #18
 802466a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 802466e:	79fb      	ldrb	r3, [r7, #7]
 8024670:	f043 0308 	orr.w	r3, r3, #8
 8024674:	71fb      	strb	r3, [r7, #7]
 8024676:	e010      	b.n	802469a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8024678:	7ebb      	ldrb	r3, [r7, #26]
 802467a:	f003 0311 	and.w	r3, r3, #17
 802467e:	2b00      	cmp	r3, #0
 8024680:	d003      	beq.n	802468a <f_open+0xea>
					res = FR_DENIED;
 8024682:	2307      	movs	r3, #7
 8024684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024688:	e007      	b.n	802469a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 802468a:	79fb      	ldrb	r3, [r7, #7]
 802468c:	f003 0304 	and.w	r3, r3, #4
 8024690:	2b00      	cmp	r3, #0
 8024692:	d002      	beq.n	802469a <f_open+0xfa>
 8024694:	2308      	movs	r3, #8
 8024696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 802469a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802469e:	2b00      	cmp	r3, #0
 80246a0:	d167      	bne.n	8024772 <f_open+0x1d2>
 80246a2:	79fb      	ldrb	r3, [r7, #7]
 80246a4:	f003 0308 	and.w	r3, r3, #8
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	d062      	beq.n	8024772 <f_open+0x1d2>
				dw = GET_FATTIME();
 80246ac:	4b99      	ldr	r3, [pc, #612]	; (8024914 <f_open+0x374>)
 80246ae:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80246b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246b2:	330e      	adds	r3, #14
 80246b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80246b6:	4618      	mov	r0, r3
 80246b8:	f7fe fb12 	bl	8022ce0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80246bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246be:	3316      	adds	r3, #22
 80246c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80246c2:	4618      	mov	r0, r3
 80246c4:	f7fe fb0c 	bl	8022ce0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80246c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246ca:	330b      	adds	r3, #11
 80246cc:	2220      	movs	r2, #32
 80246ce:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80246d0:	693b      	ldr	r3, [r7, #16]
 80246d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80246d4:	4611      	mov	r1, r2
 80246d6:	4618      	mov	r0, r3
 80246d8:	f7ff fa34 	bl	8023b44 <ld_clust>
 80246dc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80246de:	693b      	ldr	r3, [r7, #16]
 80246e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80246e2:	2200      	movs	r2, #0
 80246e4:	4618      	mov	r0, r3
 80246e6:	f7ff fa4c 	bl	8023b82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80246ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246ec:	331c      	adds	r3, #28
 80246ee:	2100      	movs	r1, #0
 80246f0:	4618      	mov	r0, r3
 80246f2:	f7fe faf5 	bl	8022ce0 <st_dword>
					fs->wflag = 1;
 80246f6:	693b      	ldr	r3, [r7, #16]
 80246f8:	2201      	movs	r2, #1
 80246fa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80246fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d037      	beq.n	8024772 <f_open+0x1d2>
						dw = fs->winsect;
 8024702:	693b      	ldr	r3, [r7, #16]
 8024704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024706:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8024708:	f107 0314 	add.w	r3, r7, #20
 802470c:	2200      	movs	r2, #0
 802470e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8024710:	4618      	mov	r0, r3
 8024712:	f7fe ff93 	bl	802363c <remove_chain>
 8024716:	4603      	mov	r3, r0
 8024718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 802471c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024720:	2b00      	cmp	r3, #0
 8024722:	d126      	bne.n	8024772 <f_open+0x1d2>
							res = move_window(fs, dw);
 8024724:	693b      	ldr	r3, [r7, #16]
 8024726:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024728:	4618      	mov	r0, r3
 802472a:	f7fe fd33 	bl	8023194 <move_window>
 802472e:	4603      	mov	r3, r0
 8024730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8024734:	693b      	ldr	r3, [r7, #16]
 8024736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8024738:	3a01      	subs	r2, #1
 802473a:	60da      	str	r2, [r3, #12]
 802473c:	e019      	b.n	8024772 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 802473e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024742:	2b00      	cmp	r3, #0
 8024744:	d115      	bne.n	8024772 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8024746:	7ebb      	ldrb	r3, [r7, #26]
 8024748:	f003 0310 	and.w	r3, r3, #16
 802474c:	2b00      	cmp	r3, #0
 802474e:	d003      	beq.n	8024758 <f_open+0x1b8>
					res = FR_NO_FILE;
 8024750:	2304      	movs	r3, #4
 8024752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024756:	e00c      	b.n	8024772 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8024758:	79fb      	ldrb	r3, [r7, #7]
 802475a:	f003 0302 	and.w	r3, r3, #2
 802475e:	2b00      	cmp	r3, #0
 8024760:	d007      	beq.n	8024772 <f_open+0x1d2>
 8024762:	7ebb      	ldrb	r3, [r7, #26]
 8024764:	f003 0301 	and.w	r3, r3, #1
 8024768:	2b00      	cmp	r3, #0
 802476a:	d002      	beq.n	8024772 <f_open+0x1d2>
						res = FR_DENIED;
 802476c:	2307      	movs	r3, #7
 802476e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8024772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024776:	2b00      	cmp	r3, #0
 8024778:	d128      	bne.n	80247cc <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 802477a:	79fb      	ldrb	r3, [r7, #7]
 802477c:	f003 0308 	and.w	r3, r3, #8
 8024780:	2b00      	cmp	r3, #0
 8024782:	d003      	beq.n	802478c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8024784:	79fb      	ldrb	r3, [r7, #7]
 8024786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802478a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 802478c:	693b      	ldr	r3, [r7, #16]
 802478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024790:	68fb      	ldr	r3, [r7, #12]
 8024792:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8024794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024796:	68fb      	ldr	r3, [r7, #12]
 8024798:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802479a:	79fb      	ldrb	r3, [r7, #7]
 802479c:	f023 0301 	bic.w	r3, r3, #1
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	bf14      	ite	ne
 80247a4:	2301      	movne	r3, #1
 80247a6:	2300      	moveq	r3, #0
 80247a8:	b2db      	uxtb	r3, r3
 80247aa:	461a      	mov	r2, r3
 80247ac:	f107 0314 	add.w	r3, r7, #20
 80247b0:	4611      	mov	r1, r2
 80247b2:	4618      	mov	r0, r3
 80247b4:	f7fe fbbc 	bl	8022f30 <inc_lock>
 80247b8:	4602      	mov	r2, r0
 80247ba:	68fb      	ldr	r3, [r7, #12]
 80247bc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	691b      	ldr	r3, [r3, #16]
 80247c2:	2b00      	cmp	r3, #0
 80247c4:	d102      	bne.n	80247cc <f_open+0x22c>
 80247c6:	2302      	movs	r3, #2
 80247c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80247cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	f040 8092 	bne.w	80248fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80247d6:	693b      	ldr	r3, [r7, #16]
 80247d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247da:	4611      	mov	r1, r2
 80247dc:	4618      	mov	r0, r3
 80247de:	f7ff f9b1 	bl	8023b44 <ld_clust>
 80247e2:	4602      	mov	r2, r0
 80247e4:	68fb      	ldr	r3, [r7, #12]
 80247e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80247e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247ea:	331c      	adds	r3, #28
 80247ec:	4618      	mov	r0, r3
 80247ee:	f7fe fa39 	bl	8022c64 <ld_dword>
 80247f2:	4602      	mov	r2, r0
 80247f4:	68fb      	ldr	r3, [r7, #12]
 80247f6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80247f8:	693a      	ldr	r2, [r7, #16]
 80247fa:	68fb      	ldr	r3, [r7, #12]
 80247fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80247fe:	693b      	ldr	r3, [r7, #16]
 8024800:	88da      	ldrh	r2, [r3, #6]
 8024802:	68fb      	ldr	r3, [r7, #12]
 8024804:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8024806:	68fb      	ldr	r3, [r7, #12]
 8024808:	79fa      	ldrb	r2, [r7, #7]
 802480a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 802480c:	68fb      	ldr	r3, [r7, #12]
 802480e:	2200      	movs	r2, #0
 8024810:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8024812:	68fb      	ldr	r3, [r7, #12]
 8024814:	2200      	movs	r2, #0
 8024816:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8024818:	68fb      	ldr	r3, [r7, #12]
 802481a:	2200      	movs	r2, #0
 802481c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 802481e:	68fb      	ldr	r3, [r7, #12]
 8024820:	332c      	adds	r3, #44	; 0x2c
 8024822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8024826:	2100      	movs	r1, #0
 8024828:	4618      	mov	r0, r3
 802482a:	f7fe faa6 	bl	8022d7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 802482e:	79fb      	ldrb	r3, [r7, #7]
 8024830:	f003 0320 	and.w	r3, r3, #32
 8024834:	2b00      	cmp	r3, #0
 8024836:	d060      	beq.n	80248fa <f_open+0x35a>
 8024838:	68fb      	ldr	r3, [r7, #12]
 802483a:	68db      	ldr	r3, [r3, #12]
 802483c:	2b00      	cmp	r3, #0
 802483e:	d05c      	beq.n	80248fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	68da      	ldr	r2, [r3, #12]
 8024844:	68fb      	ldr	r3, [r7, #12]
 8024846:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8024848:	693b      	ldr	r3, [r7, #16]
 802484a:	895b      	ldrh	r3, [r3, #10]
 802484c:	031b      	lsls	r3, r3, #12
 802484e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8024850:	68fb      	ldr	r3, [r7, #12]
 8024852:	689b      	ldr	r3, [r3, #8]
 8024854:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8024856:	68fb      	ldr	r3, [r7, #12]
 8024858:	68db      	ldr	r3, [r3, #12]
 802485a:	657b      	str	r3, [r7, #84]	; 0x54
 802485c:	e016      	b.n	802488c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 802485e:	68fb      	ldr	r3, [r7, #12]
 8024860:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8024862:	4618      	mov	r0, r3
 8024864:	f7fe fd51 	bl	802330a <get_fat>
 8024868:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802486a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802486c:	2b01      	cmp	r3, #1
 802486e:	d802      	bhi.n	8024876 <f_open+0x2d6>
 8024870:	2302      	movs	r3, #2
 8024872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8024876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024878:	f1b3 3fff 	cmp.w	r3, #4294967295
 802487c:	d102      	bne.n	8024884 <f_open+0x2e4>
 802487e:	2301      	movs	r3, #1
 8024880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8024884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024888:	1ad3      	subs	r3, r2, r3
 802488a:	657b      	str	r3, [r7, #84]	; 0x54
 802488c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024890:	2b00      	cmp	r3, #0
 8024892:	d103      	bne.n	802489c <f_open+0x2fc>
 8024894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024898:	429a      	cmp	r2, r3
 802489a:	d8e0      	bhi.n	802485e <f_open+0x2be>
				}
				fp->clust = clst;
 802489c:	68fb      	ldr	r3, [r7, #12]
 802489e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80248a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80248a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d127      	bne.n	80248fa <f_open+0x35a>
 80248aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80248ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	d022      	beq.n	80248fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80248b4:	693b      	ldr	r3, [r7, #16]
 80248b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80248b8:	4618      	mov	r0, r3
 80248ba:	f7fe fd07 	bl	80232cc <clust2sect>
 80248be:	6478      	str	r0, [r7, #68]	; 0x44
 80248c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d103      	bne.n	80248ce <f_open+0x32e>
						res = FR_INT_ERR;
 80248c6:	2302      	movs	r3, #2
 80248c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80248cc:	e015      	b.n	80248fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80248ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80248d0:	0b1a      	lsrs	r2, r3, #12
 80248d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80248d4:	441a      	add	r2, r3
 80248d6:	68fb      	ldr	r3, [r7, #12]
 80248d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80248da:	693b      	ldr	r3, [r7, #16]
 80248dc:	7858      	ldrb	r0, [r3, #1]
 80248de:	68fb      	ldr	r3, [r7, #12]
 80248e0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	6a1a      	ldr	r2, [r3, #32]
 80248e8:	2301      	movs	r3, #1
 80248ea:	f7fe f945 	bl	8022b78 <disk_read>
 80248ee:	4603      	mov	r3, r0
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	d002      	beq.n	80248fa <f_open+0x35a>
 80248f4:	2301      	movs	r3, #1
 80248f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80248fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80248fe:	2b00      	cmp	r3, #0
 8024900:	d002      	beq.n	8024908 <f_open+0x368>
 8024902:	68fb      	ldr	r3, [r7, #12]
 8024904:	2200      	movs	r2, #0
 8024906:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8024908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 802490c:	4618      	mov	r0, r3
 802490e:	3760      	adds	r7, #96	; 0x60
 8024910:	46bd      	mov	sp, r7
 8024912:	bd80      	pop	{r7, pc}
 8024914:	53740000 	.word	0x53740000

08024918 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8024918:	b580      	push	{r7, lr}
 802491a:	b08e      	sub	sp, #56	; 0x38
 802491c:	af00      	add	r7, sp, #0
 802491e:	60f8      	str	r0, [r7, #12]
 8024920:	60b9      	str	r1, [r7, #8]
 8024922:	607a      	str	r2, [r7, #4]
 8024924:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8024926:	68bb      	ldr	r3, [r7, #8]
 8024928:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 802492a:	683b      	ldr	r3, [r7, #0]
 802492c:	2200      	movs	r2, #0
 802492e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8024930:	68fb      	ldr	r3, [r7, #12]
 8024932:	f107 0214 	add.w	r2, r7, #20
 8024936:	4611      	mov	r1, r2
 8024938:	4618      	mov	r0, r3
 802493a:	f7ff fdb5 	bl	80244a8 <validate>
 802493e:	4603      	mov	r3, r0
 8024940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8024944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024948:	2b00      	cmp	r3, #0
 802494a:	d107      	bne.n	802495c <f_read+0x44>
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	7d5b      	ldrb	r3, [r3, #21]
 8024950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8024954:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024958:	2b00      	cmp	r3, #0
 802495a:	d002      	beq.n	8024962 <f_read+0x4a>
 802495c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024960:	e0ef      	b.n	8024b42 <f_read+0x22a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8024962:	68fb      	ldr	r3, [r7, #12]
 8024964:	7d1b      	ldrb	r3, [r3, #20]
 8024966:	f003 0301 	and.w	r3, r3, #1
 802496a:	2b00      	cmp	r3, #0
 802496c:	d101      	bne.n	8024972 <f_read+0x5a>
 802496e:	2307      	movs	r3, #7
 8024970:	e0e7      	b.n	8024b42 <f_read+0x22a>
	remain = fp->obj.objsize - fp->fptr;
 8024972:	68fb      	ldr	r3, [r7, #12]
 8024974:	68da      	ldr	r2, [r3, #12]
 8024976:	68fb      	ldr	r3, [r7, #12]
 8024978:	699b      	ldr	r3, [r3, #24]
 802497a:	1ad3      	subs	r3, r2, r3
 802497c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 802497e:	687a      	ldr	r2, [r7, #4]
 8024980:	6a3b      	ldr	r3, [r7, #32]
 8024982:	429a      	cmp	r2, r3
 8024984:	f240 80d8 	bls.w	8024b38 <f_read+0x220>
 8024988:	6a3b      	ldr	r3, [r7, #32]
 802498a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 802498c:	e0d4      	b.n	8024b38 <f_read+0x220>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 802498e:	68fb      	ldr	r3, [r7, #12]
 8024990:	699b      	ldr	r3, [r3, #24]
 8024992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024996:	2b00      	cmp	r3, #0
 8024998:	f040 80a0 	bne.w	8024adc <f_read+0x1c4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 802499c:	68fb      	ldr	r3, [r7, #12]
 802499e:	699b      	ldr	r3, [r3, #24]
 80249a0:	0b1b      	lsrs	r3, r3, #12
 80249a2:	697a      	ldr	r2, [r7, #20]
 80249a4:	8952      	ldrh	r2, [r2, #10]
 80249a6:	3a01      	subs	r2, #1
 80249a8:	4013      	ands	r3, r2
 80249aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80249ac:	69fb      	ldr	r3, [r7, #28]
 80249ae:	2b00      	cmp	r3, #0
 80249b0:	d123      	bne.n	80249fa <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80249b2:	68fb      	ldr	r3, [r7, #12]
 80249b4:	699b      	ldr	r3, [r3, #24]
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	d103      	bne.n	80249c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80249ba:	68fb      	ldr	r3, [r7, #12]
 80249bc:	689b      	ldr	r3, [r3, #8]
 80249be:	633b      	str	r3, [r7, #48]	; 0x30
 80249c0:	e007      	b.n	80249d2 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80249c2:	68fa      	ldr	r2, [r7, #12]
 80249c4:	68fb      	ldr	r3, [r7, #12]
 80249c6:	69db      	ldr	r3, [r3, #28]
 80249c8:	4619      	mov	r1, r3
 80249ca:	4610      	mov	r0, r2
 80249cc:	f7fe fc9d 	bl	802330a <get_fat>
 80249d0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80249d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80249d4:	2b01      	cmp	r3, #1
 80249d6:	d804      	bhi.n	80249e2 <f_read+0xca>
 80249d8:	68fb      	ldr	r3, [r7, #12]
 80249da:	2202      	movs	r2, #2
 80249dc:	755a      	strb	r2, [r3, #21]
 80249de:	2302      	movs	r3, #2
 80249e0:	e0af      	b.n	8024b42 <f_read+0x22a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80249e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80249e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249e8:	d104      	bne.n	80249f4 <f_read+0xdc>
 80249ea:	68fb      	ldr	r3, [r7, #12]
 80249ec:	2201      	movs	r2, #1
 80249ee:	755a      	strb	r2, [r3, #21]
 80249f0:	2301      	movs	r3, #1
 80249f2:	e0a6      	b.n	8024b42 <f_read+0x22a>
				fp->clust = clst;				/* Update current cluster */
 80249f4:	68fb      	ldr	r3, [r7, #12]
 80249f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80249f8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80249fa:	697a      	ldr	r2, [r7, #20]
 80249fc:	68fb      	ldr	r3, [r7, #12]
 80249fe:	69db      	ldr	r3, [r3, #28]
 8024a00:	4619      	mov	r1, r3
 8024a02:	4610      	mov	r0, r2
 8024a04:	f7fe fc62 	bl	80232cc <clust2sect>
 8024a08:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8024a0a:	69bb      	ldr	r3, [r7, #24]
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	d104      	bne.n	8024a1a <f_read+0x102>
 8024a10:	68fb      	ldr	r3, [r7, #12]
 8024a12:	2202      	movs	r2, #2
 8024a14:	755a      	strb	r2, [r3, #21]
 8024a16:	2302      	movs	r3, #2
 8024a18:	e093      	b.n	8024b42 <f_read+0x22a>
			sect += csect;
 8024a1a:	69ba      	ldr	r2, [r7, #24]
 8024a1c:	69fb      	ldr	r3, [r7, #28]
 8024a1e:	4413      	add	r3, r2
 8024a20:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	0b1b      	lsrs	r3, r3, #12
 8024a26:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8024a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	d01f      	beq.n	8024a6e <f_read+0x156>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8024a2e:	69fa      	ldr	r2, [r7, #28]
 8024a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a32:	4413      	add	r3, r2
 8024a34:	697a      	ldr	r2, [r7, #20]
 8024a36:	8952      	ldrh	r2, [r2, #10]
 8024a38:	4293      	cmp	r3, r2
 8024a3a:	d905      	bls.n	8024a48 <f_read+0x130>
					cc = fs->csize - csect;
 8024a3c:	697b      	ldr	r3, [r7, #20]
 8024a3e:	895b      	ldrh	r3, [r3, #10]
 8024a40:	461a      	mov	r2, r3
 8024a42:	69fb      	ldr	r3, [r7, #28]
 8024a44:	1ad3      	subs	r3, r2, r3
 8024a46:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024a48:	697b      	ldr	r3, [r7, #20]
 8024a4a:	7858      	ldrb	r0, [r3, #1]
 8024a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a4e:	69ba      	ldr	r2, [r7, #24]
 8024a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024a52:	f7fe f891 	bl	8022b78 <disk_read>
 8024a56:	4603      	mov	r3, r0
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d004      	beq.n	8024a66 <f_read+0x14e>
 8024a5c:	68fb      	ldr	r3, [r7, #12]
 8024a5e:	2201      	movs	r2, #1
 8024a60:	755a      	strb	r2, [r3, #21]
 8024a62:	2301      	movs	r3, #1
 8024a64:	e06d      	b.n	8024b42 <f_read+0x22a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8024a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a68:	031b      	lsls	r3, r3, #12
 8024a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8024a6c:	e050      	b.n	8024b10 <f_read+0x1f8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8024a6e:	68fb      	ldr	r3, [r7, #12]
 8024a70:	6a1b      	ldr	r3, [r3, #32]
 8024a72:	69ba      	ldr	r2, [r7, #24]
 8024a74:	429a      	cmp	r2, r3
 8024a76:	d02e      	beq.n	8024ad6 <f_read+0x1be>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8024a78:	68fb      	ldr	r3, [r7, #12]
 8024a7a:	7d1b      	ldrb	r3, [r3, #20]
 8024a7c:	b25b      	sxtb	r3, r3
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	da18      	bge.n	8024ab4 <f_read+0x19c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	7858      	ldrb	r0, [r3, #1]
 8024a86:	68fb      	ldr	r3, [r7, #12]
 8024a88:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024a8c:	68fb      	ldr	r3, [r7, #12]
 8024a8e:	6a1a      	ldr	r2, [r3, #32]
 8024a90:	2301      	movs	r3, #1
 8024a92:	f7fe f891 	bl	8022bb8 <disk_write>
 8024a96:	4603      	mov	r3, r0
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	d004      	beq.n	8024aa6 <f_read+0x18e>
 8024a9c:	68fb      	ldr	r3, [r7, #12]
 8024a9e:	2201      	movs	r2, #1
 8024aa0:	755a      	strb	r2, [r3, #21]
 8024aa2:	2301      	movs	r3, #1
 8024aa4:	e04d      	b.n	8024b42 <f_read+0x22a>
					fp->flag &= (BYTE)~FA_DIRTY;
 8024aa6:	68fb      	ldr	r3, [r7, #12]
 8024aa8:	7d1b      	ldrb	r3, [r3, #20]
 8024aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024aae:	b2da      	uxtb	r2, r3
 8024ab0:	68fb      	ldr	r3, [r7, #12]
 8024ab2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8024ab4:	697b      	ldr	r3, [r7, #20]
 8024ab6:	7858      	ldrb	r0, [r3, #1]
 8024ab8:	68fb      	ldr	r3, [r7, #12]
 8024aba:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024abe:	2301      	movs	r3, #1
 8024ac0:	69ba      	ldr	r2, [r7, #24]
 8024ac2:	f7fe f859 	bl	8022b78 <disk_read>
 8024ac6:	4603      	mov	r3, r0
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d004      	beq.n	8024ad6 <f_read+0x1be>
 8024acc:	68fb      	ldr	r3, [r7, #12]
 8024ace:	2201      	movs	r2, #1
 8024ad0:	755a      	strb	r2, [r3, #21]
 8024ad2:	2301      	movs	r3, #1
 8024ad4:	e035      	b.n	8024b42 <f_read+0x22a>
			}
#endif
			fp->sect = sect;
 8024ad6:	68fb      	ldr	r3, [r7, #12]
 8024ad8:	69ba      	ldr	r2, [r7, #24]
 8024ada:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	699b      	ldr	r3, [r3, #24]
 8024ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024ae4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8024aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	429a      	cmp	r2, r3
 8024af0:	d901      	bls.n	8024af6 <f_read+0x1de>
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8024af6:	68fb      	ldr	r3, [r7, #12]
 8024af8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8024afc:	68fb      	ldr	r3, [r7, #12]
 8024afe:	699b      	ldr	r3, [r3, #24]
 8024b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024b04:	4413      	add	r3, r2
 8024b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024b08:	4619      	mov	r1, r3
 8024b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024b0c:	f7fe f914 	bl	8022d38 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8024b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b14:	4413      	add	r3, r2
 8024b16:	627b      	str	r3, [r7, #36]	; 0x24
 8024b18:	68fb      	ldr	r3, [r7, #12]
 8024b1a:	699a      	ldr	r2, [r3, #24]
 8024b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b1e:	441a      	add	r2, r3
 8024b20:	68fb      	ldr	r3, [r7, #12]
 8024b22:	619a      	str	r2, [r3, #24]
 8024b24:	683b      	ldr	r3, [r7, #0]
 8024b26:	681a      	ldr	r2, [r3, #0]
 8024b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b2a:	441a      	add	r2, r3
 8024b2c:	683b      	ldr	r3, [r7, #0]
 8024b2e:	601a      	str	r2, [r3, #0]
 8024b30:	687a      	ldr	r2, [r7, #4]
 8024b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b34:	1ad3      	subs	r3, r2, r3
 8024b36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	f47f af27 	bne.w	802498e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8024b40:	2300      	movs	r3, #0
}
 8024b42:	4618      	mov	r0, r3
 8024b44:	3738      	adds	r7, #56	; 0x38
 8024b46:	46bd      	mov	sp, r7
 8024b48:	bd80      	pop	{r7, pc}

08024b4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8024b4a:	b580      	push	{r7, lr}
 8024b4c:	b08c      	sub	sp, #48	; 0x30
 8024b4e:	af00      	add	r7, sp, #0
 8024b50:	60f8      	str	r0, [r7, #12]
 8024b52:	60b9      	str	r1, [r7, #8]
 8024b54:	607a      	str	r2, [r7, #4]
 8024b56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8024b58:	68bb      	ldr	r3, [r7, #8]
 8024b5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8024b5c:	683b      	ldr	r3, [r7, #0]
 8024b5e:	2200      	movs	r2, #0
 8024b60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8024b62:	68fb      	ldr	r3, [r7, #12]
 8024b64:	f107 0210 	add.w	r2, r7, #16
 8024b68:	4611      	mov	r1, r2
 8024b6a:	4618      	mov	r0, r3
 8024b6c:	f7ff fc9c 	bl	80244a8 <validate>
 8024b70:	4603      	mov	r3, r0
 8024b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8024b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	d107      	bne.n	8024b8e <f_write+0x44>
 8024b7e:	68fb      	ldr	r3, [r7, #12]
 8024b80:	7d5b      	ldrb	r3, [r3, #21]
 8024b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8024b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024b8a:	2b00      	cmp	r3, #0
 8024b8c:	d002      	beq.n	8024b94 <f_write+0x4a>
 8024b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024b92:	e122      	b.n	8024dda <f_write+0x290>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8024b94:	68fb      	ldr	r3, [r7, #12]
 8024b96:	7d1b      	ldrb	r3, [r3, #20]
 8024b98:	f003 0302 	and.w	r3, r3, #2
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d101      	bne.n	8024ba4 <f_write+0x5a>
 8024ba0:	2307      	movs	r3, #7
 8024ba2:	e11a      	b.n	8024dda <f_write+0x290>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8024ba4:	68fb      	ldr	r3, [r7, #12]
 8024ba6:	699a      	ldr	r2, [r3, #24]
 8024ba8:	687b      	ldr	r3, [r7, #4]
 8024baa:	441a      	add	r2, r3
 8024bac:	68fb      	ldr	r3, [r7, #12]
 8024bae:	699b      	ldr	r3, [r3, #24]
 8024bb0:	429a      	cmp	r2, r3
 8024bb2:	f080 8104 	bcs.w	8024dbe <f_write+0x274>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8024bb6:	68fb      	ldr	r3, [r7, #12]
 8024bb8:	699b      	ldr	r3, [r3, #24]
 8024bba:	43db      	mvns	r3, r3
 8024bbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8024bbe:	e0fe      	b.n	8024dbe <f_write+0x274>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8024bc0:	68fb      	ldr	r3, [r7, #12]
 8024bc2:	699b      	ldr	r3, [r3, #24]
 8024bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	f040 80ba 	bne.w	8024d42 <f_write+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8024bce:	68fb      	ldr	r3, [r7, #12]
 8024bd0:	699b      	ldr	r3, [r3, #24]
 8024bd2:	0b1b      	lsrs	r3, r3, #12
 8024bd4:	693a      	ldr	r2, [r7, #16]
 8024bd6:	8952      	ldrh	r2, [r2, #10]
 8024bd8:	3a01      	subs	r2, #1
 8024bda:	4013      	ands	r3, r2
 8024bdc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8024bde:	69bb      	ldr	r3, [r7, #24]
 8024be0:	2b00      	cmp	r3, #0
 8024be2:	d137      	bne.n	8024c54 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8024be4:	68fb      	ldr	r3, [r7, #12]
 8024be6:	699b      	ldr	r3, [r3, #24]
 8024be8:	2b00      	cmp	r3, #0
 8024bea:	d10c      	bne.n	8024c06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	689b      	ldr	r3, [r3, #8]
 8024bf0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8024bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d10e      	bne.n	8024c16 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8024bf8:	68fb      	ldr	r3, [r7, #12]
 8024bfa:	2100      	movs	r1, #0
 8024bfc:	4618      	mov	r0, r3
 8024bfe:	f7fe fd82 	bl	8023706 <create_chain>
 8024c02:	62b8      	str	r0, [r7, #40]	; 0x28
 8024c04:	e007      	b.n	8024c16 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8024c06:	68fa      	ldr	r2, [r7, #12]
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	69db      	ldr	r3, [r3, #28]
 8024c0c:	4619      	mov	r1, r3
 8024c0e:	4610      	mov	r0, r2
 8024c10:	f7fe fd79 	bl	8023706 <create_chain>
 8024c14:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	f000 80d5 	beq.w	8024dc8 <f_write+0x27e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8024c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c20:	2b01      	cmp	r3, #1
 8024c22:	d104      	bne.n	8024c2e <f_write+0xe4>
 8024c24:	68fb      	ldr	r3, [r7, #12]
 8024c26:	2202      	movs	r2, #2
 8024c28:	755a      	strb	r2, [r3, #21]
 8024c2a:	2302      	movs	r3, #2
 8024c2c:	e0d5      	b.n	8024dda <f_write+0x290>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8024c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c34:	d104      	bne.n	8024c40 <f_write+0xf6>
 8024c36:	68fb      	ldr	r3, [r7, #12]
 8024c38:	2201      	movs	r2, #1
 8024c3a:	755a      	strb	r2, [r3, #21]
 8024c3c:	2301      	movs	r3, #1
 8024c3e:	e0cc      	b.n	8024dda <f_write+0x290>
				fp->clust = clst;			/* Update current cluster */
 8024c40:	68fb      	ldr	r3, [r7, #12]
 8024c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8024c46:	68fb      	ldr	r3, [r7, #12]
 8024c48:	689b      	ldr	r3, [r3, #8]
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	d102      	bne.n	8024c54 <f_write+0x10a>
 8024c4e:	68fb      	ldr	r3, [r7, #12]
 8024c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	7d1b      	ldrb	r3, [r3, #20]
 8024c58:	b25b      	sxtb	r3, r3
 8024c5a:	2b00      	cmp	r3, #0
 8024c5c:	da18      	bge.n	8024c90 <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024c5e:	693b      	ldr	r3, [r7, #16]
 8024c60:	7858      	ldrb	r0, [r3, #1]
 8024c62:	68fb      	ldr	r3, [r7, #12]
 8024c64:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024c68:	68fb      	ldr	r3, [r7, #12]
 8024c6a:	6a1a      	ldr	r2, [r3, #32]
 8024c6c:	2301      	movs	r3, #1
 8024c6e:	f7fd ffa3 	bl	8022bb8 <disk_write>
 8024c72:	4603      	mov	r3, r0
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	d004      	beq.n	8024c82 <f_write+0x138>
 8024c78:	68fb      	ldr	r3, [r7, #12]
 8024c7a:	2201      	movs	r2, #1
 8024c7c:	755a      	strb	r2, [r3, #21]
 8024c7e:	2301      	movs	r3, #1
 8024c80:	e0ab      	b.n	8024dda <f_write+0x290>
				fp->flag &= (BYTE)~FA_DIRTY;
 8024c82:	68fb      	ldr	r3, [r7, #12]
 8024c84:	7d1b      	ldrb	r3, [r3, #20]
 8024c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024c8a:	b2da      	uxtb	r2, r3
 8024c8c:	68fb      	ldr	r3, [r7, #12]
 8024c8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8024c90:	693a      	ldr	r2, [r7, #16]
 8024c92:	68fb      	ldr	r3, [r7, #12]
 8024c94:	69db      	ldr	r3, [r3, #28]
 8024c96:	4619      	mov	r1, r3
 8024c98:	4610      	mov	r0, r2
 8024c9a:	f7fe fb17 	bl	80232cc <clust2sect>
 8024c9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8024ca0:	697b      	ldr	r3, [r7, #20]
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	d104      	bne.n	8024cb0 <f_write+0x166>
 8024ca6:	68fb      	ldr	r3, [r7, #12]
 8024ca8:	2202      	movs	r2, #2
 8024caa:	755a      	strb	r2, [r3, #21]
 8024cac:	2302      	movs	r3, #2
 8024cae:	e094      	b.n	8024dda <f_write+0x290>
			sect += csect;
 8024cb0:	697a      	ldr	r2, [r7, #20]
 8024cb2:	69bb      	ldr	r3, [r7, #24]
 8024cb4:	4413      	add	r3, r2
 8024cb6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	0b1b      	lsrs	r3, r3, #12
 8024cbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8024cbe:	6a3b      	ldr	r3, [r7, #32]
 8024cc0:	2b00      	cmp	r3, #0
 8024cc2:	d01f      	beq.n	8024d04 <f_write+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8024cc4:	69ba      	ldr	r2, [r7, #24]
 8024cc6:	6a3b      	ldr	r3, [r7, #32]
 8024cc8:	4413      	add	r3, r2
 8024cca:	693a      	ldr	r2, [r7, #16]
 8024ccc:	8952      	ldrh	r2, [r2, #10]
 8024cce:	4293      	cmp	r3, r2
 8024cd0:	d905      	bls.n	8024cde <f_write+0x194>
					cc = fs->csize - csect;
 8024cd2:	693b      	ldr	r3, [r7, #16]
 8024cd4:	895b      	ldrh	r3, [r3, #10]
 8024cd6:	461a      	mov	r2, r3
 8024cd8:	69bb      	ldr	r3, [r7, #24]
 8024cda:	1ad3      	subs	r3, r2, r3
 8024cdc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024cde:	693b      	ldr	r3, [r7, #16]
 8024ce0:	7858      	ldrb	r0, [r3, #1]
 8024ce2:	6a3b      	ldr	r3, [r7, #32]
 8024ce4:	697a      	ldr	r2, [r7, #20]
 8024ce6:	69f9      	ldr	r1, [r7, #28]
 8024ce8:	f7fd ff66 	bl	8022bb8 <disk_write>
 8024cec:	4603      	mov	r3, r0
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	d004      	beq.n	8024cfc <f_write+0x1b2>
 8024cf2:	68fb      	ldr	r3, [r7, #12]
 8024cf4:	2201      	movs	r2, #1
 8024cf6:	755a      	strb	r2, [r3, #21]
 8024cf8:	2301      	movs	r3, #1
 8024cfa:	e06e      	b.n	8024dda <f_write+0x290>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8024cfc:	6a3b      	ldr	r3, [r7, #32]
 8024cfe:	031b      	lsls	r3, r3, #12
 8024d00:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8024d02:	e03f      	b.n	8024d84 <f_write+0x23a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8024d04:	68fb      	ldr	r3, [r7, #12]
 8024d06:	6a1b      	ldr	r3, [r3, #32]
 8024d08:	697a      	ldr	r2, [r7, #20]
 8024d0a:	429a      	cmp	r2, r3
 8024d0c:	d016      	beq.n	8024d3c <f_write+0x1f2>
				fp->fptr < fp->obj.objsize &&
 8024d0e:	68fb      	ldr	r3, [r7, #12]
 8024d10:	699a      	ldr	r2, [r3, #24]
 8024d12:	68fb      	ldr	r3, [r7, #12]
 8024d14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8024d16:	429a      	cmp	r2, r3
 8024d18:	d210      	bcs.n	8024d3c <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8024d1a:	693b      	ldr	r3, [r7, #16]
 8024d1c:	7858      	ldrb	r0, [r3, #1]
 8024d1e:	68fb      	ldr	r3, [r7, #12]
 8024d20:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024d24:	2301      	movs	r3, #1
 8024d26:	697a      	ldr	r2, [r7, #20]
 8024d28:	f7fd ff26 	bl	8022b78 <disk_read>
 8024d2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8024d2e:	2b00      	cmp	r3, #0
 8024d30:	d004      	beq.n	8024d3c <f_write+0x1f2>
					ABORT(fs, FR_DISK_ERR);
 8024d32:	68fb      	ldr	r3, [r7, #12]
 8024d34:	2201      	movs	r2, #1
 8024d36:	755a      	strb	r2, [r3, #21]
 8024d38:	2301      	movs	r3, #1
 8024d3a:	e04e      	b.n	8024dda <f_write+0x290>
			}
#endif
			fp->sect = sect;
 8024d3c:	68fb      	ldr	r3, [r7, #12]
 8024d3e:	697a      	ldr	r2, [r7, #20]
 8024d40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8024d42:	68fb      	ldr	r3, [r7, #12]
 8024d44:	699b      	ldr	r3, [r3, #24]
 8024d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d4a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024d4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8024d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	429a      	cmp	r2, r3
 8024d56:	d901      	bls.n	8024d5c <f_write+0x212>
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8024d5c:	68fb      	ldr	r3, [r7, #12]
 8024d5e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8024d62:	68fb      	ldr	r3, [r7, #12]
 8024d64:	699b      	ldr	r3, [r3, #24]
 8024d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d6a:	4413      	add	r3, r2
 8024d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024d6e:	69f9      	ldr	r1, [r7, #28]
 8024d70:	4618      	mov	r0, r3
 8024d72:	f7fd ffe1 	bl	8022d38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8024d76:	68fb      	ldr	r3, [r7, #12]
 8024d78:	7d1b      	ldrb	r3, [r3, #20]
 8024d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8024d7e:	b2da      	uxtb	r2, r3
 8024d80:	68fb      	ldr	r3, [r7, #12]
 8024d82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8024d84:	69fa      	ldr	r2, [r7, #28]
 8024d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d88:	4413      	add	r3, r2
 8024d8a:	61fb      	str	r3, [r7, #28]
 8024d8c:	68fb      	ldr	r3, [r7, #12]
 8024d8e:	699a      	ldr	r2, [r3, #24]
 8024d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d92:	441a      	add	r2, r3
 8024d94:	68fb      	ldr	r3, [r7, #12]
 8024d96:	619a      	str	r2, [r3, #24]
 8024d98:	68fb      	ldr	r3, [r7, #12]
 8024d9a:	68da      	ldr	r2, [r3, #12]
 8024d9c:	68fb      	ldr	r3, [r7, #12]
 8024d9e:	699b      	ldr	r3, [r3, #24]
 8024da0:	429a      	cmp	r2, r3
 8024da2:	bf38      	it	cc
 8024da4:	461a      	movcc	r2, r3
 8024da6:	68fb      	ldr	r3, [r7, #12]
 8024da8:	60da      	str	r2, [r3, #12]
 8024daa:	683b      	ldr	r3, [r7, #0]
 8024dac:	681a      	ldr	r2, [r3, #0]
 8024dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024db0:	441a      	add	r2, r3
 8024db2:	683b      	ldr	r3, [r7, #0]
 8024db4:	601a      	str	r2, [r3, #0]
 8024db6:	687a      	ldr	r2, [r7, #4]
 8024db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024dba:	1ad3      	subs	r3, r2, r3
 8024dbc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8024dbe:	687b      	ldr	r3, [r7, #4]
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	f47f aefd 	bne.w	8024bc0 <f_write+0x76>
 8024dc6:	e000      	b.n	8024dca <f_write+0x280>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024dc8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	7d1b      	ldrb	r3, [r3, #20]
 8024dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024dd2:	b2da      	uxtb	r2, r3
 8024dd4:	68fb      	ldr	r3, [r7, #12]
 8024dd6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8024dd8:	2300      	movs	r3, #0
}
 8024dda:	4618      	mov	r0, r3
 8024ddc:	3730      	adds	r7, #48	; 0x30
 8024dde:	46bd      	mov	sp, r7
 8024de0:	bd80      	pop	{r7, pc}
	...

08024de4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8024de4:	b580      	push	{r7, lr}
 8024de6:	b086      	sub	sp, #24
 8024de8:	af00      	add	r7, sp, #0
 8024dea:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	f107 0208 	add.w	r2, r7, #8
 8024df2:	4611      	mov	r1, r2
 8024df4:	4618      	mov	r0, r3
 8024df6:	f7ff fb57 	bl	80244a8 <validate>
 8024dfa:	4603      	mov	r3, r0
 8024dfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8024dfe:	7dfb      	ldrb	r3, [r7, #23]
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d167      	bne.n	8024ed4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	7d1b      	ldrb	r3, [r3, #20]
 8024e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e0c:	2b00      	cmp	r3, #0
 8024e0e:	d061      	beq.n	8024ed4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	7d1b      	ldrb	r3, [r3, #20]
 8024e14:	b25b      	sxtb	r3, r3
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	da15      	bge.n	8024e46 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8024e1a:	68bb      	ldr	r3, [r7, #8]
 8024e1c:	7858      	ldrb	r0, [r3, #1]
 8024e1e:	687b      	ldr	r3, [r7, #4]
 8024e20:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	6a1a      	ldr	r2, [r3, #32]
 8024e28:	2301      	movs	r3, #1
 8024e2a:	f7fd fec5 	bl	8022bb8 <disk_write>
 8024e2e:	4603      	mov	r3, r0
 8024e30:	2b00      	cmp	r3, #0
 8024e32:	d001      	beq.n	8024e38 <f_sync+0x54>
 8024e34:	2301      	movs	r3, #1
 8024e36:	e04e      	b.n	8024ed6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8024e38:	687b      	ldr	r3, [r7, #4]
 8024e3a:	7d1b      	ldrb	r3, [r3, #20]
 8024e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024e40:	b2da      	uxtb	r2, r3
 8024e42:	687b      	ldr	r3, [r7, #4]
 8024e44:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8024e46:	4b26      	ldr	r3, [pc, #152]	; (8024ee0 <f_sync+0xfc>)
 8024e48:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8024e4a:	68ba      	ldr	r2, [r7, #8]
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e50:	4619      	mov	r1, r3
 8024e52:	4610      	mov	r0, r2
 8024e54:	f7fe f99e 	bl	8023194 <move_window>
 8024e58:	4603      	mov	r3, r0
 8024e5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8024e5c:	7dfb      	ldrb	r3, [r7, #23]
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	d138      	bne.n	8024ed4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024e66:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8024e68:	68fb      	ldr	r3, [r7, #12]
 8024e6a:	330b      	adds	r3, #11
 8024e6c:	781a      	ldrb	r2, [r3, #0]
 8024e6e:	68fb      	ldr	r3, [r7, #12]
 8024e70:	330b      	adds	r3, #11
 8024e72:	f042 0220 	orr.w	r2, r2, #32
 8024e76:	b2d2      	uxtb	r2, r2
 8024e78:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	6818      	ldr	r0, [r3, #0]
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	689b      	ldr	r3, [r3, #8]
 8024e82:	461a      	mov	r2, r3
 8024e84:	68f9      	ldr	r1, [r7, #12]
 8024e86:	f7fe fe7c 	bl	8023b82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8024e8a:	68fb      	ldr	r3, [r7, #12]
 8024e8c:	f103 021c 	add.w	r2, r3, #28
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	68db      	ldr	r3, [r3, #12]
 8024e94:	4619      	mov	r1, r3
 8024e96:	4610      	mov	r0, r2
 8024e98:	f7fd ff22 	bl	8022ce0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8024e9c:	68fb      	ldr	r3, [r7, #12]
 8024e9e:	3316      	adds	r3, #22
 8024ea0:	6939      	ldr	r1, [r7, #16]
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	f7fd ff1c 	bl	8022ce0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8024ea8:	68fb      	ldr	r3, [r7, #12]
 8024eaa:	3312      	adds	r3, #18
 8024eac:	2100      	movs	r1, #0
 8024eae:	4618      	mov	r0, r3
 8024eb0:	f7fd fefb 	bl	8022caa <st_word>
					fs->wflag = 1;
 8024eb4:	68bb      	ldr	r3, [r7, #8]
 8024eb6:	2201      	movs	r2, #1
 8024eb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8024eba:	68bb      	ldr	r3, [r7, #8]
 8024ebc:	4618      	mov	r0, r3
 8024ebe:	f7fe f997 	bl	80231f0 <sync_fs>
 8024ec2:	4603      	mov	r3, r0
 8024ec4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	7d1b      	ldrb	r3, [r3, #20]
 8024eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024ece:	b2da      	uxtb	r2, r3
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8024ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	3718      	adds	r7, #24
 8024eda:	46bd      	mov	sp, r7
 8024edc:	bd80      	pop	{r7, pc}
 8024ede:	bf00      	nop
 8024ee0:	53740000 	.word	0x53740000

08024ee4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8024ee4:	b580      	push	{r7, lr}
 8024ee6:	b084      	sub	sp, #16
 8024ee8:	af00      	add	r7, sp, #0
 8024eea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8024eec:	6878      	ldr	r0, [r7, #4]
 8024eee:	f7ff ff79 	bl	8024de4 <f_sync>
 8024ef2:	4603      	mov	r3, r0
 8024ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8024ef6:	7bfb      	ldrb	r3, [r7, #15]
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	d118      	bne.n	8024f2e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	f107 0208 	add.w	r2, r7, #8
 8024f02:	4611      	mov	r1, r2
 8024f04:	4618      	mov	r0, r3
 8024f06:	f7ff facf 	bl	80244a8 <validate>
 8024f0a:	4603      	mov	r3, r0
 8024f0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8024f0e:	7bfb      	ldrb	r3, [r7, #15]
 8024f10:	2b00      	cmp	r3, #0
 8024f12:	d10c      	bne.n	8024f2e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	691b      	ldr	r3, [r3, #16]
 8024f18:	4618      	mov	r0, r3
 8024f1a:	f7fe f897 	bl	802304c <dec_lock>
 8024f1e:	4603      	mov	r3, r0
 8024f20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8024f22:	7bfb      	ldrb	r3, [r7, #15]
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	d102      	bne.n	8024f2e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	2200      	movs	r2, #0
 8024f2c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8024f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024f30:	4618      	mov	r0, r3
 8024f32:	3710      	adds	r7, #16
 8024f34:	46bd      	mov	sp, r7
 8024f36:	bd80      	pop	{r7, pc}

08024f38 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8024f38:	b580      	push	{r7, lr}
 8024f3a:	b09c      	sub	sp, #112	; 0x70
 8024f3c:	af00      	add	r7, sp, #0
 8024f3e:	60f8      	str	r0, [r7, #12]
 8024f40:	607a      	str	r2, [r7, #4]
 8024f42:	603b      	str	r3, [r7, #0]
 8024f44:	460b      	mov	r3, r1
 8024f46:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8024f48:	2301      	movs	r3, #1
 8024f4a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8024f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024f50:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8024f52:	f107 030c 	add.w	r3, r7, #12
 8024f56:	4618      	mov	r0, r3
 8024f58:	f7fe ffbf 	bl	8023eda <get_ldnumber>
 8024f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8024f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f60:	2b00      	cmp	r3, #0
 8024f62:	da02      	bge.n	8024f6a <f_mkfs+0x32>
 8024f64:	230b      	movs	r3, #11
 8024f66:	f000 bc07 	b.w	8025778 <f_mkfs+0x840>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8024f6a:	4a94      	ldr	r2, [pc, #592]	; (80251bc <f_mkfs+0x284>)
 8024f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f72:	2b00      	cmp	r3, #0
 8024f74:	d005      	beq.n	8024f82 <f_mkfs+0x4a>
 8024f76:	4a91      	ldr	r2, [pc, #580]	; (80251bc <f_mkfs+0x284>)
 8024f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024f7e:	2200      	movs	r2, #0
 8024f80:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8024f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8024f88:	2300      	movs	r3, #0
 8024f8a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8024f8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8024f92:	4618      	mov	r0, r3
 8024f94:	f7fd fdca 	bl	8022b2c <disk_initialize>
 8024f98:	4603      	mov	r3, r0
 8024f9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8024f9e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8024fa2:	f003 0301 	and.w	r3, r3, #1
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	d001      	beq.n	8024fae <f_mkfs+0x76>
 8024faa:	2303      	movs	r3, #3
 8024fac:	e3e4      	b.n	8025778 <f_mkfs+0x840>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8024fae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8024fb2:	f003 0304 	and.w	r3, r3, #4
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	d001      	beq.n	8024fbe <f_mkfs+0x86>
 8024fba:	230a      	movs	r3, #10
 8024fbc:	e3dc      	b.n	8025778 <f_mkfs+0x840>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8024fbe:	f107 0214 	add.w	r2, r7, #20
 8024fc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8024fc6:	2103      	movs	r1, #3
 8024fc8:	4618      	mov	r0, r3
 8024fca:	f7fd fe15 	bl	8022bf8 <disk_ioctl>
 8024fce:	4603      	mov	r3, r0
 8024fd0:	2b00      	cmp	r3, #0
 8024fd2:	d10c      	bne.n	8024fee <f_mkfs+0xb6>
 8024fd4:	697b      	ldr	r3, [r7, #20]
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	d009      	beq.n	8024fee <f_mkfs+0xb6>
 8024fda:	697b      	ldr	r3, [r7, #20]
 8024fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024fe0:	d805      	bhi.n	8024fee <f_mkfs+0xb6>
 8024fe2:	697b      	ldr	r3, [r7, #20]
 8024fe4:	1e5a      	subs	r2, r3, #1
 8024fe6:	697b      	ldr	r3, [r7, #20]
 8024fe8:	4013      	ands	r3, r2
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d001      	beq.n	8024ff2 <f_mkfs+0xba>
 8024fee:	2301      	movs	r3, #1
 8024ff0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8024ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024ff6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d003      	beq.n	8025006 <f_mkfs+0xce>
 8024ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025000:	687a      	ldr	r2, [r7, #4]
 8025002:	429a      	cmp	r2, r3
 8025004:	d309      	bcc.n	802501a <f_mkfs+0xe2>
 8025006:	687b      	ldr	r3, [r7, #4]
 8025008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802500c:	d805      	bhi.n	802501a <f_mkfs+0xe2>
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	1e5a      	subs	r2, r3, #1
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	4013      	ands	r3, r2
 8025016:	2b00      	cmp	r3, #0
 8025018:	d001      	beq.n	802501e <f_mkfs+0xe6>
 802501a:	2313      	movs	r3, #19
 802501c:	e3ac      	b.n	8025778 <f_mkfs+0x840>
	au /= ss;	/* Cluster size in unit of sector */
 802501e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025020:	687a      	ldr	r2, [r7, #4]
 8025022:	fbb2 f3f3 	udiv	r3, r2, r3
 8025026:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8025028:	683b      	ldr	r3, [r7, #0]
 802502a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 802502c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802502e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025030:	fbb2 f3f3 	udiv	r3, r2, r3
 8025034:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8025036:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802503a:	fb02 f303 	mul.w	r3, r2, r3
 802503e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8025040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025042:	2b00      	cmp	r3, #0
 8025044:	d101      	bne.n	802504a <f_mkfs+0x112>
 8025046:	230e      	movs	r3, #14
 8025048:	e396      	b.n	8025778 <f_mkfs+0x840>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 802504a:	f107 0210 	add.w	r2, r7, #16
 802504e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8025052:	2101      	movs	r1, #1
 8025054:	4618      	mov	r0, r3
 8025056:	f7fd fdcf 	bl	8022bf8 <disk_ioctl>
 802505a:	4603      	mov	r3, r0
 802505c:	2b00      	cmp	r3, #0
 802505e:	d001      	beq.n	8025064 <f_mkfs+0x12c>
 8025060:	2301      	movs	r3, #1
 8025062:	e389      	b.n	8025778 <f_mkfs+0x840>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8025064:	7afb      	ldrb	r3, [r7, #11]
 8025066:	f003 0308 	and.w	r3, r3, #8
 802506a:	2b00      	cmp	r3, #0
 802506c:	d001      	beq.n	8025072 <f_mkfs+0x13a>
 802506e:	2300      	movs	r3, #0
 8025070:	e000      	b.n	8025074 <f_mkfs+0x13c>
 8025072:	233f      	movs	r3, #63	; 0x3f
 8025074:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8025076:	693b      	ldr	r3, [r7, #16]
 8025078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802507a:	429a      	cmp	r2, r3
 802507c:	d901      	bls.n	8025082 <f_mkfs+0x14a>
 802507e:	230e      	movs	r3, #14
 8025080:	e37a      	b.n	8025778 <f_mkfs+0x840>
		sz_vol -= b_vol;						/* Volume size */
 8025082:	693a      	ldr	r2, [r7, #16]
 8025084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025086:	1ad3      	subs	r3, r2, r3
 8025088:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 802508a:	693b      	ldr	r3, [r7, #16]
 802508c:	2b7f      	cmp	r3, #127	; 0x7f
 802508e:	d801      	bhi.n	8025094 <f_mkfs+0x15c>
 8025090:	230e      	movs	r3, #14
 8025092:	e371      	b.n	8025778 <f_mkfs+0x840>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	2b80      	cmp	r3, #128	; 0x80
 8025098:	d901      	bls.n	802509e <f_mkfs+0x166>
 802509a:	2313      	movs	r3, #19
 802509c:	e36c      	b.n	8025778 <f_mkfs+0x840>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 802509e:	7afb      	ldrb	r3, [r7, #11]
 80250a0:	f003 0302 	and.w	r3, r3, #2
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d00d      	beq.n	80250c4 <f_mkfs+0x18c>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80250a8:	7afb      	ldrb	r3, [r7, #11]
 80250aa:	f003 0307 	and.w	r3, r3, #7
 80250ae:	2b02      	cmp	r3, #2
 80250b0:	d004      	beq.n	80250bc <f_mkfs+0x184>
 80250b2:	7afb      	ldrb	r3, [r7, #11]
 80250b4:	f003 0301 	and.w	r3, r3, #1
 80250b8:	2b00      	cmp	r3, #0
 80250ba:	d103      	bne.n	80250c4 <f_mkfs+0x18c>
				fmt = FS_FAT32; break;
 80250bc:	2303      	movs	r3, #3
 80250be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80250c2:	e009      	b.n	80250d8 <f_mkfs+0x1a0>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80250c4:	7afb      	ldrb	r3, [r7, #11]
 80250c6:	f003 0301 	and.w	r3, r3, #1
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d101      	bne.n	80250d2 <f_mkfs+0x19a>
 80250ce:	2313      	movs	r3, #19
 80250d0:	e352      	b.n	8025778 <f_mkfs+0x840>
		fmt = FS_FAT16;
 80250d2:	2302      	movs	r3, #2
 80250d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80250d8:	687b      	ldr	r3, [r7, #4]
 80250da:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80250dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80250e0:	2b03      	cmp	r3, #3
 80250e2:	d13c      	bne.n	802515e <f_mkfs+0x226>
				if (!pau) {	/* au auto-selection */
 80250e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d11b      	bne.n	8025122 <f_mkfs+0x1ea>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80250ea:	693b      	ldr	r3, [r7, #16]
 80250ec:	0c5b      	lsrs	r3, r3, #17
 80250ee:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80250f0:	2300      	movs	r3, #0
 80250f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80250f4:	2301      	movs	r3, #1
 80250f6:	653b      	str	r3, [r7, #80]	; 0x50
 80250f8:	e005      	b.n	8025106 <f_mkfs+0x1ce>
 80250fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80250fc:	3301      	adds	r3, #1
 80250fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8025100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025102:	005b      	lsls	r3, r3, #1
 8025104:	653b      	str	r3, [r7, #80]	; 0x50
 8025106:	4a2e      	ldr	r2, [pc, #184]	; (80251c0 <f_mkfs+0x288>)
 8025108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802510a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802510e:	2b00      	cmp	r3, #0
 8025110:	d007      	beq.n	8025122 <f_mkfs+0x1ea>
 8025112:	4a2b      	ldr	r2, [pc, #172]	; (80251c0 <f_mkfs+0x288>)
 8025114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802511a:	461a      	mov	r2, r3
 802511c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802511e:	4293      	cmp	r3, r2
 8025120:	d2eb      	bcs.n	80250fa <f_mkfs+0x1c2>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8025122:	693a      	ldr	r2, [r7, #16]
 8025124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025126:	fbb2 f3f3 	udiv	r3, r2, r3
 802512a:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 802512c:	6a3b      	ldr	r3, [r7, #32]
 802512e:	3302      	adds	r3, #2
 8025130:	009a      	lsls	r2, r3, #2
 8025132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025134:	4413      	add	r3, r2
 8025136:	1e5a      	subs	r2, r3, #1
 8025138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802513a:	fbb2 f3f3 	udiv	r3, r2, r3
 802513e:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8025140:	2320      	movs	r3, #32
 8025142:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8025144:	2300      	movs	r3, #0
 8025146:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8025148:	6a3b      	ldr	r3, [r7, #32]
 802514a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 802514e:	4293      	cmp	r3, r2
 8025150:	d903      	bls.n	802515a <f_mkfs+0x222>
 8025152:	6a3b      	ldr	r3, [r7, #32]
 8025154:	4a1b      	ldr	r2, [pc, #108]	; (80251c4 <f_mkfs+0x28c>)
 8025156:	4293      	cmp	r3, r2
 8025158:	d953      	bls.n	8025202 <f_mkfs+0x2ca>
 802515a:	230e      	movs	r3, #14
 802515c:	e30c      	b.n	8025778 <f_mkfs+0x840>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 802515e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025160:	2b00      	cmp	r3, #0
 8025162:	d11b      	bne.n	802519c <f_mkfs+0x264>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8025164:	693b      	ldr	r3, [r7, #16]
 8025166:	0b1b      	lsrs	r3, r3, #12
 8025168:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 802516a:	2300      	movs	r3, #0
 802516c:	64bb      	str	r3, [r7, #72]	; 0x48
 802516e:	2301      	movs	r3, #1
 8025170:	653b      	str	r3, [r7, #80]	; 0x50
 8025172:	e005      	b.n	8025180 <f_mkfs+0x248>
 8025174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025176:	3301      	adds	r3, #1
 8025178:	64bb      	str	r3, [r7, #72]	; 0x48
 802517a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802517c:	005b      	lsls	r3, r3, #1
 802517e:	653b      	str	r3, [r7, #80]	; 0x50
 8025180:	4a11      	ldr	r2, [pc, #68]	; (80251c8 <f_mkfs+0x290>)
 8025182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025188:	2b00      	cmp	r3, #0
 802518a:	d007      	beq.n	802519c <f_mkfs+0x264>
 802518c:	4a0e      	ldr	r2, [pc, #56]	; (80251c8 <f_mkfs+0x290>)
 802518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025194:	461a      	mov	r2, r3
 8025196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025198:	4293      	cmp	r3, r2
 802519a:	d2eb      	bcs.n	8025174 <f_mkfs+0x23c>
				}
				n_clst = sz_vol / pau;
 802519c:	693a      	ldr	r2, [r7, #16]
 802519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80251a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80251a4:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80251a6:	6a3b      	ldr	r3, [r7, #32]
 80251a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80251ac:	4293      	cmp	r3, r2
 80251ae:	d90d      	bls.n	80251cc <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80251b0:	6a3b      	ldr	r3, [r7, #32]
 80251b2:	3302      	adds	r3, #2
 80251b4:	005b      	lsls	r3, r3, #1
 80251b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80251b8:	e013      	b.n	80251e2 <f_mkfs+0x2aa>
 80251ba:	bf00      	nop
 80251bc:	20009ad8 	.word	0x20009ad8
 80251c0:	08002484 	.word	0x08002484
 80251c4:	0ffffff5 	.word	0x0ffffff5
 80251c8:	08002494 	.word	0x08002494
				} else {
					fmt = FS_FAT12;
 80251cc:	2301      	movs	r3, #1
 80251ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80251d2:	6a3a      	ldr	r2, [r7, #32]
 80251d4:	4613      	mov	r3, r2
 80251d6:	005b      	lsls	r3, r3, #1
 80251d8:	4413      	add	r3, r2
 80251da:	3301      	adds	r3, #1
 80251dc:	085b      	lsrs	r3, r3, #1
 80251de:	3303      	adds	r3, #3
 80251e0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80251e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80251e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251e6:	4413      	add	r3, r2
 80251e8:	1e5a      	subs	r2, r3, #1
 80251ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80251ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80251f0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80251f2:	2301      	movs	r3, #1
 80251f4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80251f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80251f8:	015a      	lsls	r2, r3, #5
 80251fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80251fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8025200:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8025202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025206:	4413      	add	r3, r2
 8025208:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 802520a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802520c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802520e:	fb03 f202 	mul.w	r2, r3, r2
 8025212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025214:	4413      	add	r3, r2
 8025216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8025218:	4413      	add	r3, r2
 802521a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 802521c:	697a      	ldr	r2, [r7, #20]
 802521e:	69fb      	ldr	r3, [r7, #28]
 8025220:	4413      	add	r3, r2
 8025222:	1e5a      	subs	r2, r3, #1
 8025224:	697b      	ldr	r3, [r7, #20]
 8025226:	425b      	negs	r3, r3
 8025228:	401a      	ands	r2, r3
 802522a:	69fb      	ldr	r3, [r7, #28]
 802522c:	1ad3      	subs	r3, r2, r3
 802522e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8025230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025234:	2b03      	cmp	r3, #3
 8025236:	d108      	bne.n	802524a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8025238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802523a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802523c:	4413      	add	r3, r2
 802523e:	657b      	str	r3, [r7, #84]	; 0x54
 8025240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8025242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025244:	4413      	add	r3, r2
 8025246:	65bb      	str	r3, [r7, #88]	; 0x58
 8025248:	e006      	b.n	8025258 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 802524a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802524c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8025252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025254:	4413      	add	r3, r2
 8025256:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8025258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802525a:	011a      	lsls	r2, r3, #4
 802525c:	69fb      	ldr	r3, [r7, #28]
 802525e:	441a      	add	r2, r3
 8025260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025262:	1ad2      	subs	r2, r2, r3
 8025264:	693b      	ldr	r3, [r7, #16]
 8025266:	429a      	cmp	r2, r3
 8025268:	d901      	bls.n	802526e <f_mkfs+0x336>
 802526a:	230e      	movs	r3, #14
 802526c:	e284      	b.n	8025778 <f_mkfs+0x840>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 802526e:	693a      	ldr	r2, [r7, #16]
 8025270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025272:	1ad2      	subs	r2, r2, r3
 8025274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8025278:	fb01 f303 	mul.w	r3, r1, r3
 802527c:	1ad2      	subs	r2, r2, r3
 802527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025280:	1ad2      	subs	r2, r2, r3
 8025282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025284:	fbb2 f3f3 	udiv	r3, r2, r3
 8025288:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 802528a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802528e:	2b03      	cmp	r3, #3
 8025290:	d10f      	bne.n	80252b2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8025292:	6a3b      	ldr	r3, [r7, #32]
 8025294:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8025298:	4293      	cmp	r3, r2
 802529a:	d80a      	bhi.n	80252b2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	2b00      	cmp	r3, #0
 80252a0:	d105      	bne.n	80252ae <f_mkfs+0x376>
 80252a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252a4:	085b      	lsrs	r3, r3, #1
 80252a6:	607b      	str	r3, [r7, #4]
 80252a8:	687b      	ldr	r3, [r7, #4]
 80252aa:	2b00      	cmp	r3, #0
 80252ac:	d144      	bne.n	8025338 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80252ae:	230e      	movs	r3, #14
 80252b0:	e262      	b.n	8025778 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT16) {
 80252b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80252b6:	2b02      	cmp	r3, #2
 80252b8:	d133      	bne.n	8025322 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80252ba:	6a3b      	ldr	r3, [r7, #32]
 80252bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80252c0:	4293      	cmp	r3, r2
 80252c2:	d91e      	bls.n	8025302 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	d107      	bne.n	80252da <f_mkfs+0x3a2>
 80252ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252cc:	005b      	lsls	r3, r3, #1
 80252ce:	2b40      	cmp	r3, #64	; 0x40
 80252d0:	d803      	bhi.n	80252da <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80252d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252d4:	005b      	lsls	r3, r3, #1
 80252d6:	607b      	str	r3, [r7, #4]
 80252d8:	e033      	b.n	8025342 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80252da:	7afb      	ldrb	r3, [r7, #11]
 80252dc:	f003 0302 	and.w	r3, r3, #2
 80252e0:	2b00      	cmp	r3, #0
 80252e2:	d003      	beq.n	80252ec <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80252e4:	2303      	movs	r3, #3
 80252e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80252ea:	e02a      	b.n	8025342 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	d105      	bne.n	80252fe <f_mkfs+0x3c6>
 80252f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252f4:	005b      	lsls	r3, r3, #1
 80252f6:	607b      	str	r3, [r7, #4]
 80252f8:	687b      	ldr	r3, [r7, #4]
 80252fa:	2b80      	cmp	r3, #128	; 0x80
 80252fc:	d91e      	bls.n	802533c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80252fe:	230e      	movs	r3, #14
 8025300:	e23a      	b.n	8025778 <f_mkfs+0x840>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8025302:	6a3b      	ldr	r3, [r7, #32]
 8025304:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025308:	4293      	cmp	r3, r2
 802530a:	d80a      	bhi.n	8025322 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	2b00      	cmp	r3, #0
 8025310:	d105      	bne.n	802531e <f_mkfs+0x3e6>
 8025312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025314:	005b      	lsls	r3, r3, #1
 8025316:	607b      	str	r3, [r7, #4]
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	2b80      	cmp	r3, #128	; 0x80
 802531c:	d910      	bls.n	8025340 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 802531e:	230e      	movs	r3, #14
 8025320:	e22a      	b.n	8025778 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8025322:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025326:	2b01      	cmp	r3, #1
 8025328:	d10c      	bne.n	8025344 <f_mkfs+0x40c>
 802532a:	6a3b      	ldr	r3, [r7, #32]
 802532c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025330:	4293      	cmp	r3, r2
 8025332:	d907      	bls.n	8025344 <f_mkfs+0x40c>
 8025334:	230e      	movs	r3, #14
 8025336:	e21f      	b.n	8025778 <f_mkfs+0x840>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8025338:	bf00      	nop
 802533a:	e6cd      	b.n	80250d8 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 802533c:	bf00      	nop
 802533e:	e6cb      	b.n	80250d8 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8025340:	bf00      	nop
			pau = au;
 8025342:	e6c9      	b.n	80250d8 <f_mkfs+0x1a0>

			/* Ok, it is the valid cluster configuration */
			break;
 8025344:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8025346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025348:	461a      	mov	r2, r3
 802534a:	2100      	movs	r1, #0
 802534c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802534e:	f7fd fd14 	bl	8022d7a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8025352:	220b      	movs	r2, #11
 8025354:	49ae      	ldr	r1, [pc, #696]	; (8025610 <f_mkfs+0x6d8>)
 8025356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025358:	f7fd fcee 	bl	8022d38 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 802535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802535e:	330b      	adds	r3, #11
 8025360:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025362:	4611      	mov	r1, r2
 8025364:	4618      	mov	r0, r3
 8025366:	f7fd fca0 	bl	8022caa <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 802536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802536c:	330d      	adds	r3, #13
 802536e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025370:	b2d2      	uxtb	r2, r2
 8025372:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8025374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025376:	330e      	adds	r3, #14
 8025378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802537a:	b292      	uxth	r2, r2
 802537c:	4611      	mov	r1, r2
 802537e:	4618      	mov	r0, r3
 8025380:	f7fd fc93 	bl	8022caa <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8025384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025386:	3310      	adds	r3, #16
 8025388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802538a:	b2d2      	uxtb	r2, r2
 802538c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 802538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025390:	f103 0211 	add.w	r2, r3, #17
 8025394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025398:	2b03      	cmp	r3, #3
 802539a:	d002      	beq.n	80253a2 <f_mkfs+0x46a>
 802539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802539e:	b29b      	uxth	r3, r3
 80253a0:	e000      	b.n	80253a4 <f_mkfs+0x46c>
 80253a2:	2300      	movs	r3, #0
 80253a4:	4619      	mov	r1, r3
 80253a6:	4610      	mov	r0, r2
 80253a8:	f7fd fc7f 	bl	8022caa <st_word>
		if (sz_vol < 0x10000) {
 80253ac:	693b      	ldr	r3, [r7, #16]
 80253ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80253b2:	d208      	bcs.n	80253c6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80253b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253b6:	3313      	adds	r3, #19
 80253b8:	693a      	ldr	r2, [r7, #16]
 80253ba:	b292      	uxth	r2, r2
 80253bc:	4611      	mov	r1, r2
 80253be:	4618      	mov	r0, r3
 80253c0:	f7fd fc73 	bl	8022caa <st_word>
 80253c4:	e006      	b.n	80253d4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80253c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253c8:	3320      	adds	r3, #32
 80253ca:	693a      	ldr	r2, [r7, #16]
 80253cc:	4611      	mov	r1, r2
 80253ce:	4618      	mov	r0, r3
 80253d0:	f7fd fc86 	bl	8022ce0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80253d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253d6:	3315      	adds	r3, #21
 80253d8:	22f8      	movs	r2, #248	; 0xf8
 80253da:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80253dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253de:	3318      	adds	r3, #24
 80253e0:	213f      	movs	r1, #63	; 0x3f
 80253e2:	4618      	mov	r0, r3
 80253e4:	f7fd fc61 	bl	8022caa <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80253e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253ea:	331a      	adds	r3, #26
 80253ec:	21ff      	movs	r1, #255	; 0xff
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7fd fc5b 	bl	8022caa <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80253f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253f6:	331c      	adds	r3, #28
 80253f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80253fa:	4618      	mov	r0, r3
 80253fc:	f7fd fc70 	bl	8022ce0 <st_dword>
		if (fmt == FS_FAT32) {
 8025400:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025404:	2b03      	cmp	r3, #3
 8025406:	d12d      	bne.n	8025464 <f_mkfs+0x52c>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8025408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802540a:	3343      	adds	r3, #67	; 0x43
 802540c:	4981      	ldr	r1, [pc, #516]	; (8025614 <f_mkfs+0x6dc>)
 802540e:	4618      	mov	r0, r3
 8025410:	f7fd fc66 	bl	8022ce0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8025414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025416:	3324      	adds	r3, #36	; 0x24
 8025418:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802541a:	4618      	mov	r0, r3
 802541c:	f7fd fc60 	bl	8022ce0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8025420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025422:	332c      	adds	r3, #44	; 0x2c
 8025424:	2102      	movs	r1, #2
 8025426:	4618      	mov	r0, r3
 8025428:	f7fd fc5a 	bl	8022ce0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 802542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802542e:	3330      	adds	r3, #48	; 0x30
 8025430:	2101      	movs	r1, #1
 8025432:	4618      	mov	r0, r3
 8025434:	f7fd fc39 	bl	8022caa <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8025438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802543a:	3332      	adds	r3, #50	; 0x32
 802543c:	2106      	movs	r1, #6
 802543e:	4618      	mov	r0, r3
 8025440:	f7fd fc33 	bl	8022caa <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8025444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025446:	3340      	adds	r3, #64	; 0x40
 8025448:	2280      	movs	r2, #128	; 0x80
 802544a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 802544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802544e:	3342      	adds	r3, #66	; 0x42
 8025450:	2229      	movs	r2, #41	; 0x29
 8025452:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8025454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025456:	3347      	adds	r3, #71	; 0x47
 8025458:	2213      	movs	r2, #19
 802545a:	496f      	ldr	r1, [pc, #444]	; (8025618 <f_mkfs+0x6e0>)
 802545c:	4618      	mov	r0, r3
 802545e:	f7fd fc6b 	bl	8022d38 <mem_cpy>
 8025462:	e01c      	b.n	802549e <f_mkfs+0x566>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8025464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025466:	3327      	adds	r3, #39	; 0x27
 8025468:	496a      	ldr	r1, [pc, #424]	; (8025614 <f_mkfs+0x6dc>)
 802546a:	4618      	mov	r0, r3
 802546c:	f7fd fc38 	bl	8022ce0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8025470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025472:	3316      	adds	r3, #22
 8025474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8025476:	b292      	uxth	r2, r2
 8025478:	4611      	mov	r1, r2
 802547a:	4618      	mov	r0, r3
 802547c:	f7fd fc15 	bl	8022caa <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8025480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025482:	3324      	adds	r3, #36	; 0x24
 8025484:	2280      	movs	r2, #128	; 0x80
 8025486:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8025488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802548a:	3326      	adds	r3, #38	; 0x26
 802548c:	2229      	movs	r2, #41	; 0x29
 802548e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8025490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025492:	332b      	adds	r3, #43	; 0x2b
 8025494:	2213      	movs	r2, #19
 8025496:	4961      	ldr	r1, [pc, #388]	; (802561c <f_mkfs+0x6e4>)
 8025498:	4618      	mov	r0, r3
 802549a:	f7fd fc4d 	bl	8022d38 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 802549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80254a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80254a8:	4618      	mov	r0, r3
 80254aa:	f7fd fbfe 	bl	8022caa <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80254ae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80254b2:	2301      	movs	r3, #1
 80254b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80254b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80254b8:	f7fd fb7e 	bl	8022bb8 <disk_write>
 80254bc:	4603      	mov	r3, r0
 80254be:	2b00      	cmp	r3, #0
 80254c0:	d001      	beq.n	80254c6 <f_mkfs+0x58e>
 80254c2:	2301      	movs	r3, #1
 80254c4:	e158      	b.n	8025778 <f_mkfs+0x840>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80254c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80254ca:	2b03      	cmp	r3, #3
 80254cc:	d140      	bne.n	8025550 <f_mkfs+0x618>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80254ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254d0:	1d9a      	adds	r2, r3, #6
 80254d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80254d6:	2301      	movs	r3, #1
 80254d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80254da:	f7fd fb6d 	bl	8022bb8 <disk_write>
			mem_set(buf, 0, ss);
 80254de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80254e0:	461a      	mov	r2, r3
 80254e2:	2100      	movs	r1, #0
 80254e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80254e6:	f7fd fc48 	bl	8022d7a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80254ea:	494d      	ldr	r1, [pc, #308]	; (8025620 <f_mkfs+0x6e8>)
 80254ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80254ee:	f7fd fbf7 	bl	8022ce0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80254f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80254f8:	494a      	ldr	r1, [pc, #296]	; (8025624 <f_mkfs+0x6ec>)
 80254fa:	4618      	mov	r0, r3
 80254fc:	f7fd fbf0 	bl	8022ce0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8025500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025502:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8025506:	6a3b      	ldr	r3, [r7, #32]
 8025508:	3b01      	subs	r3, #1
 802550a:	4619      	mov	r1, r3
 802550c:	4610      	mov	r0, r2
 802550e:	f7fd fbe7 	bl	8022ce0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8025512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025514:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8025518:	2102      	movs	r1, #2
 802551a:	4618      	mov	r0, r3
 802551c:	f7fd fbe0 	bl	8022ce0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8025520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8025526:	f64a 2155 	movw	r1, #43605	; 0xaa55
 802552a:	4618      	mov	r0, r3
 802552c:	f7fd fbbd 	bl	8022caa <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8025530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025532:	1dda      	adds	r2, r3, #7
 8025534:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025538:	2301      	movs	r3, #1
 802553a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802553c:	f7fd fb3c 	bl	8022bb8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8025540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025542:	1c5a      	adds	r2, r3, #1
 8025544:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025548:	2301      	movs	r3, #1
 802554a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802554c:	f7fd fb34 	bl	8022bb8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8025550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025552:	2100      	movs	r1, #0
 8025554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025556:	f7fd fc10 	bl	8022d7a <mem_set>
		sect = b_fat;		/* FAT start sector */
 802555a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802555c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 802555e:	2300      	movs	r3, #0
 8025560:	64bb      	str	r3, [r7, #72]	; 0x48
 8025562:	e04b      	b.n	80255fc <f_mkfs+0x6c4>
			if (fmt == FS_FAT32) {
 8025564:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025568:	2b03      	cmp	r3, #3
 802556a:	d113      	bne.n	8025594 <f_mkfs+0x65c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 802556c:	f06f 0107 	mvn.w	r1, #7
 8025570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025572:	f7fd fbb5 	bl	8022ce0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8025576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025578:	3304      	adds	r3, #4
 802557a:	f04f 31ff 	mov.w	r1, #4294967295
 802557e:	4618      	mov	r0, r3
 8025580:	f7fd fbae 	bl	8022ce0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8025584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025586:	3308      	adds	r3, #8
 8025588:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 802558c:	4618      	mov	r0, r3
 802558e:	f7fd fba7 	bl	8022ce0 <st_dword>
 8025592:	e00b      	b.n	80255ac <f_mkfs+0x674>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8025594:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025598:	2b01      	cmp	r3, #1
 802559a:	d101      	bne.n	80255a0 <f_mkfs+0x668>
 802559c:	4b22      	ldr	r3, [pc, #136]	; (8025628 <f_mkfs+0x6f0>)
 802559e:	e001      	b.n	80255a4 <f_mkfs+0x66c>
 80255a0:	f06f 0307 	mvn.w	r3, #7
 80255a4:	4619      	mov	r1, r3
 80255a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80255a8:	f7fd fb9a 	bl	8022ce0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80255ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80255ae:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80255b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80255b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255b4:	4293      	cmp	r3, r2
 80255b6:	bf28      	it	cs
 80255b8:	4613      	movcs	r3, r2
 80255ba:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80255bc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80255c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80255c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80255c6:	f7fd faf7 	bl	8022bb8 <disk_write>
 80255ca:	4603      	mov	r3, r0
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	d001      	beq.n	80255d4 <f_mkfs+0x69c>
 80255d0:	2301      	movs	r3, #1
 80255d2:	e0d1      	b.n	8025778 <f_mkfs+0x840>
				mem_set(buf, 0, ss);
 80255d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80255d6:	461a      	mov	r2, r3
 80255d8:	2100      	movs	r1, #0
 80255da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80255dc:	f7fd fbcd 	bl	8022d7a <mem_set>
				sect += n; nsect -= n;
 80255e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80255e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255e4:	4413      	add	r3, r2
 80255e6:	667b      	str	r3, [r7, #100]	; 0x64
 80255e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80255ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255ec:	1ad3      	subs	r3, r2, r3
 80255ee:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80255f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80255f2:	2b00      	cmp	r3, #0
 80255f4:	d1dc      	bne.n	80255b0 <f_mkfs+0x678>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80255f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255f8:	3301      	adds	r3, #1
 80255fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80255fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80255fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025600:	429a      	cmp	r2, r3
 8025602:	d3af      	bcc.n	8025564 <f_mkfs+0x62c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8025604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025608:	2b03      	cmp	r3, #3
 802560a:	d10f      	bne.n	802562c <f_mkfs+0x6f4>
 802560c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802560e:	e00e      	b.n	802562e <f_mkfs+0x6f6>
 8025610:	08000aec 	.word	0x08000aec
 8025614:	53740000 	.word	0x53740000
 8025618:	08000af8 	.word	0x08000af8
 802561c:	08000b0c 	.word	0x08000b0c
 8025620:	41615252 	.word	0x41615252
 8025624:	61417272 	.word	0x61417272
 8025628:	00fffff8 	.word	0x00fffff8
 802562c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802562e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8025630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025634:	4293      	cmp	r3, r2
 8025636:	bf28      	it	cs
 8025638:	4613      	movcs	r3, r2
 802563a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 802563c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8025644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025646:	f7fd fab7 	bl	8022bb8 <disk_write>
 802564a:	4603      	mov	r3, r0
 802564c:	2b00      	cmp	r3, #0
 802564e:	d001      	beq.n	8025654 <f_mkfs+0x71c>
 8025650:	2301      	movs	r3, #1
 8025652:	e091      	b.n	8025778 <f_mkfs+0x840>
			sect += n; nsect -= n;
 8025654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8025656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025658:	4413      	add	r3, r2
 802565a:	667b      	str	r3, [r7, #100]	; 0x64
 802565c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802565e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025660:	1ad3      	subs	r3, r2, r3
 8025662:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8025664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025666:	2b00      	cmp	r3, #0
 8025668:	d1e2      	bne.n	8025630 <f_mkfs+0x6f8>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 802566a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802566e:	2b03      	cmp	r3, #3
 8025670:	d103      	bne.n	802567a <f_mkfs+0x742>
			sys = 0x0C;		/* FAT32X */
 8025672:	230c      	movs	r3, #12
 8025674:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8025678:	e010      	b.n	802569c <f_mkfs+0x764>
		} else {
			if (sz_vol >= 0x10000) {
 802567a:	693b      	ldr	r3, [r7, #16]
 802567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025680:	d303      	bcc.n	802568a <f_mkfs+0x752>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8025682:	2306      	movs	r3, #6
 8025684:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8025688:	e008      	b.n	802569c <f_mkfs+0x764>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 802568a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802568e:	2b02      	cmp	r3, #2
 8025690:	d101      	bne.n	8025696 <f_mkfs+0x75e>
 8025692:	2304      	movs	r3, #4
 8025694:	e000      	b.n	8025698 <f_mkfs+0x760>
 8025696:	2301      	movs	r3, #1
 8025698:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 802569c:	7afb      	ldrb	r3, [r7, #11]
 802569e:	f003 0308 	and.w	r3, r3, #8
 80256a2:	2b00      	cmp	r3, #0
 80256a4:	d15b      	bne.n	802575e <f_mkfs+0x826>
			mem_set(buf, 0, ss);
 80256a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80256a8:	461a      	mov	r2, r3
 80256aa:	2100      	movs	r1, #0
 80256ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80256ae:	f7fd fb64 	bl	8022d7a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80256b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80256b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80256bc:	4618      	mov	r0, r3
 80256be:	f7fd faf4 	bl	8022caa <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80256c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80256c8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80256ca:	69bb      	ldr	r3, [r7, #24]
 80256cc:	2200      	movs	r2, #0
 80256ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80256d0:	69bb      	ldr	r3, [r7, #24]
 80256d2:	3301      	adds	r3, #1
 80256d4:	2201      	movs	r2, #1
 80256d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80256d8:	69bb      	ldr	r3, [r7, #24]
 80256da:	3302      	adds	r3, #2
 80256dc:	2201      	movs	r2, #1
 80256de:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80256e0:	69bb      	ldr	r3, [r7, #24]
 80256e2:	3303      	adds	r3, #3
 80256e4:	2200      	movs	r2, #0
 80256e6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80256e8:	69bb      	ldr	r3, [r7, #24]
 80256ea:	3304      	adds	r3, #4
 80256ec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80256f0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80256f2:	693a      	ldr	r2, [r7, #16]
 80256f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80256f6:	441a      	add	r2, r3
 80256f8:	4b21      	ldr	r3, [pc, #132]	; (8025780 <f_mkfs+0x848>)
 80256fa:	fba3 1302 	umull	r1, r3, r3, r2
 80256fe:	1ad2      	subs	r2, r2, r3
 8025700:	0852      	lsrs	r2, r2, #1
 8025702:	4413      	add	r3, r2
 8025704:	0b5b      	lsrs	r3, r3, #13
 8025706:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8025708:	69bb      	ldr	r3, [r7, #24]
 802570a:	3305      	adds	r3, #5
 802570c:	22fe      	movs	r2, #254	; 0xfe
 802570e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8025710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025712:	089b      	lsrs	r3, r3, #2
 8025714:	b2da      	uxtb	r2, r3
 8025716:	69bb      	ldr	r3, [r7, #24]
 8025718:	3306      	adds	r3, #6
 802571a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 802571e:	b2d2      	uxtb	r2, r2
 8025720:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8025722:	69bb      	ldr	r3, [r7, #24]
 8025724:	3307      	adds	r3, #7
 8025726:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025728:	b2d2      	uxtb	r2, r2
 802572a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 802572c:	69bb      	ldr	r3, [r7, #24]
 802572e:	3308      	adds	r3, #8
 8025730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025732:	4618      	mov	r0, r3
 8025734:	f7fd fad4 	bl	8022ce0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8025738:	69bb      	ldr	r3, [r7, #24]
 802573a:	330c      	adds	r3, #12
 802573c:	693a      	ldr	r2, [r7, #16]
 802573e:	4611      	mov	r1, r2
 8025740:	4618      	mov	r0, r3
 8025742:	f7fd facd 	bl	8022ce0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8025746:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 802574a:	2301      	movs	r3, #1
 802574c:	2200      	movs	r2, #0
 802574e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025750:	f7fd fa32 	bl	8022bb8 <disk_write>
 8025754:	4603      	mov	r3, r0
 8025756:	2b00      	cmp	r3, #0
 8025758:	d001      	beq.n	802575e <f_mkfs+0x826>
 802575a:	2301      	movs	r3, #1
 802575c:	e00c      	b.n	8025778 <f_mkfs+0x840>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 802575e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8025762:	2200      	movs	r2, #0
 8025764:	2100      	movs	r1, #0
 8025766:	4618      	mov	r0, r3
 8025768:	f7fd fa46 	bl	8022bf8 <disk_ioctl>
 802576c:	4603      	mov	r3, r0
 802576e:	2b00      	cmp	r3, #0
 8025770:	d001      	beq.n	8025776 <f_mkfs+0x83e>
 8025772:	2301      	movs	r3, #1
 8025774:	e000      	b.n	8025778 <f_mkfs+0x840>

	return FR_OK;
 8025776:	2300      	movs	r3, #0
}
 8025778:	4618      	mov	r0, r3
 802577a:	3770      	adds	r7, #112	; 0x70
 802577c:	46bd      	mov	sp, r7
 802577e:	bd80      	pop	{r7, pc}
 8025780:	0515565b 	.word	0x0515565b

08025784 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8025784:	b480      	push	{r7}
 8025786:	b087      	sub	sp, #28
 8025788:	af00      	add	r7, sp, #0
 802578a:	60f8      	str	r0, [r7, #12]
 802578c:	60b9      	str	r1, [r7, #8]
 802578e:	4613      	mov	r3, r2
 8025790:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8025792:	2301      	movs	r3, #1
 8025794:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8025796:	2300      	movs	r3, #0
 8025798:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 802579a:	4b1f      	ldr	r3, [pc, #124]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 802579c:	7a5b      	ldrb	r3, [r3, #9]
 802579e:	b2db      	uxtb	r3, r3
 80257a0:	2b00      	cmp	r3, #0
 80257a2:	d131      	bne.n	8025808 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80257a4:	4b1c      	ldr	r3, [pc, #112]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257a6:	7a5b      	ldrb	r3, [r3, #9]
 80257a8:	b2db      	uxtb	r3, r3
 80257aa:	461a      	mov	r2, r3
 80257ac:	4b1a      	ldr	r3, [pc, #104]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257ae:	2100      	movs	r1, #0
 80257b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80257b2:	4b19      	ldr	r3, [pc, #100]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257b4:	7a5b      	ldrb	r3, [r3, #9]
 80257b6:	b2db      	uxtb	r3, r3
 80257b8:	4a17      	ldr	r2, [pc, #92]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257ba:	009b      	lsls	r3, r3, #2
 80257bc:	4413      	add	r3, r2
 80257be:	68fa      	ldr	r2, [r7, #12]
 80257c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80257c2:	4b15      	ldr	r3, [pc, #84]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257c4:	7a5b      	ldrb	r3, [r3, #9]
 80257c6:	b2db      	uxtb	r3, r3
 80257c8:	461a      	mov	r2, r3
 80257ca:	4b13      	ldr	r3, [pc, #76]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257cc:	4413      	add	r3, r2
 80257ce:	79fa      	ldrb	r2, [r7, #7]
 80257d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80257d2:	4b11      	ldr	r3, [pc, #68]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257d4:	7a5b      	ldrb	r3, [r3, #9]
 80257d6:	b2db      	uxtb	r3, r3
 80257d8:	1c5a      	adds	r2, r3, #1
 80257da:	b2d1      	uxtb	r1, r2
 80257dc:	4a0e      	ldr	r2, [pc, #56]	; (8025818 <FATFS_LinkDriverEx+0x94>)
 80257de:	7251      	strb	r1, [r2, #9]
 80257e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80257e2:	7dbb      	ldrb	r3, [r7, #22]
 80257e4:	3330      	adds	r3, #48	; 0x30
 80257e6:	b2da      	uxtb	r2, r3
 80257e8:	68bb      	ldr	r3, [r7, #8]
 80257ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80257ec:	68bb      	ldr	r3, [r7, #8]
 80257ee:	3301      	adds	r3, #1
 80257f0:	223a      	movs	r2, #58	; 0x3a
 80257f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80257f4:	68bb      	ldr	r3, [r7, #8]
 80257f6:	3302      	adds	r3, #2
 80257f8:	222f      	movs	r2, #47	; 0x2f
 80257fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80257fc:	68bb      	ldr	r3, [r7, #8]
 80257fe:	3303      	adds	r3, #3
 8025800:	2200      	movs	r2, #0
 8025802:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8025804:	2300      	movs	r3, #0
 8025806:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8025808:	7dfb      	ldrb	r3, [r7, #23]
}
 802580a:	4618      	mov	r0, r3
 802580c:	371c      	adds	r7, #28
 802580e:	46bd      	mov	sp, r7
 8025810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025814:	4770      	bx	lr
 8025816:	bf00      	nop
 8025818:	20009b00 	.word	0x20009b00

0802581c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 802581c:	b580      	push	{r7, lr}
 802581e:	b082      	sub	sp, #8
 8025820:	af00      	add	r7, sp, #0
 8025822:	6078      	str	r0, [r7, #4]
 8025824:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8025826:	2200      	movs	r2, #0
 8025828:	6839      	ldr	r1, [r7, #0]
 802582a:	6878      	ldr	r0, [r7, #4]
 802582c:	f7ff ffaa 	bl	8025784 <FATFS_LinkDriverEx>
 8025830:	4603      	mov	r3, r0
}
 8025832:	4618      	mov	r0, r3
 8025834:	3708      	adds	r7, #8
 8025836:	46bd      	mov	sp, r7
 8025838:	bd80      	pop	{r7, pc}
	...

0802583c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802583c:	b580      	push	{r7, lr}
 802583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8025840:	2200      	movs	r2, #0
 8025842:	4912      	ldr	r1, [pc, #72]	; (802588c <MX_USB_DEVICE_Init+0x50>)
 8025844:	4812      	ldr	r0, [pc, #72]	; (8025890 <MX_USB_DEVICE_Init+0x54>)
 8025846:	f7fb fe56 	bl	80214f6 <USBD_Init>
 802584a:	4603      	mov	r3, r0
 802584c:	2b00      	cmp	r3, #0
 802584e:	d001      	beq.n	8025854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8025850:	f7f1 fe60 	bl	8017514 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8025854:	490f      	ldr	r1, [pc, #60]	; (8025894 <MX_USB_DEVICE_Init+0x58>)
 8025856:	480e      	ldr	r0, [pc, #56]	; (8025890 <MX_USB_DEVICE_Init+0x54>)
 8025858:	f7fb fe7d 	bl	8021556 <USBD_RegisterClass>
 802585c:	4603      	mov	r3, r0
 802585e:	2b00      	cmp	r3, #0
 8025860:	d001      	beq.n	8025866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8025862:	f7f1 fe57 	bl	8017514 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8025866:	490c      	ldr	r1, [pc, #48]	; (8025898 <MX_USB_DEVICE_Init+0x5c>)
 8025868:	4809      	ldr	r0, [pc, #36]	; (8025890 <MX_USB_DEVICE_Init+0x54>)
 802586a:	f7fa f927 	bl	801fabc <USBD_MSC_RegisterStorage>
 802586e:	4603      	mov	r3, r0
 8025870:	2b00      	cmp	r3, #0
 8025872:	d001      	beq.n	8025878 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8025874:	f7f1 fe4e 	bl	8017514 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8025878:	4805      	ldr	r0, [pc, #20]	; (8025890 <MX_USB_DEVICE_Init+0x54>)
 802587a:	f7fb fea2 	bl	80215c2 <USBD_Start>
 802587e:	4603      	mov	r3, r0
 8025880:	2b00      	cmp	r3, #0
 8025882:	d001      	beq.n	8025888 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8025884:	f7f1 fe46 	bl	8017514 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8025888:	bf00      	nop
 802588a:	bd80      	pop	{r7, pc}
 802588c:	2000062c 	.word	0x2000062c
 8025890:	20009b0c 	.word	0x20009b0c
 8025894:	20000584 	.word	0x20000584
 8025898:	2000068c 	.word	0x2000068c

0802589c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802589c:	b480      	push	{r7}
 802589e:	b083      	sub	sp, #12
 80258a0:	af00      	add	r7, sp, #0
 80258a2:	4603      	mov	r3, r0
 80258a4:	6039      	str	r1, [r7, #0]
 80258a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80258a8:	683b      	ldr	r3, [r7, #0]
 80258aa:	2212      	movs	r2, #18
 80258ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80258ae:	4b03      	ldr	r3, [pc, #12]	; (80258bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80258b0:	4618      	mov	r0, r3
 80258b2:	370c      	adds	r7, #12
 80258b4:	46bd      	mov	sp, r7
 80258b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258ba:	4770      	bx	lr
 80258bc:	2000064c 	.word	0x2000064c

080258c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80258c0:	b480      	push	{r7}
 80258c2:	b083      	sub	sp, #12
 80258c4:	af00      	add	r7, sp, #0
 80258c6:	4603      	mov	r3, r0
 80258c8:	6039      	str	r1, [r7, #0]
 80258ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80258cc:	683b      	ldr	r3, [r7, #0]
 80258ce:	2204      	movs	r2, #4
 80258d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80258d2:	4b03      	ldr	r3, [pc, #12]	; (80258e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80258d4:	4618      	mov	r0, r3
 80258d6:	370c      	adds	r7, #12
 80258d8:	46bd      	mov	sp, r7
 80258da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258de:	4770      	bx	lr
 80258e0:	2000066c 	.word	0x2000066c

080258e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80258e4:	b580      	push	{r7, lr}
 80258e6:	b082      	sub	sp, #8
 80258e8:	af00      	add	r7, sp, #0
 80258ea:	4603      	mov	r3, r0
 80258ec:	6039      	str	r1, [r7, #0]
 80258ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80258f0:	79fb      	ldrb	r3, [r7, #7]
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	d105      	bne.n	8025902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80258f6:	683a      	ldr	r2, [r7, #0]
 80258f8:	4907      	ldr	r1, [pc, #28]	; (8025918 <USBD_FS_ProductStrDescriptor+0x34>)
 80258fa:	4808      	ldr	r0, [pc, #32]	; (802591c <USBD_FS_ProductStrDescriptor+0x38>)
 80258fc:	f7fd f838 	bl	8022970 <USBD_GetString>
 8025900:	e004      	b.n	802590c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8025902:	683a      	ldr	r2, [r7, #0]
 8025904:	4904      	ldr	r1, [pc, #16]	; (8025918 <USBD_FS_ProductStrDescriptor+0x34>)
 8025906:	4805      	ldr	r0, [pc, #20]	; (802591c <USBD_FS_ProductStrDescriptor+0x38>)
 8025908:	f7fd f832 	bl	8022970 <USBD_GetString>
  }
  return USBD_StrDesc;
 802590c:	4b02      	ldr	r3, [pc, #8]	; (8025918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802590e:	4618      	mov	r0, r3
 8025910:	3708      	adds	r7, #8
 8025912:	46bd      	mov	sp, r7
 8025914:	bd80      	pop	{r7, pc}
 8025916:	bf00      	nop
 8025918:	20009de8 	.word	0x20009de8
 802591c:	08000b20 	.word	0x08000b20

08025920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025920:	b580      	push	{r7, lr}
 8025922:	b082      	sub	sp, #8
 8025924:	af00      	add	r7, sp, #0
 8025926:	4603      	mov	r3, r0
 8025928:	6039      	str	r1, [r7, #0]
 802592a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802592c:	683a      	ldr	r2, [r7, #0]
 802592e:	4904      	ldr	r1, [pc, #16]	; (8025940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8025930:	4804      	ldr	r0, [pc, #16]	; (8025944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8025932:	f7fd f81d 	bl	8022970 <USBD_GetString>
  return USBD_StrDesc;
 8025936:	4b02      	ldr	r3, [pc, #8]	; (8025940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8025938:	4618      	mov	r0, r3
 802593a:	3708      	adds	r7, #8
 802593c:	46bd      	mov	sp, r7
 802593e:	bd80      	pop	{r7, pc}
 8025940:	20009de8 	.word	0x20009de8
 8025944:	08000b34 	.word	0x08000b34

08025948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025948:	b580      	push	{r7, lr}
 802594a:	b082      	sub	sp, #8
 802594c:	af00      	add	r7, sp, #0
 802594e:	4603      	mov	r3, r0
 8025950:	6039      	str	r1, [r7, #0]
 8025952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8025954:	683b      	ldr	r3, [r7, #0]
 8025956:	221a      	movs	r2, #26
 8025958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802595a:	f000 f855 	bl	8025a08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802595e:	4b02      	ldr	r3, [pc, #8]	; (8025968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8025960:	4618      	mov	r0, r3
 8025962:	3708      	adds	r7, #8
 8025964:	46bd      	mov	sp, r7
 8025966:	bd80      	pop	{r7, pc}
 8025968:	20000670 	.word	0x20000670

0802596c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802596c:	b580      	push	{r7, lr}
 802596e:	b082      	sub	sp, #8
 8025970:	af00      	add	r7, sp, #0
 8025972:	4603      	mov	r3, r0
 8025974:	6039      	str	r1, [r7, #0]
 8025976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8025978:	79fb      	ldrb	r3, [r7, #7]
 802597a:	2b00      	cmp	r3, #0
 802597c:	d105      	bne.n	802598a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802597e:	683a      	ldr	r2, [r7, #0]
 8025980:	4907      	ldr	r1, [pc, #28]	; (80259a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8025982:	4808      	ldr	r0, [pc, #32]	; (80259a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8025984:	f7fc fff4 	bl	8022970 <USBD_GetString>
 8025988:	e004      	b.n	8025994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802598a:	683a      	ldr	r2, [r7, #0]
 802598c:	4904      	ldr	r1, [pc, #16]	; (80259a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 802598e:	4805      	ldr	r0, [pc, #20]	; (80259a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8025990:	f7fc ffee 	bl	8022970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8025994:	4b02      	ldr	r3, [pc, #8]	; (80259a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8025996:	4618      	mov	r0, r3
 8025998:	3708      	adds	r7, #8
 802599a:	46bd      	mov	sp, r7
 802599c:	bd80      	pop	{r7, pc}
 802599e:	bf00      	nop
 80259a0:	20009de8 	.word	0x20009de8
 80259a4:	08000b48 	.word	0x08000b48

080259a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80259a8:	b580      	push	{r7, lr}
 80259aa:	b082      	sub	sp, #8
 80259ac:	af00      	add	r7, sp, #0
 80259ae:	4603      	mov	r3, r0
 80259b0:	6039      	str	r1, [r7, #0]
 80259b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80259b4:	79fb      	ldrb	r3, [r7, #7]
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	d105      	bne.n	80259c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80259ba:	683a      	ldr	r2, [r7, #0]
 80259bc:	4907      	ldr	r1, [pc, #28]	; (80259dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80259be:	4808      	ldr	r0, [pc, #32]	; (80259e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80259c0:	f7fc ffd6 	bl	8022970 <USBD_GetString>
 80259c4:	e004      	b.n	80259d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80259c6:	683a      	ldr	r2, [r7, #0]
 80259c8:	4904      	ldr	r1, [pc, #16]	; (80259dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80259ca:	4805      	ldr	r0, [pc, #20]	; (80259e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80259cc:	f7fc ffd0 	bl	8022970 <USBD_GetString>
  }
  return USBD_StrDesc;
 80259d0:	4b02      	ldr	r3, [pc, #8]	; (80259dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80259d2:	4618      	mov	r0, r3
 80259d4:	3708      	adds	r7, #8
 80259d6:	46bd      	mov	sp, r7
 80259d8:	bd80      	pop	{r7, pc}
 80259da:	bf00      	nop
 80259dc:	20009de8 	.word	0x20009de8
 80259e0:	08000b54 	.word	0x08000b54

080259e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80259e4:	b480      	push	{r7}
 80259e6:	b083      	sub	sp, #12
 80259e8:	af00      	add	r7, sp, #0
 80259ea:	4603      	mov	r3, r0
 80259ec:	6039      	str	r1, [r7, #0]
 80259ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80259f0:	683b      	ldr	r3, [r7, #0]
 80259f2:	220c      	movs	r2, #12
 80259f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80259f6:	4b03      	ldr	r3, [pc, #12]	; (8025a04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80259f8:	4618      	mov	r0, r3
 80259fa:	370c      	adds	r7, #12
 80259fc:	46bd      	mov	sp, r7
 80259fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a02:	4770      	bx	lr
 8025a04:	20000660 	.word	0x20000660

08025a08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8025a08:	b580      	push	{r7, lr}
 8025a0a:	b084      	sub	sp, #16
 8025a0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8025a0e:	4b0f      	ldr	r3, [pc, #60]	; (8025a4c <Get_SerialNum+0x44>)
 8025a10:	681b      	ldr	r3, [r3, #0]
 8025a12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8025a14:	4b0e      	ldr	r3, [pc, #56]	; (8025a50 <Get_SerialNum+0x48>)
 8025a16:	681b      	ldr	r3, [r3, #0]
 8025a18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8025a1a:	4b0e      	ldr	r3, [pc, #56]	; (8025a54 <Get_SerialNum+0x4c>)
 8025a1c:	681b      	ldr	r3, [r3, #0]
 8025a1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8025a20:	68fa      	ldr	r2, [r7, #12]
 8025a22:	687b      	ldr	r3, [r7, #4]
 8025a24:	4413      	add	r3, r2
 8025a26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8025a28:	68fb      	ldr	r3, [r7, #12]
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	d009      	beq.n	8025a42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8025a2e:	2208      	movs	r2, #8
 8025a30:	4909      	ldr	r1, [pc, #36]	; (8025a58 <Get_SerialNum+0x50>)
 8025a32:	68f8      	ldr	r0, [r7, #12]
 8025a34:	f000 f814 	bl	8025a60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8025a38:	2204      	movs	r2, #4
 8025a3a:	4908      	ldr	r1, [pc, #32]	; (8025a5c <Get_SerialNum+0x54>)
 8025a3c:	68b8      	ldr	r0, [r7, #8]
 8025a3e:	f000 f80f 	bl	8025a60 <IntToUnicode>
  }
}
 8025a42:	bf00      	nop
 8025a44:	3710      	adds	r7, #16
 8025a46:	46bd      	mov	sp, r7
 8025a48:	bd80      	pop	{r7, pc}
 8025a4a:	bf00      	nop
 8025a4c:	1fff7a10 	.word	0x1fff7a10
 8025a50:	1fff7a14 	.word	0x1fff7a14
 8025a54:	1fff7a18 	.word	0x1fff7a18
 8025a58:	20000672 	.word	0x20000672
 8025a5c:	20000682 	.word	0x20000682

08025a60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8025a60:	b480      	push	{r7}
 8025a62:	b087      	sub	sp, #28
 8025a64:	af00      	add	r7, sp, #0
 8025a66:	60f8      	str	r0, [r7, #12]
 8025a68:	60b9      	str	r1, [r7, #8]
 8025a6a:	4613      	mov	r3, r2
 8025a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8025a6e:	2300      	movs	r3, #0
 8025a70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8025a72:	2300      	movs	r3, #0
 8025a74:	75fb      	strb	r3, [r7, #23]
 8025a76:	e027      	b.n	8025ac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8025a78:	68fb      	ldr	r3, [r7, #12]
 8025a7a:	0f1b      	lsrs	r3, r3, #28
 8025a7c:	2b09      	cmp	r3, #9
 8025a7e:	d80b      	bhi.n	8025a98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8025a80:	68fb      	ldr	r3, [r7, #12]
 8025a82:	0f1b      	lsrs	r3, r3, #28
 8025a84:	b2da      	uxtb	r2, r3
 8025a86:	7dfb      	ldrb	r3, [r7, #23]
 8025a88:	005b      	lsls	r3, r3, #1
 8025a8a:	4619      	mov	r1, r3
 8025a8c:	68bb      	ldr	r3, [r7, #8]
 8025a8e:	440b      	add	r3, r1
 8025a90:	3230      	adds	r2, #48	; 0x30
 8025a92:	b2d2      	uxtb	r2, r2
 8025a94:	701a      	strb	r2, [r3, #0]
 8025a96:	e00a      	b.n	8025aae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8025a98:	68fb      	ldr	r3, [r7, #12]
 8025a9a:	0f1b      	lsrs	r3, r3, #28
 8025a9c:	b2da      	uxtb	r2, r3
 8025a9e:	7dfb      	ldrb	r3, [r7, #23]
 8025aa0:	005b      	lsls	r3, r3, #1
 8025aa2:	4619      	mov	r1, r3
 8025aa4:	68bb      	ldr	r3, [r7, #8]
 8025aa6:	440b      	add	r3, r1
 8025aa8:	3237      	adds	r2, #55	; 0x37
 8025aaa:	b2d2      	uxtb	r2, r2
 8025aac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8025aae:	68fb      	ldr	r3, [r7, #12]
 8025ab0:	011b      	lsls	r3, r3, #4
 8025ab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8025ab4:	7dfb      	ldrb	r3, [r7, #23]
 8025ab6:	005b      	lsls	r3, r3, #1
 8025ab8:	3301      	adds	r3, #1
 8025aba:	68ba      	ldr	r2, [r7, #8]
 8025abc:	4413      	add	r3, r2
 8025abe:	2200      	movs	r2, #0
 8025ac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8025ac2:	7dfb      	ldrb	r3, [r7, #23]
 8025ac4:	3301      	adds	r3, #1
 8025ac6:	75fb      	strb	r3, [r7, #23]
 8025ac8:	7dfa      	ldrb	r2, [r7, #23]
 8025aca:	79fb      	ldrb	r3, [r7, #7]
 8025acc:	429a      	cmp	r2, r3
 8025ace:	d3d3      	bcc.n	8025a78 <IntToUnicode+0x18>
  }
}
 8025ad0:	bf00      	nop
 8025ad2:	bf00      	nop
 8025ad4:	371c      	adds	r7, #28
 8025ad6:	46bd      	mov	sp, r7
 8025ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025adc:	4770      	bx	lr

08025ade <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8025ade:	b480      	push	{r7}
 8025ae0:	b083      	sub	sp, #12
 8025ae2:	af00      	add	r7, sp, #0
 8025ae4:	4603      	mov	r3, r0
 8025ae6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8025ae8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8025aea:	4618      	mov	r0, r3
 8025aec:	370c      	adds	r7, #12
 8025aee:	46bd      	mov	sp, r7
 8025af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025af4:	4770      	bx	lr
	...

08025af8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8025af8:	b480      	push	{r7}
 8025afa:	b085      	sub	sp, #20
 8025afc:	af00      	add	r7, sp, #0
 8025afe:	4603      	mov	r3, r0
 8025b00:	60b9      	str	r1, [r7, #8]
 8025b02:	607a      	str	r2, [r7, #4]
 8025b04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  *block_num  = W25Qx_Para.SUBSECTOR_COUNT;
 8025b06:	4b07      	ldr	r3, [pc, #28]	; (8025b24 <STORAGE_GetCapacity_FS+0x2c>)
 8025b08:	689a      	ldr	r2, [r3, #8]
 8025b0a:	68bb      	ldr	r3, [r7, #8]
 8025b0c:	601a      	str	r2, [r3, #0]
	  *block_size = W25Qx_Para.SUBSECTOR_SIZE;
 8025b0e:	4b05      	ldr	r3, [pc, #20]	; (8025b24 <STORAGE_GetCapacity_FS+0x2c>)
 8025b10:	899a      	ldrh	r2, [r3, #12]
 8025b12:	687b      	ldr	r3, [r7, #4]
 8025b14:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8025b16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8025b18:	4618      	mov	r0, r3
 8025b1a:	3714      	adds	r7, #20
 8025b1c:	46bd      	mov	sp, r7
 8025b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b22:	4770      	bx	lr
 8025b24:	20006a38 	.word	0x20006a38

08025b28 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8025b28:	b480      	push	{r7}
 8025b2a:	b083      	sub	sp, #12
 8025b2c:	af00      	add	r7, sp, #0
 8025b2e:	4603      	mov	r3, r0
 8025b30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8025b32:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8025b34:	4618      	mov	r0, r3
 8025b36:	370c      	adds	r7, #12
 8025b38:	46bd      	mov	sp, r7
 8025b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b3e:	4770      	bx	lr

08025b40 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8025b40:	b480      	push	{r7}
 8025b42:	b083      	sub	sp, #12
 8025b44:	af00      	add	r7, sp, #0
 8025b46:	4603      	mov	r3, r0
 8025b48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8025b4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8025b4c:	4618      	mov	r0, r3
 8025b4e:	370c      	adds	r7, #12
 8025b50:	46bd      	mov	sp, r7
 8025b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b56:	4770      	bx	lr

08025b58 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8025b58:	b580      	push	{r7, lr}
 8025b5a:	b086      	sub	sp, #24
 8025b5c:	af00      	add	r7, sp, #0
 8025b5e:	60b9      	str	r1, [r7, #8]
 8025b60:	607a      	str	r2, [r7, #4]
 8025b62:	461a      	mov	r2, r3
 8025b64:	4603      	mov	r3, r0
 8025b66:	73fb      	strb	r3, [r7, #15]
 8025b68:	4613      	mov	r3, r2
 8025b6a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	short i;
	for(i = 0; i < blk_len; i ++)
 8025b6c:	2300      	movs	r3, #0
 8025b6e:	82fb      	strh	r3, [r7, #22]
 8025b70:	e01a      	b.n	8025ba8 <STORAGE_Read_FS+0x50>
	{
		W25Qx_Read(buf, blk_addr*W25Qx_Para.SUBSECTOR_SIZE, W25Qx_Para.SUBSECTOR_SIZE);
 8025b72:	4b12      	ldr	r3, [pc, #72]	; (8025bbc <STORAGE_Read_FS+0x64>)
 8025b74:	899b      	ldrh	r3, [r3, #12]
 8025b76:	461a      	mov	r2, r3
 8025b78:	687b      	ldr	r3, [r7, #4]
 8025b7a:	fb02 f303 	mul.w	r3, r2, r3
 8025b7e:	4a0f      	ldr	r2, [pc, #60]	; (8025bbc <STORAGE_Read_FS+0x64>)
 8025b80:	8992      	ldrh	r2, [r2, #12]
 8025b82:	4619      	mov	r1, r3
 8025b84:	68b8      	ldr	r0, [r7, #8]
 8025b86:	f7f2 f907 	bl	8017d98 <W25Qx_Read>
		blk_addr ++;
 8025b8a:	687b      	ldr	r3, [r7, #4]
 8025b8c:	3301      	adds	r3, #1
 8025b8e:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 8025b90:	4b0a      	ldr	r3, [pc, #40]	; (8025bbc <STORAGE_Read_FS+0x64>)
 8025b92:	899b      	ldrh	r3, [r3, #12]
 8025b94:	461a      	mov	r2, r3
 8025b96:	68bb      	ldr	r3, [r7, #8]
 8025b98:	4413      	add	r3, r2
 8025b9a:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 8025b9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025ba0:	b29b      	uxth	r3, r3
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	b29b      	uxth	r3, r3
 8025ba6:	82fb      	strh	r3, [r7, #22]
 8025ba8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8025bac:	89bb      	ldrh	r3, [r7, #12]
 8025bae:	429a      	cmp	r2, r3
 8025bb0:	dbdf      	blt.n	8025b72 <STORAGE_Read_FS+0x1a>
	}
  return (USBD_OK);
 8025bb2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8025bb4:	4618      	mov	r0, r3
 8025bb6:	3718      	adds	r7, #24
 8025bb8:	46bd      	mov	sp, r7
 8025bba:	bd80      	pop	{r7, pc}
 8025bbc:	20006a38 	.word	0x20006a38

08025bc0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8025bc0:	b580      	push	{r7, lr}
 8025bc2:	b086      	sub	sp, #24
 8025bc4:	af00      	add	r7, sp, #0
 8025bc6:	60b9      	str	r1, [r7, #8]
 8025bc8:	607a      	str	r2, [r7, #4]
 8025bca:	461a      	mov	r2, r3
 8025bcc:	4603      	mov	r3, r0
 8025bce:	73fb      	strb	r3, [r7, #15]
 8025bd0:	4613      	mov	r3, r2
 8025bd2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	short i;
	for(i = 0; i < blk_len; i ++)
 8025bd4:	2300      	movs	r3, #0
 8025bd6:	82fb      	strh	r3, [r7, #22]
 8025bd8:	e023      	b.n	8025c22 <STORAGE_Write_FS+0x62>
	{
		W25Qx_Erase_Block(blk_addr * W25Qx_Para.SUBSECTOR_SIZE);
 8025bda:	4b17      	ldr	r3, [pc, #92]	; (8025c38 <STORAGE_Write_FS+0x78>)
 8025bdc:	899b      	ldrh	r3, [r3, #12]
 8025bde:	461a      	mov	r2, r3
 8025be0:	687b      	ldr	r3, [r7, #4]
 8025be2:	fb02 f303 	mul.w	r3, r2, r3
 8025be6:	4618      	mov	r0, r3
 8025be8:	f7f2 f9a0 	bl	8017f2c <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buf,blk_addr * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 8025bec:	4b12      	ldr	r3, [pc, #72]	; (8025c38 <STORAGE_Write_FS+0x78>)
 8025bee:	899b      	ldrh	r3, [r3, #12]
 8025bf0:	461a      	mov	r2, r3
 8025bf2:	687b      	ldr	r3, [r7, #4]
 8025bf4:	fb02 f303 	mul.w	r3, r2, r3
 8025bf8:	4a0f      	ldr	r2, [pc, #60]	; (8025c38 <STORAGE_Write_FS+0x78>)
 8025bfa:	8992      	ldrh	r2, [r2, #12]
 8025bfc:	4619      	mov	r1, r3
 8025bfe:	68b8      	ldr	r0, [r7, #8]
 8025c00:	f7f2 f908 	bl	8017e14 <W25Qx_Write>
		blk_addr ++;
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	3301      	adds	r3, #1
 8025c08:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 8025c0a:	4b0b      	ldr	r3, [pc, #44]	; (8025c38 <STORAGE_Write_FS+0x78>)
 8025c0c:	899b      	ldrh	r3, [r3, #12]
 8025c0e:	461a      	mov	r2, r3
 8025c10:	68bb      	ldr	r3, [r7, #8]
 8025c12:	4413      	add	r3, r2
 8025c14:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 8025c16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025c1a:	b29b      	uxth	r3, r3
 8025c1c:	3301      	adds	r3, #1
 8025c1e:	b29b      	uxth	r3, r3
 8025c20:	82fb      	strh	r3, [r7, #22]
 8025c22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8025c26:	89bb      	ldrh	r3, [r7, #12]
 8025c28:	429a      	cmp	r2, r3
 8025c2a:	dbd6      	blt.n	8025bda <STORAGE_Write_FS+0x1a>
	}
	return (USBD_OK);
 8025c2c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8025c2e:	4618      	mov	r0, r3
 8025c30:	3718      	adds	r7, #24
 8025c32:	46bd      	mov	sp, r7
 8025c34:	bd80      	pop	{r7, pc}
 8025c36:	bf00      	nop
 8025c38:	20006a38 	.word	0x20006a38

08025c3c <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8025c3c:	b480      	push	{r7}
 8025c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8025c40:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8025c42:	4618      	mov	r0, r3
 8025c44:	46bd      	mov	sp, r7
 8025c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c4a:	4770      	bx	lr

08025c4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8025c4c:	b580      	push	{r7, lr}
 8025c4e:	b0a0      	sub	sp, #128	; 0x80
 8025c50:	af00      	add	r7, sp, #0
 8025c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025c54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8025c58:	2200      	movs	r2, #0
 8025c5a:	601a      	str	r2, [r3, #0]
 8025c5c:	605a      	str	r2, [r3, #4]
 8025c5e:	609a      	str	r2, [r3, #8]
 8025c60:	60da      	str	r2, [r3, #12]
 8025c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8025c64:	f107 0310 	add.w	r3, r7, #16
 8025c68:	225c      	movs	r2, #92	; 0x5c
 8025c6a:	2100      	movs	r1, #0
 8025c6c:	4618      	mov	r0, r3
 8025c6e:	f000 fbd9 	bl	8026424 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	681b      	ldr	r3, [r3, #0]
 8025c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8025c7a:	d154      	bne.n	8025d26 <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8025c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025c80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 8025c82:	2319      	movs	r3, #25
 8025c84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8025c86:	23c0      	movs	r3, #192	; 0xc0
 8025c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8025c8a:	2302      	movs	r3, #2
 8025c8c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8025c8e:	2304      	movs	r3, #4
 8025c90:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8025c92:	2301      	movs	r3, #1
 8025c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8025c96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8025c9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8025c9c:	f107 0310 	add.w	r3, r7, #16
 8025ca0:	4618      	mov	r0, r3
 8025ca2:	f7f5 fa53 	bl	801b14c <HAL_RCCEx_PeriphCLKConfig>
 8025ca6:	4603      	mov	r3, r0
 8025ca8:	2b00      	cmp	r3, #0
 8025caa:	d001      	beq.n	8025cb0 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8025cac:	f7f1 fc32 	bl	8017514 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025cb0:	2300      	movs	r3, #0
 8025cb2:	60fb      	str	r3, [r7, #12]
 8025cb4:	4b1e      	ldr	r3, [pc, #120]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cb8:	4a1d      	ldr	r2, [pc, #116]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025cba:	f043 0301 	orr.w	r3, r3, #1
 8025cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8025cc0:	4b1b      	ldr	r3, [pc, #108]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cc4:	f003 0301 	and.w	r3, r3, #1
 8025cc8:	60fb      	str	r3, [r7, #12]
 8025cca:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8025ccc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8025cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025cd2:	2302      	movs	r3, #2
 8025cd4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025cd6:	2300      	movs	r3, #0
 8025cd8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025cda:	2303      	movs	r3, #3
 8025cdc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025cde:	230a      	movs	r3, #10
 8025ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025ce2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8025ce6:	4619      	mov	r1, r3
 8025ce8:	4812      	ldr	r0, [pc, #72]	; (8025d34 <HAL_PCD_MspInit+0xe8>)
 8025cea:	f7f3 fc31 	bl	8019550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025cee:	4b10      	ldr	r3, [pc, #64]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025cf2:	4a0f      	ldr	r2, [pc, #60]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8025cfa:	2300      	movs	r3, #0
 8025cfc:	60bb      	str	r3, [r7, #8]
 8025cfe:	4b0c      	ldr	r3, [pc, #48]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d02:	4a0b      	ldr	r2, [pc, #44]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025d08:	6453      	str	r3, [r2, #68]	; 0x44
 8025d0a:	4b09      	ldr	r3, [pc, #36]	; (8025d30 <HAL_PCD_MspInit+0xe4>)
 8025d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025d12:	60bb      	str	r3, [r7, #8]
 8025d14:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8025d16:	2200      	movs	r2, #0
 8025d18:	2100      	movs	r1, #0
 8025d1a:	2043      	movs	r0, #67	; 0x43
 8025d1c:	f7f2 fd57 	bl	80187ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025d20:	2043      	movs	r0, #67	; 0x43
 8025d22:	f7f2 fd70 	bl	8018806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8025d26:	bf00      	nop
 8025d28:	3780      	adds	r7, #128	; 0x80
 8025d2a:	46bd      	mov	sp, r7
 8025d2c:	bd80      	pop	{r7, pc}
 8025d2e:	bf00      	nop
 8025d30:	40023800 	.word	0x40023800
 8025d34:	40020000 	.word	0x40020000

08025d38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025d38:	b580      	push	{r7, lr}
 8025d3a:	b082      	sub	sp, #8
 8025d3c:	af00      	add	r7, sp, #0
 8025d3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8025d40:	687b      	ldr	r3, [r7, #4]
 8025d42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8025d46:	687b      	ldr	r3, [r7, #4]
 8025d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025d4c:	4619      	mov	r1, r3
 8025d4e:	4610      	mov	r0, r2
 8025d50:	f7fb fc84 	bl	802165c <USBD_LL_SetupStage>
}
 8025d54:	bf00      	nop
 8025d56:	3708      	adds	r7, #8
 8025d58:	46bd      	mov	sp, r7
 8025d5a:	bd80      	pop	{r7, pc}

08025d5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025d5c:	b580      	push	{r7, lr}
 8025d5e:	b082      	sub	sp, #8
 8025d60:	af00      	add	r7, sp, #0
 8025d62:	6078      	str	r0, [r7, #4]
 8025d64:	460b      	mov	r3, r1
 8025d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8025d68:	687b      	ldr	r3, [r7, #4]
 8025d6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8025d6e:	78fa      	ldrb	r2, [r7, #3]
 8025d70:	6879      	ldr	r1, [r7, #4]
 8025d72:	4613      	mov	r3, r2
 8025d74:	00db      	lsls	r3, r3, #3
 8025d76:	4413      	add	r3, r2
 8025d78:	009b      	lsls	r3, r3, #2
 8025d7a:	440b      	add	r3, r1
 8025d7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8025d80:	681a      	ldr	r2, [r3, #0]
 8025d82:	78fb      	ldrb	r3, [r7, #3]
 8025d84:	4619      	mov	r1, r3
 8025d86:	f7fb fcbe 	bl	8021706 <USBD_LL_DataOutStage>
}
 8025d8a:	bf00      	nop
 8025d8c:	3708      	adds	r7, #8
 8025d8e:	46bd      	mov	sp, r7
 8025d90:	bd80      	pop	{r7, pc}

08025d92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025d92:	b580      	push	{r7, lr}
 8025d94:	b082      	sub	sp, #8
 8025d96:	af00      	add	r7, sp, #0
 8025d98:	6078      	str	r0, [r7, #4]
 8025d9a:	460b      	mov	r3, r1
 8025d9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8025d9e:	687b      	ldr	r3, [r7, #4]
 8025da0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8025da4:	78fa      	ldrb	r2, [r7, #3]
 8025da6:	6879      	ldr	r1, [r7, #4]
 8025da8:	4613      	mov	r3, r2
 8025daa:	00db      	lsls	r3, r3, #3
 8025dac:	4413      	add	r3, r2
 8025dae:	009b      	lsls	r3, r3, #2
 8025db0:	440b      	add	r3, r1
 8025db2:	334c      	adds	r3, #76	; 0x4c
 8025db4:	681a      	ldr	r2, [r3, #0]
 8025db6:	78fb      	ldrb	r3, [r7, #3]
 8025db8:	4619      	mov	r1, r3
 8025dba:	f7fb fd57 	bl	802186c <USBD_LL_DataInStage>
}
 8025dbe:	bf00      	nop
 8025dc0:	3708      	adds	r7, #8
 8025dc2:	46bd      	mov	sp, r7
 8025dc4:	bd80      	pop	{r7, pc}

08025dc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025dc6:	b580      	push	{r7, lr}
 8025dc8:	b082      	sub	sp, #8
 8025dca:	af00      	add	r7, sp, #0
 8025dcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025dd4:	4618      	mov	r0, r3
 8025dd6:	f7fb fe8b 	bl	8021af0 <USBD_LL_SOF>
}
 8025dda:	bf00      	nop
 8025ddc:	3708      	adds	r7, #8
 8025dde:	46bd      	mov	sp, r7
 8025de0:	bd80      	pop	{r7, pc}

08025de2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025de2:	b580      	push	{r7, lr}
 8025de4:	b084      	sub	sp, #16
 8025de6:	af00      	add	r7, sp, #0
 8025de8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8025dea:	2301      	movs	r3, #1
 8025dec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025dee:	687b      	ldr	r3, [r7, #4]
 8025df0:	68db      	ldr	r3, [r3, #12]
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	d102      	bne.n	8025dfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8025df6:	2300      	movs	r3, #0
 8025df8:	73fb      	strb	r3, [r7, #15]
 8025dfa:	e008      	b.n	8025e0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8025dfc:	687b      	ldr	r3, [r7, #4]
 8025dfe:	68db      	ldr	r3, [r3, #12]
 8025e00:	2b02      	cmp	r3, #2
 8025e02:	d102      	bne.n	8025e0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8025e04:	2301      	movs	r3, #1
 8025e06:	73fb      	strb	r3, [r7, #15]
 8025e08:	e001      	b.n	8025e0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8025e0a:	f7f1 fb83 	bl	8017514 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8025e0e:	687b      	ldr	r3, [r7, #4]
 8025e10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e14:	7bfa      	ldrb	r2, [r7, #15]
 8025e16:	4611      	mov	r1, r2
 8025e18:	4618      	mov	r0, r3
 8025e1a:	f7fb fe2b 	bl	8021a74 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8025e1e:	687b      	ldr	r3, [r7, #4]
 8025e20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e24:	4618      	mov	r0, r3
 8025e26:	f7fb fdd3 	bl	80219d0 <USBD_LL_Reset>
}
 8025e2a:	bf00      	nop
 8025e2c:	3710      	adds	r7, #16
 8025e2e:	46bd      	mov	sp, r7
 8025e30:	bd80      	pop	{r7, pc}
	...

08025e34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e34:	b580      	push	{r7, lr}
 8025e36:	b082      	sub	sp, #8
 8025e38:	af00      	add	r7, sp, #0
 8025e3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8025e3c:	687b      	ldr	r3, [r7, #4]
 8025e3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e42:	4618      	mov	r0, r3
 8025e44:	f7fb fe26 	bl	8021a94 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025e48:	687b      	ldr	r3, [r7, #4]
 8025e4a:	681b      	ldr	r3, [r3, #0]
 8025e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8025e50:	681b      	ldr	r3, [r3, #0]
 8025e52:	687a      	ldr	r2, [r7, #4]
 8025e54:	6812      	ldr	r2, [r2, #0]
 8025e56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8025e5a:	f043 0301 	orr.w	r3, r3, #1
 8025e5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8025e60:	687b      	ldr	r3, [r7, #4]
 8025e62:	6a1b      	ldr	r3, [r3, #32]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d005      	beq.n	8025e74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8025e68:	4b04      	ldr	r3, [pc, #16]	; (8025e7c <HAL_PCD_SuspendCallback+0x48>)
 8025e6a:	691b      	ldr	r3, [r3, #16]
 8025e6c:	4a03      	ldr	r2, [pc, #12]	; (8025e7c <HAL_PCD_SuspendCallback+0x48>)
 8025e6e:	f043 0306 	orr.w	r3, r3, #6
 8025e72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8025e74:	bf00      	nop
 8025e76:	3708      	adds	r7, #8
 8025e78:	46bd      	mov	sp, r7
 8025e7a:	bd80      	pop	{r7, pc}
 8025e7c:	e000ed00 	.word	0xe000ed00

08025e80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e80:	b580      	push	{r7, lr}
 8025e82:	b082      	sub	sp, #8
 8025e84:	af00      	add	r7, sp, #0
 8025e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8025e88:	687b      	ldr	r3, [r7, #4]
 8025e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e8e:	4618      	mov	r0, r3
 8025e90:	f7fb fe16 	bl	8021ac0 <USBD_LL_Resume>
}
 8025e94:	bf00      	nop
 8025e96:	3708      	adds	r7, #8
 8025e98:	46bd      	mov	sp, r7
 8025e9a:	bd80      	pop	{r7, pc}

08025e9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e9c:	b580      	push	{r7, lr}
 8025e9e:	b082      	sub	sp, #8
 8025ea0:	af00      	add	r7, sp, #0
 8025ea2:	6078      	str	r0, [r7, #4]
 8025ea4:	460b      	mov	r3, r1
 8025ea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025eae:	78fa      	ldrb	r2, [r7, #3]
 8025eb0:	4611      	mov	r1, r2
 8025eb2:	4618      	mov	r0, r3
 8025eb4:	f7fb fe6e 	bl	8021b94 <USBD_LL_IsoOUTIncomplete>
}
 8025eb8:	bf00      	nop
 8025eba:	3708      	adds	r7, #8
 8025ebc:	46bd      	mov	sp, r7
 8025ebe:	bd80      	pop	{r7, pc}

08025ec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025ec0:	b580      	push	{r7, lr}
 8025ec2:	b082      	sub	sp, #8
 8025ec4:	af00      	add	r7, sp, #0
 8025ec6:	6078      	str	r0, [r7, #4]
 8025ec8:	460b      	mov	r3, r1
 8025eca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025ecc:	687b      	ldr	r3, [r7, #4]
 8025ece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025ed2:	78fa      	ldrb	r2, [r7, #3]
 8025ed4:	4611      	mov	r1, r2
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f7fb fe2a 	bl	8021b30 <USBD_LL_IsoINIncomplete>
}
 8025edc:	bf00      	nop
 8025ede:	3708      	adds	r7, #8
 8025ee0:	46bd      	mov	sp, r7
 8025ee2:	bd80      	pop	{r7, pc}

08025ee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025ee4:	b580      	push	{r7, lr}
 8025ee6:	b082      	sub	sp, #8
 8025ee8:	af00      	add	r7, sp, #0
 8025eea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8025eec:	687b      	ldr	r3, [r7, #4]
 8025eee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025ef2:	4618      	mov	r0, r3
 8025ef4:	f7fb fe80 	bl	8021bf8 <USBD_LL_DevConnected>
}
 8025ef8:	bf00      	nop
 8025efa:	3708      	adds	r7, #8
 8025efc:	46bd      	mov	sp, r7
 8025efe:	bd80      	pop	{r7, pc}

08025f00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025f00:	b580      	push	{r7, lr}
 8025f02:	b082      	sub	sp, #8
 8025f04:	af00      	add	r7, sp, #0
 8025f06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8025f08:	687b      	ldr	r3, [r7, #4]
 8025f0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025f0e:	4618      	mov	r0, r3
 8025f10:	f7fb fe7d 	bl	8021c0e <USBD_LL_DevDisconnected>
}
 8025f14:	bf00      	nop
 8025f16:	3708      	adds	r7, #8
 8025f18:	46bd      	mov	sp, r7
 8025f1a:	bd80      	pop	{r7, pc}

08025f1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8025f1c:	b580      	push	{r7, lr}
 8025f1e:	b082      	sub	sp, #8
 8025f20:	af00      	add	r7, sp, #0
 8025f22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	781b      	ldrb	r3, [r3, #0]
 8025f28:	2b00      	cmp	r3, #0
 8025f2a:	d13c      	bne.n	8025fa6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8025f2c:	4a20      	ldr	r2, [pc, #128]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f2e:	687b      	ldr	r3, [r7, #4]
 8025f30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	4a1e      	ldr	r2, [pc, #120]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8025f3c:	4b1c      	ldr	r3, [pc, #112]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8025f42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8025f44:	4b1a      	ldr	r3, [pc, #104]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f46:	2206      	movs	r2, #6
 8025f48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8025f4a:	4b19      	ldr	r3, [pc, #100]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f4c:	2202      	movs	r2, #2
 8025f4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025f50:	4b17      	ldr	r3, [pc, #92]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f52:	2200      	movs	r2, #0
 8025f54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8025f56:	4b16      	ldr	r3, [pc, #88]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f58:	2202      	movs	r2, #2
 8025f5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8025f5c:	4b14      	ldr	r3, [pc, #80]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f5e:	2200      	movs	r2, #0
 8025f60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8025f62:	4b13      	ldr	r3, [pc, #76]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f64:	2200      	movs	r2, #0
 8025f66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8025f68:	4b11      	ldr	r3, [pc, #68]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f6a:	2200      	movs	r2, #0
 8025f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8025f6e:	4b10      	ldr	r3, [pc, #64]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f70:	2200      	movs	r2, #0
 8025f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8025f74:	4b0e      	ldr	r3, [pc, #56]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f76:	2200      	movs	r2, #0
 8025f78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8025f7a:	480d      	ldr	r0, [pc, #52]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f7c:	f7f3 fcad 	bl	80198da <HAL_PCD_Init>
 8025f80:	4603      	mov	r3, r0
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d001      	beq.n	8025f8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8025f86:	f7f1 fac5 	bl	8017514 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8025f8a:	2180      	movs	r1, #128	; 0x80
 8025f8c:	4808      	ldr	r0, [pc, #32]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f8e:	f7f4 ff66 	bl	801ae5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8025f92:	2240      	movs	r2, #64	; 0x40
 8025f94:	2100      	movs	r1, #0
 8025f96:	4806      	ldr	r0, [pc, #24]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025f98:	f7f4 ff1a 	bl	801add0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8025f9c:	2280      	movs	r2, #128	; 0x80
 8025f9e:	2101      	movs	r1, #1
 8025fa0:	4803      	ldr	r0, [pc, #12]	; (8025fb0 <USBD_LL_Init+0x94>)
 8025fa2:	f7f4 ff15 	bl	801add0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8025fa6:	2300      	movs	r3, #0
}
 8025fa8:	4618      	mov	r0, r3
 8025faa:	3708      	adds	r7, #8
 8025fac:	46bd      	mov	sp, r7
 8025fae:	bd80      	pop	{r7, pc}
 8025fb0:	20009fe8 	.word	0x20009fe8

08025fb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8025fb4:	b580      	push	{r7, lr}
 8025fb6:	b084      	sub	sp, #16
 8025fb8:	af00      	add	r7, sp, #0
 8025fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8025fc0:	2300      	movs	r3, #0
 8025fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8025fc4:	687b      	ldr	r3, [r7, #4]
 8025fc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8025fca:	4618      	mov	r0, r3
 8025fcc:	f7f3 fda9 	bl	8019b22 <HAL_PCD_Start>
 8025fd0:	4603      	mov	r3, r0
 8025fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8025fd4:	7bfb      	ldrb	r3, [r7, #15]
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	f000 f9b0 	bl	802633c <USBD_Get_USB_Status>
 8025fdc:	4603      	mov	r3, r0
 8025fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8025fe2:	4618      	mov	r0, r3
 8025fe4:	3710      	adds	r7, #16
 8025fe6:	46bd      	mov	sp, r7
 8025fe8:	bd80      	pop	{r7, pc}

08025fea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8025fea:	b580      	push	{r7, lr}
 8025fec:	b084      	sub	sp, #16
 8025fee:	af00      	add	r7, sp, #0
 8025ff0:	6078      	str	r0, [r7, #4]
 8025ff2:	4608      	mov	r0, r1
 8025ff4:	4611      	mov	r1, r2
 8025ff6:	461a      	mov	r2, r3
 8025ff8:	4603      	mov	r3, r0
 8025ffa:	70fb      	strb	r3, [r7, #3]
 8025ffc:	460b      	mov	r3, r1
 8025ffe:	70bb      	strb	r3, [r7, #2]
 8026000:	4613      	mov	r3, r2
 8026002:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026004:	2300      	movs	r3, #0
 8026006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026008:	2300      	movs	r3, #0
 802600a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8026012:	78bb      	ldrb	r3, [r7, #2]
 8026014:	883a      	ldrh	r2, [r7, #0]
 8026016:	78f9      	ldrb	r1, [r7, #3]
 8026018:	f7f4 faa7 	bl	801a56a <HAL_PCD_EP_Open>
 802601c:	4603      	mov	r3, r0
 802601e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026020:	7bfb      	ldrb	r3, [r7, #15]
 8026022:	4618      	mov	r0, r3
 8026024:	f000 f98a 	bl	802633c <USBD_Get_USB_Status>
 8026028:	4603      	mov	r3, r0
 802602a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802602c:	7bbb      	ldrb	r3, [r7, #14]
}
 802602e:	4618      	mov	r0, r3
 8026030:	3710      	adds	r7, #16
 8026032:	46bd      	mov	sp, r7
 8026034:	bd80      	pop	{r7, pc}

08026036 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026036:	b580      	push	{r7, lr}
 8026038:	b084      	sub	sp, #16
 802603a:	af00      	add	r7, sp, #0
 802603c:	6078      	str	r0, [r7, #4]
 802603e:	460b      	mov	r3, r1
 8026040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026042:	2300      	movs	r3, #0
 8026044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026046:	2300      	movs	r3, #0
 8026048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802604a:	687b      	ldr	r3, [r7, #4]
 802604c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026050:	78fa      	ldrb	r2, [r7, #3]
 8026052:	4611      	mov	r1, r2
 8026054:	4618      	mov	r0, r3
 8026056:	f7f4 faf0 	bl	801a63a <HAL_PCD_EP_Close>
 802605a:	4603      	mov	r3, r0
 802605c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802605e:	7bfb      	ldrb	r3, [r7, #15]
 8026060:	4618      	mov	r0, r3
 8026062:	f000 f96b 	bl	802633c <USBD_Get_USB_Status>
 8026066:	4603      	mov	r3, r0
 8026068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802606a:	7bbb      	ldrb	r3, [r7, #14]
}
 802606c:	4618      	mov	r0, r3
 802606e:	3710      	adds	r7, #16
 8026070:	46bd      	mov	sp, r7
 8026072:	bd80      	pop	{r7, pc}

08026074 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026074:	b580      	push	{r7, lr}
 8026076:	b084      	sub	sp, #16
 8026078:	af00      	add	r7, sp, #0
 802607a:	6078      	str	r0, [r7, #4]
 802607c:	460b      	mov	r3, r1
 802607e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026080:	2300      	movs	r3, #0
 8026082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026084:	2300      	movs	r3, #0
 8026086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8026088:	687b      	ldr	r3, [r7, #4]
 802608a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802608e:	78fa      	ldrb	r2, [r7, #3]
 8026090:	4611      	mov	r1, r2
 8026092:	4618      	mov	r0, r3
 8026094:	f7f4 fcb3 	bl	801a9fe <HAL_PCD_EP_Flush>
 8026098:	4603      	mov	r3, r0
 802609a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802609c:	7bfb      	ldrb	r3, [r7, #15]
 802609e:	4618      	mov	r0, r3
 80260a0:	f000 f94c 	bl	802633c <USBD_Get_USB_Status>
 80260a4:	4603      	mov	r3, r0
 80260a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80260a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80260aa:	4618      	mov	r0, r3
 80260ac:	3710      	adds	r7, #16
 80260ae:	46bd      	mov	sp, r7
 80260b0:	bd80      	pop	{r7, pc}

080260b2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80260b2:	b580      	push	{r7, lr}
 80260b4:	b084      	sub	sp, #16
 80260b6:	af00      	add	r7, sp, #0
 80260b8:	6078      	str	r0, [r7, #4]
 80260ba:	460b      	mov	r3, r1
 80260bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80260be:	2300      	movs	r3, #0
 80260c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80260c2:	2300      	movs	r3, #0
 80260c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80260c6:	687b      	ldr	r3, [r7, #4]
 80260c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80260cc:	78fa      	ldrb	r2, [r7, #3]
 80260ce:	4611      	mov	r1, r2
 80260d0:	4618      	mov	r0, r3
 80260d2:	f7f4 fba9 	bl	801a828 <HAL_PCD_EP_SetStall>
 80260d6:	4603      	mov	r3, r0
 80260d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80260da:	7bfb      	ldrb	r3, [r7, #15]
 80260dc:	4618      	mov	r0, r3
 80260de:	f000 f92d 	bl	802633c <USBD_Get_USB_Status>
 80260e2:	4603      	mov	r3, r0
 80260e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80260e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80260e8:	4618      	mov	r0, r3
 80260ea:	3710      	adds	r7, #16
 80260ec:	46bd      	mov	sp, r7
 80260ee:	bd80      	pop	{r7, pc}

080260f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80260f0:	b580      	push	{r7, lr}
 80260f2:	b084      	sub	sp, #16
 80260f4:	af00      	add	r7, sp, #0
 80260f6:	6078      	str	r0, [r7, #4]
 80260f8:	460b      	mov	r3, r1
 80260fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80260fc:	2300      	movs	r3, #0
 80260fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026100:	2300      	movs	r3, #0
 8026102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802610a:	78fa      	ldrb	r2, [r7, #3]
 802610c:	4611      	mov	r1, r2
 802610e:	4618      	mov	r0, r3
 8026110:	f7f4 fbee 	bl	801a8f0 <HAL_PCD_EP_ClrStall>
 8026114:	4603      	mov	r3, r0
 8026116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026118:	7bfb      	ldrb	r3, [r7, #15]
 802611a:	4618      	mov	r0, r3
 802611c:	f000 f90e 	bl	802633c <USBD_Get_USB_Status>
 8026120:	4603      	mov	r3, r0
 8026122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026124:	7bbb      	ldrb	r3, [r7, #14]
}
 8026126:	4618      	mov	r0, r3
 8026128:	3710      	adds	r7, #16
 802612a:	46bd      	mov	sp, r7
 802612c:	bd80      	pop	{r7, pc}

0802612e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802612e:	b480      	push	{r7}
 8026130:	b085      	sub	sp, #20
 8026132:	af00      	add	r7, sp, #0
 8026134:	6078      	str	r0, [r7, #4]
 8026136:	460b      	mov	r3, r1
 8026138:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802613a:	687b      	ldr	r3, [r7, #4]
 802613c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026140:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8026142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8026146:	2b00      	cmp	r3, #0
 8026148:	da0b      	bge.n	8026162 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802614a:	78fb      	ldrb	r3, [r7, #3]
 802614c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8026150:	68f9      	ldr	r1, [r7, #12]
 8026152:	4613      	mov	r3, r2
 8026154:	00db      	lsls	r3, r3, #3
 8026156:	4413      	add	r3, r2
 8026158:	009b      	lsls	r3, r3, #2
 802615a:	440b      	add	r3, r1
 802615c:	333e      	adds	r3, #62	; 0x3e
 802615e:	781b      	ldrb	r3, [r3, #0]
 8026160:	e00b      	b.n	802617a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8026162:	78fb      	ldrb	r3, [r7, #3]
 8026164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8026168:	68f9      	ldr	r1, [r7, #12]
 802616a:	4613      	mov	r3, r2
 802616c:	00db      	lsls	r3, r3, #3
 802616e:	4413      	add	r3, r2
 8026170:	009b      	lsls	r3, r3, #2
 8026172:	440b      	add	r3, r1
 8026174:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8026178:	781b      	ldrb	r3, [r3, #0]
  }
}
 802617a:	4618      	mov	r0, r3
 802617c:	3714      	adds	r7, #20
 802617e:	46bd      	mov	sp, r7
 8026180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026184:	4770      	bx	lr

08026186 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8026186:	b580      	push	{r7, lr}
 8026188:	b084      	sub	sp, #16
 802618a:	af00      	add	r7, sp, #0
 802618c:	6078      	str	r0, [r7, #4]
 802618e:	460b      	mov	r3, r1
 8026190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026192:	2300      	movs	r3, #0
 8026194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026196:	2300      	movs	r3, #0
 8026198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80261a0:	78fa      	ldrb	r2, [r7, #3]
 80261a2:	4611      	mov	r1, r2
 80261a4:	4618      	mov	r0, r3
 80261a6:	f7f4 f9bb 	bl	801a520 <HAL_PCD_SetAddress>
 80261aa:	4603      	mov	r3, r0
 80261ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80261ae:	7bfb      	ldrb	r3, [r7, #15]
 80261b0:	4618      	mov	r0, r3
 80261b2:	f000 f8c3 	bl	802633c <USBD_Get_USB_Status>
 80261b6:	4603      	mov	r3, r0
 80261b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80261ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80261bc:	4618      	mov	r0, r3
 80261be:	3710      	adds	r7, #16
 80261c0:	46bd      	mov	sp, r7
 80261c2:	bd80      	pop	{r7, pc}

080261c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80261c4:	b580      	push	{r7, lr}
 80261c6:	b086      	sub	sp, #24
 80261c8:	af00      	add	r7, sp, #0
 80261ca:	60f8      	str	r0, [r7, #12]
 80261cc:	607a      	str	r2, [r7, #4]
 80261ce:	603b      	str	r3, [r7, #0]
 80261d0:	460b      	mov	r3, r1
 80261d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80261d4:	2300      	movs	r3, #0
 80261d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80261d8:	2300      	movs	r3, #0
 80261da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80261dc:	68fb      	ldr	r3, [r7, #12]
 80261de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80261e2:	7af9      	ldrb	r1, [r7, #11]
 80261e4:	683b      	ldr	r3, [r7, #0]
 80261e6:	687a      	ldr	r2, [r7, #4]
 80261e8:	f7f4 fad4 	bl	801a794 <HAL_PCD_EP_Transmit>
 80261ec:	4603      	mov	r3, r0
 80261ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80261f0:	7dfb      	ldrb	r3, [r7, #23]
 80261f2:	4618      	mov	r0, r3
 80261f4:	f000 f8a2 	bl	802633c <USBD_Get_USB_Status>
 80261f8:	4603      	mov	r3, r0
 80261fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80261fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80261fe:	4618      	mov	r0, r3
 8026200:	3718      	adds	r7, #24
 8026202:	46bd      	mov	sp, r7
 8026204:	bd80      	pop	{r7, pc}

08026206 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8026206:	b580      	push	{r7, lr}
 8026208:	b086      	sub	sp, #24
 802620a:	af00      	add	r7, sp, #0
 802620c:	60f8      	str	r0, [r7, #12]
 802620e:	607a      	str	r2, [r7, #4]
 8026210:	603b      	str	r3, [r7, #0]
 8026212:	460b      	mov	r3, r1
 8026214:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026216:	2300      	movs	r3, #0
 8026218:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802621a:	2300      	movs	r3, #0
 802621c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802621e:	68fb      	ldr	r3, [r7, #12]
 8026220:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8026224:	7af9      	ldrb	r1, [r7, #11]
 8026226:	683b      	ldr	r3, [r7, #0]
 8026228:	687a      	ldr	r2, [r7, #4]
 802622a:	f7f4 fa50 	bl	801a6ce <HAL_PCD_EP_Receive>
 802622e:	4603      	mov	r3, r0
 8026230:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026232:	7dfb      	ldrb	r3, [r7, #23]
 8026234:	4618      	mov	r0, r3
 8026236:	f000 f881 	bl	802633c <USBD_Get_USB_Status>
 802623a:	4603      	mov	r3, r0
 802623c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802623e:	7dbb      	ldrb	r3, [r7, #22]
}
 8026240:	4618      	mov	r0, r3
 8026242:	3718      	adds	r7, #24
 8026244:	46bd      	mov	sp, r7
 8026246:	bd80      	pop	{r7, pc}

08026248 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026248:	b580      	push	{r7, lr}
 802624a:	b082      	sub	sp, #8
 802624c:	af00      	add	r7, sp, #0
 802624e:	6078      	str	r0, [r7, #4]
 8026250:	460b      	mov	r3, r1
 8026252:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802625a:	78fa      	ldrb	r2, [r7, #3]
 802625c:	4611      	mov	r1, r2
 802625e:	4618      	mov	r0, r3
 8026260:	f7f4 fa80 	bl	801a764 <HAL_PCD_EP_GetRxCount>
 8026264:	4603      	mov	r3, r0
}
 8026266:	4618      	mov	r0, r3
 8026268:	3708      	adds	r7, #8
 802626a:	46bd      	mov	sp, r7
 802626c:	bd80      	pop	{r7, pc}
	...

08026270 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8026270:	b580      	push	{r7, lr}
 8026272:	b082      	sub	sp, #8
 8026274:	af00      	add	r7, sp, #0
 8026276:	6078      	str	r0, [r7, #4]
 8026278:	460b      	mov	r3, r1
 802627a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 802627c:	78fb      	ldrb	r3, [r7, #3]
 802627e:	2b00      	cmp	r3, #0
 8026280:	d002      	beq.n	8026288 <HAL_PCDEx_LPM_Callback+0x18>
 8026282:	2b01      	cmp	r3, #1
 8026284:	d01f      	beq.n	80262c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8026286:	e03b      	b.n	8026300 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	6a1b      	ldr	r3, [r3, #32]
 802628c:	2b00      	cmp	r3, #0
 802628e:	d007      	beq.n	80262a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8026290:	f7f0 fcd6 	bl	8016c40 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8026294:	4b1c      	ldr	r3, [pc, #112]	; (8026308 <HAL_PCDEx_LPM_Callback+0x98>)
 8026296:	691b      	ldr	r3, [r3, #16]
 8026298:	4a1b      	ldr	r2, [pc, #108]	; (8026308 <HAL_PCDEx_LPM_Callback+0x98>)
 802629a:	f023 0306 	bic.w	r3, r3, #6
 802629e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80262a0:	687b      	ldr	r3, [r7, #4]
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80262a8:	681b      	ldr	r3, [r3, #0]
 80262aa:	687a      	ldr	r2, [r7, #4]
 80262ac:	6812      	ldr	r2, [r2, #0]
 80262ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80262b2:	f023 0301 	bic.w	r3, r3, #1
 80262b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80262b8:	687b      	ldr	r3, [r7, #4]
 80262ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80262be:	4618      	mov	r0, r3
 80262c0:	f7fb fbfe 	bl	8021ac0 <USBD_LL_Resume>
    break;
 80262c4:	e01c      	b.n	8026300 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80262c6:	687b      	ldr	r3, [r7, #4]
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80262ce:	681b      	ldr	r3, [r3, #0]
 80262d0:	687a      	ldr	r2, [r7, #4]
 80262d2:	6812      	ldr	r2, [r2, #0]
 80262d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80262d8:	f043 0301 	orr.w	r3, r3, #1
 80262dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80262e4:	4618      	mov	r0, r3
 80262e6:	f7fb fbd5 	bl	8021a94 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80262ea:	687b      	ldr	r3, [r7, #4]
 80262ec:	6a1b      	ldr	r3, [r3, #32]
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d005      	beq.n	80262fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80262f2:	4b05      	ldr	r3, [pc, #20]	; (8026308 <HAL_PCDEx_LPM_Callback+0x98>)
 80262f4:	691b      	ldr	r3, [r3, #16]
 80262f6:	4a04      	ldr	r2, [pc, #16]	; (8026308 <HAL_PCDEx_LPM_Callback+0x98>)
 80262f8:	f043 0306 	orr.w	r3, r3, #6
 80262fc:	6113      	str	r3, [r2, #16]
    break;
 80262fe:	bf00      	nop
}
 8026300:	bf00      	nop
 8026302:	3708      	adds	r7, #8
 8026304:	46bd      	mov	sp, r7
 8026306:	bd80      	pop	{r7, pc}
 8026308:	e000ed00 	.word	0xe000ed00

0802630c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 802630c:	b480      	push	{r7}
 802630e:	b083      	sub	sp, #12
 8026310:	af00      	add	r7, sp, #0
 8026312:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8026314:	4b03      	ldr	r3, [pc, #12]	; (8026324 <USBD_static_malloc+0x18>)
}
 8026316:	4618      	mov	r0, r3
 8026318:	370c      	adds	r7, #12
 802631a:	46bd      	mov	sp, r7
 802631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026320:	4770      	bx	lr
 8026322:	bf00      	nop
 8026324:	2000a4f4 	.word	0x2000a4f4

08026328 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8026328:	b480      	push	{r7}
 802632a:	b083      	sub	sp, #12
 802632c:	af00      	add	r7, sp, #0
 802632e:	6078      	str	r0, [r7, #4]

}
 8026330:	bf00      	nop
 8026332:	370c      	adds	r7, #12
 8026334:	46bd      	mov	sp, r7
 8026336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802633a:	4770      	bx	lr

0802633c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802633c:	b480      	push	{r7}
 802633e:	b085      	sub	sp, #20
 8026340:	af00      	add	r7, sp, #0
 8026342:	4603      	mov	r3, r0
 8026344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026346:	2300      	movs	r3, #0
 8026348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802634a:	79fb      	ldrb	r3, [r7, #7]
 802634c:	2b03      	cmp	r3, #3
 802634e:	d817      	bhi.n	8026380 <USBD_Get_USB_Status+0x44>
 8026350:	a201      	add	r2, pc, #4	; (adr r2, 8026358 <USBD_Get_USB_Status+0x1c>)
 8026352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026356:	bf00      	nop
 8026358:	08026369 	.word	0x08026369
 802635c:	0802636f 	.word	0x0802636f
 8026360:	08026375 	.word	0x08026375
 8026364:	0802637b 	.word	0x0802637b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8026368:	2300      	movs	r3, #0
 802636a:	73fb      	strb	r3, [r7, #15]
    break;
 802636c:	e00b      	b.n	8026386 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802636e:	2303      	movs	r3, #3
 8026370:	73fb      	strb	r3, [r7, #15]
    break;
 8026372:	e008      	b.n	8026386 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8026374:	2301      	movs	r3, #1
 8026376:	73fb      	strb	r3, [r7, #15]
    break;
 8026378:	e005      	b.n	8026386 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802637a:	2303      	movs	r3, #3
 802637c:	73fb      	strb	r3, [r7, #15]
    break;
 802637e:	e002      	b.n	8026386 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8026380:	2303      	movs	r3, #3
 8026382:	73fb      	strb	r3, [r7, #15]
    break;
 8026384:	bf00      	nop
  }
  return usb_status;
 8026386:	7bfb      	ldrb	r3, [r7, #15]
}
 8026388:	4618      	mov	r0, r3
 802638a:	3714      	adds	r7, #20
 802638c:	46bd      	mov	sp, r7
 802638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026392:	4770      	bx	lr

08026394 <__errno>:
 8026394:	4b01      	ldr	r3, [pc, #4]	; (802639c <__errno+0x8>)
 8026396:	6818      	ldr	r0, [r3, #0]
 8026398:	4770      	bx	lr
 802639a:	bf00      	nop
 802639c:	200006ac 	.word	0x200006ac

080263a0 <__libc_init_array>:
 80263a0:	b570      	push	{r4, r5, r6, lr}
 80263a2:	4d0d      	ldr	r5, [pc, #52]	; (80263d8 <__libc_init_array+0x38>)
 80263a4:	4c0d      	ldr	r4, [pc, #52]	; (80263dc <__libc_init_array+0x3c>)
 80263a6:	1b64      	subs	r4, r4, r5
 80263a8:	10a4      	asrs	r4, r4, #2
 80263aa:	2600      	movs	r6, #0
 80263ac:	42a6      	cmp	r6, r4
 80263ae:	d109      	bne.n	80263c4 <__libc_init_array+0x24>
 80263b0:	4d0b      	ldr	r5, [pc, #44]	; (80263e0 <__libc_init_array+0x40>)
 80263b2:	4c0c      	ldr	r4, [pc, #48]	; (80263e4 <__libc_init_array+0x44>)
 80263b4:	f000 fd0e 	bl	8026dd4 <_init>
 80263b8:	1b64      	subs	r4, r4, r5
 80263ba:	10a4      	asrs	r4, r4, #2
 80263bc:	2600      	movs	r6, #0
 80263be:	42a6      	cmp	r6, r4
 80263c0:	d105      	bne.n	80263ce <__libc_init_array+0x2e>
 80263c2:	bd70      	pop	{r4, r5, r6, pc}
 80263c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80263c8:	4798      	blx	r3
 80263ca:	3601      	adds	r6, #1
 80263cc:	e7ee      	b.n	80263ac <__libc_init_array+0xc>
 80263ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80263d2:	4798      	blx	r3
 80263d4:	3601      	adds	r6, #1
 80263d6:	e7f2      	b.n	80263be <__libc_init_array+0x1e>
 80263d8:	08026df4 	.word	0x08026df4
 80263dc:	08026df4 	.word	0x08026df4
 80263e0:	08026df4 	.word	0x08026df4
 80263e4:	08026df8 	.word	0x08026df8

080263e8 <malloc>:
 80263e8:	4b02      	ldr	r3, [pc, #8]	; (80263f4 <malloc+0xc>)
 80263ea:	4601      	mov	r1, r0
 80263ec:	6818      	ldr	r0, [r3, #0]
 80263ee:	f000 b88d 	b.w	802650c <_malloc_r>
 80263f2:	bf00      	nop
 80263f4:	200006ac 	.word	0x200006ac

080263f8 <free>:
 80263f8:	4b02      	ldr	r3, [pc, #8]	; (8026404 <free+0xc>)
 80263fa:	4601      	mov	r1, r0
 80263fc:	6818      	ldr	r0, [r3, #0]
 80263fe:	f000 b819 	b.w	8026434 <_free_r>
 8026402:	bf00      	nop
 8026404:	200006ac 	.word	0x200006ac

08026408 <memcpy>:
 8026408:	440a      	add	r2, r1
 802640a:	4291      	cmp	r1, r2
 802640c:	f100 33ff 	add.w	r3, r0, #4294967295
 8026410:	d100      	bne.n	8026414 <memcpy+0xc>
 8026412:	4770      	bx	lr
 8026414:	b510      	push	{r4, lr}
 8026416:	f811 4b01 	ldrb.w	r4, [r1], #1
 802641a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802641e:	4291      	cmp	r1, r2
 8026420:	d1f9      	bne.n	8026416 <memcpy+0xe>
 8026422:	bd10      	pop	{r4, pc}

08026424 <memset>:
 8026424:	4402      	add	r2, r0
 8026426:	4603      	mov	r3, r0
 8026428:	4293      	cmp	r3, r2
 802642a:	d100      	bne.n	802642e <memset+0xa>
 802642c:	4770      	bx	lr
 802642e:	f803 1b01 	strb.w	r1, [r3], #1
 8026432:	e7f9      	b.n	8026428 <memset+0x4>

08026434 <_free_r>:
 8026434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026436:	2900      	cmp	r1, #0
 8026438:	d044      	beq.n	80264c4 <_free_r+0x90>
 802643a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802643e:	9001      	str	r0, [sp, #4]
 8026440:	2b00      	cmp	r3, #0
 8026442:	f1a1 0404 	sub.w	r4, r1, #4
 8026446:	bfb8      	it	lt
 8026448:	18e4      	addlt	r4, r4, r3
 802644a:	f000 f8e3 	bl	8026614 <__malloc_lock>
 802644e:	4a1e      	ldr	r2, [pc, #120]	; (80264c8 <_free_r+0x94>)
 8026450:	9801      	ldr	r0, [sp, #4]
 8026452:	6813      	ldr	r3, [r2, #0]
 8026454:	b933      	cbnz	r3, 8026464 <_free_r+0x30>
 8026456:	6063      	str	r3, [r4, #4]
 8026458:	6014      	str	r4, [r2, #0]
 802645a:	b003      	add	sp, #12
 802645c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026460:	f000 b8de 	b.w	8026620 <__malloc_unlock>
 8026464:	42a3      	cmp	r3, r4
 8026466:	d908      	bls.n	802647a <_free_r+0x46>
 8026468:	6825      	ldr	r5, [r4, #0]
 802646a:	1961      	adds	r1, r4, r5
 802646c:	428b      	cmp	r3, r1
 802646e:	bf01      	itttt	eq
 8026470:	6819      	ldreq	r1, [r3, #0]
 8026472:	685b      	ldreq	r3, [r3, #4]
 8026474:	1949      	addeq	r1, r1, r5
 8026476:	6021      	streq	r1, [r4, #0]
 8026478:	e7ed      	b.n	8026456 <_free_r+0x22>
 802647a:	461a      	mov	r2, r3
 802647c:	685b      	ldr	r3, [r3, #4]
 802647e:	b10b      	cbz	r3, 8026484 <_free_r+0x50>
 8026480:	42a3      	cmp	r3, r4
 8026482:	d9fa      	bls.n	802647a <_free_r+0x46>
 8026484:	6811      	ldr	r1, [r2, #0]
 8026486:	1855      	adds	r5, r2, r1
 8026488:	42a5      	cmp	r5, r4
 802648a:	d10b      	bne.n	80264a4 <_free_r+0x70>
 802648c:	6824      	ldr	r4, [r4, #0]
 802648e:	4421      	add	r1, r4
 8026490:	1854      	adds	r4, r2, r1
 8026492:	42a3      	cmp	r3, r4
 8026494:	6011      	str	r1, [r2, #0]
 8026496:	d1e0      	bne.n	802645a <_free_r+0x26>
 8026498:	681c      	ldr	r4, [r3, #0]
 802649a:	685b      	ldr	r3, [r3, #4]
 802649c:	6053      	str	r3, [r2, #4]
 802649e:	4421      	add	r1, r4
 80264a0:	6011      	str	r1, [r2, #0]
 80264a2:	e7da      	b.n	802645a <_free_r+0x26>
 80264a4:	d902      	bls.n	80264ac <_free_r+0x78>
 80264a6:	230c      	movs	r3, #12
 80264a8:	6003      	str	r3, [r0, #0]
 80264aa:	e7d6      	b.n	802645a <_free_r+0x26>
 80264ac:	6825      	ldr	r5, [r4, #0]
 80264ae:	1961      	adds	r1, r4, r5
 80264b0:	428b      	cmp	r3, r1
 80264b2:	bf04      	itt	eq
 80264b4:	6819      	ldreq	r1, [r3, #0]
 80264b6:	685b      	ldreq	r3, [r3, #4]
 80264b8:	6063      	str	r3, [r4, #4]
 80264ba:	bf04      	itt	eq
 80264bc:	1949      	addeq	r1, r1, r5
 80264be:	6021      	streq	r1, [r4, #0]
 80264c0:	6054      	str	r4, [r2, #4]
 80264c2:	e7ca      	b.n	802645a <_free_r+0x26>
 80264c4:	b003      	add	sp, #12
 80264c6:	bd30      	pop	{r4, r5, pc}
 80264c8:	2000a76c 	.word	0x2000a76c

080264cc <sbrk_aligned>:
 80264cc:	b570      	push	{r4, r5, r6, lr}
 80264ce:	4e0e      	ldr	r6, [pc, #56]	; (8026508 <sbrk_aligned+0x3c>)
 80264d0:	460c      	mov	r4, r1
 80264d2:	6831      	ldr	r1, [r6, #0]
 80264d4:	4605      	mov	r5, r0
 80264d6:	b911      	cbnz	r1, 80264de <sbrk_aligned+0x12>
 80264d8:	f000 f88c 	bl	80265f4 <_sbrk_r>
 80264dc:	6030      	str	r0, [r6, #0]
 80264de:	4621      	mov	r1, r4
 80264e0:	4628      	mov	r0, r5
 80264e2:	f000 f887 	bl	80265f4 <_sbrk_r>
 80264e6:	1c43      	adds	r3, r0, #1
 80264e8:	d00a      	beq.n	8026500 <sbrk_aligned+0x34>
 80264ea:	1cc4      	adds	r4, r0, #3
 80264ec:	f024 0403 	bic.w	r4, r4, #3
 80264f0:	42a0      	cmp	r0, r4
 80264f2:	d007      	beq.n	8026504 <sbrk_aligned+0x38>
 80264f4:	1a21      	subs	r1, r4, r0
 80264f6:	4628      	mov	r0, r5
 80264f8:	f000 f87c 	bl	80265f4 <_sbrk_r>
 80264fc:	3001      	adds	r0, #1
 80264fe:	d101      	bne.n	8026504 <sbrk_aligned+0x38>
 8026500:	f04f 34ff 	mov.w	r4, #4294967295
 8026504:	4620      	mov	r0, r4
 8026506:	bd70      	pop	{r4, r5, r6, pc}
 8026508:	2000a770 	.word	0x2000a770

0802650c <_malloc_r>:
 802650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026510:	1ccd      	adds	r5, r1, #3
 8026512:	f025 0503 	bic.w	r5, r5, #3
 8026516:	3508      	adds	r5, #8
 8026518:	2d0c      	cmp	r5, #12
 802651a:	bf38      	it	cc
 802651c:	250c      	movcc	r5, #12
 802651e:	2d00      	cmp	r5, #0
 8026520:	4607      	mov	r7, r0
 8026522:	db01      	blt.n	8026528 <_malloc_r+0x1c>
 8026524:	42a9      	cmp	r1, r5
 8026526:	d905      	bls.n	8026534 <_malloc_r+0x28>
 8026528:	230c      	movs	r3, #12
 802652a:	603b      	str	r3, [r7, #0]
 802652c:	2600      	movs	r6, #0
 802652e:	4630      	mov	r0, r6
 8026530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026534:	4e2e      	ldr	r6, [pc, #184]	; (80265f0 <_malloc_r+0xe4>)
 8026536:	f000 f86d 	bl	8026614 <__malloc_lock>
 802653a:	6833      	ldr	r3, [r6, #0]
 802653c:	461c      	mov	r4, r3
 802653e:	bb34      	cbnz	r4, 802658e <_malloc_r+0x82>
 8026540:	4629      	mov	r1, r5
 8026542:	4638      	mov	r0, r7
 8026544:	f7ff ffc2 	bl	80264cc <sbrk_aligned>
 8026548:	1c43      	adds	r3, r0, #1
 802654a:	4604      	mov	r4, r0
 802654c:	d14d      	bne.n	80265ea <_malloc_r+0xde>
 802654e:	6834      	ldr	r4, [r6, #0]
 8026550:	4626      	mov	r6, r4
 8026552:	2e00      	cmp	r6, #0
 8026554:	d140      	bne.n	80265d8 <_malloc_r+0xcc>
 8026556:	6823      	ldr	r3, [r4, #0]
 8026558:	4631      	mov	r1, r6
 802655a:	4638      	mov	r0, r7
 802655c:	eb04 0803 	add.w	r8, r4, r3
 8026560:	f000 f848 	bl	80265f4 <_sbrk_r>
 8026564:	4580      	cmp	r8, r0
 8026566:	d13a      	bne.n	80265de <_malloc_r+0xd2>
 8026568:	6821      	ldr	r1, [r4, #0]
 802656a:	3503      	adds	r5, #3
 802656c:	1a6d      	subs	r5, r5, r1
 802656e:	f025 0503 	bic.w	r5, r5, #3
 8026572:	3508      	adds	r5, #8
 8026574:	2d0c      	cmp	r5, #12
 8026576:	bf38      	it	cc
 8026578:	250c      	movcc	r5, #12
 802657a:	4629      	mov	r1, r5
 802657c:	4638      	mov	r0, r7
 802657e:	f7ff ffa5 	bl	80264cc <sbrk_aligned>
 8026582:	3001      	adds	r0, #1
 8026584:	d02b      	beq.n	80265de <_malloc_r+0xd2>
 8026586:	6823      	ldr	r3, [r4, #0]
 8026588:	442b      	add	r3, r5
 802658a:	6023      	str	r3, [r4, #0]
 802658c:	e00e      	b.n	80265ac <_malloc_r+0xa0>
 802658e:	6822      	ldr	r2, [r4, #0]
 8026590:	1b52      	subs	r2, r2, r5
 8026592:	d41e      	bmi.n	80265d2 <_malloc_r+0xc6>
 8026594:	2a0b      	cmp	r2, #11
 8026596:	d916      	bls.n	80265c6 <_malloc_r+0xba>
 8026598:	1961      	adds	r1, r4, r5
 802659a:	42a3      	cmp	r3, r4
 802659c:	6025      	str	r5, [r4, #0]
 802659e:	bf18      	it	ne
 80265a0:	6059      	strne	r1, [r3, #4]
 80265a2:	6863      	ldr	r3, [r4, #4]
 80265a4:	bf08      	it	eq
 80265a6:	6031      	streq	r1, [r6, #0]
 80265a8:	5162      	str	r2, [r4, r5]
 80265aa:	604b      	str	r3, [r1, #4]
 80265ac:	4638      	mov	r0, r7
 80265ae:	f104 060b 	add.w	r6, r4, #11
 80265b2:	f000 f835 	bl	8026620 <__malloc_unlock>
 80265b6:	f026 0607 	bic.w	r6, r6, #7
 80265ba:	1d23      	adds	r3, r4, #4
 80265bc:	1af2      	subs	r2, r6, r3
 80265be:	d0b6      	beq.n	802652e <_malloc_r+0x22>
 80265c0:	1b9b      	subs	r3, r3, r6
 80265c2:	50a3      	str	r3, [r4, r2]
 80265c4:	e7b3      	b.n	802652e <_malloc_r+0x22>
 80265c6:	6862      	ldr	r2, [r4, #4]
 80265c8:	42a3      	cmp	r3, r4
 80265ca:	bf0c      	ite	eq
 80265cc:	6032      	streq	r2, [r6, #0]
 80265ce:	605a      	strne	r2, [r3, #4]
 80265d0:	e7ec      	b.n	80265ac <_malloc_r+0xa0>
 80265d2:	4623      	mov	r3, r4
 80265d4:	6864      	ldr	r4, [r4, #4]
 80265d6:	e7b2      	b.n	802653e <_malloc_r+0x32>
 80265d8:	4634      	mov	r4, r6
 80265da:	6876      	ldr	r6, [r6, #4]
 80265dc:	e7b9      	b.n	8026552 <_malloc_r+0x46>
 80265de:	230c      	movs	r3, #12
 80265e0:	603b      	str	r3, [r7, #0]
 80265e2:	4638      	mov	r0, r7
 80265e4:	f000 f81c 	bl	8026620 <__malloc_unlock>
 80265e8:	e7a1      	b.n	802652e <_malloc_r+0x22>
 80265ea:	6025      	str	r5, [r4, #0]
 80265ec:	e7de      	b.n	80265ac <_malloc_r+0xa0>
 80265ee:	bf00      	nop
 80265f0:	2000a76c 	.word	0x2000a76c

080265f4 <_sbrk_r>:
 80265f4:	b538      	push	{r3, r4, r5, lr}
 80265f6:	4d06      	ldr	r5, [pc, #24]	; (8026610 <_sbrk_r+0x1c>)
 80265f8:	2300      	movs	r3, #0
 80265fa:	4604      	mov	r4, r0
 80265fc:	4608      	mov	r0, r1
 80265fe:	602b      	str	r3, [r5, #0]
 8026600:	f7f1 fa38 	bl	8017a74 <_sbrk>
 8026604:	1c43      	adds	r3, r0, #1
 8026606:	d102      	bne.n	802660e <_sbrk_r+0x1a>
 8026608:	682b      	ldr	r3, [r5, #0]
 802660a:	b103      	cbz	r3, 802660e <_sbrk_r+0x1a>
 802660c:	6023      	str	r3, [r4, #0]
 802660e:	bd38      	pop	{r3, r4, r5, pc}
 8026610:	2000a774 	.word	0x2000a774

08026614 <__malloc_lock>:
 8026614:	4801      	ldr	r0, [pc, #4]	; (802661c <__malloc_lock+0x8>)
 8026616:	f000 b809 	b.w	802662c <__retarget_lock_acquire_recursive>
 802661a:	bf00      	nop
 802661c:	2000a778 	.word	0x2000a778

08026620 <__malloc_unlock>:
 8026620:	4801      	ldr	r0, [pc, #4]	; (8026628 <__malloc_unlock+0x8>)
 8026622:	f000 b804 	b.w	802662e <__retarget_lock_release_recursive>
 8026626:	bf00      	nop
 8026628:	2000a778 	.word	0x2000a778

0802662c <__retarget_lock_acquire_recursive>:
 802662c:	4770      	bx	lr

0802662e <__retarget_lock_release_recursive>:
 802662e:	4770      	bx	lr

08026630 <powf>:
 8026630:	b508      	push	{r3, lr}
 8026632:	ed2d 8b04 	vpush	{d8-d9}
 8026636:	eeb0 8a60 	vmov.f32	s16, s1
 802663a:	eeb0 9a40 	vmov.f32	s18, s0
 802663e:	f000 f84f 	bl	80266e0 <__ieee754_powf>
 8026642:	eeb4 8a48 	vcmp.f32	s16, s16
 8026646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802664a:	eef0 8a40 	vmov.f32	s17, s0
 802664e:	d63e      	bvs.n	80266ce <powf+0x9e>
 8026650:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8026654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026658:	d112      	bne.n	8026680 <powf+0x50>
 802665a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026662:	d039      	beq.n	80266d8 <powf+0xa8>
 8026664:	eeb0 0a48 	vmov.f32	s0, s16
 8026668:	f000 fb35 	bl	8026cd6 <finitef>
 802666c:	b378      	cbz	r0, 80266ce <powf+0x9e>
 802666e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026676:	d52a      	bpl.n	80266ce <powf+0x9e>
 8026678:	f7ff fe8c 	bl	8026394 <__errno>
 802667c:	2322      	movs	r3, #34	; 0x22
 802667e:	e014      	b.n	80266aa <powf+0x7a>
 8026680:	f000 fb29 	bl	8026cd6 <finitef>
 8026684:	b998      	cbnz	r0, 80266ae <powf+0x7e>
 8026686:	eeb0 0a49 	vmov.f32	s0, s18
 802668a:	f000 fb24 	bl	8026cd6 <finitef>
 802668e:	b170      	cbz	r0, 80266ae <powf+0x7e>
 8026690:	eeb0 0a48 	vmov.f32	s0, s16
 8026694:	f000 fb1f 	bl	8026cd6 <finitef>
 8026698:	b148      	cbz	r0, 80266ae <powf+0x7e>
 802669a:	eef4 8a68 	vcmp.f32	s17, s17
 802669e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266a2:	d7e9      	bvc.n	8026678 <powf+0x48>
 80266a4:	f7ff fe76 	bl	8026394 <__errno>
 80266a8:	2321      	movs	r3, #33	; 0x21
 80266aa:	6003      	str	r3, [r0, #0]
 80266ac:	e00f      	b.n	80266ce <powf+0x9e>
 80266ae:	eef5 8a40 	vcmp.f32	s17, #0.0
 80266b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266b6:	d10a      	bne.n	80266ce <powf+0x9e>
 80266b8:	eeb0 0a49 	vmov.f32	s0, s18
 80266bc:	f000 fb0b 	bl	8026cd6 <finitef>
 80266c0:	b128      	cbz	r0, 80266ce <powf+0x9e>
 80266c2:	eeb0 0a48 	vmov.f32	s0, s16
 80266c6:	f000 fb06 	bl	8026cd6 <finitef>
 80266ca:	2800      	cmp	r0, #0
 80266cc:	d1d4      	bne.n	8026678 <powf+0x48>
 80266ce:	eeb0 0a68 	vmov.f32	s0, s17
 80266d2:	ecbd 8b04 	vpop	{d8-d9}
 80266d6:	bd08      	pop	{r3, pc}
 80266d8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80266dc:	e7f7      	b.n	80266ce <powf+0x9e>
	...

080266e0 <__ieee754_powf>:
 80266e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266e4:	ee10 4a90 	vmov	r4, s1
 80266e8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80266ec:	ed2d 8b02 	vpush	{d8}
 80266f0:	ee10 6a10 	vmov	r6, s0
 80266f4:	eeb0 8a40 	vmov.f32	s16, s0
 80266f8:	eef0 8a60 	vmov.f32	s17, s1
 80266fc:	d10c      	bne.n	8026718 <__ieee754_powf+0x38>
 80266fe:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8026702:	0076      	lsls	r6, r6, #1
 8026704:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8026708:	f240 8296 	bls.w	8026c38 <__ieee754_powf+0x558>
 802670c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8026710:	ecbd 8b02 	vpop	{d8}
 8026714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026718:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802671c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8026720:	dcf4      	bgt.n	802670c <__ieee754_powf+0x2c>
 8026722:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8026726:	dd08      	ble.n	802673a <__ieee754_powf+0x5a>
 8026728:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802672c:	d1ee      	bne.n	802670c <__ieee754_powf+0x2c>
 802672e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8026732:	0064      	lsls	r4, r4, #1
 8026734:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8026738:	e7e6      	b.n	8026708 <__ieee754_powf+0x28>
 802673a:	2e00      	cmp	r6, #0
 802673c:	da20      	bge.n	8026780 <__ieee754_powf+0xa0>
 802673e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8026742:	da2d      	bge.n	80267a0 <__ieee754_powf+0xc0>
 8026744:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8026748:	f2c0 827f 	blt.w	8026c4a <__ieee754_powf+0x56a>
 802674c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8026750:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8026754:	fa48 f703 	asr.w	r7, r8, r3
 8026758:	fa07 f303 	lsl.w	r3, r7, r3
 802675c:	4543      	cmp	r3, r8
 802675e:	f040 8274 	bne.w	8026c4a <__ieee754_powf+0x56a>
 8026762:	f007 0701 	and.w	r7, r7, #1
 8026766:	f1c7 0702 	rsb	r7, r7, #2
 802676a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802676e:	d11f      	bne.n	80267b0 <__ieee754_powf+0xd0>
 8026770:	2c00      	cmp	r4, #0
 8026772:	f280 8267 	bge.w	8026c44 <__ieee754_powf+0x564>
 8026776:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802677a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802677e:	e7c7      	b.n	8026710 <__ieee754_powf+0x30>
 8026780:	2700      	movs	r7, #0
 8026782:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8026786:	d1f0      	bne.n	802676a <__ieee754_powf+0x8a>
 8026788:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802678c:	f000 8254 	beq.w	8026c38 <__ieee754_powf+0x558>
 8026790:	dd08      	ble.n	80267a4 <__ieee754_powf+0xc4>
 8026792:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8026a9c <__ieee754_powf+0x3bc>
 8026796:	2c00      	cmp	r4, #0
 8026798:	bfa8      	it	ge
 802679a:	eeb0 0a68 	vmovge.f32	s0, s17
 802679e:	e7b7      	b.n	8026710 <__ieee754_powf+0x30>
 80267a0:	2702      	movs	r7, #2
 80267a2:	e7ee      	b.n	8026782 <__ieee754_powf+0xa2>
 80267a4:	2c00      	cmp	r4, #0
 80267a6:	f280 824a 	bge.w	8026c3e <__ieee754_powf+0x55e>
 80267aa:	eeb1 0a68 	vneg.f32	s0, s17
 80267ae:	e7af      	b.n	8026710 <__ieee754_powf+0x30>
 80267b0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80267b4:	d102      	bne.n	80267bc <__ieee754_powf+0xdc>
 80267b6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80267ba:	e7a9      	b.n	8026710 <__ieee754_powf+0x30>
 80267bc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80267c0:	eeb0 0a48 	vmov.f32	s0, s16
 80267c4:	d107      	bne.n	80267d6 <__ieee754_powf+0xf6>
 80267c6:	2e00      	cmp	r6, #0
 80267c8:	db05      	blt.n	80267d6 <__ieee754_powf+0xf6>
 80267ca:	ecbd 8b02 	vpop	{d8}
 80267ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80267d2:	f000 ba53 	b.w	8026c7c <__ieee754_sqrtf>
 80267d6:	f000 fa77 	bl	8026cc8 <fabsf>
 80267da:	b125      	cbz	r5, 80267e6 <__ieee754_powf+0x106>
 80267dc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80267e0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80267e4:	d116      	bne.n	8026814 <__ieee754_powf+0x134>
 80267e6:	2c00      	cmp	r4, #0
 80267e8:	bfbc      	itt	lt
 80267ea:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80267ee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80267f2:	2e00      	cmp	r6, #0
 80267f4:	da8c      	bge.n	8026710 <__ieee754_powf+0x30>
 80267f6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80267fa:	ea55 0307 	orrs.w	r3, r5, r7
 80267fe:	d104      	bne.n	802680a <__ieee754_powf+0x12a>
 8026800:	ee70 7a40 	vsub.f32	s15, s0, s0
 8026804:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026808:	e782      	b.n	8026710 <__ieee754_powf+0x30>
 802680a:	2f01      	cmp	r7, #1
 802680c:	d180      	bne.n	8026710 <__ieee754_powf+0x30>
 802680e:	eeb1 0a40 	vneg.f32	s0, s0
 8026812:	e77d      	b.n	8026710 <__ieee754_powf+0x30>
 8026814:	0ff0      	lsrs	r0, r6, #31
 8026816:	3801      	subs	r0, #1
 8026818:	ea57 0300 	orrs.w	r3, r7, r0
 802681c:	d104      	bne.n	8026828 <__ieee754_powf+0x148>
 802681e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8026822:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8026826:	e773      	b.n	8026710 <__ieee754_powf+0x30>
 8026828:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802682c:	dd74      	ble.n	8026918 <__ieee754_powf+0x238>
 802682e:	4b9c      	ldr	r3, [pc, #624]	; (8026aa0 <__ieee754_powf+0x3c0>)
 8026830:	429d      	cmp	r5, r3
 8026832:	dc08      	bgt.n	8026846 <__ieee754_powf+0x166>
 8026834:	2c00      	cmp	r4, #0
 8026836:	da0b      	bge.n	8026850 <__ieee754_powf+0x170>
 8026838:	2000      	movs	r0, #0
 802683a:	ecbd 8b02 	vpop	{d8}
 802683e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026842:	f000 ba3b 	b.w	8026cbc <__math_oflowf>
 8026846:	4b97      	ldr	r3, [pc, #604]	; (8026aa4 <__ieee754_powf+0x3c4>)
 8026848:	429d      	cmp	r5, r3
 802684a:	dd08      	ble.n	802685e <__ieee754_powf+0x17e>
 802684c:	2c00      	cmp	r4, #0
 802684e:	dcf3      	bgt.n	8026838 <__ieee754_powf+0x158>
 8026850:	2000      	movs	r0, #0
 8026852:	ecbd 8b02 	vpop	{d8}
 8026856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802685a:	f000 ba29 	b.w	8026cb0 <__math_uflowf>
 802685e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8026862:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026866:	eddf 6a90 	vldr	s13, [pc, #576]	; 8026aa8 <__ieee754_powf+0x3c8>
 802686a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802686e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8026872:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8026876:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802687a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026882:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8026aac <__ieee754_powf+0x3cc>
 8026886:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802688a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8026ab0 <__ieee754_powf+0x3d0>
 802688e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8026892:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8026ab4 <__ieee754_powf+0x3d4>
 8026896:	eef0 6a67 	vmov.f32	s13, s15
 802689a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802689e:	ee16 3a90 	vmov	r3, s13
 80268a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80268a6:	f023 030f 	bic.w	r3, r3, #15
 80268aa:	ee00 3a90 	vmov	s1, r3
 80268ae:	eee0 0a47 	vfms.f32	s1, s0, s14
 80268b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80268b6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80268ba:	f024 040f 	bic.w	r4, r4, #15
 80268be:	ee07 4a10 	vmov	s14, r4
 80268c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80268c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80268ca:	ee07 3a90 	vmov	s15, r3
 80268ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 80268d2:	3f01      	subs	r7, #1
 80268d4:	ea57 0200 	orrs.w	r2, r7, r0
 80268d8:	ee07 4a10 	vmov	s14, r4
 80268dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80268e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80268e4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80268e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80268ec:	ee17 4a10 	vmov	r4, s14
 80268f0:	bf08      	it	eq
 80268f2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80268f6:	2c00      	cmp	r4, #0
 80268f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80268fc:	f340 817e 	ble.w	8026bfc <__ieee754_powf+0x51c>
 8026900:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8026904:	f340 80f8 	ble.w	8026af8 <__ieee754_powf+0x418>
 8026908:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026910:	bf4c      	ite	mi
 8026912:	2001      	movmi	r0, #1
 8026914:	2000      	movpl	r0, #0
 8026916:	e790      	b.n	802683a <__ieee754_powf+0x15a>
 8026918:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802691c:	bf01      	itttt	eq
 802691e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8026ab8 <__ieee754_powf+0x3d8>
 8026922:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8026926:	f06f 0217 	mvneq.w	r2, #23
 802692a:	ee17 5a90 	vmoveq	r5, s15
 802692e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8026932:	bf18      	it	ne
 8026934:	2200      	movne	r2, #0
 8026936:	3b7f      	subs	r3, #127	; 0x7f
 8026938:	4413      	add	r3, r2
 802693a:	4a60      	ldr	r2, [pc, #384]	; (8026abc <__ieee754_powf+0x3dc>)
 802693c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8026940:	4295      	cmp	r5, r2
 8026942:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8026946:	dd06      	ble.n	8026956 <__ieee754_powf+0x276>
 8026948:	4a5d      	ldr	r2, [pc, #372]	; (8026ac0 <__ieee754_powf+0x3e0>)
 802694a:	4295      	cmp	r5, r2
 802694c:	f340 80a4 	ble.w	8026a98 <__ieee754_powf+0x3b8>
 8026950:	3301      	adds	r3, #1
 8026952:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8026956:	2500      	movs	r5, #0
 8026958:	4a5a      	ldr	r2, [pc, #360]	; (8026ac4 <__ieee754_powf+0x3e4>)
 802695a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802695e:	ee07 1a90 	vmov	s15, r1
 8026962:	ed92 7a00 	vldr	s14, [r2]
 8026966:	4a58      	ldr	r2, [pc, #352]	; (8026ac8 <__ieee754_powf+0x3e8>)
 8026968:	ee37 6a27 	vadd.f32	s12, s14, s15
 802696c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8026970:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8026974:	1049      	asrs	r1, r1, #1
 8026976:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802697a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802697e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8026982:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8026986:	ee06 1a10 	vmov	s12, r1
 802698a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802698e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8026992:	ee14 6a90 	vmov	r6, s9
 8026996:	4016      	ands	r6, r2
 8026998:	ee05 6a90 	vmov	s11, r6
 802699c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80269a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269a4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8026acc <__ieee754_powf+0x3ec>
 80269a8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80269ac:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80269b0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80269b4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8026ad0 <__ieee754_powf+0x3f0>
 80269b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80269bc:	eddf 6a45 	vldr	s13, [pc, #276]	; 8026ad4 <__ieee754_powf+0x3f4>
 80269c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80269c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8026aa8 <__ieee754_powf+0x3c8>
 80269c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80269cc:	eddf 6a42 	vldr	s13, [pc, #264]	; 8026ad8 <__ieee754_powf+0x3f8>
 80269d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80269d4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8026adc <__ieee754_powf+0x3fc>
 80269d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80269dc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80269e0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80269e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80269e8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80269ec:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80269f0:	eef0 7a45 	vmov.f32	s15, s10
 80269f4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80269f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80269fc:	ee17 1a90 	vmov	r1, s15
 8026a00:	4011      	ands	r1, r2
 8026a02:	ee07 1a90 	vmov	s15, r1
 8026a06:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8026a0a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8026a0e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8026a12:	ee27 7a24 	vmul.f32	s14, s14, s9
 8026a16:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026a1a:	eeb0 6a47 	vmov.f32	s12, s14
 8026a1e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8026a22:	ee16 1a10 	vmov	r1, s12
 8026a26:	4011      	ands	r1, r2
 8026a28:	ee06 1a90 	vmov	s13, r1
 8026a2c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8026a30:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026ae0 <__ieee754_powf+0x400>
 8026a34:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8026ae4 <__ieee754_powf+0x404>
 8026a38:	ee37 7a66 	vsub.f32	s14, s14, s13
 8026a3c:	ee06 1a10 	vmov	s12, r1
 8026a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026a44:	eddf 7a28 	vldr	s15, [pc, #160]	; 8026ae8 <__ieee754_powf+0x408>
 8026a48:	4928      	ldr	r1, [pc, #160]	; (8026aec <__ieee754_powf+0x40c>)
 8026a4a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026a4e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8026a52:	edd1 7a00 	vldr	s15, [r1]
 8026a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026a5a:	ee07 3a90 	vmov	s15, r3
 8026a5e:	4b24      	ldr	r3, [pc, #144]	; (8026af0 <__ieee754_powf+0x410>)
 8026a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8026a64:	eef0 7a47 	vmov.f32	s15, s14
 8026a68:	eee6 7a25 	vfma.f32	s15, s12, s11
 8026a6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8026a70:	edd5 0a00 	vldr	s1, [r5]
 8026a74:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8026a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026a7c:	ee17 3a90 	vmov	r3, s15
 8026a80:	4013      	ands	r3, r2
 8026a82:	ee07 3a90 	vmov	s15, r3
 8026a86:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8026a8a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8026a8e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8026a92:	ee77 7a66 	vsub.f32	s15, s14, s13
 8026a96:	e70e      	b.n	80268b6 <__ieee754_powf+0x1d6>
 8026a98:	2501      	movs	r5, #1
 8026a9a:	e75d      	b.n	8026958 <__ieee754_powf+0x278>
 8026a9c:	00000000 	.word	0x00000000
 8026aa0:	3f7ffff3 	.word	0x3f7ffff3
 8026aa4:	3f800007 	.word	0x3f800007
 8026aa8:	3eaaaaab 	.word	0x3eaaaaab
 8026aac:	3fb8aa3b 	.word	0x3fb8aa3b
 8026ab0:	36eca570 	.word	0x36eca570
 8026ab4:	3fb8aa00 	.word	0x3fb8aa00
 8026ab8:	4b800000 	.word	0x4b800000
 8026abc:	001cc471 	.word	0x001cc471
 8026ac0:	005db3d6 	.word	0x005db3d6
 8026ac4:	080024c8 	.word	0x080024c8
 8026ac8:	fffff000 	.word	0xfffff000
 8026acc:	3e6c3255 	.word	0x3e6c3255
 8026ad0:	3e53f142 	.word	0x3e53f142
 8026ad4:	3e8ba305 	.word	0x3e8ba305
 8026ad8:	3edb6db7 	.word	0x3edb6db7
 8026adc:	3f19999a 	.word	0x3f19999a
 8026ae0:	3f76384f 	.word	0x3f76384f
 8026ae4:	3f763800 	.word	0x3f763800
 8026ae8:	369dc3a0 	.word	0x369dc3a0
 8026aec:	080024d8 	.word	0x080024d8
 8026af0:	080024d0 	.word	0x080024d0
 8026af4:	3338aa3c 	.word	0x3338aa3c
 8026af8:	f040 8095 	bne.w	8026c26 <__ieee754_powf+0x546>
 8026afc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8026af4 <__ieee754_powf+0x414>
 8026b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026b04:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8026b08:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b10:	f73f aefa 	bgt.w	8026908 <__ieee754_powf+0x228>
 8026b14:	15db      	asrs	r3, r3, #23
 8026b16:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8026b1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8026b1e:	4103      	asrs	r3, r0
 8026b20:	4423      	add	r3, r4
 8026b22:	494b      	ldr	r1, [pc, #300]	; (8026c50 <__ieee754_powf+0x570>)
 8026b24:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026b28:	3a7f      	subs	r2, #127	; 0x7f
 8026b2a:	4111      	asrs	r1, r2
 8026b2c:	ea23 0101 	bic.w	r1, r3, r1
 8026b30:	ee07 1a10 	vmov	s14, r1
 8026b34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8026b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8026b3c:	f1c2 0217 	rsb	r2, r2, #23
 8026b40:	4110      	asrs	r0, r2
 8026b42:	2c00      	cmp	r4, #0
 8026b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026b48:	bfb8      	it	lt
 8026b4a:	4240      	neglt	r0, r0
 8026b4c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8026b50:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8026c54 <__ieee754_powf+0x574>
 8026b54:	eddf 6a40 	vldr	s13, [pc, #256]	; 8026c58 <__ieee754_powf+0x578>
 8026b58:	ee17 3a10 	vmov	r3, s14
 8026b5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8026b60:	f023 030f 	bic.w	r3, r3, #15
 8026b64:	ee07 3a10 	vmov	s14, r3
 8026b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026b6c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8026b70:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8026b74:	eddf 7a39 	vldr	s15, [pc, #228]	; 8026c5c <__ieee754_powf+0x57c>
 8026b78:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8026b7c:	eef0 7a40 	vmov.f32	s15, s0
 8026b80:	eee7 7a26 	vfma.f32	s15, s14, s13
 8026b84:	eeb0 6a67 	vmov.f32	s12, s15
 8026b88:	eea7 6a66 	vfms.f32	s12, s14, s13
 8026b8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8026b90:	ee30 0a46 	vsub.f32	s0, s0, s12
 8026b94:	eddf 6a32 	vldr	s13, [pc, #200]	; 8026c60 <__ieee754_powf+0x580>
 8026b98:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8026c64 <__ieee754_powf+0x584>
 8026b9c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8026ba0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8026c68 <__ieee754_powf+0x588>
 8026ba4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8026ba8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8026c6c <__ieee754_powf+0x58c>
 8026bac:	eee6 6a07 	vfma.f32	s13, s12, s14
 8026bb0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8026c70 <__ieee754_powf+0x590>
 8026bb4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8026bb8:	eef0 6a67 	vmov.f32	s13, s15
 8026bbc:	eee6 6a47 	vfms.f32	s13, s12, s14
 8026bc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8026bc4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8026bc8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8026bcc:	eea7 0a80 	vfma.f32	s0, s15, s0
 8026bd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8026bd4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8026bd8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8026bdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026be0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026be4:	ee10 3a10 	vmov	r3, s0
 8026be8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8026bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8026bf0:	da1f      	bge.n	8026c32 <__ieee754_powf+0x552>
 8026bf2:	f000 f87d 	bl	8026cf0 <scalbnf>
 8026bf6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8026bfa:	e589      	b.n	8026710 <__ieee754_powf+0x30>
 8026bfc:	4a1d      	ldr	r2, [pc, #116]	; (8026c74 <__ieee754_powf+0x594>)
 8026bfe:	4293      	cmp	r3, r2
 8026c00:	dd07      	ble.n	8026c12 <__ieee754_powf+0x532>
 8026c02:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c0a:	bf4c      	ite	mi
 8026c0c:	2001      	movmi	r0, #1
 8026c0e:	2000      	movpl	r0, #0
 8026c10:	e61f      	b.n	8026852 <__ieee754_powf+0x172>
 8026c12:	d108      	bne.n	8026c26 <__ieee754_powf+0x546>
 8026c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026c18:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8026c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c20:	f6ff af78 	blt.w	8026b14 <__ieee754_powf+0x434>
 8026c24:	e7ed      	b.n	8026c02 <__ieee754_powf+0x522>
 8026c26:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8026c2a:	f73f af73 	bgt.w	8026b14 <__ieee754_powf+0x434>
 8026c2e:	2000      	movs	r0, #0
 8026c30:	e78c      	b.n	8026b4c <__ieee754_powf+0x46c>
 8026c32:	ee00 3a10 	vmov	s0, r3
 8026c36:	e7de      	b.n	8026bf6 <__ieee754_powf+0x516>
 8026c38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026c3c:	e568      	b.n	8026710 <__ieee754_powf+0x30>
 8026c3e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8026c78 <__ieee754_powf+0x598>
 8026c42:	e565      	b.n	8026710 <__ieee754_powf+0x30>
 8026c44:	eeb0 0a48 	vmov.f32	s0, s16
 8026c48:	e562      	b.n	8026710 <__ieee754_powf+0x30>
 8026c4a:	2700      	movs	r7, #0
 8026c4c:	e58d      	b.n	802676a <__ieee754_powf+0x8a>
 8026c4e:	bf00      	nop
 8026c50:	007fffff 	.word	0x007fffff
 8026c54:	35bfbe8c 	.word	0x35bfbe8c
 8026c58:	3f317200 	.word	0x3f317200
 8026c5c:	3f317218 	.word	0x3f317218
 8026c60:	b5ddea0e 	.word	0xb5ddea0e
 8026c64:	3331bb4c 	.word	0x3331bb4c
 8026c68:	388ab355 	.word	0x388ab355
 8026c6c:	bb360b61 	.word	0xbb360b61
 8026c70:	3e2aaaab 	.word	0x3e2aaaab
 8026c74:	43160000 	.word	0x43160000
 8026c78:	00000000 	.word	0x00000000

08026c7c <__ieee754_sqrtf>:
 8026c7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8026c80:	4770      	bx	lr

08026c82 <with_errnof>:
 8026c82:	b513      	push	{r0, r1, r4, lr}
 8026c84:	4604      	mov	r4, r0
 8026c86:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026c8a:	f7ff fb83 	bl	8026394 <__errno>
 8026c8e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026c92:	6004      	str	r4, [r0, #0]
 8026c94:	b002      	add	sp, #8
 8026c96:	bd10      	pop	{r4, pc}

08026c98 <xflowf>:
 8026c98:	b130      	cbz	r0, 8026ca8 <xflowf+0x10>
 8026c9a:	eef1 7a40 	vneg.f32	s15, s0
 8026c9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026ca2:	2022      	movs	r0, #34	; 0x22
 8026ca4:	f7ff bfed 	b.w	8026c82 <with_errnof>
 8026ca8:	eef0 7a40 	vmov.f32	s15, s0
 8026cac:	e7f7      	b.n	8026c9e <xflowf+0x6>
	...

08026cb0 <__math_uflowf>:
 8026cb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026cb8 <__math_uflowf+0x8>
 8026cb4:	f7ff bff0 	b.w	8026c98 <xflowf>
 8026cb8:	10000000 	.word	0x10000000

08026cbc <__math_oflowf>:
 8026cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026cc4 <__math_oflowf+0x8>
 8026cc0:	f7ff bfea 	b.w	8026c98 <xflowf>
 8026cc4:	70000000 	.word	0x70000000

08026cc8 <fabsf>:
 8026cc8:	ee10 3a10 	vmov	r3, s0
 8026ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026cd0:	ee00 3a10 	vmov	s0, r3
 8026cd4:	4770      	bx	lr

08026cd6 <finitef>:
 8026cd6:	b082      	sub	sp, #8
 8026cd8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026cdc:	9801      	ldr	r0, [sp, #4]
 8026cde:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026ce2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026ce6:	bfac      	ite	ge
 8026ce8:	2000      	movge	r0, #0
 8026cea:	2001      	movlt	r0, #1
 8026cec:	b002      	add	sp, #8
 8026cee:	4770      	bx	lr

08026cf0 <scalbnf>:
 8026cf0:	ee10 3a10 	vmov	r3, s0
 8026cf4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8026cf8:	d025      	beq.n	8026d46 <scalbnf+0x56>
 8026cfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026cfe:	d302      	bcc.n	8026d06 <scalbnf+0x16>
 8026d00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026d04:	4770      	bx	lr
 8026d06:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8026d0a:	d122      	bne.n	8026d52 <scalbnf+0x62>
 8026d0c:	4b2a      	ldr	r3, [pc, #168]	; (8026db8 <scalbnf+0xc8>)
 8026d0e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026dbc <scalbnf+0xcc>
 8026d12:	4298      	cmp	r0, r3
 8026d14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026d18:	db16      	blt.n	8026d48 <scalbnf+0x58>
 8026d1a:	ee10 3a10 	vmov	r3, s0
 8026d1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026d22:	3a19      	subs	r2, #25
 8026d24:	4402      	add	r2, r0
 8026d26:	2afe      	cmp	r2, #254	; 0xfe
 8026d28:	dd15      	ble.n	8026d56 <scalbnf+0x66>
 8026d2a:	ee10 3a10 	vmov	r3, s0
 8026d2e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8026dc0 <scalbnf+0xd0>
 8026d32:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026dc4 <scalbnf+0xd4>
 8026d36:	2b00      	cmp	r3, #0
 8026d38:	eeb0 7a67 	vmov.f32	s14, s15
 8026d3c:	bfb8      	it	lt
 8026d3e:	eef0 7a66 	vmovlt.f32	s15, s13
 8026d42:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026d46:	4770      	bx	lr
 8026d48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026dc8 <scalbnf+0xd8>
 8026d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026d50:	4770      	bx	lr
 8026d52:	0dd2      	lsrs	r2, r2, #23
 8026d54:	e7e6      	b.n	8026d24 <scalbnf+0x34>
 8026d56:	2a00      	cmp	r2, #0
 8026d58:	dd06      	ble.n	8026d68 <scalbnf+0x78>
 8026d5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026d5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026d62:	ee00 3a10 	vmov	s0, r3
 8026d66:	4770      	bx	lr
 8026d68:	f112 0f16 	cmn.w	r2, #22
 8026d6c:	da1a      	bge.n	8026da4 <scalbnf+0xb4>
 8026d6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026d72:	4298      	cmp	r0, r3
 8026d74:	ee10 3a10 	vmov	r3, s0
 8026d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026d7c:	dd0a      	ble.n	8026d94 <scalbnf+0xa4>
 8026d7e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026dc0 <scalbnf+0xd0>
 8026d82:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026dc4 <scalbnf+0xd4>
 8026d86:	eef0 7a40 	vmov.f32	s15, s0
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	bf18      	it	ne
 8026d8e:	eeb0 0a47 	vmovne.f32	s0, s14
 8026d92:	e7db      	b.n	8026d4c <scalbnf+0x5c>
 8026d94:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026dc8 <scalbnf+0xd8>
 8026d98:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026dcc <scalbnf+0xdc>
 8026d9c:	eef0 7a40 	vmov.f32	s15, s0
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	e7f3      	b.n	8026d8c <scalbnf+0x9c>
 8026da4:	3219      	adds	r2, #25
 8026da6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026daa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026dae:	eddf 7a08 	vldr	s15, [pc, #32]	; 8026dd0 <scalbnf+0xe0>
 8026db2:	ee07 3a10 	vmov	s14, r3
 8026db6:	e7c4      	b.n	8026d42 <scalbnf+0x52>
 8026db8:	ffff3cb0 	.word	0xffff3cb0
 8026dbc:	4c000000 	.word	0x4c000000
 8026dc0:	7149f2ca 	.word	0x7149f2ca
 8026dc4:	f149f2ca 	.word	0xf149f2ca
 8026dc8:	0da24260 	.word	0x0da24260
 8026dcc:	8da24260 	.word	0x8da24260
 8026dd0:	33000000 	.word	0x33000000

08026dd4 <_init>:
 8026dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026dd6:	bf00      	nop
 8026dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026dda:	bc08      	pop	{r3}
 8026ddc:	469e      	mov	lr, r3
 8026dde:	4770      	bx	lr

08026de0 <_fini>:
 8026de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026de2:	bf00      	nop
 8026de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026de6:	bc08      	pop	{r3}
 8026de8:	469e      	mov	lr, r3
 8026dea:	4770      	bx	lr
