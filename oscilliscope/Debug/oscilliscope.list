
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae34  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026e34  08026e34  00040710  2**0
                  CONTENTS
  4 .ARM          00000008  08026e34  08026e34  00036e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026e3c  08026e3c  00040710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026e3c  08026e3c  00036e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026e40  08026e40  00036e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000710  20000000  08026e44  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a06c  20000710  08027554  00040710  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2000a77c  08027554  0004a77c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040710  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027806  00000000  00000000  00040740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006875  00000000  00000000  00067f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  00070790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c807  00000000  00000000  00072440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f8a8  00000000  00000000  0009ec47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78d4  00000000  00000000  000ce4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b5dc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000854c  00000000  00000000  001b5e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000710 	.word	0x20000710
 800c01c:	00000000 	.word	0x00000000
 800c020:	08026e1c 	.word	0x08026e1c

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000714 	.word	0x20000714
 800c03c:	08026e1c 	.word	0x08026e1c

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b974 	b.w	800c350 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468e      	mov	lr, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d14d      	bne.n	800c12a <__udivmoddi4+0xaa>
 800c08e:	428a      	cmp	r2, r1
 800c090:	4694      	mov	ip, r2
 800c092:	d969      	bls.n	800c168 <__udivmoddi4+0xe8>
 800c094:	fab2 f282 	clz	r2, r2
 800c098:	b152      	cbz	r2, 800c0b0 <__udivmoddi4+0x30>
 800c09a:	fa01 f302 	lsl.w	r3, r1, r2
 800c09e:	f1c2 0120 	rsb	r1, r2, #32
 800c0a2:	fa20 f101 	lsr.w	r1, r0, r1
 800c0a6:	fa0c fc02 	lsl.w	ip, ip, r2
 800c0aa:	ea41 0e03 	orr.w	lr, r1, r3
 800c0ae:	4094      	lsls	r4, r2
 800c0b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c0b4:	0c21      	lsrs	r1, r4, #16
 800c0b6:	fbbe f6f8 	udiv	r6, lr, r8
 800c0ba:	fa1f f78c 	uxth.w	r7, ip
 800c0be:	fb08 e316 	mls	r3, r8, r6, lr
 800c0c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0c6:	fb06 f107 	mul.w	r1, r6, r7
 800c0ca:	4299      	cmp	r1, r3
 800c0cc:	d90a      	bls.n	800c0e4 <__udivmoddi4+0x64>
 800c0ce:	eb1c 0303 	adds.w	r3, ip, r3
 800c0d2:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d6:	f080 811f 	bcs.w	800c318 <__udivmoddi4+0x298>
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	f240 811c 	bls.w	800c318 <__udivmoddi4+0x298>
 800c0e0:	3e02      	subs	r6, #2
 800c0e2:	4463      	add	r3, ip
 800c0e4:	1a5b      	subs	r3, r3, r1
 800c0e6:	b2a4      	uxth	r4, r4
 800c0e8:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0ec:	fb08 3310 	mls	r3, r8, r0, r3
 800c0f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f4:	fb00 f707 	mul.w	r7, r0, r7
 800c0f8:	42a7      	cmp	r7, r4
 800c0fa:	d90a      	bls.n	800c112 <__udivmoddi4+0x92>
 800c0fc:	eb1c 0404 	adds.w	r4, ip, r4
 800c100:	f100 33ff 	add.w	r3, r0, #4294967295
 800c104:	f080 810a 	bcs.w	800c31c <__udivmoddi4+0x29c>
 800c108:	42a7      	cmp	r7, r4
 800c10a:	f240 8107 	bls.w	800c31c <__udivmoddi4+0x29c>
 800c10e:	4464      	add	r4, ip
 800c110:	3802      	subs	r0, #2
 800c112:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c116:	1be4      	subs	r4, r4, r7
 800c118:	2600      	movs	r6, #0
 800c11a:	b11d      	cbz	r5, 800c124 <__udivmoddi4+0xa4>
 800c11c:	40d4      	lsrs	r4, r2
 800c11e:	2300      	movs	r3, #0
 800c120:	e9c5 4300 	strd	r4, r3, [r5]
 800c124:	4631      	mov	r1, r6
 800c126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12a:	428b      	cmp	r3, r1
 800c12c:	d909      	bls.n	800c142 <__udivmoddi4+0xc2>
 800c12e:	2d00      	cmp	r5, #0
 800c130:	f000 80ef 	beq.w	800c312 <__udivmoddi4+0x292>
 800c134:	2600      	movs	r6, #0
 800c136:	e9c5 0100 	strd	r0, r1, [r5]
 800c13a:	4630      	mov	r0, r6
 800c13c:	4631      	mov	r1, r6
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	fab3 f683 	clz	r6, r3
 800c146:	2e00      	cmp	r6, #0
 800c148:	d14a      	bne.n	800c1e0 <__udivmoddi4+0x160>
 800c14a:	428b      	cmp	r3, r1
 800c14c:	d302      	bcc.n	800c154 <__udivmoddi4+0xd4>
 800c14e:	4282      	cmp	r2, r0
 800c150:	f200 80f9 	bhi.w	800c346 <__udivmoddi4+0x2c6>
 800c154:	1a84      	subs	r4, r0, r2
 800c156:	eb61 0303 	sbc.w	r3, r1, r3
 800c15a:	2001      	movs	r0, #1
 800c15c:	469e      	mov	lr, r3
 800c15e:	2d00      	cmp	r5, #0
 800c160:	d0e0      	beq.n	800c124 <__udivmoddi4+0xa4>
 800c162:	e9c5 4e00 	strd	r4, lr, [r5]
 800c166:	e7dd      	b.n	800c124 <__udivmoddi4+0xa4>
 800c168:	b902      	cbnz	r2, 800c16c <__udivmoddi4+0xec>
 800c16a:	deff      	udf	#255	; 0xff
 800c16c:	fab2 f282 	clz	r2, r2
 800c170:	2a00      	cmp	r2, #0
 800c172:	f040 8092 	bne.w	800c29a <__udivmoddi4+0x21a>
 800c176:	eba1 010c 	sub.w	r1, r1, ip
 800c17a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c17e:	fa1f fe8c 	uxth.w	lr, ip
 800c182:	2601      	movs	r6, #1
 800c184:	0c20      	lsrs	r0, r4, #16
 800c186:	fbb1 f3f7 	udiv	r3, r1, r7
 800c18a:	fb07 1113 	mls	r1, r7, r3, r1
 800c18e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c192:	fb0e f003 	mul.w	r0, lr, r3
 800c196:	4288      	cmp	r0, r1
 800c198:	d908      	bls.n	800c1ac <__udivmoddi4+0x12c>
 800c19a:	eb1c 0101 	adds.w	r1, ip, r1
 800c19e:	f103 38ff 	add.w	r8, r3, #4294967295
 800c1a2:	d202      	bcs.n	800c1aa <__udivmoddi4+0x12a>
 800c1a4:	4288      	cmp	r0, r1
 800c1a6:	f200 80cb 	bhi.w	800c340 <__udivmoddi4+0x2c0>
 800c1aa:	4643      	mov	r3, r8
 800c1ac:	1a09      	subs	r1, r1, r0
 800c1ae:	b2a4      	uxth	r4, r4
 800c1b0:	fbb1 f0f7 	udiv	r0, r1, r7
 800c1b4:	fb07 1110 	mls	r1, r7, r0, r1
 800c1b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c1bc:	fb0e fe00 	mul.w	lr, lr, r0
 800c1c0:	45a6      	cmp	lr, r4
 800c1c2:	d908      	bls.n	800c1d6 <__udivmoddi4+0x156>
 800c1c4:	eb1c 0404 	adds.w	r4, ip, r4
 800c1c8:	f100 31ff 	add.w	r1, r0, #4294967295
 800c1cc:	d202      	bcs.n	800c1d4 <__udivmoddi4+0x154>
 800c1ce:	45a6      	cmp	lr, r4
 800c1d0:	f200 80bb 	bhi.w	800c34a <__udivmoddi4+0x2ca>
 800c1d4:	4608      	mov	r0, r1
 800c1d6:	eba4 040e 	sub.w	r4, r4, lr
 800c1da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c1de:	e79c      	b.n	800c11a <__udivmoddi4+0x9a>
 800c1e0:	f1c6 0720 	rsb	r7, r6, #32
 800c1e4:	40b3      	lsls	r3, r6
 800c1e6:	fa22 fc07 	lsr.w	ip, r2, r7
 800c1ea:	ea4c 0c03 	orr.w	ip, ip, r3
 800c1ee:	fa20 f407 	lsr.w	r4, r0, r7
 800c1f2:	fa01 f306 	lsl.w	r3, r1, r6
 800c1f6:	431c      	orrs	r4, r3
 800c1f8:	40f9      	lsrs	r1, r7
 800c1fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c1fe:	fa00 f306 	lsl.w	r3, r0, r6
 800c202:	fbb1 f8f9 	udiv	r8, r1, r9
 800c206:	0c20      	lsrs	r0, r4, #16
 800c208:	fa1f fe8c 	uxth.w	lr, ip
 800c20c:	fb09 1118 	mls	r1, r9, r8, r1
 800c210:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c214:	fb08 f00e 	mul.w	r0, r8, lr
 800c218:	4288      	cmp	r0, r1
 800c21a:	fa02 f206 	lsl.w	r2, r2, r6
 800c21e:	d90b      	bls.n	800c238 <__udivmoddi4+0x1b8>
 800c220:	eb1c 0101 	adds.w	r1, ip, r1
 800c224:	f108 3aff 	add.w	sl, r8, #4294967295
 800c228:	f080 8088 	bcs.w	800c33c <__udivmoddi4+0x2bc>
 800c22c:	4288      	cmp	r0, r1
 800c22e:	f240 8085 	bls.w	800c33c <__udivmoddi4+0x2bc>
 800c232:	f1a8 0802 	sub.w	r8, r8, #2
 800c236:	4461      	add	r1, ip
 800c238:	1a09      	subs	r1, r1, r0
 800c23a:	b2a4      	uxth	r4, r4
 800c23c:	fbb1 f0f9 	udiv	r0, r1, r9
 800c240:	fb09 1110 	mls	r1, r9, r0, r1
 800c244:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800c248:	fb00 fe0e 	mul.w	lr, r0, lr
 800c24c:	458e      	cmp	lr, r1
 800c24e:	d908      	bls.n	800c262 <__udivmoddi4+0x1e2>
 800c250:	eb1c 0101 	adds.w	r1, ip, r1
 800c254:	f100 34ff 	add.w	r4, r0, #4294967295
 800c258:	d26c      	bcs.n	800c334 <__udivmoddi4+0x2b4>
 800c25a:	458e      	cmp	lr, r1
 800c25c:	d96a      	bls.n	800c334 <__udivmoddi4+0x2b4>
 800c25e:	3802      	subs	r0, #2
 800c260:	4461      	add	r1, ip
 800c262:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c266:	fba0 9402 	umull	r9, r4, r0, r2
 800c26a:	eba1 010e 	sub.w	r1, r1, lr
 800c26e:	42a1      	cmp	r1, r4
 800c270:	46c8      	mov	r8, r9
 800c272:	46a6      	mov	lr, r4
 800c274:	d356      	bcc.n	800c324 <__udivmoddi4+0x2a4>
 800c276:	d053      	beq.n	800c320 <__udivmoddi4+0x2a0>
 800c278:	b15d      	cbz	r5, 800c292 <__udivmoddi4+0x212>
 800c27a:	ebb3 0208 	subs.w	r2, r3, r8
 800c27e:	eb61 010e 	sbc.w	r1, r1, lr
 800c282:	fa01 f707 	lsl.w	r7, r1, r7
 800c286:	fa22 f306 	lsr.w	r3, r2, r6
 800c28a:	40f1      	lsrs	r1, r6
 800c28c:	431f      	orrs	r7, r3
 800c28e:	e9c5 7100 	strd	r7, r1, [r5]
 800c292:	2600      	movs	r6, #0
 800c294:	4631      	mov	r1, r6
 800c296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29a:	f1c2 0320 	rsb	r3, r2, #32
 800c29e:	40d8      	lsrs	r0, r3
 800c2a0:	fa0c fc02 	lsl.w	ip, ip, r2
 800c2a4:	fa21 f303 	lsr.w	r3, r1, r3
 800c2a8:	4091      	lsls	r1, r2
 800c2aa:	4301      	orrs	r1, r0
 800c2ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c2b0:	fa1f fe8c 	uxth.w	lr, ip
 800c2b4:	fbb3 f0f7 	udiv	r0, r3, r7
 800c2b8:	fb07 3610 	mls	r6, r7, r0, r3
 800c2bc:	0c0b      	lsrs	r3, r1, #16
 800c2be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c2c2:	fb00 f60e 	mul.w	r6, r0, lr
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	fa04 f402 	lsl.w	r4, r4, r2
 800c2cc:	d908      	bls.n	800c2e0 <__udivmoddi4+0x260>
 800c2ce:	eb1c 0303 	adds.w	r3, ip, r3
 800c2d2:	f100 38ff 	add.w	r8, r0, #4294967295
 800c2d6:	d22f      	bcs.n	800c338 <__udivmoddi4+0x2b8>
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	d92d      	bls.n	800c338 <__udivmoddi4+0x2b8>
 800c2dc:	3802      	subs	r0, #2
 800c2de:	4463      	add	r3, ip
 800c2e0:	1b9b      	subs	r3, r3, r6
 800c2e2:	b289      	uxth	r1, r1
 800c2e4:	fbb3 f6f7 	udiv	r6, r3, r7
 800c2e8:	fb07 3316 	mls	r3, r7, r6, r3
 800c2ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2f0:	fb06 f30e 	mul.w	r3, r6, lr
 800c2f4:	428b      	cmp	r3, r1
 800c2f6:	d908      	bls.n	800c30a <__udivmoddi4+0x28a>
 800c2f8:	eb1c 0101 	adds.w	r1, ip, r1
 800c2fc:	f106 38ff 	add.w	r8, r6, #4294967295
 800c300:	d216      	bcs.n	800c330 <__udivmoddi4+0x2b0>
 800c302:	428b      	cmp	r3, r1
 800c304:	d914      	bls.n	800c330 <__udivmoddi4+0x2b0>
 800c306:	3e02      	subs	r6, #2
 800c308:	4461      	add	r1, ip
 800c30a:	1ac9      	subs	r1, r1, r3
 800c30c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800c310:	e738      	b.n	800c184 <__udivmoddi4+0x104>
 800c312:	462e      	mov	r6, r5
 800c314:	4628      	mov	r0, r5
 800c316:	e705      	b.n	800c124 <__udivmoddi4+0xa4>
 800c318:	4606      	mov	r6, r0
 800c31a:	e6e3      	b.n	800c0e4 <__udivmoddi4+0x64>
 800c31c:	4618      	mov	r0, r3
 800c31e:	e6f8      	b.n	800c112 <__udivmoddi4+0x92>
 800c320:	454b      	cmp	r3, r9
 800c322:	d2a9      	bcs.n	800c278 <__udivmoddi4+0x1f8>
 800c324:	ebb9 0802 	subs.w	r8, r9, r2
 800c328:	eb64 0e0c 	sbc.w	lr, r4, ip
 800c32c:	3801      	subs	r0, #1
 800c32e:	e7a3      	b.n	800c278 <__udivmoddi4+0x1f8>
 800c330:	4646      	mov	r6, r8
 800c332:	e7ea      	b.n	800c30a <__udivmoddi4+0x28a>
 800c334:	4620      	mov	r0, r4
 800c336:	e794      	b.n	800c262 <__udivmoddi4+0x1e2>
 800c338:	4640      	mov	r0, r8
 800c33a:	e7d1      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c33c:	46d0      	mov	r8, sl
 800c33e:	e77b      	b.n	800c238 <__udivmoddi4+0x1b8>
 800c340:	3b02      	subs	r3, #2
 800c342:	4461      	add	r1, ip
 800c344:	e732      	b.n	800c1ac <__udivmoddi4+0x12c>
 800c346:	4630      	mov	r0, r6
 800c348:	e709      	b.n	800c15e <__udivmoddi4+0xde>
 800c34a:	4464      	add	r4, ip
 800c34c:	3802      	subs	r0, #2
 800c34e:	e742      	b.n	800c1d6 <__udivmoddi4+0x156>

0800c350 <__aeabi_idiv0>:
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop

0800c354 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d103      	bne.n	800c36c <BIOS_Info+0x18>
    case CHA_CNT:
    	return __HAL_DMA_GET_COUNTER(&hdma_adc1);  /*(u16)DMA_CH_A->CNDTR*/
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <BIOS_Info+0x28>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	e000      	b.n	800c36e <BIOS_Info+0x1a>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c36c:	2300      	movs	r3, #0
  }
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	2000673c 	.word	0x2000673c

0800c380 <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	6039      	str	r1, [r7, #0]
 800c38a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;
  unsigned dma_tmp;

  switch (Item){
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	2b08      	cmp	r3, #8
 800c390:	f200 8151 	bhi.w	800c636 <BIOS_Ctrl+0x2b6>
 800c394:	a201      	add	r2, pc, #4	; (adr r2, 800c39c <BIOS_Ctrl+0x1c>)
 800c396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39a:	bf00      	nop
 800c39c:	0800c537 	.word	0x0800c537
 800c3a0:	0800c4e5 	.word	0x0800c4e5
 800c3a4:	0800c52b 	.word	0x0800c52b
 800c3a8:	0800c4f5 	.word	0x0800c4f5
 800c3ac:	0800c3c1 	.word	0x0800c3c1
 800c3b0:	0800c423 	.word	0x0800c423
 800c3b4:	0800c44d 	.word	0x0800c44d
 800c3b8:	0800c475 	.word	0x0800c475
 800c3bc:	0800c4d7 	.word	0x0800c4d7
    case SMPL_ST: if(Val == DISABLE)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <BIOS_Ctrl+0x58>
    			  {
    				  __HAL_DMA_DISABLE(&hdma_adc1);  /*DMA1_Channel1->CCR &= (~ENABLE);*/
 800c3c6:	4b9e      	ldr	r3, [pc, #632]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	4b9c      	ldr	r3, [pc, #624]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f022 0201 	bic.w	r2, r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3d6:	e130      	b.n	800c63a <BIOS_Ctrl+0x2ba>
    				  if(Val == ENABLE)
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	f040 812d 	bne.w	800c63a <BIOS_Ctrl+0x2ba>
    			    __HAL_DMA_ENABLE(&hdma_adc1);  /* DMA1_Channel1->CCR |= ENABLE; */
 800c3e0:	4b97      	ldr	r3, [pc, #604]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	4b96      	ldr	r3, [pc, #600]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0201 	orr.w	r2, r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3f0:	4b94      	ldr	r3, [pc, #592]	; (800c644 <BIOS_Ctrl+0x2c4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	4b93      	ldr	r3, [pc, #588]	; (800c644 <BIOS_Ctrl+0x2c4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c400:	4b91      	ldr	r3, [pc, #580]	; (800c648 <BIOS_Ctrl+0x2c8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	4b90      	ldr	r3, [pc, #576]	; (800c648 <BIOS_Ctrl+0x2c8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c410:	4b8e      	ldr	r3, [pc, #568]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	4b8d      	ldr	r3, [pc, #564]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f042 0201 	orr.w	r2, r2, #1
 800c41e:	601a      	str	r2, [r3, #0]
    			  break;
 800c420:	e10b      	b.n	800c63a <BIOS_Ctrl+0x2ba>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	3301      	adds	r3, #1
 800c426:	085b      	lsrs	r3, r3, #1
 800c428:	4a89      	ldr	r2, [pc, #548]	; (800c650 <BIOS_Ctrl+0x2d0>)
 800c42a:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c42c:	2201      	movs	r2, #1
 800c42e:	4988      	ldr	r1, [pc, #544]	; (800c650 <BIOS_Ctrl+0x2d0>)
 800c430:	4886      	ldr	r0, [pc, #536]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c432:	f010 feaf 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c436:	4b85      	ldr	r3, [pc, #532]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c438:	2200      	movs	r2, #0
 800c43a:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3b01      	subs	r3, #1
 800c440:	4a82      	ldr	r2, [pc, #520]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c442:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c444:	4881      	ldr	r0, [pc, #516]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c446:	f010 fcdd 	bl	801ce04 <HAL_TIM_Base_Init>
                  break;
 800c44a:	e112      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c44c:	4b7f      	ldr	r3, [pc, #508]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	4b7e      	ldr	r3, [pc, #504]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 0204 	bic.w	r2, r2, #4
 800c45a:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c45c:	4b7b      	ldr	r3, [pc, #492]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c45e:	2200      	movs	r2, #0
 800c460:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c462:	487a      	ldr	r0, [pc, #488]	; (800c64c <BIOS_Ctrl+0x2cc>)
 800c464:	f010 fcce 	bl	801ce04 <HAL_TIM_Base_Init>
    			  __HAL_DMA_SET_COUNTER( &hdma_adc1, Val);  /* DMA_CH_A->CNDTR = (u32)Val;    */
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	4b74      	ldr	r3, [pc, #464]	; (800c640 <BIOS_Ctrl+0x2c0>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	605a      	str	r2, [r3, #4]
                  break;
 800c472:	e0fe      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case AiRANGE: if(Val & DC)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <BIOS_Ctrl+0x10a>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c47e:	2201      	movs	r2, #1
 800c480:	2110      	movs	r1, #16
 800c482:	4874      	ldr	r0, [pc, #464]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c484:	f00d fa34 	bl	80198f0 <HAL_GPIO_WritePin>
 800c488:	e004      	b.n	800c494 <BIOS_Ctrl+0x114>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c48a:	2200      	movs	r2, #0
 800c48c:	2110      	movs	r1, #16
 800c48e:	4871      	ldr	r0, [pc, #452]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c490:	f00d fa2e 	bl	80198f0 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <BIOS_Ctrl+0x12a>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c49e:	2201      	movs	r2, #1
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	486c      	ldr	r0, [pc, #432]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c4a4:	f00d fa24 	bl	80198f0 <HAL_GPIO_WritePin>
 800c4a8:	e004      	b.n	800c4b4 <BIOS_Ctrl+0x134>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2120      	movs	r1, #32
 800c4ae:	4869      	ldr	r0, [pc, #420]	; (800c654 <BIOS_Ctrl+0x2d4>)
 800c4b0:	f00d fa1e 	bl	80198f0 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	f003 0304 	and.w	r3, r3, #4
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d005      	beq.n	800c4ca <BIOS_Ctrl+0x14a>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c4be:	2201      	movs	r2, #1
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4865      	ldr	r0, [pc, #404]	; (800c658 <BIOS_Ctrl+0x2d8>)
 800c4c4:	f00d fa14 	bl	80198f0 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c4c8:	e0d3      	b.n	800c672 <BIOS_Ctrl+0x2f2>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4862      	ldr	r0, [pc, #392]	; (800c658 <BIOS_Ctrl+0x2d8>)
 800c4d0:	f00d fa0e 	bl	80198f0 <HAL_GPIO_WritePin>
                  break;
 800c4d4:	e0cd      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	2110      	movs	r1, #16
 800c4dc:	485f      	ldr	r0, [pc, #380]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c4de:	f00c f9f2 	bl	80188c6 <HAL_DAC_SetValue>
                  break;
 800c4e2:	e0c6      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	4a5d      	ldr	r2, [pc, #372]	; (800c660 <BIOS_Ctrl+0x2e0>)
 800c4ea:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4ec:	485c      	ldr	r0, [pc, #368]	; (800c660 <BIOS_Ctrl+0x2e0>)
 800c4ee:	f010 fc89 	bl	801ce04 <HAL_TIM_Base_Init>
    			  break;
 800c4f2:	e0be      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_BUF:
    // need to do this at low level
        		  // set circular  /* OUT_DMA->CCR   = 0x15B0; // PL=01, M/P_SIZE=0101, M/P_INC=10, CIRC=1, DIR=1, En=0 */
    			  dma_tmp = hdma_dac1.Instance->CR;
 800c4f4:	4b5b      	ldr	r3, [pc, #364]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	61fb      	str	r3, [r7, #28]
    			  dma_tmp &= 0x0FFFFEDE;
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	4b5a      	ldr	r3, [pc, #360]	; (800c668 <BIOS_Ctrl+0x2e8>)
 800c500:	4013      	ands	r3, r2
 800c502:	61fb      	str	r3, [r7, #28]
    			  dma_tmp |= 0x120; //set circ and pfctrl
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c50a:	61fb      	str	r3, [r7, #28]
				  hdma_dac1.Instance->CR = dma_tmp;
 800c50c:	4b55      	ldr	r3, [pc, #340]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	601a      	str	r2, [r3, #0]
         		  hdma_dac1.Instance->PAR = hdac.Instance->DHR12R1;  /* OUT_DMA->CPAR  = (u32)&DAC->DHR12R1; */
 800c514:	4b51      	ldr	r3, [pc, #324]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	4b52      	ldr	r3, [pc, #328]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6892      	ldr	r2, [r2, #8]
 800c51e:	609a      	str	r2, [r3, #8]
        		  hdma_dac1.Instance->M0AR = Val;  /*  OUT_DMA->CMAR  = (u32)Val; */
 800c520:	4b50      	ldr	r3, [pc, #320]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	60da      	str	r2, [r3, #12]
                  break;
 800c528:	e0a3      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_CNT:
    			  __HAL_DMA_SET_COUNTER( &hdma_dac1, Val);  /*OUT_DMA->CNDTR = (u16)Val; */
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	4b4d      	ldr	r3, [pc, #308]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	605a      	str	r2, [r3, #4]
    			  break;
 800c534:	e09d      	b.n	800c672 <BIOS_Ctrl+0x2f2>

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c536:	2301      	movs	r3, #1
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d00a      	beq.n	800c556 <BIOS_Ctrl+0x1d6>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b04      	cmp	r3, #4
 800c544:	f200 8094 	bhi.w	800c670 <BIOS_Ctrl+0x2f0>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d04d      	beq.n	800c5ea <BIOS_Ctrl+0x26a>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b02      	cmp	r3, #2
 800c552:	d025      	beq.n	800c5a0 <BIOS_Ctrl+0x220>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c554:	e08c      	b.n	800c670 <BIOS_Ctrl+0x2f0>
                                  __HAL_DMA_DISABLE(&hdma_dac1); // OUT_DMA->CCR &= 0xFFFE;               //�رղ������DMA
 800c556:	4b43      	ldr	r3, [pc, #268]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	4b41      	ldr	r3, [pc, #260]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f022 0201 	bic.w	r2, r2, #1
 800c564:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c566:	4b3d      	ldr	r3, [pc, #244]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b3b      	ldr	r3, [pc, #236]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c576:	2304      	movs	r3, #4
 800c578:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c57a:	2302      	movs	r3, #2
 800c57c:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4619      	mov	r1, r3
 800c584:	4839      	ldr	r0, [pc, #228]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c586:	f00d f807 	bl	8019598 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c58a:	2310      	movs	r3, #16
 800c58c:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c592:	f107 0308 	add.w	r3, r7, #8
 800c596:	4619      	mov	r1, r3
 800c598:	4834      	ldr	r0, [pc, #208]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c59a:	f00c fffd 	bl	8019598 <HAL_GPIO_Init>
                                  break;
 800c59e:	e049      	b.n	800c634 <BIOS_Ctrl+0x2b4>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c5a0:	2304      	movs	r3, #4
 800c5a2:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c5a8:	f107 0308 	add.w	r3, r7, #8
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	482f      	ldr	r0, [pc, #188]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c5b0:	f00c fff2 	bl	8019598 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c5bc:	f107 0308 	add.w	r3, r7, #8
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	482a      	ldr	r0, [pc, #168]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c5c4:	f00c ffe8 	bl	8019598 <HAL_GPIO_Init>
                                  __HAL_DMA_ENABLE(&hdma_dac1);  // OUT_DMA->CCR |= ENABLE;               //���������DMA
 800c5c8:	4b26      	ldr	r3, [pc, #152]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	4b25      	ldr	r3, [pc, #148]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f042 0201 	orr.w	r2, r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c5d8:	4b20      	ldr	r3, [pc, #128]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	4b1f      	ldr	r3, [pc, #124]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f042 0201 	orr.w	r2, r2, #1
 800c5e6:	601a      	str	r2, [r3, #0]
                                  break;
 800c5e8:	e024      	b.n	800c634 <BIOS_Ctrl+0x2b4>
                    			  __HAL_DMA_DISABLE(&hdma_dac1);  // OUT_DMA->CCR &= 0xFFFE;                //�رղ������DMA
 800c5ea:	4b1e      	ldr	r3, [pc, #120]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b1c      	ldr	r3, [pc, #112]	; (800c664 <BIOS_Ctrl+0x2e4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0201 	bic.w	r2, r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c5fa:	4b18      	ldr	r3, [pc, #96]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	4b16      	ldr	r3, [pc, #88]	; (800c65c <BIOS_Ctrl+0x2dc>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c60a:	2304      	movs	r3, #4
 800c60c:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c60e:	2302      	movs	r3, #2
 800c610:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c612:	f107 0308 	add.w	r3, r7, #8
 800c616:	4619      	mov	r1, r3
 800c618:	4814      	ldr	r0, [pc, #80]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c61a:	f00c ffbd 	bl	8019598 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c61e:	2310      	movs	r3, #16
 800c620:	60bb      	str	r3, [r7, #8]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c622:	2300      	movs	r3, #0
 800c624:	60fb      	str	r3, [r7, #12]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4619      	mov	r1, r3
 800c62c:	480f      	ldr	r0, [pc, #60]	; (800c66c <BIOS_Ctrl+0x2ec>)
 800c62e:	f00c ffb3 	bl	8019598 <HAL_GPIO_Init>
                                  break;
 800c632:	bf00      	nop
                  break;
 800c634:	e01c      	b.n	800c670 <BIOS_Ctrl+0x2f0>

    default: break;
 800c636:	bf00      	nop
 800c638:	e01b      	b.n	800c672 <BIOS_Ctrl+0x2f2>
    			  break;
 800c63a:	bf00      	nop
 800c63c:	e019      	b.n	800c672 <BIOS_Ctrl+0x2f2>
 800c63e:	bf00      	nop
 800c640:	2000673c 	.word	0x2000673c
 800c644:	200066ac 	.word	0x200066ac
 800c648:	200066f4 	.word	0x200066f4
 800c64c:	200068c0 	.word	0x200068c0
 800c650:	200069e0 	.word	0x200069e0
 800c654:	40020800 	.word	0x40020800
 800c658:	40020400 	.word	0x40020400
 800c65c:	2000679c 	.word	0x2000679c
 800c660:	20006998 	.word	0x20006998
 800c664:	200067b0 	.word	0x200067b0
 800c668:	0ffffede 	.word	0x0ffffede
 800c66c:	40020000 	.word	0x40020000
                  break;
 800c670:	bf00      	nop
  }
}
 800c672:	bf00      	nop
 800c674:	3720      	adds	r7, #32
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop

0800c67c <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c68a:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <Set_Base+0x5c>)
 800c68c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c690:	3301      	adds	r3, #1
 800c692:	0fda      	lsrs	r2, r3, #31
 800c694:	4413      	add	r3, r2
 800c696:	105b      	asrs	r3, r3, #1
 800c698:	461a      	mov	r2, r3
 800c69a:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <Set_Base+0x60>)
 800c69c:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c69e:	2201      	movs	r2, #1
 800c6a0:	490e      	ldr	r1, [pc, #56]	; (800c6dc <Set_Base+0x60>)
 800c6a2:	480f      	ldr	r0, [pc, #60]	; (800c6e0 <Set_Base+0x64>)
 800c6a4:	f010 fd76 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6ac:	4a0d      	ldr	r2, [pc, #52]	; (800c6e4 <Set_Base+0x68>)
 800c6ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4b0a      	ldr	r3, [pc, #40]	; (800c6e0 <Set_Base+0x64>)
 800c6b6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c6b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6bc:	4a06      	ldr	r2, [pc, #24]	; (800c6d8 <Set_Base+0x5c>)
 800c6be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <Set_Base+0x64>)
 800c6c6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c6c8:	4805      	ldr	r0, [pc, #20]	; (800c6e0 <Set_Base+0x64>)
 800c6ca:	f010 fb9b 	bl	801ce04 <HAL_TIM_Base_Init>
}
 800c6ce:	bf00      	nop
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	08000bcc 	.word	0x08000bcc
 800c6dc:	200069e0 	.word	0x200069e0
 800c6e0:	200068c0 	.word	0x200068c0
 800c6e4:	08000ba4 	.word	0x08000ba4

0800c6e8 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c6ec:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <Set_Duty+0x44>)
 800c6ee:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b0e      	ldr	r3, [pc, #56]	; (800c730 <Set_Duty+0x48>)
 800c6f6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	4a0b      	ldr	r2, [pc, #44]	; (800c72c <Set_Duty+0x44>)
 800c6fe:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c702:	f1c2 020a 	rsb	r2, r2, #10
 800c706:	fb02 f303 	mul.w	r3, r2, r3
 800c70a:	4a0a      	ldr	r2, [pc, #40]	; (800c734 <Set_Duty+0x4c>)
 800c70c:	fb82 1203 	smull	r1, r2, r2, r3
 800c710:	1092      	asrs	r2, r2, #2
 800c712:	17db      	asrs	r3, r3, #31
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	461a      	mov	r2, r3
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <Set_Duty+0x50>)
 800c71a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c71c:	2203      	movs	r2, #3
 800c71e:	4906      	ldr	r1, [pc, #24]	; (800c738 <Set_Duty+0x50>)
 800c720:	4806      	ldr	r0, [pc, #24]	; (800c73c <Set_Duty+0x54>)
 800c722:	f010 fd37 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
}
 800c726:	bf00      	nop
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20000274 	.word	0x20000274
 800c730:	08000b84 	.word	0x08000b84
 800c734:	66666667 	.word	0x66666667
 800c738:	20006a18 	.word	0x20006a18
 800c73c:	20006950 	.word	0x20006950

0800c740 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c74e:	4a13      	ldr	r2, [pc, #76]	; (800c79c <Set_Fout+0x5c>)
 800c750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c754:	3301      	adds	r3, #1
 800c756:	0fda      	lsrs	r2, r3, #31
 800c758:	4413      	add	r3, r2
 800c75a:	105b      	asrs	r3, r3, #1
 800c75c:	461a      	mov	r2, r3
 800c75e:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <Set_Fout+0x60>)
 800c760:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c762:	2203      	movs	r2, #3
 800c764:	490e      	ldr	r1, [pc, #56]	; (800c7a0 <Set_Fout+0x60>)
 800c766:	480f      	ldr	r0, [pc, #60]	; (800c7a4 <Set_Fout+0x64>)
 800c768:	f010 fd14 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c76c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c770:	4a0d      	ldr	r2, [pc, #52]	; (800c7a8 <Set_Fout+0x68>)
 800c772:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c776:	461a      	mov	r2, r3
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <Set_Fout+0x64>)
 800c77a:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c77c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c780:	4a06      	ldr	r2, [pc, #24]	; (800c79c <Set_Fout+0x5c>)
 800c782:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c786:	461a      	mov	r2, r3
 800c788:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <Set_Fout+0x64>)
 800c78a:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c78c:	4805      	ldr	r0, [pc, #20]	; (800c7a4 <Set_Fout+0x64>)
 800c78e:	f010 fb39 	bl	801ce04 <HAL_TIM_Base_Init>
}
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	08000b84 	.word	0x08000b84
 800c7a0:	20006a18 	.word	0x20006a18
 800c7a4:	20006950 	.word	0x20006950
 800c7a8:	08000b64 	.word	0x08000b64

0800c7ac <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c7b0:	4b20      	ldr	r3, [pc, #128]	; (800c834 <ADC_Start+0x88>)
 800c7b2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c7b6:	4b20      	ldr	r3, [pc, #128]	; (800c838 <ADC_Start+0x8c>)
 800c7b8:	801a      	strh	r2, [r3, #0]
  __HAL_DMA_DISABLE(&hdma_adc1);  //  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
 800c7ba:	4b20      	ldr	r3, [pc, #128]	; (800c83c <ADC_Start+0x90>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	4b1e      	ldr	r3, [pc, #120]	; (800c83c <ADC_Start+0x90>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f022 0201 	bic.w	r2, r2, #1
 800c7c8:	601a      	str	r2, [r3, #0]
  hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];      // �����趨DMAͨ��1
 800c7ca:	4b1c      	ldr	r3, [pc, #112]	; (800c83c <ADC_Start+0x90>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a1c      	ldr	r2, [pc, #112]	; (800c840 <ADC_Start+0x94>)
 800c7d0:	60da      	str	r2, [r3, #12]
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c7d2:	4b18      	ldr	r3, [pc, #96]	; (800c834 <ADC_Start+0x88>)
 800c7d4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7d8:	2b05      	cmp	r3, #5
 800c7da:	d004      	beq.n	800c7e6 <ADC_Start+0x3a>
 800c7dc:	4b15      	ldr	r3, [pc, #84]	; (800c834 <ADC_Start+0x88>)
 800c7de:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d10e      	bne.n	800c804 <ADC_Start+0x58>
     &&( List[TIM_BASE].Val>11))
 800c7e6:	4b13      	ldr	r3, [pc, #76]	; (800c834 <ADC_Start+0x88>)
 800c7e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c7ec:	2b0b      	cmp	r3, #11
 800c7ee:	dd09      	ble.n	800c804 <ADC_Start+0x58>
     {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);  //       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c7f0:	4b12      	ldr	r3, [pc, #72]	; (800c83c <ADC_Start+0x90>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c7f8:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c7fa:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <ADC_Start+0x88>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c802:	e00a      	b.n	800c81a <ADC_Start+0x6e>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c804:	4b0b      	ldr	r3, [pc, #44]	; (800c834 <ADC_Start+0x88>)
 800c806:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c80a:	461a      	mov	r2, r3
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <ADC_Start+0x98>)
 800c80e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c812:	b29a      	uxth	r2, r3
 800c814:	4b09      	ldr	r3, [pc, #36]	; (800c83c <ADC_Start+0x90>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	605a      	str	r2, [r3, #4]
  __HAL_DMA_ENABLE(&hdma_adc1);  //  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
 800c81a:	4b08      	ldr	r3, [pc, #32]	; (800c83c <ADC_Start+0x90>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <ADC_Start+0x90>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f042 0201 	orr.w	r2, r2, #1
 800c828:	601a      	str	r2, [r3, #0]
}
 800c82a:	bf00      	nop
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20000274 	.word	0x20000274
 800c838:	200026a4 	.word	0x200026a4
 800c83c:	2000673c 	.word	0x2000673c
 800c840:	200026a8 	.word	0x200026a8
 800c844:	0800230c 	.word	0x0800230c

0800c848 <Valid_Button>:

// returns 0 if invalad or code
// Original scaled to 1024 new to screen

char Valid_Button(short x,short y)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	460a      	mov	r2, r1
 800c852:	80fb      	strh	r3, [r7, #6]
 800c854:	4613      	mov	r3, r2
 800c856:	80bb      	strh	r3, [r7, #4]
	char valid;
	unsigned short tmpx, tmpy;
	valid =0;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]

// convert to screen coordinates
	tmpx =x*4;
 800c85c:	88fb      	ldrh	r3, [r7, #6]
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	81bb      	strh	r3, [r7, #12]
	tmpy =y*4;
 800c862:	88bb      	ldrh	r3, [r7, #4]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	817b      	strh	r3, [r7, #10]
    tmpx *= 4;
 800c868:	89bb      	ldrh	r3, [r7, #12]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	81bb      	strh	r3, [r7, #12]
    tmpy *= 4;
 800c86e:	897b      	ldrh	r3, [r7, #10]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	817b      	strh	r3, [r7, #10]
	x = tmpx/136;
 800c874:	89bb      	ldrh	r3, [r7, #12]
 800c876:	4a2e      	ldr	r2, [pc, #184]	; (800c930 <Valid_Button+0xe8>)
 800c878:	fba2 2303 	umull	r2, r3, r2, r3
 800c87c:	09db      	lsrs	r3, r3, #7
 800c87e:	b29b      	uxth	r3, r3
 800c880:	80fb      	strh	r3, [r7, #6]
	y = tmpy/205;
 800c882:	897b      	ldrh	r3, [r7, #10]
 800c884:	4a2b      	ldr	r2, [pc, #172]	; (800c934 <Valid_Button+0xec>)
 800c886:	fba2 2303 	umull	r2, r3, r2, r3
 800c88a:	099b      	lsrs	r3, r3, #6
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	80bb      	strh	r3, [r7, #4]

	if(y<=64)  //lower screen
 800c890:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c894:	2b40      	cmp	r3, #64	; 0x40
 800c896:	dc15      	bgt.n	800c8c4 <Valid_Button+0x7c>
	{
		if((x>192) && (x<288))  //middle screen bottom
 800c898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c89c:	2bc0      	cmp	r3, #192	; 0xc0
 800c89e:	dd06      	ble.n	800c8ae <Valid_Button+0x66>
 800c8a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8a4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800c8a8:	da01      	bge.n	800c8ae <Valid_Button+0x66>
			valid =KEYCODE_DOWN;
 800c8aa:	2304      	movs	r3, #4
 800c8ac:	73fb      	strb	r3, [r7, #15]
		if((x <= 96)||(x >= 384)) //left or right screen
 800c8ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8b2:	2b60      	cmp	r3, #96	; 0x60
 800c8b4:	dd04      	ble.n	800c8c0 <Valid_Button+0x78>
 800c8b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ba:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c8be:	db01      	blt.n	800c8c4 <Valid_Button+0x7c>
			valid = KEYCODE_MANU;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	73fb      	strb	r3, [r7, #15]
	}
	if(y >= 256)  //upper screen
 800c8c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8c8:	2bff      	cmp	r3, #255	; 0xff
 800c8ca:	dd15      	ble.n	800c8f8 <Valid_Button+0xb0>
	{
		if((x>192) && (x<288))  //middle screen up
 800c8cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d0:	2bc0      	cmp	r3, #192	; 0xc0
 800c8d2:	dd06      	ble.n	800c8e2 <Valid_Button+0x9a>
 800c8d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8d8:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800c8dc:	da01      	bge.n	800c8e2 <Valid_Button+0x9a>
			valid =KEYCODE_UP;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	73fb      	strb	r3, [r7, #15]
		if((x <= 96)||(x >= 384)) //left or right screen
 800c8e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8e6:	2b60      	cmp	r3, #96	; 0x60
 800c8e8:	dd04      	ble.n	800c8f4 <Valid_Button+0xac>
 800c8ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8ee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c8f2:	db01      	blt.n	800c8f8 <Valid_Button+0xb0>
			valid = KEYCODE_PLAY;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	73fb      	strb	r3, [r7, #15]
	}

	if((y>128) && (y<192))  //middle screen
 800c8f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8fc:	2b80      	cmp	r3, #128	; 0x80
 800c8fe:	dd10      	ble.n	800c922 <Valid_Button+0xda>
 800c900:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c904:	2bbf      	cmp	r3, #191	; 0xbf
 800c906:	dc0c      	bgt.n	800c922 <Valid_Button+0xda>
	{
		if(x <= 160) //left screen
 800c908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c90c:	2ba0      	cmp	r3, #160	; 0xa0
 800c90e:	dc01      	bgt.n	800c914 <Valid_Button+0xcc>
			valid=KEYCODE_LEFT;
 800c910:	2305      	movs	r3, #5
 800c912:	73fb      	strb	r3, [r7, #15]
		if(x >= 320) //right screen
 800c914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c918:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c91c:	db01      	blt.n	800c922 <Valid_Button+0xda>
			valid=KEYCODE_RIGHT;
 800c91e:	2306      	movs	r3, #6
 800c920:	73fb      	strb	r3, [r7, #15]
	}

	return valid;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3714      	adds	r7, #20
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	f0f0f0f1 	.word	0xf0f0f0f1
 800c934:	4fec04ff 	.word	0x4fec04ff

0800c938 <touchscan>:
//touchscan -- maps touch to key codes  returns 0 if no change
char touchscan(void)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
	short x,y;
	char Code, TmpCode, Touched;

	TmpCode = Code =0;
 800c93e:	2300      	movs	r3, #0
 800c940:	71fb      	strb	r3, [r7, #7]
 800c942:	79fb      	ldrb	r3, [r7, #7]
 800c944:	71bb      	strb	r3, [r7, #6]
	Touched = Touch_Read(&x,&y);
 800c946:	463a      	mov	r2, r7
 800c948:	1cbb      	adds	r3, r7, #2
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f009 f8c3 	bl	8015ad8 <Touch_Read>
 800c952:	4603      	mov	r3, r0
 800c954:	717b      	strb	r3, [r7, #5]

	if(Touched!=0)
 800c956:	797b      	ldrb	r3, [r7, #5]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 8087 	beq.w	800ca6c <touchscan+0x134>
	{  // there was a touch
		TmpCode = Valid_Button(x, y);
 800c95e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c962:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c966:	4611      	mov	r1, r2
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff ff6d 	bl	800c848 <Valid_Button>
 800c96e:	4603      	mov	r3, r0
 800c970:	71bb      	strb	r3, [r7, #6]
		if((TmpCode!=0) && (TmpCode != Lastcode))  //changed to pressed
 800c972:	79bb      	ldrb	r3, [r7, #6]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d03c      	beq.n	800c9f2 <touchscan+0xba>
 800c978:	4b62      	ldr	r3, [pc, #392]	; (800cb04 <touchscan+0x1cc>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	79ba      	ldrb	r2, [r7, #6]
 800c980:	429a      	cmp	r2, r3
 800c982:	d036      	beq.n	800c9f2 <touchscan+0xba>
		{
		    Key_Wait_Cnt   = 50;                              // ���ó������� 1.0S ����
 800c984:	4b60      	ldr	r3, [pc, #384]	; (800cb08 <touchscan+0x1d0>)
 800c986:	2232      	movs	r2, #50	; 0x32
 800c988:	701a      	strb	r2, [r3, #0]
		    Key_Repeat_Cnt = 3;                               // �趨 60mS �Զ��ظ�����
 800c98a:	4b60      	ldr	r3, [pc, #384]	; (800cb0c <touchscan+0x1d4>)
 800c98c:	2203      	movs	r2, #3
 800c98e:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_PLAY)
 800c990:	79bb      	ldrb	r3, [r7, #6]
 800c992:	2b01      	cmp	r3, #1
 800c994:	d102      	bne.n	800c99c <touchscan+0x64>
		    	TmpKeyP = KEYCODE_PLAY;        // KeyCode(Play/A)
 800c996:	4b5e      	ldr	r3, [pc, #376]	; (800cb10 <touchscan+0x1d8>)
 800c998:	2201      	movs	r2, #1
 800c99a:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c99c:	79bb      	ldrb	r3, [r7, #6]
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d121      	bne.n	800c9e6 <touchscan+0xae>
		    {
		        if(KeymS_F)
 800c9a2:	4b5c      	ldr	r3, [pc, #368]	; (800cb14 <touchscan+0x1dc>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d013      	beq.n	800c9d2 <touchscan+0x9a>
		        {                            // OK��˫��
		             KeymS_F = 0;                        //�������ʱ��־��KeymS_Cnt��ʱ
 800c9aa:	4b5a      	ldr	r3, [pc, #360]	; (800cb14 <touchscan+0x1dc>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	701a      	strb	r2, [r3, #0]
		             if(KeymS_Cnt < KEYTIME)
 800c9b0:	4b59      	ldr	r3, [pc, #356]	; (800cb18 <touchscan+0x1e0>)
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	b21a      	sxth	r2, r3
 800c9b6:	4b59      	ldr	r3, [pc, #356]	; (800cb1c <touchscan+0x1e4>)
 800c9b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	da02      	bge.n	800c9c6 <touchscan+0x8e>
		             {            // KEYTIME�������������μ���Ϊ˫��
		                  Code = KEYCODE_D_MANU;
 800c9c0:	230a      	movs	r3, #10
 800c9c2:	71fb      	strb	r3, [r7, #7]
 800c9c4:	e001      	b.n	800c9ca <touchscan+0x92>
		             }
		             else
		             {
		                  Code = KEYCODE_MANU;
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	71fb      	strb	r3, [r7, #7]
		             }
		             KeymS_Cnt = 0;
 800c9ca:	4b53      	ldr	r3, [pc, #332]	; (800cb18 <touchscan+0x1e0>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	801a      	strh	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9d0:	e04b      	b.n	800ca6a <touchscan+0x132>
		        }
		        else
		        {                                  // OK��˫��
		                KeymS_Cnt = 0;
 800c9d2:	4b51      	ldr	r3, [pc, #324]	; (800cb18 <touchscan+0x1e0>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	801a      	strh	r2, [r3, #0]
		                KeymS_F = 1;
 800c9d8:	4b4e      	ldr	r3, [pc, #312]	; (800cb14 <touchscan+0x1dc>)
 800c9da:	2201      	movs	r2, #1
 800c9dc:	701a      	strb	r2, [r3, #0]
		                TmpKeyOK = KEYCODE_MANU;
 800c9de:	4b50      	ldr	r3, [pc, #320]	; (800cb20 <touchscan+0x1e8>)
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	701a      	strb	r2, [r3, #0]
		    if(TmpCode == KEYCODE_MANU)
 800c9e4:	e041      	b.n	800ca6a <touchscan+0x132>
		        }
		    }
		    else
		    {
			    if(TmpCode != KEYCODE_PLAY)
 800c9e6:	79bb      	ldrb	r3, [r7, #6]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d03e      	beq.n	800ca6a <touchscan+0x132>
			    	Code = TmpCode;
 800c9ec:	79bb      	ldrb	r3, [r7, #6]
 800c9ee:	71fb      	strb	r3, [r7, #7]
		    if(TmpCode == KEYCODE_MANU)
 800c9f0:	e03b      	b.n	800ca6a <touchscan+0x132>
		    }
		}
		else
		{
			if(TmpCode != 0)  // same press
 800c9f2:	79bb      	ldrb	r3, [r7, #6]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d039      	beq.n	800ca6c <touchscan+0x134>
			{
			      if((Key_Wait_Cnt < 25)&&(Key_Repeat_Cnt == 0))
 800c9f8:	4b43      	ldr	r3, [pc, #268]	; (800cb08 <touchscan+0x1d0>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b18      	cmp	r3, #24
 800ca00:	d80f      	bhi.n	800ca22 <touchscan+0xea>
 800ca02:	4b42      	ldr	r3, [pc, #264]	; (800cb0c <touchscan+0x1d4>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <touchscan+0xea>
			      { // �������� 0.5S ����
			    	  if((TmpCode != KEYCODE_PLAY) && (TmpCode != KEYCODE_MANU))
 800ca0c:	79bb      	ldrb	r3, [r7, #6]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d007      	beq.n	800ca22 <touchscan+0xea>
 800ca12:	79bb      	ldrb	r3, [r7, #6]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d004      	beq.n	800ca22 <touchscan+0xea>
			    	  {
						  Key_Repeat_Cnt = 3;        // �趨 60mS �Զ��ظ�����
 800ca18:	4b3c      	ldr	r3, [pc, #240]	; (800cb0c <touchscan+0x1d4>)
 800ca1a:	2203      	movs	r2, #3
 800ca1c:	701a      	strb	r2, [r3, #0]
						  Code = TmpCode;
 800ca1e:	79bb      	ldrb	r3, [r7, #6]
 800ca20:	71fb      	strb	r3, [r7, #7]
					  }
			      }
			      if((Key_Wait_Cnt == 0)&&(Key_Repeat_Cnt == 0))
 800ca22:	4b39      	ldr	r3, [pc, #228]	; (800cb08 <touchscan+0x1d0>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d11f      	bne.n	800ca6c <touchscan+0x134>
 800ca2c:	4b37      	ldr	r3, [pc, #220]	; (800cb0c <touchscan+0x1d4>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d11a      	bne.n	800ca6c <touchscan+0x134>
			      { // �������� 1.0S ����
			    	  if((TmpCode == KEYCODE_PLAY) || (TmpCode == KEYCODE_MANU))
 800ca36:	79bb      	ldrb	r3, [r7, #6]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d002      	beq.n	800ca42 <touchscan+0x10a>
 800ca3c:	79bb      	ldrb	r3, [r7, #6]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d114      	bne.n	800ca6c <touchscan+0x134>
			    	  {
			    		  if(TmpCode == KEYCODE_PLAY)
 800ca42:	79bb      	ldrb	r3, [r7, #6]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d104      	bne.n	800ca52 <touchscan+0x11a>
			    		  {
			    			  Code = KEYCODE_ACT; TmpKeyP = 0;
 800ca48:	2308      	movs	r3, #8
 800ca4a:	71fb      	strb	r3, [r7, #7]
 800ca4c:	4b30      	ldr	r3, [pc, #192]	; (800cb10 <touchscan+0x1d8>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	701a      	strb	r2, [r3, #0]
			    		  }
			    		  if(TmpCode == KEYCODE_MANU)
 800ca52:	79bb      	ldrb	r3, [r7, #6]
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d104      	bne.n	800ca62 <touchscan+0x12a>
			    		  {
			    			  Code = KEYCODE_MEM; TmpKeyM = 0;
 800ca58:	2309      	movs	r3, #9
 800ca5a:	71fb      	strb	r3, [r7, #7]
 800ca5c:	4b31      	ldr	r3, [pc, #196]	; (800cb24 <touchscan+0x1ec>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
			    		  }
			         	  Key_Repeat_Cnt = 50;       //�趨 1.0S �Զ��ظ�����
 800ca62:	4b2a      	ldr	r3, [pc, #168]	; (800cb0c <touchscan+0x1d4>)
 800ca64:	2232      	movs	r2, #50	; 0x32
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	e000      	b.n	800ca6c <touchscan+0x134>
		    if(TmpCode == KEYCODE_MANU)
 800ca6a:	bf00      	nop
			    	  }
			      }
			}
		}
	}
	if((Touched == 0)||((TmpCode == 0) && (TmpCode == Lastcode)))
 800ca6c:	797b      	ldrb	r3, [r7, #5]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d008      	beq.n	800ca84 <touchscan+0x14c>
 800ca72:	79bb      	ldrb	r3, [r7, #6]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d13c      	bne.n	800caf2 <touchscan+0x1ba>
 800ca78:	4b22      	ldr	r3, [pc, #136]	; (800cb04 <touchscan+0x1cc>)
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	79ba      	ldrb	r2, [r7, #6]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d136      	bne.n	800caf2 <touchscan+0x1ba>
	{  // untouched
	    if(TmpKeyP)
 800ca84:	4b22      	ldr	r3, [pc, #136]	; (800cb10 <touchscan+0x1d8>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <touchscan+0x162>
	    {
	    	Code = TmpKeyP;
 800ca8e:	4b20      	ldr	r3, [pc, #128]	; (800cb10 <touchscan+0x1d8>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	71fb      	strb	r3, [r7, #7]
	    	TmpKeyP = 0;
 800ca94:	4b1e      	ldr	r3, [pc, #120]	; (800cb10 <touchscan+0x1d8>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
	    }
	    if(TmpKeyOK &&(KeymS_F)&& (KeymS_Cnt > KEYTIME))
 800ca9a:	4b21      	ldr	r3, [pc, #132]	; (800cb20 <touchscan+0x1e8>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d018      	beq.n	800cad6 <touchscan+0x19e>
 800caa4:	4b1b      	ldr	r3, [pc, #108]	; (800cb14 <touchscan+0x1dc>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d014      	beq.n	800cad6 <touchscan+0x19e>
 800caac:	4b1a      	ldr	r3, [pc, #104]	; (800cb18 <touchscan+0x1e0>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	b21a      	sxth	r2, r3
 800cab2:	4b1a      	ldr	r3, [pc, #104]	; (800cb1c <touchscan+0x1e4>)
 800cab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab8:	429a      	cmp	r2, r3
 800caba:	dd0c      	ble.n	800cad6 <touchscan+0x19e>
	    {
	        Code = TmpKeyOK;
 800cabc:	4b18      	ldr	r3, [pc, #96]	; (800cb20 <touchscan+0x1e8>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	71fb      	strb	r3, [r7, #7]
	        TmpKeyOK  = 0;
 800cac2:	4b17      	ldr	r3, [pc, #92]	; (800cb20 <touchscan+0x1e8>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
	        KeymS_F = 0;
 800cac8:	4b12      	ldr	r3, [pc, #72]	; (800cb14 <touchscan+0x1dc>)
 800caca:	2200      	movs	r2, #0
 800cacc:	701a      	strb	r2, [r3, #0]
	        KeymS_Cnt = 0;
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <touchscan+0x1e0>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e00a      	b.n	800caec <touchscan+0x1b4>
	    }
	    else
	    	if(TmpKeyM) {Code = TmpKeyM; TmpKeyM = 0;}
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <touchscan+0x1ec>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d005      	beq.n	800caec <touchscan+0x1b4>
 800cae0:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <touchscan+0x1ec>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	71fb      	strb	r3, [r7, #7]
 800cae6:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <touchscan+0x1ec>)
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
	        	Key_Wait_Cnt=50;                                //���ó������� 1.0S ����
 800caec:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <touchscan+0x1d0>)
 800caee:	2232      	movs	r2, #50	; 0x32
 800caf0:	701a      	strb	r2, [r3, #0]
	}
	Lastcode = TmpCode;
 800caf2:	4a04      	ldr	r2, [pc, #16]	; (800cb04 <touchscan+0x1cc>)
 800caf4:	79bb      	ldrb	r3, [r7, #6]
 800caf6:	7013      	strb	r3, [r2, #0]
	return Code;
 800caf8:	79fb      	ldrb	r3, [r7, #7]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	2000073e 	.word	0x2000073e
 800cb08:	20000741 	.word	0x20000741
 800cb0c:	20000740 	.word	0x20000740
 800cb10:	2000072f 	.word	0x2000072f
 800cb14:	2000073f 	.word	0x2000073f
 800cb18:	2000073a 	.word	0x2000073a
 800cb1c:	20000732 	.word	0x20000732
 800cb20:	20000731 	.word	0x20000731
 800cb24:	20000730 	.word	0x20000730

0800cb28 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0

	char checkpress;
    char KeyCode;

//  TIM3->SR = 0;          //moved to main //���жϱ�־
  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
 800cb2e:	4b73      	ldr	r3, [pc, #460]	; (800ccfc <Tim3_ISP+0x1d4>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d008      	beq.n	800cb48 <Tim3_ISP+0x20>
 800cb36:	4b72      	ldr	r3, [pc, #456]	; (800cd00 <Tim3_ISP+0x1d8>)
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	b21b      	sxth	r3, r3
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	3301      	adds	r3, #1
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	b21a      	sxth	r2, r3
 800cb44:	4b6e      	ldr	r3, [pc, #440]	; (800cd00 <Tim3_ISP+0x1d8>)
 800cb46:	801a      	strh	r2, [r3, #0]
  Tim_Cnt++;
 800cb48:	4b6e      	ldr	r3, [pc, #440]	; (800cd04 <Tim3_ISP+0x1dc>)
 800cb4a:	881b      	ldrh	r3, [r3, #0]
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	3301      	adds	r3, #1
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	b21a      	sxth	r2, r3
 800cb56:	4b6b      	ldr	r3, [pc, #428]	; (800cd04 <Tim3_ISP+0x1dc>)
 800cb58:	801a      	strh	r2, [r3, #0]
  if(Delay_Cnt>0) Delay_Cnt--;
 800cb5a:	4b6b      	ldr	r3, [pc, #428]	; (800cd08 <Tim3_ISP+0x1e0>)
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dd08      	ble.n	800cb76 <Tim3_ISP+0x4e>
 800cb64:	4b68      	ldr	r3, [pc, #416]	; (800cd08 <Tim3_ISP+0x1e0>)
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	b21b      	sxth	r3, r3
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	b21a      	sxth	r2, r3
 800cb72:	4b65      	ldr	r3, [pc, #404]	; (800cd08 <Tim3_ISP+0x1e0>)
 800cb74:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800cb76:	4b65      	ldr	r3, [pc, #404]	; (800cd0c <Tim3_ISP+0x1e4>)
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	b21b      	sxth	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f340 8081 	ble.w	800cc84 <Tim3_ISP+0x15c>
  {
    mS_Cnt--;
 800cb82:	4b62      	ldr	r3, [pc, #392]	; (800cd0c <Tim3_ISP+0x1e4>)
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	b21b      	sxth	r3, r3
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	b21a      	sxth	r2, r3
 800cb90:	4b5e      	ldr	r3, [pc, #376]	; (800cd0c <Tim3_ISP+0x1e4>)
 800cb92:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800cb94:	4b5d      	ldr	r3, [pc, #372]	; (800cd0c <Tim3_ISP+0x1e4>)
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b21a      	sxth	r2, r3
 800cb9a:	4b5d      	ldr	r3, [pc, #372]	; (800cd10 <Tim3_ISP+0x1e8>)
 800cb9c:	fb83 1302 	smull	r1, r3, r3, r2
 800cba0:	10d9      	asrs	r1, r3, #3
 800cba2:	17d3      	asrs	r3, r2, #31
 800cba4:	1ac9      	subs	r1, r1, r3
 800cba6:	460b      	mov	r3, r1
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	440b      	add	r3, r1
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	b21b      	sxth	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f040 809d 	bne.w	800ccf2 <Tim3_ISP+0x1ca>
    {                 //  20mS  ÿ20mS��1�μ���
    	if(Key_Wait_Cnt)    Key_Wait_Cnt--;
 800cbb8:	4b56      	ldr	r3, [pc, #344]	; (800cd14 <Tim3_ISP+0x1ec>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d006      	beq.n	800cbd0 <Tim3_ISP+0xa8>
 800cbc2:	4b54      	ldr	r3, [pc, #336]	; (800cd14 <Tim3_ISP+0x1ec>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	4b51      	ldr	r3, [pc, #324]	; (800cd14 <Tim3_ISP+0x1ec>)
 800cbce:	701a      	strb	r2, [r3, #0]
    	if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
 800cbd0:	4b51      	ldr	r3, [pc, #324]	; (800cd18 <Tim3_ISP+0x1f0>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <Tim3_ISP+0xc0>
 800cbda:	4b4f      	ldr	r3, [pc, #316]	; (800cd18 <Tim3_ISP+0x1f0>)
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	4b4c      	ldr	r3, [pc, #304]	; (800cd18 <Tim3_ISP+0x1f0>)
 800cbe6:	701a      	strb	r2, [r3, #0]
    	KeyCode = checkpress =0 ;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	71fb      	strb	r3, [r7, #7]
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	71bb      	strb	r3, [r7, #6]
    	Touch = HAL_GPIO_ReadPin(TpI_GPIO_Port, TpI_Pin);  //read pen
 800cbf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbf4:	4849      	ldr	r0, [pc, #292]	; (800cd1c <Tim3_ISP+0x1f4>)
 800cbf6:	f00c fe63 	bl	80198c0 <HAL_GPIO_ReadPin>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	4b48      	ldr	r3, [pc, #288]	; (800cd20 <Tim3_ISP+0x1f8>)
 800cc00:	701a      	strb	r2, [r3, #0]
    	if (Touch != LastTouch)
 800cc02:	4b47      	ldr	r3, [pc, #284]	; (800cd20 <Tim3_ISP+0x1f8>)
 800cc04:	781a      	ldrb	r2, [r3, #0]
 800cc06:	4b47      	ldr	r3, [pc, #284]	; (800cd24 <Tim3_ISP+0x1fc>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d006      	beq.n	800cc1c <Tim3_ISP+0xf4>
    	{
    	// pen changed
    		checkpress =1; //check pressure if pen changed
 800cc0e:	2301      	movs	r3, #1
 800cc10:	71fb      	strb	r3, [r7, #7]
    		LastTouch = Touch;
 800cc12:	4b43      	ldr	r3, [pc, #268]	; (800cd20 <Tim3_ISP+0x1f8>)
 800cc14:	781a      	ldrb	r2, [r3, #0]
 800cc16:	4b43      	ldr	r3, [pc, #268]	; (800cd24 <Tim3_ISP+0x1fc>)
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	e005      	b.n	800cc28 <Tim3_ISP+0x100>
    	}
    	else
    	{
    	  if(Touch != 0)
 800cc1c:	4b40      	ldr	r3, [pc, #256]	; (800cd20 <Tim3_ISP+0x1f8>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <Tim3_ISP+0x100>
    	  {
    	    //check that press is valid
    		checkpress =1;
 800cc24:	2301      	movs	r3, #1
 800cc26:	71fb      	strb	r3, [r7, #7]
    	  }
    	}

    	if(checkpress !=0)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d003      	beq.n	800cc36 <Tim3_ISP+0x10e>
    	{
    		KeyCode = touchscan();
 800cc2e:	f7ff fe83 	bl	800c938 <touchscan>
 800cc32:	4603      	mov	r3, r0
 800cc34:	71bb      	strb	r3, [r7, #6]
       	}
//      KeyCode = KeyScan();
      if(KeyCode !=0) Key_Buffer = KeyCode;
 800cc36:	79bb      	ldrb	r3, [r7, #6]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <Tim3_ISP+0x11a>
 800cc3c:	4a3a      	ldr	r2, [pc, #232]	; (800cd28 <Tim3_ISP+0x200>)
 800cc3e:	79bb      	ldrb	r3, [r7, #6]
 800cc40:	7013      	strb	r3, [r2, #0]

      if(Cursor_Cnt >0)
 800cc42:	4b3a      	ldr	r3, [pc, #232]	; (800cd2c <Tim3_ISP+0x204>)
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	b21b      	sxth	r3, r3
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dd09      	ble.n	800cc60 <Tim3_ISP+0x138>
    	  Cursor_Cnt--;
 800cc4c:	4b37      	ldr	r3, [pc, #220]	; (800cd2c <Tim3_ISP+0x204>)
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	b21b      	sxth	r3, r3
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	b21a      	sxth	r2, r3
 800cc5a:	4b34      	ldr	r3, [pc, #208]	; (800cd2c <Tim3_ISP+0x204>)
 800cc5c:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800cc5e:	e048      	b.n	800ccf2 <Tim3_ISP+0x1ca>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800cc60:	4b32      	ldr	r3, [pc, #200]	; (800cd2c <Tim3_ISP+0x204>)
 800cc62:	220c      	movs	r2, #12
 800cc64:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800cc66:	4b32      	ldr	r3, [pc, #200]	; (800cd30 <Tim3_ISP+0x208>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	bf0c      	ite	eq
 800cc70:	2301      	moveq	r3, #1
 800cc72:	2300      	movne	r3, #0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	461a      	mov	r2, r3
 800cc78:	4b2d      	ldr	r3, [pc, #180]	; (800cd30 <Tim3_ISP+0x208>)
 800cc7a:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800cc7c:	4b2d      	ldr	r3, [pc, #180]	; (800cd34 <Tim3_ISP+0x20c>)
 800cc7e:	2201      	movs	r2, #1
 800cc80:	701a      	strb	r2, [r3, #0]
}
 800cc82:	e036      	b.n	800ccf2 <Tim3_ISP+0x1ca>
    mS_Cnt = 1000;
 800cc84:	4b21      	ldr	r3, [pc, #132]	; (800cd0c <Tim3_ISP+0x1e4>)
 800cc86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc8a:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800cc8c:	4b2a      	ldr	r3, [pc, #168]	; (800cd38 <Tim3_ISP+0x210>)
 800cc8e:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00d      	beq.n	800ccb2 <Tim3_ISP+0x18a>
 800cc96:	4b29      	ldr	r3, [pc, #164]	; (800cd3c <Tim3_ISP+0x214>)
 800cc98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd08      	ble.n	800ccb2 <Tim3_ISP+0x18a>
      StdBy_Time--;      //������ʱ
 800cca0:	4b26      	ldr	r3, [pc, #152]	; (800cd3c <Tim3_ISP+0x214>)
 800cca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	b21a      	sxth	r2, r3
 800ccae:	4b23      	ldr	r3, [pc, #140]	; (800cd3c <Tim3_ISP+0x214>)
 800ccb0:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800ccb2:	4b23      	ldr	r3, [pc, #140]	; (800cd40 <Tim3_ISP+0x218>)
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	b21b      	sxth	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dd0d      	ble.n	800ccd8 <Tim3_ISP+0x1b0>
      if(Cal_Flag == 0)
 800ccbc:	4b21      	ldr	r3, [pc, #132]	; (800cd44 <Tim3_ISP+0x21c>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d116      	bne.n	800ccf2 <Tim3_ISP+0x1ca>
    	  PopupCnt--;
 800ccc4:	4b1e      	ldr	r3, [pc, #120]	; (800cd40 <Tim3_ISP+0x218>)
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	b21b      	sxth	r3, r3
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	3b01      	subs	r3, #1
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	b21a      	sxth	r2, r3
 800ccd2:	4b1b      	ldr	r3, [pc, #108]	; (800cd40 <Tim3_ISP+0x218>)
 800ccd4:	801a      	strh	r2, [r3, #0]
}
 800ccd6:	e00c      	b.n	800ccf2 <Tim3_ISP+0x1ca>
      Close_Pop();        // �رնԻ���
 800ccd8:	f001 ff06 	bl	800eae8 <Close_Pop>
      if(Windows_Pop)
 800ccdc:	4b1a      	ldr	r3, [pc, #104]	; (800cd48 <Tim3_ISP+0x220>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <Tim3_ISP+0x1ca>
        Windows_Pop = 0;
 800cce4:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <Tim3_ISP+0x220>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800ccea:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800ccee:	f007 f86f 	bl	8013dd0 <Clr_WavePosi>
}
 800ccf2:	bf00      	nop
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000073f 	.word	0x2000073f
 800cd00:	2000073a 	.word	0x2000073a
 800cd04:	20000738 	.word	0x20000738
 800cd08:	2000073c 	.word	0x2000073c
 800cd0c:	20000736 	.word	0x20000736
 800cd10:	66666667 	.word	0x66666667
 800cd14:	20000741 	.word	0x20000741
 800cd18:	20000740 	.word	0x20000740
 800cd1c:	40020400 	.word	0x40020400
 800cd20:	20000742 	.word	0x20000742
 800cd24:	20000743 	.word	0x20000743
 800cd28:	2000072e 	.word	0x2000072e
 800cd2c:	20000734 	.word	0x20000734
 800cd30:	2000072c 	.word	0x2000072c
 800cd34:	2000072d 	.word	0x2000072d
 800cd38:	20000274 	.word	0x20000274
 800cd3c:	20002652 	.word	0x20002652
 800cd40:	20000000 	.word	0x20000000
 800cd44:	20000192 	.word	0x20000192
 800cd48:	2000265c 	.word	0x2000265c

0800cd4c <Fill_Base>:
unsigned short AA[205];  //one more than orginal size

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pBuf, R5:Cnt, R6:Tmp,
//void Fill_Base(R3 = u32 Color)// �л��������ɫ RET: R4+202 Used: R3-R5
void Fill_Base(void)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
	R4.A = (char*) &AA[204]; // 204��/2 ��408 Bytes
 800cd50:	4b12      	ldr	r3, [pc, #72]	; (800cd9c <Fill_Base+0x50>)
 800cd52:	4a13      	ldr	r2, [pc, #76]	; (800cda0 <Fill_Base+0x54>)
 800cd54:	601a      	str	r2, [r3, #0]
	R5 =102;
 800cd56:	4b13      	ldr	r3, [pc, #76]	; (800cda4 <Fill_Base+0x58>)
 800cd58:	2266      	movs	r2, #102	; 0x66
 800cd5a:	601a      	str	r2, [r3, #0]

Fill_Loop0:
	*(unsigned*)R4.A =R3;
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <Fill_Base+0x50>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a11      	ldr	r2, [pc, #68]	; (800cda8 <Fill_Base+0x5c>)
 800cd62:	6812      	ldr	r2, [r2, #0]
 800cd64:	601a      	str	r2, [r3, #0]
	R4.A= R4.A +4;
 800cd66:	4b0d      	ldr	r3, [pc, #52]	; (800cd9c <Fill_Base+0x50>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	4a0b      	ldr	r2, [pc, #44]	; (800cd9c <Fill_Base+0x50>)
 800cd6e:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800cd70:	4b0c      	ldr	r3, [pc, #48]	; (800cda4 <Fill_Base+0x58>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	4a0b      	ldr	r2, [pc, #44]	; (800cda4 <Fill_Base+0x58>)
 800cd78:	6013      	str	r3, [r2, #0]
	if (R5!=0)
 800cd7a:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <Fill_Base+0x58>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d000      	beq.n	800cd84 <Fill_Base+0x38>
	{
		goto Fill_Loop0;
 800cd82:	e7eb      	b.n	800cd5c <Fill_Base+0x10>
	}
	R4.A = (char*) &AA[203];
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <Fill_Base+0x50>)
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <Fill_Base+0x60>)
 800cd88:	601a      	str	r2, [r3, #0]
	R3= GRID;
 800cd8a:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <Fill_Base+0x5c>)
 800cd8c:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800cd90:	601a      	str	r2, [r3, #0]
}
 800cd92:	bf00      	nop
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	20000774 	.word	0x20000774
 800cda0:	20000910 	.word	0x20000910
 800cda4:	20000754 	.word	0x20000754
 800cda8:	20000750 	.word	0x20000750
 800cdac:	2000090e 	.word	0x2000090e

0800cdb0 <Buld_0>:

/*// void Buld_0(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R5*/
void Buld_0(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800cdb4:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <Buld_0+0x14>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdba:	f7ff ffc7 	bl	800cd4c <Fill_Base>
}
 800cdbe:	bf00      	nop
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	20000750 	.word	0x20000750

0800cdc8 <Buld_1>:

// void Buld_1(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_1(void)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	af00      	add	r7, sp, #0
	R3 = GRID_COLOR;
 800cdcc:	4b0e      	ldr	r3, [pc, #56]	; (800ce08 <Buld_1+0x40>)
 800cdce:	4a0f      	ldr	r2, [pc, #60]	; (800ce0c <Buld_1+0x44>)
 800cdd0:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800cdd2:	f7ff ffbb 	bl	800cd4c <Fill_Base>
	R3 =0;
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <Buld_1+0x40>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
	R5=402;
 800cddc:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <Buld_1+0x48>)
 800cdde:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800cde2:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cde4:	4b08      	ldr	r3, [pc, #32]	; (800ce08 <Buld_1+0x40>)
 800cde6:	6819      	ldr	r1, [r3, #0]
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <Buld_1+0x4c>)
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <Buld_1+0x48>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	b28a      	uxth	r2, r1
 800cdf4:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A -2)=R3;
 800cdf6:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <Buld_1+0x40>)
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <Buld_1+0x4c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3b02      	subs	r3, #2
 800ce00:	b292      	uxth	r2, r2
 800ce02:	801a      	strh	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	20000750 	.word	0x20000750
 800ce0c:	7bef7bef 	.word	0x7bef7bef
 800ce10:	20000754 	.word	0x20000754
 800ce14:	20000774 	.word	0x20000774

0800ce18 <Buld_2>:

// void Buld_2(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_2(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce1c:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <Buld_2+0x38>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce22:	f7ff ff93 	bl	800cd4c <Fill_Base>
	R5 =400;
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <Buld_2+0x3c>)
 800ce28:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ce2c:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce2e:	4b08      	ldr	r3, [pc, #32]	; (800ce50 <Buld_2+0x38>)
 800ce30:	6819      	ldr	r1, [r3, #0]
 800ce32:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <Buld_2+0x40>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	4b07      	ldr	r3, [pc, #28]	; (800ce54 <Buld_2+0x3c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	b28a      	uxth	r2, r1
 800ce3e:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A)=R3;
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <Buld_2+0x38>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <Buld_2+0x40>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	b292      	uxth	r2, r2
 800ce4a:	801a      	strh	r2, [r3, #0]
}
 800ce4c:	bf00      	nop
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20000750 	.word	0x20000750
 800ce54:	20000754 	.word	0x20000754
 800ce58:	20000774 	.word	0x20000774

0800ce5c <Buld_3>:

// void Buld_3(R4 = u16* pCol)   // ��������л������ı������� Used: R3-R6
void Buld_3(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ce60:	4b0e      	ldr	r3, [pc, #56]	; (800ce9c <Buld_3+0x40>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ce66:	f7ff ff71 	bl	800cd4c <Fill_Base>
	R5=450;
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	; (800cea0 <Buld_3+0x44>)
 800ce6c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ce70:	601a      	str	r2, [r3, #0]

Loop3:
	R5 = R5 -50;
 800ce72:	4b0b      	ldr	r3, [pc, #44]	; (800cea0 <Buld_3+0x44>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3b32      	subs	r3, #50	; 0x32
 800ce78:	4a09      	ldr	r2, [pc, #36]	; (800cea0 <Buld_3+0x44>)
 800ce7a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ce7c:	4b07      	ldr	r3, [pc, #28]	; (800ce9c <Buld_3+0x40>)
 800ce7e:	6819      	ldr	r1, [r3, #0]
 800ce80:	4b08      	ldr	r3, [pc, #32]	; (800cea4 <Buld_3+0x48>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <Buld_3+0x44>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4413      	add	r3, r2
 800ce8a:	b28a      	uxth	r2, r1
 800ce8c:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ce8e:	4b04      	ldr	r3, [pc, #16]	; (800cea0 <Buld_3+0x44>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d000      	beq.n	800ce98 <Buld_3+0x3c>
	{
		goto Loop3;
 800ce96:	e7ec      	b.n	800ce72 <Buld_3+0x16>
	}
	return;
 800ce98:	bf00      	nop
}
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000750 	.word	0x20000750
 800cea0:	20000754 	.word	0x20000754
 800cea4:	20000774 	.word	0x20000774

0800cea8 <Buld_4>:

// void Buld_4(R4 = u16* pCol)   // ���������л������ı�������
void Buld_4(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ceac:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <Buld_4+0x40>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ceb2:	f7ff ff4b 	bl	800cd4c <Fill_Base>
	R5=410;
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <Buld_4+0x44>)
 800ceb8:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800cebc:	601a      	str	r2, [r3, #0]

Loop7:
	R5 = R5 -10;
 800cebe:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <Buld_4+0x44>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3b0a      	subs	r3, #10
 800cec4:	4a09      	ldr	r2, [pc, #36]	; (800ceec <Buld_4+0x44>)
 800cec6:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <Buld_4+0x40>)
 800ceca:	6819      	ldr	r1, [r3, #0]
 800cecc:	4b08      	ldr	r3, [pc, #32]	; (800cef0 <Buld_4+0x48>)
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	4b06      	ldr	r3, [pc, #24]	; (800ceec <Buld_4+0x44>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4413      	add	r3, r2
 800ced6:	b28a      	uxth	r2, r1
 800ced8:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ceda:	4b04      	ldr	r3, [pc, #16]	; (800ceec <Buld_4+0x44>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d000      	beq.n	800cee4 <Buld_4+0x3c>
	{
		goto Loop7;
 800cee2:	e7ec      	b.n	800cebe <Buld_4+0x16>
	}
	return;
 800cee4:	bf00      	nop
}
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20000750 	.word	0x20000750
 800ceec:	20000754 	.word	0x20000754
 800cef0:	20000774 	.word	0x20000774

0800cef4 <Draw_Digit_Analog>:

// Draw_Digit(R0:pDat, R2:Col, R3:Color, R4:Posi, R8:Mask)// �����ֲ��� Used: R5-R7
// Draw_Analog(R2:Col, R3:Color, R4:pDat)// ��ģ�Ⲩ������  Used: R3-R7
void Draw_Digit_Analog(unsigned short DorA)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	80fb      	strh	r3, [r7, #6]
	if(DorA == 1)  //draw digit
 800cefe:	88fb      	ldrh	r3, [r7, #6]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d144      	bne.n	800cf8e <Draw_Digit_Analog+0x9a>
	{
	R7 =R0 +900;
 800cf04:	4b7d      	ldr	r3, [pc, #500]	; (800d0fc <Draw_Digit_Analog+0x208>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800cf0c:	4a7c      	ldr	r2, [pc, #496]	; (800d100 <Draw_Digit_Analog+0x20c>)
 800cf0e:	6013      	str	r3, [r2, #0]
	R7 = R7 + R2;
 800cf10:	4b7b      	ldr	r3, [pc, #492]	; (800d100 <Draw_Digit_Analog+0x20c>)
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	4b7b      	ldr	r3, [pc, #492]	; (800d104 <Draw_Digit_Analog+0x210>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4413      	add	r3, r2
 800cf1a:	4a79      	ldr	r2, [pc, #484]	; (800d100 <Draw_Digit_Analog+0x20c>)
 800cf1c:	6013      	str	r3, [r2, #0]
	R5 = *(char*) R7;
 800cf1e:	4b78      	ldr	r3, [pc, #480]	; (800d100 <Draw_Digit_Analog+0x20c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	461a      	mov	r2, r3
 800cf26:	4b78      	ldr	r3, [pc, #480]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf28:	601a      	str	r2, [r3, #0]
	R6 = *(char*) (R7 -1);
 800cf2a:	4b75      	ldr	r3, [pc, #468]	; (800d100 <Draw_Digit_Analog+0x20c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	4b75      	ldr	r3, [pc, #468]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cf36:	601a      	str	r2, [r3, #0]
	R4.I = R4.I >> 1;
 800cf38:	4b75      	ldr	r3, [pc, #468]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	085b      	lsrs	r3, r3, #1
 800cf3e:	4a74      	ldr	r2, [pc, #464]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf40:	6013      	str	r3, [r2, #0]
	R5 = R5 & R8;
 800cf42:	4b71      	ldr	r3, [pc, #452]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	4b73      	ldr	r3, [pc, #460]	; (800d114 <Draw_Digit_Analog+0x220>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	4a6e      	ldr	r2, [pc, #440]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf4e:	6013      	str	r3, [r2, #0]
	if (R5 == 0 )
 800cf50:	4b6d      	ldr	r3, [pc, #436]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <Draw_Digit_Analog+0x6e>
		R5 = R4.I;
 800cf58:	4b6d      	ldr	r3, [pc, #436]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a6a      	ldr	r2, [pc, #424]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	e004      	b.n	800cf6c <Draw_Digit_Analog+0x78>
	else
		R5 = R4.I + 30;
 800cf62:	4b6b      	ldr	r3, [pc, #428]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	331e      	adds	r3, #30
 800cf68:	4a67      	ldr	r2, [pc, #412]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cf6a:	6013      	str	r3, [r2, #0]
	R6 = R6 & R8;
 800cf6c:	4b67      	ldr	r3, [pc, #412]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	4b68      	ldr	r3, [pc, #416]	; (800d114 <Draw_Digit_Analog+0x220>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4013      	ands	r3, r2
 800cf76:	4a65      	ldr	r2, [pc, #404]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cf78:	6013      	str	r3, [r2, #0]
	if( R6 != 0)
 800cf7a:	4b64      	ldr	r3, [pc, #400]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01c      	beq.n	800cfbc <Draw_Digit_Analog+0xc8>
		R4.I = R4.I + 30;
 800cf82:	4b63      	ldr	r3, [pc, #396]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	331e      	adds	r3, #30
 800cf88:	4a61      	ldr	r2, [pc, #388]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf8a:	6013      	str	r3, [r2, #0]
	goto Analog0;
 800cf8c:	e016      	b.n	800cfbc <Draw_Digit_Analog+0xc8>
	}

	if(DorA == 0)  //draw analog
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 80a5 	bne.w	800d0e0 <Draw_Digit_Analog+0x1ec>
	{
		R4.A = R4.A +2;
 800cf96:	4b5e      	ldr	r3, [pc, #376]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	4a5c      	ldr	r2, [pc, #368]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cf9e:	6013      	str	r3, [r2, #0]
		R5 = *(char*)R4.A; //n1
 800cfa0:	4b5b      	ldr	r3, [pc, #364]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	4b57      	ldr	r3, [pc, #348]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cfaa:	601a      	str	r2, [r3, #0]
		R4.I = *(char*)(R4.A-1); //n0
 800cfac:	4b58      	ldr	r3, [pc, #352]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4b56      	ldr	r3, [pc, #344]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfb8:	601a      	str	r2, [r3, #0]
		goto Analog0;
 800cfba:	e000      	b.n	800cfbe <Draw_Digit_Analog+0xca>
	goto Analog0;
 800cfbc:	bf00      	nop

	R5 = R5 +50;
	R4.I =R4.I +50;

	Analog0:
	if (R5 == 255)
 800cfbe:	4b52      	ldr	r3, [pc, #328]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2bff      	cmp	r3, #255	; 0xff
 800cfc4:	f000 808e 	beq.w	800d0e4 <Draw_Digit_Analog+0x1f0>
		return;
	if (R5 == 0)
 800cfc8:	4b4f      	ldr	r3, [pc, #316]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f000 808b 	beq.w	800d0e8 <Draw_Digit_Analog+0x1f4>
		return;

	if(R5 >= R4.I)  // R5 = | n1 - n0 |
 800cfd2:	4b4f      	ldr	r3, [pc, #316]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	4b4c      	ldr	r3, [pc, #304]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d80b      	bhi.n	800cff6 <Draw_Digit_Analog+0x102>
	{
		R6 =R4.I;
 800cfde:	4b4c      	ldr	r3, [pc, #304]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a4a      	ldr	r2, [pc, #296]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cfe4:	6013      	str	r3, [r2, #0]
		R5 = R5 -R4.I;
 800cfe6:	4b48      	ldr	r3, [pc, #288]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b49      	ldr	r3, [pc, #292]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	4a45      	ldr	r2, [pc, #276]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	e00a      	b.n	800d00c <Draw_Digit_Analog+0x118>
	}
	else
	{
		R6 = R5;  // n1, n0 ����С���� R6
 800cff6:	4b44      	ldr	r3, [pc, #272]	; (800d108 <Draw_Digit_Analog+0x214>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a44      	ldr	r2, [pc, #272]	; (800d10c <Draw_Digit_Analog+0x218>)
 800cffc:	6013      	str	r3, [r2, #0]
		R5 = R4.I -R5;
 800cffe:	4b44      	ldr	r3, [pc, #272]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4b41      	ldr	r3, [pc, #260]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	4a3f      	ldr	r2, [pc, #252]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d00a:	6013      	str	r3, [r2, #0]
	}

	if(R6 > 199)
 800d00c:	4b3f      	ldr	r3, [pc, #252]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2bc7      	cmp	r3, #199	; 0xc7
 800d012:	d86b      	bhi.n	800d0ec <Draw_Digit_Analog+0x1f8>
		return;

	R4.I = R5 +R6;
 800d014:	4b3c      	ldr	r3, [pc, #240]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	4b3c      	ldr	r3, [pc, #240]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4413      	add	r3, r2
 800d01e:	4a3c      	ldr	r2, [pc, #240]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800d020:	6013      	str	r3, [r2, #0]
	if(R4.I >199)
 800d022:	4b3b      	ldr	r3, [pc, #236]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2bc7      	cmp	r3, #199	; 0xc7
 800d028:	d906      	bls.n	800d038 <Draw_Digit_Analog+0x144>
	{
		R5 = 199 - R6;
 800d02a:	4b38      	ldr	r3, [pc, #224]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800d032:	4a35      	ldr	r2, [pc, #212]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d034:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d036:	e020      	b.n	800d07a <Draw_Digit_Analog+0x186>
	}

	if( R4.I < 3 )
 800d038:	4b35      	ldr	r3, [pc, #212]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d957      	bls.n	800d0f0 <Draw_Digit_Analog+0x1fc>
		return;

	if( R6 <3)
 800d040:	4b32      	ldr	r3, [pc, #200]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b02      	cmp	r3, #2
 800d046:	d808      	bhi.n	800d05a <Draw_Digit_Analog+0x166>
	{
		R6 = 3;
 800d048:	4b30      	ldr	r3, [pc, #192]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d04a:	2203      	movs	r2, #3
 800d04c:	601a      	str	r2, [r3, #0]
		R5 =R4.I -3;
 800d04e:	4b30      	ldr	r3, [pc, #192]	; (800d110 <Draw_Digit_Analog+0x21c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3b03      	subs	r3, #3
 800d054:	4a2c      	ldr	r2, [pc, #176]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d056:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800d058:	e00f      	b.n	800d07a <Draw_Digit_Analog+0x186>
	}

	if(R5 ==0 )
 800d05a:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <Draw_Digit_Analog+0x184>
	{
		R6 = R6 -1;
 800d062:	4b2a      	ldr	r3, [pc, #168]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	3b01      	subs	r3, #1
 800d068:	4a28      	ldr	r2, [pc, #160]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d06a:	6013      	str	r3, [r2, #0]
		R5 = R5 +2;
 800d06c:	4b26      	ldr	r3, [pc, #152]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3302      	adds	r3, #2
 800d072:	4a25      	ldr	r2, [pc, #148]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	e000      	b.n	800d07a <Draw_Digit_Analog+0x186>
	}

Analog2:
 800d078:	bf00      	nop
	if( R5>= 20)
 800d07a:	4b23      	ldr	r3, [pc, #140]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b13      	cmp	r3, #19
 800d080:	d904      	bls.n	800d08c <Draw_Digit_Analog+0x198>
		R3= R3 +20;
 800d082:	4b25      	ldr	r3, [pc, #148]	; (800d118 <Draw_Digit_Analog+0x224>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3314      	adds	r3, #20
 800d088:	4a23      	ldr	r2, [pc, #140]	; (800d118 <Draw_Digit_Analog+0x224>)
 800d08a:	6013      	str	r3, [r2, #0]

	R3 =  *(unsigned short*) (R1 +R3);
 800d08c:	4b23      	ldr	r3, [pc, #140]	; (800d11c <Draw_Digit_Analog+0x228>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	4b21      	ldr	r3, [pc, #132]	; (800d118 <Draw_Digit_Analog+0x224>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4413      	add	r3, r2
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	461a      	mov	r2, r3
 800d09a:	4b1f      	ldr	r3, [pc, #124]	; (800d118 <Draw_Digit_Analog+0x224>)
 800d09c:	601a      	str	r2, [r3, #0]
	R6 = R6 << 1;
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	4a19      	ldr	r2, [pc, #100]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0a6:	6013      	str	r3, [r2, #0]
//    ADD     R6,  SP, R6            ;// ȷ����ʾλ��
    R6 = (unsigned) &AA[204- R6/2];
 800d0a8:	4b18      	ldr	r3, [pc, #96]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	; (800d120 <Draw_Digit_Analog+0x22c>)
 800d0b6:	4413      	add	r3, r2
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4b14      	ldr	r3, [pc, #80]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0bc:	601a      	str	r2, [r3, #0]

Analog3:
	*(unsigned short*)R6 = R3;
 800d0be:	4b16      	ldr	r3, [pc, #88]	; (800d118 <Draw_Digit_Analog+0x224>)
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	4b12      	ldr	r3, [pc, #72]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	b292      	uxth	r2, r2
 800d0c8:	801a      	strh	r2, [r3, #0]
	R6 =R6 +2;
 800d0ca:	4b10      	ldr	r3, [pc, #64]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3302      	adds	r3, #2
 800d0d0:	4a0e      	ldr	r2, [pc, #56]	; (800d10c <Draw_Digit_Analog+0x218>)
 800d0d2:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800d0d4:	4b0c      	ldr	r3, [pc, #48]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4a0b      	ldr	r2, [pc, #44]	; (800d108 <Draw_Digit_Analog+0x214>)
 800d0dc:	6013      	str	r3, [r2, #0]
	if(R5>=0)
		goto Analog3;
 800d0de:	e7ee      	b.n	800d0be <Draw_Digit_Analog+0x1ca>
	return;
 800d0e0:	bf00      	nop
 800d0e2:	e006      	b.n	800d0f2 <Draw_Digit_Analog+0x1fe>
		return;
 800d0e4:	bf00      	nop
 800d0e6:	e004      	b.n	800d0f2 <Draw_Digit_Analog+0x1fe>
		return;
 800d0e8:	bf00      	nop
 800d0ea:	e002      	b.n	800d0f2 <Draw_Digit_Analog+0x1fe>
		return;
 800d0ec:	bf00      	nop
 800d0ee:	e000      	b.n	800d0f2 <Draw_Digit_Analog+0x1fe>
		return;
 800d0f0:	bf00      	nop

return;
}
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	20000744 	.word	0x20000744
 800d100:	2000075c 	.word	0x2000075c
 800d104:	2000074c 	.word	0x2000074c
 800d108:	20000754 	.word	0x20000754
 800d10c:	20000758 	.word	0x20000758
 800d110:	20000774 	.word	0x20000774
 800d114:	20000760 	.word	0x20000760
 800d118:	20000750 	.word	0x20000750
 800d11c:	20000748 	.word	0x20000748
 800d120:	20000778 	.word	0x20000778

0800d124 <Cursor_0>:

// Cursor_0(R1:pTab, R2:Col)// ���������α�˵�  Used: R3-R6
void Cursor_0(short *pTab)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d12c:	4b3c      	ldr	r3, [pc, #240]	; (800d220 <Cursor_0+0xfc>)
 800d12e:	2206      	movs	r2, #6
 800d130:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d132:	4b3c      	ldr	r3, [pc, #240]	; (800d224 <Cursor_0+0x100>)
 800d134:	4a3c      	ldr	r2, [pc, #240]	; (800d228 <Cursor_0+0x104>)
 800d136:	601a      	str	r2, [r3, #0]

Cursor01:
	R5 = pTab[R3];
 800d138:	4b39      	ldr	r3, [pc, #228]	; (800d220 <Cursor_0+0xfc>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d146:	461a      	mov	r2, r3
 800d148:	4b38      	ldr	r3, [pc, #224]	; (800d22c <Cursor_0+0x108>)
 800d14a:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d14c:	4b37      	ldr	r3, [pc, #220]	; (800d22c <Cursor_0+0x108>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d15c      	bne.n	800d212 <Cursor_0+0xee>
	{
		goto Cursor02;
	}
	R5 = pTab[R3 +10];
 800d158:	4b31      	ldr	r3, [pc, #196]	; (800d220 <Cursor_0+0xfc>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	330a      	adds	r3, #10
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	4413      	add	r3, r2
 800d164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d168:	461a      	mov	r2, r3
 800d16a:	4b30      	ldr	r3, [pc, #192]	; (800d22c <Cursor_0+0x108>)
 800d16c:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d16e:	4b2f      	ldr	r3, [pc, #188]	; (800d22c <Cursor_0+0x108>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	085b      	lsrs	r3, r3, #1
 800d174:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	4a2d      	ldr	r2, [pc, #180]	; (800d230 <Cursor_0+0x10c>)
 800d17c:	4413      	add	r3, r2
 800d17e:	4a29      	ldr	r2, [pc, #164]	; (800d224 <Cursor_0+0x100>)
 800d180:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d182:	4b27      	ldr	r3, [pc, #156]	; (800d220 <Cursor_0+0xfc>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3314      	adds	r3, #20
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	4413      	add	r3, r2
 800d18e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d192:	461a      	mov	r2, r3
 800d194:	4b27      	ldr	r3, [pc, #156]	; (800d234 <Cursor_0+0x110>)
 800d196:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -4;
 800d198:	4b22      	ldr	r3, [pc, #136]	; (800d224 <Cursor_0+0x100>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3b04      	subs	r3, #4
 800d19e:	4a21      	ldr	r2, [pc, #132]	; (800d224 <Cursor_0+0x100>)
 800d1a0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1a2:	4b24      	ldr	r3, [pc, #144]	; (800d234 <Cursor_0+0x110>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	4b1f      	ldr	r3, [pc, #124]	; (800d224 <Cursor_0+0x100>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1ae:	4b1d      	ldr	r3, [pc, #116]	; (800d224 <Cursor_0+0x100>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3302      	adds	r3, #2
 800d1b4:	4a1b      	ldr	r2, [pc, #108]	; (800d224 <Cursor_0+0x100>)
 800d1b6:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	; (800d234 <Cursor_0+0x110>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	4b19      	ldr	r3, [pc, #100]	; (800d224 <Cursor_0+0x100>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1c4:	4b17      	ldr	r3, [pc, #92]	; (800d224 <Cursor_0+0x100>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	4a16      	ldr	r2, [pc, #88]	; (800d224 <Cursor_0+0x100>)
 800d1cc:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1ce:	4b19      	ldr	r3, [pc, #100]	; (800d234 <Cursor_0+0x110>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b14      	ldr	r3, [pc, #80]	; (800d224 <Cursor_0+0x100>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	b292      	uxth	r2, r2
 800d1d8:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <Cursor_0+0x100>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3302      	adds	r3, #2
 800d1e0:	4a10      	ldr	r2, [pc, #64]	; (800d224 <Cursor_0+0x100>)
 800d1e2:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1e4:	4b13      	ldr	r3, [pc, #76]	; (800d234 <Cursor_0+0x110>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	4b0e      	ldr	r3, [pc, #56]	; (800d224 <Cursor_0+0x100>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	b292      	uxth	r2, r2
 800d1ee:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d1f0:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <Cursor_0+0x100>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3302      	adds	r3, #2
 800d1f6:	4a0b      	ldr	r2, [pc, #44]	; (800d224 <Cursor_0+0x100>)
 800d1f8:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1fa:	4b0e      	ldr	r3, [pc, #56]	; (800d234 <Cursor_0+0x110>)
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	4b09      	ldr	r3, [pc, #36]	; (800d224 <Cursor_0+0x100>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	b292      	uxth	r2, r2
 800d204:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d206:	4b07      	ldr	r3, [pc, #28]	; (800d224 <Cursor_0+0x100>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3302      	adds	r3, #2
 800d20c:	4a05      	ldr	r2, [pc, #20]	; (800d224 <Cursor_0+0x100>)
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	e000      	b.n	800d214 <Cursor_0+0xf0>
		goto Cursor02;
 800d212:	bf00      	nop

Cursor02:
	R3 = R3 -1;
 800d214:	4b02      	ldr	r3, [pc, #8]	; (800d220 <Cursor_0+0xfc>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3b01      	subs	r3, #1
 800d21a:	4a01      	ldr	r2, [pc, #4]	; (800d220 <Cursor_0+0xfc>)
 800d21c:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor01;
 800d21e:	e78b      	b.n	800d138 <Cursor_0+0x14>
 800d220:	20000750 	.word	0x20000750
 800d224:	20000774 	.word	0x20000774
 800d228:	20000910 	.word	0x20000910
 800d22c:	20000754 	.word	0x20000754
 800d230:	20000778 	.word	0x20000778
 800d234:	20000758 	.word	0x20000758

0800d238 <Cursor_1>:
	}
	return;
}

void Cursor_1(short *pTab)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d240:	4b31      	ldr	r3, [pc, #196]	; (800d308 <Cursor_1+0xd0>)
 800d242:	2206      	movs	r2, #6
 800d244:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d246:	4b31      	ldr	r3, [pc, #196]	; (800d30c <Cursor_1+0xd4>)
 800d248:	4a31      	ldr	r2, [pc, #196]	; (800d310 <Cursor_1+0xd8>)
 800d24a:	601a      	str	r2, [r3, #0]

Cursor11:
	R5 = pTab[R3];
 800d24c:	4b2e      	ldr	r3, [pc, #184]	; (800d308 <Cursor_1+0xd0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	4413      	add	r3, r2
 800d256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d25a:	461a      	mov	r2, r3
 800d25c:	4b2d      	ldr	r3, [pc, #180]	; (800d314 <Cursor_1+0xdc>)
 800d25e:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d260:	4b2c      	ldr	r3, [pc, #176]	; (800d314 <Cursor_1+0xdc>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0301 	and.w	r3, r3, #1
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d146      	bne.n	800d2fa <Cursor_1+0xc2>
	{
		goto Cursor12;
	}
	R5 = pTab[R3 +10];
 800d26c:	4b26      	ldr	r3, [pc, #152]	; (800d308 <Cursor_1+0xd0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	330a      	adds	r3, #10
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	4413      	add	r3, r2
 800d278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d27c:	461a      	mov	r2, r3
 800d27e:	4b25      	ldr	r3, [pc, #148]	; (800d314 <Cursor_1+0xdc>)
 800d280:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d282:	4b24      	ldr	r3, [pc, #144]	; (800d314 <Cursor_1+0xdc>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	085b      	lsrs	r3, r3, #1
 800d288:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4a22      	ldr	r2, [pc, #136]	; (800d318 <Cursor_1+0xe0>)
 800d290:	4413      	add	r3, r2
 800d292:	4a1e      	ldr	r2, [pc, #120]	; (800d30c <Cursor_1+0xd4>)
 800d294:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d296:	4b1c      	ldr	r3, [pc, #112]	; (800d308 <Cursor_1+0xd0>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3314      	adds	r3, #20
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	4b1c      	ldr	r3, [pc, #112]	; (800d31c <Cursor_1+0xe4>)
 800d2aa:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -2;
 800d2ac:	4b17      	ldr	r3, [pc, #92]	; (800d30c <Cursor_1+0xd4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3b02      	subs	r3, #2
 800d2b2:	4a16      	ldr	r2, [pc, #88]	; (800d30c <Cursor_1+0xd4>)
 800d2b4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2b6:	4b19      	ldr	r3, [pc, #100]	; (800d31c <Cursor_1+0xe4>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	4b14      	ldr	r3, [pc, #80]	; (800d30c <Cursor_1+0xd4>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	b292      	uxth	r2, r2
 800d2c0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2c2:	4b12      	ldr	r3, [pc, #72]	; (800d30c <Cursor_1+0xd4>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3302      	adds	r3, #2
 800d2c8:	4a10      	ldr	r2, [pc, #64]	; (800d30c <Cursor_1+0xd4>)
 800d2ca:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2cc:	4b13      	ldr	r3, [pc, #76]	; (800d31c <Cursor_1+0xe4>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	4b0e      	ldr	r3, [pc, #56]	; (800d30c <Cursor_1+0xd4>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	b292      	uxth	r2, r2
 800d2d6:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <Cursor_1+0xd4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3302      	adds	r3, #2
 800d2de:	4a0b      	ldr	r2, [pc, #44]	; (800d30c <Cursor_1+0xd4>)
 800d2e0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	; (800d31c <Cursor_1+0xe4>)
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b09      	ldr	r3, [pc, #36]	; (800d30c <Cursor_1+0xd4>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d2ee:	4b07      	ldr	r3, [pc, #28]	; (800d30c <Cursor_1+0xd4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	4a05      	ldr	r2, [pc, #20]	; (800d30c <Cursor_1+0xd4>)
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	e000      	b.n	800d2fc <Cursor_1+0xc4>
		goto Cursor12;
 800d2fa:	bf00      	nop

Cursor12:
	R3 = R3 -1;
 800d2fc:	4b02      	ldr	r3, [pc, #8]	; (800d308 <Cursor_1+0xd0>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3b01      	subs	r3, #1
 800d302:	4a01      	ldr	r2, [pc, #4]	; (800d308 <Cursor_1+0xd0>)
 800d304:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor11;
 800d306:	e7a1      	b.n	800d24c <Cursor_1+0x14>
 800d308:	20000750 	.word	0x20000750
 800d30c:	20000774 	.word	0x20000774
 800d310:	20000910 	.word	0x20000910
 800d314:	20000754 	.word	0x20000754
 800d318:	20000778 	.word	0x20000778
 800d31c:	20000758 	.word	0x20000758

0800d320 <Cursor_2>:
	}
	return;
}

void Cursor_2(short *pTab)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d328:	4b21      	ldr	r3, [pc, #132]	; (800d3b0 <Cursor_2+0x90>)
 800d32a:	2206      	movs	r2, #6
 800d32c:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d32e:	4b21      	ldr	r3, [pc, #132]	; (800d3b4 <Cursor_2+0x94>)
 800d330:	4a21      	ldr	r2, [pc, #132]	; (800d3b8 <Cursor_2+0x98>)
 800d332:	601a      	str	r2, [r3, #0]

Cursor21:
	R5 = pTab[R3];
 800d334:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <Cursor_2+0x90>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	4413      	add	r3, r2
 800d33e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d342:	461a      	mov	r2, r3
 800d344:	4b1d      	ldr	r3, [pc, #116]	; (800d3bc <Cursor_2+0x9c>)
 800d346:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800d348:	4b1c      	ldr	r3, [pc, #112]	; (800d3bc <Cursor_2+0x9c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d126      	bne.n	800d3a2 <Cursor_2+0x82>
	{
		goto Cursor22;
	}
	R5 = pTab[R3 +10];
 800d354:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <Cursor_2+0x90>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	330a      	adds	r3, #10
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4413      	add	r3, r2
 800d360:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d364:	461a      	mov	r2, r3
 800d366:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <Cursor_2+0x9c>)
 800d368:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d36a:	4b14      	ldr	r3, [pc, #80]	; (800d3bc <Cursor_2+0x9c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	085b      	lsrs	r3, r3, #1
 800d370:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d374:	005b      	lsls	r3, r3, #1
 800d376:	4a12      	ldr	r2, [pc, #72]	; (800d3c0 <Cursor_2+0xa0>)
 800d378:	4413      	add	r3, r2
 800d37a:	4a0e      	ldr	r2, [pc, #56]	; (800d3b4 <Cursor_2+0x94>)
 800d37c:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d37e:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <Cursor_2+0x90>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3314      	adds	r3, #20
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	4413      	add	r3, r2
 800d38a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d38e:	461a      	mov	r2, r3
 800d390:	4b0c      	ldr	r3, [pc, #48]	; (800d3c4 <Cursor_2+0xa4>)
 800d392:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d394:	4b0b      	ldr	r3, [pc, #44]	; (800d3c4 <Cursor_2+0xa4>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <Cursor_2+0x94>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	b292      	uxth	r2, r2
 800d39e:	801a      	strh	r2, [r3, #0]
 800d3a0:	e000      	b.n	800d3a4 <Cursor_2+0x84>
		goto Cursor22;
 800d3a2:	bf00      	nop

Cursor22:
	R3 = R3 -1;
 800d3a4:	4b02      	ldr	r3, [pc, #8]	; (800d3b0 <Cursor_2+0x90>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	4a01      	ldr	r2, [pc, #4]	; (800d3b0 <Cursor_2+0x90>)
 800d3ac:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor21;
 800d3ae:	e7c1      	b.n	800d334 <Cursor_2+0x14>
 800d3b0:	20000750 	.word	0x20000750
 800d3b4:	20000774 	.word	0x20000774
 800d3b8:	20000910 	.word	0x20000910
 800d3bc:	20000754 	.word	0x20000754
 800d3c0:	20000778 	.word	0x20000778
 800d3c4:	20000758 	.word	0x20000758

0800d3c8 <Cursor_3>:
	return;
}

// Cursor_3(R1:pTab, R2:Col)// ���������α���  Used: R3-R6
void Cursor_3(short *pTab)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	R3 =6;
 800d3d0:	4b2a      	ldr	r3, [pc, #168]	; (800d47c <Cursor_3+0xb4>)
 800d3d2:	2206      	movs	r2, #6
 800d3d4:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800d3d6:	4b2a      	ldr	r3, [pc, #168]	; (800d480 <Cursor_3+0xb8>)
 800d3d8:	4a2a      	ldr	r2, [pc, #168]	; (800d484 <Cursor_3+0xbc>)
 800d3da:	601a      	str	r2, [r3, #0]

Cursor31:
	R5 = pTab[R3];
 800d3dc:	4b27      	ldr	r3, [pc, #156]	; (800d47c <Cursor_3+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4b26      	ldr	r3, [pc, #152]	; (800d488 <Cursor_3+0xc0>)
 800d3ee:	601a      	str	r2, [r3, #0]
	if( (R5&2) != 0)
 800d3f0:	4b25      	ldr	r3, [pc, #148]	; (800d488 <Cursor_3+0xc0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f003 0302 	and.w	r3, r3, #2
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d135      	bne.n	800d468 <Cursor_3+0xa0>
	{
		goto Cursor32;
	}

	R5= R2 -1;
 800d3fc:	4b23      	ldr	r3, [pc, #140]	; (800d48c <Cursor_3+0xc4>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3b01      	subs	r3, #1
 800d402:	4a21      	ldr	r2, [pc, #132]	; (800d488 <Cursor_3+0xc0>)
 800d404:	6013      	str	r3, [r2, #0]
	R5 = R5 &3;
 800d406:	4b20      	ldr	r3, [pc, #128]	; (800d488 <Cursor_3+0xc0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <Cursor_3+0xc0>)
 800d410:	6013      	str	r3, [r2, #0]
	if( R5 != 0)
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <Cursor_3+0xc0>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d128      	bne.n	800d46c <Cursor_3+0xa4>
	{
		goto Cursor32;
	}

	R5 = pTab[R3 +10];
 800d41a:	4b18      	ldr	r3, [pc, #96]	; (800d47c <Cursor_3+0xb4>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	330a      	adds	r3, #10
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d42a:	461a      	mov	r2, r3
 800d42c:	4b16      	ldr	r3, [pc, #88]	; (800d488 <Cursor_3+0xc0>)
 800d42e:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800d430:	4b15      	ldr	r3, [pc, #84]	; (800d488 <Cursor_3+0xc0>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	085b      	lsrs	r3, r3, #1
 800d436:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d43a:	005b      	lsls	r3, r3, #1
 800d43c:	4a14      	ldr	r2, [pc, #80]	; (800d490 <Cursor_3+0xc8>)
 800d43e:	4413      	add	r3, r2
 800d440:	4a0f      	ldr	r2, [pc, #60]	; (800d480 <Cursor_3+0xb8>)
 800d442:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800d444:	4b0d      	ldr	r3, [pc, #52]	; (800d47c <Cursor_3+0xb4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3314      	adds	r3, #20
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	4413      	add	r3, r2
 800d450:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d454:	461a      	mov	r2, r3
 800d456:	4b0f      	ldr	r3, [pc, #60]	; (800d494 <Cursor_3+0xcc>)
 800d458:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d45a:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <Cursor_3+0xcc>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b08      	ldr	r3, [pc, #32]	; (800d480 <Cursor_3+0xb8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	b292      	uxth	r2, r2
 800d464:	801a      	strh	r2, [r3, #0]
 800d466:	e002      	b.n	800d46e <Cursor_3+0xa6>
		goto Cursor32;
 800d468:	bf00      	nop
 800d46a:	e000      	b.n	800d46e <Cursor_3+0xa6>
		goto Cursor32;
 800d46c:	bf00      	nop

Cursor32:
	R3 = R3 -1;
 800d46e:	4b03      	ldr	r3, [pc, #12]	; (800d47c <Cursor_3+0xb4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3b01      	subs	r3, #1
 800d474:	4a01      	ldr	r2, [pc, #4]	; (800d47c <Cursor_3+0xb4>)
 800d476:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor31;
 800d478:	e7b0      	b.n	800d3dc <Cursor_3+0x14>
 800d47a:	bf00      	nop
 800d47c:	20000750 	.word	0x20000750
 800d480:	20000774 	.word	0x20000774
 800d484:	20000910 	.word	0x20000910
 800d488:	20000754 	.word	0x20000754
 800d48c:	2000074c 	.word	0x2000074c
 800d490:	20000778 	.word	0x20000778
 800d494:	20000758 	.word	0x20000758

0800d498 <Cursor_4>:
	return;
}

// Cursor_4(R1:pTab, R2:Col)// �����л��α�˵�  Used: R3-R8
void Cursor_4(short *pTab)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
	R3 = 7;
 800d4a0:	4b7a      	ldr	r3, [pc, #488]	; (800d68c <Cursor_4+0x1f4>)
 800d4a2:	2207      	movs	r2, #7
 800d4a4:	601a      	str	r2, [r3, #0]

Cursor40:
	R4.A = (char*) &AA[204];
 800d4a6:	4b7a      	ldr	r3, [pc, #488]	; (800d690 <Cursor_4+0x1f8>)
 800d4a8:	4a7a      	ldr	r2, [pc, #488]	; (800d694 <Cursor_4+0x1fc>)
 800d4aa:	601a      	str	r2, [r3, #0]
	R5 = pTab[R3];
 800d4ac:	4b77      	ldr	r3, [pc, #476]	; (800d68c <Cursor_4+0x1f4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	005b      	lsls	r3, r3, #1
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	4b76      	ldr	r3, [pc, #472]	; (800d698 <Cursor_4+0x200>)
 800d4be:	601a      	str	r2, [r3, #0]
	if((R5 & 1) == 0)
 800d4c0:	4b75      	ldr	r3, [pc, #468]	; (800d698 <Cursor_4+0x200>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 0301 	and.w	r3, r3, #1
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f040 8145 	bne.w	800d758 <Cursor_4+0x2c0>
	{
		goto Cursor41;
 800d4ce:	bf00      	nop
	}
	goto Cursor49;

Cursor41:
	R5 = pTab[R3+10];
 800d4d0:	4b6e      	ldr	r3, [pc, #440]	; (800d68c <Cursor_4+0x1f4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	330a      	adds	r3, #10
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	4413      	add	r3, r2
 800d4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	4b6d      	ldr	r3, [pc, #436]	; (800d698 <Cursor_4+0x200>)
 800d4e4:	601a      	str	r2, [r3, #0]
	R6 = pTab[R3+20];
 800d4e6:	4b69      	ldr	r3, [pc, #420]	; (800d68c <Cursor_4+0x1f4>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3314      	adds	r3, #20
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	4b68      	ldr	r3, [pc, #416]	; (800d69c <Cursor_4+0x204>)
 800d4fa:	601a      	str	r2, [r3, #0]

	R8 =R5 -2;
 800d4fc:	4b66      	ldr	r3, [pc, #408]	; (800d698 <Cursor_4+0x200>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	3b02      	subs	r3, #2
 800d502:	4a67      	ldr	r2, [pc, #412]	; (800d6a0 <Cursor_4+0x208>)
 800d504:	6013      	str	r3, [r2, #0]
	if (R5 != R8)
 800d506:	4b64      	ldr	r3, [pc, #400]	; (800d698 <Cursor_4+0x200>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4b65      	ldr	r3, [pc, #404]	; (800d6a0 <Cursor_4+0x208>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d112      	bne.n	800d538 <Cursor_4+0xa0>
	{
		goto Cursor42;
	}

	*(unsigned short*)R4.A =R6;
 800d512:	4b62      	ldr	r3, [pc, #392]	; (800d69c <Cursor_4+0x204>)
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b5e      	ldr	r3, [pc, #376]	; (800d690 <Cursor_4+0x1f8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	b292      	uxth	r2, r2
 800d51c:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +404;
 800d51e:	4b5c      	ldr	r3, [pc, #368]	; (800d690 <Cursor_4+0x1f8>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d526:	4a5a      	ldr	r2, [pc, #360]	; (800d690 <Cursor_4+0x1f8>)
 800d528:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d52a:	4b5c      	ldr	r3, [pc, #368]	; (800d69c <Cursor_4+0x204>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	4b58      	ldr	r3, [pc, #352]	; (800d690 <Cursor_4+0x1f8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	b292      	uxth	r2, r2
 800d534:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d536:	e114      	b.n	800d762 <Cursor_4+0x2ca>
		goto Cursor42;
 800d538:	bf00      	nop

Cursor42:
	R8 = R8 +1;
 800d53a:	4b59      	ldr	r3, [pc, #356]	; (800d6a0 <Cursor_4+0x208>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3301      	adds	r3, #1
 800d540:	4a57      	ldr	r2, [pc, #348]	; (800d6a0 <Cursor_4+0x208>)
 800d542:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d544:	4b57      	ldr	r3, [pc, #348]	; (800d6a4 <Cursor_4+0x20c>)
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	4b55      	ldr	r3, [pc, #340]	; (800d6a0 <Cursor_4+0x208>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d128      	bne.n	800d5a2 <Cursor_4+0x10a>
	{
		goto Cursor43;
	}

	*(unsigned short*)R4.A =R6;
 800d550:	4b52      	ldr	r3, [pc, #328]	; (800d69c <Cursor_4+0x204>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	4b4e      	ldr	r3, [pc, #312]	; (800d690 <Cursor_4+0x1f8>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	b292      	uxth	r2, r2
 800d55a:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d55c:	4b4c      	ldr	r3, [pc, #304]	; (800d690 <Cursor_4+0x1f8>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	3302      	adds	r3, #2
 800d562:	4a4b      	ldr	r2, [pc, #300]	; (800d690 <Cursor_4+0x1f8>)
 800d564:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d566:	4b4d      	ldr	r3, [pc, #308]	; (800d69c <Cursor_4+0x204>)
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4b49      	ldr	r3, [pc, #292]	; (800d690 <Cursor_4+0x1f8>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	b292      	uxth	r2, r2
 800d570:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +400;
 800d572:	4b47      	ldr	r3, [pc, #284]	; (800d690 <Cursor_4+0x1f8>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d57a:	4a45      	ldr	r2, [pc, #276]	; (800d690 <Cursor_4+0x1f8>)
 800d57c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d57e:	4b47      	ldr	r3, [pc, #284]	; (800d69c <Cursor_4+0x204>)
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4b43      	ldr	r3, [pc, #268]	; (800d690 <Cursor_4+0x1f8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	b292      	uxth	r2, r2
 800d588:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d58a:	4b41      	ldr	r3, [pc, #260]	; (800d690 <Cursor_4+0x1f8>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3302      	adds	r3, #2
 800d590:	4a3f      	ldr	r2, [pc, #252]	; (800d690 <Cursor_4+0x1f8>)
 800d592:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d594:	4b41      	ldr	r3, [pc, #260]	; (800d69c <Cursor_4+0x204>)
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	4b3d      	ldr	r3, [pc, #244]	; (800d690 <Cursor_4+0x1f8>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	b292      	uxth	r2, r2
 800d59e:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d5a0:	e0df      	b.n	800d762 <Cursor_4+0x2ca>
		goto Cursor43;
 800d5a2:	bf00      	nop

Cursor43:
	R8 = R8 +1;
 800d5a4:	4b3e      	ldr	r3, [pc, #248]	; (800d6a0 <Cursor_4+0x208>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	4a3d      	ldr	r2, [pc, #244]	; (800d6a0 <Cursor_4+0x208>)
 800d5ac:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d5ae:	4b3d      	ldr	r3, [pc, #244]	; (800d6a4 <Cursor_4+0x20c>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b3b      	ldr	r3, [pc, #236]	; (800d6a0 <Cursor_4+0x208>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d166      	bne.n	800d688 <Cursor_4+0x1f0>
	{
		goto Cursor45;
	}

	*(unsigned short*)R4.A =R6;
 800d5ba:	4b38      	ldr	r3, [pc, #224]	; (800d69c <Cursor_4+0x204>)
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	4b34      	ldr	r3, [pc, #208]	; (800d690 <Cursor_4+0x1f8>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	b292      	uxth	r2, r2
 800d5c4:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5c6:	4b32      	ldr	r3, [pc, #200]	; (800d690 <Cursor_4+0x1f8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3302      	adds	r3, #2
 800d5cc:	4a30      	ldr	r2, [pc, #192]	; (800d690 <Cursor_4+0x1f8>)
 800d5ce:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5d0:	4b32      	ldr	r3, [pc, #200]	; (800d69c <Cursor_4+0x204>)
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	4b2e      	ldr	r3, [pc, #184]	; (800d690 <Cursor_4+0x1f8>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	b292      	uxth	r2, r2
 800d5da:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d5dc:	4b2c      	ldr	r3, [pc, #176]	; (800d690 <Cursor_4+0x1f8>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	4a2b      	ldr	r2, [pc, #172]	; (800d690 <Cursor_4+0x1f8>)
 800d5e4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d5e6:	4b2d      	ldr	r3, [pc, #180]	; (800d69c <Cursor_4+0x204>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	4b29      	ldr	r3, [pc, #164]	; (800d690 <Cursor_4+0x1f8>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	b292      	uxth	r2, r2
 800d5f0:	801a      	strh	r2, [r3, #0]
	R4.A = (char*) &AA[4];
 800d5f2:	4b27      	ldr	r3, [pc, #156]	; (800d690 <Cursor_4+0x1f8>)
 800d5f4:	4a2c      	ldr	r2, [pc, #176]	; (800d6a8 <Cursor_4+0x210>)
 800d5f6:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d5f8:	4b28      	ldr	r3, [pc, #160]	; (800d69c <Cursor_4+0x204>)
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	4b24      	ldr	r3, [pc, #144]	; (800d690 <Cursor_4+0x1f8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	b292      	uxth	r2, r2
 800d602:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d604:	4b22      	ldr	r3, [pc, #136]	; (800d690 <Cursor_4+0x1f8>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3302      	adds	r3, #2
 800d60a:	4a21      	ldr	r2, [pc, #132]	; (800d690 <Cursor_4+0x1f8>)
 800d60c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d60e:	4b23      	ldr	r3, [pc, #140]	; (800d69c <Cursor_4+0x204>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b1f      	ldr	r3, [pc, #124]	; (800d690 <Cursor_4+0x1f8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	b292      	uxth	r2, r2
 800d618:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d61a:	4b1d      	ldr	r3, [pc, #116]	; (800d690 <Cursor_4+0x1f8>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3302      	adds	r3, #2
 800d620:	4a1b      	ldr	r2, [pc, #108]	; (800d690 <Cursor_4+0x1f8>)
 800d622:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d624:	4b1d      	ldr	r3, [pc, #116]	; (800d69c <Cursor_4+0x204>)
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	4b19      	ldr	r3, [pc, #100]	; (800d690 <Cursor_4+0x1f8>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	b292      	uxth	r2, r2
 800d62e:	801a      	strh	r2, [r3, #0]
	R5 = pTab[R3+10];
 800d630:	4b16      	ldr	r3, [pc, #88]	; (800d68c <Cursor_4+0x1f4>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	330a      	adds	r3, #10
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	4413      	add	r3, r2
 800d63c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d640:	461a      	mov	r2, r3
 800d642:	4b15      	ldr	r3, [pc, #84]	; (800d698 <Cursor_4+0x200>)
 800d644:	601a      	str	r2, [r3, #0]
	if((R5 & 2) != 0)
 800d646:	4b14      	ldr	r3, [pc, #80]	; (800d698 <Cursor_4+0x200>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f003 0302 	and.w	r3, r3, #2
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d12e      	bne.n	800d6b0 <Cursor_4+0x218>
	{
		goto Cursor45;
	}
	R4.A = (char*) &AA[204];
 800d652:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <Cursor_4+0x1f8>)
 800d654:	4a0f      	ldr	r2, [pc, #60]	; (800d694 <Cursor_4+0x1fc>)
 800d656:	601a      	str	r2, [r3, #0]
	R7 = R4.I +400;
 800d658:	4b0d      	ldr	r3, [pc, #52]	; (800d690 <Cursor_4+0x1f8>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d660:	4a12      	ldr	r2, [pc, #72]	; (800d6ac <Cursor_4+0x214>)
 800d662:	6013      	str	r3, [r2, #0]

Cursor44:
	R4.A= R4.A +8;
 800d664:	4b0a      	ldr	r3, [pc, #40]	; (800d690 <Cursor_4+0x1f8>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	3308      	adds	r3, #8
 800d66a:	4a09      	ldr	r2, [pc, #36]	; (800d690 <Cursor_4+0x1f8>)
 800d66c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d66e:	4b0b      	ldr	r3, [pc, #44]	; (800d69c <Cursor_4+0x204>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b07      	ldr	r3, [pc, #28]	; (800d690 <Cursor_4+0x1f8>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	b292      	uxth	r2, r2
 800d678:	801a      	strh	r2, [r3, #0]
	if(R7 >= R4.I)
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <Cursor_4+0x1f8>)
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	4b0b      	ldr	r3, [pc, #44]	; (800d6ac <Cursor_4+0x214>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d86a      	bhi.n	800d75c <Cursor_4+0x2c4>
	{
		goto Cursor44;
 800d686:	e7ed      	b.n	800d664 <Cursor_4+0x1cc>
		goto Cursor45;
 800d688:	bf00      	nop
 800d68a:	e012      	b.n	800d6b2 <Cursor_4+0x21a>
 800d68c:	20000750 	.word	0x20000750
 800d690:	20000774 	.word	0x20000774
 800d694:	20000910 	.word	0x20000910
 800d698:	20000754 	.word	0x20000754
 800d69c:	20000758 	.word	0x20000758
 800d6a0:	20000760 	.word	0x20000760
 800d6a4:	2000074c 	.word	0x2000074c
 800d6a8:	20000780 	.word	0x20000780
 800d6ac:	2000075c 	.word	0x2000075c
		goto Cursor45;
 800d6b0:	bf00      	nop
	}
	goto Cursor49;

Cursor45:
	R8 = R8 +1;
 800d6b2:	4b34      	ldr	r3, [pc, #208]	; (800d784 <Cursor_4+0x2ec>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	4a32      	ldr	r2, [pc, #200]	; (800d784 <Cursor_4+0x2ec>)
 800d6ba:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d6bc:	4b31      	ldr	r3, [pc, #196]	; (800d784 <Cursor_4+0x2ec>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	4b31      	ldr	r3, [pc, #196]	; (800d788 <Cursor_4+0x2f0>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d128      	bne.n	800d71a <Cursor_4+0x282>
	{
		goto Cursor46;
	}
	*(unsigned short*)R4.A =R6;
 800d6c8:	4b30      	ldr	r3, [pc, #192]	; (800d78c <Cursor_4+0x2f4>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	4b30      	ldr	r3, [pc, #192]	; (800d790 <Cursor_4+0x2f8>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	b292      	uxth	r2, r2
 800d6d2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d6d4:	4b2e      	ldr	r3, [pc, #184]	; (800d790 <Cursor_4+0x2f8>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3302      	adds	r3, #2
 800d6da:	4a2d      	ldr	r2, [pc, #180]	; (800d790 <Cursor_4+0x2f8>)
 800d6dc:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6de:	4b2b      	ldr	r3, [pc, #172]	; (800d78c <Cursor_4+0x2f4>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	4b2b      	ldr	r3, [pc, #172]	; (800d790 <Cursor_4+0x2f8>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	b292      	uxth	r2, r2
 800d6e8:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +400;
 800d6ea:	4b29      	ldr	r3, [pc, #164]	; (800d790 <Cursor_4+0x2f8>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d6f2:	4a27      	ldr	r2, [pc, #156]	; (800d790 <Cursor_4+0x2f8>)
 800d6f4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d6f6:	4b25      	ldr	r3, [pc, #148]	; (800d78c <Cursor_4+0x2f4>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	4b25      	ldr	r3, [pc, #148]	; (800d790 <Cursor_4+0x2f8>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	b292      	uxth	r2, r2
 800d700:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d702:	4b23      	ldr	r3, [pc, #140]	; (800d790 <Cursor_4+0x2f8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3302      	adds	r3, #2
 800d708:	4a21      	ldr	r2, [pc, #132]	; (800d790 <Cursor_4+0x2f8>)
 800d70a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d70c:	4b1f      	ldr	r3, [pc, #124]	; (800d78c <Cursor_4+0x2f4>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	4b1f      	ldr	r3, [pc, #124]	; (800d790 <Cursor_4+0x2f8>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	b292      	uxth	r2, r2
 800d716:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d718:	e023      	b.n	800d762 <Cursor_4+0x2ca>
		goto Cursor46;
 800d71a:	bf00      	nop

Cursor46:
	R8 = R8 +1;
 800d71c:	4b19      	ldr	r3, [pc, #100]	; (800d784 <Cursor_4+0x2ec>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	4a18      	ldr	r2, [pc, #96]	; (800d784 <Cursor_4+0x2ec>)
 800d724:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d726:	4b17      	ldr	r3, [pc, #92]	; (800d784 <Cursor_4+0x2ec>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	4b17      	ldr	r3, [pc, #92]	; (800d788 <Cursor_4+0x2f0>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d116      	bne.n	800d760 <Cursor_4+0x2c8>
	{
		goto Cursor49;
	}
	*(unsigned short*)R4.A =R6;
 800d732:	4b16      	ldr	r3, [pc, #88]	; (800d78c <Cursor_4+0x2f4>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	4b16      	ldr	r3, [pc, #88]	; (800d790 <Cursor_4+0x2f8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	b292      	uxth	r2, r2
 800d73c:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +404;
 800d73e:	4b14      	ldr	r3, [pc, #80]	; (800d790 <Cursor_4+0x2f8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d746:	4a12      	ldr	r2, [pc, #72]	; (800d790 <Cursor_4+0x2f8>)
 800d748:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d74a:	4b10      	ldr	r3, [pc, #64]	; (800d78c <Cursor_4+0x2f4>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b10      	ldr	r3, [pc, #64]	; (800d790 <Cursor_4+0x2f8>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	b292      	uxth	r2, r2
 800d754:	801a      	strh	r2, [r3, #0]
 800d756:	e004      	b.n	800d762 <Cursor_4+0x2ca>
	goto Cursor49;
 800d758:	bf00      	nop
 800d75a:	e002      	b.n	800d762 <Cursor_4+0x2ca>
	goto Cursor49;
 800d75c:	bf00      	nop
 800d75e:	e000      	b.n	800d762 <Cursor_4+0x2ca>
		goto Cursor49;
 800d760:	bf00      	nop

Cursor49:
	R3 = R3 +1;
 800d762:	4b0c      	ldr	r3, [pc, #48]	; (800d794 <Cursor_4+0x2fc>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3301      	adds	r3, #1
 800d768:	4a0a      	ldr	r2, [pc, #40]	; (800d794 <Cursor_4+0x2fc>)
 800d76a:	6013      	str	r3, [r2, #0]
	if (R3 != 10)
 800d76c:	4b09      	ldr	r3, [pc, #36]	; (800d794 <Cursor_4+0x2fc>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b0a      	cmp	r3, #10
 800d772:	d000      	beq.n	800d776 <Cursor_4+0x2de>
		goto Cursor40;
 800d774:	e697      	b.n	800d4a6 <Cursor_4+0xe>

return;
 800d776:	bf00      	nop
}
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	20000760 	.word	0x20000760
 800d788:	2000074c 	.word	0x2000074c
 800d78c:	20000758 	.word	0x20000758
 800d790:	20000774 	.word	0x20000774
 800d794:	20000750 	.word	0x20000750

0800d798 <Send_LCD>:

// R0:pDat, R1:pTab, R2:Col, R3:Tmp, R4:pBuf, R5:WR , R6:LCD, R7:Ctrl, R8:RS
// void Send_LCD(u16* pBuf, u16 Row) // �ӻ���������һ�����ݵ�LCD Used: R3-R8
void Send_LCD(short* pTab)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	R5 = (unsigned)&AA[204];
 800d7a0:	4a12      	ldr	r2, [pc, #72]	; (800d7ec <Send_LCD+0x54>)
 800d7a2:	4b13      	ldr	r3, [pc, #76]	; (800d7f0 <Send_LCD+0x58>)
 800d7a4:	601a      	str	r2, [r3, #0]

	LCD_Set_Posi(R2, WINDOW_Y0);
 800d7a6:	4b13      	ldr	r3, [pc, #76]	; (800d7f4 <Send_LCD+0x5c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	b21b      	sxth	r3, r3
 800d7ac:	2113      	movs	r1, #19
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f004 f8ca 	bl	8011948 <LCD_Set_Posi>
	R4.I =203;
 800d7b4:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <Send_LCD+0x60>)
 800d7b6:	22cb      	movs	r2, #203	; 0xcb
 800d7b8:	601a      	str	r2, [r3, #0]

Send_LCD_Loop:
	LCD_Set_Pixel( *(unsigned short*)R5);
 800d7ba:	4b0d      	ldr	r3, [pc, #52]	; (800d7f0 <Send_LCD+0x58>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f004 f90f 	bl	80119e4 <LCD_Set_Pixel>
	R5 = R5+2;
 800d7c6:	4b0a      	ldr	r3, [pc, #40]	; (800d7f0 <Send_LCD+0x58>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3302      	adds	r3, #2
 800d7cc:	4a08      	ldr	r2, [pc, #32]	; (800d7f0 <Send_LCD+0x58>)
 800d7ce:	6013      	str	r3, [r2, #0]
	R4.I = R4.I - 1;
 800d7d0:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <Send_LCD+0x60>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	4a08      	ldr	r2, [pc, #32]	; (800d7f8 <Send_LCD+0x60>)
 800d7d8:	6013      	str	r3, [r2, #0]
	if(R4.I !=0 )
 800d7da:	4b07      	ldr	r3, [pc, #28]	; (800d7f8 <Send_LCD+0x60>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d000      	beq.n	800d7e4 <Send_LCD+0x4c>
		goto Send_LCD_Loop;
 800d7e2:	e7ea      	b.n	800d7ba <Send_LCD+0x22>

	return;
 800d7e4:	bf00      	nop
}
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20000910 	.word	0x20000910
 800d7f0:	20000754 	.word	0x20000754
 800d7f4:	2000074c 	.word	0x2000074c
 800d7f8:	20000774 	.word	0x20000774

0800d7fc <Draw_Pop>:

// Draw_Pop(R2:Col, R10:pPop, R11:By0, R12:By1)// ���������� Used: R5-R7
void Draw_Pop(short* pTab)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
	R7 = 0x10001;
 800d804:	4b85      	ldr	r3, [pc, #532]	; (800da1c <Draw_Pop+0x220>)
 800d806:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d80a:	601a      	str	r2, [r3, #0]
	R5 = pTab[36];
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3348      	adds	r3, #72	; 0x48
 800d810:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d814:	461a      	mov	r2, r3
 800d816:	4b82      	ldr	r3, [pc, #520]	; (800da20 <Draw_Pop+0x224>)
 800d818:	601a      	str	r2, [r3, #0]
	R6 = pTab[37];
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	334a      	adds	r3, #74	; 0x4a
 800d81e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d822:	461a      	mov	r2, r3
 800d824:	4b7f      	ldr	r3, [pc, #508]	; (800da24 <Draw_Pop+0x228>)
 800d826:	601a      	str	r2, [r3, #0]

	R3 = R11;
 800d828:	4b7f      	ldr	r3, [pc, #508]	; (800da28 <Draw_Pop+0x22c>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a7f      	ldr	r2, [pc, #508]	; (800da2c <Draw_Pop+0x230>)
 800d82e:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d830:	4b7f      	ldr	r3, [pc, #508]	; (800da30 <Draw_Pop+0x234>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	4b7d      	ldr	r3, [pc, #500]	; (800da2c <Draw_Pop+0x230>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d10d      	bne.n	800d858 <Draw_Pop+0x5c>
	{
		R5 = R5 +6;
 800d83c:	4b78      	ldr	r3, [pc, #480]	; (800da20 <Draw_Pop+0x224>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3306      	adds	r3, #6
 800d842:	4a77      	ldr	r2, [pc, #476]	; (800da20 <Draw_Pop+0x224>)
 800d844:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d846:	4b77      	ldr	r3, [pc, #476]	; (800da24 <Draw_Pop+0x228>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3b0c      	subs	r3, #12
 800d84c:	4a75      	ldr	r2, [pc, #468]	; (800da24 <Draw_Pop+0x228>)
 800d84e:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d850:	4b72      	ldr	r3, [pc, #456]	; (800da1c <Draw_Pop+0x220>)
 800d852:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d856:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 1;
 800d858:	4b73      	ldr	r3, [pc, #460]	; (800da28 <Draw_Pop+0x22c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3301      	adds	r3, #1
 800d85e:	4a73      	ldr	r2, [pc, #460]	; (800da2c <Draw_Pop+0x230>)
 800d860:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d862:	4b73      	ldr	r3, [pc, #460]	; (800da30 <Draw_Pop+0x234>)
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	4b71      	ldr	r3, [pc, #452]	; (800da2c <Draw_Pop+0x230>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d10d      	bne.n	800d88a <Draw_Pop+0x8e>
	{
		R5 = R5 +4;
 800d86e:	4b6c      	ldr	r3, [pc, #432]	; (800da20 <Draw_Pop+0x224>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3304      	adds	r3, #4
 800d874:	4a6a      	ldr	r2, [pc, #424]	; (800da20 <Draw_Pop+0x224>)
 800d876:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d878:	4b6a      	ldr	r3, [pc, #424]	; (800da24 <Draw_Pop+0x228>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3b08      	subs	r3, #8
 800d87e:	4a69      	ldr	r2, [pc, #420]	; (800da24 <Draw_Pop+0x228>)
 800d880:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d882:	4b66      	ldr	r3, [pc, #408]	; (800da1c <Draw_Pop+0x220>)
 800d884:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d888:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 2;
 800d88a:	4b67      	ldr	r3, [pc, #412]	; (800da28 <Draw_Pop+0x22c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3302      	adds	r3, #2
 800d890:	4a66      	ldr	r2, [pc, #408]	; (800da2c <Draw_Pop+0x230>)
 800d892:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d894:	4b66      	ldr	r3, [pc, #408]	; (800da30 <Draw_Pop+0x234>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b64      	ldr	r3, [pc, #400]	; (800da2c <Draw_Pop+0x230>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d10d      	bne.n	800d8bc <Draw_Pop+0xc0>
	{
		R5 = R5 +2;
 800d8a0:	4b5f      	ldr	r3, [pc, #380]	; (800da20 <Draw_Pop+0x224>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3302      	adds	r3, #2
 800d8a6:	4a5e      	ldr	r2, [pc, #376]	; (800da20 <Draw_Pop+0x224>)
 800d8a8:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d8aa:	4b5e      	ldr	r3, [pc, #376]	; (800da24 <Draw_Pop+0x228>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3b04      	subs	r3, #4
 800d8b0:	4a5c      	ldr	r2, [pc, #368]	; (800da24 <Draw_Pop+0x228>)
 800d8b2:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8b4:	4b59      	ldr	r3, [pc, #356]	; (800da1c <Draw_Pop+0x220>)
 800d8b6:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8ba:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -3;
 800d8bc:	4b5d      	ldr	r3, [pc, #372]	; (800da34 <Draw_Pop+0x238>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3b03      	subs	r3, #3
 800d8c2:	4a5a      	ldr	r2, [pc, #360]	; (800da2c <Draw_Pop+0x230>)
 800d8c4:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8c6:	4b5a      	ldr	r3, [pc, #360]	; (800da30 <Draw_Pop+0x234>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	4b58      	ldr	r3, [pc, #352]	; (800da2c <Draw_Pop+0x230>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d10d      	bne.n	800d8ee <Draw_Pop+0xf2>
	{
		R5 = R5 +2;
 800d8d2:	4b53      	ldr	r3, [pc, #332]	; (800da20 <Draw_Pop+0x224>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3302      	adds	r3, #2
 800d8d8:	4a51      	ldr	r2, [pc, #324]	; (800da20 <Draw_Pop+0x224>)
 800d8da:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d8dc:	4b51      	ldr	r3, [pc, #324]	; (800da24 <Draw_Pop+0x228>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3b04      	subs	r3, #4
 800d8e2:	4a50      	ldr	r2, [pc, #320]	; (800da24 <Draw_Pop+0x228>)
 800d8e4:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d8e6:	4b4d      	ldr	r3, [pc, #308]	; (800da1c <Draw_Pop+0x220>)
 800d8e8:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d8ec:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -2;
 800d8ee:	4b51      	ldr	r3, [pc, #324]	; (800da34 <Draw_Pop+0x238>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3b02      	subs	r3, #2
 800d8f4:	4a4d      	ldr	r2, [pc, #308]	; (800da2c <Draw_Pop+0x230>)
 800d8f6:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d8f8:	4b4d      	ldr	r3, [pc, #308]	; (800da30 <Draw_Pop+0x234>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	4b4b      	ldr	r3, [pc, #300]	; (800da2c <Draw_Pop+0x230>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d10d      	bne.n	800d920 <Draw_Pop+0x124>
	{
		R5 = R5 +4;
 800d904:	4b46      	ldr	r3, [pc, #280]	; (800da20 <Draw_Pop+0x224>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3304      	adds	r3, #4
 800d90a:	4a45      	ldr	r2, [pc, #276]	; (800da20 <Draw_Pop+0x224>)
 800d90c:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d90e:	4b45      	ldr	r3, [pc, #276]	; (800da24 <Draw_Pop+0x228>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3b08      	subs	r3, #8
 800d914:	4a43      	ldr	r2, [pc, #268]	; (800da24 <Draw_Pop+0x228>)
 800d916:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d918:	4b40      	ldr	r3, [pc, #256]	; (800da1c <Draw_Pop+0x220>)
 800d91a:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d91e:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -1;
 800d920:	4b44      	ldr	r3, [pc, #272]	; (800da34 <Draw_Pop+0x238>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3b01      	subs	r3, #1
 800d926:	4a41      	ldr	r2, [pc, #260]	; (800da2c <Draw_Pop+0x230>)
 800d928:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d92a:	4b41      	ldr	r3, [pc, #260]	; (800da30 <Draw_Pop+0x234>)
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	4b3f      	ldr	r3, [pc, #252]	; (800da2c <Draw_Pop+0x230>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	429a      	cmp	r2, r3
 800d934:	d10d      	bne.n	800d952 <Draw_Pop+0x156>
	{
		R5 = R5 +6;
 800d936:	4b3a      	ldr	r3, [pc, #232]	; (800da20 <Draw_Pop+0x224>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3306      	adds	r3, #6
 800d93c:	4a38      	ldr	r2, [pc, #224]	; (800da20 <Draw_Pop+0x224>)
 800d93e:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d940:	4b38      	ldr	r3, [pc, #224]	; (800da24 <Draw_Pop+0x228>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3b0c      	subs	r3, #12
 800d946:	4a37      	ldr	r2, [pc, #220]	; (800da24 <Draw_Pop+0x228>)
 800d948:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d94a:	4b34      	ldr	r3, [pc, #208]	; (800da1c <Draw_Pop+0x220>)
 800d94c:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d950:	601a      	str	r2, [r3, #0]
	}

//    ADD     R4,  SP, R5
	R4.A = (char*) &AA[204-R5/2];
 800d952:	4b33      	ldr	r3, [pc, #204]	; (800da20 <Draw_Pop+0x224>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	085b      	lsrs	r3, r3, #1
 800d958:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	4a36      	ldr	r2, [pc, #216]	; (800da38 <Draw_Pop+0x23c>)
 800d960:	4413      	add	r3, r2
 800d962:	4a36      	ldr	r2, [pc, #216]	; (800da3c <Draw_Pop+0x240>)
 800d964:	6013      	str	r3, [r2, #0]
	R8 = pTab[39];
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	334e      	adds	r3, #78	; 0x4e
 800d96a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d96e:	461a      	mov	r2, r3
 800d970:	4b33      	ldr	r3, [pc, #204]	; (800da40 <Draw_Pop+0x244>)
 800d972:	601a      	str	r2, [r3, #0]
	R9 = pTab[40];
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3350      	adds	r3, #80	; 0x50
 800d978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d97c:	461a      	mov	r2, r3
 800d97e:	4b31      	ldr	r3, [pc, #196]	; (800da44 <Draw_Pop+0x248>)
 800d980:	601a      	str	r2, [r3, #0]
	R3 =  *(unsigned short*) R10;
 800d982:	4b31      	ldr	r3, [pc, #196]	; (800da48 <Draw_Pop+0x24c>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	461a      	mov	r2, r3
 800d98a:	4b28      	ldr	r3, [pc, #160]	; (800da2c <Draw_Pop+0x230>)
 800d98c:	601a      	str	r2, [r3, #0]
	R10= R10+2;
 800d98e:	4b2e      	ldr	r3, [pc, #184]	; (800da48 <Draw_Pop+0x24c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3302      	adds	r3, #2
 800d994:	4a2c      	ldr	r2, [pc, #176]	; (800da48 <Draw_Pop+0x24c>)
 800d996:	6013      	str	r3, [r2, #0]

	if(R8 == 0)
 800d998:	4b29      	ldr	r3, [pc, #164]	; (800da40 <Draw_Pop+0x244>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d100      	bne.n	800d9a2 <Draw_Pop+0x1a6>
	{
		goto Pop_Loop_Penetrate;
 800d9a0:	e054      	b.n	800da4c <Draw_Pop+0x250>
	}

Pop_Loop:
 800d9a2:	bf00      	nop
	if((R3 & R7) != 0)
 800d9a4:	4b21      	ldr	r3, [pc, #132]	; (800da2c <Draw_Pop+0x230>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	4b1c      	ldr	r3, [pc, #112]	; (800da1c <Draw_Pop+0x220>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d006      	beq.n	800d9c0 <Draw_Pop+0x1c4>
		R9 = *R4.A;
 800d9b2:	4b22      	ldr	r3, [pc, #136]	; (800da3c <Draw_Pop+0x240>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4b22      	ldr	r3, [pc, #136]	; (800da44 <Draw_Pop+0x248>)
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	e005      	b.n	800d9cc <Draw_Pop+0x1d0>
	else
		R8 = *R4.A;
 800d9c0:	4b1e      	ldr	r3, [pc, #120]	; (800da3c <Draw_Pop+0x240>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <Draw_Pop+0x244>)
 800d9ca:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	; (800da3c <Draw_Pop+0x240>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <Draw_Pop+0x240>)
 800d9d4:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d9d6:	4b13      	ldr	r3, [pc, #76]	; (800da24 <Draw_Pop+0x228>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3b02      	subs	r3, #2
 800d9dc:	4a11      	ldr	r2, [pc, #68]	; (800da24 <Draw_Pop+0x228>)
 800d9de:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d9e0:	4b10      	ldr	r3, [pc, #64]	; (800da24 <Draw_Pop+0x228>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d066      	beq.n	800dab6 <Draw_Pop+0x2ba>
		return;

	if((R7 & 0x80000000) != 0 )
 800d9e8:	4b0c      	ldr	r3, [pc, #48]	; (800da1c <Draw_Pop+0x220>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da0f      	bge.n	800da10 <Draw_Pop+0x214>
	{
		R3 = *(unsigned short*) R10;
 800d9f0:	4b15      	ldr	r3, [pc, #84]	; (800da48 <Draw_Pop+0x24c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <Draw_Pop+0x230>)
 800d9fa:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d9fc:	4b12      	ldr	r3, [pc, #72]	; (800da48 <Draw_Pop+0x24c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3302      	adds	r3, #2
 800da02:	4a11      	ldr	r2, [pc, #68]	; (800da48 <Draw_Pop+0x24c>)
 800da04:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800da06:	4b05      	ldr	r3, [pc, #20]	; (800da1c <Draw_Pop+0x220>)
 800da08:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	e7c9      	b.n	800d9a4 <Draw_Pop+0x1a8>
	}
	else
		R7 = R7 << 1;
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <Draw_Pop+0x220>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	4a01      	ldr	r2, [pc, #4]	; (800da1c <Draw_Pop+0x220>)
 800da18:	6013      	str	r3, [r2, #0]
	goto Pop_Loop;
 800da1a:	e7c3      	b.n	800d9a4 <Draw_Pop+0x1a8>
 800da1c:	2000075c 	.word	0x2000075c
 800da20:	20000754 	.word	0x20000754
 800da24:	20000758 	.word	0x20000758
 800da28:	20000768 	.word	0x20000768
 800da2c:	20000750 	.word	0x20000750
 800da30:	2000074c 	.word	0x2000074c
 800da34:	2000076c 	.word	0x2000076c
 800da38:	20000778 	.word	0x20000778
 800da3c:	20000774 	.word	0x20000774
 800da40:	20000760 	.word	0x20000760
 800da44:	20000764 	.word	0x20000764
 800da48:	20000770 	.word	0x20000770

Pop_Loop_Penetrate:
	if((R2 & R7) != 0)
 800da4c:	4b1e      	ldr	r3, [pc, #120]	; (800dac8 <Draw_Pop+0x2cc>)
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	4b1e      	ldr	r3, [pc, #120]	; (800dacc <Draw_Pop+0x2d0>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4013      	ands	r3, r2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d005      	beq.n	800da66 <Draw_Pop+0x26a>
		R9 = *R4.A;
 800da5a:	4b1d      	ldr	r3, [pc, #116]	; (800dad0 <Draw_Pop+0x2d4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	4b1c      	ldr	r3, [pc, #112]	; (800dad4 <Draw_Pop+0x2d8>)
 800da64:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800da66:	4b1a      	ldr	r3, [pc, #104]	; (800dad0 <Draw_Pop+0x2d4>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3301      	adds	r3, #1
 800da6c:	4a18      	ldr	r2, [pc, #96]	; (800dad0 <Draw_Pop+0x2d4>)
 800da6e:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800da70:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <Draw_Pop+0x2dc>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3b02      	subs	r3, #2
 800da76:	4a18      	ldr	r2, [pc, #96]	; (800dad8 <Draw_Pop+0x2dc>)
 800da78:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800da7a:	4b17      	ldr	r3, [pc, #92]	; (800dad8 <Draw_Pop+0x2dc>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d01b      	beq.n	800daba <Draw_Pop+0x2be>
		return;

	if((R7 & 0x80000000) != 0 )
 800da82:	4b12      	ldr	r3, [pc, #72]	; (800dacc <Draw_Pop+0x2d0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	da0f      	bge.n	800daaa <Draw_Pop+0x2ae>
	{
		R3 = *(unsigned short*) R10;
 800da8a:	4b14      	ldr	r3, [pc, #80]	; (800dadc <Draw_Pop+0x2e0>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	461a      	mov	r2, r3
 800da92:	4b13      	ldr	r3, [pc, #76]	; (800dae0 <Draw_Pop+0x2e4>)
 800da94:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800da96:	4b11      	ldr	r3, [pc, #68]	; (800dadc <Draw_Pop+0x2e0>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3302      	adds	r3, #2
 800da9c:	4a0f      	ldr	r2, [pc, #60]	; (800dadc <Draw_Pop+0x2e0>)
 800da9e:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800daa0:	4b0a      	ldr	r3, [pc, #40]	; (800dacc <Draw_Pop+0x2d0>)
 800daa2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	e7d0      	b.n	800da4c <Draw_Pop+0x250>
		}
	else
		R7 = R7 << 1;
 800daaa:	4b08      	ldr	r3, [pc, #32]	; (800dacc <Draw_Pop+0x2d0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	4a06      	ldr	r2, [pc, #24]	; (800dacc <Draw_Pop+0x2d0>)
 800dab2:	6013      	str	r3, [r2, #0]
	goto Pop_Loop_Penetrate;
 800dab4:	e7ca      	b.n	800da4c <Draw_Pop+0x250>
		return;
 800dab6:	bf00      	nop
 800dab8:	e000      	b.n	800dabc <Draw_Pop+0x2c0>
		return;
 800daba:	bf00      	nop

}
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	2000074c 	.word	0x2000074c
 800dacc:	2000075c 	.word	0x2000075c
 800dad0:	20000774 	.word	0x20000774
 800dad4:	20000764 	.word	0x20000764
 800dad8:	20000758 	.word	0x20000758
 800dadc:	20000770 	.word	0x20000770
 800dae0:	20000750 	.word	0x20000750

0800dae4 <DrawWindow>:

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pCol, R5:Cnt, R6:Tmp,
// R0:pBuf, R1:pTab, R2:Col, R3:LCD, R4:Ctrl, R5:WR,  R6:Tmp, R7:Cnt, R8:RS
void DrawWindow(char* pBuf, short* pTab)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b082      	sub	sp, #8
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
	R0 = (unsigned)&pBuf[0];
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a96      	ldr	r2, [pc, #600]	; (800dd4c <DrawWindow+0x268>)
 800daf2:	6013      	str	r3, [r2, #0]
	R2 = 0;
 800daf4:	4b96      	ldr	r3, [pc, #600]	; (800dd50 <DrawWindow+0x26c>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
	R10 = &pBuf[900];
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800db00:	4a94      	ldr	r2, [pc, #592]	; (800dd54 <DrawWindow+0x270>)
 800db02:	6013      	str	r3, [r2, #0]
	R11 = pTab[34];
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	3344      	adds	r3, #68	; 0x44
 800db08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db0c:	461a      	mov	r2, r3
 800db0e:	4b92      	ldr	r3, [pc, #584]	; (800dd58 <DrawWindow+0x274>)
 800db10:	601a      	str	r2, [r3, #0]
	R12 = pTab[35];
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	3346      	adds	r3, #70	; 0x46
 800db16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db1a:	461a      	mov	r2, r3
 800db1c:	4b8f      	ldr	r3, [pc, #572]	; (800dd5c <DrawWindow+0x278>)
 800db1e:	601a      	str	r2, [r3, #0]
	R12 = R11 + R12;
 800db20:	4b8d      	ldr	r3, [pc, #564]	; (800dd58 <DrawWindow+0x274>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	4b8d      	ldr	r3, [pc, #564]	; (800dd5c <DrawWindow+0x278>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4413      	add	r3, r2
 800db2a:	4a8c      	ldr	r2, [pc, #560]	; (800dd5c <DrawWindow+0x278>)
 800db2c:	6013      	str	r3, [r2, #0]

Draw_Loop:
	if (R2 == 0)
 800db2e:	4b88      	ldr	r3, [pc, #544]	; (800dd50 <DrawWindow+0x26c>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d102      	bne.n	800db3c <DrawWindow+0x58>
	{
		Buld_0();
 800db36:	f7ff f93b 	bl	800cdb0 <Buld_0>
		goto Draw_Wave;
 800db3a:	e064      	b.n	800dc06 <DrawWindow+0x122>
	}

	if (R2 == 302)
 800db3c:	4b84      	ldr	r3, [pc, #528]	; (800dd50 <DrawWindow+0x26c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800db44:	d102      	bne.n	800db4c <DrawWindow+0x68>
	{
		Buld_0();
 800db46:	f7ff f933 	bl	800cdb0 <Buld_0>
		goto Draw_Wave;
 800db4a:	e05c      	b.n	800dc06 <DrawWindow+0x122>
	}

	if (R2 == 1)
 800db4c:	4b80      	ldr	r3, [pc, #512]	; (800dd50 <DrawWindow+0x26c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d102      	bne.n	800db5a <DrawWindow+0x76>
	{
		Buld_1();
 800db54:	f7ff f938 	bl	800cdc8 <Buld_1>
		goto Draw_Wave;
 800db58:	e055      	b.n	800dc06 <DrawWindow+0x122>
	}
	R3 = 301;
 800db5a:	4b81      	ldr	r3, [pc, #516]	; (800dd60 <DrawWindow+0x27c>)
 800db5c:	f240 122d 	movw	r2, #301	; 0x12d
 800db60:	601a      	str	r2, [r3, #0]

	if (R2 == R3)
 800db62:	4b7b      	ldr	r3, [pc, #492]	; (800dd50 <DrawWindow+0x26c>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	4b7e      	ldr	r3, [pc, #504]	; (800dd60 <DrawWindow+0x27c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d102      	bne.n	800db74 <DrawWindow+0x90>
	{
		Buld_1();
 800db6e:	f7ff f92b 	bl	800cdc8 <Buld_1>
		goto Draw_Wave;
 800db72:	e048      	b.n	800dc06 <DrawWindow+0x122>
	}

	R3 = R2 - 1;
 800db74:	4b76      	ldr	r3, [pc, #472]	; (800dd50 <DrawWindow+0x26c>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3b01      	subs	r3, #1
 800db7a:	4a79      	ldr	r2, [pc, #484]	; (800dd60 <DrawWindow+0x27c>)
 800db7c:	6013      	str	r3, [r2, #0]
	R6 = 25;
 800db7e:	4b79      	ldr	r3, [pc, #484]	; (800dd64 <DrawWindow+0x280>)
 800db80:	2219      	movs	r2, #25
 800db82:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800db84:	4b76      	ldr	r3, [pc, #472]	; (800dd60 <DrawWindow+0x27c>)
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	4b76      	ldr	r3, [pc, #472]	; (800dd64 <DrawWindow+0x280>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db90:	4a75      	ldr	r2, [pc, #468]	; (800dd68 <DrawWindow+0x284>)
 800db92:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800db94:	4b74      	ldr	r3, [pc, #464]	; (800dd68 <DrawWindow+0x284>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a72      	ldr	r2, [pc, #456]	; (800dd64 <DrawWindow+0x280>)
 800db9a:	6812      	ldr	r2, [r2, #0]
 800db9c:	fb02 f303 	mul.w	r3, r2, r3
 800dba0:	4a71      	ldr	r2, [pc, #452]	; (800dd68 <DrawWindow+0x284>)
 800dba2:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800dba4:	4b6e      	ldr	r3, [pc, #440]	; (800dd60 <DrawWindow+0x27c>)
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	4b6f      	ldr	r3, [pc, #444]	; (800dd68 <DrawWindow+0x284>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	4a6e      	ldr	r2, [pc, #440]	; (800dd68 <DrawWindow+0x284>)
 800dbb0:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dbb2:	4b6d      	ldr	r3, [pc, #436]	; (800dd68 <DrawWindow+0x284>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d102      	bne.n	800dbc0 <DrawWindow+0xdc>
	{
		Buld_4();
 800dbba:	f7ff f975 	bl	800cea8 <Buld_4>
		goto Draw_Wave;
 800dbbe:	e022      	b.n	800dc06 <DrawWindow+0x122>
	}

	R6 = 5;
 800dbc0:	4b68      	ldr	r3, [pc, #416]	; (800dd64 <DrawWindow+0x280>)
 800dbc2:	2205      	movs	r2, #5
 800dbc4:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800dbc6:	4b66      	ldr	r3, [pc, #408]	; (800dd60 <DrawWindow+0x27c>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b66      	ldr	r3, [pc, #408]	; (800dd64 <DrawWindow+0x280>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbd2:	4a65      	ldr	r2, [pc, #404]	; (800dd68 <DrawWindow+0x284>)
 800dbd4:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800dbd6:	4b64      	ldr	r3, [pc, #400]	; (800dd68 <DrawWindow+0x284>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a62      	ldr	r2, [pc, #392]	; (800dd64 <DrawWindow+0x280>)
 800dbdc:	6812      	ldr	r2, [r2, #0]
 800dbde:	fb02 f303 	mul.w	r3, r2, r3
 800dbe2:	4a61      	ldr	r2, [pc, #388]	; (800dd68 <DrawWindow+0x284>)
 800dbe4:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800dbe6:	4b5e      	ldr	r3, [pc, #376]	; (800dd60 <DrawWindow+0x27c>)
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	4b5f      	ldr	r3, [pc, #380]	; (800dd68 <DrawWindow+0x284>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	4a5d      	ldr	r2, [pc, #372]	; (800dd68 <DrawWindow+0x284>)
 800dbf2:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800dbf4:	4b5c      	ldr	r3, [pc, #368]	; (800dd68 <DrawWindow+0x284>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <DrawWindow+0x11e>
	{
		Buld_3();
 800dbfc:	f7ff f92e 	bl	800ce5c <Buld_3>
		goto Draw_Wave;
 800dc00:	e001      	b.n	800dc06 <DrawWindow+0x122>
	}
	Buld_2();
 800dc02:	f7ff f909 	bl	800ce18 <Buld_2>

Draw_Wave:
	if( (R2<3) || (R2 >= 300) ) //3 to 299
 800dc06:	4b52      	ldr	r3, [pc, #328]	; (800dd50 <DrawWindow+0x26c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d96c      	bls.n	800dce8 <DrawWindow+0x204>
 800dc0e:	4b50      	ldr	r3, [pc, #320]	; (800dd50 <DrawWindow+0x26c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dc16:	d267      	bcs.n	800dce8 <DrawWindow+0x204>
	{
		goto Horozontal;
	}
	R3 = pTab[3]; //Ch_3
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	3306      	adds	r3, #6
 800dc1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc20:	461a      	mov	r2, r3
 800dc22:	4b4f      	ldr	r3, [pc, #316]	; (800dd60 <DrawWindow+0x27c>)
 800dc24:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc26:	4b4e      	ldr	r3, [pc, #312]	; (800dd60 <DrawWindow+0x27c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f003 0304 	and.w	r3, r3, #4
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10f      	bne.n	800dc52 <DrawWindow+0x16e>
	{
		R3 = 46;
 800dc32:	4b4b      	ldr	r3, [pc, #300]	; (800dd60 <DrawWindow+0x27c>)
 800dc34:	222e      	movs	r2, #46	; 0x2e
 800dc36:	601a      	str	r2, [r3, #0]
		R4.I = pTab[13];
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	331a      	adds	r3, #26
 800dc3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc40:	461a      	mov	r2, r3
 800dc42:	4b4a      	ldr	r3, [pc, #296]	; (800dd6c <DrawWindow+0x288>)
 800dc44:	601a      	str	r2, [r3, #0]
		R8 = 8;
 800dc46:	4b4a      	ldr	r3, [pc, #296]	; (800dd70 <DrawWindow+0x28c>)
 800dc48:	2208      	movs	r2, #8
 800dc4a:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	f7ff f951 	bl	800cef4 <Draw_Digit_Analog>
	}

	R3 =pTab[2]; //Ch_2
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	3304      	adds	r3, #4
 800dc56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	4b40      	ldr	r3, [pc, #256]	; (800dd60 <DrawWindow+0x27c>)
 800dc5e:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc60:	4b3f      	ldr	r3, [pc, #252]	; (800dd60 <DrawWindow+0x27c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f003 0304 	and.w	r3, r3, #4
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10f      	bne.n	800dc8c <DrawWindow+0x1a8>
	{
		R3 = 44;
 800dc6c:	4b3c      	ldr	r3, [pc, #240]	; (800dd60 <DrawWindow+0x27c>)
 800dc6e:	222c      	movs	r2, #44	; 0x2c
 800dc70:	601a      	str	r2, [r3, #0]
		R4.I = pTab[12];
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	3318      	adds	r3, #24
 800dc76:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	4b3b      	ldr	r3, [pc, #236]	; (800dd6c <DrawWindow+0x288>)
 800dc7e:	601a      	str	r2, [r3, #0]
		R8 = 4;
 800dc80:	4b3b      	ldr	r3, [pc, #236]	; (800dd70 <DrawWindow+0x28c>)
 800dc82:	2204      	movs	r2, #4
 800dc84:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800dc86:	2001      	movs	r0, #1
 800dc88:	f7ff f934 	bl	800cef4 <Draw_Digit_Analog>
	}

	R3 =pTab[1]; //Ch_1
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	3302      	adds	r3, #2
 800dc90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b32      	ldr	r3, [pc, #200]	; (800dd60 <DrawWindow+0x27c>)
 800dc98:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dc9a:	4b31      	ldr	r3, [pc, #196]	; (800dd60 <DrawWindow+0x27c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f003 0304 	and.w	r3, r3, #4
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10a      	bne.n	800dcbc <DrawWindow+0x1d8>
	{
		R3 = 42;
 800dca6:	4b2e      	ldr	r3, [pc, #184]	; (800dd60 <DrawWindow+0x27c>)
 800dca8:	222a      	movs	r2, #42	; 0x2a
 800dcaa:	601a      	str	r2, [r3, #0]
		R4.A = &pBuf[300];
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dcb2:	4a2e      	ldr	r2, [pc, #184]	; (800dd6c <DrawWindow+0x288>)
 800dcb4:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	f7ff f91c 	bl	800cef4 <Draw_Digit_Analog>
	}

	R3 =pTab[0]; //Ch_0
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	4b26      	ldr	r3, [pc, #152]	; (800dd60 <DrawWindow+0x27c>)
 800dcc6:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800dcc8:	4b25      	ldr	r3, [pc, #148]	; (800dd60 <DrawWindow+0x27c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f003 0304 	and.w	r3, r3, #4
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10b      	bne.n	800dcec <DrawWindow+0x208>
	{
		R3 = 40;
 800dcd4:	4b22      	ldr	r3, [pc, #136]	; (800dd60 <DrawWindow+0x27c>)
 800dcd6:	2228      	movs	r2, #40	; 0x28
 800dcd8:	601a      	str	r2, [r3, #0]
		R4.A = pBuf;
 800dcda:	4a24      	ldr	r2, [pc, #144]	; (800dd6c <DrawWindow+0x288>)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800dce0:	2000      	movs	r0, #0
 800dce2:	f7ff f907 	bl	800cef4 <Draw_Digit_Analog>
 800dce6:	e002      	b.n	800dcee <DrawWindow+0x20a>
		goto Horozontal;
 800dce8:	bf00      	nop
 800dcea:	e000      	b.n	800dcee <DrawWindow+0x20a>
	}

Horozontal:
 800dcec:	bf00      	nop
	if(R2 == 0)
 800dcee:	4b18      	ldr	r3, [pc, #96]	; (800dd50 <DrawWindow+0x26c>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d103      	bne.n	800dcfe <DrawWindow+0x21a>
	{
		Cursor_0(pTab);
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f7ff fa14 	bl	800d124 <Cursor_0>
		goto Vertical;
 800dcfc:	e046      	b.n	800dd8c <DrawWindow+0x2a8>
	}

	if(R2 == 302)
 800dcfe:	4b14      	ldr	r3, [pc, #80]	; (800dd50 <DrawWindow+0x26c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dd06:	d103      	bne.n	800dd10 <DrawWindow+0x22c>
	{
		Cursor_0(pTab);
 800dd08:	6838      	ldr	r0, [r7, #0]
 800dd0a:	f7ff fa0b 	bl	800d124 <Cursor_0>
		goto Vertical;
 800dd0e:	e03d      	b.n	800dd8c <DrawWindow+0x2a8>
	}

	if(R2 == 1)
 800dd10:	4b0f      	ldr	r3, [pc, #60]	; (800dd50 <DrawWindow+0x26c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d103      	bne.n	800dd20 <DrawWindow+0x23c>
	{
		Cursor_1(pTab);
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f7ff fa8d 	bl	800d238 <Cursor_1>
		goto Vertical;
 800dd1e:	e035      	b.n	800dd8c <DrawWindow+0x2a8>
	}
	R5 = 301;
 800dd20:	4b11      	ldr	r3, [pc, #68]	; (800dd68 <DrawWindow+0x284>)
 800dd22:	f240 122d 	movw	r2, #301	; 0x12d
 800dd26:	601a      	str	r2, [r3, #0]
	if(R2 == R5)
 800dd28:	4b09      	ldr	r3, [pc, #36]	; (800dd50 <DrawWindow+0x26c>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	4b0e      	ldr	r3, [pc, #56]	; (800dd68 <DrawWindow+0x284>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d103      	bne.n	800dd3c <DrawWindow+0x258>
	{
		Cursor_1(pTab);
 800dd34:	6838      	ldr	r0, [r7, #0]
 800dd36:	f7ff fa7f 	bl	800d238 <Cursor_1>
		goto Vertical;
 800dd3a:	e027      	b.n	800dd8c <DrawWindow+0x2a8>
	}

	if(R2 == 2)
 800dd3c:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <DrawWindow+0x26c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d117      	bne.n	800dd74 <DrawWindow+0x290>
	{
		Cursor_2(pTab);
 800dd44:	6838      	ldr	r0, [r7, #0]
 800dd46:	f7ff faeb 	bl	800d320 <Cursor_2>
		goto Vertical;
 800dd4a:	e01f      	b.n	800dd8c <DrawWindow+0x2a8>
 800dd4c:	20000744 	.word	0x20000744
 800dd50:	2000074c 	.word	0x2000074c
 800dd54:	20000770 	.word	0x20000770
 800dd58:	20000768 	.word	0x20000768
 800dd5c:	2000076c 	.word	0x2000076c
 800dd60:	20000750 	.word	0x20000750
 800dd64:	20000758 	.word	0x20000758
 800dd68:	20000754 	.word	0x20000754
 800dd6c:	20000774 	.word	0x20000774
 800dd70:	20000760 	.word	0x20000760
	}
	if(R2 == 300)
 800dd74:	4b21      	ldr	r3, [pc, #132]	; (800ddfc <DrawWindow+0x318>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800dd7c:	d103      	bne.n	800dd86 <DrawWindow+0x2a2>
	{
		Cursor_2(pTab);
 800dd7e:	6838      	ldr	r0, [r7, #0]
 800dd80:	f7ff face 	bl	800d320 <Cursor_2>
		goto Vertical;
 800dd84:	e002      	b.n	800dd8c <DrawWindow+0x2a8>
	}
	Cursor_3(pTab);
 800dd86:	6838      	ldr	r0, [r7, #0]
 800dd88:	f7ff fb1e 	bl	800d3c8 <Cursor_3>

Vertical:
	Cursor_4(pTab);
 800dd8c:	6838      	ldr	r0, [r7, #0]
 800dd8e:	f7ff fb83 	bl	800d498 <Cursor_4>

	R3 = pTab[38];
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	334c      	adds	r3, #76	; 0x4c
 800dd96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	4b18      	ldr	r3, [pc, #96]	; (800de00 <DrawWindow+0x31c>)
 800dd9e:	601a      	str	r2, [r3, #0]
	if( (R3&1) !=1 )
 800dda0:	4b17      	ldr	r3, [pc, #92]	; (800de00 <DrawWindow+0x31c>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f003 0301 	and.w	r3, r3, #1
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00f      	beq.n	800ddcc <DrawWindow+0x2e8>
	{
		goto Send;
	}

	if(R2 < R11)
 800ddac:	4b13      	ldr	r3, [pc, #76]	; (800ddfc <DrawWindow+0x318>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	4b14      	ldr	r3, [pc, #80]	; (800de04 <DrawWindow+0x320>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d30b      	bcc.n	800ddd0 <DrawWindow+0x2ec>
	{
		goto Send;
	}

	if(R2 < R12)
 800ddb8:	4b10      	ldr	r3, [pc, #64]	; (800ddfc <DrawWindow+0x318>)
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	4b12      	ldr	r3, [pc, #72]	; (800de08 <DrawWindow+0x324>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d207      	bcs.n	800ddd4 <DrawWindow+0x2f0>
	{
		Draw_Pop(pTab);
 800ddc4:	6838      	ldr	r0, [r7, #0]
 800ddc6:	f7ff fd19 	bl	800d7fc <Draw_Pop>
 800ddca:	e004      	b.n	800ddd6 <DrawWindow+0x2f2>
		goto Send;
 800ddcc:	bf00      	nop
 800ddce:	e002      	b.n	800ddd6 <DrawWindow+0x2f2>
		goto Send;
 800ddd0:	bf00      	nop
 800ddd2:	e000      	b.n	800ddd6 <DrawWindow+0x2f2>
	}

Send:
 800ddd4:	bf00      	nop
	Send_LCD(pTab);
 800ddd6:	6838      	ldr	r0, [r7, #0]
 800ddd8:	f7ff fcde 	bl	800d798 <Send_LCD>

	if( R2 != 302 )
 800dddc:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <DrawWindow+0x318>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800dde4:	d005      	beq.n	800ddf2 <DrawWindow+0x30e>
	{
		R2 =R2 +1;
 800dde6:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <DrawWindow+0x318>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3301      	adds	r3, #1
 800ddec:	4a03      	ldr	r2, [pc, #12]	; (800ddfc <DrawWindow+0x318>)
 800ddee:	6013      	str	r3, [r2, #0]
		goto Draw_Loop;
 800ddf0:	e69d      	b.n	800db2e <DrawWindow+0x4a>
	}

	return;
 800ddf2:	bf00      	nop
}
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	2000074c 	.word	0x2000074c
 800de00:	20000750 	.word	0x20000750
 800de04:	20000768 	.word	0x20000768
 800de08:	2000076c 	.word	0x2000076c

0800de0c <DispChar8x14>:
//+======+======+======+======+======+======+======+======+======+======+======+

char  WaveBuf[TRACK1_SIZE + TRACK2_SIZE + TRACK23_SIZE + POP_SIZE]; // ��ʾ������

void DispChar8x14(char Mode, char Code)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	4603      	mov	r3, r0
 800de14:	460a      	mov	r2, r1
 800de16:	71fb      	strb	r3, [r7, #7]
 800de18:	4613      	mov	r3, r2
 800de1a:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<8; ++i)
 800de1c:	2300      	movs	r3, #0
 800de1e:	81fb      	strh	r3, [r7, #14]
 800de20:	e06d      	b.n	800defe <DispChar8x14+0xf2>
  {
    if(Mode & SYMB)
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	f003 0310 	and.w	r3, r3, #16
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00a      	beq.n	800de42 <DispChar8x14+0x36>
    	k = SYMB8x14[(Code - '@')*8 + i];
 800de2c:	79bb      	ldrb	r3, [r7, #6]
 800de2e:	3b40      	subs	r3, #64	; 0x40
 800de30:	00da      	lsls	r2, r3, #3
 800de32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de36:	4413      	add	r3, r2
 800de38:	4a35      	ldr	r2, [pc, #212]	; (800df10 <DispChar8x14+0x104>)
 800de3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de3e:	817b      	strh	r3, [r7, #10]
 800de40:	e005      	b.n	800de4e <DispChar8x14+0x42>
    else
        k = CHAR8x14[i];
 800de42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de46:	4a33      	ldr	r2, [pc, #204]	; (800df14 <DispChar8x14+0x108>)
 800de48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de4c:	817b      	strh	r3, [r7, #10]

    if(Mode & VOID)
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	f003 0320 	and.w	r3, r3, #32
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00c      	beq.n	800de72 <DispChar8x14+0x66>
    	k &= (i%2)? 0xAAAA : 0x5555;
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	b29b      	uxth	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <DispChar8x14+0x5c>
 800de64:	4a2c      	ldr	r2, [pc, #176]	; (800df18 <DispChar8x14+0x10c>)
 800de66:	e001      	b.n	800de6c <DispChar8x14+0x60>
 800de68:	f245 5255 	movw	r2, #21845	; 0x5555
 800de6c:	897b      	ldrh	r3, [r7, #10]
 800de6e:	4013      	ands	r3, r2
 800de70:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800de72:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <DispChar8x14+0x110>)
 800de74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de78:	4a29      	ldr	r2, [pc, #164]	; (800df20 <DispChar8x14+0x114>)
 800de7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f003 fd61 	bl	8011948 <LCD_Set_Posi>
    for(j=0; j<14; ++j)
 800de86:	2300      	movs	r3, #0
 800de88:	81bb      	strh	r3, [r7, #12]
 800de8a:	e027      	b.n	800dedc <DispChar8x14+0xd0>
    {
      if(k & 4)
 800de8c:	897b      	ldrh	r3, [r7, #10]
 800de8e:	f003 0304 	and.w	r3, r3, #4
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00d      	beq.n	800deb2 <DispChar8x14+0xa6>
    	  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <DispChar8x14+0x9a>
 800dea0:	4b20      	ldr	r3, [pc, #128]	; (800df24 <DispChar8x14+0x118>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	e001      	b.n	800deaa <DispChar8x14+0x9e>
 800dea6:	4b20      	ldr	r3, [pc, #128]	; (800df28 <DispChar8x14+0x11c>)
 800dea8:	881b      	ldrh	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f003 fd9a 	bl	80119e4 <LCD_Set_Pixel>
 800deb0:	e00c      	b.n	800decc <DispChar8x14+0xc0>
      else
    	  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800deb2:	79fb      	ldrb	r3, [r7, #7]
 800deb4:	f003 0301 	and.w	r3, r3, #1
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <DispChar8x14+0xb6>
 800debc:	4b1a      	ldr	r3, [pc, #104]	; (800df28 <DispChar8x14+0x11c>)
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	e001      	b.n	800dec6 <DispChar8x14+0xba>
 800dec2:	4b18      	ldr	r3, [pc, #96]	; (800df24 <DispChar8x14+0x118>)
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f003 fd8c 	bl	80119e4 <LCD_Set_Pixel>
      k >>= 1;
 800decc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ded0:	105b      	asrs	r3, r3, #1
 800ded2:	817b      	strh	r3, [r7, #10]
    for(j=0; j<14; ++j)
 800ded4:	89bb      	ldrh	r3, [r7, #12]
 800ded6:	3301      	adds	r3, #1
 800ded8:	b29b      	uxth	r3, r3
 800deda:	81bb      	strh	r3, [r7, #12]
 800dedc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dee0:	2b0d      	cmp	r3, #13
 800dee2:	ddd3      	ble.n	800de8c <DispChar8x14+0x80>
    }
    Sx++;
 800dee4:	4b0d      	ldr	r3, [pc, #52]	; (800df1c <DispChar8x14+0x110>)
 800dee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deea:	b29b      	uxth	r3, r3
 800deec:	3301      	adds	r3, #1
 800deee:	b29b      	uxth	r3, r3
 800def0:	b21a      	sxth	r2, r3
 800def2:	4b0a      	ldr	r3, [pc, #40]	; (800df1c <DispChar8x14+0x110>)
 800def4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<8; ++i)
 800def6:	89fb      	ldrh	r3, [r7, #14]
 800def8:	3301      	adds	r3, #1
 800defa:	b29b      	uxth	r3, r3
 800defc:	81fb      	strh	r3, [r7, #14]
 800defe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800df02:	2b07      	cmp	r3, #7
 800df04:	dd8d      	ble.n	800de22 <DispChar8x14+0x16>
  }
}
 800df06:	bf00      	nop
 800df08:	bf00      	nop
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	0800132c 	.word	0x0800132c
 800df14:	08000d2c 	.word	0x08000d2c
 800df18:	ffffaaaa 	.word	0xffffaaaa
 800df1c:	20000916 	.word	0x20000916
 800df20:	20000918 	.word	0x20000918
 800df24:	20000912 	.word	0x20000912
 800df28:	20000914 	.word	0x20000914

0800df2c <DispStr8x14>:

//Mode = bit0: Normal/Inv, bit1: Char/Map
void DispStr8x14(short x0, short y0, char Mode, char *Str)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	607b      	str	r3, [r7, #4]
 800df34:	4603      	mov	r3, r0
 800df36:	81fb      	strh	r3, [r7, #14]
 800df38:	460b      	mov	r3, r1
 800df3a:	81bb      	strh	r3, [r7, #12]
 800df3c:	4613      	mov	r3, r2
 800df3e:	72fb      	strb	r3, [r7, #11]
	  short i;
	  Sx = x0; Sy = y0;
 800df40:	4a22      	ldr	r2, [pc, #136]	; (800dfcc <DispStr8x14+0xa0>)
 800df42:	89fb      	ldrh	r3, [r7, #14]
 800df44:	8013      	strh	r3, [r2, #0]
 800df46:	4a22      	ldr	r2, [pc, #136]	; (800dfd0 <DispStr8x14+0xa4>)
 800df48:	89bb      	ldrh	r3, [r7, #12]
 800df4a:	8013      	strh	r3, [r2, #0]
	  LCD_Set_Posi(Sx, Sy);
 800df4c:	4b1f      	ldr	r3, [pc, #124]	; (800dfcc <DispStr8x14+0xa0>)
 800df4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df52:	4a1f      	ldr	r2, [pc, #124]	; (800dfd0 <DispStr8x14+0xa4>)
 800df54:	f9b2 2000 	ldrsh.w	r2, [r2]
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f003 fcf4 	bl	8011948 <LCD_Set_Posi>
	  for (i=0; i<14; i++)
 800df60:	2300      	movs	r3, #0
 800df62:	82fb      	strh	r3, [r7, #22]
 800df64:	e012      	b.n	800df8c <DispStr8x14+0x60>
	  {
		  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df66:	7afb      	ldrb	r3, [r7, #11]
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <DispStr8x14+0x4a>
 800df70:	4b18      	ldr	r3, [pc, #96]	; (800dfd4 <DispStr8x14+0xa8>)
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	e001      	b.n	800df7a <DispStr8x14+0x4e>
 800df76:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <DispStr8x14+0xac>)
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f003 fd32 	bl	80119e4 <LCD_Set_Pixel>
	  for (i=0; i<14; i++)
 800df80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df84:	b29b      	uxth	r3, r3
 800df86:	3301      	adds	r3, #1
 800df88:	b29b      	uxth	r3, r3
 800df8a:	82fb      	strh	r3, [r7, #22]
 800df8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800df90:	2b0d      	cmp	r3, #13
 800df92:	dde8      	ble.n	800df66 <DispStr8x14+0x3a>
	  }
	  Sx++;
 800df94:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <DispStr8x14+0xa0>)
 800df96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	3301      	adds	r3, #1
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	b21a      	sxth	r2, r3
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <DispStr8x14+0xa0>)
 800dfa4:	801a      	strh	r2, [r3, #0]
	  while(*Str != 0)
 800dfa6:	e008      	b.n	800dfba <DispStr8x14+0x8e>
	  {
	    DispChar8x14(Mode, *Str++);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	607a      	str	r2, [r7, #4]
 800dfae:	781a      	ldrb	r2, [r3, #0]
 800dfb0:	7afb      	ldrb	r3, [r7, #11]
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff ff29 	bl	800de0c <DispChar8x14>
	  while(*Str != 0)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1f2      	bne.n	800dfa8 <DispStr8x14+0x7c>
	  }
}
 800dfc2:	bf00      	nop
 800dfc4:	bf00      	nop
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20000916 	.word	0x20000916
 800dfd0:	20000918 	.word	0x20000918
 800dfd4:	20000914 	.word	0x20000914
 800dfd8:	20000912 	.word	0x20000912

0800dfdc <SetColor>:

void SetColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	460a      	mov	r2, r1
 800dfe6:	80fb      	strh	r3, [r7, #6]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	80bb      	strh	r3, [r7, #4]
	  Background = Board_Color;
 800dfec:	4a05      	ldr	r2, [pc, #20]	; (800e004 <SetColor+0x28>)
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	8013      	strh	r3, [r2, #0]
	  Foreground = Text_Color;
 800dff2:	4a05      	ldr	r2, [pc, #20]	; (800e008 <SetColor+0x2c>)
 800dff4:	88bb      	ldrh	r3, [r7, #4]
 800dff6:	8013      	strh	r3, [r2, #0]
}
 800dff8:	bf00      	nop
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr
 800e004:	20000912 	.word	0x20000912
 800e008:	20000914 	.word	0x20000914

0800e00c <DispStr>:

/*******************************************************************************
  DispStr: ����Ļ��ʾ�ַ�/ͼ�鴮        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr(short x0, short y0, char Mode, char *Str)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	607b      	str	r3, [r7, #4]
 800e014:	4603      	mov	r3, r0
 800e016:	81fb      	strh	r3, [r7, #14]
 800e018:	460b      	mov	r3, r1
 800e01a:	81bb      	strh	r3, [r7, #12]
 800e01c:	4613      	mov	r3, r2
 800e01e:	72fb      	strb	r3, [r7, #11]
  char Code;
  short i, j, k;

  Sx = x0; Sy = y0;
 800e020:	4a5e      	ldr	r2, [pc, #376]	; (800e19c <DispStr+0x190>)
 800e022:	89fb      	ldrh	r3, [r7, #14]
 800e024:	8013      	strh	r3, [r2, #0]
 800e026:	4a5e      	ldr	r2, [pc, #376]	; (800e1a0 <DispStr+0x194>)
 800e028:	89bb      	ldrh	r3, [r7, #12]
 800e02a:	8013      	strh	r3, [r2, #0]
  LCD_Set_Posi(Sx, Sy);
 800e02c:	4b5b      	ldr	r3, [pc, #364]	; (800e19c <DispStr+0x190>)
 800e02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e032:	4a5b      	ldr	r2, [pc, #364]	; (800e1a0 <DispStr+0x194>)
 800e034:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e038:	4611      	mov	r1, r2
 800e03a:	4618      	mov	r0, r3
 800e03c:	f003 fc84 	bl	8011948 <LCD_Set_Posi>

  while(*Str != 0)
 800e040:	e0a1      	b.n	800e186 <DispStr+0x17a>
  {
    Code = *Str++;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	607a      	str	r2, [r7, #4]
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	747b      	strb	r3, [r7, #17]
    for(i=0; i<6; ++i)
 800e04c:	2300      	movs	r3, #0
 800e04e:	82fb      	strh	r3, [r7, #22]
 800e050:	e094      	b.n	800e17c <DispStr+0x170>
    {
      if(!(Mode & SYMB))
 800e052:	7afb      	ldrb	r3, [r7, #11]
 800e054:	f003 0310 	and.w	r3, r3, #16
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d10e      	bne.n	800e07a <DispStr+0x6e>
    	  k = CHAR6x8[((Code-0X21)*6)+i];
 800e05c:	7c7b      	ldrb	r3, [r7, #17]
 800e05e:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e062:	4613      	mov	r3, r2
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	4413      	add	r3, r2
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	461a      	mov	r2, r3
 800e06c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e070:	4413      	add	r3, r2
 800e072:	4a4c      	ldr	r2, [pc, #304]	; (800e1a4 <DispStr+0x198>)
 800e074:	5cd3      	ldrb	r3, [r2, r3]
 800e076:	827b      	strh	r3, [r7, #18]
 800e078:	e00d      	b.n	800e096 <DispStr+0x8a>
      else
    	  k = SYMB6x8[(Code - '!')*6 + i];
 800e07a:	7c7b      	ldrb	r3, [r7, #17]
 800e07c:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e080:	4613      	mov	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	4413      	add	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	461a      	mov	r2, r3
 800e08a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e08e:	4413      	add	r3, r2
 800e090:	4a45      	ldr	r2, [pc, #276]	; (800e1a8 <DispStr+0x19c>)
 800e092:	5cd3      	ldrb	r3, [r2, r3]
 800e094:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID)
 800e096:	7afb      	ldrb	r3, [r7, #11]
 800e098:	f003 0320 	and.w	r3, r3, #32
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00c      	beq.n	800e0ba <DispStr+0xae>
    	  k &= (i%2)? 0xAAAA : 0x5555;
 800e0a0:	8afb      	ldrh	r3, [r7, #22]
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <DispStr+0xa4>
 800e0ac:	4a3f      	ldr	r2, [pc, #252]	; (800e1ac <DispStr+0x1a0>)
 800e0ae:	e001      	b.n	800e0b4 <DispStr+0xa8>
 800e0b0:	f245 5255 	movw	r2, #21845	; 0x5555
 800e0b4:	8a7b      	ldrh	r3, [r7, #18]
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	827b      	strh	r3, [r7, #18]
      LCD_Set_Posi(Sx, Sy);
 800e0ba:	4b38      	ldr	r3, [pc, #224]	; (800e19c <DispStr+0x190>)
 800e0bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c0:	4a37      	ldr	r2, [pc, #220]	; (800e1a0 <DispStr+0x194>)
 800e0c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0c6:	4611      	mov	r1, r2
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f003 fc3d 	bl	8011948 <LCD_Set_Posi>
      LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e0ce:	7afb      	ldrb	r3, [r7, #11]
 800e0d0:	f003 0301 	and.w	r3, r3, #1
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <DispStr+0xd2>
 800e0d8:	4b35      	ldr	r3, [pc, #212]	; (800e1b0 <DispStr+0x1a4>)
 800e0da:	881b      	ldrh	r3, [r3, #0]
 800e0dc:	e001      	b.n	800e0e2 <DispStr+0xd6>
 800e0de:	4b35      	ldr	r3, [pc, #212]	; (800e1b4 <DispStr+0x1a8>)
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f003 fc7e 	bl	80119e4 <LCD_Set_Pixel>
      LCD_Set_Posi(Sx, Sy+1);
 800e0e8:	4b2c      	ldr	r3, [pc, #176]	; (800e19c <DispStr+0x190>)
 800e0ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e0ee:	4b2c      	ldr	r3, [pc, #176]	; (800e1a0 <DispStr+0x194>)
 800e0f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4610      	mov	r0, r2
 800e100:	f003 fc22 	bl	8011948 <LCD_Set_Posi>
      for(j=0; j<10; ++j)
 800e104:	2300      	movs	r3, #0
 800e106:	82bb      	strh	r3, [r7, #20]
 800e108:	e027      	b.n	800e15a <DispStr+0x14e>
      {  //j<8ʱ�����У�j<10������   �����¸�������
        if(k & 1)
 800e10a:	8a7b      	ldrh	r3, [r7, #18]
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00d      	beq.n	800e130 <DispStr+0x124>
        	LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e114:	7afb      	ldrb	r3, [r7, #11]
 800e116:	f003 0301 	and.w	r3, r3, #1
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d002      	beq.n	800e124 <DispStr+0x118>
 800e11e:	4b25      	ldr	r3, [pc, #148]	; (800e1b4 <DispStr+0x1a8>)
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	e001      	b.n	800e128 <DispStr+0x11c>
 800e124:	4b22      	ldr	r3, [pc, #136]	; (800e1b0 <DispStr+0x1a4>)
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f003 fc5b 	bl	80119e4 <LCD_Set_Pixel>
 800e12e:	e00c      	b.n	800e14a <DispStr+0x13e>
        else
        	LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e130:	7afb      	ldrb	r3, [r7, #11]
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <DispStr+0x134>
 800e13a:	4b1d      	ldr	r3, [pc, #116]	; (800e1b0 <DispStr+0x1a4>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	e001      	b.n	800e144 <DispStr+0x138>
 800e140:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <DispStr+0x1a8>)
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	4618      	mov	r0, r3
 800e146:	f003 fc4d 	bl	80119e4 <LCD_Set_Pixel>
       k >>= 1;
 800e14a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e14e:	105b      	asrs	r3, r3, #1
 800e150:	827b      	strh	r3, [r7, #18]
      for(j=0; j<10; ++j)
 800e152:	8abb      	ldrh	r3, [r7, #20]
 800e154:	3301      	adds	r3, #1
 800e156:	b29b      	uxth	r3, r3
 800e158:	82bb      	strh	r3, [r7, #20]
 800e15a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e15e:	2b09      	cmp	r3, #9
 800e160:	ddd3      	ble.n	800e10a <DispStr+0xfe>
      }
      Sx++;                 //��ʾλ��ˮƽ����+1
 800e162:	4b0e      	ldr	r3, [pc, #56]	; (800e19c <DispStr+0x190>)
 800e164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	3301      	adds	r3, #1
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	b21a      	sxth	r2, r3
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <DispStr+0x190>)
 800e172:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i)
 800e174:	8afb      	ldrh	r3, [r7, #22]
 800e176:	3301      	adds	r3, #1
 800e178:	b29b      	uxth	r3, r3
 800e17a:	82fb      	strh	r3, [r7, #22]
 800e17c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e180:	2b05      	cmp	r3, #5
 800e182:	f77f af66 	ble.w	800e052 <DispStr+0x46>
  while(*Str != 0)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f47f af59 	bne.w	800e042 <DispStr+0x36>
    }
  }
}
 800e190:	bf00      	nop
 800e192:	bf00      	nop
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	20000916 	.word	0x20000916
 800e1a0:	20000918 	.word	0x20000918
 800e1a4:	08001760 	.word	0x08001760
 800e1a8:	0800152c 	.word	0x0800152c
 800e1ac:	ffffaaaa 	.word	0xffffaaaa
 800e1b0:	20000914 	.word	0x20000914
 800e1b4:	20000912 	.word	0x20000912

0800e1b8 <Draw_Circle_D>:

/*******************************************************************************
����Ŀ��˫��Բ�ǿ�
*******************************************************************************/
void Draw_Circle_D(char Mode, short Posi_x, short Posi_y, short High, short Width, short Distance)
{
 800e1b8:	b590      	push	{r4, r7, lr}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4608      	mov	r0, r1
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	71fb      	strb	r3, [r7, #7]
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	80bb      	strh	r3, [r7, #4]
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	807b      	strh	r3, [r7, #2]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	803b      	strh	r3, [r7, #0]
  short x, y, i, j;

  Distance = Distance + Width*2 + 5 ;
 800e1d6:	8c3b      	ldrh	r3, [r7, #32]
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1de:	4413      	add	r3, r2
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	3305      	adds	r3, #5
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	84bb      	strh	r3, [r7, #36]	; 0x24
  Posi_x = Posi_x - Width;
 800e1e8:	88ba      	ldrh	r2, [r7, #4]
 800e1ea:	8c3b      	ldrh	r3, [r7, #32]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	80bb      	strh	r3, [r7, #4]

  x = Posi_x;
 800e1f2:	88bb      	ldrh	r3, [r7, #4]
 800e1f4:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 2;
 800e1f6:	887b      	ldrh	r3, [r7, #2]
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e1fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e202:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e206:	4611      	mov	r1, r2
 800e208:	4618      	mov	r0, r3
 800e20a:	f003 fb9d 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e20e:	2300      	movs	r3, #0
 800e210:	81bb      	strh	r3, [r7, #12]
 800e212:	e012      	b.n	800e23a <Draw_Circle_D+0x82>
 800e214:	79fb      	ldrb	r3, [r7, #7]
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <Draw_Circle_D+0x6c>
 800e21e:	4b9c      	ldr	r3, [pc, #624]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e220:	881b      	ldrh	r3, [r3, #0]
 800e222:	e001      	b.n	800e228 <Draw_Circle_D+0x70>
 800e224:	4b9b      	ldr	r3, [pc, #620]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	4618      	mov	r0, r3
 800e22a:	f003 fbdb 	bl	80119e4 <LCD_Set_Pixel>
 800e22e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e232:	b29b      	uxth	r3, r3
 800e234:	3301      	adds	r3, #1
 800e236:	b29b      	uxth	r3, r3
 800e238:	81bb      	strh	r3, [r7, #12]
 800e23a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e23e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e242:	3b04      	subs	r3, #4
 800e244:	429a      	cmp	r2, r3
 800e246:	dbe5      	blt.n	800e214 <Draw_Circle_D+0x5c>
  x = Posi_x + Distance;
 800e248:	88ba      	ldrh	r2, [r7, #4]
 800e24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e24c:	4413      	add	r3, r2
 800e24e:	b29b      	uxth	r3, r3
 800e250:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e252:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e256:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e25a:	4611      	mov	r1, r2
 800e25c:	4618      	mov	r0, r3
 800e25e:	f003 fb73 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e262:	2300      	movs	r3, #0
 800e264:	81bb      	strh	r3, [r7, #12]
 800e266:	e012      	b.n	800e28e <Draw_Circle_D+0xd6>
 800e268:	79fb      	ldrb	r3, [r7, #7]
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <Draw_Circle_D+0xc0>
 800e272:	4b87      	ldr	r3, [pc, #540]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e274:	881b      	ldrh	r3, [r3, #0]
 800e276:	e001      	b.n	800e27c <Draw_Circle_D+0xc4>
 800e278:	4b86      	ldr	r3, [pc, #536]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f003 fbb1 	bl	80119e4 <LCD_Set_Pixel>
 800e282:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e286:	b29b      	uxth	r3, r3
 800e288:	3301      	adds	r3, #1
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	81bb      	strh	r3, [r7, #12]
 800e28e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e292:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e296:	3b04      	subs	r3, #4
 800e298:	429a      	cmp	r2, r3
 800e29a:	dbe5      	blt.n	800e268 <Draw_Circle_D+0xb0>

  x = Posi_x + 1;
 800e29c:	88bb      	ldrh	r3, [r7, #4]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 1;
 800e2a4:	887b      	ldrh	r3, [r7, #2]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e2ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e2b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f003 fb46 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e2bc:	2300      	movs	r3, #0
 800e2be:	81bb      	strh	r3, [r7, #12]
 800e2c0:	e012      	b.n	800e2e8 <Draw_Circle_D+0x130>
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d002      	beq.n	800e2d2 <Draw_Circle_D+0x11a>
 800e2cc:	4b70      	ldr	r3, [pc, #448]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	e001      	b.n	800e2d6 <Draw_Circle_D+0x11e>
 800e2d2:	4b70      	ldr	r3, [pc, #448]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f003 fb84 	bl	80119e4 <LCD_Set_Pixel>
 800e2dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	81bb      	strh	r3, [r7, #12]
 800e2e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e2ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e2f0:	3b02      	subs	r3, #2
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	dbe5      	blt.n	800e2c2 <Draw_Circle_D+0x10a>
  x = Posi_x + Distance-1;
 800e2f6:	88ba      	ldrh	r2, [r7, #4]
 800e2f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2fa:	4413      	add	r3, r2
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	3b01      	subs	r3, #1
 800e300:	b29b      	uxth	r3, r3
 800e302:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800e304:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e308:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f003 fb1a 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e314:	2300      	movs	r3, #0
 800e316:	81bb      	strh	r3, [r7, #12]
 800e318:	e012      	b.n	800e340 <Draw_Circle_D+0x188>
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <Draw_Circle_D+0x172>
 800e324:	4b5a      	ldr	r3, [pc, #360]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	e001      	b.n	800e32e <Draw_Circle_D+0x176>
 800e32a:	4b5a      	ldr	r3, [pc, #360]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e32c:	881b      	ldrh	r3, [r3, #0]
 800e32e:	4618      	mov	r0, r3
 800e330:	f003 fb58 	bl	80119e4 <LCD_Set_Pixel>
 800e334:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	3301      	adds	r3, #1
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	81bb      	strh	r3, [r7, #12]
 800e340:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e344:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e348:	3b02      	subs	r3, #2
 800e34a:	429a      	cmp	r2, r3
 800e34c:	dbe5      	blt.n	800e31a <Draw_Circle_D+0x162>

  x = Posi_x + 2;
 800e34e:	88bb      	ldrh	r3, [r7, #4]
 800e350:	3302      	adds	r3, #2
 800e352:	b29b      	uxth	r3, r3
 800e354:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e356:	887b      	ldrh	r3, [r7, #2]
 800e358:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e35a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e35e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e362:	4611      	mov	r1, r2
 800e364:	4618      	mov	r0, r3
 800e366:	f003 faef 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e36a:	2300      	movs	r3, #0
 800e36c:	81bb      	strh	r3, [r7, #12]
 800e36e:	e012      	b.n	800e396 <Draw_Circle_D+0x1de>
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <Draw_Circle_D+0x1c8>
 800e37a:	4b45      	ldr	r3, [pc, #276]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	e001      	b.n	800e384 <Draw_Circle_D+0x1cc>
 800e380:	4b44      	ldr	r3, [pc, #272]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	4618      	mov	r0, r3
 800e386:	f003 fb2d 	bl	80119e4 <LCD_Set_Pixel>
 800e38a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	3301      	adds	r3, #1
 800e392:	b29b      	uxth	r3, r3
 800e394:	81bb      	strh	r3, [r7, #12]
 800e396:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e39a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	dbe6      	blt.n	800e370 <Draw_Circle_D+0x1b8>
  x = Posi_x + Distance-2;
 800e3a2:	88ba      	ldrh	r2, [r7, #4]
 800e3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3a6:	4413      	add	r3, r2
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	3b02      	subs	r3, #2
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800e3b0:	887b      	ldrh	r3, [r7, #2]
 800e3b2:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800e3b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e3b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3bc:	4611      	mov	r1, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f003 fac2 	bl	8011948 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	81bb      	strh	r3, [r7, #12]
 800e3c8:	e012      	b.n	800e3f0 <Draw_Circle_D+0x238>
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <Draw_Circle_D+0x222>
 800e3d4:	4b2e      	ldr	r3, [pc, #184]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	e001      	b.n	800e3de <Draw_Circle_D+0x226>
 800e3da:	4b2e      	ldr	r3, [pc, #184]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f003 fb00 	bl	80119e4 <LCD_Set_Pixel>
 800e3e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	81bb      	strh	r3, [r7, #12]
 800e3f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e3f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	dbe6      	blt.n	800e3ca <Draw_Circle_D+0x212>

  y = Posi_y;
 800e3fc:	887b      	ldrh	r3, [r7, #2]
 800e3fe:	813b      	strh	r3, [r7, #8]

  for(i=0;i<Width;i++){
 800e400:	2300      	movs	r3, #0
 800e402:	81fb      	strh	r3, [r7, #14]
 800e404:	e05f      	b.n	800e4c6 <Draw_Circle_D+0x30e>
    LCD_Set_Posi(Posi_x+3+i, y);
 800e406:	88ba      	ldrh	r2, [r7, #4]
 800e408:	89fb      	ldrh	r3, [r7, #14]
 800e40a:	4413      	add	r3, r2
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3303      	adds	r3, #3
 800e410:	b29b      	uxth	r3, r3
 800e412:	b21b      	sxth	r3, r3
 800e414:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e418:	4611      	mov	r1, r2
 800e41a:	4618      	mov	r0, r3
 800e41c:	f003 fa94 	bl	8011948 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e420:	2300      	movs	r3, #0
 800e422:	81bb      	strh	r3, [r7, #12]
 800e424:	e012      	b.n	800e44c <Draw_Circle_D+0x294>
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <Draw_Circle_D+0x27e>
 800e430:	4b17      	ldr	r3, [pc, #92]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	e001      	b.n	800e43a <Draw_Circle_D+0x282>
 800e436:	4b17      	ldr	r3, [pc, #92]	; (800e494 <Draw_Circle_D+0x2dc>)
 800e438:	881b      	ldrh	r3, [r3, #0]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f003 fad2 	bl	80119e4 <LCD_Set_Pixel>
 800e440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e444:	b29b      	uxth	r3, r3
 800e446:	3301      	adds	r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	81bb      	strh	r3, [r7, #12]
 800e44c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e450:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e454:	429a      	cmp	r2, r3
 800e456:	dbe6      	blt.n	800e426 <Draw_Circle_D+0x26e>
    LCD_Set_Posi(Posi_x+Distance-3-i, y);
 800e458:	88ba      	ldrh	r2, [r7, #4]
 800e45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45c:	4413      	add	r3, r2
 800e45e:	b29a      	uxth	r2, r3
 800e460:	89fb      	ldrh	r3, [r7, #14]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	b29b      	uxth	r3, r3
 800e466:	3b03      	subs	r3, #3
 800e468:	b29b      	uxth	r3, r3
 800e46a:	b21b      	sxth	r3, r3
 800e46c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e470:	4611      	mov	r1, r2
 800e472:	4618      	mov	r0, r3
 800e474:	f003 fa68 	bl	8011948 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e478:	2300      	movs	r3, #0
 800e47a:	81bb      	strh	r3, [r7, #12]
 800e47c:	e017      	b.n	800e4ae <Draw_Circle_D+0x2f6>
 800e47e:	79fb      	ldrb	r3, [r7, #7]
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	2b00      	cmp	r3, #0
 800e486:	d007      	beq.n	800e498 <Draw_Circle_D+0x2e0>
 800e488:	4b01      	ldr	r3, [pc, #4]	; (800e490 <Draw_Circle_D+0x2d8>)
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	e006      	b.n	800e49c <Draw_Circle_D+0x2e4>
 800e48e:	bf00      	nop
 800e490:	20000914 	.word	0x20000914
 800e494:	20000912 	.word	0x20000912
 800e498:	4b10      	ldr	r3, [pc, #64]	; (800e4dc <Draw_Circle_D+0x324>)
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	4618      	mov	r0, r3
 800e49e:	f003 faa1 	bl	80119e4 <LCD_Set_Pixel>
 800e4a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	81bb      	strh	r3, [r7, #12]
 800e4ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e4b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	dbe1      	blt.n	800e47e <Draw_Circle_D+0x2c6>
  for(i=0;i<Width;i++){
 800e4ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	81fb      	strh	r3, [r7, #14]
 800e4c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e4ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	db99      	blt.n	800e406 <Draw_Circle_D+0x24e>
  }
}
 800e4d2:	bf00      	nop
 800e4d4:	bf00      	nop
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd90      	pop	{r4, r7, pc}
 800e4dc:	20000912 	.word	0x20000912

0800e4e0 <DispStr10x14>:

/*******************************************************************************
  DispStr:                               Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr10x14(short x0, short y0, char Mode, char *Str)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	607b      	str	r3, [r7, #4]
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	81fb      	strh	r3, [r7, #14]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	81bb      	strh	r3, [r7, #12]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	72fb      	strb	r3, [r7, #11]
  Sx = x0; Sy = y0;
 800e4f4:	4a0c      	ldr	r2, [pc, #48]	; (800e528 <DispStr10x14+0x48>)
 800e4f6:	89fb      	ldrh	r3, [r7, #14]
 800e4f8:	8013      	strh	r3, [r2, #0]
 800e4fa:	4a0c      	ldr	r2, [pc, #48]	; (800e52c <DispStr10x14+0x4c>)
 800e4fc:	89bb      	ldrh	r3, [r7, #12]
 800e4fe:	8013      	strh	r3, [r2, #0]
  while(*Str != 0)
 800e500:	e008      	b.n	800e514 <DispStr10x14+0x34>
  {
    DispChar10x14(Mode, *Str++);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	607a      	str	r2, [r7, #4]
 800e508:	781a      	ldrb	r2, [r3, #0]
 800e50a:	7afb      	ldrb	r3, [r7, #11]
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f80e 	bl	800e530 <DispChar10x14>
  while(*Str != 0)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d1f2      	bne.n	800e502 <DispStr10x14+0x22>
  }
}
 800e51c:	bf00      	nop
 800e51e:	bf00      	nop
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20000916 	.word	0x20000916
 800e52c:	20000918 	.word	0x20000918

0800e530 <DispChar10x14>:
/*******************************************************************************
 Disp_Char10x14:                        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispChar10x14(char Mode, char Code)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	4603      	mov	r3, r0
 800e538:	460a      	mov	r2, r1
 800e53a:	71fb      	strb	r3, [r7, #7]
 800e53c:	4613      	mov	r3, r2
 800e53e:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<10; ++i)
 800e540:	2300      	movs	r3, #0
 800e542:	81fb      	strh	r3, [r7, #14]
 800e544:	e0fe      	b.n	800e744 <DispChar10x14+0x214>
  {
    if(Mode & SYMB) k = SYMB10x14[(Code - '@')*10 + i];
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00f      	beq.n	800e570 <DispChar10x14+0x40>
 800e550:	79bb      	ldrb	r3, [r7, #6]
 800e552:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	461a      	mov	r2, r3
 800e560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e564:	4413      	add	r3, r2
 800e566:	4a7c      	ldr	r2, [pc, #496]	; (800e758 <DispChar10x14+0x228>)
 800e568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e56c:	817b      	strh	r3, [r7, #10]
 800e56e:	e00e      	b.n	800e58e <DispChar10x14+0x5e>
    else            k = CHAR10x14[((Code-0X21)*10)+i];
 800e570:	79bb      	ldrb	r3, [r7, #6]
 800e572:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e576:	4613      	mov	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4413      	add	r3, r2
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	461a      	mov	r2, r3
 800e580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e584:	4413      	add	r3, r2
 800e586:	4a75      	ldr	r2, [pc, #468]	; (800e75c <DispChar10x14+0x22c>)
 800e588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e58c:	817b      	strh	r3, [r7, #10]
    if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e58e:	79fb      	ldrb	r3, [r7, #7]
 800e590:	f003 0320 	and.w	r3, r3, #32
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00c      	beq.n	800e5b2 <DispChar10x14+0x82>
 800e598:	89fb      	ldrh	r3, [r7, #14]
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <DispChar10x14+0x78>
 800e5a4:	4a6e      	ldr	r2, [pc, #440]	; (800e760 <DispChar10x14+0x230>)
 800e5a6:	e001      	b.n	800e5ac <DispChar10x14+0x7c>
 800e5a8:	f245 5255 	movw	r2, #21845	; 0x5555
 800e5ac:	897b      	ldrh	r3, [r7, #10]
 800e5ae:	4013      	ands	r3, r2
 800e5b0:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800e5b2:	4b6c      	ldr	r3, [pc, #432]	; (800e764 <DispChar10x14+0x234>)
 800e5b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5b8:	4a6b      	ldr	r2, [pc, #428]	; (800e768 <DispChar10x14+0x238>)
 800e5ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e5be:	4611      	mov	r1, r2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f003 f9c1 	bl	8011948 <LCD_Set_Posi>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	f003 0310 	and.w	r3, r3, #16
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d038      	beq.n	800e642 <DispChar10x14+0x112>
 800e5d0:	79bb      	ldrb	r3, [r7, #6]
 800e5d2:	2b43      	cmp	r3, #67	; 0x43
 800e5d4:	d005      	beq.n	800e5e2 <DispChar10x14+0xb2>
 800e5d6:	79bb      	ldrb	r3, [r7, #6]
 800e5d8:	2b44      	cmp	r3, #68	; 0x44
 800e5da:	d002      	beq.n	800e5e2 <DispChar10x14+0xb2>
 800e5dc:	79bb      	ldrb	r3, [r7, #6]
 800e5de:	2b45      	cmp	r3, #69	; 0x45
 800e5e0:	d12f      	bne.n	800e642 <DispChar10x14+0x112>
      for(j=0; j<11; ++j){
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	81bb      	strh	r3, [r7, #12]
 800e5e6:	e027      	b.n	800e638 <DispChar10x14+0x108>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e5e8:	897b      	ldrh	r3, [r7, #10]
 800e5ea:	f003 0304 	and.w	r3, r3, #4
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00d      	beq.n	800e60e <DispChar10x14+0xde>
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <DispChar10x14+0xd2>
 800e5fc:	4b5b      	ldr	r3, [pc, #364]	; (800e76c <DispChar10x14+0x23c>)
 800e5fe:	881b      	ldrh	r3, [r3, #0]
 800e600:	e001      	b.n	800e606 <DispChar10x14+0xd6>
 800e602:	4b5b      	ldr	r3, [pc, #364]	; (800e770 <DispChar10x14+0x240>)
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f003 f9ec 	bl	80119e4 <LCD_Set_Pixel>
 800e60c:	e00c      	b.n	800e628 <DispChar10x14+0xf8>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <DispChar10x14+0xee>
 800e618:	4b55      	ldr	r3, [pc, #340]	; (800e770 <DispChar10x14+0x240>)
 800e61a:	881b      	ldrh	r3, [r3, #0]
 800e61c:	e001      	b.n	800e622 <DispChar10x14+0xf2>
 800e61e:	4b53      	ldr	r3, [pc, #332]	; (800e76c <DispChar10x14+0x23c>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	4618      	mov	r0, r3
 800e624:	f003 f9de 	bl	80119e4 <LCD_Set_Pixel>
        k >>= 1;}
 800e628:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e62c:	105b      	asrs	r3, r3, #1
 800e62e:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e630:	89bb      	ldrh	r3, [r7, #12]
 800e632:	3301      	adds	r3, #1
 800e634:	b29b      	uxth	r3, r3
 800e636:	81bb      	strh	r3, [r7, #12]
 800e638:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e63c:	2b0a      	cmp	r3, #10
 800e63e:	ddd3      	ble.n	800e5e8 <DispChar10x14+0xb8>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e640:	e073      	b.n	800e72a <DispChar10x14+0x1fa>
    }
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e642:	79fb      	ldrb	r3, [r7, #7]
 800e644:	f003 0310 	and.w	r3, r3, #16
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d03f      	beq.n	800e6cc <DispChar10x14+0x19c>
 800e64c:	79bb      	ldrb	r3, [r7, #6]
 800e64e:	2b4c      	cmp	r3, #76	; 0x4c
 800e650:	d002      	beq.n	800e658 <DispChar10x14+0x128>
 800e652:	79bb      	ldrb	r3, [r7, #6]
 800e654:	2b48      	cmp	r3, #72	; 0x48
 800e656:	d139      	bne.n	800e6cc <DispChar10x14+0x19c>
      LCD_Set_Posi(Sx, Sy);
 800e658:	4b42      	ldr	r3, [pc, #264]	; (800e764 <DispChar10x14+0x234>)
 800e65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e65e:	4a42      	ldr	r2, [pc, #264]	; (800e768 <DispChar10x14+0x238>)
 800e660:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f003 f96e 	bl	8011948 <LCD_Set_Posi>
      for(j=0; j<11; ++j){
 800e66c:	2300      	movs	r3, #0
 800e66e:	81bb      	strh	r3, [r7, #12]
 800e670:	e027      	b.n	800e6c2 <DispChar10x14+0x192>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e672:	897b      	ldrh	r3, [r7, #10]
 800e674:	f003 0304 	and.w	r3, r3, #4
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d00d      	beq.n	800e698 <DispChar10x14+0x168>
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <DispChar10x14+0x15c>
 800e686:	4b39      	ldr	r3, [pc, #228]	; (800e76c <DispChar10x14+0x23c>)
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	e001      	b.n	800e690 <DispChar10x14+0x160>
 800e68c:	4b38      	ldr	r3, [pc, #224]	; (800e770 <DispChar10x14+0x240>)
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f003 f9a7 	bl	80119e4 <LCD_Set_Pixel>
 800e696:	e00c      	b.n	800e6b2 <DispChar10x14+0x182>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e698:	79fb      	ldrb	r3, [r7, #7]
 800e69a:	f003 0301 	and.w	r3, r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <DispChar10x14+0x178>
 800e6a2:	4b33      	ldr	r3, [pc, #204]	; (800e770 <DispChar10x14+0x240>)
 800e6a4:	881b      	ldrh	r3, [r3, #0]
 800e6a6:	e001      	b.n	800e6ac <DispChar10x14+0x17c>
 800e6a8:	4b30      	ldr	r3, [pc, #192]	; (800e76c <DispChar10x14+0x23c>)
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f003 f999 	bl	80119e4 <LCD_Set_Pixel>
        k >>= 1;
 800e6b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e6b6:	105b      	asrs	r3, r3, #1
 800e6b8:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e6ba:	89bb      	ldrh	r3, [r7, #12]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	81bb      	strh	r3, [r7, #12]
 800e6c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e6c6:	2b0a      	cmp	r3, #10
 800e6c8:	ddd3      	ble.n	800e672 <DispChar10x14+0x142>
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e6ca:	e02e      	b.n	800e72a <DispChar10x14+0x1fa>
      }
    }
    else{
      for(j=0; j<14; ++j){
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	81bb      	strh	r3, [r7, #12]
 800e6d0:	e027      	b.n	800e722 <DispChar10x14+0x1f2>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e6d2:	897b      	ldrh	r3, [r7, #10]
 800e6d4:	f003 0304 	and.w	r3, r3, #4
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00d      	beq.n	800e6f8 <DispChar10x14+0x1c8>
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <DispChar10x14+0x1bc>
 800e6e6:	4b21      	ldr	r3, [pc, #132]	; (800e76c <DispChar10x14+0x23c>)
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	e001      	b.n	800e6f0 <DispChar10x14+0x1c0>
 800e6ec:	4b20      	ldr	r3, [pc, #128]	; (800e770 <DispChar10x14+0x240>)
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f003 f977 	bl	80119e4 <LCD_Set_Pixel>
 800e6f6:	e00c      	b.n	800e712 <DispChar10x14+0x1e2>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <DispChar10x14+0x1d8>
 800e702:	4b1b      	ldr	r3, [pc, #108]	; (800e770 <DispChar10x14+0x240>)
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	e001      	b.n	800e70c <DispChar10x14+0x1dc>
 800e708:	4b18      	ldr	r3, [pc, #96]	; (800e76c <DispChar10x14+0x23c>)
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f003 f969 	bl	80119e4 <LCD_Set_Pixel>
        k >>= 1;
 800e712:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e716:	105b      	asrs	r3, r3, #1
 800e718:	817b      	strh	r3, [r7, #10]
      for(j=0; j<14; ++j){
 800e71a:	89bb      	ldrh	r3, [r7, #12]
 800e71c:	3301      	adds	r3, #1
 800e71e:	b29b      	uxth	r3, r3
 800e720:	81bb      	strh	r3, [r7, #12]
 800e722:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e726:	2b0d      	cmp	r3, #13
 800e728:	ddd3      	ble.n	800e6d2 <DispChar10x14+0x1a2>
      }
    }
    Sx++;
 800e72a:	4b0e      	ldr	r3, [pc, #56]	; (800e764 <DispChar10x14+0x234>)
 800e72c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e730:	b29b      	uxth	r3, r3
 800e732:	3301      	adds	r3, #1
 800e734:	b29b      	uxth	r3, r3
 800e736:	b21a      	sxth	r2, r3
 800e738:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <DispChar10x14+0x234>)
 800e73a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<10; ++i)
 800e73c:	89fb      	ldrh	r3, [r7, #14]
 800e73e:	3301      	adds	r3, #1
 800e740:	b29b      	uxth	r3, r3
 800e742:	81fb      	strh	r3, [r7, #14]
 800e744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e748:	2b09      	cmp	r3, #9
 800e74a:	f77f aefc 	ble.w	800e546 <DispChar10x14+0x16>
  }
}
 800e74e:	bf00      	nop
 800e750:	bf00      	nop
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	08001994 	.word	0x08001994
 800e75c:	08001a34 	.word	0x08001a34
 800e760:	ffffaaaa 	.word	0xffffaaaa
 800e764:	20000916 	.word	0x20000916
 800e768:	20000918 	.word	0x20000918
 800e76c:	20000912 	.word	0x20000912
 800e770:	20000914 	.word	0x20000914

0800e774 <NotePixel>:

/*******************************************************************************
 NotePixel: ��������������     Color: ������ɫ(1/0)  ���ض�λ: Nx, Ny
*******************************************************************************/
void NotePixel(char Color)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	71fb      	strb	r3, [r7, #7]
  short i, j, *pBuf = (short*)&WaveBuf[300 + 300 + 300];
 800e77e:	4b42      	ldr	r3, [pc, #264]	; (800e888 <NotePixel+0x114>)
 800e780:	60fb      	str	r3, [r7, #12]

  Nx = Nx%ParamTab[WXx1];
 800e782:	4b42      	ldr	r3, [pc, #264]	; (800e88c <NotePixel+0x118>)
 800e784:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e788:	4a41      	ldr	r2, [pc, #260]	; (800e890 <NotePixel+0x11c>)
 800e78a:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e78e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e792:	fb01 f202 	mul.w	r2, r1, r2
 800e796:	1a9b      	subs	r3, r3, r2
 800e798:	b21a      	sxth	r2, r3
 800e79a:	4b3c      	ldr	r3, [pc, #240]	; (800e88c <NotePixel+0x118>)
 800e79c:	801a      	strh	r2, [r3, #0]
  Ny = Ny%ParamTab[HYx2];             // Nx, Ny �����򷵻����
 800e79e:	4b3d      	ldr	r3, [pc, #244]	; (800e894 <NotePixel+0x120>)
 800e7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7a4:	4a3a      	ldr	r2, [pc, #232]	; (800e890 <NotePixel+0x11c>)
 800e7a6:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e7aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e7ae:	fb01 f202 	mul.w	r2, r1, r2
 800e7b2:	1a9b      	subs	r3, r3, r2
 800e7b4:	b21a      	sxth	r2, r3
 800e7b6:	4b37      	ldr	r3, [pc, #220]	; (800e894 <NotePixel+0x120>)
 800e7b8:	801a      	strh	r2, [r3, #0]
  i  = Nx*(ParamTab[HYx2]/32)+ Ny/16;
 800e7ba:	4b35      	ldr	r3, [pc, #212]	; (800e890 <NotePixel+0x11c>)
 800e7bc:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da00      	bge.n	800e7c6 <NotePixel+0x52>
 800e7c4:	331f      	adds	r3, #31
 800e7c6:	115b      	asrs	r3, r3, #5
 800e7c8:	b21b      	sxth	r3, r3
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	4b2f      	ldr	r3, [pc, #188]	; (800e88c <NotePixel+0x118>)
 800e7ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	fb12 f303 	smulbb	r3, r2, r3
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	4b2e      	ldr	r3, [pc, #184]	; (800e894 <NotePixel+0x120>)
 800e7dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	da00      	bge.n	800e7e6 <NotePixel+0x72>
 800e7e4:	330f      	adds	r3, #15
 800e7e6:	111b      	asrs	r3, r3, #4
 800e7e8:	b21b      	sxth	r3, r3
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	4413      	add	r3, r2
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	817b      	strh	r3, [r7, #10]
  j  = Ny%16;
 800e7f2:	4b28      	ldr	r3, [pc, #160]	; (800e894 <NotePixel+0x120>)
 800e7f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7f8:	425a      	negs	r2, r3
 800e7fa:	f003 030f 	and.w	r3, r3, #15
 800e7fe:	f002 020f 	and.w	r2, r2, #15
 800e802:	bf58      	it	pl
 800e804:	4253      	negpl	r3, r2
 800e806:	813b      	strh	r3, [r7, #8]
  if(Color) pBuf[i] |=  1 << j;
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d015      	beq.n	800e83a <NotePixel+0xc6>
 800e80e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	4413      	add	r3, r2
 800e818:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e81c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e820:	2201      	movs	r2, #1
 800e822:	fa02 f303 	lsl.w	r3, r2, r3
 800e826:	b21a      	sxth	r2, r3
 800e828:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	4403      	add	r3, r0
 800e832:	430a      	orrs	r2, r1
 800e834:	b212      	sxth	r2, r2
 800e836:	801a      	strh	r2, [r3, #0]
 800e838:	e016      	b.n	800e868 <NotePixel+0xf4>
  else      pBuf[i] &=~(1 << j);
 800e83a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	4413      	add	r3, r2
 800e844:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e848:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e84c:	2201      	movs	r2, #1
 800e84e:	fa02 f303 	lsl.w	r3, r2, r3
 800e852:	b21b      	sxth	r3, r3
 800e854:	43db      	mvns	r3, r3
 800e856:	b21a      	sxth	r2, r3
 800e858:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	4403      	add	r3, r0
 800e862:	400a      	ands	r2, r1
 800e864:	b212      	sxth	r2, r2
 800e866:	801a      	strh	r2, [r3, #0]
  Ny++;
 800e868:	4b0a      	ldr	r3, [pc, #40]	; (800e894 <NotePixel+0x120>)
 800e86a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	3301      	adds	r3, #1
 800e872:	b29b      	uxth	r3, r3
 800e874:	b21a      	sxth	r2, r3
 800e876:	4b07      	ldr	r3, [pc, #28]	; (800e894 <NotePixel+0x120>)
 800e878:	801a      	strh	r2, [r3, #0]
}
 800e87a:	bf00      	nop
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20000ca0 	.word	0x20000ca0
 800e88c:	20000002 	.word	0x20000002
 800e890:	20000140 	.word	0x20000140
 800e894:	20000004 	.word	0x20000004

0800e898 <Buil_Pop>:

/*******************************************************************************
  Bull_Pop: ������������ݼ���������   �������: Nx, Ny, Wx, Hy
*******************************************************************************/
void Buil_Pop(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
  short i;
  memset(&WaveBuf[TRACK1_SIZE+TRACK2_SIZE+TRACK23_SIZE], BLK, POP_SIZE);
 800e89e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	487f      	ldr	r0, [pc, #508]	; (800eaa4 <Buil_Pop+0x20c>)
 800e8a6:	f017 fde1 	bl	802646c <memset>
  Nx = 0; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e8aa:	4b7f      	ldr	r3, [pc, #508]	; (800eaa8 <Buil_Pop+0x210>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	801a      	strh	r2, [r3, #0]
 800e8b0:	4b7e      	ldr	r3, [pc, #504]	; (800eaac <Buil_Pop+0x214>)
 800e8b2:	2203      	movs	r2, #3
 800e8b4:	801a      	strh	r2, [r3, #0]
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	80fb      	strh	r3, [r7, #6]
 800e8ba:	e008      	b.n	800e8ce <Buil_Pop+0x36>
 800e8bc:	2001      	movs	r0, #1
 800e8be:	f7ff ff59 	bl	800e774 <NotePixel>
 800e8c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	80fb      	strh	r3, [r7, #6]
 800e8ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8d2:	4b77      	ldr	r3, [pc, #476]	; (800eab0 <Buil_Pop+0x218>)
 800e8d4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e8d8:	0fd9      	lsrs	r1, r3, #31
 800e8da:	440b      	add	r3, r1
 800e8dc:	105b      	asrs	r3, r3, #1
 800e8de:	b21b      	sxth	r3, r3
 800e8e0:	3b06      	subs	r3, #6
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	dbea      	blt.n	800e8bc <Buil_Pop+0x24>
  Nx = 1; Ny = 2;                    NotePixel(1);
 800e8e6:	4b70      	ldr	r3, [pc, #448]	; (800eaa8 <Buil_Pop+0x210>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	801a      	strh	r2, [r3, #0]
 800e8ec:	4b6f      	ldr	r3, [pc, #444]	; (800eaac <Buil_Pop+0x214>)
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	801a      	strh	r2, [r3, #0]
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	f7ff ff3e 	bl	800e774 <NotePixel>
  Nx = 1; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e8f8:	4b6b      	ldr	r3, [pc, #428]	; (800eaa8 <Buil_Pop+0x210>)
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	801a      	strh	r2, [r3, #0]
 800e8fe:	4b6c      	ldr	r3, [pc, #432]	; (800eab0 <Buil_Pop+0x218>)
 800e900:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e904:	0fda      	lsrs	r2, r3, #31
 800e906:	4413      	add	r3, r2
 800e908:	105b      	asrs	r3, r3, #1
 800e90a:	b21b      	sxth	r3, r3
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	3b03      	subs	r3, #3
 800e910:	b29b      	uxth	r3, r3
 800e912:	b21a      	sxth	r2, r3
 800e914:	4b65      	ldr	r3, [pc, #404]	; (800eaac <Buil_Pop+0x214>)
 800e916:	801a      	strh	r2, [r3, #0]
 800e918:	2001      	movs	r0, #1
 800e91a:	f7ff ff2b 	bl	800e774 <NotePixel>
  Nx = 2; Ny = 1;                    NotePixel(1);
 800e91e:	4b62      	ldr	r3, [pc, #392]	; (800eaa8 <Buil_Pop+0x210>)
 800e920:	2202      	movs	r2, #2
 800e922:	801a      	strh	r2, [r3, #0]
 800e924:	4b61      	ldr	r3, [pc, #388]	; (800eaac <Buil_Pop+0x214>)
 800e926:	2201      	movs	r2, #1
 800e928:	801a      	strh	r2, [r3, #0]
 800e92a:	2001      	movs	r0, #1
 800e92c:	f7ff ff22 	bl	800e774 <NotePixel>
  Nx = 2; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e930:	4b5d      	ldr	r3, [pc, #372]	; (800eaa8 <Buil_Pop+0x210>)
 800e932:	2202      	movs	r2, #2
 800e934:	801a      	strh	r2, [r3, #0]
 800e936:	4b5e      	ldr	r3, [pc, #376]	; (800eab0 <Buil_Pop+0x218>)
 800e938:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e93c:	0fda      	lsrs	r2, r3, #31
 800e93e:	4413      	add	r3, r2
 800e940:	105b      	asrs	r3, r3, #1
 800e942:	b21b      	sxth	r3, r3
 800e944:	b29b      	uxth	r3, r3
 800e946:	3b02      	subs	r3, #2
 800e948:	b29b      	uxth	r3, r3
 800e94a:	b21a      	sxth	r2, r3
 800e94c:	4b57      	ldr	r3, [pc, #348]	; (800eaac <Buil_Pop+0x214>)
 800e94e:	801a      	strh	r2, [r3, #0]
 800e950:	2001      	movs	r0, #1
 800e952:	f7ff ff0f 	bl	800e774 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e956:	4b54      	ldr	r3, [pc, #336]	; (800eaa8 <Buil_Pop+0x210>)
 800e958:	2203      	movs	r2, #3
 800e95a:	801a      	strh	r2, [r3, #0]
 800e95c:	e01e      	b.n	800e99c <Buil_Pop+0x104>
  {
    Ny = 0;                     NotePixel(1);
 800e95e:	4b53      	ldr	r3, [pc, #332]	; (800eaac <Buil_Pop+0x214>)
 800e960:	2200      	movs	r2, #0
 800e962:	801a      	strh	r2, [r3, #0]
 800e964:	2001      	movs	r0, #1
 800e966:	f7ff ff05 	bl	800e774 <NotePixel>
    Ny = ParamTab[HYx2]/2 - 1;; NotePixel(1);
 800e96a:	4b51      	ldr	r3, [pc, #324]	; (800eab0 <Buil_Pop+0x218>)
 800e96c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e970:	0fda      	lsrs	r2, r3, #31
 800e972:	4413      	add	r3, r2
 800e974:	105b      	asrs	r3, r3, #1
 800e976:	b21b      	sxth	r3, r3
 800e978:	b29b      	uxth	r3, r3
 800e97a:	3b01      	subs	r3, #1
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	b21a      	sxth	r2, r3
 800e980:	4b4a      	ldr	r3, [pc, #296]	; (800eaac <Buil_Pop+0x214>)
 800e982:	801a      	strh	r2, [r3, #0]
 800e984:	2001      	movs	r0, #1
 800e986:	f7ff fef5 	bl	800e774 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e98a:	4b47      	ldr	r3, [pc, #284]	; (800eaa8 <Buil_Pop+0x210>)
 800e98c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e990:	b29b      	uxth	r3, r3
 800e992:	3301      	adds	r3, #1
 800e994:	b29b      	uxth	r3, r3
 800e996:	b21a      	sxth	r2, r3
 800e998:	4b43      	ldr	r3, [pc, #268]	; (800eaa8 <Buil_Pop+0x210>)
 800e99a:	801a      	strh	r2, [r3, #0]
 800e99c:	4b42      	ldr	r3, [pc, #264]	; (800eaa8 <Buil_Pop+0x210>)
 800e99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	4b42      	ldr	r3, [pc, #264]	; (800eab0 <Buil_Pop+0x218>)
 800e9a6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9aa:	3b02      	subs	r3, #2
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	dbd6      	blt.n	800e95e <Buil_Pop+0xc6>
  }
  Nx = ParamTab[WXx1]-3; Ny = 1;                    NotePixel(1);
 800e9b0:	4b3f      	ldr	r3, [pc, #252]	; (800eab0 <Buil_Pop+0x218>)
 800e9b2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	3b03      	subs	r3, #3
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	b21a      	sxth	r2, r3
 800e9be:	4b3a      	ldr	r3, [pc, #232]	; (800eaa8 <Buil_Pop+0x210>)
 800e9c0:	801a      	strh	r2, [r3, #0]
 800e9c2:	4b3a      	ldr	r3, [pc, #232]	; (800eaac <Buil_Pop+0x214>)
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	801a      	strh	r2, [r3, #0]
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	f7ff fed3 	bl	800e774 <NotePixel>
  Nx = ParamTab[WXx1]-3; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e9ce:	4b38      	ldr	r3, [pc, #224]	; (800eab0 <Buil_Pop+0x218>)
 800e9d0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	3b03      	subs	r3, #3
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	b21a      	sxth	r2, r3
 800e9dc:	4b32      	ldr	r3, [pc, #200]	; (800eaa8 <Buil_Pop+0x210>)
 800e9de:	801a      	strh	r2, [r3, #0]
 800e9e0:	4b33      	ldr	r3, [pc, #204]	; (800eab0 <Buil_Pop+0x218>)
 800e9e2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e9e6:	0fda      	lsrs	r2, r3, #31
 800e9e8:	4413      	add	r3, r2
 800e9ea:	105b      	asrs	r3, r3, #1
 800e9ec:	b21b      	sxth	r3, r3
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	3b02      	subs	r3, #2
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	b21a      	sxth	r2, r3
 800e9f6:	4b2d      	ldr	r3, [pc, #180]	; (800eaac <Buil_Pop+0x214>)
 800e9f8:	801a      	strh	r2, [r3, #0]
 800e9fa:	2001      	movs	r0, #1
 800e9fc:	f7ff feba 	bl	800e774 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = 2;                    NotePixel(1);
 800ea00:	4b2b      	ldr	r3, [pc, #172]	; (800eab0 <Buil_Pop+0x218>)
 800ea02:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3b02      	subs	r3, #2
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	b21a      	sxth	r2, r3
 800ea0e:	4b26      	ldr	r3, [pc, #152]	; (800eaa8 <Buil_Pop+0x210>)
 800ea10:	801a      	strh	r2, [r3, #0]
 800ea12:	4b26      	ldr	r3, [pc, #152]	; (800eaac <Buil_Pop+0x214>)
 800ea14:	2202      	movs	r2, #2
 800ea16:	801a      	strh	r2, [r3, #0]
 800ea18:	2001      	movs	r0, #1
 800ea1a:	f7ff feab 	bl	800e774 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800ea1e:	4b24      	ldr	r3, [pc, #144]	; (800eab0 <Buil_Pop+0x218>)
 800ea20:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	3b02      	subs	r3, #2
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	b21a      	sxth	r2, r3
 800ea2c:	4b1e      	ldr	r3, [pc, #120]	; (800eaa8 <Buil_Pop+0x210>)
 800ea2e:	801a      	strh	r2, [r3, #0]
 800ea30:	4b1f      	ldr	r3, [pc, #124]	; (800eab0 <Buil_Pop+0x218>)
 800ea32:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea36:	0fda      	lsrs	r2, r3, #31
 800ea38:	4413      	add	r3, r2
 800ea3a:	105b      	asrs	r3, r3, #1
 800ea3c:	b21b      	sxth	r3, r3
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	3b03      	subs	r3, #3
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	b21a      	sxth	r2, r3
 800ea46:	4b19      	ldr	r3, [pc, #100]	; (800eaac <Buil_Pop+0x214>)
 800ea48:	801a      	strh	r2, [r3, #0]
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	f7ff fe92 	bl	800e774 <NotePixel>
  Nx = ParamTab[WXx1]-1; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800ea50:	4b17      	ldr	r3, [pc, #92]	; (800eab0 <Buil_Pop+0x218>)
 800ea52:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	3b01      	subs	r3, #1
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	b21a      	sxth	r2, r3
 800ea5e:	4b12      	ldr	r3, [pc, #72]	; (800eaa8 <Buil_Pop+0x210>)
 800ea60:	801a      	strh	r2, [r3, #0]
 800ea62:	4b12      	ldr	r3, [pc, #72]	; (800eaac <Buil_Pop+0x214>)
 800ea64:	2203      	movs	r2, #3
 800ea66:	801a      	strh	r2, [r3, #0]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	80fb      	strh	r3, [r7, #6]
 800ea6c:	e008      	b.n	800ea80 <Buil_Pop+0x1e8>
 800ea6e:	2001      	movs	r0, #1
 800ea70:	f7ff fe80 	bl	800e774 <NotePixel>
 800ea74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	80fb      	strh	r3, [r7, #6]
 800ea80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea84:	4b0a      	ldr	r3, [pc, #40]	; (800eab0 <Buil_Pop+0x218>)
 800ea86:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ea8a:	0fd9      	lsrs	r1, r3, #31
 800ea8c:	440b      	add	r3, r1
 800ea8e:	105b      	asrs	r3, r3, #1
 800ea90:	b21b      	sxth	r3, r3
 800ea92:	3b06      	subs	r3, #6
 800ea94:	429a      	cmp	r2, r3
 800ea96:	dbea      	blt.n	800ea6e <Buil_Pop+0x1d6>
}
 800ea98:	bf00      	nop
 800ea9a:	bf00      	nop
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20000ca0 	.word	0x20000ca0
 800eaa8:	20000002 	.word	0x20000002
 800eaac:	20000004 	.word	0x20000004
 800eab0:	20000140 	.word	0x20000140

0800eab4 <PopColor>:

/*******************************************************************************
 PopColor: ��������ɫ����
*******************************************************************************/
void PopColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	460a      	mov	r2, r1
 800eabe:	80fb      	strh	r3, [r7, #6]
 800eac0:	4613      	mov	r3, r2
 800eac2:	80bb      	strh	r3, [r7, #4]
  ParamTab[POP_B] = Board_Color;
 800eac4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eac8:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <PopColor+0x30>)
 800eaca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  ParamTab[POP_T] = Text_Color;
 800eace:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800ead2:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <PopColor+0x30>)
 800ead4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	20000140 	.word	0x20000140

0800eae8 <Close_Pop>:

/*******************************************************************************
  Close_Pop: �رղ˵������Ự��
*******************************************************************************/
void Close_Pop(void)
{
 800eae8:	b480      	push	{r7}
 800eaea:	af00      	add	r7, sp, #0
  PopType &= ~(LIST_POP | DAILOG_POP);
 800eaec:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <Close_Pop+0x24>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	f023 0306 	bic.w	r3, r3, #6
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <Close_Pop+0x24>)
 800eaf8:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = P_HID;
 800eafa:	4b05      	ldr	r3, [pc, #20]	; (800eb10 <Close_Pop+0x28>)
 800eafc:	2201      	movs	r2, #1
 800eafe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eb02:	bf00      	nop
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr
 800eb0c:	2000091a 	.word	0x2000091a
 800eb10:	20000140 	.word	0x20000140

0800eb14 <List_Pop>:

/*******************************************************************************
  List_Pop: �򿪲˵���
*******************************************************************************/
void List_Pop(void)
{
 800eb14:	b480      	push	{r7}
 800eb16:	af00      	add	r7, sp, #0
  PopType |= LIST_POP;
 800eb18:	4b07      	ldr	r3, [pc, #28]	; (800eb38 <List_Pop+0x24>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f043 0302 	orr.w	r3, r3, #2
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	4b05      	ldr	r3, [pc, #20]	; (800eb38 <List_Pop+0x24>)
 800eb24:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = SHOW;
 800eb26:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <List_Pop+0x28>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800eb2e:	bf00      	nop
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	2000091a 	.word	0x2000091a
 800eb3c:	20000140 	.word	0x20000140

0800eb40 <Dialog_Pop>:

/*******************************************************************************
  Dialog_Pop: �����Ự��
*******************************************************************************/
void Dialog_Pop(char* Str)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800eb48:	4b2a      	ldr	r3, [pc, #168]	; (800ebf4 <Dialog_Pop+0xb4>)
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	f043 0304 	orr.w	r3, r3, #4
 800eb50:	b2da      	uxtb	r2, r3
 800eb52:	4b28      	ldr	r3, [pc, #160]	; (800ebf4 <Dialog_Pop+0xb4>)
 800eb54:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 16*8;
 800eb56:	4b28      	ldr	r3, [pc, #160]	; (800ebf8 <Dialog_Pop+0xb8>)
 800eb58:	2280      	movs	r2, #128	; 0x80
 800eb5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 2*3*16;
 800eb5e:	4b26      	ldr	r3, [pc, #152]	; (800ebf8 <Dialog_Pop+0xb8>)
 800eb60:	2260      	movs	r2, #96	; 0x60
 800eb62:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 80;
 800eb66:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <Dialog_Pop+0xb8>)
 800eb68:	2250      	movs	r2, #80	; 0x50
 800eb6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800eb6e:	4b22      	ldr	r3, [pc, #136]	; (800ebf8 <Dialog_Pop+0xb8>)
 800eb70:	22c8      	movs	r2, #200	; 0xc8
 800eb72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800eb76:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800eb7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800eb7e:	f7ff ff99 	bl	800eab4 <PopColor>
  Buil_Pop();
 800eb82:	f7ff fe89 	bl	800e898 <Buil_Pop>
  NoteSTR( 1*8, 28, PRN, Str);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	211c      	movs	r1, #28
 800eb8c:	2008      	movs	r0, #8
 800eb8e:	f000 f8e1 	bl	800ed54 <NoteSTR>
  NoteSTR( 2*6, 8, SYMB+INV,  "{|");
 800eb92:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <Dialog_Pop+0xbc>)
 800eb94:	2211      	movs	r2, #17
 800eb96:	2108      	movs	r1, #8
 800eb98:	200c      	movs	r0, #12
 800eb9a:	f000 f8db 	bl	800ed54 <NoteSTR>
  Note_4Point(PRN, 2*6, 8, 2, 10);
 800eb9e:	230a      	movs	r3, #10
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	2302      	movs	r3, #2
 800eba4:	2208      	movs	r2, #8
 800eba6:	210c      	movs	r1, #12
 800eba8:	2000      	movs	r0, #0
 800ebaa:	f000 f979 	bl	800eea0 <Note_4Point>
  NoteSTR( 4*6, 8, PRN,  ": Yes");
 800ebae:	4b14      	ldr	r3, [pc, #80]	; (800ec00 <Dialog_Pop+0xc0>)
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	2108      	movs	r1, #8
 800ebb4:	2018      	movs	r0, #24
 800ebb6:	f000 f8cd 	bl	800ed54 <NoteSTR>
  NoteSTR(12*6, 8, SYMB+INV,  "yz");
 800ebba:	4b12      	ldr	r3, [pc, #72]	; (800ec04 <Dialog_Pop+0xc4>)
 800ebbc:	2211      	movs	r2, #17
 800ebbe:	2108      	movs	r1, #8
 800ebc0:	2048      	movs	r0, #72	; 0x48
 800ebc2:	f000 f8c7 	bl	800ed54 <NoteSTR>
  Note_4Point(PRN, 12*6, 8, 2, 10);
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	2302      	movs	r3, #2
 800ebcc:	2208      	movs	r2, #8
 800ebce:	2148      	movs	r1, #72	; 0x48
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	f000 f965 	bl	800eea0 <Note_4Point>
  NoteSTR(14*6, 8, PRN,  ": No");
 800ebd6:	4b0c      	ldr	r3, [pc, #48]	; (800ec08 <Dialog_Pop+0xc8>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	2108      	movs	r1, #8
 800ebdc:	2054      	movs	r0, #84	; 0x54
 800ebde:	f000 f8b9 	bl	800ed54 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ebe2:	4b05      	ldr	r3, [pc, #20]	; (800ebf8 <Dialog_Pop+0xb8>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ebea:	bf00      	nop
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2000091a 	.word	0x2000091a
 800ebf8:	20000140 	.word	0x20000140
 800ebfc:	080001c4 	.word	0x080001c4
 800ec00:	080001c8 	.word	0x080001c8
 800ec04:	080001d0 	.word	0x080001d0
 800ec08:	080001d4 	.word	0x080001d4

0800ec0c <Calibrate_Pop>:

/*******************************************************************************
  Calibrate_Pop: �����Ự��
*******************************************************************************/
void Calibrate_Pop(char* Str)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec14:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <Calibrate_Pop+0x64>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f043 0304 	orr.w	r3, r3, #4
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	4b14      	ldr	r3, [pc, #80]	; (800ec70 <Calibrate_Pop+0x64>)
 800ec20:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 25*8;
 800ec22:	4b14      	ldr	r3, [pc, #80]	; (800ec74 <Calibrate_Pop+0x68>)
 800ec24:	22c8      	movs	r2, #200	; 0xc8
 800ec26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 4*16;
 800ec2a:	4b12      	ldr	r3, [pc, #72]	; (800ec74 <Calibrate_Pop+0x68>)
 800ec2c:	2240      	movs	r2, #64	; 0x40
 800ec2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 50;
 800ec32:	4b10      	ldr	r3, [pc, #64]	; (800ec74 <Calibrate_Pop+0x68>)
 800ec34:	2232      	movs	r2, #50	; 0x32
 800ec36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 230;
 800ec3a:	4b0e      	ldr	r3, [pc, #56]	; (800ec74 <Calibrate_Pop+0x68>)
 800ec3c:	22e6      	movs	r2, #230	; 0xe6
 800ec3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ec42:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ec46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ec4a:	f7ff ff33 	bl	800eab4 <PopColor>
  Buil_Pop();
 800ec4e:	f7ff fe23 	bl	800e898 <Buil_Pop>
  NoteSTR( 2*8, 10, PRN, Str);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	210a      	movs	r1, #10
 800ec58:	2010      	movs	r0, #16
 800ec5a:	f000 f87b 	bl	800ed54 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ec5e:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <Calibrate_Pop+0x68>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ec66:	bf00      	nop
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	2000091a 	.word	0x2000091a
 800ec74:	20000140 	.word	0x20000140

0800ec78 <CalSave_Pop>:

/*******************************************************************************
  CalSaveg_Pop: �����Ự��
*******************************************************************************/
void CalSave_Pop(char* Str)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af02      	add	r7, sp, #8
 800ec7e:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800ec80:	4b2d      	ldr	r3, [pc, #180]	; (800ed38 <CalSave_Pop+0xc0>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f043 0304 	orr.w	r3, r3, #4
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	4b2b      	ldr	r3, [pc, #172]	; (800ed38 <CalSave_Pop+0xc0>)
 800ec8c:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 13*16;
 800ec8e:	4b2b      	ldr	r3, [pc, #172]	; (800ed3c <CalSave_Pop+0xc4>)
 800ec90:	22d0      	movs	r2, #208	; 0xd0
 800ec92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 6*16;
 800ec96:	4b29      	ldr	r3, [pc, #164]	; (800ed3c <CalSave_Pop+0xc4>)
 800ec98:	2260      	movs	r2, #96	; 0x60
 800ec9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 30;
 800ec9e:	4b27      	ldr	r3, [pc, #156]	; (800ed3c <CalSave_Pop+0xc4>)
 800eca0:	221e      	movs	r2, #30
 800eca2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800eca6:	4b25      	ldr	r3, [pc, #148]	; (800ed3c <CalSave_Pop+0xc4>)
 800eca8:	22c8      	movs	r2, #200	; 0xc8
 800ecaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800ecae:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800ecb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ecb6:	f7ff fefd 	bl	800eab4 <PopColor>
  Buil_Pop();
 800ecba:	f7ff fded 	bl	800e898 <Buil_Pop>
  NoteSTR( 1*6, 28, PRN, "Complete Cal,");
 800ecbe:	4b20      	ldr	r3, [pc, #128]	; (800ed40 <CalSave_Pop+0xc8>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	211c      	movs	r1, #28
 800ecc4:	2006      	movs	r0, #6
 800ecc6:	f000 f845 	bl	800ed54 <NoteSTR>
  NoteSTR( 15*6, 28, PRN, Str);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	211c      	movs	r1, #28
 800ecd0:	205a      	movs	r0, #90	; 0x5a
 800ecd2:	f000 f83f 	bl	800ed54 <NoteSTR>
  NoteSTR( 5*6, 8, SYMB+INV,  "{|");
 800ecd6:	4b1b      	ldr	r3, [pc, #108]	; (800ed44 <CalSave_Pop+0xcc>)
 800ecd8:	2211      	movs	r2, #17
 800ecda:	2108      	movs	r1, #8
 800ecdc:	201e      	movs	r0, #30
 800ecde:	f000 f839 	bl	800ed54 <NoteSTR>
  Note_4Point(PRN, 5*6, 8, 2, 10);
 800ece2:	230a      	movs	r3, #10
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	2302      	movs	r3, #2
 800ece8:	2208      	movs	r2, #8
 800ecea:	211e      	movs	r1, #30
 800ecec:	2000      	movs	r0, #0
 800ecee:	f000 f8d7 	bl	800eea0 <Note_4Point>
  NoteSTR( 7*6, 8, PRN,  ": Yes");
 800ecf2:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <CalSave_Pop+0xd0>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	2108      	movs	r1, #8
 800ecf8:	202a      	movs	r0, #42	; 0x2a
 800ecfa:	f000 f82b 	bl	800ed54 <NoteSTR>
  NoteSTR(20*6, 8, SYMB+INV,  "yz");
 800ecfe:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <CalSave_Pop+0xd4>)
 800ed00:	2211      	movs	r2, #17
 800ed02:	2108      	movs	r1, #8
 800ed04:	2078      	movs	r0, #120	; 0x78
 800ed06:	f000 f825 	bl	800ed54 <NoteSTR>
  Note_4Point(PRN, 20*6, 8, 2, 10);
 800ed0a:	230a      	movs	r3, #10
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	2302      	movs	r3, #2
 800ed10:	2208      	movs	r2, #8
 800ed12:	2178      	movs	r1, #120	; 0x78
 800ed14:	2000      	movs	r0, #0
 800ed16:	f000 f8c3 	bl	800eea0 <Note_4Point>
  NoteSTR(22*6, 8, PRN,  ": No");
 800ed1a:	4b0d      	ldr	r3, [pc, #52]	; (800ed50 <CalSave_Pop+0xd8>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	2108      	movs	r1, #8
 800ed20:	2084      	movs	r0, #132	; 0x84
 800ed22:	f000 f817 	bl	800ed54 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <CalSave_Pop+0xc4>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	2000091a 	.word	0x2000091a
 800ed3c:	20000140 	.word	0x20000140
 800ed40:	080001dc 	.word	0x080001dc
 800ed44:	080001c4 	.word	0x080001c4
 800ed48:	080001c8 	.word	0x080001c8
 800ed4c:	080001d0 	.word	0x080001d0
 800ed50:	080001d4 	.word	0x080001d4

0800ed54 <NoteSTR>:

/*******************************************************************************
 NoteSTR: ����������ʾ�ַ�/ͼ�鴮      Mode = bit0: Normal/Inv, bit1: Char/Symb
*******************************************************************************/
void NoteSTR(short Nx0, short Ny0, char Mode, char *Str)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	81fb      	strh	r3, [r7, #14]
 800ed60:	460b      	mov	r3, r1
 800ed62:	81bb      	strh	r3, [r7, #12]
 800ed64:	4613      	mov	r3, r2
 800ed66:	72fb      	strb	r3, [r7, #11]

  char Code;
  short i, j, k;

  Nx = Nx0, Ny = Ny0;
 800ed68:	4a48      	ldr	r2, [pc, #288]	; (800ee8c <NoteSTR+0x138>)
 800ed6a:	89fb      	ldrh	r3, [r7, #14]
 800ed6c:	8013      	strh	r3, [r2, #0]
 800ed6e:	4a48      	ldr	r2, [pc, #288]	; (800ee90 <NoteSTR+0x13c>)
 800ed70:	89bb      	ldrh	r3, [r7, #12]
 800ed72:	8013      	strh	r3, [r2, #0]

  while(*Str != 0){
 800ed74:	e080      	b.n	800ee78 <NoteSTR+0x124>
    Code = *Str++;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	747b      	strb	r3, [r7, #17]

    for(i=0; i<6; ++i){
 800ed80:	2300      	movs	r3, #0
 800ed82:	82fb      	strh	r3, [r7, #22]
 800ed84:	e074      	b.n	800ee70 <NoteSTR+0x11c>
      if(!(Mode & SYMB)) k = CHAR6x8[((Code-0X21)*6)+ i];
 800ed86:	7afb      	ldrb	r3, [r7, #11]
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10e      	bne.n	800edae <NoteSTR+0x5a>
 800ed90:	7c7b      	ldrb	r3, [r7, #17]
 800ed92:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800ed96:	4613      	mov	r3, r2
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eda4:	4413      	add	r3, r2
 800eda6:	4a3b      	ldr	r2, [pc, #236]	; (800ee94 <NoteSTR+0x140>)
 800eda8:	5cd3      	ldrb	r3, [r2, r3]
 800edaa:	827b      	strh	r3, [r7, #18]
 800edac:	e00d      	b.n	800edca <NoteSTR+0x76>
      else               k = SYMB6x8[(Code - '!')*6 + i];
 800edae:	7c7b      	ldrb	r3, [r7, #17]
 800edb0:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	461a      	mov	r2, r3
 800edbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800edc2:	4413      	add	r3, r2
 800edc4:	4a34      	ldr	r2, [pc, #208]	; (800ee98 <NoteSTR+0x144>)
 800edc6:	5cd3      	ldrb	r3, [r2, r3]
 800edc8:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800edca:	7afb      	ldrb	r3, [r7, #11]
 800edcc:	f003 0320 	and.w	r3, r3, #32
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00c      	beq.n	800edee <NoteSTR+0x9a>
 800edd4:	8afb      	ldrh	r3, [r7, #22]
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <NoteSTR+0x90>
 800ede0:	4a2e      	ldr	r2, [pc, #184]	; (800ee9c <NoteSTR+0x148>)
 800ede2:	e001      	b.n	800ede8 <NoteSTR+0x94>
 800ede4:	f245 5255 	movw	r2, #21845	; 0x5555
 800ede8:	8a7b      	ldrh	r3, [r7, #18]
 800edea:	4013      	ands	r3, r2
 800edec:	827b      	strh	r3, [r7, #18]
      k <<= 2;
 800edee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800edf6:	2300      	movs	r3, #0
 800edf8:	82bb      	strh	r3, [r7, #20]
 800edfa:	e01f      	b.n	800ee3c <NoteSTR+0xe8>
        if(k & 1)  NotePixel((Mode & INV)? 0 : 1);
 800edfc:	8a7b      	ldrh	r3, [r7, #18]
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00b      	beq.n	800ee1e <NoteSTR+0xca>
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	f003 0301 	and.w	r3, r3, #1
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	bf0c      	ite	eq
 800ee10:	2301      	moveq	r3, #1
 800ee12:	2300      	movne	r3, #0
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff fcac 	bl	800e774 <NotePixel>
 800ee1c:	e006      	b.n	800ee2c <NoteSTR+0xd8>
        else       NotePixel((Mode & INV)? 1 : 0);
 800ee1e:	7afb      	ldrb	r3, [r7, #11]
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff fca4 	bl	800e774 <NotePixel>
       k >>= 1;
 800ee2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee30:	105b      	asrs	r3, r3, #1
 800ee32:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800ee34:	8abb      	ldrh	r3, [r7, #20]
 800ee36:	3301      	adds	r3, #1
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	82bb      	strh	r3, [r7, #20]
 800ee3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee40:	2b0d      	cmp	r3, #13
 800ee42:	dddb      	ble.n	800edfc <NoteSTR+0xa8>
      }
      Nx++; Ny -= 14;
 800ee44:	4b11      	ldr	r3, [pc, #68]	; (800ee8c <NoteSTR+0x138>)
 800ee46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	b21a      	sxth	r2, r3
 800ee52:	4b0e      	ldr	r3, [pc, #56]	; (800ee8c <NoteSTR+0x138>)
 800ee54:	801a      	strh	r2, [r3, #0]
 800ee56:	4b0e      	ldr	r3, [pc, #56]	; (800ee90 <NoteSTR+0x13c>)
 800ee58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	3b0e      	subs	r3, #14
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	b21a      	sxth	r2, r3
 800ee64:	4b0a      	ldr	r3, [pc, #40]	; (800ee90 <NoteSTR+0x13c>)
 800ee66:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i){
 800ee68:	8afb      	ldrh	r3, [r7, #22]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	82fb      	strh	r3, [r7, #22]
 800ee70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee74:	2b05      	cmp	r3, #5
 800ee76:	dd86      	ble.n	800ed86 <NoteSTR+0x32>
  while(*Str != 0){
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f47f af7a 	bne.w	800ed76 <NoteSTR+0x22>
    }
  }
}
 800ee82:	bf00      	nop
 800ee84:	bf00      	nop
 800ee86:	3718      	adds	r7, #24
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	20000002 	.word	0x20000002
 800ee90:	20000004 	.word	0x20000004
 800ee94:	08001760 	.word	0x08001760
 800ee98:	0800152c 	.word	0x0800152c
 800ee9c:	ffffaaaa 	.word	0xffffaaaa

0800eea0 <Note_4Point>:

/*******************************************************************************
Note_4Point:���Ķ��ǵ�
*******************************************************************************/
void Note_4Point(char Mode, short x, short y, char Str_Cnt, char High)
{
 800eea0:	b590      	push	{r4, r7, lr}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4604      	mov	r4, r0
 800eea8:	4608      	mov	r0, r1
 800eeaa:	4611      	mov	r1, r2
 800eeac:	461a      	mov	r2, r3
 800eeae:	4623      	mov	r3, r4
 800eeb0:	71fb      	strb	r3, [r7, #7]
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	80bb      	strh	r3, [r7, #4]
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	807b      	strh	r3, [r7, #2]
 800eeba:	4613      	mov	r3, r2
 800eebc:	71bb      	strb	r3, [r7, #6]
  High = High+4;
 800eebe:	7e3b      	ldrb	r3, [r7, #24]
 800eec0:	3304      	adds	r3, #4
 800eec2:	763b      	strb	r3, [r7, #24]

  Nx = x, Ny = y;
 800eec4:	4a2e      	ldr	r2, [pc, #184]	; (800ef80 <Note_4Point+0xe0>)
 800eec6:	88bb      	ldrh	r3, [r7, #4]
 800eec8:	8013      	strh	r3, [r2, #0]
 800eeca:	4a2e      	ldr	r2, [pc, #184]	; (800ef84 <Note_4Point+0xe4>)
 800eecc:	887b      	ldrh	r3, [r7, #2]
 800eece:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	f003 0301 	and.w	r3, r3, #1
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff fc4b 	bl	800e774 <NotePixel>
  Nx = x, Ny = y+High-1;
 800eede:	4a28      	ldr	r2, [pc, #160]	; (800ef80 <Note_4Point+0xe0>)
 800eee0:	88bb      	ldrh	r3, [r7, #4]
 800eee2:	8013      	strh	r3, [r2, #0]
 800eee4:	7e3b      	ldrb	r3, [r7, #24]
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	887b      	ldrh	r3, [r7, #2]
 800eeea:	4413      	add	r3, r2
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	3b01      	subs	r3, #1
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	b21a      	sxth	r2, r3
 800eef4:	4b23      	ldr	r3, [pc, #140]	; (800ef84 <Note_4Point+0xe4>)
 800eef6:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	f003 0301 	and.w	r3, r3, #1
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7ff fc37 	bl	800e774 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y;
 800ef06:	79bb      	ldrb	r3, [r7, #6]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	0052      	lsls	r2, r2, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	88bb      	ldrh	r3, [r7, #4]
 800ef16:	4413      	add	r3, r2
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	b21a      	sxth	r2, r3
 800ef20:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <Note_4Point+0xe0>)
 800ef22:	801a      	strh	r2, [r3, #0]
 800ef24:	4a17      	ldr	r2, [pc, #92]	; (800ef84 <Note_4Point+0xe4>)
 800ef26:	887b      	ldrh	r3, [r7, #2]
 800ef28:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	f003 0301 	and.w	r3, r3, #1
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff fc1e 	bl	800e774 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y+High-1;
 800ef38:	79bb      	ldrb	r3, [r7, #6]
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	0052      	lsls	r2, r2, #1
 800ef40:	4413      	add	r3, r2
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	88bb      	ldrh	r3, [r7, #4]
 800ef48:	4413      	add	r3, r2
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	b21a      	sxth	r2, r3
 800ef52:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <Note_4Point+0xe0>)
 800ef54:	801a      	strh	r2, [r3, #0]
 800ef56:	7e3b      	ldrb	r3, [r7, #24]
 800ef58:	b29a      	uxth	r2, r3
 800ef5a:	887b      	ldrh	r3, [r7, #2]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	3b01      	subs	r3, #1
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	b21a      	sxth	r2, r3
 800ef66:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <Note_4Point+0xe4>)
 800ef68:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ef6a:	79fb      	ldrb	r3, [r7, #7]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff fbfe 	bl	800e774 <NotePixel>

}
 800ef78:	bf00      	nop
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd90      	pop	{r4, r7, pc}
 800ef80:	20000002 	.word	0x20000002
 800ef84:	20000004 	.word	0x20000004

0800ef88 <Color_Num>:

/*******************************************************************************
Color_Num: �����ǰ��ɫ�Ķ�Ӧ��ɫ����
*******************************************************************************/
char Color_Num(short Color)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	80fb      	strh	r3, [r7, #6]
  if(Color == WHT)                  return 0;
  else if((Color & CYN  )== CYN  )  return 1;
 800ef92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ef96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d101      	bne.n	800efa8 <Color_Num+0x20>
 800efa4:	2301      	movs	r3, #1
 800efa6:	e068      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & CYN_ )== CYN_ )  return 2;
 800efa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800efb0:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800efb4:	d101      	bne.n	800efba <Color_Num+0x32>
 800efb6:	2302      	movs	r3, #2
 800efb8:	e05f      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & YEL  )== YEL  )  return 3;
 800efba:	88fb      	ldrh	r3, [r7, #6]
 800efbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800efc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d101      	bne.n	800efcc <Color_Num+0x44>
 800efc8:	2303      	movs	r3, #3
 800efca:	e056      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & YEL_ )== YEL_ )  return 4;
 800efcc:	88fb      	ldrh	r3, [r7, #6]
 800efce:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800efd2:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800efd6:	d101      	bne.n	800efdc <Color_Num+0x54>
 800efd8:	2304      	movs	r3, #4
 800efda:	e04e      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & PUR  )== PUR  )  return 5;
 800efdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efe0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800efe4:	4013      	ands	r3, r2
 800efe6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800efea:	4293      	cmp	r3, r2
 800efec:	d101      	bne.n	800eff2 <Color_Num+0x6a>
 800efee:	2305      	movs	r3, #5
 800eff0:	e043      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & PUR_ )== PUR_ )  return 6;
 800eff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eff6:	f248 0310 	movw	r3, #32784	; 0x8010
 800effa:	4013      	ands	r3, r2
 800effc:	f248 0210 	movw	r2, #32784	; 0x8010
 800f000:	4293      	cmp	r3, r2
 800f002:	d101      	bne.n	800f008 <Color_Num+0x80>
 800f004:	2306      	movs	r3, #6
 800f006:	e038      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & GRN  )== GRN  )  return 7;
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f00e:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f012:	d101      	bne.n	800f018 <Color_Num+0x90>
 800f014:	2307      	movs	r3, #7
 800f016:	e030      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & GRN_ )== GRN_ )  return 8;
 800f018:	88fb      	ldrh	r3, [r7, #6]
 800f01a:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f01e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f022:	d101      	bne.n	800f028 <Color_Num+0xa0>
 800f024:	2308      	movs	r3, #8
 800f026:	e028      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & GRY  )== GRY  )  return 9;
 800f028:	88fb      	ldrh	r3, [r7, #6]
 800f02a:	461a      	mov	r2, r3
 800f02c:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f030:	4013      	ands	r3, r2
 800f032:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f036:	4293      	cmp	r3, r2
 800f038:	d101      	bne.n	800f03e <Color_Num+0xb6>
 800f03a:	2309      	movs	r3, #9
 800f03c:	e01d      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & ORN  )== ORN  )  return 10;
 800f03e:	88fb      	ldrh	r3, [r7, #6]
 800f040:	461a      	mov	r2, r3
 800f042:	f240 531f 	movw	r3, #1311	; 0x51f
 800f046:	4013      	ands	r3, r2
 800f048:	f240 521f 	movw	r2, #1311	; 0x51f
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d101      	bne.n	800f054 <Color_Num+0xcc>
 800f050:	230a      	movs	r3, #10
 800f052:	e012      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & BLU  )== BLU  )  return 11;
 800f054:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f058:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f05c:	4013      	ands	r3, r2
 800f05e:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f062:	4293      	cmp	r3, r2
 800f064:	d101      	bne.n	800f06a <Color_Num+0xe2>
 800f066:	230b      	movs	r3, #11
 800f068:	e007      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & RED  )== RED  )  return 12;
 800f06a:	88fb      	ldrh	r3, [r7, #6]
 800f06c:	f003 031f 	and.w	r3, r3, #31
 800f070:	2b1f      	cmp	r3, #31
 800f072:	d101      	bne.n	800f078 <Color_Num+0xf0>
 800f074:	230c      	movs	r3, #12
 800f076:	e000      	b.n	800f07a <Color_Num+0xf2>
  else if((Color & BLK  )== BLK  )  return 13;
 800f078:	230d      	movs	r3, #13
  else if((Color & LGN  )== LGN  )  return 14;
  else                              return 15;
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	370c      	adds	r7, #12
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
	...

0800f088 <PrintClk>:

/*******************************************************************************
 Print_Clk: ����ָʾ
*******************************************************************************/
void PrintClk(short x0, short y0, char Phase)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	4603      	mov	r3, r0
 800f090:	80fb      	strh	r3, [r7, #6]
 800f092:	460b      	mov	r3, r1
 800f094:	80bb      	strh	r3, [r7, #4]
 800f096:	4613      	mov	r3, r2
 800f098:	70fb      	strb	r3, [r7, #3]
  short i, j, b;
  SetColor(GRY, TCOLOR[FN]);
 800f09a:	4b31      	ldr	r3, [pc, #196]	; (800f160 <PrintClk+0xd8>)
 800f09c:	895b      	ldrh	r3, [r3, #10]
 800f09e:	4619      	mov	r1, r3
 800f0a0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f0a4:	f7fe ff9a 	bl	800dfdc <SetColor>
  x0=S_X[SAVE_BMP]+30;
 800f0a8:	4b2e      	ldr	r3, [pc, #184]	; (800f164 <PrintClk+0xdc>)
 800f0aa:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	331e      	adds	r3, #30
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	80fb      	strh	r3, [r7, #6]
  DispStr(S_X[SAVE_BMP]-3, LABLE_Y, PRN, "             ");
 800f0b6:	4b2b      	ldr	r3, [pc, #172]	; (800f164 <PrintClk+0xdc>)
 800f0b8:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	3b03      	subs	r3, #3
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	b218      	sxth	r0, r3
 800f0c4:	4b28      	ldr	r3, [pc, #160]	; (800f168 <PrintClk+0xe0>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2103      	movs	r1, #3
 800f0ca:	f7fe ff9f 	bl	800e00c <DispStr>
  for(i=1; i<11; ++i){
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	81fb      	strh	r3, [r7, #14]
 800f0d2:	e03c      	b.n	800f14e <PrintClk+0xc6>
    b = CLK_TAB[Phase *11 + i];
 800f0d4:	78fa      	ldrb	r2, [r7, #3]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	441a      	add	r2, r3
 800f0e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	4a21      	ldr	r2, [pc, #132]	; (800f16c <PrintClk+0xe4>)
 800f0e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0ec:	817b      	strh	r3, [r7, #10]
    for(j=0; j<11; ++j){
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	81bb      	strh	r3, [r7, #12]
 800f0f2:	e024      	b.n	800f13e <PrintClk+0xb6>
      LCD_Set_Posi((x0+j), (y0+i));
 800f0f4:	88fa      	ldrh	r2, [r7, #6]
 800f0f6:	89bb      	ldrh	r3, [r7, #12]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	b218      	sxth	r0, r3
 800f0fe:	88ba      	ldrh	r2, [r7, #4]
 800f100:	89fb      	ldrh	r3, [r7, #14]
 800f102:	4413      	add	r3, r2
 800f104:	b29b      	uxth	r3, r3
 800f106:	b21b      	sxth	r3, r3
 800f108:	4619      	mov	r1, r3
 800f10a:	f002 fc1d 	bl	8011948 <LCD_Set_Posi>
      if((b >> j)& 0x001)
 800f10e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f112:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f116:	fa42 f303 	asr.w	r3, r2, r3
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d004      	beq.n	800f12c <PrintClk+0xa4>
        LCD_Set_Pixel(BLU);
 800f122:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f126:	f002 fc5d 	bl	80119e4 <LCD_Set_Pixel>
 800f12a:	e004      	b.n	800f136 <PrintClk+0xae>
      else
        LCD_Set_Pixel(Background);
 800f12c:	4b10      	ldr	r3, [pc, #64]	; (800f170 <PrintClk+0xe8>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	4618      	mov	r0, r3
 800f132:	f002 fc57 	bl	80119e4 <LCD_Set_Pixel>
    for(j=0; j<11; ++j){
 800f136:	89bb      	ldrh	r3, [r7, #12]
 800f138:	3301      	adds	r3, #1
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	81bb      	strh	r3, [r7, #12]
 800f13e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f142:	2b0a      	cmp	r3, #10
 800f144:	ddd6      	ble.n	800f0f4 <PrintClk+0x6c>
  for(i=1; i<11; ++i){
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	3301      	adds	r3, #1
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	81fb      	strh	r3, [r7, #14]
 800f14e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f152:	2b0a      	cmp	r3, #10
 800f154:	ddbe      	ble.n	800f0d4 <PrintClk+0x4c>
    }
  }
}
 800f156:	bf00      	nop
 800f158:	bf00      	nop
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	08001fa4 	.word	0x08001fa4
 800f164:	080021f8 	.word	0x080021f8
 800f168:	080001ec 	.word	0x080001ec
 800f16c:	08001c58 	.word	0x08001c58
 800f170:	20000912 	.word	0x20000912

0800f174 <WriteVar>:

/*******************************************************************************
 WriteVar
*******************************************************************************/
void WriteVar(short Var, short* pClu)
  {
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	80fb      	strh	r3, [r7, #6]
    short temp_addr,temp_len;
    unsigned j;

    memset(Num, 0, 4);
 800f180:	2204      	movs	r2, #4
 800f182:	2100      	movs	r1, #0
 800f184:	4847      	ldr	r0, [pc, #284]	; (800f2a4 <WriteVar+0x130>)
 800f186:	f017 f971 	bl	802646c <memset>
    u16ToDec4Str(Num,Var);
 800f18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f18e:	4619      	mov	r1, r3
 800f190:	4844      	ldr	r0, [pc, #272]	; (800f2a4 <WriteVar+0x130>)
 800f192:	f002 f957 	bl	8011444 <u16ToDec4Str>
    Length = strlen((char const*)Num);
 800f196:	4843      	ldr	r0, [pc, #268]	; (800f2a4 <WriteVar+0x130>)
 800f198:	f7fc ff52 	bl	800c040 <strlen>
 800f19c:	4603      	mov	r3, r0
 800f19e:	b21a      	sxth	r2, r3
 800f1a0:	4b41      	ldr	r3, [pc, #260]	; (800f2a8 <WriteVar+0x134>)
 800f1a2:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Num, Length);
 800f1a4:	4b41      	ldr	r3, [pc, #260]	; (800f2ac <WriteVar+0x138>)
 800f1a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	4b40      	ldr	r3, [pc, #256]	; (800f2b0 <WriteVar+0x13c>)
 800f1ae:	4413      	add	r3, r2
 800f1b0:	4a3d      	ldr	r2, [pc, #244]	; (800f2a8 <WriteVar+0x134>)
 800f1b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f1b6:	493b      	ldr	r1, [pc, #236]	; (800f2a4 <WriteVar+0x130>)
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f017 f949 	bl	8026450 <memcpy>
    Addr = Addr + Length;
 800f1be:	4b3b      	ldr	r3, [pc, #236]	; (800f2ac <WriteVar+0x138>)
 800f1c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	4b38      	ldr	r3, [pc, #224]	; (800f2a8 <WriteVar+0x134>)
 800f1c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	4413      	add	r3, r2
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	b21a      	sxth	r2, r3
 800f1d4:	4b35      	ldr	r3, [pc, #212]	; (800f2ac <WriteVar+0x138>)
 800f1d6:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f1d8:	4b33      	ldr	r3, [pc, #204]	; (800f2a8 <WriteVar+0x134>)
 800f1da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	4b34      	ldr	r3, [pc, #208]	; (800f2b4 <WriteVar+0x140>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	4a33      	ldr	r2, [pc, #204]	; (800f2b4 <WriteVar+0x140>)
 800f1e8:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f1ea:	4b30      	ldr	r3, [pc, #192]	; (800f2ac <WriteVar+0x138>)
 800f1ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1f4:	db52      	blt.n	800f29c <WriteVar+0x128>
    {
      f_write(&USERFile, F_Buff, 4096, &j);
 800f1f6:	f107 0308 	add.w	r3, r7, #8
 800f1fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f1fe:	492c      	ldr	r1, [pc, #176]	; (800f2b0 <WriteVar+0x13c>)
 800f200:	482d      	ldr	r0, [pc, #180]	; (800f2b8 <WriteVar+0x144>)
 800f202:	f015 fcc6 	bl	8024b92 <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);  // ����ָʾ
 800f206:	4b2d      	ldr	r3, [pc, #180]	; (800f2bc <WriteVar+0x148>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	492b      	ldr	r1, [pc, #172]	; (800f2bc <WriteVar+0x148>)
 800f20e:	600a      	str	r2, [r1, #0]
 800f210:	105b      	asrs	r3, r3, #1
 800f212:	b2db      	uxtb	r3, r3
 800f214:	f003 0303 	and.w	r3, r3, #3
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	461a      	mov	r2, r3
 800f21c:	2102      	movs	r1, #2
 800f21e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f222:	f7ff ff31 	bl	800f088 <PrintClk>
      temp_len = Addr -4096;
 800f226:	4b21      	ldr	r3, [pc, #132]	; (800f2ac <WriteVar+0x138>)
 800f228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f232:	b29b      	uxth	r3, r3
 800f234:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f236:	4b1c      	ldr	r3, [pc, #112]	; (800f2a8 <WriteVar+0x134>)
 800f238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f23c:	b29a      	uxth	r2, r3
 800f23e:	89fb      	ldrh	r3, [r7, #14]
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	b29b      	uxth	r3, r3
 800f244:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f246:	4b19      	ldr	r3, [pc, #100]	; (800f2ac <WriteVar+0x138>)
 800f248:	2200      	movs	r2, #0
 800f24a:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f24c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f250:	2100      	movs	r1, #0
 800f252:	4817      	ldr	r0, [pc, #92]	; (800f2b0 <WriteVar+0x13c>)
 800f254:	f017 f90a 	bl	802646c <memset>
      memset(Data,0,310);
 800f258:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f25c:	2100      	movs	r1, #0
 800f25e:	4818      	ldr	r0, [pc, #96]	; (800f2c0 <WriteVar+0x14c>)
 800f260:	f017 f904 	bl	802646c <memset>
      memcpy(&F_Buff[Addr],Num + temp_addr, temp_len);
 800f264:	4b11      	ldr	r3, [pc, #68]	; (800f2ac <WriteVar+0x138>)
 800f266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f26a:	461a      	mov	r2, r3
 800f26c:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <WriteVar+0x13c>)
 800f26e:	18d0      	adds	r0, r2, r3
 800f270:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f274:	4a0b      	ldr	r2, [pc, #44]	; (800f2a4 <WriteVar+0x130>)
 800f276:	4413      	add	r3, r2
 800f278:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f27c:	4619      	mov	r1, r3
 800f27e:	f017 f8e7 	bl	8026450 <memcpy>
      Addr = Addr + temp_len;
 800f282:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <WriteVar+0x138>)
 800f284:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f288:	b29a      	uxth	r2, r3
 800f28a:	89fb      	ldrh	r3, [r7, #14]
 800f28c:	4413      	add	r3, r2
 800f28e:	b29b      	uxth	r3, r3
 800f290:	b21a      	sxth	r2, r3
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <WriteVar+0x138>)
 800f294:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f296:	4b04      	ldr	r3, [pc, #16]	; (800f2a8 <WriteVar+0x134>)
 800f298:	2200      	movs	r2, #0
 800f29a:	801a      	strh	r2, [r3, #0]
    }
  }
 800f29c:	bf00      	nop
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	20002524 	.word	0x20002524
 800f2a8:	2000251e 	.word	0x2000251e
 800f2ac:	2000251c 	.word	0x2000251c
 800f2b0:	200012e0 	.word	0x200012e0
 800f2b4:	20002520 	.word	0x20002520
 800f2b8:	20007aa8 	.word	0x20007aa8
 800f2bc:	20002528 	.word	0x20002528
 800f2c0:	20000008 	.word	0x20000008

0800f2c4 <WriteStr>:

/*******************************************************************************
 WriteStr
*******************************************************************************/
void WriteStr(char* Str, short* pClu)
  {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
    short temp_addr,temp_len;
    unsigned j;

    Length = strlen((char const*)Str);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7fc feb6 	bl	800c040 <strlen>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	b21a      	sxth	r2, r3
 800f2d8:	4b40      	ldr	r3, [pc, #256]	; (800f3dc <WriteStr+0x118>)
 800f2da:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Str, Length);
 800f2dc:	4b40      	ldr	r3, [pc, #256]	; (800f3e0 <WriteStr+0x11c>)
 800f2de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	4b3f      	ldr	r3, [pc, #252]	; (800f3e4 <WriteStr+0x120>)
 800f2e6:	4413      	add	r3, r2
 800f2e8:	4a3c      	ldr	r2, [pc, #240]	; (800f3dc <WriteStr+0x118>)
 800f2ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f017 f8ad 	bl	8026450 <memcpy>
    Addr = Addr + Length;
 800f2f6:	4b3a      	ldr	r3, [pc, #232]	; (800f3e0 <WriteStr+0x11c>)
 800f2f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	4b37      	ldr	r3, [pc, #220]	; (800f3dc <WriteStr+0x118>)
 800f300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f304:	b29b      	uxth	r3, r3
 800f306:	4413      	add	r3, r2
 800f308:	b29b      	uxth	r3, r3
 800f30a:	b21a      	sxth	r2, r3
 800f30c:	4b34      	ldr	r3, [pc, #208]	; (800f3e0 <WriteStr+0x11c>)
 800f30e:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f310:	4b32      	ldr	r3, [pc, #200]	; (800f3dc <WriteStr+0x118>)
 800f312:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f316:	461a      	mov	r2, r3
 800f318:	4b33      	ldr	r3, [pc, #204]	; (800f3e8 <WriteStr+0x124>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4413      	add	r3, r2
 800f31e:	4a32      	ldr	r2, [pc, #200]	; (800f3e8 <WriteStr+0x124>)
 800f320:	6013      	str	r3, [r2, #0]
    if(Addr >=4096)
 800f322:	4b2f      	ldr	r3, [pc, #188]	; (800f3e0 <WriteStr+0x11c>)
 800f324:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f32c:	db52      	blt.n	800f3d4 <WriteStr+0x110>
    {
        f_write(&USERFile, F_Buff, 4096, &j);
 800f32e:	f107 0308 	add.w	r3, r7, #8
 800f332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f336:	492b      	ldr	r1, [pc, #172]	; (800f3e4 <WriteStr+0x120>)
 800f338:	482c      	ldr	r0, [pc, #176]	; (800f3ec <WriteStr+0x128>)
 800f33a:	f015 fc2a 	bl	8024b92 <f_write>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);     // ����ָʾ
 800f33e:	4b2c      	ldr	r3, [pc, #176]	; (800f3f0 <WriteStr+0x12c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	492a      	ldr	r1, [pc, #168]	; (800f3f0 <WriteStr+0x12c>)
 800f346:	600a      	str	r2, [r1, #0]
 800f348:	105b      	asrs	r3, r3, #1
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	f003 0303 	and.w	r3, r3, #3
 800f350:	b2db      	uxtb	r3, r3
 800f352:	461a      	mov	r2, r3
 800f354:	2102      	movs	r1, #2
 800f356:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f35a:	f7ff fe95 	bl	800f088 <PrintClk>
      temp_len = Addr -4096;
 800f35e:	4b20      	ldr	r3, [pc, #128]	; (800f3e0 <WriteStr+0x11c>)
 800f360:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f364:	b29b      	uxth	r3, r3
 800f366:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	81fb      	strh	r3, [r7, #14]
      temp_addr = Length - temp_len;
 800f36e:	4b1b      	ldr	r3, [pc, #108]	; (800f3dc <WriteStr+0x118>)
 800f370:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f374:	b29a      	uxth	r2, r3
 800f376:	89fb      	ldrh	r3, [r7, #14]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	81bb      	strh	r3, [r7, #12]
      Addr = 0;
 800f37e:	4b18      	ldr	r3, [pc, #96]	; (800f3e0 <WriteStr+0x11c>)
 800f380:	2200      	movs	r2, #0
 800f382:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,4096);
 800f384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f388:	2100      	movs	r1, #0
 800f38a:	4816      	ldr	r0, [pc, #88]	; (800f3e4 <WriteStr+0x120>)
 800f38c:	f017 f86e 	bl	802646c <memset>
      memset(Data,0,310);
 800f390:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f394:	2100      	movs	r1, #0
 800f396:	4817      	ldr	r0, [pc, #92]	; (800f3f4 <WriteStr+0x130>)
 800f398:	f017 f868 	bl	802646c <memset>
      memcpy(&F_Buff[Addr],Str + temp_addr, temp_len);
 800f39c:	4b10      	ldr	r3, [pc, #64]	; (800f3e0 <WriteStr+0x11c>)
 800f39e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	4b0f      	ldr	r3, [pc, #60]	; (800f3e4 <WriteStr+0x120>)
 800f3a6:	18d0      	adds	r0, r2, r3
 800f3a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	f017 f84b 	bl	8026450 <memcpy>
      Addr = Addr + temp_len;
 800f3ba:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <WriteStr+0x11c>)
 800f3bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	89fb      	ldrh	r3, [r7, #14]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	b21a      	sxth	r2, r3
 800f3ca:	4b05      	ldr	r3, [pc, #20]	; (800f3e0 <WriteStr+0x11c>)
 800f3cc:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f3ce:	4b03      	ldr	r3, [pc, #12]	; (800f3dc <WriteStr+0x118>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	801a      	strh	r2, [r3, #0]
    }
  }
 800f3d4:	bf00      	nop
 800f3d6:	3710      	adds	r7, #16
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	2000251e 	.word	0x2000251e
 800f3e0:	2000251c 	.word	0x2000251c
 800f3e4:	200012e0 	.word	0x200012e0
 800f3e8:	20002520 	.word	0x20002520
 800f3ec:	20007aa8 	.word	0x20007aa8
 800f3f0:	20002528 	.word	0x20002528
 800f3f4:	20000008 	.word	0x20000008

0800f3f8 <Make_Filename>:

/*******************************************************************************

*******************************************************************************/
void Make_Filename(short FileNo, char* FileName)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	4603      	mov	r3, r0
 800f400:	6039      	str	r1, [r7, #0]
 800f402:	80fb      	strh	r3, [r7, #6]
  char Num[4];
  u8ToDec3(Num, FileNo);
 800f404:	88fb      	ldrh	r3, [r7, #6]
 800f406:	b2da      	uxtb	r2, r3
 800f408:	f107 030c 	add.w	r3, r7, #12
 800f40c:	4611      	mov	r1, r2
 800f40e:	4618      	mov	r0, r3
 800f410:	f001 fe72 	bl	80110f8 <u8ToDec3>
  FileName[4] = Num[0];
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	3304      	adds	r3, #4
 800f418:	7b3a      	ldrb	r2, [r7, #12]
 800f41a:	701a      	strb	r2, [r3, #0]
  FileName[5] = Num[1];
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	3305      	adds	r3, #5
 800f420:	7b7a      	ldrb	r2, [r7, #13]
 800f422:	701a      	strb	r2, [r3, #0]
  FileName[6] = Num[2];
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	3306      	adds	r3, #6
 800f428:	7bba      	ldrb	r2, [r7, #14]
 800f42a:	701a      	strb	r2, [r3, #0]
}
 800f42c:	bf00      	nop
 800f42e:	3710      	adds	r7, #16
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <Load_File_Num>:

/*******************************************************************************
Load_File_Num(char Tpye)
*******************************************************************************/
short Load_File_Num(char Type)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b086      	sub	sp, #24
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	71fb      	strb	r3, [r7, #7]
  short FileNo=0;
 800f43e:	2300      	movs	r3, #0
 800f440:	82fb      	strh	r3, [r7, #22]
  char  pFileName[13]="FILE       ";
 800f442:	4a35      	ldr	r2, [pc, #212]	; (800f518 <Load_File_Num+0xe4>)
 800f444:	f107 0308 	add.w	r3, r7, #8
 800f448:	ca07      	ldmia	r2, {r0, r1, r2}
 800f44a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f44e:	2300      	movs	r3, #0
 800f450:	753b      	strb	r3, [r7, #20]

  switch(Type)
 800f452:	79fb      	ldrb	r3, [r7, #7]
 800f454:	3b1d      	subs	r3, #29
 800f456:	2b04      	cmp	r3, #4
 800f458:	d834      	bhi.n	800f4c4 <Load_File_Num+0x90>
 800f45a:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <Load_File_Num+0x2c>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f475 	.word	0x0800f475
 800f464:	0800f485 	.word	0x0800f485
 800f468:	0800f495 	.word	0x0800f495
 800f46c:	0800f4a5 	.word	0x0800f4a5
 800f470:	0800f4b5 	.word	0x0800f4b5
  {
  case SAVE_BMP:
    memcpy(pFileName,"IMG_   .BMP",12);
 800f474:	f107 0308 	add.w	r3, r7, #8
 800f478:	220c      	movs	r2, #12
 800f47a:	4928      	ldr	r1, [pc, #160]	; (800f51c <Load_File_Num+0xe8>)
 800f47c:	4618      	mov	r0, r3
 800f47e:	f016 ffe7 	bl	8026450 <memcpy>
    break;
 800f482:	e01f      	b.n	800f4c4 <Load_File_Num+0x90>
  case SAVE_DAT:
    memcpy(pFileName,"FILE   .DAT",12);
 800f484:	f107 0308 	add.w	r3, r7, #8
 800f488:	220c      	movs	r2, #12
 800f48a:	4925      	ldr	r1, [pc, #148]	; (800f520 <Load_File_Num+0xec>)
 800f48c:	4618      	mov	r0, r3
 800f48e:	f016 ffdf 	bl	8026450 <memcpy>
    break;
 800f492:	e017      	b.n	800f4c4 <Load_File_Num+0x90>
  case SAVE_BUF:
    memcpy(pFileName,"DATA   .BUF",12);
 800f494:	f107 0308 	add.w	r3, r7, #8
 800f498:	220c      	movs	r2, #12
 800f49a:	4922      	ldr	r1, [pc, #136]	; (800f524 <Load_File_Num+0xf0>)
 800f49c:	4618      	mov	r0, r3
 800f49e:	f016 ffd7 	bl	8026450 <memcpy>
    break;
 800f4a2:	e00f      	b.n	800f4c4 <Load_File_Num+0x90>
  case SAVE_CSV:
    memcpy(pFileName,"DATA   .CSV",12);
 800f4a4:	f107 0308 	add.w	r3, r7, #8
 800f4a8:	220c      	movs	r2, #12
 800f4aa:	491f      	ldr	r1, [pc, #124]	; (800f528 <Load_File_Num+0xf4>)
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f016 ffcf 	bl	8026450 <memcpy>
    break;
 800f4b2:	e007      	b.n	800f4c4 <Load_File_Num+0x90>
  case SAVE_SVG:
    memcpy(pFileName,"DATA   .SVG",12);
 800f4b4:	f107 0308 	add.w	r3, r7, #8
 800f4b8:	220c      	movs	r2, #12
 800f4ba:	491c      	ldr	r1, [pc, #112]	; (800f52c <Load_File_Num+0xf8>)
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f016 ffc7 	bl	8026450 <memcpy>
    break;
 800f4c2:	bf00      	nop
  }
    Make_Filename(FileNo, pFileName);
 800f4c4:	f107 0208 	add.w	r2, r7, #8
 800f4c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7ff ff92 	bl	800f3f8 <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4d4:	e010      	b.n	800f4f8 <Load_File_Num+0xc4>
    {
      f_close(&USERFile);
 800f4d6:	4816      	ldr	r0, [pc, #88]	; (800f530 <Load_File_Num+0xfc>)
 800f4d8:	f015 fd28 	bl	8024f2c <f_close>
      FileNo++;
 800f4dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	82fb      	strh	r3, [r7, #22]
      Make_Filename(FileNo, pFileName);
 800f4e8:	f107 0208 	add.w	r2, r7, #8
 800f4ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff ff80 	bl	800f3f8 <Make_Filename>
    while( f_open( &USERFile, pFileName, FA_OPEN_EXISTING)==FR_OK)
 800f4f8:	f107 0308 	add.w	r3, r7, #8
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	4619      	mov	r1, r3
 800f500:	480b      	ldr	r0, [pc, #44]	; (800f530 <Load_File_Num+0xfc>)
 800f502:	f015 f871 	bl	80245e8 <f_open>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d0e4      	beq.n	800f4d6 <Load_File_Num+0xa2>
    }

  return FileNo;
 800f50c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	08000238 	.word	0x08000238
 800f51c:	080001fc 	.word	0x080001fc
 800f520:	08000208 	.word	0x08000208
 800f524:	08000214 	.word	0x08000214
 800f528:	08000220 	.word	0x08000220
 800f52c:	0800022c 	.word	0x0800022c
 800f530:	20007aa8 	.word	0x20007aa8

0800f534 <File_Num>:

/*******************************************************************************
void File_Num(void)
*******************************************************************************/
void File_Num(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
  List[SAVE_BMP].Val =  Load_File_Num(SAVE_BMP);
 800f538:	201d      	movs	r0, #29
 800f53a:	f7ff ff7b 	bl	800f434 <Load_File_Num>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	4b12      	ldr	r3, [pc, #72]	; (800f58c <File_Num+0x58>)
 800f544:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  List[SAVE_DAT].Val =  Load_File_Num(SAVE_DAT);
 800f548:	201e      	movs	r0, #30
 800f54a:	f7ff ff73 	bl	800f434 <Load_File_Num>
 800f54e:	4603      	mov	r3, r0
 800f550:	461a      	mov	r2, r3
 800f552:	4b0e      	ldr	r3, [pc, #56]	; (800f58c <File_Num+0x58>)
 800f554:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  List[SAVE_BUF].Val =  Load_File_Num(SAVE_BUF);
 800f558:	201f      	movs	r0, #31
 800f55a:	f7ff ff6b 	bl	800f434 <Load_File_Num>
 800f55e:	4603      	mov	r3, r0
 800f560:	461a      	mov	r2, r3
 800f562:	4b0a      	ldr	r3, [pc, #40]	; (800f58c <File_Num+0x58>)
 800f564:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  List[SAVE_CSV].Val =  Load_File_Num(SAVE_CSV);
 800f568:	2020      	movs	r0, #32
 800f56a:	f7ff ff63 	bl	800f434 <Load_File_Num>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <File_Num+0x58>)
 800f574:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  List[SAVE_SVG].Val =  Load_File_Num(SAVE_SVG);
 800f578:	2021      	movs	r0, #33	; 0x21
 800f57a:	f7ff ff5b 	bl	800f434 <Load_File_Num>
 800f57e:	4603      	mov	r3, r0
 800f580:	461a      	mov	r2, r3
 800f582:	4b02      	ldr	r3, [pc, #8]	; (800f58c <File_Num+0x58>)
 800f584:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 800f588:	bf00      	nop
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20000274 	.word	0x20000274

0800f590 <Load_Buf>:

/*******************************************************************************
Load_Buf: ���ر�����Ĳɼ����ݻ�����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Buf(short FileNo)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08c      	sub	sp, #48	; 0x30
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f59a:	4a68      	ldr	r2, [pc, #416]	; (800f73c <Load_Buf+0x1ac>)
 800f59c:	f107 0310 	add.w	r3, r7, #16
 800f5a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	773b      	strb	r3, [r7, #28]
  short *ptr;
  int i,Rvalue,n;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f5aa:	f107 0210 	add.w	r2, r7, #16
 800f5ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7ff ff1f 	bl	800f3f8 <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800f5ba:	f107 0310 	add.w	r3, r7, #16
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	485f      	ldr	r0, [pc, #380]	; (800f740 <Load_Buf+0x1b0>)
 800f5c4:	f015 f810 	bl	80245e8 <f_open>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	627b      	str	r3, [r7, #36]	; 0x24
  if(Rvalue !=FR_OK)
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <Load_Buf+0x48>
	  return Rvalue;
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	e0ac      	b.n	800f732 <Load_Buf+0x1a2>
  n=2;
 800f5d8:	2302      	movs	r3, #2
 800f5da:	62bb      	str	r3, [r7, #40]	; 0x28
  if(List[SMPL_DPTH].Val==3)
 800f5dc:	4b59      	ldr	r3, [pc, #356]	; (800f744 <Load_Buf+0x1b4>)
 800f5de:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d101      	bne.n	800f5ea <Load_Buf+0x5a>
	  n =4 ;//8K
 800f5e6:	2304      	movs	r3, #4
 800f5e8:	62bb      	str	r3, [r7, #40]	; 0x28
  for(i=0;i<n;i++)
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ee:	e021      	b.n	800f634 <Load_Buf+0xa4>
  {
    if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f5f0:	f107 030c 	add.w	r3, r7, #12
 800f5f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f5f8:	4953      	ldr	r1, [pc, #332]	; (800f748 <Load_Buf+0x1b8>)
 800f5fa:	4851      	ldr	r0, [pc, #324]	; (800f740 <Load_Buf+0x1b0>)
 800f5fc:	f015 f9b0 	bl	8024960 <f_read>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <Load_Buf+0x7a>
    	return FILE_RW_ERR;
 800f606:	2303      	movs	r3, #3
 800f608:	e093      	b.n	800f732 <Load_Buf+0x1a2>
    if(j != 4096)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f610:	d001      	beq.n	800f616 <Load_Buf+0x86>
    	return FILE_RW_ERR;
 800f612:	2303      	movs	r3, #3
 800f614:	e08d      	b.n	800f732 <Load_Buf+0x1a2>
    memcpy(&(Sampl[i*4096/2+2]),F_Buff,4096);
 800f616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f618:	02db      	lsls	r3, r3, #11
 800f61a:	3302      	adds	r3, #2
 800f61c:	005b      	lsls	r3, r3, #1
 800f61e:	4a4b      	ldr	r2, [pc, #300]	; (800f74c <Load_Buf+0x1bc>)
 800f620:	4413      	add	r3, r2
 800f622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f626:	4948      	ldr	r1, [pc, #288]	; (800f748 <Load_Buf+0x1b8>)
 800f628:	4618      	mov	r0, r3
 800f62a:	f016 ff11 	bl	8026450 <memcpy>
  for(i=0;i<n;i++)
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	3301      	adds	r3, #1
 800f632:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f638:	429a      	cmp	r2, r3
 800f63a:	dbd9      	blt.n	800f5f0 <Load_Buf+0x60>
  }
  if(f_read(&USERFile, F_Buff, 4096, &j)!= FR_OK)
 800f63c:	f107 030c 	add.w	r3, r7, #12
 800f640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f644:	4940      	ldr	r1, [pc, #256]	; (800f748 <Load_Buf+0x1b8>)
 800f646:	483e      	ldr	r0, [pc, #248]	; (800f740 <Load_Buf+0x1b0>)
 800f648:	f015 f98a 	bl	8024960 <f_read>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <Load_Buf+0xc6>
  	return FILE_RW_ERR;
 800f652:	2303      	movs	r3, #3
 800f654:	e06d      	b.n	800f732 <Load_Buf+0x1a2>
  f_close(&USERFile);
 800f656:	483a      	ldr	r0, [pc, #232]	; (800f740 <Load_Buf+0x1b0>)
 800f658:	f015 fc68 	bl	8024f2c <f_close>

  ptr=(short*)F_Sector;                               //�����ֳ�
 800f65c:	4b3c      	ldr	r3, [pc, #240]	; (800f750 <Load_Buf+0x1c0>)
 800f65e:	623b      	str	r3, [r7, #32]
  *ptr++=0xaa55;
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	1c9a      	adds	r2, r3, #2
 800f664:	623a      	str	r2, [r7, #32]
 800f666:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800f66a:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[0];
 800f66c:	6a3b      	ldr	r3, [r7, #32]
 800f66e:	1c9a      	adds	r2, r3, #2
 800f670:	623a      	str	r2, [r7, #32]
 800f672:	4a36      	ldr	r2, [pc, #216]	; (800f74c <Load_Buf+0x1bc>)
 800f674:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f678:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[1];
 800f67a:	6a3b      	ldr	r3, [r7, #32]
 800f67c:	1c9a      	adds	r2, r3, #2
 800f67e:	623a      	str	r2, [r7, #32]
 800f680:	4a32      	ldr	r2, [pc, #200]	; (800f74c <Load_Buf+0x1bc>)
 800f682:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f686:	801a      	strh	r2, [r3, #0]
  *ptr++=List[Y_RANGES].Val;
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	1c9a      	adds	r2, r3, #2
 800f68c:	623a      	str	r2, [r7, #32]
 800f68e:	4a2d      	ldr	r2, [pc, #180]	; (800f744 <Load_Buf+0x1b4>)
 800f690:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f694:	801a      	strh	r2, [r3, #0]
  *ptr++=List[PROBEATT].Val;
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	1c9a      	adds	r2, r3, #2
 800f69a:	623a      	str	r2, [r7, #32]
 800f69c:	4a29      	ldr	r2, [pc, #164]	; (800f744 <Load_Buf+0x1b4>)
 800f69e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f6a2:	801a      	strh	r2, [r3, #0]
  *ptr++=List[SMPL_DPTH].Val;
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	1c9a      	adds	r2, r3, #2
 800f6a8:	623a      	str	r2, [r7, #32]
 800f6aa:	4a26      	ldr	r2, [pc, #152]	; (800f744 <Load_Buf+0x1b4>)
 800f6ac:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f6b0:	801a      	strh	r2, [r3, #0]
  ptr =(short*)F_Buff;                            //��ԭ���Ĳ���
 800f6b2:	4b25      	ldr	r3, [pc, #148]	; (800f748 <Load_Buf+0x1b8>)
 800f6b4:	623b      	str	r3, [r7, #32]
  Sampl[0]=*ptr++;
 800f6b6:	6a3b      	ldr	r3, [r7, #32]
 800f6b8:	1c9a      	adds	r2, r3, #2
 800f6ba:	623a      	str	r2, [r7, #32]
 800f6bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6c0:	4b22      	ldr	r3, [pc, #136]	; (800f74c <Load_Buf+0x1bc>)
 800f6c2:	801a      	strh	r2, [r3, #0]
  Sampl[1]=*ptr++;
 800f6c4:	6a3b      	ldr	r3, [r7, #32]
 800f6c6:	1c9a      	adds	r2, r3, #2
 800f6c8:	623a      	str	r2, [r7, #32]
 800f6ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6ce:	4b1f      	ldr	r3, [pc, #124]	; (800f74c <Load_Buf+0x1bc>)
 800f6d0:	805a      	strh	r2, [r3, #2]
  List[Y_RANGES].Val=*ptr++;
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	1c9a      	adds	r2, r3, #2
 800f6d6:	623a      	str	r2, [r7, #32]
 800f6d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6dc:	4b19      	ldr	r3, [pc, #100]	; (800f744 <Load_Buf+0x1b4>)
 800f6de:	809a      	strh	r2, [r3, #4]
  List[PROBEATT].Val=*ptr++;
 800f6e0:	6a3b      	ldr	r3, [r7, #32]
 800f6e2:	1c9a      	adds	r2, r3, #2
 800f6e4:	623a      	str	r2, [r7, #32]
 800f6e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6ea:	4b16      	ldr	r3, [pc, #88]	; (800f744 <Load_Buf+0x1b4>)
 800f6ec:	829a      	strh	r2, [r3, #20]
  List[SMPL_DPTH].Val=*ptr++;
 800f6ee:	6a3b      	ldr	r3, [r7, #32]
 800f6f0:	1c9a      	adds	r2, r3, #2
 800f6f2:	623a      	str	r2, [r7, #32]
 800f6f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6f8:	4b12      	ldr	r3, [pc, #72]	; (800f744 <Load_Buf+0x1b4>)
 800f6fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  Status |=  STOP;
 800f6fe:	4b15      	ldr	r3, [pc, #84]	; (800f754 <Load_Buf+0x1c4>)
 800f700:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f704:	f043 0301 	orr.w	r3, r3, #1
 800f708:	b21a      	sxth	r2, r3
 800f70a:	4b12      	ldr	r3, [pc, #72]	; (800f754 <Load_Buf+0x1c4>)
 800f70c:	801a      	strh	r2, [r3, #0]
  DispStatus();
 800f70e:	f004 fa2d 	bl	8013b6c <DispStatus>
  if(List[LOAD_BUF].Val<99)
 800f712:	4b0c      	ldr	r3, [pc, #48]	; (800f744 <Load_Buf+0x1b4>)
 800f714:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f718:	2b62      	cmp	r3, #98	; 0x62
 800f71a:	dc09      	bgt.n	800f730 <Load_Buf+0x1a0>
	  List[LOAD_BUF].Val++;
 800f71c:	4b09      	ldr	r3, [pc, #36]	; (800f744 <Load_Buf+0x1b4>)
 800f71e:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800f722:	b29b      	uxth	r3, r3
 800f724:	3301      	adds	r3, #1
 800f726:	b29b      	uxth	r3, r3
 800f728:	b21a      	sxth	r2, r3
 800f72a:	4b06      	ldr	r3, [pc, #24]	; (800f744 <Load_Buf+0x1b4>)
 800f72c:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  return 0;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3730      	adds	r7, #48	; 0x30
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	08000248 	.word	0x08000248
 800f740:	20007aa8 	.word	0x20007aa8
 800f744:	20000274 	.word	0x20000274
 800f748:	200012e0 	.word	0x200012e0
 800f74c:	200026a4 	.word	0x200026a4
 800f750:	2000231c 	.word	0x2000231c
 800f754:	20002656 	.word	0x20002656

0800f758 <Save_Buf>:

/*******************************************************************************
Save_Buf: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Buf(short FileNo)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08a      	sub	sp, #40	; 0x28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .BUF";
 800f762:	4a55      	ldr	r2, [pc, #340]	; (800f8b8 <Save_Buf+0x160>)
 800f764:	f107 030c 	add.w	r3, r7, #12
 800f768:	ca07      	ldmia	r2, {r0, r1, r2}
 800f76a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f76e:	2300      	movs	r3, #0
 800f770:	763b      	strb	r3, [r7, #24]
  int i;
  short *p;
  char  l=0;
 800f772:	2300      	movs	r3, #0
 800f774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  short n;
  unsigned j;

  n=2;
 800f778:	2302      	movs	r3, #2
 800f77a:	843b      	strh	r3, [r7, #32]

  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 800f77c:	4b4f      	ldr	r3, [pc, #316]	; (800f8bc <Save_Buf+0x164>)
 800f77e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800f782:	2b03      	cmp	r3, #3
 800f784:	d101      	bne.n	800f78a <Save_Buf+0x32>
 800f786:	2304      	movs	r3, #4
 800f788:	843b      	strh	r3, [r7, #32]

  Make_Filename(FileNo, pFileName);
 800f78a:	f107 020c 	add.w	r2, r7, #12
 800f78e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f792:	4611      	mov	r1, r2
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff fe2f 	bl	800f3f8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f79a:	f107 030c 	add.w	r3, r7, #12
 800f79e:	2213      	movs	r2, #19
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4847      	ldr	r0, [pc, #284]	; (800f8c0 <Save_Buf+0x168>)
 800f7a4:	f014 ff20 	bl	80245e8 <f_open>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <Save_Buf+0x5a>
	  return DISK_RW_ERR;
 800f7ae:	2304      	movs	r3, #4
 800f7b0:	e07d      	b.n	800f8ae <Save_Buf+0x156>

  for(i=0; i<n; i++)
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7b6:	e02b      	b.n	800f810 <Save_Buf+0xb8>
  {
    memcpy(F_Buff,&(Sampl[i*4096/2+2]),4096);
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ba:	02db      	lsls	r3, r3, #11
 800f7bc:	3302      	adds	r3, #2
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	4a40      	ldr	r2, [pc, #256]	; (800f8c4 <Save_Buf+0x16c>)
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	483f      	ldr	r0, [pc, #252]	; (800f8c8 <Save_Buf+0x170>)
 800f7cc:	f016 fe40 	bl	8026450 <memcpy>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f7d0:	f107 0308 	add.w	r3, r7, #8
 800f7d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f7d8:	493b      	ldr	r1, [pc, #236]	; (800f8c8 <Save_Buf+0x170>)
 800f7da:	4839      	ldr	r0, [pc, #228]	; (800f8c0 <Save_Buf+0x168>)
 800f7dc:	f015 f9d9 	bl	8024b92 <f_write>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <Save_Buf+0x92>
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	e061      	b.n	800f8ae <Save_Buf+0x156>
    PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 800f7ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7ee:	1c5a      	adds	r2, r3, #1
 800f7f0:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800f7f4:	085b      	lsrs	r3, r3, #1
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	f003 0303 	and.w	r3, r3, #3
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	461a      	mov	r2, r3
 800f800:	2102      	movs	r1, #2
 800f802:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f806:	f7ff fc3f 	bl	800f088 <PrintClk>
  for(i=0; i<n; i++)
 800f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80c:	3301      	adds	r3, #1
 800f80e:	627b      	str	r3, [r7, #36]	; 0x24
 800f810:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f816:	429a      	cmp	r2, r3
 800f818:	dbce      	blt.n	800f7b8 <Save_Buf+0x60>
  }
  memset(F_Buff,0,4096);
 800f81a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f81e:	2100      	movs	r1, #0
 800f820:	4829      	ldr	r0, [pc, #164]	; (800f8c8 <Save_Buf+0x170>)
 800f822:	f016 fe23 	bl	802646c <memset>
  p =(short*)&F_Buff;
 800f826:	4b28      	ldr	r3, [pc, #160]	; (800f8c8 <Save_Buf+0x170>)
 800f828:	61fb      	str	r3, [r7, #28]
  *p++=Sampl[0];
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	1c9a      	adds	r2, r3, #2
 800f82e:	61fa      	str	r2, [r7, #28]
 800f830:	4a24      	ldr	r2, [pc, #144]	; (800f8c4 <Save_Buf+0x16c>)
 800f832:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f836:	801a      	strh	r2, [r3, #0]
  *p++=Sampl[1];
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	1c9a      	adds	r2, r3, #2
 800f83c:	61fa      	str	r2, [r7, #28]
 800f83e:	4a21      	ldr	r2, [pc, #132]	; (800f8c4 <Save_Buf+0x16c>)
 800f840:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f844:	801a      	strh	r2, [r3, #0]
  *p++=List[Y_RANGES].Val;
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	1c9a      	adds	r2, r3, #2
 800f84a:	61fa      	str	r2, [r7, #28]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <Save_Buf+0x164>)
 800f84e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f852:	801a      	strh	r2, [r3, #0]
  *p++=List[PROBEATT].Val;
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	1c9a      	adds	r2, r3, #2
 800f858:	61fa      	str	r2, [r7, #28]
 800f85a:	4a18      	ldr	r2, [pc, #96]	; (800f8bc <Save_Buf+0x164>)
 800f85c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800f860:	801a      	strh	r2, [r3, #0]
  *p++=List[SMPL_DPTH].Val;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	1c9a      	adds	r2, r3, #2
 800f866:	61fa      	str	r2, [r7, #28]
 800f868:	4a14      	ldr	r2, [pc, #80]	; (800f8bc <Save_Buf+0x164>)
 800f86a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800f86e:	801a      	strh	r2, [r3, #0]
  if(f_write( &USERFile, F_Buff, 12, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f870:	f107 0308 	add.w	r3, r7, #8
 800f874:	220c      	movs	r2, #12
 800f876:	4914      	ldr	r1, [pc, #80]	; (800f8c8 <Save_Buf+0x170>)
 800f878:	4811      	ldr	r0, [pc, #68]	; (800f8c0 <Save_Buf+0x168>)
 800f87a:	f015 f98a 	bl	8024b92 <f_write>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <Save_Buf+0x130>
 800f884:	2303      	movs	r3, #3
 800f886:	e012      	b.n	800f8ae <Save_Buf+0x156>
  f_close(&USERFile);
 800f888:	480d      	ldr	r0, [pc, #52]	; (800f8c0 <Save_Buf+0x168>)
 800f88a:	f015 fb4f 	bl	8024f2c <f_close>
  if(List[SAVE_BUF].Val<99)
 800f88e:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <Save_Buf+0x164>)
 800f890:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f894:	2b62      	cmp	r3, #98	; 0x62
 800f896:	dc09      	bgt.n	800f8ac <Save_Buf+0x154>
	  List[SAVE_BUF].Val++;
 800f898:	4b08      	ldr	r3, [pc, #32]	; (800f8bc <Save_Buf+0x164>)
 800f89a:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	b21a      	sxth	r2, r3
 800f8a6:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <Save_Buf+0x164>)
 800f8a8:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  return OK;
 800f8ac:	2300      	movs	r3, #0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3728      	adds	r7, #40	; 0x28
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08000248 	.word	0x08000248
 800f8bc:	20000274 	.word	0x20000274
 800f8c0:	20007aa8 	.word	0x20007aa8
 800f8c4:	200026a4 	.word	0x200026a4
 800f8c8:	200012e0 	.word	0x200012e0

0800f8cc <Save_Dat>:

/*******************************************************************************
Save_Dat: ���浱ǰ��Ļ��ʾͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Dat(short FileNo)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b088      	sub	sp, #32
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f8d6:	4a3c      	ldr	r2, [pc, #240]	; (800f9c8 <Save_Dat+0xfc>)
 800f8d8:	f107 0310 	add.w	r3, r7, #16
 800f8dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	773b      	strb	r3, [r7, #28]
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f8e6:	f107 0210 	add.w	r2, r7, #16
 800f8ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff fd81 	bl	800f3f8 <Make_Filename>
  memset(F_Buff,0,4096);
 800f8f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	4833      	ldr	r0, [pc, #204]	; (800f9cc <Save_Dat+0x100>)
 800f8fe:	f016 fdb5 	bl	802646c <memset>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800f902:	f107 0310 	add.w	r3, r7, #16
 800f906:	2213      	movs	r2, #19
 800f908:	4619      	mov	r1, r3
 800f90a:	4831      	ldr	r0, [pc, #196]	; (800f9d0 <Save_Dat+0x104>)
 800f90c:	f014 fe6c 	bl	80245e8 <f_open>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d001      	beq.n	800f91a <Save_Dat+0x4e>
	  return DISK_RW_ERR;
 800f916:	2304      	movs	r3, #4
 800f918:	e052      	b.n	800f9c0 <Save_Dat+0xf4>
  F_Buff[0]  = 1;              //Ver0001
 800f91a:	4b2c      	ldr	r3, [pc, #176]	; (800f9cc <Save_Dat+0x100>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
  F_Buff[1]  = List[V0_POSI].Val;
 800f920:	4b2c      	ldr	r3, [pc, #176]	; (800f9d4 <Save_Dat+0x108>)
 800f922:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800f926:	b2da      	uxtb	r2, r3
 800f928:	4b28      	ldr	r3, [pc, #160]	; (800f9cc <Save_Dat+0x100>)
 800f92a:	705a      	strb	r2, [r3, #1]
  F_Buff[2]  = List[EXT_POSI].Val;
 800f92c:	4b29      	ldr	r3, [pc, #164]	; (800f9d4 <Save_Dat+0x108>)
 800f92e:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 800f932:	b2da      	uxtb	r2, r3
 800f934:	4b25      	ldr	r3, [pc, #148]	; (800f9cc <Save_Dat+0x100>)
 800f936:	709a      	strb	r2, [r3, #2]
  F_Buff[3]  = List[TIM_BASE].Val;
 800f938:	4b26      	ldr	r3, [pc, #152]	; (800f9d4 <Save_Dat+0x108>)
 800f93a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	4b22      	ldr	r3, [pc, #136]	; (800f9cc <Save_Dat+0x100>)
 800f942:	70da      	strb	r2, [r3, #3]
  F_Buff[4]  = List[Y_RANGES].Val;
 800f944:	4b23      	ldr	r3, [pc, #140]	; (800f9d4 <Save_Dat+0x108>)
 800f946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	4b1f      	ldr	r3, [pc, #124]	; (800f9cc <Save_Dat+0x100>)
 800f94e:	711a      	strb	r2, [r3, #4]
  F_Buff[5]  = List[COUPLING].Val;
 800f950:	4b20      	ldr	r3, [pc, #128]	; (800f9d4 <Save_Dat+0x108>)
 800f952:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f956:	b2da      	uxtb	r2, r3
 800f958:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <Save_Dat+0x100>)
 800f95a:	715a      	strb	r2, [r3, #5]
  F_Buff[6]  = List[PROBEATT].Val;
 800f95c:	4b1d      	ldr	r3, [pc, #116]	; (800f9d4 <Save_Dat+0x108>)
 800f95e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f962:	b2da      	uxtb	r2, r3
 800f964:	4b19      	ldr	r3, [pc, #100]	; (800f9cc <Save_Dat+0x100>)
 800f966:	719a      	strb	r2, [r3, #6]
  F_Buff[7]  = List[TR_MODE].Val;
 800f968:	4b1a      	ldr	r3, [pc, #104]	; (800f9d4 <Save_Dat+0x108>)
 800f96a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	4b16      	ldr	r3, [pc, #88]	; (800f9cc <Save_Dat+0x100>)
 800f972:	71da      	strb	r2, [r3, #7]

  memcpy(&F_Buff[10], WaveBuf, 300);
 800f974:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f978:	4917      	ldr	r1, [pc, #92]	; (800f9d8 <Save_Dat+0x10c>)
 800f97a:	4818      	ldr	r0, [pc, #96]	; (800f9dc <Save_Dat+0x110>)
 800f97c:	f016 fd68 	bl	8026450 <memcpy>
  if(f_write( &USERFile, F_Buff, 310, &j)!= FR_OK) return FILE_RW_ERR; // д������
 800f980:	f107 030c 	add.w	r3, r7, #12
 800f984:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f988:	4910      	ldr	r1, [pc, #64]	; (800f9cc <Save_Dat+0x100>)
 800f98a:	4811      	ldr	r0, [pc, #68]	; (800f9d0 <Save_Dat+0x104>)
 800f98c:	f015 f901 	bl	8024b92 <f_write>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d001      	beq.n	800f99a <Save_Dat+0xce>
 800f996:	2303      	movs	r3, #3
 800f998:	e012      	b.n	800f9c0 <Save_Dat+0xf4>
  f_close(&USERFile);
 800f99a:	480d      	ldr	r0, [pc, #52]	; (800f9d0 <Save_Dat+0x104>)
 800f99c:	f015 fac6 	bl	8024f2c <f_close>
  if(List[SAVE_DAT].Val<99)List[SAVE_DAT].Val++;
 800f9a0:	4b0c      	ldr	r3, [pc, #48]	; (800f9d4 <Save_Dat+0x108>)
 800f9a2:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f9a6:	2b62      	cmp	r3, #98	; 0x62
 800f9a8:	dc09      	bgt.n	800f9be <Save_Dat+0xf2>
 800f9aa:	4b0a      	ldr	r3, [pc, #40]	; (800f9d4 <Save_Dat+0x108>)
 800f9ac:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	b21a      	sxth	r2, r3
 800f9b8:	4b06      	ldr	r3, [pc, #24]	; (800f9d4 <Save_Dat+0x108>)
 800f9ba:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  return OK;
 800f9be:	2300      	movs	r3, #0
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3720      	adds	r7, #32
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	08000258 	.word	0x08000258
 800f9cc:	200012e0 	.word	0x200012e0
 800f9d0:	20007aa8 	.word	0x20007aa8
 800f9d4:	20000274 	.word	0x20000274
 800f9d8:	2000091c 	.word	0x2000091c
 800f9dc:	200012ea 	.word	0x200012ea

0800f9e0 <Load_Dat>:

/*******************************************************************************
Load_Dat: ���ر��������Ļͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Dat(short FileNo)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="FILE   .DAT";
 800f9ea:	4a52      	ldr	r2, [pc, #328]	; (800fb34 <Load_Dat+0x154>)
 800f9ec:	f107 030c 	add.w	r3, r7, #12
 800f9f0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f9f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	763b      	strb	r3, [r7, #24]
  short  Rvalue;
  int i;
  unsigned j;

  Make_Filename(FileNo, pFileName);
 800f9fa:	f107 020c 	add.w	r2, r7, #12
 800f9fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa02:	4611      	mov	r1, r2
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7ff fcf7 	bl	800f3f8 <Make_Filename>

  Rvalue =f_open( &USERFile, pFileName, FA_OPEN_EXISTING |FA_READ );
 800fa0a:	f107 030c 	add.w	r3, r7, #12
 800fa0e:	2201      	movs	r2, #1
 800fa10:	4619      	mov	r1, r3
 800fa12:	4849      	ldr	r0, [pc, #292]	; (800fb38 <Load_Dat+0x158>)
 800fa14:	f014 fde8 	bl	80245e8 <f_open>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	837b      	strh	r3, [r7, #26]
  if(Rvalue !=FR_OK)
 800fa1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <Load_Dat+0x4a>
	  return Rvalue;
 800fa24:	8b7b      	ldrh	r3, [r7, #26]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	e07f      	b.n	800fb2a <Load_Dat+0x14a>

  if(f_read(&USERFile, F_Buff, 310, &j)!= FR_OK)
 800fa2a:	f107 0308 	add.w	r3, r7, #8
 800fa2e:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa32:	4942      	ldr	r1, [pc, #264]	; (800fb3c <Load_Dat+0x15c>)
 800fa34:	4840      	ldr	r0, [pc, #256]	; (800fb38 <Load_Dat+0x158>)
 800fa36:	f014 ff93 	bl	8024960 <f_read>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <Load_Dat+0x64>
   	return FILE_RW_ERR;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e072      	b.n	800fb2a <Load_Dat+0x14a>
   if(j != 310)
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800fa4a:	d001      	beq.n	800fa50 <Load_Dat+0x70>
   	return FILE_RW_ERR;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e06c      	b.n	800fb2a <Load_Dat+0x14a>

  memcpy(Data, F_Buff, 310);
 800fa50:	f44f 729b 	mov.w	r2, #310	; 0x136
 800fa54:	4939      	ldr	r1, [pc, #228]	; (800fb3c <Load_Dat+0x15c>)
 800fa56:	483a      	ldr	r0, [pc, #232]	; (800fb40 <Load_Dat+0x160>)
 800fa58:	f016 fcfa 	bl	8026450 <memcpy>

  List[TIM_BASE].Val = F_Buff[3];
 800fa5c:	4b37      	ldr	r3, [pc, #220]	; (800fb3c <Load_Dat+0x15c>)
 800fa5e:	78db      	ldrb	r3, [r3, #3]
 800fa60:	b21a      	sxth	r2, r3
 800fa62:	4b38      	ldr	r3, [pc, #224]	; (800fb44 <Load_Dat+0x164>)
 800fa64:	879a      	strh	r2, [r3, #60]	; 0x3c
  List[Y_RANGES].Val = F_Buff[4];
 800fa66:	4b35      	ldr	r3, [pc, #212]	; (800fb3c <Load_Dat+0x15c>)
 800fa68:	791b      	ldrb	r3, [r3, #4]
 800fa6a:	b21a      	sxth	r2, r3
 800fa6c:	4b35      	ldr	r3, [pc, #212]	; (800fb44 <Load_Dat+0x164>)
 800fa6e:	809a      	strh	r2, [r3, #4]
  List[COUPLING].Val = F_Buff[5];
 800fa70:	4b32      	ldr	r3, [pc, #200]	; (800fb3c <Load_Dat+0x15c>)
 800fa72:	795b      	ldrb	r3, [r3, #5]
 800fa74:	b21a      	sxth	r2, r3
 800fa76:	4b33      	ldr	r3, [pc, #204]	; (800fb44 <Load_Dat+0x164>)
 800fa78:	819a      	strh	r2, [r3, #12]
  List[PROBEATT].Val = F_Buff[6];
 800fa7a:	4b30      	ldr	r3, [pc, #192]	; (800fb3c <Load_Dat+0x15c>)
 800fa7c:	799b      	ldrb	r3, [r3, #6]
 800fa7e:	b21a      	sxth	r2, r3
 800fa80:	4b30      	ldr	r3, [pc, #192]	; (800fb44 <Load_Dat+0x164>)
 800fa82:	829a      	strh	r2, [r3, #20]
  List[TR_MODE].Val  = F_Buff[7];
 800fa84:	4b2d      	ldr	r3, [pc, #180]	; (800fb3c <Load_Dat+0x15c>)
 800fa86:	79db      	ldrb	r3, [r3, #7]
 800fa88:	b21a      	sxth	r2, r3
 800fa8a:	4b2e      	ldr	r3, [pc, #184]	; (800fb44 <Load_Dat+0x164>)
 800fa8c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

  for(i=0;i<4;i++)List[i].Flg |= UPD;
 800fa90:	2300      	movs	r3, #0
 800fa92:	61fb      	str	r3, [r7, #28]
 800fa94:	e010      	b.n	800fab8 <Load_Dat+0xd8>
 800fa96:	4a2b      	ldr	r2, [pc, #172]	; (800fb44 <Load_Dat+0x164>)
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	799b      	ldrb	r3, [r3, #6]
 800faa0:	f043 0320 	orr.w	r3, r3, #32
 800faa4:	b2d9      	uxtb	r1, r3
 800faa6:	4a27      	ldr	r2, [pc, #156]	; (800fb44 <Load_Dat+0x164>)
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	460a      	mov	r2, r1
 800fab0:	719a      	strb	r2, [r3, #6]
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	3301      	adds	r3, #1
 800fab6:	61fb      	str	r3, [r7, #28]
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	2b03      	cmp	r3, #3
 800fabc:	ddeb      	ble.n	800fa96 <Load_Dat+0xb6>
  List[EXT_REFN].Flg |= UPD;
 800fabe:	4b21      	ldr	r3, [pc, #132]	; (800fb44 <Load_Dat+0x164>)
 800fac0:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 800fac4:	f043 0320 	orr.w	r3, r3, #32
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	4b1e      	ldr	r3, [pc, #120]	; (800fb44 <Load_Dat+0x164>)
 800facc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  List[EXT_POSI].Flg |= UPD;
 800fad0:	4b1c      	ldr	r3, [pc, #112]	; (800fb44 <Load_Dat+0x164>)
 800fad2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800fad6:	f043 0320 	orr.w	r3, r3, #32
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	4b19      	ldr	r3, [pc, #100]	; (800fb44 <Load_Dat+0x164>)
 800fade:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  List[TIM_BASE].Flg |= UPD;
 800fae2:	4b18      	ldr	r3, [pc, #96]	; (800fb44 <Load_Dat+0x164>)
 800fae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fae8:	f043 0320 	orr.w	r3, r3, #32
 800faec:	b2da      	uxtb	r2, r3
 800faee:	4b15      	ldr	r3, [pc, #84]	; (800fb44 <Load_Dat+0x164>)
 800faf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  List[TR_MODE].Flg |= UPD;
 800faf4:	4b13      	ldr	r3, [pc, #76]	; (800fb44 <Load_Dat+0x164>)
 800faf6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fafa:	f043 0320 	orr.w	r3, r3, #32
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	4b10      	ldr	r3, [pc, #64]	; (800fb44 <Load_Dat+0x164>)
 800fb02:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  Update_Detail();
 800fb06:	f002 ff9f 	bl	8012a48 <Update_Detail>
  if(List[LOAD_DAT].Val<99)List[LOAD_DAT].Val++;
 800fb0a:	4b0e      	ldr	r3, [pc, #56]	; (800fb44 <Load_Dat+0x164>)
 800fb0c:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800fb10:	2b62      	cmp	r3, #98	; 0x62
 800fb12:	dc09      	bgt.n	800fb28 <Load_Dat+0x148>
 800fb14:	4b0b      	ldr	r3, [pc, #44]	; (800fb44 <Load_Dat+0x164>)
 800fb16:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	b21a      	sxth	r2, r3
 800fb22:	4b08      	ldr	r3, [pc, #32]	; (800fb44 <Load_Dat+0x164>)
 800fb24:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  return OK;
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	08000258 	.word	0x08000258
 800fb38:	20007aa8 	.word	0x20007aa8
 800fb3c:	200012e0 	.word	0x200012e0
 800fb40:	20000008 	.word	0x20000008
 800fb44:	20000274 	.word	0x20000274

0800fb48 <Save_Bmp>:

/*******************************************************************************
Save_Bmp: ���浱ǰ��Ļ��ʾͼ��ΪBMP��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Bmp(short FileNo)
{
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b08c      	sub	sp, #48	; 0x30
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	80fb      	strh	r3, [r7, #6]
  char  pFileName[13]="IMG_   .BMP";
 800fb52:	4aa2      	ldr	r2, [pc, #648]	; (800fddc <Save_Bmp+0x294>)
 800fb54:	f107 0310 	add.w	r3, r7, #16
 800fb58:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb5e:	2300      	movs	r3, #0
 800fb60:	773b      	strb	r3, [r7, #28]
  short x, y, i=54, j,ColorH,ColorL ;
 800fb62:	2336      	movs	r3, #54	; 0x36
 800fb64:	857b      	strh	r3, [r7, #42]	; 0x2a
  short k=0, l=0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  unsigned m;

  if(Current == FN)
 800fb6e:	4b9c      	ldr	r3, [pc, #624]	; (800fde0 <Save_Bmp+0x298>)
 800fb70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb74:	2b05      	cmp	r3, #5
 800fb76:	d105      	bne.n	800fb84 <Save_Bmp+0x3c>
  {
    Close_Pop();
 800fb78:	f7fe ffb6 	bl	800eae8 <Close_Pop>
    DrawWindow(WaveBuf, ParamTab);
 800fb7c:	4999      	ldr	r1, [pc, #612]	; (800fde4 <Save_Bmp+0x29c>)
 800fb7e:	489a      	ldr	r0, [pc, #616]	; (800fde8 <Save_Bmp+0x2a0>)
 800fb80:	f7fd ffb0 	bl	800dae4 <DrawWindow>
  }
  Make_Filename(FileNo, pFileName);
 800fb84:	f107 0210 	add.w	r2, r7, #16
 800fb88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fc32 	bl	800f3f8 <Make_Filename>

  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fb94:	f107 0310 	add.w	r3, r7, #16
 800fb98:	2213      	movs	r2, #19
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4893      	ldr	r0, [pc, #588]	; (800fdec <Save_Bmp+0x2a4>)
 800fb9e:	f014 fd23 	bl	80245e8 <f_open>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d001      	beq.n	800fbac <Save_Bmp+0x64>
	  return DISK_RW_ERR;
 800fba8:	2304      	movs	r3, #4
 800fbaa:	e112      	b.n	800fdd2 <Save_Bmp+0x28a>
  memcpy(F_Buff, BmpHead, 54);
 800fbac:	4a90      	ldr	r2, [pc, #576]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fbae:	4b91      	ldr	r3, [pc, #580]	; (800fdf4 <Save_Bmp+0x2ac>)
 800fbb0:	4614      	mov	r4, r2
 800fbb2:	461d      	mov	r5, r3
 800fbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fbc4:	6020      	str	r0, [r4, #0]
 800fbc6:	3404      	adds	r4, #4
 800fbc8:	8021      	strh	r1, [r4, #0]
  i = 0x0036;                                     // ��ɫ���ſ�ʼ��ַ
 800fbca:	2336      	movs	r3, #54	; 0x36
 800fbcc:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(j=0; j<16; ++j)
 800fbce:	2300      	movs	r3, #0
 800fbd0:	853b      	strh	r3, [r7, #40]	; 0x28
 800fbd2:	e042      	b.n	800fc5a <Save_Bmp+0x112>
  {
    F_Buff[j*4 +i+0]=(BMP_Color[j] & 0xF800)>>8;  // Bule
 800fbd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbd8:	4a87      	ldr	r2, [pc, #540]	; (800fdf8 <Save_Bmp+0x2b0>)
 800fbda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbde:	121b      	asrs	r3, r3, #8
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbe6:	0099      	lsls	r1, r3, #2
 800fbe8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fbec:	440b      	add	r3, r1
 800fbee:	f022 0207 	bic.w	r2, r2, #7
 800fbf2:	b2d1      	uxtb	r1, r2
 800fbf4:	4a7e      	ldr	r2, [pc, #504]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fbf6:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+1]=(BMP_Color[j] & 0x07E0)>>3;  // Green&
 800fbf8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fbfc:	4a7e      	ldr	r2, [pc, #504]	; (800fdf8 <Save_Bmp+0x2b0>)
 800fbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc02:	10db      	asrs	r3, r3, #3
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc0a:	0099      	lsls	r1, r3, #2
 800fc0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc10:	440b      	add	r3, r1
 800fc12:	3301      	adds	r3, #1
 800fc14:	f022 0203 	bic.w	r2, r2, #3
 800fc18:	b2d1      	uxtb	r1, r2
 800fc1a:	4a75      	ldr	r2, [pc, #468]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fc1c:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+2]=(BMP_Color[j] & 0x001F)<<3;  // Red
 800fc1e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc22:	4a75      	ldr	r2, [pc, #468]	; (800fdf8 <Save_Bmp+0x2b0>)
 800fc24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc28:	00d9      	lsls	r1, r3, #3
 800fc2a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc2e:	009a      	lsls	r2, r3, #2
 800fc30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc34:	4413      	add	r3, r2
 800fc36:	3302      	adds	r3, #2
 800fc38:	b2c9      	uxtb	r1, r1
 800fc3a:	4a6d      	ldr	r2, [pc, #436]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fc3c:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+3]= 0;                          // Alpha
 800fc3e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc42:	009a      	lsls	r2, r3, #2
 800fc44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fc48:	4413      	add	r3, r2
 800fc4a:	3303      	adds	r3, #3
 800fc4c:	4a68      	ldr	r2, [pc, #416]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fc4e:	2100      	movs	r1, #0
 800fc50:	54d1      	strb	r1, [r2, r3]
  for(j=0; j<16; ++j)
 800fc52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc54:	3301      	adds	r3, #1
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	853b      	strh	r3, [r7, #40]	; 0x28
 800fc5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fc5e:	2b0f      	cmp	r3, #15
 800fc60:	ddb8      	ble.n	800fbd4 <Save_Bmp+0x8c>
  }
  i = 0x0076;                                     // ͼ�����ݿ�ʼ��ŵ�ַ
 800fc62:	2376      	movs	r3, #118	; 0x76
 800fc64:	857b      	strh	r3, [r7, #42]	; 0x2a
  for(y=0; y<240; y++)
 800fc66:	2300      	movs	r3, #0
 800fc68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fc6a:	e07b      	b.n	800fd64 <Save_Bmp+0x21c>
  {
    for(x=0; x<320 ; x+=2)
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc70:	e06d      	b.n	800fd4e <Save_Bmp+0x206>
    {
      LCD_Set_Posi(x, y);
 800fc72:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc76:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f001 fe63 	bl	8011948 <LCD_Set_Posi>
      ColorH = LCD_Get_Pixel();
 800fc82:	f001 fed7 	bl	8011a34 <LCD_Get_Pixel>
 800fc86:	4603      	mov	r3, r0
 800fc88:	847b      	strh	r3, [r7, #34]	; 0x22
      LCD_Set_Posi(x+1, y);
 800fc8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	b21b      	sxth	r3, r3
 800fc92:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800fc96:	4611      	mov	r1, r2
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f001 fe55 	bl	8011948 <LCD_Set_Posi>
      ColorL = LCD_Get_Pixel();
 800fc9e:	f001 fec9 	bl	8011a34 <LCD_Get_Pixel>
 800fca2:	4603      	mov	r3, r0
 800fca4:	843b      	strh	r3, [r7, #32]
      F_Buff[i] =(Color_Num(ColorH)<<4)+ Color_Num(ColorL);
 800fca6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7ff f96c 	bl	800ef88 <Color_Num>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	011b      	lsls	r3, r3, #4
 800fcb4:	b2dc      	uxtb	r4, r3
 800fcb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff f964 	bl	800ef88 <Color_Num>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcc8:	4422      	add	r2, r4
 800fcca:	b2d1      	uxtb	r1, r2
 800fccc:	4a48      	ldr	r2, [pc, #288]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fcce:	54d1      	strb	r1, [r2, r3]
      i++;
 800fcd0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	857b      	strh	r3, [r7, #42]	; 0x2a
      if(i>=4096)
 800fcdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fce4:	db2f      	blt.n	800fd46 <Save_Bmp+0x1fe>
      {
        i=0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	857b      	strh	r3, [r7, #42]	; 0x2a
        if(f_write( &USERFile, F_Buff, 4096, &m)!= FR_OK) return FILE_RW_ERR; // д������
 800fcea:	f107 030c 	add.w	r3, r7, #12
 800fcee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcf2:	493f      	ldr	r1, [pc, #252]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fcf4:	483d      	ldr	r0, [pc, #244]	; (800fdec <Save_Bmp+0x2a4>)
 800fcf6:	f014 ff4c 	bl	8024b92 <f_write>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <Save_Bmp+0x1bc>
 800fd00:	2303      	movs	r3, #3
 800fd02:	e066      	b.n	800fdd2 <Save_Bmp+0x28a>
        if(l==0)
 800fd04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d110      	bne.n	800fd2e <Save_Bmp+0x1e6>
        	PrintClk(168,2,(k++ >>1)& 3);         // ����ָʾ
 800fd0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	3201      	adds	r2, #1
 800fd14:	b292      	uxth	r2, r2
 800fd16:	84fa      	strh	r2, [r7, #38]	; 0x26
 800fd18:	105b      	asrs	r3, r3, #1
 800fd1a:	b21b      	sxth	r3, r3
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	f003 0303 	and.w	r3, r3, #3
 800fd22:	b2db      	uxtb	r3, r3
 800fd24:	461a      	mov	r2, r3
 800fd26:	2102      	movs	r1, #2
 800fd28:	20a8      	movs	r0, #168	; 0xa8
 800fd2a:	f7ff f9ad 	bl	800f088 <PrintClk>
        l++;
 800fd2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	3301      	adds	r3, #1
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(l>=2)l=0;
 800fd3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	dd01      	ble.n	800fd46 <Save_Bmp+0x1fe>
 800fd42:	2300      	movs	r3, #0
 800fd44:	84bb      	strh	r3, [r7, #36]	; 0x24
    for(x=0; x<320 ; x+=2)
 800fd46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd48:	3302      	adds	r3, #2
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fd4e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800fd52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800fd56:	db8c      	blt.n	800fc72 <Save_Bmp+0x12a>
  for(y=0; y<240; y++)
 800fd58:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	3301      	adds	r3, #1
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fd64:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd68:	2bef      	cmp	r3, #239	; 0xef
 800fd6a:	f77f af7f 	ble.w	800fc6c <Save_Bmp+0x124>
      }
    }
  }
  if(i!=0)
 800fd6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d00e      	beq.n	800fd94 <Save_Bmp+0x24c>
  {
      if(f_write( &USERFile, F_Buff, i, &m)!= FR_OK)
 800fd76:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800fd7a:	f107 030c 	add.w	r3, r7, #12
 800fd7e:	491c      	ldr	r1, [pc, #112]	; (800fdf0 <Save_Bmp+0x2a8>)
 800fd80:	481a      	ldr	r0, [pc, #104]	; (800fdec <Save_Bmp+0x2a4>)
 800fd82:	f014 ff06 	bl	8024b92 <f_write>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <Save_Bmp+0x24c>
      {
    	  List_Pop();
 800fd8c:	f7fe fec2 	bl	800eb14 <List_Pop>
    	  return FILE_RW_ERR;
 800fd90:	2303      	movs	r3, #3
 800fd92:	e01e      	b.n	800fdd2 <Save_Bmp+0x28a>
      } // д������
  }
  if(f_close(&USERFile)!= FR_OK )
 800fd94:	4815      	ldr	r0, [pc, #84]	; (800fdec <Save_Bmp+0x2a4>)
 800fd96:	f015 f8c9 	bl	8024f2c <f_close>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <Save_Bmp+0x25c>
	  return FILE_RW_ERR;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e016      	b.n	800fdd2 <Save_Bmp+0x28a>
  if(Current == FN)
 800fda4:	4b0e      	ldr	r3, [pc, #56]	; (800fde0 <Save_Bmp+0x298>)
 800fda6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	d101      	bne.n	800fdb2 <Save_Bmp+0x26a>
	  List_Pop();
 800fdae:	f7fe feb1 	bl	800eb14 <List_Pop>
  if(List[SAVE_BMP].Val<99)
 800fdb2:	4b12      	ldr	r3, [pc, #72]	; (800fdfc <Save_Bmp+0x2b4>)
 800fdb4:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdb8:	2b62      	cmp	r3, #98	; 0x62
 800fdba:	dc09      	bgt.n	800fdd0 <Save_Bmp+0x288>
	  List[SAVE_BMP].Val++;
 800fdbc:	4b0f      	ldr	r3, [pc, #60]	; (800fdfc <Save_Bmp+0x2b4>)
 800fdbe:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	b21a      	sxth	r2, r3
 800fdca:	4b0c      	ldr	r3, [pc, #48]	; (800fdfc <Save_Bmp+0x2b4>)
 800fdcc:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

  return OK;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3730      	adds	r7, #48	; 0x30
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bdb0      	pop	{r4, r5, r7, pc}
 800fdda:	bf00      	nop
 800fddc:	08000268 	.word	0x08000268
 800fde0:	20002654 	.word	0x20002654
 800fde4:	20000140 	.word	0x20000140
 800fde8:	2000091c 	.word	0x2000091c
 800fdec:	20007aa8 	.word	0x20007aa8
 800fdf0:	200012e0 	.word	0x200012e0
 800fdf4:	08001c20 	.word	0x08001c20
 800fdf8:	08001c00 	.word	0x08001c00
 800fdfc:	20000274 	.word	0x20000274

0800fe00 <Save_Csv>:

/*******************************************************************************
Save_Csv: ����ɼ����ݻ�����ΪCSV��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Csv(short FileNo)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b08e      	sub	sp, #56	; 0x38
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	80fb      	strh	r3, [r7, #6]

  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 800fe0a:	4bae      	ldr	r3, [pc, #696]	; (80100c4 <Save_Csv+0x2c4>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	4bae      	ldr	r3, [pc, #696]	; (80100c8 <Save_Csv+0x2c8>)
 800fe10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe14:	4619      	mov	r1, r3
 800fe16:	4bad      	ldr	r3, [pc, #692]	; (80100cc <Save_Csv+0x2cc>)
 800fe18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bf14      	ite	ne
 800fe20:	2301      	movne	r3, #1
 800fe22:	2300      	moveq	r3, #0
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	440b      	add	r3, r1
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4aa7      	ldr	r2, [pc, #668]	; (80100d0 <Save_Csv+0x2d0>)
 800fe34:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fe38:	4611      	mov	r1, r2
 800fe3a:	4aa6      	ldr	r2, [pc, #664]	; (80100d4 <Save_Csv+0x2d4>)
 800fe3c:	5c52      	ldrb	r2, [r2, r1]
 800fe3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe42:	62bb      	str	r3, [r7, #40]	; 0x28

  char pFileName[13]="DATA   .CSV";
 800fe44:	4aa4      	ldr	r2, [pc, #656]	; (80100d8 <Save_Csv+0x2d8>)
 800fe46:	f107 0314 	add.w	r3, r7, #20
 800fe4a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe50:	2300      	movs	r3, #0
 800fe52:	f887 3020 	strb.w	r3, [r7, #32]
  short i,k=0,l=0;
 800fe56:	2300      	movs	r3, #0
 800fe58:	86bb      	strh	r3, [r7, #52]	; 0x34
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	867b      	strh	r3, [r7, #50]	; 0x32
  short temp;
  short count;
  char* ptr;
  char* buf;

  Make_Filename(FileNo, pFileName);
 800fe5e:	f107 0214 	add.w	r2, r7, #20
 800fe62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe66:	4611      	mov	r1, r2
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7ff fac5 	bl	800f3f8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 800fe6e:	f107 0314 	add.w	r3, r7, #20
 800fe72:	2213      	movs	r2, #19
 800fe74:	4619      	mov	r1, r3
 800fe76:	4899      	ldr	r0, [pc, #612]	; (80100dc <Save_Csv+0x2dc>)
 800fe78:	f014 fbb6 	bl	80245e8 <f_open>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <Save_Csv+0x86>
	  return DISK_RW_ERR;
 800fe82:	2304      	movs	r3, #4
 800fe84:	e1d1      	b.n	801022a <Save_Csv+0x42a>
  memcpy(&F_Buff[0],TimeBase_Str[List[TIM_BASE].Val],5);
 800fe86:	4b96      	ldr	r3, [pc, #600]	; (80100e0 <Save_Csv+0x2e0>)
 800fe88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe8c:	00db      	lsls	r3, r3, #3
 800fe8e:	4a95      	ldr	r2, [pc, #596]	; (80100e4 <Save_Csv+0x2e4>)
 800fe90:	4413      	add	r3, r2
 800fe92:	2205      	movs	r2, #5
 800fe94:	4619      	mov	r1, r3
 800fe96:	4894      	ldr	r0, [pc, #592]	; (80100e8 <Save_Csv+0x2e8>)
 800fe98:	f016 fada 	bl	8026450 <memcpy>
  memcpy(&F_Buff[5],"   ",3);
 800fe9c:	2203      	movs	r2, #3
 800fe9e:	4993      	ldr	r1, [pc, #588]	; (80100ec <Save_Csv+0x2ec>)
 800fea0:	4893      	ldr	r0, [pc, #588]	; (80100f0 <Save_Csv+0x2f0>)
 800fea2:	f016 fad5 	bl	8026450 <memcpy>
  buf=&F_Buff[8];
 800fea6:	4b93      	ldr	r3, [pc, #588]	; (80100f4 <Save_Csv+0x2f4>)
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24
  //------------------------------------------------------------------
    i=0;
 800feaa:	2300      	movs	r3, #0
 800feac:	86fb      	strh	r3, [r7, #54]	; 0x36
    ptr=(char*)&R[List[Y_RANGES].Val];
 800feae:	4b8c      	ldr	r3, [pc, #560]	; (80100e0 <Save_Csv+0x2e0>)
 800feb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800feb4:	461a      	mov	r2, r3
 800feb6:	4613      	mov	r3, r2
 800feb8:	005b      	lsls	r3, r3, #1
 800feba:	4413      	add	r3, r2
 800febc:	005b      	lsls	r3, r3, #1
 800febe:	4a8e      	ldr	r2, [pc, #568]	; (80100f8 <Save_Csv+0x2f8>)
 800fec0:	4413      	add	r3, r2
 800fec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800fec4:	e00c      	b.n	800fee0 <Save_Csv+0xe0>
    	buf[i++] = *ptr++;
 800fec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fecc:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800fed0:	b28a      	uxth	r2, r1
 800fed2:	3201      	adds	r2, #1
 800fed4:	b292      	uxth	r2, r2
 800fed6:	86fa      	strh	r2, [r7, #54]	; 0x36
 800fed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feda:	440a      	add	r2, r1
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1ee      	bne.n	800fec6 <Save_Csv+0xc6>
    buf[i++]   = 0x2a;
 800fee8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800feec:	b293      	uxth	r3, r2
 800feee:	3301      	adds	r3, #1
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	4413      	add	r3, r2
 800fef8:	222a      	movs	r2, #42	; 0x2a
 800fefa:	701a      	strb	r2, [r3, #0]
    ptr=(char*)&N[List[PROBEATT].Val];
 800fefc:	4b78      	ldr	r3, [pc, #480]	; (80100e0 <Save_Csv+0x2e0>)
 800fefe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ff02:	461a      	mov	r2, r3
 800ff04:	4613      	mov	r3, r2
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	4413      	add	r3, r2
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	4a7b      	ldr	r2, [pc, #492]	; (80100fc <Save_Csv+0x2fc>)
 800ff0e:	4413      	add	r3, r2
 800ff10:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(*ptr != 0)
 800ff12:	e00c      	b.n	800ff2e <Save_Csv+0x12e>
    	buf[i++] = *ptr++;
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff1a:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	; 0x36
 800ff1e:	b28a      	uxth	r2, r1
 800ff20:	3201      	adds	r2, #1
 800ff22:	b292      	uxth	r2, r2
 800ff24:	86fa      	strh	r2, [r7, #54]	; 0x36
 800ff26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff28:	440a      	add	r2, r1
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1ee      	bne.n	800ff14 <Save_Csv+0x114>
    buf[i]   = 0x2c;
 800ff36:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff3c:	4413      	add	r3, r2
 800ff3e:	222c      	movs	r2, #44	; 0x2c
 800ff40:	701a      	strb	r2, [r3, #0]
    buf[i+1] = 0;
 800ff42:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff46:	3301      	adds	r3, #1
 800ff48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4a:	4413      	add	r3, r2
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	701a      	strb	r2, [r3, #0]
    count = i+1;
 800ff50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff52:	3301      	adds	r3, #1
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	863b      	strh	r3, [r7, #48]	; 0x30

  k=8+count;
 800ff58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ff5a:	3308      	adds	r3, #8
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	86bb      	strh	r3, [r7, #52]	; 0x34
  memcpy(&F_Buff[k],"\r\n",2);
 800ff60:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800ff64:	4a60      	ldr	r2, [pc, #384]	; (80100e8 <Save_Csv+0x2e8>)
 800ff66:	4413      	add	r3, r2
 800ff68:	2202      	movs	r2, #2
 800ff6a:	4965      	ldr	r1, [pc, #404]	; (8010100 <Save_Csv+0x300>)
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f016 fa6f 	bl	8026450 <memcpy>
  k+=2;
 800ff72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ff74:	3302      	adds	r3, #2
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	86bb      	strh	r3, [r7, #52]	; 0x34
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ff7e:	e0ef      	b.n	8010160 <Save_Csv+0x360>
  {
    temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 800ff80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff84:	3302      	adds	r3, #2
 800ff86:	4a5f      	ldr	r2, [pc, #380]	; (8010104 <Save_Csv+0x304>)
 800ff88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ff8c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ff90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff92:	fb02 f303 	mul.w	r3, r2, r3
 800ff96:	131b      	asrs	r3, r3, #12
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	3364      	adds	r3, #100	; 0x64
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	847b      	strh	r3, [r7, #34]	; 0x22

    if(temp > 0)
 800ffa0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	dd0a      	ble.n	800ffbe <Save_Csv+0x1be>
    {
      if(temp > 200)  track[0] = 199;
 800ffa8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffac:	2bc8      	cmp	r3, #200	; 0xc8
 800ffae:	dd02      	ble.n	800ffb6 <Save_Csv+0x1b6>
 800ffb0:	23c7      	movs	r3, #199	; 0xc7
 800ffb2:	723b      	strb	r3, [r7, #8]
 800ffb4:	e005      	b.n	800ffc2 <Save_Csv+0x1c2>
      else            track[0] = temp;
 800ffb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	723b      	strb	r3, [r7, #8]
 800ffbc:	e001      	b.n	800ffc2 <Save_Csv+0x1c2>
    } else            track[0] = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	723b      	strb	r3, [r7, #8]
    u8ToDec3(Num,track[0]);
 800ffc2:	7a3a      	ldrb	r2, [r7, #8]
 800ffc4:	f107 030c 	add.w	r3, r7, #12
 800ffc8:	4611      	mov	r1, r2
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f001 f894 	bl	80110f8 <u8ToDec3>
    for(count=0; count<3; count++)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	863b      	strh	r3, [r7, #48]	; 0x30
 800ffd4:	e042      	b.n	801005c <Save_Csv+0x25c>
    {
      if(Num[count] == 0) break;
 800ffd6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffda:	3338      	adds	r3, #56	; 0x38
 800ffdc:	443b      	add	r3, r7
 800ffde:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d03f      	beq.n	8010066 <Save_Csv+0x266>
      F_Buff[k++] = Num[count];
 800ffe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ffea:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	; 0x34
 800ffee:	b28a      	uxth	r2, r1
 800fff0:	3201      	adds	r2, #1
 800fff2:	b292      	uxth	r2, r2
 800fff4:	86ba      	strh	r2, [r7, #52]	; 0x34
 800fff6:	460a      	mov	r2, r1
 800fff8:	3338      	adds	r3, #56	; 0x38
 800fffa:	443b      	add	r3, r7
 800fffc:	f813 1c2c 	ldrb.w	r1, [r3, #-44]
 8010000:	4b39      	ldr	r3, [pc, #228]	; (80100e8 <Save_Csv+0x2e8>)
 8010002:	5499      	strb	r1, [r3, r2]
      if(k >= 4096)
 8010004:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801000c:	db20      	blt.n	8010050 <Save_Csv+0x250>
      {
        if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 801000e:	f107 0310 	add.w	r3, r7, #16
 8010012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010016:	4934      	ldr	r1, [pc, #208]	; (80100e8 <Save_Csv+0x2e8>)
 8010018:	4830      	ldr	r0, [pc, #192]	; (80100dc <Save_Csv+0x2dc>)
 801001a:	f014 fdba 	bl	8024b92 <f_write>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <Save_Csv+0x228>
 8010024:	2303      	movs	r3, #3
 8010026:	e100      	b.n	801022a <Save_Csv+0x42a>
        PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 8010028:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801002c:	b29a      	uxth	r2, r3
 801002e:	3201      	adds	r2, #1
 8010030:	b292      	uxth	r2, r2
 8010032:	867a      	strh	r2, [r7, #50]	; 0x32
 8010034:	105b      	asrs	r3, r3, #1
 8010036:	b21b      	sxth	r3, r3
 8010038:	b2db      	uxtb	r3, r3
 801003a:	f003 0303 	and.w	r3, r3, #3
 801003e:	b2db      	uxtb	r3, r3
 8010040:	461a      	mov	r2, r3
 8010042:	2102      	movs	r1, #2
 8010044:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010048:	f7ff f81e 	bl	800f088 <PrintClk>
        k = 0;
 801004c:	2300      	movs	r3, #0
 801004e:	86bb      	strh	r3, [r7, #52]	; 0x34
    for(count=0; count<3; count++)
 8010050:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010054:	b29b      	uxth	r3, r3
 8010056:	3301      	adds	r3, #1
 8010058:	b29b      	uxth	r3, r3
 801005a:	863b      	strh	r3, [r7, #48]	; 0x30
 801005c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010060:	2b02      	cmp	r3, #2
 8010062:	ddb8      	ble.n	800ffd6 <Save_Csv+0x1d6>
 8010064:	e000      	b.n	8010068 <Save_Csv+0x268>
      if(Num[count] == 0) break;
 8010066:	bf00      	nop
      }
    }
    F_Buff[k++] = 0x2c;
 8010068:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801006c:	b293      	uxth	r3, r2
 801006e:	3301      	adds	r3, #1
 8010070:	b29b      	uxth	r3, r3
 8010072:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010074:	4b1c      	ldr	r3, [pc, #112]	; (80100e8 <Save_Csv+0x2e8>)
 8010076:	212c      	movs	r1, #44	; 0x2c
 8010078:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0d;
 801007a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801007e:	b293      	uxth	r3, r2
 8010080:	3301      	adds	r3, #1
 8010082:	b29b      	uxth	r3, r3
 8010084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010086:	4b18      	ldr	r3, [pc, #96]	; (80100e8 <Save_Csv+0x2e8>)
 8010088:	210d      	movs	r1, #13
 801008a:	5499      	strb	r1, [r3, r2]
    F_Buff[k++] = 0x0a;
 801008c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010090:	b293      	uxth	r3, r2
 8010092:	3301      	adds	r3, #1
 8010094:	b29b      	uxth	r3, r3
 8010096:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010098:	4b13      	ldr	r3, [pc, #76]	; (80100e8 <Save_Csv+0x2e8>)
 801009a:	210a      	movs	r1, #10
 801009c:	5499      	strb	r1, [r3, r2]
    if(k >= 4096)
 801009e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80100a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100a6:	db55      	blt.n	8010154 <Save_Csv+0x354>
    {
      if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 80100a8:	f107 0310 	add.w	r3, r7, #16
 80100ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80100b0:	490d      	ldr	r1, [pc, #52]	; (80100e8 <Save_Csv+0x2e8>)
 80100b2:	480a      	ldr	r0, [pc, #40]	; (80100dc <Save_Csv+0x2dc>)
 80100b4:	f014 fd6d 	bl	8024b92 <f_write>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d024      	beq.n	8010108 <Save_Csv+0x308>
 80100be:	2303      	movs	r3, #3
 80100c0:	e0b3      	b.n	801022a <Save_Csv+0x42a>
 80100c2:	bf00      	nop
 80100c4:	20000558 	.word	0x20000558
 80100c8:	20002692 	.word	0x20002692
 80100cc:	2000268c 	.word	0x2000268c
 80100d0:	20002690 	.word	0x20002690
 80100d4:	2000053c 	.word	0x2000053c
 80100d8:	08000280 	.word	0x08000280
 80100dc:	20007aa8 	.word	0x20007aa8
 80100e0:	20000274 	.word	0x20000274
 80100e4:	200001ac 	.word	0x200001ac
 80100e8:	200012e0 	.word	0x200012e0
 80100ec:	08000278 	.word	0x08000278
 80100f0:	200012e5 	.word	0x200012e5
 80100f4:	200012e8 	.word	0x200012e8
 80100f8:	08001e44 	.word	0x08001e44
 80100fc:	08001d70 	.word	0x08001d70
 8010100:	0800027c 	.word	0x0800027c
 8010104:	200026a4 	.word	0x200026a4
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 8010108:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801010c:	b29a      	uxth	r2, r3
 801010e:	3201      	adds	r2, #1
 8010110:	b292      	uxth	r2, r2
 8010112:	867a      	strh	r2, [r7, #50]	; 0x32
 8010114:	105b      	asrs	r3, r3, #1
 8010116:	b21b      	sxth	r3, r3
 8010118:	b2db      	uxtb	r3, r3
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	b2db      	uxtb	r3, r3
 8010120:	461a      	mov	r2, r3
 8010122:	2102      	movs	r1, #2
 8010124:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010128:	f7fe ffae 	bl	800f088 <PrintClk>
      k = k - 4096;
 801012c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801012e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8010132:	b29b      	uxth	r3, r3
 8010134:	86bb      	strh	r3, [r7, #52]	; 0x34
      memcpy(&F_Buff[k], &F_Buff[k+4096], k);
 8010136:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801013a:	4a3e      	ldr	r2, [pc, #248]	; (8010234 <Save_Csv+0x434>)
 801013c:	1898      	adds	r0, r3, r2
 801013e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8010142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010146:	4a3b      	ldr	r2, [pc, #236]	; (8010234 <Save_Csv+0x434>)
 8010148:	4413      	add	r3, r2
 801014a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801014e:	4619      	mov	r1, r3
 8010150:	f016 f97e 	bl	8026450 <memcpy>
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++)
 8010154:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010158:	b29b      	uxth	r3, r3
 801015a:	3301      	adds	r3, #1
 801015c:	b29b      	uxth	r3, r3
 801015e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8010160:	4b35      	ldr	r3, [pc, #212]	; (8010238 <Save_Csv+0x438>)
 8010162:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010166:	461a      	mov	r2, r3
 8010168:	4b34      	ldr	r3, [pc, #208]	; (801023c <Save_Csv+0x43c>)
 801016a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801016e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8010172:	429a      	cmp	r2, r3
 8010174:	f6ff af04 	blt.w	800ff80 <Save_Csv+0x180>
    }
  }
  if(k != 0)
 8010178:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801017c:	2b00      	cmp	r3, #0
 801017e:	d03c      	beq.n	80101fa <Save_Csv+0x3fa>
  {
    F_Buff[k++]=0x0d;
 8010180:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010184:	b293      	uxth	r3, r2
 8010186:	3301      	adds	r3, #1
 8010188:	b29b      	uxth	r3, r3
 801018a:	86bb      	strh	r3, [r7, #52]	; 0x34
 801018c:	4b29      	ldr	r3, [pc, #164]	; (8010234 <Save_Csv+0x434>)
 801018e:	210d      	movs	r1, #13
 8010190:	5499      	strb	r1, [r3, r2]
    F_Buff[k++]=0x0a;
 8010192:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8010196:	b293      	uxth	r3, r2
 8010198:	3301      	adds	r3, #1
 801019a:	b29b      	uxth	r3, r3
 801019c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801019e:	4b25      	ldr	r3, [pc, #148]	; (8010234 <Save_Csv+0x434>)
 80101a0:	210a      	movs	r1, #10
 80101a2:	5499      	strb	r1, [r3, r2]
    memset(&F_Buff[k],32,(4096-k)); //32->�ո�
 80101a4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80101a8:	4a22      	ldr	r2, [pc, #136]	; (8010234 <Save_Csv+0x434>)
 80101aa:	1898      	adds	r0, r3, r2
 80101ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80101b0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80101b4:	461a      	mov	r2, r3
 80101b6:	2120      	movs	r1, #32
 80101b8:	f016 f958 	bl	802646c <memset>
    if(f_write( &USERFile, F_Buff, 4096, &j)!= FR_OK) return FILE_RW_ERR; // д������
 80101bc:	f107 0310 	add.w	r3, r7, #16
 80101c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80101c4:	491b      	ldr	r1, [pc, #108]	; (8010234 <Save_Csv+0x434>)
 80101c6:	481e      	ldr	r0, [pc, #120]	; (8010240 <Save_Csv+0x440>)
 80101c8:	f014 fce3 	bl	8024b92 <f_write>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <Save_Csv+0x3d6>
 80101d2:	2303      	movs	r3, #3
 80101d4:	e029      	b.n	801022a <Save_Csv+0x42a>
    PrintClk(264,2,(l++ >>1)& 3);                     // ����ָʾ
 80101d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80101da:	b29a      	uxth	r2, r3
 80101dc:	3201      	adds	r2, #1
 80101de:	b292      	uxth	r2, r2
 80101e0:	867a      	strh	r2, [r7, #50]	; 0x32
 80101e2:	105b      	asrs	r3, r3, #1
 80101e4:	b21b      	sxth	r3, r3
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	f003 0303 	and.w	r3, r3, #3
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	461a      	mov	r2, r3
 80101f0:	2102      	movs	r1, #2
 80101f2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80101f6:	f7fe ff47 	bl	800f088 <PrintClk>
  }
  if(f_close(&USERFile)!= FR_OK )
 80101fa:	4811      	ldr	r0, [pc, #68]	; (8010240 <Save_Csv+0x440>)
 80101fc:	f014 fe96 	bl	8024f2c <f_close>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d001      	beq.n	801020a <Save_Csv+0x40a>
	  return FILE_RW_ERR;
 8010206:	2303      	movs	r3, #3
 8010208:	e00f      	b.n	801022a <Save_Csv+0x42a>
  if(List[SAVE_CSV].Val<99)List[SAVE_CSV].Val++;
 801020a:	4b0b      	ldr	r3, [pc, #44]	; (8010238 <Save_Csv+0x438>)
 801020c:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010210:	2b62      	cmp	r3, #98	; 0x62
 8010212:	dc09      	bgt.n	8010228 <Save_Csv+0x428>
 8010214:	4b08      	ldr	r3, [pc, #32]	; (8010238 <Save_Csv+0x438>)
 8010216:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 801021a:	b29b      	uxth	r3, r3
 801021c:	3301      	adds	r3, #1
 801021e:	b29b      	uxth	r3, r3
 8010220:	b21a      	sxth	r2, r3
 8010222:	4b05      	ldr	r3, [pc, #20]	; (8010238 <Save_Csv+0x438>)
 8010224:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  return OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3738      	adds	r7, #56	; 0x38
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	200012e0 	.word	0x200012e0
 8010238:	20000274 	.word	0x20000274
 801023c:	0800230c 	.word	0x0800230c
 8010240:	20007aa8 	.word	0x20007aa8

08010244 <Save_Svg>:

/*******************************************************************************
Save_Svg: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Svg(short FileNo)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b092      	sub	sp, #72	; 0x48
 8010248:	af00      	add	r7, sp, #0
 801024a:	4603      	mov	r3, r0
 801024c:	80fb      	strh	r3, [r7, #6]
  char pFileName[13]="DATA   .SVG";
 801024e:	4ab8      	ldr	r2, [pc, #736]	; (8010530 <Save_Svg+0x2ec>)
 8010250:	f107 0320 	add.w	r3, r7, #32
 8010254:	ca07      	ldmia	r2, {r0, r1, r2}
 8010256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801025a:	2300      	movs	r3, #0
 801025c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  short pCluster[3];
  short track[4];
  int l = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	63bb      	str	r3, [r7, #56]	; 0x38
  short i,x, y;
  short temp;
  char  *str;
  short Posi1 = 0;
 8010264:	2300      	movs	r3, #0
 8010266:	86fb      	strh	r3, [r7, #54]	; 0x36
  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8010268:	4bb2      	ldr	r3, [pc, #712]	; (8010534 <Save_Svg+0x2f0>)
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	4bb2      	ldr	r3, [pc, #712]	; (8010538 <Save_Svg+0x2f4>)
 801026e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010272:	4619      	mov	r1, r3
 8010274:	4bb1      	ldr	r3, [pc, #708]	; (801053c <Save_Svg+0x2f8>)
 8010276:	f9b3 3000 	ldrsh.w	r3, [r3]
 801027a:	2b00      	cmp	r3, #0
 801027c:	bf14      	ite	ne
 801027e:	2301      	movne	r3, #1
 8010280:	2300      	moveq	r3, #0
 8010282:	b2db      	uxtb	r3, r3
 8010284:	440b      	add	r3, r1
 8010286:	005b      	lsls	r3, r3, #1
 8010288:	4413      	add	r3, r2
 801028a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	4aab      	ldr	r2, [pc, #684]	; (8010540 <Save_Svg+0x2fc>)
 8010292:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010296:	4611      	mov	r1, r2
 8010298:	4aaa      	ldr	r2, [pc, #680]	; (8010544 <Save_Svg+0x300>)
 801029a:	5c52      	ldrb	r2, [r2, r1]
 801029c:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a0:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned j;

  Svg_Cnt = 0;
 80102a2:	4ba9      	ldr	r3, [pc, #676]	; (8010548 <Save_Svg+0x304>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]
  Addr = 0, Length = 0;
 80102a8:	4ba8      	ldr	r3, [pc, #672]	; (801054c <Save_Svg+0x308>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	801a      	strh	r2, [r3, #0]
 80102ae:	4ba8      	ldr	r3, [pc, #672]	; (8010550 <Save_Svg+0x30c>)
 80102b0:	2200      	movs	r2, #0
 80102b2:	801a      	strh	r2, [r3, #0]
  str = (char*)&Data;
 80102b4:	4ba7      	ldr	r3, [pc, #668]	; (8010554 <Save_Svg+0x310>)
 80102b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  memset(Data,0,310);
 80102b8:	f44f 729b 	mov.w	r2, #310	; 0x136
 80102bc:	2100      	movs	r1, #0
 80102be:	48a5      	ldr	r0, [pc, #660]	; (8010554 <Save_Svg+0x310>)
 80102c0:	f016 f8d4 	bl	802646c <memset>
  memset(F_Buff,0,4096);
 80102c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80102c8:	2100      	movs	r1, #0
 80102ca:	48a3      	ldr	r0, [pc, #652]	; (8010558 <Save_Svg+0x314>)
 80102cc:	f016 f8ce 	bl	802646c <memset>
  Make_Filename(FileNo, pFileName);
 80102d0:	f107 0220 	add.w	r2, r7, #32
 80102d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff f88c 	bl	800f3f8 <Make_Filename>
  if(f_open(&USERFile, pFileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ)!=FR_OK)
 80102e0:	f107 0320 	add.w	r3, r7, #32
 80102e4:	2213      	movs	r2, #19
 80102e6:	4619      	mov	r1, r3
 80102e8:	489c      	ldr	r0, [pc, #624]	; (801055c <Save_Svg+0x318>)
 80102ea:	f014 f97d 	bl	80245e8 <f_open>
 80102ee:	4603      	mov	r3, r0
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d001      	beq.n	80102f8 <Save_Svg+0xb4>
	  return DISK_RW_ERR;
 80102f4:	2304      	movs	r3, #4
 80102f6:	e3d9      	b.n	8010aac <Save_Svg+0x868>
  //SVG �ĵ���ĳЩ��������SVG ,ָ���ⲿ��DTD
  str = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
 80102f8:	4b99      	ldr	r3, [pc, #612]	; (8010560 <Save_Svg+0x31c>)
 80102fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80102fc:	f107 0318 	add.w	r3, r7, #24
 8010300:	4619      	mov	r1, r3
 8010302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010304:	f7fe ffde 	bl	800f2c4 <WriteStr>
  str = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n";
 8010308:	4b96      	ldr	r3, [pc, #600]	; (8010564 <Save_Svg+0x320>)
 801030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801030c:	f107 0318 	add.w	r3, r7, #24
 8010310:	4619      	mov	r1, r3
 8010312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010314:	f7fe ffd6 	bl	800f2c4 <WriteStr>
  str = "<svg width=\"";
 8010318:	4b93      	ldr	r3, [pc, #588]	; (8010568 <Save_Svg+0x324>)
 801031a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801031c:	f107 0318 	add.w	r3, r7, #24
 8010320:	4619      	mov	r1, r3
 8010322:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010324:	f7fe ffce 	bl	800f2c4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010328:	4b90      	ldr	r3, [pc, #576]	; (801056c <Save_Svg+0x328>)
 801032a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801032e:	461a      	mov	r2, r3
 8010330:	4b8f      	ldr	r3, [pc, #572]	; (8010570 <Save_Svg+0x32c>)
 8010332:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010336:	f107 0218 	add.w	r2, r7, #24
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f7fe ff19 	bl	800f174 <WriteVar>
  str = "\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" onload=\"init(evt)\" onmousemove=\"msMove(evt)\">\n";
 8010342:	4b8c      	ldr	r3, [pc, #560]	; (8010574 <Save_Svg+0x330>)
 8010344:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010346:	f107 0318 	add.w	r3, r7, #24
 801034a:	4619      	mov	r1, r3
 801034c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801034e:	f7fe ffb9 	bl	800f2c4 <WriteStr>

  //�������С��ɫ
  str = "<path stroke=\"none\" fill=\"black\" d=\"M0,0 H";
 8010352:	4b89      	ldr	r3, [pc, #548]	; (8010578 <Save_Svg+0x334>)
 8010354:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010356:	f107 0318 	add.w	r3, r7, #24
 801035a:	4619      	mov	r1, r3
 801035c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801035e:	f7fe ffb1 	bl	800f2c4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010362:	4b82      	ldr	r3, [pc, #520]	; (801056c <Save_Svg+0x328>)
 8010364:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010368:	461a      	mov	r2, r3
 801036a:	4b81      	ldr	r3, [pc, #516]	; (8010570 <Save_Svg+0x32c>)
 801036c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010370:	f107 0218 	add.w	r2, r7, #24
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fefc 	bl	800f174 <WriteVar>
  str = " V200 H0 V0\"/>\n";
 801037c:	4b7f      	ldr	r3, [pc, #508]	; (801057c <Save_Svg+0x338>)
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010380:	f107 0318 	add.w	r3, r7, #24
 8010384:	4619      	mov	r1, r3
 8010386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010388:	f7fe ff9c 	bl	800f2c4 <WriteStr>
  //��ǰ���ڱ���
  str = "<path stroke=\"none\" fill=\"#400040\" d=\"M";  //��ɫ
 801038c:	4b7c      	ldr	r3, [pc, #496]	; (8010580 <Save_Svg+0x33c>)
 801038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010390:	f107 0318 	add.w	r3, r7, #24
 8010394:	4619      	mov	r1, r3
 8010396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010398:	f7fe ff94 	bl	800f2c4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 801039c:	4b73      	ldr	r3, [pc, #460]	; (801056c <Save_Svg+0x328>)
 801039e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103a2:	f107 0218 	add.w	r2, r7, #24
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fee3 	bl	800f174 <WriteVar>
  str = ",0 H";
 80103ae:	4b75      	ldr	r3, [pc, #468]	; (8010584 <Save_Svg+0x340>)
 80103b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103b2:	f107 0318 	add.w	r3, r7, #24
 80103b6:	4619      	mov	r1, r3
 80103b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103ba:	f7fe ff83 	bl	800f2c4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 80103be:	4b6b      	ldr	r3, [pc, #428]	; (801056c <Save_Svg+0x328>)
 80103c0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103c4:	f107 0218 	add.w	r2, r7, #24
 80103c8:	4611      	mov	r1, r2
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fe fed2 	bl	800f174 <WriteVar>
  str = " V200 H";
 80103d0:	4b6d      	ldr	r3, [pc, #436]	; (8010588 <Save_Svg+0x344>)
 80103d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80103d4:	f107 0318 	add.w	r3, r7, #24
 80103d8:	4619      	mov	r1, r3
 80103da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103dc:	f7fe ff72 	bl	800f2c4 <WriteStr>
  WriteVar(List[VIEWPOSI].Val+300, pCluster);
 80103e0:	4b62      	ldr	r3, [pc, #392]	; (801056c <Save_Svg+0x328>)
 80103e2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	b21b      	sxth	r3, r3
 80103f0:	f107 0218 	add.w	r2, r7, #24
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fe febc 	bl	800f174 <WriteVar>
  str = "  V0\"/>\n";
 80103fc:	4b63      	ldr	r3, [pc, #396]	; (801058c <Save_Svg+0x348>)
 80103fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010400:	f107 0318 	add.w	r3, r7, #24
 8010404:	4619      	mov	r1, r3
 8010406:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010408:	f7fe ff5c 	bl	800f2c4 <WriteStr>
  //��������
 for (y=0; y<=200; y+=25){
 801040c:	2300      	movs	r3, #0
 801040e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010412:	e032      	b.n	801047a <Save_Svg+0x236>
    //<path stroke="#404040" d="M0,0 H4096"/>
    str = "<path stroke=\"#404040\" d=\"M0,";
 8010414:	4b5e      	ldr	r3, [pc, #376]	; (8010590 <Save_Svg+0x34c>)
 8010416:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010418:	f107 0318 	add.w	r3, r7, #24
 801041c:	4619      	mov	r1, r3
 801041e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010420:	f7fe ff50 	bl	800f2c4 <WriteStr>
    WriteVar(y, pCluster);
 8010424:	f107 0218 	add.w	r2, r7, #24
 8010428:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801042c:	4611      	mov	r1, r2
 801042e:	4618      	mov	r0, r3
 8010430:	f7fe fea0 	bl	800f174 <WriteVar>
    str = " H";
 8010434:	4b57      	ldr	r3, [pc, #348]	; (8010594 <Save_Svg+0x350>)
 8010436:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010438:	f107 0318 	add.w	r3, r7, #24
 801043c:	4619      	mov	r1, r3
 801043e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010440:	f7fe ff40 	bl	800f2c4 <WriteStr>
    WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010444:	4b49      	ldr	r3, [pc, #292]	; (801056c <Save_Svg+0x328>)
 8010446:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801044a:	461a      	mov	r2, r3
 801044c:	4b48      	ldr	r3, [pc, #288]	; (8010570 <Save_Svg+0x32c>)
 801044e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010452:	f107 0218 	add.w	r2, r7, #24
 8010456:	4611      	mov	r1, r2
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe fe8b 	bl	800f174 <WriteVar>
    str = "\"/>\n";
 801045e:	4b4e      	ldr	r3, [pc, #312]	; (8010598 <Save_Svg+0x354>)
 8010460:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010462:	f107 0318 	add.w	r3, r7, #24
 8010466:	4619      	mov	r1, r3
 8010468:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801046a:	f7fe ff2b 	bl	800f2c4 <WriteStr>
 for (y=0; y<=200; y+=25){
 801046e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010472:	3319      	adds	r3, #25
 8010474:	b29b      	uxth	r3, r3
 8010476:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801047a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801047e:	2bc8      	cmp	r3, #200	; 0xc8
 8010480:	ddc8      	ble.n	8010414 <Save_Svg+0x1d0>
  }
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 8010482:	2300      	movs	r3, #0
 8010484:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010488:	e01d      	b.n	80104c6 <Save_Svg+0x282>
  {
    //<path stroke="#404040" d="M0,0 V256"/>
    str = "<path stroke=\"#404040\" d=\"M";
 801048a:	4b44      	ldr	r3, [pc, #272]	; (801059c <Save_Svg+0x358>)
 801048c:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 801048e:	f107 0318 	add.w	r3, r7, #24
 8010492:	4619      	mov	r1, r3
 8010494:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010496:	f7fe ff15 	bl	800f2c4 <WriteStr>
    WriteVar(x, pCluster);
 801049a:	f107 0218 	add.w	r2, r7, #24
 801049e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fe fe65 	bl	800f174 <WriteVar>
    str = ",0 V200\"/>\n";
 80104aa:	4b3d      	ldr	r3, [pc, #244]	; (80105a0 <Save_Svg+0x35c>)
 80104ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80104ae:	f107 0318 	add.w	r3, r7, #24
 80104b2:	4619      	mov	r1, r3
 80104b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104b6:	f7fe ff05 	bl	800f2c4 <WriteStr>
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25)
 80104ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80104be:	3319      	adds	r3, #25
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80104c6:	4b29      	ldr	r3, [pc, #164]	; (801056c <Save_Svg+0x328>)
 80104c8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80104cc:	461a      	mov	r2, r3
 80104ce:	4b28      	ldr	r3, [pc, #160]	; (8010570 <Save_Svg+0x32c>)
 80104d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80104d4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80104d8:	429a      	cmp	r2, r3
 80104da:	ddd6      	ble.n	801048a <Save_Svg+0x246>
  }
  //ͨ��A����
  str = "<path stroke=\"cyan\" fill=\"none\" stroke-width=\"1\" d=\"";
 80104dc:	4b31      	ldr	r3, [pc, #196]	; (80105a4 <Save_Svg+0x360>)
 80104de:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80104e0:	f107 0318 	add.w	r3, r7, #24
 80104e4:	4619      	mov	r1, r3
 80104e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104e8:	f7fe feec 	bl	800f2c4 <WriteStr>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 80104ec:	2300      	movs	r3, #0
 80104ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80104f2:	e093      	b.n	801061c <Save_Svg+0x3d8>
  {
      temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 80104f4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80104f8:	3302      	adds	r3, #2
 80104fa:	4a2b      	ldr	r2, [pc, #172]	; (80105a8 <Save_Svg+0x364>)
 80104fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010500:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010506:	fb02 f303 	mul.w	r3, r2, r3
 801050a:	131b      	asrs	r3, r3, #12
 801050c:	b29b      	uxth	r3, r3
 801050e:	3364      	adds	r3, #100	; 0x64
 8010510:	b29b      	uxth	r3, r3
 8010512:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(temp > 0)
 8010514:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010518:	2b00      	cmp	r3, #0
 801051a:	dd47      	ble.n	80105ac <Save_Svg+0x368>
    {
      if(temp > 200)  track[0] = 199;
 801051c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010520:	2bc8      	cmp	r3, #200	; 0xc8
 8010522:	dd02      	ble.n	801052a <Save_Svg+0x2e6>
 8010524:	23c7      	movs	r3, #199	; 0xc7
 8010526:	823b      	strh	r3, [r7, #16]
 8010528:	e042      	b.n	80105b0 <Save_Svg+0x36c>
      else            track[0] = temp;
 801052a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801052c:	823b      	strh	r3, [r7, #16]
 801052e:	e03f      	b.n	80105b0 <Save_Svg+0x36c>
 8010530:	0800098c 	.word	0x0800098c
 8010534:	20000558 	.word	0x20000558
 8010538:	20002692 	.word	0x20002692
 801053c:	2000268c 	.word	0x2000268c
 8010540:	20002690 	.word	0x20002690
 8010544:	2000053c 	.word	0x2000053c
 8010548:	20002520 	.word	0x20002520
 801054c:	2000251c 	.word	0x2000251c
 8010550:	2000251e 	.word	0x2000251e
 8010554:	20000008 	.word	0x20000008
 8010558:	200012e0 	.word	0x200012e0
 801055c:	20007aa8 	.word	0x20007aa8
 8010560:	08000290 	.word	0x08000290
 8010564:	080002c0 	.word	0x080002c0
 8010568:	0800032c 	.word	0x0800032c
 801056c:	20000274 	.word	0x20000274
 8010570:	0800230c 	.word	0x0800230c
 8010574:	0800033c 	.word	0x0800033c
 8010578:	080003c8 	.word	0x080003c8
 801057c:	080003f4 	.word	0x080003f4
 8010580:	08000404 	.word	0x08000404
 8010584:	0800042c 	.word	0x0800042c
 8010588:	08000434 	.word	0x08000434
 801058c:	0800043c 	.word	0x0800043c
 8010590:	08000448 	.word	0x08000448
 8010594:	08000468 	.word	0x08000468
 8010598:	0800046c 	.word	0x0800046c
 801059c:	08000474 	.word	0x08000474
 80105a0:	08000490 	.word	0x08000490
 80105a4:	0800049c 	.word	0x0800049c
 80105a8:	200026a4 	.word	0x200026a4
    } else            track[0] = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	823b      	strh	r3, [r7, #16]
    track[0] =  200- track[0];
 80105b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	b21b      	sxth	r3, r3
 80105be:	823b      	strh	r3, [r7, #16]
    if(i==0)str = "M";
 80105c0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <Save_Svg+0x38a>
 80105c8:	4b3b      	ldr	r3, [pc, #236]	; (80106b8 <Save_Svg+0x474>)
 80105ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105cc:	e001      	b.n	80105d2 <Save_Svg+0x38e>
    else    str = " L";
 80105ce:	4b3b      	ldr	r3, [pc, #236]	; (80106bc <Save_Svg+0x478>)
 80105d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105d2:	f107 0318 	add.w	r3, r7, #24
 80105d6:	4619      	mov	r1, r3
 80105d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105da:	f7fe fe73 	bl	800f2c4 <WriteStr>
    WriteVar(i, pCluster);
 80105de:	f107 0218 	add.w	r2, r7, #24
 80105e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80105e6:	4611      	mov	r1, r2
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe fdc3 	bl	800f174 <WriteVar>
    str = ",";
 80105ee:	4b34      	ldr	r3, [pc, #208]	; (80106c0 <Save_Svg+0x47c>)
 80105f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 80105f2:	f107 0318 	add.w	r3, r7, #24
 80105f6:	4619      	mov	r1, r3
 80105f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80105fa:	f7fe fe63 	bl	800f2c4 <WriteStr>
    WriteVar(track[0], pCluster);
 80105fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010602:	f107 0218 	add.w	r2, r7, #24
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7fe fdb3 	bl	800f174 <WriteVar>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++)
 801060e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010612:	b29b      	uxth	r3, r3
 8010614:	3301      	adds	r3, #1
 8010616:	b29b      	uxth	r3, r3
 8010618:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801061c:	4b29      	ldr	r3, [pc, #164]	; (80106c4 <Save_Svg+0x480>)
 801061e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010622:	461a      	mov	r2, r3
 8010624:	4b28      	ldr	r3, [pc, #160]	; (80106c8 <Save_Svg+0x484>)
 8010626:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801062a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 801062e:	429a      	cmp	r2, r3
 8010630:	f77f af60 	ble.w	80104f4 <Save_Svg+0x2b0>
  }
  str = "\"/>\n";
 8010634:	4b25      	ldr	r3, [pc, #148]	; (80106cc <Save_Svg+0x488>)
 8010636:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010638:	f107 0318 	add.w	r3, r7, #24
 801063c:	4619      	mov	r1, r3
 801063e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010640:	f7fe fe40 	bl	800f2c4 <WriteStr>

  //�Ҷ˵�λ��ʱ������
  str = "<text font-family=\"Arial\" x=\"638\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"end\" id=\"CH1s\">CH1: ";
 8010644:	4b22      	ldr	r3, [pc, #136]	; (80106d0 <Save_Svg+0x48c>)
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010648:	f107 0318 	add.w	r3, r7, #24
 801064c:	4619      	mov	r1, r3
 801064e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010650:	f7fe fe38 	bl	800f2c4 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)Vol_10X[List[Y_RANGES].Val];
 8010654:	4b1b      	ldr	r3, [pc, #108]	; (80106c4 <Save_Svg+0x480>)
 8010656:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d007      	beq.n	801066e <Save_Svg+0x42a>
 801065e:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <Save_Svg+0x480>)
 8010660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010664:	00db      	lsls	r3, r3, #3
 8010666:	4a1b      	ldr	r2, [pc, #108]	; (80106d4 <Save_Svg+0x490>)
 8010668:	4413      	add	r3, r2
 801066a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801066c:	e006      	b.n	801067c <Save_Svg+0x438>
  else                         str = (char*)Vol_Str[List[Y_RANGES].Val];
 801066e:	4b15      	ldr	r3, [pc, #84]	; (80106c4 <Save_Svg+0x480>)
 8010670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010674:	00db      	lsls	r3, r3, #3
 8010676:	4a18      	ldr	r2, [pc, #96]	; (80106d8 <Save_Svg+0x494>)
 8010678:	4413      	add	r3, r2
 801067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801067c:	f107 0318 	add.w	r3, r7, #24
 8010680:	4619      	mov	r1, r3
 8010682:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010684:	f7fe fe1e 	bl	800f2c4 <WriteStr>
  str = "/div ";
 8010688:	4b14      	ldr	r3, [pc, #80]	; (80106dc <Save_Svg+0x498>)
 801068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801068c:	f107 0318 	add.w	r3, r7, #24
 8010690:	4619      	mov	r1, r3
 8010692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010694:	f7fe fe16 	bl	800f2c4 <WriteStr>
  str = "(";
 8010698:	4b11      	ldr	r3, [pc, #68]	; (80106e0 <Save_Svg+0x49c>)
 801069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801069c:	f107 0318 	add.w	r3, r7, #24
 80106a0:	4619      	mov	r1, r3
 80106a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106a4:	f7fe fe0e 	bl	800f2c4 <WriteStr>
  if(List[PROBEATT].Val)str = "X10";        //X10
 80106a8:	4b06      	ldr	r3, [pc, #24]	; (80106c4 <Save_Svg+0x480>)
 80106aa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d01a      	beq.n	80106e8 <Save_Svg+0x4a4>
 80106b2:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <Save_Svg+0x4a0>)
 80106b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b6:	e019      	b.n	80106ec <Save_Svg+0x4a8>
 80106b8:	080004d4 	.word	0x080004d4
 80106bc:	080004d8 	.word	0x080004d8
 80106c0:	080004dc 	.word	0x080004dc
 80106c4:	20000274 	.word	0x20000274
 80106c8:	0800230c 	.word	0x0800230c
 80106cc:	0800046c 	.word	0x0800046c
 80106d0:	080004e0 	.word	0x080004e0
 80106d4:	08001a98 	.word	0x08001a98
 80106d8:	08001a48 	.word	0x08001a48
 80106dc:	08000548 	.word	0x08000548
 80106e0:	08000550 	.word	0x08000550
 80106e4:	08000554 	.word	0x08000554
  else                         str = "X1";  //X1
 80106e8:	4bb3      	ldr	r3, [pc, #716]	; (80109b8 <Save_Svg+0x774>)
 80106ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106ec:	f107 0318 	add.w	r3, r7, #24
 80106f0:	4619      	mov	r1, r3
 80106f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80106f4:	f7fe fde6 	bl	800f2c4 <WriteStr>
  str = ") ";
 80106f8:	4bb0      	ldr	r3, [pc, #704]	; (80109bc <Save_Svg+0x778>)
 80106fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80106fc:	f107 0318 	add.w	r3, r7, #24
 8010700:	4619      	mov	r1, r3
 8010702:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010704:	f7fe fdde 	bl	800f2c4 <WriteStr>
  str = (char*)TimeBase_Str[List[TIM_BASE].Val]; //Timebase
 8010708:	4bad      	ldr	r3, [pc, #692]	; (80109c0 <Save_Svg+0x77c>)
 801070a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801070e:	00db      	lsls	r3, r3, #3
 8010710:	4aac      	ldr	r2, [pc, #688]	; (80109c4 <Save_Svg+0x780>)
 8010712:	4413      	add	r3, r2
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010716:	f107 0318 	add.w	r3, r7, #24
 801071a:	4619      	mov	r1, r3
 801071c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801071e:	f7fe fdd1 	bl	800f2c4 <WriteStr>
  str = "/div</text>\n";
 8010722:	4ba9      	ldr	r3, [pc, #676]	; (80109c8 <Save_Svg+0x784>)
 8010724:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010726:	f107 0318 	add.w	r3, r7, #24
 801072a:	4619      	mov	r1, r3
 801072c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801072e:	f7fe fdc9 	bl	800f2c4 <WriteStr>
  str = "<text font-family=\"Arial\" x=\"2\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"start\" id=\"CH1\"> </text>\n";
 8010732:	4ba6      	ldr	r3, [pc, #664]	; (80109cc <Save_Svg+0x788>)
 8010734:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010736:	f107 0318 	add.w	r3, r7, #24
 801073a:	4619      	mov	r1, r3
 801073c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801073e:	f7fe fdc1 	bl	800f2c4 <WriteStr>
 //===============================
  //����
  Posi1 = 199-List[V0_POSI].Val;
 8010742:	4b9f      	ldr	r3, [pc, #636]	; (80109c0 <Save_Svg+0x77c>)
 8010744:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010748:	b29b      	uxth	r3, r3
 801074a:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 801074e:	b29b      	uxth	r3, r3
 8010750:	86fb      	strh	r3, [r7, #54]	; 0x36
  //===============================
  str = "<script type=\"text/ecmascript\"><![CDATA[\n";
 8010752:	4b9f      	ldr	r3, [pc, #636]	; (80109d0 <Save_Svg+0x78c>)
 8010754:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010756:	f107 0318 	add.w	r3, r7, #24
 801075a:	4619      	mov	r1, r3
 801075c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801075e:	f7fe fdb1 	bl	800f2c4 <WriteStr>
  str = "function init(evt) { if ( window.svgDocument == null ) svgDocument = evt.target.ownerDocument; }\n";
 8010762:	4b9c      	ldr	r3, [pc, #624]	; (80109d4 <Save_Svg+0x790>)
 8010764:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010766:	f107 0318 	add.w	r3, r7, #24
 801076a:	4619      	mov	r1, r3
 801076c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801076e:	f7fe fda9 	bl	800f2c4 <WriteStr>
  str = "function fmtT(val, div) {\n";
 8010772:	4b99      	ldr	r3, [pc, #612]	; (80109d8 <Save_Svg+0x794>)
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010776:	f107 0318 	add.w	r3, r7, #24
 801077a:	4619      	mov	r1, r3
 801077c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801077e:	f7fe fda1 	bl	800f2c4 <WriteStr>
  str = "if (div > 10000) return Math.floor(val*div/25/1000) + \" ms\";\n";
 8010782:	4b96      	ldr	r3, [pc, #600]	; (80109dc <Save_Svg+0x798>)
 8010784:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010786:	f107 0318 	add.w	r3, r7, #24
 801078a:	4619      	mov	r1, r3
 801078c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801078e:	f7fe fd99 	bl	800f2c4 <WriteStr>
  str = "if (div > 250) return Math.floor(val*div/25)/1000 + \" ms\";\n";
 8010792:	4b93      	ldr	r3, [pc, #588]	; (80109e0 <Save_Svg+0x79c>)
 8010794:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010796:	f107 0318 	add.w	r3, r7, #24
 801079a:	4619      	mov	r1, r3
 801079c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801079e:	f7fe fd91 	bl	800f2c4 <WriteStr>
  str = "return Math.floor(val*div*1000/25)/1000 + \" us\";\n";
 80107a2:	4b90      	ldr	r3, [pc, #576]	; (80109e4 <Save_Svg+0x7a0>)
 80107a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107a6:	f107 0318 	add.w	r3, r7, #24
 80107aa:	4619      	mov	r1, r3
 80107ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107ae:	f7fe fd89 	bl	800f2c4 <WriteStr>
  str = "}\n";
 80107b2:	4b8d      	ldr	r3, [pc, #564]	; (80109e8 <Save_Svg+0x7a4>)
 80107b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107b6:	f107 0318 	add.w	r3, r7, #24
 80107ba:	4619      	mov	r1, r3
 80107bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107be:	f7fe fd81 	bl	800f2c4 <WriteStr>
  str = "function fmtU(val, div, shift) { return Math.floor((shift-val)*div/25) + \" mV\"; }\n";
 80107c2:	4b8a      	ldr	r3, [pc, #552]	; (80109ec <Save_Svg+0x7a8>)
 80107c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107c6:	f107 0318 	add.w	r3, r7, #24
 80107ca:	4619      	mov	r1, r3
 80107cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107ce:	f7fe fd79 	bl	800f2c4 <WriteStr>
  str = "function msMove (evt)\n";
 80107d2:	4b87      	ldr	r3, [pc, #540]	; (80109f0 <Save_Svg+0x7ac>)
 80107d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107d6:	f107 0318 	add.w	r3, r7, #24
 80107da:	4619      	mov	r1, r3
 80107dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107de:	f7fe fd71 	bl	800f2c4 <WriteStr>
  str = "{\n";
 80107e2:	4b84      	ldr	r3, [pc, #528]	; (80109f4 <Save_Svg+0x7b0>)
 80107e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107e6:	f107 0318 	add.w	r3, r7, #24
 80107ea:	4619      	mov	r1, r3
 80107ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107ee:	f7fe fd69 	bl	800f2c4 <WriteStr>
  str = "var x = evt.pageX;\n";
 80107f2:	4b81      	ldr	r3, [pc, #516]	; (80109f8 <Save_Svg+0x7b4>)
 80107f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80107f6:	f107 0318 	add.w	r3, r7, #24
 80107fa:	4619      	mov	r1, r3
 80107fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107fe:	f7fe fd61 	bl	800f2c4 <WriteStr>
  str = "var y = evt.clientY;\n";
 8010802:	4b7e      	ldr	r3, [pc, #504]	; (80109fc <Save_Svg+0x7b8>)
 8010804:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010806:	f107 0318 	add.w	r3, r7, #24
 801080a:	4619      	mov	r1, r3
 801080c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801080e:	f7fe fd59 	bl	800f2c4 <WriteStr>
  str = "if (x < 0 || y < 0 || x >= ";
 8010812:	4b7b      	ldr	r3, [pc, #492]	; (8010a00 <Save_Svg+0x7bc>)
 8010814:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010816:	f107 0318 	add.w	r3, r7, #24
 801081a:	4619      	mov	r1, r3
 801081c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801081e:	f7fe fd51 	bl	800f2c4 <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010822:	4b67      	ldr	r3, [pc, #412]	; (80109c0 <Save_Svg+0x77c>)
 8010824:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010828:	461a      	mov	r2, r3
 801082a:	4b76      	ldr	r3, [pc, #472]	; (8010a04 <Save_Svg+0x7c0>)
 801082c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010830:	f107 0218 	add.w	r2, r7, #24
 8010834:	4611      	mov	r1, r2
 8010836:	4618      	mov	r0, r3
 8010838:	f7fe fc9c 	bl	800f174 <WriteVar>
  str = "|| y >= 200)\n";
 801083c:	4b72      	ldr	r3, [pc, #456]	; (8010a08 <Save_Svg+0x7c4>)
 801083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010840:	f107 0318 	add.w	r3, r7, #24
 8010844:	4619      	mov	r1, r3
 8010846:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010848:	f7fe fd3c 	bl	800f2c4 <WriteStr>
  str = "return;\n";
 801084c:	4b6f      	ldr	r3, [pc, #444]	; (8010a0c <Save_Svg+0x7c8>)
 801084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010850:	f107 0318 	add.w	r3, r7, #24
 8010854:	4619      	mov	r1, r3
 8010856:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010858:	f7fe fd34 	bl	800f2c4 <WriteStr>
  str = "var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);\n";
 801085c:	4b6c      	ldr	r3, [pc, #432]	; (8010a10 <Save_Svg+0x7cc>)
 801085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010860:	f107 0318 	add.w	r3, r7, #24
 8010864:	4619      	mov	r1, r3
 8010866:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010868:	f7fe fd2c 	bl	800f2c4 <WriteStr>
  str = "var width = window.innerWidth;\n";
 801086c:	4b69      	ldr	r3, [pc, #420]	; (8010a14 <Save_Svg+0x7d0>)
 801086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010870:	f107 0318 	add.w	r3, r7, #24
 8010874:	4619      	mov	r1, r3
 8010876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010878:	f7fe fd24 	bl	800f2c4 <WriteStr>
  str = "\n";
 801087c:	4b66      	ldr	r3, [pc, #408]	; (8010a18 <Save_Svg+0x7d4>)
 801087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010880:	f107 0318 	add.w	r3, r7, #24
 8010884:	4619      	mov	r1, r3
 8010886:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010888:	f7fe fd1c 	bl	800f2c4 <WriteStr>
  str = "svgDocument.getElementById(\"CH1\").setAttribute(\"x\", hscroll+20);\n";
 801088c:	4b63      	ldr	r3, [pc, #396]	; (8010a1c <Save_Svg+0x7d8>)
 801088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010890:	f107 0318 	add.w	r3, r7, #24
 8010894:	4619      	mov	r1, r3
 8010896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010898:	f7fe fd14 	bl	800f2c4 <WriteStr>
  str = "svgDocument.getElementById(\"CH1s\").setAttribute(\"x\", hscroll+width-20);\n";
 801089c:	4b60      	ldr	r3, [pc, #384]	; (8010a20 <Save_Svg+0x7dc>)
 801089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108a0:	f107 0318 	add.w	r3, r7, #24
 80108a4:	4619      	mov	r1, r3
 80108a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108a8:	f7fe fd0c 	bl	800f2c4 <WriteStr>
  str = "\n";
 80108ac:	4b5a      	ldr	r3, [pc, #360]	; (8010a18 <Save_Svg+0x7d4>)
 80108ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108b0:	f107 0318 	add.w	r3, r7, #24
 80108b4:	4619      	mov	r1, r3
 80108b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108b8:	f7fe fd04 	bl	800f2c4 <WriteStr>
  //==============================
  str = "svgDocument.getElementById(\"CH1\").firstChild.data = \"CH1: \"+fmtU(y, ";
 80108bc:	4b59      	ldr	r3, [pc, #356]	; (8010a24 <Save_Svg+0x7e0>)
 80108be:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80108c0:	f107 0318 	add.w	r3, r7, #24
 80108c4:	4619      	mov	r1, r3
 80108c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108c8:	f7fe fcfc 	bl	800f2c4 <WriteStr>
  if(List[PROBEATT].Val)str = (char*)VScale_Str_10X[List[Y_RANGES].Val];
 80108cc:	4b3c      	ldr	r3, [pc, #240]	; (80109c0 <Save_Svg+0x77c>)
 80108ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00b      	beq.n	80108ee <Save_Svg+0x6aa>
 80108d6:	4b3a      	ldr	r3, [pc, #232]	; (80109c0 <Save_Svg+0x77c>)
 80108d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108dc:	461a      	mov	r2, r3
 80108de:	4613      	mov	r3, r2
 80108e0:	005b      	lsls	r3, r3, #1
 80108e2:	4413      	add	r3, r2
 80108e4:	005b      	lsls	r3, r3, #1
 80108e6:	4a50      	ldr	r2, [pc, #320]	; (8010a28 <Save_Svg+0x7e4>)
 80108e8:	4413      	add	r3, r2
 80108ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ec:	e00a      	b.n	8010904 <Save_Svg+0x6c0>
  else str = (char*)VScale_Str[List[Y_RANGES].Val];
 80108ee:	4b34      	ldr	r3, [pc, #208]	; (80109c0 <Save_Svg+0x77c>)
 80108f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108f4:	461a      	mov	r2, r3
 80108f6:	4613      	mov	r3, r2
 80108f8:	005b      	lsls	r3, r3, #1
 80108fa:	4413      	add	r3, r2
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	4a4b      	ldr	r2, [pc, #300]	; (8010a2c <Save_Svg+0x7e8>)
 8010900:	4413      	add	r3, r2
 8010902:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010904:	f107 0318 	add.w	r3, r7, #24
 8010908:	4619      	mov	r1, r3
 801090a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801090c:	f7fe fcda 	bl	800f2c4 <WriteStr>
  str = ", ";
 8010910:	4b47      	ldr	r3, [pc, #284]	; (8010a30 <Save_Svg+0x7ec>)
 8010912:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010914:	f107 0318 	add.w	r3, r7, #24
 8010918:	4619      	mov	r1, r3
 801091a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801091c:	f7fe fcd2 	bl	800f2c4 <WriteStr>
  WriteVar((short)Posi1, pCluster);
 8010920:	f107 0218 	add.w	r2, r7, #24
 8010924:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8010928:	4611      	mov	r1, r2
 801092a:	4618      	mov	r0, r3
 801092c:	f7fe fc22 	bl	800f174 <WriteVar>
  str = ") + \" \" + fmtT(x, ";
 8010930:	4b40      	ldr	r3, [pc, #256]	; (8010a34 <Save_Svg+0x7f0>)
 8010932:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010934:	f107 0318 	add.w	r3, r7, #24
 8010938:	4619      	mov	r1, r3
 801093a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801093c:	f7fe fcc2 	bl	800f2c4 <WriteStr>
  str = (char*)TScale_Str[List[TIM_BASE].Val]; //Timebase
 8010940:	4b1f      	ldr	r3, [pc, #124]	; (80109c0 <Save_Svg+0x77c>)
 8010942:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	4a3b      	ldr	r2, [pc, #236]	; (8010a38 <Save_Svg+0x7f4>)
 801094a:	4413      	add	r3, r2
 801094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801094e:	f107 0318 	add.w	r3, r7, #24
 8010952:	4619      	mov	r1, r3
 8010954:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010956:	f7fe fcb5 	bl	800f2c4 <WriteStr>
  str = ");\n";
 801095a:	4b38      	ldr	r3, [pc, #224]	; (8010a3c <Save_Svg+0x7f8>)
 801095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801095e:	f107 0318 	add.w	r3, r7, #24
 8010962:	4619      	mov	r1, r3
 8010964:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010966:	f7fe fcad 	bl	800f2c4 <WriteStr>

  //==============================
  str = "}\n";
 801096a:	4b1f      	ldr	r3, [pc, #124]	; (80109e8 <Save_Svg+0x7a4>)
 801096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801096e:	f107 0318 	add.w	r3, r7, #24
 8010972:	4619      	mov	r1, r3
 8010974:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010976:	f7fe fca5 	bl	800f2c4 <WriteStr>
  str = "]]></script>\n";
 801097a:	4b31      	ldr	r3, [pc, #196]	; (8010a40 <Save_Svg+0x7fc>)
 801097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801097e:	f107 0318 	add.w	r3, r7, #24
 8010982:	4619      	mov	r1, r3
 8010984:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010986:	f7fe fc9d 	bl	800f2c4 <WriteStr>
  str = "</svg>\n";
 801098a:	4b2e      	ldr	r3, [pc, #184]	; (8010a44 <Save_Svg+0x800>)
 801098c:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801098e:	f107 0318 	add.w	r3, r7, #24
 8010992:	4619      	mov	r1, r3
 8010994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010996:	f7fe fc95 	bl	800f2c4 <WriteStr>
  if(f_write( &USERFile, F_Buff, Length, &j)!= FR_OK) return FILE_RW_ERR; // д������
 801099a:	4b2b      	ldr	r3, [pc, #172]	; (8010a48 <Save_Svg+0x804>)
 801099c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109a0:	461a      	mov	r2, r3
 80109a2:	f107 030c 	add.w	r3, r7, #12
 80109a6:	4929      	ldr	r1, [pc, #164]	; (8010a4c <Save_Svg+0x808>)
 80109a8:	4829      	ldr	r0, [pc, #164]	; (8010a50 <Save_Svg+0x80c>)
 80109aa:	f014 f8f2 	bl	8024b92 <f_write>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d04f      	beq.n	8010a54 <Save_Svg+0x810>
 80109b4:	2303      	movs	r3, #3
 80109b6:	e079      	b.n	8010aac <Save_Svg+0x868>
 80109b8:	08000558 	.word	0x08000558
 80109bc:	0800055c 	.word	0x0800055c
 80109c0:	20000274 	.word	0x20000274
 80109c4:	200001ac 	.word	0x200001ac
 80109c8:	08000560 	.word	0x08000560
 80109cc:	08000570 	.word	0x08000570
 80109d0:	080005dc 	.word	0x080005dc
 80109d4:	08000608 	.word	0x08000608
 80109d8:	0800066c 	.word	0x0800066c
 80109dc:	08000688 	.word	0x08000688
 80109e0:	080006c8 	.word	0x080006c8
 80109e4:	08000704 	.word	0x08000704
 80109e8:	08000738 	.word	0x08000738
 80109ec:	0800073c 	.word	0x0800073c
 80109f0:	08000790 	.word	0x08000790
 80109f4:	080007a8 	.word	0x080007a8
 80109f8:	080007ac 	.word	0x080007ac
 80109fc:	080007c0 	.word	0x080007c0
 8010a00:	080007d8 	.word	0x080007d8
 8010a04:	0800230c 	.word	0x0800230c
 8010a08:	080007f4 	.word	0x080007f4
 8010a0c:	08000804 	.word	0x08000804
 8010a10:	08000810 	.word	0x08000810
 8010a14:	0800085c 	.word	0x0800085c
 8010a18:	0800087c 	.word	0x0800087c
 8010a1c:	08000880 	.word	0x08000880
 8010a20:	080008c4 	.word	0x080008c4
 8010a24:	08000910 	.word	0x08000910
 8010a28:	08001b24 	.word	0x08001b24
 8010a2c:	08001ae8 	.word	0x08001ae8
 8010a30:	08000958 	.word	0x08000958
 8010a34:	0800095c 	.word	0x0800095c
 8010a38:	08001b60 	.word	0x08001b60
 8010a3c:	08000970 	.word	0x08000970
 8010a40:	08000974 	.word	0x08000974
 8010a44:	08000984 	.word	0x08000984
 8010a48:	2000251e 	.word	0x2000251e
 8010a4c:	200012e0 	.word	0x200012e0
 8010a50:	20007aa8 	.word	0x20007aa8
  PrintClk(264,2,(l++ >>1)& 3);                               // ����ָʾ
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	1c5a      	adds	r2, r3, #1
 8010a58:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a5a:	105b      	asrs	r3, r3, #1
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	f003 0303 	and.w	r3, r3, #3
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	461a      	mov	r2, r3
 8010a66:	2102      	movs	r1, #2
 8010a68:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010a6c:	f7fe fb0c 	bl	800f088 <PrintClk>

  if(f_close(&USERFile)!= FR_OK )
 8010a70:	4810      	ldr	r0, [pc, #64]	; (8010ab4 <Save_Svg+0x870>)
 8010a72:	f014 fa5b 	bl	8024f2c <f_close>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <Save_Svg+0x83c>
	  return FILE_RW_ERR;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e015      	b.n	8010aac <Save_Svg+0x868>
  if(List[SAVE_SVG].Val<99)List[SAVE_SVG].Val++;
 8010a80:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <Save_Svg+0x874>)
 8010a82:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a86:	2b62      	cmp	r3, #98	; 0x62
 8010a88:	dc09      	bgt.n	8010a9e <Save_Svg+0x85a>
 8010a8a:	4b0b      	ldr	r3, [pc, #44]	; (8010ab8 <Save_Svg+0x874>)
 8010a8c:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	3301      	adds	r3, #1
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	b21a      	sxth	r2, r3
 8010a98:	4b07      	ldr	r3, [pc, #28]	; (8010ab8 <Save_Svg+0x874>)
 8010a9a:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  memset(Data,0,310);
 8010a9e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	4805      	ldr	r0, [pc, #20]	; (8010abc <Save_Svg+0x878>)
 8010aa6:	f015 fce1 	bl	802646c <memset>
  return OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3748      	adds	r7, #72	; 0x48
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	20007aa8 	.word	0x20007aa8
 8010ab8:	20000274 	.word	0x20000274
 8010abc:	20000008 	.word	0x20000008

08010ac0 <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 8010ac6:	4b10      	ldr	r3, [pc, #64]	; (8010b08 <Read_CalFlag+0x48>)
 8010ac8:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	1c9a      	adds	r2, r3, #2
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d10e      	bne.n	8010af8 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	1c9a      	adds	r2, r3, #2
 8010ade:	607a      	str	r2, [r7, #4]
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ae6:	d109      	bne.n	8010afc <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	1c9a      	adds	r2, r3, #2
 8010aec:	607a      	str	r2, [r7, #4]
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <Read_CalFlag+0x4c>)
 8010af4:	701a      	strb	r2, [r3, #0]
	  return;
 8010af6:	e002      	b.n	8010afe <Read_CalFlag+0x3e>
		  return;
 8010af8:	bf00      	nop
 8010afa:	e000      	b.n	8010afe <Read_CalFlag+0x3e>
		  return;
 8010afc:	bf00      	nop
 }
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr
 8010b08:	08004000 	.word	0x08004000
 8010b0c:	20000192 	.word	0x20000192

08010b10 <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 8010b10:	b5b0      	push	{r4, r5, r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8010b16:	4b47      	ldr	r3, [pc, #284]	; (8010c34 <Save_Parameter+0x124>)
 8010b18:	2202      	movs	r2, #2
 8010b1a:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010b1c:	f008 faa8 	bl	8019070 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010b20:	4945      	ldr	r1, [pc, #276]	; (8010c38 <Save_Parameter+0x128>)
 8010b22:	4844      	ldr	r0, [pc, #272]	; (8010c34 <Save_Parameter+0x124>)
 8010b24:	f008 fc16 	bl	8019354 <HAL_FLASHEx_Erase>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010b2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d176      	bne.n	8010c22 <Save_Parameter+0x112>
   {
     ptr=Flash_Buff;
 8010b34:	4b41      	ldr	r3, [pc, #260]	; (8010c3c <Save_Parameter+0x12c>)
 8010b36:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	1c9a      	adds	r2, r3, #2
 8010b3c:	603a      	str	r2, [r7, #0]
 8010b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010b42:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 8010b44:	4b3e      	ldr	r3, [pc, #248]	; (8010c40 <Save_Parameter+0x130>)
 8010b46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	1c9a      	adds	r2, r3, #2
 8010b4e:	603a      	str	r2, [r7, #0]
 8010b50:	b28a      	uxth	r2, r1
 8010b52:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 8010b54:	4b3b      	ldr	r3, [pc, #236]	; (8010c44 <Save_Parameter+0x134>)
 8010b56:	f9b3 1000 	ldrsh.w	r1, [r3]
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	1c9a      	adds	r2, r3, #2
 8010b5e:	603a      	str	r2, [r7, #0]
 8010b60:	b28a      	uxth	r2, r1
 8010b62:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b64:	2300      	movs	r3, #0
 8010b66:	80fb      	strh	r3, [r7, #6]
 8010b68:	e011      	b.n	8010b8e <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 8010b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b6e:	4a36      	ldr	r2, [pc, #216]	; (8010c48 <Save_Parameter+0x138>)
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	4413      	add	r3, r2
 8010b74:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	1c9a      	adds	r2, r3, #2
 8010b7c:	603a      	str	r2, [r7, #0]
 8010b7e:	b28a      	uxth	r2, r1
 8010b80:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 8010b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	3301      	adds	r3, #1
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	80fb      	strh	r3, [r7, #6]
 8010b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b92:	2b29      	cmp	r3, #41	; 0x29
 8010b94:	dde9      	ble.n	8010b6a <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 8010b96:	2300      	movs	r3, #0
 8010b98:	80fb      	strh	r3, [r7, #6]
 8010b9a:	e00f      	b.n	8010bbc <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8010b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ba0:	4a2a      	ldr	r2, [pc, #168]	; (8010c4c <Save_Parameter+0x13c>)
 8010ba2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	1c9a      	adds	r2, r3, #2
 8010baa:	603a      	str	r2, [r7, #0]
 8010bac:	b28a      	uxth	r2, r1
 8010bae:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 8010bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	80fb      	strh	r3, [r7, #6]
 8010bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bc0:	2b07      	cmp	r3, #7
 8010bc2:	ddeb      	ble.n	8010b9c <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	1c9a      	adds	r2, r3, #2
 8010bc8:	603a      	str	r2, [r7, #0]
 8010bca:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010bce:	801a      	strh	r2, [r3, #0]
     ptr=Flash_Buff;
 8010bd0:	4b1a      	ldr	r3, [pc, #104]	; (8010c3c <Save_Parameter+0x12c>)
 8010bd2:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	80fb      	strh	r3, [r7, #6]
 8010bd8:	e01d      	b.n	8010c16 <Save_Parameter+0x106>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8010bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bde:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010be2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8010be6:	4619      	mov	r1, r3
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	1c9a      	adds	r2, r3, #2
 8010bec:	603a      	str	r2, [r7, #0]
 8010bee:	881b      	ldrh	r3, [r3, #0]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	461c      	mov	r4, r3
 8010bf6:	4615      	mov	r5, r2
 8010bf8:	4622      	mov	r2, r4
 8010bfa:	462b      	mov	r3, r5
 8010bfc:	2001      	movs	r0, #1
 8010bfe:	f008 f9e3 	bl	8018fc8 <HAL_FLASH_Program>
 8010c02:	4603      	mov	r3, r0
 8010c04:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010c06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d108      	bne.n	8010c20 <Save_Parameter+0x110>
     for(i=0; i<256; i+=2)
 8010c0e:	88fb      	ldrh	r3, [r7, #6]
 8010c10:	3302      	adds	r3, #2
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	80fb      	strh	r3, [r7, #6]
 8010c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010c1a:	2bff      	cmp	r3, #255	; 0xff
 8010c1c:	dddd      	ble.n	8010bda <Save_Parameter+0xca>
 8010c1e:	e000      	b.n	8010c22 <Save_Parameter+0x112>
    	   break;
 8010c20:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010c22:	f008 fa47 	bl	80190b4 <HAL_FLASH_Lock>

   return j;
 8010c26:	88bb      	ldrh	r3, [r7, #4]
 8010c28:	b2db      	uxtb	r3, r3
 }
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bdb0      	pop	{r4, r5, r7, pc}
 8010c32:	bf00      	nop
 8010c34:	20000194 	.word	0x20000194
 8010c38:	20002630 	.word	0x20002630
 8010c3c:	20002530 	.word	0x20002530
 8010c40:	20002654 	.word	0x20002654
 8010c44:	20002656 	.word	0x20002656
 8010c48:	20000274 	.word	0x20000274
 8010c4c:	20000514 	.word	0x20000514

08010c50 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 8010c56:	4b3f      	ldr	r3, [pc, #252]	; (8010d54 <Read_Parameter+0x104>)
 8010c58:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010c5a:	4b3f      	ldr	r3, [pc, #252]	; (8010d58 <Read_Parameter+0x108>)
 8010c5c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010c60:	4b3e      	ldr	r3, [pc, #248]	; (8010d5c <Read_Parameter+0x10c>)
 8010c62:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010c64:	4b3c      	ldr	r3, [pc, #240]	; (8010d58 <Read_Parameter+0x108>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	881b      	ldrh	r3, [r3, #0]
 8010c6e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d166      	bne.n	8010d44 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 8010c76:	4b3a      	ldr	r3, [pc, #232]	; (8010d60 <Read_Parameter+0x110>)
 8010c78:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	1c9a      	adds	r2, r3, #2
 8010c7e:	603a      	str	r2, [r7, #0]
 8010c80:	881b      	ldrh	r3, [r3, #0]
 8010c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c86:	d15f      	bne.n	8010d48 <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	1c9a      	adds	r2, r3, #2
 8010c8c:	603a      	str	r2, [r7, #0]
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b21a      	sxth	r2, r3
 8010c92:	4b34      	ldr	r3, [pc, #208]	; (8010d64 <Read_Parameter+0x114>)
 8010c94:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010c96:	4b33      	ldr	r3, [pc, #204]	; (8010d64 <Read_Parameter+0x114>)
 8010c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4b32      	ldr	r3, [pc, #200]	; (8010d68 <Read_Parameter+0x118>)
 8010ca0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ca4:	4a2c      	ldr	r2, [pc, #176]	; (8010d58 <Read_Parameter+0x108>)
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	4413      	add	r3, r2
 8010caa:	799b      	ldrb	r3, [r3, #6]
 8010cac:	4a2d      	ldr	r2, [pc, #180]	; (8010d64 <Read_Parameter+0x114>)
 8010cae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010cb2:	4611      	mov	r1, r2
 8010cb4:	4a2c      	ldr	r2, [pc, #176]	; (8010d68 <Read_Parameter+0x118>)
 8010cb6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010cba:	4610      	mov	r0, r2
 8010cbc:	f043 0320 	orr.w	r3, r3, #32
 8010cc0:	b2d9      	uxtb	r1, r3
 8010cc2:	4a25      	ldr	r2, [pc, #148]	; (8010d58 <Read_Parameter+0x108>)
 8010cc4:	00c3      	lsls	r3, r0, #3
 8010cc6:	4413      	add	r3, r2
 8010cc8:	460a      	mov	r2, r1
 8010cca:	719a      	strb	r2, [r3, #6]
   ptr++;
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	3302      	adds	r3, #2
 8010cd0:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	80fb      	strh	r3, [r7, #6]
 8010cd6:	e011      	b.n	8010cfc <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	1c9a      	adds	r2, r3, #2
 8010cdc:	603a      	str	r2, [r7, #0]
 8010cde:	881a      	ldrh	r2, [r3, #0]
 8010ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ce4:	b211      	sxth	r1, r2
 8010ce6:	4a1c      	ldr	r2, [pc, #112]	; (8010d58 <Read_Parameter+0x108>)
 8010ce8:	00db      	lsls	r3, r3, #3
 8010cea:	4413      	add	r3, r2
 8010cec:	460a      	mov	r2, r1
 8010cee:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	80fb      	strh	r3, [r7, #6]
 8010cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d00:	2b29      	cmp	r3, #41	; 0x29
 8010d02:	dde9      	ble.n	8010cd8 <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8010d04:	2300      	movs	r3, #0
 8010d06:	80fb      	strh	r3, [r7, #6]
 8010d08:	e00f      	b.n	8010d2a <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	1c9a      	adds	r2, r3, #2
 8010d0e:	603a      	str	r2, [r7, #0]
 8010d10:	881a      	ldrh	r2, [r3, #0]
 8010d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d16:	b211      	sxth	r1, r2
 8010d18:	4a13      	ldr	r2, [pc, #76]	; (8010d68 <Read_Parameter+0x118>)
 8010d1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	3301      	adds	r3, #1
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	80fb      	strh	r3, [r7, #6]
 8010d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d2e:	2b07      	cmp	r3, #7
 8010d30:	ddeb      	ble.n	8010d0a <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010d32:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <Read_Parameter+0x108>)
 8010d34:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010d38:	4b08      	ldr	r3, [pc, #32]	; (8010d5c <Read_Parameter+0x10c>)
 8010d3a:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010d3c:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <Read_Parameter+0x108>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 8010d42:	e002      	b.n	8010d4a <Read_Parameter+0xfa>
	   return ;
 8010d44:	bf00      	nop
 8010d46:	e000      	b.n	8010d4a <Read_Parameter+0xfa>
	   return ;
 8010d48:	bf00      	nop
 }
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr
 8010d54:	0800806e 	.word	0x0800806e
 8010d58:	20000274 	.word	0x20000274
 8010d5c:	2000252c 	.word	0x2000252c
 8010d60:	08008000 	.word	0x08008000
 8010d64:	20002654 	.word	0x20002654
 8010d68:	20000514 	.word	0x20000514

08010d6c <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 8010d6c:	b5b0      	push	{r4, r5, r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 8010d72:	4b36      	ldr	r3, [pc, #216]	; (8010e4c <Save_Kpg+0xe0>)
 8010d74:	2201      	movs	r2, #1
 8010d76:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8010d78:	f008 f97a 	bl	8019070 <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 8010d7c:	4934      	ldr	r1, [pc, #208]	; (8010e50 <Save_Kpg+0xe4>)
 8010d7e:	4833      	ldr	r0, [pc, #204]	; (8010e4c <Save_Kpg+0xe0>)
 8010d80:	f008 fae8 	bl	8019354 <HAL_FLASHEx_Erase>
 8010d84:	4603      	mov	r3, r0
 8010d86:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8010d88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d154      	bne.n	8010e3a <Save_Kpg+0xce>
   {
     ptr=Flash_Buff;
 8010d90:	4b30      	ldr	r3, [pc, #192]	; (8010e54 <Save_Kpg+0xe8>)
 8010d92:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	1c9a      	adds	r2, r3, #2
 8010d98:	603a      	str	r2, [r7, #0]
 8010d9a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010d9e:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	1c9a      	adds	r2, r3, #2
 8010da4:	603a      	str	r2, [r7, #0]
 8010da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010daa:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8010dac:	4b2a      	ldr	r3, [pc, #168]	; (8010e58 <Save_Kpg+0xec>)
 8010dae:	7819      	ldrb	r1, [r3, #0]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	1c9a      	adds	r2, r3, #2
 8010db4:	603a      	str	r2, [r7, #0]
 8010db6:	b28a      	uxth	r2, r1
 8010db8:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010dba:	2300      	movs	r3, #0
 8010dbc:	80fb      	strh	r3, [r7, #6]
 8010dbe:	e00f      	b.n	8010de0 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8010dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dc4:	4a25      	ldr	r2, [pc, #148]	; (8010e5c <Save_Kpg+0xf0>)
 8010dc6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	1c9a      	adds	r2, r3, #2
 8010dce:	603a      	str	r2, [r7, #0]
 8010dd0:	b28a      	uxth	r2, r1
 8010dd2:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8010dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	3301      	adds	r3, #1
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	80fb      	strh	r3, [r7, #6]
 8010de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	ddeb      	ble.n	8010dc0 <Save_Kpg+0x54>
     ptr=Flash_Buff;
 8010de8:	4b1a      	ldr	r3, [pc, #104]	; (8010e54 <Save_Kpg+0xe8>)
 8010dea:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8010dec:	2300      	movs	r3, #0
 8010dee:	80fb      	strh	r3, [r7, #6]
 8010df0:	e01d      	b.n	8010e2e <Save_Kpg+0xc2>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8010df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010df6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8010dfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dfe:	4619      	mov	r1, r3
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	1c9a      	adds	r2, r3, #2
 8010e04:	603a      	str	r2, [r7, #0]
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	461c      	mov	r4, r3
 8010e0e:	4615      	mov	r5, r2
 8010e10:	4622      	mov	r2, r4
 8010e12:	462b      	mov	r3, r5
 8010e14:	2001      	movs	r0, #1
 8010e16:	f008 f8d7 	bl	8018fc8 <HAL_FLASH_Program>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 8010e1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d108      	bne.n	8010e38 <Save_Kpg+0xcc>
     for(i=0; i<256; i+=2)
 8010e26:	88fb      	ldrh	r3, [r7, #6]
 8010e28:	3302      	adds	r3, #2
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	80fb      	strh	r3, [r7, #6]
 8010e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e32:	2bff      	cmp	r3, #255	; 0xff
 8010e34:	dddd      	ble.n	8010df2 <Save_Kpg+0x86>
 8010e36:	e000      	b.n	8010e3a <Save_Kpg+0xce>
    	   break;
 8010e38:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8010e3a:	f008 f93b 	bl	80190b4 <HAL_FLASH_Lock>
   return j;
 8010e3e:	88bb      	ldrh	r3, [r7, #4]
 8010e40:	b2db      	uxtb	r3, r3
 }
 8010e42:	4618      	mov	r0, r3
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000194 	.word	0x20000194
 8010e50:	20002630 	.word	0x20002630
 8010e54:	20002530 	.word	0x20002530
 8010e58:	20000192 	.word	0x20000192
 8010e5c:	20000548 	.word	0x20000548

08010e60 <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 8010e66:	4b1c      	ldr	r3, [pc, #112]	; (8010ed8 <Read_Kpg+0x78>)
 8010e68:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	1c9a      	adds	r2, r3, #2
 8010e6e:	603a      	str	r2, [r7, #0]
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d125      	bne.n	8010ec6 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	1c9a      	adds	r2, r3, #2
 8010e7e:	603a      	str	r2, [r7, #0]
 8010e80:	881b      	ldrh	r3, [r3, #0]
 8010e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e86:	d120      	bne.n	8010eca <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	1c9a      	adds	r2, r3, #2
 8010e8c:	603a      	str	r2, [r7, #0]
 8010e8e:	881b      	ldrh	r3, [r3, #0]
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	4b12      	ldr	r3, [pc, #72]	; (8010edc <Read_Kpg+0x7c>)
 8010e94:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 8010e96:	2300      	movs	r3, #0
 8010e98:	80fb      	strh	r3, [r7, #6]
 8010e9a:	e00f      	b.n	8010ebc <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	1c9a      	adds	r2, r3, #2
 8010ea0:	603a      	str	r2, [r7, #0]
 8010ea2:	881a      	ldrh	r2, [r3, #0]
 8010ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ea8:	b211      	sxth	r1, r2
 8010eaa:	4a0d      	ldr	r2, [pc, #52]	; (8010ee0 <Read_Kpg+0x80>)
 8010eac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 8010eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	80fb      	strh	r3, [r7, #6]
 8010ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	ddeb      	ble.n	8010e9c <Read_Kpg+0x3c>
   return ;
 8010ec4:	e002      	b.n	8010ecc <Read_Kpg+0x6c>
	   return ;
 8010ec6:	bf00      	nop
 8010ec8:	e000      	b.n	8010ecc <Read_Kpg+0x6c>
	   return ;
 8010eca:	bf00      	nop
 }
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	08004000 	.word	0x08004000
 8010edc:	20000192 	.word	0x20000192
 8010ee0:	20000548 	.word	0x20000548

08010ee4 <Restore>:

 void Restore(void)
 {
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010eea:	4b2d      	ldr	r3, [pc, #180]	; (8010fa0 <Restore+0xbc>)
 8010eec:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010ef0:	4b2c      	ldr	r3, [pc, #176]	; (8010fa4 <Restore+0xc0>)
 8010ef2:	801a      	strh	r2, [r3, #0]
   Current=0;
 8010ef4:	4b2c      	ldr	r3, [pc, #176]	; (8010fa8 <Restore+0xc4>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010efa:	4b2b      	ldr	r3, [pc, #172]	; (8010fa8 <Restore+0xc4>)
 8010efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f00:	461a      	mov	r2, r3
 8010f02:	4b2a      	ldr	r3, [pc, #168]	; (8010fac <Restore+0xc8>)
 8010f04:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f08:	4a25      	ldr	r2, [pc, #148]	; (8010fa0 <Restore+0xbc>)
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	4413      	add	r3, r2
 8010f0e:	799b      	ldrb	r3, [r3, #6]
 8010f10:	4a25      	ldr	r2, [pc, #148]	; (8010fa8 <Restore+0xc4>)
 8010f12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010f16:	4611      	mov	r1, r2
 8010f18:	4a24      	ldr	r2, [pc, #144]	; (8010fac <Restore+0xc8>)
 8010f1a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8010f1e:	4610      	mov	r0, r2
 8010f20:	f043 0320 	orr.w	r3, r3, #32
 8010f24:	b2d9      	uxtb	r1, r3
 8010f26:	4a1e      	ldr	r2, [pc, #120]	; (8010fa0 <Restore+0xbc>)
 8010f28:	00c3      	lsls	r3, r0, #3
 8010f2a:	4413      	add	r3, r2
 8010f2c:	460a      	mov	r2, r1
 8010f2e:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 8010f30:	2300      	movs	r3, #0
 8010f32:	80fb      	strh	r3, [r7, #6]
 8010f34:	e013      	b.n	8010f5e <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8010f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f3e:	491c      	ldr	r1, [pc, #112]	; (8010fb0 <Restore+0xcc>)
 8010f40:	00db      	lsls	r3, r3, #3
 8010f42:	440b      	add	r3, r1
 8010f44:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8010f48:	4915      	ldr	r1, [pc, #84]	; (8010fa0 <Restore+0xbc>)
 8010f4a:	00d3      	lsls	r3, r2, #3
 8010f4c:	440b      	add	r3, r1
 8010f4e:	4602      	mov	r2, r0
 8010f50:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8010f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	3301      	adds	r3, #1
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	80fb      	strh	r3, [r7, #6]
 8010f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f62:	2b29      	cmp	r3, #41	; 0x29
 8010f64:	dde7      	ble.n	8010f36 <Restore+0x52>
   for(i=0;i<8;i++)
 8010f66:	2300      	movs	r3, #0
 8010f68:	80fb      	strh	r3, [r7, #6]
 8010f6a:	e00f      	b.n	8010f8c <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 8010f6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f74:	490f      	ldr	r1, [pc, #60]	; (8010fb4 <Restore+0xd0>)
 8010f76:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8010f7a:	4a0c      	ldr	r2, [pc, #48]	; (8010fac <Restore+0xc8>)
 8010f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8010f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	3301      	adds	r3, #1
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	80fb      	strh	r3, [r7, #6]
 8010f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f90:	2b07      	cmp	r3, #7
 8010f92:	ddeb      	ble.n	8010f6c <Restore+0x88>
   Update_Title();
 8010f94:	f000 fdec 	bl	8011b70 <Update_Title>
}
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	20000274 	.word	0x20000274
 8010fa4:	2000252c 	.word	0x2000252c
 8010fa8:	20002654 	.word	0x20002654
 8010fac:	20000514 	.word	0x20000514
 8010fb0:	200003c4 	.word	0x200003c4
 8010fb4:	08001f94 	.word	0x08001f94

08010fb8 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
   short i = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 8010fc2:	4b47      	ldr	r3, [pc, #284]	; (80110e0 <Restore_CalPar+0x128>)
 8010fc4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010fc8:	f043 0320 	orr.w	r3, r3, #32
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	4b44      	ldr	r3, [pc, #272]	; (80110e0 <Restore_CalPar+0x128>)
 8010fd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8010fd4:	4b42      	ldr	r3, [pc, #264]	; (80110e0 <Restore_CalPar+0x128>)
 8010fd6:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8010fda:	4b42      	ldr	r3, [pc, #264]	; (80110e4 <Restore_CalPar+0x12c>)
 8010fdc:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 8010fde:	4b40      	ldr	r3, [pc, #256]	; (80110e0 <Restore_CalPar+0x128>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8010fe4:	4b40      	ldr	r3, [pc, #256]	; (80110e8 <Restore_CalPar+0x130>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8010fea:	4b3f      	ldr	r3, [pc, #252]	; (80110e8 <Restore_CalPar+0x130>)
 8010fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	4b3e      	ldr	r3, [pc, #248]	; (80110ec <Restore_CalPar+0x134>)
 8010ff4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ff8:	4a39      	ldr	r2, [pc, #228]	; (80110e0 <Restore_CalPar+0x128>)
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	4413      	add	r3, r2
 8010ffe:	799b      	ldrb	r3, [r3, #6]
 8011000:	4a39      	ldr	r2, [pc, #228]	; (80110e8 <Restore_CalPar+0x130>)
 8011002:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011006:	4611      	mov	r1, r2
 8011008:	4a38      	ldr	r2, [pc, #224]	; (80110ec <Restore_CalPar+0x134>)
 801100a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801100e:	4610      	mov	r0, r2
 8011010:	f043 0320 	orr.w	r3, r3, #32
 8011014:	b2d9      	uxtb	r1, r3
 8011016:	4a32      	ldr	r2, [pc, #200]	; (80110e0 <Restore_CalPar+0x128>)
 8011018:	00c3      	lsls	r3, r0, #3
 801101a:	4413      	add	r3, r2
 801101c:	460a      	mov	r2, r1
 801101e:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 8011020:	2300      	movs	r3, #0
 8011022:	80fb      	strh	r3, [r7, #6]
 8011024:	e013      	b.n	801104e <Restore_CalPar+0x96>
 8011026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801102a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801102e:	4930      	ldr	r1, [pc, #192]	; (80110f0 <Restore_CalPar+0x138>)
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	440b      	add	r3, r1
 8011034:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011038:	4929      	ldr	r1, [pc, #164]	; (80110e0 <Restore_CalPar+0x128>)
 801103a:	00d3      	lsls	r3, r2, #3
 801103c:	440b      	add	r3, r1
 801103e:	4602      	mov	r2, r0
 8011040:	809a      	strh	r2, [r3, #4]
 8011042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011046:	b29b      	uxth	r3, r3
 8011048:	3301      	adds	r3, #1
 801104a:	b29b      	uxth	r3, r3
 801104c:	80fb      	strh	r3, [r7, #6]
 801104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011052:	2b29      	cmp	r3, #41	; 0x29
 8011054:	dde7      	ble.n	8011026 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 8011056:	2300      	movs	r3, #0
 8011058:	80fb      	strh	r3, [r7, #6]
 801105a:	e00f      	b.n	801107c <Restore_CalPar+0xc4>
 801105c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011064:	4923      	ldr	r1, [pc, #140]	; (80110f4 <Restore_CalPar+0x13c>)
 8011066:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 801106a:	4a20      	ldr	r2, [pc, #128]	; (80110ec <Restore_CalPar+0x134>)
 801106c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011074:	b29b      	uxth	r3, r3
 8011076:	3301      	adds	r3, #1
 8011078:	b29b      	uxth	r3, r3
 801107a:	80fb      	strh	r3, [r7, #6]
 801107c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011080:	2b07      	cmp	r3, #7
 8011082:	ddeb      	ble.n	801105c <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011084:	4b16      	ldr	r3, [pc, #88]	; (80110e0 <Restore_CalPar+0x128>)
 8011086:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801108a:	4b16      	ldr	r3, [pc, #88]	; (80110e4 <Restore_CalPar+0x12c>)
 801108c:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801108e:	4b14      	ldr	r3, [pc, #80]	; (80110e0 <Restore_CalPar+0x128>)
 8011090:	2200      	movs	r2, #0
 8011092:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011094:	2300      	movs	r3, #0
 8011096:	80fb      	strh	r3, [r7, #6]
 8011098:	e015      	b.n	80110c6 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 801109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801109e:	4a10      	ldr	r2, [pc, #64]	; (80110e0 <Restore_CalPar+0x128>)
 80110a0:	00db      	lsls	r3, r3, #3
 80110a2:	4413      	add	r3, r2
 80110a4:	799a      	ldrb	r2, [r3, #6]
 80110a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110aa:	f042 0220 	orr.w	r2, r2, #32
 80110ae:	b2d1      	uxtb	r1, r2
 80110b0:	4a0b      	ldr	r2, [pc, #44]	; (80110e0 <Restore_CalPar+0x128>)
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4413      	add	r3, r2
 80110b6:	460a      	mov	r2, r1
 80110b8:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 80110ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	3301      	adds	r3, #1
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	80fb      	strh	r3, [r7, #6]
 80110c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110ca:	2b29      	cmp	r3, #41	; 0x29
 80110cc:	dde5      	ble.n	801109a <Restore_CalPar+0xe2>
   }
   Update_Title();
 80110ce:	f000 fd4f 	bl	8011b70 <Update_Title>
   Close_Pop();
 80110d2:	f7fd fd09 	bl	800eae8 <Close_Pop>
 }
 80110d6:	bf00      	nop
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20000274 	.word	0x20000274
 80110e4:	2000252c 	.word	0x2000252c
 80110e8:	20002654 	.word	0x20002654
 80110ec:	20000514 	.word	0x20000514
 80110f0:	200003c4 	.word	0x200003c4
 80110f4:	08001f94 	.word	0x08001f94

080110f8 <u8ToDec3>:

/*******************************************************************************
 u8ToDec3: Change Byte to 3 decimal number string
*******************************************************************************/
void u8ToDec3(char *p, char n)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	460b      	mov	r3, r1
 8011102:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/100;
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	4a1e      	ldr	r2, [pc, #120]	; (8011180 <u8ToDec3+0x88>)
 8011108:	fba2 2303 	umull	r2, r3, r2, r3
 801110c:	095b      	lsrs	r3, r3, #5
 801110e:	b2da      	uxtb	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	1c59      	adds	r1, r3, #1
 8011114:	6079      	str	r1, [r7, #4]
 8011116:	3230      	adds	r2, #48	; 0x30
 8011118:	b2d2      	uxtb	r2, r2
 801111a:	701a      	strb	r2, [r3, #0]
    n %= 100;
 801111c:	78fb      	ldrb	r3, [r7, #3]
 801111e:	4a18      	ldr	r2, [pc, #96]	; (8011180 <u8ToDec3+0x88>)
 8011120:	fba2 1203 	umull	r1, r2, r2, r3
 8011124:	0952      	lsrs	r2, r2, #5
 8011126:	2164      	movs	r1, #100	; 0x64
 8011128:	fb01 f202 	mul.w	r2, r1, r2
 801112c:	1a9b      	subs	r3, r3, r2
 801112e:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/10;
 8011130:	78fb      	ldrb	r3, [r7, #3]
 8011132:	4a14      	ldr	r2, [pc, #80]	; (8011184 <u8ToDec3+0x8c>)
 8011134:	fba2 2303 	umull	r2, r3, r2, r3
 8011138:	08db      	lsrs	r3, r3, #3
 801113a:	b2da      	uxtb	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	1c59      	adds	r1, r3, #1
 8011140:	6079      	str	r1, [r7, #4]
 8011142:	3230      	adds	r2, #48	; 0x30
 8011144:	b2d2      	uxtb	r2, r2
 8011146:	701a      	strb	r2, [r3, #0]
    n %= 10;
 8011148:	78fa      	ldrb	r2, [r7, #3]
 801114a:	4b0e      	ldr	r3, [pc, #56]	; (8011184 <u8ToDec3+0x8c>)
 801114c:	fba3 1302 	umull	r1, r3, r3, r2
 8011150:	08d9      	lsrs	r1, r3, #3
 8011152:	460b      	mov	r3, r1
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	440b      	add	r3, r1
 8011158:	005b      	lsls	r3, r3, #1
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	1c5a      	adds	r2, r3, #1
 8011162:	607a      	str	r2, [r7, #4]
 8011164:	78fa      	ldrb	r2, [r7, #3]
 8011166:	3230      	adds	r2, #48	; 0x30
 8011168:	b2d2      	uxtb	r2, r2
 801116a:	701a      	strb	r2, [r3, #0]
    *p = 0;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2200      	movs	r2, #0
 8011170:	701a      	strb	r2, [r3, #0]
}
 8011172:	bf00      	nop
 8011174:	370c      	adds	r7, #12
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	51eb851f 	.word	0x51eb851f
 8011184:	cccccccd 	.word	0xcccccccd

08011188 <memset16>:

// 16 bit memset

void memset16(unsigned short* ptr, unsigned short value, short len)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	460b      	mov	r3, r1
 8011192:	807b      	strh	r3, [r7, #2]
 8011194:	4613      	mov	r3, r2
 8011196:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 8011198:	e00a      	b.n	80111b0 <memset16+0x28>
	{
		*ptr++ = value;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	1c9a      	adds	r2, r3, #2
 801119e:	607a      	str	r2, [r7, #4]
 80111a0:	887a      	ldrh	r2, [r7, #2]
 80111a2:	801a      	strh	r2, [r3, #0]
		len--;
 80111a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	3b01      	subs	r3, #1
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 80111b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1f0      	bne.n	801119a <memset16+0x12>
	}
}
 80111b8:	bf00      	nop
 80111ba:	bf00      	nop
 80111bc:	370c      	adds	r7, #12
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr
	...

080111c8 <Value2Str>:

/*******************************************************************************
 Value2Str: 32λ��תeλ��Ч���ַ��� + �����ַ������ṹΪUnit[][6]��+  ģʽ
*******************************************************************************/
void Value2Str(char *p, long n, const char *pUnit, char e, char Mode)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b088      	sub	sp, #32
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	607a      	str	r2, [r7, #4]
 80111d4:	70fb      	strb	r3, [r7, #3]
  short i = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	83fb      	strh	r3, [r7, #30]
  long m = n, c = 5;
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	61bb      	str	r3, [r7, #24]
 80111de:	2305      	movs	r3, #5
 80111e0:	617b      	str	r3, [r7, #20]

  if(Mode == SIGN)
 80111e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d129      	bne.n	801123e <Value2Str+0x76>
  {
    if(n == 0) *p++ = ' ';
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d104      	bne.n	80111fa <Value2Str+0x32>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	60fa      	str	r2, [r7, #12]
 80111f6:	2220      	movs	r2, #32
 80111f8:	701a      	strb	r2, [r3, #0]
    if(n >  0) *p++ = '+';
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dd04      	ble.n	801120a <Value2Str+0x42>
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	1c5a      	adds	r2, r3, #1
 8011204:	60fa      	str	r2, [r7, #12]
 8011206:	222b      	movs	r2, #43	; 0x2b
 8011208:	701a      	strb	r2, [r3, #0]
    if(n <  0){*p++ = '-'; n = -n;}
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	2b00      	cmp	r3, #0
 801120e:	da16      	bge.n	801123e <Value2Str+0x76>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	1c5a      	adds	r2, r3, #1
 8011214:	60fa      	str	r2, [r7, #12]
 8011216:	222d      	movs	r2, #45	; 0x2d
 8011218:	701a      	strb	r2, [r3, #0]
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	425b      	negs	r3, r3
 801121e:	60bb      	str	r3, [r7, #8]
  }
  while(m >= 10){m /= 10; i++;} // ���� n ����Чλ�� i
 8011220:	e00d      	b.n	801123e <Value2Str+0x76>
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	4a64      	ldr	r2, [pc, #400]	; (80113b8 <Value2Str+0x1f0>)
 8011226:	fb82 1203 	smull	r1, r2, r2, r3
 801122a:	1092      	asrs	r2, r2, #2
 801122c:	17db      	asrs	r3, r3, #31
 801122e:	1ad3      	subs	r3, r2, r3
 8011230:	61bb      	str	r3, [r7, #24]
 8011232:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011236:	b29b      	uxth	r3, r3
 8011238:	3301      	adds	r3, #1
 801123a:	b29b      	uxth	r3, r3
 801123c:	83fb      	strh	r3, [r7, #30]
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	2b09      	cmp	r3, #9
 8011242:	dcee      	bgt.n	8011222 <Value2Str+0x5a>
  if((i%3 == 2)&&(e == 2)) e++;
 8011244:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011248:	4b5c      	ldr	r3, [pc, #368]	; (80113bc <Value2Str+0x1f4>)
 801124a:	fb83 3102 	smull	r3, r1, r3, r2
 801124e:	17d3      	asrs	r3, r2, #31
 8011250:	1ac9      	subs	r1, r1, r3
 8011252:	460b      	mov	r3, r1
 8011254:	005b      	lsls	r3, r3, #1
 8011256:	440b      	add	r3, r1
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	b21b      	sxth	r3, r3
 801125c:	2b02      	cmp	r3, #2
 801125e:	d105      	bne.n	801126c <Value2Str+0xa4>
 8011260:	78fb      	ldrb	r3, [r7, #3]
 8011262:	2b02      	cmp	r3, #2
 8011264:	d102      	bne.n	801126c <Value2Str+0xa4>
 8011266:	78fb      	ldrb	r3, [r7, #3]
 8011268:	3301      	adds	r3, #1
 801126a:	70fb      	strb	r3, [r7, #3]
  m = n; i = 0;
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	61bb      	str	r3, [r7, #24]
 8011270:	2300      	movs	r3, #0
 8011272:	83fb      	strh	r3, [r7, #30]
  while(m >= 10)
 8011274:	e016      	b.n	80112a4 <Value2Str+0xdc>
  {
    m /= 10;
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	4a4f      	ldr	r2, [pc, #316]	; (80113b8 <Value2Str+0x1f0>)
 801127a:	fb82 1203 	smull	r1, r2, r2, r3
 801127e:	1092      	asrs	r2, r2, #2
 8011280:	17db      	asrs	r3, r3, #31
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	61bb      	str	r3, [r7, #24]
    if(++i > e) c *= 10;        // n ����Чλ�� i ����e�������������ֵ
 8011286:	8bfb      	ldrh	r3, [r7, #30]
 8011288:	3301      	adds	r3, #1
 801128a:	b29b      	uxth	r3, r3
 801128c:	83fb      	strh	r3, [r7, #30]
 801128e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011292:	78fb      	ldrb	r3, [r7, #3]
 8011294:	429a      	cmp	r2, r3
 8011296:	dd05      	ble.n	80112a4 <Value2Str+0xdc>
 8011298:	697a      	ldr	r2, [r7, #20]
 801129a:	4613      	mov	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	005b      	lsls	r3, r3, #1
 80112a2:	617b      	str	r3, [r7, #20]
  while(m >= 10)
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	2b09      	cmp	r3, #9
 80112a8:	dce5      	bgt.n	8011276 <Value2Str+0xae>
  }
  if(i >= e) n += c;            // n ������������ֵ
 80112aa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80112ae:	78fb      	ldrb	r3, [r7, #3]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	db03      	blt.n	80112bc <Value2Str+0xf4>
 80112b4:	68ba      	ldr	r2, [r7, #8]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	4413      	add	r3, r2
 80112ba:	60bb      	str	r3, [r7, #8]
  m = n; i = 0;
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	61bb      	str	r3, [r7, #24]
 80112c0:	2300      	movs	r3, #0
 80112c2:	83fb      	strh	r3, [r7, #30]
  while(m >= 10){m /= 10; i++;} // ���¼��� n ����Чλ�� i
 80112c4:	e00d      	b.n	80112e2 <Value2Str+0x11a>
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	4a3b      	ldr	r2, [pc, #236]	; (80113b8 <Value2Str+0x1f0>)
 80112ca:	fb82 1203 	smull	r1, r2, r2, r3
 80112ce:	1092      	asrs	r2, r2, #2
 80112d0:	17db      	asrs	r3, r3, #31
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	61bb      	str	r3, [r7, #24]
 80112d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112da:	b29b      	uxth	r3, r3
 80112dc:	3301      	adds	r3, #1
 80112de:	b29b      	uxth	r3, r3
 80112e0:	83fb      	strh	r3, [r7, #30]
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	2b09      	cmp	r3, #9
 80112e6:	dcee      	bgt.n	80112c6 <Value2Str+0xfe>

  m = i/3;                      // �������ٵ�λȡֵƫ����
 80112e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80112ec:	4a33      	ldr	r2, [pc, #204]	; (80113bc <Value2Str+0x1f4>)
 80112ee:	fb82 1203 	smull	r1, r2, r2, r3
 80112f2:	17db      	asrs	r3, r3, #31
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	b21b      	sxth	r3, r3
 80112f8:	61bb      	str	r3, [r7, #24]
  while(e--)
 80112fa:	e03e      	b.n	801137a <Value2Str+0x1b2>
  {
    *p++ = '0'+ n/Exp(i);
 80112fc:	8bfb      	ldrh	r3, [r7, #30]
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	4618      	mov	r0, r3
 8011302:	f000 f85d 	bl	80113c0 <Exp>
 8011306:	4602      	mov	r2, r0
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	fb93 f3f2 	sdiv	r3, r3, r2
 801130e:	b2da      	uxtb	r2, r3
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	1c59      	adds	r1, r3, #1
 8011314:	60f9      	str	r1, [r7, #12]
 8011316:	3230      	adds	r2, #48	; 0x30
 8011318:	b2d2      	uxtb	r2, r2
 801131a:	701a      	strb	r2, [r3, #0]
    if(e &&(i%3 == 0)) *p++ = '.';
 801131c:	78fb      	ldrb	r3, [r7, #3]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d012      	beq.n	8011348 <Value2Str+0x180>
 8011322:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011326:	4b25      	ldr	r3, [pc, #148]	; (80113bc <Value2Str+0x1f4>)
 8011328:	fb83 3102 	smull	r3, r1, r3, r2
 801132c:	17d3      	asrs	r3, r2, #31
 801132e:	1ac9      	subs	r1, r1, r3
 8011330:	460b      	mov	r3, r1
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	440b      	add	r3, r1
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	b21b      	sxth	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d104      	bne.n	8011348 <Value2Str+0x180>
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	60fa      	str	r2, [r7, #12]
 8011344:	222e      	movs	r2, #46	; 0x2e
 8011346:	701a      	strb	r2, [r3, #0]
    n = (i < 0)? 0 : n%Exp(i);
 8011348:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801134c:	2b00      	cmp	r3, #0
 801134e:	db0c      	blt.n	801136a <Value2Str+0x1a2>
 8011350:	8bfb      	ldrh	r3, [r7, #30]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	4618      	mov	r0, r3
 8011356:	f000 f833 	bl	80113c0 <Exp>
 801135a:	4602      	mov	r2, r0
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011362:	fb01 f202 	mul.w	r2, r1, r2
 8011366:	1a9b      	subs	r3, r3, r2
 8011368:	e000      	b.n	801136c <Value2Str+0x1a4>
 801136a:	2300      	movs	r3, #0
 801136c:	60bb      	str	r3, [r7, #8]
    i--;
 801136e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011372:	b29b      	uxth	r3, r3
 8011374:	3b01      	subs	r3, #1
 8011376:	b29b      	uxth	r3, r3
 8011378:	83fb      	strh	r3, [r7, #30]
  while(e--)
 801137a:	78fb      	ldrb	r3, [r7, #3]
 801137c:	1e5a      	subs	r2, r3, #1
 801137e:	70fa      	strb	r2, [r7, #3]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1bb      	bne.n	80112fc <Value2Str+0x134>
  }
  pUnit += 6*m;                 //
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	4613      	mov	r3, r2
 8011388:	005b      	lsls	r3, r3, #1
 801138a:	4413      	add	r3, r2
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	461a      	mov	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4413      	add	r3, r2
 8011394:	607b      	str	r3, [r7, #4]
  do {*p++ = *pUnit;}
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	60fa      	str	r2, [r7, #12]
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	7812      	ldrb	r2, [r2, #0]
 80113a0:	701a      	strb	r2, [r3, #0]
  while(*pUnit++);              // ���������ַ��ַ���
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	1c5a      	adds	r2, r3, #1
 80113a6:	607a      	str	r2, [r7, #4]
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1f3      	bne.n	8011396 <Value2Str+0x1ce>
}
 80113ae:	bf00      	nop
 80113b0:	bf00      	nop
 80113b2:	3720      	adds	r7, #32
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	66666667 	.word	0x66666667
 80113bc:	55555556 	.word	0x55555556

080113c0 <Exp>:

/*******************************************************************************
  ���� 10 �� x �η�
*******************************************************************************/
long Exp(char x)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
  long m = 1;
 80113ca:	2301      	movs	r3, #1
 80113cc:	60fb      	str	r3, [r7, #12]

  while(x--)
 80113ce:	e005      	b.n	80113dc <Exp+0x1c>
	  m *= 10;
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	4613      	mov	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	4413      	add	r3, r2
 80113d8:	005b      	lsls	r3, r3, #1
 80113da:	60fb      	str	r3, [r7, #12]
  while(x--)
 80113dc:	79fb      	ldrb	r3, [r7, #7]
 80113de:	1e5a      	subs	r2, r3, #1
 80113e0:	71fa      	strb	r2, [r7, #7]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d1f4      	bne.n	80113d0 <Exp+0x10>
  return m;
 80113e6:	68fb      	ldr	r3, [r7, #12]
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3714      	adds	r7, #20
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <Sqrt32>:

/*******************************************************************************
 Int_sqrt: unsigned int square root
*******************************************************************************/
short Sqrt32(int n)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
	int k;
  if ( n == 0 ) return 0;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d101      	bne.n	8011406 <Sqrt32+0x12>
 8011402:	2300      	movs	r3, #0
 8011404:	e019      	b.n	801143a <Sqrt32+0x46>
  k = 2*Sqrt32(n/4)+1;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	da00      	bge.n	801140e <Sqrt32+0x1a>
 801140c:	3303      	adds	r3, #3
 801140e:	109b      	asrs	r3, r3, #2
 8011410:	4618      	mov	r0, r3
 8011412:	f7ff ffef 	bl	80113f4 <Sqrt32>
 8011416:	4603      	mov	r3, r0
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	3301      	adds	r3, #1
 801141c:	60fb      	str	r3, [r7, #12]
  if ( k*k > n ) return k-1;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	fb03 f303 	mul.w	r3, r3, r3
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	429a      	cmp	r2, r3
 8011428:	da05      	bge.n	8011436 <Sqrt32+0x42>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	b29b      	uxth	r3, r3
 801142e:	3b01      	subs	r3, #1
 8011430:	b29b      	uxth	r3, r3
 8011432:	b21b      	sxth	r3, r3
 8011434:	e001      	b.n	801143a <Sqrt32+0x46>
  else return k;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	b21b      	sxth	r3, r3
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
	...

08011444 <u16ToDec4Str>:

/*******************************************************************************
 u16ToDec4Str: �޷���16λ��������ת4λʮ�����ַ�������Ч����ǰ��ո�
*******************************************************************************/
void u16ToDec4Str(char *p, short n)
{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	460b      	mov	r3, r1
 801144e:	807b      	strh	r3, [r7, #2]
  if(n/10000){
 8011450:	887b      	ldrh	r3, [r7, #2]
 8011452:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011456:	330f      	adds	r3, #15
 8011458:	b29b      	uxth	r3, r3
 801145a:	f644 621e 	movw	r2, #19998	; 0x4e1e
 801145e:	4293      	cmp	r3, r2
 8011460:	d917      	bls.n	8011492 <u16ToDec4Str+0x4e>
    *p++ = 'O';
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	1c5a      	adds	r2, r3, #1
 8011466:	607a      	str	r2, [r7, #4]
 8011468:	224f      	movs	r2, #79	; 0x4f
 801146a:	701a      	strb	r2, [r3, #0]
    *p++ = 'v';
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	607a      	str	r2, [r7, #4]
 8011472:	2276      	movs	r2, #118	; 0x76
 8011474:	701a      	strb	r2, [r3, #0]
    *p++ = 'e';
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	1c5a      	adds	r2, r3, #1
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	2265      	movs	r2, #101	; 0x65
 801147e:	701a      	strb	r2, [r3, #0]
    *p++ = 'r';
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	1c5a      	adds	r2, r3, #1
 8011484:	607a      	str	r2, [r7, #4]
 8011486:	2272      	movs	r2, #114	; 0x72
 8011488:	701a      	strb	r2, [r3, #0]
    *p   = 0;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2200      	movs	r2, #0
 801148e:	701a      	strb	r2, [r3, #0]
    return;
 8011490:	e07e      	b.n	8011590 <u16ToDec4Str+0x14c>
  }
  *p++ = '0'+n/1000;
 8011492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011496:	4a41      	ldr	r2, [pc, #260]	; (801159c <u16ToDec4Str+0x158>)
 8011498:	fb82 1203 	smull	r1, r2, r2, r3
 801149c:	1192      	asrs	r2, r2, #6
 801149e:	17db      	asrs	r3, r3, #31
 80114a0:	1ad3      	subs	r3, r2, r3
 80114a2:	b21b      	sxth	r3, r3
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	1c59      	adds	r1, r3, #1
 80114aa:	6079      	str	r1, [r7, #4]
 80114ac:	3230      	adds	r2, #48	; 0x30
 80114ae:	b2d2      	uxtb	r2, r2
 80114b0:	701a      	strb	r2, [r3, #0]
  n %= 1000;
 80114b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114b6:	4a39      	ldr	r2, [pc, #228]	; (801159c <u16ToDec4Str+0x158>)
 80114b8:	fb82 1203 	smull	r1, r2, r2, r3
 80114bc:	1191      	asrs	r1, r2, #6
 80114be:	17da      	asrs	r2, r3, #31
 80114c0:	1a8a      	subs	r2, r1, r2
 80114c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80114c6:	fb01 f202 	mul.w	r2, r1, r2
 80114ca:	1a9b      	subs	r3, r3, r2
 80114cc:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/100;
 80114ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114d2:	4a33      	ldr	r2, [pc, #204]	; (80115a0 <u16ToDec4Str+0x15c>)
 80114d4:	fb82 1203 	smull	r1, r2, r2, r3
 80114d8:	1152      	asrs	r2, r2, #5
 80114da:	17db      	asrs	r3, r3, #31
 80114dc:	1ad3      	subs	r3, r2, r3
 80114de:	b21b      	sxth	r3, r3
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	1c59      	adds	r1, r3, #1
 80114e6:	6079      	str	r1, [r7, #4]
 80114e8:	3230      	adds	r2, #48	; 0x30
 80114ea:	b2d2      	uxtb	r2, r2
 80114ec:	701a      	strb	r2, [r3, #0]
  n %= 100;
 80114ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114f2:	4a2b      	ldr	r2, [pc, #172]	; (80115a0 <u16ToDec4Str+0x15c>)
 80114f4:	fb82 1203 	smull	r1, r2, r2, r3
 80114f8:	1151      	asrs	r1, r2, #5
 80114fa:	17da      	asrs	r2, r3, #31
 80114fc:	1a8a      	subs	r2, r1, r2
 80114fe:	2164      	movs	r1, #100	; 0x64
 8011500:	fb01 f202 	mul.w	r2, r1, r2
 8011504:	1a9b      	subs	r3, r3, r2
 8011506:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/10;
 8011508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801150c:	4a25      	ldr	r2, [pc, #148]	; (80115a4 <u16ToDec4Str+0x160>)
 801150e:	fb82 1203 	smull	r1, r2, r2, r3
 8011512:	1092      	asrs	r2, r2, #2
 8011514:	17db      	asrs	r3, r3, #31
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	b21b      	sxth	r3, r3
 801151a:	b2da      	uxtb	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	1c59      	adds	r1, r3, #1
 8011520:	6079      	str	r1, [r7, #4]
 8011522:	3230      	adds	r2, #48	; 0x30
 8011524:	b2d2      	uxtb	r2, r2
 8011526:	701a      	strb	r2, [r3, #0]
  n %= 10;
 8011528:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801152c:	4b1d      	ldr	r3, [pc, #116]	; (80115a4 <u16ToDec4Str+0x160>)
 801152e:	fb83 1302 	smull	r1, r3, r3, r2
 8011532:	1099      	asrs	r1, r3, #2
 8011534:	17d3      	asrs	r3, r2, #31
 8011536:	1ac9      	subs	r1, r1, r3
 8011538:	460b      	mov	r3, r1
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	440b      	add	r3, r1
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	1ad3      	subs	r3, r2, r3
 8011542:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n;
 8011544:	887b      	ldrh	r3, [r7, #2]
 8011546:	b2da      	uxtb	r2, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	1c59      	adds	r1, r3, #1
 801154c:	6079      	str	r1, [r7, #4]
 801154e:	3230      	adds	r2, #48	; 0x30
 8011550:	b2d2      	uxtb	r2, r2
 8011552:	701a      	strb	r2, [r3, #0]
  *p = 0;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	701a      	strb	r2, [r3, #0]
  if(p[-4] == '0'){
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	3b04      	subs	r3, #4
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	2b30      	cmp	r3, #48	; 0x30
 8011562:	d115      	bne.n	8011590 <u16ToDec4Str+0x14c>
    p[-4] = ' ';
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	3b04      	subs	r3, #4
 8011568:	2220      	movs	r2, #32
 801156a:	701a      	strb	r2, [r3, #0]
    if(p[-3] == '0'){
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3b03      	subs	r3, #3
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	2b30      	cmp	r3, #48	; 0x30
 8011574:	d10c      	bne.n	8011590 <u16ToDec4Str+0x14c>
      p[-3] = ' ';
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	3b03      	subs	r3, #3
 801157a:	2220      	movs	r2, #32
 801157c:	701a      	strb	r2, [r3, #0]
      if(p[-2] == '0') p[-2] = ' ';
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	3b02      	subs	r3, #2
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	2b30      	cmp	r3, #48	; 0x30
 8011586:	d103      	bne.n	8011590 <u16ToDec4Str+0x14c>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3b02      	subs	r3, #2
 801158c:	2220      	movs	r2, #32
 801158e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	10624dd3 	.word	0x10624dd3
 80115a0:	51eb851f 	.word	0x51eb851f
 80115a4:	66666667 	.word	0x66666667

080115a8 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	603a      	str	r2, [r7, #0]
 80115b2:	80fb      	strh	r3, [r7, #6]
 80115b4:	460b      	mov	r3, r1
 80115b6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 80115b8:	2200      	movs	r2, #0
 80115ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115be:	480e      	ldr	r0, [pc, #56]	; (80115f8 <lcd_write_cmd_data+0x50>)
 80115c0:	f008 f996 	bl	80198f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 80115c4:	1db9      	adds	r1, r7, #6
 80115c6:	2301      	movs	r3, #1
 80115c8:	2201      	movs	r2, #1
 80115ca:	480c      	ldr	r0, [pc, #48]	; (80115fc <lcd_write_cmd_data+0x54>)
 80115cc:	f00a fddd 	bl	801c18a <HAL_SPI_Transmit>

	if(Len !=0)
 80115d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00b      	beq.n	80115f0 <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 80115d8:	2201      	movs	r2, #1
 80115da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115de:	4806      	ldr	r0, [pc, #24]	; (80115f8 <lcd_write_cmd_data+0x50>)
 80115e0:	f008 f986 	bl	80198f0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 80115e4:	88ba      	ldrh	r2, [r7, #4]
 80115e6:	2301      	movs	r3, #1
 80115e8:	6839      	ldr	r1, [r7, #0]
 80115ea:	4804      	ldr	r0, [pc, #16]	; (80115fc <lcd_write_cmd_data+0x54>)
 80115ec:	f00a fdcd 	bl	801c18a <HAL_SPI_Transmit>
	}
}
 80115f0:	bf00      	nop
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	40020800 	.word	0x40020800
 80115fc:	20006868 	.word	0x20006868

08011600 <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011604:	2200      	movs	r2, #0
 8011606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801160a:	4885      	ldr	r0, [pc, #532]	; (8011820 <Init_LCD+0x220>)
 801160c:	f008 f970 	bl	80198f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011610:	2201      	movs	r2, #1
 8011612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011616:	4883      	ldr	r0, [pc, #524]	; (8011824 <Init_LCD+0x224>)
 8011618:	f008 f96a 	bl	80198f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 801161c:	2001      	movs	r0, #1
 801161e:	f006 fd89 	bl	8018134 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011622:	2200      	movs	r2, #0
 8011624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011628:	487e      	ldr	r0, [pc, #504]	; (8011824 <Init_LCD+0x224>)
 801162a:	f008 f961 	bl	80198f0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 801162e:	200a      	movs	r0, #10
 8011630:	f006 fd80 	bl	8018134 <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011634:	2201      	movs	r2, #1
 8011636:	f44f 7100 	mov.w	r1, #512	; 0x200
 801163a:	487a      	ldr	r0, [pc, #488]	; (8011824 <Init_LCD+0x224>)
 801163c:	f008 f958 	bl	80198f0 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011640:	2078      	movs	r0, #120	; 0x78
 8011642:	f006 fd77 	bl	8018134 <HAL_Delay>

	data[0]=0;
 8011646:	4b78      	ldr	r3, [pc, #480]	; (8011828 <Init_LCD+0x228>)
 8011648:	2200      	movs	r2, #0
 801164a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 801164c:	4a76      	ldr	r2, [pc, #472]	; (8011828 <Init_LCD+0x228>)
 801164e:	2101      	movs	r1, #1
 8011650:	20b0      	movs	r0, #176	; 0xb0
 8011652:	f7ff ffa9 	bl	80115a8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011656:	4a74      	ldr	r2, [pc, #464]	; (8011828 <Init_LCD+0x228>)
 8011658:	2100      	movs	r1, #0
 801165a:	2011      	movs	r0, #17
 801165c:	f7ff ffa4 	bl	80115a8 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011660:	2078      	movs	r0, #120	; 0x78
 8011662:	f006 fd67 	bl	8018134 <HAL_Delay>
	data[0]=0x55;
 8011666:	4b70      	ldr	r3, [pc, #448]	; (8011828 <Init_LCD+0x228>)
 8011668:	2255      	movs	r2, #85	; 0x55
 801166a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 801166c:	4a6e      	ldr	r2, [pc, #440]	; (8011828 <Init_LCD+0x228>)
 801166e:	2101      	movs	r1, #1
 8011670:	203a      	movs	r0, #58	; 0x3a
 8011672:	f7ff ff99 	bl	80115a8 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011676:	4b6c      	ldr	r3, [pc, #432]	; (8011828 <Init_LCD+0x228>)
 8011678:	2209      	movs	r2, #9
 801167a:	805a      	strh	r2, [r3, #2]
 801167c:	4b6a      	ldr	r3, [pc, #424]	; (8011828 <Init_LCD+0x228>)
 801167e:	885a      	ldrh	r2, [r3, #2]
 8011680:	4b69      	ldr	r3, [pc, #420]	; (8011828 <Init_LCD+0x228>)
 8011682:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011684:	4a68      	ldr	r2, [pc, #416]	; (8011828 <Init_LCD+0x228>)
 8011686:	2102      	movs	r1, #2
 8011688:	20c0      	movs	r0, #192	; 0xc0
 801168a:	f7ff ff8d 	bl	80115a8 <lcd_write_cmd_data>
	data[0]= 0x41;
 801168e:	4b66      	ldr	r3, [pc, #408]	; (8011828 <Init_LCD+0x228>)
 8011690:	2241      	movs	r2, #65	; 0x41
 8011692:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011694:	4b64      	ldr	r3, [pc, #400]	; (8011828 <Init_LCD+0x228>)
 8011696:	2200      	movs	r2, #0
 8011698:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 801169a:	4a63      	ldr	r2, [pc, #396]	; (8011828 <Init_LCD+0x228>)
 801169c:	2102      	movs	r1, #2
 801169e:	20c1      	movs	r0, #193	; 0xc1
 80116a0:	f7ff ff82 	bl	80115a8 <lcd_write_cmd_data>
	data[0]= 0x33;
 80116a4:	4b60      	ldr	r3, [pc, #384]	; (8011828 <Init_LCD+0x228>)
 80116a6:	2233      	movs	r2, #51	; 0x33
 80116a8:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 80116aa:	4a5f      	ldr	r2, [pc, #380]	; (8011828 <Init_LCD+0x228>)
 80116ac:	2101      	movs	r1, #1
 80116ae:	20c2      	movs	r0, #194	; 0xc2
 80116b0:	f7ff ff7a 	bl	80115a8 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 80116b4:	4b5c      	ldr	r3, [pc, #368]	; (8011828 <Init_LCD+0x228>)
 80116b6:	2200      	movs	r2, #0
 80116b8:	805a      	strh	r2, [r3, #2]
 80116ba:	4b5b      	ldr	r3, [pc, #364]	; (8011828 <Init_LCD+0x228>)
 80116bc:	885a      	ldrh	r2, [r3, #2]
 80116be:	4b5a      	ldr	r3, [pc, #360]	; (8011828 <Init_LCD+0x228>)
 80116c0:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 80116c2:	4b59      	ldr	r3, [pc, #356]	; (8011828 <Init_LCD+0x228>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	80da      	strh	r2, [r3, #6]
 80116c8:	4b57      	ldr	r3, [pc, #348]	; (8011828 <Init_LCD+0x228>)
 80116ca:	88da      	ldrh	r2, [r3, #6]
 80116cc:	4b56      	ldr	r3, [pc, #344]	; (8011828 <Init_LCD+0x228>)
 80116ce:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 80116d0:	4a55      	ldr	r2, [pc, #340]	; (8011828 <Init_LCD+0x228>)
 80116d2:	2104      	movs	r1, #4
 80116d4:	20c5      	movs	r0, #197	; 0xc5
 80116d6:	f7ff ff67 	bl	80115a8 <lcd_write_cmd_data>

	data[0]=  0;
 80116da:	4b53      	ldr	r3, [pc, #332]	; (8011828 <Init_LCD+0x228>)
 80116dc:	2200      	movs	r2, #0
 80116de:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 80116e0:	4a51      	ldr	r2, [pc, #324]	; (8011828 <Init_LCD+0x228>)
 80116e2:	2101      	movs	r1, #1
 80116e4:	2036      	movs	r0, #54	; 0x36
 80116e6:	f7ff ff5f 	bl	80115a8 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 80116ea:	4b4f      	ldr	r3, [pc, #316]	; (8011828 <Init_LCD+0x228>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	839a      	strh	r2, [r3, #28]
 80116f0:	4b4d      	ldr	r3, [pc, #308]	; (8011828 <Init_LCD+0x228>)
 80116f2:	8b9a      	ldrh	r2, [r3, #28]
 80116f4:	4b4c      	ldr	r3, [pc, #304]	; (8011828 <Init_LCD+0x228>)
 80116f6:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 80116f8:	4b4b      	ldr	r3, [pc, #300]	; (8011828 <Init_LCD+0x228>)
 80116fa:	222c      	movs	r2, #44	; 0x2c
 80116fc:	809a      	strh	r2, [r3, #4]
 80116fe:	4b4a      	ldr	r3, [pc, #296]	; (8011828 <Init_LCD+0x228>)
 8011700:	889a      	ldrh	r2, [r3, #4]
 8011702:	4b49      	ldr	r3, [pc, #292]	; (8011828 <Init_LCD+0x228>)
 8011704:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8011706:	4b48      	ldr	r3, [pc, #288]	; (8011828 <Init_LCD+0x228>)
 8011708:	220b      	movs	r2, #11
 801170a:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 801170c:	4b46      	ldr	r3, [pc, #280]	; (8011828 <Init_LCD+0x228>)
 801170e:	220c      	movs	r2, #12
 8011710:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011712:	4b45      	ldr	r3, [pc, #276]	; (8011828 <Init_LCD+0x228>)
 8011714:	2204      	movs	r2, #4
 8011716:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8011718:	4b43      	ldr	r3, [pc, #268]	; (8011828 <Init_LCD+0x228>)
 801171a:	224c      	movs	r2, #76	; 0x4c
 801171c:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 801171e:	4b42      	ldr	r3, [pc, #264]	; (8011828 <Init_LCD+0x228>)
 8011720:	2264      	movs	r2, #100	; 0x64
 8011722:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011724:	4b40      	ldr	r3, [pc, #256]	; (8011828 <Init_LCD+0x228>)
 8011726:	2236      	movs	r2, #54	; 0x36
 8011728:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 801172a:	4b3f      	ldr	r3, [pc, #252]	; (8011828 <Init_LCD+0x228>)
 801172c:	2203      	movs	r2, #3
 801172e:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011730:	4b3d      	ldr	r3, [pc, #244]	; (8011828 <Init_LCD+0x228>)
 8011732:	220e      	movs	r2, #14
 8011734:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011736:	4b3c      	ldr	r3, [pc, #240]	; (8011828 <Init_LCD+0x228>)
 8011738:	222c      	movs	r2, #44	; 0x2c
 801173a:	835a      	strh	r2, [r3, #26]
 801173c:	4b3a      	ldr	r3, [pc, #232]	; (8011828 <Init_LCD+0x228>)
 801173e:	8b5a      	ldrh	r2, [r3, #26]
 8011740:	4b39      	ldr	r3, [pc, #228]	; (8011828 <Init_LCD+0x228>)
 8011742:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011744:	4b38      	ldr	r3, [pc, #224]	; (8011828 <Init_LCD+0x228>)
 8011746:	2210      	movs	r2, #16
 8011748:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 801174a:	4a37      	ldr	r2, [pc, #220]	; (8011828 <Init_LCD+0x228>)
 801174c:	210f      	movs	r1, #15
 801174e:	20e0      	movs	r0, #224	; 0xe0
 8011750:	f7ff ff2a 	bl	80115a8 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011754:	4b34      	ldr	r3, [pc, #208]	; (8011828 <Init_LCD+0x228>)
 8011756:	220f      	movs	r2, #15
 8011758:	839a      	strh	r2, [r3, #28]
 801175a:	4b33      	ldr	r3, [pc, #204]	; (8011828 <Init_LCD+0x228>)
 801175c:	8b9a      	ldrh	r2, [r3, #28]
 801175e:	4b32      	ldr	r3, [pc, #200]	; (8011828 <Init_LCD+0x228>)
 8011760:	811a      	strh	r2, [r3, #8]
 8011762:	4b31      	ldr	r3, [pc, #196]	; (8011828 <Init_LCD+0x228>)
 8011764:	891a      	ldrh	r2, [r3, #8]
 8011766:	4b30      	ldr	r3, [pc, #192]	; (8011828 <Init_LCD+0x228>)
 8011768:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 801176a:	4b2f      	ldr	r3, [pc, #188]	; (8011828 <Init_LCD+0x228>)
 801176c:	2237      	movs	r2, #55	; 0x37
 801176e:	809a      	strh	r2, [r3, #4]
 8011770:	4b2d      	ldr	r3, [pc, #180]	; (8011828 <Init_LCD+0x228>)
 8011772:	889a      	ldrh	r2, [r3, #4]
 8011774:	4b2c      	ldr	r3, [pc, #176]	; (8011828 <Init_LCD+0x228>)
 8011776:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011778:	4b2b      	ldr	r3, [pc, #172]	; (8011828 <Init_LCD+0x228>)
 801177a:	220c      	movs	r2, #12
 801177c:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 801177e:	4b2a      	ldr	r3, [pc, #168]	; (8011828 <Init_LCD+0x228>)
 8011780:	2205      	movs	r2, #5
 8011782:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011784:	4b28      	ldr	r3, [pc, #160]	; (8011828 <Init_LCD+0x228>)
 8011786:	2250      	movs	r2, #80	; 0x50
 8011788:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 801178a:	4b27      	ldr	r3, [pc, #156]	; (8011828 <Init_LCD+0x228>)
 801178c:	2232      	movs	r2, #50	; 0x32
 801178e:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011790:	4b25      	ldr	r3, [pc, #148]	; (8011828 <Init_LCD+0x228>)
 8011792:	2236      	movs	r2, #54	; 0x36
 8011794:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011796:	4b24      	ldr	r3, [pc, #144]	; (8011828 <Init_LCD+0x228>)
 8011798:	2204      	movs	r2, #4
 801179a:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 801179c:	4b22      	ldr	r3, [pc, #136]	; (8011828 <Init_LCD+0x228>)
 801179e:	220b      	movs	r2, #11
 80117a0:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 80117a2:	4b21      	ldr	r3, [pc, #132]	; (8011828 <Init_LCD+0x228>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 80117a8:	4b1f      	ldr	r3, [pc, #124]	; (8011828 <Init_LCD+0x228>)
 80117aa:	2219      	movs	r2, #25
 80117ac:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 80117ae:	4b1e      	ldr	r3, [pc, #120]	; (8011828 <Init_LCD+0x228>)
 80117b0:	2214      	movs	r2, #20
 80117b2:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 80117b4:	4a1c      	ldr	r2, [pc, #112]	; (8011828 <Init_LCD+0x228>)
 80117b6:	210f      	movs	r1, #15
 80117b8:	20e1      	movs	r0, #225	; 0xe1
 80117ba:	f7ff fef5 	bl	80115a8 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 80117be:	4b1a      	ldr	r3, [pc, #104]	; (8011828 <Init_LCD+0x228>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 80117c4:	4b18      	ldr	r3, [pc, #96]	; (8011828 <Init_LCD+0x228>)
 80117c6:	2202      	movs	r2, #2
 80117c8:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 80117ca:	4b17      	ldr	r3, [pc, #92]	; (8011828 <Init_LCD+0x228>)
 80117cc:	223b      	movs	r2, #59	; 0x3b
 80117ce:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 80117d0:	4a15      	ldr	r2, [pc, #84]	; (8011828 <Init_LCD+0x228>)
 80117d2:	2103      	movs	r1, #3
 80117d4:	20b6      	movs	r0, #182	; 0xb6
 80117d6:	f7ff fee7 	bl	80115a8 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 80117da:	4a13      	ldr	r2, [pc, #76]	; (8011828 <Init_LCD+0x228>)
 80117dc:	2100      	movs	r1, #0
 80117de:	2011      	movs	r0, #17
 80117e0:	f7ff fee2 	bl	80115a8 <lcd_write_cmd_data>
	HAL_Delay(120);
 80117e4:	2078      	movs	r0, #120	; 0x78
 80117e6:	f006 fca5 	bl	8018134 <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 80117ea:	4a0f      	ldr	r2, [pc, #60]	; (8011828 <Init_LCD+0x228>)
 80117ec:	2100      	movs	r1, #0
 80117ee:	2029      	movs	r0, #41	; 0x29
 80117f0:	f7ff feda 	bl	80115a8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 80117f4:	4a0c      	ldr	r2, [pc, #48]	; (8011828 <Init_LCD+0x228>)
 80117f6:	2100      	movs	r1, #0
 80117f8:	2038      	movs	r0, #56	; 0x38
 80117fa:	f7ff fed5 	bl	80115a8 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 80117fe:	4a0a      	ldr	r2, [pc, #40]	; (8011828 <Init_LCD+0x228>)
 8011800:	2100      	movs	r1, #0
 8011802:	2013      	movs	r0, #19
 8011804:	f7ff fed0 	bl	80115a8 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8011808:	2201      	movs	r2, #1
 801180a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801180e:	4804      	ldr	r0, [pc, #16]	; (8011820 <Init_LCD+0x220>)
 8011810:	f008 f86e 	bl	80198f0 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8011814:	2000      	movs	r0, #0
 8011816:	f000 f809 	bl	801182c <LCD_ClrScrn>
}
 801181a:	bf00      	nop
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	40020800 	.word	0x40020800
 8011824:	40020400 	.word	0x40020400
 8011828:	20002634 	.word	0x20002634

0801182c <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8011836:	f44f 7020 	mov.w	r0, #640	; 0x280
 801183a:	f014 fdf9 	bl	8026430 <malloc>
 801183e:	4603      	mov	r3, r0
 8011840:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011842:	2200      	movs	r2, #0
 8011844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011848:	483d      	ldr	r0, [pc, #244]	; (8011940 <LCD_ClrScrn+0x114>)
 801184a:	f008 f851 	bl	80198f0 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 801184e:	2300      	movs	r3, #0
 8011850:	81fb      	strh	r3, [r7, #14]
 8011852:	e03c      	b.n	80118ce <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8011854:	4b3b      	ldr	r3, [pc, #236]	; (8011944 <LCD_ClrScrn+0x118>)
 8011856:	2200      	movs	r2, #0
 8011858:	805a      	strh	r2, [r3, #2]
 801185a:	4b3a      	ldr	r3, [pc, #232]	; (8011944 <LCD_ClrScrn+0x118>)
 801185c:	885a      	ldrh	r2, [r3, #2]
 801185e:	4b39      	ldr	r3, [pc, #228]	; (8011944 <LCD_ClrScrn+0x118>)
 8011860:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8011862:	4b38      	ldr	r3, [pc, #224]	; (8011944 <LCD_ClrScrn+0x118>)
 8011864:	2201      	movs	r2, #1
 8011866:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8011868:	4b36      	ldr	r3, [pc, #216]	; (8011944 <LCD_ClrScrn+0x118>)
 801186a:	223f      	movs	r2, #63	; 0x3f
 801186c:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801186e:	4a35      	ldr	r2, [pc, #212]	; (8011944 <LCD_ClrScrn+0x118>)
 8011870:	2104      	movs	r1, #4
 8011872:	202a      	movs	r0, #42	; 0x2a
 8011874:	f7ff fe98 	bl	80115a8 <lcd_write_cmd_data>
	data[0]= y>>8;
 8011878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801187c:	121b      	asrs	r3, r3, #8
 801187e:	b21b      	sxth	r3, r3
 8011880:	b29a      	uxth	r2, r3
 8011882:	4b30      	ldr	r3, [pc, #192]	; (8011944 <LCD_ClrScrn+0x118>)
 8011884:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 8011886:	89fb      	ldrh	r3, [r7, #14]
 8011888:	b2db      	uxtb	r3, r3
 801188a:	b29a      	uxth	r2, r3
 801188c:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <LCD_ClrScrn+0x118>)
 801188e:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 8011890:	4b2c      	ldr	r3, [pc, #176]	; (8011944 <LCD_ClrScrn+0x118>)
 8011892:	2201      	movs	r2, #1
 8011894:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 8011896:	4b2b      	ldr	r3, [pc, #172]	; (8011944 <LCD_ClrScrn+0x118>)
 8011898:	22df      	movs	r2, #223	; 0xdf
 801189a:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 801189c:	4a29      	ldr	r2, [pc, #164]	; (8011944 <LCD_ClrScrn+0x118>)
 801189e:	2104      	movs	r1, #4
 80118a0:	202b      	movs	r0, #43	; 0x2b
 80118a2:	f7ff fe81 	bl	80115a8 <lcd_write_cmd_data>

	if(ptr != NULL)
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d016      	beq.n	80118da <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 80118ac:	88fb      	ldrh	r3, [r7, #6]
 80118ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80118b2:	4619      	mov	r1, r3
 80118b4:	68b8      	ldr	r0, [r7, #8]
 80118b6:	f7ff fc67 	bl	8011188 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 80118ba:	68ba      	ldr	r2, [r7, #8]
 80118bc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80118c0:	202c      	movs	r0, #44	; 0x2c
 80118c2:	f7ff fe71 	bl	80115a8 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 80118c6:	89fb      	ldrh	r3, [r7, #14]
 80118c8:	3301      	adds	r3, #1
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	81fb      	strh	r3, [r7, #14]
 80118ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80118d2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80118d6:	dbbd      	blt.n	8011854 <LCD_ClrScrn+0x28>
 80118d8:	e000      	b.n	80118dc <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 80118da:	bf00      	nop
}

free(ptr);
 80118dc:	68b8      	ldr	r0, [r7, #8]
 80118de:	f014 fdaf 	bl	8026440 <free>

data[0]=data[1]= 0;
 80118e2:	4b18      	ldr	r3, [pc, #96]	; (8011944 <LCD_ClrScrn+0x118>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	805a      	strh	r2, [r3, #2]
 80118e8:	4b16      	ldr	r3, [pc, #88]	; (8011944 <LCD_ClrScrn+0x118>)
 80118ea:	885a      	ldrh	r2, [r3, #2]
 80118ec:	4b15      	ldr	r3, [pc, #84]	; (8011944 <LCD_ClrScrn+0x118>)
 80118ee:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 80118f0:	4b14      	ldr	r3, [pc, #80]	; (8011944 <LCD_ClrScrn+0x118>)
 80118f2:	2201      	movs	r2, #1
 80118f4:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 80118f6:	4b13      	ldr	r3, [pc, #76]	; (8011944 <LCD_ClrScrn+0x118>)
 80118f8:	223f      	movs	r2, #63	; 0x3f
 80118fa:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 80118fc:	4a11      	ldr	r2, [pc, #68]	; (8011944 <LCD_ClrScrn+0x118>)
 80118fe:	2104      	movs	r1, #4
 8011900:	202a      	movs	r0, #42	; 0x2a
 8011902:	f7ff fe51 	bl	80115a8 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 8011906:	4b0f      	ldr	r3, [pc, #60]	; (8011944 <LCD_ClrScrn+0x118>)
 8011908:	2200      	movs	r2, #0
 801190a:	805a      	strh	r2, [r3, #2]
 801190c:	4b0d      	ldr	r3, [pc, #52]	; (8011944 <LCD_ClrScrn+0x118>)
 801190e:	885a      	ldrh	r2, [r3, #2]
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <LCD_ClrScrn+0x118>)
 8011912:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8011914:	4b0b      	ldr	r3, [pc, #44]	; (8011944 <LCD_ClrScrn+0x118>)
 8011916:	2201      	movs	r2, #1
 8011918:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 801191a:	4b0a      	ldr	r3, [pc, #40]	; (8011944 <LCD_ClrScrn+0x118>)
 801191c:	22df      	movs	r2, #223	; 0xdf
 801191e:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 8011920:	4a08      	ldr	r2, [pc, #32]	; (8011944 <LCD_ClrScrn+0x118>)
 8011922:	2104      	movs	r1, #4
 8011924:	202b      	movs	r0, #43	; 0x2b
 8011926:	f7ff fe3f 	bl	80115a8 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 801192a:	2201      	movs	r2, #1
 801192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011930:	4803      	ldr	r0, [pc, #12]	; (8011940 <LCD_ClrScrn+0x114>)
 8011932:	f007 ffdd 	bl	80198f0 <HAL_GPIO_WritePin>

}
 8011936:	bf00      	nop
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	40020800 	.word	0x40020800
 8011944:	20002634 	.word	0x20002634

08011948 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	4603      	mov	r3, r0
 8011950:	460a      	mov	r2, r1
 8011952:	80fb      	strh	r3, [r7, #6]
 8011954:	4613      	mov	r3, r2
 8011956:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011958:	2200      	movs	r2, #0
 801195a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801195e:	481f      	ldr	r0, [pc, #124]	; (80119dc <LCD_Set_Posi+0x94>)
 8011960:	f007 ffc6 	bl	80198f0 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 8011964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011968:	121b      	asrs	r3, r3, #8
 801196a:	b21b      	sxth	r3, r3
 801196c:	b29a      	uxth	r2, r3
 801196e:	4b1c      	ldr	r3, [pc, #112]	; (80119e0 <LCD_Set_Posi+0x98>)
 8011970:	809a      	strh	r2, [r3, #4]
 8011972:	4b1b      	ldr	r3, [pc, #108]	; (80119e0 <LCD_Set_Posi+0x98>)
 8011974:	889a      	ldrh	r2, [r3, #4]
 8011976:	4b1a      	ldr	r3, [pc, #104]	; (80119e0 <LCD_Set_Posi+0x98>)
 8011978:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 801197a:	88fb      	ldrh	r3, [r7, #6]
 801197c:	b2db      	uxtb	r3, r3
 801197e:	b29a      	uxth	r2, r3
 8011980:	4b17      	ldr	r3, [pc, #92]	; (80119e0 <LCD_Set_Posi+0x98>)
 8011982:	80da      	strh	r2, [r3, #6]
 8011984:	4b16      	ldr	r3, [pc, #88]	; (80119e0 <LCD_Set_Posi+0x98>)
 8011986:	88da      	ldrh	r2, [r3, #6]
 8011988:	4b15      	ldr	r3, [pc, #84]	; (80119e0 <LCD_Set_Posi+0x98>)
 801198a:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 801198c:	4a14      	ldr	r2, [pc, #80]	; (80119e0 <LCD_Set_Posi+0x98>)
 801198e:	2104      	movs	r1, #4
 8011990:	202a      	movs	r0, #42	; 0x2a
 8011992:	f7ff fe09 	bl	80115a8 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 8011996:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801199a:	121b      	asrs	r3, r3, #8
 801199c:	b21b      	sxth	r3, r3
 801199e:	b29a      	uxth	r2, r3
 80119a0:	4b0f      	ldr	r3, [pc, #60]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119a2:	805a      	strh	r2, [r3, #2]
 80119a4:	4b0e      	ldr	r3, [pc, #56]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119a6:	885a      	ldrh	r2, [r3, #2]
 80119a8:	4b0d      	ldr	r3, [pc, #52]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119aa:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 80119ac:	88bb      	ldrh	r3, [r7, #4]
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	4b0b      	ldr	r3, [pc, #44]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119b4:	80da      	strh	r2, [r3, #6]
 80119b6:	4b0a      	ldr	r3, [pc, #40]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119b8:	88da      	ldrh	r2, [r3, #6]
 80119ba:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119bc:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 80119be:	4a08      	ldr	r2, [pc, #32]	; (80119e0 <LCD_Set_Posi+0x98>)
 80119c0:	2104      	movs	r1, #4
 80119c2:	202b      	movs	r0, #43	; 0x2b
 80119c4:	f7ff fdf0 	bl	80115a8 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80119c8:	2201      	movs	r2, #1
 80119ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119ce:	4803      	ldr	r0, [pc, #12]	; (80119dc <LCD_Set_Posi+0x94>)
 80119d0:	f007 ff8e 	bl	80198f0 <HAL_GPIO_WritePin>
}
 80119d4:	bf00      	nop
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	40020800 	.word	0x40020800
 80119e0:	20002634 	.word	0x20002634

080119e4 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	4603      	mov	r3, r0
 80119ec:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80119ee:	2200      	movs	r2, #0
 80119f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80119f4:	480d      	ldr	r0, [pc, #52]	; (8011a2c <LCD_Set_Pixel+0x48>)
 80119f6:	f007 ff7b 	bl	80198f0 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 80119fa:	88fb      	ldrh	r3, [r7, #6]
 80119fc:	0a1b      	lsrs	r3, r3, #8
 80119fe:	b29a      	uxth	r2, r3
 8011a00:	4b0b      	ldr	r3, [pc, #44]	; (8011a30 <LCD_Set_Pixel+0x4c>)
 8011a02:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8011a04:	88fb      	ldrh	r3, [r7, #6]
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	4b09      	ldr	r3, [pc, #36]	; (8011a30 <LCD_Set_Pixel+0x4c>)
 8011a0c:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 8011a0e:	4a08      	ldr	r2, [pc, #32]	; (8011a30 <LCD_Set_Pixel+0x4c>)
 8011a10:	2102      	movs	r1, #2
 8011a12:	202c      	movs	r0, #44	; 0x2c
 8011a14:	f7ff fdc8 	bl	80115a8 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8011a18:	2201      	movs	r2, #1
 8011a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a1e:	4803      	ldr	r0, [pc, #12]	; (8011a2c <LCD_Set_Pixel+0x48>)
 8011a20:	f007 ff66 	bl	80198f0 <HAL_GPIO_WritePin>
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	40020800 	.word	0x40020800
 8011a30:	20002634 	.word	0x20002634

08011a34 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a40:	4814      	ldr	r0, [pc, #80]	; (8011a94 <LCD_Get_Pixel+0x60>)
 8011a42:	f007 ff55 	bl	80198f0 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 8011a46:	4a14      	ldr	r2, [pc, #80]	; (8011a98 <LCD_Get_Pixel+0x64>)
 8011a48:	2100      	movs	r1, #0
 8011a4a:	202e      	movs	r0, #46	; 0x2e
 8011a4c:	f7ff fdac 	bl	80115a8 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 8011a50:	2301      	movs	r3, #1
 8011a52:	2202      	movs	r2, #2
 8011a54:	4910      	ldr	r1, [pc, #64]	; (8011a98 <LCD_Get_Pixel+0x64>)
 8011a56:	4811      	ldr	r0, [pc, #68]	; (8011a9c <LCD_Get_Pixel+0x68>)
 8011a58:	f00a fcd3 	bl	801c402 <HAL_SPI_Receive>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8011a60:	2201      	movs	r2, #1
 8011a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011a66:	480b      	ldr	r0, [pc, #44]	; (8011a94 <LCD_Get_Pixel+0x60>)
 8011a68:	f007 ff42 	bl	80198f0 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 8011a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10a      	bne.n	8011a8a <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 8011a74:	4b08      	ldr	r3, [pc, #32]	; (8011a98 <LCD_Get_Pixel+0x64>)
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	021b      	lsls	r3, r3, #8
 8011a7a:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 8011a7c:	4b06      	ldr	r3, [pc, #24]	; (8011a98 <LCD_Get_Pixel+0x64>)
 8011a7e:	885a      	ldrh	r2, [r3, #2]
 8011a80:	88bb      	ldrh	r3, [r7, #4]
 8011a82:	4313      	orrs	r3, r2
 8011a84:	80bb      	strh	r3, [r7, #4]
		return (fred);
 8011a86:	88bb      	ldrh	r3, [r7, #4]
 8011a88:	e000      	b.n	8011a8c <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 8011a8a:	2300      	movs	r3, #0

}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	40020800 	.word	0x40020800
 8011a98:	20002634 	.word	0x20002634
 8011a9c:	20006868 	.word	0x20006868

08011aa0 <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	4623      	mov	r3, r4
 8011ab0:	80fb      	strh	r3, [r7, #6]
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	80bb      	strh	r3, [r7, #4]
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	70fb      	strb	r3, [r7, #3]
 8011aba:	4613      	mov	r3, r2
 8011abc:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 8011abe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7ff ff3d 	bl	8011948 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011ace:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011ad2:	f7ff ff87 	bl	80119e4 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 8011ad6:	78bb      	ldrb	r3, [r7, #2]
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	88bb      	ldrh	r3, [r7, #4]
 8011adc:	4413      	add	r3, r2
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	b21a      	sxth	r2, r3
 8011ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011aea:	4611      	mov	r1, r2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7ff ff2b 	bl	8011948 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011af2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011af6:	f7ff ff75 	bl	80119e4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8011afa:	78fb      	ldrb	r3, [r7, #3]
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	78ba      	ldrb	r2, [r7, #2]
 8011b00:	2a0a      	cmp	r2, #10
 8011b02:	d901      	bls.n	8011b08 <Draw_4Point+0x68>
 8011b04:	2208      	movs	r2, #8
 8011b06:	e000      	b.n	8011b0a <Draw_4Point+0x6a>
 8011b08:	2206      	movs	r2, #6
 8011b0a:	fb12 f303 	smulbb	r3, r2, r3
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	88fb      	ldrh	r3, [r7, #6]
 8011b12:	4413      	add	r3, r2
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	b21b      	sxth	r3, r3
 8011b18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ff ff12 	bl	8011948 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b24:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b28:	f7ff ff5c 	bl	80119e4 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8011b2c:	78fb      	ldrb	r3, [r7, #3]
 8011b2e:	b29b      	uxth	r3, r3
 8011b30:	78ba      	ldrb	r2, [r7, #2]
 8011b32:	2a0a      	cmp	r2, #10
 8011b34:	d901      	bls.n	8011b3a <Draw_4Point+0x9a>
 8011b36:	2208      	movs	r2, #8
 8011b38:	e000      	b.n	8011b3c <Draw_4Point+0x9c>
 8011b3a:	2206      	movs	r2, #6
 8011b3c:	fb12 f303 	smulbb	r3, r2, r3
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	88fb      	ldrh	r3, [r7, #6]
 8011b44:	4413      	add	r3, r2
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	b218      	sxth	r0, r3
 8011b4a:	78bb      	ldrb	r3, [r7, #2]
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	88bb      	ldrh	r3, [r7, #4]
 8011b50:	4413      	add	r3, r2
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	3b01      	subs	r3, #1
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	b21b      	sxth	r3, r3
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	f7ff fef4 	bl	8011948 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8011b60:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b64:	f7ff ff3e 	bl	80119e4 <LCD_Set_Pixel>
}
 8011b68:	bf00      	nop
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd90      	pop	{r4, r7, pc}

08011b70 <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 8011b76:	2300      	movs	r3, #0
 8011b78:	80fb      	strh	r3, [r7, #6]
 8011b7a:	e03b      	b.n	8011bf4 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 8011b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b80:	4a21      	ldr	r2, [pc, #132]	; (8011c08 <Update_Title+0x98>)
 8011b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b86:	4619      	mov	r1, r3
 8011b88:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011b8c:	f7fc fa26 	bl	800dfdc <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 8011b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b94:	4a1d      	ldr	r2, [pc, #116]	; (8011c0c <Update_Title+0x9c>)
 8011b96:	5cd3      	ldrb	r3, [r2, r3]
 8011b98:	b219      	sxth	r1, r3
 8011b9a:	4b1d      	ldr	r3, [pc, #116]	; (8011c10 <Update_Title+0xa0>)
 8011b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ba0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	bf0c      	ite	eq
 8011ba8:	2301      	moveq	r3, #1
 8011baa:	2300      	movne	r3, #0
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4a17      	ldr	r2, [pc, #92]	; (8011c14 <Update_Title+0xa4>)
 8011bb8:	4413      	add	r3, r2
 8011bba:	4602      	mov	r2, r0
 8011bbc:	f240 102f 	movw	r0, #303	; 0x12f
 8011bc0:	f7fc f9b4 	bl	800df2c <DispStr8x14>
    if(Current == i)
 8011bc4:	4b12      	ldr	r3, [pc, #72]	; (8011c10 <Update_Title+0xa0>)
 8011bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d10a      	bne.n	8011be8 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 8011bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bd6:	4a0d      	ldr	r2, [pc, #52]	; (8011c0c <Update_Title+0x9c>)
 8011bd8:	5cd3      	ldrb	r3, [r2, r3]
 8011bda:	b219      	sxth	r1, r3
 8011bdc:	230e      	movs	r3, #14
 8011bde:	2202      	movs	r2, #2
 8011be0:	f240 102f 	movw	r0, #303	; 0x12f
 8011be4:	f7ff ff5c 	bl	8011aa0 <Draw_4Point>
  for(i=0; i<8; i++)
 8011be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	3301      	adds	r3, #1
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	80fb      	strh	r3, [r7, #6]
 8011bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bf8:	2b07      	cmp	r3, #7
 8011bfa:	ddbf      	ble.n	8011b7c <Update_Title+0xc>
    }
  }
}
 8011bfc:	bf00      	nop
 8011bfe:	bf00      	nop
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	08001fa4 	.word	0x08001fa4
 8011c0c:	08001fd4 	.word	0x08001fd4
 8011c10:	20002654 	.word	0x20002654
 8011c14:	08001fb4 	.word	0x08001fb4

08011c18 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8011c18:	b590      	push	{r4, r7, lr}
 8011c1a:	b087      	sub	sp, #28
 8011c1c:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8011c1e:	4bbd      	ldr	r3, [pc, #756]	; (8011f14 <Update_Blink+0x2fc>)
 8011c20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	4bbb      	ldr	r3, [pc, #748]	; (8011f14 <Update_Blink+0x2fc>)
 8011c28:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	4619      	mov	r1, r3
 8011c30:	0089      	lsls	r1, r1, #2
 8011c32:	440b      	add	r3, r1
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	4413      	add	r3, r2
 8011c3a:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8011c3c:	4bb6      	ldr	r3, [pc, #728]	; (8011f18 <Update_Blink+0x300>)
 8011c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c42:	461a      	mov	r2, r3
 8011c44:	4bb5      	ldr	r3, [pc, #724]	; (8011f1c <Update_Blink+0x304>)
 8011c46:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011c4a:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 8011c4c:	89bb      	ldrh	r3, [r7, #12]
 8011c4e:	4ab1      	ldr	r2, [pc, #708]	; (8011f14 <Update_Blink+0x2fc>)
 8011c50:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011c54:	89bb      	ldrh	r3, [r7, #12]
 8011c56:	49af      	ldr	r1, [pc, #700]	; (8011f14 <Update_Blink+0x2fc>)
 8011c58:	00db      	lsls	r3, r3, #3
 8011c5a:	440b      	add	r3, r1
 8011c5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011c60:	4619      	mov	r1, r3
 8011c62:	460b      	mov	r3, r1
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	440b      	add	r3, r1
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 8011c6e:	4bac      	ldr	r3, [pc, #688]	; (8011f20 <Update_Blink+0x308>)
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	f040 86ca 	bne.w	8012a0e <Update_Blink+0xdf6>
  {
    Blink = 0;
 8011c7a:	4ba9      	ldr	r3, [pc, #676]	; (8011f20 <Update_Blink+0x308>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 8011c80:	4ba6      	ldr	r3, [pc, #664]	; (8011f1c <Update_Blink+0x304>)
 8011c82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c86:	4aa3      	ldr	r2, [pc, #652]	; (8011f14 <Update_Blink+0x2fc>)
 8011c88:	00db      	lsls	r3, r3, #3
 8011c8a:	4413      	add	r3, r2
 8011c8c:	799b      	ldrb	r3, [r3, #6]
 8011c8e:	4aa3      	ldr	r2, [pc, #652]	; (8011f1c <Update_Blink+0x304>)
 8011c90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011c94:	4610      	mov	r0, r2
 8011c96:	f043 0320 	orr.w	r3, r3, #32
 8011c9a:	b2d9      	uxtb	r1, r3
 8011c9c:	4a9d      	ldr	r2, [pc, #628]	; (8011f14 <Update_Blink+0x2fc>)
 8011c9e:	00c3      	lsls	r3, r0, #3
 8011ca0:	4413      	add	r3, r2
 8011ca2:	460a      	mov	r2, r1
 8011ca4:	719a      	strb	r2, [r3, #6]
    switch(i)
 8011ca6:	89bb      	ldrh	r3, [r7, #12]
 8011ca8:	2b29      	cmp	r3, #41	; 0x29
 8011caa:	f200 86aa 	bhi.w	8012a02 <Update_Blink+0xdea>
 8011cae:	a201      	add	r2, pc, #4	; (adr r2, 8011cb4 <Update_Blink+0x9c>)
 8011cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cb4:	08011e1f 	.word	0x08011e1f
 8011cb8:	08011e1f 	.word	0x08011e1f
 8011cbc:	08011e1f 	.word	0x08011e1f
 8011cc0:	08011eb3 	.word	0x08011eb3
 8011cc4:	08011ee5 	.word	0x08011ee5
 8011cc8:	08011ee5 	.word	0x08011ee5
 8011ccc:	0801201b 	.word	0x0801201b
 8011cd0:	08012079 	.word	0x08012079
 8011cd4:	080120d1 	.word	0x080120d1
 8011cd8:	08012103 	.word	0x08012103
 8011cdc:	0801216f 	.word	0x0801216f
 8011ce0:	0801216f 	.word	0x0801216f
 8011ce4:	080122d1 	.word	0x080122d1
 8011ce8:	0801232b 	.word	0x0801232b
 8011cec:	08012389 	.word	0x08012389
 8011cf0:	08012459 	.word	0x08012459
 8011cf4:	08012483 	.word	0x08012483
 8011cf8:	08012389 	.word	0x08012389
 8011cfc:	080124b1 	.word	0x080124b1
 8011d00:	08012a03 	.word	0x08012a03
 8011d04:	08012a03 	.word	0x08012a03
 8011d08:	08012a03 	.word	0x08012a03
 8011d0c:	08012a03 	.word	0x08012a03
 8011d10:	08012a03 	.word	0x08012a03
 8011d14:	08012a03 	.word	0x08012a03
 8011d18:	08012a03 	.word	0x08012a03
 8011d1c:	08012529 	.word	0x08012529
 8011d20:	080125a5 	.word	0x080125a5
 8011d24:	080125d3 	.word	0x080125d3
 8011d28:	08011d5d 	.word	0x08011d5d
 8011d2c:	08011d5d 	.word	0x08011d5d
 8011d30:	08011d5d 	.word	0x08011d5d
 8011d34:	08011d5d 	.word	0x08011d5d
 8011d38:	08011d5d 	.word	0x08011d5d
 8011d3c:	08011d5d 	.word	0x08011d5d
 8011d40:	08011d5d 	.word	0x08011d5d
 8011d44:	0801264f 	.word	0x0801264f
 8011d48:	080126e9 	.word	0x080126e9
 8011d4c:	080127ad 	.word	0x080127ad
 8011d50:	0801285b 	.word	0x0801285b
 8011d54:	080128f5 	.word	0x080128f5
 8011d58:	08012963 	.word	0x08012963
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 8011d5c:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8011d60:	4619      	mov	r1, r3
 8011d62:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011d66:	f7fc f939 	bl	800dfdc <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 8011d6a:	89bb      	ldrh	r3, [r7, #12]
 8011d6c:	4a69      	ldr	r2, [pc, #420]	; (8011f14 <Update_Blink+0x2fc>)
 8011d6e:	00db      	lsls	r3, r3, #3
 8011d70:	4413      	add	r3, r2
 8011d72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	4619      	mov	r1, r3
 8011d7a:	486a      	ldr	r0, [pc, #424]	; (8011f24 <Update_Blink+0x30c>)
 8011d7c:	f7ff f9bc 	bl	80110f8 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8011d80:	4b69      	ldr	r3, [pc, #420]	; (8011f28 <Update_Blink+0x310>)
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	b2d8      	uxtb	r0, r3
 8011d86:	89bb      	ldrh	r3, [r7, #12]
 8011d88:	4a68      	ldr	r2, [pc, #416]	; (8011f2c <Update_Blink+0x314>)
 8011d8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	3b03      	subs	r3, #3
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	b219      	sxth	r1, r3
 8011d96:	2342      	movs	r3, #66	; 0x42
 8011d98:	9301      	str	r3, [sp, #4]
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	9300      	str	r3, [sp, #0]
 8011d9e:	230b      	movs	r3, #11
 8011da0:	2203      	movs	r2, #3
 8011da2:	f7fc fa09 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8011da6:	89bb      	ldrh	r3, [r7, #12]
 8011da8:	4a60      	ldr	r2, [pc, #384]	; (8011f2c <Update_Blink+0x314>)
 8011daa:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8011dae:	4b5e      	ldr	r3, [pc, #376]	; (8011f28 <Update_Blink+0x310>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	89bb      	ldrh	r3, [r7, #12]
 8011db6:	2b21      	cmp	r3, #33	; 0x21
 8011db8:	d901      	bls.n	8011dbe <Update_Blink+0x1a6>
 8011dba:	4b5d      	ldr	r3, [pc, #372]	; (8011f30 <Update_Blink+0x318>)
 8011dbc:	e000      	b.n	8011dc0 <Update_Blink+0x1a8>
 8011dbe:	4b5d      	ldr	r3, [pc, #372]	; (8011f34 <Update_Blink+0x31c>)
 8011dc0:	2103      	movs	r1, #3
 8011dc2:	f7fc f923 	bl	800e00c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 8011dc6:	89bb      	ldrh	r3, [r7, #12]
 8011dc8:	4a58      	ldr	r2, [pc, #352]	; (8011f2c <Update_Blink+0x314>)
 8011dca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	3318      	adds	r3, #24
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	b218      	sxth	r0, r3
 8011dd6:	4b54      	ldr	r3, [pc, #336]	; (8011f28 <Update_Blink+0x310>)
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	4b51      	ldr	r3, [pc, #324]	; (8011f24 <Update_Blink+0x30c>)
 8011dde:	2103      	movs	r1, #3
 8011de0:	f7fc f914 	bl	800e00c <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8011de4:	89bb      	ldrh	r3, [r7, #12]
 8011de6:	4a51      	ldr	r2, [pc, #324]	; (8011f2c <Update_Blink+0x314>)
 8011de8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	332a      	adds	r3, #42	; 0x2a
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	b218      	sxth	r0, r3
 8011df4:	4b4c      	ldr	r3, [pc, #304]	; (8011f28 <Update_Blink+0x310>)
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	b2dc      	uxtb	r4, r3
 8011dfa:	89bb      	ldrh	r3, [r7, #12]
 8011dfc:	4a45      	ldr	r2, [pc, #276]	; (8011f14 <Update_Blink+0x2fc>)
 8011dfe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011e02:	89bb      	ldrh	r3, [r7, #12]
 8011e04:	f1a3 021d 	sub.w	r2, r3, #29
 8011e08:	4613      	mov	r3, r2
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	4413      	add	r3, r2
 8011e0e:	005b      	lsls	r3, r3, #1
 8011e10:	440b      	add	r3, r1
 8011e12:	4622      	mov	r2, r4
 8011e14:	2103      	movs	r1, #3
 8011e16:	f7fc f8f9 	bl	800e00c <DispStr>
      break;
 8011e1a:	f000 bdf2 	b.w	8012a02 <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 8011e1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011e22:	4619      	mov	r1, r3
 8011e24:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011e28:	f7fc f8d8 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8011e2c:	4b3e      	ldr	r3, [pc, #248]	; (8011f28 <Update_Blink+0x310>)
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	b2d8      	uxtb	r0, r3
 8011e32:	232f      	movs	r3, #47	; 0x2f
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	3b03      	subs	r3, #3
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	b219      	sxth	r1, r3
 8011e3c:	232a      	movs	r3, #42	; 0x2a
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	2300      	movs	r3, #0
 8011e42:	9300      	str	r3, [sp, #0]
 8011e44:	230b      	movs	r3, #11
 8011e46:	22e1      	movs	r2, #225	; 0xe1
 8011e48:	f7fc f9b6 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 8011e4c:	242f      	movs	r4, #47	; 0x2f
 8011e4e:	4b36      	ldr	r3, [pc, #216]	; (8011f28 <Update_Blink+0x310>)
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	b2d8      	uxtb	r0, r3
 8011e54:	4b2f      	ldr	r3, [pc, #188]	; (8011f14 <Update_Blink+0x2fc>)
 8011e56:	6819      	ldr	r1, [r3, #0]
 8011e58:	89fa      	ldrh	r2, [r7, #14]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	4413      	add	r3, r2
 8011e60:	005b      	lsls	r3, r3, #1
 8011e62:	440b      	add	r3, r1
 8011e64:	4602      	mov	r2, r0
 8011e66:	21e1      	movs	r1, #225	; 0xe1
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f7fc f8cf 	bl	800e00c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8011e6e:	2047      	movs	r0, #71	; 0x47
 8011e70:	4b2d      	ldr	r3, [pc, #180]	; (8011f28 <Update_Blink+0x310>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	b2d9      	uxtb	r1, r3
 8011e76:	4b27      	ldr	r3, [pc, #156]	; (8011f14 <Update_Blink+0x2fc>)
 8011e78:	689a      	ldr	r2, [r3, #8]
 8011e7a:	4b26      	ldr	r3, [pc, #152]	; (8011f14 <Update_Blink+0x2fc>)
 8011e7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011e80:	461c      	mov	r4, r3
 8011e82:	4623      	mov	r3, r4
 8011e84:	005b      	lsls	r3, r3, #1
 8011e86:	4423      	add	r3, r4
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	460a      	mov	r2, r1
 8011e8e:	21e1      	movs	r1, #225	; 0xe1
 8011e90:	f7fc f8bc 	bl	800e00c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8011e94:	2020      	movs	r0, #32
 8011e96:	4b1f      	ldr	r3, [pc, #124]	; (8011f14 <Update_Blink+0x2fc>)
 8011e98:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <Update_Blink+0x28c>
 8011ea0:	4b25      	ldr	r3, [pc, #148]	; (8011f38 <Update_Blink+0x320>)
 8011ea2:	e000      	b.n	8011ea6 <Update_Blink+0x28e>
 8011ea4:	4b25      	ldr	r3, [pc, #148]	; (8011f3c <Update_Blink+0x324>)
 8011ea6:	2210      	movs	r2, #16
 8011ea8:	21e1      	movs	r1, #225	; 0xe1
 8011eaa:	f7fc fb19 	bl	800e4e0 <DispStr10x14>
      break;
 8011eae:	f000 bda8 	b.w	8012a02 <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 8011eb2:	4b1d      	ldr	r3, [pc, #116]	; (8011f28 <Update_Blink+0x310>)
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d009      	beq.n	8011ed0 <Update_Blink+0x2b8>
 8011ebc:	4b20      	ldr	r3, [pc, #128]	; (8011f40 <Update_Blink+0x328>)
 8011ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ec2:	f043 0301 	orr.w	r3, r3, #1
 8011ec6:	b21a      	sxth	r2, r3
 8011ec8:	4b1d      	ldr	r3, [pc, #116]	; (8011f40 <Update_Blink+0x328>)
 8011eca:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8011ecc:	f000 bd99 	b.w	8012a02 <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 8011ed0:	4b1b      	ldr	r3, [pc, #108]	; (8011f40 <Update_Blink+0x328>)
 8011ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ed6:	f023 0301 	bic.w	r3, r3, #1
 8011eda:	b21a      	sxth	r2, r3
 8011edc:	4b18      	ldr	r3, [pc, #96]	; (8011f40 <Update_Blink+0x328>)
 8011ede:	801a      	strh	r2, [r3, #0]
      break;
 8011ee0:	f000 bd8f 	b.w	8012a02 <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8011ee4:	89bb      	ldrh	r3, [r7, #12]
 8011ee6:	2b04      	cmp	r3, #4
 8011ee8:	d101      	bne.n	8011eee <Update_Blink+0x2d6>
 8011eea:	2305      	movs	r3, #5
 8011eec:	e000      	b.n	8011ef0 <Update_Blink+0x2d8>
 8011eee:	2306      	movs	r3, #6
 8011ef0:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 8011ef2:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <Update_Blink+0x310>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d023      	beq.n	8011f44 <Update_Blink+0x32c>
 8011efc:	4a10      	ldr	r2, [pc, #64]	; (8011f40 <Update_Blink+0x328>)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011f04:	f043 0301 	orr.w	r3, r3, #1
 8011f08:	b219      	sxth	r1, r3
 8011f0a:	4a0d      	ldr	r2, [pc, #52]	; (8011f40 <Update_Blink+0x328>)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011f12:	e022      	b.n	8011f5a <Update_Blink+0x342>
 8011f14:	20000274 	.word	0x20000274
 8011f18:	20002654 	.word	0x20002654
 8011f1c:	20000514 	.word	0x20000514
 8011f20:	2000072d 	.word	0x2000072d
 8011f24:	20002660 	.word	0x20002660
 8011f28:	2000072c 	.word	0x2000072c
 8011f2c:	080021f8 	.word	0x080021f8
 8011f30:	0800099c 	.word	0x0800099c
 8011f34:	080009a4 	.word	0x080009a4
 8011f38:	080009ac 	.word	0x080009ac
 8011f3c:	080009b0 	.word	0x080009b0
 8011f40:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 8011f44:	4ab1      	ldr	r2, [pc, #708]	; (801220c <Update_Blink+0x5f4>)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011f4c:	f023 0301 	bic.w	r3, r3, #1
 8011f50:	b219      	sxth	r1, r3
 8011f52:	4aae      	ldr	r2, [pc, #696]	; (801220c <Update_Blink+0x5f4>)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 8011f5a:	4bac      	ldr	r3, [pc, #688]	; (801220c <Update_Blink+0x5f4>)
 8011f5c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8011f60:	461a      	mov	r2, r3
 8011f62:	4baa      	ldr	r3, [pc, #680]	; (801220c <Update_Blink+0x5f4>)
 8011f64:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8011f68:	1ad3      	subs	r3, r2, r3
 8011f6a:	0fda      	lsrs	r2, r3, #31
 8011f6c:	4413      	add	r3, r2
 8011f6e:	105b      	asrs	r3, r3, #1
 8011f70:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8011f72:	89fb      	ldrh	r3, [r7, #14]
 8011f74:	4aa6      	ldr	r2, [pc, #664]	; (8012210 <Update_Blink+0x5f8>)
 8011f76:	5cd3      	ldrb	r3, [r2, r3]
 8011f78:	461c      	mov	r4, r3
 8011f7a:	89fb      	ldrh	r3, [r7, #14]
 8011f7c:	4aa5      	ldr	r2, [pc, #660]	; (8012214 <Update_Blink+0x5fc>)
 8011f7e:	5cd3      	ldrb	r3, [r2, r3]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff fa1d 	bl	80113c0 <Exp>
 8011f86:	4603      	mov	r3, r0
 8011f88:	fb03 f204 	mul.w	r2, r3, r4
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	fb02 f303 	mul.w	r3, r2, r3
 8011f92:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8011f94:	2301      	movs	r3, #1
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	2303      	movs	r3, #3
 8011f9a:	4a9f      	ldr	r2, [pc, #636]	; (8012218 <Update_Blink+0x600>)
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	489f      	ldr	r0, [pc, #636]	; (801221c <Update_Blink+0x604>)
 8011fa0:	f7ff f912 	bl	80111c8 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8011fa4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8011fa8:	4619      	mov	r1, r3
 8011faa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8011fae:	f7fc f815 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8011fb2:	4b9b      	ldr	r3, [pc, #620]	; (8012220 <Update_Blink+0x608>)
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	b2d8      	uxtb	r0, r3
 8011fb8:	2307      	movs	r3, #7
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	3b03      	subs	r3, #3
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	b219      	sxth	r1, r3
 8011fc2:	2336      	movs	r3, #54	; 0x36
 8011fc4:	9301      	str	r3, [sp, #4]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	9300      	str	r3, [sp, #0]
 8011fca:	230b      	movs	r3, #11
 8011fcc:	2203      	movs	r2, #3
 8011fce:	f7fc f8f3 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 8011fd2:	2007      	movs	r0, #7
 8011fd4:	4b92      	ldr	r3, [pc, #584]	; (8012220 <Update_Blink+0x608>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	3310      	adds	r3, #16
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	4b91      	ldr	r3, [pc, #580]	; (8012224 <Update_Blink+0x60c>)
 8011fe0:	2103      	movs	r1, #3
 8011fe2:	f7fc f813 	bl	800e00c <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8011fe6:	2307      	movs	r3, #7
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	3306      	adds	r3, #6
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	b218      	sxth	r0, r3
 8011ff0:	4b8b      	ldr	r3, [pc, #556]	; (8012220 <Update_Blink+0x608>)
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	4b8c      	ldr	r3, [pc, #560]	; (8012228 <Update_Blink+0x610>)
 8011ff8:	2103      	movs	r1, #3
 8011ffa:	f7fc f807 	bl	800e00c <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 8011ffe:	2307      	movs	r3, #7
 8012000:	b29b      	uxth	r3, r3
 8012002:	3312      	adds	r3, #18
 8012004:	b29b      	uxth	r3, r3
 8012006:	b218      	sxth	r0, r3
 8012008:	4b85      	ldr	r3, [pc, #532]	; (8012220 <Update_Blink+0x608>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	b2da      	uxtb	r2, r3
 801200e:	4b83      	ldr	r3, [pc, #524]	; (801221c <Update_Blink+0x604>)
 8012010:	2103      	movs	r1, #3
 8012012:	f7fb fffb 	bl	800e00c <DispStr>
      break;
 8012016:	f000 bcf4 	b.w	8012a02 <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 801201a:	4b81      	ldr	r3, [pc, #516]	; (8012220 <Update_Blink+0x608>)
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d008      	beq.n	8012036 <Update_Blink+0x41e>
 8012024:	4b79      	ldr	r3, [pc, #484]	; (801220c <Update_Blink+0x5f4>)
 8012026:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801202a:	f043 0301 	orr.w	r3, r3, #1
 801202e:	b21a      	sxth	r2, r3
 8012030:	4b76      	ldr	r3, [pc, #472]	; (801220c <Update_Blink+0x5f4>)
 8012032:	815a      	strh	r2, [r3, #10]
 8012034:	e007      	b.n	8012046 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012036:	4b75      	ldr	r3, [pc, #468]	; (801220c <Update_Blink+0x5f4>)
 8012038:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801203c:	f023 0301 	bic.w	r3, r3, #1
 8012040:	b21a      	sxth	r2, r3
 8012042:	4b72      	ldr	r3, [pc, #456]	; (801220c <Update_Blink+0x5f4>)
 8012044:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 8012046:	4b76      	ldr	r3, [pc, #472]	; (8012220 <Update_Blink+0x608>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	2b00      	cmp	r3, #0
 801204e:	d009      	beq.n	8012064 <Update_Blink+0x44c>
 8012050:	4b6e      	ldr	r3, [pc, #440]	; (801220c <Update_Blink+0x5f4>)
 8012052:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	b21a      	sxth	r2, r3
 801205c:	4b6b      	ldr	r3, [pc, #428]	; (801220c <Update_Blink+0x5f4>)
 801205e:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 8012060:	f000 bccf 	b.w	8012a02 <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 8012064:	4b69      	ldr	r3, [pc, #420]	; (801220c <Update_Blink+0x5f4>)
 8012066:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801206a:	f023 0301 	bic.w	r3, r3, #1
 801206e:	b21a      	sxth	r2, r3
 8012070:	4b66      	ldr	r3, [pc, #408]	; (801220c <Update_Blink+0x5f4>)
 8012072:	819a      	strh	r2, [r3, #12]
      break;
 8012074:	f000 bcc5 	b.w	8012a02 <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 8012078:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801207c:	4619      	mov	r1, r3
 801207e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012082:	f7fb ffab 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8012086:	4b66      	ldr	r3, [pc, #408]	; (8012220 <Update_Blink+0x608>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	b2d8      	uxtb	r0, r3
 801208c:	89bb      	ldrh	r3, [r7, #12]
 801208e:	4a67      	ldr	r2, [pc, #412]	; (801222c <Update_Blink+0x614>)
 8012090:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012094:	b29b      	uxth	r3, r3
 8012096:	3b03      	subs	r3, #3
 8012098:	b29b      	uxth	r3, r3
 801209a:	b219      	sxth	r1, r3
 801209c:	231e      	movs	r3, #30
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	2302      	movs	r3, #2
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	230b      	movs	r3, #11
 80120a6:	22e1      	movs	r2, #225	; 0xe1
 80120a8:	f7fc f886 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 80120ac:	89bb      	ldrh	r3, [r7, #12]
 80120ae:	4a5f      	ldr	r2, [pc, #380]	; (801222c <Update_Blink+0x614>)
 80120b0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80120b4:	4b5a      	ldr	r3, [pc, #360]	; (8012220 <Update_Blink+0x608>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	4b5d      	ldr	r3, [pc, #372]	; (8012230 <Update_Blink+0x618>)
 80120bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	495c      	ldr	r1, [pc, #368]	; (8012234 <Update_Blink+0x61c>)
 80120c4:	440b      	add	r3, r1
 80120c6:	21e1      	movs	r1, #225	; 0xe1
 80120c8:	f7fb ffa0 	bl	800e00c <DispStr>
      break;
 80120cc:	f000 bc99 	b.w	8012a02 <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 80120d0:	4b53      	ldr	r3, [pc, #332]	; (8012220 <Update_Blink+0x608>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d009      	beq.n	80120ee <Update_Blink+0x4d6>
 80120da:	4b4c      	ldr	r3, [pc, #304]	; (801220c <Update_Blink+0x5f4>)
 80120dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120e0:	f043 0301 	orr.w	r3, r3, #1
 80120e4:	b21a      	sxth	r2, r3
 80120e6:	4b49      	ldr	r3, [pc, #292]	; (801220c <Update_Blink+0x5f4>)
 80120e8:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 80120ea:	f000 bc8a 	b.w	8012a02 <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 80120ee:	4b47      	ldr	r3, [pc, #284]	; (801220c <Update_Blink+0x5f4>)
 80120f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80120f4:	f023 0301 	bic.w	r3, r3, #1
 80120f8:	b21a      	sxth	r2, r3
 80120fa:	4b44      	ldr	r3, [pc, #272]	; (801220c <Update_Blink+0x5f4>)
 80120fc:	81da      	strh	r2, [r3, #14]
      break;
 80120fe:	f000 bc80 	b.w	8012a02 <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 8012102:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012106:	4619      	mov	r1, r3
 8012108:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801210c:	f7fb ff66 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8012110:	4b43      	ldr	r3, [pc, #268]	; (8012220 <Update_Blink+0x608>)
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	b2d8      	uxtb	r0, r3
 8012116:	23f8      	movs	r3, #248	; 0xf8
 8012118:	b29b      	uxth	r3, r3
 801211a:	3b03      	subs	r3, #3
 801211c:	b29b      	uxth	r3, r3
 801211e:	b219      	sxth	r1, r3
 8012120:	2342      	movs	r3, #66	; 0x42
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	2300      	movs	r3, #0
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	230b      	movs	r3, #11
 801212a:	2203      	movs	r2, #3
 801212c:	f7fc f844 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 8012130:	20f8      	movs	r0, #248	; 0xf8
 8012132:	4b3b      	ldr	r3, [pc, #236]	; (8012220 <Update_Blink+0x608>)
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	b2da      	uxtb	r2, r3
 8012138:	4b3f      	ldr	r3, [pc, #252]	; (8012238 <Update_Blink+0x620>)
 801213a:	2103      	movs	r1, #3
 801213c:	f7fb ff66 	bl	800e00c <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 8012140:	23f8      	movs	r3, #248	; 0xf8
 8012142:	b29b      	uxth	r3, r3
 8012144:	3336      	adds	r3, #54	; 0x36
 8012146:	b29b      	uxth	r3, r3
 8012148:	b218      	sxth	r0, r3
 801214a:	4b35      	ldr	r3, [pc, #212]	; (8012220 <Update_Blink+0x608>)
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	b2da      	uxtb	r2, r3
 8012150:	4b37      	ldr	r3, [pc, #220]	; (8012230 <Update_Blink+0x618>)
 8012152:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8012156:	4619      	mov	r1, r3
 8012158:	460b      	mov	r3, r1
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	440b      	add	r3, r1
 801215e:	005b      	lsls	r3, r3, #1
 8012160:	4936      	ldr	r1, [pc, #216]	; (801223c <Update_Blink+0x624>)
 8012162:	440b      	add	r3, r1
 8012164:	2103      	movs	r1, #3
 8012166:	f7fb ff51 	bl	800e00c <DispStr>
      break;
 801216a:	f000 bc4a 	b.w	8012a02 <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 801216e:	89bb      	ldrh	r3, [r7, #12]
 8012170:	2b0a      	cmp	r3, #10
 8012172:	d101      	bne.n	8012178 <Update_Blink+0x560>
 8012174:	2308      	movs	r3, #8
 8012176:	e000      	b.n	801217a <Update_Blink+0x562>
 8012178:	2309      	movs	r3, #9
 801217a:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 801217c:	4b28      	ldr	r3, [pc, #160]	; (8012220 <Update_Blink+0x608>)
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	b2db      	uxtb	r3, r3
 8012182:	2b00      	cmp	r3, #0
 8012184:	d00b      	beq.n	801219e <Update_Blink+0x586>
 8012186:	4a21      	ldr	r2, [pc, #132]	; (801220c <Update_Blink+0x5f4>)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801218e:	f043 0301 	orr.w	r3, r3, #1
 8012192:	b219      	sxth	r1, r3
 8012194:	4a1d      	ldr	r2, [pc, #116]	; (801220c <Update_Blink+0x5f4>)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801219c:	e00a      	b.n	80121b4 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 801219e:	4a1b      	ldr	r2, [pc, #108]	; (801220c <Update_Blink+0x5f4>)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80121a6:	f023 0301 	bic.w	r3, r3, #1
 80121aa:	b219      	sxth	r1, r3
 80121ac:	4a17      	ldr	r2, [pc, #92]	; (801220c <Update_Blink+0x5f4>)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 80121b4:	4b15      	ldr	r3, [pc, #84]	; (801220c <Update_Blink+0x5f4>)
 80121b6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80121ba:	461a      	mov	r2, r3
 80121bc:	4b13      	ldr	r3, [pc, #76]	; (801220c <Update_Blink+0x5f4>)
 80121be:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80121c2:	1ad3      	subs	r3, r2, r3
 80121c4:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 80121c6:	4b1a      	ldr	r3, [pc, #104]	; (8012230 <Update_Blink+0x618>)
 80121c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121cc:	461a      	mov	r2, r3
 80121ce:	4b1c      	ldr	r3, [pc, #112]	; (8012240 <Update_Blink+0x628>)
 80121d0:	5c9b      	ldrb	r3, [r3, r2]
 80121d2:	461c      	mov	r4, r3
 80121d4:	4b16      	ldr	r3, [pc, #88]	; (8012230 <Update_Blink+0x618>)
 80121d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121da:	461a      	mov	r2, r3
 80121dc:	4b19      	ldr	r3, [pc, #100]	; (8012244 <Update_Blink+0x62c>)
 80121de:	5c9b      	ldrb	r3, [r3, r2]
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7ff f8ed 	bl	80113c0 <Exp>
 80121e6:	4603      	mov	r3, r0
 80121e8:	fb03 f204 	mul.w	r2, r3, r4
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	fb02 f303 	mul.w	r3, r2, r3
 80121f2:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	db28      	blt.n	801224c <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80121fa:	2301      	movs	r3, #1
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	2303      	movs	r3, #3
 8012200:	4a11      	ldr	r2, [pc, #68]	; (8012248 <Update_Blink+0x630>)
 8012202:	6879      	ldr	r1, [r7, #4]
 8012204:	4805      	ldr	r0, [pc, #20]	; (801221c <Update_Blink+0x604>)
 8012206:	f7fe ffdf 	bl	80111c8 <Value2Str>
 801220a:	e027      	b.n	801225c <Update_Blink+0x644>
 801220c:	20000140 	.word	0x20000140
 8012210:	080021cc 	.word	0x080021cc
 8012214:	080021a4 	.word	0x080021a4
 8012218:	08001d9c 	.word	0x08001d9c
 801221c:	20002660 	.word	0x20002660
 8012220:	2000072c 	.word	0x2000072c
 8012224:	080009b4 	.word	0x080009b4
 8012228:	080009b8 	.word	0x080009b8
 801222c:	080021f8 	.word	0x080021f8
 8012230:	20000274 	.word	0x20000274
 8012234:	200001ac 	.word	0x200001ac
 8012238:	080009c4 	.word	0x080009c4
 801223c:	08001ce8 	.word	0x08001ce8
 8012240:	080021b8 	.word	0x080021b8
 8012244:	08002190 	.word	0x08002190
 8012248:	08001d84 	.word	0x08001d84
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 801224c:	2300      	movs	r3, #0
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	2303      	movs	r3, #3
 8012252:	4aa3      	ldr	r2, [pc, #652]	; (80124e0 <Update_Blink+0x8c8>)
 8012254:	6879      	ldr	r1, [r7, #4]
 8012256:	48a3      	ldr	r0, [pc, #652]	; (80124e4 <Update_Blink+0x8cc>)
 8012258:	f7fe ffb6 	bl	80111c8 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 801225c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012260:	4619      	mov	r1, r3
 8012262:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012266:	f7fb feb9 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801226a:	4b9f      	ldr	r3, [pc, #636]	; (80124e8 <Update_Blink+0x8d0>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	b2d8      	uxtb	r0, r3
 8012270:	2307      	movs	r3, #7
 8012272:	b29b      	uxth	r3, r3
 8012274:	3b03      	subs	r3, #3
 8012276:	b29b      	uxth	r3, r3
 8012278:	b219      	sxth	r1, r3
 801227a:	2336      	movs	r3, #54	; 0x36
 801227c:	9301      	str	r3, [sp, #4]
 801227e:	2300      	movs	r3, #0
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	230b      	movs	r3, #11
 8012284:	2203      	movs	r2, #3
 8012286:	f7fb ff97 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801228a:	2007      	movs	r0, #7
 801228c:	4b96      	ldr	r3, [pc, #600]	; (80124e8 <Update_Blink+0x8d0>)
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	b2db      	uxtb	r3, r3
 8012292:	3310      	adds	r3, #16
 8012294:	b2da      	uxtb	r2, r3
 8012296:	4b95      	ldr	r3, [pc, #596]	; (80124ec <Update_Blink+0x8d4>)
 8012298:	2103      	movs	r1, #3
 801229a:	f7fb feb7 	bl	800e00c <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 801229e:	2307      	movs	r3, #7
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	3306      	adds	r3, #6
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	b218      	sxth	r0, r3
 80122a8:	4b8f      	ldr	r3, [pc, #572]	; (80124e8 <Update_Blink+0x8d0>)
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	b2da      	uxtb	r2, r3
 80122ae:	4b90      	ldr	r3, [pc, #576]	; (80124f0 <Update_Blink+0x8d8>)
 80122b0:	2103      	movs	r1, #3
 80122b2:	f7fb feab 	bl	800e00c <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 80122b6:	2307      	movs	r3, #7
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	3312      	adds	r3, #18
 80122bc:	b29b      	uxth	r3, r3
 80122be:	b218      	sxth	r0, r3
 80122c0:	4b89      	ldr	r3, [pc, #548]	; (80124e8 <Update_Blink+0x8d0>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	b2da      	uxtb	r2, r3
 80122c6:	4b87      	ldr	r3, [pc, #540]	; (80124e4 <Update_Blink+0x8cc>)
 80122c8:	2103      	movs	r1, #3
 80122ca:	f7fb fe9f 	bl	800e00c <DispStr>
      break;
 80122ce:	e398      	b.n	8012a02 <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 80122d0:	4b85      	ldr	r3, [pc, #532]	; (80124e8 <Update_Blink+0x8d0>)
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d008      	beq.n	80122ec <Update_Blink+0x6d4>
 80122da:	4b86      	ldr	r3, [pc, #536]	; (80124f4 <Update_Blink+0x8dc>)
 80122dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122e0:	f043 0301 	orr.w	r3, r3, #1
 80122e4:	b21a      	sxth	r2, r3
 80122e6:	4b83      	ldr	r3, [pc, #524]	; (80124f4 <Update_Blink+0x8dc>)
 80122e8:	821a      	strh	r2, [r3, #16]
 80122ea:	e007      	b.n	80122fc <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 80122ec:	4b81      	ldr	r3, [pc, #516]	; (80124f4 <Update_Blink+0x8dc>)
 80122ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80122f2:	f023 0301 	bic.w	r3, r3, #1
 80122f6:	b21a      	sxth	r2, r3
 80122f8:	4b7e      	ldr	r3, [pc, #504]	; (80124f4 <Update_Blink+0x8dc>)
 80122fa:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 80122fc:	4b7a      	ldr	r3, [pc, #488]	; (80124e8 <Update_Blink+0x8d0>)
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	b2db      	uxtb	r3, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	d008      	beq.n	8012318 <Update_Blink+0x700>
 8012306:	4b7b      	ldr	r3, [pc, #492]	; (80124f4 <Update_Blink+0x8dc>)
 8012308:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801230c:	f043 0301 	orr.w	r3, r3, #1
 8012310:	b21a      	sxth	r2, r3
 8012312:	4b78      	ldr	r3, [pc, #480]	; (80124f4 <Update_Blink+0x8dc>)
 8012314:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012316:	e374      	b.n	8012a02 <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012318:	4b76      	ldr	r3, [pc, #472]	; (80124f4 <Update_Blink+0x8dc>)
 801231a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801231e:	f023 0301 	bic.w	r3, r3, #1
 8012322:	b21a      	sxth	r2, r3
 8012324:	4b73      	ldr	r3, [pc, #460]	; (80124f4 <Update_Blink+0x8dc>)
 8012326:	825a      	strh	r2, [r3, #18]
      break;
 8012328:	e36b      	b.n	8012a02 <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 801232a:	4b73      	ldr	r3, [pc, #460]	; (80124f8 <Update_Blink+0x8e0>)
 801232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012330:	b29b      	uxth	r3, r3
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	2b00      	cmp	r3, #0
 8012338:	f040 8362 	bne.w	8012a00 <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 801233c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012340:	4619      	mov	r1, r3
 8012342:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012346:	f7fb fe49 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 801234a:	4b67      	ldr	r3, [pc, #412]	; (80124e8 <Update_Blink+0x8d0>)
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	b2d8      	uxtb	r0, r3
 8012350:	89bb      	ldrh	r3, [r7, #12]
 8012352:	4a6a      	ldr	r2, [pc, #424]	; (80124fc <Update_Blink+0x8e4>)
 8012354:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012358:	b29b      	uxth	r3, r3
 801235a:	3b03      	subs	r3, #3
 801235c:	b29b      	uxth	r3, r3
 801235e:	b219      	sxth	r1, r3
 8012360:	2318      	movs	r3, #24
 8012362:	9301      	str	r3, [sp, #4]
 8012364:	2301      	movs	r3, #1
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	230b      	movs	r3, #11
 801236a:	22e1      	movs	r2, #225	; 0xe1
 801236c:	f7fb ff24 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012370:	89bb      	ldrh	r3, [r7, #12]
 8012372:	4a62      	ldr	r2, [pc, #392]	; (80124fc <Update_Blink+0x8e4>)
 8012374:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012378:	4b5b      	ldr	r3, [pc, #364]	; (80124e8 <Update_Blink+0x8d0>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	b2da      	uxtb	r2, r3
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	21e1      	movs	r1, #225	; 0xe1
 8012382:	f7fb fe43 	bl	800e00c <DispStr>
      }
      break;
 8012386:	e33b      	b.n	8012a00 <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012388:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801238c:	4619      	mov	r1, r3
 801238e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012392:	f7fb fe23 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012396:	4b54      	ldr	r3, [pc, #336]	; (80124e8 <Update_Blink+0x8d0>)
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	b2d8      	uxtb	r0, r3
 801239c:	23dd      	movs	r3, #221	; 0xdd
 801239e:	b29b      	uxth	r3, r3
 80123a0:	3b03      	subs	r3, #3
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	b219      	sxth	r1, r3
 80123a6:	2330      	movs	r3, #48	; 0x30
 80123a8:	9301      	str	r3, [sp, #4]
 80123aa:	2300      	movs	r3, #0
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	230b      	movs	r3, #11
 80123b0:	22e1      	movs	r2, #225	; 0xe1
 80123b2:	f7fb ff01 	bl	800e1b8 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80123b6:	20dd      	movs	r0, #221	; 0xdd
 80123b8:	4b4b      	ldr	r3, [pc, #300]	; (80124e8 <Update_Blink+0x8d0>)
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	3310      	adds	r3, #16
 80123c0:	b2da      	uxtb	r2, r3
 80123c2:	4b4f      	ldr	r3, [pc, #316]	; (8012500 <Update_Blink+0x8e8>)
 80123c4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <Update_Blink+0x7b8>
 80123cc:	4b4d      	ldr	r3, [pc, #308]	; (8012504 <Update_Blink+0x8ec>)
 80123ce:	e000      	b.n	80123d2 <Update_Blink+0x7ba>
 80123d0:	4b4d      	ldr	r3, [pc, #308]	; (8012508 <Update_Blink+0x8f0>)
 80123d2:	21e1      	movs	r1, #225	; 0xe1
 80123d4:	f7fc f884 	bl	800e4e0 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 80123d8:	4b49      	ldr	r3, [pc, #292]	; (8012500 <Update_Blink+0x8e8>)
 80123da:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80123de:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80123e0:	89fb      	ldrh	r3, [r7, #14]
 80123e2:	4a4a      	ldr	r2, [pc, #296]	; (801250c <Update_Blink+0x8f4>)
 80123e4:	5cd3      	ldrb	r3, [r2, r3]
 80123e6:	461c      	mov	r4, r3
 80123e8:	89fb      	ldrh	r3, [r7, #14]
 80123ea:	4a49      	ldr	r2, [pc, #292]	; (8012510 <Update_Blink+0x8f8>)
 80123ec:	5cd3      	ldrb	r3, [r2, r3]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fe ffe6 	bl	80113c0 <Exp>
 80123f4:	4603      	mov	r3, r0
 80123f6:	fb03 f204 	mul.w	r2, r3, r4
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	fb02 f303 	mul.w	r3, r2, r3
 8012400:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012402:	2301      	movs	r3, #1
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	2302      	movs	r3, #2
 8012408:	4a42      	ldr	r2, [pc, #264]	; (8012514 <Update_Blink+0x8fc>)
 801240a:	6879      	ldr	r1, [r7, #4]
 801240c:	4835      	ldr	r0, [pc, #212]	; (80124e4 <Update_Blink+0x8cc>)
 801240e:	f7fe fedb 	bl	80111c8 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012412:	23e7      	movs	r3, #231	; 0xe7
 8012414:	b29b      	uxth	r3, r3
 8012416:	3309      	adds	r3, #9
 8012418:	b29b      	uxth	r3, r3
 801241a:	b218      	sxth	r0, r3
 801241c:	4b32      	ldr	r3, [pc, #200]	; (80124e8 <Update_Blink+0x8d0>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	b2da      	uxtb	r2, r3
 8012422:	4b3d      	ldr	r3, [pc, #244]	; (8012518 <Update_Blink+0x900>)
 8012424:	21e1      	movs	r1, #225	; 0xe1
 8012426:	f7fb fdf1 	bl	800e00c <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 801242a:	20e7      	movs	r0, #231	; 0xe7
 801242c:	4b2e      	ldr	r3, [pc, #184]	; (80124e8 <Update_Blink+0x8d0>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	b2db      	uxtb	r3, r3
 8012432:	3310      	adds	r3, #16
 8012434:	b2da      	uxtb	r2, r3
 8012436:	4b39      	ldr	r3, [pc, #228]	; (801251c <Update_Blink+0x904>)
 8012438:	21e1      	movs	r1, #225	; 0xe1
 801243a:	f7fc f851 	bl	800e4e0 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 801243e:	23e7      	movs	r3, #231	; 0xe7
 8012440:	b29b      	uxth	r3, r3
 8012442:	3309      	adds	r3, #9
 8012444:	b29b      	uxth	r3, r3
 8012446:	b218      	sxth	r0, r3
 8012448:	4b27      	ldr	r3, [pc, #156]	; (80124e8 <Update_Blink+0x8d0>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	b2da      	uxtb	r2, r3
 801244e:	4b25      	ldr	r3, [pc, #148]	; (80124e4 <Update_Blink+0x8cc>)
 8012450:	21e1      	movs	r1, #225	; 0xe1
 8012452:	f7fb fddb 	bl	800e00c <DispStr>
      break;
 8012456:	e2d4      	b.n	8012a02 <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012458:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801245c:	4619      	mov	r1, r3
 801245e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012462:	f7fb fdbb 	bl	800dfdc <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012466:	20cf      	movs	r0, #207	; 0xcf
 8012468:	4b25      	ldr	r3, [pc, #148]	; (8012500 <Update_Blink+0x8e8>)
 801246a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801246e:	2b00      	cmp	r3, #0
 8012470:	d001      	beq.n	8012476 <Update_Blink+0x85e>
 8012472:	4b2b      	ldr	r3, [pc, #172]	; (8012520 <Update_Blink+0x908>)
 8012474:	e000      	b.n	8012478 <Update_Blink+0x860>
 8012476:	4b2b      	ldr	r3, [pc, #172]	; (8012524 <Update_Blink+0x90c>)
 8012478:	2210      	movs	r2, #16
 801247a:	21e1      	movs	r1, #225	; 0xe1
 801247c:	f7fc f830 	bl	800e4e0 <DispStr10x14>
      break;
 8012480:	e2bf      	b.n	8012a02 <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012482:	4b19      	ldr	r3, [pc, #100]	; (80124e8 <Update_Blink+0x8d0>)
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d008      	beq.n	801249e <Update_Blink+0x886>
 801248c:	4b19      	ldr	r3, [pc, #100]	; (80124f4 <Update_Blink+0x8dc>)
 801248e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012492:	f043 0301 	orr.w	r3, r3, #1
 8012496:	b21a      	sxth	r2, r3
 8012498:	4b16      	ldr	r3, [pc, #88]	; (80124f4 <Update_Blink+0x8dc>)
 801249a:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 801249c:	e2b1      	b.n	8012a02 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 801249e:	4b15      	ldr	r3, [pc, #84]	; (80124f4 <Update_Blink+0x8dc>)
 80124a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124a4:	f023 0301 	bic.w	r3, r3, #1
 80124a8:	b21a      	sxth	r2, r3
 80124aa:	4b12      	ldr	r3, [pc, #72]	; (80124f4 <Update_Blink+0x8dc>)
 80124ac:	811a      	strh	r2, [r3, #8]
      break;
 80124ae:	e2a8      	b.n	8012a02 <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 80124b0:	4b0d      	ldr	r3, [pc, #52]	; (80124e8 <Update_Blink+0x8d0>)
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d008      	beq.n	80124cc <Update_Blink+0x8b4>
 80124ba:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <Update_Blink+0x8dc>)
 80124bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124c0:	f043 0301 	orr.w	r3, r3, #1
 80124c4:	b21a      	sxth	r2, r3
 80124c6:	4b0b      	ldr	r3, [pc, #44]	; (80124f4 <Update_Blink+0x8dc>)
 80124c8:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 80124ca:	e29a      	b.n	8012a02 <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 80124cc:	4b09      	ldr	r3, [pc, #36]	; (80124f4 <Update_Blink+0x8dc>)
 80124ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124d2:	f023 0301 	bic.w	r3, r3, #1
 80124d6:	b21a      	sxth	r2, r3
 80124d8:	4b06      	ldr	r3, [pc, #24]	; (80124f4 <Update_Blink+0x8dc>)
 80124da:	811a      	strh	r2, [r3, #8]
      break;
 80124dc:	e291      	b.n	8012a02 <Update_Blink+0xdea>
 80124de:	bf00      	nop
 80124e0:	08001d84 	.word	0x08001d84
 80124e4:	20002660 	.word	0x20002660
 80124e8:	2000072c 	.word	0x2000072c
 80124ec:	080009b4 	.word	0x080009b4
 80124f0:	080009d0 	.word	0x080009d0
 80124f4:	20000140 	.word	0x20000140
 80124f8:	20002656 	.word	0x20002656
 80124fc:	080021f8 	.word	0x080021f8
 8012500:	20000274 	.word	0x20000274
 8012504:	080009dc 	.word	0x080009dc
 8012508:	080009e0 	.word	0x080009e0
 801250c:	080021cc 	.word	0x080021cc
 8012510:	080021a4 	.word	0x080021a4
 8012514:	08001d9c 	.word	0x08001d9c
 8012518:	080009e4 	.word	0x080009e4
 801251c:	080009ec 	.word	0x080009ec
 8012520:	080009f0 	.word	0x080009f0
 8012524:	080009b0 	.word	0x080009b0

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012528:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801252c:	4619      	mov	r1, r3
 801252e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012532:	f7fb fd53 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012536:	4b93      	ldr	r3, [pc, #588]	; (8012784 <Update_Blink+0xb6c>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	b2d8      	uxtb	r0, r3
 801253c:	89bb      	ldrh	r3, [r7, #12]
 801253e:	4a92      	ldr	r2, [pc, #584]	; (8012788 <Update_Blink+0xb70>)
 8012540:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012544:	b29b      	uxth	r3, r3
 8012546:	3b03      	subs	r3, #3
 8012548:	b29b      	uxth	r3, r3
 801254a:	b219      	sxth	r1, r3
 801254c:	231e      	movs	r3, #30
 801254e:	9301      	str	r3, [sp, #4]
 8012550:	2301      	movs	r3, #1
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	230b      	movs	r3, #11
 8012556:	22e1      	movs	r2, #225	; 0xe1
 8012558:	f7fb fe2e 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 801255c:	89bb      	ldrh	r3, [r7, #12]
 801255e:	4a8a      	ldr	r2, [pc, #552]	; (8012788 <Update_Blink+0xb70>)
 8012560:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012564:	4b87      	ldr	r3, [pc, #540]	; (8012784 <Update_Blink+0xb6c>)
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	b2da      	uxtb	r2, r3
 801256a:	4b88      	ldr	r3, [pc, #544]	; (801278c <Update_Blink+0xb74>)
 801256c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00a      	beq.n	801258a <Update_Blink+0x972>
 8012574:	4b85      	ldr	r3, [pc, #532]	; (801278c <Update_Blink+0xb74>)
 8012576:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801257a:	4619      	mov	r1, r3
 801257c:	460b      	mov	r3, r1
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	440b      	add	r3, r1
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	4982      	ldr	r1, [pc, #520]	; (8012790 <Update_Blink+0xb78>)
 8012586:	440b      	add	r3, r1
 8012588:	e000      	b.n	801258c <Update_Blink+0x974>
 801258a:	4b82      	ldr	r3, [pc, #520]	; (8012794 <Update_Blink+0xb7c>)
 801258c:	21e1      	movs	r1, #225	; 0xe1
 801258e:	f7fb fd3d 	bl	800e00c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012592:	4b81      	ldr	r3, [pc, #516]	; (8012798 <Update_Blink+0xb80>)
 8012594:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012598:	f023 0301 	bic.w	r3, r3, #1
 801259c:	b21a      	sxth	r2, r3
 801259e:	4b7e      	ldr	r3, [pc, #504]	; (8012798 <Update_Blink+0xb80>)
 80125a0:	805a      	strh	r2, [r3, #2]
      break;
 80125a2:	e22e      	b.n	8012a02 <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 80125a4:	4b77      	ldr	r3, [pc, #476]	; (8012784 <Update_Blink+0xb6c>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d008      	beq.n	80125c0 <Update_Blink+0x9a8>
 80125ae:	4b7a      	ldr	r3, [pc, #488]	; (8012798 <Update_Blink+0xb80>)
 80125b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125b4:	f043 0301 	orr.w	r3, r3, #1
 80125b8:	b21a      	sxth	r2, r3
 80125ba:	4b77      	ldr	r3, [pc, #476]	; (8012798 <Update_Blink+0xb80>)
 80125bc:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 80125be:	e220      	b.n	8012a02 <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 80125c0:	4b75      	ldr	r3, [pc, #468]	; (8012798 <Update_Blink+0xb80>)
 80125c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80125c6:	f023 0301 	bic.w	r3, r3, #1
 80125ca:	b21a      	sxth	r2, r3
 80125cc:	4b72      	ldr	r3, [pc, #456]	; (8012798 <Update_Blink+0xb80>)
 80125ce:	805a      	strh	r2, [r3, #2]
      break;
 80125d0:	e217      	b.n	8012a02 <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 80125d2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80125d6:	4619      	mov	r1, r3
 80125d8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80125dc:	f7fb fcfe 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 80125e0:	4b68      	ldr	r3, [pc, #416]	; (8012784 <Update_Blink+0xb6c>)
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	b2d8      	uxtb	r0, r3
 80125e6:	89bb      	ldrh	r3, [r7, #12]
 80125e8:	4a67      	ldr	r2, [pc, #412]	; (8012788 <Update_Blink+0xb70>)
 80125ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	3b03      	subs	r3, #3
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	b219      	sxth	r1, r3
 80125f6:	231e      	movs	r3, #30
 80125f8:	9301      	str	r3, [sp, #4]
 80125fa:	2301      	movs	r3, #1
 80125fc:	9300      	str	r3, [sp, #0]
 80125fe:	230b      	movs	r3, #11
 8012600:	22e1      	movs	r2, #225	; 0xe1
 8012602:	f7fb fdd9 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012606:	89bb      	ldrh	r3, [r7, #12]
 8012608:	4a5f      	ldr	r2, [pc, #380]	; (8012788 <Update_Blink+0xb70>)
 801260a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801260e:	4b5d      	ldr	r3, [pc, #372]	; (8012784 <Update_Blink+0xb6c>)
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	b2da      	uxtb	r2, r3
 8012614:	4b5d      	ldr	r3, [pc, #372]	; (801278c <Update_Blink+0xb74>)
 8012616:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00a      	beq.n	8012634 <Update_Blink+0xa1c>
 801261e:	4b5b      	ldr	r3, [pc, #364]	; (801278c <Update_Blink+0xb74>)
 8012620:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012624:	4619      	mov	r1, r3
 8012626:	460b      	mov	r3, r1
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	440b      	add	r3, r1
 801262c:	005b      	lsls	r3, r3, #1
 801262e:	4958      	ldr	r1, [pc, #352]	; (8012790 <Update_Blink+0xb78>)
 8012630:	440b      	add	r3, r1
 8012632:	e000      	b.n	8012636 <Update_Blink+0xa1e>
 8012634:	4b57      	ldr	r3, [pc, #348]	; (8012794 <Update_Blink+0xb7c>)
 8012636:	21e1      	movs	r1, #225	; 0xe1
 8012638:	f7fb fce8 	bl	800e00c <DispStr>
      ParamTab[P2F] &= ~D_HID;
 801263c:	4b56      	ldr	r3, [pc, #344]	; (8012798 <Update_Blink+0xb80>)
 801263e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012642:	f023 0301 	bic.w	r3, r3, #1
 8012646:	b21a      	sxth	r2, r3
 8012648:	4b53      	ldr	r3, [pc, #332]	; (8012798 <Update_Blink+0xb80>)
 801264a:	805a      	strh	r2, [r3, #2]
      break;
 801264c:	e1d9      	b.n	8012a02 <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 801264e:	f240 531f 	movw	r3, #1311	; 0x51f
 8012652:	4619      	mov	r1, r3
 8012654:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012658:	f7fb fcc0 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 801265c:	4b49      	ldr	r3, [pc, #292]	; (8012784 <Update_Blink+0xb6c>)
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	b2d8      	uxtb	r0, r3
 8012662:	2307      	movs	r3, #7
 8012664:	b29b      	uxth	r3, r3
 8012666:	3b03      	subs	r3, #3
 8012668:	b29b      	uxth	r3, r3
 801266a:	b219      	sxth	r1, r3
 801266c:	2336      	movs	r3, #54	; 0x36
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	2300      	movs	r3, #0
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	230b      	movs	r3, #11
 8012676:	2203      	movs	r2, #3
 8012678:	f7fb fd9e 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 801267c:	89bb      	ldrh	r3, [r7, #12]
 801267e:	4a42      	ldr	r2, [pc, #264]	; (8012788 <Update_Blink+0xb70>)
 8012680:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012684:	4b3f      	ldr	r3, [pc, #252]	; (8012784 <Update_Blink+0xb6c>)
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	b2da      	uxtb	r2, r3
 801268a:	4b44      	ldr	r3, [pc, #272]	; (801279c <Update_Blink+0xb84>)
 801268c:	2103      	movs	r1, #3
 801268e:	f7fb fcbd 	bl	800e00c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012692:	89bb      	ldrh	r3, [r7, #12]
 8012694:	4a3c      	ldr	r2, [pc, #240]	; (8012788 <Update_Blink+0xb70>)
 8012696:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801269a:	b29b      	uxth	r3, r3
 801269c:	3318      	adds	r3, #24
 801269e:	b29b      	uxth	r3, r3
 80126a0:	b218      	sxth	r0, r3
 80126a2:	4b38      	ldr	r3, [pc, #224]	; (8012784 <Update_Blink+0xb6c>)
 80126a4:	781b      	ldrb	r3, [r3, #0]
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	4b3d      	ldr	r3, [pc, #244]	; (80127a0 <Update_Blink+0xb88>)
 80126aa:	2103      	movs	r1, #3
 80126ac:	f7fb fcae 	bl	800e00c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 80126b0:	89bb      	ldrh	r3, [r7, #12]
 80126b2:	4a35      	ldr	r2, [pc, #212]	; (8012788 <Update_Blink+0xb70>)
 80126b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	3318      	adds	r3, #24
 80126bc:	b29b      	uxth	r3, r3
 80126be:	b218      	sxth	r0, r3
 80126c0:	4b30      	ldr	r3, [pc, #192]	; (8012784 <Update_Blink+0xb6c>)
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	b2da      	uxtb	r2, r3
 80126c6:	89bb      	ldrh	r3, [r7, #12]
 80126c8:	4930      	ldr	r1, [pc, #192]	; (801278c <Update_Blink+0xb74>)
 80126ca:	00db      	lsls	r3, r3, #3
 80126cc:	440b      	add	r3, r1
 80126ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80126d2:	4619      	mov	r1, r3
 80126d4:	460b      	mov	r3, r1
 80126d6:	005b      	lsls	r3, r3, #1
 80126d8:	440b      	add	r3, r1
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	4931      	ldr	r1, [pc, #196]	; (80127a4 <Update_Blink+0xb8c>)
 80126de:	440b      	add	r3, r1
 80126e0:	2103      	movs	r1, #3
 80126e2:	f7fb fc93 	bl	800e00c <DispStr>
      break;
 80126e6:	e18c      	b.n	8012a02 <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 80126e8:	f240 531f 	movw	r3, #1311	; 0x51f
 80126ec:	4619      	mov	r1, r3
 80126ee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80126f2:	f7fb fc73 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 80126f6:	4b23      	ldr	r3, [pc, #140]	; (8012784 <Update_Blink+0xb6c>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	b2d8      	uxtb	r0, r3
 80126fc:	2307      	movs	r3, #7
 80126fe:	b29b      	uxth	r3, r3
 8012700:	3b03      	subs	r3, #3
 8012702:	b29b      	uxth	r3, r3
 8012704:	b219      	sxth	r1, r3
 8012706:	2336      	movs	r3, #54	; 0x36
 8012708:	9301      	str	r3, [sp, #4]
 801270a:	2300      	movs	r3, #0
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	230b      	movs	r3, #11
 8012710:	2203      	movs	r2, #3
 8012712:	f7fb fd51 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012716:	89bb      	ldrh	r3, [r7, #12]
 8012718:	4a1b      	ldr	r2, [pc, #108]	; (8012788 <Update_Blink+0xb70>)
 801271a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801271e:	4b19      	ldr	r3, [pc, #100]	; (8012784 <Update_Blink+0xb6c>)
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	b2da      	uxtb	r2, r3
 8012724:	4b1d      	ldr	r3, [pc, #116]	; (801279c <Update_Blink+0xb84>)
 8012726:	2103      	movs	r1, #3
 8012728:	f7fb fc70 	bl	800e00c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 801272c:	89bb      	ldrh	r3, [r7, #12]
 801272e:	4a16      	ldr	r2, [pc, #88]	; (8012788 <Update_Blink+0xb70>)
 8012730:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012734:	b29b      	uxth	r3, r3
 8012736:	3318      	adds	r3, #24
 8012738:	b29b      	uxth	r3, r3
 801273a:	b218      	sxth	r0, r3
 801273c:	4b11      	ldr	r3, [pc, #68]	; (8012784 <Update_Blink+0xb6c>)
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	b2da      	uxtb	r2, r3
 8012742:	4b17      	ldr	r3, [pc, #92]	; (80127a0 <Update_Blink+0xb88>)
 8012744:	2103      	movs	r1, #3
 8012746:	f7fb fc61 	bl	800e00c <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 801274a:	89bb      	ldrh	r3, [r7, #12]
 801274c:	4a0e      	ldr	r2, [pc, #56]	; (8012788 <Update_Blink+0xb70>)
 801274e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012752:	b29b      	uxth	r3, r3
 8012754:	3318      	adds	r3, #24
 8012756:	b29b      	uxth	r3, r3
 8012758:	b218      	sxth	r0, r3
 801275a:	4b0a      	ldr	r3, [pc, #40]	; (8012784 <Update_Blink+0xb6c>)
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	b2da      	uxtb	r2, r3
 8012760:	89bb      	ldrh	r3, [r7, #12]
 8012762:	490a      	ldr	r1, [pc, #40]	; (801278c <Update_Blink+0xb74>)
 8012764:	00db      	lsls	r3, r3, #3
 8012766:	440b      	add	r3, r1
 8012768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801276c:	4619      	mov	r1, r3
 801276e:	460b      	mov	r3, r1
 8012770:	005b      	lsls	r3, r3, #1
 8012772:	440b      	add	r3, r1
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	490c      	ldr	r1, [pc, #48]	; (80127a8 <Update_Blink+0xb90>)
 8012778:	440b      	add	r3, r1
 801277a:	2103      	movs	r1, #3
 801277c:	f7fb fc46 	bl	800e00c <DispStr>
      break;
 8012780:	e13f      	b.n	8012a02 <Update_Blink+0xdea>
 8012782:	bf00      	nop
 8012784:	2000072c 	.word	0x2000072c
 8012788:	080021f8 	.word	0x080021f8
 801278c:	20000274 	.word	0x20000274
 8012790:	08001d24 	.word	0x08001d24
 8012794:	08001d48 	.word	0x08001d48
 8012798:	20000140 	.word	0x20000140
 801279c:	080009f4 	.word	0x080009f4
 80127a0:	080009e4 	.word	0x080009e4
 80127a4:	08001dec 	.word	0x08001dec
 80127a8:	08001f34 	.word	0x08001f34

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 80127ac:	f240 531f 	movw	r3, #1311	; 0x51f
 80127b0:	4619      	mov	r1, r3
 80127b2:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80127b6:	f7fb fc11 	bl	800dfdc <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 80127ba:	89bb      	ldrh	r3, [r7, #12]
 80127bc:	4a96      	ldr	r2, [pc, #600]	; (8012a18 <Update_Blink+0xe00>)
 80127be:	00db      	lsls	r3, r3, #3
 80127c0:	4413      	add	r3, r2
 80127c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80127c6:	461a      	mov	r2, r3
 80127c8:	4613      	mov	r3, r2
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	4413      	add	r3, r2
 80127ce:	005b      	lsls	r3, r3, #1
 80127d0:	4619      	mov	r1, r3
 80127d2:	89bb      	ldrh	r3, [r7, #12]
 80127d4:	4a90      	ldr	r2, [pc, #576]	; (8012a18 <Update_Blink+0xe00>)
 80127d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127da:	2301      	movs	r3, #1
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	2302      	movs	r3, #2
 80127e0:	488e      	ldr	r0, [pc, #568]	; (8012a1c <Update_Blink+0xe04>)
 80127e2:	f7fe fcf1 	bl	80111c8 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 80127e6:	4b8e      	ldr	r3, [pc, #568]	; (8012a20 <Update_Blink+0xe08>)
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	b2d8      	uxtb	r0, r3
 80127ec:	2307      	movs	r3, #7
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	3b03      	subs	r3, #3
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	b219      	sxth	r1, r3
 80127f6:	2336      	movs	r3, #54	; 0x36
 80127f8:	9301      	str	r3, [sp, #4]
 80127fa:	2300      	movs	r3, #0
 80127fc:	9300      	str	r3, [sp, #0]
 80127fe:	230b      	movs	r3, #11
 8012800:	2203      	movs	r2, #3
 8012802:	f7fb fcd9 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 8012806:	89bb      	ldrh	r3, [r7, #12]
 8012808:	4a86      	ldr	r2, [pc, #536]	; (8012a24 <Update_Blink+0xe0c>)
 801280a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801280e:	4b84      	ldr	r3, [pc, #528]	; (8012a20 <Update_Blink+0xe08>)
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	b2da      	uxtb	r2, r3
 8012814:	4b84      	ldr	r3, [pc, #528]	; (8012a28 <Update_Blink+0xe10>)
 8012816:	2103      	movs	r1, #3
 8012818:	f7fb fbf8 	bl	800e00c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 801281c:	89bb      	ldrh	r3, [r7, #12]
 801281e:	4a81      	ldr	r2, [pc, #516]	; (8012a24 <Update_Blink+0xe0c>)
 8012820:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012824:	b29b      	uxth	r3, r3
 8012826:	3324      	adds	r3, #36	; 0x24
 8012828:	b29b      	uxth	r3, r3
 801282a:	b218      	sxth	r0, r3
 801282c:	4b7c      	ldr	r3, [pc, #496]	; (8012a20 <Update_Blink+0xe08>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	b2da      	uxtb	r2, r3
 8012832:	4b7e      	ldr	r3, [pc, #504]	; (8012a2c <Update_Blink+0xe14>)
 8012834:	2103      	movs	r1, #3
 8012836:	f7fb fbe9 	bl	800e00c <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 801283a:	89bb      	ldrh	r3, [r7, #12]
 801283c:	4a79      	ldr	r2, [pc, #484]	; (8012a24 <Update_Blink+0xe0c>)
 801283e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012842:	b29b      	uxth	r3, r3
 8012844:	3324      	adds	r3, #36	; 0x24
 8012846:	b29b      	uxth	r3, r3
 8012848:	b218      	sxth	r0, r3
 801284a:	4b75      	ldr	r3, [pc, #468]	; (8012a20 <Update_Blink+0xe08>)
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	b2da      	uxtb	r2, r3
 8012850:	4b72      	ldr	r3, [pc, #456]	; (8012a1c <Update_Blink+0xe04>)
 8012852:	2103      	movs	r1, #3
 8012854:	f7fb fbda 	bl	800e00c <DispStr>
      break;
 8012858:	e0d3      	b.n	8012a02 <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 801285a:	4b71      	ldr	r3, [pc, #452]	; (8012a20 <Update_Blink+0xe08>)
 801285c:	781b      	ldrb	r3, [r3, #0]
 801285e:	b2db      	uxtb	r3, r3
 8012860:	2b00      	cmp	r3, #0
 8012862:	d008      	beq.n	8012876 <Update_Blink+0xc5e>
 8012864:	4b72      	ldr	r3, [pc, #456]	; (8012a30 <Update_Blink+0xe18>)
 8012866:	f9b3 3000 	ldrsh.w	r3, [r3]
 801286a:	f043 0304 	orr.w	r3, r3, #4
 801286e:	b21a      	sxth	r2, r3
 8012870:	4b6f      	ldr	r3, [pc, #444]	; (8012a30 <Update_Blink+0xe18>)
 8012872:	801a      	strh	r2, [r3, #0]
 8012874:	e007      	b.n	8012886 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8012876:	4b6e      	ldr	r3, [pc, #440]	; (8012a30 <Update_Blink+0xe18>)
 8012878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801287c:	f023 0304 	bic.w	r3, r3, #4
 8012880:	b21a      	sxth	r2, r3
 8012882:	4b6b      	ldr	r3, [pc, #428]	; (8012a30 <Update_Blink+0xe18>)
 8012884:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 8012886:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801288a:	4619      	mov	r1, r3
 801288c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012890:	f7fb fba4 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012894:	4b62      	ldr	r3, [pc, #392]	; (8012a20 <Update_Blink+0xe08>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	b2d8      	uxtb	r0, r3
 801289a:	89bb      	ldrh	r3, [r7, #12]
 801289c:	4a61      	ldr	r2, [pc, #388]	; (8012a24 <Update_Blink+0xe0c>)
 801289e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	3b03      	subs	r3, #3
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	b219      	sxth	r1, r3
 80128aa:	2336      	movs	r3, #54	; 0x36
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	2300      	movs	r3, #0
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	230b      	movs	r3, #11
 80128b4:	2203      	movs	r2, #3
 80128b6:	f7fb fc7f 	bl	800e1b8 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 80128ba:	89bb      	ldrh	r3, [r7, #12]
 80128bc:	4a59      	ldr	r2, [pc, #356]	; (8012a24 <Update_Blink+0xe0c>)
 80128be:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80128c2:	4b57      	ldr	r3, [pc, #348]	; (8012a20 <Update_Blink+0xe08>)
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	b2da      	uxtb	r2, r3
 80128c8:	4b5a      	ldr	r3, [pc, #360]	; (8012a34 <Update_Blink+0xe1c>)
 80128ca:	2103      	movs	r1, #3
 80128cc:	f7fb fb9e 	bl	800e00c <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 80128d0:	89bb      	ldrh	r3, [r7, #12]
 80128d2:	4a54      	ldr	r2, [pc, #336]	; (8012a24 <Update_Blink+0xe0c>)
 80128d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	3328      	adds	r3, #40	; 0x28
 80128dc:	b29b      	uxth	r3, r3
 80128de:	b218      	sxth	r0, r3
 80128e0:	4b4f      	ldr	r3, [pc, #316]	; (8012a20 <Update_Blink+0xe08>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	3310      	adds	r3, #16
 80128e8:	b2da      	uxtb	r2, r3
 80128ea:	4b53      	ldr	r3, [pc, #332]	; (8012a38 <Update_Blink+0xe20>)
 80128ec:	2103      	movs	r1, #3
 80128ee:	f7fb fb8d 	bl	800e00c <DispStr>
      break;
 80128f2:	e086      	b.n	8012a02 <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 80128f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80128f8:	4619      	mov	r1, r3
 80128fa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80128fe:	f7fb fb6d 	bl	800dfdc <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012902:	4b47      	ldr	r3, [pc, #284]	; (8012a20 <Update_Blink+0xe08>)
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	b2d8      	uxtb	r0, r3
 8012908:	89bb      	ldrh	r3, [r7, #12]
 801290a:	4a46      	ldr	r2, [pc, #280]	; (8012a24 <Update_Blink+0xe0c>)
 801290c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012910:	b29b      	uxth	r3, r3
 8012912:	3b03      	subs	r3, #3
 8012914:	b29b      	uxth	r3, r3
 8012916:	b219      	sxth	r1, r3
 8012918:	2336      	movs	r3, #54	; 0x36
 801291a:	9301      	str	r3, [sp, #4]
 801291c:	2300      	movs	r3, #0
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	230b      	movs	r3, #11
 8012922:	2203      	movs	r2, #3
 8012924:	f7fb fc48 	bl	800e1b8 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8012928:	89bb      	ldrh	r3, [r7, #12]
 801292a:	4a3e      	ldr	r2, [pc, #248]	; (8012a24 <Update_Blink+0xe0c>)
 801292c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012930:	4b3b      	ldr	r3, [pc, #236]	; (8012a20 <Update_Blink+0xe08>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	b2da      	uxtb	r2, r3
 8012936:	4b3f      	ldr	r3, [pc, #252]	; (8012a34 <Update_Blink+0xe1c>)
 8012938:	2103      	movs	r1, #3
 801293a:	f7fb fb67 	bl	800e00c <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801293e:	89bb      	ldrh	r3, [r7, #12]
 8012940:	4a38      	ldr	r2, [pc, #224]	; (8012a24 <Update_Blink+0xe0c>)
 8012942:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012946:	b29b      	uxth	r3, r3
 8012948:	3328      	adds	r3, #40	; 0x28
 801294a:	b29b      	uxth	r3, r3
 801294c:	b218      	sxth	r0, r3
 801294e:	4b34      	ldr	r3, [pc, #208]	; (8012a20 <Update_Blink+0xe08>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	b2db      	uxtb	r3, r3
 8012954:	3310      	adds	r3, #16
 8012956:	b2da      	uxtb	r2, r3
 8012958:	4b37      	ldr	r3, [pc, #220]	; (8012a38 <Update_Blink+0xe20>)
 801295a:	2103      	movs	r1, #3
 801295c:	f7fb fb56 	bl	800e00c <DispStr>
      break;
 8012960:	e04f      	b.n	8012a02 <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 8012962:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012966:	4619      	mov	r1, r3
 8012968:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801296c:	f7fb fb36 	bl	800dfdc <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 8012970:	4b29      	ldr	r3, [pc, #164]	; (8012a18 <Update_Blink+0xe00>)
 8012972:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8012976:	4619      	mov	r1, r3
 8012978:	2301      	movs	r3, #1
 801297a:	9300      	str	r3, [sp, #0]
 801297c:	2302      	movs	r3, #2
 801297e:	4a2f      	ldr	r2, [pc, #188]	; (8012a3c <Update_Blink+0xe24>)
 8012980:	4826      	ldr	r0, [pc, #152]	; (8012a1c <Update_Blink+0xe04>)
 8012982:	f7fe fc21 	bl	80111c8 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012986:	4b26      	ldr	r3, [pc, #152]	; (8012a20 <Update_Blink+0xe08>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	b2d8      	uxtb	r0, r3
 801298c:	89bb      	ldrh	r3, [r7, #12]
 801298e:	4a25      	ldr	r2, [pc, #148]	; (8012a24 <Update_Blink+0xe0c>)
 8012990:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012994:	b29b      	uxth	r3, r3
 8012996:	3b03      	subs	r3, #3
 8012998:	b29b      	uxth	r3, r3
 801299a:	b219      	sxth	r1, r3
 801299c:	2336      	movs	r3, #54	; 0x36
 801299e:	9301      	str	r3, [sp, #4]
 80129a0:	2300      	movs	r3, #0
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	230b      	movs	r3, #11
 80129a6:	2203      	movs	r2, #3
 80129a8:	f7fb fc06 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 80129ac:	89bb      	ldrh	r3, [r7, #12]
 80129ae:	4a1d      	ldr	r2, [pc, #116]	; (8012a24 <Update_Blink+0xe0c>)
 80129b0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80129b4:	4b1a      	ldr	r3, [pc, #104]	; (8012a20 <Update_Blink+0xe08>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	4b21      	ldr	r3, [pc, #132]	; (8012a40 <Update_Blink+0xe28>)
 80129bc:	2103      	movs	r1, #3
 80129be:	f7fb fb25 	bl	800e00c <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 80129c2:	89bb      	ldrh	r3, [r7, #12]
 80129c4:	4a17      	ldr	r2, [pc, #92]	; (8012a24 <Update_Blink+0xe0c>)
 80129c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	3306      	adds	r3, #6
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	b218      	sxth	r0, r3
 80129d2:	4b13      	ldr	r3, [pc, #76]	; (8012a20 <Update_Blink+0xe08>)
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	4b10      	ldr	r3, [pc, #64]	; (8012a1c <Update_Blink+0xe04>)
 80129da:	2103      	movs	r1, #3
 80129dc:	f7fb fb16 	bl	800e00c <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 80129e0:	89bb      	ldrh	r3, [r7, #12]
 80129e2:	4a10      	ldr	r2, [pc, #64]	; (8012a24 <Update_Blink+0xe0c>)
 80129e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	331e      	adds	r3, #30
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	b218      	sxth	r0, r3
 80129f0:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <Update_Blink+0xe08>)
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	4b13      	ldr	r3, [pc, #76]	; (8012a44 <Update_Blink+0xe2c>)
 80129f8:	2103      	movs	r1, #3
 80129fa:	f7fb fb07 	bl	800e00c <DispStr>
      break;
 80129fe:	e000      	b.n	8012a02 <Update_Blink+0xdea>
      break;
 8012a00:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 8012a02:	89bb      	ldrh	r3, [r7, #12]
 8012a04:	2b03      	cmp	r3, #3
 8012a06:	d002      	beq.n	8012a0e <Update_Blink+0xdf6>
 8012a08:	4b09      	ldr	r3, [pc, #36]	; (8012a30 <Update_Blink+0xe18>)
 8012a0a:	2202      	movs	r2, #2
 8012a0c:	801a      	strh	r2, [r3, #0]
  }
}
 8012a0e:	bf00      	nop
 8012a10:	3714      	adds	r7, #20
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd90      	pop	{r4, r7, pc}
 8012a16:	bf00      	nop
 8012a18:	20000274 	.word	0x20000274
 8012a1c:	20002660 	.word	0x20002660
 8012a20:	2000072c 	.word	0x2000072c
 8012a24:	080021f8 	.word	0x080021f8
 8012a28:	080009fc 	.word	0x080009fc
 8012a2c:	08000a04 	.word	0x08000a04
 8012a30:	20000140 	.word	0x20000140
 8012a34:	08000a08 	.word	0x08000a08
 8012a38:	08000a14 	.word	0x08000a14
 8012a3c:	20000524 	.word	0x20000524
 8012a40:	08000a18 	.word	0x08000a18
 8012a44:	08000a1c 	.word	0x08000a1c

08012a48 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 8012a48:	b590      	push	{r4, r7, lr}
 8012a4a:	b089      	sub	sp, #36	; 0x24
 8012a4c:	af02      	add	r7, sp, #8
  long scale = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8012a52:	4ba9      	ldr	r3, [pc, #676]	; (8012cf8 <Update_Detail+0x2b0>)
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	4ba9      	ldr	r3, [pc, #676]	; (8012cfc <Update_Detail+0x2b4>)
 8012a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	4ba8      	ldr	r3, [pc, #672]	; (8012d00 <Update_Detail+0x2b8>)
 8012a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	bf14      	ite	ne
 8012a68:	2301      	movne	r3, #1
 8012a6a:	2300      	moveq	r3, #0
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	440b      	add	r3, r1
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	4aa2      	ldr	r2, [pc, #648]	; (8012d04 <Update_Detail+0x2bc>)
 8012a7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012a80:	4611      	mov	r1, r2
 8012a82:	4aa1      	ldr	r2, [pc, #644]	; (8012d08 <Update_Detail+0x2c0>)
 8012a84:	5c52      	ldrb	r2, [r2, r1]
 8012a86:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a8a:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 8012a8c:	4b9f      	ldr	r3, [pc, #636]	; (8012d0c <Update_Detail+0x2c4>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	4b9f      	ldr	r3, [pc, #636]	; (8012d10 <Update_Detail+0x2c8>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4413      	add	r3, r2
 8012a9a:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 8012aa0:	4b9c      	ldr	r3, [pc, #624]	; (8012d14 <Update_Detail+0x2cc>)
 8012aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	4b9a      	ldr	r3, [pc, #616]	; (8012d14 <Update_Detail+0x2cc>)
 8012aaa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	0089      	lsls	r1, r1, #2
 8012ab4:	440b      	add	r3, r1
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	4413      	add	r3, r2
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	82fb      	strh	r3, [r7, #22]
 8012ac4:	f000 bfb3 	b.w	8013a2e <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8012ac8:	8afb      	ldrh	r3, [r7, #22]
 8012aca:	2b13      	cmp	r3, #19
 8012acc:	d118      	bne.n	8012b00 <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 8012ace:	4b92      	ldr	r3, [pc, #584]	; (8012d18 <Update_Detail+0x2d0>)
 8012ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ad4:	2b0a      	cmp	r3, #10
 8012ad6:	dd0a      	ble.n	8012aee <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8012ad8:	4b8f      	ldr	r3, [pc, #572]	; (8012d18 <Update_Detail+0x2d0>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 8012ade:	4b8f      	ldr	r3, [pc, #572]	; (8012d1c <Update_Detail+0x2d4>)
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	f043 0320 	orr.w	r3, r3, #32
 8012ae6:	b2da      	uxtb	r2, r3
 8012ae8:	4b8c      	ldr	r3, [pc, #560]	; (8012d1c <Update_Detail+0x2d4>)
 8012aea:	701a      	strb	r2, [r3, #0]
 8012aec:	e008      	b.n	8012b00 <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 8012aee:	4b8a      	ldr	r3, [pc, #552]	; (8012d18 <Update_Detail+0x2d0>)
 8012af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	3301      	adds	r3, #1
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	b21a      	sxth	r2, r3
 8012afc:	4b86      	ldr	r3, [pc, #536]	; (8012d18 <Update_Detail+0x2d0>)
 8012afe:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 8012b00:	8afb      	ldrh	r3, [r7, #22]
 8012b02:	4a84      	ldr	r2, [pc, #528]	; (8012d14 <Update_Detail+0x2cc>)
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	4413      	add	r3, r2
 8012b08:	799b      	ldrb	r3, [r3, #6]
 8012b0a:	f003 0320 	and.w	r3, r3, #32
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	f000 878a 	beq.w	8013a28 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8012b14:	8afb      	ldrh	r3, [r7, #22]
 8012b16:	4a7f      	ldr	r2, [pc, #508]	; (8012d14 <Update_Detail+0x2cc>)
 8012b18:	00db      	lsls	r3, r3, #3
 8012b1a:	4413      	add	r3, r2
 8012b1c:	799a      	ldrb	r2, [r3, #6]
 8012b1e:	8afb      	ldrh	r3, [r7, #22]
 8012b20:	f022 0220 	bic.w	r2, r2, #32
 8012b24:	b2d1      	uxtb	r1, r2
 8012b26:	4a7b      	ldr	r2, [pc, #492]	; (8012d14 <Update_Detail+0x2cc>)
 8012b28:	00db      	lsls	r3, r3, #3
 8012b2a:	4413      	add	r3, r2
 8012b2c:	460a      	mov	r2, r1
 8012b2e:	719a      	strb	r2, [r3, #6]
      switch (i){
 8012b30:	8afb      	ldrh	r3, [r7, #22]
 8012b32:	2b29      	cmp	r3, #41	; 0x29
 8012b34:	f200 8739 	bhi.w	80139aa <Update_Detail+0xf62>
 8012b38:	a201      	add	r2, pc, #4	; (adr r2, 8012b40 <Update_Detail+0xf8>)
 8012b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b3e:	bf00      	nop
 8012b40:	08012be9 	.word	0x08012be9
 8012b44:	08012be9 	.word	0x08012be9
 8012b48:	08012be9 	.word	0x08012be9
 8012b4c:	08012be9 	.word	0x08012be9
 8012b50:	08012be9 	.word	0x08012be9
 8012b54:	08012be9 	.word	0x08012be9
 8012b58:	08012be9 	.word	0x08012be9
 8012b5c:	080133e7 	.word	0x080133e7
 8012b60:	080133e7 	.word	0x080133e7
 8012b64:	080133e7 	.word	0x080133e7
 8012b68:	080133e7 	.word	0x080133e7
 8012b6c:	080133e7 	.word	0x080133e7
 8012b70:	080133e7 	.word	0x080133e7
 8012b74:	08013287 	.word	0x08013287
 8012b78:	08013287 	.word	0x08013287
 8012b7c:	08013287 	.word	0x08013287
 8012b80:	08013287 	.word	0x08013287
 8012b84:	08013287 	.word	0x08013287
 8012b88:	08013287 	.word	0x08013287
 8012b8c:	08013629 	.word	0x08013629
 8012b90:	0801369d 	.word	0x0801369d
 8012b94:	080136bd 	.word	0x080136bd
 8012b98:	080137c3 	.word	0x080137c3
 8012b9c:	08013733 	.word	0x08013733
 8012ba0:	0801389d 	.word	0x0801389d
 8012ba4:	08013923 	.word	0x08013923
 8012ba8:	0801316b 	.word	0x0801316b
 8012bac:	0801316b 	.word	0x0801316b
 8012bb0:	08013203 	.word	0x08013203
 8012bb4:	08012ee9 	.word	0x08012ee9
 8012bb8:	08012ee9 	.word	0x08012ee9
 8012bbc:	08012ee9 	.word	0x08012ee9
 8012bc0:	08012ee9 	.word	0x08012ee9
 8012bc4:	08012ee9 	.word	0x08012ee9
 8012bc8:	08012ee9 	.word	0x08012ee9
 8012bcc:	08012ee9 	.word	0x08012ee9
 8012bd0:	08012f99 	.word	0x08012f99
 8012bd4:	08013085 	.word	0x08013085
 8012bd8:	08013127 	.word	0x08013127
 8012bdc:	080139ab 	.word	0x080139ab
 8012be0:	080139ab 	.word	0x080139ab
 8012be4:	080139ab 	.word	0x080139ab
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8012be8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012bec:	4619      	mov	r1, r3
 8012bee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bf2:	f7fb f9f3 	bl	800dfdc <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8012bf6:	8afb      	ldrh	r3, [r7, #22]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d005      	beq.n	8012c08 <Update_Detail+0x1c0>
 8012bfc:	8afb      	ldrh	r3, [r7, #22]
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	d002      	beq.n	8012c08 <Update_Detail+0x1c0>
 8012c02:	8afb      	ldrh	r3, [r7, #22]
 8012c04:	2b02      	cmp	r3, #2
 8012c06:	d138      	bne.n	8012c7a <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012c08:	232f      	movs	r3, #47	; 0x2f
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	3b03      	subs	r3, #3
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	b219      	sxth	r1, r3
 8012c12:	232a      	movs	r3, #42	; 0x2a
 8012c14:	9301      	str	r3, [sp, #4]
 8012c16:	2300      	movs	r3, #0
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	230b      	movs	r3, #11
 8012c1c:	22e1      	movs	r2, #225	; 0xe1
 8012c1e:	2001      	movs	r0, #1
 8012c20:	f7fb faca 	bl	800e1b8 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8012c24:	202f      	movs	r0, #47	; 0x2f
 8012c26:	4b3b      	ldr	r3, [pc, #236]	; (8012d14 <Update_Detail+0x2cc>)
 8012c28:	6819      	ldr	r1, [r3, #0]
 8012c2a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c2e:	4613      	mov	r3, r2
 8012c30:	005b      	lsls	r3, r3, #1
 8012c32:	4413      	add	r3, r2
 8012c34:	005b      	lsls	r3, r3, #1
 8012c36:	440b      	add	r3, r1
 8012c38:	2201      	movs	r2, #1
 8012c3a:	21e1      	movs	r1, #225	; 0xe1
 8012c3c:	f7fb f9e6 	bl	800e00c <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 8012c40:	2047      	movs	r0, #71	; 0x47
 8012c42:	4b34      	ldr	r3, [pc, #208]	; (8012d14 <Update_Detail+0x2cc>)
 8012c44:	689a      	ldr	r2, [r3, #8]
 8012c46:	4b33      	ldr	r3, [pc, #204]	; (8012d14 <Update_Detail+0x2cc>)
 8012c48:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	460b      	mov	r3, r1
 8012c50:	005b      	lsls	r3, r3, #1
 8012c52:	440b      	add	r3, r1
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	2201      	movs	r2, #1
 8012c5a:	21e1      	movs	r1, #225	; 0xe1
 8012c5c:	f7fb f9d6 	bl	800e00c <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8012c60:	2020      	movs	r0, #32
 8012c62:	4b2c      	ldr	r3, [pc, #176]	; (8012d14 <Update_Detail+0x2cc>)
 8012c64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <Update_Detail+0x228>
 8012c6c:	4b2c      	ldr	r3, [pc, #176]	; (8012d20 <Update_Detail+0x2d8>)
 8012c6e:	e000      	b.n	8012c72 <Update_Detail+0x22a>
 8012c70:	4b2c      	ldr	r3, [pc, #176]	; (8012d24 <Update_Detail+0x2dc>)
 8012c72:	2210      	movs	r2, #16
 8012c74:	21e1      	movs	r1, #225	; 0xe1
 8012c76:	f7fb fc33 	bl	800e4e0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8012c7a:	4b26      	ldr	r3, [pc, #152]	; (8012d14 <Update_Detail+0x2cc>)
 8012c7c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012c80:	3301      	adds	r3, #1
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	005b      	lsls	r3, r3, #1
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	b21a      	sxth	r2, r3
 8012c8a:	4b27      	ldr	r3, [pc, #156]	; (8012d28 <Update_Detail+0x2e0>)
 8012c8c:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8012c8e:	4b26      	ldr	r3, [pc, #152]	; (8012d28 <Update_Detail+0x2e0>)
 8012c90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	4b1f      	ldr	r3, [pc, #124]	; (8012d14 <Update_Detail+0x2cc>)
 8012c98:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4413      	add	r3, r2
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	b21a      	sxth	r2, r3
 8012caa:	4b1f      	ldr	r3, [pc, #124]	; (8012d28 <Update_Detail+0x2e0>)
 8012cac:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 8012cae:	4b19      	ldr	r3, [pc, #100]	; (8012d14 <Update_Detail+0x2cc>)
 8012cb0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	005b      	lsls	r3, r3, #1
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	b21a      	sxth	r2, r3
 8012cbe:	4b1a      	ldr	r3, [pc, #104]	; (8012d28 <Update_Detail+0x2e0>)
 8012cc0:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 8012cc2:	4b14      	ldr	r3, [pc, #80]	; (8012d14 <Update_Detail+0x2cc>)
 8012cc4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8012cc8:	3301      	adds	r3, #1
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	b21a      	sxth	r2, r3
 8012cd2:	4b15      	ldr	r3, [pc, #84]	; (8012d28 <Update_Detail+0x2e0>)
 8012cd4:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cd6:	4b0f      	ldr	r3, [pc, #60]	; (8012d14 <Update_Detail+0x2cc>)
 8012cd8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d001      	beq.n	8012ce4 <Update_Detail+0x29c>
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	e000      	b.n	8012ce6 <Update_Detail+0x29e>
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	4b10      	ldr	r3, [pc, #64]	; (8012d28 <Update_Detail+0x2e0>)
 8012ce8:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8012cea:	4b0a      	ldr	r3, [pc, #40]	; (8012d14 <Update_Detail+0x2cc>)
 8012cec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d01b      	beq.n	8012d2c <Update_Detail+0x2e4>
 8012cf4:	2202      	movs	r2, #2
 8012cf6:	e01a      	b.n	8012d2e <Update_Detail+0x2e6>
 8012cf8:	20000558 	.word	0x20000558
 8012cfc:	20002692 	.word	0x20002692
 8012d00:	2000268c 	.word	0x2000268c
 8012d04:	20002690 	.word	0x20002690
 8012d08:	2000053c 	.word	0x2000053c
 8012d0c:	20002680 	.word	0x20002680
 8012d10:	2000267c 	.word	0x2000267c
 8012d14:	20000274 	.word	0x20000274
 8012d18:	2000265a 	.word	0x2000265a
 8012d1c:	200001a8 	.word	0x200001a8
 8012d20:	080009ac 	.word	0x080009ac
 8012d24:	080009b0 	.word	0x080009b0
 8012d28:	20000140 	.word	0x20000140
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	4ba6      	ldr	r3, [pc, #664]	; (8012fc8 <Update_Detail+0x580>)
 8012d30:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 8012d32:	4ba5      	ldr	r3, [pc, #660]	; (8012fc8 <Update_Detail+0x580>)
 8012d34:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8012d38:	461a      	mov	r2, r3
 8012d3a:	4ba3      	ldr	r3, [pc, #652]	; (8012fc8 <Update_Detail+0x580>)
 8012d3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	0fda      	lsrs	r2, r3, #31
 8012d44:	4413      	add	r3, r2
 8012d46:	105b      	asrs	r3, r3, #1
 8012d48:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012d4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d4e:	4a9f      	ldr	r2, [pc, #636]	; (8012fcc <Update_Detail+0x584>)
 8012d50:	5cd3      	ldrb	r3, [r2, r3]
 8012d52:	461c      	mov	r4, r3
 8012d54:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012d58:	4a9d      	ldr	r2, [pc, #628]	; (8012fd0 <Update_Detail+0x588>)
 8012d5a:	5cd3      	ldrb	r3, [r2, r3]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fe fb2f 	bl	80113c0 <Exp>
 8012d62:	4603      	mov	r3, r0
 8012d64:	fb03 f204 	mul.w	r2, r3, r4
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	fb02 f303 	mul.w	r3, r2, r3
 8012d6e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 8012d70:	2301      	movs	r3, #1
 8012d72:	9300      	str	r3, [sp, #0]
 8012d74:	2303      	movs	r3, #3
 8012d76:	4a97      	ldr	r2, [pc, #604]	; (8012fd4 <Update_Detail+0x58c>)
 8012d78:	6939      	ldr	r1, [r7, #16]
 8012d7a:	4897      	ldr	r0, [pc, #604]	; (8012fd8 <Update_Detail+0x590>)
 8012d7c:	f7fe fa24 	bl	80111c8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8012d80:	2307      	movs	r3, #7
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	3b03      	subs	r3, #3
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	b219      	sxth	r1, r3
 8012d8a:	2336      	movs	r3, #54	; 0x36
 8012d8c:	9301      	str	r3, [sp, #4]
 8012d8e:	2300      	movs	r3, #0
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	230b      	movs	r3, #11
 8012d94:	2203      	movs	r2, #3
 8012d96:	2001      	movs	r0, #1
 8012d98:	f7fb fa0e 	bl	800e1b8 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8012d9c:	2007      	movs	r0, #7
 8012d9e:	4b8f      	ldr	r3, [pc, #572]	; (8012fdc <Update_Detail+0x594>)
 8012da0:	2211      	movs	r2, #17
 8012da2:	2103      	movs	r1, #3
 8012da4:	f7fb f932 	bl	800e00c <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8012da8:	2307      	movs	r3, #7
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	3306      	adds	r3, #6
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	b218      	sxth	r0, r3
 8012db2:	4b8b      	ldr	r3, [pc, #556]	; (8012fe0 <Update_Detail+0x598>)
 8012db4:	2201      	movs	r2, #1
 8012db6:	2103      	movs	r1, #3
 8012db8:	f7fb f928 	bl	800e00c <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8012dbc:	2307      	movs	r3, #7
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	332a      	adds	r3, #42	; 0x2a
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	b218      	sxth	r0, r3
 8012dc6:	4b87      	ldr	r3, [pc, #540]	; (8012fe4 <Update_Detail+0x59c>)
 8012dc8:	2201      	movs	r2, #1
 8012dca:	2103      	movs	r1, #3
 8012dcc:	f7fb f91e 	bl	800e00c <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8012dd0:	2307      	movs	r3, #7
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	3312      	adds	r3, #18
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	b218      	sxth	r0, r3
 8012dda:	4b7f      	ldr	r3, [pc, #508]	; (8012fd8 <Update_Detail+0x590>)
 8012ddc:	2201      	movs	r2, #1
 8012dde:	2103      	movs	r1, #3
 8012de0:	f7fb f914 	bl	800e00c <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8012de4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012de8:	4619      	mov	r1, r3
 8012dea:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012dee:	f7fb f8f5 	bl	800dfdc <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 8012df2:	4b7d      	ldr	r3, [pc, #500]	; (8012fe8 <Update_Detail+0x5a0>)
 8012df4:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012df8:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012dfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012dfe:	4a73      	ldr	r2, [pc, #460]	; (8012fcc <Update_Detail+0x584>)
 8012e00:	5cd3      	ldrb	r3, [r2, r3]
 8012e02:	461c      	mov	r4, r3
 8012e04:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012e08:	4a71      	ldr	r2, [pc, #452]	; (8012fd0 <Update_Detail+0x588>)
 8012e0a:	5cd3      	ldrb	r3, [r2, r3]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fad7 	bl	80113c0 <Exp>
 8012e12:	4603      	mov	r3, r0
 8012e14:	fb03 f204 	mul.w	r2, r3, r4
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	fb02 f303 	mul.w	r3, r2, r3
 8012e1e:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 8012e20:	2301      	movs	r3, #1
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	2302      	movs	r3, #2
 8012e26:	4a6b      	ldr	r2, [pc, #428]	; (8012fd4 <Update_Detail+0x58c>)
 8012e28:	6939      	ldr	r1, [r7, #16]
 8012e2a:	486b      	ldr	r0, [pc, #428]	; (8012fd8 <Update_Detail+0x590>)
 8012e2c:	f7fe f9cc 	bl	80111c8 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8012e30:	23e7      	movs	r3, #231	; 0xe7
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	3309      	adds	r3, #9
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	b218      	sxth	r0, r3
 8012e3a:	4b6c      	ldr	r3, [pc, #432]	; (8012fec <Update_Detail+0x5a4>)
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	21e1      	movs	r1, #225	; 0xe1
 8012e40:	f7fb f8e4 	bl	800e00c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8012e44:	23e7      	movs	r3, #231	; 0xe7
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	3309      	adds	r3, #9
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	b218      	sxth	r0, r3
 8012e4e:	4b62      	ldr	r3, [pc, #392]	; (8012fd8 <Update_Detail+0x590>)
 8012e50:	2201      	movs	r2, #1
 8012e52:	21e1      	movs	r1, #225	; 0xe1
 8012e54:	f7fb f8da 	bl	800e00c <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8012e58:	20e7      	movs	r0, #231	; 0xe7
 8012e5a:	4b65      	ldr	r3, [pc, #404]	; (8012ff0 <Update_Detail+0x5a8>)
 8012e5c:	2211      	movs	r2, #17
 8012e5e:	21e1      	movs	r1, #225	; 0xe1
 8012e60:	f7fb fb3e 	bl	800e4e0 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 8012e64:	4b60      	ldr	r3, [pc, #384]	; (8012fe8 <Update_Detail+0x5a0>)
 8012e66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	b21a      	sxth	r2, r3
 8012e6e:	4b61      	ldr	r3, [pc, #388]	; (8012ff4 <Update_Detail+0x5ac>)
 8012e70:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 8012e72:	4b5d      	ldr	r3, [pc, #372]	; (8012fe8 <Update_Detail+0x5a0>)
 8012e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d903      	bls.n	8012e86 <Update_Detail+0x43e>
          KindA  = HV;
 8012e7e:	4b5e      	ldr	r3, [pc, #376]	; (8012ff8 <Update_Detail+0x5b0>)
 8012e80:	2201      	movs	r2, #1
 8012e82:	801a      	strh	r2, [r3, #0]
 8012e84:	e002      	b.n	8012e8c <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8012e86:	4b5c      	ldr	r3, [pc, #368]	; (8012ff8 <Update_Detail+0x5b0>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 8012e8c:	4b56      	ldr	r3, [pc, #344]	; (8012fe8 <Update_Detail+0x5a0>)
 8012e8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	2b05      	cmp	r3, #5
 8012e96:	d901      	bls.n	8012e9c <Update_Detail+0x454>
 8012e98:	2204      	movs	r2, #4
 8012e9a:	e000      	b.n	8012e9e <Update_Detail+0x456>
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	4b57      	ldr	r3, [pc, #348]	; (8012ffc <Update_Detail+0x5b4>)
 8012ea0:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8012ea2:	4b51      	ldr	r3, [pc, #324]	; (8012fe8 <Update_Detail+0x5a0>)
 8012ea4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d001      	beq.n	8012eb0 <Update_Detail+0x468>
 8012eac:	2200      	movs	r2, #0
 8012eae:	e000      	b.n	8012eb2 <Update_Detail+0x46a>
 8012eb0:	2202      	movs	r2, #2
 8012eb2:	4b53      	ldr	r3, [pc, #332]	; (8013000 <Update_Detail+0x5b8>)
 8012eb4:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8012eb6:	4b50      	ldr	r3, [pc, #320]	; (8012ff8 <Update_Detail+0x5b0>)
 8012eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	4b50      	ldr	r3, [pc, #320]	; (8013000 <Update_Detail+0x5b8>)
 8012ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	4a4d      	ldr	r2, [pc, #308]	; (8012ffc <Update_Detail+0x5b4>)
 8012ec8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012ecc:	4413      	add	r3, r2
 8012ece:	4619      	mov	r1, r3
 8012ed0:	2007      	movs	r0, #7
 8012ed2:	f7f9 fa55 	bl	800c380 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8012ed6:	4b44      	ldr	r3, [pc, #272]	; (8012fe8 <Update_Detail+0x5a0>)
 8012ed8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f001 fc62 	bl	80147a8 <AiPosi>
        break;
 8012ee4:	f000 bd61 	b.w	80139aa <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8012ee8:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8012eec:	4619      	mov	r1, r3
 8012eee:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012ef2:	f7fb f873 	bl	800dfdc <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8012ef6:	8afb      	ldrh	r3, [r7, #22]
 8012ef8:	4a3b      	ldr	r2, [pc, #236]	; (8012fe8 <Update_Detail+0x5a0>)
 8012efa:	00db      	lsls	r3, r3, #3
 8012efc:	4413      	add	r3, r2
 8012efe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	4619      	mov	r1, r3
 8012f06:	4834      	ldr	r0, [pc, #208]	; (8012fd8 <Update_Detail+0x590>)
 8012f08:	f7fe f8f6 	bl	80110f8 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8012f0c:	8afb      	ldrh	r3, [r7, #22]
 8012f0e:	4a3d      	ldr	r2, [pc, #244]	; (8013004 <Update_Detail+0x5bc>)
 8012f10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	3b03      	subs	r3, #3
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	b219      	sxth	r1, r3
 8012f1c:	2342      	movs	r3, #66	; 0x42
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	2300      	movs	r3, #0
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	230b      	movs	r3, #11
 8012f26:	2203      	movs	r2, #3
 8012f28:	2001      	movs	r0, #1
 8012f2a:	f7fb f945 	bl	800e1b8 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8012f2e:	8afb      	ldrh	r3, [r7, #22]
 8012f30:	4a34      	ldr	r2, [pc, #208]	; (8013004 <Update_Detail+0x5bc>)
 8012f32:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f36:	8afb      	ldrh	r3, [r7, #22]
 8012f38:	2b21      	cmp	r3, #33	; 0x21
 8012f3a:	d901      	bls.n	8012f40 <Update_Detail+0x4f8>
 8012f3c:	4b32      	ldr	r3, [pc, #200]	; (8013008 <Update_Detail+0x5c0>)
 8012f3e:	e000      	b.n	8012f42 <Update_Detail+0x4fa>
 8012f40:	4b32      	ldr	r3, [pc, #200]	; (801300c <Update_Detail+0x5c4>)
 8012f42:	2201      	movs	r2, #1
 8012f44:	2103      	movs	r1, #3
 8012f46:	f7fb f861 	bl	800e00c <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 8012f4a:	8afb      	ldrh	r3, [r7, #22]
 8012f4c:	4a2d      	ldr	r2, [pc, #180]	; (8013004 <Update_Detail+0x5bc>)
 8012f4e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	3318      	adds	r3, #24
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	b218      	sxth	r0, r3
 8012f5a:	4b1f      	ldr	r3, [pc, #124]	; (8012fd8 <Update_Detail+0x590>)
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	2103      	movs	r1, #3
 8012f60:	f7fb f854 	bl	800e00c <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 8012f64:	8afb      	ldrh	r3, [r7, #22]
 8012f66:	4a27      	ldr	r2, [pc, #156]	; (8013004 <Update_Detail+0x5bc>)
 8012f68:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	332a      	adds	r3, #42	; 0x2a
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	b218      	sxth	r0, r3
 8012f74:	8afb      	ldrh	r3, [r7, #22]
 8012f76:	4a1c      	ldr	r2, [pc, #112]	; (8012fe8 <Update_Detail+0x5a0>)
 8012f78:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012f7c:	8afb      	ldrh	r3, [r7, #22]
 8012f7e:	f1a3 021d 	sub.w	r2, r3, #29
 8012f82:	4613      	mov	r3, r2
 8012f84:	005b      	lsls	r3, r3, #1
 8012f86:	4413      	add	r3, r2
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	440b      	add	r3, r1
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	2103      	movs	r1, #3
 8012f90:	f7fb f83c 	bl	800e00c <DispStr>
        break;
 8012f94:	f000 bd09 	b.w	80139aa <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 8012f98:	4b13      	ldr	r3, [pc, #76]	; (8012fe8 <Update_Detail+0x5a0>)
 8012f9a:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d136      	bne.n	8013010 <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	f7f9 f9eb 	bl	800c380 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8012faa:	4b0f      	ldr	r3, [pc, #60]	; (8012fe8 <Update_Detail+0x5a0>)
 8012fac:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7f9 fbc5 	bl	800c740 <Set_Fout>
          Set_Duty();
 8012fb6:	f7f9 fb97 	bl	800c6e8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8012fba:	2104      	movs	r1, #4
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	f7f9 f9df 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 8012fc2:	f000 bcf2 	b.w	80139aa <Update_Detail+0xf62>
 8012fc6:	bf00      	nop
 8012fc8:	20000140 	.word	0x20000140
 8012fcc:	080021cc 	.word	0x080021cc
 8012fd0:	080021a4 	.word	0x080021a4
 8012fd4:	08001d9c 	.word	0x08001d9c
 8012fd8:	20002660 	.word	0x20002660
 8012fdc:	080009b4 	.word	0x080009b4
 8012fe0:	080009b8 	.word	0x080009b8
 8012fe4:	08000a24 	.word	0x08000a24
 8012fe8:	20000274 	.word	0x20000274
 8012fec:	080009e4 	.word	0x080009e4
 8012ff0:	080009ec 	.word	0x080009ec
 8012ff4:	20002690 	.word	0x20002690
 8012ff8:	20002692 	.word	0x20002692
 8012ffc:	2000268c 	.word	0x2000268c
 8013000:	2000268e 	.word	0x2000268e
 8013004:	080021f8 	.word	0x080021f8
 8013008:	0800099c 	.word	0x0800099c
 801300c:	080009a4 	.word	0x080009a4
          if(List[FREQ_OUT].Val > MAX_FREQ)
 8013010:	4bb7      	ldr	r3, [pc, #732]	; (80132f0 <Update_Detail+0x8a8>)
 8013012:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013016:	2b09      	cmp	r3, #9
 8013018:	dd03      	ble.n	8013022 <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 801301a:	4bb5      	ldr	r3, [pc, #724]	; (80132f0 <Update_Detail+0x8a8>)
 801301c:	2209      	movs	r2, #9
 801301e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013022:	2100      	movs	r1, #0
 8013024:	2000      	movs	r0, #0
 8013026:	f7f9 f9ab 	bl	800c380 <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 801302a:	4bb1      	ldr	r3, [pc, #708]	; (80132f0 <Update_Detail+0x8a8>)
 801302c:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013030:	461a      	mov	r2, r3
 8013032:	4bb0      	ldr	r3, [pc, #704]	; (80132f4 <Update_Detail+0x8ac>)
 8013034:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013038:	3b01      	subs	r3, #1
 801303a:	461a      	mov	r2, r3
 801303c:	4bae      	ldr	r3, [pc, #696]	; (80132f8 <Update_Detail+0x8b0>)
 801303e:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 8013040:	4bab      	ldr	r3, [pc, #684]	; (80132f0 <Update_Detail+0x8a8>)
 8013042:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013046:	461a      	mov	r2, r3
 8013048:	4bac      	ldr	r3, [pc, #688]	; (80132fc <Update_Detail+0x8b4>)
 801304a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801304e:	3b01      	subs	r3, #1
 8013050:	4619      	mov	r1, r3
 8013052:	2001      	movs	r0, #1
 8013054:	f7f9 f994 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 8013058:	21b4      	movs	r1, #180	; 0xb4
 801305a:	2002      	movs	r0, #2
 801305c:	f7f9 f990 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013060:	4ba3      	ldr	r3, [pc, #652]	; (80132f0 <Update_Detail+0x8a8>)
 8013062:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013066:	b2db      	uxtb	r3, r3
 8013068:	4618      	mov	r0, r3
 801306a:	f7f9 f973 	bl	800c354 <BIOS_Info>
 801306e:	4603      	mov	r3, r0
 8013070:	4619      	mov	r1, r3
 8013072:	2003      	movs	r0, #3
 8013074:	f7f9 f984 	bl	800c380 <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013078:	2102      	movs	r1, #2
 801307a:	2000      	movs	r0, #0
 801307c:	f7f9 f980 	bl	800c380 <BIOS_Ctrl>
      break;
 8013080:	f000 bc93 	b.w	80139aa <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 8013084:	4b9a      	ldr	r3, [pc, #616]	; (80132f0 <Update_Detail+0x8a8>)
 8013086:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801308a:	2b00      	cmp	r3, #0
 801308c:	d111      	bne.n	80130b2 <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801308e:	2100      	movs	r1, #0
 8013090:	2000      	movs	r0, #0
 8013092:	f7f9 f975 	bl	800c380 <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013096:	4b96      	ldr	r3, [pc, #600]	; (80132f0 <Update_Detail+0x8a8>)
 8013098:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801309c:	4618      	mov	r0, r3
 801309e:	f7f9 fb4f 	bl	800c740 <Set_Fout>
          Set_Duty();
 80130a2:	f7f9 fb21 	bl	800c6e8 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 80130a6:	2104      	movs	r1, #4
 80130a8:	2000      	movs	r0, #0
 80130aa:	f7f9 f969 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 80130ae:	f000 bc7c 	b.w	80139aa <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 80130b2:	4b8f      	ldr	r3, [pc, #572]	; (80132f0 <Update_Detail+0x8a8>)
 80130b4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130b8:	2b09      	cmp	r3, #9
 80130ba:	dd03      	ble.n	80130c4 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 80130bc:	4b8c      	ldr	r3, [pc, #560]	; (80132f0 <Update_Detail+0x8a8>)
 80130be:	2209      	movs	r2, #9
 80130c0:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80130c4:	2100      	movs	r1, #0
 80130c6:	2000      	movs	r0, #0
 80130c8:	f7f9 f95a 	bl	800c380 <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 80130cc:	4b88      	ldr	r3, [pc, #544]	; (80132f0 <Update_Detail+0x8a8>)
 80130ce:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130d2:	461a      	mov	r2, r3
 80130d4:	4b87      	ldr	r3, [pc, #540]	; (80132f4 <Update_Detail+0x8ac>)
 80130d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130da:	3b01      	subs	r3, #1
 80130dc:	461a      	mov	r2, r3
 80130de:	4b86      	ldr	r3, [pc, #536]	; (80132f8 <Update_Detail+0x8b0>)
 80130e0:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 80130e2:	4b83      	ldr	r3, [pc, #524]	; (80132f0 <Update_Detail+0x8a8>)
 80130e4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80130e8:	461a      	mov	r2, r3
 80130ea:	4b84      	ldr	r3, [pc, #528]	; (80132fc <Update_Detail+0x8b4>)
 80130ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80130f0:	3b01      	subs	r3, #1
 80130f2:	4619      	mov	r1, r3
 80130f4:	2001      	movs	r0, #1
 80130f6:	f7f9 f943 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 80130fa:	21b4      	movs	r1, #180	; 0xb4
 80130fc:	2002      	movs	r0, #2
 80130fe:	f7f9 f93f 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 8013102:	4b7b      	ldr	r3, [pc, #492]	; (80132f0 <Update_Detail+0x8a8>)
 8013104:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013108:	b2db      	uxtb	r3, r3
 801310a:	4618      	mov	r0, r3
 801310c:	f7f9 f922 	bl	800c354 <BIOS_Info>
 8013110:	4603      	mov	r3, r0
 8013112:	4619      	mov	r1, r3
 8013114:	2003      	movs	r0, #3
 8013116:	f7f9 f933 	bl	800c380 <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 801311a:	2102      	movs	r1, #2
 801311c:	2000      	movs	r0, #0
 801311e:	f7f9 f92f 	bl	800c380 <BIOS_Ctrl>
        break;
 8013122:	f000 bc42 	b.w	80139aa <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013126:	f240 531f 	movw	r3, #1311	; 0x51f
 801312a:	4619      	mov	r1, r3
 801312c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013130:	f7fa ff54 	bl	800dfdc <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013134:	8afb      	ldrh	r3, [r7, #22]
 8013136:	4a72      	ldr	r2, [pc, #456]	; (8013300 <Update_Detail+0x8b8>)
 8013138:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801313c:	b29b      	uxth	r3, r3
 801313e:	3b03      	subs	r3, #3
 8013140:	b29b      	uxth	r3, r3
 8013142:	b219      	sxth	r1, r3
 8013144:	2336      	movs	r3, #54	; 0x36
 8013146:	9301      	str	r3, [sp, #4]
 8013148:	2300      	movs	r3, #0
 801314a:	9300      	str	r3, [sp, #0]
 801314c:	230b      	movs	r3, #11
 801314e:	2203      	movs	r2, #3
 8013150:	2001      	movs	r0, #1
 8013152:	f7fb f831 	bl	800e1b8 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 8013156:	4b66      	ldr	r3, [pc, #408]	; (80132f0 <Update_Detail+0x8a8>)
 8013158:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801315c:	2b00      	cmp	r3, #0
 801315e:	f040 8423 	bne.w	80139a8 <Update_Detail+0xf60>
        {
          Set_Duty();
 8013162:	f7f9 fac1 	bl	800c6e8 <Set_Duty>
        }
        break;
 8013166:	f000 bc1f 	b.w	80139a8 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 801316a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801316e:	4619      	mov	r1, r3
 8013170:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013174:	f7fa ff32 	bl	800dfdc <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 8013178:	8afb      	ldrh	r3, [r7, #22]
 801317a:	2b1a      	cmp	r3, #26
 801317c:	d002      	beq.n	8013184 <Update_Detail+0x73c>
 801317e:	8afb      	ldrh	r3, [r7, #22]
 8013180:	2b1b      	cmp	r3, #27
 8013182:	d123      	bne.n	80131cc <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013184:	23a8      	movs	r3, #168	; 0xa8
 8013186:	b29b      	uxth	r3, r3
 8013188:	3b03      	subs	r3, #3
 801318a:	b29b      	uxth	r3, r3
 801318c:	b219      	sxth	r1, r3
 801318e:	231e      	movs	r3, #30
 8013190:	9301      	str	r3, [sp, #4]
 8013192:	2301      	movs	r3, #1
 8013194:	9300      	str	r3, [sp, #0]
 8013196:	230b      	movs	r3, #11
 8013198:	22e1      	movs	r2, #225	; 0xe1
 801319a:	2001      	movs	r0, #1
 801319c:	f7fb f80c 	bl	800e1b8 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80131a0:	20a8      	movs	r0, #168	; 0xa8
 80131a2:	4b53      	ldr	r3, [pc, #332]	; (80132f0 <Update_Detail+0x8a8>)
 80131a4:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00a      	beq.n	80131c2 <Update_Detail+0x77a>
 80131ac:	4b50      	ldr	r3, [pc, #320]	; (80132f0 <Update_Detail+0x8a8>)
 80131ae:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131b2:	461a      	mov	r2, r3
 80131b4:	4613      	mov	r3, r2
 80131b6:	005b      	lsls	r3, r3, #1
 80131b8:	4413      	add	r3, r2
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	4a51      	ldr	r2, [pc, #324]	; (8013304 <Update_Detail+0x8bc>)
 80131be:	4413      	add	r3, r2
 80131c0:	e000      	b.n	80131c4 <Update_Detail+0x77c>
 80131c2:	4b51      	ldr	r3, [pc, #324]	; (8013308 <Update_Detail+0x8c0>)
 80131c4:	2201      	movs	r2, #1
 80131c6:	21e1      	movs	r1, #225	; 0xe1
 80131c8:	f7fa ff20 	bl	800e00c <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 80131cc:	4b48      	ldr	r3, [pc, #288]	; (80132f0 <Update_Detail+0x8a8>)
 80131ce:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80131d2:	2b05      	cmp	r3, #5
 80131d4:	dc0a      	bgt.n	80131ec <Update_Detail+0x7a4>
 80131d6:	4b46      	ldr	r3, [pc, #280]	; (80132f0 <Update_Detail+0x8a8>)
 80131d8:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80131dc:	3301      	adds	r3, #1
 80131de:	b29b      	uxth	r3, r3
 80131e0:	005b      	lsls	r3, r3, #1
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	b21a      	sxth	r2, r3
 80131e6:	4b49      	ldr	r3, [pc, #292]	; (801330c <Update_Detail+0x8c4>)
 80131e8:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 80131ea:	e3de      	b.n	80139aa <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 80131ec:	4b40      	ldr	r3, [pc, #256]	; (80132f0 <Update_Detail+0x8a8>)
 80131ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80131f2:	3301      	adds	r3, #1
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	005b      	lsls	r3, r3, #1
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	b21a      	sxth	r2, r3
 80131fc:	4b43      	ldr	r3, [pc, #268]	; (801330c <Update_Detail+0x8c4>)
 80131fe:	82da      	strh	r2, [r3, #22]
        break;
 8013200:	e3d3      	b.n	80139aa <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 8013202:	4b3b      	ldr	r3, [pc, #236]	; (80132f0 <Update_Detail+0x8a8>)
 8013204:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013208:	2b00      	cmp	r3, #0
 801320a:	d108      	bne.n	801321e <Update_Detail+0x7d6>
 801320c:	4b3f      	ldr	r3, [pc, #252]	; (801330c <Update_Detail+0x8c4>)
 801320e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013212:	f043 0304 	orr.w	r3, r3, #4
 8013216:	b21a      	sxth	r2, r3
 8013218:	4b3c      	ldr	r3, [pc, #240]	; (801330c <Update_Detail+0x8c4>)
 801321a:	805a      	strh	r2, [r3, #2]
 801321c:	e007      	b.n	801322e <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 801321e:	4b3b      	ldr	r3, [pc, #236]	; (801330c <Update_Detail+0x8c4>)
 8013220:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013224:	f023 0304 	bic.w	r3, r3, #4
 8013228:	b21a      	sxth	r2, r3
 801322a:	4b38      	ldr	r3, [pc, #224]	; (801330c <Update_Detail+0x8c4>)
 801322c:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 801322e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8013232:	4619      	mov	r1, r3
 8013234:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013238:	f7fa fed0 	bl	800dfdc <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 801323c:	23a8      	movs	r3, #168	; 0xa8
 801323e:	b29b      	uxth	r3, r3
 8013240:	3b03      	subs	r3, #3
 8013242:	b29b      	uxth	r3, r3
 8013244:	b219      	sxth	r1, r3
 8013246:	231e      	movs	r3, #30
 8013248:	9301      	str	r3, [sp, #4]
 801324a:	2301      	movs	r3, #1
 801324c:	9300      	str	r3, [sp, #0]
 801324e:	230b      	movs	r3, #11
 8013250:	22e1      	movs	r2, #225	; 0xe1
 8013252:	2001      	movs	r0, #1
 8013254:	f7fa ffb0 	bl	800e1b8 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8013258:	20a8      	movs	r0, #168	; 0xa8
 801325a:	4b25      	ldr	r3, [pc, #148]	; (80132f0 <Update_Detail+0x8a8>)
 801325c:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00a      	beq.n	801327a <Update_Detail+0x832>
 8013264:	4b22      	ldr	r3, [pc, #136]	; (80132f0 <Update_Detail+0x8a8>)
 8013266:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801326a:	461a      	mov	r2, r3
 801326c:	4613      	mov	r3, r2
 801326e:	005b      	lsls	r3, r3, #1
 8013270:	4413      	add	r3, r2
 8013272:	005b      	lsls	r3, r3, #1
 8013274:	4a23      	ldr	r2, [pc, #140]	; (8013304 <Update_Detail+0x8bc>)
 8013276:	4413      	add	r3, r2
 8013278:	e000      	b.n	801327c <Update_Detail+0x834>
 801327a:	4b23      	ldr	r3, [pc, #140]	; (8013308 <Update_Detail+0x8c0>)
 801327c:	2201      	movs	r2, #1
 801327e:	21e1      	movs	r1, #225	; 0xe1
 8013280:	f7fa fec4 	bl	800e00c <DispStr>
      break;
 8013284:	e391      	b.n	80139aa <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8013286:	f000 fc71 	bl	8013b6c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 801328a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 801328e:	4619      	mov	r1, r3
 8013290:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013294:	f7fa fea2 	bl	800dfdc <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8013298:	8afb      	ldrh	r3, [r7, #22]
 801329a:	2b0e      	cmp	r3, #14
 801329c:	d002      	beq.n	80132a4 <Update_Detail+0x85c>
 801329e:	8afb      	ldrh	r3, [r7, #22]
 80132a0:	2b11      	cmp	r3, #17
 80132a2:	d11a      	bne.n	80132da <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 80132a4:	23dd      	movs	r3, #221	; 0xdd
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	3b03      	subs	r3, #3
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	b219      	sxth	r1, r3
 80132ae:	2330      	movs	r3, #48	; 0x30
 80132b0:	9301      	str	r3, [sp, #4]
 80132b2:	2300      	movs	r3, #0
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	230b      	movs	r3, #11
 80132b8:	22e1      	movs	r2, #225	; 0xe1
 80132ba:	2001      	movs	r0, #1
 80132bc:	f7fa ff7c 	bl	800e1b8 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80132c0:	20dd      	movs	r0, #221	; 0xdd
 80132c2:	4b0b      	ldr	r3, [pc, #44]	; (80132f0 <Update_Detail+0x8a8>)
 80132c4:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <Update_Detail+0x888>
 80132cc:	4b10      	ldr	r3, [pc, #64]	; (8013310 <Update_Detail+0x8c8>)
 80132ce:	e000      	b.n	80132d2 <Update_Detail+0x88a>
 80132d0:	4b10      	ldr	r3, [pc, #64]	; (8013314 <Update_Detail+0x8cc>)
 80132d2:	2211      	movs	r2, #17
 80132d4:	21e1      	movs	r1, #225	; 0xe1
 80132d6:	f7fb f903 	bl	800e4e0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80132da:	8afb      	ldrh	r3, [r7, #22]
 80132dc:	2b0f      	cmp	r3, #15
 80132de:	d12f      	bne.n	8013340 <Update_Detail+0x8f8>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80132e0:	20cf      	movs	r0, #207	; 0xcf
 80132e2:	4b03      	ldr	r3, [pc, #12]	; (80132f0 <Update_Detail+0x8a8>)
 80132e4:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d017      	beq.n	801331c <Update_Detail+0x8d4>
 80132ec:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <Update_Detail+0x8d0>)
 80132ee:	e016      	b.n	801331e <Update_Detail+0x8d6>
 80132f0:	20000274 	.word	0x20000274
 80132f4:	080023d4 	.word	0x080023d4
 80132f8:	20006998 	.word	0x20006998
 80132fc:	08001e2c 	.word	0x08001e2c
 8013300:	080021f8 	.word	0x080021f8
 8013304:	08001d24 	.word	0x08001d24
 8013308:	08001d48 	.word	0x08001d48
 801330c:	20000140 	.word	0x20000140
 8013310:	080009dc 	.word	0x080009dc
 8013314:	080009e0 	.word	0x080009e0
 8013318:	080009f0 	.word	0x080009f0
 801331c:	4b81      	ldr	r3, [pc, #516]	; (8013524 <Update_Detail+0xadc>)
 801331e:	2210      	movs	r2, #16
 8013320:	21e1      	movs	r1, #225	; 0xe1
 8013322:	f7fb f8dd 	bl	800e4e0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013326:	4b80      	ldr	r3, [pc, #512]	; (8013528 <Update_Detail+0xae0>)
 8013328:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801332c:	2b00      	cmp	r3, #0
 801332e:	d004      	beq.n	801333a <Update_Detail+0x8f2>
 8013330:	4b7e      	ldr	r3, [pc, #504]	; (801352c <Update_Detail+0xae4>)
 8013332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013336:	801a      	strh	r2, [r3, #0]
 8013338:	e002      	b.n	8013340 <Update_Detail+0x8f8>
          else KEYTIME = 0;
 801333a:	4b7c      	ldr	r3, [pc, #496]	; (801352c <Update_Detail+0xae4>)
 801333c:	2200      	movs	r2, #0
 801333e:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013340:	4b7b      	ldr	r3, [pc, #492]	; (8013530 <Update_Detail+0xae8>)
 8013342:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013346:	b29a      	uxth	r2, r3
 8013348:	4b77      	ldr	r3, [pc, #476]	; (8013528 <Update_Detail+0xae0>)
 801334a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801334e:	b29b      	uxth	r3, r3
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	b29b      	uxth	r3, r3
 8013354:	4413      	add	r3, r2
 8013356:	b29b      	uxth	r3, r3
 8013358:	b21a      	sxth	r2, r3
 801335a:	4b75      	ldr	r3, [pc, #468]	; (8013530 <Update_Detail+0xae8>)
 801335c:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 801335e:	4b72      	ldr	r3, [pc, #456]	; (8013528 <Update_Detail+0xae0>)
 8013360:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013364:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013366:	f9b7 3000 	ldrsh.w	r3, [r7]
 801336a:	4a72      	ldr	r2, [pc, #456]	; (8013534 <Update_Detail+0xaec>)
 801336c:	5cd3      	ldrb	r3, [r2, r3]
 801336e:	461c      	mov	r4, r3
 8013370:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013374:	4a70      	ldr	r2, [pc, #448]	; (8013538 <Update_Detail+0xaf0>)
 8013376:	5cd3      	ldrb	r3, [r2, r3]
 8013378:	4618      	mov	r0, r3
 801337a:	f7fe f821 	bl	80113c0 <Exp>
 801337e:	4603      	mov	r3, r0
 8013380:	fb03 f204 	mul.w	r2, r3, r4
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	fb02 f303 	mul.w	r3, r2, r3
 801338a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 801338c:	2301      	movs	r3, #1
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	2302      	movs	r3, #2
 8013392:	4a6a      	ldr	r2, [pc, #424]	; (801353c <Update_Detail+0xaf4>)
 8013394:	6939      	ldr	r1, [r7, #16]
 8013396:	486a      	ldr	r0, [pc, #424]	; (8013540 <Update_Detail+0xaf8>)
 8013398:	f7fd ff16 	bl	80111c8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 801339c:	20e7      	movs	r0, #231	; 0xe7
 801339e:	4b69      	ldr	r3, [pc, #420]	; (8013544 <Update_Detail+0xafc>)
 80133a0:	2211      	movs	r2, #17
 80133a2:	21e1      	movs	r1, #225	; 0xe1
 80133a4:	f7fb f89c 	bl	800e4e0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 80133a8:	23e7      	movs	r3, #231	; 0xe7
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	3309      	adds	r3, #9
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	b218      	sxth	r0, r3
 80133b2:	4b65      	ldr	r3, [pc, #404]	; (8013548 <Update_Detail+0xb00>)
 80133b4:	2201      	movs	r2, #1
 80133b6:	21e1      	movs	r1, #225	; 0xe1
 80133b8:	f7fa fe28 	bl	800e00c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80133bc:	23e7      	movs	r3, #231	; 0xe7
 80133be:	b29b      	uxth	r3, r3
 80133c0:	3309      	adds	r3, #9
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	b218      	sxth	r0, r3
 80133c6:	4b5e      	ldr	r3, [pc, #376]	; (8013540 <Update_Detail+0xaf8>)
 80133c8:	2201      	movs	r2, #1
 80133ca:	21e1      	movs	r1, #225	; 0xe1
 80133cc:	f7fa fe1e 	bl	800e00c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80133d0:	4b55      	ldr	r3, [pc, #340]	; (8013528 <Update_Detail+0xae0>)
 80133d2:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d001      	beq.n	80133de <Update_Detail+0x996>
 80133da:	2202      	movs	r2, #2
 80133dc:	e000      	b.n	80133e0 <Update_Detail+0x998>
 80133de:	2200      	movs	r2, #0
 80133e0:	4b53      	ldr	r3, [pc, #332]	; (8013530 <Update_Detail+0xae8>)
 80133e2:	811a      	strh	r2, [r3, #8]
        break;
 80133e4:	e2e1      	b.n	80139aa <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 80133e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80133ea:	4619      	mov	r1, r3
 80133ec:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80133f0:	f7fa fdf4 	bl	800dfdc <SetColor>
        if(i == TIM_BASE)
 80133f4:	8afb      	ldrh	r3, [r7, #22]
 80133f6:	2b07      	cmp	r3, #7
 80133f8:	d11e      	bne.n	8013438 <Update_Detail+0x9f0>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80133fa:	8afb      	ldrh	r3, [r7, #22]
 80133fc:	4a53      	ldr	r2, [pc, #332]	; (801354c <Update_Detail+0xb04>)
 80133fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013402:	b29b      	uxth	r3, r3
 8013404:	3b03      	subs	r3, #3
 8013406:	b29b      	uxth	r3, r3
 8013408:	b219      	sxth	r1, r3
 801340a:	231e      	movs	r3, #30
 801340c:	9301      	str	r3, [sp, #4]
 801340e:	2302      	movs	r3, #2
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	230b      	movs	r3, #11
 8013414:	22e1      	movs	r2, #225	; 0xe1
 8013416:	2001      	movs	r0, #1
 8013418:	f7fa fece 	bl	800e1b8 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 801341c:	8afb      	ldrh	r3, [r7, #22]
 801341e:	4a4b      	ldr	r2, [pc, #300]	; (801354c <Update_Detail+0xb04>)
 8013420:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013424:	4b40      	ldr	r3, [pc, #256]	; (8013528 <Update_Detail+0xae0>)
 8013426:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801342a:	00db      	lsls	r3, r3, #3
 801342c:	4a48      	ldr	r2, [pc, #288]	; (8013550 <Update_Detail+0xb08>)
 801342e:	4413      	add	r3, r2
 8013430:	2201      	movs	r2, #1
 8013432:	21e1      	movs	r1, #225	; 0xe1
 8013434:	f7fa fdea 	bl	800e00c <DispStr>
        }
        if(i == SMPL_DPTH){
 8013438:	8afb      	ldrh	r3, [r7, #22]
 801343a:	2b09      	cmp	r3, #9
 801343c:	d126      	bne.n	801348c <Update_Detail+0xa44>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 801343e:	23f8      	movs	r3, #248	; 0xf8
 8013440:	b29b      	uxth	r3, r3
 8013442:	3b03      	subs	r3, #3
 8013444:	b29b      	uxth	r3, r3
 8013446:	b219      	sxth	r1, r3
 8013448:	2342      	movs	r3, #66	; 0x42
 801344a:	9301      	str	r3, [sp, #4]
 801344c:	2300      	movs	r3, #0
 801344e:	9300      	str	r3, [sp, #0]
 8013450:	230b      	movs	r3, #11
 8013452:	2203      	movs	r2, #3
 8013454:	2001      	movs	r0, #1
 8013456:	f7fa feaf 	bl	800e1b8 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 801345a:	20f8      	movs	r0, #248	; 0xf8
 801345c:	4b3d      	ldr	r3, [pc, #244]	; (8013554 <Update_Detail+0xb0c>)
 801345e:	2201      	movs	r2, #1
 8013460:	2103      	movs	r1, #3
 8013462:	f7fa fdd3 	bl	800e00c <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013466:	23f8      	movs	r3, #248	; 0xf8
 8013468:	b29b      	uxth	r3, r3
 801346a:	3336      	adds	r3, #54	; 0x36
 801346c:	b29b      	uxth	r3, r3
 801346e:	b218      	sxth	r0, r3
 8013470:	4b2d      	ldr	r3, [pc, #180]	; (8013528 <Update_Detail+0xae0>)
 8013472:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013476:	461a      	mov	r2, r3
 8013478:	4613      	mov	r3, r2
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	4413      	add	r3, r2
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	4a35      	ldr	r2, [pc, #212]	; (8013558 <Update_Detail+0xb10>)
 8013482:	4413      	add	r3, r2
 8013484:	2201      	movs	r2, #1
 8013486:	2103      	movs	r1, #3
 8013488:	f7fa fdc0 	bl	800e00c <DispStr>
        }
        Update_Windows();
 801348c:	f000 fbb8 	bl	8013c00 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013490:	4b32      	ldr	r3, [pc, #200]	; (801355c <Update_Detail+0xb14>)
 8013492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013496:	b29a      	uxth	r2, r3
 8013498:	4b23      	ldr	r3, [pc, #140]	; (8013528 <Update_Detail+0xae0>)
 801349a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801349e:	b29b      	uxth	r3, r3
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	3302      	adds	r3, #2
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	b21a      	sxth	r2, r3
 80134aa:	4b21      	ldr	r3, [pc, #132]	; (8013530 <Update_Detail+0xae8>)
 80134ac:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 80134ae:	4b20      	ldr	r3, [pc, #128]	; (8013530 <Update_Detail+0xae8>)
 80134b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80134b4:	f023 0301 	bic.w	r3, r3, #1
 80134b8:	b21a      	sxth	r2, r3
 80134ba:	4b1d      	ldr	r3, [pc, #116]	; (8013530 <Update_Detail+0xae8>)
 80134bc:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 80134be:	4b1c      	ldr	r3, [pc, #112]	; (8013530 <Update_Detail+0xae8>)
 80134c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134c4:	f023 0301 	bic.w	r3, r3, #1
 80134c8:	b21a      	sxth	r2, r3
 80134ca:	4b19      	ldr	r3, [pc, #100]	; (8013530 <Update_Detail+0xae8>)
 80134cc:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 80134ce:	4b18      	ldr	r3, [pc, #96]	; (8013530 <Update_Detail+0xae8>)
 80134d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80134d4:	f023 0301 	bic.w	r3, r3, #1
 80134d8:	b21a      	sxth	r2, r3
 80134da:	4b15      	ldr	r3, [pc, #84]	; (8013530 <Update_Detail+0xae8>)
 80134dc:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 80134de:	4b12      	ldr	r3, [pc, #72]	; (8013528 <Update_Detail+0xae0>)
 80134e0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	3301      	adds	r3, #1
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	b21a      	sxth	r2, r3
 80134ec:	4b10      	ldr	r3, [pc, #64]	; (8013530 <Update_Detail+0xae8>)
 80134ee:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 80134f0:	4b0d      	ldr	r3, [pc, #52]	; (8013528 <Update_Detail+0xae0>)
 80134f2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	3301      	adds	r3, #1
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	b21a      	sxth	r2, r3
 80134fe:	4b0c      	ldr	r3, [pc, #48]	; (8013530 <Update_Detail+0xae8>)
 8013500:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013502:	4b09      	ldr	r3, [pc, #36]	; (8013528 <Update_Detail+0xae0>)
 8013504:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013508:	2b00      	cmp	r3, #0
 801350a:	d001      	beq.n	8013510 <Update_Detail+0xac8>
 801350c:	2202      	movs	r2, #2
 801350e:	e000      	b.n	8013512 <Update_Detail+0xaca>
 8013510:	2200      	movs	r2, #0
 8013512:	4b07      	ldr	r3, [pc, #28]	; (8013530 <Update_Detail+0xae8>)
 8013514:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013516:	4b04      	ldr	r3, [pc, #16]	; (8013528 <Update_Detail+0xae0>)
 8013518:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801351c:	2b00      	cmp	r3, #0
 801351e:	d01f      	beq.n	8013560 <Update_Detail+0xb18>
 8013520:	2202      	movs	r2, #2
 8013522:	e01e      	b.n	8013562 <Update_Detail+0xb1a>
 8013524:	080009b0 	.word	0x080009b0
 8013528:	20000274 	.word	0x20000274
 801352c:	20000732 	.word	0x20000732
 8013530:	20000140 	.word	0x20000140
 8013534:	080021cc 	.word	0x080021cc
 8013538:	080021a4 	.word	0x080021a4
 801353c:	08001d9c 	.word	0x08001d9c
 8013540:	20002660 	.word	0x20002660
 8013544:	080009ec 	.word	0x080009ec
 8013548:	080009e4 	.word	0x080009e4
 801354c:	080021f8 	.word	0x080021f8
 8013550:	200001ac 	.word	0x200001ac
 8013554:	080009c4 	.word	0x080009c4
 8013558:	08001ce8 	.word	0x08001ce8
 801355c:	20000536 	.word	0x20000536
 8013560:	2200      	movs	r2, #0
 8013562:	4ba6      	ldr	r3, [pc, #664]	; (80137fc <Update_Detail+0xdb4>)
 8013564:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013566:	4ba5      	ldr	r3, [pc, #660]	; (80137fc <Update_Detail+0xdb4>)
 8013568:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801356c:	461a      	mov	r2, r3
 801356e:	4ba3      	ldr	r3, [pc, #652]	; (80137fc <Update_Detail+0xdb4>)
 8013570:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013574:	1ad3      	subs	r3, r2, r3
 8013576:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013578:	4ba1      	ldr	r3, [pc, #644]	; (8013800 <Update_Detail+0xdb8>)
 801357a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801357e:	461a      	mov	r2, r3
 8013580:	4ba0      	ldr	r3, [pc, #640]	; (8013804 <Update_Detail+0xdbc>)
 8013582:	5c9b      	ldrb	r3, [r3, r2]
 8013584:	461c      	mov	r4, r3
 8013586:	4b9e      	ldr	r3, [pc, #632]	; (8013800 <Update_Detail+0xdb8>)
 8013588:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801358c:	461a      	mov	r2, r3
 801358e:	4b9e      	ldr	r3, [pc, #632]	; (8013808 <Update_Detail+0xdc0>)
 8013590:	5c9b      	ldrb	r3, [r3, r2]
 8013592:	4618      	mov	r0, r3
 8013594:	f7fd ff14 	bl	80113c0 <Exp>
 8013598:	4603      	mov	r3, r0
 801359a:	fb03 f204 	mul.w	r2, r3, r4
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	fb02 f303 	mul.w	r3, r2, r3
 80135a4:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 80135a6:	2301      	movs	r3, #1
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	2303      	movs	r3, #3
 80135ac:	4a97      	ldr	r2, [pc, #604]	; (801380c <Update_Detail+0xdc4>)
 80135ae:	6939      	ldr	r1, [r7, #16]
 80135b0:	4897      	ldr	r0, [pc, #604]	; (8013810 <Update_Detail+0xdc8>)
 80135b2:	f7fd fe09 	bl	80111c8 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80135b6:	2307      	movs	r3, #7
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	3b03      	subs	r3, #3
 80135bc:	b29b      	uxth	r3, r3
 80135be:	b219      	sxth	r1, r3
 80135c0:	2336      	movs	r3, #54	; 0x36
 80135c2:	9301      	str	r3, [sp, #4]
 80135c4:	2300      	movs	r3, #0
 80135c6:	9300      	str	r3, [sp, #0]
 80135c8:	230b      	movs	r3, #11
 80135ca:	2203      	movs	r2, #3
 80135cc:	2001      	movs	r0, #1
 80135ce:	f7fa fdf3 	bl	800e1b8 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80135d2:	2007      	movs	r0, #7
 80135d4:	4b8f      	ldr	r3, [pc, #572]	; (8013814 <Update_Detail+0xdcc>)
 80135d6:	2211      	movs	r2, #17
 80135d8:	2103      	movs	r1, #3
 80135da:	f7fa fd17 	bl	800e00c <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 80135de:	2307      	movs	r3, #7
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	3306      	adds	r3, #6
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	b218      	sxth	r0, r3
 80135e8:	4b8b      	ldr	r3, [pc, #556]	; (8013818 <Update_Detail+0xdd0>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	2103      	movs	r1, #3
 80135ee:	f7fa fd0d 	bl	800e00c <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 80135f2:	2307      	movs	r3, #7
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	332a      	adds	r3, #42	; 0x2a
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	b218      	sxth	r0, r3
 80135fc:	4b87      	ldr	r3, [pc, #540]	; (801381c <Update_Detail+0xdd4>)
 80135fe:	2201      	movs	r2, #1
 8013600:	2103      	movs	r1, #3
 8013602:	f7fa fd03 	bl	800e00c <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013606:	2307      	movs	r3, #7
 8013608:	b29b      	uxth	r3, r3
 801360a:	3312      	adds	r3, #18
 801360c:	b29b      	uxth	r3, r3
 801360e:	b218      	sxth	r0, r3
 8013610:	4b7f      	ldr	r3, [pc, #508]	; (8013810 <Update_Detail+0xdc8>)
 8013612:	2201      	movs	r2, #1
 8013614:	2103      	movs	r1, #3
 8013616:	f7fa fcf9 	bl	800e00c <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 801361a:	4b79      	ldr	r3, [pc, #484]	; (8013800 <Update_Detail+0xdb8>)
 801361c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013620:	4618      	mov	r0, r3
 8013622:	f7f9 f82b 	bl	800c67c <Set_Base>
      break;
 8013626:	e1c0      	b.n	80139aa <Update_Detail+0xf62>

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013628:	4b7d      	ldr	r3, [pc, #500]	; (8013820 <Update_Detail+0xdd8>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013630:	fb02 f303 	mul.w	r3, r2, r3
 8013634:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013636:	4b72      	ldr	r3, [pc, #456]	; (8013800 <Update_Detail+0xdb8>)
 8013638:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801363c:	2b08      	cmp	r3, #8
 801363e:	dc05      	bgt.n	801364c <Update_Detail+0xc04>
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4a78      	ldr	r2, [pc, #480]	; (8013824 <Update_Detail+0xddc>)
 8013644:	fb02 f303 	mul.w	r3, r2, r3
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	e00a      	b.n	8013662 <Update_Detail+0xc1a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 801364c:	4b6c      	ldr	r3, [pc, #432]	; (8013800 <Update_Detail+0xdb8>)
 801364e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013652:	2b11      	cmp	r3, #17
 8013654:	dc05      	bgt.n	8013662 <Update_Detail+0xc1a>
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801365c:	fb02 f303 	mul.w	r3, r2, r3
 8013660:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013662:	4b67      	ldr	r3, [pc, #412]	; (8013800 <Update_Detail+0xdb8>)
 8013664:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013668:	461a      	mov	r2, r3
 801366a:	4b6f      	ldr	r3, [pc, #444]	; (8013828 <Update_Detail+0xde0>)
 801366c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013670:	461a      	mov	r2, r3
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	fbb3 f3f2 	udiv	r3, r3, r2
 8013678:	4a61      	ldr	r2, [pc, #388]	; (8013800 <Update_Detail+0xdb8>)
 801367a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801367e:	4611      	mov	r1, r2
 8013680:	4a6a      	ldr	r2, [pc, #424]	; (801382c <Update_Detail+0xde4>)
 8013682:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013686:	fbb3 f3f2 	udiv	r3, r3, r2
 801368a:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 801368c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2201      	movs	r2, #1
 8013694:	2101      	movs	r1, #1
 8013696:	f000 f9e9 	bl	8013a6c <DispMeter>
      break;
 801369a:	e186      	b.n	80139aa <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 801369c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80136a0:	887b      	ldrh	r3, [r7, #2]
 80136a2:	b2d9      	uxtb	r1, r3
 80136a4:	4b62      	ldr	r3, [pc, #392]	; (8013830 <Update_Detail+0xde8>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2264      	movs	r2, #100	; 0x64
 80136aa:	fb03 f202 	mul.w	r2, r3, r2
 80136ae:	887b      	ldrh	r3, [r7, #2]
 80136b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80136b4:	2201      	movs	r2, #1
 80136b6:	f000 f9d9 	bl	8013a6c <DispMeter>
        break;
 80136ba:	e176      	b.n	80139aa <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 80136bc:	4b5d      	ldr	r3, [pc, #372]	; (8013834 <Update_Detail+0xdec>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	f113 0f03 	cmn.w	r3, #3
 80136c4:	db06      	blt.n	80136d4 <Update_Detail+0xc8c>
 80136c6:	4b5b      	ldr	r3, [pc, #364]	; (8013834 <Update_Detail+0xdec>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b03      	cmp	r3, #3
 80136cc:	dc02      	bgt.n	80136d4 <Update_Detail+0xc8c>
        {
          Tmp = 0.00;
 80136ce:	2300      	movs	r3, #0
 80136d0:	613b      	str	r3, [r7, #16]
 80136d2:	e026      	b.n	8013722 <Update_Detail+0xcda>
        }else{
		  scale = (List[PROBEATT].Val?
 80136d4:	4b4a      	ldr	r3, [pc, #296]	; (8013800 <Update_Detail+0xdb8>)
 80136d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00b      	beq.n	80136f6 <Update_Detail+0xcae>
 80136de:	4b48      	ldr	r3, [pc, #288]	; (8013800 <Update_Detail+0xdb8>)
 80136e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136e4:	461a      	mov	r2, r3
 80136e6:	4b54      	ldr	r3, [pc, #336]	; (8013838 <Update_Detail+0xdf0>)
 80136e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80136ec:	4613      	mov	r3, r2
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	4413      	add	r3, r2
 80136f2:	00db      	lsls	r3, r3, #3
 80136f4:	e00a      	b.n	801370c <Update_Detail+0xcc4>
 80136f6:	4b42      	ldr	r3, [pc, #264]	; (8013800 <Update_Detail+0xdb8>)
 80136f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b4f      	ldr	r3, [pc, #316]	; (801383c <Update_Detail+0xdf4>)
 8013700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013704:	4613      	mov	r3, r2
 8013706:	009b      	lsls	r3, r3, #2
 8013708:	4413      	add	r3, r2
 801370a:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 801370c:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 801370e:	4b49      	ldr	r3, [pc, #292]	; (8013834 <Update_Detail+0xdec>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	fb02 f303 	mul.w	r3, r2, r3
 8013718:	131a      	asrs	r2, r3, #12
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	fb02 f303 	mul.w	r3, r2, r3
 8013720:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013722:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	2201      	movs	r2, #1
 801372a:	2101      	movs	r1, #1
 801372c:	f000 f99e 	bl	8013a6c <DispMeter>
        break;
 8013730:	e13b      	b.n	80139aa <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013732:	4b43      	ldr	r3, [pc, #268]	; (8013840 <Update_Detail+0xdf8>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f113 0f06 	cmn.w	r3, #6
 801373a:	db06      	blt.n	801374a <Update_Detail+0xd02>
 801373c:	4b40      	ldr	r3, [pc, #256]	; (8013840 <Update_Detail+0xdf8>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b06      	cmp	r3, #6
 8013742:	dc02      	bgt.n	801374a <Update_Detail+0xd02>
          Tmp = 0.00;
 8013744:	2300      	movs	r3, #0
 8013746:	613b      	str	r3, [r7, #16]
 8013748:	e033      	b.n	80137b2 <Update_Detail+0xd6a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 801374a:	4b2d      	ldr	r3, [pc, #180]	; (8013800 <Update_Detail+0xdb8>)
 801374c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00b      	beq.n	801376c <Update_Detail+0xd24>
 8013754:	4b2a      	ldr	r3, [pc, #168]	; (8013800 <Update_Detail+0xdb8>)
 8013756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801375a:	461a      	mov	r2, r3
 801375c:	4b36      	ldr	r3, [pc, #216]	; (8013838 <Update_Detail+0xdf0>)
 801375e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013762:	4613      	mov	r3, r2
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4413      	add	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	e00a      	b.n	8013782 <Update_Detail+0xd3a>
 801376c:	4b24      	ldr	r3, [pc, #144]	; (8013800 <Update_Detail+0xdb8>)
 801376e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013772:	461a      	mov	r2, r3
 8013774:	4b31      	ldr	r3, [pc, #196]	; (801383c <Update_Detail+0xdf4>)
 8013776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801377a:	4613      	mov	r3, r2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	4413      	add	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013782:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013784:	4b2f      	ldr	r3, [pc, #188]	; (8013844 <Update_Detail+0xdfc>)
 8013786:	f9b3 3000 	ldrsh.w	r3, [r3]
 801378a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	fb02 f303 	mul.w	r3, r2, r3
 8013794:	131a      	asrs	r2, r3, #12
 8013796:	4b2c      	ldr	r3, [pc, #176]	; (8013848 <Update_Detail+0xe00>)
 8013798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801379c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80137a0:	6879      	ldr	r1, [r7, #4]
 80137a2:	fb01 f303 	mul.w	r3, r1, r3
 80137a6:	131b      	asrs	r3, r3, #12
 80137a8:	1ad2      	subs	r2, r2, r3
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	fb02 f303 	mul.w	r3, r2, r3
 80137b0:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 80137b2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2201      	movs	r2, #1
 80137ba:	2101      	movs	r1, #1
 80137bc:	f000 f956 	bl	8013a6c <DispMeter>
        break;
 80137c0:	e0f3      	b.n	80139aa <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 80137c2:	4b22      	ldr	r3, [pc, #136]	; (801384c <Update_Detail+0xe04>)
 80137c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfb8      	it	lt
 80137cc:	425b      	neglt	r3, r3
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d802      	bhi.n	80137da <Update_Detail+0xd92>
        {
          Tmp = 0.00;
 80137d4:	2300      	movs	r3, #0
 80137d6:	613b      	str	r3, [r7, #16]
 80137d8:	e058      	b.n	801388c <Update_Detail+0xe44>
        }else{
          scale = (List[PROBEATT].Val?
 80137da:	4b09      	ldr	r3, [pc, #36]	; (8013800 <Update_Detail+0xdb8>)
 80137dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d035      	beq.n	8013850 <Update_Detail+0xe08>
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <Update_Detail+0xdb8>)
 80137e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80137ea:	461a      	mov	r2, r3
 80137ec:	4b12      	ldr	r3, [pc, #72]	; (8013838 <Update_Detail+0xdf0>)
 80137ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80137f2:	4613      	mov	r3, r2
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	4413      	add	r3, r2
 80137f8:	00db      	lsls	r3, r3, #3
 80137fa:	e034      	b.n	8013866 <Update_Detail+0xe1e>
 80137fc:	20000140 	.word	0x20000140
 8013800:	20000274 	.word	0x20000274
 8013804:	080021b8 	.word	0x080021b8
 8013808:	08002190 	.word	0x08002190
 801380c:	08001d84 	.word	0x08001d84
 8013810:	20002660 	.word	0x20002660
 8013814:	080009b4 	.word	0x080009b4
 8013818:	080009d0 	.word	0x080009d0
 801381c:	08000a24 	.word	0x08000a24
 8013820:	20002684 	.word	0x20002684
 8013824:	000f4240 	.word	0x000f4240
 8013828:	0800233c 	.word	0x0800233c
 801382c:	0800230c 	.word	0x0800230c
 8013830:	20002680 	.word	0x20002680
 8013834:	20002674 	.word	0x20002674
 8013838:	2000024c 	.word	0x2000024c
 801383c:	08001e04 	.word	0x08001e04
 8013840:	20002678 	.word	0x20002678
 8013844:	2000266c 	.word	0x2000266c
 8013848:	2000266e 	.word	0x2000266e
 801384c:	20002672 	.word	0x20002672
 8013850:	4b7b      	ldr	r3, [pc, #492]	; (8013a40 <Update_Detail+0xff8>)
 8013852:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013856:	461a      	mov	r2, r3
 8013858:	4b7a      	ldr	r3, [pc, #488]	; (8013a44 <Update_Detail+0xffc>)
 801385a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801385e:	4613      	mov	r3, r2
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	4413      	add	r3, r2
 8013864:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8013866:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013868:	4b77      	ldr	r3, [pc, #476]	; (8013a48 <Update_Detail+0x1000>)
 801386a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801386e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	fb02 f303 	mul.w	r3, r2, r3
 8013878:	131b      	asrs	r3, r3, #12
 801387a:	3364      	adds	r3, #100	; 0x64
 801387c:	4a70      	ldr	r2, [pc, #448]	; (8013a40 <Update_Detail+0xff8>)
 801387e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013882:	1a9a      	subs	r2, r3, r2
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	fb02 f303 	mul.w	r3, r2, r3
 801388a:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801388c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	2201      	movs	r2, #1
 8013894:	2101      	movs	r1, #1
 8013896:	f000 f8e9 	bl	8013a6c <DispMeter>
        break;
 801389a:	e086      	b.n	80139aa <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 801389c:	4b6b      	ldr	r3, [pc, #428]	; (8013a4c <Update_Detail+0x1004>)
 801389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	bfb8      	it	lt
 80138a6:	425b      	neglt	r3, r3
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	2b03      	cmp	r3, #3
 80138ac:	d802      	bhi.n	80138b4 <Update_Detail+0xe6c>
          Tmp = 0.00;
 80138ae:	2300      	movs	r3, #0
 80138b0:	613b      	str	r3, [r7, #16]
 80138b2:	e02e      	b.n	8013912 <Update_Detail+0xeca>
        }else{
		  scale = (List[PROBEATT].Val?
 80138b4:	4b62      	ldr	r3, [pc, #392]	; (8013a40 <Update_Detail+0xff8>)
 80138b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00b      	beq.n	80138d6 <Update_Detail+0xe8e>
 80138be:	4b60      	ldr	r3, [pc, #384]	; (8013a40 <Update_Detail+0xff8>)
 80138c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138c4:	461a      	mov	r2, r3
 80138c6:	4b62      	ldr	r3, [pc, #392]	; (8013a50 <Update_Detail+0x1008>)
 80138c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80138cc:	4613      	mov	r3, r2
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4413      	add	r3, r2
 80138d2:	00db      	lsls	r3, r3, #3
 80138d4:	e00a      	b.n	80138ec <Update_Detail+0xea4>
 80138d6:	4b5a      	ldr	r3, [pc, #360]	; (8013a40 <Update_Detail+0xff8>)
 80138d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80138dc:	461a      	mov	r2, r3
 80138de:	4b59      	ldr	r3, [pc, #356]	; (8013a44 <Update_Detail+0xffc>)
 80138e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80138e4:	4613      	mov	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4413      	add	r3, r2
 80138ea:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80138ec:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80138ee:	4b57      	ldr	r3, [pc, #348]	; (8013a4c <Update_Detail+0x1004>)
 80138f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	fb02 f303 	mul.w	r3, r2, r3
 80138fe:	131b      	asrs	r3, r3, #12
 8013900:	3364      	adds	r3, #100	; 0x64
 8013902:	4a4f      	ldr	r2, [pc, #316]	; (8013a40 <Update_Detail+0xff8>)
 8013904:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013908:	1a9a      	subs	r2, r3, r2
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	fb02 f303 	mul.w	r3, r2, r3
 8013910:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013912:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	2201      	movs	r2, #1
 801391a:	2101      	movs	r1, #1
 801391c:	f000 f8a6 	bl	8013a6c <DispMeter>
        break;
 8013920:	e043      	b.n	80139aa <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 8013922:	4b4c      	ldr	r3, [pc, #304]	; (8013a54 <Update_Detail+0x100c>)
 8013924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013928:	2b00      	cmp	r3, #0
 801392a:	bfb8      	it	lt
 801392c:	425b      	neglt	r3, r3
 801392e:	b29b      	uxth	r3, r3
 8013930:	2b03      	cmp	r3, #3
 8013932:	d802      	bhi.n	801393a <Update_Detail+0xef2>
          Tmp = 0.00;
 8013934:	2300      	movs	r3, #0
 8013936:	613b      	str	r3, [r7, #16]
 8013938:	e02e      	b.n	8013998 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 801393a:	4b41      	ldr	r3, [pc, #260]	; (8013a40 <Update_Detail+0xff8>)
 801393c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013940:	2b00      	cmp	r3, #0
 8013942:	d00b      	beq.n	801395c <Update_Detail+0xf14>
 8013944:	4b3e      	ldr	r3, [pc, #248]	; (8013a40 <Update_Detail+0xff8>)
 8013946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801394a:	461a      	mov	r2, r3
 801394c:	4b40      	ldr	r3, [pc, #256]	; (8013a50 <Update_Detail+0x1008>)
 801394e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013952:	4613      	mov	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4413      	add	r3, r2
 8013958:	00db      	lsls	r3, r3, #3
 801395a:	e00a      	b.n	8013972 <Update_Detail+0xf2a>
 801395c:	4b38      	ldr	r3, [pc, #224]	; (8013a40 <Update_Detail+0xff8>)
 801395e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013962:	461a      	mov	r2, r3
 8013964:	4b37      	ldr	r3, [pc, #220]	; (8013a44 <Update_Detail+0xffc>)
 8013966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801396a:	4613      	mov	r3, r2
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	4413      	add	r3, r2
 8013970:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013972:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013974:	4b37      	ldr	r3, [pc, #220]	; (8013a54 <Update_Detail+0x100c>)
 8013976:	f9b3 3000 	ldrsh.w	r3, [r3]
 801397a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	fb02 f303 	mul.w	r3, r2, r3
 8013984:	131b      	asrs	r3, r3, #12
 8013986:	3364      	adds	r3, #100	; 0x64
 8013988:	4a2d      	ldr	r2, [pc, #180]	; (8013a40 <Update_Detail+0xff8>)
 801398a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801398e:	1a9a      	subs	r2, r3, r2
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	fb02 f303 	mul.w	r3, r2, r3
 8013996:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 8013998:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	2200      	movs	r2, #0
 80139a0:	2101      	movs	r1, #1
 80139a2:	f000 f863 	bl	8013a6c <DispMeter>
        break;
 80139a6:	e000      	b.n	80139aa <Update_Detail+0xf62>
        break;
 80139a8:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 80139aa:	4b2b      	ldr	r3, [pc, #172]	; (8013a58 <Update_Detail+0x1010>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d03a      	beq.n	8013a28 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 80139b2:	4b29      	ldr	r3, [pc, #164]	; (8013a58 <Update_Detail+0x1010>)
 80139b4:	2200      	movs	r2, #0
 80139b6:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 80139b8:	4b28      	ldr	r3, [pc, #160]	; (8013a5c <Update_Detail+0x1014>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80139c0:	fb02 f303 	mul.w	r3, r2, r3
 80139c4:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 80139c6:	4b1e      	ldr	r3, [pc, #120]	; (8013a40 <Update_Detail+0xff8>)
 80139c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139cc:	2b08      	cmp	r3, #8
 80139ce:	dc05      	bgt.n	80139dc <Update_Detail+0xf94>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	4a23      	ldr	r2, [pc, #140]	; (8013a60 <Update_Detail+0x1018>)
 80139d4:	fb02 f303 	mul.w	r3, r2, r3
 80139d8:	60fb      	str	r3, [r7, #12]
 80139da:	e00a      	b.n	80139f2 <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 80139dc:	4b18      	ldr	r3, [pc, #96]	; (8013a40 <Update_Detail+0xff8>)
 80139de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139e2:	2b11      	cmp	r3, #17
 80139e4:	dc05      	bgt.n	80139f2 <Update_Detail+0xfaa>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80139ec:	fb02 f303 	mul.w	r3, r2, r3
 80139f0:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 80139f2:	4b13      	ldr	r3, [pc, #76]	; (8013a40 <Update_Detail+0xff8>)
 80139f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139f8:	461a      	mov	r2, r3
 80139fa:	4b1a      	ldr	r3, [pc, #104]	; (8013a64 <Update_Detail+0x101c>)
 80139fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a00:	461a      	mov	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a08:	4a0d      	ldr	r2, [pc, #52]	; (8013a40 <Update_Detail+0xff8>)
 8013a0a:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013a0e:	4611      	mov	r1, r2
 8013a10:	4a15      	ldr	r2, [pc, #84]	; (8013a68 <Update_Detail+0x1020>)
 8013a12:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a1a:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	461a      	mov	r2, r3
 8013a20:	2101      	movs	r1, #1
 8013a22:	2001      	movs	r0, #1
 8013a24:	f000 fa0e 	bl	8013e44 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8013a28:	8afb      	ldrh	r3, [r7, #22]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	82fb      	strh	r3, [r7, #22]
 8013a2e:	8afb      	ldrh	r3, [r7, #22]
 8013a30:	2b29      	cmp	r3, #41	; 0x29
 8013a32:	f67f a849 	bls.w	8012ac8 <Update_Detail+0x80>
      }
    }
  }

}
 8013a36:	bf00      	nop
 8013a38:	bf00      	nop
 8013a3a:	371c      	adds	r7, #28
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd90      	pop	{r4, r7, pc}
 8013a40:	20000274 	.word	0x20000274
 8013a44:	08001e04 	.word	0x08001e04
 8013a48:	20002672 	.word	0x20002672
 8013a4c:	2000266c 	.word	0x2000266c
 8013a50:	2000024c 	.word	0x2000024c
 8013a54:	2000266e 	.word	0x2000266e
 8013a58:	200001a8 	.word	0x200001a8
 8013a5c:	20002684 	.word	0x20002684
 8013a60:	000f4240 	.word	0x000f4240
 8013a64:	0800233c 	.word	0x0800233c
 8013a68:	0800230c 	.word	0x0800230c

08013a6c <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af02      	add	r7, sp, #8
 8013a72:	603b      	str	r3, [r7, #0]
 8013a74:	4603      	mov	r3, r0
 8013a76:	80fb      	strh	r3, [r7, #6]
 8013a78:	460b      	mov	r3, r1
 8013a7a:	717b      	strb	r3, [r7, #5]
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 8013a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a84:	4619      	mov	r1, r3
 8013a86:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013a8a:	f7fa faa7 	bl	800dfdc <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 8013a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a92:	4a30      	ldr	r2, [pc, #192]	; (8013b54 <DispMeter+0xe8>)
 8013a94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	3b03      	subs	r3, #3
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	b219      	sxth	r1, r3
 8013aa0:	2348      	movs	r3, #72	; 0x48
 8013aa2:	9301      	str	r3, [sp, #4]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	230b      	movs	r3, #11
 8013aaa:	2203      	movs	r2, #3
 8013aac:	2001      	movs	r0, #1
 8013aae:	f7fa fb83 	bl	800e1b8 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 8013ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ab6:	4a27      	ldr	r2, [pc, #156]	; (8013b54 <DispMeter+0xe8>)
 8013ab8:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ac0:	f1a3 0213 	sub.w	r2, r3, #19
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	4413      	add	r3, r2
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	4a22      	ldr	r2, [pc, #136]	; (8013b58 <DispMeter+0xec>)
 8013ace:	4413      	add	r3, r2
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	2103      	movs	r1, #3
 8013ad4:	f7fa fa9a 	bl	800e00c <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8013ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013adc:	4a1f      	ldr	r2, [pc, #124]	; (8013b5c <DispMeter+0xf0>)
 8013ade:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013ae2:	793b      	ldrb	r3, [r7, #4]
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	2303      	movs	r3, #3
 8013ae8:	6839      	ldr	r1, [r7, #0]
 8013aea:	481d      	ldr	r0, [pc, #116]	; (8013b60 <DispMeter+0xf4>)
 8013aec:	f7fd fb6c 	bl	80111c8 <Value2Str>

  if(St)
 8013af0:	797b      	ldrb	r3, [r7, #5]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d01c      	beq.n	8013b30 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8013af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013afa:	4a16      	ldr	r2, [pc, #88]	; (8013b54 <DispMeter+0xe8>)
 8013afc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	3318      	adds	r3, #24
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	b218      	sxth	r0, r3
 8013b08:	4b16      	ldr	r3, [pc, #88]	; (8013b64 <DispMeter+0xf8>)
 8013b0a:	2201      	movs	r2, #1
 8013b0c:	2103      	movs	r1, #3
 8013b0e:	f7fa fa7d 	bl	800e00c <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b16:	4a0f      	ldr	r2, [pc, #60]	; (8013b54 <DispMeter+0xe8>)
 8013b18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	331e      	adds	r3, #30
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	b218      	sxth	r0, r3
 8013b24:	4b0e      	ldr	r3, [pc, #56]	; (8013b60 <DispMeter+0xf4>)
 8013b26:	2201      	movs	r2, #1
 8013b28:	2103      	movs	r1, #3
 8013b2a:	f7fa fa6f 	bl	800e00c <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 8013b2e:	e00d      	b.n	8013b4c <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8013b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013b34:	4a07      	ldr	r2, [pc, #28]	; (8013b54 <DispMeter+0xe8>)
 8013b36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	3318      	adds	r3, #24
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	b218      	sxth	r0, r3
 8013b42:	4b09      	ldr	r3, [pc, #36]	; (8013b68 <DispMeter+0xfc>)
 8013b44:	2201      	movs	r2, #1
 8013b46:	2103      	movs	r1, #3
 8013b48:	f7fa fa60 	bl	800e00c <DispStr>
}
 8013b4c:	bf00      	nop
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	080021f8 	.word	0x080021f8
 8013b58:	08001db4 	.word	0x08001db4
 8013b5c:	20000274 	.word	0x20000274
 8013b60:	20002660 	.word	0x20002660
 8013b64:	08000a28 	.word	0x08000a28
 8013b68:	08000a34 	.word	0x08000a34

08013b6c <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 8013b72:	4b20      	ldr	r3, [pc, #128]	; (8013bf4 <DispStatus+0x88>)
 8013b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	f003 0301 	and.w	r3, r3, #1
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d102      	bne.n	8013b88 <DispStatus+0x1c>
 8013b82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013b86:	e000      	b.n	8013b8a <DispStatus+0x1e>
 8013b88:	231f      	movs	r3, #31
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b90:	f7fa fa24 	bl	800dfdc <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 8013b94:	4b17      	ldr	r3, [pc, #92]	; (8013bf4 <DispStatus+0x88>)
 8013b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	f003 0301 	and.w	r3, r3, #1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d10b      	bne.n	8013bbc <DispStatus+0x50>
 8013ba4:	4b14      	ldr	r3, [pc, #80]	; (8013bf8 <DispStatus+0x8c>)
 8013ba6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013ba8:	4b13      	ldr	r3, [pc, #76]	; (8013bf8 <DispStatus+0x8c>)
 8013baa:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8013bae:	4619      	mov	r1, r3
 8013bb0:	460b      	mov	r3, r1
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	440b      	add	r3, r1
 8013bb6:	005b      	lsls	r3, r3, #1
 8013bb8:	4413      	add	r3, r2
 8013bba:	e000      	b.n	8013bbe <DispStatus+0x52>
 8013bbc:	4b0f      	ldr	r3, [pc, #60]	; (8013bfc <DispStatus+0x90>)
 8013bbe:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8013bc0:	f240 1321 	movw	r3, #289	; 0x121
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	3b03      	subs	r3, #3
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	b219      	sxth	r1, r3
 8013bcc:	2318      	movs	r3, #24
 8013bce:	9301      	str	r3, [sp, #4]
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	230b      	movs	r3, #11
 8013bd6:	22e1      	movs	r2, #225	; 0xe1
 8013bd8:	2001      	movs	r0, #1
 8013bda:	f7fa faed 	bl	800e1b8 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 8013bde:	f240 1021 	movw	r0, #289	; 0x121
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2201      	movs	r2, #1
 8013be6:	21e1      	movs	r1, #225	; 0xe1
 8013be8:	f7fa fa10 	bl	800e00c <DispStr>
}
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20002656 	.word	0x20002656
 8013bf8:	20000274 	.word	0x20000274
 8013bfc:	08001d50 	.word	0x08001d50

08013c00 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8013c06:	4b6a      	ldr	r3, [pc, #424]	; (8013db0 <Update_Windows+0x1b0>)
 8013c08:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	4b69      	ldr	r3, [pc, #420]	; (8013db4 <Update_Windows+0x1b4>)
 8013c10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013c14:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8013c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c1a:	4a67      	ldr	r2, [pc, #412]	; (8013db8 <Update_Windows+0x1b8>)
 8013c1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c20:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8013c22:	4b66      	ldr	r3, [pc, #408]	; (8013dbc <Update_Windows+0x1bc>)
 8013c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	f040 80a9 	bne.w	8013d80 <Update_Windows+0x180>
 8013c2e:	4b64      	ldr	r3, [pc, #400]	; (8013dc0 <Update_Windows+0x1c0>)
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	f003 0302 	and.w	r3, r3, #2
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	f000 80a2 	beq.w	8013d80 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 8013c3c:	4b61      	ldr	r3, [pc, #388]	; (8013dc4 <Update_Windows+0x1c4>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013c42:	4b5b      	ldr	r3, [pc, #364]	; (8013db0 <Update_Windows+0x1b0>)
 8013c44:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013c48:	461a      	mov	r2, r3
 8013c4a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013c4e:	fb03 f202 	mul.w	r2, r3, r2
 8013c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	3302      	adds	r3, #2
 8013c5e:	b29b      	uxth	r3, r3
 8013c60:	81fb      	strh	r3, [r7, #14]
      x=2;
 8013c62:	2302      	movs	r3, #2
 8013c64:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013c66:	230f      	movs	r3, #15
 8013c68:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	817b      	strh	r3, [r7, #10]
 8013c6e:	e029      	b.n	8013cc4 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 8013c70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013c74:	b293      	uxth	r3, r2
 8013c76:	3301      	adds	r3, #1
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	81bb      	strh	r3, [r7, #12]
 8013c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c80:	4619      	mov	r1, r3
 8013c82:	4610      	mov	r0, r2
 8013c84:	f7fd fe60 	bl	8011948 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 8013c88:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013c8c:	f7fd feaa 	bl	80119e4 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 8013c90:	2300      	movs	r3, #0
 8013c92:	813b      	strh	r3, [r7, #8]
 8013c94:	e008      	b.n	8013ca8 <Update_Windows+0xa8>
 8013c96:	201f      	movs	r0, #31
 8013c98:	f7fd fea4 	bl	80119e4 <LCD_Set_Pixel>
 8013c9c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	813b      	strh	r3, [r7, #8]
 8013ca8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013cac:	2b01      	cmp	r3, #1
 8013cae:	ddf2      	ble.n	8013c96 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8013cb0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013cb4:	f7fd fe96 	bl	80119e4 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8013cb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	817b      	strh	r3, [r7, #10]
 8013cc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013cc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013ccc:	dbd0      	blt.n	8013c70 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 8013cce:	4b3b      	ldr	r3, [pc, #236]	; (8013dbc <Update_Windows+0x1bc>)
 8013cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d122      	bne.n	8013d1e <Update_Windows+0x11e>
 8013cd8:	4b3b      	ldr	r3, [pc, #236]	; (8013dc8 <Update_Windows+0x1c8>)
 8013cda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013cde:	2b09      	cmp	r3, #9
 8013ce0:	d11d      	bne.n	8013d1e <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 8013ce2:	4b3a      	ldr	r3, [pc, #232]	; (8013dcc <Update_Windows+0x1cc>)
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	b2db      	uxtb	r3, r3
 8013ce8:	2b06      	cmp	r3, #6
 8013cea:	d004      	beq.n	8013cf6 <Update_Windows+0xf6>
 8013cec:	4b37      	ldr	r3, [pc, #220]	; (8013dcc <Update_Windows+0x1cc>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	2b05      	cmp	r3, #5
 8013cf4:	d113      	bne.n	8013d1e <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8013cf6:	4b2e      	ldr	r3, [pc, #184]	; (8013db0 <Update_Windows+0x1b0>)
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8013cfe:	4b2c      	ldr	r3, [pc, #176]	; (8013db0 <Update_Windows+0x1b0>)
 8013d00:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013d04:	461a      	mov	r2, r3
 8013d06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8013d0a:	fb03 f202 	mul.w	r2, r3, r2
 8013d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d12:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	3302      	adds	r3, #2
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	81bb      	strh	r3, [r7, #12]
      y=15;
 8013d22:	230f      	movs	r3, #15
 8013d24:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8013d26:	2300      	movs	r3, #0
 8013d28:	817b      	strh	r3, [r7, #10]
 8013d2a:	e022      	b.n	8013d72 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 8013d2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8013d30:	b293      	uxth	r3, r2
 8013d32:	3301      	adds	r3, #1
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	81bb      	strh	r3, [r7, #12]
 8013d38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	4610      	mov	r0, r2
 8013d40:	f7fd fe02 	bl	8011948 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8013d44:	2300      	movs	r3, #0
 8013d46:	813b      	strh	r3, [r7, #8]
 8013d48:	e009      	b.n	8013d5e <Update_Windows+0x15e>
 8013d4a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8013d4e:	f7fd fe49 	bl	80119e4 <LCD_Set_Pixel>
 8013d52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	3301      	adds	r3, #1
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	813b      	strh	r3, [r7, #8]
 8013d5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d62:	2b03      	cmp	r3, #3
 8013d64:	ddf1      	ble.n	8013d4a <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 8013d66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	817b      	strh	r3, [r7, #10]
 8013d72:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013d76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	dbd6      	blt.n	8013d2c <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 8013d7e:	e012      	b.n	8013da6 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 8013d80:	4b0e      	ldr	r3, [pc, #56]	; (8013dbc <Update_Windows+0x1bc>)
 8013d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d10d      	bne.n	8013da6 <Update_Windows+0x1a6>
 8013d8a:	4b0d      	ldr	r3, [pc, #52]	; (8013dc0 <Update_Windows+0x1c0>)
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	f003 0302 	and.w	r3, r3, #2
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d107      	bne.n	8013da6 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 8013d96:	4b0b      	ldr	r3, [pc, #44]	; (8013dc4 <Update_Windows+0x1c4>)
 8013d98:	2200      	movs	r2, #0
 8013d9a:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 8013d9c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013da0:	f000 f816 	bl	8013dd0 <Clr_WavePosi>
  }
}
 8013da4:	e7ff      	b.n	8013da6 <Update_Windows+0x1a6>
 8013da6:	bf00      	nop
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	20000274 	.word	0x20000274
 8013db4:	0800230c 	.word	0x0800230c
 8013db8:	00015f90 	.word	0x00015f90
 8013dbc:	20002654 	.word	0x20002654
 8013dc0:	2000091a 	.word	0x2000091a
 8013dc4:	2000265c 	.word	0x2000265c
 8013dc8:	20000514 	.word	0x20000514
 8013dcc:	2000072e 	.word	0x2000072e

08013dd0 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 8013dda:	2302      	movs	r3, #2
 8013ddc:	81fb      	strh	r3, [r7, #14]
  y=14;
 8013dde:	230e      	movs	r3, #14
 8013de0:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 8013de2:	2300      	movs	r3, #0
 8013de4:	81bb      	strh	r3, [r7, #12]
 8013de6:	e022      	b.n	8013e2e <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8013de8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013dec:	b293      	uxth	r3, r2
 8013dee:	3301      	adds	r3, #1
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	81fb      	strh	r3, [r7, #14]
 8013df4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	f7fd fda4 	bl	8011948 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8013e00:	2300      	movs	r3, #0
 8013e02:	817b      	strh	r3, [r7, #10]
 8013e04:	e009      	b.n	8013e1a <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8013e06:	88fb      	ldrh	r3, [r7, #6]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fd fdeb 	bl	80119e4 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 8013e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	3301      	adds	r3, #1
 8013e16:	b29b      	uxth	r3, r3
 8013e18:	817b      	strh	r3, [r7, #10]
 8013e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013e1e:	2b05      	cmp	r3, #5
 8013e20:	ddf1      	ble.n	8013e06 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8013e22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	3301      	adds	r3, #1
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	81bb      	strh	r3, [r7, #12]
 8013e2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013e32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e36:	dbd7      	blt.n	8013de8 <Clr_WavePosi+0x18>
  }
}
 8013e38:	bf00      	nop
 8013e3a:	bf00      	nop
 8013e3c:	3710      	adds	r7, #16
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
	...

08013e44 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af02      	add	r7, sp, #8
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	603a      	str	r2, [r7, #0]
 8013e4e:	71fb      	strb	r3, [r7, #7]
 8013e50:	460b      	mov	r3, r1
 8013e52:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 8013e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e58:	4619      	mov	r1, r3
 8013e5a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013e5e:	f7fa f8bd 	bl	800dfdc <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 8013e62:	23a2      	movs	r3, #162	; 0xa2
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	3b59      	subs	r3, #89	; 0x59
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	b219      	sxth	r1, r3
 8013e6c:	2348      	movs	r3, #72	; 0x48
 8013e6e:	9301      	str	r3, [sp, #4]
 8013e70:	2300      	movs	r3, #0
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	230b      	movs	r3, #11
 8013e76:	2203      	movs	r2, #3
 8013e78:	2001      	movs	r0, #1
 8013e7a:	f7fa f99d 	bl	800e1b8 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 8013e7e:	23a2      	movs	r3, #162	; 0xa2
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	3b56      	subs	r3, #86	; 0x56
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	b218      	sxth	r0, r3
 8013e88:	4b1a      	ldr	r3, [pc, #104]	; (8013ef4 <DispFreq+0xb0>)
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	2103      	movs	r1, #3
 8013e8e:	f7fa f8bd 	bl	800e00c <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 8013e92:	4b19      	ldr	r3, [pc, #100]	; (8013ef8 <DispFreq+0xb4>)
 8013e94:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013e98:	79bb      	ldrb	r3, [r7, #6]
 8013e9a:	9300      	str	r3, [sp, #0]
 8013e9c:	2303      	movs	r3, #3
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	4816      	ldr	r0, [pc, #88]	; (8013efc <DispFreq+0xb8>)
 8013ea2:	f7fd f991 	bl	80111c8 <Value2Str>

  if(St) {
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d014      	beq.n	8013ed6 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 8013eac:	23a2      	movs	r3, #162	; 0xa2
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	3b3e      	subs	r3, #62	; 0x3e
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	b218      	sxth	r0, r3
 8013eb6:	4b12      	ldr	r3, [pc, #72]	; (8013f00 <DispFreq+0xbc>)
 8013eb8:	2201      	movs	r2, #1
 8013eba:	2103      	movs	r1, #3
 8013ebc:	f7fa f8a6 	bl	800e00c <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8013ec0:	23a2      	movs	r3, #162	; 0xa2
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	3b38      	subs	r3, #56	; 0x38
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	b218      	sxth	r0, r3
 8013eca:	4b0c      	ldr	r3, [pc, #48]	; (8013efc <DispFreq+0xb8>)
 8013ecc:	2201      	movs	r2, #1
 8013ece:	2103      	movs	r1, #3
 8013ed0:	f7fa f89c 	bl	800e00c <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8013ed4:	e009      	b.n	8013eea <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8013ed6:	23a2      	movs	r3, #162	; 0xa2
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	3b3e      	subs	r3, #62	; 0x3e
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	b218      	sxth	r0, r3
 8013ee0:	4b08      	ldr	r3, [pc, #32]	; (8013f04 <DispFreq+0xc0>)
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	2103      	movs	r1, #3
 8013ee6:	f7fa f891 	bl	800e00c <DispStr>
}
 8013eea:	bf00      	nop
 8013eec:	3708      	adds	r7, #8
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	08001db4 	.word	0x08001db4
 8013ef8:	20000274 	.word	0x20000274
 8013efc:	20002660 	.word	0x20002660
 8013f00:	08000a28 	.word	0x08000a28
 8013f04:	08000a40 	.word	0x08000a40

08013f08 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 8013f0e:	4b59      	ldr	r3, [pc, #356]	; (8014074 <Show_List+0x16c>)
 8013f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f14:	461a      	mov	r2, r3
 8013f16:	4b58      	ldr	r3, [pc, #352]	; (8014078 <Show_List+0x170>)
 8013f18:	5c9b      	ldrb	r3, [r3, r2]
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	4b55      	ldr	r3, [pc, #340]	; (8014074 <Show_List+0x16c>)
 8013f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f22:	4619      	mov	r1, r3
 8013f24:	4b55      	ldr	r3, [pc, #340]	; (801407c <Show_List+0x174>)
 8013f26:	5c5b      	ldrb	r3, [r3, r1]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	4413      	add	r3, r2
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8013f30:	2300      	movs	r3, #0
 8013f32:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8013f34:	4b4f      	ldr	r3, [pc, #316]	; (8014074 <Show_List+0x16c>)
 8013f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	4b50      	ldr	r3, [pc, #320]	; (8014080 <Show_List+0x178>)
 8013f3e:	5c9b      	ldrb	r3, [r3, r2]
 8013f40:	b21a      	sxth	r2, r3
 8013f42:	4b50      	ldr	r3, [pc, #320]	; (8014084 <Show_List+0x17c>)
 8013f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8013f48:	4b4a      	ldr	r3, [pc, #296]	; (8014074 <Show_List+0x16c>)
 8013f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4b4d      	ldr	r3, [pc, #308]	; (8014088 <Show_List+0x180>)
 8013f52:	5c9b      	ldrb	r3, [r3, r2]
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	b29b      	uxth	r3, r3
 8013f5a:	b21a      	sxth	r2, r3
 8013f5c:	4b49      	ldr	r3, [pc, #292]	; (8014084 <Show_List+0x17c>)
 8013f5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 8013f62:	4b44      	ldr	r3, [pc, #272]	; (8014074 <Show_List+0x16c>)
 8013f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	4b48      	ldr	r3, [pc, #288]	; (801408c <Show_List+0x184>)
 8013f6c:	5c9b      	ldrb	r3, [r3, r2]
 8013f6e:	b21a      	sxth	r2, r3
 8013f70:	4b44      	ldr	r3, [pc, #272]	; (8014084 <Show_List+0x17c>)
 8013f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 8013f76:	4b3f      	ldr	r3, [pc, #252]	; (8014074 <Show_List+0x16c>)
 8013f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	4b3f      	ldr	r3, [pc, #252]	; (801407c <Show_List+0x174>)
 8013f80:	5c9b      	ldrb	r3, [r3, r2]
 8013f82:	3301      	adds	r3, #1
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	015b      	lsls	r3, r3, #5
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	b21a      	sxth	r2, r3
 8013f8c:	4b3d      	ldr	r3, [pc, #244]	; (8014084 <Show_List+0x17c>)
 8013f8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 8013f92:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013f96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013f9a:	f7fa fd8b 	bl	800eab4 <PopColor>
  Buil_Pop();
 8013f9e:	f7fa fc7b 	bl	800e898 <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8013fa2:	4b34      	ldr	r3, [pc, #208]	; (8014074 <Show_List+0x16c>)
 8013fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	4b33      	ldr	r3, [pc, #204]	; (8014078 <Show_List+0x170>)
 8013fac:	5c9b      	ldrb	r3, [r3, r2]
 8013fae:	82fb      	strh	r3, [r7, #22]
 8013fb0:	e054      	b.n	801405c <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8013fb2:	4b30      	ldr	r3, [pc, #192]	; (8014074 <Show_List+0x16c>)
 8013fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4b35      	ldr	r3, [pc, #212]	; (8014090 <Show_List+0x188>)
 8013fbc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013fc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d102      	bne.n	8013fce <Show_List+0xc6>
      Flag = INV;
 8013fc8:	2301      	movs	r3, #1
 8013fca:	757b      	strb	r3, [r7, #21]
 8013fcc:	e007      	b.n	8013fde <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 8013fce:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8013fd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013fd6:	f7fa fd6d 	bl	800eab4 <PopColor>
      Flag = PRN;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 8013fde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8013fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	461a      	mov	r2, r3
 8013fec:	0112      	lsls	r2, r2, #4
 8013fee:	4413      	add	r3, r2
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	3b0a      	subs	r3, #10
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8013ff8:	2304      	movs	r3, #4
 8013ffa:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 8013ffc:	463b      	mov	r3, r7
 8013ffe:	220c      	movs	r2, #12
 8014000:	2100      	movs	r1, #0
 8014002:	4618      	mov	r0, r3
 8014004:	f012 fa32 	bl	802646c <memset>
    memcpy(str,&ESTR[i],10);
 8014008:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801400c:	4613      	mov	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4413      	add	r3, r2
 8014012:	005b      	lsls	r3, r3, #1
 8014014:	4a1f      	ldr	r2, [pc, #124]	; (8014094 <Show_List+0x18c>)
 8014016:	1899      	adds	r1, r3, r2
 8014018:	463b      	mov	r3, r7
 801401a:	220a      	movs	r2, #10
 801401c:	4618      	mov	r0, r3
 801401e:	f012 fa17 	bl	8026450 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014022:	463b      	mov	r3, r7
 8014024:	7d7a      	ldrb	r2, [r7, #21]
 8014026:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801402a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801402e:	f7fa fe91 	bl	800ed54 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014032:	463b      	mov	r3, r7
 8014034:	4618      	mov	r0, r3
 8014036:	f7f8 f803 	bl	800c040 <strlen>
 801403a:	4603      	mov	r3, r0
 801403c:	b2db      	uxtb	r3, r3
 801403e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014042:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014046:	200a      	movs	r0, #10
 8014048:	9000      	str	r0, [sp, #0]
 801404a:	2000      	movs	r0, #0
 801404c:	f7fa ff28 	bl	800eea0 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 8014050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014054:	b29b      	uxth	r3, r3
 8014056:	3301      	adds	r3, #1
 8014058:	b29b      	uxth	r3, r3
 801405a:	82fb      	strh	r3, [r7, #22]
 801405c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014064:	429a      	cmp	r2, r3
 8014066:	dba4      	blt.n	8013fb2 <Show_List+0xaa>
  }
  List_Pop();
 8014068:	f7fa fd54 	bl	800eb14 <List_Pop>
}
 801406c:	bf00      	nop
 801406e:	3718      	adds	r7, #24
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	20002654 	.word	0x20002654
 8014078:	08001fdc 	.word	0x08001fdc
 801407c:	08001fe4 	.word	0x08001fe4
 8014080:	080021e0 	.word	0x080021e0
 8014084:	20000140 	.word	0x20000140
 8014088:	080021e8 	.word	0x080021e8
 801408c:	080021f0 	.word	0x080021f0
 8014090:	20000514 	.word	0x20000514
 8014094:	08001fec 	.word	0x08001fec

08014098 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af02      	add	r7, sp, #8
 801409e:	4603      	mov	r3, r0
 80140a0:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80140a2:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80140a6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80140aa:	f7f9 ff97 	bl	800dfdc <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80140ae:	23f8      	movs	r3, #248	; 0xf8
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	3b03      	subs	r3, #3
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	b219      	sxth	r1, r3
 80140b8:	2342      	movs	r3, #66	; 0x42
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	2300      	movs	r3, #0
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	230b      	movs	r3, #11
 80140c2:	2203      	movs	r2, #3
 80140c4:	2001      	movs	r0, #1
 80140c6:	f7fa f877 	bl	800e1b8 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 80140ca:	20f8      	movs	r0, #248	; 0xf8
 80140cc:	79fb      	ldrb	r3, [r7, #7]
 80140ce:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80140d2:	fb02 f303 	mul.w	r3, r2, r3
 80140d6:	4a07      	ldr	r2, [pc, #28]	; (80140f4 <DispFileInfo+0x5c>)
 80140d8:	4413      	add	r3, r2
 80140da:	2201      	movs	r2, #1
 80140dc:	2103      	movs	r1, #3
 80140de:	f7f9 ff95 	bl	800e00c <DispStr>
  HAL_Delay(2000);
 80140e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80140e6:	f004 f825 	bl	8018134 <HAL_Delay>

}
 80140ea:	bf00      	nop
 80140ec:	3708      	adds	r7, #8
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	0800238c 	.word	0x0800238c

080140f8 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 80140fe:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014102:	4619      	mov	r1, r3
 8014104:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014108:	f7f9 ff68 	bl	800dfdc <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 801410c:	4b1a      	ldr	r3, [pc, #104]	; (8014178 <DispBMPInfo+0x80>)
 801410e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014112:	b2db      	uxtb	r3, r3
 8014114:	4619      	mov	r1, r3
 8014116:	4819      	ldr	r0, [pc, #100]	; (801417c <DispBMPInfo+0x84>)
 8014118:	f7fc ffee 	bl	80110f8 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 801411c:	23f8      	movs	r3, #248	; 0xf8
 801411e:	b29b      	uxth	r3, r3
 8014120:	3b03      	subs	r3, #3
 8014122:	b29b      	uxth	r3, r3
 8014124:	b219      	sxth	r1, r3
 8014126:	2342      	movs	r3, #66	; 0x42
 8014128:	9301      	str	r3, [sp, #4]
 801412a:	2300      	movs	r3, #0
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	230b      	movs	r3, #11
 8014130:	2203      	movs	r2, #3
 8014132:	2001      	movs	r0, #1
 8014134:	f7fa f840 	bl	800e1b8 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014138:	20f8      	movs	r0, #248	; 0xf8
 801413a:	4b11      	ldr	r3, [pc, #68]	; (8014180 <DispBMPInfo+0x88>)
 801413c:	2201      	movs	r2, #1
 801413e:	2103      	movs	r1, #3
 8014140:	f7f9 ff64 	bl	800e00c <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014144:	23f8      	movs	r3, #248	; 0xf8
 8014146:	b29b      	uxth	r3, r3
 8014148:	3318      	adds	r3, #24
 801414a:	b29b      	uxth	r3, r3
 801414c:	b218      	sxth	r0, r3
 801414e:	4b0b      	ldr	r3, [pc, #44]	; (801417c <DispBMPInfo+0x84>)
 8014150:	2201      	movs	r2, #1
 8014152:	2103      	movs	r1, #3
 8014154:	f7f9 ff5a 	bl	800e00c <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 8014158:	23f8      	movs	r3, #248	; 0xf8
 801415a:	b29b      	uxth	r3, r3
 801415c:	332a      	adds	r3, #42	; 0x2a
 801415e:	b29b      	uxth	r3, r3
 8014160:	b218      	sxth	r0, r3
 8014162:	4b05      	ldr	r3, [pc, #20]	; (8014178 <DispBMPInfo+0x80>)
 8014164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014168:	2201      	movs	r2, #1
 801416a:	2103      	movs	r1, #3
 801416c:	f7f9 ff4e 	bl	800e00c <DispStr>
}
 8014170:	bf00      	nop
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	20000274 	.word	0x20000274
 801417c:	20002660 	.word	0x20002660
 8014180:	080009a4 	.word	0x080009a4

08014184 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 8014184:	b590      	push	{r4, r7, lr}
 8014186:	b087      	sub	sp, #28
 8014188:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 801418a:	2300      	movs	r3, #0
 801418c:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801418e:	4ba3      	ldr	r3, [pc, #652]	; (801441c <Update_Proc_All+0x298>)
 8014190:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014194:	b29a      	uxth	r2, r3
 8014196:	4ba1      	ldr	r3, [pc, #644]	; (801441c <Update_Proc_All+0x298>)
 8014198:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801419c:	b29b      	uxth	r3, r3
 801419e:	4619      	mov	r1, r3
 80141a0:	0089      	lsls	r1, r1, #2
 80141a2:	440b      	add	r3, r1
 80141a4:	005b      	lsls	r3, r3, #1
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	4413      	add	r3, r2
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 80141ae:	2300      	movs	r3, #0
 80141b0:	81fb      	strh	r3, [r7, #14]
 80141b2:	e015      	b.n	80141e0 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 80141b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141b8:	4a98      	ldr	r2, [pc, #608]	; (801441c <Update_Proc_All+0x298>)
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	4413      	add	r3, r2
 80141be:	799a      	ldrb	r2, [r3, #6]
 80141c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141c4:	f042 0220 	orr.w	r2, r2, #32
 80141c8:	b2d1      	uxtb	r1, r2
 80141ca:	4a94      	ldr	r2, [pc, #592]	; (801441c <Update_Proc_All+0x298>)
 80141cc:	00db      	lsls	r3, r3, #3
 80141ce:	4413      	add	r3, r2
 80141d0:	460a      	mov	r2, r1
 80141d2:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 80141d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141d8:	b29b      	uxth	r3, r3
 80141da:	3301      	adds	r3, #1
 80141dc:	b29b      	uxth	r3, r3
 80141de:	81fb      	strh	r3, [r7, #14]
 80141e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141e4:	2b29      	cmp	r3, #41	; 0x29
 80141e6:	dde5      	ble.n	80141b4 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 80141e8:	2300      	movs	r3, #0
 80141ea:	81fb      	strh	r3, [r7, #14]
 80141ec:	e1be      	b.n	801456c <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 80141ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80141f2:	4a8a      	ldr	r2, [pc, #552]	; (801441c <Update_Proc_All+0x298>)
 80141f4:	00db      	lsls	r3, r3, #3
 80141f6:	4413      	add	r3, r2
 80141f8:	799b      	ldrb	r3, [r3, #6]
 80141fa:	f003 0320 	and.w	r3, r3, #32
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 81ad 	beq.w	801455e <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014208:	4a84      	ldr	r2, [pc, #528]	; (801441c <Update_Proc_All+0x298>)
 801420a:	00db      	lsls	r3, r3, #3
 801420c:	4413      	add	r3, r2
 801420e:	799a      	ldrb	r2, [r3, #6]
 8014210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014214:	f022 0220 	bic.w	r2, r2, #32
 8014218:	b2d1      	uxtb	r1, r2
 801421a:	4a80      	ldr	r2, [pc, #512]	; (801441c <Update_Proc_All+0x298>)
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	4413      	add	r3, r2
 8014220:	460a      	mov	r2, r1
 8014222:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014228:	2b12      	cmp	r3, #18
 801422a:	f300 8199 	bgt.w	8014560 <Update_Proc_All+0x3dc>
 801422e:	2b0d      	cmp	r3, #13
 8014230:	f280 80ac 	bge.w	801438c <Update_Proc_All+0x208>
 8014234:	2b03      	cmp	r3, #3
 8014236:	dc02      	bgt.n	801423e <Update_Proc_All+0xba>
 8014238:	2b00      	cmp	r3, #0
 801423a:	da04      	bge.n	8014246 <Update_Proc_All+0xc2>
 801423c:	e190      	b.n	8014560 <Update_Proc_All+0x3dc>
 801423e:	2b07      	cmp	r3, #7
 8014240:	f000 815a 	beq.w	80144f8 <Update_Proc_All+0x374>
 8014244:	e18c      	b.n	8014560 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014246:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801424a:	4619      	mov	r1, r3
 801424c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014250:	f7f9 fec4 	bl	800dfdc <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 8014254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d007      	beq.n	801426c <Update_Proc_All+0xe8>
 801425c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d003      	beq.n	801426c <Update_Proc_All+0xe8>
 8014264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014268:	2b02      	cmp	r3, #2
 801426a:	d138      	bne.n	80142de <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 801426c:	232f      	movs	r3, #47	; 0x2f
 801426e:	b29b      	uxth	r3, r3
 8014270:	3b03      	subs	r3, #3
 8014272:	b29b      	uxth	r3, r3
 8014274:	b219      	sxth	r1, r3
 8014276:	232a      	movs	r3, #42	; 0x2a
 8014278:	9301      	str	r3, [sp, #4]
 801427a:	2300      	movs	r3, #0
 801427c:	9300      	str	r3, [sp, #0]
 801427e:	230b      	movs	r3, #11
 8014280:	22e1      	movs	r2, #225	; 0xe1
 8014282:	2001      	movs	r0, #1
 8014284:	f7f9 ff98 	bl	800e1b8 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8014288:	202f      	movs	r0, #47	; 0x2f
 801428a:	4b64      	ldr	r3, [pc, #400]	; (801441c <Update_Proc_All+0x298>)
 801428c:	6819      	ldr	r1, [r3, #0]
 801428e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	005b      	lsls	r3, r3, #1
 801429a:	440b      	add	r3, r1
 801429c:	2201      	movs	r2, #1
 801429e:	21e1      	movs	r1, #225	; 0xe1
 80142a0:	f7f9 feb4 	bl	800e00c <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80142a4:	2047      	movs	r0, #71	; 0x47
 80142a6:	4b5d      	ldr	r3, [pc, #372]	; (801441c <Update_Proc_All+0x298>)
 80142a8:	689a      	ldr	r2, [r3, #8]
 80142aa:	4b5c      	ldr	r3, [pc, #368]	; (801441c <Update_Proc_All+0x298>)
 80142ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80142b0:	4619      	mov	r1, r3
 80142b2:	460b      	mov	r3, r1
 80142b4:	005b      	lsls	r3, r3, #1
 80142b6:	440b      	add	r3, r1
 80142b8:	005b      	lsls	r3, r3, #1
 80142ba:	4413      	add	r3, r2
 80142bc:	2201      	movs	r2, #1
 80142be:	21e1      	movs	r1, #225	; 0xe1
 80142c0:	f7f9 fea4 	bl	800e00c <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80142c4:	2020      	movs	r0, #32
 80142c6:	4b55      	ldr	r3, [pc, #340]	; (801441c <Update_Proc_All+0x298>)
 80142c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <Update_Proc_All+0x150>
 80142d0:	4b53      	ldr	r3, [pc, #332]	; (8014420 <Update_Proc_All+0x29c>)
 80142d2:	e000      	b.n	80142d6 <Update_Proc_All+0x152>
 80142d4:	4b53      	ldr	r3, [pc, #332]	; (8014424 <Update_Proc_All+0x2a0>)
 80142d6:	2210      	movs	r2, #16
 80142d8:	21e1      	movs	r1, #225	; 0xe1
 80142da:	f7fa f901 	bl	800e4e0 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80142de:	4b4f      	ldr	r3, [pc, #316]	; (801441c <Update_Proc_All+0x298>)
 80142e0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80142e4:	3301      	adds	r3, #1
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	005b      	lsls	r3, r3, #1
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	b21a      	sxth	r2, r3
 80142ee:	4b4e      	ldr	r3, [pc, #312]	; (8014428 <Update_Proc_All+0x2a4>)
 80142f0:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80142f2:	4b4d      	ldr	r3, [pc, #308]	; (8014428 <Update_Proc_All+0x2a4>)
 80142f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	4b48      	ldr	r3, [pc, #288]	; (801441c <Update_Proc_All+0x298>)
 80142fc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014300:	3301      	adds	r3, #1
 8014302:	b29b      	uxth	r3, r3
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	b29b      	uxth	r3, r3
 8014308:	4413      	add	r3, r2
 801430a:	b29b      	uxth	r3, r3
 801430c:	b21a      	sxth	r2, r3
 801430e:	4b46      	ldr	r3, [pc, #280]	; (8014428 <Update_Proc_All+0x2a4>)
 8014310:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014312:	4b42      	ldr	r3, [pc, #264]	; (801441c <Update_Proc_All+0x298>)
 8014314:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014318:	2b05      	cmp	r3, #5
 801431a:	dd01      	ble.n	8014320 <Update_Proc_All+0x19c>
 801431c:	2204      	movs	r2, #4
 801431e:	e000      	b.n	8014322 <Update_Proc_All+0x19e>
 8014320:	2200      	movs	r2, #0
 8014322:	4b42      	ldr	r3, [pc, #264]	; (801442c <Update_Proc_All+0x2a8>)
 8014324:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014326:	4b3d      	ldr	r3, [pc, #244]	; (801441c <Update_Proc_All+0x298>)
 8014328:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801432c:	4b40      	ldr	r3, [pc, #256]	; (8014430 <Update_Proc_All+0x2ac>)
 801432e:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014330:	4b3a      	ldr	r3, [pc, #232]	; (801441c <Update_Proc_All+0x298>)
 8014332:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014336:	2b01      	cmp	r3, #1
 8014338:	dd03      	ble.n	8014342 <Update_Proc_All+0x1be>
          KindA  = HV;
 801433a:	4b3e      	ldr	r3, [pc, #248]	; (8014434 <Update_Proc_All+0x2b0>)
 801433c:	2201      	movs	r2, #1
 801433e:	801a      	strh	r2, [r3, #0]
 8014340:	e002      	b.n	8014348 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014342:	4b3c      	ldr	r3, [pc, #240]	; (8014434 <Update_Proc_All+0x2b0>)
 8014344:	2200      	movs	r2, #0
 8014346:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014348:	4b34      	ldr	r3, [pc, #208]	; (801441c <Update_Proc_All+0x298>)
 801434a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d001      	beq.n	8014356 <Update_Proc_All+0x1d2>
 8014352:	2200      	movs	r2, #0
 8014354:	e000      	b.n	8014358 <Update_Proc_All+0x1d4>
 8014356:	2202      	movs	r2, #2
 8014358:	4b37      	ldr	r3, [pc, #220]	; (8014438 <Update_Proc_All+0x2b4>)
 801435a:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 801435c:	4b35      	ldr	r3, [pc, #212]	; (8014434 <Update_Proc_All+0x2b0>)
 801435e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014362:	461a      	mov	r2, r3
 8014364:	4b34      	ldr	r3, [pc, #208]	; (8014438 <Update_Proc_All+0x2b4>)
 8014366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801436a:	4413      	add	r3, r2
 801436c:	4a2f      	ldr	r2, [pc, #188]	; (801442c <Update_Proc_All+0x2a8>)
 801436e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014372:	4413      	add	r3, r2
 8014374:	4619      	mov	r1, r3
 8014376:	2007      	movs	r0, #7
 8014378:	f7f8 f802 	bl	800c380 <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 801437c:	4b27      	ldr	r3, [pc, #156]	; (801441c <Update_Proc_All+0x298>)
 801437e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014382:	b2db      	uxtb	r3, r3
 8014384:	4618      	mov	r0, r3
 8014386:	f000 fa0f 	bl	80147a8 <AiPosi>

        break;
 801438a:	e0e9      	b.n	8014560 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 801438c:	f7ff fbee 	bl	8013b6c <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014390:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014394:	4619      	mov	r1, r3
 8014396:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801439a:	f7f9 fe1f 	bl	800dfdc <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 801439e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80143a2:	2b0e      	cmp	r3, #14
 80143a4:	d003      	beq.n	80143ae <Update_Proc_All+0x22a>
 80143a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80143aa:	2b11      	cmp	r3, #17
 80143ac:	d11a      	bne.n	80143e4 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 80143ae:	23dd      	movs	r3, #221	; 0xdd
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	3b03      	subs	r3, #3
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	b219      	sxth	r1, r3
 80143b8:	2330      	movs	r3, #48	; 0x30
 80143ba:	9301      	str	r3, [sp, #4]
 80143bc:	2300      	movs	r3, #0
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	230b      	movs	r3, #11
 80143c2:	22e1      	movs	r2, #225	; 0xe1
 80143c4:	2001      	movs	r0, #1
 80143c6:	f7f9 fef7 	bl	800e1b8 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 80143ca:	20dd      	movs	r0, #221	; 0xdd
 80143cc:	4b13      	ldr	r3, [pc, #76]	; (801441c <Update_Proc_All+0x298>)
 80143ce:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d001      	beq.n	80143da <Update_Proc_All+0x256>
 80143d6:	4b19      	ldr	r3, [pc, #100]	; (801443c <Update_Proc_All+0x2b8>)
 80143d8:	e000      	b.n	80143dc <Update_Proc_All+0x258>
 80143da:	4b19      	ldr	r3, [pc, #100]	; (8014440 <Update_Proc_All+0x2bc>)
 80143dc:	2211      	movs	r2, #17
 80143de:	21e1      	movs	r1, #225	; 0xe1
 80143e0:	f7fa f87e 	bl	800e4e0 <DispStr10x14>
        }
        if(i == FITTRIGG)
 80143e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80143e8:	2b0f      	cmp	r3, #15
 80143ea:	d132      	bne.n	8014452 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 80143ec:	20cf      	movs	r0, #207	; 0xcf
 80143ee:	4b0b      	ldr	r3, [pc, #44]	; (801441c <Update_Proc_All+0x298>)
 80143f0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d001      	beq.n	80143fc <Update_Proc_All+0x278>
 80143f8:	4b12      	ldr	r3, [pc, #72]	; (8014444 <Update_Proc_All+0x2c0>)
 80143fa:	e000      	b.n	80143fe <Update_Proc_All+0x27a>
 80143fc:	4b09      	ldr	r3, [pc, #36]	; (8014424 <Update_Proc_All+0x2a0>)
 80143fe:	2210      	movs	r2, #16
 8014400:	21e1      	movs	r1, #225	; 0xe1
 8014402:	f7fa f86d 	bl	800e4e0 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014406:	4b05      	ldr	r3, [pc, #20]	; (801441c <Update_Proc_All+0x298>)
 8014408:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801440c:	2b00      	cmp	r3, #0
 801440e:	d01d      	beq.n	801444c <Update_Proc_All+0x2c8>
 8014410:	4b0d      	ldr	r3, [pc, #52]	; (8014448 <Update_Proc_All+0x2c4>)
 8014412:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014416:	801a      	strh	r2, [r3, #0]
 8014418:	e01b      	b.n	8014452 <Update_Proc_All+0x2ce>
 801441a:	bf00      	nop
 801441c:	20000274 	.word	0x20000274
 8014420:	080009ac 	.word	0x080009ac
 8014424:	080009b0 	.word	0x080009b0
 8014428:	20000140 	.word	0x20000140
 801442c:	2000268c 	.word	0x2000268c
 8014430:	20002690 	.word	0x20002690
 8014434:	20002692 	.word	0x20002692
 8014438:	2000268e 	.word	0x2000268e
 801443c:	080009dc 	.word	0x080009dc
 8014440:	080009e0 	.word	0x080009e0
 8014444:	080009f0 	.word	0x080009f0
 8014448:	20000732 	.word	0x20000732
          else KEYTIME = 0;
 801444c:	4b4c      	ldr	r3, [pc, #304]	; (8014580 <Update_Proc_All+0x3fc>)
 801444e:	2200      	movs	r2, #0
 8014450:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014452:	4b4c      	ldr	r3, [pc, #304]	; (8014584 <Update_Proc_All+0x400>)
 8014454:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014458:	b29a      	uxth	r2, r3
 801445a:	4b4b      	ldr	r3, [pc, #300]	; (8014588 <Update_Proc_All+0x404>)
 801445c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014460:	b29b      	uxth	r3, r3
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	b29b      	uxth	r3, r3
 8014466:	4413      	add	r3, r2
 8014468:	b29b      	uxth	r3, r3
 801446a:	b21a      	sxth	r2, r3
 801446c:	4b45      	ldr	r3, [pc, #276]	; (8014584 <Update_Proc_All+0x400>)
 801446e:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014470:	4b45      	ldr	r3, [pc, #276]	; (8014588 <Update_Proc_All+0x404>)
 8014472:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014476:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801447c:	4a43      	ldr	r2, [pc, #268]	; (801458c <Update_Proc_All+0x408>)
 801447e:	5cd3      	ldrb	r3, [r2, r3]
 8014480:	461c      	mov	r4, r3
 8014482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014486:	4a42      	ldr	r2, [pc, #264]	; (8014590 <Update_Proc_All+0x40c>)
 8014488:	5cd3      	ldrb	r3, [r2, r3]
 801448a:	4618      	mov	r0, r3
 801448c:	f7fc ff98 	bl	80113c0 <Exp>
 8014490:	4603      	mov	r3, r0
 8014492:	fb03 f204 	mul.w	r2, r3, r4
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	fb02 f303 	mul.w	r3, r2, r3
 801449c:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 801449e:	2301      	movs	r3, #1
 80144a0:	9300      	str	r3, [sp, #0]
 80144a2:	2302      	movs	r3, #2
 80144a4:	4a3b      	ldr	r2, [pc, #236]	; (8014594 <Update_Proc_All+0x410>)
 80144a6:	68b9      	ldr	r1, [r7, #8]
 80144a8:	483b      	ldr	r0, [pc, #236]	; (8014598 <Update_Proc_All+0x414>)
 80144aa:	f7fc fe8d 	bl	80111c8 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 80144ae:	20e7      	movs	r0, #231	; 0xe7
 80144b0:	4b3a      	ldr	r3, [pc, #232]	; (801459c <Update_Proc_All+0x418>)
 80144b2:	2211      	movs	r2, #17
 80144b4:	21e1      	movs	r1, #225	; 0xe1
 80144b6:	f7fa f813 	bl	800e4e0 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 80144ba:	23e7      	movs	r3, #231	; 0xe7
 80144bc:	b29b      	uxth	r3, r3
 80144be:	3309      	adds	r3, #9
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	b218      	sxth	r0, r3
 80144c4:	4b36      	ldr	r3, [pc, #216]	; (80145a0 <Update_Proc_All+0x41c>)
 80144c6:	2201      	movs	r2, #1
 80144c8:	21e1      	movs	r1, #225	; 0xe1
 80144ca:	f7f9 fd9f 	bl	800e00c <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80144ce:	23e7      	movs	r3, #231	; 0xe7
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	3309      	adds	r3, #9
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	b218      	sxth	r0, r3
 80144d8:	4b2f      	ldr	r3, [pc, #188]	; (8014598 <Update_Proc_All+0x414>)
 80144da:	2201      	movs	r2, #1
 80144dc:	21e1      	movs	r1, #225	; 0xe1
 80144de:	f7f9 fd95 	bl	800e00c <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 80144e2:	4b29      	ldr	r3, [pc, #164]	; (8014588 <Update_Proc_All+0x404>)
 80144e4:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d001      	beq.n	80144f0 <Update_Proc_All+0x36c>
 80144ec:	2202      	movs	r2, #2
 80144ee:	e000      	b.n	80144f2 <Update_Proc_All+0x36e>
 80144f0:	2200      	movs	r2, #0
 80144f2:	4b24      	ldr	r3, [pc, #144]	; (8014584 <Update_Proc_All+0x400>)
 80144f4:	811a      	strh	r2, [r3, #8]
        break;
 80144f6:	e033      	b.n	8014560 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 80144f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80144fc:	4619      	mov	r1, r3
 80144fe:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014502:	f7f9 fd6b 	bl	800dfdc <SetColor>
        if(i == TIM_BASE)
 8014506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801450a:	2b07      	cmp	r3, #7
 801450c:	d120      	bne.n	8014550 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 801450e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014512:	4a24      	ldr	r2, [pc, #144]	; (80145a4 <Update_Proc_All+0x420>)
 8014514:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014518:	b29b      	uxth	r3, r3
 801451a:	3b03      	subs	r3, #3
 801451c:	b29b      	uxth	r3, r3
 801451e:	b219      	sxth	r1, r3
 8014520:	231e      	movs	r3, #30
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	2302      	movs	r3, #2
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	230b      	movs	r3, #11
 801452a:	22e1      	movs	r2, #225	; 0xe1
 801452c:	2001      	movs	r0, #1
 801452e:	f7f9 fe43 	bl	800e1b8 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014536:	4a1b      	ldr	r2, [pc, #108]	; (80145a4 <Update_Proc_All+0x420>)
 8014538:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801453c:	4b12      	ldr	r3, [pc, #72]	; (8014588 <Update_Proc_All+0x404>)
 801453e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014542:	00db      	lsls	r3, r3, #3
 8014544:	4a18      	ldr	r2, [pc, #96]	; (80145a8 <Update_Proc_All+0x424>)
 8014546:	4413      	add	r3, r2
 8014548:	2201      	movs	r2, #1
 801454a:	21e1      	movs	r1, #225	; 0xe1
 801454c:	f7f9 fd5e 	bl	800e00c <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014550:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <Update_Proc_All+0x404>)
 8014552:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014556:	4618      	mov	r0, r3
 8014558:	f7f8 f890 	bl	800c67c <Set_Base>
      break;
 801455c:	e000      	b.n	8014560 <Update_Proc_All+0x3dc>

      }
    }
 801455e:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014564:	b29b      	uxth	r3, r3
 8014566:	3301      	adds	r3, #1
 8014568:	b29b      	uxth	r3, r3
 801456a:	81fb      	strh	r3, [r7, #14]
 801456c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014570:	2b29      	cmp	r3, #41	; 0x29
 8014572:	f77f ae3c 	ble.w	80141ee <Update_Proc_All+0x6a>
  }
}
 8014576:	bf00      	nop
 8014578:	bf00      	nop
 801457a:	3714      	adds	r7, #20
 801457c:	46bd      	mov	sp, r7
 801457e:	bd90      	pop	{r4, r7, pc}
 8014580:	20000732 	.word	0x20000732
 8014584:	20000140 	.word	0x20000140
 8014588:	20000274 	.word	0x20000274
 801458c:	080021cc 	.word	0x080021cc
 8014590:	080021a4 	.word	0x080021a4
 8014594:	08001da8 	.word	0x08001da8
 8014598:	20002660 	.word	0x20002660
 801459c:	080009ec 	.word	0x080009ec
 80145a0:	080009e4 	.word	0x080009e4
 80145a4:	080021f8 	.word	0x080021f8
 80145a8:	200001ac 	.word	0x200001ac

080145ac <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	807b      	strh	r3, [r7, #2]
 80145b6:	2300      	movs	r3, #0
 80145b8:	80bb      	strh	r3, [r7, #4]

  Analys();
 80145ba:	f000 f8b1 	bl	8014720 <Analys>
  for(i=0; i<100; i++)
 80145be:	2300      	movs	r3, #0
 80145c0:	80fb      	strh	r3, [r7, #6]
 80145c2:	e051      	b.n	8014668 <Align_Set+0xbc>
  {
    AiPosi(100);
 80145c4:	2064      	movs	r0, #100	; 0x64
 80145c6:	f000 f8ef 	bl	80147a8 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 80145ca:	200a      	movs	r0, #10
 80145cc:	f003 fdb2 	bl	8018134 <HAL_Delay>
    Analys();
 80145d0:	f000 f8a6 	bl	8014720 <Analys>
    TmpA = 2048-Vavg;
 80145d4:	4b28      	ldr	r3, [pc, #160]	; (8014678 <Align_Set+0xcc>)
 80145d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145da:	b29b      	uxth	r3, r3
 80145dc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80145e0:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 80145e2:	887b      	ldrh	r3, [r7, #2]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d036      	beq.n	8014656 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 80145e8:	4b24      	ldr	r3, [pc, #144]	; (801467c <Align_Set+0xd0>)
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	4b24      	ldr	r3, [pc, #144]	; (8014680 <Align_Set+0xd4>)
 80145ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145f2:	4619      	mov	r1, r3
 80145f4:	4b23      	ldr	r3, [pc, #140]	; (8014684 <Align_Set+0xd8>)
 80145f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	bf14      	ite	ne
 80145fe:	2301      	movne	r3, #1
 8014600:	2300      	moveq	r3, #0
 8014602:	b2db      	uxtb	r3, r3
 8014604:	440b      	add	r3, r1
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	4413      	add	r3, r2
 801460a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801460e:	b29a      	uxth	r2, r3
 8014610:	887b      	ldrh	r3, [r7, #2]
 8014612:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014616:	fb01 f303 	mul.w	r3, r1, r3
 801461a:	2b00      	cmp	r3, #0
 801461c:	da01      	bge.n	8014622 <Align_Set+0x76>
 801461e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014622:	12db      	asrs	r3, r3, #11
 8014624:	b29b      	uxth	r3, r3
 8014626:	4413      	add	r3, r2
 8014628:	b299      	uxth	r1, r3
 801462a:	4b14      	ldr	r3, [pc, #80]	; (801467c <Align_Set+0xd0>)
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	4b14      	ldr	r3, [pc, #80]	; (8014680 <Align_Set+0xd4>)
 8014630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014634:	4618      	mov	r0, r3
 8014636:	4b13      	ldr	r3, [pc, #76]	; (8014684 <Align_Set+0xd8>)
 8014638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801463c:	2b00      	cmp	r3, #0
 801463e:	bf14      	ite	ne
 8014640:	2301      	movne	r3, #1
 8014642:	2300      	moveq	r3, #0
 8014644:	b2db      	uxtb	r3, r3
 8014646:	4403      	add	r3, r0
 8014648:	005b      	lsls	r3, r3, #1
 801464a:	4413      	add	r3, r2
 801464c:	b20a      	sxth	r2, r1
 801464e:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014650:	2300      	movs	r3, #0
 8014652:	80bb      	strh	r3, [r7, #4]
 8014654:	e002      	b.n	801465c <Align_Set+0xb0>
    }
    else
      StA++;
 8014656:	88bb      	ldrh	r3, [r7, #4]
 8014658:	3301      	adds	r3, #1
 801465a:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 801465c:	88bb      	ldrh	r3, [r7, #4]
 801465e:	2b04      	cmp	r3, #4
 8014660:	d806      	bhi.n	8014670 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014662:	88fb      	ldrh	r3, [r7, #6]
 8014664:	3301      	adds	r3, #1
 8014666:	80fb      	strh	r3, [r7, #6]
 8014668:	88fb      	ldrh	r3, [r7, #6]
 801466a:	2b63      	cmp	r3, #99	; 0x63
 801466c:	d9aa      	bls.n	80145c4 <Align_Set+0x18>
 801466e:	e000      	b.n	8014672 <Align_Set+0xc6>
    	return;
 8014670:	bf00      	nop
  }

}
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	20002672 	.word	0x20002672
 801467c:	20000554 	.word	0x20000554
 8014680:	20002692 	.word	0x20002692
 8014684:	2000268c 	.word	0x2000268c

08014688 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 801468c:	4b21      	ldr	r3, [pc, #132]	; (8014714 <Zero_Align+0x8c>)
 801468e:	2200      	movs	r2, #0
 8014690:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014692:	4b21      	ldr	r3, [pc, #132]	; (8014718 <Zero_Align+0x90>)
 8014694:	2201      	movs	r2, #1
 8014696:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014698:	4b20      	ldr	r3, [pc, #128]	; (801471c <Zero_Align+0x94>)
 801469a:	2204      	movs	r2, #4
 801469c:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 801469e:	2105      	movs	r1, #5
 80146a0:	2007      	movs	r0, #7
 80146a2:	f7f7 fe6d 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 80146a6:	2064      	movs	r0, #100	; 0x64
 80146a8:	f000 f87e 	bl	80147a8 <AiPosi>
  HAL_Delay(1000);
 80146ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146b0:	f003 fd40 	bl	8018134 <HAL_Delay>
  Align_Set();
 80146b4:	f7ff ff7a 	bl	80145ac <Align_Set>

  GainA  = 0;//0x20;
 80146b8:	4b16      	ldr	r3, [pc, #88]	; (8014714 <Zero_Align+0x8c>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 80146be:	4b16      	ldr	r3, [pc, #88]	; (8014718 <Zero_Align+0x90>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80146c4:	4b15      	ldr	r3, [pc, #84]	; (801471c <Zero_Align+0x94>)
 80146c6:	2200      	movs	r2, #0
 80146c8:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 80146ca:	2101      	movs	r1, #1
 80146cc:	2007      	movs	r0, #7
 80146ce:	f7f7 fe57 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 80146d2:	2064      	movs	r0, #100	; 0x64
 80146d4:	f000 f868 	bl	80147a8 <AiPosi>
  HAL_Delay(1000);
 80146d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80146dc:	f003 fd2a 	bl	8018134 <HAL_Delay>
  Align_Set();
 80146e0:	f7ff ff64 	bl	80145ac <Align_Set>

  GainA  = 0;//0x20;
 80146e4:	4b0b      	ldr	r3, [pc, #44]	; (8014714 <Zero_Align+0x8c>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 80146ea:	4b0b      	ldr	r3, [pc, #44]	; (8014718 <Zero_Align+0x90>)
 80146ec:	2200      	movs	r2, #0
 80146ee:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 80146f0:	4b0a      	ldr	r3, [pc, #40]	; (801471c <Zero_Align+0x94>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 80146f6:	2100      	movs	r1, #0
 80146f8:	2007      	movs	r0, #7
 80146fa:	f7f7 fe41 	bl	800c380 <BIOS_Ctrl>
  AiPosi(100);
 80146fe:	2064      	movs	r0, #100	; 0x64
 8014700:	f000 f852 	bl	80147a8 <AiPosi>
  HAL_Delay(1000);
 8014704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014708:	f003 fd14 	bl	8018134 <HAL_Delay>
  Align_Set();
 801470c:	f7ff ff4e 	bl	80145ac <Align_Set>

}
 8014710:	bf00      	nop
 8014712:	bd80      	pop	{r7, pc}
 8014714:	20002690 	.word	0x20002690
 8014718:	20002692 	.word	0x20002692
 801471c:	2000268c 	.word	0x2000268c

08014720 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8014726:	2300      	movs	r3, #0
 8014728:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 801472a:	2100      	movs	r1, #0
 801472c:	2004      	movs	r0, #4
 801472e:	f7f7 fe27 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014732:	f240 21cf 	movw	r1, #719	; 0x2cf
 8014736:	2005      	movs	r0, #5
 8014738:	f7f7 fe22 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 801473c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014740:	2006      	movs	r0, #6
 8014742:	f7f7 fe1d 	bl	800c380 <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8014746:	2101      	movs	r1, #1
 8014748:	2004      	movs	r0, #4
 801474a:	f7f7 fe19 	bl	800c380 <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 801474e:	bf00      	nop
 8014750:	2000      	movs	r0, #0
 8014752:	f7f7 fdff 	bl	800c354 <BIOS_Info>
 8014756:	4603      	mov	r3, r0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d1f9      	bne.n	8014750 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 801475c:	2302      	movs	r3, #2
 801475e:	607b      	str	r3, [r7, #4]
 8014760:	e00a      	b.n	8014778 <Analys+0x58>
    SumA += Sampl[i];
 8014762:	4a0e      	ldr	r2, [pc, #56]	; (801479c <Analys+0x7c>)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801476a:	461a      	mov	r2, r3
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	4413      	add	r3, r2
 8014770:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	3301      	adds	r3, #1
 8014776:	607b      	str	r3, [r7, #4]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f640 72a1 	movw	r2, #4001	; 0xfa1
 801477e:	4293      	cmp	r3, r2
 8014780:	d9ef      	bls.n	8014762 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	4a06      	ldr	r2, [pc, #24]	; (80147a0 <Analys+0x80>)
 8014786:	fba2 2303 	umull	r2, r3, r2, r3
 801478a:	0a1b      	lsrs	r3, r3, #8
 801478c:	b21a      	sxth	r2, r3
 801478e:	4b05      	ldr	r3, [pc, #20]	; (80147a4 <Analys+0x84>)
 8014790:	801a      	strh	r2, [r3, #0]
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	200026a4 	.word	0x200026a4
 80147a0:	10624dd3 	.word	0x10624dd3
 80147a4:	20002672 	.word	0x20002672

080147a8 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	4603      	mov	r3, r0
 80147b0:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 80147b2:	79fb      	ldrb	r3, [r7, #7]
 80147b4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80147b8:	4b28      	ldr	r3, [pc, #160]	; (801485c <AiPosi+0xb4>)
 80147ba:	6819      	ldr	r1, [r3, #0]
 80147bc:	4b28      	ldr	r3, [pc, #160]	; (8014860 <AiPosi+0xb8>)
 80147be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147c2:	4618      	mov	r0, r3
 80147c4:	4b27      	ldr	r3, [pc, #156]	; (8014864 <AiPosi+0xbc>)
 80147c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	bf14      	ite	ne
 80147ce:	2301      	movne	r3, #1
 80147d0:	2300      	moveq	r3, #0
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	4403      	add	r3, r0
 80147d6:	005b      	lsls	r3, r3, #1
 80147d8:	440b      	add	r3, r1
 80147da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147de:	0fd9      	lsrs	r1, r3, #31
 80147e0:	440b      	add	r3, r1
 80147e2:	105b      	asrs	r3, r3, #1
 80147e4:	b21b      	sxth	r3, r3
 80147e6:	fb02 f303 	mul.w	r3, r2, r3
 80147ea:	4a1f      	ldr	r2, [pc, #124]	; (8014868 <AiPosi+0xc0>)
 80147ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80147f0:	4611      	mov	r1, r2
 80147f2:	4a1e      	ldr	r2, [pc, #120]	; (801486c <AiPosi+0xc4>)
 80147f4:	5c52      	ldrb	r2, [r2, r1]
 80147f6:	fb02 f303 	mul.w	r3, r2, r3
 80147fa:	4a1d      	ldr	r2, [pc, #116]	; (8014870 <AiPosi+0xc8>)
 80147fc:	6811      	ldr	r1, [r2, #0]
 80147fe:	4a18      	ldr	r2, [pc, #96]	; (8014860 <AiPosi+0xb8>)
 8014800:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014804:	4610      	mov	r0, r2
 8014806:	4a17      	ldr	r2, [pc, #92]	; (8014864 <AiPosi+0xbc>)
 8014808:	f9b2 2000 	ldrsh.w	r2, [r2]
 801480c:	2a00      	cmp	r2, #0
 801480e:	bf14      	ite	ne
 8014810:	2201      	movne	r2, #1
 8014812:	2200      	moveq	r2, #0
 8014814:	b2d2      	uxtb	r2, r2
 8014816:	4402      	add	r2, r0
 8014818:	0052      	lsls	r2, r2, #1
 801481a:	440a      	add	r2, r1
 801481c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014820:	fb93 f3f2 	sdiv	r3, r3, r2
 8014824:	4a0d      	ldr	r2, [pc, #52]	; (801485c <AiPosi+0xb4>)
 8014826:	6811      	ldr	r1, [r2, #0]
 8014828:	4a0d      	ldr	r2, [pc, #52]	; (8014860 <AiPosi+0xb8>)
 801482a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801482e:	4610      	mov	r0, r2
 8014830:	4a0c      	ldr	r2, [pc, #48]	; (8014864 <AiPosi+0xbc>)
 8014832:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014836:	2a00      	cmp	r2, #0
 8014838:	bf14      	ite	ne
 801483a:	2201      	movne	r2, #1
 801483c:	2200      	moveq	r2, #0
 801483e:	b2d2      	uxtb	r2, r2
 8014840:	4402      	add	r2, r0
 8014842:	0052      	lsls	r2, r2, #1
 8014844:	440a      	add	r2, r1
 8014846:	f9b2 2000 	ldrsh.w	r2, [r2]
 801484a:	4413      	add	r3, r2
 801484c:	4619      	mov	r1, r3
 801484e:	2008      	movs	r0, #8
 8014850:	f7f7 fd96 	bl	800c380 <BIOS_Ctrl>
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	20000554 	.word	0x20000554
 8014860:	20002692 	.word	0x20002692
 8014864:	2000268c 	.word	0x2000268c
 8014868:	20002690 	.word	0x20002690
 801486c:	2000053c 	.word	0x2000053c
 8014870:	20000558 	.word	0x20000558

08014874 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b094      	sub	sp, #80	; 0x50
 8014878:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 801487a:	4bb0      	ldr	r3, [pc, #704]	; (8014b3c <WaveProcess+0x2c8>)
 801487c:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 801487e:	4bb0      	ldr	r3, [pc, #704]	; (8014b40 <WaveProcess+0x2cc>)
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	4bb0      	ldr	r3, [pc, #704]	; (8014b44 <WaveProcess+0x2d0>)
 8014884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014888:	4619      	mov	r1, r3
 801488a:	4baf      	ldr	r3, [pc, #700]	; (8014b48 <WaveProcess+0x2d4>)
 801488c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014890:	2b00      	cmp	r3, #0
 8014892:	bf14      	ite	ne
 8014894:	2301      	movne	r3, #1
 8014896:	2300      	moveq	r3, #0
 8014898:	b2db      	uxtb	r3, r3
 801489a:	440b      	add	r3, r1
 801489c:	005b      	lsls	r3, r3, #1
 801489e:	4413      	add	r3, r2
 80148a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	4aa9      	ldr	r2, [pc, #676]	; (8014b4c <WaveProcess+0x2d8>)
 80148a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80148ac:	4611      	mov	r1, r2
 80148ae:	4aa8      	ldr	r2, [pc, #672]	; (8014b50 <WaveProcess+0x2dc>)
 80148b0:	5c52      	ldrb	r2, [r2, r1]
 80148b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80148b6:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 80148b8:	2300      	movs	r3, #0
 80148ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 80148be:	2300      	movs	r3, #0
 80148c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80148c2:	2300      	movs	r3, #0
 80148c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80148c6:	2300      	movs	r3, #0
 80148c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80148ca:	2302      	movs	r3, #2
 80148cc:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 80148ce:	2300      	movs	r3, #0
 80148d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80148d2:	2300      	movs	r3, #0
 80148d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80148d6:	2300      	movs	r3, #0
 80148d8:	863b      	strh	r3, [r7, #48]	; 0x30
 80148da:	2300      	movs	r3, #0
 80148dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 80148de:	2300      	movs	r3, #0
 80148e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80148e2:	f04f 33ff 	mov.w	r3, #4294967295
 80148e6:	627b      	str	r3, [r7, #36]	; 0x24
 80148e8:	2300      	movs	r3, #0
 80148ea:	623b      	str	r3, [r7, #32]
 80148ec:	2300      	movs	r3, #0
 80148ee:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 80148f0:	4b98      	ldr	r3, [pc, #608]	; (8014b54 <WaveProcess+0x2e0>)
 80148f2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80148f6:	461a      	mov	r2, r3
 80148f8:	4b97      	ldr	r3, [pc, #604]	; (8014b58 <WaveProcess+0x2e4>)
 80148fa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	3b01      	subs	r3, #1
 8014902:	b29b      	uxth	r3, r3
 8014904:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 8014906:	2397      	movs	r3, #151	; 0x97
 8014908:	81fb      	strh	r3, [r7, #14]
 801490a:	4b92      	ldr	r3, [pc, #584]	; (8014b54 <WaveProcess+0x2e0>)
 801490c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014910:	f003 0301 	and.w	r3, r3, #1
 8014914:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 8014916:	4b8f      	ldr	r3, [pc, #572]	; (8014b54 <WaveProcess+0x2e0>)
 8014918:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801491c:	461a      	mov	r2, r3
 801491e:	4b8f      	ldr	r3, [pc, #572]	; (8014b5c <WaveProcess+0x2e8>)
 8014920:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014924:	817b      	strh	r3, [r7, #10]
 8014926:	4b8b      	ldr	r3, [pc, #556]	; (8014b54 <WaveProcess+0x2e0>)
 8014928:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801492c:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 801492e:	4b89      	ldr	r3, [pc, #548]	; (8014b54 <WaveProcess+0x2e0>)
 8014930:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8014934:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 8014936:	4b8a      	ldr	r3, [pc, #552]	; (8014b60 <WaveProcess+0x2ec>)
 8014938:	f9b3 3000 	ldrsh.w	r3, [r3]
 801493c:	2b01      	cmp	r3, #1
 801493e:	d13c      	bne.n	80149ba <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8014940:	4b88      	ldr	r3, [pc, #544]	; (8014b64 <WaveProcess+0x2f0>)
 8014942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014946:	461a      	mov	r2, r3
 8014948:	4b87      	ldr	r3, [pc, #540]	; (8014b68 <WaveProcess+0x2f4>)
 801494a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801494e:	4413      	add	r3, r2
 8014950:	4a80      	ldr	r2, [pc, #512]	; (8014b54 <WaveProcess+0x2e0>)
 8014952:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8014956:	1a9b      	subs	r3, r3, r2
 8014958:	3b64      	subs	r3, #100	; 0x64
 801495a:	031a      	lsls	r2, r3, #12
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014962:	b29b      	uxth	r3, r3
 8014964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014968:	b29b      	uxth	r3, r3
 801496a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801496e:	4b7d      	ldr	r3, [pc, #500]	; (8014b64 <WaveProcess+0x2f0>)
 8014970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014974:	461a      	mov	r2, r3
 8014976:	4b7c      	ldr	r3, [pc, #496]	; (8014b68 <WaveProcess+0x2f4>)
 8014978:	f9b3 3000 	ldrsh.w	r3, [r3]
 801497c:	4413      	add	r3, r2
 801497e:	4a75      	ldr	r2, [pc, #468]	; (8014b54 <WaveProcess+0x2e0>)
 8014980:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8014984:	4413      	add	r3, r2
 8014986:	3b64      	subs	r3, #100	; 0x64
 8014988:	031a      	lsls	r2, r3, #12
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014990:	b29b      	uxth	r3, r3
 8014992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014996:	b29b      	uxth	r3, r3
 8014998:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 801499c:	4b6d      	ldr	r3, [pc, #436]	; (8014b54 <WaveProcess+0x2e0>)
 801499e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149a2:	3b64      	subs	r3, #100	; 0x64
 80149a4:	031a      	lsls	r2, r3, #12
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80149b8:	e03b      	b.n	8014a32 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80149ba:	4b66      	ldr	r3, [pc, #408]	; (8014b54 <WaveProcess+0x2e0>)
 80149bc:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80149c0:	461a      	mov	r2, r3
 80149c2:	4b64      	ldr	r3, [pc, #400]	; (8014b54 <WaveProcess+0x2e0>)
 80149c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149c8:	4413      	add	r3, r2
 80149ca:	4a62      	ldr	r2, [pc, #392]	; (8014b54 <WaveProcess+0x2e0>)
 80149cc:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149d0:	1a9b      	subs	r3, r3, r2
 80149d2:	3b64      	subs	r3, #100	; 0x64
 80149d4:	031a      	lsls	r2, r3, #12
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80149dc:	b29b      	uxth	r3, r3
 80149de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80149e8:	4b5a      	ldr	r3, [pc, #360]	; (8014b54 <WaveProcess+0x2e0>)
 80149ea:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80149ee:	461a      	mov	r2, r3
 80149f0:	4b58      	ldr	r3, [pc, #352]	; (8014b54 <WaveProcess+0x2e0>)
 80149f2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80149f6:	4413      	add	r3, r2
 80149f8:	4a56      	ldr	r2, [pc, #344]	; (8014b54 <WaveProcess+0x2e0>)
 80149fa:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80149fe:	4413      	add	r3, r2
 8014a00:	3b64      	subs	r3, #100	; 0x64
 8014a02:	031a      	lsls	r2, r3, #12
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 8014a16:	4b4f      	ldr	r3, [pc, #316]	; (8014b54 <WaveProcess+0x2e0>)
 8014a18:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014a1c:	3b64      	subs	r3, #100	; 0x64
 8014a1e:	031a      	lsls	r2, r3, #12
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a2c:	b29b      	uxth	r3, r3
 8014a2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8014a32:	4b48      	ldr	r3, [pc, #288]	; (8014b54 <WaveProcess+0x2e0>)
 8014a34:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a38:	2b05      	cmp	r3, #5
 8014a3a:	d004      	beq.n	8014a46 <WaveProcess+0x1d2>
 8014a3c:	4b45      	ldr	r3, [pc, #276]	; (8014b54 <WaveProcess+0x2e0>)
 8014a3e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d10b      	bne.n	8014a5e <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8014a46:	4b43      	ldr	r3, [pc, #268]	; (8014b54 <WaveProcess+0x2e0>)
 8014a48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014a4c:	2b0b      	cmp	r3, #11
 8014a4e:	dd06      	ble.n	8014a5e <WaveProcess+0x1ea>
  {
    Dpth = 302;
 8014a50:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8014a54:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 8014a56:	4b3f      	ldr	r3, [pc, #252]	; (8014b54 <WaveProcess+0x2e0>)
 8014a58:	2200      	movs	r2, #0
 8014a5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014a64:	e0ad      	b.n	8014bc2 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 8014a66:	4b41      	ldr	r3, [pc, #260]	; (8014b6c <WaveProcess+0x2f8>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014a70:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014a74:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8014a78:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014a7c:	1acb      	subs	r3, r1, r3
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	f280 80a7 	bge.w	8014bd2 <WaveProcess+0x35e>
    ViA = Ain[i];
 8014a84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	697a      	ldr	r2, [r7, #20]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 8014a92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	da02      	bge.n	8014aa2 <WaveProcess+0x22e>
 8014a9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 8014aa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	dd02      	ble.n	8014ab2 <WaveProcess+0x23e>
 8014aac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014ab0:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 8014ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014ab6:	6a3a      	ldr	r2, [r7, #32]
 8014ab8:	4413      	add	r3, r2
 8014aba:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 8014abc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014ac0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8014ac4:	1ad3      	subs	r3, r2, r3
 8014ac6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014aca:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8014ace:	1a8a      	subs	r2, r1, r2
 8014ad0:	fb02 f303 	mul.w	r3, r2, r3
 8014ad4:	69fa      	ldr	r2, [r7, #28]
 8014ad6:	4413      	add	r3, r2
 8014ad8:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 8014ada:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014ade:	2b02      	cmp	r3, #2
 8014ae0:	d102      	bne.n	8014ae8 <WaveProcess+0x274>
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014ae6:	e005      	b.n	8014af4 <WaveProcess+0x280>
    else         DtA++;
 8014ae8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	3301      	adds	r3, #1
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8014af4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014af8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8014afc:	429a      	cmp	r2, r3
 8014afe:	dd37      	ble.n	8014b70 <WaveProcess+0x2fc>
      if(StA == 0){
 8014b00:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d115      	bne.n	8014b34 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8014b08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b0c:	4413      	add	r3, r2
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014b12:	2300      	movs	r3, #0
 8014b14:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014b16:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8014b22:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8014b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	da02      	bge.n	8014b34 <WaveProcess+0x2c0>
 8014b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014b32:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8014b34:	2301      	movs	r3, #1
 8014b36:	86fb      	strh	r3, [r7, #54]	; 0x36
 8014b38:	e03c      	b.n	8014bb4 <WaveProcess+0x340>
 8014b3a:	bf00      	nop
 8014b3c:	200026a8 	.word	0x200026a8
 8014b40:	20000558 	.word	0x20000558
 8014b44:	20002692 	.word	0x20002692
 8014b48:	2000268c 	.word	0x2000268c
 8014b4c:	20002690 	.word	0x20002690
 8014b50:	2000053c 	.word	0x2000053c
 8014b54:	20000274 	.word	0x20000274
 8014b58:	0800230c 	.word	0x0800230c
 8014b5c:	08002314 	.word	0x08002314
 8014b60:	20002656 	.word	0x20002656
 8014b64:	20002698 	.word	0x20002698
 8014b68:	20002694 	.word	0x20002694
 8014b6c:	2000673c 	.word	0x2000673c
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 8014b70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014b74:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	da1b      	bge.n	8014bb4 <WaveProcess+0x340>
      if(StA == 1){
 8014b7c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	d115      	bne.n	8014bb0 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 8014b84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014b86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b88:	4413      	add	r3, r2
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	873b      	strh	r3, [r7, #56]	; 0x38
 8014b8e:	2300      	movs	r3, #0
 8014b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014b92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	3301      	adds	r3, #1
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 8014b9e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8014ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	da02      	bge.n	8014bb0 <WaveProcess+0x33c>
 8014baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014bae:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8014bb4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	3301      	adds	r3, #1
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014bc2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014bc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	f6ff af4b 	blt.w	8014a66 <WaveProcess+0x1f2>
 8014bd0:	e000      	b.n	8014bd4 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8014bd2:	bf00      	nop
    }
  }
  if(n == 0)
 8014bd4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d14f      	bne.n	8014c7c <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 8014bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bde:	b21a      	sxth	r2, r3
 8014be0:	4b9a      	ldr	r3, [pc, #616]	; (8014e4c <WaveProcess+0x5d8>)
 8014be2:	801a      	strh	r2, [r3, #0]
 8014be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be6:	b21a      	sxth	r2, r3
 8014be8:	4b99      	ldr	r3, [pc, #612]	; (8014e50 <WaveProcess+0x5dc>)
 8014bea:	801a      	strh	r2, [r3, #0]
 8014bec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014bf0:	6a3a      	ldr	r2, [r7, #32]
 8014bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bf6:	b21a      	sxth	r2, r3
 8014bf8:	4b96      	ldr	r3, [pc, #600]	; (8014e54 <WaveProcess+0x5e0>)
 8014bfa:	801a      	strh	r2, [r3, #0]
 8014bfc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014c00:	3301      	adds	r3, #1
 8014c02:	69fa      	ldr	r2, [r7, #28]
 8014c04:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c08:	4a93      	ldr	r2, [pc, #588]	; (8014e58 <WaveProcess+0x5e4>)
 8014c0a:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 8014c0c:	4b92      	ldr	r3, [pc, #584]	; (8014e58 <WaveProcess+0x5e4>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7fc fbef 	bl	80113f4 <Sqrt32>
 8014c16:	4603      	mov	r3, r0
 8014c18:	461a      	mov	r2, r3
 8014c1a:	4b90      	ldr	r3, [pc, #576]	; (8014e5c <WaveProcess+0x5e8>)
 8014c1c:	601a      	str	r2, [r3, #0]
 8014c1e:	4b8b      	ldr	r3, [pc, #556]	; (8014e4c <WaveProcess+0x5d8>)
 8014c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c24:	461a      	mov	r2, r3
 8014c26:	4b8a      	ldr	r3, [pc, #552]	; (8014e50 <WaveProcess+0x5dc>)
 8014c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	0fda      	lsrs	r2, r3, #31
 8014c30:	4413      	add	r3, r2
 8014c32:	105b      	asrs	r3, r3, #1
 8014c34:	b21a      	sxth	r2, r3
 8014c36:	4b8a      	ldr	r3, [pc, #552]	; (8014e60 <WaveProcess+0x5ec>)
 8014c38:	801a      	strh	r2, [r3, #0]
 8014c3a:	4b84      	ldr	r3, [pc, #528]	; (8014e4c <WaveProcess+0x5d8>)
 8014c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c40:	461a      	mov	r2, r3
 8014c42:	4b83      	ldr	r3, [pc, #524]	; (8014e50 <WaveProcess+0x5dc>)
 8014c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	4a86      	ldr	r2, [pc, #536]	; (8014e64 <WaveProcess+0x5f0>)
 8014c4c:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 8014c4e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8014c52:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8014c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c5a:	4a83      	ldr	r2, [pc, #524]	; (8014e68 <WaveProcess+0x5f4>)
 8014c5c:	6013      	str	r3, [r2, #0]
 8014c5e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014c62:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c6a:	4a80      	ldr	r2, [pc, #512]	; (8014e6c <WaveProcess+0x5f8>)
 8014c6c:	6013      	str	r3, [r2, #0]
 8014c6e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8014c72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8014c76:	4413      	add	r3, r2
 8014c78:	4a7d      	ldr	r2, [pc, #500]	; (8014e70 <WaveProcess+0x5fc>)
 8014c7a:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 8014c7c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c80:	2b05      	cmp	r3, #5
 8014c82:	d003      	beq.n	8014c8c <WaveProcess+0x418>
 8014c84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	d12f      	bne.n	8014cec <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 8014c8c:	4b79      	ldr	r3, [pc, #484]	; (8014e74 <WaveProcess+0x600>)
 8014c8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c92:	2b0b      	cmp	r3, #11
 8014c94:	dd03      	ble.n	8014c9e <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 8014c96:	2301      	movs	r3, #1
 8014c98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014c9c:	e033      	b.n	8014d06 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014c9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d101      	bne.n	8014caa <WaveProcess+0x436>
 8014ca6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014ca8:	e000      	b.n	8014cac <WaveProcess+0x438>
 8014caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014cac:	89fa      	ldrh	r2, [r7, #14]
 8014cae:	1a9b      	subs	r3, r3, r2
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014cb6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	d123      	bne.n	8014d06 <WaveProcess+0x492>
 8014cbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	da1f      	bge.n	8014d06 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014cc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	da00      	bge.n	8014cd0 <WaveProcess+0x45c>
 8014cce:	3303      	adds	r3, #3
 8014cd0:	109b      	asrs	r3, r3, #2
 8014cd2:	b21b      	sxth	r3, r3
 8014cd4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	dd03      	ble.n	8014ce4 <WaveProcess+0x470>
 8014cdc:	2301      	movs	r3, #1
 8014cde:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014ce2:	e010      	b.n	8014d06 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8014cea:	e00c      	b.n	8014d06 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 8014cec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d101      	bne.n	8014cf8 <WaveProcess+0x484>
 8014cf4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014cf6:	e000      	b.n	8014cfa <WaveProcess+0x486>
 8014cf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014cfa:	89fa      	ldrh	r2, [r7, #14]
 8014cfc:	1a9b      	subs	r3, r3, r2
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014d04:	e000      	b.n	8014d08 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8014d06:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8014d08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d10c      	bne.n	8014d2a <WaveProcess+0x4b6>
 8014d10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d14:	2b04      	cmp	r3, #4
 8014d16:	d108      	bne.n	8014d2a <WaveProcess+0x4b6>
 8014d18:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	dd04      	ble.n	8014d2a <WaveProcess+0x4b6>
    Status = STOP;
 8014d20:	4b55      	ldr	r3, [pc, #340]	; (8014e78 <WaveProcess+0x604>)
 8014d22:	2201      	movs	r2, #1
 8014d24:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8014d26:	f7fe ff21 	bl	8013b6c <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8014d2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d115      	bne.n	8014d5e <WaveProcess+0x4ea>
 8014d32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	da11      	bge.n	8014d5e <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8014d3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	da00      	bge.n	8014d44 <WaveProcess+0x4d0>
 8014d42:	3303      	adds	r3, #3
 8014d44:	109b      	asrs	r3, r3, #2
 8014d46:	b21b      	sxth	r3, r3
 8014d48:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	dd03      	ble.n	8014d58 <WaveProcess+0x4e4>
 8014d50:	2301      	movs	r3, #1
 8014d52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8014d56:	e002      	b.n	8014d5e <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 8014d58:	2300      	movs	r3, #0
 8014d5a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 8014d5e:	4a47      	ldr	r2, [pc, #284]	; (8014e7c <WaveProcess+0x608>)
 8014d60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014d64:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 8014d66:	4b45      	ldr	r3, [pc, #276]	; (8014e7c <WaveProcess+0x608>)
 8014d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	dd02      	ble.n	8014d76 <WaveProcess+0x502>
 8014d70:	4b43      	ldr	r3, [pc, #268]	; (8014e80 <WaveProcess+0x60c>)
 8014d72:	2201      	movs	r2, #1
 8014d74:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 8014d76:	4b43      	ldr	r3, [pc, #268]	; (8014e84 <WaveProcess+0x610>)
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d016      	beq.n	8014dac <WaveProcess+0x538>
 8014d7e:	4b3e      	ldr	r3, [pc, #248]	; (8014e78 <WaveProcess+0x604>)
 8014d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d84:	2b01      	cmp	r3, #1
 8014d86:	d111      	bne.n	8014dac <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 8014d88:	4b3a      	ldr	r3, [pc, #232]	; (8014e74 <WaveProcess+0x600>)
 8014d8a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8014d8e:	4b3e      	ldr	r3, [pc, #248]	; (8014e88 <WaveProcess+0x614>)
 8014d90:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 8014d92:	4b38      	ldr	r3, [pc, #224]	; (8014e74 <WaveProcess+0x600>)
 8014d94:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8014d98:	4b3c      	ldr	r3, [pc, #240]	; (8014e8c <WaveProcess+0x618>)
 8014d9a:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 8014d9c:	4b35      	ldr	r3, [pc, #212]	; (8014e74 <WaveProcess+0x600>)
 8014d9e:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8014da2:	4b3b      	ldr	r3, [pc, #236]	; (8014e90 <WaveProcess+0x61c>)
 8014da4:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 8014da6:	4b37      	ldr	r3, [pc, #220]	; (8014e84 <WaveProcess+0x610>)
 8014da8:	2200      	movs	r2, #0
 8014daa:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 8014dac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f340 8104 	ble.w	8014fbe <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8014db6:	4b2f      	ldr	r3, [pc, #188]	; (8014e74 <WaveProcess+0x600>)
 8014db8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014dc2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8014dc6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014dca:	fb01 f303 	mul.w	r3, r1, r3
 8014dce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	da01      	bge.n	8014dda <WaveProcess+0x566>
 8014dd6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014dda:	129b      	asrs	r3, r3, #10
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	4413      	add	r3, r2
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014de6:	4413      	add	r3, r2
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014dee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014df2:	005b      	lsls	r3, r3, #1
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	4413      	add	r3, r2
 8014df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014dfc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e00:	693a      	ldr	r2, [r7, #16]
 8014e02:	fb02 f303 	mul.w	r3, r2, r3
 8014e06:	131b      	asrs	r3, r3, #12
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	3364      	adds	r3, #100	; 0x64
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8014e12:	2300      	movs	r3, #0
 8014e14:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014e18:	e0c7      	b.n	8014faa <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 8014e1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014e1e:	005b      	lsls	r3, r3, #1
 8014e20:	697a      	ldr	r2, [r7, #20]
 8014e22:	4413      	add	r3, r2
 8014e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014e28:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e2c:	693a      	ldr	r2, [r7, #16]
 8014e2e:	fb02 f303 	mul.w	r3, r2, r3
 8014e32:	131b      	asrs	r3, r3, #12
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	3364      	adds	r3, #100	; 0x64
 8014e38:	b29b      	uxth	r3, r3
 8014e3a:	80bb      	strh	r3, [r7, #4]
      k++;
 8014e3c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	3301      	adds	r3, #1
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 8014e4a:	e09e      	b.n	8014f8a <WaveProcess+0x716>
 8014e4c:	2000266c 	.word	0x2000266c
 8014e50:	2000266e 	.word	0x2000266e
 8014e54:	20002672 	.word	0x20002672
 8014e58:	20002688 	.word	0x20002688
 8014e5c:	20002674 	.word	0x20002674
 8014e60:	20002670 	.word	0x20002670
 8014e64:	20002678 	.word	0x20002678
 8014e68:	20002680 	.word	0x20002680
 8014e6c:	2000267c 	.word	0x2000267c
 8014e70:	20002684 	.word	0x20002684
 8014e74:	20000274 	.word	0x20000274
 8014e78:	20002656 	.word	0x20002656
 8014e7c:	2000269a 	.word	0x2000269a
 8014e80:	200026a3 	.word	0x200026a3
 8014e84:	20000538 	.word	0x20000538
 8014e88:	20002694 	.word	0x20002694
 8014e8c:	20002696 	.word	0x20002696
 8014e90:	20002698 	.word	0x20002698
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 8014e94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014e98:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8014ea2:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014ea6:	fb02 f303 	mul.w	r3, r2, r3
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	da01      	bge.n	8014eb2 <WaveProcess+0x63e>
 8014eae:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014eb2:	129b      	asrs	r3, r3, #10
 8014eb4:	b29a      	uxth	r2, r3
 8014eb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014eba:	4413      	add	r3, r2
 8014ebc:	b29b      	uxth	r3, r3
 8014ebe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8014ec0:	4b63      	ldr	r3, [pc, #396]	; (8015050 <WaveProcess+0x7dc>)
 8014ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d132      	bne.n	8014f30 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 8014eca:	4b62      	ldr	r3, [pc, #392]	; (8015054 <WaveProcess+0x7e0>)
 8014ecc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	4b61      	ldr	r3, [pc, #388]	; (8015058 <WaveProcess+0x7e4>)
 8014ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ee0:	4413      	add	r3, r2
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	b21a      	sxth	r2, r3
 8014ee6:	4b5d      	ldr	r3, [pc, #372]	; (801505c <WaveProcess+0x7e8>)
 8014ee8:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 8014eea:	4b5c      	ldr	r3, [pc, #368]	; (801505c <WaveProcess+0x7e8>)
 8014eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ef0:	2bc7      	cmp	r3, #199	; 0xc7
 8014ef2:	dd02      	ble.n	8014efa <WaveProcess+0x686>
 8014ef4:	4b59      	ldr	r3, [pc, #356]	; (801505c <WaveProcess+0x7e8>)
 8014ef6:	22ca      	movs	r2, #202	; 0xca
 8014ef8:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 8014efa:	4b58      	ldr	r3, [pc, #352]	; (801505c <WaveProcess+0x7e8>)
 8014efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	dc02      	bgt.n	8014f0a <WaveProcess+0x696>
 8014f04:	4b55      	ldr	r3, [pc, #340]	; (801505c <WaveProcess+0x7e8>)
 8014f06:	2201      	movs	r2, #1
 8014f08:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 8014f0a:	4b54      	ldr	r3, [pc, #336]	; (801505c <WaveProcess+0x7e8>)
 8014f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f14:	b2d1      	uxtb	r1, r2
 8014f16:	4a52      	ldr	r2, [pc, #328]	; (8015060 <WaveProcess+0x7ec>)
 8014f18:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014f1a:	4b4e      	ldr	r3, [pc, #312]	; (8015054 <WaveProcess+0x7e0>)
 8014f1c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f20:	b2da      	uxtb	r2, r3
 8014f22:	79f9      	ldrb	r1, [r7, #7]
 8014f24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 f89d 	bl	8015068 <Build_Ext>
 8014f2e:	e01b      	b.n	8014f68 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8014f30:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f34:	2bc7      	cmp	r3, #199	; 0xc7
 8014f36:	dd01      	ble.n	8014f3c <WaveProcess+0x6c8>
 8014f38:	23ca      	movs	r3, #202	; 0xca
 8014f3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 8014f3c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	dc01      	bgt.n	8014f48 <WaveProcess+0x6d4>
 8014f44:	2302      	movs	r3, #2
 8014f46:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8014f48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f4e:	b2d1      	uxtb	r1, r2
 8014f50:	4a43      	ldr	r2, [pc, #268]	; (8015060 <WaveProcess+0x7ec>)
 8014f52:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 8014f54:	4b3f      	ldr	r3, [pc, #252]	; (8015054 <WaveProcess+0x7e0>)
 8014f56:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014f5a:	b2da      	uxtb	r2, r3
 8014f5c:	79f9      	ldrb	r1, [r7, #7]
 8014f5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f62:	4618      	mov	r0, r3
 8014f64:	f000 f880 	bl	8015068 <Build_Ext>
        }

        if(n++ >= 300) break;
 8014f68:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014f6c:	b29a      	uxth	r2, r3
 8014f6e:	3201      	adds	r2, #1
 8014f70:	b292      	uxth	r2, r2
 8014f72:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014f76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f7a:	da0b      	bge.n	8014f94 <WaveProcess+0x720>
        p -= Ks;
 8014f7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014f80:	897b      	ldrh	r3, [r7, #10]
 8014f82:	1ad3      	subs	r3, r2, r3
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 8014f8a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	dc80      	bgt.n	8014e94 <WaveProcess+0x620>
 8014f92:	e000      	b.n	8014f96 <WaveProcess+0x722>
        if(n++ >= 300) break;
 8014f94:	bf00      	nop
      }
      p += 1024;
 8014f96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 8014fa4:	88bb      	ldrh	r3, [r7, #4]
 8014fa6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 8014faa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014fb2:	f6ff af32 	blt.w	8014e1a <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8014fb6:	4b2b      	ldr	r3, [pc, #172]	; (8015064 <WaveProcess+0x7f0>)
 8014fb8:	2200      	movs	r2, #0
 8014fba:	701a      	strb	r2, [r3, #0]
 8014fbc:	e037      	b.n	801502e <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 8014fbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	da33      	bge.n	801502e <WaveProcess+0x7ba>
 8014fc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014fca:	2b03      	cmp	r3, #3
 8014fcc:	d103      	bne.n	8014fd6 <WaveProcess+0x762>
 8014fce:	4b25      	ldr	r3, [pc, #148]	; (8015064 <WaveProcess+0x7f0>)
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d02b      	beq.n	801502e <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8014fdc:	e022      	b.n	8015024 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 8014fde:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fe2:	4a1f      	ldr	r2, [pc, #124]	; (8015060 <WaveProcess+0x7ec>)
 8014fe4:	21ff      	movs	r1, #255	; 0xff
 8014fe6:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8014fe8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8014fec:	b29a      	uxth	r2, r3
 8014fee:	3201      	adds	r2, #1
 8014ff0:	b292      	uxth	r2, r2
 8014ff2:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8014ff6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014ffa:	da0b      	bge.n	8015014 <WaveProcess+0x7a0>
        p -= Ks;
 8014ffc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015000:	897b      	ldrh	r3, [r7, #10]
 8015002:	1ad3      	subs	r3, r2, r3
 8015004:	b29b      	uxth	r3, r3
 8015006:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801500a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801500e:	2b00      	cmp	r3, #0
 8015010:	dce5      	bgt.n	8014fde <WaveProcess+0x76a>
 8015012:	e000      	b.n	8015016 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015014:	bf00      	nop
      }
      p += 1024;
 8015016:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801501a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801501e:	b29b      	uxth	r3, r3
 8015020:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015024:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015028:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801502c:	dbed      	blt.n	801500a <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 801502e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015032:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015036:	429a      	cmp	r2, r3
 8015038:	d106      	bne.n	8015048 <WaveProcess+0x7d4>
 801503a:	4b05      	ldr	r3, [pc, #20]	; (8015050 <WaveProcess+0x7dc>)
 801503c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015040:	2b01      	cmp	r3, #1
 8015042:	d001      	beq.n	8015048 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015044:	f7f7 fbb2 	bl	800c7ac <ADC_Start>
  }
}
 8015048:	bf00      	nop
 801504a:	3750      	adds	r7, #80	; 0x50
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	20002656 	.word	0x20002656
 8015054:	20000274 	.word	0x20000274
 8015058:	20002694 	.word	0x20002694
 801505c:	200026a0 	.word	0x200026a0
 8015060:	2000091c 	.word	0x2000091c
 8015064:	200026a2 	.word	0x200026a2

08015068 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 8015068:	b480      	push	{r7}
 801506a:	b085      	sub	sp, #20
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	80fb      	strh	r3, [r7, #6]
 8015072:	460b      	mov	r3, r1
 8015074:	717b      	strb	r3, [r7, #5]
 8015076:	4613      	mov	r3, r2
 8015078:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 801507a:	4b69      	ldr	r3, [pc, #420]	; (8015220 <Build_Ext+0x1b8>)
 801507c:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 801507e:	4b69      	ldr	r3, [pc, #420]	; (8015224 <Build_Ext+0x1bc>)
 8015080:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015084:	b29a      	uxth	r2, r3
 8015086:	4b68      	ldr	r3, [pc, #416]	; (8015228 <Build_Ext+0x1c0>)
 8015088:	785b      	ldrb	r3, [r3, #1]
 801508a:	b29b      	uxth	r3, r3
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	b29a      	uxth	r2, r3
 8015090:	4b64      	ldr	r3, [pc, #400]	; (8015224 <Build_Ext+0x1bc>)
 8015092:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015096:	b29b      	uxth	r3, r3
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	b29b      	uxth	r3, r3
 801509c:	b21a      	sxth	r2, r3
 801509e:	4b63      	ldr	r3, [pc, #396]	; (801522c <Build_Ext+0x1c4>)
 80150a0:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80150a2:	4b60      	ldr	r3, [pc, #384]	; (8015224 <Build_Ext+0x1bc>)
 80150a4:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80150a8:	4b61      	ldr	r3, [pc, #388]	; (8015230 <Build_Ext+0x1c8>)
 80150aa:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80150ac:	797b      	ldrb	r3, [r7, #5]
 80150ae:	2b05      	cmp	r3, #5
 80150b0:	f200 809c 	bhi.w	80151ec <Build_Ext+0x184>
 80150b4:	a201      	add	r2, pc, #4	; (adr r2, 80150bc <Build_Ext+0x54>)
 80150b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150ba:	bf00      	nop
 80150bc:	080150d5 	.word	0x080150d5
 80150c0:	080150fb 	.word	0x080150fb
 80150c4:	08015121 	.word	0x08015121
 80150c8:	0801514b 	.word	0x0801514b
 80150cc:	0801518b 	.word	0x0801518b
 80150d0:	080151cb 	.word	0x080151cb
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 80150d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150d8:	330a      	adds	r3, #10
 80150da:	4a53      	ldr	r2, [pc, #332]	; (8015228 <Build_Ext+0x1c0>)
 80150dc:	5cd3      	ldrb	r3, [r2, r3]
 80150de:	b29a      	uxth	r2, r3
 80150e0:	4b51      	ldr	r3, [pc, #324]	; (8015228 <Build_Ext+0x1c0>)
 80150e2:	785b      	ldrb	r3, [r3, #1]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	4b4e      	ldr	r3, [pc, #312]	; (8015224 <Build_Ext+0x1bc>)
 80150ec:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	4413      	add	r3, r2
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	81fb      	strh	r3, [r7, #14]
 80150f8:	e078      	b.n	80151ec <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 80150fa:	4b4a      	ldr	r3, [pc, #296]	; (8015224 <Build_Ext+0x1bc>)
 80150fc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015100:	b29a      	uxth	r2, r3
 8015102:	4b49      	ldr	r3, [pc, #292]	; (8015228 <Build_Ext+0x1c0>)
 8015104:	785b      	ldrb	r3, [r3, #1]
 8015106:	b29b      	uxth	r3, r3
 8015108:	4413      	add	r3, r2
 801510a:	b29a      	uxth	r2, r3
 801510c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015110:	330a      	adds	r3, #10
 8015112:	4945      	ldr	r1, [pc, #276]	; (8015228 <Build_Ext+0x1c0>)
 8015114:	5ccb      	ldrb	r3, [r1, r3]
 8015116:	b29b      	uxth	r3, r3
 8015118:	1ad3      	subs	r3, r2, r3
 801511a:	b29b      	uxth	r3, r3
 801511c:	81fb      	strh	r3, [r7, #14]
 801511e:	e065      	b.n	80151ec <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015124:	330a      	adds	r3, #10
 8015126:	4a40      	ldr	r2, [pc, #256]	; (8015228 <Build_Ext+0x1c0>)
 8015128:	5cd3      	ldrb	r3, [r2, r3]
 801512a:	b29a      	uxth	r2, r3
 801512c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015130:	4940      	ldr	r1, [pc, #256]	; (8015234 <Build_Ext+0x1cc>)
 8015132:	5ccb      	ldrb	r3, [r1, r3]
 8015134:	b29b      	uxth	r3, r3
 8015136:	4413      	add	r3, r2
 8015138:	b29a      	uxth	r2, r3
 801513a:	4b3c      	ldr	r3, [pc, #240]	; (801522c <Build_Ext+0x1c4>)
 801513c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015140:	b29b      	uxth	r3, r3
 8015142:	4413      	add	r3, r2
 8015144:	b29b      	uxth	r3, r3
 8015146:	81fb      	strh	r3, [r7, #14]
 8015148:	e050      	b.n	80151ec <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 801514a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801514e:	330a      	adds	r3, #10
 8015150:	4a35      	ldr	r2, [pc, #212]	; (8015228 <Build_Ext+0x1c0>)
 8015152:	5cd3      	ldrb	r3, [r2, r3]
 8015154:	b29a      	uxth	r2, r3
 8015156:	4b34      	ldr	r3, [pc, #208]	; (8015228 <Build_Ext+0x1c0>)
 8015158:	785b      	ldrb	r3, [r3, #1]
 801515a:	b29b      	uxth	r3, r3
 801515c:	1ad3      	subs	r3, r2, r3
 801515e:	b29a      	uxth	r2, r3
 8015160:	4b30      	ldr	r3, [pc, #192]	; (8015224 <Build_Ext+0x1bc>)
 8015162:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015166:	b299      	uxth	r1, r3
 8015168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801516c:	4831      	ldr	r0, [pc, #196]	; (8015234 <Build_Ext+0x1cc>)
 801516e:	5cc3      	ldrb	r3, [r0, r3]
 8015170:	b29b      	uxth	r3, r3
 8015172:	1acb      	subs	r3, r1, r3
 8015174:	b29b      	uxth	r3, r3
 8015176:	4413      	add	r3, r2
 8015178:	b29a      	uxth	r2, r3
 801517a:	4b2a      	ldr	r3, [pc, #168]	; (8015224 <Build_Ext+0x1bc>)
 801517c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015180:	b29b      	uxth	r3, r3
 8015182:	4413      	add	r3, r2
 8015184:	b29b      	uxth	r3, r3
 8015186:	81fb      	strh	r3, [r7, #14]
 8015188:	e030      	b.n	80151ec <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 801518a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801518e:	4a29      	ldr	r2, [pc, #164]	; (8015234 <Build_Ext+0x1cc>)
 8015190:	5cd3      	ldrb	r3, [r2, r3]
 8015192:	b29a      	uxth	r2, r3
 8015194:	4b23      	ldr	r3, [pc, #140]	; (8015224 <Build_Ext+0x1bc>)
 8015196:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801519a:	b29b      	uxth	r3, r3
 801519c:	1ad3      	subs	r3, r2, r3
 801519e:	b29a      	uxth	r2, r3
 80151a0:	4b21      	ldr	r3, [pc, #132]	; (8015228 <Build_Ext+0x1c0>)
 80151a2:	785b      	ldrb	r3, [r3, #1]
 80151a4:	b299      	uxth	r1, r3
 80151a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151aa:	330a      	adds	r3, #10
 80151ac:	481e      	ldr	r0, [pc, #120]	; (8015228 <Build_Ext+0x1c0>)
 80151ae:	5cc3      	ldrb	r3, [r0, r3]
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	1acb      	subs	r3, r1, r3
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	4413      	add	r3, r2
 80151b8:	b29a      	uxth	r2, r3
 80151ba:	4b1a      	ldr	r3, [pc, #104]	; (8015224 <Build_Ext+0x1bc>)
 80151bc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	4413      	add	r3, r2
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	81fb      	strh	r3, [r7, #14]
 80151c8:	e010      	b.n	80151ec <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 80151ca:	793b      	ldrb	r3, [r7, #4]
 80151cc:	b29a      	uxth	r2, r3
 80151ce:	4b15      	ldr	r3, [pc, #84]	; (8015224 <Build_Ext+0x1bc>)
 80151d0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	4413      	add	r3, r2
 80151d8:	b29a      	uxth	r2, r3
 80151da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151de:	4915      	ldr	r1, [pc, #84]	; (8015234 <Build_Ext+0x1cc>)
 80151e0:	5ccb      	ldrb	r3, [r1, r3]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	81fb      	strh	r3, [r7, #14]
 80151ea:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 80151ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151f0:	2bc7      	cmp	r3, #199	; 0xc7
 80151f2:	dd01      	ble.n	80151f8 <Build_Ext+0x190>
 80151f4:	23ca      	movs	r3, #202	; 0xca
 80151f6:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 80151f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80151fc:	2b02      	cmp	r3, #2
 80151fe:	dc01      	bgt.n	8015204 <Build_Ext+0x19c>
 8015200:	2301      	movs	r3, #1
 8015202:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015208:	68ba      	ldr	r2, [r7, #8]
 801520a:	4413      	add	r3, r2
 801520c:	89fa      	ldrh	r2, [r7, #14]
 801520e:	b2d2      	uxtb	r2, r2
 8015210:	701a      	strb	r2, [r3, #0]
}
 8015212:	bf00      	nop
 8015214:	3714      	adds	r7, #20
 8015216:	46bd      	mov	sp, r7
 8015218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	20000a48 	.word	0x20000a48
 8015224:	20000274 	.word	0x20000274
 8015228:	20000008 	.word	0x20000008
 801522c:	2000269c 	.word	0x2000269c
 8015230:	2000269e 	.word	0x2000269e
 8015234:	2000091c 	.word	0x2000091c

08015238 <Auto_Fit>:

void Auto_Fit(void)
{
 8015238:	b590      	push	{r4, r7, lr}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
  char i,j,k=0;
 801523e:	2300      	movs	r3, #0
 8015240:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015242:	4b38      	ldr	r3, [pc, #224]	; (8015324 <Auto_Fit+0xec>)
 8015244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015248:	2b01      	cmp	r3, #1
 801524a:	f000 83de 	beq.w	8015a0a <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 801524e:	2300      	movs	r3, #0
 8015250:	71fb      	strb	r3, [r7, #7]
 8015252:	e098      	b.n	8015386 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015254:	4b34      	ldr	r3, [pc, #208]	; (8015328 <Auto_Fit+0xf0>)
 8015256:	f9b3 3000 	ldrsh.w	r3, [r3]
 801525a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801525e:	4a33      	ldr	r2, [pc, #204]	; (801532c <Auto_Fit+0xf4>)
 8015260:	6811      	ldr	r1, [r2, #0]
 8015262:	4a33      	ldr	r2, [pc, #204]	; (8015330 <Auto_Fit+0xf8>)
 8015264:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015268:	4610      	mov	r0, r2
 801526a:	4a32      	ldr	r2, [pc, #200]	; (8015334 <Auto_Fit+0xfc>)
 801526c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015270:	2a00      	cmp	r2, #0
 8015272:	bf14      	ite	ne
 8015274:	2201      	movne	r2, #1
 8015276:	2200      	moveq	r2, #0
 8015278:	b2d2      	uxtb	r2, r2
 801527a:	4402      	add	r2, r0
 801527c:	0052      	lsls	r2, r2, #1
 801527e:	440a      	add	r2, r1
 8015280:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015284:	0092      	lsls	r2, r2, #2
 8015286:	492c      	ldr	r1, [pc, #176]	; (8015338 <Auto_Fit+0x100>)
 8015288:	f9b1 1000 	ldrsh.w	r1, [r1]
 801528c:	4608      	mov	r0, r1
 801528e:	492b      	ldr	r1, [pc, #172]	; (801533c <Auto_Fit+0x104>)
 8015290:	5c09      	ldrb	r1, [r1, r0]
 8015292:	fb92 f2f1 	sdiv	r2, r2, r1
 8015296:	fb02 f303 	mul.w	r3, r2, r3
 801529a:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 801529c:	b29a      	uxth	r2, r3
 801529e:	4b28      	ldr	r3, [pc, #160]	; (8015340 <Auto_Fit+0x108>)
 80152a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152a4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80152a8:	4920      	ldr	r1, [pc, #128]	; (801532c <Auto_Fit+0xf4>)
 80152aa:	6808      	ldr	r0, [r1, #0]
 80152ac:	4920      	ldr	r1, [pc, #128]	; (8015330 <Auto_Fit+0xf8>)
 80152ae:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152b2:	460c      	mov	r4, r1
 80152b4:	491f      	ldr	r1, [pc, #124]	; (8015334 <Auto_Fit+0xfc>)
 80152b6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152ba:	2900      	cmp	r1, #0
 80152bc:	bf14      	ite	ne
 80152be:	2101      	movne	r1, #1
 80152c0:	2100      	moveq	r1, #0
 80152c2:	b2c9      	uxtb	r1, r1
 80152c4:	4421      	add	r1, r4
 80152c6:	0049      	lsls	r1, r1, #1
 80152c8:	4401      	add	r1, r0
 80152ca:	f9b1 1000 	ldrsh.w	r1, [r1]
 80152ce:	0089      	lsls	r1, r1, #2
 80152d0:	4819      	ldr	r0, [pc, #100]	; (8015338 <Auto_Fit+0x100>)
 80152d2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80152d6:	4604      	mov	r4, r0
 80152d8:	4818      	ldr	r0, [pc, #96]	; (801533c <Auto_Fit+0x104>)
 80152da:	5d00      	ldrb	r0, [r0, r4]
 80152dc:	fb91 f1f0 	sdiv	r1, r1, r0
 80152e0:	fb01 f303 	mul.w	r3, r1, r3
 80152e4:	131b      	asrs	r3, r3, #12
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	1ad3      	subs	r3, r2, r3
 80152ea:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80152ec:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 80152ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80152f2:	2b27      	cmp	r3, #39	; 0x27
 80152f4:	dc28      	bgt.n	8015348 <Auto_Fit+0x110>
 80152f6:	4b13      	ldr	r3, [pc, #76]	; (8015344 <Auto_Fit+0x10c>)
 80152f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	dd23      	ble.n	8015348 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015300:	4b10      	ldr	r3, [pc, #64]	; (8015344 <Auto_Fit+0x10c>)
 8015302:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015306:	b29b      	uxth	r3, r3
 8015308:	3b01      	subs	r3, #1
 801530a:	b29b      	uxth	r3, r3
 801530c:	b21a      	sxth	r2, r3
 801530e:	4b0d      	ldr	r3, [pc, #52]	; (8015344 <Auto_Fit+0x10c>)
 8015310:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015312:	4b0c      	ldr	r3, [pc, #48]	; (8015344 <Auto_Fit+0x10c>)
 8015314:	2264      	movs	r2, #100	; 0x64
 8015316:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015318:	f7ff faac 	bl	8014874 <WaveProcess>
        Update_Proc_All();
 801531c:	f7fe ff32 	bl	8014184 <Update_Proc_All>
 8015320:	e02b      	b.n	801537a <Auto_Fit+0x142>
 8015322:	bf00      	nop
 8015324:	20002656 	.word	0x20002656
 8015328:	2000266c 	.word	0x2000266c
 801532c:	20000558 	.word	0x20000558
 8015330:	20002692 	.word	0x20002692
 8015334:	2000268c 	.word	0x2000268c
 8015338:	20002690 	.word	0x20002690
 801533c:	2000053c 	.word	0x2000053c
 8015340:	2000266e 	.word	0x2000266e
 8015344:	20000274 	.word	0x20000274
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015348:	f9b7 3000 	ldrsh.w	r3, [r7]
 801534c:	2b6e      	cmp	r3, #110	; 0x6e
 801534e:	dd14      	ble.n	801537a <Auto_Fit+0x142>
 8015350:	4bba      	ldr	r3, [pc, #744]	; (801563c <Auto_Fit+0x404>)
 8015352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015356:	2b08      	cmp	r3, #8
 8015358:	dc0f      	bgt.n	801537a <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 801535a:	4bb8      	ldr	r3, [pc, #736]	; (801563c <Auto_Fit+0x404>)
 801535c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015360:	b29b      	uxth	r3, r3
 8015362:	3301      	adds	r3, #1
 8015364:	b29b      	uxth	r3, r3
 8015366:	b21a      	sxth	r2, r3
 8015368:	4bb4      	ldr	r3, [pc, #720]	; (801563c <Auto_Fit+0x404>)
 801536a:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 801536c:	4bb3      	ldr	r3, [pc, #716]	; (801563c <Auto_Fit+0x404>)
 801536e:	2264      	movs	r2, #100	; 0x64
 8015370:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015372:	f7ff fa7f 	bl	8014874 <WaveProcess>
        Update_Proc_All();
 8015376:	f7fe ff05 	bl	8014184 <Update_Proc_All>
      }
      HAL_Delay(50);
 801537a:	2032      	movs	r0, #50	; 0x32
 801537c:	f002 feda 	bl	8018134 <HAL_Delay>
    for(i=0;i<9;i++){
 8015380:	79fb      	ldrb	r3, [r7, #7]
 8015382:	3301      	adds	r3, #1
 8015384:	71fb      	strb	r3, [r7, #7]
 8015386:	79fb      	ldrb	r3, [r7, #7]
 8015388:	2b08      	cmp	r3, #8
 801538a:	f67f af63 	bls.w	8015254 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801538e:	4bac      	ldr	r3, [pc, #688]	; (8015640 <Auto_Fit+0x408>)
 8015390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015394:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015398:	4aaa      	ldr	r2, [pc, #680]	; (8015644 <Auto_Fit+0x40c>)
 801539a:	6811      	ldr	r1, [r2, #0]
 801539c:	4aaa      	ldr	r2, [pc, #680]	; (8015648 <Auto_Fit+0x410>)
 801539e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153a2:	4610      	mov	r0, r2
 80153a4:	4aa9      	ldr	r2, [pc, #676]	; (801564c <Auto_Fit+0x414>)
 80153a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153aa:	2a00      	cmp	r2, #0
 80153ac:	bf14      	ite	ne
 80153ae:	2201      	movne	r2, #1
 80153b0:	2200      	moveq	r2, #0
 80153b2:	b2d2      	uxtb	r2, r2
 80153b4:	4402      	add	r2, r0
 80153b6:	0052      	lsls	r2, r2, #1
 80153b8:	440a      	add	r2, r1
 80153ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80153be:	0092      	lsls	r2, r2, #2
 80153c0:	49a3      	ldr	r1, [pc, #652]	; (8015650 <Auto_Fit+0x418>)
 80153c2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153c6:	4608      	mov	r0, r1
 80153c8:	49a2      	ldr	r1, [pc, #648]	; (8015654 <Auto_Fit+0x41c>)
 80153ca:	5c09      	ldrb	r1, [r1, r0]
 80153cc:	fb92 f2f1 	sdiv	r2, r2, r1
 80153d0:	fb02 f303 	mul.w	r3, r2, r3
 80153d4:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 80153d6:	4ba0      	ldr	r3, [pc, #640]	; (8015658 <Auto_Fit+0x420>)
 80153d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153dc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153e0:	4998      	ldr	r1, [pc, #608]	; (8015644 <Auto_Fit+0x40c>)
 80153e2:	6808      	ldr	r0, [r1, #0]
 80153e4:	4998      	ldr	r1, [pc, #608]	; (8015648 <Auto_Fit+0x410>)
 80153e6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153ea:	460c      	mov	r4, r1
 80153ec:	4997      	ldr	r1, [pc, #604]	; (801564c <Auto_Fit+0x414>)
 80153ee:	f9b1 1000 	ldrsh.w	r1, [r1]
 80153f2:	2900      	cmp	r1, #0
 80153f4:	bf14      	ite	ne
 80153f6:	2101      	movne	r1, #1
 80153f8:	2100      	moveq	r1, #0
 80153fa:	b2c9      	uxtb	r1, r1
 80153fc:	4421      	add	r1, r4
 80153fe:	0049      	lsls	r1, r1, #1
 8015400:	4401      	add	r1, r0
 8015402:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015406:	0089      	lsls	r1, r1, #2
 8015408:	4891      	ldr	r0, [pc, #580]	; (8015650 <Auto_Fit+0x418>)
 801540a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801540e:	4604      	mov	r4, r0
 8015410:	4890      	ldr	r0, [pc, #576]	; (8015654 <Auto_Fit+0x41c>)
 8015412:	5d00      	ldrb	r0, [r0, r4]
 8015414:	fb91 f1f0 	sdiv	r1, r1, r0
 8015418:	fb01 f303 	mul.w	r3, r1, r3
 801541c:	131b      	asrs	r3, r3, #12
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	2b00      	cmp	r3, #0
 8015422:	da00      	bge.n	8015426 <Auto_Fit+0x1ee>
 8015424:	3303      	adds	r3, #3
 8015426:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015428:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 801542a:	4b84      	ldr	r3, [pc, #528]	; (801563c <Auto_Fit+0x404>)
 801542c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015430:	4618      	mov	r0, r3
 8015432:	4b8a      	ldr	r3, [pc, #552]	; (801565c <Auto_Fit+0x424>)
 8015434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015438:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801543c:	4a81      	ldr	r2, [pc, #516]	; (8015644 <Auto_Fit+0x40c>)
 801543e:	6811      	ldr	r1, [r2, #0]
 8015440:	4a81      	ldr	r2, [pc, #516]	; (8015648 <Auto_Fit+0x410>)
 8015442:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015446:	4614      	mov	r4, r2
 8015448:	4a80      	ldr	r2, [pc, #512]	; (801564c <Auto_Fit+0x414>)
 801544a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801544e:	2a00      	cmp	r2, #0
 8015450:	bf14      	ite	ne
 8015452:	2201      	movne	r2, #1
 8015454:	2200      	moveq	r2, #0
 8015456:	b2d2      	uxtb	r2, r2
 8015458:	4422      	add	r2, r4
 801545a:	0052      	lsls	r2, r2, #1
 801545c:	440a      	add	r2, r1
 801545e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015462:	0092      	lsls	r2, r2, #2
 8015464:	497a      	ldr	r1, [pc, #488]	; (8015650 <Auto_Fit+0x418>)
 8015466:	f9b1 1000 	ldrsh.w	r1, [r1]
 801546a:	460c      	mov	r4, r1
 801546c:	4979      	ldr	r1, [pc, #484]	; (8015654 <Auto_Fit+0x41c>)
 801546e:	5d09      	ldrb	r1, [r1, r4]
 8015470:	fb92 f2f1 	sdiv	r2, r2, r1
 8015474:	fb02 f303 	mul.w	r3, r2, r3
 8015478:	131b      	asrs	r3, r3, #12
 801547a:	3364      	adds	r3, #100	; 0x64
 801547c:	4a6f      	ldr	r2, [pc, #444]	; (801563c <Auto_Fit+0x404>)
 801547e:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015482:	1a9a      	subs	r2, r3, r2
 8015484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015488:	4413      	add	r3, r2
 801548a:	4298      	cmp	r0, r3
 801548c:	dc32      	bgt.n	80154f4 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 801548e:	4b6b      	ldr	r3, [pc, #428]	; (801563c <Auto_Fit+0x404>)
 8015490:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015494:	4618      	mov	r0, r3
 8015496:	4b71      	ldr	r3, [pc, #452]	; (801565c <Auto_Fit+0x424>)
 8015498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801549c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80154a0:	4a68      	ldr	r2, [pc, #416]	; (8015644 <Auto_Fit+0x40c>)
 80154a2:	6811      	ldr	r1, [r2, #0]
 80154a4:	4a68      	ldr	r2, [pc, #416]	; (8015648 <Auto_Fit+0x410>)
 80154a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154aa:	4614      	mov	r4, r2
 80154ac:	4a67      	ldr	r2, [pc, #412]	; (801564c <Auto_Fit+0x414>)
 80154ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	bf14      	ite	ne
 80154b6:	2201      	movne	r2, #1
 80154b8:	2200      	moveq	r2, #0
 80154ba:	b2d2      	uxtb	r2, r2
 80154bc:	4422      	add	r2, r4
 80154be:	0052      	lsls	r2, r2, #1
 80154c0:	440a      	add	r2, r1
 80154c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80154c6:	0092      	lsls	r2, r2, #2
 80154c8:	4961      	ldr	r1, [pc, #388]	; (8015650 <Auto_Fit+0x418>)
 80154ca:	f9b1 1000 	ldrsh.w	r1, [r1]
 80154ce:	460c      	mov	r4, r1
 80154d0:	4960      	ldr	r1, [pc, #384]	; (8015654 <Auto_Fit+0x41c>)
 80154d2:	5d09      	ldrb	r1, [r1, r4]
 80154d4:	fb92 f2f1 	sdiv	r2, r2, r1
 80154d8:	fb02 f303 	mul.w	r3, r2, r3
 80154dc:	131b      	asrs	r3, r3, #12
 80154de:	3364      	adds	r3, #100	; 0x64
 80154e0:	4a56      	ldr	r2, [pc, #344]	; (801563c <Auto_Fit+0x404>)
 80154e2:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80154e6:	1a9a      	subs	r2, r3, r2
 80154e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154ec:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 80154ee:	4298      	cmp	r0, r3
 80154f0:	f280 808e 	bge.w	8015610 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 80154f4:	4b59      	ldr	r3, [pc, #356]	; (801565c <Auto_Fit+0x424>)
 80154f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154fa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80154fe:	4a51      	ldr	r2, [pc, #324]	; (8015644 <Auto_Fit+0x40c>)
 8015500:	6811      	ldr	r1, [r2, #0]
 8015502:	4a51      	ldr	r2, [pc, #324]	; (8015648 <Auto_Fit+0x410>)
 8015504:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015508:	4610      	mov	r0, r2
 801550a:	4a50      	ldr	r2, [pc, #320]	; (801564c <Auto_Fit+0x414>)
 801550c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015510:	2a00      	cmp	r2, #0
 8015512:	bf14      	ite	ne
 8015514:	2201      	movne	r2, #1
 8015516:	2200      	moveq	r2, #0
 8015518:	b2d2      	uxtb	r2, r2
 801551a:	4402      	add	r2, r0
 801551c:	0052      	lsls	r2, r2, #1
 801551e:	440a      	add	r2, r1
 8015520:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015524:	0092      	lsls	r2, r2, #2
 8015526:	494a      	ldr	r1, [pc, #296]	; (8015650 <Auto_Fit+0x418>)
 8015528:	f9b1 1000 	ldrsh.w	r1, [r1]
 801552c:	4608      	mov	r0, r1
 801552e:	4949      	ldr	r1, [pc, #292]	; (8015654 <Auto_Fit+0x41c>)
 8015530:	5c09      	ldrb	r1, [r1, r0]
 8015532:	fb92 f2f1 	sdiv	r2, r2, r1
 8015536:	fb02 f303 	mul.w	r3, r2, r3
 801553a:	131b      	asrs	r3, r3, #12
 801553c:	3364      	adds	r3, #100	; 0x64
 801553e:	4a3f      	ldr	r2, [pc, #252]	; (801563c <Auto_Fit+0x404>)
 8015540:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015544:	1a9b      	subs	r3, r3, r2
 8015546:	330f      	adds	r3, #15
 8015548:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 801554c:	db5c      	blt.n	8015608 <Auto_Fit+0x3d0>
 801554e:	4b43      	ldr	r3, [pc, #268]	; (801565c <Auto_Fit+0x424>)
 8015550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015554:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015558:	4a3a      	ldr	r2, [pc, #232]	; (8015644 <Auto_Fit+0x40c>)
 801555a:	6811      	ldr	r1, [r2, #0]
 801555c:	4a3a      	ldr	r2, [pc, #232]	; (8015648 <Auto_Fit+0x410>)
 801555e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015562:	4610      	mov	r0, r2
 8015564:	4a39      	ldr	r2, [pc, #228]	; (801564c <Auto_Fit+0x414>)
 8015566:	f9b2 2000 	ldrsh.w	r2, [r2]
 801556a:	2a00      	cmp	r2, #0
 801556c:	bf14      	ite	ne
 801556e:	2201      	movne	r2, #1
 8015570:	2200      	moveq	r2, #0
 8015572:	b2d2      	uxtb	r2, r2
 8015574:	4402      	add	r2, r0
 8015576:	0052      	lsls	r2, r2, #1
 8015578:	440a      	add	r2, r1
 801557a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801557e:	0092      	lsls	r2, r2, #2
 8015580:	4933      	ldr	r1, [pc, #204]	; (8015650 <Auto_Fit+0x418>)
 8015582:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015586:	4608      	mov	r0, r1
 8015588:	4932      	ldr	r1, [pc, #200]	; (8015654 <Auto_Fit+0x41c>)
 801558a:	5c09      	ldrb	r1, [r1, r0]
 801558c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015590:	fb02 f303 	mul.w	r3, r2, r3
 8015594:	131b      	asrs	r3, r3, #12
 8015596:	3364      	adds	r3, #100	; 0x64
 8015598:	4a28      	ldr	r2, [pc, #160]	; (801563c <Auto_Fit+0x404>)
 801559a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 801559e:	1a9b      	subs	r3, r3, r2
 80155a0:	330f      	adds	r3, #15
 80155a2:	2bc2      	cmp	r3, #194	; 0xc2
 80155a4:	dc30      	bgt.n	8015608 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 80155a6:	4b2d      	ldr	r3, [pc, #180]	; (801565c <Auto_Fit+0x424>)
 80155a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80155b0:	4a24      	ldr	r2, [pc, #144]	; (8015644 <Auto_Fit+0x40c>)
 80155b2:	6811      	ldr	r1, [r2, #0]
 80155b4:	4a24      	ldr	r2, [pc, #144]	; (8015648 <Auto_Fit+0x410>)
 80155b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155ba:	4610      	mov	r0, r2
 80155bc:	4a23      	ldr	r2, [pc, #140]	; (801564c <Auto_Fit+0x414>)
 80155be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155c2:	2a00      	cmp	r2, #0
 80155c4:	bf14      	ite	ne
 80155c6:	2201      	movne	r2, #1
 80155c8:	2200      	moveq	r2, #0
 80155ca:	b2d2      	uxtb	r2, r2
 80155cc:	4402      	add	r2, r0
 80155ce:	0052      	lsls	r2, r2, #1
 80155d0:	440a      	add	r2, r1
 80155d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80155d6:	0092      	lsls	r2, r2, #2
 80155d8:	491d      	ldr	r1, [pc, #116]	; (8015650 <Auto_Fit+0x418>)
 80155da:	f9b1 1000 	ldrsh.w	r1, [r1]
 80155de:	4608      	mov	r0, r1
 80155e0:	491c      	ldr	r1, [pc, #112]	; (8015654 <Auto_Fit+0x41c>)
 80155e2:	5c09      	ldrb	r1, [r1, r0]
 80155e4:	fb92 f2f1 	sdiv	r2, r2, r1
 80155e8:	fb02 f303 	mul.w	r3, r2, r3
 80155ec:	131b      	asrs	r3, r3, #12
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	4b12      	ldr	r3, [pc, #72]	; (801563c <Auto_Fit+0x404>)
 80155f2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	1ad3      	subs	r3, r2, r3
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	3373      	adds	r3, #115	; 0x73
 80155fe:	b29b      	uxth	r3, r3
 8015600:	b21a      	sxth	r2, r3
 8015602:	4b0e      	ldr	r3, [pc, #56]	; (801563c <Auto_Fit+0x404>)
 8015604:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015608:	f7ff f934 	bl	8014874 <WaveProcess>
           Update_Proc_All();
 801560c:	f7fe fdba 	bl	8014184 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015610:	4b13      	ldr	r3, [pc, #76]	; (8015660 <Auto_Fit+0x428>)
 8015612:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015616:	b29a      	uxth	r2, r3
 8015618:	4b08      	ldr	r3, [pc, #32]	; (801563c <Auto_Fit+0x404>)
 801561a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801561e:	b29b      	uxth	r3, r3
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	b29b      	uxth	r3, r3
 8015624:	4413      	add	r3, r2
 8015626:	b29b      	uxth	r3, r3
 8015628:	b21a      	sxth	r2, r3
 801562a:	4b0d      	ldr	r3, [pc, #52]	; (8015660 <Auto_Fit+0x428>)
 801562c:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 801562e:	4b03      	ldr	r3, [pc, #12]	; (801563c <Auto_Fit+0x404>)
 8015630:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015634:	f043 0320 	orr.w	r3, r3, #32
 8015638:	b2da      	uxtb	r2, r3
 801563a:	e013      	b.n	8015664 <Auto_Fit+0x42c>
 801563c:	20000274 	.word	0x20000274
 8015640:	2000266c 	.word	0x2000266c
 8015644:	20000558 	.word	0x20000558
 8015648:	20002692 	.word	0x20002692
 801564c:	2000268c 	.word	0x2000268c
 8015650:	20002690 	.word	0x20002690
 8015654:	2000053c 	.word	0x2000053c
 8015658:	2000266e 	.word	0x2000266e
 801565c:	20002670 	.word	0x20002670
 8015660:	20000140 	.word	0x20000140
 8015664:	4ba7      	ldr	r3, [pc, #668]	; (8015904 <Auto_Fit+0x6cc>)
 8015666:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 801566a:	f7fc fa81 	bl	8011b70 <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 801566e:	2064      	movs	r0, #100	; 0x64
 8015670:	f002 fd60 	bl	8018134 <HAL_Delay>

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015674:	4ba4      	ldr	r3, [pc, #656]	; (8015908 <Auto_Fit+0x6d0>)
 8015676:	f9b3 3000 	ldrsh.w	r3, [r3]
 801567a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801567e:	4aa3      	ldr	r2, [pc, #652]	; (801590c <Auto_Fit+0x6d4>)
 8015680:	6811      	ldr	r1, [r2, #0]
 8015682:	4aa3      	ldr	r2, [pc, #652]	; (8015910 <Auto_Fit+0x6d8>)
 8015684:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015688:	4610      	mov	r0, r2
 801568a:	4aa2      	ldr	r2, [pc, #648]	; (8015914 <Auto_Fit+0x6dc>)
 801568c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015690:	2a00      	cmp	r2, #0
 8015692:	bf14      	ite	ne
 8015694:	2201      	movne	r2, #1
 8015696:	2200      	moveq	r2, #0
 8015698:	b2d2      	uxtb	r2, r2
 801569a:	4402      	add	r2, r0
 801569c:	0052      	lsls	r2, r2, #1
 801569e:	440a      	add	r2, r1
 80156a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156a4:	0092      	lsls	r2, r2, #2
 80156a6:	499c      	ldr	r1, [pc, #624]	; (8015918 <Auto_Fit+0x6e0>)
 80156a8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80156ac:	4608      	mov	r0, r1
 80156ae:	499b      	ldr	r1, [pc, #620]	; (801591c <Auto_Fit+0x6e4>)
 80156b0:	5c09      	ldrb	r1, [r1, r0]
 80156b2:	fb92 f2f1 	sdiv	r2, r2, r1
 80156b6:	fb02 f303 	mul.w	r3, r2, r3
 80156ba:	131b      	asrs	r3, r3, #12
 80156bc:	3364      	adds	r3, #100	; 0x64
 80156be:	4a91      	ldr	r2, [pc, #580]	; (8015904 <Auto_Fit+0x6cc>)
 80156c0:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80156c4:	1a9b      	subs	r3, r3, r2
 80156c6:	2b0a      	cmp	r3, #10
 80156c8:	dd76      	ble.n	80157b8 <Auto_Fit+0x580>
      WaveProcess();
 80156ca:	f7ff f8d3 	bl	8014874 <WaveProcess>
      Update_Proc_All();
 80156ce:	f7fe fd59 	bl	8014184 <Update_Proc_All>
      HAL_Delay(100);
 80156d2:	2064      	movs	r0, #100	; 0x64
 80156d4:	f002 fd2e 	bl	8018134 <HAL_Delay>
      for(i=0;i<9;i++){
 80156d8:	2300      	movs	r3, #0
 80156da:	71fb      	strb	r3, [r7, #7]
 80156dc:	e068      	b.n	80157b0 <Auto_Fit+0x578>
        WaveProcess();
 80156de:	f7ff f8c9 	bl	8014874 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 80156e2:	4b8f      	ldr	r3, [pc, #572]	; (8015920 <Auto_Fit+0x6e8>)
 80156e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80156ec:	4a87      	ldr	r2, [pc, #540]	; (801590c <Auto_Fit+0x6d4>)
 80156ee:	6811      	ldr	r1, [r2, #0]
 80156f0:	4a87      	ldr	r2, [pc, #540]	; (8015910 <Auto_Fit+0x6d8>)
 80156f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156f6:	4610      	mov	r0, r2
 80156f8:	4a86      	ldr	r2, [pc, #536]	; (8015914 <Auto_Fit+0x6dc>)
 80156fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80156fe:	2a00      	cmp	r2, #0
 8015700:	bf14      	ite	ne
 8015702:	2201      	movne	r2, #1
 8015704:	2200      	moveq	r2, #0
 8015706:	b2d2      	uxtb	r2, r2
 8015708:	4402      	add	r2, r0
 801570a:	0052      	lsls	r2, r2, #1
 801570c:	440a      	add	r2, r1
 801570e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015712:	0092      	lsls	r2, r2, #2
 8015714:	4980      	ldr	r1, [pc, #512]	; (8015918 <Auto_Fit+0x6e0>)
 8015716:	f9b1 1000 	ldrsh.w	r1, [r1]
 801571a:	4608      	mov	r0, r1
 801571c:	497f      	ldr	r1, [pc, #508]	; (801591c <Auto_Fit+0x6e4>)
 801571e:	5c09      	ldrb	r1, [r1, r0]
 8015720:	fb92 f2f1 	sdiv	r2, r2, r1
 8015724:	fb02 f303 	mul.w	r3, r2, r3
 8015728:	131b      	asrs	r3, r3, #12
 801572a:	b29a      	uxth	r2, r3
 801572c:	4b75      	ldr	r3, [pc, #468]	; (8015904 <Auto_Fit+0x6cc>)
 801572e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015732:	b29b      	uxth	r3, r3
 8015734:	1ad3      	subs	r3, r2, r3
 8015736:	b29b      	uxth	r3, r3
 8015738:	3364      	adds	r3, #100	; 0x64
 801573a:	b29b      	uxth	r3, r3
 801573c:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 801573e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015742:	2b27      	cmp	r3, #39	; 0x27
 8015744:	dc15      	bgt.n	8015772 <Auto_Fit+0x53a>
 8015746:	4b6f      	ldr	r3, [pc, #444]	; (8015904 <Auto_Fit+0x6cc>)
 8015748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801574c:	2b02      	cmp	r3, #2
 801574e:	dd10      	ble.n	8015772 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015750:	4b6c      	ldr	r3, [pc, #432]	; (8015904 <Auto_Fit+0x6cc>)
 8015752:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015756:	b29b      	uxth	r3, r3
 8015758:	3b01      	subs	r3, #1
 801575a:	b29b      	uxth	r3, r3
 801575c:	b21a      	sxth	r2, r3
 801575e:	4b69      	ldr	r3, [pc, #420]	; (8015904 <Auto_Fit+0x6cc>)
 8015760:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015762:	4b68      	ldr	r3, [pc, #416]	; (8015904 <Auto_Fit+0x6cc>)
 8015764:	2264      	movs	r2, #100	; 0x64
 8015766:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015768:	f7ff f884 	bl	8014874 <WaveProcess>
          Update_Proc_All();
 801576c:	f7fe fd0a 	bl	8014184 <Update_Proc_All>
 8015770:	e018      	b.n	80157a4 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015772:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015776:	2b64      	cmp	r3, #100	; 0x64
 8015778:	dd14      	ble.n	80157a4 <Auto_Fit+0x56c>
 801577a:	4b62      	ldr	r3, [pc, #392]	; (8015904 <Auto_Fit+0x6cc>)
 801577c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015780:	2b08      	cmp	r3, #8
 8015782:	dc0f      	bgt.n	80157a4 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015784:	4b5f      	ldr	r3, [pc, #380]	; (8015904 <Auto_Fit+0x6cc>)
 8015786:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801578a:	b29b      	uxth	r3, r3
 801578c:	3301      	adds	r3, #1
 801578e:	b29b      	uxth	r3, r3
 8015790:	b21a      	sxth	r2, r3
 8015792:	4b5c      	ldr	r3, [pc, #368]	; (8015904 <Auto_Fit+0x6cc>)
 8015794:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015796:	4b5b      	ldr	r3, [pc, #364]	; (8015904 <Auto_Fit+0x6cc>)
 8015798:	2264      	movs	r2, #100	; 0x64
 801579a:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 801579c:	f7ff f86a 	bl	8014874 <WaveProcess>
          Update_Proc_All();
 80157a0:	f7fe fcf0 	bl	8014184 <Update_Proc_All>
        }
        HAL_Delay(50);
 80157a4:	2032      	movs	r0, #50	; 0x32
 80157a6:	f002 fcc5 	bl	8018134 <HAL_Delay>
      for(i=0;i<9;i++){
 80157aa:	79fb      	ldrb	r3, [r7, #7]
 80157ac:	3301      	adds	r3, #1
 80157ae:	71fb      	strb	r3, [r7, #7]
 80157b0:	79fb      	ldrb	r3, [r7, #7]
 80157b2:	2b08      	cmp	r3, #8
 80157b4:	d993      	bls.n	80156de <Auto_Fit+0x4a6>
 80157b6:	e054      	b.n	8015862 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80157b8:	4b59      	ldr	r3, [pc, #356]	; (8015920 <Auto_Fit+0x6e8>)
 80157ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157be:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80157c2:	4a52      	ldr	r2, [pc, #328]	; (801590c <Auto_Fit+0x6d4>)
 80157c4:	6811      	ldr	r1, [r2, #0]
 80157c6:	4a52      	ldr	r2, [pc, #328]	; (8015910 <Auto_Fit+0x6d8>)
 80157c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157cc:	4610      	mov	r0, r2
 80157ce:	4a51      	ldr	r2, [pc, #324]	; (8015914 <Auto_Fit+0x6dc>)
 80157d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157d4:	2a00      	cmp	r2, #0
 80157d6:	bf14      	ite	ne
 80157d8:	2201      	movne	r2, #1
 80157da:	2200      	moveq	r2, #0
 80157dc:	b2d2      	uxtb	r2, r2
 80157de:	4402      	add	r2, r0
 80157e0:	0052      	lsls	r2, r2, #1
 80157e2:	440a      	add	r2, r1
 80157e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80157e8:	0092      	lsls	r2, r2, #2
 80157ea:	494b      	ldr	r1, [pc, #300]	; (8015918 <Auto_Fit+0x6e0>)
 80157ec:	f9b1 1000 	ldrsh.w	r1, [r1]
 80157f0:	4608      	mov	r0, r1
 80157f2:	494a      	ldr	r1, [pc, #296]	; (801591c <Auto_Fit+0x6e4>)
 80157f4:	5c09      	ldrb	r1, [r1, r0]
 80157f6:	fb92 f2f1 	sdiv	r2, r2, r1
 80157fa:	fb02 f303 	mul.w	r3, r2, r3
 80157fe:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8015800:	4b48      	ldr	r3, [pc, #288]	; (8015924 <Auto_Fit+0x6ec>)
 8015802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015806:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801580a:	4940      	ldr	r1, [pc, #256]	; (801590c <Auto_Fit+0x6d4>)
 801580c:	6808      	ldr	r0, [r1, #0]
 801580e:	4940      	ldr	r1, [pc, #256]	; (8015910 <Auto_Fit+0x6d8>)
 8015810:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015814:	460c      	mov	r4, r1
 8015816:	493f      	ldr	r1, [pc, #252]	; (8015914 <Auto_Fit+0x6dc>)
 8015818:	f9b1 1000 	ldrsh.w	r1, [r1]
 801581c:	2900      	cmp	r1, #0
 801581e:	bf14      	ite	ne
 8015820:	2101      	movne	r1, #1
 8015822:	2100      	moveq	r1, #0
 8015824:	b2c9      	uxtb	r1, r1
 8015826:	4421      	add	r1, r4
 8015828:	0049      	lsls	r1, r1, #1
 801582a:	4401      	add	r1, r0
 801582c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015830:	0089      	lsls	r1, r1, #2
 8015832:	4839      	ldr	r0, [pc, #228]	; (8015918 <Auto_Fit+0x6e0>)
 8015834:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015838:	4604      	mov	r4, r0
 801583a:	4838      	ldr	r0, [pc, #224]	; (801591c <Auto_Fit+0x6e4>)
 801583c:	5d00      	ldrb	r0, [r0, r4]
 801583e:	fb91 f1f0 	sdiv	r1, r1, r0
 8015842:	fb01 f303 	mul.w	r3, r1, r3
 8015846:	131b      	asrs	r3, r3, #12
 8015848:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801584a:	2b09      	cmp	r3, #9
 801584c:	dc09      	bgt.n	8015862 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 801584e:	4b2d      	ldr	r3, [pc, #180]	; (8015904 <Auto_Fit+0x6cc>)
 8015850:	2207      	movs	r2, #7
 8015852:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8015854:	f7ff f80e 	bl	8014874 <WaveProcess>
        Update_Proc_All();
 8015858:	f7fe fc94 	bl	8014184 <Update_Proc_All>
        HAL_Delay(50);
 801585c:	2032      	movs	r0, #50	; 0x32
 801585e:	f002 fc69 	bl	8018134 <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015862:	4b2f      	ldr	r3, [pc, #188]	; (8015920 <Auto_Fit+0x6e8>)
 8015864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015868:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801586c:	4a27      	ldr	r2, [pc, #156]	; (801590c <Auto_Fit+0x6d4>)
 801586e:	6811      	ldr	r1, [r2, #0]
 8015870:	4a27      	ldr	r2, [pc, #156]	; (8015910 <Auto_Fit+0x6d8>)
 8015872:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015876:	4610      	mov	r0, r2
 8015878:	4a26      	ldr	r2, [pc, #152]	; (8015914 <Auto_Fit+0x6dc>)
 801587a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801587e:	2a00      	cmp	r2, #0
 8015880:	bf14      	ite	ne
 8015882:	2201      	movne	r2, #1
 8015884:	2200      	moveq	r2, #0
 8015886:	b2d2      	uxtb	r2, r2
 8015888:	4402      	add	r2, r0
 801588a:	0052      	lsls	r2, r2, #1
 801588c:	440a      	add	r2, r1
 801588e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015892:	0092      	lsls	r2, r2, #2
 8015894:	4920      	ldr	r1, [pc, #128]	; (8015918 <Auto_Fit+0x6e0>)
 8015896:	f9b1 1000 	ldrsh.w	r1, [r1]
 801589a:	4608      	mov	r0, r1
 801589c:	491f      	ldr	r1, [pc, #124]	; (801591c <Auto_Fit+0x6e4>)
 801589e:	5c09      	ldrb	r1, [r1, r0]
 80158a0:	fb92 f2f1 	sdiv	r2, r2, r1
 80158a4:	fb02 f303 	mul.w	r3, r2, r3
 80158a8:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	4b1d      	ldr	r3, [pc, #116]	; (8015924 <Auto_Fit+0x6ec>)
 80158ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80158b6:	4915      	ldr	r1, [pc, #84]	; (801590c <Auto_Fit+0x6d4>)
 80158b8:	6808      	ldr	r0, [r1, #0]
 80158ba:	4915      	ldr	r1, [pc, #84]	; (8015910 <Auto_Fit+0x6d8>)
 80158bc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158c0:	460c      	mov	r4, r1
 80158c2:	4914      	ldr	r1, [pc, #80]	; (8015914 <Auto_Fit+0x6dc>)
 80158c4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158c8:	2900      	cmp	r1, #0
 80158ca:	bf14      	ite	ne
 80158cc:	2101      	movne	r1, #1
 80158ce:	2100      	moveq	r1, #0
 80158d0:	b2c9      	uxtb	r1, r1
 80158d2:	4421      	add	r1, r4
 80158d4:	0049      	lsls	r1, r1, #1
 80158d6:	4401      	add	r1, r0
 80158d8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80158dc:	0089      	lsls	r1, r1, #2
 80158de:	480e      	ldr	r0, [pc, #56]	; (8015918 <Auto_Fit+0x6e0>)
 80158e0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80158e4:	4604      	mov	r4, r0
 80158e6:	480d      	ldr	r0, [pc, #52]	; (801591c <Auto_Fit+0x6e4>)
 80158e8:	5d00      	ldrb	r0, [r0, r4]
 80158ea:	fb91 f1f0 	sdiv	r1, r1, r0
 80158ee:	fb01 f303 	mul.w	r3, r1, r3
 80158f2:	131b      	asrs	r3, r3, #12
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80158fa:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 80158fc:	2300      	movs	r3, #0
 80158fe:	71bb      	strb	r3, [r7, #6]
 8015900:	e06e      	b.n	80159e0 <Auto_Fit+0x7a8>
 8015902:	bf00      	nop
 8015904:	20000274 	.word	0x20000274
 8015908:	20002670 	.word	0x20002670
 801590c:	20000558 	.word	0x20000558
 8015910:	20002692 	.word	0x20002692
 8015914:	2000268c 	.word	0x2000268c
 8015918:	20002690 	.word	0x20002690
 801591c:	2000053c 	.word	0x2000053c
 8015920:	2000266c 	.word	0x2000266c
 8015924:	2000266e 	.word	0x2000266e
        WaveProcess();
 8015928:	f7fe ffa4 	bl	8014874 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 801592c:	797b      	ldrb	r3, [r7, #5]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d114      	bne.n	801595c <Auto_Fit+0x724>
 8015932:	4b38      	ldr	r3, [pc, #224]	; (8015a14 <Auto_Fit+0x7dc>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b3b      	cmp	r3, #59	; 0x3b
 8015938:	dc10      	bgt.n	801595c <Auto_Fit+0x724>
 801593a:	4b37      	ldr	r3, [pc, #220]	; (8015a18 <Auto_Fit+0x7e0>)
 801593c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015940:	2b05      	cmp	r3, #5
 8015942:	dd0b      	ble.n	801595c <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8015944:	2005      	movs	r0, #5
 8015946:	f7f6 fe99 	bl	800c67c <Set_Base>
          List[TIM_BASE].Val = 5;
 801594a:	4b33      	ldr	r3, [pc, #204]	; (8015a18 <Auto_Fit+0x7e0>)
 801594c:	2205      	movs	r2, #5
 801594e:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 8015950:	f7fe ff90 	bl	8014874 <WaveProcess>
          Update_Proc_All();
 8015954:	f7fe fc16 	bl	8014184 <Update_Proc_All>
          k=1;
 8015958:	2301      	movs	r3, #1
 801595a:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 801595c:	4b2d      	ldr	r3, [pc, #180]	; (8015a14 <Auto_Fit+0x7dc>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2bb4      	cmp	r3, #180	; 0xb4
 8015962:	dd1b      	ble.n	801599c <Auto_Fit+0x764>
 8015964:	4b2c      	ldr	r3, [pc, #176]	; (8015a18 <Auto_Fit+0x7e0>)
 8015966:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801596a:	2b02      	cmp	r3, #2
 801596c:	dd16      	ble.n	801599c <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 801596e:	4b2a      	ldr	r3, [pc, #168]	; (8015a18 <Auto_Fit+0x7e0>)
 8015970:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015974:	b29b      	uxth	r3, r3
 8015976:	3b01      	subs	r3, #1
 8015978:	b29b      	uxth	r3, r3
 801597a:	b21a      	sxth	r2, r3
 801597c:	4b26      	ldr	r3, [pc, #152]	; (8015a18 <Auto_Fit+0x7e0>)
 801597e:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8015980:	4b25      	ldr	r3, [pc, #148]	; (8015a18 <Auto_Fit+0x7e0>)
 8015982:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015986:	4618      	mov	r0, r3
 8015988:	f7f6 fe78 	bl	800c67c <Set_Base>
          WaveProcess();
 801598c:	f7fe ff72 	bl	8014874 <WaveProcess>
                 Update_Proc_All();
 8015990:	f7fe fbf8 	bl	8014184 <Update_Proc_All>
          HAL_Delay(50);
 8015994:	2032      	movs	r0, #50	; 0x32
 8015996:	f002 fbcd 	bl	8018134 <HAL_Delay>
 801599a:	e01e      	b.n	80159da <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 801599c:	4b1d      	ldr	r3, [pc, #116]	; (8015a14 <Auto_Fit+0x7dc>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b4f      	cmp	r3, #79	; 0x4f
 80159a2:	dc1a      	bgt.n	80159da <Auto_Fit+0x7a2>
 80159a4:	4b1c      	ldr	r3, [pc, #112]	; (8015a18 <Auto_Fit+0x7e0>)
 80159a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159aa:	2b0a      	cmp	r3, #10
 80159ac:	dc15      	bgt.n	80159da <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80159ae:	4b1a      	ldr	r3, [pc, #104]	; (8015a18 <Auto_Fit+0x7e0>)
 80159b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	3301      	adds	r3, #1
 80159b8:	b29b      	uxth	r3, r3
 80159ba:	b21a      	sxth	r2, r3
 80159bc:	4b16      	ldr	r3, [pc, #88]	; (8015a18 <Auto_Fit+0x7e0>)
 80159be:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80159c0:	4b15      	ldr	r3, [pc, #84]	; (8015a18 <Auto_Fit+0x7e0>)
 80159c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7f6 fe58 	bl	800c67c <Set_Base>
          WaveProcess();
 80159cc:	f7fe ff52 	bl	8014874 <WaveProcess>
                 Update_Proc_All();
 80159d0:	f7fe fbd8 	bl	8014184 <Update_Proc_All>
          HAL_Delay(50);
 80159d4:	2032      	movs	r0, #50	; 0x32
 80159d6:	f002 fbad 	bl	8018134 <HAL_Delay>
      for(j=0;j<11;j++){
 80159da:	79bb      	ldrb	r3, [r7, #6]
 80159dc:	3301      	adds	r3, #1
 80159de:	71bb      	strb	r3, [r7, #6]
 80159e0:	79bb      	ldrb	r3, [r7, #6]
 80159e2:	2b0a      	cmp	r3, #10
 80159e4:	d9a0      	bls.n	8015928 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 80159e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80159ea:	2b13      	cmp	r3, #19
 80159ec:	dc0b      	bgt.n	8015a06 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 80159ee:	4b0a      	ldr	r3, [pc, #40]	; (8015a18 <Auto_Fit+0x7e0>)
 80159f0:	2205      	movs	r2, #5
 80159f2:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80159f4:	4b08      	ldr	r3, [pc, #32]	; (8015a18 <Auto_Fit+0x7e0>)
 80159f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f6 fe3e 	bl	800c67c <Set_Base>
        HAL_Delay(50);
 8015a00:	2032      	movs	r0, #50	; 0x32
 8015a02:	f002 fb97 	bl	8018134 <HAL_Delay>
      }
       Update_Proc_All();
 8015a06:	f7fe fbbd 	bl	8014184 <Update_Proc_All>
  }
}
 8015a0a:	bf00      	nop
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd90      	pop	{r4, r7, pc}
 8015a12:	bf00      	nop
 8015a14:	20002684 	.word	0x20002684
 8015a18:	20000274 	.word	0x20000274

08015a1c <Init_Touch>:

unsigned char val[2]; //input buffer

// initialize touch screen
void Init_Touch(void)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	af00      	add	r7, sp, #0
	Touch_SPI();
 8015a20:	f000 f810 	bl	8015a44 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8015a24:	2200      	movs	r2, #0
 8015a26:	2140      	movs	r1, #64	; 0x40
 8015a28:	4805      	ldr	r0, [pc, #20]	; (8015a40 <Init_Touch+0x24>)
 8015a2a:	f003 ff61 	bl	80198f0 <HAL_GPIO_WritePin>
// not needed yet
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015a2e:	2201      	movs	r2, #1
 8015a30:	2140      	movs	r1, #64	; 0x40
 8015a32:	4803      	ldr	r0, [pc, #12]	; (8015a40 <Init_Touch+0x24>)
 8015a34:	f003 ff5c 	bl	80198f0 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015a38:	f000 f814 	bl	8015a64 <LCD_SPI>
}
 8015a3c:	bf00      	nop
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	40020400 	.word	0x40020400

08015a44 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3);  switch on the fly
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8015a48:	4b05      	ldr	r3, [pc, #20]	; (8015a60 <Touch_SPI+0x1c>)
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 8015a4e:	4b04      	ldr	r3, [pc, #16]	; (8015a60 <Touch_SPI+0x1c>)
 8015a50:	2218      	movs	r2, #24
 8015a52:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a54:	4802      	ldr	r0, [pc, #8]	; (8015a60 <Touch_SPI+0x1c>)
 8015a56:	f006 fb0f 	bl	801c078 <HAL_SPI_Init>
}
 8015a5a:	bf00      	nop
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	20006868 	.word	0x20006868

08015a64 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	af00      	add	r7, sp, #0
//	HAL_SPI_DeInit(&hspi3); switch on fly
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8015a68:	4b05      	ldr	r3, [pc, #20]	; (8015a80 <LCD_SPI+0x1c>)
 8015a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a6e:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8015a70:	4b03      	ldr	r3, [pc, #12]	; (8015a80 <LCD_SPI+0x1c>)
 8015a72:	2210      	movs	r2, #16
 8015a74:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8015a76:	4802      	ldr	r0, [pc, #8]	; (8015a80 <LCD_SPI+0x1c>)
 8015a78:	f006 fafe 	bl	801c078 <HAL_SPI_Init>
}
 8015a7c:	bf00      	nop
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	20006868 	.word	0x20006868

08015a84 <read_2046>:

short read_2046( unsigned char cmd )  //internal value read
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b084      	sub	sp, #16
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	71fb      	strb	r3, [r7, #7]
	short xyz;

	HAL_SPI_Transmit(&hspi3, &cmd, 1, 1);// timeout 1 ms
 8015a8e:	1df9      	adds	r1, r7, #7
 8015a90:	2301      	movs	r3, #1
 8015a92:	2201      	movs	r2, #1
 8015a94:	480e      	ldr	r0, [pc, #56]	; (8015ad0 <read_2046+0x4c>)
 8015a96:	f006 fb78 	bl	801c18a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,val,2,1);   // read value
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	2202      	movs	r2, #2
 8015a9e:	490d      	ldr	r1, [pc, #52]	; (8015ad4 <read_2046+0x50>)
 8015aa0:	480b      	ldr	r0, [pc, #44]	; (8015ad0 <read_2046+0x4c>)
 8015aa2:	f006 fcae 	bl	801c402 <HAL_SPI_Receive>

	xyz = (val[0] <<8) +val[1];
 8015aa6:	4b0b      	ldr	r3, [pc, #44]	; (8015ad4 <read_2046+0x50>)
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	021b      	lsls	r3, r3, #8
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	4b08      	ldr	r3, [pc, #32]	; (8015ad4 <read_2046+0x50>)
 8015ab2:	785b      	ldrb	r3, [r3, #1]
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	4413      	add	r3, r2
 8015ab8:	b29b      	uxth	r3, r3
 8015aba:	81fb      	strh	r3, [r7, #14]
	xyz = xyz >> 3;  //12 bit value
 8015abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015ac0:	10db      	asrs	r3, r3, #3
 8015ac2:	81fb      	strh	r3, [r7, #14]
	return xyz;
 8015ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	3710      	adds	r7, #16
 8015acc:	46bd      	mov	sp, r7
 8015ace:	bd80      	pop	{r7, pc}
 8015ad0:	20006868 	.word	0x20006868
 8015ad4:	200066a8 	.word	0x200066a8

08015ad8 <Touch_Read>:

char Touch_Read(short *x, short*y)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
	short z1,z2;
	short press;
	press =0;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	81fb      	strh	r3, [r7, #14]

	Touch_SPI();
 8015ae6:	f7ff ffad 	bl	8015a44 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8015aea:	2200      	movs	r2, #0
 8015aec:	2140      	movs	r1, #64	; 0x40
 8015aee:	481f      	ldr	r0, [pc, #124]	; (8015b6c <Touch_Read+0x94>)
 8015af0:	f003 fefe 	bl	80198f0 <HAL_GPIO_WritePin>

	z1 = read_2046(0xB0);  //read z1 cmd 8+3
 8015af4:	20b0      	movs	r0, #176	; 0xb0
 8015af6:	f7ff ffc5 	bl	8015a84 <read_2046>
 8015afa:	4603      	mov	r3, r0
 8015afc:	81bb      	strh	r3, [r7, #12]
	z2 = read_2046(0xC0);  //read z2 cmd 8+4
 8015afe:	20c0      	movs	r0, #192	; 0xc0
 8015b00:	f7ff ffc0 	bl	8015a84 <read_2046>
 8015b04:	4603      	mov	r3, r0
 8015b06:	817b      	strh	r3, [r7, #10]
	press = z1 + 4095;
 8015b08:	89bb      	ldrh	r3, [r7, #12]
 8015b0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	81fb      	strh	r3, [r7, #14]
	press -= z2;
 8015b12:	89fa      	ldrh	r2, [r7, #14]
 8015b14:	897b      	ldrh	r3, [r7, #10]
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	81fb      	strh	r3, [r7, #14]

	if( press >= 400 )
 8015b1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8015b24:	db0d      	blt.n	8015b42 <Touch_Read+0x6a>
	{
		*x = read_2046(0xD0);  //read x cmd 8+5
 8015b26:	20d0      	movs	r0, #208	; 0xd0
 8015b28:	f7ff ffac 	bl	8015a84 <read_2046>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	461a      	mov	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	801a      	strh	r2, [r3, #0]
		*y = read_2046(0x90);  //read y cmd 8+1
 8015b34:	2090      	movs	r0, #144	; 0x90
 8015b36:	f7ff ffa5 	bl	8015a84 <read_2046>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 8015b42:	2201      	movs	r2, #1
 8015b44:	2140      	movs	r1, #64	; 0x40
 8015b46:	4809      	ldr	r0, [pc, #36]	; (8015b6c <Touch_Read+0x94>)
 8015b48:	f003 fed2 	bl	80198f0 <HAL_GPIO_WritePin>
	LCD_SPI();
 8015b4c:	f7ff ff8a 	bl	8015a64 <LCD_SPI>

	return (press<400)?0:1;
 8015b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b54:	f240 128f 	movw	r2, #399	; 0x18f
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	bfcc      	ite	gt
 8015b5c:	2301      	movgt	r3, #1
 8015b5e:	2300      	movle	r3, #0
 8015b60:	b2db      	uxtb	r3, r3
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3710      	adds	r7, #16
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	40020400 	.word	0x40020400

08015b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015b7e:	f002 fa67 	bl	8018050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015b82:	f001 f863 	bl	8016c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015b86:	f001 fc05 	bl	8017394 <MX_GPIO_Init>
  MX_DMA_Init();
 8015b8a:	f001 fbcd 	bl	8017328 <MX_DMA_Init>
  MX_ADC1_Init();
 8015b8e:	f001 f8d1 	bl	8016d34 <MX_ADC1_Init>
  MX_ADC2_Init();
 8015b92:	f001 f921 	bl	8016dd8 <MX_ADC2_Init>
  MX_DAC_Init();
 8015b96:	f001 f971 	bl	8016e7c <MX_DAC_Init>
  MX_SPI2_Init();
 8015b9a:	f001 f9ad 	bl	8016ef8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8015b9e:	f001 f9e1 	bl	8016f64 <MX_SPI3_Init>
  MX_TIM1_Init();
 8015ba2:	f001 fa17 	bl	8016fd4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8015ba6:	f001 fa8b 	bl	80170c0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8015baa:	f001 fae9 	bl	8017180 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8015bae:	f00f fe69 	bl	8025884 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8015bb2:	f001 fb73 	bl	801729c <MX_TIM7_Init>
  MX_FATFS_Init();
 8015bb6:	f009 fbfb 	bl	801f3b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // initialize adc dma
  __HAL_DMA_DISABLE(&hdma_adc1);
 8015bba:	4bb1      	ldr	r3, [pc, #708]	; (8015e80 <main+0x310>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	681a      	ldr	r2, [r3, #0]
 8015bc0:	4baf      	ldr	r3, [pc, #700]	; (8015e80 <main+0x310>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	f022 0201 	bic.w	r2, r2, #1
 8015bc8:	601a      	str	r2, [r3, #0]
  dma_tmp = hdma_adc1.Instance->CR;
 8015bca:	4bad      	ldr	r3, [pc, #692]	; (8015e80 <main+0x310>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	603b      	str	r3, [r7, #0]
  dma_tmp &= 0x0FFCFFFE;
 8015bd2:	683a      	ldr	r2, [r7, #0]
 8015bd4:	4bab      	ldr	r3, [pc, #684]	; (8015e84 <main+0x314>)
 8015bd6:	4013      	ands	r3, r2
 8015bd8:	603b      	str	r3, [r7, #0]
  dma_tmp |= 0x30000; //set very high pirority
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8015be0:	603b      	str	r3, [r7, #0]
  hdma_adc1.Instance->CR = dma_tmp;
 8015be2:	4ba7      	ldr	r3, [pc, #668]	; (8015e80 <main+0x310>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	683a      	ldr	r2, [r7, #0]
 8015be8:	601a      	str	r2, [r3, #0]

   hdma_adc1.Instance->M0AR = (unsigned)&Sampl[2];
 8015bea:	4ba5      	ldr	r3, [pc, #660]	; (8015e80 <main+0x310>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	4aa6      	ldr	r2, [pc, #664]	; (8015e88 <main+0x318>)
 8015bf0:	60da      	str	r2, [r3, #12]
   hdma_adc1.Instance->PAR = hadc1.Instance->DR;
 8015bf2:	4ba6      	ldr	r3, [pc, #664]	; (8015e8c <main+0x31c>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	4ba2      	ldr	r3, [pc, #648]	; (8015e80 <main+0x310>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015bfc:	609a      	str	r2, [r3, #8]
   __HAL_DMA_SET_COUNTER(&hdma_adc1, 0x1000);
 8015bfe:	4ba0      	ldr	r3, [pc, #640]	; (8015e80 <main+0x310>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015c06:	605a      	str	r2, [r3, #4]
   __HAL_DMA_ENABLE(&hdma_adc1);
 8015c08:	4b9d      	ldr	r3, [pc, #628]	; (8015e80 <main+0x310>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	4b9c      	ldr	r3, [pc, #624]	; (8015e80 <main+0x310>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f042 0201 	orr.w	r2, r2, #1
 8015c16:	601a      	str	r2, [r3, #0]

  // inittialize LCD and touch screen
  Init_LCD();
 8015c18:	f7fb fcf2 	bl	8011600 <Init_LCD>
  Init_Touch();
 8015c1c:	f7ff fefe 	bl	8015a1c <Init_Touch>

  SetColor(BLK, WHT);
 8015c20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c24:	2000      	movs	r0, #0
 8015c26:	f7f8 f9d9 	bl	800dfdc <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8015c2a:	4b99      	ldr	r3, [pc, #612]	; (8015e90 <main+0x320>)
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	215a      	movs	r1, #90	; 0x5a
 8015c30:	2008      	movs	r0, #8
 8015c32:	f7f8 f97b 	bl	800df2c <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8015c36:	4b97      	ldr	r3, [pc, #604]	; (8015e94 <main+0x324>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	215a      	movs	r1, #90	; 0x5a
 8015c3c:	20b8      	movs	r0, #184	; 0xb8
 8015c3e:	f7f8 f975 	bl	800df2c <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8015c42:	4b95      	ldr	r3, [pc, #596]	; (8015e98 <main+0x328>)
 8015c44:	2200      	movs	r2, #0
 8015c46:	2146      	movs	r1, #70	; 0x46
 8015c48:	2008      	movs	r0, #8
 8015c4a:	f7f8 f96f 	bl	800df2c <DispStr8x14>

  HAL_Delay(1000);
 8015c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015c52:	f002 fa6f 	bl	8018134 <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8015c56:	f7fa ff33 	bl	8010ac0 <Read_CalFlag>

  if(Cal_Flag == 1)
 8015c5a:	4b90      	ldr	r3, [pc, #576]	; (8015e9c <main+0x32c>)
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d10f      	bne.n	8015c82 <main+0x112>
  {
	  Cal_Flag = 0;
 8015c62:	4b8e      	ldr	r3, [pc, #568]	; (8015e9c <main+0x32c>)
 8015c64:	2200      	movs	r2, #0
 8015c66:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8015c68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015c6c:	2000      	movs	r0, #0
 8015c6e:	f7f8 f9b5 	bl	800dfdc <SetColor>
	  Zero_Align();                              //set zero
 8015c72:	f7fe fd09 	bl	8014688 <Zero_Align>
	  Restore();                                 //restore list
 8015c76:	f7fb f935 	bl	8010ee4 <Restore>
	  Save_Parameter();                          //save list
 8015c7a:	f7fa ff49 	bl	8010b10 <Save_Parameter>
	  Save_Kpg();
 8015c7e:	f7fb f875 	bl	8010d6c <Save_Kpg>
  }
  Read_Kpg();
 8015c82:	f7fb f8ed 	bl	8010e60 <Read_Kpg>
  Read_Parameter();
 8015c86:	f7fa ffe3 	bl	8010c50 <Read_Parameter>
  File_Num();
 8015c8a:	f7f9 fc53 	bl	800f534 <File_Num>
  memcpy(Data, DEMO, 310);
 8015c8e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8015c92:	4983      	ldr	r1, [pc, #524]	; (8015ea0 <main+0x330>)
 8015c94:	4883      	ldr	r0, [pc, #524]	; (8015ea4 <main+0x334>)
 8015c96:	f010 fbdb 	bl	8026450 <memcpy>

  LCD_ClrScrn(GRY);
 8015c9a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8015c9e:	f7fb fdc5 	bl	801182c <LCD_ClrScrn>
  Update_Title();
 8015ca2:	f7fb ff65 	bl	8011b70 <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 8015ca6:	4b80      	ldr	r3, [pc, #512]	; (8015ea8 <main+0x338>)
 8015ca8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8015cac:	f043 0320 	orr.w	r3, r3, #32
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	4b7d      	ldr	r3, [pc, #500]	; (8015ea8 <main+0x338>)
 8015cb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 8015cb8:	4b7b      	ldr	r3, [pc, #492]	; (8015ea8 <main+0x338>)
 8015cba:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	461a      	mov	r2, r3
 8015cc2:	0112      	lsls	r2, r2, #4
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	b21a      	sxth	r2, r3
 8015ccc:	4b77      	ldr	r3, [pc, #476]	; (8015eac <main+0x33c>)
 8015cce:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 8015cd0:	4877      	ldr	r0, [pc, #476]	; (8015eb0 <main+0x340>)
 8015cd2:	f007 f8e7 	bl	801cea4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8015cd6:	4b74      	ldr	r3, [pc, #464]	; (8015ea8 <main+0x338>)
 8015cd8:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d007      	beq.n	8015cf0 <main+0x180>
 8015ce0:	4b72      	ldr	r3, [pc, #456]	; (8015eac <main+0x33c>)
 8015ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d102      	bne.n	8015cf0 <main+0x180>
	    {
	      StdBy_Flag = 1;
 8015cea:	4b72      	ldr	r3, [pc, #456]	; (8015eb4 <main+0x344>)
 8015cec:	2201      	movs	r2, #1
 8015cee:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 8015cf0:	f7fc feaa 	bl	8012a48 <Update_Detail>
	    Update_Blink();
 8015cf4:	f7fb ff90 	bl	8011c18 <Update_Blink>
	    WaveProcess();
 8015cf8:	f7fe fdbc 	bl	8014874 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 8015cfc:	496e      	ldr	r1, [pc, #440]	; (8015eb8 <main+0x348>)
 8015cfe:	486f      	ldr	r0, [pc, #444]	; (8015ebc <main+0x34c>)
 8015d00:	f7f7 fef0 	bl	800dae4 <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8015d04:	4b6e      	ldr	r3, [pc, #440]	; (8015ec0 <main+0x350>)
 8015d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d01c      	beq.n	8015d48 <main+0x1d8>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 8015d0e:	4b6c      	ldr	r3, [pc, #432]	; (8015ec0 <main+0x350>)
 8015d10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d14:	4b64      	ldr	r3, [pc, #400]	; (8015ea8 <main+0x338>)
 8015d16:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8015d18:	4b63      	ldr	r3, [pc, #396]	; (8015ea8 <main+0x338>)
 8015d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015d1e:	f043 0320 	orr.w	r3, r3, #32
 8015d22:	b2da      	uxtb	r2, r3
 8015d24:	4b60      	ldr	r3, [pc, #384]	; (8015ea8 <main+0x338>)
 8015d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8015d2a:	4b66      	ldr	r3, [pc, #408]	; (8015ec4 <main+0x354>)
 8015d2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d30:	4b63      	ldr	r3, [pc, #396]	; (8015ec0 <main+0x350>)
 8015d32:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8015d34:	f7fb ff1c 	bl	8011b70 <Update_Title>
	      Current=TIM_BASE_Val;
 8015d38:	4b61      	ldr	r3, [pc, #388]	; (8015ec0 <main+0x350>)
 8015d3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d3e:	4b61      	ldr	r3, [pc, #388]	; (8015ec4 <main+0x354>)
 8015d40:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8015d42:	4b5f      	ldr	r3, [pc, #380]	; (8015ec0 <main+0x350>)
 8015d44:	2200      	movs	r2, #0
 8015d46:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8015d48:	4b5f      	ldr	r3, [pc, #380]	; (8015ec8 <main+0x358>)
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d0c1      	beq.n	8015cd6 <main+0x166>
	    {
	      StdBy_Flag = 0;
 8015d52:	4b58      	ldr	r3, [pc, #352]	; (8015eb4 <main+0x344>)
 8015d54:	2200      	movs	r2, #0
 8015d56:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8015d58:	4b5c      	ldr	r3, [pc, #368]	; (8015ecc <main+0x35c>)
 8015d5a:	220a      	movs	r2, #10
 8015d5c:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 8015d5e:	4b59      	ldr	r3, [pc, #356]	; (8015ec4 <main+0x354>)
 8015d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d64:	461a      	mov	r2, r3
 8015d66:	4b5a      	ldr	r3, [pc, #360]	; (8015ed0 <main+0x360>)
 8015d68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015d6c:	4a4e      	ldr	r2, [pc, #312]	; (8015ea8 <main+0x338>)
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	4413      	add	r3, r2
 8015d72:	799b      	ldrb	r3, [r3, #6]
 8015d74:	4a53      	ldr	r2, [pc, #332]	; (8015ec4 <main+0x354>)
 8015d76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d7a:	4611      	mov	r1, r2
 8015d7c:	4a54      	ldr	r2, [pc, #336]	; (8015ed0 <main+0x360>)
 8015d7e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8015d82:	4610      	mov	r0, r2
 8015d84:	f043 0320 	orr.w	r3, r3, #32
 8015d88:	b2d9      	uxtb	r1, r3
 8015d8a:	4a47      	ldr	r2, [pc, #284]	; (8015ea8 <main+0x338>)
 8015d8c:	00c3      	lsls	r3, r0, #3
 8015d8e:	4413      	add	r3, r2
 8015d90:	460a      	mov	r2, r1
 8015d92:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 8015d94:	4b4c      	ldr	r3, [pc, #304]	; (8015ec8 <main+0x358>)
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	2b09      	cmp	r3, #9
 8015d9e:	f200 8712 	bhi.w	8016bc6 <main+0x1056>
 8015da2:	a201      	add	r2, pc, #4	; (adr r2, 8015da8 <main+0x238>)
 8015da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da8:	08015e19 	.word	0x08015e19
 8015dac:	0801612d 	.word	0x0801612d
 8015db0:	08016285 	.word	0x08016285
 8015db4:	08016333 	.word	0x08016333
 8015db8:	080163e9 	.word	0x080163e9
 8015dbc:	0801678f 	.word	0x0801678f
 8015dc0:	08016bc7 	.word	0x08016bc7
 8015dc4:	08015df3 	.word	0x08015df3
 8015dc8:	08015dd1 	.word	0x08015dd1
 8015dcc:	08016119 	.word	0x08016119
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 8015dd0:	4b35      	ldr	r3, [pc, #212]	; (8015ea8 <main+0x338>)
 8015dd2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7f9 feb6 	bl	800fb48 <Save_Bmp>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 8015de0:	88fb      	ldrh	r3, [r7, #6]
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7fe f957 	bl	8014098 <DispFileInfo>
	         DispBMPInfo();
 8015dea:	f7fe f985 	bl	80140f8 <DispBMPInfo>
	        break;
 8015dee:	f000 beea 	b.w	8016bc6 <main+0x1056>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8015df6:	4b37      	ldr	r3, [pc, #220]	; (8015ed4 <main+0x364>)
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	f003 0304 	and.w	r3, r3, #4
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d003      	beq.n	8015e0a <main+0x29a>
 8015e02:	f7f8 fe71 	bl	800eae8 <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8015e06:	f000 bede 	b.w	8016bc6 <main+0x1056>
	         Dialog_Pop("Save All ParamTab?");
 8015e0a:	4833      	ldr	r0, [pc, #204]	; (8015ed8 <main+0x368>)
 8015e0c:	f7f8 fe98 	bl	800eb40 <Dialog_Pop>
	         Pop_Num = 1;
 8015e10:	2301      	movs	r3, #1
 8015e12:	713b      	strb	r3, [r7, #4]
	       break;
 8015e14:	f000 bed7 	b.w	8016bc6 <main+0x1056>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8015e18:	4b2a      	ldr	r3, [pc, #168]	; (8015ec4 <main+0x354>)
 8015e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e1e:	2b07      	cmp	r3, #7
 8015e20:	f040 8080 	bne.w	8015f24 <main+0x3b4>
 8015e24:	4b1d      	ldr	r3, [pc, #116]	; (8015e9c <main+0x32c>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d17b      	bne.n	8015f24 <main+0x3b4>
	       {
	         if(PopType & DAILOG_POP){
 8015e2c:	4b29      	ldr	r3, [pc, #164]	; (8015ed4 <main+0x364>)
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	f003 0304 	and.w	r3, r3, #4
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00e      	beq.n	8015e56 <main+0x2e6>
	           if(Pop_Num == 1){
 8015e38:	793b      	ldrb	r3, [r7, #4]
 8015e3a:	2b01      	cmp	r3, #1
 8015e3c:	d105      	bne.n	8015e4a <main+0x2da>
	             Save_Parameter();
 8015e3e:	f7fa fe67 	bl	8010b10 <Save_Parameter>
	             Close_Pop();
 8015e42:	f7f8 fe51 	bl	800eae8 <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8015e46:	f000 bea5 	b.w	8016b94 <main+0x1024>
	             Close_Pop();
 8015e4a:	f7f8 fe4d 	bl	800eae8 <Close_Pop>
	             List_Pop();
 8015e4e:	f7f8 fe61 	bl	800eb14 <List_Pop>
	         break;
 8015e52:	f000 be9f 	b.w	8016b94 <main+0x1024>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8015e56:	4b1f      	ldr	r3, [pc, #124]	; (8015ed4 <main+0x364>)
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	f003 0302 	and.w	r3, r3, #2
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d03c      	beq.n	8015edc <main+0x36c>
 8015e62:	4b1b      	ldr	r3, [pc, #108]	; (8015ed0 <main+0x360>)
 8015e64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015e68:	2b28      	cmp	r3, #40	; 0x28
 8015e6a:	d137      	bne.n	8015edc <main+0x36c>
	           Restore_CalPar();
 8015e6c:	f7fb f8a4 	bl	8010fb8 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 8015e70:	4819      	ldr	r0, [pc, #100]	; (8015ed8 <main+0x368>)
 8015e72:	f7f8 fe65 	bl	800eb40 <Dialog_Pop>
	           Cal_Flag = 1;
 8015e76:	4b09      	ldr	r3, [pc, #36]	; (8015e9c <main+0x32c>)
 8015e78:	2201      	movs	r2, #1
 8015e7a:	701a      	strb	r2, [r3, #0]
	         break;
 8015e7c:	f000 be8a 	b.w	8016b94 <main+0x1024>
 8015e80:	2000673c 	.word	0x2000673c
 8015e84:	0ffcfffe 	.word	0x0ffcfffe
 8015e88:	200026a8 	.word	0x200026a8
 8015e8c:	200066ac 	.word	0x200066ac
 8015e90:	08000a48 	.word	0x08000a48
 8015e94:	2000055c 	.word	0x2000055c
 8015e98:	08000a6c 	.word	0x08000a6c
 8015e9c:	20000192 	.word	0x20000192
 8015ea0:	08000bf4 	.word	0x08000bf4
 8015ea4:	20000008 	.word	0x20000008
 8015ea8:	20000274 	.word	0x20000274
 8015eac:	20002652 	.word	0x20002652
 8015eb0:	20006908 	.word	0x20006908
 8015eb4:	20002658 	.word	0x20002658
 8015eb8:	20000140 	.word	0x20000140
 8015ebc:	2000091c 	.word	0x2000091c
 8015ec0:	2000252c 	.word	0x2000252c
 8015ec4:	20002654 	.word	0x20002654
 8015ec8:	2000072e 	.word	0x2000072e
 8015ecc:	20000000 	.word	0x20000000
 8015ed0:	20000514 	.word	0x20000514
 8015ed4:	2000091a 	.word	0x2000091a
 8015ed8:	08000a94 	.word	0x08000a94
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 8015edc:	4baf      	ldr	r3, [pc, #700]	; (801619c <main+0x62c>)
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 8655 	beq.w	8016b94 <main+0x1024>
 8015eea:	4bad      	ldr	r3, [pc, #692]	; (80161a0 <main+0x630>)
 8015eec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015ef0:	2b27      	cmp	r3, #39	; 0x27
 8015ef2:	f040 864f 	bne.w	8016b94 <main+0x1024>
	           Close_Pop();
 8015ef6:	f7f8 fdf7 	bl	800eae8 <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 8015efa:	48aa      	ldr	r0, [pc, #680]	; (80161a4 <main+0x634>)
 8015efc:	f7f8 fe86 	bl	800ec0c <Calibrate_Pop>
	           Cal_Flag = 1;
 8015f00:	4ba9      	ldr	r3, [pc, #676]	; (80161a8 <main+0x638>)
 8015f02:	2201      	movs	r2, #1
 8015f04:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 8015f06:	49a9      	ldr	r1, [pc, #676]	; (80161ac <main+0x63c>)
 8015f08:	48a9      	ldr	r0, [pc, #676]	; (80161b0 <main+0x640>)
 8015f0a:	f7f7 fdeb 	bl	800dae4 <DrawWindow>
	           Zero_Align();
 8015f0e:	f7fe fbbb 	bl	8014688 <Zero_Align>
	           Update_Proc_All();
 8015f12:	f7fe f937 	bl	8014184 <Update_Proc_All>
	           Close_Pop();
 8015f16:	f7f8 fde7 	bl	800eae8 <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 8015f1a:	48a6      	ldr	r0, [pc, #664]	; (80161b4 <main+0x644>)
 8015f1c:	f7f8 feac 	bl	800ec78 <CalSave_Pop>
	         break;
 8015f20:	f000 be38 	b.w	8016b94 <main+0x1024>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 8015f24:	4ba4      	ldr	r3, [pc, #656]	; (80161b8 <main+0x648>)
 8015f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f2a:	2b07      	cmp	r3, #7
 8015f2c:	d113      	bne.n	8015f56 <main+0x3e6>
 8015f2e:	4b9e      	ldr	r3, [pc, #632]	; (80161a8 <main+0x638>)
 8015f30:	781b      	ldrb	r3, [r3, #0]
 8015f32:	2b01      	cmp	r3, #1
 8015f34:	d10f      	bne.n	8015f56 <main+0x3e6>
	         if(PopType & DAILOG_POP){
 8015f36:	4b99      	ldr	r3, [pc, #612]	; (801619c <main+0x62c>)
 8015f38:	781b      	ldrb	r3, [r3, #0]
 8015f3a:	f003 0304 	and.w	r3, r3, #4
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	f000 862a 	beq.w	8016b98 <main+0x1028>
	           Save_Kpg();
 8015f44:	f7fa ff12 	bl	8010d6c <Save_Kpg>
	           Close_Pop();
 8015f48:	f7f8 fdce 	bl	800eae8 <Close_Pop>
	           Cal_Flag = 0;
 8015f4c:	4b96      	ldr	r3, [pc, #600]	; (80161a8 <main+0x638>)
 8015f4e:	2200      	movs	r2, #0
 8015f50:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8015f52:	f000 be21 	b.w	8016b98 <main+0x1028>
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 8015f56:	4b98      	ldr	r3, [pc, #608]	; (80161b8 <main+0x648>)
 8015f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f5c:	2b05      	cmp	r3, #5
 8015f5e:	d177      	bne.n	8016050 <main+0x4e0>
 8015f60:	4b8e      	ldr	r3, [pc, #568]	; (801619c <main+0x62c>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	f003 0302 	and.w	r3, r3, #2
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d071      	beq.n	8016050 <main+0x4e0>
	         i = 0;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8015f70:	797b      	ldrb	r3, [r7, #5]
 8015f72:	2b09      	cmp	r3, #9
 8015f74:	d101      	bne.n	8015f7a <main+0x40a>
 8015f76:	f7f8 fdb7 	bl	800eae8 <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8015f7a:	4b89      	ldr	r3, [pc, #548]	; (80161a0 <main+0x630>)
 8015f7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f80:	2b1d      	cmp	r3, #29
 8015f82:	d107      	bne.n	8015f94 <main+0x424>
 8015f84:	4b8d      	ldr	r3, [pc, #564]	; (80161bc <main+0x64c>)
 8015f86:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f9 fddc 	bl	800fb48 <Save_Bmp>
 8015f90:	4603      	mov	r3, r0
 8015f92:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 8015f94:	4b82      	ldr	r3, [pc, #520]	; (80161a0 <main+0x630>)
 8015f96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015f9a:	2b1e      	cmp	r3, #30
 8015f9c:	d107      	bne.n	8015fae <main+0x43e>
 8015f9e:	4b87      	ldr	r3, [pc, #540]	; (80161bc <main+0x64c>)
 8015fa0:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f9 fc91 	bl	800f8cc <Save_Dat>
 8015faa:	4603      	mov	r3, r0
 8015fac:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 8015fae:	4b7c      	ldr	r3, [pc, #496]	; (80161a0 <main+0x630>)
 8015fb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fb4:	2b1f      	cmp	r3, #31
 8015fb6:	d107      	bne.n	8015fc8 <main+0x458>
 8015fb8:	4b80      	ldr	r3, [pc, #512]	; (80161bc <main+0x64c>)
 8015fba:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7f9 fbca 	bl	800f758 <Save_Buf>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 8015fc8:	4b75      	ldr	r3, [pc, #468]	; (80161a0 <main+0x630>)
 8015fca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fce:	2b20      	cmp	r3, #32
 8015fd0:	d107      	bne.n	8015fe2 <main+0x472>
 8015fd2:	4b7a      	ldr	r3, [pc, #488]	; (80161bc <main+0x64c>)
 8015fd4:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f9 ff11 	bl	800fe00 <Save_Csv>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 8015fe2:	4b6f      	ldr	r3, [pc, #444]	; (80161a0 <main+0x630>)
 8015fe4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015fe8:	2b21      	cmp	r3, #33	; 0x21
 8015fea:	d107      	bne.n	8015ffc <main+0x48c>
 8015fec:	4b73      	ldr	r3, [pc, #460]	; (80161bc <main+0x64c>)
 8015fee:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fa f926 	bl	8010244 <Save_Svg>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8015ffc:	4b68      	ldr	r3, [pc, #416]	; (80161a0 <main+0x630>)
 8015ffe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016002:	2b22      	cmp	r3, #34	; 0x22
 8016004:	d107      	bne.n	8016016 <main+0x4a6>
 8016006:	4b6d      	ldr	r3, [pc, #436]	; (80161bc <main+0x64c>)
 8016008:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801600c:	4618      	mov	r0, r3
 801600e:	f7f9 fce7 	bl	800f9e0 <Load_Dat>
 8016012:	4603      	mov	r3, r0
 8016014:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 8016016:	4b62      	ldr	r3, [pc, #392]	; (80161a0 <main+0x630>)
 8016018:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801601c:	2b23      	cmp	r3, #35	; 0x23
 801601e:	d107      	bne.n	8016030 <main+0x4c0>
 8016020:	4b66      	ldr	r3, [pc, #408]	; (80161bc <main+0x64c>)
 8016022:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 8016026:	4618      	mov	r0, r3
 8016028:	f7f9 fab2 	bl	800f590 <Load_Buf>
 801602c:	4603      	mov	r3, r0
 801602e:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016030:	2300      	movs	r3, #0
 8016032:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 8016034:	88fb      	ldrh	r3, [r7, #6]
 8016036:	b2db      	uxtb	r3, r3
 8016038:	4618      	mov	r0, r3
 801603a:	f7fe f82d 	bl	8014098 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 801603e:	4b57      	ldr	r3, [pc, #348]	; (801619c <main+0x62c>)
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	f003 0304 	and.w	r3, r3, #4
 8016046:	2b00      	cmp	r3, #0
 8016048:	d062      	beq.n	8016110 <main+0x5a0>
 801604a:	f7f8 fd4d 	bl	800eae8 <Close_Pop>
 801604e:	e05f      	b.n	8016110 <main+0x5a0>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016050:	4b52      	ldr	r3, [pc, #328]	; (801619c <main+0x62c>)
 8016052:	781b      	ldrb	r3, [r3, #0]
 8016054:	f003 0304 	and.w	r3, r3, #4
 8016058:	2b00      	cmp	r3, #0
 801605a:	d00b      	beq.n	8016074 <main+0x504>
 801605c:	797b      	ldrb	r3, [r7, #5]
 801605e:	2b09      	cmp	r3, #9
 8016060:	d008      	beq.n	8016074 <main+0x504>
	         Save_Parameter();
 8016062:	f7fa fd55 	bl	8010b10 <Save_Parameter>
	         Cal_Flag = 0;
 8016066:	4b50      	ldr	r3, [pc, #320]	; (80161a8 <main+0x638>)
 8016068:	2200      	movs	r2, #0
 801606a:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 801606c:	f7f8 fd3c 	bl	800eae8 <Close_Pop>
	         break;
 8016070:	f000 bda9 	b.w	8016bc6 <main+0x1056>
	       }
	       else {
	          if(Status & STOP){
 8016074:	4b52      	ldr	r3, [pc, #328]	; (80161c0 <main+0x650>)
 8016076:	f9b3 3000 	ldrsh.w	r3, [r3]
 801607a:	b29b      	uxth	r3, r3
 801607c:	f003 0301 	and.w	r3, r3, #1
 8016080:	2b00      	cmp	r3, #0
 8016082:	d02e      	beq.n	80160e2 <main+0x572>
	            if(Status & LOADM )Status &= ~LOADM;
 8016084:	4b4e      	ldr	r3, [pc, #312]	; (80161c0 <main+0x650>)
 8016086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801608a:	b29b      	uxth	r3, r3
 801608c:	f003 0310 	and.w	r3, r3, #16
 8016090:	2b00      	cmp	r3, #0
 8016092:	d007      	beq.n	80160a4 <main+0x534>
 8016094:	4b4a      	ldr	r3, [pc, #296]	; (80161c0 <main+0x650>)
 8016096:	f9b3 3000 	ldrsh.w	r3, [r3]
 801609a:	f023 0310 	bic.w	r3, r3, #16
 801609e:	b21a      	sxth	r2, r3
 80160a0:	4b47      	ldr	r3, [pc, #284]	; (80161c0 <main+0x650>)
 80160a2:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 80160a4:	4b46      	ldr	r3, [pc, #280]	; (80161c0 <main+0x650>)
 80160a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160aa:	f023 0301 	bic.w	r3, r3, #1
 80160ae:	b21a      	sxth	r2, r3
 80160b0:	4b43      	ldr	r3, [pc, #268]	; (80161c0 <main+0x650>)
 80160b2:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80160b4:	4b41      	ldr	r3, [pc, #260]	; (80161bc <main+0x64c>)
 80160b6:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80160ba:	2b04      	cmp	r3, #4
 80160bc:	d101      	bne.n	80160c2 <main+0x552>
 80160be:	f7f6 fb75 	bl	800c7ac <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80160c2:	4b3e      	ldr	r3, [pc, #248]	; (80161bc <main+0x64c>)
 80160c4:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80160c8:	2b03      	cmp	r3, #3
 80160ca:	d101      	bne.n	80160d0 <main+0x560>
 80160cc:	f7f6 fb6e 	bl	800c7ac <ADC_Start>
	            Norm_Clr = 1;
 80160d0:	4b3c      	ldr	r3, [pc, #240]	; (80161c4 <main+0x654>)
 80160d2:	2201      	movs	r2, #1
 80160d4:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80160d6:	4b3c      	ldr	r3, [pc, #240]	; (80161c8 <main+0x658>)
 80160d8:	2201      	movs	r2, #1
 80160da:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80160dc:	f7fe f852 	bl	8014184 <Update_Proc_All>
 80160e0:	e016      	b.n	8016110 <main+0x5a0>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80160e2:	4b37      	ldr	r3, [pc, #220]	; (80161c0 <main+0x650>)
 80160e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160e8:	f043 0301 	orr.w	r3, r3, #1
 80160ec:	b21a      	sxth	r2, r3
 80160ee:	4b34      	ldr	r3, [pc, #208]	; (80161c0 <main+0x650>)
 80160f0:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80160f2:	4b32      	ldr	r3, [pc, #200]	; (80161bc <main+0x64c>)
 80160f4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80160f8:	4b34      	ldr	r3, [pc, #208]	; (80161cc <main+0x65c>)
 80160fa:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 80160fc:	4b2f      	ldr	r3, [pc, #188]	; (80161bc <main+0x64c>)
 80160fe:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016102:	4b33      	ldr	r3, [pc, #204]	; (80161d0 <main+0x660>)
 8016104:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 8016106:	4b2d      	ldr	r3, [pc, #180]	; (80161bc <main+0x64c>)
 8016108:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 801610c:	4b31      	ldr	r3, [pc, #196]	; (80161d4 <main+0x664>)
 801610e:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016110:	f7fd fd2c 	bl	8013b6c <DispStatus>
 	       break;
 8016114:	f000 bd57 	b.w	8016bc6 <main+0x1056>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 8016118:	4b28      	ldr	r3, [pc, #160]	; (80161bc <main+0x64c>)
 801611a:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 853c 	beq.w	8016b9c <main+0x102c>
	        {
	          Auto_Fit();
 8016124:	f7ff f888 	bl	8015238 <Auto_Fit>
	        }
	        break;
 8016128:	f000 bd38 	b.w	8016b9c <main+0x102c>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 801612c:	4b1b      	ldr	r3, [pc, #108]	; (801619c <main+0x62c>)
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	f003 0302 	and.w	r3, r3, #2
 8016134:	2b00      	cmp	r3, #0
 8016136:	d111      	bne.n	801615c <main+0x5ec>
	            if(Cal_Flag){
 8016138:	4b1b      	ldr	r3, [pc, #108]	; (80161a8 <main+0x638>)
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d006      	beq.n	801614e <main+0x5de>
	              Cal_Flag = 0;
 8016140:	4b19      	ldr	r3, [pc, #100]	; (80161a8 <main+0x638>)
 8016142:	2200      	movs	r2, #0
 8016144:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 8016146:	f7f8 fccf 	bl	800eae8 <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 801614a:	f000 bd3c 	b.w	8016bc6 <main+0x1056>
	              Cal_Flag = 0;
 801614e:	4b16      	ldr	r3, [pc, #88]	; (80161a8 <main+0x638>)
 8016150:	2200      	movs	r2, #0
 8016152:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 8016154:	f7f8 fcde 	bl	800eb14 <List_Pop>
	        break;
 8016158:	f000 bd35 	b.w	8016bc6 <main+0x1056>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 801615c:	f7f8 fcc4 	bl	800eae8 <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016160:	4b15      	ldr	r3, [pc, #84]	; (80161b8 <main+0x648>)
 8016162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016166:	2b01      	cmp	r3, #1
 8016168:	d109      	bne.n	801617e <main+0x60e>
 801616a:	4b14      	ldr	r3, [pc, #80]	; (80161bc <main+0x64c>)
 801616c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016170:	f043 0320 	orr.w	r3, r3, #32
 8016174:	b2da      	uxtb	r2, r3
 8016176:	4b11      	ldr	r3, [pc, #68]	; (80161bc <main+0x64c>)
 8016178:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801617c:	e03f      	b.n	80161fe <main+0x68e>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 801617e:	4b0e      	ldr	r3, [pc, #56]	; (80161b8 <main+0x648>)
 8016180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d127      	bne.n	80161d8 <main+0x668>
 8016188:	4b0c      	ldr	r3, [pc, #48]	; (80161bc <main+0x64c>)
 801618a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801618e:	f043 0320 	orr.w	r3, r3, #32
 8016192:	b2da      	uxtb	r2, r3
 8016194:	4b09      	ldr	r3, [pc, #36]	; (80161bc <main+0x64c>)
 8016196:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801619a:	e030      	b.n	80161fe <main+0x68e>
 801619c:	2000091a 	.word	0x2000091a
 80161a0:	20000514 	.word	0x20000514
 80161a4:	08000aa8 	.word	0x08000aa8
 80161a8:	20000192 	.word	0x20000192
 80161ac:	20000140 	.word	0x20000140
 80161b0:	2000091c 	.word	0x2000091c
 80161b4:	08000ac4 	.word	0x08000ac4
 80161b8:	20002654 	.word	0x20002654
 80161bc:	20000274 	.word	0x20000274
 80161c0:	20002656 	.word	0x20002656
 80161c4:	200026a2 	.word	0x200026a2
 80161c8:	20000538 	.word	0x20000538
 80161cc:	20002694 	.word	0x20002694
 80161d0:	20002696 	.word	0x20002696
 80161d4:	20002698 	.word	0x20002698
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80161d8:	4b7d      	ldr	r3, [pc, #500]	; (80163d0 <main+0x860>)
 80161da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80161de:	4a7d      	ldr	r2, [pc, #500]	; (80163d4 <main+0x864>)
 80161e0:	00db      	lsls	r3, r3, #3
 80161e2:	4413      	add	r3, r2
 80161e4:	799b      	ldrb	r3, [r3, #6]
 80161e6:	4a7a      	ldr	r2, [pc, #488]	; (80163d0 <main+0x860>)
 80161e8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80161ec:	4610      	mov	r0, r2
 80161ee:	f043 0320 	orr.w	r3, r3, #32
 80161f2:	b2d9      	uxtb	r1, r3
 80161f4:	4a77      	ldr	r2, [pc, #476]	; (80163d4 <main+0x864>)
 80161f6:	00c3      	lsls	r3, r0, #3
 80161f8:	4413      	add	r3, r2
 80161fa:	460a      	mov	r2, r1
 80161fc:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80161fe:	4b76      	ldr	r3, [pc, #472]	; (80163d8 <main+0x868>)
 8016200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016204:	461a      	mov	r2, r3
 8016206:	4b72      	ldr	r3, [pc, #456]	; (80163d0 <main+0x860>)
 8016208:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801620c:	2b09      	cmp	r3, #9
 801620e:	d10a      	bne.n	8016226 <main+0x6b6>
 8016210:	4b70      	ldr	r3, [pc, #448]	; (80163d4 <main+0x864>)
 8016212:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8016216:	f043 0320 	orr.w	r3, r3, #32
 801621a:	b2da      	uxtb	r2, r3
 801621c:	4b6d      	ldr	r3, [pc, #436]	; (80163d4 <main+0x864>)
 801621e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 8016222:	f000 bcd0 	b.w	8016bc6 <main+0x1056>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 8016226:	4b6c      	ldr	r3, [pc, #432]	; (80163d8 <main+0x868>)
 8016228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801622c:	2b05      	cmp	r3, #5
 801622e:	d114      	bne.n	801625a <main+0x6ea>
 8016230:	4b67      	ldr	r3, [pc, #412]	; (80163d0 <main+0x860>)
 8016232:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016236:	4a67      	ldr	r2, [pc, #412]	; (80163d4 <main+0x864>)
 8016238:	00db      	lsls	r3, r3, #3
 801623a:	4413      	add	r3, r2
 801623c:	799b      	ldrb	r3, [r3, #6]
 801623e:	4a64      	ldr	r2, [pc, #400]	; (80163d0 <main+0x860>)
 8016240:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8016244:	4610      	mov	r0, r2
 8016246:	f043 0320 	orr.w	r3, r3, #32
 801624a:	b2d9      	uxtb	r1, r3
 801624c:	4a61      	ldr	r2, [pc, #388]	; (80163d4 <main+0x864>)
 801624e:	00c3      	lsls	r3, r0, #3
 8016250:	4413      	add	r3, r2
 8016252:	460a      	mov	r2, r1
 8016254:	719a      	strb	r2, [r3, #6]
	        break;
 8016256:	f000 bcb6 	b.w	8016bc6 <main+0x1056>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 801625a:	4b5d      	ldr	r3, [pc, #372]	; (80163d0 <main+0x860>)
 801625c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016260:	4a5c      	ldr	r2, [pc, #368]	; (80163d4 <main+0x864>)
 8016262:	00db      	lsls	r3, r3, #3
 8016264:	4413      	add	r3, r2
 8016266:	799b      	ldrb	r3, [r3, #6]
 8016268:	4a59      	ldr	r2, [pc, #356]	; (80163d0 <main+0x860>)
 801626a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801626e:	4610      	mov	r0, r2
 8016270:	f043 0320 	orr.w	r3, r3, #32
 8016274:	b2d9      	uxtb	r1, r3
 8016276:	4a57      	ldr	r2, [pc, #348]	; (80163d4 <main+0x864>)
 8016278:	00c3      	lsls	r3, r0, #3
 801627a:	4413      	add	r3, r2
 801627c:	460a      	mov	r2, r1
 801627e:	719a      	strb	r2, [r3, #6]
	        break;
 8016280:	f000 bca1 	b.w	8016bc6 <main+0x1056>

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 8016284:	4b55      	ldr	r3, [pc, #340]	; (80163dc <main+0x86c>)
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	f003 0302 	and.w	r3, r3, #2
 801628c:	2b00      	cmp	r3, #0
 801628e:	d03b      	beq.n	8016308 <main+0x798>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016290:	4b51      	ldr	r3, [pc, #324]	; (80163d8 <main+0x868>)
 8016292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016296:	461a      	mov	r2, r3
 8016298:	4b4d      	ldr	r3, [pc, #308]	; (80163d0 <main+0x860>)
 801629a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801629e:	461a      	mov	r2, r3
 80162a0:	4b4d      	ldr	r3, [pc, #308]	; (80163d8 <main+0x868>)
 80162a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162a6:	4619      	mov	r1, r3
 80162a8:	4b4d      	ldr	r3, [pc, #308]	; (80163e0 <main+0x870>)
 80162aa:	5c5b      	ldrb	r3, [r3, r1]
 80162ac:	429a      	cmp	r2, r3
 80162ae:	dd0e      	ble.n	80162ce <main+0x75e>
 80162b0:	4b49      	ldr	r3, [pc, #292]	; (80163d8 <main+0x868>)
 80162b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162b6:	4a46      	ldr	r2, [pc, #280]	; (80163d0 <main+0x860>)
 80162b8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80162bc:	b292      	uxth	r2, r2
 80162be:	3a01      	subs	r2, #1
 80162c0:	b292      	uxth	r2, r2
 80162c2:	b211      	sxth	r1, r2
 80162c4:	4a42      	ldr	r2, [pc, #264]	; (80163d0 <main+0x860>)
 80162c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 80162ca:	f000 bc7c 	b.w	8016bc6 <main+0x1056>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80162ce:	4b42      	ldr	r3, [pc, #264]	; (80163d8 <main+0x868>)
 80162d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162d4:	461a      	mov	r2, r3
 80162d6:	4b3e      	ldr	r3, [pc, #248]	; (80163d0 <main+0x860>)
 80162d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80162dc:	b29a      	uxth	r2, r3
 80162de:	4b3e      	ldr	r3, [pc, #248]	; (80163d8 <main+0x868>)
 80162e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162e4:	4619      	mov	r1, r3
 80162e6:	4b3f      	ldr	r3, [pc, #252]	; (80163e4 <main+0x874>)
 80162e8:	5c5b      	ldrb	r3, [r3, r1]
 80162ea:	b29b      	uxth	r3, r3
 80162ec:	4413      	add	r3, r2
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	3b01      	subs	r3, #1
 80162f2:	b299      	uxth	r1, r3
 80162f4:	4b38      	ldr	r3, [pc, #224]	; (80163d8 <main+0x868>)
 80162f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162fa:	461a      	mov	r2, r3
 80162fc:	b209      	sxth	r1, r1
 80162fe:	4b34      	ldr	r3, [pc, #208]	; (80163d0 <main+0x860>)
 8016300:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 8016304:	f000 bc5f 	b.w	8016bc6 <main+0x1056>
	          if (Current > 0) Current--;
 8016308:	4b33      	ldr	r3, [pc, #204]	; (80163d8 <main+0x868>)
 801630a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801630e:	2b00      	cmp	r3, #0
 8016310:	dd0a      	ble.n	8016328 <main+0x7b8>
 8016312:	4b31      	ldr	r3, [pc, #196]	; (80163d8 <main+0x868>)
 8016314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016318:	b29b      	uxth	r3, r3
 801631a:	3b01      	subs	r3, #1
 801631c:	b29b      	uxth	r3, r3
 801631e:	b21a      	sxth	r2, r3
 8016320:	4b2d      	ldr	r3, [pc, #180]	; (80163d8 <main+0x868>)
 8016322:	801a      	strh	r2, [r3, #0]
	        break;
 8016324:	f000 bc4f 	b.w	8016bc6 <main+0x1056>
	          else             Current = ST;
 8016328:	4b2b      	ldr	r3, [pc, #172]	; (80163d8 <main+0x868>)
 801632a:	2207      	movs	r2, #7
 801632c:	801a      	strh	r2, [r3, #0]
	        break;
 801632e:	f000 bc4a 	b.w	8016bc6 <main+0x1056>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 8016332:	4b2a      	ldr	r3, [pc, #168]	; (80163dc <main+0x86c>)
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	f003 0302 	and.w	r3, r3, #2
 801633a:	2b00      	cmp	r3, #0
 801633c:	d034      	beq.n	80163a8 <main+0x838>
	          MenuNow[Current]++;
 801633e:	4b26      	ldr	r3, [pc, #152]	; (80163d8 <main+0x868>)
 8016340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016344:	4a22      	ldr	r2, [pc, #136]	; (80163d0 <main+0x860>)
 8016346:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 801634a:	b292      	uxth	r2, r2
 801634c:	3201      	adds	r2, #1
 801634e:	b292      	uxth	r2, r2
 8016350:	b211      	sxth	r1, r2
 8016352:	4a1f      	ldr	r2, [pc, #124]	; (80163d0 <main+0x860>)
 8016354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016358:	4b1f      	ldr	r3, [pc, #124]	; (80163d8 <main+0x868>)
 801635a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801635e:	461a      	mov	r2, r3
 8016360:	4b1b      	ldr	r3, [pc, #108]	; (80163d0 <main+0x860>)
 8016362:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016366:	461a      	mov	r2, r3
 8016368:	4b1b      	ldr	r3, [pc, #108]	; (80163d8 <main+0x868>)
 801636a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801636e:	4619      	mov	r1, r3
 8016370:	4b1b      	ldr	r3, [pc, #108]	; (80163e0 <main+0x870>)
 8016372:	5c5b      	ldrb	r3, [r3, r1]
 8016374:	4619      	mov	r1, r3
 8016376:	4b18      	ldr	r3, [pc, #96]	; (80163d8 <main+0x868>)
 8016378:	f9b3 3000 	ldrsh.w	r3, [r3]
 801637c:	4618      	mov	r0, r3
 801637e:	4b19      	ldr	r3, [pc, #100]	; (80163e4 <main+0x874>)
 8016380:	5c1b      	ldrb	r3, [r3, r0]
 8016382:	440b      	add	r3, r1
 8016384:	429a      	cmp	r2, r3
 8016386:	f2c0 840b 	blt.w	8016ba0 <main+0x1030>
	            MenuNow[Current] = MU_BEGN[Current];
 801638a:	4b13      	ldr	r3, [pc, #76]	; (80163d8 <main+0x868>)
 801638c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016390:	461a      	mov	r2, r3
 8016392:	4b13      	ldr	r3, [pc, #76]	; (80163e0 <main+0x870>)
 8016394:	5c99      	ldrb	r1, [r3, r2]
 8016396:	4b10      	ldr	r3, [pc, #64]	; (80163d8 <main+0x868>)
 8016398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801639c:	461a      	mov	r2, r3
 801639e:	b209      	sxth	r1, r1
 80163a0:	4b0b      	ldr	r3, [pc, #44]	; (80163d0 <main+0x860>)
 80163a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 80163a6:	e3fb      	b.n	8016ba0 <main+0x1030>
	          if (Current < 7) Current++;
 80163a8:	4b0b      	ldr	r3, [pc, #44]	; (80163d8 <main+0x868>)
 80163aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163ae:	2b06      	cmp	r3, #6
 80163b0:	dc09      	bgt.n	80163c6 <main+0x856>
 80163b2:	4b09      	ldr	r3, [pc, #36]	; (80163d8 <main+0x868>)
 80163b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	3301      	adds	r3, #1
 80163bc:	b29b      	uxth	r3, r3
 80163be:	b21a      	sxth	r2, r3
 80163c0:	4b05      	ldr	r3, [pc, #20]	; (80163d8 <main+0x868>)
 80163c2:	801a      	strh	r2, [r3, #0]
	        break;
 80163c4:	e3ec      	b.n	8016ba0 <main+0x1030>
	          else             Current = YN;
 80163c6:	4b04      	ldr	r3, [pc, #16]	; (80163d8 <main+0x868>)
 80163c8:	2200      	movs	r2, #0
 80163ca:	801a      	strh	r2, [r3, #0]
	        break;
 80163cc:	e3e8      	b.n	8016ba0 <main+0x1030>
 80163ce:	bf00      	nop
 80163d0:	20000514 	.word	0x20000514
 80163d4:	20000274 	.word	0x20000274
 80163d8:	20002654 	.word	0x20002654
 80163dc:	2000091a 	.word	0x2000091a
 80163e0:	08001fdc 	.word	0x08001fdc
 80163e4:	08001fe4 	.word	0x08001fe4

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80163e8:	4ba8      	ldr	r3, [pc, #672]	; (801668c <main+0xb1c>)
 80163ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163ee:	2b07      	cmp	r3, #7
 80163f0:	d106      	bne.n	8016400 <main+0x890>
 80163f2:	4ba7      	ldr	r3, [pc, #668]	; (8016690 <main+0xb20>)
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	f003 0302 	and.w	r3, r3, #2
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	f000 83d2 	beq.w	8016ba4 <main+0x1034>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016400:	4ba2      	ldr	r3, [pc, #648]	; (801668c <main+0xb1c>)
 8016402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016406:	461a      	mov	r2, r3
 8016408:	4ba2      	ldr	r3, [pc, #648]	; (8016694 <main+0xb24>)
 801640a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801640e:	4aa2      	ldr	r2, [pc, #648]	; (8016698 <main+0xb28>)
 8016410:	00db      	lsls	r3, r3, #3
 8016412:	4413      	add	r3, r2
 8016414:	799b      	ldrb	r3, [r3, #6]
 8016416:	4a9d      	ldr	r2, [pc, #628]	; (801668c <main+0xb1c>)
 8016418:	f9b2 2000 	ldrsh.w	r2, [r2]
 801641c:	4611      	mov	r1, r2
 801641e:	4a9d      	ldr	r2, [pc, #628]	; (8016694 <main+0xb24>)
 8016420:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016424:	4610      	mov	r0, r2
 8016426:	f043 0320 	orr.w	r3, r3, #32
 801642a:	b2d9      	uxtb	r1, r3
 801642c:	4a9a      	ldr	r2, [pc, #616]	; (8016698 <main+0xb28>)
 801642e:	00c3      	lsls	r3, r0, #3
 8016430:	4413      	add	r3, r2
 8016432:	460a      	mov	r2, r1
 8016434:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016436:	4b95      	ldr	r3, [pc, #596]	; (801668c <main+0xb1c>)
 8016438:	f9b3 3000 	ldrsh.w	r3, [r3]
 801643c:	461a      	mov	r2, r3
 801643e:	4b95      	ldr	r3, [pc, #596]	; (8016694 <main+0xb24>)
 8016440:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016444:	4a94      	ldr	r2, [pc, #592]	; (8016698 <main+0xb28>)
 8016446:	00db      	lsls	r3, r3, #3
 8016448:	4413      	add	r3, r2
 801644a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801644e:	4b8f      	ldr	r3, [pc, #572]	; (801668c <main+0xb1c>)
 8016450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016454:	4619      	mov	r1, r3
 8016456:	4b8f      	ldr	r3, [pc, #572]	; (8016694 <main+0xb24>)
 8016458:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801645c:	4619      	mov	r1, r3
 801645e:	4b8f      	ldr	r3, [pc, #572]	; (801669c <main+0xb2c>)
 8016460:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016464:	429a      	cmp	r2, r3
 8016466:	dc73      	bgt.n	8016550 <main+0x9e0>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016468:	4b88      	ldr	r3, [pc, #544]	; (801668c <main+0xb1c>)
 801646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801646e:	461a      	mov	r2, r3
 8016470:	4b88      	ldr	r3, [pc, #544]	; (8016694 <main+0xb24>)
 8016472:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016476:	2b01      	cmp	r3, #1
 8016478:	d051      	beq.n	801651e <main+0x9ae>
 801647a:	4b84      	ldr	r3, [pc, #528]	; (801668c <main+0xb1c>)
 801647c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016480:	461a      	mov	r2, r3
 8016482:	4b84      	ldr	r3, [pc, #528]	; (8016694 <main+0xb24>)
 8016484:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016488:	2b06      	cmp	r3, #6
 801648a:	d048      	beq.n	801651e <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801648c:	4b7f      	ldr	r3, [pc, #508]	; (801668c <main+0xb1c>)
 801648e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016492:	461a      	mov	r2, r3
 8016494:	4b7f      	ldr	r3, [pc, #508]	; (8016694 <main+0xb24>)
 8016496:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 801649a:	2b0c      	cmp	r3, #12
 801649c:	d03f      	beq.n	801651e <main+0x9ae>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 801649e:	4b7b      	ldr	r3, [pc, #492]	; (801668c <main+0xb1c>)
 80164a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164a4:	461a      	mov	r2, r3
 80164a6:	4b7b      	ldr	r3, [pc, #492]	; (8016694 <main+0xb24>)
 80164a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164ac:	2b1c      	cmp	r3, #28
 80164ae:	d036      	beq.n	801651e <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164b0:	4b76      	ldr	r3, [pc, #472]	; (801668c <main+0xb1c>)
 80164b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164b6:	461a      	mov	r2, r3
 80164b8:	4b76      	ldr	r3, [pc, #472]	; (8016694 <main+0xb24>)
 80164ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 80164be:	2b0f      	cmp	r3, #15
 80164c0:	d02d      	beq.n	801651e <main+0x9ae>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164c2:	4b72      	ldr	r3, [pc, #456]	; (801668c <main+0xb1c>)
 80164c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c8:	461a      	mov	r2, r3
 80164ca:	4b72      	ldr	r3, [pc, #456]	; (8016694 <main+0xb24>)
 80164cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164d0:	2b0e      	cmp	r3, #14
 80164d2:	d024      	beq.n	801651e <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164d4:	4b6d      	ldr	r3, [pc, #436]	; (801668c <main+0xb1c>)
 80164d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164da:	461a      	mov	r2, r3
 80164dc:	4b6d      	ldr	r3, [pc, #436]	; (8016694 <main+0xb24>)
 80164de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 80164e2:	2b0d      	cmp	r3, #13
 80164e4:	d01b      	beq.n	801651e <main+0x9ae>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80164e6:	4b69      	ldr	r3, [pc, #420]	; (801668c <main+0xb1c>)
 80164e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ec:	461a      	mov	r2, r3
 80164ee:	4b69      	ldr	r3, [pc, #420]	; (8016694 <main+0xb24>)
 80164f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80164f4:	2b1a      	cmp	r3, #26
 80164f6:	d012      	beq.n	801651e <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80164f8:	4b64      	ldr	r3, [pc, #400]	; (801668c <main+0xb1c>)
 80164fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164fe:	461a      	mov	r2, r3
 8016500:	4b64      	ldr	r3, [pc, #400]	; (8016694 <main+0xb24>)
 8016502:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016506:	2b02      	cmp	r3, #2
 8016508:	d009      	beq.n	801651e <main+0x9ae>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 801650a:	4b60      	ldr	r3, [pc, #384]	; (801668c <main+0xb1c>)
 801650c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016510:	461a      	mov	r2, r3
 8016512:	4b60      	ldr	r3, [pc, #384]	; (8016694 <main+0xb24>)
 8016514:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016518:	2b24      	cmp	r3, #36	; 0x24
 801651a:	f040 8129 	bne.w	8016770 <main+0xc00>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 801651e:	4b5b      	ldr	r3, [pc, #364]	; (801668c <main+0xb1c>)
 8016520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016524:	461a      	mov	r2, r3
 8016526:	4b5b      	ldr	r3, [pc, #364]	; (8016694 <main+0xb24>)
 8016528:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801652c:	461a      	mov	r2, r3
 801652e:	4b57      	ldr	r3, [pc, #348]	; (801668c <main+0xb1c>)
 8016530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016534:	4619      	mov	r1, r3
 8016536:	4b57      	ldr	r3, [pc, #348]	; (8016694 <main+0xb24>)
 8016538:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801653c:	4618      	mov	r0, r3
 801653e:	4b58      	ldr	r3, [pc, #352]	; (80166a0 <main+0xb30>)
 8016540:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016544:	4a54      	ldr	r2, [pc, #336]	; (8016698 <main+0xb28>)
 8016546:	00c3      	lsls	r3, r0, #3
 8016548:	4413      	add	r3, r2
 801654a:	460a      	mov	r2, r1
 801654c:	809a      	strh	r2, [r3, #4]
 801654e:	e10f      	b.n	8016770 <main+0xc00>
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016550:	4b4e      	ldr	r3, [pc, #312]	; (801668c <main+0xb1c>)
 8016552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016556:	461a      	mov	r2, r3
 8016558:	4b4e      	ldr	r3, [pc, #312]	; (8016694 <main+0xb24>)
 801655a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801655e:	2b08      	cmp	r3, #8
 8016560:	d12a      	bne.n	80165b8 <main+0xa48>
 8016562:	4b4a      	ldr	r3, [pc, #296]	; (801668c <main+0xb1c>)
 8016564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016568:	461a      	mov	r2, r3
 801656a:	4b4a      	ldr	r3, [pc, #296]	; (8016694 <main+0xb24>)
 801656c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016570:	4a49      	ldr	r2, [pc, #292]	; (8016698 <main+0xb28>)
 8016572:	00db      	lsls	r3, r3, #3
 8016574:	4413      	add	r3, r2
 8016576:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801657a:	2b95      	cmp	r3, #149	; 0x95
 801657c:	dd1c      	ble.n	80165b8 <main+0xa48>
	            List[MenuNow[Current]].Val-=25;
 801657e:	4b43      	ldr	r3, [pc, #268]	; (801668c <main+0xb1c>)
 8016580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016584:	461a      	mov	r2, r3
 8016586:	4b43      	ldr	r3, [pc, #268]	; (8016694 <main+0xb24>)
 8016588:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801658c:	4a42      	ldr	r2, [pc, #264]	; (8016698 <main+0xb28>)
 801658e:	00db      	lsls	r3, r3, #3
 8016590:	4413      	add	r3, r2
 8016592:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016596:	b29b      	uxth	r3, r3
 8016598:	3b19      	subs	r3, #25
 801659a:	b29a      	uxth	r2, r3
 801659c:	4b3b      	ldr	r3, [pc, #236]	; (801668c <main+0xb1c>)
 801659e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165a2:	4619      	mov	r1, r3
 80165a4:	4b3b      	ldr	r3, [pc, #236]	; (8016694 <main+0xb24>)
 80165a6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80165aa:	b211      	sxth	r1, r2
 80165ac:	4a3a      	ldr	r2, [pc, #232]	; (8016698 <main+0xb28>)
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	4413      	add	r3, r2
 80165b2:	460a      	mov	r2, r1
 80165b4:	809a      	strh	r2, [r3, #4]
 80165b6:	e0ad      	b.n	8016714 <main+0xba4>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 80165b8:	4b34      	ldr	r3, [pc, #208]	; (801668c <main+0xb1c>)
 80165ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165be:	461a      	mov	r2, r3
 80165c0:	4b34      	ldr	r3, [pc, #208]	; (8016694 <main+0xb24>)
 80165c2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165c6:	2b10      	cmp	r3, #16
 80165c8:	d121      	bne.n	801660e <main+0xa9e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 80165ca:	4b33      	ldr	r3, [pc, #204]	; (8016698 <main+0xb28>)
 80165cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80165d0:	461a      	mov	r2, r3
 80165d2:	4b31      	ldr	r3, [pc, #196]	; (8016698 <main+0xb28>)
 80165d4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80165d8:	4413      	add	r3, r2
 80165da:	2b02      	cmp	r3, #2
 80165dc:	f340 809a 	ble.w	8016714 <main+0xba4>
	                List[MenuNow[Current]].Val--;
 80165e0:	4b2a      	ldr	r3, [pc, #168]	; (801668c <main+0xb1c>)
 80165e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165e6:	461a      	mov	r2, r3
 80165e8:	4b2a      	ldr	r3, [pc, #168]	; (8016694 <main+0xb24>)
 80165ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80165ee:	461a      	mov	r2, r3
 80165f0:	4929      	ldr	r1, [pc, #164]	; (8016698 <main+0xb28>)
 80165f2:	00d3      	lsls	r3, r2, #3
 80165f4:	440b      	add	r3, r1
 80165f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	3b01      	subs	r3, #1
 80165fe:	b29b      	uxth	r3, r3
 8016600:	b218      	sxth	r0, r3
 8016602:	4925      	ldr	r1, [pc, #148]	; (8016698 <main+0xb28>)
 8016604:	00d3      	lsls	r3, r2, #3
 8016606:	440b      	add	r3, r1
 8016608:	4602      	mov	r2, r0
 801660a:	809a      	strh	r2, [r3, #4]
 801660c:	e082      	b.n	8016714 <main+0xba4>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 801660e:	4b1f      	ldr	r3, [pc, #124]	; (801668c <main+0xb1c>)
 8016610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016614:	461a      	mov	r2, r3
 8016616:	4b1f      	ldr	r3, [pc, #124]	; (8016694 <main+0xb24>)
 8016618:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801661c:	2b03      	cmp	r3, #3
 801661e:	d141      	bne.n	80166a4 <main+0xb34>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016620:	4b1d      	ldr	r3, [pc, #116]	; (8016698 <main+0xb28>)
 8016622:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016626:	461a      	mov	r2, r3
 8016628:	4b1b      	ldr	r3, [pc, #108]	; (8016698 <main+0xb28>)
 801662a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801662e:	4413      	add	r3, r2
 8016630:	2b01      	cmp	r3, #1
 8016632:	dc13      	bgt.n	801665c <main+0xaec>
	                List[V0_POSI].Val--;
 8016634:	4b18      	ldr	r3, [pc, #96]	; (8016698 <main+0xb28>)
 8016636:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801663a:	b29b      	uxth	r3, r3
 801663c:	3b01      	subs	r3, #1
 801663e:	b29b      	uxth	r3, r3
 8016640:	b21a      	sxth	r2, r3
 8016642:	4b15      	ldr	r3, [pc, #84]	; (8016698 <main+0xb28>)
 8016644:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016646:	4b14      	ldr	r3, [pc, #80]	; (8016698 <main+0xb28>)
 8016648:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801664c:	b29b      	uxth	r3, r3
 801664e:	3301      	adds	r3, #1
 8016650:	b29b      	uxth	r3, r3
 8016652:	b21a      	sxth	r2, r3
 8016654:	4b10      	ldr	r3, [pc, #64]	; (8016698 <main+0xb28>)
 8016656:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 801665a:	e05b      	b.n	8016714 <main+0xba4>
	              }else List[MenuNow[Current]].Val--;
 801665c:	4b0b      	ldr	r3, [pc, #44]	; (801668c <main+0xb1c>)
 801665e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016662:	461a      	mov	r2, r3
 8016664:	4b0b      	ldr	r3, [pc, #44]	; (8016694 <main+0xb24>)
 8016666:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801666a:	461a      	mov	r2, r3
 801666c:	490a      	ldr	r1, [pc, #40]	; (8016698 <main+0xb28>)
 801666e:	00d3      	lsls	r3, r2, #3
 8016670:	440b      	add	r3, r1
 8016672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016676:	b29b      	uxth	r3, r3
 8016678:	3b01      	subs	r3, #1
 801667a:	b29b      	uxth	r3, r3
 801667c:	b218      	sxth	r0, r3
 801667e:	4906      	ldr	r1, [pc, #24]	; (8016698 <main+0xb28>)
 8016680:	00d3      	lsls	r3, r2, #3
 8016682:	440b      	add	r3, r1
 8016684:	4602      	mov	r2, r0
 8016686:	809a      	strh	r2, [r3, #4]
 8016688:	e044      	b.n	8016714 <main+0xba4>
 801668a:	bf00      	nop
 801668c:	20002654 	.word	0x20002654
 8016690:	2000091a 	.word	0x2000091a
 8016694:	20000514 	.word	0x20000514
 8016698:	20000274 	.word	0x20000274
 801669c:	080022b0 	.word	0x080022b0
 80166a0:	08002254 	.word	0x08002254
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 80166a4:	4b94      	ldr	r3, [pc, #592]	; (80168f8 <main+0xd88>)
 80166a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166aa:	461a      	mov	r2, r3
 80166ac:	4b93      	ldr	r3, [pc, #588]	; (80168fc <main+0xd8c>)
 80166ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166b2:	2b04      	cmp	r3, #4
 80166b4:	d118      	bne.n	80166e8 <main+0xb78>
 80166b6:	4b92      	ldr	r3, [pc, #584]	; (8016900 <main+0xd90>)
 80166b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80166bc:	4b90      	ldr	r3, [pc, #576]	; (8016900 <main+0xd90>)
 80166be:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80166c2:	429a      	cmp	r2, r3
 80166c4:	dc10      	bgt.n	80166e8 <main+0xb78>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 80166c6:	4b8c      	ldr	r3, [pc, #560]	; (80168f8 <main+0xd88>)
 80166c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166cc:	461a      	mov	r2, r3
 80166ce:	4b8b      	ldr	r3, [pc, #556]	; (80168fc <main+0xd8c>)
 80166d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166d4:	4618      	mov	r0, r3
 80166d6:	4b8a      	ldr	r3, [pc, #552]	; (8016900 <main+0xd90>)
 80166d8:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 80166dc:	4a88      	ldr	r2, [pc, #544]	; (8016900 <main+0xd90>)
 80166de:	00c3      	lsls	r3, r0, #3
 80166e0:	4413      	add	r3, r2
 80166e2:	460a      	mov	r2, r1
 80166e4:	809a      	strh	r2, [r3, #4]
 80166e6:	e015      	b.n	8016714 <main+0xba4>
	            else List[MenuNow[Current]].Val--;
 80166e8:	4b83      	ldr	r3, [pc, #524]	; (80168f8 <main+0xd88>)
 80166ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166ee:	461a      	mov	r2, r3
 80166f0:	4b82      	ldr	r3, [pc, #520]	; (80168fc <main+0xd8c>)
 80166f2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80166f6:	461a      	mov	r2, r3
 80166f8:	4981      	ldr	r1, [pc, #516]	; (8016900 <main+0xd90>)
 80166fa:	00d3      	lsls	r3, r2, #3
 80166fc:	440b      	add	r3, r1
 80166fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016702:	b29b      	uxth	r3, r3
 8016704:	3b01      	subs	r3, #1
 8016706:	b29b      	uxth	r3, r3
 8016708:	b218      	sxth	r0, r3
 801670a:	497d      	ldr	r1, [pc, #500]	; (8016900 <main+0xd90>)
 801670c:	00d3      	lsls	r3, r2, #3
 801670e:	440b      	add	r3, r1
 8016710:	4602      	mov	r2, r0
 8016712:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016714:	4b78      	ldr	r3, [pc, #480]	; (80168f8 <main+0xd88>)
 8016716:	f9b3 3000 	ldrsh.w	r3, [r3]
 801671a:	461a      	mov	r2, r3
 801671c:	4b77      	ldr	r3, [pc, #476]	; (80168fc <main+0xd8c>)
 801671e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016722:	2b09      	cmp	r3, #9
 8016724:	d103      	bne.n	801672e <main+0xbbe>
	              List[VIEWPOSI].Val=1 ;
 8016726:	4b76      	ldr	r3, [pc, #472]	; (8016900 <main+0xd90>)
 8016728:	2201      	movs	r2, #1
 801672a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 801672e:	4b72      	ldr	r3, [pc, #456]	; (80168f8 <main+0xd88>)
 8016730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016734:	461a      	mov	r2, r3
 8016736:	4b71      	ldr	r3, [pc, #452]	; (80168fc <main+0xd8c>)
 8016738:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801673c:	2b0b      	cmp	r3, #11
 801673e:	d117      	bne.n	8016770 <main+0xc00>
 8016740:	4b6f      	ldr	r3, [pc, #444]	; (8016900 <main+0xd90>)
 8016742:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016746:	4b6e      	ldr	r3, [pc, #440]	; (8016900 <main+0xd90>)
 8016748:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 801674c:	429a      	cmp	r2, r3
 801674e:	dc0f      	bgt.n	8016770 <main+0xc00>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016750:	4b69      	ldr	r3, [pc, #420]	; (80168f8 <main+0xd88>)
 8016752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016756:	461a      	mov	r2, r3
 8016758:	4b68      	ldr	r3, [pc, #416]	; (80168fc <main+0xd8c>)
 801675a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801675e:	4618      	mov	r0, r3
 8016760:	4b67      	ldr	r3, [pc, #412]	; (8016900 <main+0xd90>)
 8016762:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016766:	4a66      	ldr	r2, [pc, #408]	; (8016900 <main+0xd90>)
 8016768:	00c3      	lsls	r3, r0, #3
 801676a:	4413      	add	r3, r2
 801676c:	460a      	mov	r2, r1
 801676e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016770:	4b61      	ldr	r3, [pc, #388]	; (80168f8 <main+0xd88>)
 8016772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016776:	2b02      	cmp	r3, #2
 8016778:	f040 8216 	bne.w	8016ba8 <main+0x1038>
 801677c:	4b61      	ldr	r3, [pc, #388]	; (8016904 <main+0xd94>)
 801677e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016782:	f023 0301 	bic.w	r3, r3, #1
 8016786:	b21a      	sxth	r2, r3
 8016788:	4b5e      	ldr	r3, [pc, #376]	; (8016904 <main+0xd94>)
 801678a:	801a      	strh	r2, [r3, #0]
	        break;
 801678c:	e20c      	b.n	8016ba8 <main+0x1038>

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801678e:	4b5a      	ldr	r3, [pc, #360]	; (80168f8 <main+0xd88>)
 8016790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016794:	2b07      	cmp	r3, #7
 8016796:	d106      	bne.n	80167a6 <main+0xc36>
 8016798:	4b5b      	ldr	r3, [pc, #364]	; (8016908 <main+0xd98>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	f003 0302 	and.w	r3, r3, #2
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	f000 8203 	beq.w	8016bac <main+0x103c>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80167a6:	4b54      	ldr	r3, [pc, #336]	; (80168f8 <main+0xd88>)
 80167a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ac:	461a      	mov	r2, r3
 80167ae:	4b53      	ldr	r3, [pc, #332]	; (80168fc <main+0xd8c>)
 80167b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167b4:	4a52      	ldr	r2, [pc, #328]	; (8016900 <main+0xd90>)
 80167b6:	00db      	lsls	r3, r3, #3
 80167b8:	4413      	add	r3, r2
 80167ba:	799b      	ldrb	r3, [r3, #6]
 80167bc:	4a4e      	ldr	r2, [pc, #312]	; (80168f8 <main+0xd88>)
 80167be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80167c2:	4611      	mov	r1, r2
 80167c4:	4a4d      	ldr	r2, [pc, #308]	; (80168fc <main+0xd8c>)
 80167c6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80167ca:	4610      	mov	r0, r2
 80167cc:	f043 0320 	orr.w	r3, r3, #32
 80167d0:	b2d9      	uxtb	r1, r3
 80167d2:	4a4b      	ldr	r2, [pc, #300]	; (8016900 <main+0xd90>)
 80167d4:	00c3      	lsls	r3, r0, #3
 80167d6:	4413      	add	r3, r2
 80167d8:	460a      	mov	r2, r1
 80167da:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 80167dc:	4b46      	ldr	r3, [pc, #280]	; (80168f8 <main+0xd88>)
 80167de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167e2:	461a      	mov	r2, r3
 80167e4:	4b45      	ldr	r3, [pc, #276]	; (80168fc <main+0xd8c>)
 80167e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167ea:	4a45      	ldr	r2, [pc, #276]	; (8016900 <main+0xd90>)
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	4413      	add	r3, r2
 80167f0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80167f4:	4b40      	ldr	r3, [pc, #256]	; (80168f8 <main+0xd88>)
 80167f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167fa:	4619      	mov	r1, r3
 80167fc:	4b3f      	ldr	r3, [pc, #252]	; (80168fc <main+0xd8c>)
 80167fe:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016802:	4619      	mov	r1, r3
 8016804:	4b41      	ldr	r3, [pc, #260]	; (801690c <main+0xd9c>)
 8016806:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801680a:	429a      	cmp	r2, r3
 801680c:	f2c0 8082 	blt.w	8016914 <main+0xda4>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016810:	4b39      	ldr	r3, [pc, #228]	; (80168f8 <main+0xd88>)
 8016812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016816:	461a      	mov	r2, r3
 8016818:	4b38      	ldr	r3, [pc, #224]	; (80168fc <main+0xd8c>)
 801681a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801681e:	2b01      	cmp	r3, #1
 8016820:	d051      	beq.n	80168c6 <main+0xd56>
 8016822:	4b35      	ldr	r3, [pc, #212]	; (80168f8 <main+0xd88>)
 8016824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016828:	461a      	mov	r2, r3
 801682a:	4b34      	ldr	r3, [pc, #208]	; (80168fc <main+0xd8c>)
 801682c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016830:	2b06      	cmp	r3, #6
 8016832:	d048      	beq.n	80168c6 <main+0xd56>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016834:	4b30      	ldr	r3, [pc, #192]	; (80168f8 <main+0xd88>)
 8016836:	f9b3 3000 	ldrsh.w	r3, [r3]
 801683a:	461a      	mov	r2, r3
 801683c:	4b2f      	ldr	r3, [pc, #188]	; (80168fc <main+0xd8c>)
 801683e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016842:	2b0c      	cmp	r3, #12
 8016844:	d03f      	beq.n	80168c6 <main+0xd56>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016846:	4b2c      	ldr	r3, [pc, #176]	; (80168f8 <main+0xd88>)
 8016848:	f9b3 3000 	ldrsh.w	r3, [r3]
 801684c:	461a      	mov	r2, r3
 801684e:	4b2b      	ldr	r3, [pc, #172]	; (80168fc <main+0xd8c>)
 8016850:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016854:	2b1c      	cmp	r3, #28
 8016856:	d036      	beq.n	80168c6 <main+0xd56>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016858:	4b27      	ldr	r3, [pc, #156]	; (80168f8 <main+0xd88>)
 801685a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801685e:	461a      	mov	r2, r3
 8016860:	4b26      	ldr	r3, [pc, #152]	; (80168fc <main+0xd8c>)
 8016862:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016866:	2b0f      	cmp	r3, #15
 8016868:	d02d      	beq.n	80168c6 <main+0xd56>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801686a:	4b23      	ldr	r3, [pc, #140]	; (80168f8 <main+0xd88>)
 801686c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016870:	461a      	mov	r2, r3
 8016872:	4b22      	ldr	r3, [pc, #136]	; (80168fc <main+0xd8c>)
 8016874:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016878:	2b0e      	cmp	r3, #14
 801687a:	d024      	beq.n	80168c6 <main+0xd56>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801687c:	4b1e      	ldr	r3, [pc, #120]	; (80168f8 <main+0xd88>)
 801687e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016882:	461a      	mov	r2, r3
 8016884:	4b1d      	ldr	r3, [pc, #116]	; (80168fc <main+0xd8c>)
 8016886:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 801688a:	2b0d      	cmp	r3, #13
 801688c:	d01b      	beq.n	80168c6 <main+0xd56>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 801688e:	4b1a      	ldr	r3, [pc, #104]	; (80168f8 <main+0xd88>)
 8016890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016894:	461a      	mov	r2, r3
 8016896:	4b19      	ldr	r3, [pc, #100]	; (80168fc <main+0xd8c>)
 8016898:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801689c:	2b1a      	cmp	r3, #26
 801689e:	d012      	beq.n	80168c6 <main+0xd56>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80168a0:	4b15      	ldr	r3, [pc, #84]	; (80168f8 <main+0xd88>)
 80168a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168a6:	461a      	mov	r2, r3
 80168a8:	4b14      	ldr	r3, [pc, #80]	; (80168fc <main+0xd8c>)
 80168aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 80168ae:	2b02      	cmp	r3, #2
 80168b0:	d009      	beq.n	80168c6 <main+0xd56>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 80168b2:	4b11      	ldr	r3, [pc, #68]	; (80168f8 <main+0xd88>)
 80168b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168b8:	461a      	mov	r2, r3
 80168ba:	4b10      	ldr	r3, [pc, #64]	; (80168fc <main+0xd8c>)
 80168bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168c0:	2b24      	cmp	r3, #36	; 0x24
 80168c2:	f040 8152 	bne.w	8016b6a <main+0xffa>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 80168c6:	4b0c      	ldr	r3, [pc, #48]	; (80168f8 <main+0xd88>)
 80168c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168cc:	461a      	mov	r2, r3
 80168ce:	4b0b      	ldr	r3, [pc, #44]	; (80168fc <main+0xd8c>)
 80168d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168d4:	461a      	mov	r2, r3
 80168d6:	4b08      	ldr	r3, [pc, #32]	; (80168f8 <main+0xd88>)
 80168d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168dc:	4619      	mov	r1, r3
 80168de:	4b07      	ldr	r3, [pc, #28]	; (80168fc <main+0xd8c>)
 80168e0:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80168e4:	4618      	mov	r0, r3
 80168e6:	4b0a      	ldr	r3, [pc, #40]	; (8016910 <main+0xda0>)
 80168e8:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80168ec:	4a04      	ldr	r2, [pc, #16]	; (8016900 <main+0xd90>)
 80168ee:	00c3      	lsls	r3, r0, #3
 80168f0:	4413      	add	r3, r2
 80168f2:	460a      	mov	r2, r1
 80168f4:	809a      	strh	r2, [r3, #4]
 80168f6:	e138      	b.n	8016b6a <main+0xffa>
 80168f8:	20002654 	.word	0x20002654
 80168fc:	20000514 	.word	0x20000514
 8016900:	20000274 	.word	0x20000274
 8016904:	20002656 	.word	0x20002656
 8016908:	2000091a 	.word	0x2000091a
 801690c:	08002254 	.word	0x08002254
 8016910:	080022b0 	.word	0x080022b0
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8016914:	4ba6      	ldr	r3, [pc, #664]	; (8016bb0 <main+0x1040>)
 8016916:	f9b3 3000 	ldrsh.w	r3, [r3]
 801691a:	461a      	mov	r2, r3
 801691c:	4ba5      	ldr	r3, [pc, #660]	; (8016bb4 <main+0x1044>)
 801691e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016922:	2b08      	cmp	r3, #8
 8016924:	d15f      	bne.n	80169e6 <main+0xe76>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 8016926:	4ba2      	ldr	r3, [pc, #648]	; (8016bb0 <main+0x1040>)
 8016928:	f9b3 3000 	ldrsh.w	r3, [r3]
 801692c:	461a      	mov	r2, r3
 801692e:	4ba1      	ldr	r3, [pc, #644]	; (8016bb4 <main+0x1044>)
 8016930:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016934:	4aa0      	ldr	r2, [pc, #640]	; (8016bb8 <main+0x1048>)
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	4413      	add	r3, r2
 801693a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801693e:	461a      	mov	r2, r3
 8016940:	4b9d      	ldr	r3, [pc, #628]	; (8016bb8 <main+0x1048>)
 8016942:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8016946:	4619      	mov	r1, r3
 8016948:	4b9c      	ldr	r3, [pc, #624]	; (8016bbc <main+0x104c>)
 801694a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 801694e:	4619      	mov	r1, r3
 8016950:	4b99      	ldr	r3, [pc, #612]	; (8016bb8 <main+0x1048>)
 8016952:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8016956:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 801695a:	1acb      	subs	r3, r1, r3
 801695c:	429a      	cmp	r2, r3
 801695e:	f280 80e3 	bge.w	8016b28 <main+0xfb8>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8016962:	4b93      	ldr	r3, [pc, #588]	; (8016bb0 <main+0x1040>)
 8016964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016968:	461a      	mov	r2, r3
 801696a:	4b92      	ldr	r3, [pc, #584]	; (8016bb4 <main+0x1044>)
 801696c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016970:	4a91      	ldr	r2, [pc, #580]	; (8016bb8 <main+0x1048>)
 8016972:	00db      	lsls	r3, r3, #3
 8016974:	4413      	add	r3, r2
 8016976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801697a:	2b96      	cmp	r3, #150	; 0x96
 801697c:	dd1c      	ble.n	80169b8 <main+0xe48>
	                  List[MenuNow[Current]].Val += 25;
 801697e:	4b8c      	ldr	r3, [pc, #560]	; (8016bb0 <main+0x1040>)
 8016980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016984:	461a      	mov	r2, r3
 8016986:	4b8b      	ldr	r3, [pc, #556]	; (8016bb4 <main+0x1044>)
 8016988:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801698c:	4a8a      	ldr	r2, [pc, #552]	; (8016bb8 <main+0x1048>)
 801698e:	00db      	lsls	r3, r3, #3
 8016990:	4413      	add	r3, r2
 8016992:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016996:	b29b      	uxth	r3, r3
 8016998:	3319      	adds	r3, #25
 801699a:	b29a      	uxth	r2, r3
 801699c:	4b84      	ldr	r3, [pc, #528]	; (8016bb0 <main+0x1040>)
 801699e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169a2:	4619      	mov	r1, r3
 80169a4:	4b83      	ldr	r3, [pc, #524]	; (8016bb4 <main+0x1044>)
 80169a6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80169aa:	b211      	sxth	r1, r2
 80169ac:	4a82      	ldr	r2, [pc, #520]	; (8016bb8 <main+0x1048>)
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	4413      	add	r3, r2
 80169b2:	460a      	mov	r2, r1
 80169b4:	809a      	strh	r2, [r3, #4]
 80169b6:	e0b7      	b.n	8016b28 <main+0xfb8>
	                else
	                  List[MenuNow[Current]].Val++;
 80169b8:	4b7d      	ldr	r3, [pc, #500]	; (8016bb0 <main+0x1040>)
 80169ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169be:	461a      	mov	r2, r3
 80169c0:	4b7c      	ldr	r3, [pc, #496]	; (8016bb4 <main+0x1044>)
 80169c2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169c6:	461a      	mov	r2, r3
 80169c8:	497b      	ldr	r1, [pc, #492]	; (8016bb8 <main+0x1048>)
 80169ca:	00d3      	lsls	r3, r2, #3
 80169cc:	440b      	add	r3, r1
 80169ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	3301      	adds	r3, #1
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	b218      	sxth	r0, r3
 80169da:	4977      	ldr	r1, [pc, #476]	; (8016bb8 <main+0x1048>)
 80169dc:	00d3      	lsls	r3, r2, #3
 80169de:	440b      	add	r3, r1
 80169e0:	4602      	mov	r2, r0
 80169e2:	809a      	strh	r2, [r3, #4]
 80169e4:	e0a0      	b.n	8016b28 <main+0xfb8>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 80169e6:	4b72      	ldr	r3, [pc, #456]	; (8016bb0 <main+0x1040>)
 80169e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169ec:	461a      	mov	r2, r3
 80169ee:	4b71      	ldr	r3, [pc, #452]	; (8016bb4 <main+0x1044>)
 80169f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169f4:	2b10      	cmp	r3, #16
 80169f6:	d121      	bne.n	8016a3c <main+0xecc>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 80169f8:	4b6f      	ldr	r3, [pc, #444]	; (8016bb8 <main+0x1048>)
 80169fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80169fe:	461a      	mov	r2, r3
 8016a00:	4b6d      	ldr	r3, [pc, #436]	; (8016bb8 <main+0x1048>)
 8016a02:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a06:	4413      	add	r3, r2
 8016a08:	2bc5      	cmp	r3, #197	; 0xc5
 8016a0a:	f300 808d 	bgt.w	8016b28 <main+0xfb8>
	                 List[MenuNow[Current]].Val++;
 8016a0e:	4b68      	ldr	r3, [pc, #416]	; (8016bb0 <main+0x1040>)
 8016a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a14:	461a      	mov	r2, r3
 8016a16:	4b67      	ldr	r3, [pc, #412]	; (8016bb4 <main+0x1044>)
 8016a18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	4966      	ldr	r1, [pc, #408]	; (8016bb8 <main+0x1048>)
 8016a20:	00d3      	lsls	r3, r2, #3
 8016a22:	440b      	add	r3, r1
 8016a24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	3301      	adds	r3, #1
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	b218      	sxth	r0, r3
 8016a30:	4961      	ldr	r1, [pc, #388]	; (8016bb8 <main+0x1048>)
 8016a32:	00d3      	lsls	r3, r2, #3
 8016a34:	440b      	add	r3, r1
 8016a36:	4602      	mov	r2, r0
 8016a38:	809a      	strh	r2, [r3, #4]
 8016a3a:	e075      	b.n	8016b28 <main+0xfb8>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8016a3c:	4b5c      	ldr	r3, [pc, #368]	; (8016bb0 <main+0x1040>)
 8016a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a42:	461a      	mov	r2, r3
 8016a44:	4b5b      	ldr	r3, [pc, #364]	; (8016bb4 <main+0x1044>)
 8016a46:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a4a:	2b03      	cmp	r3, #3
 8016a4c:	d134      	bne.n	8016ab8 <main+0xf48>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8016a4e:	4b5a      	ldr	r3, [pc, #360]	; (8016bb8 <main+0x1048>)
 8016a50:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a54:	461a      	mov	r2, r3
 8016a56:	4b58      	ldr	r3, [pc, #352]	; (8016bb8 <main+0x1048>)
 8016a58:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a5c:	4413      	add	r3, r2
 8016a5e:	2bc6      	cmp	r3, #198	; 0xc6
 8016a60:	dd13      	ble.n	8016a8a <main+0xf1a>
	                  List[V0_POSI].Val++;
 8016a62:	4b55      	ldr	r3, [pc, #340]	; (8016bb8 <main+0x1048>)
 8016a64:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	3301      	adds	r3, #1
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	b21a      	sxth	r2, r3
 8016a70:	4b51      	ldr	r3, [pc, #324]	; (8016bb8 <main+0x1048>)
 8016a72:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 8016a74:	4b50      	ldr	r3, [pc, #320]	; (8016bb8 <main+0x1048>)
 8016a76:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	3b01      	subs	r3, #1
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	b21a      	sxth	r2, r3
 8016a82:	4b4d      	ldr	r3, [pc, #308]	; (8016bb8 <main+0x1048>)
 8016a84:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016a88:	e04e      	b.n	8016b28 <main+0xfb8>
	                }else List[MenuNow[Current]].Val++;
 8016a8a:	4b49      	ldr	r3, [pc, #292]	; (8016bb0 <main+0x1040>)
 8016a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a90:	461a      	mov	r2, r3
 8016a92:	4b48      	ldr	r3, [pc, #288]	; (8016bb4 <main+0x1044>)
 8016a94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a98:	461a      	mov	r2, r3
 8016a9a:	4947      	ldr	r1, [pc, #284]	; (8016bb8 <main+0x1048>)
 8016a9c:	00d3      	lsls	r3, r2, #3
 8016a9e:	440b      	add	r3, r1
 8016aa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	b218      	sxth	r0, r3
 8016aac:	4942      	ldr	r1, [pc, #264]	; (8016bb8 <main+0x1048>)
 8016aae:	00d3      	lsls	r3, r2, #3
 8016ab0:	440b      	add	r3, r1
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	809a      	strh	r2, [r3, #4]
 8016ab6:	e037      	b.n	8016b28 <main+0xfb8>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 8016ab8:	4b3d      	ldr	r3, [pc, #244]	; (8016bb0 <main+0x1040>)
 8016aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	4b3c      	ldr	r3, [pc, #240]	; (8016bb4 <main+0x1044>)
 8016ac2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ac6:	2b05      	cmp	r3, #5
 8016ac8:	d118      	bne.n	8016afc <main+0xf8c>
 8016aca:	4b3b      	ldr	r3, [pc, #236]	; (8016bb8 <main+0x1048>)
 8016acc:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8016ad0:	4b39      	ldr	r3, [pc, #228]	; (8016bb8 <main+0x1048>)
 8016ad2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	db10      	blt.n	8016afc <main+0xf8c>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 8016ada:	4b35      	ldr	r3, [pc, #212]	; (8016bb0 <main+0x1040>)
 8016adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	4b34      	ldr	r3, [pc, #208]	; (8016bb4 <main+0x1044>)
 8016ae4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	4b33      	ldr	r3, [pc, #204]	; (8016bb8 <main+0x1048>)
 8016aec:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 8016af0:	4a31      	ldr	r2, [pc, #196]	; (8016bb8 <main+0x1048>)
 8016af2:	00c3      	lsls	r3, r0, #3
 8016af4:	4413      	add	r3, r2
 8016af6:	460a      	mov	r2, r1
 8016af8:	809a      	strh	r2, [r3, #4]
 8016afa:	e015      	b.n	8016b28 <main+0xfb8>
	              else List[MenuNow[Current]].Val++;
 8016afc:	4b2c      	ldr	r3, [pc, #176]	; (8016bb0 <main+0x1040>)
 8016afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b02:	461a      	mov	r2, r3
 8016b04:	4b2b      	ldr	r3, [pc, #172]	; (8016bb4 <main+0x1044>)
 8016b06:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	492a      	ldr	r1, [pc, #168]	; (8016bb8 <main+0x1048>)
 8016b0e:	00d3      	lsls	r3, r2, #3
 8016b10:	440b      	add	r3, r1
 8016b12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b16:	b29b      	uxth	r3, r3
 8016b18:	3301      	adds	r3, #1
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	b218      	sxth	r0, r3
 8016b1e:	4926      	ldr	r1, [pc, #152]	; (8016bb8 <main+0x1048>)
 8016b20:	00d3      	lsls	r3, r2, #3
 8016b22:	440b      	add	r3, r1
 8016b24:	4602      	mov	r2, r0
 8016b26:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 8016b28:	4b21      	ldr	r3, [pc, #132]	; (8016bb0 <main+0x1040>)
 8016b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b2e:	461a      	mov	r2, r3
 8016b30:	4b20      	ldr	r3, [pc, #128]	; (8016bb4 <main+0x1044>)
 8016b32:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b36:	2b0a      	cmp	r3, #10
 8016b38:	d117      	bne.n	8016b6a <main+0xffa>
 8016b3a:	4b1f      	ldr	r3, [pc, #124]	; (8016bb8 <main+0x1048>)
 8016b3c:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8016b40:	4b1d      	ldr	r3, [pc, #116]	; (8016bb8 <main+0x1048>)
 8016b42:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016b46:	429a      	cmp	r2, r3
 8016b48:	db0f      	blt.n	8016b6a <main+0xffa>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8016b4a:	4b19      	ldr	r3, [pc, #100]	; (8016bb0 <main+0x1040>)
 8016b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b50:	461a      	mov	r2, r3
 8016b52:	4b18      	ldr	r3, [pc, #96]	; (8016bb4 <main+0x1044>)
 8016b54:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b58:	4618      	mov	r0, r3
 8016b5a:	4b17      	ldr	r3, [pc, #92]	; (8016bb8 <main+0x1048>)
 8016b5c:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8016b60:	4a15      	ldr	r2, [pc, #84]	; (8016bb8 <main+0x1048>)
 8016b62:	00c3      	lsls	r3, r0, #3
 8016b64:	4413      	add	r3, r2
 8016b66:	460a      	mov	r2, r1
 8016b68:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016b6a:	4b11      	ldr	r3, [pc, #68]	; (8016bb0 <main+0x1040>)
 8016b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b70:	2b02      	cmp	r3, #2
 8016b72:	d127      	bne.n	8016bc4 <main+0x1054>
 8016b74:	4b12      	ldr	r3, [pc, #72]	; (8016bc0 <main+0x1050>)
 8016b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b7a:	f023 0301 	bic.w	r3, r3, #1
 8016b7e:	b21a      	sxth	r2, r3
 8016b80:	4b0f      	ldr	r3, [pc, #60]	; (8016bc0 <main+0x1050>)
 8016b82:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 8016b84:	4b0c      	ldr	r3, [pc, #48]	; (8016bb8 <main+0x1048>)
 8016b86:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8016b8a:	2b04      	cmp	r3, #4
 8016b8c:	d11a      	bne.n	8016bc4 <main+0x1054>
 8016b8e:	f7f5 fe0d 	bl	800c7ac <ADC_Start>
	        break;
 8016b92:	e017      	b.n	8016bc4 <main+0x1054>
	         break;
 8016b94:	bf00      	nop
 8016b96:	e016      	b.n	8016bc6 <main+0x1056>
	         break;
 8016b98:	bf00      	nop
 8016b9a:	e014      	b.n	8016bc6 <main+0x1056>
	        break;
 8016b9c:	bf00      	nop
 8016b9e:	e012      	b.n	8016bc6 <main+0x1056>
	        break;
 8016ba0:	bf00      	nop
 8016ba2:	e010      	b.n	8016bc6 <main+0x1056>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016ba4:	bf00      	nop
 8016ba6:	e00e      	b.n	8016bc6 <main+0x1056>
	        break;
 8016ba8:	bf00      	nop
 8016baa:	e00c      	b.n	8016bc6 <main+0x1056>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016bac:	bf00      	nop
 8016bae:	e00a      	b.n	8016bc6 <main+0x1056>
 8016bb0:	20002654 	.word	0x20002654
 8016bb4:	20000514 	.word	0x20000514
 8016bb8:	20000274 	.word	0x20000274
 8016bbc:	0800230c 	.word	0x0800230c
 8016bc0:	20002656 	.word	0x20002656
	        break;
 8016bc4:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 8016bc6:	4b1b      	ldr	r3, [pc, #108]	; (8016c34 <main+0x10c4>)
 8016bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bcc:	461a      	mov	r2, r3
 8016bce:	4b1a      	ldr	r3, [pc, #104]	; (8016c38 <main+0x10c8>)
 8016bd0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bd4:	4a19      	ldr	r2, [pc, #100]	; (8016c3c <main+0x10cc>)
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	4413      	add	r3, r2
 8016bda:	799b      	ldrb	r3, [r3, #6]
 8016bdc:	4a15      	ldr	r2, [pc, #84]	; (8016c34 <main+0x10c4>)
 8016bde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016be2:	4611      	mov	r1, r2
 8016be4:	4a14      	ldr	r2, [pc, #80]	; (8016c38 <main+0x10c8>)
 8016be6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016bea:	4610      	mov	r0, r2
 8016bec:	f043 0320 	orr.w	r3, r3, #32
 8016bf0:	b2d9      	uxtb	r1, r3
 8016bf2:	4a12      	ldr	r2, [pc, #72]	; (8016c3c <main+0x10cc>)
 8016bf4:	00c3      	lsls	r3, r0, #3
 8016bf6:	4413      	add	r3, r2
 8016bf8:	460a      	mov	r2, r1
 8016bfa:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 8016bfc:	4b0f      	ldr	r3, [pc, #60]	; (8016c3c <main+0x10cc>)
 8016bfe:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	461a      	mov	r2, r3
 8016c06:	0112      	lsls	r2, r2, #4
 8016c08:	1ad3      	subs	r3, r2, r3
 8016c0a:	009b      	lsls	r3, r3, #2
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	b21a      	sxth	r2, r3
 8016c10:	4b0b      	ldr	r3, [pc, #44]	; (8016c40 <main+0x10d0>)
 8016c12:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 8016c14:	4b0b      	ldr	r3, [pc, #44]	; (8016c44 <main+0x10d4>)
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	f003 0302 	and.w	r3, r3, #2
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <main+0x10b4>
 8016c20:	f7fd f972 	bl	8013f08 <Show_List>
	      Update_Title();
 8016c24:	f7fa ffa4 	bl	8011b70 <Update_Title>
	      Key_Buffer = 0;
 8016c28:	4b07      	ldr	r3, [pc, #28]	; (8016c48 <main+0x10d8>)
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8016c2e:	f7ff b852 	b.w	8015cd6 <main+0x166>
 8016c32:	bf00      	nop
 8016c34:	20002654 	.word	0x20002654
 8016c38:	20000514 	.word	0x20000514
 8016c3c:	20000274 	.word	0x20000274
 8016c40:	20002652 	.word	0x20002652
 8016c44:	2000091a 	.word	0x2000091a
 8016c48:	2000072e 	.word	0x2000072e

08016c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b094      	sub	sp, #80	; 0x50
 8016c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016c52:	f107 031c 	add.w	r3, r7, #28
 8016c56:	2234      	movs	r2, #52	; 0x34
 8016c58:	2100      	movs	r1, #0
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f00f fc06 	bl	802646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016c60:	f107 0308 	add.w	r3, r7, #8
 8016c64:	2200      	movs	r2, #0
 8016c66:	601a      	str	r2, [r3, #0]
 8016c68:	605a      	str	r2, [r3, #4]
 8016c6a:	609a      	str	r2, [r3, #8]
 8016c6c:	60da      	str	r2, [r3, #12]
 8016c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016c70:	2300      	movs	r3, #0
 8016c72:	607b      	str	r3, [r7, #4]
 8016c74:	4b2d      	ldr	r3, [pc, #180]	; (8016d2c <SystemClock_Config+0xe0>)
 8016c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c78:	4a2c      	ldr	r2, [pc, #176]	; (8016d2c <SystemClock_Config+0xe0>)
 8016c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8016c80:	4b2a      	ldr	r3, [pc, #168]	; (8016d2c <SystemClock_Config+0xe0>)
 8016c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016c88:	607b      	str	r3, [r7, #4]
 8016c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	603b      	str	r3, [r7, #0]
 8016c90:	4b27      	ldr	r3, [pc, #156]	; (8016d30 <SystemClock_Config+0xe4>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	4a26      	ldr	r2, [pc, #152]	; (8016d30 <SystemClock_Config+0xe4>)
 8016c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016c9a:	6013      	str	r3, [r2, #0]
 8016c9c:	4b24      	ldr	r3, [pc, #144]	; (8016d30 <SystemClock_Config+0xe4>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016ca4:	603b      	str	r3, [r7, #0]
 8016ca6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8016ca8:	2301      	movs	r3, #1
 8016caa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016cb2:	2302      	movs	r3, #2
 8016cb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016cba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8016cbc:	2319      	movs	r3, #25
 8016cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8016cc0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016cc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016cc6:	2302      	movs	r3, #2
 8016cc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8016cca:	2305      	movs	r3, #5
 8016ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8016cce:	2302      	movs	r3, #2
 8016cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016cd2:	f107 031c 	add.w	r3, r7, #28
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f004 ff30 	bl	801bb3c <HAL_RCC_OscConfig>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d001      	beq.n	8016ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8016ce2:	f000 fc3b 	bl	801755c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8016ce6:	f004 f913 	bl	801af10 <HAL_PWREx_EnableOverDrive>
 8016cea:	4603      	mov	r3, r0
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d001      	beq.n	8016cf4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8016cf0:	f000 fc34 	bl	801755c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016cf4:	230f      	movs	r3, #15
 8016cf6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016cf8:	2302      	movs	r3, #2
 8016cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016d00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016d04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016d0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016d0c:	f107 0308 	add.w	r3, r7, #8
 8016d10:	2105      	movs	r1, #5
 8016d12:	4618      	mov	r0, r3
 8016d14:	f004 f94c 	bl	801afb0 <HAL_RCC_ClockConfig>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d001      	beq.n	8016d22 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8016d1e:	f000 fc1d 	bl	801755c <Error_Handler>
  }
}
 8016d22:	bf00      	nop
 8016d24:	3750      	adds	r7, #80	; 0x50
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop
 8016d2c:	40023800 	.word	0x40023800
 8016d30:	40007000 	.word	0x40007000

08016d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016d3a:	463b      	mov	r3, r7
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	601a      	str	r2, [r3, #0]
 8016d40:	605a      	str	r2, [r3, #4]
 8016d42:	609a      	str	r2, [r3, #8]
 8016d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8016d46:	4b22      	ldr	r3, [pc, #136]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d48:	4a22      	ldr	r2, [pc, #136]	; (8016dd4 <MX_ADC1_Init+0xa0>)
 8016d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016d4c:	4b20      	ldr	r3, [pc, #128]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016d52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8016d54:	4b1e      	ldr	r3, [pc, #120]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d56:	2200      	movs	r2, #0
 8016d58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8016d5a:	4b1d      	ldr	r3, [pc, #116]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016d60:	4b1b      	ldr	r3, [pc, #108]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d62:	2200      	movs	r2, #0
 8016d64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016d66:	4b1a      	ldr	r3, [pc, #104]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d68:	2200      	movs	r2, #0
 8016d6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016d6e:	4b18      	ldr	r3, [pc, #96]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016d76:	4b16      	ldr	r3, [pc, #88]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d78:	2200      	movs	r2, #0
 8016d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016d7c:	4b14      	ldr	r3, [pc, #80]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d7e:	2200      	movs	r2, #0
 8016d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016d82:	4b13      	ldr	r3, [pc, #76]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d84:	2201      	movs	r2, #1
 8016d86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8016d88:	4b11      	ldr	r3, [pc, #68]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016d90:	4b0f      	ldr	r3, [pc, #60]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d92:	2201      	movs	r2, #1
 8016d94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8016d96:	480e      	ldr	r0, [pc, #56]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016d98:	f001 f9f0 	bl	801817c <HAL_ADC_Init>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d001      	beq.n	8016da6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8016da2:	f000 fbdb 	bl	801755c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8016da6:	2306      	movs	r3, #6
 8016da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016daa:	2301      	movs	r3, #1
 8016dac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016dae:	2300      	movs	r3, #0
 8016db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016db2:	463b      	mov	r3, r7
 8016db4:	4619      	mov	r1, r3
 8016db6:	4806      	ldr	r0, [pc, #24]	; (8016dd0 <MX_ADC1_Init+0x9c>)
 8016db8:	f001 fa24 	bl	8018204 <HAL_ADC_ConfigChannel>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d001      	beq.n	8016dc6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8016dc2:	f000 fbcb 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8016dc6:	bf00      	nop
 8016dc8:	3710      	adds	r7, #16
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	bf00      	nop
 8016dd0:	200066ac 	.word	0x200066ac
 8016dd4:	40012000 	.word	0x40012000

08016dd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b084      	sub	sp, #16
 8016ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016dde:	463b      	mov	r3, r7
 8016de0:	2200      	movs	r2, #0
 8016de2:	601a      	str	r2, [r3, #0]
 8016de4:	605a      	str	r2, [r3, #4]
 8016de6:	609a      	str	r2, [r3, #8]
 8016de8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8016dea:	4b22      	ldr	r3, [pc, #136]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016dec:	4a22      	ldr	r2, [pc, #136]	; (8016e78 <MX_ADC2_Init+0xa0>)
 8016dee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016df0:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016df2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016df6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8016df8:	4b1e      	ldr	r3, [pc, #120]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8016dfe:	4b1d      	ldr	r3, [pc, #116]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e00:	2200      	movs	r2, #0
 8016e02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8016e04:	4b1b      	ldr	r3, [pc, #108]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e06:	2200      	movs	r2, #0
 8016e08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8016e0a:	4b1a      	ldr	r3, [pc, #104]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8016e12:	4b18      	ldr	r3, [pc, #96]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8016e1a:	4b16      	ldr	r3, [pc, #88]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016e20:	4b14      	ldr	r3, [pc, #80]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e22:	2200      	movs	r2, #0
 8016e24:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8016e26:	4b13      	ldr	r3, [pc, #76]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e28:	2201      	movs	r2, #1
 8016e2a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8016e2c:	4b11      	ldr	r3, [pc, #68]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e2e:	2200      	movs	r2, #0
 8016e30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016e34:	4b0f      	ldr	r3, [pc, #60]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e36:	2201      	movs	r2, #1
 8016e38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8016e3a:	480e      	ldr	r0, [pc, #56]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e3c:	f001 f99e 	bl	801817c <HAL_ADC_Init>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d001      	beq.n	8016e4a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8016e46:	f000 fb89 	bl	801755c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8016e4a:	2307      	movs	r3, #7
 8016e4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8016e4e:	2301      	movs	r3, #1
 8016e50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016e52:	2300      	movs	r3, #0
 8016e54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8016e56:	463b      	mov	r3, r7
 8016e58:	4619      	mov	r1, r3
 8016e5a:	4806      	ldr	r0, [pc, #24]	; (8016e74 <MX_ADC2_Init+0x9c>)
 8016e5c:	f001 f9d2 	bl	8018204 <HAL_ADC_ConfigChannel>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d001      	beq.n	8016e6a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8016e66:	f000 fb79 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8016e6a:	bf00      	nop
 8016e6c:	3710      	adds	r7, #16
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	200066f4 	.word	0x200066f4
 8016e78:	40012100 	.word	0x40012100

08016e7c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8016e82:	463b      	mov	r3, r7
 8016e84:	2200      	movs	r2, #0
 8016e86:	601a      	str	r2, [r3, #0]
 8016e88:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8016e8a:	4b19      	ldr	r3, [pc, #100]	; (8016ef0 <MX_DAC_Init+0x74>)
 8016e8c:	4a19      	ldr	r2, [pc, #100]	; (8016ef4 <MX_DAC_Init+0x78>)
 8016e8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8016e90:	4817      	ldr	r0, [pc, #92]	; (8016ef0 <MX_DAC_Init+0x74>)
 8016e92:	f001 fcf6 	bl	8018882 <HAL_DAC_Init>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d001      	beq.n	8016ea0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8016e9c:	f000 fb5e 	bl	801755c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8016ea8:	463b      	mov	r3, r7
 8016eaa:	2200      	movs	r2, #0
 8016eac:	4619      	mov	r1, r3
 8016eae:	4810      	ldr	r0, [pc, #64]	; (8016ef0 <MX_DAC_Init+0x74>)
 8016eb0:	f001 fd2e 	bl	8018910 <HAL_DAC_ConfigChannel>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d001      	beq.n	8016ebe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8016eba:	f000 fb4f 	bl	801755c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8016ebe:	2302      	movs	r3, #2
 8016ec0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8016ec2:	463b      	mov	r3, r7
 8016ec4:	2210      	movs	r2, #16
 8016ec6:	4619      	mov	r1, r3
 8016ec8:	4809      	ldr	r0, [pc, #36]	; (8016ef0 <MX_DAC_Init+0x74>)
 8016eca:	f001 fd21 	bl	8018910 <HAL_DAC_ConfigChannel>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d001      	beq.n	8016ed8 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8016ed4:	f000 fb42 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 8016ed8:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8016edc:	2200      	movs	r2, #0
 8016ede:	2110      	movs	r1, #16
 8016ee0:	4803      	ldr	r0, [pc, #12]	; (8016ef0 <MX_DAC_Init+0x74>)
 8016ee2:	f001 fcf0 	bl	80188c6 <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 8016ee6:	bf00      	nop
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	2000679c 	.word	0x2000679c
 8016ef4:	40007400 	.word	0x40007400

08016ef8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016efc:	4b17      	ldr	r3, [pc, #92]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016efe:	4a18      	ldr	r2, [pc, #96]	; (8016f60 <MX_SPI2_Init+0x68>)
 8016f00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8016f02:	4b16      	ldr	r3, [pc, #88]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016f08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016f0a:	4b14      	ldr	r3, [pc, #80]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8016f10:	4b12      	ldr	r3, [pc, #72]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f12:	2200      	movs	r2, #0
 8016f14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8016f16:	4b11      	ldr	r3, [pc, #68]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f18:	2202      	movs	r2, #2
 8016f1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016f1c:	4b0f      	ldr	r3, [pc, #60]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f1e:	2201      	movs	r2, #1
 8016f20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8016f22:	4b0e      	ldr	r3, [pc, #56]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016f2a:	4b0c      	ldr	r3, [pc, #48]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f30:	4b0a      	ldr	r3, [pc, #40]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f32:	2200      	movs	r2, #0
 8016f34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f36:	4b09      	ldr	r3, [pc, #36]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f3c:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f3e:	2200      	movs	r2, #0
 8016f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8016f42:	4b06      	ldr	r3, [pc, #24]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f44:	220a      	movs	r2, #10
 8016f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8016f48:	4804      	ldr	r0, [pc, #16]	; (8016f5c <MX_SPI2_Init+0x64>)
 8016f4a:	f005 f895 	bl	801c078 <HAL_SPI_Init>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d001      	beq.n	8016f58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8016f54:	f000 fb02 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016f58:	bf00      	nop
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	20006810 	.word	0x20006810
 8016f60:	40003800 	.word	0x40003800

08016f64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8016f68:	4b18      	ldr	r3, [pc, #96]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f6a:	4a19      	ldr	r2, [pc, #100]	; (8016fd0 <MX_SPI3_Init+0x6c>)
 8016f6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016f6e:	4b17      	ldr	r3, [pc, #92]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016f74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8016f76:	4b15      	ldr	r3, [pc, #84]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f78:	2200      	movs	r2, #0
 8016f7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8016f7c:	4b13      	ldr	r3, [pc, #76]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f82:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016f84:	4b11      	ldr	r3, [pc, #68]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f86:	2200      	movs	r2, #0
 8016f88:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016f8a:	4b10      	ldr	r3, [pc, #64]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016f90:	4b0e      	ldr	r3, [pc, #56]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f96:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016f98:	4b0c      	ldr	r3, [pc, #48]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016f9a:	2210      	movs	r2, #16
 8016f9c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f9e:	4b0b      	ldr	r3, [pc, #44]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016fa4:	4b09      	ldr	r3, [pc, #36]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016faa:	4b08      	ldr	r3, [pc, #32]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8016fb0:	4b06      	ldr	r3, [pc, #24]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016fb2:	220a      	movs	r2, #10
 8016fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016fb6:	4805      	ldr	r0, [pc, #20]	; (8016fcc <MX_SPI3_Init+0x68>)
 8016fb8:	f005 f85e 	bl	801c078 <HAL_SPI_Init>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d001      	beq.n	8016fc6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8016fc2:	f000 facb 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016fc6:	bf00      	nop
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	20006868 	.word	0x20006868
 8016fd0:	40003c00 	.word	0x40003c00

08016fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b086      	sub	sp, #24
 8016fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016fda:	f107 0308 	add.w	r3, r7, #8
 8016fde:	2200      	movs	r2, #0
 8016fe0:	601a      	str	r2, [r3, #0]
 8016fe2:	605a      	str	r2, [r3, #4]
 8016fe4:	609a      	str	r2, [r3, #8]
 8016fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016fe8:	463b      	mov	r3, r7
 8016fea:	2200      	movs	r2, #0
 8016fec:	601a      	str	r2, [r3, #0]
 8016fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 8016ff0:	4b30      	ldr	r3, [pc, #192]	; (80170b4 <MX_TIM1_Init+0xe0>)
 8016ff2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016ff6:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 8016ff8:	4b2e      	ldr	r3, [pc, #184]	; (80170b4 <MX_TIM1_Init+0xe0>)
 8016ffa:	2270      	movs	r2, #112	; 0x70
 8016ffc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8016ffe:	4b2e      	ldr	r3, [pc, #184]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017000:	4a2e      	ldr	r2, [pc, #184]	; (80170bc <MX_TIM1_Init+0xe8>)
 8017002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 8017004:	4b2c      	ldr	r3, [pc, #176]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017006:	2259      	movs	r2, #89	; 0x59
 8017008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 801700a:	4b2b      	ldr	r3, [pc, #172]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801700c:	2210      	movs	r2, #16
 801700e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8017010:	4b29      	ldr	r3, [pc, #164]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017012:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017018:	4b27      	ldr	r3, [pc, #156]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801701a:	2200      	movs	r2, #0
 801701c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801701e:	4b26      	ldr	r3, [pc, #152]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017020:	2200      	movs	r2, #0
 8017022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017024:	4b24      	ldr	r3, [pc, #144]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017026:	2280      	movs	r2, #128	; 0x80
 8017028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801702a:	4823      	ldr	r0, [pc, #140]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801702c:	f005 feea 	bl	801ce04 <HAL_TIM_Base_Init>
 8017030:	4603      	mov	r3, r0
 8017032:	2b00      	cmp	r3, #0
 8017034:	d001      	beq.n	801703a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8017036:	f000 fa91 	bl	801755c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801703a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801703e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017040:	f107 0308 	add.w	r3, r7, #8
 8017044:	4619      	mov	r1, r3
 8017046:	481c      	ldr	r0, [pc, #112]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017048:	f006 f900 	bl	801d24c <HAL_TIM_ConfigClockSource>
 801704c:	4603      	mov	r3, r0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d001      	beq.n	8017056 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017052:	f000 fa83 	bl	801755c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017056:	2300      	movs	r3, #0
 8017058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801705a:	2300      	movs	r3, #0
 801705c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801705e:	463b      	mov	r3, r7
 8017060:	4619      	mov	r1, r3
 8017062:	4815      	ldr	r0, [pc, #84]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017064:	f006 fccc 	bl	801da00 <HAL_TIMEx_MasterConfigSynchronization>
 8017068:	4603      	mov	r3, r0
 801706a:	2b00      	cmp	r3, #0
 801706c:	d001      	beq.n	8017072 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 801706e:	f000 fa75 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017072:	2201      	movs	r2, #1
 8017074:	490f      	ldr	r1, [pc, #60]	; (80170b4 <MX_TIM1_Init+0xe0>)
 8017076:	4810      	ldr	r0, [pc, #64]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017078:	f006 f88c 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 801707c:	4b0e      	ldr	r3, [pc, #56]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	4b0d      	ldr	r3, [pc, #52]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f042 0204 	orr.w	r2, r2, #4
 801708a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 801708c:	4b0a      	ldr	r3, [pc, #40]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	68da      	ldr	r2, [r3, #12]
 8017092:	4b09      	ldr	r3, [pc, #36]	; (80170b8 <MX_TIM1_Init+0xe4>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801709a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 801709c:	4b06      	ldr	r3, [pc, #24]	; (80170b8 <MX_TIM1_Init+0xe4>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	4b05      	ldr	r3, [pc, #20]	; (80170b8 <MX_TIM1_Init+0xe4>)
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	f042 0201 	orr.w	r2, r2, #1
 80170aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 80170ac:	bf00      	nop
 80170ae:	3718      	adds	r7, #24
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	200069e0 	.word	0x200069e0
 80170b8:	200068c0 	.word	0x200068c0
 80170bc:	40010000 	.word	0x40010000

080170c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b086      	sub	sp, #24
 80170c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80170c6:	f107 0308 	add.w	r3, r7, #8
 80170ca:	2200      	movs	r2, #0
 80170cc:	601a      	str	r2, [r3, #0]
 80170ce:	605a      	str	r2, [r3, #4]
 80170d0:	609a      	str	r2, [r3, #8]
 80170d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80170d4:	463b      	mov	r3, r7
 80170d6:	2200      	movs	r2, #0
 80170d8:	601a      	str	r2, [r3, #0]
 80170da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  octim3.Pulse = 3750;
 80170dc:	4b25      	ldr	r3, [pc, #148]	; (8017174 <MX_TIM3_Init+0xb4>)
 80170de:	f640 62a6 	movw	r2, #3750	; 0xea6
 80170e2:	605a      	str	r2, [r3, #4]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80170e4:	4b24      	ldr	r3, [pc, #144]	; (8017178 <MX_TIM3_Init+0xb8>)
 80170e6:	4a25      	ldr	r2, [pc, #148]	; (801717c <MX_TIM3_Init+0xbc>)
 80170e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80170ea:	4b23      	ldr	r3, [pc, #140]	; (8017178 <MX_TIM3_Init+0xb8>)
 80170ec:	220b      	movs	r2, #11
 80170ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80170f0:	4b21      	ldr	r3, [pc, #132]	; (8017178 <MX_TIM3_Init+0xb8>)
 80170f2:	2200      	movs	r2, #0
 80170f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80170f6:	4b20      	ldr	r3, [pc, #128]	; (8017178 <MX_TIM3_Init+0xb8>)
 80170f8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80170fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80170fe:	4b1e      	ldr	r3, [pc, #120]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017100:	2200      	movs	r2, #0
 8017102:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017104:	4b1c      	ldr	r3, [pc, #112]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017106:	2280      	movs	r2, #128	; 0x80
 8017108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801710a:	481b      	ldr	r0, [pc, #108]	; (8017178 <MX_TIM3_Init+0xb8>)
 801710c:	f005 fe7a 	bl	801ce04 <HAL_TIM_Base_Init>
 8017110:	4603      	mov	r3, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	d001      	beq.n	801711a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8017116:	f000 fa21 	bl	801755c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801711a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801711e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017120:	f107 0308 	add.w	r3, r7, #8
 8017124:	4619      	mov	r1, r3
 8017126:	4814      	ldr	r0, [pc, #80]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017128:	f006 f890 	bl	801d24c <HAL_TIM_ConfigClockSource>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d001      	beq.n	8017136 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8017132:	f000 fa13 	bl	801755c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017136:	2320      	movs	r3, #32
 8017138:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801713a:	2300      	movs	r3, #0
 801713c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801713e:	463b      	mov	r3, r7
 8017140:	4619      	mov	r1, r3
 8017142:	480d      	ldr	r0, [pc, #52]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017144:	f006 fc5c 	bl	801da00 <HAL_TIMEx_MasterConfigSynchronization>
 8017148:	4603      	mov	r3, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	d001      	beq.n	8017152 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 801714e:	f000 fa05 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim3, &octim3, 1 );
 8017152:	2201      	movs	r2, #1
 8017154:	4907      	ldr	r1, [pc, #28]	; (8017174 <MX_TIM3_Init+0xb4>)
 8017156:	4808      	ldr	r0, [pc, #32]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017158:	f006 f81c 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_ENABLE(&htim3);
 801715c:	4b06      	ldr	r3, [pc, #24]	; (8017178 <MX_TIM3_Init+0xb8>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	4b05      	ldr	r3, [pc, #20]	; (8017178 <MX_TIM3_Init+0xb8>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	f042 0201 	orr.w	r2, r2, #1
 801716a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 2 */

}
 801716c:	bf00      	nop
 801716e:	3718      	adds	r7, #24
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}
 8017174:	200069fc 	.word	0x200069fc
 8017178:	20006908 	.word	0x20006908
 801717c:	40000400 	.word	0x40000400

08017180 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b086      	sub	sp, #24
 8017184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017186:	f107 0308 	add.w	r3, r7, #8
 801718a:	2200      	movs	r2, #0
 801718c:	601a      	str	r2, [r3, #0]
 801718e:	605a      	str	r2, [r3, #4]
 8017190:	609a      	str	r2, [r3, #8]
 8017192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017194:	463b      	mov	r3, r7
 8017196:	2200      	movs	r2, #0
 8017198:	601a      	str	r2, [r3, #0]
 801719a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 801719c:	4b3a      	ldr	r3, [pc, #232]	; (8017288 <MX_TIM5_Init+0x108>)
 801719e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80171a2:	461a      	mov	r2, r3
 80171a4:	4b39      	ldr	r3, [pc, #228]	; (801728c <MX_TIM5_Init+0x10c>)
 80171a6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171aa:	3301      	adds	r3, #1
 80171ac:	0fda      	lsrs	r2, r3, #31
 80171ae:	4413      	add	r3, r2
 80171b0:	105b      	asrs	r3, r3, #1
 80171b2:	461a      	mov	r2, r3
 80171b4:	4b36      	ldr	r3, [pc, #216]	; (8017290 <MX_TIM5_Init+0x110>)
 80171b6:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 80171b8:	4b35      	ldr	r3, [pc, #212]	; (8017290 <MX_TIM5_Init+0x110>)
 80171ba:	2270      	movs	r2, #112	; 0x70
 80171bc:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 80171be:	4b34      	ldr	r3, [pc, #208]	; (8017290 <MX_TIM5_Init+0x110>)
 80171c0:	2204      	movs	r2, #4
 80171c2:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80171c4:	4b33      	ldr	r3, [pc, #204]	; (8017294 <MX_TIM5_Init+0x114>)
 80171c6:	4a34      	ldr	r2, [pc, #208]	; (8017298 <MX_TIM5_Init+0x118>)
 80171c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80171ca:	4b32      	ldr	r3, [pc, #200]	; (8017294 <MX_TIM5_Init+0x114>)
 80171cc:	2209      	movs	r2, #9
 80171ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80171d0:	4b30      	ldr	r3, [pc, #192]	; (8017294 <MX_TIM5_Init+0x114>)
 80171d2:	2200      	movs	r2, #0
 80171d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000;
 80171d6:	4b2f      	ldr	r3, [pc, #188]	; (8017294 <MX_TIM5_Init+0x114>)
 80171d8:	f244 6250 	movw	r2, #18000	; 0x4650
 80171dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80171de:	4b2d      	ldr	r3, [pc, #180]	; (8017294 <MX_TIM5_Init+0x114>)
 80171e0:	2200      	movs	r2, #0
 80171e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80171e4:	4b2b      	ldr	r3, [pc, #172]	; (8017294 <MX_TIM5_Init+0x114>)
 80171e6:	2280      	movs	r2, #128	; 0x80
 80171e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80171ea:	482a      	ldr	r0, [pc, #168]	; (8017294 <MX_TIM5_Init+0x114>)
 80171ec:	f005 fe0a 	bl	801ce04 <HAL_TIM_Base_Init>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d001      	beq.n	80171fa <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80171f6:	f000 f9b1 	bl	801755c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80171fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80171fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017200:	f107 0308 	add.w	r3, r7, #8
 8017204:	4619      	mov	r1, r3
 8017206:	4823      	ldr	r0, [pc, #140]	; (8017294 <MX_TIM5_Init+0x114>)
 8017208:	f006 f820 	bl	801d24c <HAL_TIM_ConfigClockSource>
 801720c:	4603      	mov	r3, r0
 801720e:	2b00      	cmp	r3, #0
 8017210:	d001      	beq.n	8017216 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8017212:	f000 f9a3 	bl	801755c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017216:	2300      	movs	r3, #0
 8017218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801721a:	2300      	movs	r3, #0
 801721c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801721e:	463b      	mov	r3, r7
 8017220:	4619      	mov	r1, r3
 8017222:	481c      	ldr	r0, [pc, #112]	; (8017294 <MX_TIM5_Init+0x114>)
 8017224:	f006 fbec 	bl	801da00 <HAL_TIMEx_MasterConfigSynchronization>
 8017228:	4603      	mov	r3, r0
 801722a:	2b00      	cmp	r3, #0
 801722c:	d001      	beq.n	8017232 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 801722e:	f000 f995 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 8017232:	4b15      	ldr	r3, [pc, #84]	; (8017288 <MX_TIM5_Init+0x108>)
 8017234:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017238:	461a      	mov	r2, r3
 801723a:	4b14      	ldr	r3, [pc, #80]	; (801728c <MX_TIM5_Init+0x10c>)
 801723c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017240:	461a      	mov	r2, r3
 8017242:	4b14      	ldr	r3, [pc, #80]	; (8017294 <MX_TIM5_Init+0x114>)
 8017244:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017246:	4813      	ldr	r0, [pc, #76]	; (8017294 <MX_TIM5_Init+0x114>)
 8017248:	f005 fddc 	bl	801ce04 <HAL_TIM_Base_Init>
 801724c:	4603      	mov	r3, r0
 801724e:	2b00      	cmp	r3, #0
 8017250:	d001      	beq.n	8017256 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017252:	f000 f983 	bl	801755c <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017256:	2203      	movs	r2, #3
 8017258:	490d      	ldr	r1, [pc, #52]	; (8017290 <MX_TIM5_Init+0x110>)
 801725a:	480e      	ldr	r0, [pc, #56]	; (8017294 <MX_TIM5_Init+0x114>)
 801725c:	f005 ff9a 	bl	801d194 <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017260:	4b0c      	ldr	r3, [pc, #48]	; (8017294 <MX_TIM5_Init+0x114>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	4b0b      	ldr	r3, [pc, #44]	; (8017294 <MX_TIM5_Init+0x114>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f042 0204 	orr.w	r2, r2, #4
 801726e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017270:	4b08      	ldr	r3, [pc, #32]	; (8017294 <MX_TIM5_Init+0x114>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	681a      	ldr	r2, [r3, #0]
 8017276:	4b07      	ldr	r3, [pc, #28]	; (8017294 <MX_TIM5_Init+0x114>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	f042 0201 	orr.w	r2, r2, #1
 801727e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017280:	bf00      	nop
 8017282:	3718      	adds	r7, #24
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}
 8017288:	20000274 	.word	0x20000274
 801728c:	08000b84 	.word	0x08000b84
 8017290:	20006a18 	.word	0x20006a18
 8017294:	20006950 	.word	0x20006950
 8017298:	40000c00 	.word	0x40000c00

0801729c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80172a2:	463b      	mov	r3, r7
 80172a4:	2200      	movs	r2, #0
 80172a6:	601a      	str	r2, [r3, #0]
 80172a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80172aa:	4b1d      	ldr	r3, [pc, #116]	; (8017320 <MX_TIM7_Init+0x84>)
 80172ac:	4a1d      	ldr	r2, [pc, #116]	; (8017324 <MX_TIM7_Init+0x88>)
 80172ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 80172b0:	4b1b      	ldr	r3, [pc, #108]	; (8017320 <MX_TIM7_Init+0x84>)
 80172b2:	2202      	movs	r2, #2
 80172b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80172b6:	4b1a      	ldr	r3, [pc, #104]	; (8017320 <MX_TIM7_Init+0x84>)
 80172b8:	2200      	movs	r2, #0
 80172ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80172bc:	4b18      	ldr	r3, [pc, #96]	; (8017320 <MX_TIM7_Init+0x84>)
 80172be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80172c2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80172c4:	4b16      	ldr	r3, [pc, #88]	; (8017320 <MX_TIM7_Init+0x84>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80172ca:	4815      	ldr	r0, [pc, #84]	; (8017320 <MX_TIM7_Init+0x84>)
 80172cc:	f005 fd9a 	bl	801ce04 <HAL_TIM_Base_Init>
 80172d0:	4603      	mov	r3, r0
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d001      	beq.n	80172da <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80172d6:	f000 f941 	bl	801755c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80172da:	2300      	movs	r3, #0
 80172dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80172de:	2300      	movs	r3, #0
 80172e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80172e2:	463b      	mov	r3, r7
 80172e4:	4619      	mov	r1, r3
 80172e6:	480e      	ldr	r0, [pc, #56]	; (8017320 <MX_TIM7_Init+0x84>)
 80172e8:	f006 fb8a 	bl	801da00 <HAL_TIMEx_MasterConfigSynchronization>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80172f2:	f000 f933 	bl	801755c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80172f6:	4b0a      	ldr	r3, [pc, #40]	; (8017320 <MX_TIM7_Init+0x84>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	68da      	ldr	r2, [r3, #12]
 80172fc:	4b08      	ldr	r3, [pc, #32]	; (8017320 <MX_TIM7_Init+0x84>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017304:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 8017306:	4b06      	ldr	r3, [pc, #24]	; (8017320 <MX_TIM7_Init+0x84>)
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	4b04      	ldr	r3, [pc, #16]	; (8017320 <MX_TIM7_Init+0x84>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	f042 0201 	orr.w	r2, r2, #1
 8017314:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 8017316:	bf00      	nop
 8017318:	3708      	adds	r7, #8
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	20006998 	.word	0x20006998
 8017324:	40001400 	.word	0x40001400

08017328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801732e:	2300      	movs	r3, #0
 8017330:	607b      	str	r3, [r7, #4]
 8017332:	4b17      	ldr	r3, [pc, #92]	; (8017390 <MX_DMA_Init+0x68>)
 8017334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017336:	4a16      	ldr	r2, [pc, #88]	; (8017390 <MX_DMA_Init+0x68>)
 8017338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801733c:	6313      	str	r3, [r2, #48]	; 0x30
 801733e:	4b14      	ldr	r3, [pc, #80]	; (8017390 <MX_DMA_Init+0x68>)
 8017340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017346:	607b      	str	r3, [r7, #4]
 8017348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801734a:	2300      	movs	r3, #0
 801734c:	603b      	str	r3, [r7, #0]
 801734e:	4b10      	ldr	r3, [pc, #64]	; (8017390 <MX_DMA_Init+0x68>)
 8017350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017352:	4a0f      	ldr	r2, [pc, #60]	; (8017390 <MX_DMA_Init+0x68>)
 8017354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8017358:	6313      	str	r3, [r2, #48]	; 0x30
 801735a:	4b0d      	ldr	r3, [pc, #52]	; (8017390 <MX_DMA_Init+0x68>)
 801735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801735e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017362:	603b      	str	r3, [r7, #0]
 8017364:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017366:	2200      	movs	r2, #0
 8017368:	2100      	movs	r1, #0
 801736a:	2010      	movs	r0, #16
 801736c:	f001 fa53 	bl	8018816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017370:	2010      	movs	r0, #16
 8017372:	f001 fa6c 	bl	801884e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017376:	2200      	movs	r2, #0
 8017378:	2100      	movs	r1, #0
 801737a:	2038      	movs	r0, #56	; 0x38
 801737c:	f001 fa4b 	bl	8018816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017380:	2038      	movs	r0, #56	; 0x38
 8017382:	f001 fa64 	bl	801884e <HAL_NVIC_EnableIRQ>

}
 8017386:	bf00      	nop
 8017388:	3708      	adds	r7, #8
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	40023800 	.word	0x40023800

08017394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b08a      	sub	sp, #40	; 0x28
 8017398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801739a:	f107 0314 	add.w	r3, r7, #20
 801739e:	2200      	movs	r2, #0
 80173a0:	601a      	str	r2, [r3, #0]
 80173a2:	605a      	str	r2, [r3, #4]
 80173a4:	609a      	str	r2, [r3, #8]
 80173a6:	60da      	str	r2, [r3, #12]
 80173a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80173aa:	2300      	movs	r3, #0
 80173ac:	613b      	str	r3, [r7, #16]
 80173ae:	4b5d      	ldr	r3, [pc, #372]	; (8017524 <MX_GPIO_Init+0x190>)
 80173b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173b2:	4a5c      	ldr	r2, [pc, #368]	; (8017524 <MX_GPIO_Init+0x190>)
 80173b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173b8:	6313      	str	r3, [r2, #48]	; 0x30
 80173ba:	4b5a      	ldr	r3, [pc, #360]	; (8017524 <MX_GPIO_Init+0x190>)
 80173bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173c2:	613b      	str	r3, [r7, #16]
 80173c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80173c6:	2300      	movs	r3, #0
 80173c8:	60fb      	str	r3, [r7, #12]
 80173ca:	4b56      	ldr	r3, [pc, #344]	; (8017524 <MX_GPIO_Init+0x190>)
 80173cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ce:	4a55      	ldr	r2, [pc, #340]	; (8017524 <MX_GPIO_Init+0x190>)
 80173d0:	f043 0301 	orr.w	r3, r3, #1
 80173d4:	6313      	str	r3, [r2, #48]	; 0x30
 80173d6:	4b53      	ldr	r3, [pc, #332]	; (8017524 <MX_GPIO_Init+0x190>)
 80173d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173da:	f003 0301 	and.w	r3, r3, #1
 80173de:	60fb      	str	r3, [r7, #12]
 80173e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80173e2:	2300      	movs	r3, #0
 80173e4:	60bb      	str	r3, [r7, #8]
 80173e6:	4b4f      	ldr	r3, [pc, #316]	; (8017524 <MX_GPIO_Init+0x190>)
 80173e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ea:	4a4e      	ldr	r2, [pc, #312]	; (8017524 <MX_GPIO_Init+0x190>)
 80173ec:	f043 0304 	orr.w	r3, r3, #4
 80173f0:	6313      	str	r3, [r2, #48]	; 0x30
 80173f2:	4b4c      	ldr	r3, [pc, #304]	; (8017524 <MX_GPIO_Init+0x190>)
 80173f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173f6:	f003 0304 	and.w	r3, r3, #4
 80173fa:	60bb      	str	r3, [r7, #8]
 80173fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80173fe:	2300      	movs	r3, #0
 8017400:	607b      	str	r3, [r7, #4]
 8017402:	4b48      	ldr	r3, [pc, #288]	; (8017524 <MX_GPIO_Init+0x190>)
 8017404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017406:	4a47      	ldr	r2, [pc, #284]	; (8017524 <MX_GPIO_Init+0x190>)
 8017408:	f043 0302 	orr.w	r3, r3, #2
 801740c:	6313      	str	r3, [r2, #48]	; 0x30
 801740e:	4b45      	ldr	r3, [pc, #276]	; (8017524 <MX_GPIO_Init+0x190>)
 8017410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017412:	f003 0302 	and.w	r3, r3, #2
 8017416:	607b      	str	r3, [r7, #4]
 8017418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 801741a:	2200      	movs	r2, #0
 801741c:	2104      	movs	r1, #4
 801741e:	4842      	ldr	r0, [pc, #264]	; (8017528 <MX_GPIO_Init+0x194>)
 8017420:	f002 fa66 	bl	80198f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 8017424:	2200      	movs	r2, #0
 8017426:	f44f 6103 	mov.w	r1, #2096	; 0x830
 801742a:	4840      	ldr	r0, [pc, #256]	; (801752c <MX_GPIO_Init+0x198>)
 801742c:	f002 fa60 	bl	80198f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017430:	2200      	movs	r2, #0
 8017432:	f240 2101 	movw	r1, #513	; 0x201
 8017436:	483e      	ldr	r0, [pc, #248]	; (8017530 <MX_GPIO_Init+0x19c>)
 8017438:	f002 fa5a 	bl	80198f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 801743c:	2201      	movs	r2, #1
 801743e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017442:	483b      	ldr	r0, [pc, #236]	; (8017530 <MX_GPIO_Init+0x19c>)
 8017444:	f002 fa54 	bl	80198f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017448:	2201      	movs	r2, #1
 801744a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801744e:	4837      	ldr	r0, [pc, #220]	; (801752c <MX_GPIO_Init+0x198>)
 8017450:	f002 fa4e 	bl	80198f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017454:	2304      	movs	r3, #4
 8017456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017458:	2301      	movs	r3, #1
 801745a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801745c:	2300      	movs	r3, #0
 801745e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017460:	2300      	movs	r3, #0
 8017462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017464:	f107 0314 	add.w	r3, r7, #20
 8017468:	4619      	mov	r1, r3
 801746a:	482f      	ldr	r0, [pc, #188]	; (8017528 <MX_GPIO_Init+0x194>)
 801746c:	f002 f894 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin;
 8017470:	f44f 6303 	mov.w	r3, #2096	; 0x830
 8017474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017476:	2301      	movs	r3, #1
 8017478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801747a:	2300      	movs	r3, #0
 801747c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801747e:	2300      	movs	r3, #0
 8017480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017482:	f107 0314 	add.w	r3, r7, #20
 8017486:	4619      	mov	r1, r3
 8017488:	4828      	ldr	r0, [pc, #160]	; (801752c <MX_GPIO_Init+0x198>)
 801748a:	f002 f885 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|Dres_Pin;
 801748e:	f240 2301 	movw	r3, #513	; 0x201
 8017492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017494:	2301      	movs	r3, #1
 8017496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017498:	2300      	movs	r3, #0
 801749a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801749c:	2300      	movs	r3, #0
 801749e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80174a0:	f107 0314 	add.w	r3, r7, #20
 80174a4:	4619      	mov	r1, r3
 80174a6:	4822      	ldr	r0, [pc, #136]	; (8017530 <MX_GPIO_Init+0x19c>)
 80174a8:	f002 f876 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 80174ac:	2304      	movs	r3, #4
 80174ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80174b0:	2300      	movs	r3, #0
 80174b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174b4:	2300      	movs	r3, #0
 80174b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 80174b8:	f107 0314 	add.w	r3, r7, #20
 80174bc:	4619      	mov	r1, r3
 80174be:	481c      	ldr	r0, [pc, #112]	; (8017530 <MX_GPIO_Init+0x19c>)
 80174c0:	f002 f86a 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_Pin TpCs_Pin */
  GPIO_InitStruct.Pin = SS_Pin|TpCs_Pin;
 80174c4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80174c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80174ca:	2301      	movs	r3, #1
 80174cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80174ce:	2301      	movs	r3, #1
 80174d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174d2:	2300      	movs	r3, #0
 80174d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80174d6:	f107 0314 	add.w	r3, r7, #20
 80174da:	4619      	mov	r1, r3
 80174dc:	4814      	ldr	r0, [pc, #80]	; (8017530 <MX_GPIO_Init+0x19c>)
 80174de:	f002 f85b 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LcdCs_Pin */
  GPIO_InitStruct.Pin = LcdCs_Pin;
 80174e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80174e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80174e8:	2301      	movs	r3, #1
 80174ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80174ec:	2301      	movs	r3, #1
 80174ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174f0:	2300      	movs	r3, #0
 80174f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LcdCs_GPIO_Port, &GPIO_InitStruct);
 80174f4:	f107 0314 	add.w	r3, r7, #20
 80174f8:	4619      	mov	r1, r3
 80174fa:	480c      	ldr	r0, [pc, #48]	; (801752c <MX_GPIO_Init+0x198>)
 80174fc:	f002 f84c 	bl	8019598 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017506:	2300      	movs	r3, #0
 8017508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801750a:	2301      	movs	r3, #1
 801750c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 801750e:	f107 0314 	add.w	r3, r7, #20
 8017512:	4619      	mov	r1, r3
 8017514:	4806      	ldr	r0, [pc, #24]	; (8017530 <MX_GPIO_Init+0x19c>)
 8017516:	f002 f83f 	bl	8019598 <HAL_GPIO_Init>

}
 801751a:	bf00      	nop
 801751c:	3728      	adds	r7, #40	; 0x28
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	40023800 	.word	0x40023800
 8017528:	40020000 	.word	0x40020000
 801752c:	40020800 	.word	0x40020800
 8017530:	40020400 	.word	0x40020400

08017534 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	4a06      	ldr	r2, [pc, #24]	; (8017558 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8017540:	4293      	cmp	r3, r2
 8017542:	d105      	bne.n	8017550 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  htim->Instance->SR =0;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2200      	movs	r2, #0
 801754a:	611a      	str	r2, [r3, #16]
	  Tim3_ISP();
 801754c:	f7f5 faec 	bl	800cb28 <Tim3_ISP>
  }
}
 8017550:	bf00      	nop
 8017552:	3708      	adds	r7, #8
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	20006908 	.word	0x20006908

0801755c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801755c:	b480      	push	{r7}
 801755e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017560:	b672      	cpsid	i
}
 8017562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017564:	e7fe      	b.n	8017564 <Error_Handler+0x8>
	...

08017568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017568:	b480      	push	{r7}
 801756a:	b083      	sub	sp, #12
 801756c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801756e:	2300      	movs	r3, #0
 8017570:	607b      	str	r3, [r7, #4]
 8017572:	4b10      	ldr	r3, [pc, #64]	; (80175b4 <HAL_MspInit+0x4c>)
 8017574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017576:	4a0f      	ldr	r2, [pc, #60]	; (80175b4 <HAL_MspInit+0x4c>)
 8017578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801757c:	6453      	str	r3, [r2, #68]	; 0x44
 801757e:	4b0d      	ldr	r3, [pc, #52]	; (80175b4 <HAL_MspInit+0x4c>)
 8017580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017586:	607b      	str	r3, [r7, #4]
 8017588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801758a:	2300      	movs	r3, #0
 801758c:	603b      	str	r3, [r7, #0]
 801758e:	4b09      	ldr	r3, [pc, #36]	; (80175b4 <HAL_MspInit+0x4c>)
 8017590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017592:	4a08      	ldr	r2, [pc, #32]	; (80175b4 <HAL_MspInit+0x4c>)
 8017594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017598:	6413      	str	r3, [r2, #64]	; 0x40
 801759a:	4b06      	ldr	r3, [pc, #24]	; (80175b4 <HAL_MspInit+0x4c>)
 801759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80175a2:	603b      	str	r3, [r7, #0]
 80175a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80175a6:	bf00      	nop
 80175a8:	370c      	adds	r7, #12
 80175aa:	46bd      	mov	sp, r7
 80175ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b0:	4770      	bx	lr
 80175b2:	bf00      	nop
 80175b4:	40023800 	.word	0x40023800

080175b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b08c      	sub	sp, #48	; 0x30
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80175c0:	f107 031c 	add.w	r3, r7, #28
 80175c4:	2200      	movs	r2, #0
 80175c6:	601a      	str	r2, [r3, #0]
 80175c8:	605a      	str	r2, [r3, #4]
 80175ca:	609a      	str	r2, [r3, #8]
 80175cc:	60da      	str	r2, [r3, #12]
 80175ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	4a45      	ldr	r2, [pc, #276]	; (80176ec <HAL_ADC_MspInit+0x134>)
 80175d6:	4293      	cmp	r3, r2
 80175d8:	d157      	bne.n	801768a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80175da:	2300      	movs	r3, #0
 80175dc:	61bb      	str	r3, [r7, #24]
 80175de:	4b44      	ldr	r3, [pc, #272]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80175e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175e2:	4a43      	ldr	r2, [pc, #268]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80175e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80175e8:	6453      	str	r3, [r2, #68]	; 0x44
 80175ea:	4b41      	ldr	r3, [pc, #260]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80175ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80175f2:	61bb      	str	r3, [r7, #24]
 80175f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80175f6:	2300      	movs	r3, #0
 80175f8:	617b      	str	r3, [r7, #20]
 80175fa:	4b3d      	ldr	r3, [pc, #244]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80175fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175fe:	4a3c      	ldr	r2, [pc, #240]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 8017600:	f043 0301 	orr.w	r3, r3, #1
 8017604:	6313      	str	r3, [r2, #48]	; 0x30
 8017606:	4b3a      	ldr	r3, [pc, #232]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 8017608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801760a:	f003 0301 	and.w	r3, r3, #1
 801760e:	617b      	str	r3, [r7, #20]
 8017610:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017612:	2340      	movs	r3, #64	; 0x40
 8017614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017616:	2303      	movs	r3, #3
 8017618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801761a:	2300      	movs	r3, #0
 801761c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 801761e:	f107 031c 	add.w	r3, r7, #28
 8017622:	4619      	mov	r1, r3
 8017624:	4833      	ldr	r0, [pc, #204]	; (80176f4 <HAL_ADC_MspInit+0x13c>)
 8017626:	f001 ffb7 	bl	8019598 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 801762a:	4b33      	ldr	r3, [pc, #204]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 801762c:	4a33      	ldr	r2, [pc, #204]	; (80176fc <HAL_ADC_MspInit+0x144>)
 801762e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017630:	4b31      	ldr	r3, [pc, #196]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017632:	2200      	movs	r2, #0
 8017634:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017636:	4b30      	ldr	r3, [pc, #192]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017638:	2200      	movs	r2, #0
 801763a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 801763c:	4b2e      	ldr	r3, [pc, #184]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 801763e:	2200      	movs	r2, #0
 8017640:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017642:	4b2d      	ldr	r3, [pc, #180]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801764a:	4b2b      	ldr	r3, [pc, #172]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 801764c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017652:	4b29      	ldr	r3, [pc, #164]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 801765a:	4b27      	ldr	r3, [pc, #156]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 801765c:	2200      	movs	r2, #0
 801765e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017660:	4b25      	ldr	r3, [pc, #148]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017662:	2200      	movs	r2, #0
 8017664:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017666:	4b24      	ldr	r3, [pc, #144]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017668:	2200      	movs	r2, #0
 801766a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801766c:	4822      	ldr	r0, [pc, #136]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 801766e:	f001 f99f 	bl	80189b0 <HAL_DMA_Init>
 8017672:	4603      	mov	r3, r0
 8017674:	2b00      	cmp	r3, #0
 8017676:	d001      	beq.n	801767c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017678:	f7ff ff70 	bl	801755c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	4a1e      	ldr	r2, [pc, #120]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017680:	639a      	str	r2, [r3, #56]	; 0x38
 8017682:	4a1d      	ldr	r2, [pc, #116]	; (80176f8 <HAL_ADC_MspInit+0x140>)
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017688:	e02c      	b.n	80176e4 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	4a1c      	ldr	r2, [pc, #112]	; (8017700 <HAL_ADC_MspInit+0x148>)
 8017690:	4293      	cmp	r3, r2
 8017692:	d127      	bne.n	80176e4 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017694:	2300      	movs	r3, #0
 8017696:	613b      	str	r3, [r7, #16]
 8017698:	4b15      	ldr	r3, [pc, #84]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 801769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801769c:	4a14      	ldr	r2, [pc, #80]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 801769e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80176a2:	6453      	str	r3, [r2, #68]	; 0x44
 80176a4:	4b12      	ldr	r3, [pc, #72]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80176a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80176ac:	613b      	str	r3, [r7, #16]
 80176ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176b0:	2300      	movs	r3, #0
 80176b2:	60fb      	str	r3, [r7, #12]
 80176b4:	4b0e      	ldr	r3, [pc, #56]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80176b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176b8:	4a0d      	ldr	r2, [pc, #52]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80176ba:	f043 0301 	orr.w	r3, r3, #1
 80176be:	6313      	str	r3, [r2, #48]	; 0x30
 80176c0:	4b0b      	ldr	r3, [pc, #44]	; (80176f0 <HAL_ADC_MspInit+0x138>)
 80176c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176c4:	f003 0301 	and.w	r3, r3, #1
 80176c8:	60fb      	str	r3, [r7, #12]
 80176ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 80176cc:	2380      	movs	r3, #128	; 0x80
 80176ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80176d0:	2303      	movs	r3, #3
 80176d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176d4:	2300      	movs	r3, #0
 80176d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 80176d8:	f107 031c 	add.w	r3, r7, #28
 80176dc:	4619      	mov	r1, r3
 80176de:	4805      	ldr	r0, [pc, #20]	; (80176f4 <HAL_ADC_MspInit+0x13c>)
 80176e0:	f001 ff5a 	bl	8019598 <HAL_GPIO_Init>
}
 80176e4:	bf00      	nop
 80176e6:	3730      	adds	r7, #48	; 0x30
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	40012000 	.word	0x40012000
 80176f0:	40023800 	.word	0x40023800
 80176f4:	40020000 	.word	0x40020000
 80176f8:	2000673c 	.word	0x2000673c
 80176fc:	40026410 	.word	0x40026410
 8017700:	40012100 	.word	0x40012100

08017704 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b08a      	sub	sp, #40	; 0x28
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801770c:	f107 0314 	add.w	r3, r7, #20
 8017710:	2200      	movs	r2, #0
 8017712:	601a      	str	r2, [r3, #0]
 8017714:	605a      	str	r2, [r3, #4]
 8017716:	609a      	str	r2, [r3, #8]
 8017718:	60da      	str	r2, [r3, #12]
 801771a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	4a33      	ldr	r2, [pc, #204]	; (80177f0 <HAL_DAC_MspInit+0xec>)
 8017722:	4293      	cmp	r3, r2
 8017724:	d15f      	bne.n	80177e6 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017726:	2300      	movs	r3, #0
 8017728:	613b      	str	r3, [r7, #16]
 801772a:	4b32      	ldr	r3, [pc, #200]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 801772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801772e:	4a31      	ldr	r2, [pc, #196]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 8017730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017734:	6413      	str	r3, [r2, #64]	; 0x40
 8017736:	4b2f      	ldr	r3, [pc, #188]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 8017738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801773a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801773e:	613b      	str	r3, [r7, #16]
 8017740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017742:	2300      	movs	r3, #0
 8017744:	60fb      	str	r3, [r7, #12]
 8017746:	4b2b      	ldr	r3, [pc, #172]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 8017748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801774a:	4a2a      	ldr	r2, [pc, #168]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 801774c:	f043 0301 	orr.w	r3, r3, #1
 8017750:	6313      	str	r3, [r2, #48]	; 0x30
 8017752:	4b28      	ldr	r3, [pc, #160]	; (80177f4 <HAL_DAC_MspInit+0xf0>)
 8017754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017756:	f003 0301 	and.w	r3, r3, #1
 801775a:	60fb      	str	r3, [r7, #12]
 801775c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 801775e:	2330      	movs	r3, #48	; 0x30
 8017760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017762:	2303      	movs	r3, #3
 8017764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017766:	2300      	movs	r3, #0
 8017768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801776a:	f107 0314 	add.w	r3, r7, #20
 801776e:	4619      	mov	r1, r3
 8017770:	4821      	ldr	r0, [pc, #132]	; (80177f8 <HAL_DAC_MspInit+0xf4>)
 8017772:	f001 ff11 	bl	8019598 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017776:	4b21      	ldr	r3, [pc, #132]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 8017778:	4a21      	ldr	r2, [pc, #132]	; (8017800 <HAL_DAC_MspInit+0xfc>)
 801777a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 801777c:	4b1f      	ldr	r3, [pc, #124]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 801777e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017782:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017784:	4b1d      	ldr	r3, [pc, #116]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 8017786:	2240      	movs	r2, #64	; 0x40
 8017788:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 801778a:	4b1c      	ldr	r3, [pc, #112]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 801778c:	2200      	movs	r2, #0
 801778e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017790:	4b1a      	ldr	r3, [pc, #104]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 8017792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017796:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017798:	4b18      	ldr	r3, [pc, #96]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 801779a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801779e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80177a0:	4b16      	ldr	r3, [pc, #88]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80177a6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80177a8:	4b14      	ldr	r3, [pc, #80]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177aa:	2200      	movs	r2, #0
 80177ac:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80177ae:	4b13      	ldr	r3, [pc, #76]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177b0:	2200      	movs	r2, #0
 80177b2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80177b4:	4b11      	ldr	r3, [pc, #68]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177b6:	2200      	movs	r2, #0
 80177b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80177ba:	4810      	ldr	r0, [pc, #64]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177bc:	f001 f8f8 	bl	80189b0 <HAL_DMA_Init>
 80177c0:	4603      	mov	r3, r0
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d001      	beq.n	80177ca <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 80177c6:	f7ff fec9 	bl	801755c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	4a0b      	ldr	r2, [pc, #44]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177ce:	609a      	str	r2, [r3, #8]
 80177d0:	4a0a      	ldr	r2, [pc, #40]	; (80177fc <HAL_DAC_MspInit+0xf8>)
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80177d6:	2200      	movs	r2, #0
 80177d8:	2100      	movs	r1, #0
 80177da:	2036      	movs	r0, #54	; 0x36
 80177dc:	f001 f81b 	bl	8018816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80177e0:	2036      	movs	r0, #54	; 0x36
 80177e2:	f001 f834 	bl	801884e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80177e6:	bf00      	nop
 80177e8:	3728      	adds	r7, #40	; 0x28
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	40007400 	.word	0x40007400
 80177f4:	40023800 	.word	0x40023800
 80177f8:	40020000 	.word	0x40020000
 80177fc:	200067b0 	.word	0x200067b0
 8017800:	40026088 	.word	0x40026088

08017804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b08c      	sub	sp, #48	; 0x30
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801780c:	f107 031c 	add.w	r3, r7, #28
 8017810:	2200      	movs	r2, #0
 8017812:	601a      	str	r2, [r3, #0]
 8017814:	605a      	str	r2, [r3, #4]
 8017816:	609a      	str	r2, [r3, #8]
 8017818:	60da      	str	r2, [r3, #12]
 801781a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	4a3a      	ldr	r2, [pc, #232]	; (801790c <HAL_SPI_MspInit+0x108>)
 8017822:	4293      	cmp	r3, r2
 8017824:	d135      	bne.n	8017892 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017826:	2300      	movs	r3, #0
 8017828:	61bb      	str	r3, [r7, #24]
 801782a:	4b39      	ldr	r3, [pc, #228]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 801782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801782e:	4a38      	ldr	r2, [pc, #224]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 8017830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017834:	6413      	str	r3, [r2, #64]	; 0x40
 8017836:	4b36      	ldr	r3, [pc, #216]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 8017838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801783a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801783e:	61bb      	str	r3, [r7, #24]
 8017840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017842:	2300      	movs	r3, #0
 8017844:	617b      	str	r3, [r7, #20]
 8017846:	4b32      	ldr	r3, [pc, #200]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 8017848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801784a:	4a31      	ldr	r2, [pc, #196]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 801784c:	f043 0302 	orr.w	r3, r3, #2
 8017850:	6313      	str	r3, [r2, #48]	; 0x30
 8017852:	4b2f      	ldr	r3, [pc, #188]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 8017854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017856:	f003 0302 	and.w	r3, r3, #2
 801785a:	617b      	str	r3, [r7, #20]
 801785c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 801785e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017864:	2302      	movs	r3, #2
 8017866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017868:	2300      	movs	r3, #0
 801786a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801786c:	2303      	movs	r3, #3
 801786e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017870:	2305      	movs	r3, #5
 8017872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017874:	f107 031c 	add.w	r3, r7, #28
 8017878:	4619      	mov	r1, r3
 801787a:	4826      	ldr	r0, [pc, #152]	; (8017914 <HAL_SPI_MspInit+0x110>)
 801787c:	f001 fe8c 	bl	8019598 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017880:	2200      	movs	r2, #0
 8017882:	2101      	movs	r1, #1
 8017884:	2024      	movs	r0, #36	; 0x24
 8017886:	f000 ffc6 	bl	8018816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801788a:	2024      	movs	r0, #36	; 0x24
 801788c:	f000 ffdf 	bl	801884e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017890:	e038      	b.n	8017904 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	4a20      	ldr	r2, [pc, #128]	; (8017918 <HAL_SPI_MspInit+0x114>)
 8017898:	4293      	cmp	r3, r2
 801789a:	d133      	bne.n	8017904 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801789c:	2300      	movs	r3, #0
 801789e:	613b      	str	r3, [r7, #16]
 80178a0:	4b1b      	ldr	r3, [pc, #108]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178a4:	4a1a      	ldr	r2, [pc, #104]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80178aa:	6413      	str	r3, [r2, #64]	; 0x40
 80178ac:	4b18      	ldr	r3, [pc, #96]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80178b4:	613b      	str	r3, [r7, #16]
 80178b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80178b8:	2300      	movs	r3, #0
 80178ba:	60fb      	str	r3, [r7, #12]
 80178bc:	4b14      	ldr	r3, [pc, #80]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c0:	4a13      	ldr	r2, [pc, #76]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178c2:	f043 0302 	orr.w	r3, r3, #2
 80178c6:	6313      	str	r3, [r2, #48]	; 0x30
 80178c8:	4b11      	ldr	r3, [pc, #68]	; (8017910 <HAL_SPI_MspInit+0x10c>)
 80178ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178cc:	f003 0302 	and.w	r3, r3, #2
 80178d0:	60fb      	str	r3, [r7, #12]
 80178d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 80178d4:	2338      	movs	r3, #56	; 0x38
 80178d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178d8:	2302      	movs	r3, #2
 80178da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178dc:	2300      	movs	r3, #0
 80178de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80178e0:	2303      	movs	r3, #3
 80178e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80178e4:	2306      	movs	r3, #6
 80178e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80178e8:	f107 031c 	add.w	r3, r7, #28
 80178ec:	4619      	mov	r1, r3
 80178ee:	4809      	ldr	r0, [pc, #36]	; (8017914 <HAL_SPI_MspInit+0x110>)
 80178f0:	f001 fe52 	bl	8019598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80178f4:	2200      	movs	r2, #0
 80178f6:	2101      	movs	r1, #1
 80178f8:	2033      	movs	r0, #51	; 0x33
 80178fa:	f000 ff8c 	bl	8018816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80178fe:	2033      	movs	r0, #51	; 0x33
 8017900:	f000 ffa5 	bl	801884e <HAL_NVIC_EnableIRQ>
}
 8017904:	bf00      	nop
 8017906:	3730      	adds	r7, #48	; 0x30
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}
 801790c:	40003800 	.word	0x40003800
 8017910:	40023800 	.word	0x40023800
 8017914:	40020400 	.word	0x40020400
 8017918:	40003c00 	.word	0x40003c00

0801791c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b086      	sub	sp, #24
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	4a2c      	ldr	r2, [pc, #176]	; (80179dc <HAL_TIM_Base_MspInit+0xc0>)
 801792a:	4293      	cmp	r3, r2
 801792c:	d10e      	bne.n	801794c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801792e:	2300      	movs	r3, #0
 8017930:	617b      	str	r3, [r7, #20]
 8017932:	4b2b      	ldr	r3, [pc, #172]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017936:	4a2a      	ldr	r2, [pc, #168]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017938:	f043 0301 	orr.w	r3, r3, #1
 801793c:	6453      	str	r3, [r2, #68]	; 0x44
 801793e:	4b28      	ldr	r3, [pc, #160]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017942:	f003 0301 	and.w	r3, r3, #1
 8017946:	617b      	str	r3, [r7, #20]
 8017948:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 801794a:	e042      	b.n	80179d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	4a24      	ldr	r2, [pc, #144]	; (80179e4 <HAL_TIM_Base_MspInit+0xc8>)
 8017952:	4293      	cmp	r3, r2
 8017954:	d116      	bne.n	8017984 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017956:	2300      	movs	r3, #0
 8017958:	613b      	str	r3, [r7, #16]
 801795a:	4b21      	ldr	r3, [pc, #132]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 801795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801795e:	4a20      	ldr	r2, [pc, #128]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017960:	f043 0302 	orr.w	r3, r3, #2
 8017964:	6413      	str	r3, [r2, #64]	; 0x40
 8017966:	4b1e      	ldr	r3, [pc, #120]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801796a:	f003 0302 	and.w	r3, r3, #2
 801796e:	613b      	str	r3, [r7, #16]
 8017970:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8017972:	2200      	movs	r2, #0
 8017974:	2100      	movs	r1, #0
 8017976:	201d      	movs	r0, #29
 8017978:	f000 ff4d 	bl	8018816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801797c:	201d      	movs	r0, #29
 801797e:	f000 ff66 	bl	801884e <HAL_NVIC_EnableIRQ>
}
 8017982:	e026      	b.n	80179d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	4a17      	ldr	r2, [pc, #92]	; (80179e8 <HAL_TIM_Base_MspInit+0xcc>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d10e      	bne.n	80179ac <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801798e:	2300      	movs	r3, #0
 8017990:	60fb      	str	r3, [r7, #12]
 8017992:	4b13      	ldr	r3, [pc, #76]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017996:	4a12      	ldr	r2, [pc, #72]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 8017998:	f043 0308 	orr.w	r3, r3, #8
 801799c:	6413      	str	r3, [r2, #64]	; 0x40
 801799e:	4b10      	ldr	r3, [pc, #64]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 80179a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179a2:	f003 0308 	and.w	r3, r3, #8
 80179a6:	60fb      	str	r3, [r7, #12]
 80179a8:	68fb      	ldr	r3, [r7, #12]
}
 80179aa:	e012      	b.n	80179d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	4a0e      	ldr	r2, [pc, #56]	; (80179ec <HAL_TIM_Base_MspInit+0xd0>)
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d10d      	bne.n	80179d2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80179b6:	2300      	movs	r3, #0
 80179b8:	60bb      	str	r3, [r7, #8]
 80179ba:	4b09      	ldr	r3, [pc, #36]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 80179bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179be:	4a08      	ldr	r2, [pc, #32]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 80179c0:	f043 0320 	orr.w	r3, r3, #32
 80179c4:	6413      	str	r3, [r2, #64]	; 0x40
 80179c6:	4b06      	ldr	r3, [pc, #24]	; (80179e0 <HAL_TIM_Base_MspInit+0xc4>)
 80179c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179ca:	f003 0320 	and.w	r3, r3, #32
 80179ce:	60bb      	str	r3, [r7, #8]
 80179d0:	68bb      	ldr	r3, [r7, #8]
}
 80179d2:	bf00      	nop
 80179d4:	3718      	adds	r7, #24
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	40010000 	.word	0x40010000
 80179e0:	40023800 	.word	0x40023800
 80179e4:	40000400 	.word	0x40000400
 80179e8:	40000c00 	.word	0x40000c00
 80179ec:	40001400 	.word	0x40001400

080179f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80179f0:	b480      	push	{r7}
 80179f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80179f4:	e7fe      	b.n	80179f4 <NMI_Handler+0x4>

080179f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80179f6:	b480      	push	{r7}
 80179f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80179fa:	e7fe      	b.n	80179fa <HardFault_Handler+0x4>

080179fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80179fc:	b480      	push	{r7}
 80179fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017a00:	e7fe      	b.n	8017a00 <MemManage_Handler+0x4>

08017a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017a02:	b480      	push	{r7}
 8017a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017a06:	e7fe      	b.n	8017a06 <BusFault_Handler+0x4>

08017a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017a08:	b480      	push	{r7}
 8017a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017a0c:	e7fe      	b.n	8017a0c <UsageFault_Handler+0x4>

08017a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017a0e:	b480      	push	{r7}
 8017a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017a12:	bf00      	nop
 8017a14:	46bd      	mov	sp, r7
 8017a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1a:	4770      	bx	lr

08017a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017a20:	bf00      	nop
 8017a22:	46bd      	mov	sp, r7
 8017a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a28:	4770      	bx	lr

08017a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017a2a:	b480      	push	{r7}
 8017a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017a2e:	bf00      	nop
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr

08017a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017a3c:	f000 fb5a 	bl	80180f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017a40:	bf00      	nop
 8017a42:	bd80      	pop	{r7, pc}

08017a44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8017a48:	4802      	ldr	r0, [pc, #8]	; (8017a54 <DMA1_Stream5_IRQHandler+0x10>)
 8017a4a:	f001 f881 	bl	8018b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8017a4e:	bf00      	nop
 8017a50:	bd80      	pop	{r7, pc}
 8017a52:	bf00      	nop
 8017a54:	200067b0 	.word	0x200067b0

08017a58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017a5c:	4802      	ldr	r0, [pc, #8]	; (8017a68 <TIM3_IRQHandler+0x10>)
 8017a5e:	f005 fa91 	bl	801cf84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017a62:	bf00      	nop
 8017a64:	bd80      	pop	{r7, pc}
 8017a66:	bf00      	nop
 8017a68:	20006908 	.word	0x20006908

08017a6c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8017a70:	4802      	ldr	r0, [pc, #8]	; (8017a7c <SPI2_IRQHandler+0x10>)
 8017a72:	f004 ff79 	bl	801c968 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8017a76:	bf00      	nop
 8017a78:	bd80      	pop	{r7, pc}
 8017a7a:	bf00      	nop
 8017a7c:	20006810 	.word	0x20006810

08017a80 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8017a84:	4802      	ldr	r0, [pc, #8]	; (8017a90 <SPI3_IRQHandler+0x10>)
 8017a86:	f004 ff6f 	bl	801c968 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8017a8a:	bf00      	nop
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	20006868 	.word	0x20006868

08017a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017a98:	4802      	ldr	r0, [pc, #8]	; (8017aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8017a9a:	f001 f859 	bl	8018b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8017a9e:	bf00      	nop
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	2000673c 	.word	0x2000673c

08017aa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8017aac:	4802      	ldr	r0, [pc, #8]	; (8017ab8 <OTG_FS_IRQHandler+0x10>)
 8017aae:	f002 f88f 	bl	8019bd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017ab2:	bf00      	nop
 8017ab4:	bd80      	pop	{r7, pc}
 8017ab6:	bf00      	nop
 8017ab8:	20009fe8 	.word	0x20009fe8

08017abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b086      	sub	sp, #24
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017ac4:	4a14      	ldr	r2, [pc, #80]	; (8017b18 <_sbrk+0x5c>)
 8017ac6:	4b15      	ldr	r3, [pc, #84]	; (8017b1c <_sbrk+0x60>)
 8017ac8:	1ad3      	subs	r3, r2, r3
 8017aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017acc:	697b      	ldr	r3, [r7, #20]
 8017ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017ad0:	4b13      	ldr	r3, [pc, #76]	; (8017b20 <_sbrk+0x64>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d102      	bne.n	8017ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017ad8:	4b11      	ldr	r3, [pc, #68]	; (8017b20 <_sbrk+0x64>)
 8017ada:	4a12      	ldr	r2, [pc, #72]	; (8017b24 <_sbrk+0x68>)
 8017adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017ade:	4b10      	ldr	r3, [pc, #64]	; (8017b20 <_sbrk+0x64>)
 8017ae0:	681a      	ldr	r2, [r3, #0]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	693a      	ldr	r2, [r7, #16]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d207      	bcs.n	8017afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017aec:	f00e fc76 	bl	80263dc <__errno>
 8017af0:	4603      	mov	r3, r0
 8017af2:	220c      	movs	r2, #12
 8017af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017af6:	f04f 33ff 	mov.w	r3, #4294967295
 8017afa:	e009      	b.n	8017b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017afc:	4b08      	ldr	r3, [pc, #32]	; (8017b20 <_sbrk+0x64>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017b02:	4b07      	ldr	r3, [pc, #28]	; (8017b20 <_sbrk+0x64>)
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4413      	add	r3, r2
 8017b0a:	4a05      	ldr	r2, [pc, #20]	; (8017b20 <_sbrk+0x64>)
 8017b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3718      	adds	r7, #24
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	20020000 	.word	0x20020000
 8017b1c:	00001000 	.word	0x00001000
 8017b20:	20006a34 	.word	0x20006a34
 8017b24:	2000a780 	.word	0x2000a780

08017b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017b28:	b480      	push	{r7}
 8017b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017b2c:	4b06      	ldr	r3, [pc, #24]	; (8017b48 <SystemInit+0x20>)
 8017b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b32:	4a05      	ldr	r2, [pc, #20]	; (8017b48 <SystemInit+0x20>)
 8017b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017b3c:	bf00      	nop
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr
 8017b46:	bf00      	nop
 8017b48:	e000ed00 	.word	0xe000ed00

08017b4c <W25Qx_Init>:
/**
  * @brief  Initializes the W25QXXXX interface.
  * @retval None
  */
uint8_t W25Qx_Init(void)
{ 
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
	uint8_t state;
	/* Reset W25Qxxx */
	W25Qx_Reset();
 8017b52:	f000 f80d 	bl	8017b70 <W25Qx_Reset>
	
	state = W25Qx_Get_Parameter(&W25Qx_Para);
 8017b56:	4805      	ldr	r0, [pc, #20]	; (8017b6c <W25Qx_Init+0x20>)
 8017b58:	f000 f8c8 	bl	8017cec <W25Qx_Get_Parameter>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	71fb      	strb	r3, [r7, #7]
	
	return state;
 8017b60:	79fb      	ldrb	r3, [r7, #7]
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	20006a38 	.word	0x20006a38

08017b70 <W25Qx_Reset>:
/**
  * @brief  This function reset the W25Qx.
  * @retval None
  */
void	W25Qx_Reset(void)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8017b76:	f649 1366 	movw	r3, #39270	; 0x9966
 8017b7a:	80bb      	strh	r3, [r7, #4]
	
	W25Qx_Enable();
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b82:	480a      	ldr	r0, [pc, #40]	; (8017bac <W25Qx_Reset+0x3c>)
 8017b84:	f001 feb4 	bl	80198f0 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25QXXXX_TIMEOUT_VALUE);
 8017b88:	1d39      	adds	r1, r7, #4
 8017b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b8e:	2202      	movs	r2, #2
 8017b90:	4807      	ldr	r0, [pc, #28]	; (8017bb0 <W25Qx_Reset+0x40>)
 8017b92:	f004 fafa 	bl	801c18a <HAL_SPI_Transmit>
	W25Qx_Disable();
 8017b96:	2201      	movs	r2, #1
 8017b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017b9c:	4803      	ldr	r0, [pc, #12]	; (8017bac <W25Qx_Reset+0x3c>)
 8017b9e:	f001 fea7 	bl	80198f0 <HAL_GPIO_WritePin>

}
 8017ba2:	bf00      	nop
 8017ba4:	3708      	adds	r7, #8
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}
 8017baa:	bf00      	nop
 8017bac:	40020400 	.word	0x40020400
 8017bb0:	20006810 	.word	0x20006810

08017bb4 <W25Qx_GetStatus>:
/**
  * @brief  Reads current status of the W25QXXXX.
  * @retval W25QXXXX memory status
  */
uint8_t W25Qx_GetStatus(void)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8017bba:	2305      	movs	r3, #5
 8017bbc:	713b      	strb	r3, [r7, #4]
	uint8_t status;
	
	W25Qx_Enable();
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bc4:	4811      	ldr	r0, [pc, #68]	; (8017c0c <W25Qx_GetStatus+0x58>)
 8017bc6:	f001 fe93 	bl	80198f0 <HAL_GPIO_WritePin>
	
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017bca:	1d39      	adds	r1, r7, #4
 8017bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	480f      	ldr	r0, [pc, #60]	; (8017c10 <W25Qx_GetStatus+0x5c>)
 8017bd4:	f004 fad9 	bl	801c18a <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,&status, 1, W25QXXXX_TIMEOUT_VALUE);
 8017bd8:	1cf9      	adds	r1, r7, #3
 8017bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bde:	2201      	movs	r2, #1
 8017be0:	480b      	ldr	r0, [pc, #44]	; (8017c10 <W25Qx_GetStatus+0x5c>)
 8017be2:	f004 fc0e 	bl	801c402 <HAL_SPI_Receive>
	W25Qx_Disable();
 8017be6:	2201      	movs	r2, #1
 8017be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017bec:	4807      	ldr	r0, [pc, #28]	; (8017c0c <W25Qx_GetStatus+0x58>)
 8017bee:	f001 fe7f 	bl	80198f0 <HAL_GPIO_WritePin>
	
	/* Check the value of the register */
  if((status & W25QXXXX_FSR_BUSY) != 0)
 8017bf2:	78fb      	ldrb	r3, [r7, #3]
 8017bf4:	f003 0301 	and.w	r3, r3, #1
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d001      	beq.n	8017c00 <W25Qx_GetStatus+0x4c>
  {
    return W25Qx_BUSY;
 8017bfc:	2302      	movs	r3, #2
 8017bfe:	e000      	b.n	8017c02 <W25Qx_GetStatus+0x4e>
  }
	else
	{
		return W25Qx_OK;
 8017c00:	2300      	movs	r3, #0
	}		
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3708      	adds	r7, #8
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	40020400 	.word	0x40020400
 8017c10:	20006810 	.word	0x20006810

08017c14 <W25Qx_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @retval None
  */
uint8_t W25Qx_WriteEnable(void)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8017c1a:	2306      	movs	r3, #6
 8017c1c:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = get_tick();
 8017c1e:	f000 fa7d 	bl	801811c <HAL_GetTick>
 8017c22:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017c24:	2200      	movs	r2, #0
 8017c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c2a:	4814      	ldr	r0, [pc, #80]	; (8017c7c <W25Qx_WriteEnable+0x68>)
 8017c2c:	f001 fe60 	bl	80198f0 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25QXXXX_TIMEOUT_VALUE);
 8017c30:	4639      	mov	r1, r7
 8017c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c36:	2201      	movs	r2, #1
 8017c38:	4811      	ldr	r0, [pc, #68]	; (8017c80 <W25Qx_WriteEnable+0x6c>)
 8017c3a:	f004 faa6 	bl	801c18a <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017c3e:	2201      	movs	r2, #1
 8017c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c44:	480d      	ldr	r0, [pc, #52]	; (8017c7c <W25Qx_WriteEnable+0x68>)
 8017c46:	f001 fe53 	bl	80198f0 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017c4a:	e00c      	b.n	8017c66 <W25Qx_WriteEnable+0x52>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017c4c:	f000 fa66 	bl	801811c <HAL_GetTick>
 8017c50:	4602      	mov	r2, r0
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	1ad3      	subs	r3, r2, r3
 8017c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c5a:	d901      	bls.n	8017c60 <W25Qx_WriteEnable+0x4c>
    {        
			return W25Qx_TIMEOUT;
 8017c5c:	2303      	movs	r3, #3
 8017c5e:	e008      	b.n	8017c72 <W25Qx_WriteEnable+0x5e>
    }
	  delay(1);
 8017c60:	2001      	movs	r0, #1
 8017c62:	f000 fa67 	bl	8018134 <HAL_Delay>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017c66:	f7ff ffa5 	bl	8017bb4 <W25Qx_GetStatus>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	2b02      	cmp	r3, #2
 8017c6e:	d0ed      	beq.n	8017c4c <W25Qx_WriteEnable+0x38>
	}
	
	return W25Qx_OK;
 8017c70:	2300      	movs	r3, #0
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3708      	adds	r7, #8
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	40020400 	.word	0x40020400
 8017c80:	20006810 	.word	0x20006810

08017c84 <W25Qx_Read_ID>:
/   0XEF15,��ʾоƬ�ͺ�ΪW25Q32   
/   0XEF16,��ʾоƬ�ͺ�ΪW25Q64  
  * @retval None
  */
void W25Qx_Read_ID(uint16_t *ID)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
	uint8_t idt[2];
	
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 8017c8c:	2390      	movs	r3, #144	; 0x90
 8017c8e:	60bb      	str	r3, [r7, #8]
	
	W25Qx_Enable();
 8017c90:	2200      	movs	r2, #0
 8017c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017c96:	4813      	ldr	r0, [pc, #76]	; (8017ce4 <W25Qx_Read_ID+0x60>)
 8017c98:	f001 fe2a 	bl	80198f0 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017c9c:	f107 0108 	add.w	r1, r7, #8
 8017ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ca4:	2204      	movs	r2, #4
 8017ca6:	4810      	ldr	r0, [pc, #64]	; (8017ce8 <W25Qx_Read_ID+0x64>)
 8017ca8:	f004 fa6f 	bl	801c18a <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,idt, 2, W25QXXXX_TIMEOUT_VALUE);
 8017cac:	f107 010c 	add.w	r1, r7, #12
 8017cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017cb4:	2202      	movs	r2, #2
 8017cb6:	480c      	ldr	r0, [pc, #48]	; (8017ce8 <W25Qx_Read_ID+0x64>)
 8017cb8:	f004 fba3 	bl	801c402 <HAL_SPI_Receive>
	
	*ID = (idt[0] << 8) + idt[1]; 
 8017cbc:	7b3b      	ldrb	r3, [r7, #12]
 8017cbe:	b29b      	uxth	r3, r3
 8017cc0:	021b      	lsls	r3, r3, #8
 8017cc2:	b29a      	uxth	r2, r3
 8017cc4:	7b7b      	ldrb	r3, [r7, #13]
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	4413      	add	r3, r2
 8017cca:	b29a      	uxth	r2, r3
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	801a      	strh	r2, [r3, #0]
	
	W25Qx_Disable();
 8017cd0:	2201      	movs	r2, #1
 8017cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017cd6:	4803      	ldr	r0, [pc, #12]	; (8017ce4 <W25Qx_Read_ID+0x60>)
 8017cd8:	f001 fe0a 	bl	80198f0 <HAL_GPIO_WritePin>
		
}
 8017cdc:	bf00      	nop
 8017cde:	3710      	adds	r7, #16
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}
 8017ce4:	40020400 	.word	0x40020400
 8017ce8:	20006810 	.word	0x20006810

08017cec <W25Qx_Get_Parameter>:
  * @brief  Get W25QX Parameter.
  * @param  Para: W25Qx_Parameter
  * @retval NULL
  */
uint8_t W25Qx_Get_Parameter(W25Qx_Parameter *Para)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
	uint16_t id;
	uint32_t size;
	
	Para->PAGE_SIZE = 256;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017cfa:	81da      	strh	r2, [r3, #14]
	Para->SUBSECTOR_SIZE = 4096;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017d02:	819a      	strh	r2, [r3, #12]
	Para->SECTOR_SIZE = 0x10000;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017d0a:	605a      	str	r2, [r3, #4]
	
	W25Qx_Read_ID(&id);
 8017d0c:	f107 030a 	add.w	r3, r7, #10
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7ff ffb7 	bl	8017c84 <W25Qx_Read_ID>
	if ((id < W25Q80 || id > W25Q256) &&
 8017d16:	897b      	ldrh	r3, [r7, #10]
 8017d18:	f64e 7212 	movw	r2, #61202	; 0xef12
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	d904      	bls.n	8017d2a <W25Qx_Get_Parameter+0x3e>
 8017d20:	897b      	ldrh	r3, [r7, #10]
 8017d22:	f64e 7218 	movw	r2, #61208	; 0xef18
 8017d26:	4293      	cmp	r3, r2
 8017d28:	d90b      	bls.n	8017d42 <W25Qx_Get_Parameter+0x56>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017d2a:	897b      	ldrh	r3, [r7, #10]
	if ((id < W25Q80 || id > W25Q256) &&
 8017d2c:	f64c 0215 	movw	r2, #51221	; 0xc815
 8017d30:	4293      	cmp	r3, r2
 8017d32:	d904      	bls.n	8017d3e <W25Qx_Get_Parameter+0x52>
		(id < GD25Q64 || id > GD25Q256))return W25Qx_ERROR;
 8017d34:	897b      	ldrh	r3, [r7, #10]
 8017d36:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017d3a:	4293      	cmp	r3, r2
 8017d3c:	d901      	bls.n	8017d42 <W25Qx_Get_Parameter+0x56>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e049      	b.n	8017dd6 <W25Qx_Get_Parameter+0xea>
	
	if (id > GD25Q256) //wq25q part
 8017d42:	897b      	ldrh	r3, [r7, #10]
 8017d44:	f64c 0218 	movw	r2, #51224	; 0xc818
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d916      	bls.n	8017d7a <W25Qx_Get_Parameter+0x8e>
		size = (uint32_t) powf(2,(id - 0xEF13)) * 1024 * 1024;
 8017d4c:	897b      	ldrh	r3, [r7, #10]
 8017d4e:	f5a3 436f 	sub.w	r3, r3, #61184	; 0xef00
 8017d52:	3b13      	subs	r3, #19
 8017d54:	ee07 3a90 	vmov	s15, r3
 8017d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d5c:	eef0 0a67 	vmov.f32	s1, s15
 8017d60:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017d64:	f00e fc88 	bl	8026678 <powf>
 8017d68:	eef0 7a40 	vmov.f32	s15, s0
 8017d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d70:	ee17 3a90 	vmov	r3, s15
 8017d74:	051b      	lsls	r3, r3, #20
 8017d76:	60fb      	str	r3, [r7, #12]
 8017d78:	e015      	b.n	8017da6 <W25Qx_Get_Parameter+0xba>
	else  //gd25q part
		size = (uint32_t) powf(2,(id - 0xC816)) * 1024 * 1024 * 8;
 8017d7a:	897b      	ldrh	r3, [r7, #10]
 8017d7c:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8017d80:	3b16      	subs	r3, #22
 8017d82:	ee07 3a90 	vmov	s15, r3
 8017d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d8a:	eef0 0a67 	vmov.f32	s1, s15
 8017d8e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8017d92:	f00e fc71 	bl	8026678 <powf>
 8017d96:	eef0 7a40 	vmov.f32	s15, s0
 8017d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017d9e:	ee17 3a90 	vmov	r3, s15
 8017da2:	05db      	lsls	r3, r3, #23
 8017da4:	60fb      	str	r3, [r7, #12]

	Para->FLASH_ID = id;
 8017da6:	897a      	ldrh	r2, [r7, #10]
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	801a      	strh	r2, [r3, #0]
	Para->FLASH_SIZE = size;
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	68fa      	ldr	r2, [r7, #12]
 8017db0:	611a      	str	r2, [r3, #16]
	Para->SUBSECTOR_COUNT = Para->FLASH_SIZE / Para->SUBSECTOR_SIZE;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	691b      	ldr	r3, [r3, #16]
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	8992      	ldrh	r2, [r2, #12]
 8017dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	609a      	str	r2, [r3, #8]
	Para->SECTOR_COUNT = Para->FLASH_SIZE / Para->SECTOR_SIZE;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	691a      	ldr	r2, [r3, #16]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	805a      	strh	r2, [r3, #2]
	
	return W25Qx_OK;
 8017dd4:	2300      	movs	r3, #0
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3710      	adds	r7, #16
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd80      	pop	{r7, pc}
	...

08017de0 <W25Qx_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8017dec:	2303      	movs	r3, #3
 8017dee:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	0c1b      	lsrs	r3, r3, #16
 8017df4:	b2db      	uxtb	r3, r3
 8017df6:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	0a1b      	lsrs	r3, r3, #8
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	75fb      	strb	r3, [r7, #23]
	
	W25Qx_Enable();
 8017e06:	2200      	movs	r2, #0
 8017e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e0c:	4811      	ldr	r0, [pc, #68]	; (8017e54 <W25Qx_Read+0x74>)
 8017e0e:	f001 fd6f 	bl	80198f0 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017e12:	f107 0114 	add.w	r1, r7, #20
 8017e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e1a:	2204      	movs	r2, #4
 8017e1c:	480e      	ldr	r0, [pc, #56]	; (8017e58 <W25Qx_Read+0x78>)
 8017e1e:	f004 f9b4 	bl	801c18a <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData,Size,W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	b29a      	uxth	r2, r3
 8017e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e2a:	68f9      	ldr	r1, [r7, #12]
 8017e2c:	480a      	ldr	r0, [pc, #40]	; (8017e58 <W25Qx_Read+0x78>)
 8017e2e:	f004 fae8 	bl	801c402 <HAL_SPI_Receive>
 8017e32:	4603      	mov	r3, r0
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d001      	beq.n	8017e3c <W25Qx_Read+0x5c>
  {
    return W25Qx_ERROR;
 8017e38:	2301      	movs	r3, #1
 8017e3a:	e006      	b.n	8017e4a <W25Qx_Read+0x6a>
  }
	W25Qx_Disable();
 8017e3c:	2201      	movs	r2, #1
 8017e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e42:	4804      	ldr	r0, [pc, #16]	; (8017e54 <W25Qx_Read+0x74>)
 8017e44:	f001 fd54 	bl	80198f0 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8017e48:	2300      	movs	r3, #0
}
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	3718      	adds	r7, #24
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	bf00      	nop
 8017e54:	40020400 	.word	0x40020400
 8017e58:	20006810 	.word	0x20006810

08017e5c <W25Qx_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write,No more than 256byte.    
  * @retval QSPI memory status
  */
uint8_t W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b08a      	sub	sp, #40	; 0x28
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	60f8      	str	r0, [r7, #12]
 8017e64:	60b9      	str	r1, [r7, #8]
 8017e66:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = get_tick();
 8017e68:	f000 f958 	bl	801811c <HAL_GetTick>
 8017e6c:	61f8      	str	r0, [r7, #28]
	
	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 8017e72:	e003      	b.n	8017e7c <W25Qx_Write+0x20>
  {
    current_addr += W25QXXXX_PAGE_SIZE;
 8017e74:	6a3b      	ldr	r3, [r7, #32]
 8017e76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017e7a:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 8017e7c:	6a3a      	ldr	r2, [r7, #32]
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d9f7      	bls.n	8017e74 <W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 8017e84:	6a3a      	ldr	r2, [r7, #32]
 8017e86:	68bb      	ldr	r3, [r7, #8]
 8017e88:	1ad3      	subs	r3, r2, r3
 8017e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8017e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d901      	bls.n	8017e98 <W25Qx_Write+0x3c>
  {
    current_size = Size;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 8017e9c:	68ba      	ldr	r2, [r7, #8]
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	4413      	add	r3, r2
 8017ea2:	61bb      	str	r3, [r7, #24]
	
  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 8017ea4:	2302      	movs	r3, #2
 8017ea6:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 8017ea8:	6a3b      	ldr	r3, [r7, #32]
 8017eaa:	0c1b      	lsrs	r3, r3, #16
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 8017eb0:	6a3b      	ldr	r3, [r7, #32]
 8017eb2:	0a1b      	lsrs	r3, r3, #8
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 8017eb8:	6a3b      	ldr	r3, [r7, #32]
 8017eba:	b2db      	uxtb	r3, r3
 8017ebc:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		W25Qx_WriteEnable();
 8017ebe:	f7ff fea9 	bl	8017c14 <W25Qx_WriteEnable>
	
		W25Qx_Enable();
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017ec8:	4828      	ldr	r0, [pc, #160]	; (8017f6c <W25Qx_Write+0x110>)
 8017eca:	f001 fd11 	bl	80198f0 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&hspi2,cmd, 4, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017ece:	f107 0114 	add.w	r1, r7, #20
 8017ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ed6:	2204      	movs	r2, #4
 8017ed8:	4825      	ldr	r0, [pc, #148]	; (8017f70 <W25Qx_Write+0x114>)
 8017eda:	f004 f956 	bl	801c18a <HAL_SPI_Transmit>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d001      	beq.n	8017ee8 <W25Qx_Write+0x8c>
    {
      return W25Qx_ERROR;
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	e03c      	b.n	8017f62 <W25Qx_Write+0x106>
    }
    
    /* Transmission of the data */
    if (HAL_SPI_Transmit(&hspi2, pData,current_size, W25QXXXX_TIMEOUT_VALUE) != HAL_OK)
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017ef0:	68f9      	ldr	r1, [r7, #12]
 8017ef2:	481f      	ldr	r0, [pc, #124]	; (8017f70 <W25Qx_Write+0x114>)
 8017ef4:	f004 f949 	bl	801c18a <HAL_SPI_Transmit>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d001      	beq.n	8017f02 <W25Qx_Write+0xa6>
    {
      return W25Qx_ERROR;
 8017efe:	2301      	movs	r3, #1
 8017f00:	e02f      	b.n	8017f62 <W25Qx_Write+0x106>
    }
		W25Qx_Disable();
 8017f02:	2201      	movs	r2, #1
 8017f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017f08:	4818      	ldr	r0, [pc, #96]	; (8017f6c <W25Qx_Write+0x110>)
 8017f0a:	f001 fcf1 	bl	80198f0 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f0e:	e009      	b.n	8017f24 <W25Qx_Write+0xc8>
		{
			/* Check for the Timeout */
			if((get_tick() - tickstart) > W25QXXXX_TIMEOUT_VALUE)
 8017f10:	f000 f904 	bl	801811c <HAL_GetTick>
 8017f14:	4602      	mov	r2, r0
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	1ad3      	subs	r3, r2, r3
 8017f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017f1e:	d901      	bls.n	8017f24 <W25Qx_Write+0xc8>
			{        
				return W25Qx_TIMEOUT;
 8017f20:	2303      	movs	r3, #3
 8017f22:	e01e      	b.n	8017f62 <W25Qx_Write+0x106>
		while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017f24:	f7ff fe46 	bl	8017bb4 <W25Qx_GetStatus>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	2b02      	cmp	r3, #2
 8017f2c:	d0f0      	beq.n	8017f10 <W25Qx_Write+0xb4>
			}
			//delay(1);
		}
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8017f2e:	6a3a      	ldr	r2, [r7, #32]
 8017f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f32:	4413      	add	r3, r2
 8017f34:	623b      	str	r3, [r7, #32]
    pData += current_size;
 8017f36:	68fa      	ldr	r2, [r7, #12]
 8017f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3a:	4413      	add	r3, r2
 8017f3c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25QXXXX_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25QXXXX_PAGE_SIZE;
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017f44:	69ba      	ldr	r2, [r7, #24]
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d203      	bcs.n	8017f52 <W25Qx_Write+0xf6>
 8017f4a:	69ba      	ldr	r2, [r7, #24]
 8017f4c:	6a3b      	ldr	r3, [r7, #32]
 8017f4e:	1ad3      	subs	r3, r2, r3
 8017f50:	e001      	b.n	8017f56 <W25Qx_Write+0xfa>
 8017f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017f56:	627b      	str	r3, [r7, #36]	; 0x24
  } while (current_addr < end_addr);
 8017f58:	6a3a      	ldr	r2, [r7, #32]
 8017f5a:	69bb      	ldr	r3, [r7, #24]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d3a1      	bcc.n	8017ea4 <W25Qx_Write+0x48>

	
	return W25Qx_OK;
 8017f60:	2300      	movs	r3, #0
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3728      	adds	r7, #40	; 0x28
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	40020400 	.word	0x40020400
 8017f70:	20006810 	.word	0x20006810

08017f74 <W25Qx_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t W25Qx_Erase_Block(uint32_t Address)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = get_tick();
 8017f7c:	f000 f8ce 	bl	801811c <HAL_GetTick>
 8017f80:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 8017f82:	2320      	movs	r3, #32
 8017f84:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t)(Address >> 16);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	0c1b      	lsrs	r3, r3, #16
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)(Address >> 8);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	0a1b      	lsrs	r3, r3, #8
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(Address);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	b2db      	uxtb	r3, r3
 8017f9a:	72fb      	strb	r3, [r7, #11]
	
	/* Enable write operations */
	W25Qx_WriteEnable();
 8017f9c:	f7ff fe3a 	bl	8017c14 <W25Qx_WriteEnable>
	
	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017fa6:	4813      	ldr	r0, [pc, #76]	; (8017ff4 <W25Qx_Erase_Block+0x80>)
 8017fa8:	f001 fca2 	bl	80198f0 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25QXXXX_TIMEOUT_VALUE);
 8017fac:	f107 0108 	add.w	r1, r7, #8
 8017fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017fb4:	2204      	movs	r2, #4
 8017fb6:	4810      	ldr	r0, [pc, #64]	; (8017ff8 <W25Qx_Erase_Block+0x84>)
 8017fb8:	f004 f8e7 	bl	801c18a <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8017fbc:	2201      	movs	r2, #1
 8017fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017fc2:	480c      	ldr	r0, [pc, #48]	; (8017ff4 <W25Qx_Erase_Block+0x80>)
 8017fc4:	f001 fc94 	bl	80198f0 <HAL_GPIO_WritePin>
	
	/* Wait the end of Flash writing */
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017fc8:	e00a      	b.n	8017fe0 <W25Qx_Erase_Block+0x6c>
	{
		/* Check for the Timeout */
    if((get_tick() - tickstart) > W25QXXXX_SECTOR_ERASE_MAX_TIME)
 8017fca:	f000 f8a7 	bl	801811c <HAL_GetTick>
 8017fce:	4602      	mov	r2, r0
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	1ad3      	subs	r3, r2, r3
 8017fd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017fd8:	4293      	cmp	r3, r2
 8017fda:	d901      	bls.n	8017fe0 <W25Qx_Erase_Block+0x6c>
    {        
			return W25Qx_TIMEOUT;
 8017fdc:	2303      	movs	r3, #3
 8017fde:	e005      	b.n	8017fec <W25Qx_Erase_Block+0x78>
	while(W25Qx_GetStatus() == W25Qx_BUSY)
 8017fe0:	f7ff fde8 	bl	8017bb4 <W25Qx_GetStatus>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	2b02      	cmp	r3, #2
 8017fe8:	d0ef      	beq.n	8017fca <W25Qx_Erase_Block+0x56>
    }
	  //delay(1);
	}
	return W25Qx_OK;
 8017fea:	2300      	movs	r3, #0
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	3710      	adds	r7, #16
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}
 8017ff4:	40020400 	.word	0x40020400
 8017ff8:	20006810 	.word	0x20006810

08017ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8018000:	480d      	ldr	r0, [pc, #52]	; (8018038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8018002:	490e      	ldr	r1, [pc, #56]	; (801803c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8018004:	4a0e      	ldr	r2, [pc, #56]	; (8018040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8018006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018008:	e002      	b.n	8018010 <LoopCopyDataInit>

0801800a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801800a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801800c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801800e:	3304      	adds	r3, #4

08018010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018014:	d3f9      	bcc.n	801800a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018016:	4a0b      	ldr	r2, [pc, #44]	; (8018044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8018018:	4c0b      	ldr	r4, [pc, #44]	; (8018048 <LoopFillZerobss+0x26>)
  movs r3, #0
 801801a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801801c:	e001      	b.n	8018022 <LoopFillZerobss>

0801801e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801801e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018020:	3204      	adds	r2, #4

08018022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018024:	d3fb      	bcc.n	801801e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018026:	f7ff fd7f 	bl	8017b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801802a:	f00e f9dd 	bl	80263e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801802e:	f7fd fd9f 	bl	8015b70 <main>
  bx  lr    
 8018032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8018038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801803c:	20000710 	.word	0x20000710
  ldr r2, =_sidata
 8018040:	08026e44 	.word	0x08026e44
  ldr r2, =_sbss
 8018044:	20000710 	.word	0x20000710
  ldr r4, =_ebss
 8018048:	2000a77c 	.word	0x2000a77c

0801804c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801804c:	e7fe      	b.n	801804c <ADC_IRQHandler>
	...

08018050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8018054:	4b0e      	ldr	r3, [pc, #56]	; (8018090 <HAL_Init+0x40>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4a0d      	ldr	r2, [pc, #52]	; (8018090 <HAL_Init+0x40>)
 801805a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801805e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018060:	4b0b      	ldr	r3, [pc, #44]	; (8018090 <HAL_Init+0x40>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	4a0a      	ldr	r2, [pc, #40]	; (8018090 <HAL_Init+0x40>)
 8018066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801806a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801806c:	4b08      	ldr	r3, [pc, #32]	; (8018090 <HAL_Init+0x40>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	4a07      	ldr	r2, [pc, #28]	; (8018090 <HAL_Init+0x40>)
 8018072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018078:	2003      	movs	r0, #3
 801807a:	f000 fbc1 	bl	8018800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801807e:	2000      	movs	r0, #0
 8018080:	f000 f808 	bl	8018094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018084:	f7ff fa70 	bl	8017568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018088:	2300      	movs	r3, #0
}
 801808a:	4618      	mov	r0, r3
 801808c:	bd80      	pop	{r7, pc}
 801808e:	bf00      	nop
 8018090:	40023c00 	.word	0x40023c00

08018094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b082      	sub	sp, #8
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801809c:	4b12      	ldr	r3, [pc, #72]	; (80180e8 <HAL_InitTick+0x54>)
 801809e:	681a      	ldr	r2, [r3, #0]
 80180a0:	4b12      	ldr	r3, [pc, #72]	; (80180ec <HAL_InitTick+0x58>)
 80180a2:	781b      	ldrb	r3, [r3, #0]
 80180a4:	4619      	mov	r1, r3
 80180a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80180aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80180ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80180b2:	4618      	mov	r0, r3
 80180b4:	f000 fbd9 	bl	801886a <HAL_SYSTICK_Config>
 80180b8:	4603      	mov	r3, r0
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d001      	beq.n	80180c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80180be:	2301      	movs	r3, #1
 80180c0:	e00e      	b.n	80180e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2b0f      	cmp	r3, #15
 80180c6:	d80a      	bhi.n	80180de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80180c8:	2200      	movs	r2, #0
 80180ca:	6879      	ldr	r1, [r7, #4]
 80180cc:	f04f 30ff 	mov.w	r0, #4294967295
 80180d0:	f000 fba1 	bl	8018816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80180d4:	4a06      	ldr	r2, [pc, #24]	; (80180f0 <HAL_InitTick+0x5c>)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80180da:	2300      	movs	r3, #0
 80180dc:	e000      	b.n	80180e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80180de:	2301      	movs	r3, #1
}
 80180e0:	4618      	mov	r0, r3
 80180e2:	3708      	adds	r7, #8
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}
 80180e8:	20000564 	.word	0x20000564
 80180ec:	2000056c 	.word	0x2000056c
 80180f0:	20000568 	.word	0x20000568

080180f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80180f4:	b480      	push	{r7}
 80180f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80180f8:	4b06      	ldr	r3, [pc, #24]	; (8018114 <HAL_IncTick+0x20>)
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	461a      	mov	r2, r3
 80180fe:	4b06      	ldr	r3, [pc, #24]	; (8018118 <HAL_IncTick+0x24>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	4413      	add	r3, r2
 8018104:	4a04      	ldr	r2, [pc, #16]	; (8018118 <HAL_IncTick+0x24>)
 8018106:	6013      	str	r3, [r2, #0]
}
 8018108:	bf00      	nop
 801810a:	46bd      	mov	sp, r7
 801810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018110:	4770      	bx	lr
 8018112:	bf00      	nop
 8018114:	2000056c 	.word	0x2000056c
 8018118:	20006a4c 	.word	0x20006a4c

0801811c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801811c:	b480      	push	{r7}
 801811e:	af00      	add	r7, sp, #0
  return uwTick;
 8018120:	4b03      	ldr	r3, [pc, #12]	; (8018130 <HAL_GetTick+0x14>)
 8018122:	681b      	ldr	r3, [r3, #0]
}
 8018124:	4618      	mov	r0, r3
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr
 801812e:	bf00      	nop
 8018130:	20006a4c 	.word	0x20006a4c

08018134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b084      	sub	sp, #16
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801813c:	f7ff ffee 	bl	801811c <HAL_GetTick>
 8018140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801814c:	d005      	beq.n	801815a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801814e:	4b0a      	ldr	r3, [pc, #40]	; (8018178 <HAL_Delay+0x44>)
 8018150:	781b      	ldrb	r3, [r3, #0]
 8018152:	461a      	mov	r2, r3
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	4413      	add	r3, r2
 8018158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801815a:	bf00      	nop
 801815c:	f7ff ffde 	bl	801811c <HAL_GetTick>
 8018160:	4602      	mov	r2, r0
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	1ad3      	subs	r3, r2, r3
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	429a      	cmp	r2, r3
 801816a:	d8f7      	bhi.n	801815c <HAL_Delay+0x28>
  {
  }
}
 801816c:	bf00      	nop
 801816e:	bf00      	nop
 8018170:	3710      	adds	r7, #16
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	2000056c 	.word	0x2000056c

0801817c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b084      	sub	sp, #16
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018184:	2300      	movs	r3, #0
 8018186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d101      	bne.n	8018192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801818e:	2301      	movs	r3, #1
 8018190:	e033      	b.n	80181fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018196:	2b00      	cmp	r3, #0
 8018198:	d109      	bne.n	80181ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f7ff fa0c 	bl	80175b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2200      	movs	r2, #0
 80181a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	2200      	movs	r2, #0
 80181aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181b2:	f003 0310 	and.w	r3, r3, #16
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d118      	bne.n	80181ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80181c2:	f023 0302 	bic.w	r3, r3, #2
 80181c6:	f043 0202 	orr.w	r2, r3, #2
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f000 f94a 	bl	8018468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2200      	movs	r2, #0
 80181d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181de:	f023 0303 	bic.w	r3, r3, #3
 80181e2:	f043 0201 	orr.w	r2, r3, #1
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	641a      	str	r2, [r3, #64]	; 0x40
 80181ea:	e001      	b.n	80181f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80181ec:	2301      	movs	r3, #1
 80181ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2200      	movs	r2, #0
 80181f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80181f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80181fa:	4618      	mov	r0, r3
 80181fc:	3710      	adds	r7, #16
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}
	...

08018204 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8018204:	b480      	push	{r7}
 8018206:	b085      	sub	sp, #20
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
 801820c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801820e:	2300      	movs	r3, #0
 8018210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018218:	2b01      	cmp	r3, #1
 801821a:	d101      	bne.n	8018220 <HAL_ADC_ConfigChannel+0x1c>
 801821c:	2302      	movs	r3, #2
 801821e:	e113      	b.n	8018448 <HAL_ADC_ConfigChannel+0x244>
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2201      	movs	r2, #1
 8018224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b09      	cmp	r3, #9
 801822e:	d925      	bls.n	801827c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	68d9      	ldr	r1, [r3, #12]
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	b29b      	uxth	r3, r3
 801823c:	461a      	mov	r2, r3
 801823e:	4613      	mov	r3, r2
 8018240:	005b      	lsls	r3, r3, #1
 8018242:	4413      	add	r3, r2
 8018244:	3b1e      	subs	r3, #30
 8018246:	2207      	movs	r2, #7
 8018248:	fa02 f303 	lsl.w	r3, r2, r3
 801824c:	43da      	mvns	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	400a      	ands	r2, r1
 8018254:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	68d9      	ldr	r1, [r3, #12]
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	689a      	ldr	r2, [r3, #8]
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	b29b      	uxth	r3, r3
 8018266:	4618      	mov	r0, r3
 8018268:	4603      	mov	r3, r0
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	4403      	add	r3, r0
 801826e:	3b1e      	subs	r3, #30
 8018270:	409a      	lsls	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	430a      	orrs	r2, r1
 8018278:	60da      	str	r2, [r3, #12]
 801827a:	e022      	b.n	80182c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	6919      	ldr	r1, [r3, #16]
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	b29b      	uxth	r3, r3
 8018288:	461a      	mov	r2, r3
 801828a:	4613      	mov	r3, r2
 801828c:	005b      	lsls	r3, r3, #1
 801828e:	4413      	add	r3, r2
 8018290:	2207      	movs	r2, #7
 8018292:	fa02 f303 	lsl.w	r3, r2, r3
 8018296:	43da      	mvns	r2, r3
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	400a      	ands	r2, r1
 801829e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	6919      	ldr	r1, [r3, #16]
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	689a      	ldr	r2, [r3, #8]
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	4618      	mov	r0, r3
 80182b2:	4603      	mov	r3, r0
 80182b4:	005b      	lsls	r3, r3, #1
 80182b6:	4403      	add	r3, r0
 80182b8:	409a      	lsls	r2, r3
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	430a      	orrs	r2, r1
 80182c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	685b      	ldr	r3, [r3, #4]
 80182c6:	2b06      	cmp	r3, #6
 80182c8:	d824      	bhi.n	8018314 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	685a      	ldr	r2, [r3, #4]
 80182d4:	4613      	mov	r3, r2
 80182d6:	009b      	lsls	r3, r3, #2
 80182d8:	4413      	add	r3, r2
 80182da:	3b05      	subs	r3, #5
 80182dc:	221f      	movs	r2, #31
 80182de:	fa02 f303 	lsl.w	r3, r2, r3
 80182e2:	43da      	mvns	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	400a      	ands	r2, r1
 80182ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	4618      	mov	r0, r3
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	685a      	ldr	r2, [r3, #4]
 80182fe:	4613      	mov	r3, r2
 8018300:	009b      	lsls	r3, r3, #2
 8018302:	4413      	add	r3, r2
 8018304:	3b05      	subs	r3, #5
 8018306:	fa00 f203 	lsl.w	r2, r0, r3
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	430a      	orrs	r2, r1
 8018310:	635a      	str	r2, [r3, #52]	; 0x34
 8018312:	e04c      	b.n	80183ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	685b      	ldr	r3, [r3, #4]
 8018318:	2b0c      	cmp	r3, #12
 801831a:	d824      	bhi.n	8018366 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	685a      	ldr	r2, [r3, #4]
 8018326:	4613      	mov	r3, r2
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	4413      	add	r3, r2
 801832c:	3b23      	subs	r3, #35	; 0x23
 801832e:	221f      	movs	r2, #31
 8018330:	fa02 f303 	lsl.w	r3, r2, r3
 8018334:	43da      	mvns	r2, r3
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	400a      	ands	r2, r1
 801833c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	b29b      	uxth	r3, r3
 801834a:	4618      	mov	r0, r3
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	685a      	ldr	r2, [r3, #4]
 8018350:	4613      	mov	r3, r2
 8018352:	009b      	lsls	r3, r3, #2
 8018354:	4413      	add	r3, r2
 8018356:	3b23      	subs	r3, #35	; 0x23
 8018358:	fa00 f203 	lsl.w	r2, r0, r3
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	430a      	orrs	r2, r1
 8018362:	631a      	str	r2, [r3, #48]	; 0x30
 8018364:	e023      	b.n	80183ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	685a      	ldr	r2, [r3, #4]
 8018370:	4613      	mov	r3, r2
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	4413      	add	r3, r2
 8018376:	3b41      	subs	r3, #65	; 0x41
 8018378:	221f      	movs	r2, #31
 801837a:	fa02 f303 	lsl.w	r3, r2, r3
 801837e:	43da      	mvns	r2, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	400a      	ands	r2, r1
 8018386:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4618      	mov	r0, r3
 8018396:	683b      	ldr	r3, [r7, #0]
 8018398:	685a      	ldr	r2, [r3, #4]
 801839a:	4613      	mov	r3, r2
 801839c:	009b      	lsls	r3, r3, #2
 801839e:	4413      	add	r3, r2
 80183a0:	3b41      	subs	r3, #65	; 0x41
 80183a2:	fa00 f203 	lsl.w	r2, r0, r3
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	430a      	orrs	r2, r1
 80183ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80183ae:	4b29      	ldr	r3, [pc, #164]	; (8018454 <HAL_ADC_ConfigChannel+0x250>)
 80183b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	4a28      	ldr	r2, [pc, #160]	; (8018458 <HAL_ADC_ConfigChannel+0x254>)
 80183b8:	4293      	cmp	r3, r2
 80183ba:	d10f      	bne.n	80183dc <HAL_ADC_ConfigChannel+0x1d8>
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2b12      	cmp	r3, #18
 80183c2:	d10b      	bne.n	80183dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	4a1d      	ldr	r2, [pc, #116]	; (8018458 <HAL_ADC_ConfigChannel+0x254>)
 80183e2:	4293      	cmp	r3, r2
 80183e4:	d12b      	bne.n	801843e <HAL_ADC_ConfigChannel+0x23a>
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4a1c      	ldr	r2, [pc, #112]	; (801845c <HAL_ADC_ConfigChannel+0x258>)
 80183ec:	4293      	cmp	r3, r2
 80183ee:	d003      	beq.n	80183f8 <HAL_ADC_ConfigChannel+0x1f4>
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	2b11      	cmp	r3, #17
 80183f6:	d122      	bne.n	801843e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	685b      	ldr	r3, [r3, #4]
 80183fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	685b      	ldr	r3, [r3, #4]
 8018408:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	4a11      	ldr	r2, [pc, #68]	; (801845c <HAL_ADC_ConfigChannel+0x258>)
 8018416:	4293      	cmp	r3, r2
 8018418:	d111      	bne.n	801843e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801841a:	4b11      	ldr	r3, [pc, #68]	; (8018460 <HAL_ADC_ConfigChannel+0x25c>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	4a11      	ldr	r2, [pc, #68]	; (8018464 <HAL_ADC_ConfigChannel+0x260>)
 8018420:	fba2 2303 	umull	r2, r3, r2, r3
 8018424:	0c9a      	lsrs	r2, r3, #18
 8018426:	4613      	mov	r3, r2
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	4413      	add	r3, r2
 801842c:	005b      	lsls	r3, r3, #1
 801842e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018430:	e002      	b.n	8018438 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	3b01      	subs	r3, #1
 8018436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d1f9      	bne.n	8018432 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	2200      	movs	r2, #0
 8018442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8018446:	2300      	movs	r3, #0
}
 8018448:	4618      	mov	r0, r3
 801844a:	3714      	adds	r7, #20
 801844c:	46bd      	mov	sp, r7
 801844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018452:	4770      	bx	lr
 8018454:	40012300 	.word	0x40012300
 8018458:	40012000 	.word	0x40012000
 801845c:	10000012 	.word	0x10000012
 8018460:	20000564 	.word	0x20000564
 8018464:	431bde83 	.word	0x431bde83

08018468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018468:	b480      	push	{r7}
 801846a:	b085      	sub	sp, #20
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018470:	4b79      	ldr	r3, [pc, #484]	; (8018658 <ADC_Init+0x1f0>)
 8018472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	685a      	ldr	r2, [r3, #4]
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	431a      	orrs	r2, r3
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	685a      	ldr	r2, [r3, #4]
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801849c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	6859      	ldr	r1, [r3, #4]
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	691b      	ldr	r3, [r3, #16]
 80184a8:	021a      	lsls	r2, r3, #8
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	430a      	orrs	r2, r1
 80184b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	685a      	ldr	r2, [r3, #4]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80184c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	6859      	ldr	r1, [r3, #4]
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	689a      	ldr	r2, [r3, #8]
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	430a      	orrs	r2, r1
 80184d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	689a      	ldr	r2, [r3, #8]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80184e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	6899      	ldr	r1, [r3, #8]
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	68da      	ldr	r2, [r3, #12]
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	430a      	orrs	r2, r1
 80184f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184fa:	4a58      	ldr	r2, [pc, #352]	; (801865c <ADC_Init+0x1f4>)
 80184fc:	4293      	cmp	r3, r2
 80184fe:	d022      	beq.n	8018546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	689a      	ldr	r2, [r3, #8]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801850e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	6899      	ldr	r1, [r3, #8]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	430a      	orrs	r2, r1
 8018520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	689a      	ldr	r2, [r3, #8]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	6899      	ldr	r1, [r3, #8]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	430a      	orrs	r2, r1
 8018542:	609a      	str	r2, [r3, #8]
 8018544:	e00f      	b.n	8018566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	689a      	ldr	r2, [r3, #8]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	689a      	ldr	r2, [r3, #8]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	689a      	ldr	r2, [r3, #8]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f022 0202 	bic.w	r2, r2, #2
 8018574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	6899      	ldr	r1, [r3, #8]
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	7e1b      	ldrb	r3, [r3, #24]
 8018580:	005a      	lsls	r2, r3, #1
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	430a      	orrs	r2, r1
 8018588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d01b      	beq.n	80185cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	685a      	ldr	r2, [r3, #4]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80185a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	685a      	ldr	r2, [r3, #4]
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80185b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6859      	ldr	r1, [r3, #4]
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185be:	3b01      	subs	r3, #1
 80185c0:	035a      	lsls	r2, r3, #13
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	430a      	orrs	r2, r1
 80185c8:	605a      	str	r2, [r3, #4]
 80185ca:	e007      	b.n	80185dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	685a      	ldr	r2, [r3, #4]
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80185da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80185ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	69db      	ldr	r3, [r3, #28]
 80185f6:	3b01      	subs	r3, #1
 80185f8:	051a      	lsls	r2, r3, #20
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	430a      	orrs	r2, r1
 8018600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	689a      	ldr	r2, [r3, #8]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	6899      	ldr	r1, [r3, #8]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801861e:	025a      	lsls	r2, r3, #9
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	430a      	orrs	r2, r1
 8018626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	689a      	ldr	r2, [r3, #8]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	6899      	ldr	r1, [r3, #8]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	695b      	ldr	r3, [r3, #20]
 8018642:	029a      	lsls	r2, r3, #10
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	430a      	orrs	r2, r1
 801864a:	609a      	str	r2, [r3, #8]
}
 801864c:	bf00      	nop
 801864e:	3714      	adds	r7, #20
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr
 8018658:	40012300 	.word	0x40012300
 801865c:	0f000001 	.word	0x0f000001

08018660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018660:	b480      	push	{r7}
 8018662:	b085      	sub	sp, #20
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	f003 0307 	and.w	r3, r3, #7
 801866e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018670:	4b0c      	ldr	r3, [pc, #48]	; (80186a4 <__NVIC_SetPriorityGrouping+0x44>)
 8018672:	68db      	ldr	r3, [r3, #12]
 8018674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8018676:	68ba      	ldr	r2, [r7, #8]
 8018678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801867c:	4013      	ands	r3, r2
 801867e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801868c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8018692:	4a04      	ldr	r2, [pc, #16]	; (80186a4 <__NVIC_SetPriorityGrouping+0x44>)
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	60d3      	str	r3, [r2, #12]
}
 8018698:	bf00      	nop
 801869a:	3714      	adds	r7, #20
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr
 80186a4:	e000ed00 	.word	0xe000ed00

080186a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80186a8:	b480      	push	{r7}
 80186aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80186ac:	4b04      	ldr	r3, [pc, #16]	; (80186c0 <__NVIC_GetPriorityGrouping+0x18>)
 80186ae:	68db      	ldr	r3, [r3, #12]
 80186b0:	0a1b      	lsrs	r3, r3, #8
 80186b2:	f003 0307 	and.w	r3, r3, #7
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr
 80186c0:	e000ed00 	.word	0xe000ed00

080186c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80186c4:	b480      	push	{r7}
 80186c6:	b083      	sub	sp, #12
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	4603      	mov	r3, r0
 80186cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80186ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	db0b      	blt.n	80186ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80186d6:	79fb      	ldrb	r3, [r7, #7]
 80186d8:	f003 021f 	and.w	r2, r3, #31
 80186dc:	4907      	ldr	r1, [pc, #28]	; (80186fc <__NVIC_EnableIRQ+0x38>)
 80186de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186e2:	095b      	lsrs	r3, r3, #5
 80186e4:	2001      	movs	r0, #1
 80186e6:	fa00 f202 	lsl.w	r2, r0, r2
 80186ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80186ee:	bf00      	nop
 80186f0:	370c      	adds	r7, #12
 80186f2:	46bd      	mov	sp, r7
 80186f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f8:	4770      	bx	lr
 80186fa:	bf00      	nop
 80186fc:	e000e100 	.word	0xe000e100

08018700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018700:	b480      	push	{r7}
 8018702:	b083      	sub	sp, #12
 8018704:	af00      	add	r7, sp, #0
 8018706:	4603      	mov	r3, r0
 8018708:	6039      	str	r1, [r7, #0]
 801870a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801870c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018710:	2b00      	cmp	r3, #0
 8018712:	db0a      	blt.n	801872a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	b2da      	uxtb	r2, r3
 8018718:	490c      	ldr	r1, [pc, #48]	; (801874c <__NVIC_SetPriority+0x4c>)
 801871a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801871e:	0112      	lsls	r2, r2, #4
 8018720:	b2d2      	uxtb	r2, r2
 8018722:	440b      	add	r3, r1
 8018724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018728:	e00a      	b.n	8018740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	b2da      	uxtb	r2, r3
 801872e:	4908      	ldr	r1, [pc, #32]	; (8018750 <__NVIC_SetPriority+0x50>)
 8018730:	79fb      	ldrb	r3, [r7, #7]
 8018732:	f003 030f 	and.w	r3, r3, #15
 8018736:	3b04      	subs	r3, #4
 8018738:	0112      	lsls	r2, r2, #4
 801873a:	b2d2      	uxtb	r2, r2
 801873c:	440b      	add	r3, r1
 801873e:	761a      	strb	r2, [r3, #24]
}
 8018740:	bf00      	nop
 8018742:	370c      	adds	r7, #12
 8018744:	46bd      	mov	sp, r7
 8018746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874a:	4770      	bx	lr
 801874c:	e000e100 	.word	0xe000e100
 8018750:	e000ed00 	.word	0xe000ed00

08018754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018754:	b480      	push	{r7}
 8018756:	b089      	sub	sp, #36	; 0x24
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	60b9      	str	r1, [r7, #8]
 801875e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	f003 0307 	and.w	r3, r3, #7
 8018766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	f1c3 0307 	rsb	r3, r3, #7
 801876e:	2b04      	cmp	r3, #4
 8018770:	bf28      	it	cs
 8018772:	2304      	movcs	r3, #4
 8018774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	3304      	adds	r3, #4
 801877a:	2b06      	cmp	r3, #6
 801877c:	d902      	bls.n	8018784 <NVIC_EncodePriority+0x30>
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	3b03      	subs	r3, #3
 8018782:	e000      	b.n	8018786 <NVIC_EncodePriority+0x32>
 8018784:	2300      	movs	r3, #0
 8018786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018788:	f04f 32ff 	mov.w	r2, #4294967295
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	fa02 f303 	lsl.w	r3, r2, r3
 8018792:	43da      	mvns	r2, r3
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	401a      	ands	r2, r3
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801879c:	f04f 31ff 	mov.w	r1, #4294967295
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	fa01 f303 	lsl.w	r3, r1, r3
 80187a6:	43d9      	mvns	r1, r3
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80187ac:	4313      	orrs	r3, r2
         );
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	3724      	adds	r7, #36	; 0x24
 80187b2:	46bd      	mov	sp, r7
 80187b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b8:	4770      	bx	lr
	...

080187bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b082      	sub	sp, #8
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	3b01      	subs	r3, #1
 80187c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80187cc:	d301      	bcc.n	80187d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80187ce:	2301      	movs	r3, #1
 80187d0:	e00f      	b.n	80187f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80187d2:	4a0a      	ldr	r2, [pc, #40]	; (80187fc <SysTick_Config+0x40>)
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	3b01      	subs	r3, #1
 80187d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80187da:	210f      	movs	r1, #15
 80187dc:	f04f 30ff 	mov.w	r0, #4294967295
 80187e0:	f7ff ff8e 	bl	8018700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80187e4:	4b05      	ldr	r3, [pc, #20]	; (80187fc <SysTick_Config+0x40>)
 80187e6:	2200      	movs	r2, #0
 80187e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80187ea:	4b04      	ldr	r3, [pc, #16]	; (80187fc <SysTick_Config+0x40>)
 80187ec:	2207      	movs	r2, #7
 80187ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80187f0:	2300      	movs	r3, #0
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	3708      	adds	r7, #8
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop
 80187fc:	e000e010 	.word	0xe000e010

08018800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018808:	6878      	ldr	r0, [r7, #4]
 801880a:	f7ff ff29 	bl	8018660 <__NVIC_SetPriorityGrouping>
}
 801880e:	bf00      	nop
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}

08018816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018816:	b580      	push	{r7, lr}
 8018818:	b086      	sub	sp, #24
 801881a:	af00      	add	r7, sp, #0
 801881c:	4603      	mov	r3, r0
 801881e:	60b9      	str	r1, [r7, #8]
 8018820:	607a      	str	r2, [r7, #4]
 8018822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018824:	2300      	movs	r3, #0
 8018826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018828:	f7ff ff3e 	bl	80186a8 <__NVIC_GetPriorityGrouping>
 801882c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801882e:	687a      	ldr	r2, [r7, #4]
 8018830:	68b9      	ldr	r1, [r7, #8]
 8018832:	6978      	ldr	r0, [r7, #20]
 8018834:	f7ff ff8e 	bl	8018754 <NVIC_EncodePriority>
 8018838:	4602      	mov	r2, r0
 801883a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801883e:	4611      	mov	r1, r2
 8018840:	4618      	mov	r0, r3
 8018842:	f7ff ff5d 	bl	8018700 <__NVIC_SetPriority>
}
 8018846:	bf00      	nop
 8018848:	3718      	adds	r7, #24
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801884e:	b580      	push	{r7, lr}
 8018850:	b082      	sub	sp, #8
 8018852:	af00      	add	r7, sp, #0
 8018854:	4603      	mov	r3, r0
 8018856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801885c:	4618      	mov	r0, r3
 801885e:	f7ff ff31 	bl	80186c4 <__NVIC_EnableIRQ>
}
 8018862:	bf00      	nop
 8018864:	3708      	adds	r7, #8
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}

0801886a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801886a:	b580      	push	{r7, lr}
 801886c:	b082      	sub	sp, #8
 801886e:	af00      	add	r7, sp, #0
 8018870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018872:	6878      	ldr	r0, [r7, #4]
 8018874:	f7ff ffa2 	bl	80187bc <SysTick_Config>
 8018878:	4603      	mov	r3, r0
}
 801887a:	4618      	mov	r0, r3
 801887c:	3708      	adds	r7, #8
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}

08018882 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018882:	b580      	push	{r7, lr}
 8018884:	b082      	sub	sp, #8
 8018886:	af00      	add	r7, sp, #0
 8018888:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d101      	bne.n	8018894 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018890:	2301      	movs	r3, #1
 8018892:	e014      	b.n	80188be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	791b      	ldrb	r3, [r3, #4]
 8018898:	b2db      	uxtb	r3, r3
 801889a:	2b00      	cmp	r3, #0
 801889c:	d105      	bne.n	80188aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2200      	movs	r2, #0
 80188a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f7fe ff2d 	bl	8017704 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	2202      	movs	r2, #2
 80188ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	2200      	movs	r2, #0
 80188b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2201      	movs	r2, #1
 80188ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80188bc:	2300      	movs	r3, #0
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3708      	adds	r7, #8
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}

080188c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80188c6:	b480      	push	{r7}
 80188c8:	b087      	sub	sp, #28
 80188ca:	af00      	add	r7, sp, #0
 80188cc:	60f8      	str	r0, [r7, #12]
 80188ce:	60b9      	str	r1, [r7, #8]
 80188d0:	607a      	str	r2, [r7, #4]
 80188d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80188d4:	2300      	movs	r3, #0
 80188d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d105      	bne.n	80188f0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80188e4:	697a      	ldr	r2, [r7, #20]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	4413      	add	r3, r2
 80188ea:	3308      	adds	r3, #8
 80188ec:	617b      	str	r3, [r7, #20]
 80188ee:	e004      	b.n	80188fa <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80188f0:	697a      	ldr	r2, [r7, #20]
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	4413      	add	r3, r2
 80188f6:	3314      	adds	r3, #20
 80188f8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	461a      	mov	r2, r3
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018902:	2300      	movs	r3, #0
}
 8018904:	4618      	mov	r0, r3
 8018906:	371c      	adds	r7, #28
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr

08018910 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018910:	b480      	push	{r7}
 8018912:	b087      	sub	sp, #28
 8018914:	af00      	add	r7, sp, #0
 8018916:	60f8      	str	r0, [r7, #12]
 8018918:	60b9      	str	r1, [r7, #8]
 801891a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	795b      	ldrb	r3, [r3, #5]
 8018920:	2b01      	cmp	r3, #1
 8018922:	d101      	bne.n	8018928 <HAL_DAC_ConfigChannel+0x18>
 8018924:	2302      	movs	r3, #2
 8018926:	e03c      	b.n	80189a2 <HAL_DAC_ConfigChannel+0x92>
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	2201      	movs	r2, #1
 801892c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	2202      	movs	r2, #2
 8018932:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	f003 0310 	and.w	r3, r3, #16
 8018942:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018946:	fa02 f303 	lsl.w	r3, r2, r3
 801894a:	43db      	mvns	r3, r3
 801894c:	697a      	ldr	r2, [r7, #20]
 801894e:	4013      	ands	r3, r2
 8018950:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018952:	68bb      	ldr	r3, [r7, #8]
 8018954:	681a      	ldr	r2, [r3, #0]
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	685b      	ldr	r3, [r3, #4]
 801895a:	4313      	orrs	r3, r2
 801895c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	f003 0310 	and.w	r3, r3, #16
 8018964:	693a      	ldr	r2, [r7, #16]
 8018966:	fa02 f303 	lsl.w	r3, r2, r3
 801896a:	697a      	ldr	r2, [r7, #20]
 801896c:	4313      	orrs	r3, r2
 801896e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	697a      	ldr	r2, [r7, #20]
 8018976:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	6819      	ldr	r1, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	f003 0310 	and.w	r3, r3, #16
 8018984:	22c0      	movs	r2, #192	; 0xc0
 8018986:	fa02 f303 	lsl.w	r3, r2, r3
 801898a:	43da      	mvns	r2, r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	400a      	ands	r2, r1
 8018992:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2201      	movs	r2, #1
 8018998:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	2200      	movs	r2, #0
 801899e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80189a0:	2300      	movs	r3, #0
}
 80189a2:	4618      	mov	r0, r3
 80189a4:	371c      	adds	r7, #28
 80189a6:	46bd      	mov	sp, r7
 80189a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ac:	4770      	bx	lr
	...

080189b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b086      	sub	sp, #24
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80189b8:	2300      	movs	r3, #0
 80189ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80189bc:	f7ff fbae 	bl	801811c <HAL_GetTick>
 80189c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d101      	bne.n	80189cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80189c8:	2301      	movs	r3, #1
 80189ca:	e099      	b.n	8018b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	2202      	movs	r2, #2
 80189d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2200      	movs	r2, #0
 80189d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	681a      	ldr	r2, [r3, #0]
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	f022 0201 	bic.w	r2, r2, #1
 80189ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80189ec:	e00f      	b.n	8018a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80189ee:	f7ff fb95 	bl	801811c <HAL_GetTick>
 80189f2:	4602      	mov	r2, r0
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	1ad3      	subs	r3, r2, r3
 80189f8:	2b05      	cmp	r3, #5
 80189fa:	d908      	bls.n	8018a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	2220      	movs	r2, #32
 8018a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	2203      	movs	r2, #3
 8018a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018a0a:	2303      	movs	r3, #3
 8018a0c:	e078      	b.n	8018b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f003 0301 	and.w	r3, r3, #1
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d1e8      	bne.n	80189ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018a24:	697a      	ldr	r2, [r7, #20]
 8018a26:	4b38      	ldr	r3, [pc, #224]	; (8018b08 <HAL_DMA_Init+0x158>)
 8018a28:	4013      	ands	r3, r2
 8018a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	685a      	ldr	r2, [r3, #4]
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	689b      	ldr	r3, [r3, #8]
 8018a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	691b      	ldr	r3, [r3, #16]
 8018a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	699b      	ldr	r3, [r3, #24]
 8018a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	6a1b      	ldr	r3, [r3, #32]
 8018a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018a5a:	697a      	ldr	r2, [r7, #20]
 8018a5c:	4313      	orrs	r3, r2
 8018a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a64:	2b04      	cmp	r3, #4
 8018a66:	d107      	bne.n	8018a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a70:	4313      	orrs	r3, r2
 8018a72:	697a      	ldr	r2, [r7, #20]
 8018a74:	4313      	orrs	r3, r2
 8018a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	697a      	ldr	r2, [r7, #20]
 8018a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	695b      	ldr	r3, [r3, #20]
 8018a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	f023 0307 	bic.w	r3, r3, #7
 8018a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a94:	697a      	ldr	r2, [r7, #20]
 8018a96:	4313      	orrs	r3, r2
 8018a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a9e:	2b04      	cmp	r3, #4
 8018aa0:	d117      	bne.n	8018ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aa6:	697a      	ldr	r2, [r7, #20]
 8018aa8:	4313      	orrs	r3, r2
 8018aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d00e      	beq.n	8018ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018ab4:	6878      	ldr	r0, [r7, #4]
 8018ab6:	f000 fa0b 	bl	8018ed0 <DMA_CheckFifoParam>
 8018aba:	4603      	mov	r3, r0
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d008      	beq.n	8018ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2240      	movs	r2, #64	; 0x40
 8018ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2201      	movs	r2, #1
 8018aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018ace:	2301      	movs	r3, #1
 8018ad0:	e016      	b.n	8018b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	697a      	ldr	r2, [r7, #20]
 8018ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f000 f9c2 	bl	8018e64 <DMA_CalcBaseAndBitshift>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ae8:	223f      	movs	r2, #63	; 0x3f
 8018aea:	409a      	lsls	r2, r3
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2200      	movs	r2, #0
 8018af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	2201      	movs	r2, #1
 8018afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018afe:	2300      	movs	r3, #0
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	f010803f 	.word	0xf010803f

08018b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b083      	sub	sp, #12
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	2b02      	cmp	r3, #2
 8018b1e:	d004      	beq.n	8018b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2280      	movs	r2, #128	; 0x80
 8018b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018b26:	2301      	movs	r3, #1
 8018b28:	e00c      	b.n	8018b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	2205      	movs	r2, #5
 8018b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	681a      	ldr	r2, [r3, #0]
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f022 0201 	bic.w	r2, r2, #1
 8018b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018b42:	2300      	movs	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	370c      	adds	r7, #12
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr

08018b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b086      	sub	sp, #24
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018b5c:	4b8e      	ldr	r3, [pc, #568]	; (8018d98 <HAL_DMA_IRQHandler+0x248>)
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	4a8e      	ldr	r2, [pc, #568]	; (8018d9c <HAL_DMA_IRQHandler+0x24c>)
 8018b62:	fba2 2303 	umull	r2, r3, r2, r3
 8018b66:	0a9b      	lsrs	r3, r3, #10
 8018b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018b70:	693b      	ldr	r3, [r7, #16]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b7a:	2208      	movs	r2, #8
 8018b7c:	409a      	lsls	r2, r3
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	4013      	ands	r3, r2
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d01a      	beq.n	8018bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	f003 0304 	and.w	r3, r3, #4
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d013      	beq.n	8018bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	f022 0204 	bic.w	r2, r2, #4
 8018ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ba8:	2208      	movs	r2, #8
 8018baa:	409a      	lsls	r2, r3
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018bb4:	f043 0201 	orr.w	r2, r3, #1
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bc0:	2201      	movs	r2, #1
 8018bc2:	409a      	lsls	r2, r3
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	4013      	ands	r3, r2
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d012      	beq.n	8018bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	695b      	ldr	r3, [r3, #20]
 8018bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00b      	beq.n	8018bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bde:	2201      	movs	r2, #1
 8018be0:	409a      	lsls	r2, r3
 8018be2:	693b      	ldr	r3, [r7, #16]
 8018be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018bea:	f043 0202 	orr.w	r2, r3, #2
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bf6:	2204      	movs	r2, #4
 8018bf8:	409a      	lsls	r2, r3
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	4013      	ands	r3, r2
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d012      	beq.n	8018c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	f003 0302 	and.w	r3, r3, #2
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00b      	beq.n	8018c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c14:	2204      	movs	r2, #4
 8018c16:	409a      	lsls	r2, r3
 8018c18:	693b      	ldr	r3, [r7, #16]
 8018c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c20:	f043 0204 	orr.w	r2, r3, #4
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c2c:	2210      	movs	r2, #16
 8018c2e:	409a      	lsls	r2, r3
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	4013      	ands	r3, r2
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d043      	beq.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f003 0308 	and.w	r3, r3, #8
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d03c      	beq.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c4a:	2210      	movs	r2, #16
 8018c4c:	409a      	lsls	r2, r3
 8018c4e:	693b      	ldr	r3, [r7, #16]
 8018c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d018      	beq.n	8018c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d108      	bne.n	8018c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d024      	beq.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c7a:	6878      	ldr	r0, [r7, #4]
 8018c7c:	4798      	blx	r3
 8018c7e:	e01f      	b.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d01b      	beq.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	4798      	blx	r3
 8018c90:	e016      	b.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d107      	bne.n	8018cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	681a      	ldr	r2, [r3, #0]
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	f022 0208 	bic.w	r2, r2, #8
 8018cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d003      	beq.n	8018cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cbc:	6878      	ldr	r0, [r7, #4]
 8018cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cc4:	2220      	movs	r2, #32
 8018cc6:	409a      	lsls	r2, r3
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	4013      	ands	r3, r2
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f000 808f 	beq.w	8018df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	f003 0310 	and.w	r3, r3, #16
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	f000 8087 	beq.w	8018df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ce6:	2220      	movs	r2, #32
 8018ce8:	409a      	lsls	r2, r3
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	2b05      	cmp	r3, #5
 8018cf8:	d136      	bne.n	8018d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	f022 0216 	bic.w	r2, r2, #22
 8018d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	695a      	ldr	r2, [r3, #20]
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d103      	bne.n	8018d2a <HAL_DMA_IRQHandler+0x1da>
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d007      	beq.n	8018d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	681a      	ldr	r2, [r3, #0]
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	f022 0208 	bic.w	r2, r2, #8
 8018d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d3e:	223f      	movs	r2, #63	; 0x3f
 8018d40:	409a      	lsls	r2, r3
 8018d42:	693b      	ldr	r3, [r7, #16]
 8018d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	2201      	movs	r2, #1
 8018d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2200      	movs	r2, #0
 8018d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d07e      	beq.n	8018e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	4798      	blx	r3
        }
        return;
 8018d66:	e079      	b.n	8018e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d01d      	beq.n	8018db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d10d      	bne.n	8018da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d031      	beq.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	4798      	blx	r3
 8018d94:	e02c      	b.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
 8018d96:	bf00      	nop
 8018d98:	20000564 	.word	0x20000564
 8018d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d023      	beq.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	4798      	blx	r3
 8018db0:	e01e      	b.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d10f      	bne.n	8018de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	681a      	ldr	r2, [r3, #0]
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	f022 0210 	bic.w	r2, r2, #16
 8018dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2201      	movs	r2, #1
 8018dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d003      	beq.n	8018df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dec:	6878      	ldr	r0, [r7, #4]
 8018dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d032      	beq.n	8018e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dfc:	f003 0301 	and.w	r3, r3, #1
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d022      	beq.n	8018e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2205      	movs	r2, #5
 8018e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	f022 0201 	bic.w	r2, r2, #1
 8018e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	3301      	adds	r3, #1
 8018e20:	60bb      	str	r3, [r7, #8]
 8018e22:	697a      	ldr	r2, [r7, #20]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d307      	bcc.n	8018e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	f003 0301 	and.w	r3, r3, #1
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d1f2      	bne.n	8018e1c <HAL_DMA_IRQHandler+0x2cc>
 8018e36:	e000      	b.n	8018e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8018e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	2200      	movs	r2, #0
 8018e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d005      	beq.n	8018e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	4798      	blx	r3
 8018e5a:	e000      	b.n	8018e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8018e5c:	bf00      	nop
    }
  }
}
 8018e5e:	3718      	adds	r7, #24
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b085      	sub	sp, #20
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	b2db      	uxtb	r3, r3
 8018e72:	3b10      	subs	r3, #16
 8018e74:	4a14      	ldr	r2, [pc, #80]	; (8018ec8 <DMA_CalcBaseAndBitshift+0x64>)
 8018e76:	fba2 2303 	umull	r2, r3, r2, r3
 8018e7a:	091b      	lsrs	r3, r3, #4
 8018e7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8018e7e:	4a13      	ldr	r2, [pc, #76]	; (8018ecc <DMA_CalcBaseAndBitshift+0x68>)
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	4413      	add	r3, r2
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	461a      	mov	r2, r3
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	2b03      	cmp	r3, #3
 8018e90:	d909      	bls.n	8018ea6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018e9a:	f023 0303 	bic.w	r3, r3, #3
 8018e9e:	1d1a      	adds	r2, r3, #4
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8018ea4:	e007      	b.n	8018eb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8018eae:	f023 0303 	bic.w	r3, r3, #3
 8018eb2:	687a      	ldr	r2, [r7, #4]
 8018eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8018eba:	4618      	mov	r0, r3
 8018ebc:	3714      	adds	r7, #20
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec4:	4770      	bx	lr
 8018ec6:	bf00      	nop
 8018ec8:	aaaaaaab 	.word	0xaaaaaaab
 8018ecc:	080023fc 	.word	0x080023fc

08018ed0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8018ed0:	b480      	push	{r7}
 8018ed2:	b085      	sub	sp, #20
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ee0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	699b      	ldr	r3, [r3, #24]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d11f      	bne.n	8018f2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8018eea:	68bb      	ldr	r3, [r7, #8]
 8018eec:	2b03      	cmp	r3, #3
 8018eee:	d856      	bhi.n	8018f9e <DMA_CheckFifoParam+0xce>
 8018ef0:	a201      	add	r2, pc, #4	; (adr r2, 8018ef8 <DMA_CheckFifoParam+0x28>)
 8018ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef6:	bf00      	nop
 8018ef8:	08018f09 	.word	0x08018f09
 8018efc:	08018f1b 	.word	0x08018f1b
 8018f00:	08018f09 	.word	0x08018f09
 8018f04:	08018f9f 	.word	0x08018f9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d046      	beq.n	8018fa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8018f14:	2301      	movs	r3, #1
 8018f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018f18:	e043      	b.n	8018fa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018f22:	d140      	bne.n	8018fa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8018f24:	2301      	movs	r3, #1
 8018f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018f28:	e03d      	b.n	8018fa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	699b      	ldr	r3, [r3, #24]
 8018f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018f32:	d121      	bne.n	8018f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	2b03      	cmp	r3, #3
 8018f38:	d837      	bhi.n	8018faa <DMA_CheckFifoParam+0xda>
 8018f3a:	a201      	add	r2, pc, #4	; (adr r2, 8018f40 <DMA_CheckFifoParam+0x70>)
 8018f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f40:	08018f51 	.word	0x08018f51
 8018f44:	08018f57 	.word	0x08018f57
 8018f48:	08018f51 	.word	0x08018f51
 8018f4c:	08018f69 	.word	0x08018f69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8018f50:	2301      	movs	r3, #1
 8018f52:	73fb      	strb	r3, [r7, #15]
      break;
 8018f54:	e030      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d025      	beq.n	8018fae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8018f62:	2301      	movs	r3, #1
 8018f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018f66:	e022      	b.n	8018fae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018f70:	d11f      	bne.n	8018fb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8018f72:	2301      	movs	r3, #1
 8018f74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8018f76:	e01c      	b.n	8018fb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	2b02      	cmp	r3, #2
 8018f7c:	d903      	bls.n	8018f86 <DMA_CheckFifoParam+0xb6>
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	2b03      	cmp	r3, #3
 8018f82:	d003      	beq.n	8018f8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8018f84:	e018      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8018f86:	2301      	movs	r3, #1
 8018f88:	73fb      	strb	r3, [r7, #15]
      break;
 8018f8a:	e015      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d00e      	beq.n	8018fb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8018f98:	2301      	movs	r3, #1
 8018f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8018f9c:	e00b      	b.n	8018fb6 <DMA_CheckFifoParam+0xe6>
      break;
 8018f9e:	bf00      	nop
 8018fa0:	e00a      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8018fa2:	bf00      	nop
 8018fa4:	e008      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8018fa6:	bf00      	nop
 8018fa8:	e006      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8018faa:	bf00      	nop
 8018fac:	e004      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8018fae:	bf00      	nop
 8018fb0:	e002      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8018fb2:	bf00      	nop
 8018fb4:	e000      	b.n	8018fb8 <DMA_CheckFifoParam+0xe8>
      break;
 8018fb6:	bf00      	nop
    }
  } 
  
  return status; 
 8018fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3714      	adds	r7, #20
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc4:	4770      	bx	lr
 8018fc6:	bf00      	nop

08018fc8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b086      	sub	sp, #24
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8018fda:	4b23      	ldr	r3, [pc, #140]	; (8019068 <HAL_FLASH_Program+0xa0>)
 8018fdc:	7e1b      	ldrb	r3, [r3, #24]
 8018fde:	2b01      	cmp	r3, #1
 8018fe0:	d101      	bne.n	8018fe6 <HAL_FLASH_Program+0x1e>
 8018fe2:	2302      	movs	r3, #2
 8018fe4:	e03b      	b.n	801905e <HAL_FLASH_Program+0x96>
 8018fe6:	4b20      	ldr	r3, [pc, #128]	; (8019068 <HAL_FLASH_Program+0xa0>)
 8018fe8:	2201      	movs	r2, #1
 8018fea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018ff0:	f000 f870 	bl	80190d4 <FLASH_WaitForLastOperation>
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8018ff8:	7dfb      	ldrb	r3, [r7, #23]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d12b      	bne.n	8019056 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	2b00      	cmp	r3, #0
 8019002:	d105      	bne.n	8019010 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8019004:	783b      	ldrb	r3, [r7, #0]
 8019006:	4619      	mov	r1, r3
 8019008:	68b8      	ldr	r0, [r7, #8]
 801900a:	f000 f91b 	bl	8019244 <FLASH_Program_Byte>
 801900e:	e016      	b.n	801903e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	2b01      	cmp	r3, #1
 8019014:	d105      	bne.n	8019022 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8019016:	883b      	ldrh	r3, [r7, #0]
 8019018:	4619      	mov	r1, r3
 801901a:	68b8      	ldr	r0, [r7, #8]
 801901c:	f000 f8ee 	bl	80191fc <FLASH_Program_HalfWord>
 8019020:	e00d      	b.n	801903e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2b02      	cmp	r3, #2
 8019026:	d105      	bne.n	8019034 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	4619      	mov	r1, r3
 801902c:	68b8      	ldr	r0, [r7, #8]
 801902e:	f000 f8c3 	bl	80191b8 <FLASH_Program_Word>
 8019032:	e004      	b.n	801903e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8019034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019038:	68b8      	ldr	r0, [r7, #8]
 801903a:	f000 f88b 	bl	8019154 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801903e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8019042:	f000 f847 	bl	80190d4 <FLASH_WaitForLastOperation>
 8019046:	4603      	mov	r3, r0
 8019048:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801904a:	4b08      	ldr	r3, [pc, #32]	; (801906c <HAL_FLASH_Program+0xa4>)
 801904c:	691b      	ldr	r3, [r3, #16]
 801904e:	4a07      	ldr	r2, [pc, #28]	; (801906c <HAL_FLASH_Program+0xa4>)
 8019050:	f023 0301 	bic.w	r3, r3, #1
 8019054:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019056:	4b04      	ldr	r3, [pc, #16]	; (8019068 <HAL_FLASH_Program+0xa0>)
 8019058:	2200      	movs	r2, #0
 801905a:	761a      	strb	r2, [r3, #24]
  
  return status;
 801905c:	7dfb      	ldrb	r3, [r7, #23]
}
 801905e:	4618      	mov	r0, r3
 8019060:	3718      	adds	r7, #24
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}
 8019066:	bf00      	nop
 8019068:	20006a50 	.word	0x20006a50
 801906c:	40023c00 	.word	0x40023c00

08019070 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019070:	b480      	push	{r7}
 8019072:	b083      	sub	sp, #12
 8019074:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8019076:	2300      	movs	r3, #0
 8019078:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801907a:	4b0b      	ldr	r3, [pc, #44]	; (80190a8 <HAL_FLASH_Unlock+0x38>)
 801907c:	691b      	ldr	r3, [r3, #16]
 801907e:	2b00      	cmp	r3, #0
 8019080:	da0b      	bge.n	801909a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8019082:	4b09      	ldr	r3, [pc, #36]	; (80190a8 <HAL_FLASH_Unlock+0x38>)
 8019084:	4a09      	ldr	r2, [pc, #36]	; (80190ac <HAL_FLASH_Unlock+0x3c>)
 8019086:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8019088:	4b07      	ldr	r3, [pc, #28]	; (80190a8 <HAL_FLASH_Unlock+0x38>)
 801908a:	4a09      	ldr	r2, [pc, #36]	; (80190b0 <HAL_FLASH_Unlock+0x40>)
 801908c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801908e:	4b06      	ldr	r3, [pc, #24]	; (80190a8 <HAL_FLASH_Unlock+0x38>)
 8019090:	691b      	ldr	r3, [r3, #16]
 8019092:	2b00      	cmp	r3, #0
 8019094:	da01      	bge.n	801909a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8019096:	2301      	movs	r3, #1
 8019098:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801909a:	79fb      	ldrb	r3, [r7, #7]
}
 801909c:	4618      	mov	r0, r3
 801909e:	370c      	adds	r7, #12
 80190a0:	46bd      	mov	sp, r7
 80190a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a6:	4770      	bx	lr
 80190a8:	40023c00 	.word	0x40023c00
 80190ac:	45670123 	.word	0x45670123
 80190b0:	cdef89ab 	.word	0xcdef89ab

080190b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80190b4:	b480      	push	{r7}
 80190b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80190b8:	4b05      	ldr	r3, [pc, #20]	; (80190d0 <HAL_FLASH_Lock+0x1c>)
 80190ba:	691b      	ldr	r3, [r3, #16]
 80190bc:	4a04      	ldr	r2, [pc, #16]	; (80190d0 <HAL_FLASH_Lock+0x1c>)
 80190be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80190c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80190c4:	2300      	movs	r3, #0
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	46bd      	mov	sp, r7
 80190ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ce:	4770      	bx	lr
 80190d0:	40023c00 	.word	0x40023c00

080190d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80190dc:	2300      	movs	r3, #0
 80190de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80190e0:	4b1a      	ldr	r3, [pc, #104]	; (801914c <FLASH_WaitForLastOperation+0x78>)
 80190e2:	2200      	movs	r2, #0
 80190e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80190e6:	f7ff f819 	bl	801811c <HAL_GetTick>
 80190ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80190ec:	e010      	b.n	8019110 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190f4:	d00c      	beq.n	8019110 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d007      	beq.n	801910c <FLASH_WaitForLastOperation+0x38>
 80190fc:	f7ff f80e 	bl	801811c <HAL_GetTick>
 8019100:	4602      	mov	r2, r0
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	1ad3      	subs	r3, r2, r3
 8019106:	687a      	ldr	r2, [r7, #4]
 8019108:	429a      	cmp	r2, r3
 801910a:	d201      	bcs.n	8019110 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801910c:	2303      	movs	r3, #3
 801910e:	e019      	b.n	8019144 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019110:	4b0f      	ldr	r3, [pc, #60]	; (8019150 <FLASH_WaitForLastOperation+0x7c>)
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019118:	2b00      	cmp	r3, #0
 801911a:	d1e8      	bne.n	80190ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801911c:	4b0c      	ldr	r3, [pc, #48]	; (8019150 <FLASH_WaitForLastOperation+0x7c>)
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	f003 0301 	and.w	r3, r3, #1
 8019124:	2b00      	cmp	r3, #0
 8019126:	d002      	beq.n	801912e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019128:	4b09      	ldr	r3, [pc, #36]	; (8019150 <FLASH_WaitForLastOperation+0x7c>)
 801912a:	2201      	movs	r2, #1
 801912c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801912e:	4b08      	ldr	r3, [pc, #32]	; (8019150 <FLASH_WaitForLastOperation+0x7c>)
 8019130:	68db      	ldr	r3, [r3, #12]
 8019132:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8019136:	2b00      	cmp	r3, #0
 8019138:	d003      	beq.n	8019142 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801913a:	f000 f8a5 	bl	8019288 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801913e:	2301      	movs	r3, #1
 8019140:	e000      	b.n	8019144 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8019142:	2300      	movs	r3, #0
  
}  
 8019144:	4618      	mov	r0, r3
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}
 801914c:	20006a50 	.word	0x20006a50
 8019150:	40023c00 	.word	0x40023c00

08019154 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8019154:	b480      	push	{r7}
 8019156:	b085      	sub	sp, #20
 8019158:	af00      	add	r7, sp, #0
 801915a:	60f8      	str	r0, [r7, #12]
 801915c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019160:	4b14      	ldr	r3, [pc, #80]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 8019162:	691b      	ldr	r3, [r3, #16]
 8019164:	4a13      	ldr	r2, [pc, #76]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 8019166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801916a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801916c:	4b11      	ldr	r3, [pc, #68]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 801916e:	691b      	ldr	r3, [r3, #16]
 8019170:	4a10      	ldr	r2, [pc, #64]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 8019172:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8019176:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019178:	4b0e      	ldr	r3, [pc, #56]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 801917a:	691b      	ldr	r3, [r3, #16]
 801917c:	4a0d      	ldr	r2, [pc, #52]	; (80191b4 <FLASH_Program_DoubleWord+0x60>)
 801917e:	f043 0301 	orr.w	r3, r3, #1
 8019182:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	683a      	ldr	r2, [r7, #0]
 8019188:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 801918a:	f3bf 8f6f 	isb	sy
}
 801918e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8019190:	e9d7 0100 	ldrd	r0, r1, [r7]
 8019194:	f04f 0200 	mov.w	r2, #0
 8019198:	f04f 0300 	mov.w	r3, #0
 801919c:	000a      	movs	r2, r1
 801919e:	2300      	movs	r3, #0
 80191a0:	68f9      	ldr	r1, [r7, #12]
 80191a2:	3104      	adds	r1, #4
 80191a4:	4613      	mov	r3, r2
 80191a6:	600b      	str	r3, [r1, #0]
}
 80191a8:	bf00      	nop
 80191aa:	3714      	adds	r7, #20
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr
 80191b4:	40023c00 	.word	0x40023c00

080191b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80191c2:	4b0d      	ldr	r3, [pc, #52]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191c4:	691b      	ldr	r3, [r3, #16]
 80191c6:	4a0c      	ldr	r2, [pc, #48]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80191cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80191ce:	4b0a      	ldr	r3, [pc, #40]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191d0:	691b      	ldr	r3, [r3, #16]
 80191d2:	4a09      	ldr	r2, [pc, #36]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80191d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80191da:	4b07      	ldr	r3, [pc, #28]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191dc:	691b      	ldr	r3, [r3, #16]
 80191de:	4a06      	ldr	r2, [pc, #24]	; (80191f8 <FLASH_Program_Word+0x40>)
 80191e0:	f043 0301 	orr.w	r3, r3, #1
 80191e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	683a      	ldr	r2, [r7, #0]
 80191ea:	601a      	str	r2, [r3, #0]
}
 80191ec:	bf00      	nop
 80191ee:	370c      	adds	r7, #12
 80191f0:	46bd      	mov	sp, r7
 80191f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f6:	4770      	bx	lr
 80191f8:	40023c00 	.word	0x40023c00

080191fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80191fc:	b480      	push	{r7}
 80191fe:	b083      	sub	sp, #12
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	460b      	mov	r3, r1
 8019206:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019208:	4b0d      	ldr	r3, [pc, #52]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 801920a:	691b      	ldr	r3, [r3, #16]
 801920c:	4a0c      	ldr	r2, [pc, #48]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 801920e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8019214:	4b0a      	ldr	r3, [pc, #40]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 8019216:	691b      	ldr	r3, [r3, #16]
 8019218:	4a09      	ldr	r2, [pc, #36]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 801921a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801921e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019220:	4b07      	ldr	r3, [pc, #28]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 8019222:	691b      	ldr	r3, [r3, #16]
 8019224:	4a06      	ldr	r2, [pc, #24]	; (8019240 <FLASH_Program_HalfWord+0x44>)
 8019226:	f043 0301 	orr.w	r3, r3, #1
 801922a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	887a      	ldrh	r2, [r7, #2]
 8019230:	801a      	strh	r2, [r3, #0]
}
 8019232:	bf00      	nop
 8019234:	370c      	adds	r7, #12
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop
 8019240:	40023c00 	.word	0x40023c00

08019244 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019244:	b480      	push	{r7}
 8019246:	b083      	sub	sp, #12
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
 801924c:	460b      	mov	r3, r1
 801924e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019250:	4b0c      	ldr	r3, [pc, #48]	; (8019284 <FLASH_Program_Byte+0x40>)
 8019252:	691b      	ldr	r3, [r3, #16]
 8019254:	4a0b      	ldr	r2, [pc, #44]	; (8019284 <FLASH_Program_Byte+0x40>)
 8019256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801925a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801925c:	4b09      	ldr	r3, [pc, #36]	; (8019284 <FLASH_Program_Byte+0x40>)
 801925e:	4a09      	ldr	r2, [pc, #36]	; (8019284 <FLASH_Program_Byte+0x40>)
 8019260:	691b      	ldr	r3, [r3, #16]
 8019262:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019264:	4b07      	ldr	r3, [pc, #28]	; (8019284 <FLASH_Program_Byte+0x40>)
 8019266:	691b      	ldr	r3, [r3, #16]
 8019268:	4a06      	ldr	r2, [pc, #24]	; (8019284 <FLASH_Program_Byte+0x40>)
 801926a:	f043 0301 	orr.w	r3, r3, #1
 801926e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	78fa      	ldrb	r2, [r7, #3]
 8019274:	701a      	strb	r2, [r3, #0]
}
 8019276:	bf00      	nop
 8019278:	370c      	adds	r7, #12
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop
 8019284:	40023c00 	.word	0x40023c00

08019288 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8019288:	b480      	push	{r7}
 801928a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801928c:	4b2f      	ldr	r3, [pc, #188]	; (801934c <FLASH_SetErrorCode+0xc4>)
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	f003 0310 	and.w	r3, r3, #16
 8019294:	2b00      	cmp	r3, #0
 8019296:	d008      	beq.n	80192aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8019298:	4b2d      	ldr	r3, [pc, #180]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 801929a:	69db      	ldr	r3, [r3, #28]
 801929c:	f043 0310 	orr.w	r3, r3, #16
 80192a0:	4a2b      	ldr	r2, [pc, #172]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80192a4:	4b29      	ldr	r3, [pc, #164]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192a6:	2210      	movs	r2, #16
 80192a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80192aa:	4b28      	ldr	r3, [pc, #160]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192ac:	68db      	ldr	r3, [r3, #12]
 80192ae:	f003 0320 	and.w	r3, r3, #32
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d008      	beq.n	80192c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80192b6:	4b26      	ldr	r3, [pc, #152]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192b8:	69db      	ldr	r3, [r3, #28]
 80192ba:	f043 0308 	orr.w	r3, r3, #8
 80192be:	4a24      	ldr	r2, [pc, #144]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80192c2:	4b22      	ldr	r3, [pc, #136]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192c4:	2220      	movs	r2, #32
 80192c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80192c8:	4b20      	ldr	r3, [pc, #128]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192ca:	68db      	ldr	r3, [r3, #12]
 80192cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d008      	beq.n	80192e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80192d4:	4b1e      	ldr	r3, [pc, #120]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192d6:	69db      	ldr	r3, [r3, #28]
 80192d8:	f043 0304 	orr.w	r3, r3, #4
 80192dc:	4a1c      	ldr	r2, [pc, #112]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80192e0:	4b1a      	ldr	r3, [pc, #104]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192e2:	2240      	movs	r2, #64	; 0x40
 80192e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80192e6:	4b19      	ldr	r3, [pc, #100]	; (801934c <FLASH_SetErrorCode+0xc4>)
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d008      	beq.n	8019304 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80192f2:	4b17      	ldr	r3, [pc, #92]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192f4:	69db      	ldr	r3, [r3, #28]
 80192f6:	f043 0302 	orr.w	r3, r3, #2
 80192fa:	4a15      	ldr	r2, [pc, #84]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 80192fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80192fe:	4b13      	ldr	r3, [pc, #76]	; (801934c <FLASH_SetErrorCode+0xc4>)
 8019300:	2280      	movs	r2, #128	; 0x80
 8019302:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8019304:	4b11      	ldr	r3, [pc, #68]	; (801934c <FLASH_SetErrorCode+0xc4>)
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801930c:	2b00      	cmp	r3, #0
 801930e:	d009      	beq.n	8019324 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8019310:	4b0f      	ldr	r3, [pc, #60]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 8019312:	69db      	ldr	r3, [r3, #28]
 8019314:	f043 0301 	orr.w	r3, r3, #1
 8019318:	4a0d      	ldr	r2, [pc, #52]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 801931a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 801931c:	4b0b      	ldr	r3, [pc, #44]	; (801934c <FLASH_SetErrorCode+0xc4>)
 801931e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019322:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8019324:	4b09      	ldr	r3, [pc, #36]	; (801934c <FLASH_SetErrorCode+0xc4>)
 8019326:	68db      	ldr	r3, [r3, #12]
 8019328:	f003 0302 	and.w	r3, r3, #2
 801932c:	2b00      	cmp	r3, #0
 801932e:	d008      	beq.n	8019342 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8019330:	4b07      	ldr	r3, [pc, #28]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 8019332:	69db      	ldr	r3, [r3, #28]
 8019334:	f043 0320 	orr.w	r3, r3, #32
 8019338:	4a05      	ldr	r2, [pc, #20]	; (8019350 <FLASH_SetErrorCode+0xc8>)
 801933a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801933c:	4b03      	ldr	r3, [pc, #12]	; (801934c <FLASH_SetErrorCode+0xc4>)
 801933e:	2202      	movs	r2, #2
 8019340:	60da      	str	r2, [r3, #12]
  }
}
 8019342:	bf00      	nop
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr
 801934c:	40023c00 	.word	0x40023c00
 8019350:	20006a50 	.word	0x20006a50

08019354 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b084      	sub	sp, #16
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
 801935c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801935e:	2301      	movs	r3, #1
 8019360:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8019362:	2300      	movs	r3, #0
 8019364:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019366:	4b31      	ldr	r3, [pc, #196]	; (801942c <HAL_FLASHEx_Erase+0xd8>)
 8019368:	7e1b      	ldrb	r3, [r3, #24]
 801936a:	2b01      	cmp	r3, #1
 801936c:	d101      	bne.n	8019372 <HAL_FLASHEx_Erase+0x1e>
 801936e:	2302      	movs	r3, #2
 8019370:	e058      	b.n	8019424 <HAL_FLASHEx_Erase+0xd0>
 8019372:	4b2e      	ldr	r3, [pc, #184]	; (801942c <HAL_FLASHEx_Erase+0xd8>)
 8019374:	2201      	movs	r2, #1
 8019376:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019378:	f24c 3050 	movw	r0, #50000	; 0xc350
 801937c:	f7ff feaa 	bl	80190d4 <FLASH_WaitForLastOperation>
 8019380:	4603      	mov	r3, r0
 8019382:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019384:	7bfb      	ldrb	r3, [r7, #15]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d148      	bne.n	801941c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	f04f 32ff 	mov.w	r2, #4294967295
 8019390:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	2b01      	cmp	r3, #1
 8019398:	d115      	bne.n	80193c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	691b      	ldr	r3, [r3, #16]
 801939e:	b2da      	uxtb	r2, r3
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	4619      	mov	r1, r3
 80193a6:	4610      	mov	r0, r2
 80193a8:	f000 f844 	bl	8019434 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80193ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80193b0:	f7ff fe90 	bl	80190d4 <FLASH_WaitForLastOperation>
 80193b4:	4603      	mov	r3, r0
 80193b6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80193b8:	4b1d      	ldr	r3, [pc, #116]	; (8019430 <HAL_FLASHEx_Erase+0xdc>)
 80193ba:	691b      	ldr	r3, [r3, #16]
 80193bc:	4a1c      	ldr	r2, [pc, #112]	; (8019430 <HAL_FLASHEx_Erase+0xdc>)
 80193be:	f023 0304 	bic.w	r3, r3, #4
 80193c2:	6113      	str	r3, [r2, #16]
 80193c4:	e028      	b.n	8019418 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	689b      	ldr	r3, [r3, #8]
 80193ca:	60bb      	str	r3, [r7, #8]
 80193cc:	e01c      	b.n	8019408 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	691b      	ldr	r3, [r3, #16]
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	4619      	mov	r1, r3
 80193d6:	68b8      	ldr	r0, [r7, #8]
 80193d8:	f000 f850 	bl	801947c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80193dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80193e0:	f7ff fe78 	bl	80190d4 <FLASH_WaitForLastOperation>
 80193e4:	4603      	mov	r3, r0
 80193e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80193e8:	4b11      	ldr	r3, [pc, #68]	; (8019430 <HAL_FLASHEx_Erase+0xdc>)
 80193ea:	691b      	ldr	r3, [r3, #16]
 80193ec:	4a10      	ldr	r2, [pc, #64]	; (8019430 <HAL_FLASHEx_Erase+0xdc>)
 80193ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80193f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80193f4:	7bfb      	ldrb	r3, [r7, #15]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d003      	beq.n	8019402 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	68ba      	ldr	r2, [r7, #8]
 80193fe:	601a      	str	r2, [r3, #0]
          break;
 8019400:	e00a      	b.n	8019418 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019402:	68bb      	ldr	r3, [r7, #8]
 8019404:	3301      	adds	r3, #1
 8019406:	60bb      	str	r3, [r7, #8]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	68da      	ldr	r2, [r3, #12]
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	689b      	ldr	r3, [r3, #8]
 8019410:	4413      	add	r3, r2
 8019412:	68ba      	ldr	r2, [r7, #8]
 8019414:	429a      	cmp	r2, r3
 8019416:	d3da      	bcc.n	80193ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8019418:	f000 f878 	bl	801950c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801941c:	4b03      	ldr	r3, [pc, #12]	; (801942c <HAL_FLASHEx_Erase+0xd8>)
 801941e:	2200      	movs	r2, #0
 8019420:	761a      	strb	r2, [r3, #24]

  return status;
 8019422:	7bfb      	ldrb	r3, [r7, #15]
}
 8019424:	4618      	mov	r0, r3
 8019426:	3710      	adds	r7, #16
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}
 801942c:	20006a50 	.word	0x20006a50
 8019430:	40023c00 	.word	0x40023c00

08019434 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019434:	b480      	push	{r7}
 8019436:	b083      	sub	sp, #12
 8019438:	af00      	add	r7, sp, #0
 801943a:	4603      	mov	r3, r0
 801943c:	6039      	str	r1, [r7, #0]
 801943e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019440:	4b0d      	ldr	r3, [pc, #52]	; (8019478 <FLASH_MassErase+0x44>)
 8019442:	691b      	ldr	r3, [r3, #16]
 8019444:	4a0c      	ldr	r2, [pc, #48]	; (8019478 <FLASH_MassErase+0x44>)
 8019446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801944a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801944c:	4b0a      	ldr	r3, [pc, #40]	; (8019478 <FLASH_MassErase+0x44>)
 801944e:	691b      	ldr	r3, [r3, #16]
 8019450:	4a09      	ldr	r2, [pc, #36]	; (8019478 <FLASH_MassErase+0x44>)
 8019452:	f043 0304 	orr.w	r3, r3, #4
 8019456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8019458:	4b07      	ldr	r3, [pc, #28]	; (8019478 <FLASH_MassErase+0x44>)
 801945a:	691a      	ldr	r2, [r3, #16]
 801945c:	79fb      	ldrb	r3, [r7, #7]
 801945e:	021b      	lsls	r3, r3, #8
 8019460:	4313      	orrs	r3, r2
 8019462:	4a05      	ldr	r2, [pc, #20]	; (8019478 <FLASH_MassErase+0x44>)
 8019464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019468:	6113      	str	r3, [r2, #16]
}
 801946a:	bf00      	nop
 801946c:	370c      	adds	r7, #12
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr
 8019476:	bf00      	nop
 8019478:	40023c00 	.word	0x40023c00

0801947c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	460b      	mov	r3, r1
 8019486:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8019488:	2300      	movs	r3, #0
 801948a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801948c:	78fb      	ldrb	r3, [r7, #3]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d102      	bne.n	8019498 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8019492:	2300      	movs	r3, #0
 8019494:	60fb      	str	r3, [r7, #12]
 8019496:	e010      	b.n	80194ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8019498:	78fb      	ldrb	r3, [r7, #3]
 801949a:	2b01      	cmp	r3, #1
 801949c:	d103      	bne.n	80194a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801949e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80194a2:	60fb      	str	r3, [r7, #12]
 80194a4:	e009      	b.n	80194ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80194a6:	78fb      	ldrb	r3, [r7, #3]
 80194a8:	2b02      	cmp	r3, #2
 80194aa:	d103      	bne.n	80194b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80194ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80194b0:	60fb      	str	r3, [r7, #12]
 80194b2:	e002      	b.n	80194ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80194b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80194b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80194ba:	4b13      	ldr	r3, [pc, #76]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194bc:	691b      	ldr	r3, [r3, #16]
 80194be:	4a12      	ldr	r2, [pc, #72]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80194c6:	4b10      	ldr	r3, [pc, #64]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194c8:	691a      	ldr	r2, [r3, #16]
 80194ca:	490f      	ldr	r1, [pc, #60]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	4313      	orrs	r3, r2
 80194d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80194d2:	4b0d      	ldr	r3, [pc, #52]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194d4:	691b      	ldr	r3, [r3, #16]
 80194d6:	4a0c      	ldr	r2, [pc, #48]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80194dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80194de:	4b0a      	ldr	r3, [pc, #40]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194e0:	691a      	ldr	r2, [r3, #16]
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	00db      	lsls	r3, r3, #3
 80194e6:	4313      	orrs	r3, r2
 80194e8:	4a07      	ldr	r2, [pc, #28]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194ea:	f043 0302 	orr.w	r3, r3, #2
 80194ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80194f0:	4b05      	ldr	r3, [pc, #20]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194f2:	691b      	ldr	r3, [r3, #16]
 80194f4:	4a04      	ldr	r2, [pc, #16]	; (8019508 <FLASH_Erase_Sector+0x8c>)
 80194f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80194fa:	6113      	str	r3, [r2, #16]
}
 80194fc:	bf00      	nop
 80194fe:	3714      	adds	r7, #20
 8019500:	46bd      	mov	sp, r7
 8019502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019506:	4770      	bx	lr
 8019508:	40023c00 	.word	0x40023c00

0801950c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801950c:	b480      	push	{r7}
 801950e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8019510:	4b20      	ldr	r3, [pc, #128]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019518:	2b00      	cmp	r3, #0
 801951a:	d017      	beq.n	801954c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801951c:	4b1d      	ldr	r3, [pc, #116]	; (8019594 <FLASH_FlushCaches+0x88>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	4a1c      	ldr	r2, [pc, #112]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019522:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019526:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019528:	4b1a      	ldr	r3, [pc, #104]	; (8019594 <FLASH_FlushCaches+0x88>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4a19      	ldr	r2, [pc, #100]	; (8019594 <FLASH_FlushCaches+0x88>)
 801952e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019532:	6013      	str	r3, [r2, #0]
 8019534:	4b17      	ldr	r3, [pc, #92]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	4a16      	ldr	r2, [pc, #88]	; (8019594 <FLASH_FlushCaches+0x88>)
 801953a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801953e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8019540:	4b14      	ldr	r3, [pc, #80]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	4a13      	ldr	r2, [pc, #76]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801954a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801954c:	4b11      	ldr	r3, [pc, #68]	; (8019594 <FLASH_FlushCaches+0x88>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019554:	2b00      	cmp	r3, #0
 8019556:	d017      	beq.n	8019588 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8019558:	4b0e      	ldr	r3, [pc, #56]	; (8019594 <FLASH_FlushCaches+0x88>)
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	4a0d      	ldr	r2, [pc, #52]	; (8019594 <FLASH_FlushCaches+0x88>)
 801955e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019562:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8019564:	4b0b      	ldr	r3, [pc, #44]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	4a0a      	ldr	r2, [pc, #40]	; (8019594 <FLASH_FlushCaches+0x88>)
 801956a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801956e:	6013      	str	r3, [r2, #0]
 8019570:	4b08      	ldr	r3, [pc, #32]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	4a07      	ldr	r2, [pc, #28]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801957a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801957c:	4b05      	ldr	r3, [pc, #20]	; (8019594 <FLASH_FlushCaches+0x88>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	4a04      	ldr	r2, [pc, #16]	; (8019594 <FLASH_FlushCaches+0x88>)
 8019582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019586:	6013      	str	r3, [r2, #0]
  }
}
 8019588:	bf00      	nop
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	40023c00 	.word	0x40023c00

08019598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8019598:	b480      	push	{r7}
 801959a:	b089      	sub	sp, #36	; 0x24
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80195a2:	2300      	movs	r3, #0
 80195a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80195a6:	2300      	movs	r3, #0
 80195a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80195aa:	2300      	movs	r3, #0
 80195ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80195ae:	2300      	movs	r3, #0
 80195b0:	61fb      	str	r3, [r7, #28]
 80195b2:	e165      	b.n	8019880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80195b4:	2201      	movs	r2, #1
 80195b6:	69fb      	ldr	r3, [r7, #28]
 80195b8:	fa02 f303 	lsl.w	r3, r2, r3
 80195bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	697a      	ldr	r2, [r7, #20]
 80195c4:	4013      	ands	r3, r2
 80195c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80195c8:	693a      	ldr	r2, [r7, #16]
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	429a      	cmp	r2, r3
 80195ce:	f040 8154 	bne.w	801987a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	685b      	ldr	r3, [r3, #4]
 80195d6:	f003 0303 	and.w	r3, r3, #3
 80195da:	2b01      	cmp	r3, #1
 80195dc:	d005      	beq.n	80195ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	685b      	ldr	r3, [r3, #4]
 80195e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80195e6:	2b02      	cmp	r3, #2
 80195e8:	d130      	bne.n	801964c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	689b      	ldr	r3, [r3, #8]
 80195ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	005b      	lsls	r3, r3, #1
 80195f4:	2203      	movs	r2, #3
 80195f6:	fa02 f303 	lsl.w	r3, r2, r3
 80195fa:	43db      	mvns	r3, r3
 80195fc:	69ba      	ldr	r2, [r7, #24]
 80195fe:	4013      	ands	r3, r2
 8019600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	68da      	ldr	r2, [r3, #12]
 8019606:	69fb      	ldr	r3, [r7, #28]
 8019608:	005b      	lsls	r3, r3, #1
 801960a:	fa02 f303 	lsl.w	r3, r2, r3
 801960e:	69ba      	ldr	r2, [r7, #24]
 8019610:	4313      	orrs	r3, r2
 8019612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	69ba      	ldr	r2, [r7, #24]
 8019618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019620:	2201      	movs	r2, #1
 8019622:	69fb      	ldr	r3, [r7, #28]
 8019624:	fa02 f303 	lsl.w	r3, r2, r3
 8019628:	43db      	mvns	r3, r3
 801962a:	69ba      	ldr	r2, [r7, #24]
 801962c:	4013      	ands	r3, r2
 801962e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	685b      	ldr	r3, [r3, #4]
 8019634:	091b      	lsrs	r3, r3, #4
 8019636:	f003 0201 	and.w	r2, r3, #1
 801963a:	69fb      	ldr	r3, [r7, #28]
 801963c:	fa02 f303 	lsl.w	r3, r2, r3
 8019640:	69ba      	ldr	r2, [r7, #24]
 8019642:	4313      	orrs	r3, r2
 8019644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	69ba      	ldr	r2, [r7, #24]
 801964a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	f003 0303 	and.w	r3, r3, #3
 8019654:	2b03      	cmp	r3, #3
 8019656:	d017      	beq.n	8019688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	68db      	ldr	r3, [r3, #12]
 801965c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801965e:	69fb      	ldr	r3, [r7, #28]
 8019660:	005b      	lsls	r3, r3, #1
 8019662:	2203      	movs	r2, #3
 8019664:	fa02 f303 	lsl.w	r3, r2, r3
 8019668:	43db      	mvns	r3, r3
 801966a:	69ba      	ldr	r2, [r7, #24]
 801966c:	4013      	ands	r3, r2
 801966e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	689a      	ldr	r2, [r3, #8]
 8019674:	69fb      	ldr	r3, [r7, #28]
 8019676:	005b      	lsls	r3, r3, #1
 8019678:	fa02 f303 	lsl.w	r3, r2, r3
 801967c:	69ba      	ldr	r2, [r7, #24]
 801967e:	4313      	orrs	r3, r2
 8019680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	69ba      	ldr	r2, [r7, #24]
 8019686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019688:	683b      	ldr	r3, [r7, #0]
 801968a:	685b      	ldr	r3, [r3, #4]
 801968c:	f003 0303 	and.w	r3, r3, #3
 8019690:	2b02      	cmp	r3, #2
 8019692:	d123      	bne.n	80196dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	08da      	lsrs	r2, r3, #3
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	3208      	adds	r2, #8
 801969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80196a2:	69fb      	ldr	r3, [r7, #28]
 80196a4:	f003 0307 	and.w	r3, r3, #7
 80196a8:	009b      	lsls	r3, r3, #2
 80196aa:	220f      	movs	r2, #15
 80196ac:	fa02 f303 	lsl.w	r3, r2, r3
 80196b0:	43db      	mvns	r3, r3
 80196b2:	69ba      	ldr	r2, [r7, #24]
 80196b4:	4013      	ands	r3, r2
 80196b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	691a      	ldr	r2, [r3, #16]
 80196bc:	69fb      	ldr	r3, [r7, #28]
 80196be:	f003 0307 	and.w	r3, r3, #7
 80196c2:	009b      	lsls	r3, r3, #2
 80196c4:	fa02 f303 	lsl.w	r3, r2, r3
 80196c8:	69ba      	ldr	r2, [r7, #24]
 80196ca:	4313      	orrs	r3, r2
 80196cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80196ce:	69fb      	ldr	r3, [r7, #28]
 80196d0:	08da      	lsrs	r2, r3, #3
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	3208      	adds	r2, #8
 80196d6:	69b9      	ldr	r1, [r7, #24]
 80196d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80196e2:	69fb      	ldr	r3, [r7, #28]
 80196e4:	005b      	lsls	r3, r3, #1
 80196e6:	2203      	movs	r2, #3
 80196e8:	fa02 f303 	lsl.w	r3, r2, r3
 80196ec:	43db      	mvns	r3, r3
 80196ee:	69ba      	ldr	r2, [r7, #24]
 80196f0:	4013      	ands	r3, r2
 80196f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	685b      	ldr	r3, [r3, #4]
 80196f8:	f003 0203 	and.w	r2, r3, #3
 80196fc:	69fb      	ldr	r3, [r7, #28]
 80196fe:	005b      	lsls	r3, r3, #1
 8019700:	fa02 f303 	lsl.w	r3, r2, r3
 8019704:	69ba      	ldr	r2, [r7, #24]
 8019706:	4313      	orrs	r3, r2
 8019708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	69ba      	ldr	r2, [r7, #24]
 801970e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	685b      	ldr	r3, [r3, #4]
 8019714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8019718:	2b00      	cmp	r3, #0
 801971a:	f000 80ae 	beq.w	801987a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801971e:	2300      	movs	r3, #0
 8019720:	60fb      	str	r3, [r7, #12]
 8019722:	4b5d      	ldr	r3, [pc, #372]	; (8019898 <HAL_GPIO_Init+0x300>)
 8019724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019726:	4a5c      	ldr	r2, [pc, #368]	; (8019898 <HAL_GPIO_Init+0x300>)
 8019728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801972c:	6453      	str	r3, [r2, #68]	; 0x44
 801972e:	4b5a      	ldr	r3, [pc, #360]	; (8019898 <HAL_GPIO_Init+0x300>)
 8019730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019736:	60fb      	str	r3, [r7, #12]
 8019738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801973a:	4a58      	ldr	r2, [pc, #352]	; (801989c <HAL_GPIO_Init+0x304>)
 801973c:	69fb      	ldr	r3, [r7, #28]
 801973e:	089b      	lsrs	r3, r3, #2
 8019740:	3302      	adds	r3, #2
 8019742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019748:	69fb      	ldr	r3, [r7, #28]
 801974a:	f003 0303 	and.w	r3, r3, #3
 801974e:	009b      	lsls	r3, r3, #2
 8019750:	220f      	movs	r2, #15
 8019752:	fa02 f303 	lsl.w	r3, r2, r3
 8019756:	43db      	mvns	r3, r3
 8019758:	69ba      	ldr	r2, [r7, #24]
 801975a:	4013      	ands	r3, r2
 801975c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	4a4f      	ldr	r2, [pc, #316]	; (80198a0 <HAL_GPIO_Init+0x308>)
 8019762:	4293      	cmp	r3, r2
 8019764:	d025      	beq.n	80197b2 <HAL_GPIO_Init+0x21a>
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	4a4e      	ldr	r2, [pc, #312]	; (80198a4 <HAL_GPIO_Init+0x30c>)
 801976a:	4293      	cmp	r3, r2
 801976c:	d01f      	beq.n	80197ae <HAL_GPIO_Init+0x216>
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	4a4d      	ldr	r2, [pc, #308]	; (80198a8 <HAL_GPIO_Init+0x310>)
 8019772:	4293      	cmp	r3, r2
 8019774:	d019      	beq.n	80197aa <HAL_GPIO_Init+0x212>
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	4a4c      	ldr	r2, [pc, #304]	; (80198ac <HAL_GPIO_Init+0x314>)
 801977a:	4293      	cmp	r3, r2
 801977c:	d013      	beq.n	80197a6 <HAL_GPIO_Init+0x20e>
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	4a4b      	ldr	r2, [pc, #300]	; (80198b0 <HAL_GPIO_Init+0x318>)
 8019782:	4293      	cmp	r3, r2
 8019784:	d00d      	beq.n	80197a2 <HAL_GPIO_Init+0x20a>
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	4a4a      	ldr	r2, [pc, #296]	; (80198b4 <HAL_GPIO_Init+0x31c>)
 801978a:	4293      	cmp	r3, r2
 801978c:	d007      	beq.n	801979e <HAL_GPIO_Init+0x206>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	4a49      	ldr	r2, [pc, #292]	; (80198b8 <HAL_GPIO_Init+0x320>)
 8019792:	4293      	cmp	r3, r2
 8019794:	d101      	bne.n	801979a <HAL_GPIO_Init+0x202>
 8019796:	2306      	movs	r3, #6
 8019798:	e00c      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 801979a:	2307      	movs	r3, #7
 801979c:	e00a      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 801979e:	2305      	movs	r3, #5
 80197a0:	e008      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 80197a2:	2304      	movs	r3, #4
 80197a4:	e006      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 80197a6:	2303      	movs	r3, #3
 80197a8:	e004      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 80197aa:	2302      	movs	r3, #2
 80197ac:	e002      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 80197ae:	2301      	movs	r3, #1
 80197b0:	e000      	b.n	80197b4 <HAL_GPIO_Init+0x21c>
 80197b2:	2300      	movs	r3, #0
 80197b4:	69fa      	ldr	r2, [r7, #28]
 80197b6:	f002 0203 	and.w	r2, r2, #3
 80197ba:	0092      	lsls	r2, r2, #2
 80197bc:	4093      	lsls	r3, r2
 80197be:	69ba      	ldr	r2, [r7, #24]
 80197c0:	4313      	orrs	r3, r2
 80197c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80197c4:	4935      	ldr	r1, [pc, #212]	; (801989c <HAL_GPIO_Init+0x304>)
 80197c6:	69fb      	ldr	r3, [r7, #28]
 80197c8:	089b      	lsrs	r3, r3, #2
 80197ca:	3302      	adds	r3, #2
 80197cc:	69ba      	ldr	r2, [r7, #24]
 80197ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80197d2:	4b3a      	ldr	r3, [pc, #232]	; (80198bc <HAL_GPIO_Init+0x324>)
 80197d4:	689b      	ldr	r3, [r3, #8]
 80197d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80197d8:	693b      	ldr	r3, [r7, #16]
 80197da:	43db      	mvns	r3, r3
 80197dc:	69ba      	ldr	r2, [r7, #24]
 80197de:	4013      	ands	r3, r2
 80197e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80197e2:	683b      	ldr	r3, [r7, #0]
 80197e4:	685b      	ldr	r3, [r3, #4]
 80197e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d003      	beq.n	80197f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80197ee:	69ba      	ldr	r2, [r7, #24]
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	4313      	orrs	r3, r2
 80197f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80197f6:	4a31      	ldr	r2, [pc, #196]	; (80198bc <HAL_GPIO_Init+0x324>)
 80197f8:	69bb      	ldr	r3, [r7, #24]
 80197fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80197fc:	4b2f      	ldr	r3, [pc, #188]	; (80198bc <HAL_GPIO_Init+0x324>)
 80197fe:	68db      	ldr	r3, [r3, #12]
 8019800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	43db      	mvns	r3, r3
 8019806:	69ba      	ldr	r2, [r7, #24]
 8019808:	4013      	ands	r3, r2
 801980a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	685b      	ldr	r3, [r3, #4]
 8019810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019814:	2b00      	cmp	r3, #0
 8019816:	d003      	beq.n	8019820 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019818:	69ba      	ldr	r2, [r7, #24]
 801981a:	693b      	ldr	r3, [r7, #16]
 801981c:	4313      	orrs	r3, r2
 801981e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019820:	4a26      	ldr	r2, [pc, #152]	; (80198bc <HAL_GPIO_Init+0x324>)
 8019822:	69bb      	ldr	r3, [r7, #24]
 8019824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8019826:	4b25      	ldr	r3, [pc, #148]	; (80198bc <HAL_GPIO_Init+0x324>)
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	43db      	mvns	r3, r3
 8019830:	69ba      	ldr	r2, [r7, #24]
 8019832:	4013      	ands	r3, r2
 8019834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801983e:	2b00      	cmp	r3, #0
 8019840:	d003      	beq.n	801984a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019842:	69ba      	ldr	r2, [r7, #24]
 8019844:	693b      	ldr	r3, [r7, #16]
 8019846:	4313      	orrs	r3, r2
 8019848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801984a:	4a1c      	ldr	r2, [pc, #112]	; (80198bc <HAL_GPIO_Init+0x324>)
 801984c:	69bb      	ldr	r3, [r7, #24]
 801984e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019850:	4b1a      	ldr	r3, [pc, #104]	; (80198bc <HAL_GPIO_Init+0x324>)
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019856:	693b      	ldr	r3, [r7, #16]
 8019858:	43db      	mvns	r3, r3
 801985a:	69ba      	ldr	r2, [r7, #24]
 801985c:	4013      	ands	r3, r2
 801985e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019868:	2b00      	cmp	r3, #0
 801986a:	d003      	beq.n	8019874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801986c:	69ba      	ldr	r2, [r7, #24]
 801986e:	693b      	ldr	r3, [r7, #16]
 8019870:	4313      	orrs	r3, r2
 8019872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019874:	4a11      	ldr	r2, [pc, #68]	; (80198bc <HAL_GPIO_Init+0x324>)
 8019876:	69bb      	ldr	r3, [r7, #24]
 8019878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801987a:	69fb      	ldr	r3, [r7, #28]
 801987c:	3301      	adds	r3, #1
 801987e:	61fb      	str	r3, [r7, #28]
 8019880:	69fb      	ldr	r3, [r7, #28]
 8019882:	2b0f      	cmp	r3, #15
 8019884:	f67f ae96 	bls.w	80195b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019888:	bf00      	nop
 801988a:	bf00      	nop
 801988c:	3724      	adds	r7, #36	; 0x24
 801988e:	46bd      	mov	sp, r7
 8019890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019894:	4770      	bx	lr
 8019896:	bf00      	nop
 8019898:	40023800 	.word	0x40023800
 801989c:	40013800 	.word	0x40013800
 80198a0:	40020000 	.word	0x40020000
 80198a4:	40020400 	.word	0x40020400
 80198a8:	40020800 	.word	0x40020800
 80198ac:	40020c00 	.word	0x40020c00
 80198b0:	40021000 	.word	0x40021000
 80198b4:	40021400 	.word	0x40021400
 80198b8:	40021800 	.word	0x40021800
 80198bc:	40013c00 	.word	0x40013c00

080198c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80198c0:	b480      	push	{r7}
 80198c2:	b085      	sub	sp, #20
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
 80198c8:	460b      	mov	r3, r1
 80198ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	691a      	ldr	r2, [r3, #16]
 80198d0:	887b      	ldrh	r3, [r7, #2]
 80198d2:	4013      	ands	r3, r2
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d002      	beq.n	80198de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80198d8:	2301      	movs	r3, #1
 80198da:	73fb      	strb	r3, [r7, #15]
 80198dc:	e001      	b.n	80198e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80198de:	2300      	movs	r3, #0
 80198e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80198e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3714      	adds	r7, #20
 80198e8:	46bd      	mov	sp, r7
 80198ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ee:	4770      	bx	lr

080198f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b083      	sub	sp, #12
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	460b      	mov	r3, r1
 80198fa:	807b      	strh	r3, [r7, #2]
 80198fc:	4613      	mov	r3, r2
 80198fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019900:	787b      	ldrb	r3, [r7, #1]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d003      	beq.n	801990e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019906:	887a      	ldrh	r2, [r7, #2]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801990c:	e003      	b.n	8019916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801990e:	887b      	ldrh	r3, [r7, #2]
 8019910:	041a      	lsls	r2, r3, #16
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	619a      	str	r2, [r3, #24]
}
 8019916:	bf00      	nop
 8019918:	370c      	adds	r7, #12
 801991a:	46bd      	mov	sp, r7
 801991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019920:	4770      	bx	lr

08019922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019924:	b08f      	sub	sp, #60	; 0x3c
 8019926:	af0a      	add	r7, sp, #40	; 0x28
 8019928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	2b00      	cmp	r3, #0
 801992e:	d101      	bne.n	8019934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019930:	2301      	movs	r3, #1
 8019932:	e116      	b.n	8019b62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8019940:	b2db      	uxtb	r3, r3
 8019942:	2b00      	cmp	r3, #0
 8019944:	d106      	bne.n	8019954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	2200      	movs	r2, #0
 801994a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f00c f9a0 	bl	8025c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2203      	movs	r2, #3
 8019958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019964:	2b00      	cmp	r3, #0
 8019966:	d102      	bne.n	801996e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2200      	movs	r2, #0
 801996c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	4618      	mov	r0, r3
 8019974:	f004 f9e9 	bl	801dd4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	603b      	str	r3, [r7, #0]
 801997e:	687e      	ldr	r6, [r7, #4]
 8019980:	466d      	mov	r5, sp
 8019982:	f106 0410 	add.w	r4, r6, #16
 8019986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801998a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801998c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801998e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019992:	e885 0003 	stmia.w	r5, {r0, r1}
 8019996:	1d33      	adds	r3, r6, #4
 8019998:	cb0e      	ldmia	r3, {r1, r2, r3}
 801999a:	6838      	ldr	r0, [r7, #0]
 801999c:	f004 f8c0 	bl	801db20 <USB_CoreInit>
 80199a0:	4603      	mov	r3, r0
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d005      	beq.n	80199b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	2202      	movs	r2, #2
 80199aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80199ae:	2301      	movs	r3, #1
 80199b0:	e0d7      	b.n	8019b62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	2100      	movs	r1, #0
 80199b8:	4618      	mov	r0, r3
 80199ba:	f004 f9d7 	bl	801dd6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80199be:	2300      	movs	r3, #0
 80199c0:	73fb      	strb	r3, [r7, #15]
 80199c2:	e04a      	b.n	8019a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80199c4:	7bfa      	ldrb	r2, [r7, #15]
 80199c6:	6879      	ldr	r1, [r7, #4]
 80199c8:	4613      	mov	r3, r2
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	4413      	add	r3, r2
 80199ce:	009b      	lsls	r3, r3, #2
 80199d0:	440b      	add	r3, r1
 80199d2:	333d      	adds	r3, #61	; 0x3d
 80199d4:	2201      	movs	r2, #1
 80199d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80199d8:	7bfa      	ldrb	r2, [r7, #15]
 80199da:	6879      	ldr	r1, [r7, #4]
 80199dc:	4613      	mov	r3, r2
 80199de:	00db      	lsls	r3, r3, #3
 80199e0:	4413      	add	r3, r2
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	440b      	add	r3, r1
 80199e6:	333c      	adds	r3, #60	; 0x3c
 80199e8:	7bfa      	ldrb	r2, [r7, #15]
 80199ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80199ec:	7bfa      	ldrb	r2, [r7, #15]
 80199ee:	7bfb      	ldrb	r3, [r7, #15]
 80199f0:	b298      	uxth	r0, r3
 80199f2:	6879      	ldr	r1, [r7, #4]
 80199f4:	4613      	mov	r3, r2
 80199f6:	00db      	lsls	r3, r3, #3
 80199f8:	4413      	add	r3, r2
 80199fa:	009b      	lsls	r3, r3, #2
 80199fc:	440b      	add	r3, r1
 80199fe:	3344      	adds	r3, #68	; 0x44
 8019a00:	4602      	mov	r2, r0
 8019a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019a04:	7bfa      	ldrb	r2, [r7, #15]
 8019a06:	6879      	ldr	r1, [r7, #4]
 8019a08:	4613      	mov	r3, r2
 8019a0a:	00db      	lsls	r3, r3, #3
 8019a0c:	4413      	add	r3, r2
 8019a0e:	009b      	lsls	r3, r3, #2
 8019a10:	440b      	add	r3, r1
 8019a12:	3340      	adds	r3, #64	; 0x40
 8019a14:	2200      	movs	r2, #0
 8019a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019a18:	7bfa      	ldrb	r2, [r7, #15]
 8019a1a:	6879      	ldr	r1, [r7, #4]
 8019a1c:	4613      	mov	r3, r2
 8019a1e:	00db      	lsls	r3, r3, #3
 8019a20:	4413      	add	r3, r2
 8019a22:	009b      	lsls	r3, r3, #2
 8019a24:	440b      	add	r3, r1
 8019a26:	3348      	adds	r3, #72	; 0x48
 8019a28:	2200      	movs	r2, #0
 8019a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019a2c:	7bfa      	ldrb	r2, [r7, #15]
 8019a2e:	6879      	ldr	r1, [r7, #4]
 8019a30:	4613      	mov	r3, r2
 8019a32:	00db      	lsls	r3, r3, #3
 8019a34:	4413      	add	r3, r2
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	440b      	add	r3, r1
 8019a3a:	334c      	adds	r3, #76	; 0x4c
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019a40:	7bfa      	ldrb	r2, [r7, #15]
 8019a42:	6879      	ldr	r1, [r7, #4]
 8019a44:	4613      	mov	r3, r2
 8019a46:	00db      	lsls	r3, r3, #3
 8019a48:	4413      	add	r3, r2
 8019a4a:	009b      	lsls	r3, r3, #2
 8019a4c:	440b      	add	r3, r1
 8019a4e:	3354      	adds	r3, #84	; 0x54
 8019a50:	2200      	movs	r2, #0
 8019a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019a54:	7bfb      	ldrb	r3, [r7, #15]
 8019a56:	3301      	adds	r3, #1
 8019a58:	73fb      	strb	r3, [r7, #15]
 8019a5a:	7bfa      	ldrb	r2, [r7, #15]
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d3af      	bcc.n	80199c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019a64:	2300      	movs	r3, #0
 8019a66:	73fb      	strb	r3, [r7, #15]
 8019a68:	e044      	b.n	8019af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019a6a:	7bfa      	ldrb	r2, [r7, #15]
 8019a6c:	6879      	ldr	r1, [r7, #4]
 8019a6e:	4613      	mov	r3, r2
 8019a70:	00db      	lsls	r3, r3, #3
 8019a72:	4413      	add	r3, r2
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	440b      	add	r3, r1
 8019a78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019a80:	7bfa      	ldrb	r2, [r7, #15]
 8019a82:	6879      	ldr	r1, [r7, #4]
 8019a84:	4613      	mov	r3, r2
 8019a86:	00db      	lsls	r3, r3, #3
 8019a88:	4413      	add	r3, r2
 8019a8a:	009b      	lsls	r3, r3, #2
 8019a8c:	440b      	add	r3, r1
 8019a8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8019a92:	7bfa      	ldrb	r2, [r7, #15]
 8019a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019a96:	7bfa      	ldrb	r2, [r7, #15]
 8019a98:	6879      	ldr	r1, [r7, #4]
 8019a9a:	4613      	mov	r3, r2
 8019a9c:	00db      	lsls	r3, r3, #3
 8019a9e:	4413      	add	r3, r2
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	440b      	add	r3, r1
 8019aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019aac:	7bfa      	ldrb	r2, [r7, #15]
 8019aae:	6879      	ldr	r1, [r7, #4]
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	00db      	lsls	r3, r3, #3
 8019ab4:	4413      	add	r3, r2
 8019ab6:	009b      	lsls	r3, r3, #2
 8019ab8:	440b      	add	r3, r1
 8019aba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019abe:	2200      	movs	r2, #0
 8019ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019ac2:	7bfa      	ldrb	r2, [r7, #15]
 8019ac4:	6879      	ldr	r1, [r7, #4]
 8019ac6:	4613      	mov	r3, r2
 8019ac8:	00db      	lsls	r3, r3, #3
 8019aca:	4413      	add	r3, r2
 8019acc:	009b      	lsls	r3, r3, #2
 8019ace:	440b      	add	r3, r1
 8019ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019ad8:	7bfa      	ldrb	r2, [r7, #15]
 8019ada:	6879      	ldr	r1, [r7, #4]
 8019adc:	4613      	mov	r3, r2
 8019ade:	00db      	lsls	r3, r3, #3
 8019ae0:	4413      	add	r3, r2
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	440b      	add	r3, r1
 8019ae6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8019aea:	2200      	movs	r2, #0
 8019aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019aee:	7bfb      	ldrb	r3, [r7, #15]
 8019af0:	3301      	adds	r3, #1
 8019af2:	73fb      	strb	r3, [r7, #15]
 8019af4:	7bfa      	ldrb	r2, [r7, #15]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	685b      	ldr	r3, [r3, #4]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d3b5      	bcc.n	8019a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	603b      	str	r3, [r7, #0]
 8019b04:	687e      	ldr	r6, [r7, #4]
 8019b06:	466d      	mov	r5, sp
 8019b08:	f106 0410 	add.w	r4, r6, #16
 8019b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8019b1c:	1d33      	adds	r3, r6, #4
 8019b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019b20:	6838      	ldr	r0, [r7, #0]
 8019b22:	f004 f96f 	bl	801de04 <USB_DevInit>
 8019b26:	4603      	mov	r3, r0
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d005      	beq.n	8019b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2202      	movs	r2, #2
 8019b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8019b34:	2301      	movs	r3, #1
 8019b36:	e014      	b.n	8019b62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2201      	movs	r2, #1
 8019b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b4c:	2b01      	cmp	r3, #1
 8019b4e:	d102      	bne.n	8019b56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f001 f9b9 	bl	801aec8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f005 fab1 	bl	801f0c2 <USB_DevDisconnect>

  return HAL_OK;
 8019b60:	2300      	movs	r3, #0
}
 8019b62:	4618      	mov	r0, r3
 8019b64:	3714      	adds	r7, #20
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019b6a:	b580      	push	{r7, lr}
 8019b6c:	b084      	sub	sp, #16
 8019b6e:	af00      	add	r7, sp, #0
 8019b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8019b7e:	2b01      	cmp	r3, #1
 8019b80:	d101      	bne.n	8019b86 <HAL_PCD_Start+0x1c>
 8019b82:	2302      	movs	r3, #2
 8019b84:	e020      	b.n	8019bc8 <HAL_PCD_Start+0x5e>
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	2201      	movs	r2, #1
 8019b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b92:	2b01      	cmp	r3, #1
 8019b94:	d109      	bne.n	8019baa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019b9a:	2b01      	cmp	r3, #1
 8019b9c:	d005      	beq.n	8019baa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ba2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f004 f8ba 	bl	801dd28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f005 fa61 	bl	801f080 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8019bc6:	2300      	movs	r3, #0
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3710      	adds	r7, #16
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}

08019bd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019bd0:	b590      	push	{r4, r7, lr}
 8019bd2:	b08d      	sub	sp, #52	; 0x34
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019bde:	6a3b      	ldr	r3, [r7, #32]
 8019be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4618      	mov	r0, r3
 8019be8:	f005 fb1f 	bl	801f22a <USB_GetMode>
 8019bec:	4603      	mov	r3, r0
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	f040 84b7 	bne.w	801a562 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	f005 fa83 	bl	801f104 <USB_ReadInterrupts>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	f000 84ad 	beq.w	801a560 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8019c06:	69fb      	ldr	r3, [r7, #28]
 8019c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019c0c:	689b      	ldr	r3, [r3, #8]
 8019c0e:	0a1b      	lsrs	r3, r3, #8
 8019c10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f005 fa70 	bl	801f104 <USB_ReadInterrupts>
 8019c24:	4603      	mov	r3, r0
 8019c26:	f003 0302 	and.w	r3, r3, #2
 8019c2a:	2b02      	cmp	r3, #2
 8019c2c:	d107      	bne.n	8019c3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	695a      	ldr	r2, [r3, #20]
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	f002 0202 	and.w	r2, r2, #2
 8019c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f005 fa5e 	bl	801f104 <USB_ReadInterrupts>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	f003 0310 	and.w	r3, r3, #16
 8019c4e:	2b10      	cmp	r3, #16
 8019c50:	d161      	bne.n	8019d16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	699a      	ldr	r2, [r3, #24]
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	f022 0210 	bic.w	r2, r2, #16
 8019c60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8019c62:	6a3b      	ldr	r3, [r7, #32]
 8019c64:	6a1b      	ldr	r3, [r3, #32]
 8019c66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	f003 020f 	and.w	r2, r3, #15
 8019c6e:	4613      	mov	r3, r2
 8019c70:	00db      	lsls	r3, r3, #3
 8019c72:	4413      	add	r3, r2
 8019c74:	009b      	lsls	r3, r3, #2
 8019c76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019c7a:	687a      	ldr	r2, [r7, #4]
 8019c7c:	4413      	add	r3, r2
 8019c7e:	3304      	adds	r3, #4
 8019c80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8019c82:	69bb      	ldr	r3, [r7, #24]
 8019c84:	0c5b      	lsrs	r3, r3, #17
 8019c86:	f003 030f 	and.w	r3, r3, #15
 8019c8a:	2b02      	cmp	r3, #2
 8019c8c:	d124      	bne.n	8019cd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8019c8e:	69ba      	ldr	r2, [r7, #24]
 8019c90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8019c94:	4013      	ands	r3, r2
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d035      	beq.n	8019d06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8019c9e:	69bb      	ldr	r3, [r7, #24]
 8019ca0:	091b      	lsrs	r3, r3, #4
 8019ca2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8019ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	461a      	mov	r2, r3
 8019cac:	6a38      	ldr	r0, [r7, #32]
 8019cae:	f005 f895 	bl	801eddc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019cb2:	697b      	ldr	r3, [r7, #20]
 8019cb4:	691a      	ldr	r2, [r3, #16]
 8019cb6:	69bb      	ldr	r3, [r7, #24]
 8019cb8:	091b      	lsrs	r3, r3, #4
 8019cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019cbe:	441a      	add	r2, r3
 8019cc0:	697b      	ldr	r3, [r7, #20]
 8019cc2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019cc4:	697b      	ldr	r3, [r7, #20]
 8019cc6:	6a1a      	ldr	r2, [r3, #32]
 8019cc8:	69bb      	ldr	r3, [r7, #24]
 8019cca:	091b      	lsrs	r3, r3, #4
 8019ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019cd0:	441a      	add	r2, r3
 8019cd2:	697b      	ldr	r3, [r7, #20]
 8019cd4:	621a      	str	r2, [r3, #32]
 8019cd6:	e016      	b.n	8019d06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8019cd8:	69bb      	ldr	r3, [r7, #24]
 8019cda:	0c5b      	lsrs	r3, r3, #17
 8019cdc:	f003 030f 	and.w	r3, r3, #15
 8019ce0:	2b06      	cmp	r3, #6
 8019ce2:	d110      	bne.n	8019d06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019cea:	2208      	movs	r2, #8
 8019cec:	4619      	mov	r1, r3
 8019cee:	6a38      	ldr	r0, [r7, #32]
 8019cf0:	f005 f874 	bl	801eddc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	6a1a      	ldr	r2, [r3, #32]
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	091b      	lsrs	r3, r3, #4
 8019cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019d00:	441a      	add	r2, r3
 8019d02:	697b      	ldr	r3, [r7, #20]
 8019d04:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	699a      	ldr	r2, [r3, #24]
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f042 0210 	orr.w	r2, r2, #16
 8019d14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f005 f9f2 	bl	801f104 <USB_ReadInterrupts>
 8019d20:	4603      	mov	r3, r0
 8019d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019d26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8019d2a:	f040 80a7 	bne.w	8019e7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	4618      	mov	r0, r3
 8019d38:	f005 f9f7 	bl	801f12a <USB_ReadDevAllOutEpInterrupt>
 8019d3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8019d3e:	e099      	b.n	8019e74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8019d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d42:	f003 0301 	and.w	r3, r3, #1
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f000 808e 	beq.w	8019e68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d52:	b2d2      	uxtb	r2, r2
 8019d54:	4611      	mov	r1, r2
 8019d56:	4618      	mov	r0, r3
 8019d58:	f005 fa1b 	bl	801f192 <USB_ReadDevOutEPInterrupt>
 8019d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	f003 0301 	and.w	r3, r3, #1
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d00c      	beq.n	8019d82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8019d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6a:	015a      	lsls	r2, r3, #5
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	4413      	add	r3, r2
 8019d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d74:	461a      	mov	r2, r3
 8019d76:	2301      	movs	r3, #1
 8019d78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8019d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019d7c:	6878      	ldr	r0, [r7, #4]
 8019d7e:	f000 ff1d 	bl	801abbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	f003 0308 	and.w	r3, r3, #8
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d00c      	beq.n	8019da6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8019d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8e:	015a      	lsls	r2, r3, #5
 8019d90:	69fb      	ldr	r3, [r7, #28]
 8019d92:	4413      	add	r3, r2
 8019d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019d98:	461a      	mov	r2, r3
 8019d9a:	2308      	movs	r3, #8
 8019d9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8019d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019da0:	6878      	ldr	r0, [r7, #4]
 8019da2:	f000 fff3 	bl	801ad8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8019da6:	693b      	ldr	r3, [r7, #16]
 8019da8:	f003 0310 	and.w	r3, r3, #16
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d008      	beq.n	8019dc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8019db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db2:	015a      	lsls	r2, r3, #5
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	4413      	add	r3, r2
 8019db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019dbc:	461a      	mov	r2, r3
 8019dbe:	2310      	movs	r3, #16
 8019dc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8019dc2:	693b      	ldr	r3, [r7, #16]
 8019dc4:	f003 0302 	and.w	r3, r3, #2
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d030      	beq.n	8019e2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8019dcc:	6a3b      	ldr	r3, [r7, #32]
 8019dce:	695b      	ldr	r3, [r3, #20]
 8019dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019dd4:	2b80      	cmp	r3, #128	; 0x80
 8019dd6:	d109      	bne.n	8019dec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	69fa      	ldr	r2, [r7, #28]
 8019de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019dea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8019dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dee:	4613      	mov	r3, r2
 8019df0:	00db      	lsls	r3, r3, #3
 8019df2:	4413      	add	r3, r2
 8019df4:	009b      	lsls	r3, r3, #2
 8019df6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8019dfa:	687a      	ldr	r2, [r7, #4]
 8019dfc:	4413      	add	r3, r2
 8019dfe:	3304      	adds	r3, #4
 8019e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	78db      	ldrb	r3, [r3, #3]
 8019e06:	2b01      	cmp	r3, #1
 8019e08:	d108      	bne.n	8019e1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8019e0a:	697b      	ldr	r3, [r7, #20]
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8019e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e12:	b2db      	uxtb	r3, r3
 8019e14:	4619      	mov	r1, r3
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f00c f864 	bl	8025ee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8019e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1e:	015a      	lsls	r2, r3, #5
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	4413      	add	r3, r2
 8019e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e28:	461a      	mov	r2, r3
 8019e2a:	2302      	movs	r3, #2
 8019e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8019e2e:	693b      	ldr	r3, [r7, #16]
 8019e30:	f003 0320 	and.w	r3, r3, #32
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d008      	beq.n	8019e4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8019e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e3a:	015a      	lsls	r2, r3, #5
 8019e3c:	69fb      	ldr	r3, [r7, #28]
 8019e3e:	4413      	add	r3, r2
 8019e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e44:	461a      	mov	r2, r3
 8019e46:	2320      	movs	r3, #32
 8019e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d009      	beq.n	8019e68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8019e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e56:	015a      	lsls	r2, r3, #5
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	4413      	add	r3, r2
 8019e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8019e60:	461a      	mov	r2, r3
 8019e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8019e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e6a:	3301      	adds	r3, #1
 8019e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8019e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e70:	085b      	lsrs	r3, r3, #1
 8019e72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8019e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	f47f af62 	bne.w	8019d40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	4618      	mov	r0, r3
 8019e82:	f005 f93f 	bl	801f104 <USB_ReadInterrupts>
 8019e86:	4603      	mov	r3, r0
 8019e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8019e90:	f040 80db 	bne.w	801a04a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f005 f960 	bl	801f15e <USB_ReadDevAllInEpInterrupt>
 8019e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8019ea4:	e0cd      	b.n	801a042 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8019ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea8:	f003 0301 	and.w	r3, r3, #1
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	f000 80c2 	beq.w	801a036 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019eb8:	b2d2      	uxtb	r2, r2
 8019eba:	4611      	mov	r1, r2
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f005 f986 	bl	801f1ce <USB_ReadDevInEPInterrupt>
 8019ec2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8019ec4:	693b      	ldr	r3, [r7, #16]
 8019ec6:	f003 0301 	and.w	r3, r3, #1
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d057      	beq.n	8019f7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8019ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed0:	f003 030f 	and.w	r3, r3, #15
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8019eda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8019edc:	69fb      	ldr	r3, [r7, #28]
 8019ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	43db      	mvns	r3, r3
 8019ee8:	69f9      	ldr	r1, [r7, #28]
 8019eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8019eee:	4013      	ands	r3, r2
 8019ef0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef4:	015a      	lsls	r2, r3, #5
 8019ef6:	69fb      	ldr	r3, [r7, #28]
 8019ef8:	4413      	add	r3, r2
 8019efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019efe:	461a      	mov	r2, r3
 8019f00:	2301      	movs	r3, #1
 8019f02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	691b      	ldr	r3, [r3, #16]
 8019f08:	2b01      	cmp	r3, #1
 8019f0a:	d132      	bne.n	8019f72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8019f0c:	6879      	ldr	r1, [r7, #4]
 8019f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f10:	4613      	mov	r3, r2
 8019f12:	00db      	lsls	r3, r3, #3
 8019f14:	4413      	add	r3, r2
 8019f16:	009b      	lsls	r3, r3, #2
 8019f18:	440b      	add	r3, r1
 8019f1a:	334c      	adds	r3, #76	; 0x4c
 8019f1c:	6819      	ldr	r1, [r3, #0]
 8019f1e:	6878      	ldr	r0, [r7, #4]
 8019f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f22:	4613      	mov	r3, r2
 8019f24:	00db      	lsls	r3, r3, #3
 8019f26:	4413      	add	r3, r2
 8019f28:	009b      	lsls	r3, r3, #2
 8019f2a:	4403      	add	r3, r0
 8019f2c:	3348      	adds	r3, #72	; 0x48
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	4419      	add	r1, r3
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f36:	4613      	mov	r3, r2
 8019f38:	00db      	lsls	r3, r3, #3
 8019f3a:	4413      	add	r3, r2
 8019f3c:	009b      	lsls	r3, r3, #2
 8019f3e:	4403      	add	r3, r0
 8019f40:	334c      	adds	r3, #76	; 0x4c
 8019f42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8019f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d113      	bne.n	8019f72 <HAL_PCD_IRQHandler+0x3a2>
 8019f4a:	6879      	ldr	r1, [r7, #4]
 8019f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f4e:	4613      	mov	r3, r2
 8019f50:	00db      	lsls	r3, r3, #3
 8019f52:	4413      	add	r3, r2
 8019f54:	009b      	lsls	r3, r3, #2
 8019f56:	440b      	add	r3, r1
 8019f58:	3354      	adds	r3, #84	; 0x54
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d108      	bne.n	8019f72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6818      	ldr	r0, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	2101      	movs	r1, #1
 8019f6e:	f005 f98d 	bl	801f28c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8019f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	4619      	mov	r1, r3
 8019f78:	6878      	ldr	r0, [r7, #4]
 8019f7a:	f00b ff2e 	bl	8025dda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8019f7e:	693b      	ldr	r3, [r7, #16]
 8019f80:	f003 0308 	and.w	r3, r3, #8
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d008      	beq.n	8019f9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8019f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8a:	015a      	lsls	r2, r3, #5
 8019f8c:	69fb      	ldr	r3, [r7, #28]
 8019f8e:	4413      	add	r3, r2
 8019f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019f94:	461a      	mov	r2, r3
 8019f96:	2308      	movs	r3, #8
 8019f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	f003 0310 	and.w	r3, r3, #16
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d008      	beq.n	8019fb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa6:	015a      	lsls	r2, r3, #5
 8019fa8:	69fb      	ldr	r3, [r7, #28]
 8019faa:	4413      	add	r3, r2
 8019fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	2310      	movs	r3, #16
 8019fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8019fb6:	693b      	ldr	r3, [r7, #16]
 8019fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d008      	beq.n	8019fd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8019fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc2:	015a      	lsls	r2, r3, #5
 8019fc4:	69fb      	ldr	r3, [r7, #28]
 8019fc6:	4413      	add	r3, r2
 8019fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8019fcc:	461a      	mov	r2, r3
 8019fce:	2340      	movs	r3, #64	; 0x40
 8019fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8019fd2:	693b      	ldr	r3, [r7, #16]
 8019fd4:	f003 0302 	and.w	r3, r3, #2
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d023      	beq.n	801a024 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8019fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fde:	6a38      	ldr	r0, [r7, #32]
 8019fe0:	f004 f86e 	bl	801e0c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8019fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fe6:	4613      	mov	r3, r2
 8019fe8:	00db      	lsls	r3, r3, #3
 8019fea:	4413      	add	r3, r2
 8019fec:	009b      	lsls	r3, r3, #2
 8019fee:	3338      	adds	r3, #56	; 0x38
 8019ff0:	687a      	ldr	r2, [r7, #4]
 8019ff2:	4413      	add	r3, r2
 8019ff4:	3304      	adds	r3, #4
 8019ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	78db      	ldrb	r3, [r3, #3]
 8019ffc:	2b01      	cmp	r3, #1
 8019ffe:	d108      	bne.n	801a012 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 801a000:	697b      	ldr	r3, [r7, #20]
 801a002:	2200      	movs	r2, #0
 801a004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a008:	b2db      	uxtb	r3, r3
 801a00a:	4619      	mov	r1, r3
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f00b ff7b 	bl	8025f08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a014:	015a      	lsls	r2, r3, #5
 801a016:	69fb      	ldr	r3, [r7, #28]
 801a018:	4413      	add	r3, r2
 801a01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a01e:	461a      	mov	r2, r3
 801a020:	2302      	movs	r3, #2
 801a022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a024:	693b      	ldr	r3, [r7, #16]
 801a026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d003      	beq.n	801a036 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a02e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a030:	6878      	ldr	r0, [r7, #4]
 801a032:	f000 fd35 	bl	801aaa0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a038:	3301      	adds	r3, #1
 801a03a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a03e:	085b      	lsrs	r3, r3, #1
 801a040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a044:	2b00      	cmp	r3, #0
 801a046:	f47f af2e 	bne.w	8019ea6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	4618      	mov	r0, r3
 801a050:	f005 f858 	bl	801f104 <USB_ReadInterrupts>
 801a054:	4603      	mov	r3, r0
 801a056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a05a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a05e:	d122      	bne.n	801a0a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a060:	69fb      	ldr	r3, [r7, #28]
 801a062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a066:	685b      	ldr	r3, [r3, #4]
 801a068:	69fa      	ldr	r2, [r7, #28]
 801a06a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a06e:	f023 0301 	bic.w	r3, r3, #1
 801a072:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801a07a:	2b01      	cmp	r3, #1
 801a07c:	d108      	bne.n	801a090 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	2200      	movs	r2, #0
 801a082:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a086:	2100      	movs	r1, #0
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	f00c f915 	bl	80262b8 <HAL_PCDEx_LPM_Callback>
 801a08e:	e002      	b.n	801a096 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a090:	6878      	ldr	r0, [r7, #4]
 801a092:	f00b ff19 	bl	8025ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	695a      	ldr	r2, [r3, #20]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a0a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f005 f82a 	bl	801f104 <USB_ReadInterrupts>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a0ba:	d112      	bne.n	801a0e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a0c2:	689b      	ldr	r3, [r3, #8]
 801a0c4:	f003 0301 	and.w	r3, r3, #1
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d102      	bne.n	801a0d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a0cc:	6878      	ldr	r0, [r7, #4]
 801a0ce:	f00b fed5 	bl	8025e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	695a      	ldr	r2, [r3, #20]
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a0e0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f005 f80c 	bl	801f104 <USB_ReadInterrupts>
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a0f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a0f6:	d121      	bne.n	801a13c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	695a      	ldr	r2, [r3, #20]
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a106:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d111      	bne.n	801a136 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2201      	movs	r2, #1
 801a116:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a120:	089b      	lsrs	r3, r3, #2
 801a122:	f003 020f 	and.w	r2, r3, #15
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a12c:	2101      	movs	r1, #1
 801a12e:	6878      	ldr	r0, [r7, #4]
 801a130:	f00c f8c2 	bl	80262b8 <HAL_PCDEx_LPM_Callback>
 801a134:	e002      	b.n	801a13c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a136:	6878      	ldr	r0, [r7, #4]
 801a138:	f00b fea0 	bl	8025e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	4618      	mov	r0, r3
 801a142:	f004 ffdf 	bl	801f104 <USB_ReadInterrupts>
 801a146:	4603      	mov	r3, r0
 801a148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a14c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a150:	f040 80b7 	bne.w	801a2c2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a154:	69fb      	ldr	r3, [r7, #28]
 801a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a15a:	685b      	ldr	r3, [r3, #4]
 801a15c:	69fa      	ldr	r2, [r7, #28]
 801a15e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a162:	f023 0301 	bic.w	r3, r3, #1
 801a166:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2110      	movs	r1, #16
 801a16e:	4618      	mov	r0, r3
 801a170:	f003 ffa6 	bl	801e0c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a174:	2300      	movs	r3, #0
 801a176:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a178:	e046      	b.n	801a208 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a17c:	015a      	lsls	r2, r3, #5
 801a17e:	69fb      	ldr	r3, [r7, #28]
 801a180:	4413      	add	r3, r2
 801a182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a186:	461a      	mov	r2, r3
 801a188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a18c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a190:	015a      	lsls	r2, r3, #5
 801a192:	69fb      	ldr	r3, [r7, #28]
 801a194:	4413      	add	r3, r2
 801a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a19e:	0151      	lsls	r1, r2, #5
 801a1a0:	69fa      	ldr	r2, [r7, #28]
 801a1a2:	440a      	add	r2, r1
 801a1a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a1a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a1ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b0:	015a      	lsls	r2, r3, #5
 801a1b2:	69fb      	ldr	r3, [r7, #28]
 801a1b4:	4413      	add	r3, r2
 801a1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a1c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c4:	015a      	lsls	r2, r3, #5
 801a1c6:	69fb      	ldr	r3, [r7, #28]
 801a1c8:	4413      	add	r3, r2
 801a1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1d2:	0151      	lsls	r1, r2, #5
 801a1d4:	69fa      	ldr	r2, [r7, #28]
 801a1d6:	440a      	add	r2, r1
 801a1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a1e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e4:	015a      	lsls	r2, r3, #5
 801a1e6:	69fb      	ldr	r3, [r7, #28]
 801a1e8:	4413      	add	r3, r2
 801a1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1f2:	0151      	lsls	r1, r2, #5
 801a1f4:	69fa      	ldr	r2, [r7, #28]
 801a1f6:	440a      	add	r2, r1
 801a1f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a1fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a200:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a204:	3301      	adds	r3, #1
 801a206:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	685b      	ldr	r3, [r3, #4]
 801a20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a20e:	429a      	cmp	r2, r3
 801a210:	d3b3      	bcc.n	801a17a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a218:	69db      	ldr	r3, [r3, #28]
 801a21a:	69fa      	ldr	r2, [r7, #28]
 801a21c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a220:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a224:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d016      	beq.n	801a25c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a22e:	69fb      	ldr	r3, [r7, #28]
 801a230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a238:	69fa      	ldr	r2, [r7, #28]
 801a23a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a23e:	f043 030b 	orr.w	r3, r3, #11
 801a242:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a24e:	69fa      	ldr	r2, [r7, #28]
 801a250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a254:	f043 030b 	orr.w	r3, r3, #11
 801a258:	6453      	str	r3, [r2, #68]	; 0x44
 801a25a:	e015      	b.n	801a288 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a25c:	69fb      	ldr	r3, [r7, #28]
 801a25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a262:	695b      	ldr	r3, [r3, #20]
 801a264:	69fa      	ldr	r2, [r7, #28]
 801a266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a26a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a26e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a272:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a274:	69fb      	ldr	r3, [r7, #28]
 801a276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a27a:	691b      	ldr	r3, [r3, #16]
 801a27c:	69fa      	ldr	r2, [r7, #28]
 801a27e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a282:	f043 030b 	orr.w	r3, r3, #11
 801a286:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a288:	69fb      	ldr	r3, [r7, #28]
 801a28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	69fa      	ldr	r2, [r7, #28]
 801a292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a296:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a29a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6818      	ldr	r0, [r3, #0]
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	691b      	ldr	r3, [r3, #16]
 801a2a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	f004 ffed 	bl	801f28c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	695a      	ldr	r2, [r3, #20]
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a2c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f004 ff1c 	bl	801f104 <USB_ReadInterrupts>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a2d6:	d124      	bne.n	801a322 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f004 ffb2 	bl	801f246 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	f003 ff67 	bl	801e1ba <USB_GetDevSpeed>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	461a      	mov	r2, r3
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	681c      	ldr	r4, [r3, #0]
 801a2f8:	f000 ff40 	bl	801b17c <HAL_RCC_GetHCLKFreq>
 801a2fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a302:	b2db      	uxtb	r3, r3
 801a304:	461a      	mov	r2, r3
 801a306:	4620      	mov	r0, r4
 801a308:	f003 fc6c 	bl	801dbe4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f00b fd8c 	bl	8025e2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	695a      	ldr	r2, [r3, #20]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a320:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4618      	mov	r0, r3
 801a328:	f004 feec 	bl	801f104 <USB_ReadInterrupts>
 801a32c:	4603      	mov	r3, r0
 801a32e:	f003 0308 	and.w	r3, r3, #8
 801a332:	2b08      	cmp	r3, #8
 801a334:	d10a      	bne.n	801a34c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a336:	6878      	ldr	r0, [r7, #4]
 801a338:	f00b fd69 	bl	8025e0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	695a      	ldr	r2, [r3, #20]
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f002 0208 	and.w	r2, r2, #8
 801a34a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	4618      	mov	r0, r3
 801a352:	f004 fed7 	bl	801f104 <USB_ReadInterrupts>
 801a356:	4603      	mov	r3, r0
 801a358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a35c:	2b80      	cmp	r3, #128	; 0x80
 801a35e:	d122      	bne.n	801a3a6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801a360:	6a3b      	ldr	r3, [r7, #32]
 801a362:	699b      	ldr	r3, [r3, #24]
 801a364:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a368:	6a3b      	ldr	r3, [r7, #32]
 801a36a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a36c:	2301      	movs	r3, #1
 801a36e:	627b      	str	r3, [r7, #36]	; 0x24
 801a370:	e014      	b.n	801a39c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801a372:	6879      	ldr	r1, [r7, #4]
 801a374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a376:	4613      	mov	r3, r2
 801a378:	00db      	lsls	r3, r3, #3
 801a37a:	4413      	add	r3, r2
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	440b      	add	r3, r1
 801a380:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	2b01      	cmp	r3, #1
 801a388:	d105      	bne.n	801a396 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38c:	b2db      	uxtb	r3, r3
 801a38e:	4619      	mov	r1, r3
 801a390:	6878      	ldr	r0, [r7, #4]
 801a392:	f000 fb27 	bl	801a9e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a398:	3301      	adds	r3, #1
 801a39a:	627b      	str	r3, [r7, #36]	; 0x24
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	685b      	ldr	r3, [r3, #4]
 801a3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3a2:	429a      	cmp	r2, r3
 801a3a4:	d3e5      	bcc.n	801a372 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	f004 feaa 	bl	801f104 <USB_ReadInterrupts>
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a3b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a3ba:	d13b      	bne.n	801a434 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a3bc:	2301      	movs	r3, #1
 801a3be:	627b      	str	r3, [r7, #36]	; 0x24
 801a3c0:	e02b      	b.n	801a41a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c4:	015a      	lsls	r2, r3, #5
 801a3c6:	69fb      	ldr	r3, [r7, #28]
 801a3c8:	4413      	add	r3, r2
 801a3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801a3d2:	6879      	ldr	r1, [r7, #4]
 801a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3d6:	4613      	mov	r3, r2
 801a3d8:	00db      	lsls	r3, r3, #3
 801a3da:	4413      	add	r3, r2
 801a3dc:	009b      	lsls	r3, r3, #2
 801a3de:	440b      	add	r3, r1
 801a3e0:	3340      	adds	r3, #64	; 0x40
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	2b01      	cmp	r3, #1
 801a3e6:	d115      	bne.n	801a414 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801a3e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	da12      	bge.n	801a414 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 801a3ee:	6879      	ldr	r1, [r7, #4]
 801a3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3f2:	4613      	mov	r3, r2
 801a3f4:	00db      	lsls	r3, r3, #3
 801a3f6:	4413      	add	r3, r2
 801a3f8:	009b      	lsls	r3, r3, #2
 801a3fa:	440b      	add	r3, r1
 801a3fc:	333f      	adds	r3, #63	; 0x3f
 801a3fe:	2201      	movs	r2, #1
 801a400:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a404:	b2db      	uxtb	r3, r3
 801a406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a40a:	b2db      	uxtb	r3, r3
 801a40c:	4619      	mov	r1, r3
 801a40e:	6878      	ldr	r0, [r7, #4]
 801a410:	f000 fae8 	bl	801a9e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a416:	3301      	adds	r3, #1
 801a418:	627b      	str	r3, [r7, #36]	; 0x24
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a420:	429a      	cmp	r2, r3
 801a422:	d3ce      	bcc.n	801a3c2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	695a      	ldr	r2, [r3, #20]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	4618      	mov	r0, r3
 801a43a:	f004 fe63 	bl	801f104 <USB_ReadInterrupts>
 801a43e:	4603      	mov	r3, r0
 801a440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a448:	d155      	bne.n	801a4f6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a44a:	2301      	movs	r3, #1
 801a44c:	627b      	str	r3, [r7, #36]	; 0x24
 801a44e:	e045      	b.n	801a4dc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a452:	015a      	lsls	r2, r3, #5
 801a454:	69fb      	ldr	r3, [r7, #28]
 801a456:	4413      	add	r3, r2
 801a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801a460:	6879      	ldr	r1, [r7, #4]
 801a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a464:	4613      	mov	r3, r2
 801a466:	00db      	lsls	r3, r3, #3
 801a468:	4413      	add	r3, r2
 801a46a:	009b      	lsls	r3, r3, #2
 801a46c:	440b      	add	r3, r1
 801a46e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801a472:	781b      	ldrb	r3, [r3, #0]
 801a474:	2b01      	cmp	r3, #1
 801a476:	d12e      	bne.n	801a4d6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801a478:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	da2b      	bge.n	801a4d6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801a47e:	69bb      	ldr	r3, [r7, #24]
 801a480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 801a48a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801a48e:	429a      	cmp	r2, r3
 801a490:	d121      	bne.n	801a4d6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 801a492:	6879      	ldr	r1, [r7, #4]
 801a494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a496:	4613      	mov	r3, r2
 801a498:	00db      	lsls	r3, r3, #3
 801a49a:	4413      	add	r3, r2
 801a49c:	009b      	lsls	r3, r3, #2
 801a49e:	440b      	add	r3, r1
 801a4a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 801a4a4:	2201      	movs	r2, #1
 801a4a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801a4a8:	6a3b      	ldr	r3, [r7, #32]
 801a4aa:	699b      	ldr	r3, [r3, #24]
 801a4ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a4b0:	6a3b      	ldr	r3, [r7, #32]
 801a4b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 801a4b4:	6a3b      	ldr	r3, [r7, #32]
 801a4b6:	695b      	ldr	r3, [r3, #20]
 801a4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d10a      	bne.n	801a4d6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 801a4c0:	69fb      	ldr	r3, [r7, #28]
 801a4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	69fa      	ldr	r2, [r7, #28]
 801a4ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a4d2:	6053      	str	r3, [r2, #4]
            break;
 801a4d4:	e007      	b.n	801a4e6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d8:	3301      	adds	r3, #1
 801a4da:	627b      	str	r3, [r7, #36]	; 0x24
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	685b      	ldr	r3, [r3, #4]
 801a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4e2:	429a      	cmp	r2, r3
 801a4e4:	d3b4      	bcc.n	801a450 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	695a      	ldr	r2, [r3, #20]
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a4f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f004 fe02 	bl	801f104 <USB_ReadInterrupts>
 801a500:	4603      	mov	r3, r0
 801a502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a50a:	d10a      	bne.n	801a522 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	f00b fd0d 	bl	8025f2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	695a      	ldr	r2, [r3, #20]
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4618      	mov	r0, r3
 801a528:	f004 fdec 	bl	801f104 <USB_ReadInterrupts>
 801a52c:	4603      	mov	r3, r0
 801a52e:	f003 0304 	and.w	r3, r3, #4
 801a532:	2b04      	cmp	r3, #4
 801a534:	d115      	bne.n	801a562 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	685b      	ldr	r3, [r3, #4]
 801a53c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a53e:	69bb      	ldr	r3, [r7, #24]
 801a540:	f003 0304 	and.w	r3, r3, #4
 801a544:	2b00      	cmp	r3, #0
 801a546:	d002      	beq.n	801a54e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	f00b fcfd 	bl	8025f48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	6859      	ldr	r1, [r3, #4]
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	69ba      	ldr	r2, [r7, #24]
 801a55a:	430a      	orrs	r2, r1
 801a55c:	605a      	str	r2, [r3, #4]
 801a55e:	e000      	b.n	801a562 <HAL_PCD_IRQHandler+0x992>
      return;
 801a560:	bf00      	nop
    }
  }
}
 801a562:	3734      	adds	r7, #52	; 0x34
 801a564:	46bd      	mov	sp, r7
 801a566:	bd90      	pop	{r4, r7, pc}

0801a568 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b082      	sub	sp, #8
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
 801a570:	460b      	mov	r3, r1
 801a572:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a57a:	2b01      	cmp	r3, #1
 801a57c:	d101      	bne.n	801a582 <HAL_PCD_SetAddress+0x1a>
 801a57e:	2302      	movs	r3, #2
 801a580:	e013      	b.n	801a5aa <HAL_PCD_SetAddress+0x42>
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2201      	movs	r2, #1
 801a586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	78fa      	ldrb	r2, [r7, #3]
 801a58e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	78fa      	ldrb	r2, [r7, #3]
 801a598:	4611      	mov	r1, r2
 801a59a:	4618      	mov	r0, r3
 801a59c:	f004 fd4a 	bl	801f034 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a5a8:	2300      	movs	r3, #0
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	3708      	adds	r7, #8
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bd80      	pop	{r7, pc}

0801a5b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a5b2:	b580      	push	{r7, lr}
 801a5b4:	b084      	sub	sp, #16
 801a5b6:	af00      	add	r7, sp, #0
 801a5b8:	6078      	str	r0, [r7, #4]
 801a5ba:	4608      	mov	r0, r1
 801a5bc:	4611      	mov	r1, r2
 801a5be:	461a      	mov	r2, r3
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	70fb      	strb	r3, [r7, #3]
 801a5c4:	460b      	mov	r3, r1
 801a5c6:	803b      	strh	r3, [r7, #0]
 801a5c8:	4613      	mov	r3, r2
 801a5ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a5d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	da0f      	bge.n	801a5f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a5d8:	78fb      	ldrb	r3, [r7, #3]
 801a5da:	f003 020f 	and.w	r2, r3, #15
 801a5de:	4613      	mov	r3, r2
 801a5e0:	00db      	lsls	r3, r3, #3
 801a5e2:	4413      	add	r3, r2
 801a5e4:	009b      	lsls	r3, r3, #2
 801a5e6:	3338      	adds	r3, #56	; 0x38
 801a5e8:	687a      	ldr	r2, [r7, #4]
 801a5ea:	4413      	add	r3, r2
 801a5ec:	3304      	adds	r3, #4
 801a5ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	2201      	movs	r2, #1
 801a5f4:	705a      	strb	r2, [r3, #1]
 801a5f6:	e00f      	b.n	801a618 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a5f8:	78fb      	ldrb	r3, [r7, #3]
 801a5fa:	f003 020f 	and.w	r2, r3, #15
 801a5fe:	4613      	mov	r3, r2
 801a600:	00db      	lsls	r3, r3, #3
 801a602:	4413      	add	r3, r2
 801a604:	009b      	lsls	r3, r3, #2
 801a606:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a60a:	687a      	ldr	r2, [r7, #4]
 801a60c:	4413      	add	r3, r2
 801a60e:	3304      	adds	r3, #4
 801a610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	2200      	movs	r2, #0
 801a616:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a618:	78fb      	ldrb	r3, [r7, #3]
 801a61a:	f003 030f 	and.w	r3, r3, #15
 801a61e:	b2da      	uxtb	r2, r3
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a624:	883a      	ldrh	r2, [r7, #0]
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	78ba      	ldrb	r2, [r7, #2]
 801a62e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	785b      	ldrb	r3, [r3, #1]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d004      	beq.n	801a642 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	781b      	ldrb	r3, [r3, #0]
 801a63c:	b29a      	uxth	r2, r3
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a642:	78bb      	ldrb	r3, [r7, #2]
 801a644:	2b02      	cmp	r3, #2
 801a646:	d102      	bne.n	801a64e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	2200      	movs	r2, #0
 801a64c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a654:	2b01      	cmp	r3, #1
 801a656:	d101      	bne.n	801a65c <HAL_PCD_EP_Open+0xaa>
 801a658:	2302      	movs	r3, #2
 801a65a:	e00e      	b.n	801a67a <HAL_PCD_EP_Open+0xc8>
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	2201      	movs	r2, #1
 801a660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	68f9      	ldr	r1, [r7, #12]
 801a66a:	4618      	mov	r0, r3
 801a66c:	f003 fdca 	bl	801e204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	2200      	movs	r2, #0
 801a674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 801a678:	7afb      	ldrb	r3, [r7, #11]
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	3710      	adds	r7, #16
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}

0801a682 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a682:	b580      	push	{r7, lr}
 801a684:	b084      	sub	sp, #16
 801a686:	af00      	add	r7, sp, #0
 801a688:	6078      	str	r0, [r7, #4]
 801a68a:	460b      	mov	r3, r1
 801a68c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a68e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a692:	2b00      	cmp	r3, #0
 801a694:	da0f      	bge.n	801a6b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a696:	78fb      	ldrb	r3, [r7, #3]
 801a698:	f003 020f 	and.w	r2, r3, #15
 801a69c:	4613      	mov	r3, r2
 801a69e:	00db      	lsls	r3, r3, #3
 801a6a0:	4413      	add	r3, r2
 801a6a2:	009b      	lsls	r3, r3, #2
 801a6a4:	3338      	adds	r3, #56	; 0x38
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	3304      	adds	r3, #4
 801a6ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	705a      	strb	r2, [r3, #1]
 801a6b4:	e00f      	b.n	801a6d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a6b6:	78fb      	ldrb	r3, [r7, #3]
 801a6b8:	f003 020f 	and.w	r2, r3, #15
 801a6bc:	4613      	mov	r3, r2
 801a6be:	00db      	lsls	r3, r3, #3
 801a6c0:	4413      	add	r3, r2
 801a6c2:	009b      	lsls	r3, r3, #2
 801a6c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a6c8:	687a      	ldr	r2, [r7, #4]
 801a6ca:	4413      	add	r3, r2
 801a6cc:	3304      	adds	r3, #4
 801a6ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a6d6:	78fb      	ldrb	r3, [r7, #3]
 801a6d8:	f003 030f 	and.w	r3, r3, #15
 801a6dc:	b2da      	uxtb	r2, r3
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a6e8:	2b01      	cmp	r3, #1
 801a6ea:	d101      	bne.n	801a6f0 <HAL_PCD_EP_Close+0x6e>
 801a6ec:	2302      	movs	r3, #2
 801a6ee:	e00e      	b.n	801a70e <HAL_PCD_EP_Close+0x8c>
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2201      	movs	r2, #1
 801a6f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	68f9      	ldr	r1, [r7, #12]
 801a6fe:	4618      	mov	r0, r3
 801a700:	f003 fe08 	bl	801e314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2200      	movs	r2, #0
 801a708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 801a70c:	2300      	movs	r3, #0
}
 801a70e:	4618      	mov	r0, r3
 801a710:	3710      	adds	r7, #16
 801a712:	46bd      	mov	sp, r7
 801a714:	bd80      	pop	{r7, pc}

0801a716 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a716:	b580      	push	{r7, lr}
 801a718:	b086      	sub	sp, #24
 801a71a:	af00      	add	r7, sp, #0
 801a71c:	60f8      	str	r0, [r7, #12]
 801a71e:	607a      	str	r2, [r7, #4]
 801a720:	603b      	str	r3, [r7, #0]
 801a722:	460b      	mov	r3, r1
 801a724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a726:	7afb      	ldrb	r3, [r7, #11]
 801a728:	f003 020f 	and.w	r2, r3, #15
 801a72c:	4613      	mov	r3, r2
 801a72e:	00db      	lsls	r3, r3, #3
 801a730:	4413      	add	r3, r2
 801a732:	009b      	lsls	r3, r3, #2
 801a734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a738:	68fa      	ldr	r2, [r7, #12]
 801a73a:	4413      	add	r3, r2
 801a73c:	3304      	adds	r3, #4
 801a73e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	683a      	ldr	r2, [r7, #0]
 801a74a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801a74c:	697b      	ldr	r3, [r7, #20]
 801a74e:	2200      	movs	r2, #0
 801a750:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	2200      	movs	r2, #0
 801a756:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a758:	7afb      	ldrb	r3, [r7, #11]
 801a75a:	f003 030f 	and.w	r3, r3, #15
 801a75e:	b2da      	uxtb	r2, r3
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	691b      	ldr	r3, [r3, #16]
 801a768:	2b01      	cmp	r3, #1
 801a76a:	d102      	bne.n	801a772 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a76c:	687a      	ldr	r2, [r7, #4]
 801a76e:	697b      	ldr	r3, [r7, #20]
 801a770:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a772:	7afb      	ldrb	r3, [r7, #11]
 801a774:	f003 030f 	and.w	r3, r3, #15
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d109      	bne.n	801a790 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	6818      	ldr	r0, [r3, #0]
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	691b      	ldr	r3, [r3, #16]
 801a784:	b2db      	uxtb	r3, r3
 801a786:	461a      	mov	r2, r3
 801a788:	6979      	ldr	r1, [r7, #20]
 801a78a:	f004 f8e7 	bl	801e95c <USB_EP0StartXfer>
 801a78e:	e008      	b.n	801a7a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	6818      	ldr	r0, [r3, #0]
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	691b      	ldr	r3, [r3, #16]
 801a798:	b2db      	uxtb	r3, r3
 801a79a:	461a      	mov	r2, r3
 801a79c:	6979      	ldr	r1, [r7, #20]
 801a79e:	f003 fe95 	bl	801e4cc <USB_EPStartXfer>
  }

  return HAL_OK;
 801a7a2:	2300      	movs	r3, #0
}
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	3718      	adds	r7, #24
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bd80      	pop	{r7, pc}

0801a7ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
 801a7b4:	460b      	mov	r3, r1
 801a7b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801a7b8:	78fb      	ldrb	r3, [r7, #3]
 801a7ba:	f003 020f 	and.w	r2, r3, #15
 801a7be:	6879      	ldr	r1, [r7, #4]
 801a7c0:	4613      	mov	r3, r2
 801a7c2:	00db      	lsls	r3, r3, #3
 801a7c4:	4413      	add	r3, r2
 801a7c6:	009b      	lsls	r3, r3, #2
 801a7c8:	440b      	add	r3, r1
 801a7ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 801a7ce:	681b      	ldr	r3, [r3, #0]
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	370c      	adds	r7, #12
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7da:	4770      	bx	lr

0801a7dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b086      	sub	sp, #24
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	60f8      	str	r0, [r7, #12]
 801a7e4:	607a      	str	r2, [r7, #4]
 801a7e6:	603b      	str	r3, [r7, #0]
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a7ec:	7afb      	ldrb	r3, [r7, #11]
 801a7ee:	f003 020f 	and.w	r2, r3, #15
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	00db      	lsls	r3, r3, #3
 801a7f6:	4413      	add	r3, r2
 801a7f8:	009b      	lsls	r3, r3, #2
 801a7fa:	3338      	adds	r3, #56	; 0x38
 801a7fc:	68fa      	ldr	r2, [r7, #12]
 801a7fe:	4413      	add	r3, r2
 801a800:	3304      	adds	r3, #4
 801a802:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a804:	697b      	ldr	r3, [r7, #20]
 801a806:	687a      	ldr	r2, [r7, #4]
 801a808:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	683a      	ldr	r2, [r7, #0]
 801a80e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	2200      	movs	r2, #0
 801a814:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 801a816:	697b      	ldr	r3, [r7, #20]
 801a818:	2201      	movs	r2, #1
 801a81a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a81c:	7afb      	ldrb	r3, [r7, #11]
 801a81e:	f003 030f 	and.w	r3, r3, #15
 801a822:	b2da      	uxtb	r2, r3
 801a824:	697b      	ldr	r3, [r7, #20]
 801a826:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	691b      	ldr	r3, [r3, #16]
 801a82c:	2b01      	cmp	r3, #1
 801a82e:	d102      	bne.n	801a836 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a836:	7afb      	ldrb	r3, [r7, #11]
 801a838:	f003 030f 	and.w	r3, r3, #15
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d109      	bne.n	801a854 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	6818      	ldr	r0, [r3, #0]
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	691b      	ldr	r3, [r3, #16]
 801a848:	b2db      	uxtb	r3, r3
 801a84a:	461a      	mov	r2, r3
 801a84c:	6979      	ldr	r1, [r7, #20]
 801a84e:	f004 f885 	bl	801e95c <USB_EP0StartXfer>
 801a852:	e008      	b.n	801a866 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	6818      	ldr	r0, [r3, #0]
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	691b      	ldr	r3, [r3, #16]
 801a85c:	b2db      	uxtb	r3, r3
 801a85e:	461a      	mov	r2, r3
 801a860:	6979      	ldr	r1, [r7, #20]
 801a862:	f003 fe33 	bl	801e4cc <USB_EPStartXfer>
  }

  return HAL_OK;
 801a866:	2300      	movs	r3, #0
}
 801a868:	4618      	mov	r0, r3
 801a86a:	3718      	adds	r7, #24
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}

0801a870 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b084      	sub	sp, #16
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	460b      	mov	r3, r1
 801a87a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801a87c:	78fb      	ldrb	r3, [r7, #3]
 801a87e:	f003 020f 	and.w	r2, r3, #15
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	685b      	ldr	r3, [r3, #4]
 801a886:	429a      	cmp	r2, r3
 801a888:	d901      	bls.n	801a88e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801a88a:	2301      	movs	r3, #1
 801a88c:	e050      	b.n	801a930 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a88e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a892:	2b00      	cmp	r3, #0
 801a894:	da0f      	bge.n	801a8b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a896:	78fb      	ldrb	r3, [r7, #3]
 801a898:	f003 020f 	and.w	r2, r3, #15
 801a89c:	4613      	mov	r3, r2
 801a89e:	00db      	lsls	r3, r3, #3
 801a8a0:	4413      	add	r3, r2
 801a8a2:	009b      	lsls	r3, r3, #2
 801a8a4:	3338      	adds	r3, #56	; 0x38
 801a8a6:	687a      	ldr	r2, [r7, #4]
 801a8a8:	4413      	add	r3, r2
 801a8aa:	3304      	adds	r3, #4
 801a8ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	2201      	movs	r2, #1
 801a8b2:	705a      	strb	r2, [r3, #1]
 801a8b4:	e00d      	b.n	801a8d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a8b6:	78fa      	ldrb	r2, [r7, #3]
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	00db      	lsls	r3, r3, #3
 801a8bc:	4413      	add	r3, r2
 801a8be:	009b      	lsls	r3, r3, #2
 801a8c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a8c4:	687a      	ldr	r2, [r7, #4]
 801a8c6:	4413      	add	r3, r2
 801a8c8:	3304      	adds	r3, #4
 801a8ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	2201      	movs	r2, #1
 801a8d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a8d8:	78fb      	ldrb	r3, [r7, #3]
 801a8da:	f003 030f 	and.w	r3, r3, #15
 801a8de:	b2da      	uxtb	r2, r3
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a8ea:	2b01      	cmp	r3, #1
 801a8ec:	d101      	bne.n	801a8f2 <HAL_PCD_EP_SetStall+0x82>
 801a8ee:	2302      	movs	r3, #2
 801a8f0:	e01e      	b.n	801a930 <HAL_PCD_EP_SetStall+0xc0>
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	2201      	movs	r2, #1
 801a8f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	68f9      	ldr	r1, [r7, #12]
 801a900:	4618      	mov	r0, r3
 801a902:	f004 fac3 	bl	801ee8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a906:	78fb      	ldrb	r3, [r7, #3]
 801a908:	f003 030f 	and.w	r3, r3, #15
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d10a      	bne.n	801a926 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	6818      	ldr	r0, [r3, #0]
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	691b      	ldr	r3, [r3, #16]
 801a918:	b2d9      	uxtb	r1, r3
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a920:	461a      	mov	r2, r3
 801a922:	f004 fcb3 	bl	801f28c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	2200      	movs	r2, #0
 801a92a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a92e:	2300      	movs	r3, #0
}
 801a930:	4618      	mov	r0, r3
 801a932:	3710      	adds	r7, #16
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b084      	sub	sp, #16
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	460b      	mov	r3, r1
 801a942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801a944:	78fb      	ldrb	r3, [r7, #3]
 801a946:	f003 020f 	and.w	r2, r3, #15
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	429a      	cmp	r2, r3
 801a950:	d901      	bls.n	801a956 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801a952:	2301      	movs	r3, #1
 801a954:	e042      	b.n	801a9dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801a956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	da0f      	bge.n	801a97e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a95e:	78fb      	ldrb	r3, [r7, #3]
 801a960:	f003 020f 	and.w	r2, r3, #15
 801a964:	4613      	mov	r3, r2
 801a966:	00db      	lsls	r3, r3, #3
 801a968:	4413      	add	r3, r2
 801a96a:	009b      	lsls	r3, r3, #2
 801a96c:	3338      	adds	r3, #56	; 0x38
 801a96e:	687a      	ldr	r2, [r7, #4]
 801a970:	4413      	add	r3, r2
 801a972:	3304      	adds	r3, #4
 801a974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	2201      	movs	r2, #1
 801a97a:	705a      	strb	r2, [r3, #1]
 801a97c:	e00f      	b.n	801a99e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a97e:	78fb      	ldrb	r3, [r7, #3]
 801a980:	f003 020f 	and.w	r2, r3, #15
 801a984:	4613      	mov	r3, r2
 801a986:	00db      	lsls	r3, r3, #3
 801a988:	4413      	add	r3, r2
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801a990:	687a      	ldr	r2, [r7, #4]
 801a992:	4413      	add	r3, r2
 801a994:	3304      	adds	r3, #4
 801a996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	2200      	movs	r2, #0
 801a99c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a9a4:	78fb      	ldrb	r3, [r7, #3]
 801a9a6:	f003 030f 	and.w	r3, r3, #15
 801a9aa:	b2da      	uxtb	r2, r3
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801a9b6:	2b01      	cmp	r3, #1
 801a9b8:	d101      	bne.n	801a9be <HAL_PCD_EP_ClrStall+0x86>
 801a9ba:	2302      	movs	r3, #2
 801a9bc:	e00e      	b.n	801a9dc <HAL_PCD_EP_ClrStall+0xa4>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	68f9      	ldr	r1, [r7, #12]
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f004 facb 	bl	801ef68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801a9da:	2300      	movs	r3, #0
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3710      	adds	r7, #16
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	460b      	mov	r3, r1
 801a9ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801a9f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	da0c      	bge.n	801aa12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a9f8:	78fb      	ldrb	r3, [r7, #3]
 801a9fa:	f003 020f 	and.w	r2, r3, #15
 801a9fe:	4613      	mov	r3, r2
 801aa00:	00db      	lsls	r3, r3, #3
 801aa02:	4413      	add	r3, r2
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	3338      	adds	r3, #56	; 0x38
 801aa08:	687a      	ldr	r2, [r7, #4]
 801aa0a:	4413      	add	r3, r2
 801aa0c:	3304      	adds	r3, #4
 801aa0e:	60fb      	str	r3, [r7, #12]
 801aa10:	e00c      	b.n	801aa2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801aa12:	78fb      	ldrb	r3, [r7, #3]
 801aa14:	f003 020f 	and.w	r2, r3, #15
 801aa18:	4613      	mov	r3, r2
 801aa1a:	00db      	lsls	r3, r3, #3
 801aa1c:	4413      	add	r3, r2
 801aa1e:	009b      	lsls	r3, r3, #2
 801aa20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801aa24:	687a      	ldr	r2, [r7, #4]
 801aa26:	4413      	add	r3, r2
 801aa28:	3304      	adds	r3, #4
 801aa2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	68f9      	ldr	r1, [r7, #12]
 801aa32:	4618      	mov	r0, r3
 801aa34:	f004 f8ea 	bl	801ec0c <USB_EPStopXfer>
 801aa38:	4603      	mov	r3, r0
 801aa3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 801aa3c:	7afb      	ldrb	r3, [r7, #11]
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3710      	adds	r7, #16
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}

0801aa46 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa46:	b580      	push	{r7, lr}
 801aa48:	b082      	sub	sp, #8
 801aa4a:	af00      	add	r7, sp, #0
 801aa4c:	6078      	str	r0, [r7, #4]
 801aa4e:	460b      	mov	r3, r1
 801aa50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 801aa58:	2b01      	cmp	r3, #1
 801aa5a:	d101      	bne.n	801aa60 <HAL_PCD_EP_Flush+0x1a>
 801aa5c:	2302      	movs	r3, #2
 801aa5e:	e01b      	b.n	801aa98 <HAL_PCD_EP_Flush+0x52>
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	2201      	movs	r2, #1
 801aa64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 801aa68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	da09      	bge.n	801aa84 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681a      	ldr	r2, [r3, #0]
 801aa74:	78fb      	ldrb	r3, [r7, #3]
 801aa76:	f003 030f 	and.w	r3, r3, #15
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	4610      	mov	r0, r2
 801aa7e:	f003 fb1f 	bl	801e0c0 <USB_FlushTxFifo>
 801aa82:	e004      	b.n	801aa8e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f003 fb4d 	bl	801e128 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	2200      	movs	r2, #0
 801aa92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 801aa96:	2300      	movs	r3, #0
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3708      	adds	r7, #8
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b08a      	sub	sp, #40	; 0x28
 801aaa4:	af02      	add	r7, sp, #8
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aab0:	697b      	ldr	r3, [r7, #20]
 801aab2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801aab4:	683a      	ldr	r2, [r7, #0]
 801aab6:	4613      	mov	r3, r2
 801aab8:	00db      	lsls	r3, r3, #3
 801aaba:	4413      	add	r3, r2
 801aabc:	009b      	lsls	r3, r3, #2
 801aabe:	3338      	adds	r3, #56	; 0x38
 801aac0:	687a      	ldr	r2, [r7, #4]
 801aac2:	4413      	add	r3, r2
 801aac4:	3304      	adds	r3, #4
 801aac6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	6a1a      	ldr	r2, [r3, #32]
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	699b      	ldr	r3, [r3, #24]
 801aad0:	429a      	cmp	r2, r3
 801aad2:	d901      	bls.n	801aad8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801aad4:	2301      	movs	r3, #1
 801aad6:	e06c      	b.n	801abb2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	699a      	ldr	r2, [r3, #24]
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	6a1b      	ldr	r3, [r3, #32]
 801aae0:	1ad3      	subs	r3, r2, r3
 801aae2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	68db      	ldr	r3, [r3, #12]
 801aae8:	69fa      	ldr	r2, [r7, #28]
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d902      	bls.n	801aaf4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	68db      	ldr	r3, [r3, #12]
 801aaf2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801aaf4:	69fb      	ldr	r3, [r7, #28]
 801aaf6:	3303      	adds	r3, #3
 801aaf8:	089b      	lsrs	r3, r3, #2
 801aafa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801aafc:	e02b      	b.n	801ab56 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	699a      	ldr	r2, [r3, #24]
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	6a1b      	ldr	r3, [r3, #32]
 801ab06:	1ad3      	subs	r3, r2, r3
 801ab08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	68db      	ldr	r3, [r3, #12]
 801ab0e:	69fa      	ldr	r2, [r7, #28]
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d902      	bls.n	801ab1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	68db      	ldr	r3, [r3, #12]
 801ab18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ab1a:	69fb      	ldr	r3, [r7, #28]
 801ab1c:	3303      	adds	r3, #3
 801ab1e:	089b      	lsrs	r3, r3, #2
 801ab20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	6919      	ldr	r1, [r3, #16]
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	69fb      	ldr	r3, [r7, #28]
 801ab2c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	9300      	str	r3, [sp, #0]
 801ab36:	4603      	mov	r3, r0
 801ab38:	6978      	ldr	r0, [r7, #20]
 801ab3a:	f004 f911 	bl	801ed60 <USB_WritePacket>

    ep->xfer_buff  += len;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	691a      	ldr	r2, [r3, #16]
 801ab42:	69fb      	ldr	r3, [r7, #28]
 801ab44:	441a      	add	r2, r3
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	6a1a      	ldr	r2, [r3, #32]
 801ab4e:	69fb      	ldr	r3, [r7, #28]
 801ab50:	441a      	add	r2, r3
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	015a      	lsls	r2, r3, #5
 801ab5a:	693b      	ldr	r3, [r7, #16]
 801ab5c:	4413      	add	r3, r2
 801ab5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ab62:	699b      	ldr	r3, [r3, #24]
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	69ba      	ldr	r2, [r7, #24]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	d809      	bhi.n	801ab80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	6a1a      	ldr	r2, [r3, #32]
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d203      	bcs.n	801ab80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	699b      	ldr	r3, [r3, #24]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d1be      	bne.n	801aafe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	699a      	ldr	r2, [r3, #24]
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	6a1b      	ldr	r3, [r3, #32]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d811      	bhi.n	801abb0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ab8c:	683b      	ldr	r3, [r7, #0]
 801ab8e:	f003 030f 	and.w	r3, r3, #15
 801ab92:	2201      	movs	r2, #1
 801ab94:	fa02 f303 	lsl.w	r3, r2, r3
 801ab98:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801ab9a:	693b      	ldr	r3, [r7, #16]
 801ab9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801aba2:	68bb      	ldr	r3, [r7, #8]
 801aba4:	43db      	mvns	r3, r3
 801aba6:	6939      	ldr	r1, [r7, #16]
 801aba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801abac:	4013      	ands	r3, r2
 801abae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801abb0:	2300      	movs	r3, #0
}
 801abb2:	4618      	mov	r0, r3
 801abb4:	3720      	adds	r7, #32
 801abb6:	46bd      	mov	sp, r7
 801abb8:	bd80      	pop	{r7, pc}
	...

0801abbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b088      	sub	sp, #32
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801abcc:	69fb      	ldr	r3, [r7, #28]
 801abce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801abd0:	69fb      	ldr	r3, [r7, #28]
 801abd2:	333c      	adds	r3, #60	; 0x3c
 801abd4:	3304      	adds	r3, #4
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	015a      	lsls	r2, r3, #5
 801abde:	69bb      	ldr	r3, [r7, #24]
 801abe0:	4413      	add	r3, r2
 801abe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801abe6:	689b      	ldr	r3, [r3, #8]
 801abe8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	691b      	ldr	r3, [r3, #16]
 801abee:	2b01      	cmp	r3, #1
 801abf0:	d17b      	bne.n	801acea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801abf2:	693b      	ldr	r3, [r7, #16]
 801abf4:	f003 0308 	and.w	r3, r3, #8
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d015      	beq.n	801ac28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	4a61      	ldr	r2, [pc, #388]	; (801ad84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801ac00:	4293      	cmp	r3, r2
 801ac02:	f240 80b9 	bls.w	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac06:	693b      	ldr	r3, [r7, #16]
 801ac08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	f000 80b3 	beq.w	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac12:	683b      	ldr	r3, [r7, #0]
 801ac14:	015a      	lsls	r2, r3, #5
 801ac16:	69bb      	ldr	r3, [r7, #24]
 801ac18:	4413      	add	r3, r2
 801ac1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac1e:	461a      	mov	r2, r3
 801ac20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac24:	6093      	str	r3, [r2, #8]
 801ac26:	e0a7      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801ac28:	693b      	ldr	r3, [r7, #16]
 801ac2a:	f003 0320 	and.w	r3, r3, #32
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d009      	beq.n	801ac46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	015a      	lsls	r2, r3, #5
 801ac36:	69bb      	ldr	r3, [r7, #24]
 801ac38:	4413      	add	r3, r2
 801ac3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac3e:	461a      	mov	r2, r3
 801ac40:	2320      	movs	r3, #32
 801ac42:	6093      	str	r3, [r2, #8]
 801ac44:	e098      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	f040 8093 	bne.w	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	4a4b      	ldr	r2, [pc, #300]	; (801ad84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d90f      	bls.n	801ac7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d00a      	beq.n	801ac7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	015a      	lsls	r2, r3, #5
 801ac68:	69bb      	ldr	r3, [r7, #24]
 801ac6a:	4413      	add	r3, r2
 801ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ac70:	461a      	mov	r2, r3
 801ac72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ac76:	6093      	str	r3, [r2, #8]
 801ac78:	e07e      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 801ac7a:	683a      	ldr	r2, [r7, #0]
 801ac7c:	4613      	mov	r3, r2
 801ac7e:	00db      	lsls	r3, r3, #3
 801ac80:	4413      	add	r3, r2
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	4413      	add	r3, r2
 801ac8c:	3304      	adds	r3, #4
 801ac8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	69da      	ldr	r2, [r3, #28]
 801ac94:	683b      	ldr	r3, [r7, #0]
 801ac96:	0159      	lsls	r1, r3, #5
 801ac98:	69bb      	ldr	r3, [r7, #24]
 801ac9a:	440b      	add	r3, r1
 801ac9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aca0:	691b      	ldr	r3, [r3, #16]
 801aca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aca6:	1ad2      	subs	r2, r2, r3
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d114      	bne.n	801acdc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	699b      	ldr	r3, [r3, #24]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d109      	bne.n	801acce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6818      	ldr	r0, [r3, #0]
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801acc4:	461a      	mov	r2, r3
 801acc6:	2101      	movs	r1, #1
 801acc8:	f004 fae0 	bl	801f28c <USB_EP0_OutStart>
 801accc:	e006      	b.n	801acdc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	691a      	ldr	r2, [r3, #16]
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	6a1b      	ldr	r3, [r3, #32]
 801acd6:	441a      	add	r2, r3
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801acdc:	683b      	ldr	r3, [r7, #0]
 801acde:	b2db      	uxtb	r3, r3
 801ace0:	4619      	mov	r1, r3
 801ace2:	6878      	ldr	r0, [r7, #4]
 801ace4:	f00b f85e 	bl	8025da4 <HAL_PCD_DataOutStageCallback>
 801ace8:	e046      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801acea:	697b      	ldr	r3, [r7, #20]
 801acec:	4a26      	ldr	r2, [pc, #152]	; (801ad88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 801acee:	4293      	cmp	r3, r2
 801acf0:	d124      	bne.n	801ad3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801acf2:	693b      	ldr	r3, [r7, #16]
 801acf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d00a      	beq.n	801ad12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	015a      	lsls	r2, r3, #5
 801ad00:	69bb      	ldr	r3, [r7, #24]
 801ad02:	4413      	add	r3, r2
 801ad04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad08:	461a      	mov	r2, r3
 801ad0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ad0e:	6093      	str	r3, [r2, #8]
 801ad10:	e032      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	f003 0320 	and.w	r3, r3, #32
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d008      	beq.n	801ad2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	015a      	lsls	r2, r3, #5
 801ad20:	69bb      	ldr	r3, [r7, #24]
 801ad22:	4413      	add	r3, r2
 801ad24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad28:	461a      	mov	r2, r3
 801ad2a:	2320      	movs	r3, #32
 801ad2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	b2db      	uxtb	r3, r3
 801ad32:	4619      	mov	r1, r3
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f00b f835 	bl	8025da4 <HAL_PCD_DataOutStageCallback>
 801ad3a:	e01d      	b.n	801ad78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801ad3c:	683b      	ldr	r3, [r7, #0]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d114      	bne.n	801ad6c <PCD_EP_OutXfrComplete_int+0x1b0>
 801ad42:	6879      	ldr	r1, [r7, #4]
 801ad44:	683a      	ldr	r2, [r7, #0]
 801ad46:	4613      	mov	r3, r2
 801ad48:	00db      	lsls	r3, r3, #3
 801ad4a:	4413      	add	r3, r2
 801ad4c:	009b      	lsls	r3, r3, #2
 801ad4e:	440b      	add	r3, r1
 801ad50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d108      	bne.n	801ad6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	6818      	ldr	r0, [r3, #0]
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ad64:	461a      	mov	r2, r3
 801ad66:	2100      	movs	r1, #0
 801ad68:	f004 fa90 	bl	801f28c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801ad6c:	683b      	ldr	r3, [r7, #0]
 801ad6e:	b2db      	uxtb	r3, r3
 801ad70:	4619      	mov	r1, r3
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f00b f816 	bl	8025da4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801ad78:	2300      	movs	r3, #0
}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3720      	adds	r7, #32
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	4f54300a 	.word	0x4f54300a
 801ad88:	4f54310a 	.word	0x4f54310a

0801ad8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b086      	sub	sp, #24
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	333c      	adds	r3, #60	; 0x3c
 801ada4:	3304      	adds	r3, #4
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	015a      	lsls	r2, r3, #5
 801adae:	693b      	ldr	r3, [r7, #16]
 801adb0:	4413      	add	r3, r2
 801adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adb6:	689b      	ldr	r3, [r3, #8]
 801adb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	4a15      	ldr	r2, [pc, #84]	; (801ae14 <PCD_EP_OutSetupPacket_int+0x88>)
 801adbe:	4293      	cmp	r3, r2
 801adc0:	d90e      	bls.n	801ade0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d009      	beq.n	801ade0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801adcc:	683b      	ldr	r3, [r7, #0]
 801adce:	015a      	lsls	r2, r3, #5
 801add0:	693b      	ldr	r3, [r7, #16]
 801add2:	4413      	add	r3, r2
 801add4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801add8:	461a      	mov	r2, r3
 801adda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801adde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ade0:	6878      	ldr	r0, [r7, #4]
 801ade2:	f00a ffcd 	bl	8025d80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	4a0a      	ldr	r2, [pc, #40]	; (801ae14 <PCD_EP_OutSetupPacket_int+0x88>)
 801adea:	4293      	cmp	r3, r2
 801adec:	d90c      	bls.n	801ae08 <PCD_EP_OutSetupPacket_int+0x7c>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	691b      	ldr	r3, [r3, #16]
 801adf2:	2b01      	cmp	r3, #1
 801adf4:	d108      	bne.n	801ae08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6818      	ldr	r0, [r3, #0]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ae00:	461a      	mov	r2, r3
 801ae02:	2101      	movs	r1, #1
 801ae04:	f004 fa42 	bl	801f28c <USB_EP0_OutStart>
  }

  return HAL_OK;
 801ae08:	2300      	movs	r3, #0
}
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	3718      	adds	r7, #24
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}
 801ae12:	bf00      	nop
 801ae14:	4f54300a 	.word	0x4f54300a

0801ae18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801ae18:	b480      	push	{r7}
 801ae1a:	b085      	sub	sp, #20
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	460b      	mov	r3, r1
 801ae22:	70fb      	strb	r3, [r7, #3]
 801ae24:	4613      	mov	r3, r2
 801ae26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801ae30:	78fb      	ldrb	r3, [r7, #3]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d107      	bne.n	801ae46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801ae36:	883b      	ldrh	r3, [r7, #0]
 801ae38:	0419      	lsls	r1, r3, #16
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	68ba      	ldr	r2, [r7, #8]
 801ae40:	430a      	orrs	r2, r1
 801ae42:	629a      	str	r2, [r3, #40]	; 0x28
 801ae44:	e028      	b.n	801ae98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae4c:	0c1b      	lsrs	r3, r3, #16
 801ae4e:	68ba      	ldr	r2, [r7, #8]
 801ae50:	4413      	add	r3, r2
 801ae52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae54:	2300      	movs	r3, #0
 801ae56:	73fb      	strb	r3, [r7, #15]
 801ae58:	e00d      	b.n	801ae76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681a      	ldr	r2, [r3, #0]
 801ae5e:	7bfb      	ldrb	r3, [r7, #15]
 801ae60:	3340      	adds	r3, #64	; 0x40
 801ae62:	009b      	lsls	r3, r3, #2
 801ae64:	4413      	add	r3, r2
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	0c1b      	lsrs	r3, r3, #16
 801ae6a:	68ba      	ldr	r2, [r7, #8]
 801ae6c:	4413      	add	r3, r2
 801ae6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801ae70:	7bfb      	ldrb	r3, [r7, #15]
 801ae72:	3301      	adds	r3, #1
 801ae74:	73fb      	strb	r3, [r7, #15]
 801ae76:	7bfa      	ldrb	r2, [r7, #15]
 801ae78:	78fb      	ldrb	r3, [r7, #3]
 801ae7a:	3b01      	subs	r3, #1
 801ae7c:	429a      	cmp	r2, r3
 801ae7e:	d3ec      	bcc.n	801ae5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801ae80:	883b      	ldrh	r3, [r7, #0]
 801ae82:	0418      	lsls	r0, r3, #16
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	6819      	ldr	r1, [r3, #0]
 801ae88:	78fb      	ldrb	r3, [r7, #3]
 801ae8a:	3b01      	subs	r3, #1
 801ae8c:	68ba      	ldr	r2, [r7, #8]
 801ae8e:	4302      	orrs	r2, r0
 801ae90:	3340      	adds	r3, #64	; 0x40
 801ae92:	009b      	lsls	r3, r3, #2
 801ae94:	440b      	add	r3, r1
 801ae96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3714      	adds	r7, #20
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea4:	4770      	bx	lr

0801aea6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801aea6:	b480      	push	{r7}
 801aea8:	b083      	sub	sp, #12
 801aeaa:	af00      	add	r7, sp, #0
 801aeac:	6078      	str	r0, [r7, #4]
 801aeae:	460b      	mov	r3, r1
 801aeb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	887a      	ldrh	r2, [r7, #2]
 801aeb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801aeba:	2300      	movs	r3, #0
}
 801aebc:	4618      	mov	r0, r3
 801aebe:	370c      	adds	r7, #12
 801aec0:	46bd      	mov	sp, r7
 801aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec6:	4770      	bx	lr

0801aec8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801aec8:	b480      	push	{r7}
 801aeca:	b085      	sub	sp, #20
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	2201      	movs	r2, #1
 801aeda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	2200      	movs	r2, #0
 801aee2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	699b      	ldr	r3, [r3, #24]
 801aeea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801aefa:	f043 0303 	orr.w	r3, r3, #3
 801aefe:	68fa      	ldr	r2, [r7, #12]
 801af00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801af02:	2300      	movs	r3, #0
}
 801af04:	4618      	mov	r0, r3
 801af06:	3714      	adds	r7, #20
 801af08:	46bd      	mov	sp, r7
 801af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0e:	4770      	bx	lr

0801af10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b082      	sub	sp, #8
 801af14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801af16:	2300      	movs	r3, #0
 801af18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801af1a:	2300      	movs	r3, #0
 801af1c:	603b      	str	r3, [r7, #0]
 801af1e:	4b20      	ldr	r3, [pc, #128]	; (801afa0 <HAL_PWREx_EnableOverDrive+0x90>)
 801af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af22:	4a1f      	ldr	r2, [pc, #124]	; (801afa0 <HAL_PWREx_EnableOverDrive+0x90>)
 801af24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801af28:	6413      	str	r3, [r2, #64]	; 0x40
 801af2a:	4b1d      	ldr	r3, [pc, #116]	; (801afa0 <HAL_PWREx_EnableOverDrive+0x90>)
 801af2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801af2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801af32:	603b      	str	r3, [r7, #0]
 801af34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801af36:	4b1b      	ldr	r3, [pc, #108]	; (801afa4 <HAL_PWREx_EnableOverDrive+0x94>)
 801af38:	2201      	movs	r2, #1
 801af3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801af3c:	f7fd f8ee 	bl	801811c <HAL_GetTick>
 801af40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801af42:	e009      	b.n	801af58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801af44:	f7fd f8ea 	bl	801811c <HAL_GetTick>
 801af48:	4602      	mov	r2, r0
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	1ad3      	subs	r3, r2, r3
 801af4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af52:	d901      	bls.n	801af58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801af54:	2303      	movs	r3, #3
 801af56:	e01f      	b.n	801af98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801af58:	4b13      	ldr	r3, [pc, #76]	; (801afa8 <HAL_PWREx_EnableOverDrive+0x98>)
 801af5a:	685b      	ldr	r3, [r3, #4]
 801af5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801af60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af64:	d1ee      	bne.n	801af44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801af66:	4b11      	ldr	r3, [pc, #68]	; (801afac <HAL_PWREx_EnableOverDrive+0x9c>)
 801af68:	2201      	movs	r2, #1
 801af6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801af6c:	f7fd f8d6 	bl	801811c <HAL_GetTick>
 801af70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af72:	e009      	b.n	801af88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801af74:	f7fd f8d2 	bl	801811c <HAL_GetTick>
 801af78:	4602      	mov	r2, r0
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	1ad3      	subs	r3, r2, r3
 801af7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af82:	d901      	bls.n	801af88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801af84:	2303      	movs	r3, #3
 801af86:	e007      	b.n	801af98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801af88:	4b07      	ldr	r3, [pc, #28]	; (801afa8 <HAL_PWREx_EnableOverDrive+0x98>)
 801af8a:	685b      	ldr	r3, [r3, #4]
 801af8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801af94:	d1ee      	bne.n	801af74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801af96:	2300      	movs	r3, #0
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3708      	adds	r7, #8
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	40023800 	.word	0x40023800
 801afa4:	420e0040 	.word	0x420e0040
 801afa8:	40007000 	.word	0x40007000
 801afac:	420e0044 	.word	0x420e0044

0801afb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b084      	sub	sp, #16
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
 801afb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d101      	bne.n	801afc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801afc0:	2301      	movs	r3, #1
 801afc2:	e0cc      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801afc4:	4b68      	ldr	r3, [pc, #416]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f003 030f 	and.w	r3, r3, #15
 801afcc:	683a      	ldr	r2, [r7, #0]
 801afce:	429a      	cmp	r2, r3
 801afd0:	d90c      	bls.n	801afec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801afd2:	4b65      	ldr	r3, [pc, #404]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801afd4:	683a      	ldr	r2, [r7, #0]
 801afd6:	b2d2      	uxtb	r2, r2
 801afd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801afda:	4b63      	ldr	r3, [pc, #396]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	f003 030f 	and.w	r3, r3, #15
 801afe2:	683a      	ldr	r2, [r7, #0]
 801afe4:	429a      	cmp	r2, r3
 801afe6:	d001      	beq.n	801afec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801afe8:	2301      	movs	r3, #1
 801afea:	e0b8      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	f003 0302 	and.w	r3, r3, #2
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d020      	beq.n	801b03a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	f003 0304 	and.w	r3, r3, #4
 801b000:	2b00      	cmp	r3, #0
 801b002:	d005      	beq.n	801b010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b004:	4b59      	ldr	r3, [pc, #356]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b006:	689b      	ldr	r3, [r3, #8]
 801b008:	4a58      	ldr	r2, [pc, #352]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b00a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b00e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	f003 0308 	and.w	r3, r3, #8
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d005      	beq.n	801b028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b01c:	4b53      	ldr	r3, [pc, #332]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b01e:	689b      	ldr	r3, [r3, #8]
 801b020:	4a52      	ldr	r2, [pc, #328]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b028:	4b50      	ldr	r3, [pc, #320]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b02a:	689b      	ldr	r3, [r3, #8]
 801b02c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	689b      	ldr	r3, [r3, #8]
 801b034:	494d      	ldr	r1, [pc, #308]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b036:	4313      	orrs	r3, r2
 801b038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	f003 0301 	and.w	r3, r3, #1
 801b042:	2b00      	cmp	r3, #0
 801b044:	d044      	beq.n	801b0d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	685b      	ldr	r3, [r3, #4]
 801b04a:	2b01      	cmp	r3, #1
 801b04c:	d107      	bne.n	801b05e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b04e:	4b47      	ldr	r3, [pc, #284]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b056:	2b00      	cmp	r3, #0
 801b058:	d119      	bne.n	801b08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b05a:	2301      	movs	r3, #1
 801b05c:	e07f      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	685b      	ldr	r3, [r3, #4]
 801b062:	2b02      	cmp	r3, #2
 801b064:	d003      	beq.n	801b06e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b06a:	2b03      	cmp	r3, #3
 801b06c:	d107      	bne.n	801b07e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b06e:	4b3f      	ldr	r3, [pc, #252]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b076:	2b00      	cmp	r3, #0
 801b078:	d109      	bne.n	801b08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b07a:	2301      	movs	r3, #1
 801b07c:	e06f      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b07e:	4b3b      	ldr	r3, [pc, #236]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	f003 0302 	and.w	r3, r3, #2
 801b086:	2b00      	cmp	r3, #0
 801b088:	d101      	bne.n	801b08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b08a:	2301      	movs	r3, #1
 801b08c:	e067      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b08e:	4b37      	ldr	r3, [pc, #220]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b090:	689b      	ldr	r3, [r3, #8]
 801b092:	f023 0203 	bic.w	r2, r3, #3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	4934      	ldr	r1, [pc, #208]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b09c:	4313      	orrs	r3, r2
 801b09e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b0a0:	f7fd f83c 	bl	801811c <HAL_GetTick>
 801b0a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b0a6:	e00a      	b.n	801b0be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b0a8:	f7fd f838 	bl	801811c <HAL_GetTick>
 801b0ac:	4602      	mov	r2, r0
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	1ad3      	subs	r3, r2, r3
 801b0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b0b6:	4293      	cmp	r3, r2
 801b0b8:	d901      	bls.n	801b0be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b0ba:	2303      	movs	r3, #3
 801b0bc:	e04f      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b0be:	4b2b      	ldr	r3, [pc, #172]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b0c0:	689b      	ldr	r3, [r3, #8]
 801b0c2:	f003 020c 	and.w	r2, r3, #12
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	685b      	ldr	r3, [r3, #4]
 801b0ca:	009b      	lsls	r3, r3, #2
 801b0cc:	429a      	cmp	r2, r3
 801b0ce:	d1eb      	bne.n	801b0a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b0d0:	4b25      	ldr	r3, [pc, #148]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	f003 030f 	and.w	r3, r3, #15
 801b0d8:	683a      	ldr	r2, [r7, #0]
 801b0da:	429a      	cmp	r2, r3
 801b0dc:	d20c      	bcs.n	801b0f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b0de:	4b22      	ldr	r3, [pc, #136]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801b0e0:	683a      	ldr	r2, [r7, #0]
 801b0e2:	b2d2      	uxtb	r2, r2
 801b0e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b0e6:	4b20      	ldr	r3, [pc, #128]	; (801b168 <HAL_RCC_ClockConfig+0x1b8>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	f003 030f 	and.w	r3, r3, #15
 801b0ee:	683a      	ldr	r2, [r7, #0]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	d001      	beq.n	801b0f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b0f4:	2301      	movs	r3, #1
 801b0f6:	e032      	b.n	801b15e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	f003 0304 	and.w	r3, r3, #4
 801b100:	2b00      	cmp	r3, #0
 801b102:	d008      	beq.n	801b116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b104:	4b19      	ldr	r3, [pc, #100]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b106:	689b      	ldr	r3, [r3, #8]
 801b108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	68db      	ldr	r3, [r3, #12]
 801b110:	4916      	ldr	r1, [pc, #88]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b112:	4313      	orrs	r3, r2
 801b114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	f003 0308 	and.w	r3, r3, #8
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d009      	beq.n	801b136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b122:	4b12      	ldr	r3, [pc, #72]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b124:	689b      	ldr	r3, [r3, #8]
 801b126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	691b      	ldr	r3, [r3, #16]
 801b12e:	00db      	lsls	r3, r3, #3
 801b130:	490e      	ldr	r1, [pc, #56]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b132:	4313      	orrs	r3, r2
 801b134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b136:	f000 fb57 	bl	801b7e8 <HAL_RCC_GetSysClockFreq>
 801b13a:	4602      	mov	r2, r0
 801b13c:	4b0b      	ldr	r3, [pc, #44]	; (801b16c <HAL_RCC_ClockConfig+0x1bc>)
 801b13e:	689b      	ldr	r3, [r3, #8]
 801b140:	091b      	lsrs	r3, r3, #4
 801b142:	f003 030f 	and.w	r3, r3, #15
 801b146:	490a      	ldr	r1, [pc, #40]	; (801b170 <HAL_RCC_ClockConfig+0x1c0>)
 801b148:	5ccb      	ldrb	r3, [r1, r3]
 801b14a:	fa22 f303 	lsr.w	r3, r2, r3
 801b14e:	4a09      	ldr	r2, [pc, #36]	; (801b174 <HAL_RCC_ClockConfig+0x1c4>)
 801b150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b152:	4b09      	ldr	r3, [pc, #36]	; (801b178 <HAL_RCC_ClockConfig+0x1c8>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4618      	mov	r0, r3
 801b158:	f7fc ff9c 	bl	8018094 <HAL_InitTick>

  return HAL_OK;
 801b15c:	2300      	movs	r3, #0
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3710      	adds	r7, #16
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}
 801b166:	bf00      	nop
 801b168:	40023c00 	.word	0x40023c00
 801b16c:	40023800 	.word	0x40023800
 801b170:	080023ec 	.word	0x080023ec
 801b174:	20000564 	.word	0x20000564
 801b178:	20000568 	.word	0x20000568

0801b17c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b17c:	b480      	push	{r7}
 801b17e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b180:	4b03      	ldr	r3, [pc, #12]	; (801b190 <HAL_RCC_GetHCLKFreq+0x14>)
 801b182:	681b      	ldr	r3, [r3, #0]
}
 801b184:	4618      	mov	r0, r3
 801b186:	46bd      	mov	sp, r7
 801b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b18c:	4770      	bx	lr
 801b18e:	bf00      	nop
 801b190:	20000564 	.word	0x20000564

0801b194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b194:	b580      	push	{r7, lr}
 801b196:	b08c      	sub	sp, #48	; 0x30
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b19c:	2300      	movs	r3, #0
 801b19e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b1a8:	2300      	movs	r3, #0
 801b1aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	f003 0301 	and.w	r3, r3, #1
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d010      	beq.n	801b1ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b1cc:	4b6f      	ldr	r3, [pc, #444]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b1d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1da:	496c      	ldr	r1, [pc, #432]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1dc:	4313      	orrs	r3, r2
 801b1de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d101      	bne.n	801b1ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b1ea:	2301      	movs	r3, #1
 801b1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f003 0302 	and.w	r3, r3, #2
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d010      	beq.n	801b21c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b1fa:	4b64      	ldr	r3, [pc, #400]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b200:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b208:	4960      	ldr	r1, [pc, #384]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b20a:	4313      	orrs	r3, r2
 801b20c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b214:	2b00      	cmp	r3, #0
 801b216:	d101      	bne.n	801b21c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b218:	2301      	movs	r3, #1
 801b21a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	f003 0304 	and.w	r3, r3, #4
 801b224:	2b00      	cmp	r3, #0
 801b226:	d017      	beq.n	801b258 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b228:	4b58      	ldr	r3, [pc, #352]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b22e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b236:	4955      	ldr	r1, [pc, #340]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b238:	4313      	orrs	r3, r2
 801b23a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b246:	d101      	bne.n	801b24c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b248:	2301      	movs	r3, #1
 801b24a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b250:	2b00      	cmp	r3, #0
 801b252:	d101      	bne.n	801b258 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b254:	2301      	movs	r3, #1
 801b256:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	f003 0308 	and.w	r3, r3, #8
 801b260:	2b00      	cmp	r3, #0
 801b262:	d017      	beq.n	801b294 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b264:	4b49      	ldr	r3, [pc, #292]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b26a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b272:	4946      	ldr	r1, [pc, #280]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b274:	4313      	orrs	r3, r2
 801b276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b27e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b282:	d101      	bne.n	801b288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b284:	2301      	movs	r3, #1
 801b286:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d101      	bne.n	801b294 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b290:	2301      	movs	r3, #1
 801b292:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	f003 0320 	and.w	r3, r3, #32
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	f000 808a 	beq.w	801b3b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	60bb      	str	r3, [r7, #8]
 801b2a6:	4b39      	ldr	r3, [pc, #228]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2aa:	4a38      	ldr	r2, [pc, #224]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b2b0:	6413      	str	r3, [r2, #64]	; 0x40
 801b2b2:	4b36      	ldr	r3, [pc, #216]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b2ba:	60bb      	str	r3, [r7, #8]
 801b2bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b2be:	4b34      	ldr	r3, [pc, #208]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	4a33      	ldr	r2, [pc, #204]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b2c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b2ca:	f7fc ff27 	bl	801811c <HAL_GetTick>
 801b2ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b2d0:	e008      	b.n	801b2e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b2d2:	f7fc ff23 	bl	801811c <HAL_GetTick>
 801b2d6:	4602      	mov	r2, r0
 801b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2da:	1ad3      	subs	r3, r2, r3
 801b2dc:	2b02      	cmp	r3, #2
 801b2de:	d901      	bls.n	801b2e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b2e0:	2303      	movs	r3, #3
 801b2e2:	e278      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b2e4:	4b2a      	ldr	r3, [pc, #168]	; (801b390 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d0f0      	beq.n	801b2d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b2f0:	4b26      	ldr	r3, [pc, #152]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b2fa:	6a3b      	ldr	r3, [r7, #32]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d02f      	beq.n	801b360 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b308:	6a3a      	ldr	r2, [r7, #32]
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d028      	beq.n	801b360 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b30e:	4b1f      	ldr	r3, [pc, #124]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b316:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b318:	4b1e      	ldr	r3, [pc, #120]	; (801b394 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b31a:	2201      	movs	r2, #1
 801b31c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b31e:	4b1d      	ldr	r3, [pc, #116]	; (801b394 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b320:	2200      	movs	r2, #0
 801b322:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b324:	4a19      	ldr	r2, [pc, #100]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b326:	6a3b      	ldr	r3, [r7, #32]
 801b328:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b32a:	4b18      	ldr	r3, [pc, #96]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b32e:	f003 0301 	and.w	r3, r3, #1
 801b332:	2b01      	cmp	r3, #1
 801b334:	d114      	bne.n	801b360 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b336:	f7fc fef1 	bl	801811c <HAL_GetTick>
 801b33a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b33c:	e00a      	b.n	801b354 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b33e:	f7fc feed 	bl	801811c <HAL_GetTick>
 801b342:	4602      	mov	r2, r0
 801b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b346:	1ad3      	subs	r3, r2, r3
 801b348:	f241 3288 	movw	r2, #5000	; 0x1388
 801b34c:	4293      	cmp	r3, r2
 801b34e:	d901      	bls.n	801b354 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b350:	2303      	movs	r3, #3
 801b352:	e240      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b354:	4b0d      	ldr	r3, [pc, #52]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b358:	f003 0302 	and.w	r3, r3, #2
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d0ee      	beq.n	801b33e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b36c:	d114      	bne.n	801b398 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b36e:	4b07      	ldr	r3, [pc, #28]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b370:	689b      	ldr	r3, [r3, #8]
 801b372:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b37a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b37e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b382:	4902      	ldr	r1, [pc, #8]	; (801b38c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b384:	4313      	orrs	r3, r2
 801b386:	608b      	str	r3, [r1, #8]
 801b388:	e00c      	b.n	801b3a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b38a:	bf00      	nop
 801b38c:	40023800 	.word	0x40023800
 801b390:	40007000 	.word	0x40007000
 801b394:	42470e40 	.word	0x42470e40
 801b398:	4b4a      	ldr	r3, [pc, #296]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b39a:	689b      	ldr	r3, [r3, #8]
 801b39c:	4a49      	ldr	r2, [pc, #292]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b39e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b3a2:	6093      	str	r3, [r2, #8]
 801b3a4:	4b47      	ldr	r3, [pc, #284]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b3b0:	4944      	ldr	r1, [pc, #272]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3b2:	4313      	orrs	r3, r2
 801b3b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	f003 0310 	and.w	r3, r3, #16
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d004      	beq.n	801b3cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b3c8:	4b3f      	ldr	r3, [pc, #252]	; (801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b3ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d00a      	beq.n	801b3ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b3d8:	4b3a      	ldr	r3, [pc, #232]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3e6:	4937      	ldr	r1, [pc, #220]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d00a      	beq.n	801b410 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b3fa:	4b32      	ldr	r3, [pc, #200]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b3fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b400:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b408:	492e      	ldr	r1, [pc, #184]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b40a:	4313      	orrs	r3, r2
 801b40c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d011      	beq.n	801b440 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b41c:	4b29      	ldr	r3, [pc, #164]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b41e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b422:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b42a:	4926      	ldr	r1, [pc, #152]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b42c:	4313      	orrs	r3, r2
 801b42e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b43a:	d101      	bne.n	801b440 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b43c:	2301      	movs	r3, #1
 801b43e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d00a      	beq.n	801b462 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b44c:	4b1d      	ldr	r3, [pc, #116]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b452:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b45a:	491a      	ldr	r1, [pc, #104]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b45c:	4313      	orrs	r3, r2
 801b45e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d011      	beq.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b46e:	4b15      	ldr	r3, [pc, #84]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b474:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b47c:	4911      	ldr	r1, [pc, #68]	; (801b4c4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b47e:	4313      	orrs	r3, r2
 801b480:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b48c:	d101      	bne.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b48e:	2301      	movs	r3, #1
 801b490:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b494:	2b01      	cmp	r3, #1
 801b496:	d005      	beq.n	801b4a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b4a0:	f040 80ff 	bne.w	801b6a2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b4a4:	4b09      	ldr	r3, [pc, #36]	; (801b4cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b4aa:	f7fc fe37 	bl	801811c <HAL_GetTick>
 801b4ae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b4b0:	e00e      	b.n	801b4d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b4b2:	f7fc fe33 	bl	801811c <HAL_GetTick>
 801b4b6:	4602      	mov	r2, r0
 801b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ba:	1ad3      	subs	r3, r2, r3
 801b4bc:	2b02      	cmp	r3, #2
 801b4be:	d907      	bls.n	801b4d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b4c0:	2303      	movs	r3, #3
 801b4c2:	e188      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b4c4:	40023800 	.word	0x40023800
 801b4c8:	424711e0 	.word	0x424711e0
 801b4cc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b4d0:	4b7e      	ldr	r3, [pc, #504]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d1ea      	bne.n	801b4b2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	f003 0301 	and.w	r3, r3, #1
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d003      	beq.n	801b4f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d009      	beq.n	801b504 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d028      	beq.n	801b54e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b500:	2b00      	cmp	r3, #0
 801b502:	d124      	bne.n	801b54e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b504:	4b71      	ldr	r3, [pc, #452]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b50a:	0c1b      	lsrs	r3, r3, #16
 801b50c:	f003 0303 	and.w	r3, r3, #3
 801b510:	3301      	adds	r3, #1
 801b512:	005b      	lsls	r3, r3, #1
 801b514:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b516:	4b6d      	ldr	r3, [pc, #436]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b51c:	0e1b      	lsrs	r3, r3, #24
 801b51e:	f003 030f 	and.w	r3, r3, #15
 801b522:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	685a      	ldr	r2, [r3, #4]
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	689b      	ldr	r3, [r3, #8]
 801b52c:	019b      	lsls	r3, r3, #6
 801b52e:	431a      	orrs	r2, r3
 801b530:	69fb      	ldr	r3, [r7, #28]
 801b532:	085b      	lsrs	r3, r3, #1
 801b534:	3b01      	subs	r3, #1
 801b536:	041b      	lsls	r3, r3, #16
 801b538:	431a      	orrs	r2, r3
 801b53a:	69bb      	ldr	r3, [r7, #24]
 801b53c:	061b      	lsls	r3, r3, #24
 801b53e:	431a      	orrs	r2, r3
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	695b      	ldr	r3, [r3, #20]
 801b544:	071b      	lsls	r3, r3, #28
 801b546:	4961      	ldr	r1, [pc, #388]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b548:	4313      	orrs	r3, r2
 801b54a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f003 0304 	and.w	r3, r3, #4
 801b556:	2b00      	cmp	r3, #0
 801b558:	d004      	beq.n	801b564 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b562:	d00a      	beq.n	801b57a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d035      	beq.n	801b5dc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b578:	d130      	bne.n	801b5dc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b57a:	4b54      	ldr	r3, [pc, #336]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b580:	0c1b      	lsrs	r3, r3, #16
 801b582:	f003 0303 	and.w	r3, r3, #3
 801b586:	3301      	adds	r3, #1
 801b588:	005b      	lsls	r3, r3, #1
 801b58a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b58c:	4b4f      	ldr	r3, [pc, #316]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b592:	0f1b      	lsrs	r3, r3, #28
 801b594:	f003 0307 	and.w	r3, r3, #7
 801b598:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	685a      	ldr	r2, [r3, #4]
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	689b      	ldr	r3, [r3, #8]
 801b5a2:	019b      	lsls	r3, r3, #6
 801b5a4:	431a      	orrs	r2, r3
 801b5a6:	69fb      	ldr	r3, [r7, #28]
 801b5a8:	085b      	lsrs	r3, r3, #1
 801b5aa:	3b01      	subs	r3, #1
 801b5ac:	041b      	lsls	r3, r3, #16
 801b5ae:	431a      	orrs	r2, r3
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	691b      	ldr	r3, [r3, #16]
 801b5b4:	061b      	lsls	r3, r3, #24
 801b5b6:	431a      	orrs	r2, r3
 801b5b8:	697b      	ldr	r3, [r7, #20]
 801b5ba:	071b      	lsls	r3, r3, #28
 801b5bc:	4943      	ldr	r1, [pc, #268]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5be:	4313      	orrs	r3, r2
 801b5c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b5c4:	4b41      	ldr	r3, [pc, #260]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5ca:	f023 021f 	bic.w	r2, r3, #31
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5d2:	3b01      	subs	r3, #1
 801b5d4:	493d      	ldr	r1, [pc, #244]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5d6:	4313      	orrs	r3, r2
 801b5d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d029      	beq.n	801b63c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b5f0:	d124      	bne.n	801b63c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b5f2:	4b36      	ldr	r3, [pc, #216]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5f8:	0c1b      	lsrs	r3, r3, #16
 801b5fa:	f003 0303 	and.w	r3, r3, #3
 801b5fe:	3301      	adds	r3, #1
 801b600:	005b      	lsls	r3, r3, #1
 801b602:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b604:	4b31      	ldr	r3, [pc, #196]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b60a:	0f1b      	lsrs	r3, r3, #28
 801b60c:	f003 0307 	and.w	r3, r3, #7
 801b610:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	685a      	ldr	r2, [r3, #4]
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	689b      	ldr	r3, [r3, #8]
 801b61a:	019b      	lsls	r3, r3, #6
 801b61c:	431a      	orrs	r2, r3
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	68db      	ldr	r3, [r3, #12]
 801b622:	085b      	lsrs	r3, r3, #1
 801b624:	3b01      	subs	r3, #1
 801b626:	041b      	lsls	r3, r3, #16
 801b628:	431a      	orrs	r2, r3
 801b62a:	69bb      	ldr	r3, [r7, #24]
 801b62c:	061b      	lsls	r3, r3, #24
 801b62e:	431a      	orrs	r2, r3
 801b630:	697b      	ldr	r3, [r7, #20]
 801b632:	071b      	lsls	r3, r3, #28
 801b634:	4925      	ldr	r1, [pc, #148]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b636:	4313      	orrs	r3, r2
 801b638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b644:	2b00      	cmp	r3, #0
 801b646:	d016      	beq.n	801b676 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	685a      	ldr	r2, [r3, #4]
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	689b      	ldr	r3, [r3, #8]
 801b650:	019b      	lsls	r3, r3, #6
 801b652:	431a      	orrs	r2, r3
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	68db      	ldr	r3, [r3, #12]
 801b658:	085b      	lsrs	r3, r3, #1
 801b65a:	3b01      	subs	r3, #1
 801b65c:	041b      	lsls	r3, r3, #16
 801b65e:	431a      	orrs	r2, r3
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	691b      	ldr	r3, [r3, #16]
 801b664:	061b      	lsls	r3, r3, #24
 801b666:	431a      	orrs	r2, r3
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	695b      	ldr	r3, [r3, #20]
 801b66c:	071b      	lsls	r3, r3, #28
 801b66e:	4917      	ldr	r1, [pc, #92]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b670:	4313      	orrs	r3, r2
 801b672:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b676:	4b16      	ldr	r3, [pc, #88]	; (801b6d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b678:	2201      	movs	r2, #1
 801b67a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b67c:	f7fc fd4e 	bl	801811c <HAL_GetTick>
 801b680:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b682:	e008      	b.n	801b696 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b684:	f7fc fd4a 	bl	801811c <HAL_GetTick>
 801b688:	4602      	mov	r2, r0
 801b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b68c:	1ad3      	subs	r3, r2, r3
 801b68e:	2b02      	cmp	r3, #2
 801b690:	d901      	bls.n	801b696 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b692:	2303      	movs	r3, #3
 801b694:	e09f      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b696:	4b0d      	ldr	r3, [pc, #52]	; (801b6cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d0f0      	beq.n	801b684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6a4:	2b01      	cmp	r3, #1
 801b6a6:	f040 8095 	bne.w	801b7d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b6aa:	4b0a      	ldr	r3, [pc, #40]	; (801b6d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b6ac:	2200      	movs	r2, #0
 801b6ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b6b0:	f7fc fd34 	bl	801811c <HAL_GetTick>
 801b6b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b6b6:	e00f      	b.n	801b6d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b6b8:	f7fc fd30 	bl	801811c <HAL_GetTick>
 801b6bc:	4602      	mov	r2, r0
 801b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c0:	1ad3      	subs	r3, r2, r3
 801b6c2:	2b02      	cmp	r3, #2
 801b6c4:	d908      	bls.n	801b6d8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b6c6:	2303      	movs	r3, #3
 801b6c8:	e085      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b6ca:	bf00      	nop
 801b6cc:	40023800 	.word	0x40023800
 801b6d0:	42470068 	.word	0x42470068
 801b6d4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b6d8:	4b41      	ldr	r3, [pc, #260]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b6e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b6e4:	d0e8      	beq.n	801b6b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	f003 0304 	and.w	r3, r3, #4
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d003      	beq.n	801b6fa <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d009      	beq.n	801b70e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b702:	2b00      	cmp	r3, #0
 801b704:	d02b      	beq.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d127      	bne.n	801b75e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b70e:	4b34      	ldr	r3, [pc, #208]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b714:	0c1b      	lsrs	r3, r3, #16
 801b716:	f003 0303 	and.w	r3, r3, #3
 801b71a:	3301      	adds	r3, #1
 801b71c:	005b      	lsls	r3, r3, #1
 801b71e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	699a      	ldr	r2, [r3, #24]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	69db      	ldr	r3, [r3, #28]
 801b728:	019b      	lsls	r3, r3, #6
 801b72a:	431a      	orrs	r2, r3
 801b72c:	693b      	ldr	r3, [r7, #16]
 801b72e:	085b      	lsrs	r3, r3, #1
 801b730:	3b01      	subs	r3, #1
 801b732:	041b      	lsls	r3, r3, #16
 801b734:	431a      	orrs	r2, r3
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b73a:	061b      	lsls	r3, r3, #24
 801b73c:	4928      	ldr	r1, [pc, #160]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b73e:	4313      	orrs	r3, r2
 801b740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b744:	4b26      	ldr	r3, [pc, #152]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b74a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b752:	3b01      	subs	r3, #1
 801b754:	021b      	lsls	r3, r3, #8
 801b756:	4922      	ldr	r1, [pc, #136]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b758:	4313      	orrs	r3, r2
 801b75a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b766:	2b00      	cmp	r3, #0
 801b768:	d01d      	beq.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b76e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b772:	d118      	bne.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b774:	4b1a      	ldr	r3, [pc, #104]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b77a:	0e1b      	lsrs	r3, r3, #24
 801b77c:	f003 030f 	and.w	r3, r3, #15
 801b780:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	699a      	ldr	r2, [r3, #24]
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	69db      	ldr	r3, [r3, #28]
 801b78a:	019b      	lsls	r3, r3, #6
 801b78c:	431a      	orrs	r2, r3
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6a1b      	ldr	r3, [r3, #32]
 801b792:	085b      	lsrs	r3, r3, #1
 801b794:	3b01      	subs	r3, #1
 801b796:	041b      	lsls	r3, r3, #16
 801b798:	431a      	orrs	r2, r3
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	061b      	lsls	r3, r3, #24
 801b79e:	4910      	ldr	r1, [pc, #64]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7a0:	4313      	orrs	r3, r2
 801b7a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b7a6:	4b0f      	ldr	r3, [pc, #60]	; (801b7e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801b7a8:	2201      	movs	r2, #1
 801b7aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b7ac:	f7fc fcb6 	bl	801811c <HAL_GetTick>
 801b7b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b7b2:	e008      	b.n	801b7c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b7b4:	f7fc fcb2 	bl	801811c <HAL_GetTick>
 801b7b8:	4602      	mov	r2, r0
 801b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7bc:	1ad3      	subs	r3, r2, r3
 801b7be:	2b02      	cmp	r3, #2
 801b7c0:	d901      	bls.n	801b7c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b7c2:	2303      	movs	r3, #3
 801b7c4:	e007      	b.n	801b7d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801b7c6:	4b06      	ldr	r3, [pc, #24]	; (801b7e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b7ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b7d2:	d1ef      	bne.n	801b7b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801b7d4:	2300      	movs	r3, #0
}
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	3730      	adds	r7, #48	; 0x30
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	bd80      	pop	{r7, pc}
 801b7de:	bf00      	nop
 801b7e0:	40023800 	.word	0x40023800
 801b7e4:	42470070 	.word	0x42470070

0801b7e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b7e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b7ec:	b0a6      	sub	sp, #152	; 0x98
 801b7ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 801b802:	2300      	movs	r3, #0
 801b804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 801b808:	2300      	movs	r3, #0
 801b80a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b80e:	4bc8      	ldr	r3, [pc, #800]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b810:	689b      	ldr	r3, [r3, #8]
 801b812:	f003 030c 	and.w	r3, r3, #12
 801b816:	2b0c      	cmp	r3, #12
 801b818:	f200 817e 	bhi.w	801bb18 <HAL_RCC_GetSysClockFreq+0x330>
 801b81c:	a201      	add	r2, pc, #4	; (adr r2, 801b824 <HAL_RCC_GetSysClockFreq+0x3c>)
 801b81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b822:	bf00      	nop
 801b824:	0801b859 	.word	0x0801b859
 801b828:	0801bb19 	.word	0x0801bb19
 801b82c:	0801bb19 	.word	0x0801bb19
 801b830:	0801bb19 	.word	0x0801bb19
 801b834:	0801b861 	.word	0x0801b861
 801b838:	0801bb19 	.word	0x0801bb19
 801b83c:	0801bb19 	.word	0x0801bb19
 801b840:	0801bb19 	.word	0x0801bb19
 801b844:	0801b869 	.word	0x0801b869
 801b848:	0801bb19 	.word	0x0801bb19
 801b84c:	0801bb19 	.word	0x0801bb19
 801b850:	0801bb19 	.word	0x0801bb19
 801b854:	0801b9d3 	.word	0x0801b9d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801b858:	4bb6      	ldr	r3, [pc, #728]	; (801bb34 <HAL_RCC_GetSysClockFreq+0x34c>)
 801b85a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 801b85e:	e15f      	b.n	801bb20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801b860:	4bb5      	ldr	r3, [pc, #724]	; (801bb38 <HAL_RCC_GetSysClockFreq+0x350>)
 801b862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801b866:	e15b      	b.n	801bb20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b868:	4bb1      	ldr	r3, [pc, #708]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b874:	4bae      	ldr	r3, [pc, #696]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b876:	685b      	ldr	r3, [r3, #4]
 801b878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d031      	beq.n	801b8e4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b880:	4bab      	ldr	r3, [pc, #684]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	099b      	lsrs	r3, r3, #6
 801b886:	2200      	movs	r2, #0
 801b888:	66bb      	str	r3, [r7, #104]	; 0x68
 801b88a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b88c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b892:	663b      	str	r3, [r7, #96]	; 0x60
 801b894:	2300      	movs	r3, #0
 801b896:	667b      	str	r3, [r7, #100]	; 0x64
 801b898:	4ba7      	ldr	r3, [pc, #668]	; (801bb38 <HAL_RCC_GetSysClockFreq+0x350>)
 801b89a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801b89e:	462a      	mov	r2, r5
 801b8a0:	fb03 f202 	mul.w	r2, r3, r2
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	4621      	mov	r1, r4
 801b8a8:	fb01 f303 	mul.w	r3, r1, r3
 801b8ac:	4413      	add	r3, r2
 801b8ae:	4aa2      	ldr	r2, [pc, #648]	; (801bb38 <HAL_RCC_GetSysClockFreq+0x350>)
 801b8b0:	4621      	mov	r1, r4
 801b8b2:	fba1 1202 	umull	r1, r2, r1, r2
 801b8b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 801b8b8:	460a      	mov	r2, r1
 801b8ba:	67ba      	str	r2, [r7, #120]	; 0x78
 801b8bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b8be:	4413      	add	r3, r2
 801b8c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b8c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	65bb      	str	r3, [r7, #88]	; 0x58
 801b8ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 801b8cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b8d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801b8d4:	f7f0 fbbc 	bl	800c050 <__aeabi_uldivmod>
 801b8d8:	4602      	mov	r2, r0
 801b8da:	460b      	mov	r3, r1
 801b8dc:	4613      	mov	r3, r2
 801b8de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b8e2:	e064      	b.n	801b9ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b8e4:	4b92      	ldr	r3, [pc, #584]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b8e6:	685b      	ldr	r3, [r3, #4]
 801b8e8:	099b      	lsrs	r3, r3, #6
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	653b      	str	r3, [r7, #80]	; 0x50
 801b8ee:	657a      	str	r2, [r7, #84]	; 0x54
 801b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8f6:	64bb      	str	r3, [r7, #72]	; 0x48
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b8fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 801b900:	4622      	mov	r2, r4
 801b902:	462b      	mov	r3, r5
 801b904:	f04f 0000 	mov.w	r0, #0
 801b908:	f04f 0100 	mov.w	r1, #0
 801b90c:	0159      	lsls	r1, r3, #5
 801b90e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801b912:	0150      	lsls	r0, r2, #5
 801b914:	4602      	mov	r2, r0
 801b916:	460b      	mov	r3, r1
 801b918:	4621      	mov	r1, r4
 801b91a:	1a51      	subs	r1, r2, r1
 801b91c:	6139      	str	r1, [r7, #16]
 801b91e:	4629      	mov	r1, r5
 801b920:	eb63 0301 	sbc.w	r3, r3, r1
 801b924:	617b      	str	r3, [r7, #20]
 801b926:	f04f 0200 	mov.w	r2, #0
 801b92a:	f04f 0300 	mov.w	r3, #0
 801b92e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801b932:	4659      	mov	r1, fp
 801b934:	018b      	lsls	r3, r1, #6
 801b936:	4651      	mov	r1, sl
 801b938:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801b93c:	4651      	mov	r1, sl
 801b93e:	018a      	lsls	r2, r1, #6
 801b940:	4651      	mov	r1, sl
 801b942:	ebb2 0801 	subs.w	r8, r2, r1
 801b946:	4659      	mov	r1, fp
 801b948:	eb63 0901 	sbc.w	r9, r3, r1
 801b94c:	f04f 0200 	mov.w	r2, #0
 801b950:	f04f 0300 	mov.w	r3, #0
 801b954:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801b958:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801b95c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801b960:	4690      	mov	r8, r2
 801b962:	4699      	mov	r9, r3
 801b964:	4623      	mov	r3, r4
 801b966:	eb18 0303 	adds.w	r3, r8, r3
 801b96a:	60bb      	str	r3, [r7, #8]
 801b96c:	462b      	mov	r3, r5
 801b96e:	eb49 0303 	adc.w	r3, r9, r3
 801b972:	60fb      	str	r3, [r7, #12]
 801b974:	f04f 0200 	mov.w	r2, #0
 801b978:	f04f 0300 	mov.w	r3, #0
 801b97c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801b980:	4629      	mov	r1, r5
 801b982:	028b      	lsls	r3, r1, #10
 801b984:	4621      	mov	r1, r4
 801b986:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801b98a:	4621      	mov	r1, r4
 801b98c:	028a      	lsls	r2, r1, #10
 801b98e:	4610      	mov	r0, r2
 801b990:	4619      	mov	r1, r3
 801b992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b996:	2200      	movs	r2, #0
 801b998:	643b      	str	r3, [r7, #64]	; 0x40
 801b99a:	647a      	str	r2, [r7, #68]	; 0x44
 801b99c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b9a0:	f7f0 fb56 	bl	800c050 <__aeabi_uldivmod>
 801b9a4:	4602      	mov	r2, r0
 801b9a6:	460b      	mov	r3, r1
 801b9a8:	4613      	mov	r3, r2
 801b9aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801b9ae:	4b60      	ldr	r3, [pc, #384]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9b0:	685b      	ldr	r3, [r3, #4]
 801b9b2:	0c1b      	lsrs	r3, r3, #16
 801b9b4:	f003 0303 	and.w	r3, r3, #3
 801b9b8:	3301      	adds	r3, #1
 801b9ba:	005b      	lsls	r3, r3, #1
 801b9bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 801b9c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b9c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801b9d0:	e0a6      	b.n	801bb20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801b9d2:	4b57      	ldr	r3, [pc, #348]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9d4:	685b      	ldr	r3, [r3, #4]
 801b9d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b9da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801b9de:	4b54      	ldr	r3, [pc, #336]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d02a      	beq.n	801ba40 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801b9ea:	4b51      	ldr	r3, [pc, #324]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801b9ec:	685b      	ldr	r3, [r3, #4]
 801b9ee:	099b      	lsrs	r3, r3, #6
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	63bb      	str	r3, [r7, #56]	; 0x38
 801b9f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 801b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801b9fc:	2100      	movs	r1, #0
 801b9fe:	4b4e      	ldr	r3, [pc, #312]	; (801bb38 <HAL_RCC_GetSysClockFreq+0x350>)
 801ba00:	fb03 f201 	mul.w	r2, r3, r1
 801ba04:	2300      	movs	r3, #0
 801ba06:	fb00 f303 	mul.w	r3, r0, r3
 801ba0a:	4413      	add	r3, r2
 801ba0c:	4a4a      	ldr	r2, [pc, #296]	; (801bb38 <HAL_RCC_GetSysClockFreq+0x350>)
 801ba0e:	fba0 1202 	umull	r1, r2, r0, r2
 801ba12:	677a      	str	r2, [r7, #116]	; 0x74
 801ba14:	460a      	mov	r2, r1
 801ba16:	673a      	str	r2, [r7, #112]	; 0x70
 801ba18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ba1a:	4413      	add	r3, r2
 801ba1c:	677b      	str	r3, [r7, #116]	; 0x74
 801ba1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ba22:	2200      	movs	r2, #0
 801ba24:	633b      	str	r3, [r7, #48]	; 0x30
 801ba26:	637a      	str	r2, [r7, #52]	; 0x34
 801ba28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801ba2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801ba30:	f7f0 fb0e 	bl	800c050 <__aeabi_uldivmod>
 801ba34:	4602      	mov	r2, r0
 801ba36:	460b      	mov	r3, r1
 801ba38:	4613      	mov	r3, r2
 801ba3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ba3e:	e05b      	b.n	801baf8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ba40:	4b3b      	ldr	r3, [pc, #236]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	099b      	lsrs	r3, r3, #6
 801ba46:	2200      	movs	r2, #0
 801ba48:	62bb      	str	r3, [r7, #40]	; 0x28
 801ba4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba52:	623b      	str	r3, [r7, #32]
 801ba54:	2300      	movs	r3, #0
 801ba56:	627b      	str	r3, [r7, #36]	; 0x24
 801ba58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801ba5c:	4642      	mov	r2, r8
 801ba5e:	464b      	mov	r3, r9
 801ba60:	f04f 0000 	mov.w	r0, #0
 801ba64:	f04f 0100 	mov.w	r1, #0
 801ba68:	0159      	lsls	r1, r3, #5
 801ba6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ba6e:	0150      	lsls	r0, r2, #5
 801ba70:	4602      	mov	r2, r0
 801ba72:	460b      	mov	r3, r1
 801ba74:	4641      	mov	r1, r8
 801ba76:	ebb2 0a01 	subs.w	sl, r2, r1
 801ba7a:	4649      	mov	r1, r9
 801ba7c:	eb63 0b01 	sbc.w	fp, r3, r1
 801ba80:	f04f 0200 	mov.w	r2, #0
 801ba84:	f04f 0300 	mov.w	r3, #0
 801ba88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801ba8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801ba90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801ba94:	ebb2 040a 	subs.w	r4, r2, sl
 801ba98:	eb63 050b 	sbc.w	r5, r3, fp
 801ba9c:	f04f 0200 	mov.w	r2, #0
 801baa0:	f04f 0300 	mov.w	r3, #0
 801baa4:	00eb      	lsls	r3, r5, #3
 801baa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801baaa:	00e2      	lsls	r2, r4, #3
 801baac:	4614      	mov	r4, r2
 801baae:	461d      	mov	r5, r3
 801bab0:	4643      	mov	r3, r8
 801bab2:	18e3      	adds	r3, r4, r3
 801bab4:	603b      	str	r3, [r7, #0]
 801bab6:	464b      	mov	r3, r9
 801bab8:	eb45 0303 	adc.w	r3, r5, r3
 801babc:	607b      	str	r3, [r7, #4]
 801babe:	f04f 0200 	mov.w	r2, #0
 801bac2:	f04f 0300 	mov.w	r3, #0
 801bac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 801baca:	4629      	mov	r1, r5
 801bacc:	028b      	lsls	r3, r1, #10
 801bace:	4621      	mov	r1, r4
 801bad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801bad4:	4621      	mov	r1, r4
 801bad6:	028a      	lsls	r2, r1, #10
 801bad8:	4610      	mov	r0, r2
 801bada:	4619      	mov	r1, r3
 801badc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bae0:	2200      	movs	r2, #0
 801bae2:	61bb      	str	r3, [r7, #24]
 801bae4:	61fa      	str	r2, [r7, #28]
 801bae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801baea:	f7f0 fab1 	bl	800c050 <__aeabi_uldivmod>
 801baee:	4602      	mov	r2, r0
 801baf0:	460b      	mov	r3, r1
 801baf2:	4613      	mov	r3, r2
 801baf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801baf8:	4b0d      	ldr	r3, [pc, #52]	; (801bb30 <HAL_RCC_GetSysClockFreq+0x348>)
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	0f1b      	lsrs	r3, r3, #28
 801bafe:	f003 0307 	and.w	r3, r3, #7
 801bb02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 801bb06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bb0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801bb16:	e003      	b.n	801bb20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bb18:	4b06      	ldr	r3, [pc, #24]	; (801bb34 <HAL_RCC_GetSysClockFreq+0x34c>)
 801bb1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 801bb1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bb20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3798      	adds	r7, #152	; 0x98
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801bb2e:	bf00      	nop
 801bb30:	40023800 	.word	0x40023800
 801bb34:	00f42400 	.word	0x00f42400
 801bb38:	017d7840 	.word	0x017d7840

0801bb3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b086      	sub	sp, #24
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d101      	bne.n	801bb4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bb4a:	2301      	movs	r3, #1
 801bb4c:	e28d      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f003 0301 	and.w	r3, r3, #1
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	f000 8083 	beq.w	801bc62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb5c:	4b94      	ldr	r3, [pc, #592]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb5e:	689b      	ldr	r3, [r3, #8]
 801bb60:	f003 030c 	and.w	r3, r3, #12
 801bb64:	2b04      	cmp	r3, #4
 801bb66:	d019      	beq.n	801bb9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb68:	4b91      	ldr	r3, [pc, #580]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb6a:	689b      	ldr	r3, [r3, #8]
 801bb6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bb70:	2b08      	cmp	r3, #8
 801bb72:	d106      	bne.n	801bb82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb74:	4b8e      	ldr	r3, [pc, #568]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb76:	685b      	ldr	r3, [r3, #4]
 801bb78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb80:	d00c      	beq.n	801bb9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb82:	4b8b      	ldr	r3, [pc, #556]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bb8a:	2b0c      	cmp	r3, #12
 801bb8c:	d112      	bne.n	801bbb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bb8e:	4b88      	ldr	r3, [pc, #544]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bb9a:	d10b      	bne.n	801bbb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bb9c:	4b84      	ldr	r3, [pc, #528]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d05b      	beq.n	801bc60 <HAL_RCC_OscConfig+0x124>
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	685b      	ldr	r3, [r3, #4]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d157      	bne.n	801bc60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bbb0:	2301      	movs	r3, #1
 801bbb2:	e25a      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	685b      	ldr	r3, [r3, #4]
 801bbb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bbbc:	d106      	bne.n	801bbcc <HAL_RCC_OscConfig+0x90>
 801bbbe:	4b7c      	ldr	r3, [pc, #496]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	4a7b      	ldr	r2, [pc, #492]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbc8:	6013      	str	r3, [r2, #0]
 801bbca:	e01d      	b.n	801bc08 <HAL_RCC_OscConfig+0xcc>
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	685b      	ldr	r3, [r3, #4]
 801bbd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bbd4:	d10c      	bne.n	801bbf0 <HAL_RCC_OscConfig+0xb4>
 801bbd6:	4b76      	ldr	r3, [pc, #472]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	4a75      	ldr	r2, [pc, #468]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bbe0:	6013      	str	r3, [r2, #0]
 801bbe2:	4b73      	ldr	r3, [pc, #460]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	4a72      	ldr	r2, [pc, #456]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbec:	6013      	str	r3, [r2, #0]
 801bbee:	e00b      	b.n	801bc08 <HAL_RCC_OscConfig+0xcc>
 801bbf0:	4b6f      	ldr	r3, [pc, #444]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	4a6e      	ldr	r2, [pc, #440]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bbfa:	6013      	str	r3, [r2, #0]
 801bbfc:	4b6c      	ldr	r3, [pc, #432]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	4a6b      	ldr	r2, [pc, #428]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bc06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	685b      	ldr	r3, [r3, #4]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d013      	beq.n	801bc38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc10:	f7fc fa84 	bl	801811c <HAL_GetTick>
 801bc14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc16:	e008      	b.n	801bc2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc18:	f7fc fa80 	bl	801811c <HAL_GetTick>
 801bc1c:	4602      	mov	r2, r0
 801bc1e:	693b      	ldr	r3, [r7, #16]
 801bc20:	1ad3      	subs	r3, r2, r3
 801bc22:	2b64      	cmp	r3, #100	; 0x64
 801bc24:	d901      	bls.n	801bc2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bc26:	2303      	movs	r3, #3
 801bc28:	e21f      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bc2a:	4b61      	ldr	r3, [pc, #388]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d0f0      	beq.n	801bc18 <HAL_RCC_OscConfig+0xdc>
 801bc36:	e014      	b.n	801bc62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bc38:	f7fc fa70 	bl	801811c <HAL_GetTick>
 801bc3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc3e:	e008      	b.n	801bc52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bc40:	f7fc fa6c 	bl	801811c <HAL_GetTick>
 801bc44:	4602      	mov	r2, r0
 801bc46:	693b      	ldr	r3, [r7, #16]
 801bc48:	1ad3      	subs	r3, r2, r3
 801bc4a:	2b64      	cmp	r3, #100	; 0x64
 801bc4c:	d901      	bls.n	801bc52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801bc4e:	2303      	movs	r3, #3
 801bc50:	e20b      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bc52:	4b57      	ldr	r3, [pc, #348]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d1f0      	bne.n	801bc40 <HAL_RCC_OscConfig+0x104>
 801bc5e:	e000      	b.n	801bc62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bc60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	f003 0302 	and.w	r3, r3, #2
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d06f      	beq.n	801bd4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc6e:	4b50      	ldr	r3, [pc, #320]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc70:	689b      	ldr	r3, [r3, #8]
 801bc72:	f003 030c 	and.w	r3, r3, #12
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d017      	beq.n	801bcaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc7a:	4b4d      	ldr	r3, [pc, #308]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc7c:	689b      	ldr	r3, [r3, #8]
 801bc7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801bc82:	2b08      	cmp	r3, #8
 801bc84:	d105      	bne.n	801bc92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc86:	4b4a      	ldr	r3, [pc, #296]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d00b      	beq.n	801bcaa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc92:	4b47      	ldr	r3, [pc, #284]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bc94:	689b      	ldr	r3, [r3, #8]
 801bc96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801bc9a:	2b0c      	cmp	r3, #12
 801bc9c:	d11c      	bne.n	801bcd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801bc9e:	4b44      	ldr	r3, [pc, #272]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bca0:	685b      	ldr	r3, [r3, #4]
 801bca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d116      	bne.n	801bcd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bcaa:	4b41      	ldr	r3, [pc, #260]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	f003 0302 	and.w	r3, r3, #2
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d005      	beq.n	801bcc2 <HAL_RCC_OscConfig+0x186>
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	68db      	ldr	r3, [r3, #12]
 801bcba:	2b01      	cmp	r3, #1
 801bcbc:	d001      	beq.n	801bcc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	e1d3      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bcc2:	4b3b      	ldr	r3, [pc, #236]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	691b      	ldr	r3, [r3, #16]
 801bcce:	00db      	lsls	r3, r3, #3
 801bcd0:	4937      	ldr	r1, [pc, #220]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bcd2:	4313      	orrs	r3, r2
 801bcd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801bcd6:	e03a      	b.n	801bd4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	68db      	ldr	r3, [r3, #12]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d020      	beq.n	801bd22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bce0:	4b34      	ldr	r3, [pc, #208]	; (801bdb4 <HAL_RCC_OscConfig+0x278>)
 801bce2:	2201      	movs	r2, #1
 801bce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bce6:	f7fc fa19 	bl	801811c <HAL_GetTick>
 801bcea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bcec:	e008      	b.n	801bd00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bcee:	f7fc fa15 	bl	801811c <HAL_GetTick>
 801bcf2:	4602      	mov	r2, r0
 801bcf4:	693b      	ldr	r3, [r7, #16]
 801bcf6:	1ad3      	subs	r3, r2, r3
 801bcf8:	2b02      	cmp	r3, #2
 801bcfa:	d901      	bls.n	801bd00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801bcfc:	2303      	movs	r3, #3
 801bcfe:	e1b4      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bd00:	4b2b      	ldr	r3, [pc, #172]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	f003 0302 	and.w	r3, r3, #2
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d0f0      	beq.n	801bcee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bd0c:	4b28      	ldr	r3, [pc, #160]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	691b      	ldr	r3, [r3, #16]
 801bd18:	00db      	lsls	r3, r3, #3
 801bd1a:	4925      	ldr	r1, [pc, #148]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bd1c:	4313      	orrs	r3, r2
 801bd1e:	600b      	str	r3, [r1, #0]
 801bd20:	e015      	b.n	801bd4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bd22:	4b24      	ldr	r3, [pc, #144]	; (801bdb4 <HAL_RCC_OscConfig+0x278>)
 801bd24:	2200      	movs	r2, #0
 801bd26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd28:	f7fc f9f8 	bl	801811c <HAL_GetTick>
 801bd2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd2e:	e008      	b.n	801bd42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801bd30:	f7fc f9f4 	bl	801811c <HAL_GetTick>
 801bd34:	4602      	mov	r2, r0
 801bd36:	693b      	ldr	r3, [r7, #16]
 801bd38:	1ad3      	subs	r3, r2, r3
 801bd3a:	2b02      	cmp	r3, #2
 801bd3c:	d901      	bls.n	801bd42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801bd3e:	2303      	movs	r3, #3
 801bd40:	e193      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801bd42:	4b1b      	ldr	r3, [pc, #108]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	f003 0302 	and.w	r3, r3, #2
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d1f0      	bne.n	801bd30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	f003 0308 	and.w	r3, r3, #8
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d036      	beq.n	801bdc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	695b      	ldr	r3, [r3, #20]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d016      	beq.n	801bd90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bd62:	4b15      	ldr	r3, [pc, #84]	; (801bdb8 <HAL_RCC_OscConfig+0x27c>)
 801bd64:	2201      	movs	r2, #1
 801bd66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd68:	f7fc f9d8 	bl	801811c <HAL_GetTick>
 801bd6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd6e:	e008      	b.n	801bd82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd70:	f7fc f9d4 	bl	801811c <HAL_GetTick>
 801bd74:	4602      	mov	r2, r0
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	1ad3      	subs	r3, r2, r3
 801bd7a:	2b02      	cmp	r3, #2
 801bd7c:	d901      	bls.n	801bd82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bd7e:	2303      	movs	r3, #3
 801bd80:	e173      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bd82:	4b0b      	ldr	r3, [pc, #44]	; (801bdb0 <HAL_RCC_OscConfig+0x274>)
 801bd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd86:	f003 0302 	and.w	r3, r3, #2
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d0f0      	beq.n	801bd70 <HAL_RCC_OscConfig+0x234>
 801bd8e:	e01b      	b.n	801bdc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bd90:	4b09      	ldr	r3, [pc, #36]	; (801bdb8 <HAL_RCC_OscConfig+0x27c>)
 801bd92:	2200      	movs	r2, #0
 801bd94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bd96:	f7fc f9c1 	bl	801811c <HAL_GetTick>
 801bd9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bd9c:	e00e      	b.n	801bdbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bd9e:	f7fc f9bd 	bl	801811c <HAL_GetTick>
 801bda2:	4602      	mov	r2, r0
 801bda4:	693b      	ldr	r3, [r7, #16]
 801bda6:	1ad3      	subs	r3, r2, r3
 801bda8:	2b02      	cmp	r3, #2
 801bdaa:	d907      	bls.n	801bdbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bdac:	2303      	movs	r3, #3
 801bdae:	e15c      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
 801bdb0:	40023800 	.word	0x40023800
 801bdb4:	42470000 	.word	0x42470000
 801bdb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bdbc:	4b8a      	ldr	r3, [pc, #552]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdc0:	f003 0302 	and.w	r3, r3, #2
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d1ea      	bne.n	801bd9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	f003 0304 	and.w	r3, r3, #4
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	f000 8097 	beq.w	801bf04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bdda:	4b83      	ldr	r3, [pc, #524]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d10f      	bne.n	801be06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bde6:	2300      	movs	r3, #0
 801bde8:	60bb      	str	r3, [r7, #8]
 801bdea:	4b7f      	ldr	r3, [pc, #508]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdee:	4a7e      	ldr	r2, [pc, #504]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bdf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bdf4:	6413      	str	r3, [r2, #64]	; 0x40
 801bdf6:	4b7c      	ldr	r3, [pc, #496]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bdfe:	60bb      	str	r3, [r7, #8]
 801be00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801be02:	2301      	movs	r3, #1
 801be04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be06:	4b79      	ldr	r3, [pc, #484]	; (801bfec <HAL_RCC_OscConfig+0x4b0>)
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d118      	bne.n	801be44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801be12:	4b76      	ldr	r3, [pc, #472]	; (801bfec <HAL_RCC_OscConfig+0x4b0>)
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	4a75      	ldr	r2, [pc, #468]	; (801bfec <HAL_RCC_OscConfig+0x4b0>)
 801be18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801be1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801be1e:	f7fc f97d 	bl	801811c <HAL_GetTick>
 801be22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be24:	e008      	b.n	801be38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801be26:	f7fc f979 	bl	801811c <HAL_GetTick>
 801be2a:	4602      	mov	r2, r0
 801be2c:	693b      	ldr	r3, [r7, #16]
 801be2e:	1ad3      	subs	r3, r2, r3
 801be30:	2b02      	cmp	r3, #2
 801be32:	d901      	bls.n	801be38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801be34:	2303      	movs	r3, #3
 801be36:	e118      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801be38:	4b6c      	ldr	r3, [pc, #432]	; (801bfec <HAL_RCC_OscConfig+0x4b0>)
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be40:	2b00      	cmp	r3, #0
 801be42:	d0f0      	beq.n	801be26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	689b      	ldr	r3, [r3, #8]
 801be48:	2b01      	cmp	r3, #1
 801be4a:	d106      	bne.n	801be5a <HAL_RCC_OscConfig+0x31e>
 801be4c:	4b66      	ldr	r3, [pc, #408]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be50:	4a65      	ldr	r2, [pc, #404]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be52:	f043 0301 	orr.w	r3, r3, #1
 801be56:	6713      	str	r3, [r2, #112]	; 0x70
 801be58:	e01c      	b.n	801be94 <HAL_RCC_OscConfig+0x358>
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	689b      	ldr	r3, [r3, #8]
 801be5e:	2b05      	cmp	r3, #5
 801be60:	d10c      	bne.n	801be7c <HAL_RCC_OscConfig+0x340>
 801be62:	4b61      	ldr	r3, [pc, #388]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be66:	4a60      	ldr	r2, [pc, #384]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be68:	f043 0304 	orr.w	r3, r3, #4
 801be6c:	6713      	str	r3, [r2, #112]	; 0x70
 801be6e:	4b5e      	ldr	r3, [pc, #376]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be72:	4a5d      	ldr	r2, [pc, #372]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be74:	f043 0301 	orr.w	r3, r3, #1
 801be78:	6713      	str	r3, [r2, #112]	; 0x70
 801be7a:	e00b      	b.n	801be94 <HAL_RCC_OscConfig+0x358>
 801be7c:	4b5a      	ldr	r3, [pc, #360]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be80:	4a59      	ldr	r2, [pc, #356]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be82:	f023 0301 	bic.w	r3, r3, #1
 801be86:	6713      	str	r3, [r2, #112]	; 0x70
 801be88:	4b57      	ldr	r3, [pc, #348]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be8c:	4a56      	ldr	r2, [pc, #344]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801be8e:	f023 0304 	bic.w	r3, r3, #4
 801be92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	689b      	ldr	r3, [r3, #8]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d015      	beq.n	801bec8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801be9c:	f7fc f93e 	bl	801811c <HAL_GetTick>
 801bea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801bea2:	e00a      	b.n	801beba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bea4:	f7fc f93a 	bl	801811c <HAL_GetTick>
 801bea8:	4602      	mov	r2, r0
 801beaa:	693b      	ldr	r3, [r7, #16]
 801beac:	1ad3      	subs	r3, r2, r3
 801beae:	f241 3288 	movw	r2, #5000	; 0x1388
 801beb2:	4293      	cmp	r3, r2
 801beb4:	d901      	bls.n	801beba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801beb6:	2303      	movs	r3, #3
 801beb8:	e0d7      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801beba:	4b4b      	ldr	r3, [pc, #300]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bebe:	f003 0302 	and.w	r3, r3, #2
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d0ee      	beq.n	801bea4 <HAL_RCC_OscConfig+0x368>
 801bec6:	e014      	b.n	801bef2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bec8:	f7fc f928 	bl	801811c <HAL_GetTick>
 801becc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bece:	e00a      	b.n	801bee6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801bed0:	f7fc f924 	bl	801811c <HAL_GetTick>
 801bed4:	4602      	mov	r2, r0
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	f241 3288 	movw	r2, #5000	; 0x1388
 801bede:	4293      	cmp	r3, r2
 801bee0:	d901      	bls.n	801bee6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801bee2:	2303      	movs	r3, #3
 801bee4:	e0c1      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801bee6:	4b40      	ldr	r3, [pc, #256]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801beea:	f003 0302 	and.w	r3, r3, #2
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d1ee      	bne.n	801bed0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801bef2:	7dfb      	ldrb	r3, [r7, #23]
 801bef4:	2b01      	cmp	r3, #1
 801bef6:	d105      	bne.n	801bf04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801bef8:	4b3b      	ldr	r3, [pc, #236]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801befc:	4a3a      	ldr	r2, [pc, #232]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801befe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bf02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	699b      	ldr	r3, [r3, #24]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	f000 80ad 	beq.w	801c068 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801bf0e:	4b36      	ldr	r3, [pc, #216]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bf10:	689b      	ldr	r3, [r3, #8]
 801bf12:	f003 030c 	and.w	r3, r3, #12
 801bf16:	2b08      	cmp	r3, #8
 801bf18:	d060      	beq.n	801bfdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	699b      	ldr	r3, [r3, #24]
 801bf1e:	2b02      	cmp	r3, #2
 801bf20:	d145      	bne.n	801bfae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bf22:	4b33      	ldr	r3, [pc, #204]	; (801bff0 <HAL_RCC_OscConfig+0x4b4>)
 801bf24:	2200      	movs	r2, #0
 801bf26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf28:	f7fc f8f8 	bl	801811c <HAL_GetTick>
 801bf2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf2e:	e008      	b.n	801bf42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf30:	f7fc f8f4 	bl	801811c <HAL_GetTick>
 801bf34:	4602      	mov	r2, r0
 801bf36:	693b      	ldr	r3, [r7, #16]
 801bf38:	1ad3      	subs	r3, r2, r3
 801bf3a:	2b02      	cmp	r3, #2
 801bf3c:	d901      	bls.n	801bf42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801bf3e:	2303      	movs	r3, #3
 801bf40:	e093      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bf42:	4b29      	ldr	r3, [pc, #164]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d1f0      	bne.n	801bf30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	69da      	ldr	r2, [r3, #28]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6a1b      	ldr	r3, [r3, #32]
 801bf56:	431a      	orrs	r2, r3
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf5c:	019b      	lsls	r3, r3, #6
 801bf5e:	431a      	orrs	r2, r3
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf64:	085b      	lsrs	r3, r3, #1
 801bf66:	3b01      	subs	r3, #1
 801bf68:	041b      	lsls	r3, r3, #16
 801bf6a:	431a      	orrs	r2, r3
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf70:	061b      	lsls	r3, r3, #24
 801bf72:	431a      	orrs	r2, r3
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf78:	071b      	lsls	r3, r3, #28
 801bf7a:	491b      	ldr	r1, [pc, #108]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bf7c:	4313      	orrs	r3, r2
 801bf7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bf80:	4b1b      	ldr	r3, [pc, #108]	; (801bff0 <HAL_RCC_OscConfig+0x4b4>)
 801bf82:	2201      	movs	r2, #1
 801bf84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf86:	f7fc f8c9 	bl	801811c <HAL_GetTick>
 801bf8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bf8c:	e008      	b.n	801bfa0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bf8e:	f7fc f8c5 	bl	801811c <HAL_GetTick>
 801bf92:	4602      	mov	r2, r0
 801bf94:	693b      	ldr	r3, [r7, #16]
 801bf96:	1ad3      	subs	r3, r2, r3
 801bf98:	2b02      	cmp	r3, #2
 801bf9a:	d901      	bls.n	801bfa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801bf9c:	2303      	movs	r3, #3
 801bf9e:	e064      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801bfa0:	4b11      	ldr	r3, [pc, #68]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d0f0      	beq.n	801bf8e <HAL_RCC_OscConfig+0x452>
 801bfac:	e05c      	b.n	801c068 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bfae:	4b10      	ldr	r3, [pc, #64]	; (801bff0 <HAL_RCC_OscConfig+0x4b4>)
 801bfb0:	2200      	movs	r2, #0
 801bfb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfb4:	f7fc f8b2 	bl	801811c <HAL_GetTick>
 801bfb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfba:	e008      	b.n	801bfce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bfbc:	f7fc f8ae 	bl	801811c <HAL_GetTick>
 801bfc0:	4602      	mov	r2, r0
 801bfc2:	693b      	ldr	r3, [r7, #16]
 801bfc4:	1ad3      	subs	r3, r2, r3
 801bfc6:	2b02      	cmp	r3, #2
 801bfc8:	d901      	bls.n	801bfce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801bfca:	2303      	movs	r3, #3
 801bfcc:	e04d      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801bfce:	4b06      	ldr	r3, [pc, #24]	; (801bfe8 <HAL_RCC_OscConfig+0x4ac>)
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d1f0      	bne.n	801bfbc <HAL_RCC_OscConfig+0x480>
 801bfda:	e045      	b.n	801c068 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	699b      	ldr	r3, [r3, #24]
 801bfe0:	2b01      	cmp	r3, #1
 801bfe2:	d107      	bne.n	801bff4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801bfe4:	2301      	movs	r3, #1
 801bfe6:	e040      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
 801bfe8:	40023800 	.word	0x40023800
 801bfec:	40007000 	.word	0x40007000
 801bff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801bff4:	4b1f      	ldr	r3, [pc, #124]	; (801c074 <HAL_RCC_OscConfig+0x538>)
 801bff6:	685b      	ldr	r3, [r3, #4]
 801bff8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	699b      	ldr	r3, [r3, #24]
 801bffe:	2b01      	cmp	r3, #1
 801c000:	d030      	beq.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c00c:	429a      	cmp	r2, r3
 801c00e:	d129      	bne.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d122      	bne.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c01e:	68fa      	ldr	r2, [r7, #12]
 801c020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c024:	4013      	ands	r3, r2
 801c026:	687a      	ldr	r2, [r7, #4]
 801c028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c02a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c02c:	4293      	cmp	r3, r2
 801c02e:	d119      	bne.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c03a:	085b      	lsrs	r3, r3, #1
 801c03c:	3b01      	subs	r3, #1
 801c03e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c040:	429a      	cmp	r2, r3
 801c042:	d10f      	bne.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c04e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c050:	429a      	cmp	r2, r3
 801c052:	d107      	bne.n	801c064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c05e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c060:	429a      	cmp	r2, r3
 801c062:	d001      	beq.n	801c068 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c064:	2301      	movs	r3, #1
 801c066:	e000      	b.n	801c06a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c068:	2300      	movs	r3, #0
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	3718      	adds	r7, #24
 801c06e:	46bd      	mov	sp, r7
 801c070:	bd80      	pop	{r7, pc}
 801c072:	bf00      	nop
 801c074:	40023800 	.word	0x40023800

0801c078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	b082      	sub	sp, #8
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d101      	bne.n	801c08a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c086:	2301      	movs	r3, #1
 801c088:	e07b      	b.n	801c182 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d108      	bne.n	801c0a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c09a:	d009      	beq.n	801c0b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2200      	movs	r2, #0
 801c0a0:	61da      	str	r2, [r3, #28]
 801c0a2:	e005      	b.n	801c0b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c0bc:	b2db      	uxtb	r3, r3
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d106      	bne.n	801c0d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c0ca:	6878      	ldr	r0, [r7, #4]
 801c0cc:	f7fb fb9a 	bl	8017804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2202      	movs	r2, #2
 801c0d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	681a      	ldr	r2, [r3, #0]
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c0e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	685b      	ldr	r3, [r3, #4]
 801c0ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	689b      	ldr	r3, [r3, #8]
 801c0f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c0f8:	431a      	orrs	r2, r3
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	68db      	ldr	r3, [r3, #12]
 801c0fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c102:	431a      	orrs	r2, r3
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	691b      	ldr	r3, [r3, #16]
 801c108:	f003 0302 	and.w	r3, r3, #2
 801c10c:	431a      	orrs	r2, r3
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	695b      	ldr	r3, [r3, #20]
 801c112:	f003 0301 	and.w	r3, r3, #1
 801c116:	431a      	orrs	r2, r3
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	699b      	ldr	r3, [r3, #24]
 801c11c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c120:	431a      	orrs	r2, r3
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	69db      	ldr	r3, [r3, #28]
 801c126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c12a:	431a      	orrs	r2, r3
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	6a1b      	ldr	r3, [r3, #32]
 801c130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c134:	ea42 0103 	orr.w	r1, r2, r3
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c13c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	430a      	orrs	r2, r1
 801c146:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	699b      	ldr	r3, [r3, #24]
 801c14c:	0c1b      	lsrs	r3, r3, #16
 801c14e:	f003 0104 	and.w	r1, r3, #4
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c156:	f003 0210 	and.w	r2, r3, #16
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	430a      	orrs	r2, r1
 801c160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	69da      	ldr	r2, [r3, #28]
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	2200      	movs	r2, #0
 801c176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	2201      	movs	r2, #1
 801c17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c180:	2300      	movs	r3, #0
}
 801c182:	4618      	mov	r0, r3
 801c184:	3708      	adds	r7, #8
 801c186:	46bd      	mov	sp, r7
 801c188:	bd80      	pop	{r7, pc}

0801c18a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c18a:	b580      	push	{r7, lr}
 801c18c:	b088      	sub	sp, #32
 801c18e:	af00      	add	r7, sp, #0
 801c190:	60f8      	str	r0, [r7, #12]
 801c192:	60b9      	str	r1, [r7, #8]
 801c194:	603b      	str	r3, [r7, #0]
 801c196:	4613      	mov	r3, r2
 801c198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c19a:	2300      	movs	r3, #0
 801c19c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c1a4:	2b01      	cmp	r3, #1
 801c1a6:	d101      	bne.n	801c1ac <HAL_SPI_Transmit+0x22>
 801c1a8:	2302      	movs	r3, #2
 801c1aa:	e126      	b.n	801c3fa <HAL_SPI_Transmit+0x270>
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	2201      	movs	r2, #1
 801c1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c1b4:	f7fb ffb2 	bl	801811c <HAL_GetTick>
 801c1b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c1ba:	88fb      	ldrh	r3, [r7, #6]
 801c1bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c1c4:	b2db      	uxtb	r3, r3
 801c1c6:	2b01      	cmp	r3, #1
 801c1c8:	d002      	beq.n	801c1d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c1ca:	2302      	movs	r3, #2
 801c1cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1ce:	e10b      	b.n	801c3e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c1d0:	68bb      	ldr	r3, [r7, #8]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d002      	beq.n	801c1dc <HAL_SPI_Transmit+0x52>
 801c1d6:	88fb      	ldrh	r3, [r7, #6]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d102      	bne.n	801c1e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c1dc:	2301      	movs	r3, #1
 801c1de:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c1e0:	e102      	b.n	801c3e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	2203      	movs	r2, #3
 801c1e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	2200      	movs	r2, #0
 801c1ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	68ba      	ldr	r2, [r7, #8]
 801c1f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	88fa      	ldrh	r2, [r7, #6]
 801c1fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	88fa      	ldrh	r2, [r7, #6]
 801c200:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	2200      	movs	r2, #0
 801c206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	2200      	movs	r2, #0
 801c20c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	2200      	movs	r2, #0
 801c212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	2200      	movs	r2, #0
 801c218:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2200      	movs	r2, #0
 801c21e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	689b      	ldr	r3, [r3, #8]
 801c224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c228:	d10f      	bne.n	801c24a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	681a      	ldr	r2, [r3, #0]
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	68fb      	ldr	r3, [r7, #12]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c248:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c254:	2b40      	cmp	r3, #64	; 0x40
 801c256:	d007      	beq.n	801c268 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	681a      	ldr	r2, [r3, #0]
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	68db      	ldr	r3, [r3, #12]
 801c26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c270:	d14b      	bne.n	801c30a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	685b      	ldr	r3, [r3, #4]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d002      	beq.n	801c280 <HAL_SPI_Transmit+0xf6>
 801c27a:	8afb      	ldrh	r3, [r7, #22]
 801c27c:	2b01      	cmp	r3, #1
 801c27e:	d13e      	bne.n	801c2fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c284:	881a      	ldrh	r2, [r3, #0]
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c290:	1c9a      	adds	r2, r3, #2
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c29a:	b29b      	uxth	r3, r3
 801c29c:	3b01      	subs	r3, #1
 801c29e:	b29a      	uxth	r2, r3
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c2a4:	e02b      	b.n	801c2fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	689b      	ldr	r3, [r3, #8]
 801c2ac:	f003 0302 	and.w	r3, r3, #2
 801c2b0:	2b02      	cmp	r3, #2
 801c2b2:	d112      	bne.n	801c2da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2b8:	881a      	ldrh	r2, [r3, #0]
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2c4:	1c9a      	adds	r2, r3, #2
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c2ce:	b29b      	uxth	r3, r3
 801c2d0:	3b01      	subs	r3, #1
 801c2d2:	b29a      	uxth	r2, r3
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	86da      	strh	r2, [r3, #54]	; 0x36
 801c2d8:	e011      	b.n	801c2fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c2da:	f7fb ff1f 	bl	801811c <HAL_GetTick>
 801c2de:	4602      	mov	r2, r0
 801c2e0:	69bb      	ldr	r3, [r7, #24]
 801c2e2:	1ad3      	subs	r3, r2, r3
 801c2e4:	683a      	ldr	r2, [r7, #0]
 801c2e6:	429a      	cmp	r2, r3
 801c2e8:	d803      	bhi.n	801c2f2 <HAL_SPI_Transmit+0x168>
 801c2ea:	683b      	ldr	r3, [r7, #0]
 801c2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2f0:	d102      	bne.n	801c2f8 <HAL_SPI_Transmit+0x16e>
 801c2f2:	683b      	ldr	r3, [r7, #0]
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d102      	bne.n	801c2fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c2f8:	2303      	movs	r3, #3
 801c2fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c2fc:	e074      	b.n	801c3e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c302:	b29b      	uxth	r3, r3
 801c304:	2b00      	cmp	r3, #0
 801c306:	d1ce      	bne.n	801c2a6 <HAL_SPI_Transmit+0x11c>
 801c308:	e04c      	b.n	801c3a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	685b      	ldr	r3, [r3, #4]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d002      	beq.n	801c318 <HAL_SPI_Transmit+0x18e>
 801c312:	8afb      	ldrh	r3, [r7, #22]
 801c314:	2b01      	cmp	r3, #1
 801c316:	d140      	bne.n	801c39a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	330c      	adds	r3, #12
 801c322:	7812      	ldrb	r2, [r2, #0]
 801c324:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c32a:	1c5a      	adds	r2, r3, #1
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c334:	b29b      	uxth	r3, r3
 801c336:	3b01      	subs	r3, #1
 801c338:	b29a      	uxth	r2, r3
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c33e:	e02c      	b.n	801c39a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	689b      	ldr	r3, [r3, #8]
 801c346:	f003 0302 	and.w	r3, r3, #2
 801c34a:	2b02      	cmp	r3, #2
 801c34c:	d113      	bne.n	801c376 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	330c      	adds	r3, #12
 801c358:	7812      	ldrb	r2, [r2, #0]
 801c35a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c360:	1c5a      	adds	r2, r3, #1
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	3b01      	subs	r3, #1
 801c36e:	b29a      	uxth	r2, r3
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	86da      	strh	r2, [r3, #54]	; 0x36
 801c374:	e011      	b.n	801c39a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c376:	f7fb fed1 	bl	801811c <HAL_GetTick>
 801c37a:	4602      	mov	r2, r0
 801c37c:	69bb      	ldr	r3, [r7, #24]
 801c37e:	1ad3      	subs	r3, r2, r3
 801c380:	683a      	ldr	r2, [r7, #0]
 801c382:	429a      	cmp	r2, r3
 801c384:	d803      	bhi.n	801c38e <HAL_SPI_Transmit+0x204>
 801c386:	683b      	ldr	r3, [r7, #0]
 801c388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c38c:	d102      	bne.n	801c394 <HAL_SPI_Transmit+0x20a>
 801c38e:	683b      	ldr	r3, [r7, #0]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d102      	bne.n	801c39a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c394:	2303      	movs	r3, #3
 801c396:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c398:	e026      	b.n	801c3e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c39e:	b29b      	uxth	r3, r3
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d1cd      	bne.n	801c340 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c3a4:	69ba      	ldr	r2, [r7, #24]
 801c3a6:	6839      	ldr	r1, [r7, #0]
 801c3a8:	68f8      	ldr	r0, [r7, #12]
 801c3aa:	f000 fce9 	bl	801cd80 <SPI_EndRxTxTransaction>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d002      	beq.n	801c3ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	2220      	movs	r2, #32
 801c3b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	689b      	ldr	r3, [r3, #8]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d10a      	bne.n	801c3d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	613b      	str	r3, [r7, #16]
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	68db      	ldr	r3, [r3, #12]
 801c3cc:	613b      	str	r3, [r7, #16]
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	689b      	ldr	r3, [r3, #8]
 801c3d4:	613b      	str	r3, [r7, #16]
 801c3d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d002      	beq.n	801c3e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c3e0:	2301      	movs	r3, #1
 801c3e2:	77fb      	strb	r3, [r7, #31]
 801c3e4:	e000      	b.n	801c3e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c3e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	2201      	movs	r2, #1
 801c3ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c3f8:	7ffb      	ldrb	r3, [r7, #31]
}
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	3720      	adds	r7, #32
 801c3fe:	46bd      	mov	sp, r7
 801c400:	bd80      	pop	{r7, pc}

0801c402 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c402:	b580      	push	{r7, lr}
 801c404:	b088      	sub	sp, #32
 801c406:	af02      	add	r7, sp, #8
 801c408:	60f8      	str	r0, [r7, #12]
 801c40a:	60b9      	str	r1, [r7, #8]
 801c40c:	603b      	str	r3, [r7, #0]
 801c40e:	4613      	mov	r3, r2
 801c410:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c412:	2300      	movs	r3, #0
 801c414:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	685b      	ldr	r3, [r3, #4]
 801c41a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c41e:	d112      	bne.n	801c446 <HAL_SPI_Receive+0x44>
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	689b      	ldr	r3, [r3, #8]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d10e      	bne.n	801c446 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	2204      	movs	r2, #4
 801c42c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c430:	88fa      	ldrh	r2, [r7, #6]
 801c432:	683b      	ldr	r3, [r7, #0]
 801c434:	9300      	str	r3, [sp, #0]
 801c436:	4613      	mov	r3, r2
 801c438:	68ba      	ldr	r2, [r7, #8]
 801c43a:	68b9      	ldr	r1, [r7, #8]
 801c43c:	68f8      	ldr	r0, [r7, #12]
 801c43e:	f000 f8f1 	bl	801c624 <HAL_SPI_TransmitReceive>
 801c442:	4603      	mov	r3, r0
 801c444:	e0ea      	b.n	801c61c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c44c:	2b01      	cmp	r3, #1
 801c44e:	d101      	bne.n	801c454 <HAL_SPI_Receive+0x52>
 801c450:	2302      	movs	r3, #2
 801c452:	e0e3      	b.n	801c61c <HAL_SPI_Receive+0x21a>
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	2201      	movs	r2, #1
 801c458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c45c:	f7fb fe5e 	bl	801811c <HAL_GetTick>
 801c460:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c468:	b2db      	uxtb	r3, r3
 801c46a:	2b01      	cmp	r3, #1
 801c46c:	d002      	beq.n	801c474 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c46e:	2302      	movs	r3, #2
 801c470:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c472:	e0ca      	b.n	801c60a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d002      	beq.n	801c480 <HAL_SPI_Receive+0x7e>
 801c47a:	88fb      	ldrh	r3, [r7, #6]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d102      	bne.n	801c486 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c480:	2301      	movs	r3, #1
 801c482:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c484:	e0c1      	b.n	801c60a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	2204      	movs	r2, #4
 801c48a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	2200      	movs	r2, #0
 801c492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	68ba      	ldr	r2, [r7, #8]
 801c498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	88fa      	ldrh	r2, [r7, #6]
 801c49e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	88fa      	ldrh	r2, [r7, #6]
 801c4a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	689b      	ldr	r3, [r3, #8]
 801c4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c4cc:	d10f      	bne.n	801c4ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	681a      	ldr	r2, [r3, #0]
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c4dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	681a      	ldr	r2, [r3, #0]
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c4ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c4f8:	2b40      	cmp	r3, #64	; 0x40
 801c4fa:	d007      	beq.n	801c50c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	681a      	ldr	r2, [r3, #0]
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c50a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	68db      	ldr	r3, [r3, #12]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d162      	bne.n	801c5da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c514:	e02e      	b.n	801c574 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	689b      	ldr	r3, [r3, #8]
 801c51c:	f003 0301 	and.w	r3, r3, #1
 801c520:	2b01      	cmp	r3, #1
 801c522:	d115      	bne.n	801c550 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	f103 020c 	add.w	r2, r3, #12
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c530:	7812      	ldrb	r2, [r2, #0]
 801c532:	b2d2      	uxtb	r2, r2
 801c534:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c53a:	1c5a      	adds	r2, r3, #1
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c544:	b29b      	uxth	r3, r3
 801c546:	3b01      	subs	r3, #1
 801c548:	b29a      	uxth	r2, r3
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c54e:	e011      	b.n	801c574 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c550:	f7fb fde4 	bl	801811c <HAL_GetTick>
 801c554:	4602      	mov	r2, r0
 801c556:	693b      	ldr	r3, [r7, #16]
 801c558:	1ad3      	subs	r3, r2, r3
 801c55a:	683a      	ldr	r2, [r7, #0]
 801c55c:	429a      	cmp	r2, r3
 801c55e:	d803      	bhi.n	801c568 <HAL_SPI_Receive+0x166>
 801c560:	683b      	ldr	r3, [r7, #0]
 801c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c566:	d102      	bne.n	801c56e <HAL_SPI_Receive+0x16c>
 801c568:	683b      	ldr	r3, [r7, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d102      	bne.n	801c574 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c56e:	2303      	movs	r3, #3
 801c570:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c572:	e04a      	b.n	801c60a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c578:	b29b      	uxth	r3, r3
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d1cb      	bne.n	801c516 <HAL_SPI_Receive+0x114>
 801c57e:	e031      	b.n	801c5e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	689b      	ldr	r3, [r3, #8]
 801c586:	f003 0301 	and.w	r3, r3, #1
 801c58a:	2b01      	cmp	r3, #1
 801c58c:	d113      	bne.n	801c5b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	68da      	ldr	r2, [r3, #12]
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c598:	b292      	uxth	r2, r2
 801c59a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5a0:	1c9a      	adds	r2, r3, #2
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5aa:	b29b      	uxth	r3, r3
 801c5ac:	3b01      	subs	r3, #1
 801c5ae:	b29a      	uxth	r2, r3
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5b4:	e011      	b.n	801c5da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c5b6:	f7fb fdb1 	bl	801811c <HAL_GetTick>
 801c5ba:	4602      	mov	r2, r0
 801c5bc:	693b      	ldr	r3, [r7, #16]
 801c5be:	1ad3      	subs	r3, r2, r3
 801c5c0:	683a      	ldr	r2, [r7, #0]
 801c5c2:	429a      	cmp	r2, r3
 801c5c4:	d803      	bhi.n	801c5ce <HAL_SPI_Receive+0x1cc>
 801c5c6:	683b      	ldr	r3, [r7, #0]
 801c5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5cc:	d102      	bne.n	801c5d4 <HAL_SPI_Receive+0x1d2>
 801c5ce:	683b      	ldr	r3, [r7, #0]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d102      	bne.n	801c5da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c5d4:	2303      	movs	r3, #3
 801c5d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c5d8:	e017      	b.n	801c60a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d1cd      	bne.n	801c580 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c5e4:	693a      	ldr	r2, [r7, #16]
 801c5e6:	6839      	ldr	r1, [r7, #0]
 801c5e8:	68f8      	ldr	r0, [r7, #12]
 801c5ea:	f000 fb63 	bl	801ccb4 <SPI_EndRxTransaction>
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d002      	beq.n	801c5fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	2220      	movs	r2, #32
 801c5f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d002      	beq.n	801c608 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c602:	2301      	movs	r3, #1
 801c604:	75fb      	strb	r3, [r7, #23]
 801c606:	e000      	b.n	801c60a <HAL_SPI_Receive+0x208>
  }

error :
 801c608:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	2201      	movs	r2, #1
 801c60e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	2200      	movs	r2, #0
 801c616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c61a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c61c:	4618      	mov	r0, r3
 801c61e:	3718      	adds	r7, #24
 801c620:	46bd      	mov	sp, r7
 801c622:	bd80      	pop	{r7, pc}

0801c624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b08c      	sub	sp, #48	; 0x30
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	60b9      	str	r1, [r7, #8]
 801c62e:	607a      	str	r2, [r7, #4]
 801c630:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c632:	2301      	movs	r3, #1
 801c634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c636:	2300      	movs	r3, #0
 801c638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c642:	2b01      	cmp	r3, #1
 801c644:	d101      	bne.n	801c64a <HAL_SPI_TransmitReceive+0x26>
 801c646:	2302      	movs	r3, #2
 801c648:	e18a      	b.n	801c960 <HAL_SPI_TransmitReceive+0x33c>
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	2201      	movs	r2, #1
 801c64e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c652:	f7fb fd63 	bl	801811c <HAL_GetTick>
 801c656:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c65e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	685b      	ldr	r3, [r3, #4]
 801c666:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c668:	887b      	ldrh	r3, [r7, #2]
 801c66a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c66c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c670:	2b01      	cmp	r3, #1
 801c672:	d00f      	beq.n	801c694 <HAL_SPI_TransmitReceive+0x70>
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c67a:	d107      	bne.n	801c68c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	689b      	ldr	r3, [r3, #8]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d103      	bne.n	801c68c <HAL_SPI_TransmitReceive+0x68>
 801c684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c688:	2b04      	cmp	r3, #4
 801c68a:	d003      	beq.n	801c694 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c68c:	2302      	movs	r3, #2
 801c68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c692:	e15b      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d005      	beq.n	801c6a6 <HAL_SPI_TransmitReceive+0x82>
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d002      	beq.n	801c6a6 <HAL_SPI_TransmitReceive+0x82>
 801c6a0:	887b      	ldrh	r3, [r7, #2]
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d103      	bne.n	801c6ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c6a6:	2301      	movs	r3, #1
 801c6a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c6ac:	e14e      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c6b4:	b2db      	uxtb	r3, r3
 801c6b6:	2b04      	cmp	r3, #4
 801c6b8:	d003      	beq.n	801c6c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	2205      	movs	r2, #5
 801c6be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	2200      	movs	r2, #0
 801c6c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	687a      	ldr	r2, [r7, #4]
 801c6cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	887a      	ldrh	r2, [r7, #2]
 801c6d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	887a      	ldrh	r2, [r7, #2]
 801c6d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	68ba      	ldr	r2, [r7, #8]
 801c6de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	887a      	ldrh	r2, [r7, #2]
 801c6e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	887a      	ldrh	r2, [r7, #2]
 801c6ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c702:	2b40      	cmp	r3, #64	; 0x40
 801c704:	d007      	beq.n	801c716 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	681a      	ldr	r2, [r3, #0]
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	68db      	ldr	r3, [r3, #12]
 801c71a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c71e:	d178      	bne.n	801c812 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	685b      	ldr	r3, [r3, #4]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d002      	beq.n	801c72e <HAL_SPI_TransmitReceive+0x10a>
 801c728:	8b7b      	ldrh	r3, [r7, #26]
 801c72a:	2b01      	cmp	r3, #1
 801c72c:	d166      	bne.n	801c7fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c732:	881a      	ldrh	r2, [r3, #0]
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c73e:	1c9a      	adds	r2, r3, #2
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c748:	b29b      	uxth	r3, r3
 801c74a:	3b01      	subs	r3, #1
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c752:	e053      	b.n	801c7fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	689b      	ldr	r3, [r3, #8]
 801c75a:	f003 0302 	and.w	r3, r3, #2
 801c75e:	2b02      	cmp	r3, #2
 801c760:	d11b      	bne.n	801c79a <HAL_SPI_TransmitReceive+0x176>
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c766:	b29b      	uxth	r3, r3
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d016      	beq.n	801c79a <HAL_SPI_TransmitReceive+0x176>
 801c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76e:	2b01      	cmp	r3, #1
 801c770:	d113      	bne.n	801c79a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c776:	881a      	ldrh	r2, [r3, #0]
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c782:	1c9a      	adds	r2, r3, #2
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c78c:	b29b      	uxth	r3, r3
 801c78e:	3b01      	subs	r3, #1
 801c790:	b29a      	uxth	r2, r3
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c796:	2300      	movs	r3, #0
 801c798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	689b      	ldr	r3, [r3, #8]
 801c7a0:	f003 0301 	and.w	r3, r3, #1
 801c7a4:	2b01      	cmp	r3, #1
 801c7a6:	d119      	bne.n	801c7dc <HAL_SPI_TransmitReceive+0x1b8>
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7ac:	b29b      	uxth	r3, r3
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d014      	beq.n	801c7dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	68da      	ldr	r2, [r3, #12]
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7bc:	b292      	uxth	r2, r2
 801c7be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7c4:	1c9a      	adds	r2, r3, #2
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7ce:	b29b      	uxth	r3, r3
 801c7d0:	3b01      	subs	r3, #1
 801c7d2:	b29a      	uxth	r2, r3
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c7d8:	2301      	movs	r3, #1
 801c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c7dc:	f7fb fc9e 	bl	801811c <HAL_GetTick>
 801c7e0:	4602      	mov	r2, r0
 801c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e4:	1ad3      	subs	r3, r2, r3
 801c7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7e8:	429a      	cmp	r2, r3
 801c7ea:	d807      	bhi.n	801c7fc <HAL_SPI_TransmitReceive+0x1d8>
 801c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7f2:	d003      	beq.n	801c7fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801c7f4:	2303      	movs	r3, #3
 801c7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c7fa:	e0a7      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c800:	b29b      	uxth	r3, r3
 801c802:	2b00      	cmp	r3, #0
 801c804:	d1a6      	bne.n	801c754 <HAL_SPI_TransmitReceive+0x130>
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c80a:	b29b      	uxth	r3, r3
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d1a1      	bne.n	801c754 <HAL_SPI_TransmitReceive+0x130>
 801c810:	e07c      	b.n	801c90c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	685b      	ldr	r3, [r3, #4]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d002      	beq.n	801c820 <HAL_SPI_TransmitReceive+0x1fc>
 801c81a:	8b7b      	ldrh	r3, [r7, #26]
 801c81c:	2b01      	cmp	r3, #1
 801c81e:	d16b      	bne.n	801c8f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c824:	68fb      	ldr	r3, [r7, #12]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	330c      	adds	r3, #12
 801c82a:	7812      	ldrb	r2, [r2, #0]
 801c82c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c832:	1c5a      	adds	r2, r3, #1
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	3b01      	subs	r3, #1
 801c840:	b29a      	uxth	r2, r3
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c846:	e057      	b.n	801c8f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	689b      	ldr	r3, [r3, #8]
 801c84e:	f003 0302 	and.w	r3, r3, #2
 801c852:	2b02      	cmp	r3, #2
 801c854:	d11c      	bne.n	801c890 <HAL_SPI_TransmitReceive+0x26c>
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c85a:	b29b      	uxth	r3, r3
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d017      	beq.n	801c890 <HAL_SPI_TransmitReceive+0x26c>
 801c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c862:	2b01      	cmp	r3, #1
 801c864:	d114      	bne.n	801c890 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	330c      	adds	r3, #12
 801c870:	7812      	ldrb	r2, [r2, #0]
 801c872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c878:	1c5a      	adds	r2, r3, #1
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c882:	b29b      	uxth	r3, r3
 801c884:	3b01      	subs	r3, #1
 801c886:	b29a      	uxth	r2, r3
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c88c:	2300      	movs	r3, #0
 801c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	689b      	ldr	r3, [r3, #8]
 801c896:	f003 0301 	and.w	r3, r3, #1
 801c89a:	2b01      	cmp	r3, #1
 801c89c:	d119      	bne.n	801c8d2 <HAL_SPI_TransmitReceive+0x2ae>
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8a2:	b29b      	uxth	r3, r3
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d014      	beq.n	801c8d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	68da      	ldr	r2, [r3, #12]
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8b2:	b2d2      	uxtb	r2, r2
 801c8b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8ba:	1c5a      	adds	r2, r3, #1
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c8c4:	b29b      	uxth	r3, r3
 801c8c6:	3b01      	subs	r3, #1
 801c8c8:	b29a      	uxth	r2, r3
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c8ce:	2301      	movs	r3, #1
 801c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c8d2:	f7fb fc23 	bl	801811c <HAL_GetTick>
 801c8d6:	4602      	mov	r2, r0
 801c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8da:	1ad3      	subs	r3, r2, r3
 801c8dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c8de:	429a      	cmp	r2, r3
 801c8e0:	d803      	bhi.n	801c8ea <HAL_SPI_TransmitReceive+0x2c6>
 801c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8e8:	d102      	bne.n	801c8f0 <HAL_SPI_TransmitReceive+0x2cc>
 801c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d103      	bne.n	801c8f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801c8f0:	2303      	movs	r3, #3
 801c8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801c8f6:	e029      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c8fc:	b29b      	uxth	r3, r3
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d1a2      	bne.n	801c848 <HAL_SPI_TransmitReceive+0x224>
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c906:	b29b      	uxth	r3, r3
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d19d      	bne.n	801c848 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c90e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c910:	68f8      	ldr	r0, [r7, #12]
 801c912:	f000 fa35 	bl	801cd80 <SPI_EndRxTxTransaction>
 801c916:	4603      	mov	r3, r0
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d006      	beq.n	801c92a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801c91c:	2301      	movs	r3, #1
 801c91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	2220      	movs	r2, #32
 801c926:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801c928:	e010      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c92a:	68fb      	ldr	r3, [r7, #12]
 801c92c:	689b      	ldr	r3, [r3, #8]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d10b      	bne.n	801c94a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c932:	2300      	movs	r3, #0
 801c934:	617b      	str	r3, [r7, #20]
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	68db      	ldr	r3, [r3, #12]
 801c93c:	617b      	str	r3, [r7, #20]
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	689b      	ldr	r3, [r3, #8]
 801c944:	617b      	str	r3, [r7, #20]
 801c946:	697b      	ldr	r3, [r7, #20]
 801c948:	e000      	b.n	801c94c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801c94a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	2201      	movs	r2, #1
 801c950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	2200      	movs	r2, #0
 801c958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c95c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801c960:	4618      	mov	r0, r3
 801c962:	3730      	adds	r7, #48	; 0x30
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}

0801c968 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	b088      	sub	sp, #32
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	685b      	ldr	r3, [r3, #4]
 801c976:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	689b      	ldr	r3, [r3, #8]
 801c97e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c980:	69bb      	ldr	r3, [r7, #24]
 801c982:	099b      	lsrs	r3, r3, #6
 801c984:	f003 0301 	and.w	r3, r3, #1
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d10f      	bne.n	801c9ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c98c:	69bb      	ldr	r3, [r7, #24]
 801c98e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801c992:	2b00      	cmp	r3, #0
 801c994:	d00a      	beq.n	801c9ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801c996:	69fb      	ldr	r3, [r7, #28]
 801c998:	099b      	lsrs	r3, r3, #6
 801c99a:	f003 0301 	and.w	r3, r3, #1
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d004      	beq.n	801c9ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9a6:	6878      	ldr	r0, [r7, #4]
 801c9a8:	4798      	blx	r3
    return;
 801c9aa:	e0d7      	b.n	801cb5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801c9ac:	69bb      	ldr	r3, [r7, #24]
 801c9ae:	085b      	lsrs	r3, r3, #1
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d00a      	beq.n	801c9ce <HAL_SPI_IRQHandler+0x66>
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	09db      	lsrs	r3, r3, #7
 801c9bc:	f003 0301 	and.w	r3, r3, #1
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d004      	beq.n	801c9ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	4798      	blx	r3
    return;
 801c9cc:	e0c6      	b.n	801cb5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801c9ce:	69bb      	ldr	r3, [r7, #24]
 801c9d0:	095b      	lsrs	r3, r3, #5
 801c9d2:	f003 0301 	and.w	r3, r3, #1
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d10c      	bne.n	801c9f4 <HAL_SPI_IRQHandler+0x8c>
 801c9da:	69bb      	ldr	r3, [r7, #24]
 801c9dc:	099b      	lsrs	r3, r3, #6
 801c9de:	f003 0301 	and.w	r3, r3, #1
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d106      	bne.n	801c9f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801c9e6:	69bb      	ldr	r3, [r7, #24]
 801c9e8:	0a1b      	lsrs	r3, r3, #8
 801c9ea:	f003 0301 	and.w	r3, r3, #1
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	f000 80b4 	beq.w	801cb5c <HAL_SPI_IRQHandler+0x1f4>
 801c9f4:	69fb      	ldr	r3, [r7, #28]
 801c9f6:	095b      	lsrs	r3, r3, #5
 801c9f8:	f003 0301 	and.w	r3, r3, #1
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f000 80ad 	beq.w	801cb5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801ca02:	69bb      	ldr	r3, [r7, #24]
 801ca04:	099b      	lsrs	r3, r3, #6
 801ca06:	f003 0301 	and.w	r3, r3, #1
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d023      	beq.n	801ca56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ca14:	b2db      	uxtb	r3, r3
 801ca16:	2b03      	cmp	r3, #3
 801ca18:	d011      	beq.n	801ca3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca1e:	f043 0204 	orr.w	r2, r3, #4
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca26:	2300      	movs	r3, #0
 801ca28:	617b      	str	r3, [r7, #20]
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	68db      	ldr	r3, [r3, #12]
 801ca30:	617b      	str	r3, [r7, #20]
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	689b      	ldr	r3, [r3, #8]
 801ca38:	617b      	str	r3, [r7, #20]
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	e00b      	b.n	801ca56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801ca3e:	2300      	movs	r3, #0
 801ca40:	613b      	str	r3, [r7, #16]
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	68db      	ldr	r3, [r3, #12]
 801ca48:	613b      	str	r3, [r7, #16]
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	689b      	ldr	r3, [r3, #8]
 801ca50:	613b      	str	r3, [r7, #16]
 801ca52:	693b      	ldr	r3, [r7, #16]
        return;
 801ca54:	e082      	b.n	801cb5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801ca56:	69bb      	ldr	r3, [r7, #24]
 801ca58:	095b      	lsrs	r3, r3, #5
 801ca5a:	f003 0301 	and.w	r3, r3, #1
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d014      	beq.n	801ca8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca66:	f043 0201 	orr.w	r2, r3, #1
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801ca6e:	2300      	movs	r3, #0
 801ca70:	60fb      	str	r3, [r7, #12]
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	689b      	ldr	r3, [r3, #8]
 801ca78:	60fb      	str	r3, [r7, #12]
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ca88:	601a      	str	r2, [r3, #0]
 801ca8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801ca8c:	69bb      	ldr	r3, [r7, #24]
 801ca8e:	0a1b      	lsrs	r3, r3, #8
 801ca90:	f003 0301 	and.w	r3, r3, #1
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d00c      	beq.n	801cab2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca9c:	f043 0208 	orr.w	r2, r3, #8
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801caa4:	2300      	movs	r3, #0
 801caa6:	60bb      	str	r3, [r7, #8]
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	689b      	ldr	r3, [r3, #8]
 801caae:	60bb      	str	r3, [r7, #8]
 801cab0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d04f      	beq.n	801cb5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	685a      	ldr	r2, [r3, #4]
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cac8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	2201      	movs	r2, #1
 801cace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801cad2:	69fb      	ldr	r3, [r7, #28]
 801cad4:	f003 0302 	and.w	r3, r3, #2
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d104      	bne.n	801cae6 <HAL_SPI_IRQHandler+0x17e>
 801cadc:	69fb      	ldr	r3, [r7, #28]
 801cade:	f003 0301 	and.w	r3, r3, #1
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d034      	beq.n	801cb50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	685a      	ldr	r2, [r3, #4]
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	f022 0203 	bic.w	r2, r2, #3
 801caf4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d011      	beq.n	801cb22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb02:	4a18      	ldr	r2, [pc, #96]	; (801cb64 <HAL_SPI_IRQHandler+0x1fc>)
 801cb04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7fb fffe 	bl	8018b0c <HAL_DMA_Abort_IT>
 801cb10:	4603      	mov	r3, r0
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d005      	beq.n	801cb22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d016      	beq.n	801cb58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb2e:	4a0d      	ldr	r2, [pc, #52]	; (801cb64 <HAL_SPI_IRQHandler+0x1fc>)
 801cb30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb36:	4618      	mov	r0, r3
 801cb38:	f7fb ffe8 	bl	8018b0c <HAL_DMA_Abort_IT>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d00a      	beq.n	801cb58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cb4e:	e003      	b.n	801cb58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cb50:	6878      	ldr	r0, [r7, #4]
 801cb52:	f000 f809 	bl	801cb68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cb56:	e000      	b.n	801cb5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cb58:	bf00      	nop
    return;
 801cb5a:	bf00      	nop
  }
}
 801cb5c:	3720      	adds	r7, #32
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bd80      	pop	{r7, pc}
 801cb62:	bf00      	nop
 801cb64:	0801cb7d 	.word	0x0801cb7d

0801cb68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cb68:	b480      	push	{r7}
 801cb6a:	b083      	sub	sp, #12
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cb70:	bf00      	nop
 801cb72:	370c      	adds	r7, #12
 801cb74:	46bd      	mov	sp, r7
 801cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb7a:	4770      	bx	lr

0801cb7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b084      	sub	sp, #16
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	2200      	movs	r2, #0
 801cb8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	2200      	movs	r2, #0
 801cb94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cb96:	68f8      	ldr	r0, [r7, #12]
 801cb98:	f7ff ffe6 	bl	801cb68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cb9c:	bf00      	nop
 801cb9e:	3710      	adds	r7, #16
 801cba0:	46bd      	mov	sp, r7
 801cba2:	bd80      	pop	{r7, pc}

0801cba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	b088      	sub	sp, #32
 801cba8:	af00      	add	r7, sp, #0
 801cbaa:	60f8      	str	r0, [r7, #12]
 801cbac:	60b9      	str	r1, [r7, #8]
 801cbae:	603b      	str	r3, [r7, #0]
 801cbb0:	4613      	mov	r3, r2
 801cbb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cbb4:	f7fb fab2 	bl	801811c <HAL_GetTick>
 801cbb8:	4602      	mov	r2, r0
 801cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbbc:	1a9b      	subs	r3, r3, r2
 801cbbe:	683a      	ldr	r2, [r7, #0]
 801cbc0:	4413      	add	r3, r2
 801cbc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cbc4:	f7fb faaa 	bl	801811c <HAL_GetTick>
 801cbc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cbca:	4b39      	ldr	r3, [pc, #228]	; (801ccb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	015b      	lsls	r3, r3, #5
 801cbd0:	0d1b      	lsrs	r3, r3, #20
 801cbd2:	69fa      	ldr	r2, [r7, #28]
 801cbd4:	fb02 f303 	mul.w	r3, r2, r3
 801cbd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cbda:	e054      	b.n	801cc86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbe2:	d050      	beq.n	801cc86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801cbe4:	f7fb fa9a 	bl	801811c <HAL_GetTick>
 801cbe8:	4602      	mov	r2, r0
 801cbea:	69bb      	ldr	r3, [r7, #24]
 801cbec:	1ad3      	subs	r3, r2, r3
 801cbee:	69fa      	ldr	r2, [r7, #28]
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	d902      	bls.n	801cbfa <SPI_WaitFlagStateUntilTimeout+0x56>
 801cbf4:	69fb      	ldr	r3, [r7, #28]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d13d      	bne.n	801cc76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	685a      	ldr	r2, [r3, #4]
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801cc08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	685b      	ldr	r3, [r3, #4]
 801cc0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cc12:	d111      	bne.n	801cc38 <SPI_WaitFlagStateUntilTimeout+0x94>
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	689b      	ldr	r3, [r3, #8]
 801cc18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cc1c:	d004      	beq.n	801cc28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	689b      	ldr	r3, [r3, #8]
 801cc22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cc26:	d107      	bne.n	801cc38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	681a      	ldr	r2, [r3, #0]
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cc40:	d10f      	bne.n	801cc62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	681a      	ldr	r2, [r3, #0]
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801cc50:	601a      	str	r2, [r3, #0]
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	681a      	ldr	r2, [r3, #0]
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801cc60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	2201      	movs	r2, #1
 801cc66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801cc72:	2303      	movs	r3, #3
 801cc74:	e017      	b.n	801cca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801cc76:	697b      	ldr	r3, [r7, #20]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d101      	bne.n	801cc80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cc7c:	2300      	movs	r3, #0
 801cc7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cc80:	697b      	ldr	r3, [r7, #20]
 801cc82:	3b01      	subs	r3, #1
 801cc84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	689a      	ldr	r2, [r3, #8]
 801cc8c:	68bb      	ldr	r3, [r7, #8]
 801cc8e:	4013      	ands	r3, r2
 801cc90:	68ba      	ldr	r2, [r7, #8]
 801cc92:	429a      	cmp	r2, r3
 801cc94:	bf0c      	ite	eq
 801cc96:	2301      	moveq	r3, #1
 801cc98:	2300      	movne	r3, #0
 801cc9a:	b2db      	uxtb	r3, r3
 801cc9c:	461a      	mov	r2, r3
 801cc9e:	79fb      	ldrb	r3, [r7, #7]
 801cca0:	429a      	cmp	r2, r3
 801cca2:	d19b      	bne.n	801cbdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cca4:	2300      	movs	r3, #0
}
 801cca6:	4618      	mov	r0, r3
 801cca8:	3720      	adds	r7, #32
 801ccaa:	46bd      	mov	sp, r7
 801ccac:	bd80      	pop	{r7, pc}
 801ccae:	bf00      	nop
 801ccb0:	20000564 	.word	0x20000564

0801ccb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b086      	sub	sp, #24
 801ccb8:	af02      	add	r7, sp, #8
 801ccba:	60f8      	str	r0, [r7, #12]
 801ccbc:	60b9      	str	r1, [r7, #8]
 801ccbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	685b      	ldr	r3, [r3, #4]
 801ccc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccc8:	d111      	bne.n	801ccee <SPI_EndRxTransaction+0x3a>
 801ccca:	68fb      	ldr	r3, [r7, #12]
 801cccc:	689b      	ldr	r3, [r3, #8]
 801ccce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ccd2:	d004      	beq.n	801ccde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	689b      	ldr	r3, [r3, #8]
 801ccd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ccdc:	d107      	bne.n	801ccee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	681a      	ldr	r2, [r3, #0]
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	681b      	ldr	r3, [r3, #0]
 801cce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ccec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	685b      	ldr	r3, [r3, #4]
 801ccf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ccf6:	d12a      	bne.n	801cd4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	689b      	ldr	r3, [r3, #8]
 801ccfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd00:	d012      	beq.n	801cd28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	9300      	str	r3, [sp, #0]
 801cd06:	68bb      	ldr	r3, [r7, #8]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	2180      	movs	r1, #128	; 0x80
 801cd0c:	68f8      	ldr	r0, [r7, #12]
 801cd0e:	f7ff ff49 	bl	801cba4 <SPI_WaitFlagStateUntilTimeout>
 801cd12:	4603      	mov	r3, r0
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d02d      	beq.n	801cd74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd1c:	f043 0220 	orr.w	r2, r3, #32
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd24:	2303      	movs	r3, #3
 801cd26:	e026      	b.n	801cd76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	9300      	str	r3, [sp, #0]
 801cd2c:	68bb      	ldr	r3, [r7, #8]
 801cd2e:	2200      	movs	r2, #0
 801cd30:	2101      	movs	r1, #1
 801cd32:	68f8      	ldr	r0, [r7, #12]
 801cd34:	f7ff ff36 	bl	801cba4 <SPI_WaitFlagStateUntilTimeout>
 801cd38:	4603      	mov	r3, r0
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d01a      	beq.n	801cd74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd42:	f043 0220 	orr.w	r2, r3, #32
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cd4a:	2303      	movs	r3, #3
 801cd4c:	e013      	b.n	801cd76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	9300      	str	r3, [sp, #0]
 801cd52:	68bb      	ldr	r3, [r7, #8]
 801cd54:	2200      	movs	r2, #0
 801cd56:	2101      	movs	r1, #1
 801cd58:	68f8      	ldr	r0, [r7, #12]
 801cd5a:	f7ff ff23 	bl	801cba4 <SPI_WaitFlagStateUntilTimeout>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d007      	beq.n	801cd74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cd64:	68fb      	ldr	r3, [r7, #12]
 801cd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd68:	f043 0220 	orr.w	r2, r3, #32
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cd70:	2303      	movs	r3, #3
 801cd72:	e000      	b.n	801cd76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cd74:	2300      	movs	r3, #0
}
 801cd76:	4618      	mov	r0, r3
 801cd78:	3710      	adds	r7, #16
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	bd80      	pop	{r7, pc}
	...

0801cd80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b088      	sub	sp, #32
 801cd84:	af02      	add	r7, sp, #8
 801cd86:	60f8      	str	r0, [r7, #12]
 801cd88:	60b9      	str	r1, [r7, #8]
 801cd8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cd8c:	4b1b      	ldr	r3, [pc, #108]	; (801cdfc <SPI_EndRxTxTransaction+0x7c>)
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	4a1b      	ldr	r2, [pc, #108]	; (801ce00 <SPI_EndRxTxTransaction+0x80>)
 801cd92:	fba2 2303 	umull	r2, r3, r2, r3
 801cd96:	0d5b      	lsrs	r3, r3, #21
 801cd98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd9c:	fb02 f303 	mul.w	r3, r2, r3
 801cda0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	685b      	ldr	r3, [r3, #4]
 801cda6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cdaa:	d112      	bne.n	801cdd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	9300      	str	r3, [sp, #0]
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	2180      	movs	r1, #128	; 0x80
 801cdb6:	68f8      	ldr	r0, [r7, #12]
 801cdb8:	f7ff fef4 	bl	801cba4 <SPI_WaitFlagStateUntilTimeout>
 801cdbc:	4603      	mov	r3, r0
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d016      	beq.n	801cdf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cdc2:	68fb      	ldr	r3, [r7, #12]
 801cdc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdc6:	f043 0220 	orr.w	r2, r3, #32
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cdce:	2303      	movs	r3, #3
 801cdd0:	e00f      	b.n	801cdf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cdd2:	697b      	ldr	r3, [r7, #20]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d00a      	beq.n	801cdee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801cdd8:	697b      	ldr	r3, [r7, #20]
 801cdda:	3b01      	subs	r3, #1
 801cddc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	689b      	ldr	r3, [r3, #8]
 801cde4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cde8:	2b80      	cmp	r3, #128	; 0x80
 801cdea:	d0f2      	beq.n	801cdd2 <SPI_EndRxTxTransaction+0x52>
 801cdec:	e000      	b.n	801cdf0 <SPI_EndRxTxTransaction+0x70>
        break;
 801cdee:	bf00      	nop
  }

  return HAL_OK;
 801cdf0:	2300      	movs	r3, #0
}
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	3718      	adds	r7, #24
 801cdf6:	46bd      	mov	sp, r7
 801cdf8:	bd80      	pop	{r7, pc}
 801cdfa:	bf00      	nop
 801cdfc:	20000564 	.word	0x20000564
 801ce00:	165e9f81 	.word	0x165e9f81

0801ce04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b082      	sub	sp, #8
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d101      	bne.n	801ce16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ce12:	2301      	movs	r3, #1
 801ce14:	e041      	b.n	801ce9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ce1c:	b2db      	uxtb	r3, r3
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d106      	bne.n	801ce30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2200      	movs	r2, #0
 801ce26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	f7fa fd76 	bl	801791c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2202      	movs	r2, #2
 801ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	681a      	ldr	r2, [r3, #0]
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	3304      	adds	r3, #4
 801ce40:	4619      	mov	r1, r3
 801ce42:	4610      	mov	r0, r2
 801ce44:	f000 faf2 	bl	801d42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2201      	movs	r2, #1
 801ce4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	2201      	movs	r2, #1
 801ce54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2201      	movs	r2, #1
 801ce64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	2201      	movs	r2, #1
 801ce6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	2201      	movs	r2, #1
 801ce74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	2201      	movs	r2, #1
 801ce84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	2201      	movs	r2, #1
 801ce8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2201      	movs	r2, #1
 801ce94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ce98:	2300      	movs	r3, #0
}
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	3708      	adds	r7, #8
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	bd80      	pop	{r7, pc}
	...

0801cea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cea4:	b480      	push	{r7}
 801cea6:	b085      	sub	sp, #20
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ceb2:	b2db      	uxtb	r3, r3
 801ceb4:	2b01      	cmp	r3, #1
 801ceb6:	d001      	beq.n	801cebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ceb8:	2301      	movs	r3, #1
 801ceba:	e04e      	b.n	801cf5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2202      	movs	r2, #2
 801cec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	68da      	ldr	r2, [r3, #12]
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f042 0201 	orr.w	r2, r2, #1
 801ced2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	4a23      	ldr	r2, [pc, #140]	; (801cf68 <HAL_TIM_Base_Start_IT+0xc4>)
 801ceda:	4293      	cmp	r3, r2
 801cedc:	d022      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cee6:	d01d      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	4a1f      	ldr	r2, [pc, #124]	; (801cf6c <HAL_TIM_Base_Start_IT+0xc8>)
 801ceee:	4293      	cmp	r3, r2
 801cef0:	d018      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	4a1e      	ldr	r2, [pc, #120]	; (801cf70 <HAL_TIM_Base_Start_IT+0xcc>)
 801cef8:	4293      	cmp	r3, r2
 801cefa:	d013      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	4a1c      	ldr	r2, [pc, #112]	; (801cf74 <HAL_TIM_Base_Start_IT+0xd0>)
 801cf02:	4293      	cmp	r3, r2
 801cf04:	d00e      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	4a1b      	ldr	r2, [pc, #108]	; (801cf78 <HAL_TIM_Base_Start_IT+0xd4>)
 801cf0c:	4293      	cmp	r3, r2
 801cf0e:	d009      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	4a19      	ldr	r2, [pc, #100]	; (801cf7c <HAL_TIM_Base_Start_IT+0xd8>)
 801cf16:	4293      	cmp	r3, r2
 801cf18:	d004      	beq.n	801cf24 <HAL_TIM_Base_Start_IT+0x80>
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4a18      	ldr	r2, [pc, #96]	; (801cf80 <HAL_TIM_Base_Start_IT+0xdc>)
 801cf20:	4293      	cmp	r3, r2
 801cf22:	d111      	bne.n	801cf48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	689b      	ldr	r3, [r3, #8]
 801cf2a:	f003 0307 	and.w	r3, r3, #7
 801cf2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	2b06      	cmp	r3, #6
 801cf34:	d010      	beq.n	801cf58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	681a      	ldr	r2, [r3, #0]
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	f042 0201 	orr.w	r2, r2, #1
 801cf44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf46:	e007      	b.n	801cf58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	681a      	ldr	r2, [r3, #0]
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	f042 0201 	orr.w	r2, r2, #1
 801cf56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf58:	2300      	movs	r3, #0
}
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	3714      	adds	r7, #20
 801cf5e:	46bd      	mov	sp, r7
 801cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf64:	4770      	bx	lr
 801cf66:	bf00      	nop
 801cf68:	40010000 	.word	0x40010000
 801cf6c:	40000400 	.word	0x40000400
 801cf70:	40000800 	.word	0x40000800
 801cf74:	40000c00 	.word	0x40000c00
 801cf78:	40010400 	.word	0x40010400
 801cf7c:	40014000 	.word	0x40014000
 801cf80:	40001800 	.word	0x40001800

0801cf84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b082      	sub	sp, #8
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	691b      	ldr	r3, [r3, #16]
 801cf92:	f003 0302 	and.w	r3, r3, #2
 801cf96:	2b02      	cmp	r3, #2
 801cf98:	d122      	bne.n	801cfe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	68db      	ldr	r3, [r3, #12]
 801cfa0:	f003 0302 	and.w	r3, r3, #2
 801cfa4:	2b02      	cmp	r3, #2
 801cfa6:	d11b      	bne.n	801cfe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	f06f 0202 	mvn.w	r2, #2
 801cfb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	2201      	movs	r2, #1
 801cfb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	699b      	ldr	r3, [r3, #24]
 801cfbe:	f003 0303 	and.w	r3, r3, #3
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d003      	beq.n	801cfce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801cfc6:	6878      	ldr	r0, [r7, #4]
 801cfc8:	f000 fa11 	bl	801d3ee <HAL_TIM_IC_CaptureCallback>
 801cfcc:	e005      	b.n	801cfda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801cfce:	6878      	ldr	r0, [r7, #4]
 801cfd0:	f000 fa03 	bl	801d3da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f000 fa14 	bl	801d402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	2200      	movs	r2, #0
 801cfde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	691b      	ldr	r3, [r3, #16]
 801cfe6:	f003 0304 	and.w	r3, r3, #4
 801cfea:	2b04      	cmp	r3, #4
 801cfec:	d122      	bne.n	801d034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	68db      	ldr	r3, [r3, #12]
 801cff4:	f003 0304 	and.w	r3, r3, #4
 801cff8:	2b04      	cmp	r3, #4
 801cffa:	d11b      	bne.n	801d034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	f06f 0204 	mvn.w	r2, #4
 801d004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	2202      	movs	r2, #2
 801d00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	699b      	ldr	r3, [r3, #24]
 801d012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d016:	2b00      	cmp	r3, #0
 801d018:	d003      	beq.n	801d022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d01a:	6878      	ldr	r0, [r7, #4]
 801d01c:	f000 f9e7 	bl	801d3ee <HAL_TIM_IC_CaptureCallback>
 801d020:	e005      	b.n	801d02e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d022:	6878      	ldr	r0, [r7, #4]
 801d024:	f000 f9d9 	bl	801d3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d028:	6878      	ldr	r0, [r7, #4]
 801d02a:	f000 f9ea 	bl	801d402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	2200      	movs	r2, #0
 801d032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	691b      	ldr	r3, [r3, #16]
 801d03a:	f003 0308 	and.w	r3, r3, #8
 801d03e:	2b08      	cmp	r3, #8
 801d040:	d122      	bne.n	801d088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	68db      	ldr	r3, [r3, #12]
 801d048:	f003 0308 	and.w	r3, r3, #8
 801d04c:	2b08      	cmp	r3, #8
 801d04e:	d11b      	bne.n	801d088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	f06f 0208 	mvn.w	r2, #8
 801d058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	2204      	movs	r2, #4
 801d05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	69db      	ldr	r3, [r3, #28]
 801d066:	f003 0303 	and.w	r3, r3, #3
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d003      	beq.n	801d076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d06e:	6878      	ldr	r0, [r7, #4]
 801d070:	f000 f9bd 	bl	801d3ee <HAL_TIM_IC_CaptureCallback>
 801d074:	e005      	b.n	801d082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d076:	6878      	ldr	r0, [r7, #4]
 801d078:	f000 f9af 	bl	801d3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d07c:	6878      	ldr	r0, [r7, #4]
 801d07e:	f000 f9c0 	bl	801d402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	2200      	movs	r2, #0
 801d086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	691b      	ldr	r3, [r3, #16]
 801d08e:	f003 0310 	and.w	r3, r3, #16
 801d092:	2b10      	cmp	r3, #16
 801d094:	d122      	bne.n	801d0dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	68db      	ldr	r3, [r3, #12]
 801d09c:	f003 0310 	and.w	r3, r3, #16
 801d0a0:	2b10      	cmp	r3, #16
 801d0a2:	d11b      	bne.n	801d0dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	f06f 0210 	mvn.w	r2, #16
 801d0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	2208      	movs	r2, #8
 801d0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	69db      	ldr	r3, [r3, #28]
 801d0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d003      	beq.n	801d0ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	f000 f993 	bl	801d3ee <HAL_TIM_IC_CaptureCallback>
 801d0c8:	e005      	b.n	801d0d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0ca:	6878      	ldr	r0, [r7, #4]
 801d0cc:	f000 f985 	bl	801d3da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0d0:	6878      	ldr	r0, [r7, #4]
 801d0d2:	f000 f996 	bl	801d402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	2200      	movs	r2, #0
 801d0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	691b      	ldr	r3, [r3, #16]
 801d0e2:	f003 0301 	and.w	r3, r3, #1
 801d0e6:	2b01      	cmp	r3, #1
 801d0e8:	d10e      	bne.n	801d108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	681b      	ldr	r3, [r3, #0]
 801d0ee:	68db      	ldr	r3, [r3, #12]
 801d0f0:	f003 0301 	and.w	r3, r3, #1
 801d0f4:	2b01      	cmp	r3, #1
 801d0f6:	d107      	bne.n	801d108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	f06f 0201 	mvn.w	r2, #1
 801d100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d102:	6878      	ldr	r0, [r7, #4]
 801d104:	f7fa fa16 	bl	8017534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	691b      	ldr	r3, [r3, #16]
 801d10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d112:	2b80      	cmp	r3, #128	; 0x80
 801d114:	d10e      	bne.n	801d134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	68db      	ldr	r3, [r3, #12]
 801d11c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d120:	2b80      	cmp	r3, #128	; 0x80
 801d122:	d107      	bne.n	801d134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d12e:	6878      	ldr	r0, [r7, #4]
 801d130:	f000 fcec 	bl	801db0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	691b      	ldr	r3, [r3, #16]
 801d13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d13e:	2b40      	cmp	r3, #64	; 0x40
 801d140:	d10e      	bne.n	801d160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d14c:	2b40      	cmp	r3, #64	; 0x40
 801d14e:	d107      	bne.n	801d160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d15a:	6878      	ldr	r0, [r7, #4]
 801d15c:	f000 f95b 	bl	801d416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	691b      	ldr	r3, [r3, #16]
 801d166:	f003 0320 	and.w	r3, r3, #32
 801d16a:	2b20      	cmp	r3, #32
 801d16c:	d10e      	bne.n	801d18c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	68db      	ldr	r3, [r3, #12]
 801d174:	f003 0320 	and.w	r3, r3, #32
 801d178:	2b20      	cmp	r3, #32
 801d17a:	d107      	bne.n	801d18c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	f06f 0220 	mvn.w	r2, #32
 801d184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f000 fcb6 	bl	801daf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d18c:	bf00      	nop
 801d18e:	3708      	adds	r7, #8
 801d190:	46bd      	mov	sp, r7
 801d192:	bd80      	pop	{r7, pc}

0801d194 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b086      	sub	sp, #24
 801d198:	af00      	add	r7, sp, #0
 801d19a:	60f8      	str	r0, [r7, #12]
 801d19c:	60b9      	str	r1, [r7, #8]
 801d19e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d101      	bne.n	801d1b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 801d1ae:	2302      	movs	r3, #2
 801d1b0:	e048      	b.n	801d244 <HAL_TIM_OC_ConfigChannel+0xb0>
 801d1b2:	68fb      	ldr	r3, [r7, #12]
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	2b0c      	cmp	r3, #12
 801d1be:	d839      	bhi.n	801d234 <HAL_TIM_OC_ConfigChannel+0xa0>
 801d1c0:	a201      	add	r2, pc, #4	; (adr r2, 801d1c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 801d1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1c6:	bf00      	nop
 801d1c8:	0801d1fd 	.word	0x0801d1fd
 801d1cc:	0801d235 	.word	0x0801d235
 801d1d0:	0801d235 	.word	0x0801d235
 801d1d4:	0801d235 	.word	0x0801d235
 801d1d8:	0801d20b 	.word	0x0801d20b
 801d1dc:	0801d235 	.word	0x0801d235
 801d1e0:	0801d235 	.word	0x0801d235
 801d1e4:	0801d235 	.word	0x0801d235
 801d1e8:	0801d219 	.word	0x0801d219
 801d1ec:	0801d235 	.word	0x0801d235
 801d1f0:	0801d235 	.word	0x0801d235
 801d1f4:	0801d235 	.word	0x0801d235
 801d1f8:	0801d227 	.word	0x0801d227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	68b9      	ldr	r1, [r7, #8]
 801d202:	4618      	mov	r0, r3
 801d204:	f000 f9b2 	bl	801d56c <TIM_OC1_SetConfig>
      break;
 801d208:	e017      	b.n	801d23a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	68b9      	ldr	r1, [r7, #8]
 801d210:	4618      	mov	r0, r3
 801d212:	f000 fa1b 	bl	801d64c <TIM_OC2_SetConfig>
      break;
 801d216:	e010      	b.n	801d23a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	68b9      	ldr	r1, [r7, #8]
 801d21e:	4618      	mov	r0, r3
 801d220:	f000 fa8a 	bl	801d738 <TIM_OC3_SetConfig>
      break;
 801d224:	e009      	b.n	801d23a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	681b      	ldr	r3, [r3, #0]
 801d22a:	68b9      	ldr	r1, [r7, #8]
 801d22c:	4618      	mov	r0, r3
 801d22e:	f000 faf7 	bl	801d820 <TIM_OC4_SetConfig>
      break;
 801d232:	e002      	b.n	801d23a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 801d234:	2301      	movs	r3, #1
 801d236:	75fb      	strb	r3, [r7, #23]
      break;
 801d238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	2200      	movs	r2, #0
 801d23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d242:	7dfb      	ldrb	r3, [r7, #23]
}
 801d244:	4618      	mov	r0, r3
 801d246:	3718      	adds	r7, #24
 801d248:	46bd      	mov	sp, r7
 801d24a:	bd80      	pop	{r7, pc}

0801d24c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d24c:	b580      	push	{r7, lr}
 801d24e:	b084      	sub	sp, #16
 801d250:	af00      	add	r7, sp, #0
 801d252:	6078      	str	r0, [r7, #4]
 801d254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d256:	2300      	movs	r3, #0
 801d258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d260:	2b01      	cmp	r3, #1
 801d262:	d101      	bne.n	801d268 <HAL_TIM_ConfigClockSource+0x1c>
 801d264:	2302      	movs	r3, #2
 801d266:	e0b4      	b.n	801d3d2 <HAL_TIM_ConfigClockSource+0x186>
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2201      	movs	r2, #1
 801d26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	2202      	movs	r2, #2
 801d274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d28e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	68ba      	ldr	r2, [r7, #8]
 801d296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d298:	683b      	ldr	r3, [r7, #0]
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2a0:	d03e      	beq.n	801d320 <HAL_TIM_ConfigClockSource+0xd4>
 801d2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2a6:	f200 8087 	bhi.w	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2ae:	f000 8086 	beq.w	801d3be <HAL_TIM_ConfigClockSource+0x172>
 801d2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2b6:	d87f      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2b8:	2b70      	cmp	r3, #112	; 0x70
 801d2ba:	d01a      	beq.n	801d2f2 <HAL_TIM_ConfigClockSource+0xa6>
 801d2bc:	2b70      	cmp	r3, #112	; 0x70
 801d2be:	d87b      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2c0:	2b60      	cmp	r3, #96	; 0x60
 801d2c2:	d050      	beq.n	801d366 <HAL_TIM_ConfigClockSource+0x11a>
 801d2c4:	2b60      	cmp	r3, #96	; 0x60
 801d2c6:	d877      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2c8:	2b50      	cmp	r3, #80	; 0x50
 801d2ca:	d03c      	beq.n	801d346 <HAL_TIM_ConfigClockSource+0xfa>
 801d2cc:	2b50      	cmp	r3, #80	; 0x50
 801d2ce:	d873      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2d0:	2b40      	cmp	r3, #64	; 0x40
 801d2d2:	d058      	beq.n	801d386 <HAL_TIM_ConfigClockSource+0x13a>
 801d2d4:	2b40      	cmp	r3, #64	; 0x40
 801d2d6:	d86f      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2d8:	2b30      	cmp	r3, #48	; 0x30
 801d2da:	d064      	beq.n	801d3a6 <HAL_TIM_ConfigClockSource+0x15a>
 801d2dc:	2b30      	cmp	r3, #48	; 0x30
 801d2de:	d86b      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2e0:	2b20      	cmp	r3, #32
 801d2e2:	d060      	beq.n	801d3a6 <HAL_TIM_ConfigClockSource+0x15a>
 801d2e4:	2b20      	cmp	r3, #32
 801d2e6:	d867      	bhi.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d05c      	beq.n	801d3a6 <HAL_TIM_ConfigClockSource+0x15a>
 801d2ec:	2b10      	cmp	r3, #16
 801d2ee:	d05a      	beq.n	801d3a6 <HAL_TIM_ConfigClockSource+0x15a>
 801d2f0:	e062      	b.n	801d3b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	6818      	ldr	r0, [r3, #0]
 801d2f6:	683b      	ldr	r3, [r7, #0]
 801d2f8:	6899      	ldr	r1, [r3, #8]
 801d2fa:	683b      	ldr	r3, [r7, #0]
 801d2fc:	685a      	ldr	r2, [r3, #4]
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	68db      	ldr	r3, [r3, #12]
 801d302:	f000 fb5d 	bl	801d9c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	689b      	ldr	r3, [r3, #8]
 801d30c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d30e:	68bb      	ldr	r3, [r7, #8]
 801d310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	68ba      	ldr	r2, [r7, #8]
 801d31c:	609a      	str	r2, [r3, #8]
      break;
 801d31e:	e04f      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	6818      	ldr	r0, [r3, #0]
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	6899      	ldr	r1, [r3, #8]
 801d328:	683b      	ldr	r3, [r7, #0]
 801d32a:	685a      	ldr	r2, [r3, #4]
 801d32c:	683b      	ldr	r3, [r7, #0]
 801d32e:	68db      	ldr	r3, [r3, #12]
 801d330:	f000 fb46 	bl	801d9c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	689a      	ldr	r2, [r3, #8]
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d342:	609a      	str	r2, [r3, #8]
      break;
 801d344:	e03c      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	6818      	ldr	r0, [r3, #0]
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	6859      	ldr	r1, [r3, #4]
 801d34e:	683b      	ldr	r3, [r7, #0]
 801d350:	68db      	ldr	r3, [r3, #12]
 801d352:	461a      	mov	r2, r3
 801d354:	f000 faba 	bl	801d8cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	2150      	movs	r1, #80	; 0x50
 801d35e:	4618      	mov	r0, r3
 801d360:	f000 fb13 	bl	801d98a <TIM_ITRx_SetConfig>
      break;
 801d364:	e02c      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	6818      	ldr	r0, [r3, #0]
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	6859      	ldr	r1, [r3, #4]
 801d36e:	683b      	ldr	r3, [r7, #0]
 801d370:	68db      	ldr	r3, [r3, #12]
 801d372:	461a      	mov	r2, r3
 801d374:	f000 fad9 	bl	801d92a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	2160      	movs	r1, #96	; 0x60
 801d37e:	4618      	mov	r0, r3
 801d380:	f000 fb03 	bl	801d98a <TIM_ITRx_SetConfig>
      break;
 801d384:	e01c      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	6818      	ldr	r0, [r3, #0]
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	6859      	ldr	r1, [r3, #4]
 801d38e:	683b      	ldr	r3, [r7, #0]
 801d390:	68db      	ldr	r3, [r3, #12]
 801d392:	461a      	mov	r2, r3
 801d394:	f000 fa9a 	bl	801d8cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	2140      	movs	r1, #64	; 0x40
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f000 faf3 	bl	801d98a <TIM_ITRx_SetConfig>
      break;
 801d3a4:	e00c      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	681a      	ldr	r2, [r3, #0]
 801d3aa:	683b      	ldr	r3, [r7, #0]
 801d3ac:	681b      	ldr	r3, [r3, #0]
 801d3ae:	4619      	mov	r1, r3
 801d3b0:	4610      	mov	r0, r2
 801d3b2:	f000 faea 	bl	801d98a <TIM_ITRx_SetConfig>
      break;
 801d3b6:	e003      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801d3b8:	2301      	movs	r3, #1
 801d3ba:	73fb      	strb	r3, [r7, #15]
      break;
 801d3bc:	e000      	b.n	801d3c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801d3be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	3710      	adds	r7, #16
 801d3d6:	46bd      	mov	sp, r7
 801d3d8:	bd80      	pop	{r7, pc}

0801d3da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d3da:	b480      	push	{r7}
 801d3dc:	b083      	sub	sp, #12
 801d3de:	af00      	add	r7, sp, #0
 801d3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d3e2:	bf00      	nop
 801d3e4:	370c      	adds	r7, #12
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ec:	4770      	bx	lr

0801d3ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d3ee:	b480      	push	{r7}
 801d3f0:	b083      	sub	sp, #12
 801d3f2:	af00      	add	r7, sp, #0
 801d3f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d3f6:	bf00      	nop
 801d3f8:	370c      	adds	r7, #12
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d400:	4770      	bx	lr

0801d402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d402:	b480      	push	{r7}
 801d404:	b083      	sub	sp, #12
 801d406:	af00      	add	r7, sp, #0
 801d408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d40a:	bf00      	nop
 801d40c:	370c      	adds	r7, #12
 801d40e:	46bd      	mov	sp, r7
 801d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d414:	4770      	bx	lr

0801d416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d416:	b480      	push	{r7}
 801d418:	b083      	sub	sp, #12
 801d41a:	af00      	add	r7, sp, #0
 801d41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d41e:	bf00      	nop
 801d420:	370c      	adds	r7, #12
 801d422:	46bd      	mov	sp, r7
 801d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d428:	4770      	bx	lr
	...

0801d42c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d42c:	b480      	push	{r7}
 801d42e:	b085      	sub	sp, #20
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
 801d434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	4a40      	ldr	r2, [pc, #256]	; (801d540 <TIM_Base_SetConfig+0x114>)
 801d440:	4293      	cmp	r3, r2
 801d442:	d013      	beq.n	801d46c <TIM_Base_SetConfig+0x40>
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d44a:	d00f      	beq.n	801d46c <TIM_Base_SetConfig+0x40>
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	4a3d      	ldr	r2, [pc, #244]	; (801d544 <TIM_Base_SetConfig+0x118>)
 801d450:	4293      	cmp	r3, r2
 801d452:	d00b      	beq.n	801d46c <TIM_Base_SetConfig+0x40>
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	4a3c      	ldr	r2, [pc, #240]	; (801d548 <TIM_Base_SetConfig+0x11c>)
 801d458:	4293      	cmp	r3, r2
 801d45a:	d007      	beq.n	801d46c <TIM_Base_SetConfig+0x40>
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	4a3b      	ldr	r2, [pc, #236]	; (801d54c <TIM_Base_SetConfig+0x120>)
 801d460:	4293      	cmp	r3, r2
 801d462:	d003      	beq.n	801d46c <TIM_Base_SetConfig+0x40>
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	4a3a      	ldr	r2, [pc, #232]	; (801d550 <TIM_Base_SetConfig+0x124>)
 801d468:	4293      	cmp	r3, r2
 801d46a:	d108      	bne.n	801d47e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d474:	683b      	ldr	r3, [r7, #0]
 801d476:	685b      	ldr	r3, [r3, #4]
 801d478:	68fa      	ldr	r2, [r7, #12]
 801d47a:	4313      	orrs	r3, r2
 801d47c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	4a2f      	ldr	r2, [pc, #188]	; (801d540 <TIM_Base_SetConfig+0x114>)
 801d482:	4293      	cmp	r3, r2
 801d484:	d02b      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d48c:	d027      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	4a2c      	ldr	r2, [pc, #176]	; (801d544 <TIM_Base_SetConfig+0x118>)
 801d492:	4293      	cmp	r3, r2
 801d494:	d023      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	4a2b      	ldr	r2, [pc, #172]	; (801d548 <TIM_Base_SetConfig+0x11c>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d01f      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	4a2a      	ldr	r2, [pc, #168]	; (801d54c <TIM_Base_SetConfig+0x120>)
 801d4a2:	4293      	cmp	r3, r2
 801d4a4:	d01b      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	4a29      	ldr	r2, [pc, #164]	; (801d550 <TIM_Base_SetConfig+0x124>)
 801d4aa:	4293      	cmp	r3, r2
 801d4ac:	d017      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	4a28      	ldr	r2, [pc, #160]	; (801d554 <TIM_Base_SetConfig+0x128>)
 801d4b2:	4293      	cmp	r3, r2
 801d4b4:	d013      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	4a27      	ldr	r2, [pc, #156]	; (801d558 <TIM_Base_SetConfig+0x12c>)
 801d4ba:	4293      	cmp	r3, r2
 801d4bc:	d00f      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	4a26      	ldr	r2, [pc, #152]	; (801d55c <TIM_Base_SetConfig+0x130>)
 801d4c2:	4293      	cmp	r3, r2
 801d4c4:	d00b      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	4a25      	ldr	r2, [pc, #148]	; (801d560 <TIM_Base_SetConfig+0x134>)
 801d4ca:	4293      	cmp	r3, r2
 801d4cc:	d007      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	4a24      	ldr	r2, [pc, #144]	; (801d564 <TIM_Base_SetConfig+0x138>)
 801d4d2:	4293      	cmp	r3, r2
 801d4d4:	d003      	beq.n	801d4de <TIM_Base_SetConfig+0xb2>
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	4a23      	ldr	r2, [pc, #140]	; (801d568 <TIM_Base_SetConfig+0x13c>)
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	d108      	bne.n	801d4f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d4e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	68db      	ldr	r3, [r3, #12]
 801d4ea:	68fa      	ldr	r2, [r7, #12]
 801d4ec:	4313      	orrs	r3, r2
 801d4ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d4f6:	683b      	ldr	r3, [r7, #0]
 801d4f8:	695b      	ldr	r3, [r3, #20]
 801d4fa:	4313      	orrs	r3, r2
 801d4fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	68fa      	ldr	r2, [r7, #12]
 801d502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d504:	683b      	ldr	r3, [r7, #0]
 801d506:	689a      	ldr	r2, [r3, #8]
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d50c:	683b      	ldr	r3, [r7, #0]
 801d50e:	681a      	ldr	r2, [r3, #0]
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	4a0a      	ldr	r2, [pc, #40]	; (801d540 <TIM_Base_SetConfig+0x114>)
 801d518:	4293      	cmp	r3, r2
 801d51a:	d003      	beq.n	801d524 <TIM_Base_SetConfig+0xf8>
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	4a0c      	ldr	r2, [pc, #48]	; (801d550 <TIM_Base_SetConfig+0x124>)
 801d520:	4293      	cmp	r3, r2
 801d522:	d103      	bne.n	801d52c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d524:	683b      	ldr	r3, [r7, #0]
 801d526:	691a      	ldr	r2, [r3, #16]
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	2201      	movs	r2, #1
 801d530:	615a      	str	r2, [r3, #20]
}
 801d532:	bf00      	nop
 801d534:	3714      	adds	r7, #20
 801d536:	46bd      	mov	sp, r7
 801d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d53c:	4770      	bx	lr
 801d53e:	bf00      	nop
 801d540:	40010000 	.word	0x40010000
 801d544:	40000400 	.word	0x40000400
 801d548:	40000800 	.word	0x40000800
 801d54c:	40000c00 	.word	0x40000c00
 801d550:	40010400 	.word	0x40010400
 801d554:	40014000 	.word	0x40014000
 801d558:	40014400 	.word	0x40014400
 801d55c:	40014800 	.word	0x40014800
 801d560:	40001800 	.word	0x40001800
 801d564:	40001c00 	.word	0x40001c00
 801d568:	40002000 	.word	0x40002000

0801d56c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d56c:	b480      	push	{r7}
 801d56e:	b087      	sub	sp, #28
 801d570:	af00      	add	r7, sp, #0
 801d572:	6078      	str	r0, [r7, #4]
 801d574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	6a1b      	ldr	r3, [r3, #32]
 801d57a:	f023 0201 	bic.w	r2, r3, #1
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	6a1b      	ldr	r3, [r3, #32]
 801d586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	685b      	ldr	r3, [r3, #4]
 801d58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	699b      	ldr	r3, [r3, #24]
 801d592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	f023 0303 	bic.w	r3, r3, #3
 801d5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d5a4:	683b      	ldr	r3, [r7, #0]
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	68fa      	ldr	r2, [r7, #12]
 801d5aa:	4313      	orrs	r3, r2
 801d5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d5ae:	697b      	ldr	r3, [r7, #20]
 801d5b0:	f023 0302 	bic.w	r3, r3, #2
 801d5b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d5b6:	683b      	ldr	r3, [r7, #0]
 801d5b8:	689b      	ldr	r3, [r3, #8]
 801d5ba:	697a      	ldr	r2, [r7, #20]
 801d5bc:	4313      	orrs	r3, r2
 801d5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	4a20      	ldr	r2, [pc, #128]	; (801d644 <TIM_OC1_SetConfig+0xd8>)
 801d5c4:	4293      	cmp	r3, r2
 801d5c6:	d003      	beq.n	801d5d0 <TIM_OC1_SetConfig+0x64>
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	4a1f      	ldr	r2, [pc, #124]	; (801d648 <TIM_OC1_SetConfig+0xdc>)
 801d5cc:	4293      	cmp	r3, r2
 801d5ce:	d10c      	bne.n	801d5ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d5d0:	697b      	ldr	r3, [r7, #20]
 801d5d2:	f023 0308 	bic.w	r3, r3, #8
 801d5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d5d8:	683b      	ldr	r3, [r7, #0]
 801d5da:	68db      	ldr	r3, [r3, #12]
 801d5dc:	697a      	ldr	r2, [r7, #20]
 801d5de:	4313      	orrs	r3, r2
 801d5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d5e2:	697b      	ldr	r3, [r7, #20]
 801d5e4:	f023 0304 	bic.w	r3, r3, #4
 801d5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	4a15      	ldr	r2, [pc, #84]	; (801d644 <TIM_OC1_SetConfig+0xd8>)
 801d5ee:	4293      	cmp	r3, r2
 801d5f0:	d003      	beq.n	801d5fa <TIM_OC1_SetConfig+0x8e>
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	4a14      	ldr	r2, [pc, #80]	; (801d648 <TIM_OC1_SetConfig+0xdc>)
 801d5f6:	4293      	cmp	r3, r2
 801d5f8:	d111      	bne.n	801d61e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d5fa:	693b      	ldr	r3, [r7, #16]
 801d5fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d602:	693b      	ldr	r3, [r7, #16]
 801d604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d60a:	683b      	ldr	r3, [r7, #0]
 801d60c:	695b      	ldr	r3, [r3, #20]
 801d60e:	693a      	ldr	r2, [r7, #16]
 801d610:	4313      	orrs	r3, r2
 801d612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d614:	683b      	ldr	r3, [r7, #0]
 801d616:	699b      	ldr	r3, [r3, #24]
 801d618:	693a      	ldr	r2, [r7, #16]
 801d61a:	4313      	orrs	r3, r2
 801d61c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	693a      	ldr	r2, [r7, #16]
 801d622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	68fa      	ldr	r2, [r7, #12]
 801d628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d62a:	683b      	ldr	r3, [r7, #0]
 801d62c:	685a      	ldr	r2, [r3, #4]
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	697a      	ldr	r2, [r7, #20]
 801d636:	621a      	str	r2, [r3, #32]
}
 801d638:	bf00      	nop
 801d63a:	371c      	adds	r7, #28
 801d63c:	46bd      	mov	sp, r7
 801d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d642:	4770      	bx	lr
 801d644:	40010000 	.word	0x40010000
 801d648:	40010400 	.word	0x40010400

0801d64c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d64c:	b480      	push	{r7}
 801d64e:	b087      	sub	sp, #28
 801d650:	af00      	add	r7, sp, #0
 801d652:	6078      	str	r0, [r7, #4]
 801d654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	6a1b      	ldr	r3, [r3, #32]
 801d65a:	f023 0210 	bic.w	r2, r3, #16
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	6a1b      	ldr	r3, [r3, #32]
 801d666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	685b      	ldr	r3, [r3, #4]
 801d66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	699b      	ldr	r3, [r3, #24]
 801d672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d684:	683b      	ldr	r3, [r7, #0]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	021b      	lsls	r3, r3, #8
 801d68a:	68fa      	ldr	r2, [r7, #12]
 801d68c:	4313      	orrs	r3, r2
 801d68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	f023 0320 	bic.w	r3, r3, #32
 801d696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	689b      	ldr	r3, [r3, #8]
 801d69c:	011b      	lsls	r3, r3, #4
 801d69e:	697a      	ldr	r2, [r7, #20]
 801d6a0:	4313      	orrs	r3, r2
 801d6a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	4a22      	ldr	r2, [pc, #136]	; (801d730 <TIM_OC2_SetConfig+0xe4>)
 801d6a8:	4293      	cmp	r3, r2
 801d6aa:	d003      	beq.n	801d6b4 <TIM_OC2_SetConfig+0x68>
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	4a21      	ldr	r2, [pc, #132]	; (801d734 <TIM_OC2_SetConfig+0xe8>)
 801d6b0:	4293      	cmp	r3, r2
 801d6b2:	d10d      	bne.n	801d6d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	68db      	ldr	r3, [r3, #12]
 801d6c0:	011b      	lsls	r3, r3, #4
 801d6c2:	697a      	ldr	r2, [r7, #20]
 801d6c4:	4313      	orrs	r3, r2
 801d6c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d6c8:	697b      	ldr	r3, [r7, #20]
 801d6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d6ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	4a17      	ldr	r2, [pc, #92]	; (801d730 <TIM_OC2_SetConfig+0xe4>)
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	d003      	beq.n	801d6e0 <TIM_OC2_SetConfig+0x94>
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	4a16      	ldr	r2, [pc, #88]	; (801d734 <TIM_OC2_SetConfig+0xe8>)
 801d6dc:	4293      	cmp	r3, r2
 801d6de:	d113      	bne.n	801d708 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d6e0:	693b      	ldr	r3, [r7, #16]
 801d6e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d6f0:	683b      	ldr	r3, [r7, #0]
 801d6f2:	695b      	ldr	r3, [r3, #20]
 801d6f4:	009b      	lsls	r3, r3, #2
 801d6f6:	693a      	ldr	r2, [r7, #16]
 801d6f8:	4313      	orrs	r3, r2
 801d6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	699b      	ldr	r3, [r3, #24]
 801d700:	009b      	lsls	r3, r3, #2
 801d702:	693a      	ldr	r2, [r7, #16]
 801d704:	4313      	orrs	r3, r2
 801d706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	693a      	ldr	r2, [r7, #16]
 801d70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	68fa      	ldr	r2, [r7, #12]
 801d712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d714:	683b      	ldr	r3, [r7, #0]
 801d716:	685a      	ldr	r2, [r3, #4]
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	697a      	ldr	r2, [r7, #20]
 801d720:	621a      	str	r2, [r3, #32]
}
 801d722:	bf00      	nop
 801d724:	371c      	adds	r7, #28
 801d726:	46bd      	mov	sp, r7
 801d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d72c:	4770      	bx	lr
 801d72e:	bf00      	nop
 801d730:	40010000 	.word	0x40010000
 801d734:	40010400 	.word	0x40010400

0801d738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d738:	b480      	push	{r7}
 801d73a:	b087      	sub	sp, #28
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	6078      	str	r0, [r7, #4]
 801d740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	6a1b      	ldr	r3, [r3, #32]
 801d746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	6a1b      	ldr	r3, [r3, #32]
 801d752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	685b      	ldr	r3, [r3, #4]
 801d758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	69db      	ldr	r3, [r3, #28]
 801d75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	f023 0303 	bic.w	r3, r3, #3
 801d76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d770:	683b      	ldr	r3, [r7, #0]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	68fa      	ldr	r2, [r7, #12]
 801d776:	4313      	orrs	r3, r2
 801d778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d77a:	697b      	ldr	r3, [r7, #20]
 801d77c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d782:	683b      	ldr	r3, [r7, #0]
 801d784:	689b      	ldr	r3, [r3, #8]
 801d786:	021b      	lsls	r3, r3, #8
 801d788:	697a      	ldr	r2, [r7, #20]
 801d78a:	4313      	orrs	r3, r2
 801d78c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	4a21      	ldr	r2, [pc, #132]	; (801d818 <TIM_OC3_SetConfig+0xe0>)
 801d792:	4293      	cmp	r3, r2
 801d794:	d003      	beq.n	801d79e <TIM_OC3_SetConfig+0x66>
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	4a20      	ldr	r2, [pc, #128]	; (801d81c <TIM_OC3_SetConfig+0xe4>)
 801d79a:	4293      	cmp	r3, r2
 801d79c:	d10d      	bne.n	801d7ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d79e:	697b      	ldr	r3, [r7, #20]
 801d7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d7a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d7a6:	683b      	ldr	r3, [r7, #0]
 801d7a8:	68db      	ldr	r3, [r3, #12]
 801d7aa:	021b      	lsls	r3, r3, #8
 801d7ac:	697a      	ldr	r2, [r7, #20]
 801d7ae:	4313      	orrs	r3, r2
 801d7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d7b2:	697b      	ldr	r3, [r7, #20]
 801d7b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	4a16      	ldr	r2, [pc, #88]	; (801d818 <TIM_OC3_SetConfig+0xe0>)
 801d7be:	4293      	cmp	r3, r2
 801d7c0:	d003      	beq.n	801d7ca <TIM_OC3_SetConfig+0x92>
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	4a15      	ldr	r2, [pc, #84]	; (801d81c <TIM_OC3_SetConfig+0xe4>)
 801d7c6:	4293      	cmp	r3, r2
 801d7c8:	d113      	bne.n	801d7f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d7ca:	693b      	ldr	r3, [r7, #16]
 801d7cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d7da:	683b      	ldr	r3, [r7, #0]
 801d7dc:	695b      	ldr	r3, [r3, #20]
 801d7de:	011b      	lsls	r3, r3, #4
 801d7e0:	693a      	ldr	r2, [r7, #16]
 801d7e2:	4313      	orrs	r3, r2
 801d7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	699b      	ldr	r3, [r3, #24]
 801d7ea:	011b      	lsls	r3, r3, #4
 801d7ec:	693a      	ldr	r2, [r7, #16]
 801d7ee:	4313      	orrs	r3, r2
 801d7f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	693a      	ldr	r2, [r7, #16]
 801d7f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	68fa      	ldr	r2, [r7, #12]
 801d7fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d7fe:	683b      	ldr	r3, [r7, #0]
 801d800:	685a      	ldr	r2, [r3, #4]
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	697a      	ldr	r2, [r7, #20]
 801d80a:	621a      	str	r2, [r3, #32]
}
 801d80c:	bf00      	nop
 801d80e:	371c      	adds	r7, #28
 801d810:	46bd      	mov	sp, r7
 801d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d816:	4770      	bx	lr
 801d818:	40010000 	.word	0x40010000
 801d81c:	40010400 	.word	0x40010400

0801d820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d820:	b480      	push	{r7}
 801d822:	b087      	sub	sp, #28
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]
 801d828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	6a1b      	ldr	r3, [r3, #32]
 801d82e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	6a1b      	ldr	r3, [r3, #32]
 801d83a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	685b      	ldr	r3, [r3, #4]
 801d840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	69db      	ldr	r3, [r3, #28]
 801d846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	021b      	lsls	r3, r3, #8
 801d85e:	68fa      	ldr	r2, [r7, #12]
 801d860:	4313      	orrs	r3, r2
 801d862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d864:	693b      	ldr	r3, [r7, #16]
 801d866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d86a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d86c:	683b      	ldr	r3, [r7, #0]
 801d86e:	689b      	ldr	r3, [r3, #8]
 801d870:	031b      	lsls	r3, r3, #12
 801d872:	693a      	ldr	r2, [r7, #16]
 801d874:	4313      	orrs	r3, r2
 801d876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	4a12      	ldr	r2, [pc, #72]	; (801d8c4 <TIM_OC4_SetConfig+0xa4>)
 801d87c:	4293      	cmp	r3, r2
 801d87e:	d003      	beq.n	801d888 <TIM_OC4_SetConfig+0x68>
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	4a11      	ldr	r2, [pc, #68]	; (801d8c8 <TIM_OC4_SetConfig+0xa8>)
 801d884:	4293      	cmp	r3, r2
 801d886:	d109      	bne.n	801d89c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d888:	697b      	ldr	r3, [r7, #20]
 801d88a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d88e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	695b      	ldr	r3, [r3, #20]
 801d894:	019b      	lsls	r3, r3, #6
 801d896:	697a      	ldr	r2, [r7, #20]
 801d898:	4313      	orrs	r3, r2
 801d89a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	697a      	ldr	r2, [r7, #20]
 801d8a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	68fa      	ldr	r2, [r7, #12]
 801d8a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d8a8:	683b      	ldr	r3, [r7, #0]
 801d8aa:	685a      	ldr	r2, [r3, #4]
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	693a      	ldr	r2, [r7, #16]
 801d8b4:	621a      	str	r2, [r3, #32]
}
 801d8b6:	bf00      	nop
 801d8b8:	371c      	adds	r7, #28
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8c0:	4770      	bx	lr
 801d8c2:	bf00      	nop
 801d8c4:	40010000 	.word	0x40010000
 801d8c8:	40010400 	.word	0x40010400

0801d8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d8cc:	b480      	push	{r7}
 801d8ce:	b087      	sub	sp, #28
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	60f8      	str	r0, [r7, #12]
 801d8d4:	60b9      	str	r1, [r7, #8]
 801d8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	6a1b      	ldr	r3, [r3, #32]
 801d8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	6a1b      	ldr	r3, [r3, #32]
 801d8e2:	f023 0201 	bic.w	r2, r3, #1
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	699b      	ldr	r3, [r3, #24]
 801d8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d8f0:	693b      	ldr	r3, [r7, #16]
 801d8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	011b      	lsls	r3, r3, #4
 801d8fc:	693a      	ldr	r2, [r7, #16]
 801d8fe:	4313      	orrs	r3, r2
 801d900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d902:	697b      	ldr	r3, [r7, #20]
 801d904:	f023 030a 	bic.w	r3, r3, #10
 801d908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801d90a:	697a      	ldr	r2, [r7, #20]
 801d90c:	68bb      	ldr	r3, [r7, #8]
 801d90e:	4313      	orrs	r3, r2
 801d910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	693a      	ldr	r2, [r7, #16]
 801d916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	697a      	ldr	r2, [r7, #20]
 801d91c:	621a      	str	r2, [r3, #32]
}
 801d91e:	bf00      	nop
 801d920:	371c      	adds	r7, #28
 801d922:	46bd      	mov	sp, r7
 801d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d928:	4770      	bx	lr

0801d92a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801d92a:	b480      	push	{r7}
 801d92c:	b087      	sub	sp, #28
 801d92e:	af00      	add	r7, sp, #0
 801d930:	60f8      	str	r0, [r7, #12]
 801d932:	60b9      	str	r1, [r7, #8]
 801d934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	6a1b      	ldr	r3, [r3, #32]
 801d93a:	f023 0210 	bic.w	r2, r3, #16
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	699b      	ldr	r3, [r3, #24]
 801d946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	6a1b      	ldr	r3, [r3, #32]
 801d94c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d94e:	697b      	ldr	r3, [r7, #20]
 801d950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801d954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	031b      	lsls	r3, r3, #12
 801d95a:	697a      	ldr	r2, [r7, #20]
 801d95c:	4313      	orrs	r3, r2
 801d95e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d960:	693b      	ldr	r3, [r7, #16]
 801d962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801d966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801d968:	68bb      	ldr	r3, [r7, #8]
 801d96a:	011b      	lsls	r3, r3, #4
 801d96c:	693a      	ldr	r2, [r7, #16]
 801d96e:	4313      	orrs	r3, r2
 801d970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	697a      	ldr	r2, [r7, #20]
 801d976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	693a      	ldr	r2, [r7, #16]
 801d97c:	621a      	str	r2, [r3, #32]
}
 801d97e:	bf00      	nop
 801d980:	371c      	adds	r7, #28
 801d982:	46bd      	mov	sp, r7
 801d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d988:	4770      	bx	lr

0801d98a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801d98a:	b480      	push	{r7}
 801d98c:	b085      	sub	sp, #20
 801d98e:	af00      	add	r7, sp, #0
 801d990:	6078      	str	r0, [r7, #4]
 801d992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	689b      	ldr	r3, [r3, #8]
 801d998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d9a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d9a2:	683a      	ldr	r2, [r7, #0]
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	4313      	orrs	r3, r2
 801d9a8:	f043 0307 	orr.w	r3, r3, #7
 801d9ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	68fa      	ldr	r2, [r7, #12]
 801d9b2:	609a      	str	r2, [r3, #8]
}
 801d9b4:	bf00      	nop
 801d9b6:	3714      	adds	r7, #20
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9be:	4770      	bx	lr

0801d9c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d9c0:	b480      	push	{r7}
 801d9c2:	b087      	sub	sp, #28
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	60f8      	str	r0, [r7, #12]
 801d9c8:	60b9      	str	r1, [r7, #8]
 801d9ca:	607a      	str	r2, [r7, #4]
 801d9cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	689b      	ldr	r3, [r3, #8]
 801d9d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d9d4:	697b      	ldr	r3, [r7, #20]
 801d9d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d9da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d9dc:	683b      	ldr	r3, [r7, #0]
 801d9de:	021a      	lsls	r2, r3, #8
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	431a      	orrs	r2, r3
 801d9e4:	68bb      	ldr	r3, [r7, #8]
 801d9e6:	4313      	orrs	r3, r2
 801d9e8:	697a      	ldr	r2, [r7, #20]
 801d9ea:	4313      	orrs	r3, r2
 801d9ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	697a      	ldr	r2, [r7, #20]
 801d9f2:	609a      	str	r2, [r3, #8]
}
 801d9f4:	bf00      	nop
 801d9f6:	371c      	adds	r7, #28
 801d9f8:	46bd      	mov	sp, r7
 801d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9fe:	4770      	bx	lr

0801da00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801da00:	b480      	push	{r7}
 801da02:	b085      	sub	sp, #20
 801da04:	af00      	add	r7, sp, #0
 801da06:	6078      	str	r0, [r7, #4]
 801da08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801da10:	2b01      	cmp	r3, #1
 801da12:	d101      	bne.n	801da18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801da14:	2302      	movs	r3, #2
 801da16:	e05a      	b.n	801dace <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	2201      	movs	r2, #1
 801da1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	2202      	movs	r2, #2
 801da24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	685b      	ldr	r3, [r3, #4]
 801da2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	689b      	ldr	r3, [r3, #8]
 801da36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801da3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801da40:	683b      	ldr	r3, [r7, #0]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	68fa      	ldr	r2, [r7, #12]
 801da46:	4313      	orrs	r3, r2
 801da48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	68fa      	ldr	r2, [r7, #12]
 801da50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	4a21      	ldr	r2, [pc, #132]	; (801dadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801da58:	4293      	cmp	r3, r2
 801da5a:	d022      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da64:	d01d      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	4a1d      	ldr	r2, [pc, #116]	; (801dae0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801da6c:	4293      	cmp	r3, r2
 801da6e:	d018      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	4a1b      	ldr	r2, [pc, #108]	; (801dae4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801da76:	4293      	cmp	r3, r2
 801da78:	d013      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	4a1a      	ldr	r2, [pc, #104]	; (801dae8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801da80:	4293      	cmp	r3, r2
 801da82:	d00e      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	4a18      	ldr	r2, [pc, #96]	; (801daec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801da8a:	4293      	cmp	r3, r2
 801da8c:	d009      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	4a17      	ldr	r2, [pc, #92]	; (801daf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801da94:	4293      	cmp	r3, r2
 801da96:	d004      	beq.n	801daa2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	4a15      	ldr	r2, [pc, #84]	; (801daf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801da9e:	4293      	cmp	r3, r2
 801daa0:	d10c      	bne.n	801dabc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801daa2:	68bb      	ldr	r3, [r7, #8]
 801daa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801daa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801daaa:	683b      	ldr	r3, [r7, #0]
 801daac:	685b      	ldr	r3, [r3, #4]
 801daae:	68ba      	ldr	r2, [r7, #8]
 801dab0:	4313      	orrs	r3, r2
 801dab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	68ba      	ldr	r2, [r7, #8]
 801daba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	2201      	movs	r2, #1
 801dac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	2200      	movs	r2, #0
 801dac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dacc:	2300      	movs	r3, #0
}
 801dace:	4618      	mov	r0, r3
 801dad0:	3714      	adds	r7, #20
 801dad2:	46bd      	mov	sp, r7
 801dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop
 801dadc:	40010000 	.word	0x40010000
 801dae0:	40000400 	.word	0x40000400
 801dae4:	40000800 	.word	0x40000800
 801dae8:	40000c00 	.word	0x40000c00
 801daec:	40010400 	.word	0x40010400
 801daf0:	40014000 	.word	0x40014000
 801daf4:	40001800 	.word	0x40001800

0801daf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801daf8:	b480      	push	{r7}
 801dafa:	b083      	sub	sp, #12
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801db00:	bf00      	nop
 801db02:	370c      	adds	r7, #12
 801db04:	46bd      	mov	sp, r7
 801db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db0a:	4770      	bx	lr

0801db0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801db0c:	b480      	push	{r7}
 801db0e:	b083      	sub	sp, #12
 801db10:	af00      	add	r7, sp, #0
 801db12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801db14:	bf00      	nop
 801db16:	370c      	adds	r7, #12
 801db18:	46bd      	mov	sp, r7
 801db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db1e:	4770      	bx	lr

0801db20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801db20:	b084      	sub	sp, #16
 801db22:	b580      	push	{r7, lr}
 801db24:	b084      	sub	sp, #16
 801db26:	af00      	add	r7, sp, #0
 801db28:	6078      	str	r0, [r7, #4]
 801db2a:	f107 001c 	add.w	r0, r7, #28
 801db2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db34:	2b01      	cmp	r3, #1
 801db36:	d122      	bne.n	801db7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	68db      	ldr	r3, [r3, #12]
 801db48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801db4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801db50:	687a      	ldr	r2, [r7, #4]
 801db52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	68db      	ldr	r3, [r3, #12]
 801db58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801db60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db62:	2b01      	cmp	r3, #1
 801db64:	d105      	bne.n	801db72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	68db      	ldr	r3, [r3, #12]
 801db6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db72:	6878      	ldr	r0, [r7, #4]
 801db74:	f001 fbe8 	bl	801f348 <USB_CoreReset>
 801db78:	4603      	mov	r3, r0
 801db7a:	73fb      	strb	r3, [r7, #15]
 801db7c:	e01a      	b.n	801dbb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	68db      	ldr	r3, [r3, #12]
 801db82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801db8a:	6878      	ldr	r0, [r7, #4]
 801db8c:	f001 fbdc 	bl	801f348 <USB_CoreReset>
 801db90:	4603      	mov	r3, r0
 801db92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801db94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db96:	2b00      	cmp	r3, #0
 801db98:	d106      	bne.n	801dba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	639a      	str	r2, [r3, #56]	; 0x38
 801dba6:	e005      	b.n	801dbb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbb6:	2b01      	cmp	r3, #1
 801dbb8:	d10b      	bne.n	801dbd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	689b      	ldr	r3, [r3, #8]
 801dbbe:	f043 0206 	orr.w	r2, r3, #6
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	689b      	ldr	r3, [r3, #8]
 801dbca:	f043 0220 	orr.w	r2, r3, #32
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801dbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 801dbd4:	4618      	mov	r0, r3
 801dbd6:	3710      	adds	r7, #16
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801dbde:	b004      	add	sp, #16
 801dbe0:	4770      	bx	lr
	...

0801dbe4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801dbe4:	b480      	push	{r7}
 801dbe6:	b087      	sub	sp, #28
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	60f8      	str	r0, [r7, #12]
 801dbec:	60b9      	str	r1, [r7, #8]
 801dbee:	4613      	mov	r3, r2
 801dbf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801dbf2:	79fb      	ldrb	r3, [r7, #7]
 801dbf4:	2b02      	cmp	r3, #2
 801dbf6:	d165      	bne.n	801dcc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801dbf8:	68bb      	ldr	r3, [r7, #8]
 801dbfa:	4a41      	ldr	r2, [pc, #260]	; (801dd00 <USB_SetTurnaroundTime+0x11c>)
 801dbfc:	4293      	cmp	r3, r2
 801dbfe:	d906      	bls.n	801dc0e <USB_SetTurnaroundTime+0x2a>
 801dc00:	68bb      	ldr	r3, [r7, #8]
 801dc02:	4a40      	ldr	r2, [pc, #256]	; (801dd04 <USB_SetTurnaroundTime+0x120>)
 801dc04:	4293      	cmp	r3, r2
 801dc06:	d202      	bcs.n	801dc0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801dc08:	230f      	movs	r3, #15
 801dc0a:	617b      	str	r3, [r7, #20]
 801dc0c:	e062      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801dc0e:	68bb      	ldr	r3, [r7, #8]
 801dc10:	4a3c      	ldr	r2, [pc, #240]	; (801dd04 <USB_SetTurnaroundTime+0x120>)
 801dc12:	4293      	cmp	r3, r2
 801dc14:	d306      	bcc.n	801dc24 <USB_SetTurnaroundTime+0x40>
 801dc16:	68bb      	ldr	r3, [r7, #8]
 801dc18:	4a3b      	ldr	r2, [pc, #236]	; (801dd08 <USB_SetTurnaroundTime+0x124>)
 801dc1a:	4293      	cmp	r3, r2
 801dc1c:	d202      	bcs.n	801dc24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801dc1e:	230e      	movs	r3, #14
 801dc20:	617b      	str	r3, [r7, #20]
 801dc22:	e057      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801dc24:	68bb      	ldr	r3, [r7, #8]
 801dc26:	4a38      	ldr	r2, [pc, #224]	; (801dd08 <USB_SetTurnaroundTime+0x124>)
 801dc28:	4293      	cmp	r3, r2
 801dc2a:	d306      	bcc.n	801dc3a <USB_SetTurnaroundTime+0x56>
 801dc2c:	68bb      	ldr	r3, [r7, #8]
 801dc2e:	4a37      	ldr	r2, [pc, #220]	; (801dd0c <USB_SetTurnaroundTime+0x128>)
 801dc30:	4293      	cmp	r3, r2
 801dc32:	d202      	bcs.n	801dc3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801dc34:	230d      	movs	r3, #13
 801dc36:	617b      	str	r3, [r7, #20]
 801dc38:	e04c      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	4a33      	ldr	r2, [pc, #204]	; (801dd0c <USB_SetTurnaroundTime+0x128>)
 801dc3e:	4293      	cmp	r3, r2
 801dc40:	d306      	bcc.n	801dc50 <USB_SetTurnaroundTime+0x6c>
 801dc42:	68bb      	ldr	r3, [r7, #8]
 801dc44:	4a32      	ldr	r2, [pc, #200]	; (801dd10 <USB_SetTurnaroundTime+0x12c>)
 801dc46:	4293      	cmp	r3, r2
 801dc48:	d802      	bhi.n	801dc50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801dc4a:	230c      	movs	r3, #12
 801dc4c:	617b      	str	r3, [r7, #20]
 801dc4e:	e041      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801dc50:	68bb      	ldr	r3, [r7, #8]
 801dc52:	4a2f      	ldr	r2, [pc, #188]	; (801dd10 <USB_SetTurnaroundTime+0x12c>)
 801dc54:	4293      	cmp	r3, r2
 801dc56:	d906      	bls.n	801dc66 <USB_SetTurnaroundTime+0x82>
 801dc58:	68bb      	ldr	r3, [r7, #8]
 801dc5a:	4a2e      	ldr	r2, [pc, #184]	; (801dd14 <USB_SetTurnaroundTime+0x130>)
 801dc5c:	4293      	cmp	r3, r2
 801dc5e:	d802      	bhi.n	801dc66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801dc60:	230b      	movs	r3, #11
 801dc62:	617b      	str	r3, [r7, #20]
 801dc64:	e036      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801dc66:	68bb      	ldr	r3, [r7, #8]
 801dc68:	4a2a      	ldr	r2, [pc, #168]	; (801dd14 <USB_SetTurnaroundTime+0x130>)
 801dc6a:	4293      	cmp	r3, r2
 801dc6c:	d906      	bls.n	801dc7c <USB_SetTurnaroundTime+0x98>
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	4a29      	ldr	r2, [pc, #164]	; (801dd18 <USB_SetTurnaroundTime+0x134>)
 801dc72:	4293      	cmp	r3, r2
 801dc74:	d802      	bhi.n	801dc7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801dc76:	230a      	movs	r3, #10
 801dc78:	617b      	str	r3, [r7, #20]
 801dc7a:	e02b      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801dc7c:	68bb      	ldr	r3, [r7, #8]
 801dc7e:	4a26      	ldr	r2, [pc, #152]	; (801dd18 <USB_SetTurnaroundTime+0x134>)
 801dc80:	4293      	cmp	r3, r2
 801dc82:	d906      	bls.n	801dc92 <USB_SetTurnaroundTime+0xae>
 801dc84:	68bb      	ldr	r3, [r7, #8]
 801dc86:	4a25      	ldr	r2, [pc, #148]	; (801dd1c <USB_SetTurnaroundTime+0x138>)
 801dc88:	4293      	cmp	r3, r2
 801dc8a:	d202      	bcs.n	801dc92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dc8c:	2309      	movs	r3, #9
 801dc8e:	617b      	str	r3, [r7, #20]
 801dc90:	e020      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	4a21      	ldr	r2, [pc, #132]	; (801dd1c <USB_SetTurnaroundTime+0x138>)
 801dc96:	4293      	cmp	r3, r2
 801dc98:	d306      	bcc.n	801dca8 <USB_SetTurnaroundTime+0xc4>
 801dc9a:	68bb      	ldr	r3, [r7, #8]
 801dc9c:	4a20      	ldr	r2, [pc, #128]	; (801dd20 <USB_SetTurnaroundTime+0x13c>)
 801dc9e:	4293      	cmp	r3, r2
 801dca0:	d802      	bhi.n	801dca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801dca2:	2308      	movs	r3, #8
 801dca4:	617b      	str	r3, [r7, #20]
 801dca6:	e015      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dca8:	68bb      	ldr	r3, [r7, #8]
 801dcaa:	4a1d      	ldr	r2, [pc, #116]	; (801dd20 <USB_SetTurnaroundTime+0x13c>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d906      	bls.n	801dcbe <USB_SetTurnaroundTime+0xda>
 801dcb0:	68bb      	ldr	r3, [r7, #8]
 801dcb2:	4a1c      	ldr	r2, [pc, #112]	; (801dd24 <USB_SetTurnaroundTime+0x140>)
 801dcb4:	4293      	cmp	r3, r2
 801dcb6:	d202      	bcs.n	801dcbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801dcb8:	2307      	movs	r3, #7
 801dcba:	617b      	str	r3, [r7, #20]
 801dcbc:	e00a      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801dcbe:	2306      	movs	r3, #6
 801dcc0:	617b      	str	r3, [r7, #20]
 801dcc2:	e007      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dcc4:	79fb      	ldrb	r3, [r7, #7]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d102      	bne.n	801dcd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dcca:	2309      	movs	r3, #9
 801dccc:	617b      	str	r3, [r7, #20]
 801dcce:	e001      	b.n	801dcd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dcd0:	2309      	movs	r3, #9
 801dcd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801dcd4:	68fb      	ldr	r3, [r7, #12]
 801dcd6:	68db      	ldr	r3, [r3, #12]
 801dcd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	68da      	ldr	r2, [r3, #12]
 801dce4:	697b      	ldr	r3, [r7, #20]
 801dce6:	029b      	lsls	r3, r3, #10
 801dce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801dcec:	431a      	orrs	r2, r3
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801dcf2:	2300      	movs	r3, #0
}
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	371c      	adds	r7, #28
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcfe:	4770      	bx	lr
 801dd00:	00d8acbf 	.word	0x00d8acbf
 801dd04:	00e4e1c0 	.word	0x00e4e1c0
 801dd08:	00f42400 	.word	0x00f42400
 801dd0c:	01067380 	.word	0x01067380
 801dd10:	011a499f 	.word	0x011a499f
 801dd14:	01312cff 	.word	0x01312cff
 801dd18:	014ca43f 	.word	0x014ca43f
 801dd1c:	016e3600 	.word	0x016e3600
 801dd20:	01a6ab1f 	.word	0x01a6ab1f
 801dd24:	01e84800 	.word	0x01e84800

0801dd28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd28:	b480      	push	{r7}
 801dd2a:	b083      	sub	sp, #12
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	689b      	ldr	r3, [r3, #8]
 801dd34:	f043 0201 	orr.w	r2, r3, #1
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd3c:	2300      	movs	r3, #0
}
 801dd3e:	4618      	mov	r0, r3
 801dd40:	370c      	adds	r7, #12
 801dd42:	46bd      	mov	sp, r7
 801dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd48:	4770      	bx	lr

0801dd4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801dd4a:	b480      	push	{r7}
 801dd4c:	b083      	sub	sp, #12
 801dd4e:	af00      	add	r7, sp, #0
 801dd50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	689b      	ldr	r3, [r3, #8]
 801dd56:	f023 0201 	bic.w	r2, r3, #1
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801dd5e:	2300      	movs	r3, #0
}
 801dd60:	4618      	mov	r0, r3
 801dd62:	370c      	adds	r7, #12
 801dd64:	46bd      	mov	sp, r7
 801dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd6a:	4770      	bx	lr

0801dd6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b084      	sub	sp, #16
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	6078      	str	r0, [r7, #4]
 801dd74:	460b      	mov	r3, r1
 801dd76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801dd78:	2300      	movs	r3, #0
 801dd7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	68db      	ldr	r3, [r3, #12]
 801dd80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801dd88:	78fb      	ldrb	r3, [r7, #3]
 801dd8a:	2b01      	cmp	r3, #1
 801dd8c:	d115      	bne.n	801ddba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	68db      	ldr	r3, [r3, #12]
 801dd92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801dd9a:	2001      	movs	r0, #1
 801dd9c:	f7fa f9ca 	bl	8018134 <HAL_Delay>
      ms++;
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	3301      	adds	r3, #1
 801dda4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801dda6:	6878      	ldr	r0, [r7, #4]
 801dda8:	f001 fa3f 	bl	801f22a <USB_GetMode>
 801ddac:	4603      	mov	r3, r0
 801ddae:	2b01      	cmp	r3, #1
 801ddb0:	d01e      	beq.n	801ddf0 <USB_SetCurrentMode+0x84>
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	2b31      	cmp	r3, #49	; 0x31
 801ddb6:	d9f0      	bls.n	801dd9a <USB_SetCurrentMode+0x2e>
 801ddb8:	e01a      	b.n	801ddf0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801ddba:	78fb      	ldrb	r3, [r7, #3]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d115      	bne.n	801ddec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	68db      	ldr	r3, [r3, #12]
 801ddc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801ddcc:	2001      	movs	r0, #1
 801ddce:	f7fa f9b1 	bl	8018134 <HAL_Delay>
      ms++;
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801ddd8:	6878      	ldr	r0, [r7, #4]
 801ddda:	f001 fa26 	bl	801f22a <USB_GetMode>
 801ddde:	4603      	mov	r3, r0
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d005      	beq.n	801ddf0 <USB_SetCurrentMode+0x84>
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	2b31      	cmp	r3, #49	; 0x31
 801dde8:	d9f0      	bls.n	801ddcc <USB_SetCurrentMode+0x60>
 801ddea:	e001      	b.n	801ddf0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801ddec:	2301      	movs	r3, #1
 801ddee:	e005      	b.n	801ddfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	2b32      	cmp	r3, #50	; 0x32
 801ddf4:	d101      	bne.n	801ddfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801ddf6:	2301      	movs	r3, #1
 801ddf8:	e000      	b.n	801ddfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801ddfa:	2300      	movs	r3, #0
}
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	3710      	adds	r7, #16
 801de00:	46bd      	mov	sp, r7
 801de02:	bd80      	pop	{r7, pc}

0801de04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801de04:	b084      	sub	sp, #16
 801de06:	b580      	push	{r7, lr}
 801de08:	b086      	sub	sp, #24
 801de0a:	af00      	add	r7, sp, #0
 801de0c:	6078      	str	r0, [r7, #4]
 801de0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801de12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801de16:	2300      	movs	r3, #0
 801de18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801de1e:	2300      	movs	r3, #0
 801de20:	613b      	str	r3, [r7, #16]
 801de22:	e009      	b.n	801de38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801de24:	687a      	ldr	r2, [r7, #4]
 801de26:	693b      	ldr	r3, [r7, #16]
 801de28:	3340      	adds	r3, #64	; 0x40
 801de2a:	009b      	lsls	r3, r3, #2
 801de2c:	4413      	add	r3, r2
 801de2e:	2200      	movs	r2, #0
 801de30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801de32:	693b      	ldr	r3, [r7, #16]
 801de34:	3301      	adds	r3, #1
 801de36:	613b      	str	r3, [r7, #16]
 801de38:	693b      	ldr	r3, [r7, #16]
 801de3a:	2b0e      	cmp	r3, #14
 801de3c:	d9f2      	bls.n	801de24 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801de3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801de40:	2b00      	cmp	r3, #0
 801de42:	d11c      	bne.n	801de7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de4a:	685b      	ldr	r3, [r3, #4]
 801de4c:	68fa      	ldr	r2, [r7, #12]
 801de4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801de52:	f043 0302 	orr.w	r3, r3, #2
 801de56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801de6c:	687b      	ldr	r3, [r7, #4]
 801de6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	601a      	str	r2, [r3, #0]
 801de7c:	e005      	b.n	801de8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de90:	461a      	mov	r2, r3
 801de92:	2300      	movs	r3, #0
 801de94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801de9c:	4619      	mov	r1, r3
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801dea4:	461a      	mov	r2, r3
 801dea6:	680b      	ldr	r3, [r1, #0]
 801dea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deac:	2b01      	cmp	r3, #1
 801deae:	d10c      	bne.n	801deca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d104      	bne.n	801dec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801deb6:	2100      	movs	r1, #0
 801deb8:	6878      	ldr	r0, [r7, #4]
 801deba:	f000 f965 	bl	801e188 <USB_SetDevSpeed>
 801debe:	e008      	b.n	801ded2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801dec0:	2101      	movs	r1, #1
 801dec2:	6878      	ldr	r0, [r7, #4]
 801dec4:	f000 f960 	bl	801e188 <USB_SetDevSpeed>
 801dec8:	e003      	b.n	801ded2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801deca:	2103      	movs	r1, #3
 801decc:	6878      	ldr	r0, [r7, #4]
 801dece:	f000 f95b 	bl	801e188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801ded2:	2110      	movs	r1, #16
 801ded4:	6878      	ldr	r0, [r7, #4]
 801ded6:	f000 f8f3 	bl	801e0c0 <USB_FlushTxFifo>
 801deda:	4603      	mov	r3, r0
 801dedc:	2b00      	cmp	r3, #0
 801dede:	d001      	beq.n	801dee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801dee0:	2301      	movs	r3, #1
 801dee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801dee4:	6878      	ldr	r0, [r7, #4]
 801dee6:	f000 f91f 	bl	801e128 <USB_FlushRxFifo>
 801deea:	4603      	mov	r3, r0
 801deec:	2b00      	cmp	r3, #0
 801deee:	d001      	beq.n	801def4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801def0:	2301      	movs	r3, #1
 801def2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801defa:	461a      	mov	r2, r3
 801defc:	2300      	movs	r3, #0
 801defe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df06:	461a      	mov	r2, r3
 801df08:	2300      	movs	r3, #0
 801df0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801df12:	461a      	mov	r2, r3
 801df14:	2300      	movs	r3, #0
 801df16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801df18:	2300      	movs	r3, #0
 801df1a:	613b      	str	r3, [r7, #16]
 801df1c:	e043      	b.n	801dfa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801df1e:	693b      	ldr	r3, [r7, #16]
 801df20:	015a      	lsls	r2, r3, #5
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	4413      	add	r3, r2
 801df26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801df30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801df34:	d118      	bne.n	801df68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801df36:	693b      	ldr	r3, [r7, #16]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d10a      	bne.n	801df52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	015a      	lsls	r2, r3, #5
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	4413      	add	r3, r2
 801df44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df48:	461a      	mov	r2, r3
 801df4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801df4e:	6013      	str	r3, [r2, #0]
 801df50:	e013      	b.n	801df7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801df52:	693b      	ldr	r3, [r7, #16]
 801df54:	015a      	lsls	r2, r3, #5
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	4413      	add	r3, r2
 801df5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df5e:	461a      	mov	r2, r3
 801df60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801df64:	6013      	str	r3, [r2, #0]
 801df66:	e008      	b.n	801df7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801df68:	693b      	ldr	r3, [r7, #16]
 801df6a:	015a      	lsls	r2, r3, #5
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	4413      	add	r3, r2
 801df70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df74:	461a      	mov	r2, r3
 801df76:	2300      	movs	r3, #0
 801df78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801df7a:	693b      	ldr	r3, [r7, #16]
 801df7c:	015a      	lsls	r2, r3, #5
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	4413      	add	r3, r2
 801df82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df86:	461a      	mov	r2, r3
 801df88:	2300      	movs	r3, #0
 801df8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801df8c:	693b      	ldr	r3, [r7, #16]
 801df8e:	015a      	lsls	r2, r3, #5
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	4413      	add	r3, r2
 801df94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801df98:	461a      	mov	r2, r3
 801df9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801df9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfa0:	693b      	ldr	r3, [r7, #16]
 801dfa2:	3301      	adds	r3, #1
 801dfa4:	613b      	str	r3, [r7, #16]
 801dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfa8:	693a      	ldr	r2, [r7, #16]
 801dfaa:	429a      	cmp	r2, r3
 801dfac:	d3b7      	bcc.n	801df1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801dfae:	2300      	movs	r3, #0
 801dfb0:	613b      	str	r3, [r7, #16]
 801dfb2:	e043      	b.n	801e03c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801dfb4:	693b      	ldr	r3, [r7, #16]
 801dfb6:	015a      	lsls	r2, r3, #5
 801dfb8:	68fb      	ldr	r3, [r7, #12]
 801dfba:	4413      	add	r3, r2
 801dfbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801dfc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801dfca:	d118      	bne.n	801dffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d10a      	bne.n	801dfe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801dfd2:	693b      	ldr	r3, [r7, #16]
 801dfd4:	015a      	lsls	r2, r3, #5
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	4413      	add	r3, r2
 801dfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dfde:	461a      	mov	r2, r3
 801dfe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801dfe4:	6013      	str	r3, [r2, #0]
 801dfe6:	e013      	b.n	801e010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801dfe8:	693b      	ldr	r3, [r7, #16]
 801dfea:	015a      	lsls	r2, r3, #5
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	4413      	add	r3, r2
 801dff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801dff4:	461a      	mov	r2, r3
 801dff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801dffa:	6013      	str	r3, [r2, #0]
 801dffc:	e008      	b.n	801e010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801dffe:	693b      	ldr	r3, [r7, #16]
 801e000:	015a      	lsls	r2, r3, #5
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	4413      	add	r3, r2
 801e006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e00a:	461a      	mov	r2, r3
 801e00c:	2300      	movs	r3, #0
 801e00e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e010:	693b      	ldr	r3, [r7, #16]
 801e012:	015a      	lsls	r2, r3, #5
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	4413      	add	r3, r2
 801e018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e01c:	461a      	mov	r2, r3
 801e01e:	2300      	movs	r3, #0
 801e020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e022:	693b      	ldr	r3, [r7, #16]
 801e024:	015a      	lsls	r2, r3, #5
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	4413      	add	r3, r2
 801e02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e02e:	461a      	mov	r2, r3
 801e030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e036:	693b      	ldr	r3, [r7, #16]
 801e038:	3301      	adds	r3, #1
 801e03a:	613b      	str	r3, [r7, #16]
 801e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e03e:	693a      	ldr	r2, [r7, #16]
 801e040:	429a      	cmp	r2, r3
 801e042:	d3b7      	bcc.n	801dfb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e04a:	691b      	ldr	r3, [r3, #16]
 801e04c:	68fa      	ldr	r2, [r7, #12]
 801e04e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2200      	movs	r2, #0
 801e05c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d105      	bne.n	801e078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	699b      	ldr	r3, [r3, #24]
 801e070:	f043 0210 	orr.w	r2, r3, #16
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	699a      	ldr	r2, [r3, #24]
 801e07c:	4b0f      	ldr	r3, [pc, #60]	; (801e0bc <USB_DevInit+0x2b8>)
 801e07e:	4313      	orrs	r3, r2
 801e080:	687a      	ldr	r2, [r7, #4]
 801e082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e086:	2b00      	cmp	r3, #0
 801e088:	d005      	beq.n	801e096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	699b      	ldr	r3, [r3, #24]
 801e08e:	f043 0208 	orr.w	r2, r3, #8
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e098:	2b01      	cmp	r3, #1
 801e09a:	d107      	bne.n	801e0ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	699b      	ldr	r3, [r3, #24]
 801e0a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e0a4:	f043 0304 	orr.w	r3, r3, #4
 801e0a8:	687a      	ldr	r2, [r7, #4]
 801e0aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	3718      	adds	r7, #24
 801e0b2:	46bd      	mov	sp, r7
 801e0b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e0b8:	b004      	add	sp, #16
 801e0ba:	4770      	bx	lr
 801e0bc:	803c3800 	.word	0x803c3800

0801e0c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e0c0:	b480      	push	{r7}
 801e0c2:	b085      	sub	sp, #20
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
 801e0c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	3301      	adds	r3, #1
 801e0d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	4a13      	ldr	r2, [pc, #76]	; (801e124 <USB_FlushTxFifo+0x64>)
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	d901      	bls.n	801e0e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801e0dc:	2303      	movs	r3, #3
 801e0de:	e01b      	b.n	801e118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	691b      	ldr	r3, [r3, #16]
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	daf2      	bge.n	801e0ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e0ec:	683b      	ldr	r3, [r7, #0]
 801e0ee:	019b      	lsls	r3, r3, #6
 801e0f0:	f043 0220 	orr.w	r2, r3, #32
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	3301      	adds	r3, #1
 801e0fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	4a08      	ldr	r2, [pc, #32]	; (801e124 <USB_FlushTxFifo+0x64>)
 801e102:	4293      	cmp	r3, r2
 801e104:	d901      	bls.n	801e10a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801e106:	2303      	movs	r3, #3
 801e108:	e006      	b.n	801e118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	691b      	ldr	r3, [r3, #16]
 801e10e:	f003 0320 	and.w	r3, r3, #32
 801e112:	2b20      	cmp	r3, #32
 801e114:	d0f0      	beq.n	801e0f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801e116:	2300      	movs	r3, #0
}
 801e118:	4618      	mov	r0, r3
 801e11a:	3714      	adds	r7, #20
 801e11c:	46bd      	mov	sp, r7
 801e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e122:	4770      	bx	lr
 801e124:	00030d40 	.word	0x00030d40

0801e128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e128:	b480      	push	{r7}
 801e12a:	b085      	sub	sp, #20
 801e12c:	af00      	add	r7, sp, #0
 801e12e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801e130:	2300      	movs	r3, #0
 801e132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	3301      	adds	r3, #1
 801e138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e13a:	68fb      	ldr	r3, [r7, #12]
 801e13c:	4a11      	ldr	r2, [pc, #68]	; (801e184 <USB_FlushRxFifo+0x5c>)
 801e13e:	4293      	cmp	r3, r2
 801e140:	d901      	bls.n	801e146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801e142:	2303      	movs	r3, #3
 801e144:	e018      	b.n	801e178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	691b      	ldr	r3, [r3, #16]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	daf2      	bge.n	801e134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801e14e:	2300      	movs	r3, #0
 801e150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	2210      	movs	r2, #16
 801e156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	3301      	adds	r3, #1
 801e15c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	4a08      	ldr	r2, [pc, #32]	; (801e184 <USB_FlushRxFifo+0x5c>)
 801e162:	4293      	cmp	r3, r2
 801e164:	d901      	bls.n	801e16a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801e166:	2303      	movs	r3, #3
 801e168:	e006      	b.n	801e178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	691b      	ldr	r3, [r3, #16]
 801e16e:	f003 0310 	and.w	r3, r3, #16
 801e172:	2b10      	cmp	r3, #16
 801e174:	d0f0      	beq.n	801e158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801e176:	2300      	movs	r3, #0
}
 801e178:	4618      	mov	r0, r3
 801e17a:	3714      	adds	r7, #20
 801e17c:	46bd      	mov	sp, r7
 801e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e182:	4770      	bx	lr
 801e184:	00030d40 	.word	0x00030d40

0801e188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e188:	b480      	push	{r7}
 801e18a:	b085      	sub	sp, #20
 801e18c:	af00      	add	r7, sp, #0
 801e18e:	6078      	str	r0, [r7, #4]
 801e190:	460b      	mov	r3, r1
 801e192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e19e:	681a      	ldr	r2, [r3, #0]
 801e1a0:	78fb      	ldrb	r3, [r7, #3]
 801e1a2:	68f9      	ldr	r1, [r7, #12]
 801e1a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e1a8:	4313      	orrs	r3, r2
 801e1aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e1ac:	2300      	movs	r3, #0
}
 801e1ae:	4618      	mov	r0, r3
 801e1b0:	3714      	adds	r7, #20
 801e1b2:	46bd      	mov	sp, r7
 801e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1b8:	4770      	bx	lr

0801e1ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e1ba:	b480      	push	{r7}
 801e1bc:	b087      	sub	sp, #28
 801e1be:	af00      	add	r7, sp, #0
 801e1c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e1c6:	693b      	ldr	r3, [r7, #16]
 801e1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e1cc:	689b      	ldr	r3, [r3, #8]
 801e1ce:	f003 0306 	and.w	r3, r3, #6
 801e1d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d102      	bne.n	801e1e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e1da:	2300      	movs	r3, #0
 801e1dc:	75fb      	strb	r3, [r7, #23]
 801e1de:	e00a      	b.n	801e1f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	2b02      	cmp	r3, #2
 801e1e4:	d002      	beq.n	801e1ec <USB_GetDevSpeed+0x32>
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	2b06      	cmp	r3, #6
 801e1ea:	d102      	bne.n	801e1f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e1ec:	2302      	movs	r3, #2
 801e1ee:	75fb      	strb	r3, [r7, #23]
 801e1f0:	e001      	b.n	801e1f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e1f2:	230f      	movs	r3, #15
 801e1f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e1f6:	7dfb      	ldrb	r3, [r7, #23]
}
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	371c      	adds	r7, #28
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e202:	4770      	bx	lr

0801e204 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e204:	b480      	push	{r7}
 801e206:	b085      	sub	sp, #20
 801e208:	af00      	add	r7, sp, #0
 801e20a:	6078      	str	r0, [r7, #4]
 801e20c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	781b      	ldrb	r3, [r3, #0]
 801e216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e218:	683b      	ldr	r3, [r7, #0]
 801e21a:	785b      	ldrb	r3, [r3, #1]
 801e21c:	2b01      	cmp	r3, #1
 801e21e:	d13a      	bne.n	801e296 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e226:	69da      	ldr	r2, [r3, #28]
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	781b      	ldrb	r3, [r3, #0]
 801e22c:	f003 030f 	and.w	r3, r3, #15
 801e230:	2101      	movs	r1, #1
 801e232:	fa01 f303 	lsl.w	r3, r1, r3
 801e236:	b29b      	uxth	r3, r3
 801e238:	68f9      	ldr	r1, [r7, #12]
 801e23a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e23e:	4313      	orrs	r3, r2
 801e240:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e242:	68bb      	ldr	r3, [r7, #8]
 801e244:	015a      	lsls	r2, r3, #5
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	4413      	add	r3, r2
 801e24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e254:	2b00      	cmp	r3, #0
 801e256:	d155      	bne.n	801e304 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e258:	68bb      	ldr	r3, [r7, #8]
 801e25a:	015a      	lsls	r2, r3, #5
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	4413      	add	r3, r2
 801e260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e264:	681a      	ldr	r2, [r3, #0]
 801e266:	683b      	ldr	r3, [r7, #0]
 801e268:	68db      	ldr	r3, [r3, #12]
 801e26a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e26e:	683b      	ldr	r3, [r7, #0]
 801e270:	791b      	ldrb	r3, [r3, #4]
 801e272:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e274:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e276:	68bb      	ldr	r3, [r7, #8]
 801e278:	059b      	lsls	r3, r3, #22
 801e27a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e27c:	4313      	orrs	r3, r2
 801e27e:	68ba      	ldr	r2, [r7, #8]
 801e280:	0151      	lsls	r1, r2, #5
 801e282:	68fa      	ldr	r2, [r7, #12]
 801e284:	440a      	add	r2, r1
 801e286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e28a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e292:	6013      	str	r3, [r2, #0]
 801e294:	e036      	b.n	801e304 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e29c:	69da      	ldr	r2, [r3, #28]
 801e29e:	683b      	ldr	r3, [r7, #0]
 801e2a0:	781b      	ldrb	r3, [r3, #0]
 801e2a2:	f003 030f 	and.w	r3, r3, #15
 801e2a6:	2101      	movs	r1, #1
 801e2a8:	fa01 f303 	lsl.w	r3, r1, r3
 801e2ac:	041b      	lsls	r3, r3, #16
 801e2ae:	68f9      	ldr	r1, [r7, #12]
 801e2b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e2b4:	4313      	orrs	r3, r2
 801e2b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e2b8:	68bb      	ldr	r3, [r7, #8]
 801e2ba:	015a      	lsls	r2, r3, #5
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	4413      	add	r3, r2
 801e2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d11a      	bne.n	801e304 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2ce:	68bb      	ldr	r3, [r7, #8]
 801e2d0:	015a      	lsls	r2, r3, #5
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	4413      	add	r3, r2
 801e2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e2da:	681a      	ldr	r2, [r3, #0]
 801e2dc:	683b      	ldr	r3, [r7, #0]
 801e2de:	68db      	ldr	r3, [r3, #12]
 801e2e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e2e4:	683b      	ldr	r3, [r7, #0]
 801e2e6:	791b      	ldrb	r3, [r3, #4]
 801e2e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e2ea:	430b      	orrs	r3, r1
 801e2ec:	4313      	orrs	r3, r2
 801e2ee:	68ba      	ldr	r2, [r7, #8]
 801e2f0:	0151      	lsls	r1, r2, #5
 801e2f2:	68fa      	ldr	r2, [r7, #12]
 801e2f4:	440a      	add	r2, r1
 801e2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e302:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e304:	2300      	movs	r3, #0
}
 801e306:	4618      	mov	r0, r3
 801e308:	3714      	adds	r7, #20
 801e30a:	46bd      	mov	sp, r7
 801e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e310:	4770      	bx	lr
	...

0801e314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e314:	b480      	push	{r7}
 801e316:	b085      	sub	sp, #20
 801e318:	af00      	add	r7, sp, #0
 801e31a:	6078      	str	r0, [r7, #4]
 801e31c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e322:	683b      	ldr	r3, [r7, #0]
 801e324:	781b      	ldrb	r3, [r3, #0]
 801e326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e328:	683b      	ldr	r3, [r7, #0]
 801e32a:	785b      	ldrb	r3, [r3, #1]
 801e32c:	2b01      	cmp	r3, #1
 801e32e:	d161      	bne.n	801e3f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e330:	68bb      	ldr	r3, [r7, #8]
 801e332:	015a      	lsls	r2, r3, #5
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	4413      	add	r3, r2
 801e338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e346:	d11f      	bne.n	801e388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e348:	68bb      	ldr	r3, [r7, #8]
 801e34a:	015a      	lsls	r2, r3, #5
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	4413      	add	r3, r2
 801e350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	68ba      	ldr	r2, [r7, #8]
 801e358:	0151      	lsls	r1, r2, #5
 801e35a:	68fa      	ldr	r2, [r7, #12]
 801e35c:	440a      	add	r2, r1
 801e35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	015a      	lsls	r2, r3, #5
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	4413      	add	r3, r2
 801e370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	68ba      	ldr	r2, [r7, #8]
 801e378:	0151      	lsls	r1, r2, #5
 801e37a:	68fa      	ldr	r2, [r7, #12]
 801e37c:	440a      	add	r2, r1
 801e37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e38e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e390:	683b      	ldr	r3, [r7, #0]
 801e392:	781b      	ldrb	r3, [r3, #0]
 801e394:	f003 030f 	and.w	r3, r3, #15
 801e398:	2101      	movs	r1, #1
 801e39a:	fa01 f303 	lsl.w	r3, r1, r3
 801e39e:	b29b      	uxth	r3, r3
 801e3a0:	43db      	mvns	r3, r3
 801e3a2:	68f9      	ldr	r1, [r7, #12]
 801e3a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3a8:	4013      	ands	r3, r2
 801e3aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e3ac:	68fb      	ldr	r3, [r7, #12]
 801e3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3b2:	69da      	ldr	r2, [r3, #28]
 801e3b4:	683b      	ldr	r3, [r7, #0]
 801e3b6:	781b      	ldrb	r3, [r3, #0]
 801e3b8:	f003 030f 	and.w	r3, r3, #15
 801e3bc:	2101      	movs	r1, #1
 801e3be:	fa01 f303 	lsl.w	r3, r1, r3
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	43db      	mvns	r3, r3
 801e3c6:	68f9      	ldr	r1, [r7, #12]
 801e3c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3cc:	4013      	ands	r3, r2
 801e3ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e3d0:	68bb      	ldr	r3, [r7, #8]
 801e3d2:	015a      	lsls	r2, r3, #5
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	4413      	add	r3, r2
 801e3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3dc:	681a      	ldr	r2, [r3, #0]
 801e3de:	68bb      	ldr	r3, [r7, #8]
 801e3e0:	0159      	lsls	r1, r3, #5
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	440b      	add	r3, r1
 801e3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3ea:	4619      	mov	r1, r3
 801e3ec:	4b35      	ldr	r3, [pc, #212]	; (801e4c4 <USB_DeactivateEndpoint+0x1b0>)
 801e3ee:	4013      	ands	r3, r2
 801e3f0:	600b      	str	r3, [r1, #0]
 801e3f2:	e060      	b.n	801e4b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e3f4:	68bb      	ldr	r3, [r7, #8]
 801e3f6:	015a      	lsls	r2, r3, #5
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	4413      	add	r3, r2
 801e3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e40a:	d11f      	bne.n	801e44c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	015a      	lsls	r2, r3, #5
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	4413      	add	r3, r2
 801e414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	68ba      	ldr	r2, [r7, #8]
 801e41c:	0151      	lsls	r1, r2, #5
 801e41e:	68fa      	ldr	r2, [r7, #12]
 801e420:	440a      	add	r2, r1
 801e422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e42a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e42c:	68bb      	ldr	r3, [r7, #8]
 801e42e:	015a      	lsls	r2, r3, #5
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	4413      	add	r3, r2
 801e434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	68ba      	ldr	r2, [r7, #8]
 801e43c:	0151      	lsls	r1, r2, #5
 801e43e:	68fa      	ldr	r2, [r7, #12]
 801e440:	440a      	add	r2, r1
 801e442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e44a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e44c:	68fb      	ldr	r3, [r7, #12]
 801e44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e454:	683b      	ldr	r3, [r7, #0]
 801e456:	781b      	ldrb	r3, [r3, #0]
 801e458:	f003 030f 	and.w	r3, r3, #15
 801e45c:	2101      	movs	r1, #1
 801e45e:	fa01 f303 	lsl.w	r3, r1, r3
 801e462:	041b      	lsls	r3, r3, #16
 801e464:	43db      	mvns	r3, r3
 801e466:	68f9      	ldr	r1, [r7, #12]
 801e468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e46c:	4013      	ands	r3, r2
 801e46e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e476:	69da      	ldr	r2, [r3, #28]
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	781b      	ldrb	r3, [r3, #0]
 801e47c:	f003 030f 	and.w	r3, r3, #15
 801e480:	2101      	movs	r1, #1
 801e482:	fa01 f303 	lsl.w	r3, r1, r3
 801e486:	041b      	lsls	r3, r3, #16
 801e488:	43db      	mvns	r3, r3
 801e48a:	68f9      	ldr	r1, [r7, #12]
 801e48c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e490:	4013      	ands	r3, r2
 801e492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e494:	68bb      	ldr	r3, [r7, #8]
 801e496:	015a      	lsls	r2, r3, #5
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	4413      	add	r3, r2
 801e49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4a0:	681a      	ldr	r2, [r3, #0]
 801e4a2:	68bb      	ldr	r3, [r7, #8]
 801e4a4:	0159      	lsls	r1, r3, #5
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	440b      	add	r3, r1
 801e4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e4ae:	4619      	mov	r1, r3
 801e4b0:	4b05      	ldr	r3, [pc, #20]	; (801e4c8 <USB_DeactivateEndpoint+0x1b4>)
 801e4b2:	4013      	ands	r3, r2
 801e4b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e4b6:	2300      	movs	r3, #0
}
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	3714      	adds	r7, #20
 801e4bc:	46bd      	mov	sp, r7
 801e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4c2:	4770      	bx	lr
 801e4c4:	ec337800 	.word	0xec337800
 801e4c8:	eff37800 	.word	0xeff37800

0801e4cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	b08a      	sub	sp, #40	; 0x28
 801e4d0:	af02      	add	r7, sp, #8
 801e4d2:	60f8      	str	r0, [r7, #12]
 801e4d4:	60b9      	str	r1, [r7, #8]
 801e4d6:	4613      	mov	r3, r2
 801e4d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e4de:	68bb      	ldr	r3, [r7, #8]
 801e4e0:	781b      	ldrb	r3, [r3, #0]
 801e4e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e4e4:	68bb      	ldr	r3, [r7, #8]
 801e4e6:	785b      	ldrb	r3, [r3, #1]
 801e4e8:	2b01      	cmp	r3, #1
 801e4ea:	f040 815c 	bne.w	801e7a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e4ee:	68bb      	ldr	r3, [r7, #8]
 801e4f0:	699b      	ldr	r3, [r3, #24]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d132      	bne.n	801e55c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e4f6:	69bb      	ldr	r3, [r7, #24]
 801e4f8:	015a      	lsls	r2, r3, #5
 801e4fa:	69fb      	ldr	r3, [r7, #28]
 801e4fc:	4413      	add	r3, r2
 801e4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e502:	691b      	ldr	r3, [r3, #16]
 801e504:	69ba      	ldr	r2, [r7, #24]
 801e506:	0151      	lsls	r1, r2, #5
 801e508:	69fa      	ldr	r2, [r7, #28]
 801e50a:	440a      	add	r2, r1
 801e50c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e518:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e51a:	69bb      	ldr	r3, [r7, #24]
 801e51c:	015a      	lsls	r2, r3, #5
 801e51e:	69fb      	ldr	r3, [r7, #28]
 801e520:	4413      	add	r3, r2
 801e522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e526:	691b      	ldr	r3, [r3, #16]
 801e528:	69ba      	ldr	r2, [r7, #24]
 801e52a:	0151      	lsls	r1, r2, #5
 801e52c:	69fa      	ldr	r2, [r7, #28]
 801e52e:	440a      	add	r2, r1
 801e530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e53a:	69bb      	ldr	r3, [r7, #24]
 801e53c:	015a      	lsls	r2, r3, #5
 801e53e:	69fb      	ldr	r3, [r7, #28]
 801e540:	4413      	add	r3, r2
 801e542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e546:	691b      	ldr	r3, [r3, #16]
 801e548:	69ba      	ldr	r2, [r7, #24]
 801e54a:	0151      	lsls	r1, r2, #5
 801e54c:	69fa      	ldr	r2, [r7, #28]
 801e54e:	440a      	add	r2, r1
 801e550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e554:	0cdb      	lsrs	r3, r3, #19
 801e556:	04db      	lsls	r3, r3, #19
 801e558:	6113      	str	r3, [r2, #16]
 801e55a:	e074      	b.n	801e646 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e55c:	69bb      	ldr	r3, [r7, #24]
 801e55e:	015a      	lsls	r2, r3, #5
 801e560:	69fb      	ldr	r3, [r7, #28]
 801e562:	4413      	add	r3, r2
 801e564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e568:	691b      	ldr	r3, [r3, #16]
 801e56a:	69ba      	ldr	r2, [r7, #24]
 801e56c:	0151      	lsls	r1, r2, #5
 801e56e:	69fa      	ldr	r2, [r7, #28]
 801e570:	440a      	add	r2, r1
 801e572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e576:	0cdb      	lsrs	r3, r3, #19
 801e578:	04db      	lsls	r3, r3, #19
 801e57a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e57c:	69bb      	ldr	r3, [r7, #24]
 801e57e:	015a      	lsls	r2, r3, #5
 801e580:	69fb      	ldr	r3, [r7, #28]
 801e582:	4413      	add	r3, r2
 801e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e588:	691b      	ldr	r3, [r3, #16]
 801e58a:	69ba      	ldr	r2, [r7, #24]
 801e58c:	0151      	lsls	r1, r2, #5
 801e58e:	69fa      	ldr	r2, [r7, #28]
 801e590:	440a      	add	r2, r1
 801e592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e596:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e59a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e59e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e5a0:	69bb      	ldr	r3, [r7, #24]
 801e5a2:	015a      	lsls	r2, r3, #5
 801e5a4:	69fb      	ldr	r3, [r7, #28]
 801e5a6:	4413      	add	r3, r2
 801e5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e5ae:	68bb      	ldr	r3, [r7, #8]
 801e5b0:	6999      	ldr	r1, [r3, #24]
 801e5b2:	68bb      	ldr	r3, [r7, #8]
 801e5b4:	68db      	ldr	r3, [r3, #12]
 801e5b6:	440b      	add	r3, r1
 801e5b8:	1e59      	subs	r1, r3, #1
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	68db      	ldr	r3, [r3, #12]
 801e5be:	fbb1 f3f3 	udiv	r3, r1, r3
 801e5c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801e5c4:	4b9d      	ldr	r3, [pc, #628]	; (801e83c <USB_EPStartXfer+0x370>)
 801e5c6:	400b      	ands	r3, r1
 801e5c8:	69b9      	ldr	r1, [r7, #24]
 801e5ca:	0148      	lsls	r0, r1, #5
 801e5cc:	69f9      	ldr	r1, [r7, #28]
 801e5ce:	4401      	add	r1, r0
 801e5d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5d4:	4313      	orrs	r3, r2
 801e5d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e5d8:	69bb      	ldr	r3, [r7, #24]
 801e5da:	015a      	lsls	r2, r3, #5
 801e5dc:	69fb      	ldr	r3, [r7, #28]
 801e5de:	4413      	add	r3, r2
 801e5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e5e4:	691a      	ldr	r2, [r3, #16]
 801e5e6:	68bb      	ldr	r3, [r7, #8]
 801e5e8:	699b      	ldr	r3, [r3, #24]
 801e5ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e5ee:	69b9      	ldr	r1, [r7, #24]
 801e5f0:	0148      	lsls	r0, r1, #5
 801e5f2:	69f9      	ldr	r1, [r7, #28]
 801e5f4:	4401      	add	r1, r0
 801e5f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e5fa:	4313      	orrs	r3, r2
 801e5fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e5fe:	68bb      	ldr	r3, [r7, #8]
 801e600:	791b      	ldrb	r3, [r3, #4]
 801e602:	2b01      	cmp	r3, #1
 801e604:	d11f      	bne.n	801e646 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e606:	69bb      	ldr	r3, [r7, #24]
 801e608:	015a      	lsls	r2, r3, #5
 801e60a:	69fb      	ldr	r3, [r7, #28]
 801e60c:	4413      	add	r3, r2
 801e60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e612:	691b      	ldr	r3, [r3, #16]
 801e614:	69ba      	ldr	r2, [r7, #24]
 801e616:	0151      	lsls	r1, r2, #5
 801e618:	69fa      	ldr	r2, [r7, #28]
 801e61a:	440a      	add	r2, r1
 801e61c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e620:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e624:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e626:	69bb      	ldr	r3, [r7, #24]
 801e628:	015a      	lsls	r2, r3, #5
 801e62a:	69fb      	ldr	r3, [r7, #28]
 801e62c:	4413      	add	r3, r2
 801e62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e632:	691b      	ldr	r3, [r3, #16]
 801e634:	69ba      	ldr	r2, [r7, #24]
 801e636:	0151      	lsls	r1, r2, #5
 801e638:	69fa      	ldr	r2, [r7, #28]
 801e63a:	440a      	add	r2, r1
 801e63c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e644:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e646:	79fb      	ldrb	r3, [r7, #7]
 801e648:	2b01      	cmp	r3, #1
 801e64a:	d14b      	bne.n	801e6e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	695b      	ldr	r3, [r3, #20]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d009      	beq.n	801e668 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e654:	69bb      	ldr	r3, [r7, #24]
 801e656:	015a      	lsls	r2, r3, #5
 801e658:	69fb      	ldr	r3, [r7, #28]
 801e65a:	4413      	add	r3, r2
 801e65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e660:	461a      	mov	r2, r3
 801e662:	68bb      	ldr	r3, [r7, #8]
 801e664:	695b      	ldr	r3, [r3, #20]
 801e666:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e668:	68bb      	ldr	r3, [r7, #8]
 801e66a:	791b      	ldrb	r3, [r3, #4]
 801e66c:	2b01      	cmp	r3, #1
 801e66e:	d128      	bne.n	801e6c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e676:	689b      	ldr	r3, [r3, #8]
 801e678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d110      	bne.n	801e6a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e680:	69bb      	ldr	r3, [r7, #24]
 801e682:	015a      	lsls	r2, r3, #5
 801e684:	69fb      	ldr	r3, [r7, #28]
 801e686:	4413      	add	r3, r2
 801e688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	69ba      	ldr	r2, [r7, #24]
 801e690:	0151      	lsls	r1, r2, #5
 801e692:	69fa      	ldr	r2, [r7, #28]
 801e694:	440a      	add	r2, r1
 801e696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e69a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e69e:	6013      	str	r3, [r2, #0]
 801e6a0:	e00f      	b.n	801e6c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e6a2:	69bb      	ldr	r3, [r7, #24]
 801e6a4:	015a      	lsls	r2, r3, #5
 801e6a6:	69fb      	ldr	r3, [r7, #28]
 801e6a8:	4413      	add	r3, r2
 801e6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	69ba      	ldr	r2, [r7, #24]
 801e6b2:	0151      	lsls	r1, r2, #5
 801e6b4:	69fa      	ldr	r2, [r7, #28]
 801e6b6:	440a      	add	r2, r1
 801e6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e6c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6c2:	69bb      	ldr	r3, [r7, #24]
 801e6c4:	015a      	lsls	r2, r3, #5
 801e6c6:	69fb      	ldr	r3, [r7, #28]
 801e6c8:	4413      	add	r3, r2
 801e6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	69ba      	ldr	r2, [r7, #24]
 801e6d2:	0151      	lsls	r1, r2, #5
 801e6d4:	69fa      	ldr	r2, [r7, #28]
 801e6d6:	440a      	add	r2, r1
 801e6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e6e0:	6013      	str	r3, [r2, #0]
 801e6e2:	e133      	b.n	801e94c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e6e4:	69bb      	ldr	r3, [r7, #24]
 801e6e6:	015a      	lsls	r2, r3, #5
 801e6e8:	69fb      	ldr	r3, [r7, #28]
 801e6ea:	4413      	add	r3, r2
 801e6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	69ba      	ldr	r2, [r7, #24]
 801e6f4:	0151      	lsls	r1, r2, #5
 801e6f6:	69fa      	ldr	r2, [r7, #28]
 801e6f8:	440a      	add	r2, r1
 801e6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e702:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e704:	68bb      	ldr	r3, [r7, #8]
 801e706:	791b      	ldrb	r3, [r3, #4]
 801e708:	2b01      	cmp	r3, #1
 801e70a:	d015      	beq.n	801e738 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e70c:	68bb      	ldr	r3, [r7, #8]
 801e70e:	699b      	ldr	r3, [r3, #24]
 801e710:	2b00      	cmp	r3, #0
 801e712:	f000 811b 	beq.w	801e94c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e716:	69fb      	ldr	r3, [r7, #28]
 801e718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e71c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e71e:	68bb      	ldr	r3, [r7, #8]
 801e720:	781b      	ldrb	r3, [r3, #0]
 801e722:	f003 030f 	and.w	r3, r3, #15
 801e726:	2101      	movs	r1, #1
 801e728:	fa01 f303 	lsl.w	r3, r1, r3
 801e72c:	69f9      	ldr	r1, [r7, #28]
 801e72e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e732:	4313      	orrs	r3, r2
 801e734:	634b      	str	r3, [r1, #52]	; 0x34
 801e736:	e109      	b.n	801e94c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e738:	69fb      	ldr	r3, [r7, #28]
 801e73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e73e:	689b      	ldr	r3, [r3, #8]
 801e740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e744:	2b00      	cmp	r3, #0
 801e746:	d110      	bne.n	801e76a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e748:	69bb      	ldr	r3, [r7, #24]
 801e74a:	015a      	lsls	r2, r3, #5
 801e74c:	69fb      	ldr	r3, [r7, #28]
 801e74e:	4413      	add	r3, r2
 801e750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	69ba      	ldr	r2, [r7, #24]
 801e758:	0151      	lsls	r1, r2, #5
 801e75a:	69fa      	ldr	r2, [r7, #28]
 801e75c:	440a      	add	r2, r1
 801e75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e766:	6013      	str	r3, [r2, #0]
 801e768:	e00f      	b.n	801e78a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e76a:	69bb      	ldr	r3, [r7, #24]
 801e76c:	015a      	lsls	r2, r3, #5
 801e76e:	69fb      	ldr	r3, [r7, #28]
 801e770:	4413      	add	r3, r2
 801e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	69ba      	ldr	r2, [r7, #24]
 801e77a:	0151      	lsls	r1, r2, #5
 801e77c:	69fa      	ldr	r2, [r7, #28]
 801e77e:	440a      	add	r2, r1
 801e780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e788:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e78a:	68bb      	ldr	r3, [r7, #8]
 801e78c:	6919      	ldr	r1, [r3, #16]
 801e78e:	68bb      	ldr	r3, [r7, #8]
 801e790:	781a      	ldrb	r2, [r3, #0]
 801e792:	68bb      	ldr	r3, [r7, #8]
 801e794:	699b      	ldr	r3, [r3, #24]
 801e796:	b298      	uxth	r0, r3
 801e798:	79fb      	ldrb	r3, [r7, #7]
 801e79a:	9300      	str	r3, [sp, #0]
 801e79c:	4603      	mov	r3, r0
 801e79e:	68f8      	ldr	r0, [r7, #12]
 801e7a0:	f000 fade 	bl	801ed60 <USB_WritePacket>
 801e7a4:	e0d2      	b.n	801e94c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e7a6:	69bb      	ldr	r3, [r7, #24]
 801e7a8:	015a      	lsls	r2, r3, #5
 801e7aa:	69fb      	ldr	r3, [r7, #28]
 801e7ac:	4413      	add	r3, r2
 801e7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7b2:	691b      	ldr	r3, [r3, #16]
 801e7b4:	69ba      	ldr	r2, [r7, #24]
 801e7b6:	0151      	lsls	r1, r2, #5
 801e7b8:	69fa      	ldr	r2, [r7, #28]
 801e7ba:	440a      	add	r2, r1
 801e7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7c0:	0cdb      	lsrs	r3, r3, #19
 801e7c2:	04db      	lsls	r3, r3, #19
 801e7c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e7c6:	69bb      	ldr	r3, [r7, #24]
 801e7c8:	015a      	lsls	r2, r3, #5
 801e7ca:	69fb      	ldr	r3, [r7, #28]
 801e7cc:	4413      	add	r3, r2
 801e7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7d2:	691b      	ldr	r3, [r3, #16]
 801e7d4:	69ba      	ldr	r2, [r7, #24]
 801e7d6:	0151      	lsls	r1, r2, #5
 801e7d8:	69fa      	ldr	r2, [r7, #28]
 801e7da:	440a      	add	r2, r1
 801e7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e7e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e7e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e7e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e7ea:	68bb      	ldr	r3, [r7, #8]
 801e7ec:	699b      	ldr	r3, [r3, #24]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d126      	bne.n	801e840 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e7f2:	69bb      	ldr	r3, [r7, #24]
 801e7f4:	015a      	lsls	r2, r3, #5
 801e7f6:	69fb      	ldr	r3, [r7, #28]
 801e7f8:	4413      	add	r3, r2
 801e7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e7fe:	691a      	ldr	r2, [r3, #16]
 801e800:	68bb      	ldr	r3, [r7, #8]
 801e802:	68db      	ldr	r3, [r3, #12]
 801e804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e808:	69b9      	ldr	r1, [r7, #24]
 801e80a:	0148      	lsls	r0, r1, #5
 801e80c:	69f9      	ldr	r1, [r7, #28]
 801e80e:	4401      	add	r1, r0
 801e810:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e814:	4313      	orrs	r3, r2
 801e816:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e818:	69bb      	ldr	r3, [r7, #24]
 801e81a:	015a      	lsls	r2, r3, #5
 801e81c:	69fb      	ldr	r3, [r7, #28]
 801e81e:	4413      	add	r3, r2
 801e820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e824:	691b      	ldr	r3, [r3, #16]
 801e826:	69ba      	ldr	r2, [r7, #24]
 801e828:	0151      	lsls	r1, r2, #5
 801e82a:	69fa      	ldr	r2, [r7, #28]
 801e82c:	440a      	add	r2, r1
 801e82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e836:	6113      	str	r3, [r2, #16]
 801e838:	e03a      	b.n	801e8b0 <USB_EPStartXfer+0x3e4>
 801e83a:	bf00      	nop
 801e83c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e840:	68bb      	ldr	r3, [r7, #8]
 801e842:	699a      	ldr	r2, [r3, #24]
 801e844:	68bb      	ldr	r3, [r7, #8]
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	4413      	add	r3, r2
 801e84a:	1e5a      	subs	r2, r3, #1
 801e84c:	68bb      	ldr	r3, [r7, #8]
 801e84e:	68db      	ldr	r3, [r3, #12]
 801e850:	fbb2 f3f3 	udiv	r3, r2, r3
 801e854:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801e856:	68bb      	ldr	r3, [r7, #8]
 801e858:	68db      	ldr	r3, [r3, #12]
 801e85a:	8afa      	ldrh	r2, [r7, #22]
 801e85c:	fb03 f202 	mul.w	r2, r3, r2
 801e860:	68bb      	ldr	r3, [r7, #8]
 801e862:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e864:	69bb      	ldr	r3, [r7, #24]
 801e866:	015a      	lsls	r2, r3, #5
 801e868:	69fb      	ldr	r3, [r7, #28]
 801e86a:	4413      	add	r3, r2
 801e86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e870:	691a      	ldr	r2, [r3, #16]
 801e872:	8afb      	ldrh	r3, [r7, #22]
 801e874:	04d9      	lsls	r1, r3, #19
 801e876:	4b38      	ldr	r3, [pc, #224]	; (801e958 <USB_EPStartXfer+0x48c>)
 801e878:	400b      	ands	r3, r1
 801e87a:	69b9      	ldr	r1, [r7, #24]
 801e87c:	0148      	lsls	r0, r1, #5
 801e87e:	69f9      	ldr	r1, [r7, #28]
 801e880:	4401      	add	r1, r0
 801e882:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e886:	4313      	orrs	r3, r2
 801e888:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801e88a:	69bb      	ldr	r3, [r7, #24]
 801e88c:	015a      	lsls	r2, r3, #5
 801e88e:	69fb      	ldr	r3, [r7, #28]
 801e890:	4413      	add	r3, r2
 801e892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e896:	691a      	ldr	r2, [r3, #16]
 801e898:	68bb      	ldr	r3, [r7, #8]
 801e89a:	69db      	ldr	r3, [r3, #28]
 801e89c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e8a0:	69b9      	ldr	r1, [r7, #24]
 801e8a2:	0148      	lsls	r0, r1, #5
 801e8a4:	69f9      	ldr	r1, [r7, #28]
 801e8a6:	4401      	add	r1, r0
 801e8a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e8ac:	4313      	orrs	r3, r2
 801e8ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801e8b0:	79fb      	ldrb	r3, [r7, #7]
 801e8b2:	2b01      	cmp	r3, #1
 801e8b4:	d10d      	bne.n	801e8d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801e8b6:	68bb      	ldr	r3, [r7, #8]
 801e8b8:	691b      	ldr	r3, [r3, #16]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d009      	beq.n	801e8d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801e8be:	68bb      	ldr	r3, [r7, #8]
 801e8c0:	6919      	ldr	r1, [r3, #16]
 801e8c2:	69bb      	ldr	r3, [r7, #24]
 801e8c4:	015a      	lsls	r2, r3, #5
 801e8c6:	69fb      	ldr	r3, [r7, #28]
 801e8c8:	4413      	add	r3, r2
 801e8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8ce:	460a      	mov	r2, r1
 801e8d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801e8d2:	68bb      	ldr	r3, [r7, #8]
 801e8d4:	791b      	ldrb	r3, [r3, #4]
 801e8d6:	2b01      	cmp	r3, #1
 801e8d8:	d128      	bne.n	801e92c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e8da:	69fb      	ldr	r3, [r7, #28]
 801e8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8e0:	689b      	ldr	r3, [r3, #8]
 801e8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d110      	bne.n	801e90c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e8ea:	69bb      	ldr	r3, [r7, #24]
 801e8ec:	015a      	lsls	r2, r3, #5
 801e8ee:	69fb      	ldr	r3, [r7, #28]
 801e8f0:	4413      	add	r3, r2
 801e8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	69ba      	ldr	r2, [r7, #24]
 801e8fa:	0151      	lsls	r1, r2, #5
 801e8fc:	69fa      	ldr	r2, [r7, #28]
 801e8fe:	440a      	add	r2, r1
 801e900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e904:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e908:	6013      	str	r3, [r2, #0]
 801e90a:	e00f      	b.n	801e92c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e90c:	69bb      	ldr	r3, [r7, #24]
 801e90e:	015a      	lsls	r2, r3, #5
 801e910:	69fb      	ldr	r3, [r7, #28]
 801e912:	4413      	add	r3, r2
 801e914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	69ba      	ldr	r2, [r7, #24]
 801e91c:	0151      	lsls	r1, r2, #5
 801e91e:	69fa      	ldr	r2, [r7, #28]
 801e920:	440a      	add	r2, r1
 801e922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e92a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e92c:	69bb      	ldr	r3, [r7, #24]
 801e92e:	015a      	lsls	r2, r3, #5
 801e930:	69fb      	ldr	r3, [r7, #28]
 801e932:	4413      	add	r3, r2
 801e934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	69ba      	ldr	r2, [r7, #24]
 801e93c:	0151      	lsls	r1, r2, #5
 801e93e:	69fa      	ldr	r2, [r7, #28]
 801e940:	440a      	add	r2, r1
 801e942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e94a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801e94c:	2300      	movs	r3, #0
}
 801e94e:	4618      	mov	r0, r3
 801e950:	3720      	adds	r7, #32
 801e952:	46bd      	mov	sp, r7
 801e954:	bd80      	pop	{r7, pc}
 801e956:	bf00      	nop
 801e958:	1ff80000 	.word	0x1ff80000

0801e95c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e95c:	b480      	push	{r7}
 801e95e:	b087      	sub	sp, #28
 801e960:	af00      	add	r7, sp, #0
 801e962:	60f8      	str	r0, [r7, #12]
 801e964:	60b9      	str	r1, [r7, #8]
 801e966:	4613      	mov	r3, r2
 801e968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801e96e:	68bb      	ldr	r3, [r7, #8]
 801e970:	781b      	ldrb	r3, [r3, #0]
 801e972:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e974:	68bb      	ldr	r3, [r7, #8]
 801e976:	785b      	ldrb	r3, [r3, #1]
 801e978:	2b01      	cmp	r3, #1
 801e97a:	f040 80ce 	bne.w	801eb1a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e97e:	68bb      	ldr	r3, [r7, #8]
 801e980:	699b      	ldr	r3, [r3, #24]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d132      	bne.n	801e9ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e986:	693b      	ldr	r3, [r7, #16]
 801e988:	015a      	lsls	r2, r3, #5
 801e98a:	697b      	ldr	r3, [r7, #20]
 801e98c:	4413      	add	r3, r2
 801e98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e992:	691b      	ldr	r3, [r3, #16]
 801e994:	693a      	ldr	r2, [r7, #16]
 801e996:	0151      	lsls	r1, r2, #5
 801e998:	697a      	ldr	r2, [r7, #20]
 801e99a:	440a      	add	r2, r1
 801e99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e9a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e9a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e9aa:	693b      	ldr	r3, [r7, #16]
 801e9ac:	015a      	lsls	r2, r3, #5
 801e9ae:	697b      	ldr	r3, [r7, #20]
 801e9b0:	4413      	add	r3, r2
 801e9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9b6:	691b      	ldr	r3, [r3, #16]
 801e9b8:	693a      	ldr	r2, [r7, #16]
 801e9ba:	0151      	lsls	r1, r2, #5
 801e9bc:	697a      	ldr	r2, [r7, #20]
 801e9be:	440a      	add	r2, r1
 801e9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e9c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9ca:	693b      	ldr	r3, [r7, #16]
 801e9cc:	015a      	lsls	r2, r3, #5
 801e9ce:	697b      	ldr	r3, [r7, #20]
 801e9d0:	4413      	add	r3, r2
 801e9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9d6:	691b      	ldr	r3, [r3, #16]
 801e9d8:	693a      	ldr	r2, [r7, #16]
 801e9da:	0151      	lsls	r1, r2, #5
 801e9dc:	697a      	ldr	r2, [r7, #20]
 801e9de:	440a      	add	r2, r1
 801e9e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e9e4:	0cdb      	lsrs	r3, r3, #19
 801e9e6:	04db      	lsls	r3, r3, #19
 801e9e8:	6113      	str	r3, [r2, #16]
 801e9ea:	e04e      	b.n	801ea8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e9ec:	693b      	ldr	r3, [r7, #16]
 801e9ee:	015a      	lsls	r2, r3, #5
 801e9f0:	697b      	ldr	r3, [r7, #20]
 801e9f2:	4413      	add	r3, r2
 801e9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e9f8:	691b      	ldr	r3, [r3, #16]
 801e9fa:	693a      	ldr	r2, [r7, #16]
 801e9fc:	0151      	lsls	r1, r2, #5
 801e9fe:	697a      	ldr	r2, [r7, #20]
 801ea00:	440a      	add	r2, r1
 801ea02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea06:	0cdb      	lsrs	r3, r3, #19
 801ea08:	04db      	lsls	r3, r3, #19
 801ea0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801ea0c:	693b      	ldr	r3, [r7, #16]
 801ea0e:	015a      	lsls	r2, r3, #5
 801ea10:	697b      	ldr	r3, [r7, #20]
 801ea12:	4413      	add	r3, r2
 801ea14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea18:	691b      	ldr	r3, [r3, #16]
 801ea1a:	693a      	ldr	r2, [r7, #16]
 801ea1c:	0151      	lsls	r1, r2, #5
 801ea1e:	697a      	ldr	r2, [r7, #20]
 801ea20:	440a      	add	r2, r1
 801ea22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ea2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ea2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ea30:	68bb      	ldr	r3, [r7, #8]
 801ea32:	699a      	ldr	r2, [r3, #24]
 801ea34:	68bb      	ldr	r3, [r7, #8]
 801ea36:	68db      	ldr	r3, [r3, #12]
 801ea38:	429a      	cmp	r2, r3
 801ea3a:	d903      	bls.n	801ea44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ea3c:	68bb      	ldr	r3, [r7, #8]
 801ea3e:	68da      	ldr	r2, [r3, #12]
 801ea40:	68bb      	ldr	r3, [r7, #8]
 801ea42:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ea44:	693b      	ldr	r3, [r7, #16]
 801ea46:	015a      	lsls	r2, r3, #5
 801ea48:	697b      	ldr	r3, [r7, #20]
 801ea4a:	4413      	add	r3, r2
 801ea4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea50:	691b      	ldr	r3, [r3, #16]
 801ea52:	693a      	ldr	r2, [r7, #16]
 801ea54:	0151      	lsls	r1, r2, #5
 801ea56:	697a      	ldr	r2, [r7, #20]
 801ea58:	440a      	add	r2, r1
 801ea5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ea5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ea62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ea64:	693b      	ldr	r3, [r7, #16]
 801ea66:	015a      	lsls	r2, r3, #5
 801ea68:	697b      	ldr	r3, [r7, #20]
 801ea6a:	4413      	add	r3, r2
 801ea6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ea70:	691a      	ldr	r2, [r3, #16]
 801ea72:	68bb      	ldr	r3, [r7, #8]
 801ea74:	699b      	ldr	r3, [r3, #24]
 801ea76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea7a:	6939      	ldr	r1, [r7, #16]
 801ea7c:	0148      	lsls	r0, r1, #5
 801ea7e:	6979      	ldr	r1, [r7, #20]
 801ea80:	4401      	add	r1, r0
 801ea82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ea86:	4313      	orrs	r3, r2
 801ea88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea8a:	79fb      	ldrb	r3, [r7, #7]
 801ea8c:	2b01      	cmp	r3, #1
 801ea8e:	d11e      	bne.n	801eace <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	695b      	ldr	r3, [r3, #20]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d009      	beq.n	801eaac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ea98:	693b      	ldr	r3, [r7, #16]
 801ea9a:	015a      	lsls	r2, r3, #5
 801ea9c:	697b      	ldr	r3, [r7, #20]
 801ea9e:	4413      	add	r3, r2
 801eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eaa4:	461a      	mov	r2, r3
 801eaa6:	68bb      	ldr	r3, [r7, #8]
 801eaa8:	695b      	ldr	r3, [r3, #20]
 801eaaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eaac:	693b      	ldr	r3, [r7, #16]
 801eaae:	015a      	lsls	r2, r3, #5
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	4413      	add	r3, r2
 801eab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	693a      	ldr	r2, [r7, #16]
 801eabc:	0151      	lsls	r1, r2, #5
 801eabe:	697a      	ldr	r2, [r7, #20]
 801eac0:	440a      	add	r2, r1
 801eac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaca:	6013      	str	r3, [r2, #0]
 801eacc:	e097      	b.n	801ebfe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801eace:	693b      	ldr	r3, [r7, #16]
 801ead0:	015a      	lsls	r2, r3, #5
 801ead2:	697b      	ldr	r3, [r7, #20]
 801ead4:	4413      	add	r3, r2
 801ead6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	693a      	ldr	r2, [r7, #16]
 801eade:	0151      	lsls	r1, r2, #5
 801eae0:	697a      	ldr	r2, [r7, #20]
 801eae2:	440a      	add	r2, r1
 801eae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eae8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eaec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801eaee:	68bb      	ldr	r3, [r7, #8]
 801eaf0:	699b      	ldr	r3, [r3, #24]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	f000 8083 	beq.w	801ebfe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801eaf8:	697b      	ldr	r3, [r7, #20]
 801eafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801eafe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801eb00:	68bb      	ldr	r3, [r7, #8]
 801eb02:	781b      	ldrb	r3, [r3, #0]
 801eb04:	f003 030f 	and.w	r3, r3, #15
 801eb08:	2101      	movs	r1, #1
 801eb0a:	fa01 f303 	lsl.w	r3, r1, r3
 801eb0e:	6979      	ldr	r1, [r7, #20]
 801eb10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eb14:	4313      	orrs	r3, r2
 801eb16:	634b      	str	r3, [r1, #52]	; 0x34
 801eb18:	e071      	b.n	801ebfe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801eb1a:	693b      	ldr	r3, [r7, #16]
 801eb1c:	015a      	lsls	r2, r3, #5
 801eb1e:	697b      	ldr	r3, [r7, #20]
 801eb20:	4413      	add	r3, r2
 801eb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb26:	691b      	ldr	r3, [r3, #16]
 801eb28:	693a      	ldr	r2, [r7, #16]
 801eb2a:	0151      	lsls	r1, r2, #5
 801eb2c:	697a      	ldr	r2, [r7, #20]
 801eb2e:	440a      	add	r2, r1
 801eb30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb34:	0cdb      	lsrs	r3, r3, #19
 801eb36:	04db      	lsls	r3, r3, #19
 801eb38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eb3a:	693b      	ldr	r3, [r7, #16]
 801eb3c:	015a      	lsls	r2, r3, #5
 801eb3e:	697b      	ldr	r3, [r7, #20]
 801eb40:	4413      	add	r3, r2
 801eb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb46:	691b      	ldr	r3, [r3, #16]
 801eb48:	693a      	ldr	r2, [r7, #16]
 801eb4a:	0151      	lsls	r1, r2, #5
 801eb4c:	697a      	ldr	r2, [r7, #20]
 801eb4e:	440a      	add	r2, r1
 801eb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801eb5e:	68bb      	ldr	r3, [r7, #8]
 801eb60:	699b      	ldr	r3, [r3, #24]
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d003      	beq.n	801eb6e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801eb66:	68bb      	ldr	r3, [r7, #8]
 801eb68:	68da      	ldr	r2, [r3, #12]
 801eb6a:	68bb      	ldr	r3, [r7, #8]
 801eb6c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801eb6e:	68bb      	ldr	r3, [r7, #8]
 801eb70:	68da      	ldr	r2, [r3, #12]
 801eb72:	68bb      	ldr	r3, [r7, #8]
 801eb74:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801eb76:	693b      	ldr	r3, [r7, #16]
 801eb78:	015a      	lsls	r2, r3, #5
 801eb7a:	697b      	ldr	r3, [r7, #20]
 801eb7c:	4413      	add	r3, r2
 801eb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eb82:	691b      	ldr	r3, [r3, #16]
 801eb84:	693a      	ldr	r2, [r7, #16]
 801eb86:	0151      	lsls	r1, r2, #5
 801eb88:	697a      	ldr	r2, [r7, #20]
 801eb8a:	440a      	add	r2, r1
 801eb8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eb90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801eb96:	693b      	ldr	r3, [r7, #16]
 801eb98:	015a      	lsls	r2, r3, #5
 801eb9a:	697b      	ldr	r3, [r7, #20]
 801eb9c:	4413      	add	r3, r2
 801eb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eba2:	691a      	ldr	r2, [r3, #16]
 801eba4:	68bb      	ldr	r3, [r7, #8]
 801eba6:	69db      	ldr	r3, [r3, #28]
 801eba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ebac:	6939      	ldr	r1, [r7, #16]
 801ebae:	0148      	lsls	r0, r1, #5
 801ebb0:	6979      	ldr	r1, [r7, #20]
 801ebb2:	4401      	add	r1, r0
 801ebb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ebb8:	4313      	orrs	r3, r2
 801ebba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801ebbc:	79fb      	ldrb	r3, [r7, #7]
 801ebbe:	2b01      	cmp	r3, #1
 801ebc0:	d10d      	bne.n	801ebde <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ebc2:	68bb      	ldr	r3, [r7, #8]
 801ebc4:	691b      	ldr	r3, [r3, #16]
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d009      	beq.n	801ebde <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ebca:	68bb      	ldr	r3, [r7, #8]
 801ebcc:	6919      	ldr	r1, [r3, #16]
 801ebce:	693b      	ldr	r3, [r7, #16]
 801ebd0:	015a      	lsls	r2, r3, #5
 801ebd2:	697b      	ldr	r3, [r7, #20]
 801ebd4:	4413      	add	r3, r2
 801ebd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebda:	460a      	mov	r2, r1
 801ebdc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ebde:	693b      	ldr	r3, [r7, #16]
 801ebe0:	015a      	lsls	r2, r3, #5
 801ebe2:	697b      	ldr	r3, [r7, #20]
 801ebe4:	4413      	add	r3, r2
 801ebe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	693a      	ldr	r2, [r7, #16]
 801ebee:	0151      	lsls	r1, r2, #5
 801ebf0:	697a      	ldr	r2, [r7, #20]
 801ebf2:	440a      	add	r2, r1
 801ebf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ebf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ebfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ebfe:	2300      	movs	r3, #0
}
 801ec00:	4618      	mov	r0, r3
 801ec02:	371c      	adds	r7, #28
 801ec04:	46bd      	mov	sp, r7
 801ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec0a:	4770      	bx	lr

0801ec0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ec0c:	b480      	push	{r7}
 801ec0e:	b087      	sub	sp, #28
 801ec10:	af00      	add	r7, sp, #0
 801ec12:	6078      	str	r0, [r7, #4]
 801ec14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801ec16:	2300      	movs	r3, #0
 801ec18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801ec1a:	2300      	movs	r3, #0
 801ec1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	785b      	ldrb	r3, [r3, #1]
 801ec26:	2b01      	cmp	r3, #1
 801ec28:	d14a      	bne.n	801ecc0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ec2a:	683b      	ldr	r3, [r7, #0]
 801ec2c:	781b      	ldrb	r3, [r3, #0]
 801ec2e:	015a      	lsls	r2, r3, #5
 801ec30:	693b      	ldr	r3, [r7, #16]
 801ec32:	4413      	add	r3, r2
 801ec34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ec3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ec42:	f040 8086 	bne.w	801ed52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	781b      	ldrb	r3, [r3, #0]
 801ec4a:	015a      	lsls	r2, r3, #5
 801ec4c:	693b      	ldr	r3, [r7, #16]
 801ec4e:	4413      	add	r3, r2
 801ec50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	683a      	ldr	r2, [r7, #0]
 801ec58:	7812      	ldrb	r2, [r2, #0]
 801ec5a:	0151      	lsls	r1, r2, #5
 801ec5c:	693a      	ldr	r2, [r7, #16]
 801ec5e:	440a      	add	r2, r1
 801ec60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ec68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801ec6a:	683b      	ldr	r3, [r7, #0]
 801ec6c:	781b      	ldrb	r3, [r3, #0]
 801ec6e:	015a      	lsls	r2, r3, #5
 801ec70:	693b      	ldr	r3, [r7, #16]
 801ec72:	4413      	add	r3, r2
 801ec74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	683a      	ldr	r2, [r7, #0]
 801ec7c:	7812      	ldrb	r2, [r2, #0]
 801ec7e:	0151      	lsls	r1, r2, #5
 801ec80:	693a      	ldr	r2, [r7, #16]
 801ec82:	440a      	add	r2, r1
 801ec84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ec8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	3301      	adds	r3, #1
 801ec92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	f242 7210 	movw	r2, #10000	; 0x2710
 801ec9a:	4293      	cmp	r3, r2
 801ec9c:	d902      	bls.n	801eca4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801ec9e:	2301      	movs	r3, #1
 801eca0:	75fb      	strb	r3, [r7, #23]
          break;
 801eca2:	e056      	b.n	801ed52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801eca4:	683b      	ldr	r3, [r7, #0]
 801eca6:	781b      	ldrb	r3, [r3, #0]
 801eca8:	015a      	lsls	r2, r3, #5
 801ecaa:	693b      	ldr	r3, [r7, #16]
 801ecac:	4413      	add	r3, r2
 801ecae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ecb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ecbc:	d0e7      	beq.n	801ec8e <USB_EPStopXfer+0x82>
 801ecbe:	e048      	b.n	801ed52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ecc0:	683b      	ldr	r3, [r7, #0]
 801ecc2:	781b      	ldrb	r3, [r3, #0]
 801ecc4:	015a      	lsls	r2, r3, #5
 801ecc6:	693b      	ldr	r3, [r7, #16]
 801ecc8:	4413      	add	r3, r2
 801ecca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ecd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ecd8:	d13b      	bne.n	801ed52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801ecda:	683b      	ldr	r3, [r7, #0]
 801ecdc:	781b      	ldrb	r3, [r3, #0]
 801ecde:	015a      	lsls	r2, r3, #5
 801ece0:	693b      	ldr	r3, [r7, #16]
 801ece2:	4413      	add	r3, r2
 801ece4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	683a      	ldr	r2, [r7, #0]
 801ecec:	7812      	ldrb	r2, [r2, #0]
 801ecee:	0151      	lsls	r1, r2, #5
 801ecf0:	693a      	ldr	r2, [r7, #16]
 801ecf2:	440a      	add	r2, r1
 801ecf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ecf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ecfc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	781b      	ldrb	r3, [r3, #0]
 801ed02:	015a      	lsls	r2, r3, #5
 801ed04:	693b      	ldr	r3, [r7, #16]
 801ed06:	4413      	add	r3, r2
 801ed08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	683a      	ldr	r2, [r7, #0]
 801ed10:	7812      	ldrb	r2, [r2, #0]
 801ed12:	0151      	lsls	r1, r2, #5
 801ed14:	693a      	ldr	r2, [r7, #16]
 801ed16:	440a      	add	r2, r1
 801ed18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ed20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	3301      	adds	r3, #1
 801ed26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	f242 7210 	movw	r2, #10000	; 0x2710
 801ed2e:	4293      	cmp	r3, r2
 801ed30:	d902      	bls.n	801ed38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801ed32:	2301      	movs	r3, #1
 801ed34:	75fb      	strb	r3, [r7, #23]
          break;
 801ed36:	e00c      	b.n	801ed52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801ed38:	683b      	ldr	r3, [r7, #0]
 801ed3a:	781b      	ldrb	r3, [r3, #0]
 801ed3c:	015a      	lsls	r2, r3, #5
 801ed3e:	693b      	ldr	r3, [r7, #16]
 801ed40:	4413      	add	r3, r2
 801ed42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ed4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ed50:	d0e7      	beq.n	801ed22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801ed52:	7dfb      	ldrb	r3, [r7, #23]
}
 801ed54:	4618      	mov	r0, r3
 801ed56:	371c      	adds	r7, #28
 801ed58:	46bd      	mov	sp, r7
 801ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed5e:	4770      	bx	lr

0801ed60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ed60:	b480      	push	{r7}
 801ed62:	b089      	sub	sp, #36	; 0x24
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	60f8      	str	r0, [r7, #12]
 801ed68:	60b9      	str	r1, [r7, #8]
 801ed6a:	4611      	mov	r1, r2
 801ed6c:	461a      	mov	r2, r3
 801ed6e:	460b      	mov	r3, r1
 801ed70:	71fb      	strb	r3, [r7, #7]
 801ed72:	4613      	mov	r3, r2
 801ed74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801ed7a:	68bb      	ldr	r3, [r7, #8]
 801ed7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801ed7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d123      	bne.n	801edce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801ed86:	88bb      	ldrh	r3, [r7, #4]
 801ed88:	3303      	adds	r3, #3
 801ed8a:	089b      	lsrs	r3, r3, #2
 801ed8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801ed8e:	2300      	movs	r3, #0
 801ed90:	61bb      	str	r3, [r7, #24]
 801ed92:	e018      	b.n	801edc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801ed94:	79fb      	ldrb	r3, [r7, #7]
 801ed96:	031a      	lsls	r2, r3, #12
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	4413      	add	r3, r2
 801ed9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801eda0:	461a      	mov	r2, r3
 801eda2:	69fb      	ldr	r3, [r7, #28]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	6013      	str	r3, [r2, #0]
      pSrc++;
 801eda8:	69fb      	ldr	r3, [r7, #28]
 801edaa:	3301      	adds	r3, #1
 801edac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801edae:	69fb      	ldr	r3, [r7, #28]
 801edb0:	3301      	adds	r3, #1
 801edb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801edb4:	69fb      	ldr	r3, [r7, #28]
 801edb6:	3301      	adds	r3, #1
 801edb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801edba:	69fb      	ldr	r3, [r7, #28]
 801edbc:	3301      	adds	r3, #1
 801edbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801edc0:	69bb      	ldr	r3, [r7, #24]
 801edc2:	3301      	adds	r3, #1
 801edc4:	61bb      	str	r3, [r7, #24]
 801edc6:	69ba      	ldr	r2, [r7, #24]
 801edc8:	693b      	ldr	r3, [r7, #16]
 801edca:	429a      	cmp	r2, r3
 801edcc:	d3e2      	bcc.n	801ed94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801edce:	2300      	movs	r3, #0
}
 801edd0:	4618      	mov	r0, r3
 801edd2:	3724      	adds	r7, #36	; 0x24
 801edd4:	46bd      	mov	sp, r7
 801edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edda:	4770      	bx	lr

0801eddc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801eddc:	b480      	push	{r7}
 801edde:	b08b      	sub	sp, #44	; 0x2c
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	60f8      	str	r0, [r7, #12]
 801ede4:	60b9      	str	r1, [r7, #8]
 801ede6:	4613      	mov	r3, r2
 801ede8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801edee:	68bb      	ldr	r3, [r7, #8]
 801edf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801edf2:	88fb      	ldrh	r3, [r7, #6]
 801edf4:	089b      	lsrs	r3, r3, #2
 801edf6:	b29b      	uxth	r3, r3
 801edf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801edfa:	88fb      	ldrh	r3, [r7, #6]
 801edfc:	f003 0303 	and.w	r3, r3, #3
 801ee00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801ee02:	2300      	movs	r3, #0
 801ee04:	623b      	str	r3, [r7, #32]
 801ee06:	e014      	b.n	801ee32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ee08:	69bb      	ldr	r3, [r7, #24]
 801ee0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ee0e:	681a      	ldr	r2, [r3, #0]
 801ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee12:	601a      	str	r2, [r3, #0]
    pDest++;
 801ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee16:	3301      	adds	r3, #1
 801ee18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee1c:	3301      	adds	r3, #1
 801ee1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ee20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee22:	3301      	adds	r3, #1
 801ee24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee28:	3301      	adds	r3, #1
 801ee2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801ee2c:	6a3b      	ldr	r3, [r7, #32]
 801ee2e:	3301      	adds	r3, #1
 801ee30:	623b      	str	r3, [r7, #32]
 801ee32:	6a3a      	ldr	r2, [r7, #32]
 801ee34:	697b      	ldr	r3, [r7, #20]
 801ee36:	429a      	cmp	r2, r3
 801ee38:	d3e6      	bcc.n	801ee08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801ee3a:	8bfb      	ldrh	r3, [r7, #30]
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d01e      	beq.n	801ee7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801ee40:	2300      	movs	r3, #0
 801ee42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ee44:	69bb      	ldr	r3, [r7, #24]
 801ee46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ee4a:	461a      	mov	r2, r3
 801ee4c:	f107 0310 	add.w	r3, r7, #16
 801ee50:	6812      	ldr	r2, [r2, #0]
 801ee52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ee54:	693a      	ldr	r2, [r7, #16]
 801ee56:	6a3b      	ldr	r3, [r7, #32]
 801ee58:	b2db      	uxtb	r3, r3
 801ee5a:	00db      	lsls	r3, r3, #3
 801ee5c:	fa22 f303 	lsr.w	r3, r2, r3
 801ee60:	b2da      	uxtb	r2, r3
 801ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee64:	701a      	strb	r2, [r3, #0]
      i++;
 801ee66:	6a3b      	ldr	r3, [r7, #32]
 801ee68:	3301      	adds	r3, #1
 801ee6a:	623b      	str	r3, [r7, #32]
      pDest++;
 801ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee6e:	3301      	adds	r3, #1
 801ee70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801ee72:	8bfb      	ldrh	r3, [r7, #30]
 801ee74:	3b01      	subs	r3, #1
 801ee76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801ee78:	8bfb      	ldrh	r3, [r7, #30]
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	d1ea      	bne.n	801ee54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801ee7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ee80:	4618      	mov	r0, r3
 801ee82:	372c      	adds	r7, #44	; 0x2c
 801ee84:	46bd      	mov	sp, r7
 801ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee8a:	4770      	bx	lr

0801ee8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ee8c:	b480      	push	{r7}
 801ee8e:	b085      	sub	sp, #20
 801ee90:	af00      	add	r7, sp, #0
 801ee92:	6078      	str	r0, [r7, #4]
 801ee94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ee9a:	683b      	ldr	r3, [r7, #0]
 801ee9c:	781b      	ldrb	r3, [r3, #0]
 801ee9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801eea0:	683b      	ldr	r3, [r7, #0]
 801eea2:	785b      	ldrb	r3, [r3, #1]
 801eea4:	2b01      	cmp	r3, #1
 801eea6:	d12c      	bne.n	801ef02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801eea8:	68bb      	ldr	r3, [r7, #8]
 801eeaa:	015a      	lsls	r2, r3, #5
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	4413      	add	r3, r2
 801eeb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	db12      	blt.n	801eee0 <USB_EPSetStall+0x54>
 801eeba:	68bb      	ldr	r3, [r7, #8]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d00f      	beq.n	801eee0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801eec0:	68bb      	ldr	r3, [r7, #8]
 801eec2:	015a      	lsls	r2, r3, #5
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	4413      	add	r3, r2
 801eec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	68ba      	ldr	r2, [r7, #8]
 801eed0:	0151      	lsls	r1, r2, #5
 801eed2:	68fa      	ldr	r2, [r7, #12]
 801eed4:	440a      	add	r2, r1
 801eed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eeda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801eede:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801eee0:	68bb      	ldr	r3, [r7, #8]
 801eee2:	015a      	lsls	r2, r3, #5
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	4413      	add	r3, r2
 801eee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	68ba      	ldr	r2, [r7, #8]
 801eef0:	0151      	lsls	r1, r2, #5
 801eef2:	68fa      	ldr	r2, [r7, #12]
 801eef4:	440a      	add	r2, r1
 801eef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eefa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801eefe:	6013      	str	r3, [r2, #0]
 801ef00:	e02b      	b.n	801ef5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ef02:	68bb      	ldr	r3, [r7, #8]
 801ef04:	015a      	lsls	r2, r3, #5
 801ef06:	68fb      	ldr	r3, [r7, #12]
 801ef08:	4413      	add	r3, r2
 801ef0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	db12      	blt.n	801ef3a <USB_EPSetStall+0xae>
 801ef14:	68bb      	ldr	r3, [r7, #8]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d00f      	beq.n	801ef3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ef1a:	68bb      	ldr	r3, [r7, #8]
 801ef1c:	015a      	lsls	r2, r3, #5
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	4413      	add	r3, r2
 801ef22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	68ba      	ldr	r2, [r7, #8]
 801ef2a:	0151      	lsls	r1, r2, #5
 801ef2c:	68fa      	ldr	r2, [r7, #12]
 801ef2e:	440a      	add	r2, r1
 801ef30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801ef38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ef3a:	68bb      	ldr	r3, [r7, #8]
 801ef3c:	015a      	lsls	r2, r3, #5
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	4413      	add	r3, r2
 801ef42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	68ba      	ldr	r2, [r7, #8]
 801ef4a:	0151      	lsls	r1, r2, #5
 801ef4c:	68fa      	ldr	r2, [r7, #12]
 801ef4e:	440a      	add	r2, r1
 801ef50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ef58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ef5a:	2300      	movs	r3, #0
}
 801ef5c:	4618      	mov	r0, r3
 801ef5e:	3714      	adds	r7, #20
 801ef60:	46bd      	mov	sp, r7
 801ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef66:	4770      	bx	lr

0801ef68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ef68:	b480      	push	{r7}
 801ef6a:	b085      	sub	sp, #20
 801ef6c:	af00      	add	r7, sp, #0
 801ef6e:	6078      	str	r0, [r7, #4]
 801ef70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ef76:	683b      	ldr	r3, [r7, #0]
 801ef78:	781b      	ldrb	r3, [r3, #0]
 801ef7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	785b      	ldrb	r3, [r3, #1]
 801ef80:	2b01      	cmp	r3, #1
 801ef82:	d128      	bne.n	801efd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ef84:	68bb      	ldr	r3, [r7, #8]
 801ef86:	015a      	lsls	r2, r3, #5
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	4413      	add	r3, r2
 801ef8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	68ba      	ldr	r2, [r7, #8]
 801ef94:	0151      	lsls	r1, r2, #5
 801ef96:	68fa      	ldr	r2, [r7, #12]
 801ef98:	440a      	add	r2, r1
 801ef9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ef9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801efa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801efa4:	683b      	ldr	r3, [r7, #0]
 801efa6:	791b      	ldrb	r3, [r3, #4]
 801efa8:	2b03      	cmp	r3, #3
 801efaa:	d003      	beq.n	801efb4 <USB_EPClearStall+0x4c>
 801efac:	683b      	ldr	r3, [r7, #0]
 801efae:	791b      	ldrb	r3, [r3, #4]
 801efb0:	2b02      	cmp	r3, #2
 801efb2:	d138      	bne.n	801f026 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801efb4:	68bb      	ldr	r3, [r7, #8]
 801efb6:	015a      	lsls	r2, r3, #5
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	4413      	add	r3, r2
 801efbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	68ba      	ldr	r2, [r7, #8]
 801efc4:	0151      	lsls	r1, r2, #5
 801efc6:	68fa      	ldr	r2, [r7, #12]
 801efc8:	440a      	add	r2, r1
 801efca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801efce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801efd2:	6013      	str	r3, [r2, #0]
 801efd4:	e027      	b.n	801f026 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801efd6:	68bb      	ldr	r3, [r7, #8]
 801efd8:	015a      	lsls	r2, r3, #5
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	4413      	add	r3, r2
 801efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	68ba      	ldr	r2, [r7, #8]
 801efe6:	0151      	lsls	r1, r2, #5
 801efe8:	68fa      	ldr	r2, [r7, #12]
 801efea:	440a      	add	r2, r1
 801efec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eff0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801eff4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	791b      	ldrb	r3, [r3, #4]
 801effa:	2b03      	cmp	r3, #3
 801effc:	d003      	beq.n	801f006 <USB_EPClearStall+0x9e>
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	791b      	ldrb	r3, [r3, #4]
 801f002:	2b02      	cmp	r3, #2
 801f004:	d10f      	bne.n	801f026 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801f006:	68bb      	ldr	r3, [r7, #8]
 801f008:	015a      	lsls	r2, r3, #5
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	4413      	add	r3, r2
 801f00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	68ba      	ldr	r2, [r7, #8]
 801f016:	0151      	lsls	r1, r2, #5
 801f018:	68fa      	ldr	r2, [r7, #12]
 801f01a:	440a      	add	r2, r1
 801f01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f024:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801f026:	2300      	movs	r3, #0
}
 801f028:	4618      	mov	r0, r3
 801f02a:	3714      	adds	r7, #20
 801f02c:	46bd      	mov	sp, r7
 801f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f032:	4770      	bx	lr

0801f034 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801f034:	b480      	push	{r7}
 801f036:	b085      	sub	sp, #20
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	460b      	mov	r3, r1
 801f03e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	68fa      	ldr	r2, [r7, #12]
 801f04e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f052:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f056:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f05e:	681a      	ldr	r2, [r3, #0]
 801f060:	78fb      	ldrb	r3, [r7, #3]
 801f062:	011b      	lsls	r3, r3, #4
 801f064:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f068:	68f9      	ldr	r1, [r7, #12]
 801f06a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f06e:	4313      	orrs	r3, r2
 801f070:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f072:	2300      	movs	r3, #0
}
 801f074:	4618      	mov	r0, r3
 801f076:	3714      	adds	r7, #20
 801f078:	46bd      	mov	sp, r7
 801f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f07e:	4770      	bx	lr

0801f080 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f080:	b480      	push	{r7}
 801f082:	b085      	sub	sp, #20
 801f084:	af00      	add	r7, sp, #0
 801f086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	68fa      	ldr	r2, [r7, #12]
 801f096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f09a:	f023 0303 	bic.w	r3, r3, #3
 801f09e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0a6:	685b      	ldr	r3, [r3, #4]
 801f0a8:	68fa      	ldr	r2, [r7, #12]
 801f0aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0ae:	f023 0302 	bic.w	r3, r3, #2
 801f0b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f0b4:	2300      	movs	r3, #0
}
 801f0b6:	4618      	mov	r0, r3
 801f0b8:	3714      	adds	r7, #20
 801f0ba:	46bd      	mov	sp, r7
 801f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c0:	4770      	bx	lr

0801f0c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f0c2:	b480      	push	{r7}
 801f0c4:	b085      	sub	sp, #20
 801f0c6:	af00      	add	r7, sp, #0
 801f0c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	68fa      	ldr	r2, [r7, #12]
 801f0d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f0dc:	f023 0303 	bic.w	r3, r3, #3
 801f0e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0e8:	685b      	ldr	r3, [r3, #4]
 801f0ea:	68fa      	ldr	r2, [r7, #12]
 801f0ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0f0:	f043 0302 	orr.w	r3, r3, #2
 801f0f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f0f6:	2300      	movs	r3, #0
}
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	3714      	adds	r7, #20
 801f0fc:	46bd      	mov	sp, r7
 801f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f102:	4770      	bx	lr

0801f104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f104:	b480      	push	{r7}
 801f106:	b085      	sub	sp, #20
 801f108:	af00      	add	r7, sp, #0
 801f10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	695b      	ldr	r3, [r3, #20]
 801f110:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	699b      	ldr	r3, [r3, #24]
 801f116:	68fa      	ldr	r2, [r7, #12]
 801f118:	4013      	ands	r3, r2
 801f11a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f11c:	68fb      	ldr	r3, [r7, #12]
}
 801f11e:	4618      	mov	r0, r3
 801f120:	3714      	adds	r7, #20
 801f122:	46bd      	mov	sp, r7
 801f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f128:	4770      	bx	lr

0801f12a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f12a:	b480      	push	{r7}
 801f12c:	b085      	sub	sp, #20
 801f12e:	af00      	add	r7, sp, #0
 801f130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f13c:	699b      	ldr	r3, [r3, #24]
 801f13e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f146:	69db      	ldr	r3, [r3, #28]
 801f148:	68ba      	ldr	r2, [r7, #8]
 801f14a:	4013      	ands	r3, r2
 801f14c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f14e:	68bb      	ldr	r3, [r7, #8]
 801f150:	0c1b      	lsrs	r3, r3, #16
}
 801f152:	4618      	mov	r0, r3
 801f154:	3714      	adds	r7, #20
 801f156:	46bd      	mov	sp, r7
 801f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f15c:	4770      	bx	lr

0801f15e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f15e:	b480      	push	{r7}
 801f160:	b085      	sub	sp, #20
 801f162:	af00      	add	r7, sp, #0
 801f164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f170:	699b      	ldr	r3, [r3, #24]
 801f172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f17a:	69db      	ldr	r3, [r3, #28]
 801f17c:	68ba      	ldr	r2, [r7, #8]
 801f17e:	4013      	ands	r3, r2
 801f180:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f182:	68bb      	ldr	r3, [r7, #8]
 801f184:	b29b      	uxth	r3, r3
}
 801f186:	4618      	mov	r0, r3
 801f188:	3714      	adds	r7, #20
 801f18a:	46bd      	mov	sp, r7
 801f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f190:	4770      	bx	lr

0801f192 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f192:	b480      	push	{r7}
 801f194:	b085      	sub	sp, #20
 801f196:	af00      	add	r7, sp, #0
 801f198:	6078      	str	r0, [r7, #4]
 801f19a:	460b      	mov	r3, r1
 801f19c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f1a2:	78fb      	ldrb	r3, [r7, #3]
 801f1a4:	015a      	lsls	r2, r3, #5
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	4413      	add	r3, r2
 801f1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f1ae:	689b      	ldr	r3, [r3, #8]
 801f1b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1b8:	695b      	ldr	r3, [r3, #20]
 801f1ba:	68ba      	ldr	r2, [r7, #8]
 801f1bc:	4013      	ands	r3, r2
 801f1be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f1c0:	68bb      	ldr	r3, [r7, #8]
}
 801f1c2:	4618      	mov	r0, r3
 801f1c4:	3714      	adds	r7, #20
 801f1c6:	46bd      	mov	sp, r7
 801f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1cc:	4770      	bx	lr

0801f1ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f1ce:	b480      	push	{r7}
 801f1d0:	b087      	sub	sp, #28
 801f1d2:	af00      	add	r7, sp, #0
 801f1d4:	6078      	str	r0, [r7, #4]
 801f1d6:	460b      	mov	r3, r1
 801f1d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f1de:	697b      	ldr	r3, [r7, #20]
 801f1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1e4:	691b      	ldr	r3, [r3, #16]
 801f1e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f1e8:	697b      	ldr	r3, [r7, #20]
 801f1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f1f2:	78fb      	ldrb	r3, [r7, #3]
 801f1f4:	f003 030f 	and.w	r3, r3, #15
 801f1f8:	68fa      	ldr	r2, [r7, #12]
 801f1fa:	fa22 f303 	lsr.w	r3, r2, r3
 801f1fe:	01db      	lsls	r3, r3, #7
 801f200:	b2db      	uxtb	r3, r3
 801f202:	693a      	ldr	r2, [r7, #16]
 801f204:	4313      	orrs	r3, r2
 801f206:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f208:	78fb      	ldrb	r3, [r7, #3]
 801f20a:	015a      	lsls	r2, r3, #5
 801f20c:	697b      	ldr	r3, [r7, #20]
 801f20e:	4413      	add	r3, r2
 801f210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f214:	689b      	ldr	r3, [r3, #8]
 801f216:	693a      	ldr	r2, [r7, #16]
 801f218:	4013      	ands	r3, r2
 801f21a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f21c:	68bb      	ldr	r3, [r7, #8]
}
 801f21e:	4618      	mov	r0, r3
 801f220:	371c      	adds	r7, #28
 801f222:	46bd      	mov	sp, r7
 801f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f228:	4770      	bx	lr

0801f22a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f22a:	b480      	push	{r7}
 801f22c:	b083      	sub	sp, #12
 801f22e:	af00      	add	r7, sp, #0
 801f230:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	695b      	ldr	r3, [r3, #20]
 801f236:	f003 0301 	and.w	r3, r3, #1
}
 801f23a:	4618      	mov	r0, r3
 801f23c:	370c      	adds	r7, #12
 801f23e:	46bd      	mov	sp, r7
 801f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f244:	4770      	bx	lr

0801f246 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f246:	b480      	push	{r7}
 801f248:	b085      	sub	sp, #20
 801f24a:	af00      	add	r7, sp, #0
 801f24c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	68fa      	ldr	r2, [r7, #12]
 801f25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f260:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f264:	f023 0307 	bic.w	r3, r3, #7
 801f268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f270:	685b      	ldr	r3, [r3, #4]
 801f272:	68fa      	ldr	r2, [r7, #12]
 801f274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f27c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f27e:	2300      	movs	r3, #0
}
 801f280:	4618      	mov	r0, r3
 801f282:	3714      	adds	r7, #20
 801f284:	46bd      	mov	sp, r7
 801f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f28a:	4770      	bx	lr

0801f28c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f28c:	b480      	push	{r7}
 801f28e:	b087      	sub	sp, #28
 801f290:	af00      	add	r7, sp, #0
 801f292:	60f8      	str	r0, [r7, #12]
 801f294:	460b      	mov	r3, r1
 801f296:	607a      	str	r2, [r7, #4]
 801f298:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	333c      	adds	r3, #60	; 0x3c
 801f2a2:	3304      	adds	r3, #4
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f2a8:	693b      	ldr	r3, [r7, #16]
 801f2aa:	4a26      	ldr	r2, [pc, #152]	; (801f344 <USB_EP0_OutStart+0xb8>)
 801f2ac:	4293      	cmp	r3, r2
 801f2ae:	d90a      	bls.n	801f2c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f2b0:	697b      	ldr	r3, [r7, #20]
 801f2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f2bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f2c0:	d101      	bne.n	801f2c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	e037      	b.n	801f336 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2cc:	461a      	mov	r2, r3
 801f2ce:	2300      	movs	r3, #0
 801f2d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f2d2:	697b      	ldr	r3, [r7, #20]
 801f2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2d8:	691b      	ldr	r3, [r3, #16]
 801f2da:	697a      	ldr	r2, [r7, #20]
 801f2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f2e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f2e6:	697b      	ldr	r3, [r7, #20]
 801f2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2ec:	691b      	ldr	r3, [r3, #16]
 801f2ee:	697a      	ldr	r2, [r7, #20]
 801f2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2f4:	f043 0318 	orr.w	r3, r3, #24
 801f2f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f2fa:	697b      	ldr	r3, [r7, #20]
 801f2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f300:	691b      	ldr	r3, [r3, #16]
 801f302:	697a      	ldr	r2, [r7, #20]
 801f304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f308:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f30c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f30e:	7afb      	ldrb	r3, [r7, #11]
 801f310:	2b01      	cmp	r3, #1
 801f312:	d10f      	bne.n	801f334 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f314:	697b      	ldr	r3, [r7, #20]
 801f316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f31a:	461a      	mov	r2, r3
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	697a      	ldr	r2, [r7, #20]
 801f32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f32e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f334:	2300      	movs	r3, #0
}
 801f336:	4618      	mov	r0, r3
 801f338:	371c      	adds	r7, #28
 801f33a:	46bd      	mov	sp, r7
 801f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f340:	4770      	bx	lr
 801f342:	bf00      	nop
 801f344:	4f54300a 	.word	0x4f54300a

0801f348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f348:	b480      	push	{r7}
 801f34a:	b085      	sub	sp, #20
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f350:	2300      	movs	r3, #0
 801f352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801f354:	68fb      	ldr	r3, [r7, #12]
 801f356:	3301      	adds	r3, #1
 801f358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	4a13      	ldr	r2, [pc, #76]	; (801f3ac <USB_CoreReset+0x64>)
 801f35e:	4293      	cmp	r3, r2
 801f360:	d901      	bls.n	801f366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801f362:	2303      	movs	r3, #3
 801f364:	e01b      	b.n	801f39e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	691b      	ldr	r3, [r3, #16]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	daf2      	bge.n	801f354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f36e:	2300      	movs	r3, #0
 801f370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	691b      	ldr	r3, [r3, #16]
 801f376:	f043 0201 	orr.w	r2, r3, #1
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	3301      	adds	r3, #1
 801f382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801f384:	68fb      	ldr	r3, [r7, #12]
 801f386:	4a09      	ldr	r2, [pc, #36]	; (801f3ac <USB_CoreReset+0x64>)
 801f388:	4293      	cmp	r3, r2
 801f38a:	d901      	bls.n	801f390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801f38c:	2303      	movs	r3, #3
 801f38e:	e006      	b.n	801f39e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	691b      	ldr	r3, [r3, #16]
 801f394:	f003 0301 	and.w	r3, r3, #1
 801f398:	2b01      	cmp	r3, #1
 801f39a:	d0f0      	beq.n	801f37e <USB_CoreReset+0x36>

  return HAL_OK;
 801f39c:	2300      	movs	r3, #0
}
 801f39e:	4618      	mov	r0, r3
 801f3a0:	3714      	adds	r7, #20
 801f3a2:	46bd      	mov	sp, r7
 801f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3a8:	4770      	bx	lr
 801f3aa:	bf00      	nop
 801f3ac:	00030d40 	.word	0x00030d40

0801f3b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
uint8_t workbuf[4096];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801f3b0:	b580      	push	{r7, lr}
 801f3b2:	b082      	sub	sp, #8
 801f3b4:	af02      	add	r7, sp, #8
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801f3b6:	4918      	ldr	r1, [pc, #96]	; (801f418 <MX_FATFS_Init+0x68>)
 801f3b8:	4818      	ldr	r0, [pc, #96]	; (801f41c <MX_FATFS_Init+0x6c>)
 801f3ba:	f006 fa53 	bl	8025864 <FATFS_LinkDriver>
 801f3be:	4603      	mov	r3, r0
 801f3c0:	461a      	mov	r2, r3
 801f3c2:	4b17      	ldr	r3, [pc, #92]	; (801f420 <MX_FATFS_Init+0x70>)
 801f3c4:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
	if(retUSER == FR_OK)
 801f3c6:	4b16      	ldr	r3, [pc, #88]	; (801f420 <MX_FATFS_Init+0x70>)
 801f3c8:	781b      	ldrb	r3, [r3, #0]
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d121      	bne.n	801f412 <MX_FATFS_Init+0x62>
	{
		retUSER = f_mount(&USERFatFS,(TCHAR const*)USERPath,1) ;
 801f3ce:	2201      	movs	r2, #1
 801f3d0:	4911      	ldr	r1, [pc, #68]	; (801f418 <MX_FATFS_Init+0x68>)
 801f3d2:	4814      	ldr	r0, [pc, #80]	; (801f424 <MX_FATFS_Init+0x74>)
 801f3d4:	f005 f8c2 	bl	802455c <f_mount>
 801f3d8:	4603      	mov	r3, r0
 801f3da:	461a      	mov	r2, r3
 801f3dc:	4b10      	ldr	r3, [pc, #64]	; (801f420 <MX_FATFS_Init+0x70>)
 801f3de:	701a      	strb	r2, [r3, #0]
		if(retUSER != FR_OK)
 801f3e0:	4b0f      	ldr	r3, [pc, #60]	; (801f420 <MX_FATFS_Init+0x70>)
 801f3e2:	781b      	ldrb	r3, [r3, #0]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d00b      	beq.n	801f400 <MX_FATFS_Init+0x50>
		{
			retUSER = 2;
 801f3e8:	4b0d      	ldr	r3, [pc, #52]	; (801f420 <MX_FATFS_Init+0x70>)
 801f3ea:	2202      	movs	r2, #2
 801f3ec:	701a      	strb	r2, [r3, #0]
			f_mkfs((TCHAR const*)USERPath, 0, 0,workbuf,4096);
 801f3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801f3f2:	9300      	str	r3, [sp, #0]
 801f3f4:	4b0c      	ldr	r3, [pc, #48]	; (801f428 <MX_FATFS_Init+0x78>)
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	2100      	movs	r1, #0
 801f3fa:	4807      	ldr	r0, [pc, #28]	; (801f418 <MX_FATFS_Init+0x68>)
 801f3fc:	f005 fdc0 	bl	8024f80 <f_mkfs>
		}

		retUSER = f_mount(&USERFatFS,"",1) ;
 801f400:	2201      	movs	r2, #1
 801f402:	490a      	ldr	r1, [pc, #40]	; (801f42c <MX_FATFS_Init+0x7c>)
 801f404:	4807      	ldr	r0, [pc, #28]	; (801f424 <MX_FATFS_Init+0x74>)
 801f406:	f005 f8a9 	bl	802455c <f_mount>
 801f40a:	4603      	mov	r3, r0
 801f40c:	461a      	mov	r2, r3
 801f40e:	4b04      	ldr	r3, [pc, #16]	; (801f420 <MX_FATFS_Init+0x70>)
 801f410:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END Init */
}
 801f412:	bf00      	nop
 801f414:	46bd      	mov	sp, r7
 801f416:	bd80      	pop	{r7, pc}
 801f418:	20006a74 	.word	0x20006a74
 801f41c:	20000570 	.word	0x20000570
 801f420:	20006a70 	.word	0x20006a70
 801f424:	20006a78 	.word	0x20006a78
 801f428:	20008ad4 	.word	0x20008ad4
 801f42c:	08000ad8 	.word	0x08000ad8

0801f430 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801f430:	b580      	push	{r7, lr}
 801f432:	b084      	sub	sp, #16
 801f434:	af00      	add	r7, sp, #0
 801f436:	4603      	mov	r3, r0
 801f438:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    uint8_t state;

	state = W25Qx_Init();
 801f43a:	f7f8 fb87 	bl	8017b4c <W25Qx_Init>
 801f43e:	4603      	mov	r3, r0
 801f440:	73fb      	strb	r3, [r7, #15]

	if(state != W25Qx_OK)
 801f442:	7bfb      	ldrb	r3, [r7, #15]
 801f444:	2b00      	cmp	r3, #0
 801f446:	d003      	beq.n	801f450 <USER_initialize+0x20>
		Stat = RES_ERROR;
 801f448:	4b06      	ldr	r3, [pc, #24]	; (801f464 <USER_initialize+0x34>)
 801f44a:	2201      	movs	r2, #1
 801f44c:	701a      	strb	r2, [r3, #0]
 801f44e:	e002      	b.n	801f456 <USER_initialize+0x26>
    else
    	Stat = RES_OK;
 801f450:	4b04      	ldr	r3, [pc, #16]	; (801f464 <USER_initialize+0x34>)
 801f452:	2200      	movs	r2, #0
 801f454:	701a      	strb	r2, [r3, #0]
    return Stat;
 801f456:	4b03      	ldr	r3, [pc, #12]	; (801f464 <USER_initialize+0x34>)
 801f458:	781b      	ldrb	r3, [r3, #0]
 801f45a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 801f45c:	4618      	mov	r0, r3
 801f45e:	3710      	adds	r7, #16
 801f460:	46bd      	mov	sp, r7
 801f462:	bd80      	pop	{r7, pc}
 801f464:	2000056d 	.word	0x2000056d

0801f468 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801f468:	b480      	push	{r7}
 801f46a:	b083      	sub	sp, #12
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	4603      	mov	r3, r0
 801f470:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
 801f472:	4b06      	ldr	r3, [pc, #24]	; (801f48c <USER_status+0x24>)
 801f474:	2200      	movs	r2, #0
 801f476:	701a      	strb	r2, [r3, #0]
    return Stat;
 801f478:	4b04      	ldr	r3, [pc, #16]	; (801f48c <USER_status+0x24>)
 801f47a:	781b      	ldrb	r3, [r3, #0]
 801f47c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 801f47e:	4618      	mov	r0, r3
 801f480:	370c      	adds	r7, #12
 801f482:	46bd      	mov	sp, r7
 801f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f488:	4770      	bx	lr
 801f48a:	bf00      	nop
 801f48c:	2000056d 	.word	0x2000056d

0801f490 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801f490:	b580      	push	{r7, lr}
 801f492:	b086      	sub	sp, #24
 801f494:	af00      	add	r7, sp, #0
 801f496:	60b9      	str	r1, [r7, #8]
 801f498:	607a      	str	r2, [r7, #4]
 801f49a:	603b      	str	r3, [r7, #0]
 801f49c:	4603      	mov	r3, r0
 801f49e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	UINT i;
	for(i = 0; i < count; i ++)
 801f4a0:	2300      	movs	r3, #0
 801f4a2:	617b      	str	r3, [r7, #20]
 801f4a4:	e017      	b.n	801f4d6 <USER_read+0x46>
	{
		W25Qx_Read(buff,sector * (W25Qx_Para.SUBSECTOR_SIZE),W25Qx_Para.SUBSECTOR_SIZE);
 801f4a6:	4b10      	ldr	r3, [pc, #64]	; (801f4e8 <USER_read+0x58>)
 801f4a8:	899b      	ldrh	r3, [r3, #12]
 801f4aa:	461a      	mov	r2, r3
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	fb02 f303 	mul.w	r3, r2, r3
 801f4b2:	4a0d      	ldr	r2, [pc, #52]	; (801f4e8 <USER_read+0x58>)
 801f4b4:	8992      	ldrh	r2, [r2, #12]
 801f4b6:	4619      	mov	r1, r3
 801f4b8:	68b8      	ldr	r0, [r7, #8]
 801f4ba:	f7f8 fc91 	bl	8017de0 <W25Qx_Read>
		sector ++;
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	3301      	adds	r3, #1
 801f4c2:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f4c4:	4b08      	ldr	r3, [pc, #32]	; (801f4e8 <USER_read+0x58>)
 801f4c6:	899b      	ldrh	r3, [r3, #12]
 801f4c8:	461a      	mov	r2, r3
 801f4ca:	68bb      	ldr	r3, [r7, #8]
 801f4cc:	4413      	add	r3, r2
 801f4ce:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f4d0:	697b      	ldr	r3, [r7, #20]
 801f4d2:	3301      	adds	r3, #1
 801f4d4:	617b      	str	r3, [r7, #20]
 801f4d6:	697a      	ldr	r2, [r7, #20]
 801f4d8:	683b      	ldr	r3, [r7, #0]
 801f4da:	429a      	cmp	r2, r3
 801f4dc:	d3e3      	bcc.n	801f4a6 <USER_read+0x16>
	}
    return RES_OK;
 801f4de:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 801f4e0:	4618      	mov	r0, r3
 801f4e2:	3718      	adds	r7, #24
 801f4e4:	46bd      	mov	sp, r7
 801f4e6:	bd80      	pop	{r7, pc}
 801f4e8:	20006a38 	.word	0x20006a38

0801f4ec <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801f4ec:	b580      	push	{r7, lr}
 801f4ee:	b086      	sub	sp, #24
 801f4f0:	af00      	add	r7, sp, #0
 801f4f2:	60b9      	str	r1, [r7, #8]
 801f4f4:	607a      	str	r2, [r7, #4]
 801f4f6:	603b      	str	r3, [r7, #0]
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	UINT i;
	for(i = 0; i < count; i ++)
 801f4fc:	2300      	movs	r3, #0
 801f4fe:	617b      	str	r3, [r7, #20]
 801f500:	e020      	b.n	801f544 <USER_write+0x58>
	{
		W25Qx_Erase_Block(sector * W25Qx_Para.SUBSECTOR_SIZE);
 801f502:	4b15      	ldr	r3, [pc, #84]	; (801f558 <USER_write+0x6c>)
 801f504:	899b      	ldrh	r3, [r3, #12]
 801f506:	461a      	mov	r2, r3
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	fb02 f303 	mul.w	r3, r2, r3
 801f50e:	4618      	mov	r0, r3
 801f510:	f7f8 fd30 	bl	8017f74 <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buff,sector * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 801f514:	4b10      	ldr	r3, [pc, #64]	; (801f558 <USER_write+0x6c>)
 801f516:	899b      	ldrh	r3, [r3, #12]
 801f518:	461a      	mov	r2, r3
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	fb02 f303 	mul.w	r3, r2, r3
 801f520:	4a0d      	ldr	r2, [pc, #52]	; (801f558 <USER_write+0x6c>)
 801f522:	8992      	ldrh	r2, [r2, #12]
 801f524:	4619      	mov	r1, r3
 801f526:	68b8      	ldr	r0, [r7, #8]
 801f528:	f7f8 fc98 	bl	8017e5c <W25Qx_Write>
		sector ++;
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	3301      	adds	r3, #1
 801f530:	607b      	str	r3, [r7, #4]
		buff += W25Qx_Para.SUBSECTOR_SIZE;
 801f532:	4b09      	ldr	r3, [pc, #36]	; (801f558 <USER_write+0x6c>)
 801f534:	899b      	ldrh	r3, [r3, #12]
 801f536:	461a      	mov	r2, r3
 801f538:	68bb      	ldr	r3, [r7, #8]
 801f53a:	4413      	add	r3, r2
 801f53c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < count; i ++)
 801f53e:	697b      	ldr	r3, [r7, #20]
 801f540:	3301      	adds	r3, #1
 801f542:	617b      	str	r3, [r7, #20]
 801f544:	697a      	ldr	r2, [r7, #20]
 801f546:	683b      	ldr	r3, [r7, #0]
 801f548:	429a      	cmp	r2, r3
 801f54a:	d3da      	bcc.n	801f502 <USER_write+0x16>
	}
    return RES_OK;
 801f54c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 801f54e:	4618      	mov	r0, r3
 801f550:	3718      	adds	r7, #24
 801f552:	46bd      	mov	sp, r7
 801f554:	bd80      	pop	{r7, pc}
 801f556:	bf00      	nop
 801f558:	20006a38 	.word	0x20006a38

0801f55c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801f55c:	b480      	push	{r7}
 801f55e:	b085      	sub	sp, #20
 801f560:	af00      	add	r7, sp, #0
 801f562:	4603      	mov	r3, r0
 801f564:	603a      	str	r2, [r7, #0]
 801f566:	71fb      	strb	r3, [r7, #7]
 801f568:	460b      	mov	r3, r1
 801f56a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	   DRESULT res = RES_ERROR;
 801f56c:	2301      	movs	r3, #1
 801f56e:	73fb      	strb	r3, [r7, #15]
		 switch(cmd)
 801f570:	79bb      	ldrb	r3, [r7, #6]
 801f572:	2b03      	cmp	r3, #3
 801f574:	d822      	bhi.n	801f5bc <USER_ioctl+0x60>
 801f576:	a201      	add	r2, pc, #4	; (adr r2, 801f57c <USER_ioctl+0x20>)
 801f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f57c:	0801f58d 	.word	0x0801f58d
 801f580:	0801f5af 	.word	0x0801f5af
 801f584:	0801f593 	.word	0x0801f593
 801f588:	0801f5a1 	.word	0x0801f5a1
		 {
			 case CTRL_SYNC:
				res = RES_OK;
 801f58c:	2300      	movs	r3, #0
 801f58e:	73fb      	strb	r3, [r7, #15]
				  break;
 801f590:	e017      	b.n	801f5c2 <USER_ioctl+0x66>
			 case GET_SECTOR_SIZE:
				  *(WORD*)buff = W25Qx_Para.SUBSECTOR_SIZE;
 801f592:	4b0f      	ldr	r3, [pc, #60]	; (801f5d0 <USER_ioctl+0x74>)
 801f594:	899a      	ldrh	r2, [r3, #12]
 801f596:	683b      	ldr	r3, [r7, #0]
 801f598:	801a      	strh	r2, [r3, #0]
				  res = RES_OK;
 801f59a:	2300      	movs	r3, #0
 801f59c:	73fb      	strb	r3, [r7, #15]
				  break;
 801f59e:	e010      	b.n	801f5c2 <USER_ioctl+0x66>
			 case GET_BLOCK_SIZE:
				  *(DWORD*)buff = W25Qx_Para.SECTOR_SIZE;
 801f5a0:	4b0b      	ldr	r3, [pc, #44]	; (801f5d0 <USER_ioctl+0x74>)
 801f5a2:	685a      	ldr	r2, [r3, #4]
 801f5a4:	683b      	ldr	r3, [r7, #0]
 801f5a6:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	73fb      	strb	r3, [r7, #15]
				  break;
 801f5ac:	e009      	b.n	801f5c2 <USER_ioctl+0x66>
			 case GET_SECTOR_COUNT:
				  *(DWORD*)buff = W25Qx_Para.SUBSECTOR_COUNT;
 801f5ae:	4b08      	ldr	r3, [pc, #32]	; (801f5d0 <USER_ioctl+0x74>)
 801f5b0:	689a      	ldr	r2, [r3, #8]
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	601a      	str	r2, [r3, #0]
				  res = RES_OK;
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	73fb      	strb	r3, [r7, #15]
				  break;
 801f5ba:	e002      	b.n	801f5c2 <USER_ioctl+0x66>
			 default:
				  res = RES_PARERR;
 801f5bc:	2304      	movs	r3, #4
 801f5be:	73fb      	strb	r3, [r7, #15]
				  break;
 801f5c0:	bf00      	nop
		 }
	    return res;
 801f5c2:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	3714      	adds	r7, #20
 801f5c8:	46bd      	mov	sp, r7
 801f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ce:	4770      	bx	lr
 801f5d0:	20006a38 	.word	0x20006a38

0801f5d4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b084      	sub	sp, #16
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
 801f5dc:	460b      	mov	r3, r1
 801f5de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f5e0:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f5e4:	f006 feb6 	bl	8026354 <USBD_static_malloc>
 801f5e8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f5ea:	68fb      	ldr	r3, [r7, #12]
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d109      	bne.n	801f604 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	32b0      	adds	r2, #176	; 0xb0
 801f5fa:	2100      	movs	r1, #0
 801f5fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801f600:	2302      	movs	r3, #2
 801f602:	e06e      	b.n	801f6e2 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	32b0      	adds	r2, #176	; 0xb0
 801f60e:	68f9      	ldr	r1, [r7, #12]
 801f610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	32b0      	adds	r2, #176	; 0xb0
 801f61e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	7c1b      	ldrb	r3, [r3, #16]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d12b      	bne.n	801f688 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f630:	4b2e      	ldr	r3, [pc, #184]	; (801f6ec <USBD_MSC_Init+0x118>)
 801f632:	7819      	ldrb	r1, [r3, #0]
 801f634:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f638:	2202      	movs	r2, #2
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f006 fcf9 	bl	8026032 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f640:	4b2a      	ldr	r3, [pc, #168]	; (801f6ec <USBD_MSC_Init+0x118>)
 801f642:	781b      	ldrb	r3, [r3, #0]
 801f644:	f003 020f 	and.w	r2, r3, #15
 801f648:	6879      	ldr	r1, [r7, #4]
 801f64a:	4613      	mov	r3, r2
 801f64c:	009b      	lsls	r3, r3, #2
 801f64e:	4413      	add	r3, r2
 801f650:	009b      	lsls	r3, r3, #2
 801f652:	440b      	add	r3, r1
 801f654:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f658:	2201      	movs	r2, #1
 801f65a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f65c:	4b24      	ldr	r3, [pc, #144]	; (801f6f0 <USBD_MSC_Init+0x11c>)
 801f65e:	7819      	ldrb	r1, [r3, #0]
 801f660:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f664:	2202      	movs	r2, #2
 801f666:	6878      	ldr	r0, [r7, #4]
 801f668:	f006 fce3 	bl	8026032 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f66c:	4b20      	ldr	r3, [pc, #128]	; (801f6f0 <USBD_MSC_Init+0x11c>)
 801f66e:	781b      	ldrb	r3, [r3, #0]
 801f670:	f003 020f 	and.w	r2, r3, #15
 801f674:	6879      	ldr	r1, [r7, #4]
 801f676:	4613      	mov	r3, r2
 801f678:	009b      	lsls	r3, r3, #2
 801f67a:	4413      	add	r3, r2
 801f67c:	009b      	lsls	r3, r3, #2
 801f67e:	440b      	add	r3, r1
 801f680:	3324      	adds	r3, #36	; 0x24
 801f682:	2201      	movs	r2, #1
 801f684:	801a      	strh	r2, [r3, #0]
 801f686:	e028      	b.n	801f6da <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f688:	4b18      	ldr	r3, [pc, #96]	; (801f6ec <USBD_MSC_Init+0x118>)
 801f68a:	7819      	ldrb	r1, [r3, #0]
 801f68c:	2340      	movs	r3, #64	; 0x40
 801f68e:	2202      	movs	r2, #2
 801f690:	6878      	ldr	r0, [r7, #4]
 801f692:	f006 fcce 	bl	8026032 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f696:	4b15      	ldr	r3, [pc, #84]	; (801f6ec <USBD_MSC_Init+0x118>)
 801f698:	781b      	ldrb	r3, [r3, #0]
 801f69a:	f003 020f 	and.w	r2, r3, #15
 801f69e:	6879      	ldr	r1, [r7, #4]
 801f6a0:	4613      	mov	r3, r2
 801f6a2:	009b      	lsls	r3, r3, #2
 801f6a4:	4413      	add	r3, r2
 801f6a6:	009b      	lsls	r3, r3, #2
 801f6a8:	440b      	add	r3, r1
 801f6aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f6ae:	2201      	movs	r2, #1
 801f6b0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f6b2:	4b0f      	ldr	r3, [pc, #60]	; (801f6f0 <USBD_MSC_Init+0x11c>)
 801f6b4:	7819      	ldrb	r1, [r3, #0]
 801f6b6:	2340      	movs	r3, #64	; 0x40
 801f6b8:	2202      	movs	r2, #2
 801f6ba:	6878      	ldr	r0, [r7, #4]
 801f6bc:	f006 fcb9 	bl	8026032 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f6c0:	4b0b      	ldr	r3, [pc, #44]	; (801f6f0 <USBD_MSC_Init+0x11c>)
 801f6c2:	781b      	ldrb	r3, [r3, #0]
 801f6c4:	f003 020f 	and.w	r2, r3, #15
 801f6c8:	6879      	ldr	r1, [r7, #4]
 801f6ca:	4613      	mov	r3, r2
 801f6cc:	009b      	lsls	r3, r3, #2
 801f6ce:	4413      	add	r3, r2
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	440b      	add	r3, r1
 801f6d4:	3324      	adds	r3, #36	; 0x24
 801f6d6:	2201      	movs	r2, #1
 801f6d8:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f6da:	6878      	ldr	r0, [r7, #4]
 801f6dc:	f000 fa2c 	bl	801fb38 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f6e0:	2300      	movs	r3, #0
}
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	3710      	adds	r7, #16
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}
 801f6ea:	bf00      	nop
 801f6ec:	200005e7 	.word	0x200005e7
 801f6f0:	200005e6 	.word	0x200005e6

0801f6f4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f6f4:	b580      	push	{r7, lr}
 801f6f6:	b082      	sub	sp, #8
 801f6f8:	af00      	add	r7, sp, #0
 801f6fa:	6078      	str	r0, [r7, #4]
 801f6fc:	460b      	mov	r3, r1
 801f6fe:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801f700:	4b26      	ldr	r3, [pc, #152]	; (801f79c <USBD_MSC_DeInit+0xa8>)
 801f702:	781b      	ldrb	r3, [r3, #0]
 801f704:	4619      	mov	r1, r3
 801f706:	6878      	ldr	r0, [r7, #4]
 801f708:	f006 fcb9 	bl	802607e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 801f70c:	4b23      	ldr	r3, [pc, #140]	; (801f79c <USBD_MSC_DeInit+0xa8>)
 801f70e:	781b      	ldrb	r3, [r3, #0]
 801f710:	f003 020f 	and.w	r2, r3, #15
 801f714:	6879      	ldr	r1, [r7, #4]
 801f716:	4613      	mov	r3, r2
 801f718:	009b      	lsls	r3, r3, #2
 801f71a:	4413      	add	r3, r2
 801f71c:	009b      	lsls	r3, r3, #2
 801f71e:	440b      	add	r3, r1
 801f720:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801f724:	2200      	movs	r2, #0
 801f726:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 801f728:	4b1d      	ldr	r3, [pc, #116]	; (801f7a0 <USBD_MSC_DeInit+0xac>)
 801f72a:	781b      	ldrb	r3, [r3, #0]
 801f72c:	4619      	mov	r1, r3
 801f72e:	6878      	ldr	r0, [r7, #4]
 801f730:	f006 fca5 	bl	802607e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 801f734:	4b1a      	ldr	r3, [pc, #104]	; (801f7a0 <USBD_MSC_DeInit+0xac>)
 801f736:	781b      	ldrb	r3, [r3, #0]
 801f738:	f003 020f 	and.w	r2, r3, #15
 801f73c:	6879      	ldr	r1, [r7, #4]
 801f73e:	4613      	mov	r3, r2
 801f740:	009b      	lsls	r3, r3, #2
 801f742:	4413      	add	r3, r2
 801f744:	009b      	lsls	r3, r3, #2
 801f746:	440b      	add	r3, r1
 801f748:	3324      	adds	r3, #36	; 0x24
 801f74a:	2200      	movs	r2, #0
 801f74c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f754:	687b      	ldr	r3, [r7, #4]
 801f756:	32b0      	adds	r2, #176	; 0xb0
 801f758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d018      	beq.n	801f792 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f760:	6878      	ldr	r0, [r7, #4]
 801f762:	f000 fa67 	bl	801fc34 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	32b0      	adds	r2, #176	; 0xb0
 801f770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f774:	4618      	mov	r0, r3
 801f776:	f006 fdfb 	bl	8026370 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	32b0      	adds	r2, #176	; 0xb0
 801f784:	2100      	movs	r1, #0
 801f786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801f78a:	687b      	ldr	r3, [r7, #4]
 801f78c:	2200      	movs	r2, #0
 801f78e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f792:	2300      	movs	r3, #0
}
 801f794:	4618      	mov	r0, r3
 801f796:	3708      	adds	r7, #8
 801f798:	46bd      	mov	sp, r7
 801f79a:	bd80      	pop	{r7, pc}
 801f79c:	200005e7 	.word	0x200005e7
 801f7a0:	200005e6 	.word	0x200005e6

0801f7a4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f7a4:	b580      	push	{r7, lr}
 801f7a6:	b086      	sub	sp, #24
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	6078      	str	r0, [r7, #4]
 801f7ac:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	32b0      	adds	r2, #176	; 0xb0
 801f7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f7bc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f7be:	2300      	movs	r3, #0
 801f7c0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f7c2:	2300      	movs	r3, #0
 801f7c4:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801f7c6:	693b      	ldr	r3, [r7, #16]
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d101      	bne.n	801f7d0 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 801f7cc:	2303      	movs	r3, #3
 801f7ce:	e0e1      	b.n	801f994 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f7d0:	683b      	ldr	r3, [r7, #0]
 801f7d2:	781b      	ldrb	r3, [r3, #0]
 801f7d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f7d8:	2b00      	cmp	r3, #0
 801f7da:	d053      	beq.n	801f884 <USBD_MSC_Setup+0xe0>
 801f7dc:	2b20      	cmp	r3, #32
 801f7de:	f040 80d1 	bne.w	801f984 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f7e2:	683b      	ldr	r3, [r7, #0]
 801f7e4:	785b      	ldrb	r3, [r3, #1]
 801f7e6:	2bfe      	cmp	r3, #254	; 0xfe
 801f7e8:	d002      	beq.n	801f7f0 <USBD_MSC_Setup+0x4c>
 801f7ea:	2bff      	cmp	r3, #255	; 0xff
 801f7ec:	d02a      	beq.n	801f844 <USBD_MSC_Setup+0xa0>
 801f7ee:	e041      	b.n	801f874 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f7f0:	683b      	ldr	r3, [r7, #0]
 801f7f2:	885b      	ldrh	r3, [r3, #2]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d11e      	bne.n	801f836 <USBD_MSC_Setup+0x92>
 801f7f8:	683b      	ldr	r3, [r7, #0]
 801f7fa:	88db      	ldrh	r3, [r3, #6]
 801f7fc:	2b01      	cmp	r3, #1
 801f7fe:	d11a      	bne.n	801f836 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f800:	683b      	ldr	r3, [r7, #0]
 801f802:	781b      	ldrb	r3, [r3, #0]
 801f804:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f806:	2b00      	cmp	r3, #0
 801f808:	da15      	bge.n	801f836 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801f810:	687a      	ldr	r2, [r7, #4]
 801f812:	33b0      	adds	r3, #176	; 0xb0
 801f814:	009b      	lsls	r3, r3, #2
 801f816:	4413      	add	r3, r2
 801f818:	685b      	ldr	r3, [r3, #4]
 801f81a:	699b      	ldr	r3, [r3, #24]
 801f81c:	4798      	blx	r3
 801f81e:	4603      	mov	r3, r0
 801f820:	461a      	mov	r2, r3
 801f822:	693b      	ldr	r3, [r7, #16]
 801f824:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f826:	693b      	ldr	r3, [r7, #16]
 801f828:	2201      	movs	r2, #1
 801f82a:	4619      	mov	r1, r3
 801f82c:	6878      	ldr	r0, [r7, #4]
 801f82e:	f003 f923 	bl	8022a78 <USBD_CtlSendData>
 801f832:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f834:	e025      	b.n	801f882 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801f836:	6839      	ldr	r1, [r7, #0]
 801f838:	6878      	ldr	r0, [r7, #4]
 801f83a:	f003 f8ac 	bl	8022996 <USBD_CtlError>
            ret = USBD_FAIL;
 801f83e:	2303      	movs	r3, #3
 801f840:	75fb      	strb	r3, [r7, #23]
          break;
 801f842:	e01e      	b.n	801f882 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f844:	683b      	ldr	r3, [r7, #0]
 801f846:	885b      	ldrh	r3, [r3, #2]
 801f848:	2b00      	cmp	r3, #0
 801f84a:	d10c      	bne.n	801f866 <USBD_MSC_Setup+0xc2>
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	88db      	ldrh	r3, [r3, #6]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d108      	bne.n	801f866 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f854:	683b      	ldr	r3, [r7, #0]
 801f856:	781b      	ldrb	r3, [r3, #0]
 801f858:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	db03      	blt.n	801f866 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801f85e:	6878      	ldr	r0, [r7, #4]
 801f860:	f000 f9b4 	bl	801fbcc <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f864:	e00d      	b.n	801f882 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 801f866:	6839      	ldr	r1, [r7, #0]
 801f868:	6878      	ldr	r0, [r7, #4]
 801f86a:	f003 f894 	bl	8022996 <USBD_CtlError>
            ret = USBD_FAIL;
 801f86e:	2303      	movs	r3, #3
 801f870:	75fb      	strb	r3, [r7, #23]
          break;
 801f872:	e006      	b.n	801f882 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 801f874:	6839      	ldr	r1, [r7, #0]
 801f876:	6878      	ldr	r0, [r7, #4]
 801f878:	f003 f88d 	bl	8022996 <USBD_CtlError>
          ret = USBD_FAIL;
 801f87c:	2303      	movs	r3, #3
 801f87e:	75fb      	strb	r3, [r7, #23]
          break;
 801f880:	bf00      	nop
      }
      break;
 801f882:	e086      	b.n	801f992 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f884:	683b      	ldr	r3, [r7, #0]
 801f886:	785b      	ldrb	r3, [r3, #1]
 801f888:	2b0b      	cmp	r3, #11
 801f88a:	d872      	bhi.n	801f972 <USBD_MSC_Setup+0x1ce>
 801f88c:	a201      	add	r2, pc, #4	; (adr r2, 801f894 <USBD_MSC_Setup+0xf0>)
 801f88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f892:	bf00      	nop
 801f894:	0801f8c5 	.word	0x0801f8c5
 801f898:	0801f941 	.word	0x0801f941
 801f89c:	0801f973 	.word	0x0801f973
 801f8a0:	0801f973 	.word	0x0801f973
 801f8a4:	0801f973 	.word	0x0801f973
 801f8a8:	0801f973 	.word	0x0801f973
 801f8ac:	0801f973 	.word	0x0801f973
 801f8b0:	0801f973 	.word	0x0801f973
 801f8b4:	0801f973 	.word	0x0801f973
 801f8b8:	0801f973 	.word	0x0801f973
 801f8bc:	0801f8ef 	.word	0x0801f8ef
 801f8c0:	0801f919 	.word	0x0801f919
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8ca:	b2db      	uxtb	r3, r3
 801f8cc:	2b03      	cmp	r3, #3
 801f8ce:	d107      	bne.n	801f8e0 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f8d0:	f107 030e 	add.w	r3, r7, #14
 801f8d4:	2202      	movs	r2, #2
 801f8d6:	4619      	mov	r1, r3
 801f8d8:	6878      	ldr	r0, [r7, #4]
 801f8da:	f003 f8cd 	bl	8022a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f8de:	e050      	b.n	801f982 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f8e0:	6839      	ldr	r1, [r7, #0]
 801f8e2:	6878      	ldr	r0, [r7, #4]
 801f8e4:	f003 f857 	bl	8022996 <USBD_CtlError>
            ret = USBD_FAIL;
 801f8e8:	2303      	movs	r3, #3
 801f8ea:	75fb      	strb	r3, [r7, #23]
          break;
 801f8ec:	e049      	b.n	801f982 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f8f4:	b2db      	uxtb	r3, r3
 801f8f6:	2b03      	cmp	r3, #3
 801f8f8:	d107      	bne.n	801f90a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f8fa:	693b      	ldr	r3, [r7, #16]
 801f8fc:	3304      	adds	r3, #4
 801f8fe:	2201      	movs	r2, #1
 801f900:	4619      	mov	r1, r3
 801f902:	6878      	ldr	r0, [r7, #4]
 801f904:	f003 f8b8 	bl	8022a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f908:	e03b      	b.n	801f982 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f90a:	6839      	ldr	r1, [r7, #0]
 801f90c:	6878      	ldr	r0, [r7, #4]
 801f90e:	f003 f842 	bl	8022996 <USBD_CtlError>
            ret = USBD_FAIL;
 801f912:	2303      	movs	r3, #3
 801f914:	75fb      	strb	r3, [r7, #23]
          break;
 801f916:	e034      	b.n	801f982 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f91e:	b2db      	uxtb	r3, r3
 801f920:	2b03      	cmp	r3, #3
 801f922:	d106      	bne.n	801f932 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f924:	683b      	ldr	r3, [r7, #0]
 801f926:	885b      	ldrh	r3, [r3, #2]
 801f928:	b2db      	uxtb	r3, r3
 801f92a:	461a      	mov	r2, r3
 801f92c:	693b      	ldr	r3, [r7, #16]
 801f92e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f930:	e027      	b.n	801f982 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801f932:	6839      	ldr	r1, [r7, #0]
 801f934:	6878      	ldr	r0, [r7, #4]
 801f936:	f003 f82e 	bl	8022996 <USBD_CtlError>
            ret = USBD_FAIL;
 801f93a:	2303      	movs	r3, #3
 801f93c:	75fb      	strb	r3, [r7, #23]
          break;
 801f93e:	e020      	b.n	801f982 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f946:	b2db      	uxtb	r3, r3
 801f948:	2b03      	cmp	r3, #3
 801f94a:	d119      	bne.n	801f980 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	885b      	ldrh	r3, [r3, #2]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d115      	bne.n	801f980 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f954:	683b      	ldr	r3, [r7, #0]
 801f956:	889b      	ldrh	r3, [r3, #4]
 801f958:	b2db      	uxtb	r3, r3
 801f95a:	4619      	mov	r1, r3
 801f95c:	6878      	ldr	r0, [r7, #4]
 801f95e:	f006 fbad 	bl	80260bc <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f962:	683b      	ldr	r3, [r7, #0]
 801f964:	889b      	ldrh	r3, [r3, #4]
 801f966:	b2db      	uxtb	r3, r3
 801f968:	4619      	mov	r1, r3
 801f96a:	6878      	ldr	r0, [r7, #4]
 801f96c:	f000 fb2e 	bl	801ffcc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f970:	e006      	b.n	801f980 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801f972:	6839      	ldr	r1, [r7, #0]
 801f974:	6878      	ldr	r0, [r7, #4]
 801f976:	f003 f80e 	bl	8022996 <USBD_CtlError>
          ret = USBD_FAIL;
 801f97a:	2303      	movs	r3, #3
 801f97c:	75fb      	strb	r3, [r7, #23]
          break;
 801f97e:	e000      	b.n	801f982 <USBD_MSC_Setup+0x1de>
          break;
 801f980:	bf00      	nop
      }
      break;
 801f982:	e006      	b.n	801f992 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 801f984:	6839      	ldr	r1, [r7, #0]
 801f986:	6878      	ldr	r0, [r7, #4]
 801f988:	f003 f805 	bl	8022996 <USBD_CtlError>
      ret = USBD_FAIL;
 801f98c:	2303      	movs	r3, #3
 801f98e:	75fb      	strb	r3, [r7, #23]
      break;
 801f990:	bf00      	nop
  }

  return (uint8_t)ret;
 801f992:	7dfb      	ldrb	r3, [r7, #23]
}
 801f994:	4618      	mov	r0, r3
 801f996:	3718      	adds	r7, #24
 801f998:	46bd      	mov	sp, r7
 801f99a:	bd80      	pop	{r7, pc}

0801f99c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f99c:	b580      	push	{r7, lr}
 801f99e:	b082      	sub	sp, #8
 801f9a0:	af00      	add	r7, sp, #0
 801f9a2:	6078      	str	r0, [r7, #4]
 801f9a4:	460b      	mov	r3, r1
 801f9a6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f9a8:	78fb      	ldrb	r3, [r7, #3]
 801f9aa:	4619      	mov	r1, r3
 801f9ac:	6878      	ldr	r0, [r7, #4]
 801f9ae:	f000 f959 	bl	801fc64 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f9b2:	2300      	movs	r3, #0
}
 801f9b4:	4618      	mov	r0, r3
 801f9b6:	3708      	adds	r7, #8
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	bd80      	pop	{r7, pc}

0801f9bc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f9bc:	b580      	push	{r7, lr}
 801f9be:	b082      	sub	sp, #8
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
 801f9c4:	460b      	mov	r3, r1
 801f9c6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f9c8:	78fb      	ldrb	r3, [r7, #3]
 801f9ca:	4619      	mov	r1, r3
 801f9cc:	6878      	ldr	r0, [r7, #4]
 801f9ce:	f000 f983 	bl	801fcd8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f9d2:	2300      	movs	r3, #0
}
 801f9d4:	4618      	mov	r0, r3
 801f9d6:	3708      	adds	r7, #8
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	bd80      	pop	{r7, pc}

0801f9dc <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f9dc:	b580      	push	{r7, lr}
 801f9de:	b084      	sub	sp, #16
 801f9e0:	af00      	add	r7, sp, #0
 801f9e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801f9e4:	2181      	movs	r1, #129	; 0x81
 801f9e6:	4812      	ldr	r0, [pc, #72]	; (801fa30 <USBD_MSC_GetHSCfgDesc+0x54>)
 801f9e8:	f002 f972 	bl	8021cd0 <USBD_GetEpDesc>
 801f9ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801f9ee:	2101      	movs	r1, #1
 801f9f0:	480f      	ldr	r0, [pc, #60]	; (801fa30 <USBD_MSC_GetHSCfgDesc+0x54>)
 801f9f2:	f002 f96d 	bl	8021cd0 <USBD_GetEpDesc>
 801f9f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d006      	beq.n	801fa0c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	2200      	movs	r2, #0
 801fa02:	711a      	strb	r2, [r3, #4]
 801fa04:	2200      	movs	r2, #0
 801fa06:	f042 0202 	orr.w	r2, r2, #2
 801fa0a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801fa0c:	68bb      	ldr	r3, [r7, #8]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d006      	beq.n	801fa20 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801fa12:	68bb      	ldr	r3, [r7, #8]
 801fa14:	2200      	movs	r2, #0
 801fa16:	711a      	strb	r2, [r3, #4]
 801fa18:	2200      	movs	r2, #0
 801fa1a:	f042 0202 	orr.w	r2, r2, #2
 801fa1e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	2220      	movs	r2, #32
 801fa24:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801fa26:	4b02      	ldr	r3, [pc, #8]	; (801fa30 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 801fa28:	4618      	mov	r0, r3
 801fa2a:	3710      	adds	r7, #16
 801fa2c:	46bd      	mov	sp, r7
 801fa2e:	bd80      	pop	{r7, pc}
 801fa30:	200005bc 	.word	0x200005bc

0801fa34 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801fa34:	b580      	push	{r7, lr}
 801fa36:	b084      	sub	sp, #16
 801fa38:	af00      	add	r7, sp, #0
 801fa3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fa3c:	2181      	movs	r1, #129	; 0x81
 801fa3e:	4812      	ldr	r0, [pc, #72]	; (801fa88 <USBD_MSC_GetFSCfgDesc+0x54>)
 801fa40:	f002 f946 	bl	8021cd0 <USBD_GetEpDesc>
 801fa44:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fa46:	2101      	movs	r1, #1
 801fa48:	480f      	ldr	r0, [pc, #60]	; (801fa88 <USBD_MSC_GetFSCfgDesc+0x54>)
 801fa4a:	f002 f941 	bl	8021cd0 <USBD_GetEpDesc>
 801fa4e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801fa50:	68fb      	ldr	r3, [r7, #12]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d006      	beq.n	801fa64 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa56:	68fb      	ldr	r3, [r7, #12]
 801fa58:	2200      	movs	r2, #0
 801fa5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa5e:	711a      	strb	r2, [r3, #4]
 801fa60:	2200      	movs	r2, #0
 801fa62:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801fa64:	68bb      	ldr	r3, [r7, #8]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d006      	beq.n	801fa78 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fa6a:	68bb      	ldr	r3, [r7, #8]
 801fa6c:	2200      	movs	r2, #0
 801fa6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fa72:	711a      	strb	r2, [r3, #4]
 801fa74:	2200      	movs	r2, #0
 801fa76:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	2220      	movs	r2, #32
 801fa7c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801fa7e:	4b02      	ldr	r3, [pc, #8]	; (801fa88 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801fa80:	4618      	mov	r0, r3
 801fa82:	3710      	adds	r7, #16
 801fa84:	46bd      	mov	sp, r7
 801fa86:	bd80      	pop	{r7, pc}
 801fa88:	200005bc 	.word	0x200005bc

0801fa8c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801fa8c:	b580      	push	{r7, lr}
 801fa8e:	b084      	sub	sp, #16
 801fa90:	af00      	add	r7, sp, #0
 801fa92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fa94:	2181      	movs	r1, #129	; 0x81
 801fa96:	4812      	ldr	r0, [pc, #72]	; (801fae0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801fa98:	f002 f91a 	bl	8021cd0 <USBD_GetEpDesc>
 801fa9c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fa9e:	2101      	movs	r1, #1
 801faa0:	480f      	ldr	r0, [pc, #60]	; (801fae0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801faa2:	f002 f915 	bl	8021cd0 <USBD_GetEpDesc>
 801faa6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d006      	beq.n	801fabc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	2200      	movs	r2, #0
 801fab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801fab6:	711a      	strb	r2, [r3, #4]
 801fab8:	2200      	movs	r2, #0
 801faba:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 801fabc:	68bb      	ldr	r3, [r7, #8]
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	d006      	beq.n	801fad0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fac2:	68bb      	ldr	r3, [r7, #8]
 801fac4:	2200      	movs	r2, #0
 801fac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801faca:	711a      	strb	r2, [r3, #4]
 801facc:	2200      	movs	r2, #0
 801face:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	2220      	movs	r2, #32
 801fad4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801fad6:	4b02      	ldr	r3, [pc, #8]	; (801fae0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801fad8:	4618      	mov	r0, r3
 801fada:	3710      	adds	r7, #16
 801fadc:	46bd      	mov	sp, r7
 801fade:	bd80      	pop	{r7, pc}
 801fae0:	200005bc 	.word	0x200005bc

0801fae4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801fae4:	b480      	push	{r7}
 801fae6:	b083      	sub	sp, #12
 801fae8:	af00      	add	r7, sp, #0
 801faea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	220a      	movs	r2, #10
 801faf0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801faf2:	4b03      	ldr	r3, [pc, #12]	; (801fb00 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801faf4:	4618      	mov	r0, r3
 801faf6:	370c      	adds	r7, #12
 801faf8:	46bd      	mov	sp, r7
 801fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fafe:	4770      	bx	lr
 801fb00:	200005dc 	.word	0x200005dc

0801fb04 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801fb04:	b480      	push	{r7}
 801fb06:	b083      	sub	sp, #12
 801fb08:	af00      	add	r7, sp, #0
 801fb0a:	6078      	str	r0, [r7, #4]
 801fb0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d101      	bne.n	801fb18 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801fb14:	2303      	movs	r3, #3
 801fb16:	e009      	b.n	801fb2c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801fb1e:	687a      	ldr	r2, [r7, #4]
 801fb20:	33b0      	adds	r3, #176	; 0xb0
 801fb22:	009b      	lsls	r3, r3, #2
 801fb24:	4413      	add	r3, r2
 801fb26:	683a      	ldr	r2, [r7, #0]
 801fb28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801fb2a:	2300      	movs	r3, #0
}
 801fb2c:	4618      	mov	r0, r3
 801fb2e:	370c      	adds	r7, #12
 801fb30:	46bd      	mov	sp, r7
 801fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb36:	4770      	bx	lr

0801fb38 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801fb38:	b580      	push	{r7, lr}
 801fb3a:	b084      	sub	sp, #16
 801fb3c:	af00      	add	r7, sp, #0
 801fb3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	32b0      	adds	r2, #176	; 0xb0
 801fb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fb4e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d032      	beq.n	801fbbc <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801fb56:	68fb      	ldr	r3, [r7, #12]
 801fb58:	2200      	movs	r2, #0
 801fb5a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801fb5c:	68fb      	ldr	r3, [r7, #12]
 801fb5e:	2200      	movs	r2, #0
 801fb60:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801fb62:	68fb      	ldr	r3, [r7, #12]
 801fb64:	2200      	movs	r2, #0
 801fb66:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801fb6a:	68fb      	ldr	r3, [r7, #12]
 801fb6c:	2200      	movs	r2, #0
 801fb6e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801fb72:	68fb      	ldr	r3, [r7, #12]
 801fb74:	2200      	movs	r2, #0
 801fb76:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801fb80:	687a      	ldr	r2, [r7, #4]
 801fb82:	33b0      	adds	r3, #176	; 0xb0
 801fb84:	009b      	lsls	r3, r3, #2
 801fb86:	4413      	add	r3, r2
 801fb88:	685b      	ldr	r3, [r3, #4]
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	2000      	movs	r0, #0
 801fb8e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801fb90:	4b0c      	ldr	r3, [pc, #48]	; (801fbc4 <MSC_BOT_Init+0x8c>)
 801fb92:	781b      	ldrb	r3, [r3, #0]
 801fb94:	4619      	mov	r1, r3
 801fb96:	6878      	ldr	r0, [r7, #4]
 801fb98:	f006 fa90 	bl	80260bc <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 801fb9c:	4b0a      	ldr	r3, [pc, #40]	; (801fbc8 <MSC_BOT_Init+0x90>)
 801fb9e:	781b      	ldrb	r3, [r3, #0]
 801fba0:	4619      	mov	r1, r3
 801fba2:	6878      	ldr	r0, [r7, #4]
 801fba4:	f006 fa8a 	bl	80260bc <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fba8:	4b06      	ldr	r3, [pc, #24]	; (801fbc4 <MSC_BOT_Init+0x8c>)
 801fbaa:	7819      	ldrb	r1, [r3, #0]
 801fbac:	68fb      	ldr	r3, [r7, #12]
 801fbae:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fbb2:	231f      	movs	r3, #31
 801fbb4:	6878      	ldr	r0, [r7, #4]
 801fbb6:	f006 fb4a 	bl	802624e <USBD_LL_PrepareReceive>
 801fbba:	e000      	b.n	801fbbe <MSC_BOT_Init+0x86>
    return;
 801fbbc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fbbe:	3710      	adds	r7, #16
 801fbc0:	46bd      	mov	sp, r7
 801fbc2:	bd80      	pop	{r7, pc}
 801fbc4:	200005e7 	.word	0x200005e7
 801fbc8:	200005e6 	.word	0x200005e6

0801fbcc <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801fbcc:	b580      	push	{r7, lr}
 801fbce:	b084      	sub	sp, #16
 801fbd0:	af00      	add	r7, sp, #0
 801fbd2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	32b0      	adds	r2, #176	; 0xb0
 801fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fbe2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fbe4:	68fb      	ldr	r3, [r7, #12]
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d01b      	beq.n	801fc22 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801fbea:	68fb      	ldr	r3, [r7, #12]
 801fbec:	2200      	movs	r2, #0
 801fbee:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	2201      	movs	r2, #1
 801fbf4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801fbf6:	4b0d      	ldr	r3, [pc, #52]	; (801fc2c <MSC_BOT_Reset+0x60>)
 801fbf8:	781b      	ldrb	r3, [r3, #0]
 801fbfa:	4619      	mov	r1, r3
 801fbfc:	6878      	ldr	r0, [r7, #4]
 801fbfe:	f006 fa9b 	bl	8026138 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801fc02:	4b0b      	ldr	r3, [pc, #44]	; (801fc30 <MSC_BOT_Reset+0x64>)
 801fc04:	781b      	ldrb	r3, [r3, #0]
 801fc06:	4619      	mov	r1, r3
 801fc08:	6878      	ldr	r0, [r7, #4]
 801fc0a:	f006 fa95 	bl	8026138 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fc0e:	4b08      	ldr	r3, [pc, #32]	; (801fc30 <MSC_BOT_Reset+0x64>)
 801fc10:	7819      	ldrb	r1, [r3, #0]
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801fc18:	231f      	movs	r3, #31
 801fc1a:	6878      	ldr	r0, [r7, #4]
 801fc1c:	f006 fb17 	bl	802624e <USBD_LL_PrepareReceive>
 801fc20:	e000      	b.n	801fc24 <MSC_BOT_Reset+0x58>
    return;
 801fc22:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fc24:	3710      	adds	r7, #16
 801fc26:	46bd      	mov	sp, r7
 801fc28:	bd80      	pop	{r7, pc}
 801fc2a:	bf00      	nop
 801fc2c:	200005e6 	.word	0x200005e6
 801fc30:	200005e7 	.word	0x200005e7

0801fc34 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801fc34:	b480      	push	{r7}
 801fc36:	b085      	sub	sp, #20
 801fc38:	af00      	add	r7, sp, #0
 801fc3a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	32b0      	adds	r2, #176	; 0xb0
 801fc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc4a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d002      	beq.n	801fc58 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	2200      	movs	r2, #0
 801fc56:	721a      	strb	r2, [r3, #8]
  }
}
 801fc58:	bf00      	nop
 801fc5a:	3714      	adds	r7, #20
 801fc5c:	46bd      	mov	sp, r7
 801fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc62:	4770      	bx	lr

0801fc64 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fc64:	b580      	push	{r7, lr}
 801fc66:	b084      	sub	sp, #16
 801fc68:	af00      	add	r7, sp, #0
 801fc6a:	6078      	str	r0, [r7, #4]
 801fc6c:	460b      	mov	r3, r1
 801fc6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	32b0      	adds	r2, #176	; 0xb0
 801fc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fc80:	68fb      	ldr	r3, [r7, #12]
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d020      	beq.n	801fcc8 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fc86:	68fb      	ldr	r3, [r7, #12]
 801fc88:	7a1b      	ldrb	r3, [r3, #8]
 801fc8a:	2b02      	cmp	r3, #2
 801fc8c:	d005      	beq.n	801fc9a <MSC_BOT_DataIn+0x36>
 801fc8e:	2b02      	cmp	r3, #2
 801fc90:	db1c      	blt.n	801fccc <MSC_BOT_DataIn+0x68>
 801fc92:	3b03      	subs	r3, #3
 801fc94:	2b01      	cmp	r3, #1
 801fc96:	d819      	bhi.n	801fccc <MSC_BOT_DataIn+0x68>
 801fc98:	e011      	b.n	801fcbe <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fca0:	68fb      	ldr	r3, [r7, #12]
 801fca2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fca6:	461a      	mov	r2, r3
 801fca8:	6878      	ldr	r0, [r7, #4]
 801fcaa:	f000 f9c9 	bl	8020040 <SCSI_ProcessCmd>
 801fcae:	4603      	mov	r3, r0
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	da0d      	bge.n	801fcd0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fcb4:	2101      	movs	r1, #1
 801fcb6:	6878      	ldr	r0, [r7, #4]
 801fcb8:	f000 f90c 	bl	801fed4 <MSC_BOT_SendCSW>
      }
      break;
 801fcbc:	e008      	b.n	801fcd0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fcbe:	2100      	movs	r1, #0
 801fcc0:	6878      	ldr	r0, [r7, #4]
 801fcc2:	f000 f907 	bl	801fed4 <MSC_BOT_SendCSW>
      break;
 801fcc6:	e004      	b.n	801fcd2 <MSC_BOT_DataIn+0x6e>
    return;
 801fcc8:	bf00      	nop
 801fcca:	e002      	b.n	801fcd2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 801fccc:	bf00      	nop
 801fcce:	e000      	b.n	801fcd2 <MSC_BOT_DataIn+0x6e>
      break;
 801fcd0:	bf00      	nop
  }
}
 801fcd2:	3710      	adds	r7, #16
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	bd80      	pop	{r7, pc}

0801fcd8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fcd8:	b580      	push	{r7, lr}
 801fcda:	b084      	sub	sp, #16
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
 801fce0:	460b      	mov	r3, r1
 801fce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	32b0      	adds	r2, #176	; 0xb0
 801fcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fcf2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fcf4:	68fb      	ldr	r3, [r7, #12]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d01c      	beq.n	801fd34 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	7a1b      	ldrb	r3, [r3, #8]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	d002      	beq.n	801fd08 <MSC_BOT_DataOut+0x30>
 801fd02:	2b01      	cmp	r3, #1
 801fd04:	d004      	beq.n	801fd10 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801fd06:	e018      	b.n	801fd3a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 801fd08:	6878      	ldr	r0, [r7, #4]
 801fd0a:	f000 f819 	bl	801fd40 <MSC_BOT_CBW_Decode>
      break;
 801fd0e:	e014      	b.n	801fd3a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fd10:	68fb      	ldr	r3, [r7, #12]
 801fd12:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fd1c:	461a      	mov	r2, r3
 801fd1e:	6878      	ldr	r0, [r7, #4]
 801fd20:	f000 f98e 	bl	8020040 <SCSI_ProcessCmd>
 801fd24:	4603      	mov	r3, r0
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	da06      	bge.n	801fd38 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fd2a:	2101      	movs	r1, #1
 801fd2c:	6878      	ldr	r0, [r7, #4]
 801fd2e:	f000 f8d1 	bl	801fed4 <MSC_BOT_SendCSW>
      break;
 801fd32:	e001      	b.n	801fd38 <MSC_BOT_DataOut+0x60>
    return;
 801fd34:	bf00      	nop
 801fd36:	e000      	b.n	801fd3a <MSC_BOT_DataOut+0x62>
      break;
 801fd38:	bf00      	nop
  }
}
 801fd3a:	3710      	adds	r7, #16
 801fd3c:	46bd      	mov	sp, r7
 801fd3e:	bd80      	pop	{r7, pc}

0801fd40 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801fd40:	b580      	push	{r7, lr}
 801fd42:	b084      	sub	sp, #16
 801fd44:	af00      	add	r7, sp, #0
 801fd46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	32b0      	adds	r2, #176	; 0xb0
 801fd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fd56:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d079      	beq.n	801fe52 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fd5e:	68fb      	ldr	r3, [r7, #12]
 801fd60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801fd64:	68fb      	ldr	r3, [r7, #12]
 801fd66:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fd6a:	68fb      	ldr	r3, [r7, #12]
 801fd6c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801fd76:	4b3a      	ldr	r3, [pc, #232]	; (801fe60 <MSC_BOT_CBW_Decode+0x120>)
 801fd78:	781b      	ldrb	r3, [r3, #0]
 801fd7a:	4619      	mov	r1, r3
 801fd7c:	6878      	ldr	r0, [r7, #4]
 801fd7e:	f006 fa87 	bl	8026290 <USBD_LL_GetRxDataSize>
 801fd82:	4603      	mov	r3, r0
 801fd84:	2b1f      	cmp	r3, #31
 801fd86:	d114      	bne.n	801fdb2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801fd8e:	4a35      	ldr	r2, [pc, #212]	; (801fe64 <MSC_BOT_CBW_Decode+0x124>)
 801fd90:	4293      	cmp	r3, r2
 801fd92:	d10e      	bne.n	801fdb2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fd9a:	2b01      	cmp	r3, #1
 801fd9c:	d809      	bhi.n	801fdb2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fd9e:	68fb      	ldr	r3, [r7, #12]
 801fda0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d004      	beq.n	801fdb2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801fda8:	68fb      	ldr	r3, [r7, #12]
 801fdaa:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fdae:	2b10      	cmp	r3, #16
 801fdb0:	d90e      	bls.n	801fdd0 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fdb2:	68fb      	ldr	r3, [r7, #12]
 801fdb4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fdb8:	2320      	movs	r3, #32
 801fdba:	2205      	movs	r2, #5
 801fdbc:	6878      	ldr	r0, [r7, #4]
 801fdbe:	f000 fe28 	bl	8020a12 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fdc2:	68fb      	ldr	r3, [r7, #12]
 801fdc4:	2202      	movs	r2, #2
 801fdc6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801fdc8:	6878      	ldr	r0, [r7, #4]
 801fdca:	f000 f8bd 	bl	801ff48 <MSC_BOT_Abort>
 801fdce:	e043      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801fdd6:	68fb      	ldr	r3, [r7, #12]
 801fdd8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801fddc:	461a      	mov	r2, r3
 801fdde:	6878      	ldr	r0, [r7, #4]
 801fde0:	f000 f92e 	bl	8020040 <SCSI_ProcessCmd>
 801fde4:	4603      	mov	r3, r0
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	da0c      	bge.n	801fe04 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801fdea:	68fb      	ldr	r3, [r7, #12]
 801fdec:	7a1b      	ldrb	r3, [r3, #8]
 801fdee:	2b05      	cmp	r3, #5
 801fdf0:	d104      	bne.n	801fdfc <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fdf2:	2101      	movs	r1, #1
 801fdf4:	6878      	ldr	r0, [r7, #4]
 801fdf6:	f000 f86d 	bl	801fed4 <MSC_BOT_SendCSW>
 801fdfa:	e02d      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fdfc:	6878      	ldr	r0, [r7, #4]
 801fdfe:	f000 f8a3 	bl	801ff48 <MSC_BOT_Abort>
 801fe02:	e029      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fe04:	68fb      	ldr	r3, [r7, #12]
 801fe06:	7a1b      	ldrb	r3, [r3, #8]
 801fe08:	2b02      	cmp	r3, #2
 801fe0a:	d024      	beq.n	801fe56 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fe10:	2b01      	cmp	r3, #1
 801fe12:	d020      	beq.n	801fe56 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801fe18:	2b03      	cmp	r3, #3
 801fe1a:	d01c      	beq.n	801fe56 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	68db      	ldr	r3, [r3, #12]
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d009      	beq.n	801fe38 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	f103 0110 	add.w	r1, r3, #16
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	68db      	ldr	r3, [r3, #12]
 801fe2e:	461a      	mov	r2, r3
 801fe30:	6878      	ldr	r0, [r7, #4]
 801fe32:	f000 f819 	bl	801fe68 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801fe36:	e00f      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	68db      	ldr	r3, [r3, #12]
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d104      	bne.n	801fe4a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fe40:	2100      	movs	r1, #0
 801fe42:	6878      	ldr	r0, [r7, #4]
 801fe44:	f000 f846 	bl	801fed4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801fe48:	e006      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801fe4a:	6878      	ldr	r0, [r7, #4]
 801fe4c:	f000 f87c 	bl	801ff48 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801fe50:	e002      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
    return;
 801fe52:	bf00      	nop
 801fe54:	e000      	b.n	801fe58 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801fe56:	bf00      	nop
    }
  }
}
 801fe58:	3710      	adds	r7, #16
 801fe5a:	46bd      	mov	sp, r7
 801fe5c:	bd80      	pop	{r7, pc}
 801fe5e:	bf00      	nop
 801fe60:	200005e7 	.word	0x200005e7
 801fe64:	43425355 	.word	0x43425355

0801fe68 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fe68:	b580      	push	{r7, lr}
 801fe6a:	b086      	sub	sp, #24
 801fe6c:	af00      	add	r7, sp, #0
 801fe6e:	60f8      	str	r0, [r7, #12]
 801fe70:	60b9      	str	r1, [r7, #8]
 801fe72:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fe74:	68fb      	ldr	r3, [r7, #12]
 801fe76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe7a:	68fb      	ldr	r3, [r7, #12]
 801fe7c:	32b0      	adds	r2, #176	; 0xb0
 801fe7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fe82:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fe84:	697b      	ldr	r3, [r7, #20]
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	d01e      	beq.n	801fec8 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801fe8a:	697b      	ldr	r3, [r7, #20]
 801fe8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fe90:	687a      	ldr	r2, [r7, #4]
 801fe92:	4293      	cmp	r3, r2
 801fe94:	bf28      	it	cs
 801fe96:	4613      	movcs	r3, r2
 801fe98:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	1ad2      	subs	r2, r2, r3
 801fea4:	697b      	ldr	r3, [r7, #20]
 801fea6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801feaa:	697b      	ldr	r3, [r7, #20]
 801feac:	2200      	movs	r2, #0
 801feae:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	2204      	movs	r2, #4
 801feb6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801feb8:	4b05      	ldr	r3, [pc, #20]	; (801fed0 <MSC_BOT_SendData+0x68>)
 801feba:	7819      	ldrb	r1, [r3, #0]
 801febc:	693b      	ldr	r3, [r7, #16]
 801febe:	68ba      	ldr	r2, [r7, #8]
 801fec0:	68f8      	ldr	r0, [r7, #12]
 801fec2:	f006 f9a3 	bl	802620c <USBD_LL_Transmit>
 801fec6:	e000      	b.n	801feca <MSC_BOT_SendData+0x62>
    return;
 801fec8:	bf00      	nop
}
 801feca:	3718      	adds	r7, #24
 801fecc:	46bd      	mov	sp, r7
 801fece:	bd80      	pop	{r7, pc}
 801fed0:	200005e6 	.word	0x200005e6

0801fed4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fed4:	b580      	push	{r7, lr}
 801fed6:	b084      	sub	sp, #16
 801fed8:	af00      	add	r7, sp, #0
 801feda:	6078      	str	r0, [r7, #4]
 801fedc:	460b      	mov	r3, r1
 801fede:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	32b0      	adds	r2, #176	; 0xb0
 801feea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801feee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	d01d      	beq.n	801ff32 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fef6:	68fb      	ldr	r3, [r7, #12]
 801fef8:	4a10      	ldr	r2, [pc, #64]	; (801ff3c <MSC_BOT_SendCSW+0x68>)
 801fefa:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	78fa      	ldrb	r2, [r7, #3]
 801ff02:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801ff06:	68fb      	ldr	r3, [r7, #12]
 801ff08:	2200      	movs	r2, #0
 801ff0a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801ff0c:	4b0c      	ldr	r3, [pc, #48]	; (801ff40 <MSC_BOT_SendCSW+0x6c>)
 801ff0e:	7819      	ldrb	r1, [r3, #0]
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801ff16:	230d      	movs	r3, #13
 801ff18:	6878      	ldr	r0, [r7, #4]
 801ff1a:	f006 f977 	bl	802620c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801ff1e:	4b09      	ldr	r3, [pc, #36]	; (801ff44 <MSC_BOT_SendCSW+0x70>)
 801ff20:	7819      	ldrb	r1, [r3, #0]
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801ff28:	231f      	movs	r3, #31
 801ff2a:	6878      	ldr	r0, [r7, #4]
 801ff2c:	f006 f98f 	bl	802624e <USBD_LL_PrepareReceive>
 801ff30:	e000      	b.n	801ff34 <MSC_BOT_SendCSW+0x60>
    return;
 801ff32:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801ff34:	3710      	adds	r7, #16
 801ff36:	46bd      	mov	sp, r7
 801ff38:	bd80      	pop	{r7, pc}
 801ff3a:	bf00      	nop
 801ff3c:	53425355 	.word	0x53425355
 801ff40:	200005e6 	.word	0x200005e6
 801ff44:	200005e7 	.word	0x200005e7

0801ff48 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801ff48:	b580      	push	{r7, lr}
 801ff4a:	b084      	sub	sp, #16
 801ff4c:	af00      	add	r7, sp, #0
 801ff4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	32b0      	adds	r2, #176	; 0xb0
 801ff5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ff5e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d02a      	beq.n	801ffbc <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d10e      	bne.n	801ff8e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 801ff70:	68fb      	ldr	r3, [r7, #12]
 801ff72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d009      	beq.n	801ff8e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d105      	bne.n	801ff8e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801ff82:	4b10      	ldr	r3, [pc, #64]	; (801ffc4 <MSC_BOT_Abort+0x7c>)
 801ff84:	781b      	ldrb	r3, [r3, #0]
 801ff86:	4619      	mov	r1, r3
 801ff88:	6878      	ldr	r0, [r7, #4]
 801ff8a:	f006 f8b6 	bl	80260fa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801ff8e:	4b0e      	ldr	r3, [pc, #56]	; (801ffc8 <MSC_BOT_Abort+0x80>)
 801ff90:	781b      	ldrb	r3, [r3, #0]
 801ff92:	4619      	mov	r1, r3
 801ff94:	6878      	ldr	r0, [r7, #4]
 801ff96:	f006 f8b0 	bl	80260fa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801ff9a:	68fb      	ldr	r3, [r7, #12]
 801ff9c:	7a5b      	ldrb	r3, [r3, #9]
 801ff9e:	2b02      	cmp	r3, #2
 801ffa0:	d10d      	bne.n	801ffbe <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801ffa2:	4b09      	ldr	r3, [pc, #36]	; (801ffc8 <MSC_BOT_Abort+0x80>)
 801ffa4:	781b      	ldrb	r3, [r3, #0]
 801ffa6:	4619      	mov	r1, r3
 801ffa8:	6878      	ldr	r0, [r7, #4]
 801ffaa:	f006 f8a6 	bl	80260fa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801ffae:	4b05      	ldr	r3, [pc, #20]	; (801ffc4 <MSC_BOT_Abort+0x7c>)
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	4619      	mov	r1, r3
 801ffb4:	6878      	ldr	r0, [r7, #4]
 801ffb6:	f006 f8a0 	bl	80260fa <USBD_LL_StallEP>
 801ffba:	e000      	b.n	801ffbe <MSC_BOT_Abort+0x76>
    return;
 801ffbc:	bf00      	nop
  }
}
 801ffbe:	3710      	adds	r7, #16
 801ffc0:	46bd      	mov	sp, r7
 801ffc2:	bd80      	pop	{r7, pc}
 801ffc4:	200005e7 	.word	0x200005e7
 801ffc8:	200005e6 	.word	0x200005e6

0801ffcc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ffcc:	b580      	push	{r7, lr}
 801ffce:	b084      	sub	sp, #16
 801ffd0:	af00      	add	r7, sp, #0
 801ffd2:	6078      	str	r0, [r7, #4]
 801ffd4:	460b      	mov	r3, r1
 801ffd6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	32b0      	adds	r2, #176	; 0xb0
 801ffe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ffe6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d01d      	beq.n	802002a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	7a5b      	ldrb	r3, [r3, #9]
 801fff2:	2b02      	cmp	r3, #2
 801fff4:	d10c      	bne.n	8020010 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801fff6:	4b10      	ldr	r3, [pc, #64]	; (8020038 <MSC_BOT_CplClrFeature+0x6c>)
 801fff8:	781b      	ldrb	r3, [r3, #0]
 801fffa:	4619      	mov	r1, r3
 801fffc:	6878      	ldr	r0, [r7, #4]
 801fffe:	f006 f87c 	bl	80260fa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8020002:	4b0e      	ldr	r3, [pc, #56]	; (802003c <MSC_BOT_CplClrFeature+0x70>)
 8020004:	781b      	ldrb	r3, [r3, #0]
 8020006:	4619      	mov	r1, r3
 8020008:	6878      	ldr	r0, [r7, #4]
 802000a:	f006 f876 	bl	80260fa <USBD_LL_StallEP>
 802000e:	e00f      	b.n	8020030 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8020010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020014:	2b00      	cmp	r3, #0
 8020016:	da0a      	bge.n	802002e <MSC_BOT_CplClrFeature+0x62>
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	7a5b      	ldrb	r3, [r3, #9]
 802001c:	2b01      	cmp	r3, #1
 802001e:	d006      	beq.n	802002e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8020020:	2101      	movs	r1, #1
 8020022:	6878      	ldr	r0, [r7, #4]
 8020024:	f7ff ff56 	bl	801fed4 <MSC_BOT_SendCSW>
 8020028:	e002      	b.n	8020030 <MSC_BOT_CplClrFeature+0x64>
    return;
 802002a:	bf00      	nop
 802002c:	e000      	b.n	8020030 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 802002e:	bf00      	nop
  }
}
 8020030:	3710      	adds	r7, #16
 8020032:	46bd      	mov	sp, r7
 8020034:	bd80      	pop	{r7, pc}
 8020036:	bf00      	nop
 8020038:	200005e6 	.word	0x200005e6
 802003c:	200005e7 	.word	0x200005e7

08020040 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8020040:	b580      	push	{r7, lr}
 8020042:	b086      	sub	sp, #24
 8020044:	af00      	add	r7, sp, #0
 8020046:	60f8      	str	r0, [r7, #12]
 8020048:	460b      	mov	r3, r1
 802004a:	607a      	str	r2, [r7, #4]
 802004c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802004e:	68fb      	ldr	r3, [r7, #12]
 8020050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	32b0      	adds	r2, #176	; 0xb0
 8020058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802005c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 802005e:	693b      	ldr	r3, [r7, #16]
 8020060:	2b00      	cmp	r3, #0
 8020062:	d102      	bne.n	802006a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8020064:	f04f 33ff 	mov.w	r3, #4294967295
 8020068:	e168      	b.n	802033c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	781b      	ldrb	r3, [r3, #0]
 802006e:	2baa      	cmp	r3, #170	; 0xaa
 8020070:	f000 8144 	beq.w	80202fc <SCSI_ProcessCmd+0x2bc>
 8020074:	2baa      	cmp	r3, #170	; 0xaa
 8020076:	f300 8153 	bgt.w	8020320 <SCSI_ProcessCmd+0x2e0>
 802007a:	2ba8      	cmp	r3, #168	; 0xa8
 802007c:	f000 812c 	beq.w	80202d8 <SCSI_ProcessCmd+0x298>
 8020080:	2ba8      	cmp	r3, #168	; 0xa8
 8020082:	f300 814d 	bgt.w	8020320 <SCSI_ProcessCmd+0x2e0>
 8020086:	2b5a      	cmp	r3, #90	; 0x5a
 8020088:	f300 80c0 	bgt.w	802020c <SCSI_ProcessCmd+0x1cc>
 802008c:	2b00      	cmp	r3, #0
 802008e:	f2c0 8147 	blt.w	8020320 <SCSI_ProcessCmd+0x2e0>
 8020092:	2b5a      	cmp	r3, #90	; 0x5a
 8020094:	f200 8144 	bhi.w	8020320 <SCSI_ProcessCmd+0x2e0>
 8020098:	a201      	add	r2, pc, #4	; (adr r2, 80200a0 <SCSI_ProcessCmd+0x60>)
 802009a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802009e:	bf00      	nop
 80200a0:	08020213 	.word	0x08020213
 80200a4:	08020321 	.word	0x08020321
 80200a8:	08020321 	.word	0x08020321
 80200ac:	08020225 	.word	0x08020225
 80200b0:	08020321 	.word	0x08020321
 80200b4:	08020321 	.word	0x08020321
 80200b8:	08020321 	.word	0x08020321
 80200bc:	08020321 	.word	0x08020321
 80200c0:	08020321 	.word	0x08020321
 80200c4:	08020321 	.word	0x08020321
 80200c8:	08020321 	.word	0x08020321
 80200cc:	08020321 	.word	0x08020321
 80200d0:	08020321 	.word	0x08020321
 80200d4:	08020321 	.word	0x08020321
 80200d8:	08020321 	.word	0x08020321
 80200dc:	08020321 	.word	0x08020321
 80200e0:	08020321 	.word	0x08020321
 80200e4:	08020321 	.word	0x08020321
 80200e8:	08020237 	.word	0x08020237
 80200ec:	08020321 	.word	0x08020321
 80200f0:	08020321 	.word	0x08020321
 80200f4:	08020321 	.word	0x08020321
 80200f8:	08020321 	.word	0x08020321
 80200fc:	08020321 	.word	0x08020321
 8020100:	08020321 	.word	0x08020321
 8020104:	08020321 	.word	0x08020321
 8020108:	0802026d 	.word	0x0802026d
 802010c:	08020249 	.word	0x08020249
 8020110:	08020321 	.word	0x08020321
 8020114:	08020321 	.word	0x08020321
 8020118:	0802025b 	.word	0x0802025b
 802011c:	08020321 	.word	0x08020321
 8020120:	08020321 	.word	0x08020321
 8020124:	08020321 	.word	0x08020321
 8020128:	08020321 	.word	0x08020321
 802012c:	08020291 	.word	0x08020291
 8020130:	08020321 	.word	0x08020321
 8020134:	080202a3 	.word	0x080202a3
 8020138:	08020321 	.word	0x08020321
 802013c:	08020321 	.word	0x08020321
 8020140:	080202c7 	.word	0x080202c7
 8020144:	08020321 	.word	0x08020321
 8020148:	080202eb 	.word	0x080202eb
 802014c:	08020321 	.word	0x08020321
 8020150:	08020321 	.word	0x08020321
 8020154:	08020321 	.word	0x08020321
 8020158:	08020321 	.word	0x08020321
 802015c:	0802030f 	.word	0x0802030f
 8020160:	08020321 	.word	0x08020321
 8020164:	08020321 	.word	0x08020321
 8020168:	08020321 	.word	0x08020321
 802016c:	08020321 	.word	0x08020321
 8020170:	08020321 	.word	0x08020321
 8020174:	08020321 	.word	0x08020321
 8020178:	08020321 	.word	0x08020321
 802017c:	08020321 	.word	0x08020321
 8020180:	08020321 	.word	0x08020321
 8020184:	08020321 	.word	0x08020321
 8020188:	08020321 	.word	0x08020321
 802018c:	08020321 	.word	0x08020321
 8020190:	08020321 	.word	0x08020321
 8020194:	08020321 	.word	0x08020321
 8020198:	08020321 	.word	0x08020321
 802019c:	08020321 	.word	0x08020321
 80201a0:	08020321 	.word	0x08020321
 80201a4:	08020321 	.word	0x08020321
 80201a8:	08020321 	.word	0x08020321
 80201ac:	08020321 	.word	0x08020321
 80201b0:	08020321 	.word	0x08020321
 80201b4:	08020321 	.word	0x08020321
 80201b8:	08020321 	.word	0x08020321
 80201bc:	08020321 	.word	0x08020321
 80201c0:	08020321 	.word	0x08020321
 80201c4:	08020321 	.word	0x08020321
 80201c8:	08020321 	.word	0x08020321
 80201cc:	08020321 	.word	0x08020321
 80201d0:	08020321 	.word	0x08020321
 80201d4:	08020321 	.word	0x08020321
 80201d8:	08020321 	.word	0x08020321
 80201dc:	08020321 	.word	0x08020321
 80201e0:	08020321 	.word	0x08020321
 80201e4:	08020321 	.word	0x08020321
 80201e8:	08020321 	.word	0x08020321
 80201ec:	08020321 	.word	0x08020321
 80201f0:	08020321 	.word	0x08020321
 80201f4:	08020321 	.word	0x08020321
 80201f8:	08020321 	.word	0x08020321
 80201fc:	08020321 	.word	0x08020321
 8020200:	08020321 	.word	0x08020321
 8020204:	08020321 	.word	0x08020321
 8020208:	0802027f 	.word	0x0802027f
 802020c:	2b9e      	cmp	r3, #158	; 0x9e
 802020e:	d051      	beq.n	80202b4 <SCSI_ProcessCmd+0x274>
 8020210:	e086      	b.n	8020320 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8020212:	7afb      	ldrb	r3, [r7, #11]
 8020214:	687a      	ldr	r2, [r7, #4]
 8020216:	4619      	mov	r1, r3
 8020218:	68f8      	ldr	r0, [r7, #12]
 802021a:	f000 f893 	bl	8020344 <SCSI_TestUnitReady>
 802021e:	4603      	mov	r3, r0
 8020220:	75fb      	strb	r3, [r7, #23]
      break;
 8020222:	e089      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8020224:	7afb      	ldrb	r3, [r7, #11]
 8020226:	687a      	ldr	r2, [r7, #4]
 8020228:	4619      	mov	r1, r3
 802022a:	68f8      	ldr	r0, [r7, #12]
 802022c:	f000 fb6e 	bl	802090c <SCSI_RequestSense>
 8020230:	4603      	mov	r3, r0
 8020232:	75fb      	strb	r3, [r7, #23]
      break;
 8020234:	e080      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8020236:	7afb      	ldrb	r3, [r7, #11]
 8020238:	687a      	ldr	r2, [r7, #4]
 802023a:	4619      	mov	r1, r3
 802023c:	68f8      	ldr	r0, [r7, #12]
 802023e:	f000 f8db 	bl	80203f8 <SCSI_Inquiry>
 8020242:	4603      	mov	r3, r0
 8020244:	75fb      	strb	r3, [r7, #23]
      break;
 8020246:	e077      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8020248:	7afb      	ldrb	r3, [r7, #11]
 802024a:	687a      	ldr	r2, [r7, #4]
 802024c:	4619      	mov	r1, r3
 802024e:	68f8      	ldr	r0, [r7, #12]
 8020250:	f000 fc2a 	bl	8020aa8 <SCSI_StartStopUnit>
 8020254:	4603      	mov	r3, r0
 8020256:	75fb      	strb	r3, [r7, #23]
      break;
 8020258:	e06e      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 802025a:	7afb      	ldrb	r3, [r7, #11]
 802025c:	687a      	ldr	r2, [r7, #4]
 802025e:	4619      	mov	r1, r3
 8020260:	68f8      	ldr	r0, [r7, #12]
 8020262:	f000 fc76 	bl	8020b52 <SCSI_AllowPreventRemovable>
 8020266:	4603      	mov	r3, r0
 8020268:	75fb      	strb	r3, [r7, #23]
      break;
 802026a:	e065      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 802026c:	7afb      	ldrb	r3, [r7, #11]
 802026e:	687a      	ldr	r2, [r7, #4]
 8020270:	4619      	mov	r1, r3
 8020272:	68f8      	ldr	r0, [r7, #12]
 8020274:	f000 faea 	bl	802084c <SCSI_ModeSense6>
 8020278:	4603      	mov	r3, r0
 802027a:	75fb      	strb	r3, [r7, #23]
      break;
 802027c:	e05c      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 802027e:	7afb      	ldrb	r3, [r7, #11]
 8020280:	687a      	ldr	r2, [r7, #4]
 8020282:	4619      	mov	r1, r3
 8020284:	68f8      	ldr	r0, [r7, #12]
 8020286:	f000 fb11 	bl	80208ac <SCSI_ModeSense10>
 802028a:	4603      	mov	r3, r0
 802028c:	75fb      	strb	r3, [r7, #23]
      break;
 802028e:	e053      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8020290:	7afb      	ldrb	r3, [r7, #11]
 8020292:	687a      	ldr	r2, [r7, #4]
 8020294:	4619      	mov	r1, r3
 8020296:	68f8      	ldr	r0, [r7, #12]
 8020298:	f000 fa5d 	bl	8020756 <SCSI_ReadFormatCapacity>
 802029c:	4603      	mov	r3, r0
 802029e:	75fb      	strb	r3, [r7, #23]
      break;
 80202a0:	e04a      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80202a2:	7afb      	ldrb	r3, [r7, #11]
 80202a4:	687a      	ldr	r2, [r7, #4]
 80202a6:	4619      	mov	r1, r3
 80202a8:	68f8      	ldr	r0, [r7, #12]
 80202aa:	f000 f923 	bl	80204f4 <SCSI_ReadCapacity10>
 80202ae:	4603      	mov	r3, r0
 80202b0:	75fb      	strb	r3, [r7, #23]
      break;
 80202b2:	e041      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80202b4:	7afb      	ldrb	r3, [r7, #11]
 80202b6:	687a      	ldr	r2, [r7, #4]
 80202b8:	4619      	mov	r1, r3
 80202ba:	68f8      	ldr	r0, [r7, #12]
 80202bc:	f000 f998 	bl	80205f0 <SCSI_ReadCapacity16>
 80202c0:	4603      	mov	r3, r0
 80202c2:	75fb      	strb	r3, [r7, #23]
      break;
 80202c4:	e038      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80202c6:	7afb      	ldrb	r3, [r7, #11]
 80202c8:	687a      	ldr	r2, [r7, #4]
 80202ca:	4619      	mov	r1, r3
 80202cc:	68f8      	ldr	r0, [r7, #12]
 80202ce:	f000 fc6d 	bl	8020bac <SCSI_Read10>
 80202d2:	4603      	mov	r3, r0
 80202d4:	75fb      	strb	r3, [r7, #23]
      break;
 80202d6:	e02f      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80202d8:	7afb      	ldrb	r3, [r7, #11]
 80202da:	687a      	ldr	r2, [r7, #4]
 80202dc:	4619      	mov	r1, r3
 80202de:	68f8      	ldr	r0, [r7, #12]
 80202e0:	f000 fd0e 	bl	8020d00 <SCSI_Read12>
 80202e4:	4603      	mov	r3, r0
 80202e6:	75fb      	strb	r3, [r7, #23]
      break;
 80202e8:	e026      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80202ea:	7afb      	ldrb	r3, [r7, #11]
 80202ec:	687a      	ldr	r2, [r7, #4]
 80202ee:	4619      	mov	r1, r3
 80202f0:	68f8      	ldr	r0, [r7, #12]
 80202f2:	f000 fdb9 	bl	8020e68 <SCSI_Write10>
 80202f6:	4603      	mov	r3, r0
 80202f8:	75fb      	strb	r3, [r7, #23]
      break;
 80202fa:	e01d      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80202fc:	7afb      	ldrb	r3, [r7, #11]
 80202fe:	687a      	ldr	r2, [r7, #4]
 8020300:	4619      	mov	r1, r3
 8020302:	68f8      	ldr	r0, [r7, #12]
 8020304:	f000 fe86 	bl	8021014 <SCSI_Write12>
 8020308:	4603      	mov	r3, r0
 802030a:	75fb      	strb	r3, [r7, #23]
      break;
 802030c:	e014      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 802030e:	7afb      	ldrb	r3, [r7, #11]
 8020310:	687a      	ldr	r2, [r7, #4]
 8020312:	4619      	mov	r1, r3
 8020314:	68f8      	ldr	r0, [r7, #12]
 8020316:	f000 ff63 	bl	80211e0 <SCSI_Verify10>
 802031a:	4603      	mov	r3, r0
 802031c:	75fb      	strb	r3, [r7, #23]
      break;
 802031e:	e00b      	b.n	8020338 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8020320:	7af9      	ldrb	r1, [r7, #11]
 8020322:	2320      	movs	r3, #32
 8020324:	2205      	movs	r2, #5
 8020326:	68f8      	ldr	r0, [r7, #12]
 8020328:	f000 fb73 	bl	8020a12 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 802032c:	693b      	ldr	r3, [r7, #16]
 802032e:	2202      	movs	r2, #2
 8020330:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8020332:	23ff      	movs	r3, #255	; 0xff
 8020334:	75fb      	strb	r3, [r7, #23]
      break;
 8020336:	bf00      	nop
  }

  return ret;
 8020338:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802033c:	4618      	mov	r0, r3
 802033e:	3718      	adds	r7, #24
 8020340:	46bd      	mov	sp, r7
 8020342:	bd80      	pop	{r7, pc}

08020344 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020344:	b580      	push	{r7, lr}
 8020346:	b086      	sub	sp, #24
 8020348:	af00      	add	r7, sp, #0
 802034a:	60f8      	str	r0, [r7, #12]
 802034c:	460b      	mov	r3, r1
 802034e:	607a      	str	r2, [r7, #4]
 8020350:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020352:	68fb      	ldr	r3, [r7, #12]
 8020354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020358:	68fb      	ldr	r3, [r7, #12]
 802035a:	32b0      	adds	r2, #176	; 0xb0
 802035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020360:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020362:	697b      	ldr	r3, [r7, #20]
 8020364:	2b00      	cmp	r3, #0
 8020366:	d102      	bne.n	802036e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8020368:	f04f 33ff 	mov.w	r3, #4294967295
 802036c:	e03f      	b.n	80203ee <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 802036e:	697b      	ldr	r3, [r7, #20]
 8020370:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020374:	2b00      	cmp	r3, #0
 8020376:	d00a      	beq.n	802038e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020378:	697b      	ldr	r3, [r7, #20]
 802037a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802037e:	2320      	movs	r3, #32
 8020380:	2205      	movs	r2, #5
 8020382:	68f8      	ldr	r0, [r7, #12]
 8020384:	f000 fb45 	bl	8020a12 <SCSI_SenseCode>

    return -1;
 8020388:	f04f 33ff 	mov.w	r3, #4294967295
 802038c:	e02f      	b.n	80203ee <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 802038e:	697b      	ldr	r3, [r7, #20]
 8020390:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020394:	2b02      	cmp	r3, #2
 8020396:	d10b      	bne.n	80203b0 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020398:	7af9      	ldrb	r1, [r7, #11]
 802039a:	233a      	movs	r3, #58	; 0x3a
 802039c:	2202      	movs	r2, #2
 802039e:	68f8      	ldr	r0, [r7, #12]
 80203a0:	f000 fb37 	bl	8020a12 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80203a4:	697b      	ldr	r3, [r7, #20]
 80203a6:	2205      	movs	r2, #5
 80203a8:	721a      	strb	r2, [r3, #8]
    return -1;
 80203aa:	f04f 33ff 	mov.w	r3, #4294967295
 80203ae:	e01e      	b.n	80203ee <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80203b0:	68fb      	ldr	r3, [r7, #12]
 80203b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80203b6:	68fa      	ldr	r2, [r7, #12]
 80203b8:	33b0      	adds	r3, #176	; 0xb0
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	4413      	add	r3, r2
 80203be:	685b      	ldr	r3, [r3, #4]
 80203c0:	689b      	ldr	r3, [r3, #8]
 80203c2:	7afa      	ldrb	r2, [r7, #11]
 80203c4:	4610      	mov	r0, r2
 80203c6:	4798      	blx	r3
 80203c8:	4603      	mov	r3, r0
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d00b      	beq.n	80203e6 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80203ce:	7af9      	ldrb	r1, [r7, #11]
 80203d0:	233a      	movs	r3, #58	; 0x3a
 80203d2:	2202      	movs	r2, #2
 80203d4:	68f8      	ldr	r0, [r7, #12]
 80203d6:	f000 fb1c 	bl	8020a12 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80203da:	697b      	ldr	r3, [r7, #20]
 80203dc:	2205      	movs	r2, #5
 80203de:	721a      	strb	r2, [r3, #8]

    return -1;
 80203e0:	f04f 33ff 	mov.w	r3, #4294967295
 80203e4:	e003      	b.n	80203ee <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80203e6:	697b      	ldr	r3, [r7, #20]
 80203e8:	2200      	movs	r2, #0
 80203ea:	60da      	str	r2, [r3, #12]

  return 0;
 80203ec:	2300      	movs	r3, #0
}
 80203ee:	4618      	mov	r0, r3
 80203f0:	3718      	adds	r7, #24
 80203f2:	46bd      	mov	sp, r7
 80203f4:	bd80      	pop	{r7, pc}
	...

080203f8 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80203f8:	b580      	push	{r7, lr}
 80203fa:	b088      	sub	sp, #32
 80203fc:	af00      	add	r7, sp, #0
 80203fe:	60f8      	str	r0, [r7, #12]
 8020400:	460b      	mov	r3, r1
 8020402:	607a      	str	r2, [r7, #4]
 8020404:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020406:	68fb      	ldr	r3, [r7, #12]
 8020408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802040c:	68fb      	ldr	r3, [r7, #12]
 802040e:	32b0      	adds	r2, #176	; 0xb0
 8020410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020414:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020416:	69bb      	ldr	r3, [r7, #24]
 8020418:	2b00      	cmp	r3, #0
 802041a:	d102      	bne.n	8020422 <SCSI_Inquiry+0x2a>
  {
    return -1;
 802041c:	f04f 33ff 	mov.w	r3, #4294967295
 8020420:	e05f      	b.n	80204e2 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020422:	69bb      	ldr	r3, [r7, #24]
 8020424:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020428:	2b00      	cmp	r3, #0
 802042a:	d10a      	bne.n	8020442 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802042c:	69bb      	ldr	r3, [r7, #24]
 802042e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020432:	2320      	movs	r3, #32
 8020434:	2205      	movs	r2, #5
 8020436:	68f8      	ldr	r0, [r7, #12]
 8020438:	f000 faeb 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 802043c:	f04f 33ff 	mov.w	r3, #4294967295
 8020440:	e04f      	b.n	80204e2 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	3301      	adds	r3, #1
 8020446:	781b      	ldrb	r3, [r3, #0]
 8020448:	f003 0301 	and.w	r3, r3, #1
 802044c:	2b00      	cmp	r3, #0
 802044e:	d020      	beq.n	8020492 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	3302      	adds	r3, #2
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	2b00      	cmp	r3, #0
 8020458:	d105      	bne.n	8020466 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 802045a:	2206      	movs	r2, #6
 802045c:	4923      	ldr	r1, [pc, #140]	; (80204ec <SCSI_Inquiry+0xf4>)
 802045e:	69b8      	ldr	r0, [r7, #24]
 8020460:	f001 f844 	bl	80214ec <SCSI_UpdateBotData>
 8020464:	e03c      	b.n	80204e0 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	3302      	adds	r3, #2
 802046a:	781b      	ldrb	r3, [r3, #0]
 802046c:	2b80      	cmp	r3, #128	; 0x80
 802046e:	d105      	bne.n	802047c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8020470:	2208      	movs	r2, #8
 8020472:	491f      	ldr	r1, [pc, #124]	; (80204f0 <SCSI_Inquiry+0xf8>)
 8020474:	69b8      	ldr	r0, [r7, #24]
 8020476:	f001 f839 	bl	80214ec <SCSI_UpdateBotData>
 802047a:	e031      	b.n	80204e0 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 802047c:	69bb      	ldr	r3, [r7, #24]
 802047e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020482:	2324      	movs	r3, #36	; 0x24
 8020484:	2205      	movs	r2, #5
 8020486:	68f8      	ldr	r0, [r7, #12]
 8020488:	f000 fac3 	bl	8020a12 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 802048c:	f04f 33ff 	mov.w	r3, #4294967295
 8020490:	e027      	b.n	80204e2 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8020492:	68fb      	ldr	r3, [r7, #12]
 8020494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020498:	68fa      	ldr	r2, [r7, #12]
 802049a:	33b0      	adds	r3, #176	; 0xb0
 802049c:	009b      	lsls	r3, r3, #2
 802049e:	4413      	add	r3, r2
 80204a0:	685b      	ldr	r3, [r3, #4]
 80204a2:	69d9      	ldr	r1, [r3, #28]
 80204a4:	7afa      	ldrb	r2, [r7, #11]
 80204a6:	4613      	mov	r3, r2
 80204a8:	00db      	lsls	r3, r3, #3
 80204aa:	4413      	add	r3, r2
 80204ac:	009b      	lsls	r3, r3, #2
 80204ae:	440b      	add	r3, r1
 80204b0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	3304      	adds	r3, #4
 80204b6:	781b      	ldrb	r3, [r3, #0]
 80204b8:	b29b      	uxth	r3, r3
 80204ba:	3305      	adds	r3, #5
 80204bc:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	3304      	adds	r3, #4
 80204c2:	781b      	ldrb	r3, [r3, #0]
 80204c4:	b29b      	uxth	r3, r3
 80204c6:	8bfa      	ldrh	r2, [r7, #30]
 80204c8:	429a      	cmp	r2, r3
 80204ca:	d303      	bcc.n	80204d4 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	3304      	adds	r3, #4
 80204d0:	781b      	ldrb	r3, [r3, #0]
 80204d2:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80204d4:	8bfb      	ldrh	r3, [r7, #30]
 80204d6:	461a      	mov	r2, r3
 80204d8:	6979      	ldr	r1, [r7, #20]
 80204da:	69b8      	ldr	r0, [r7, #24]
 80204dc:	f001 f806 	bl	80214ec <SCSI_UpdateBotData>
  }

  return 0;
 80204e0:	2300      	movs	r3, #0
}
 80204e2:	4618      	mov	r0, r3
 80204e4:	3720      	adds	r7, #32
 80204e6:	46bd      	mov	sp, r7
 80204e8:	bd80      	pop	{r7, pc}
 80204ea:	bf00      	nop
 80204ec:	200005e8 	.word	0x200005e8
 80204f0:	200005f0 	.word	0x200005f0

080204f4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80204f4:	b580      	push	{r7, lr}
 80204f6:	b086      	sub	sp, #24
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	60f8      	str	r0, [r7, #12]
 80204fc:	460b      	mov	r3, r1
 80204fe:	607a      	str	r2, [r7, #4]
 8020500:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	32b0      	adds	r2, #176	; 0xb0
 802050c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020510:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020512:	697b      	ldr	r3, [r7, #20]
 8020514:	2b00      	cmp	r3, #0
 8020516:	d102      	bne.n	802051e <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8020518:	f04f 33ff 	mov.w	r3, #4294967295
 802051c:	e064      	b.n	80205e8 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020524:	68fa      	ldr	r2, [r7, #12]
 8020526:	33b0      	adds	r3, #176	; 0xb0
 8020528:	009b      	lsls	r3, r3, #2
 802052a:	4413      	add	r3, r2
 802052c:	685b      	ldr	r3, [r3, #4]
 802052e:	685b      	ldr	r3, [r3, #4]
 8020530:	697a      	ldr	r2, [r7, #20]
 8020532:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020536:	697a      	ldr	r2, [r7, #20]
 8020538:	f502 7219 	add.w	r2, r2, #612	; 0x264
 802053c:	7af8      	ldrb	r0, [r7, #11]
 802053e:	4798      	blx	r3
 8020540:	4603      	mov	r3, r0
 8020542:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020548:	2b00      	cmp	r3, #0
 802054a:	d104      	bne.n	8020556 <SCSI_ReadCapacity10+0x62>
 802054c:	697b      	ldr	r3, [r7, #20]
 802054e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020552:	2b02      	cmp	r3, #2
 8020554:	d108      	bne.n	8020568 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020556:	7af9      	ldrb	r1, [r7, #11]
 8020558:	233a      	movs	r3, #58	; 0x3a
 802055a:	2202      	movs	r2, #2
 802055c:	68f8      	ldr	r0, [r7, #12]
 802055e:	f000 fa58 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 8020562:	f04f 33ff 	mov.w	r3, #4294967295
 8020566:	e03f      	b.n	80205e8 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8020568:	697b      	ldr	r3, [r7, #20]
 802056a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802056e:	3b01      	subs	r3, #1
 8020570:	0e1b      	lsrs	r3, r3, #24
 8020572:	b2da      	uxtb	r2, r3
 8020574:	697b      	ldr	r3, [r7, #20]
 8020576:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020578:	697b      	ldr	r3, [r7, #20]
 802057a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802057e:	3b01      	subs	r3, #1
 8020580:	0c1b      	lsrs	r3, r3, #16
 8020582:	b2da      	uxtb	r2, r3
 8020584:	697b      	ldr	r3, [r7, #20]
 8020586:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802058e:	3b01      	subs	r3, #1
 8020590:	0a1b      	lsrs	r3, r3, #8
 8020592:	b2da      	uxtb	r2, r3
 8020594:	697b      	ldr	r3, [r7, #20]
 8020596:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020598:	697b      	ldr	r3, [r7, #20]
 802059a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 802059e:	b2db      	uxtb	r3, r3
 80205a0:	3b01      	subs	r3, #1
 80205a2:	b2da      	uxtb	r2, r3
 80205a4:	697b      	ldr	r3, [r7, #20]
 80205a6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80205a8:	697b      	ldr	r3, [r7, #20]
 80205aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80205ae:	161b      	asrs	r3, r3, #24
 80205b0:	b2da      	uxtb	r2, r3
 80205b2:	697b      	ldr	r3, [r7, #20]
 80205b4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80205b6:	697b      	ldr	r3, [r7, #20]
 80205b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80205bc:	141b      	asrs	r3, r3, #16
 80205be:	b2da      	uxtb	r2, r3
 80205c0:	697b      	ldr	r3, [r7, #20]
 80205c2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80205c4:	697b      	ldr	r3, [r7, #20]
 80205c6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80205ca:	0a1b      	lsrs	r3, r3, #8
 80205cc:	b29b      	uxth	r3, r3
 80205ce:	b2da      	uxtb	r2, r3
 80205d0:	697b      	ldr	r3, [r7, #20]
 80205d2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80205d4:	697b      	ldr	r3, [r7, #20]
 80205d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80205da:	b2da      	uxtb	r2, r3
 80205dc:	697b      	ldr	r3, [r7, #20]
 80205de:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80205e0:	697b      	ldr	r3, [r7, #20]
 80205e2:	2208      	movs	r2, #8
 80205e4:	60da      	str	r2, [r3, #12]

  return 0;
 80205e6:	2300      	movs	r3, #0

}
 80205e8:	4618      	mov	r0, r3
 80205ea:	3718      	adds	r7, #24
 80205ec:	46bd      	mov	sp, r7
 80205ee:	bd80      	pop	{r7, pc}

080205f0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80205f0:	b580      	push	{r7, lr}
 80205f2:	b088      	sub	sp, #32
 80205f4:	af00      	add	r7, sp, #0
 80205f6:	60f8      	str	r0, [r7, #12]
 80205f8:	460b      	mov	r3, r1
 80205fa:	607a      	str	r2, [r7, #4]
 80205fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80205fe:	68fb      	ldr	r3, [r7, #12]
 8020600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020604:	68fb      	ldr	r3, [r7, #12]
 8020606:	32b0      	adds	r2, #176	; 0xb0
 8020608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802060c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802060e:	69bb      	ldr	r3, [r7, #24]
 8020610:	2b00      	cmp	r3, #0
 8020612:	d102      	bne.n	802061a <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8020614:	f04f 33ff 	mov.w	r3, #4294967295
 8020618:	e099      	b.n	802074e <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 802061a:	68fb      	ldr	r3, [r7, #12]
 802061c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020620:	68fa      	ldr	r2, [r7, #12]
 8020622:	33b0      	adds	r3, #176	; 0xb0
 8020624:	009b      	lsls	r3, r3, #2
 8020626:	4413      	add	r3, r2
 8020628:	685b      	ldr	r3, [r3, #4]
 802062a:	685b      	ldr	r3, [r3, #4]
 802062c:	69ba      	ldr	r2, [r7, #24]
 802062e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020632:	69ba      	ldr	r2, [r7, #24]
 8020634:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020638:	7af8      	ldrb	r0, [r7, #11]
 802063a:	4798      	blx	r3
 802063c:	4603      	mov	r3, r0
 802063e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d104      	bne.n	8020652 <SCSI_ReadCapacity16+0x62>
 8020648:	69bb      	ldr	r3, [r7, #24]
 802064a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802064e:	2b02      	cmp	r3, #2
 8020650:	d108      	bne.n	8020664 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020652:	7af9      	ldrb	r1, [r7, #11]
 8020654:	233a      	movs	r3, #58	; 0x3a
 8020656:	2202      	movs	r2, #2
 8020658:	68f8      	ldr	r0, [r7, #12]
 802065a:	f000 f9da 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 802065e:	f04f 33ff 	mov.w	r3, #4294967295
 8020662:	e074      	b.n	802074e <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	330a      	adds	r3, #10
 8020668:	781b      	ldrb	r3, [r3, #0]
 802066a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802066c:	687b      	ldr	r3, [r7, #4]
 802066e:	330b      	adds	r3, #11
 8020670:	781b      	ldrb	r3, [r3, #0]
 8020672:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020674:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	330c      	adds	r3, #12
 802067a:	781b      	ldrb	r3, [r3, #0]
 802067c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802067e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020680:	687a      	ldr	r2, [r7, #4]
 8020682:	320d      	adds	r2, #13
 8020684:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020686:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020688:	69bb      	ldr	r3, [r7, #24]
 802068a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802068c:	2300      	movs	r3, #0
 802068e:	77fb      	strb	r3, [r7, #31]
 8020690:	e007      	b.n	80206a2 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8020692:	7ffb      	ldrb	r3, [r7, #31]
 8020694:	69ba      	ldr	r2, [r7, #24]
 8020696:	4413      	add	r3, r2
 8020698:	2200      	movs	r2, #0
 802069a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802069c:	7ffb      	ldrb	r3, [r7, #31]
 802069e:	3301      	adds	r3, #1
 80206a0:	77fb      	strb	r3, [r7, #31]
 80206a2:	7ffa      	ldrb	r2, [r7, #31]
 80206a4:	69bb      	ldr	r3, [r7, #24]
 80206a6:	68db      	ldr	r3, [r3, #12]
 80206a8:	429a      	cmp	r2, r3
 80206aa:	d3f2      	bcc.n	8020692 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80206ac:	69bb      	ldr	r3, [r7, #24]
 80206ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80206b2:	3b01      	subs	r3, #1
 80206b4:	0e1b      	lsrs	r3, r3, #24
 80206b6:	b2da      	uxtb	r2, r3
 80206b8:	69bb      	ldr	r3, [r7, #24]
 80206ba:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80206bc:	69bb      	ldr	r3, [r7, #24]
 80206be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80206c2:	3b01      	subs	r3, #1
 80206c4:	0c1b      	lsrs	r3, r3, #16
 80206c6:	b2da      	uxtb	r2, r3
 80206c8:	69bb      	ldr	r3, [r7, #24]
 80206ca:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80206cc:	69bb      	ldr	r3, [r7, #24]
 80206ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80206d2:	3b01      	subs	r3, #1
 80206d4:	0a1b      	lsrs	r3, r3, #8
 80206d6:	b2da      	uxtb	r2, r3
 80206d8:	69bb      	ldr	r3, [r7, #24]
 80206da:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80206dc:	69bb      	ldr	r3, [r7, #24]
 80206de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80206e2:	b2db      	uxtb	r3, r3
 80206e4:	3b01      	subs	r3, #1
 80206e6:	b2da      	uxtb	r2, r3
 80206e8:	69bb      	ldr	r3, [r7, #24]
 80206ea:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80206ec:	69bb      	ldr	r3, [r7, #24]
 80206ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80206f2:	161b      	asrs	r3, r3, #24
 80206f4:	b2da      	uxtb	r2, r3
 80206f6:	69bb      	ldr	r3, [r7, #24]
 80206f8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80206fa:	69bb      	ldr	r3, [r7, #24]
 80206fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020700:	141b      	asrs	r3, r3, #16
 8020702:	b2da      	uxtb	r2, r3
 8020704:	69bb      	ldr	r3, [r7, #24]
 8020706:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8020708:	69bb      	ldr	r3, [r7, #24]
 802070a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802070e:	0a1b      	lsrs	r3, r3, #8
 8020710:	b29b      	uxth	r3, r3
 8020712:	b2da      	uxtb	r2, r3
 8020714:	69bb      	ldr	r3, [r7, #24]
 8020716:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8020718:	69bb      	ldr	r3, [r7, #24]
 802071a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802071e:	b2da      	uxtb	r2, r3
 8020720:	69bb      	ldr	r3, [r7, #24]
 8020722:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	330a      	adds	r3, #10
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	330b      	adds	r3, #11
 8020730:	781b      	ldrb	r3, [r3, #0]
 8020732:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020734:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020736:	687b      	ldr	r3, [r7, #4]
 8020738:	330c      	adds	r3, #12
 802073a:	781b      	ldrb	r3, [r3, #0]
 802073c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802073e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020740:	687a      	ldr	r2, [r7, #4]
 8020742:	320d      	adds	r2, #13
 8020744:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020746:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020748:	69bb      	ldr	r3, [r7, #24]
 802074a:	60da      	str	r2, [r3, #12]

  return 0;
 802074c:	2300      	movs	r3, #0
}
 802074e:	4618      	mov	r0, r3
 8020750:	3720      	adds	r7, #32
 8020752:	46bd      	mov	sp, r7
 8020754:	bd80      	pop	{r7, pc}

08020756 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020756:	b580      	push	{r7, lr}
 8020758:	b088      	sub	sp, #32
 802075a:	af00      	add	r7, sp, #0
 802075c:	60f8      	str	r0, [r7, #12]
 802075e:	460b      	mov	r3, r1
 8020760:	607a      	str	r2, [r7, #4]
 8020762:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020764:	68fb      	ldr	r3, [r7, #12]
 8020766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	32b0      	adds	r2, #176	; 0xb0
 802076e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020772:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020774:	69bb      	ldr	r3, [r7, #24]
 8020776:	2b00      	cmp	r3, #0
 8020778:	d102      	bne.n	8020780 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 802077a:	f04f 33ff 	mov.w	r3, #4294967295
 802077e:	e061      	b.n	8020844 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8020780:	68fb      	ldr	r3, [r7, #12]
 8020782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	33b0      	adds	r3, #176	; 0xb0
 802078a:	009b      	lsls	r3, r3, #2
 802078c:	4413      	add	r3, r2
 802078e:	685b      	ldr	r3, [r3, #4]
 8020790:	685b      	ldr	r3, [r3, #4]
 8020792:	f107 0214 	add.w	r2, r7, #20
 8020796:	f107 0110 	add.w	r1, r7, #16
 802079a:	7af8      	ldrb	r0, [r7, #11]
 802079c:	4798      	blx	r3
 802079e:	4603      	mov	r3, r0
 80207a0:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80207a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d104      	bne.n	80207b4 <SCSI_ReadFormatCapacity+0x5e>
 80207aa:	69bb      	ldr	r3, [r7, #24]
 80207ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80207b0:	2b02      	cmp	r3, #2
 80207b2:	d108      	bne.n	80207c6 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80207b4:	7af9      	ldrb	r1, [r7, #11]
 80207b6:	233a      	movs	r3, #58	; 0x3a
 80207b8:	2202      	movs	r2, #2
 80207ba:	68f8      	ldr	r0, [r7, #12]
 80207bc:	f000 f929 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 80207c0:	f04f 33ff 	mov.w	r3, #4294967295
 80207c4:	e03e      	b.n	8020844 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80207c6:	2300      	movs	r3, #0
 80207c8:	83fb      	strh	r3, [r7, #30]
 80207ca:	e007      	b.n	80207dc <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80207cc:	8bfb      	ldrh	r3, [r7, #30]
 80207ce:	69ba      	ldr	r2, [r7, #24]
 80207d0:	4413      	add	r3, r2
 80207d2:	2200      	movs	r2, #0
 80207d4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80207d6:	8bfb      	ldrh	r3, [r7, #30]
 80207d8:	3301      	adds	r3, #1
 80207da:	83fb      	strh	r3, [r7, #30]
 80207dc:	8bfb      	ldrh	r3, [r7, #30]
 80207de:	2b0b      	cmp	r3, #11
 80207e0:	d9f4      	bls.n	80207cc <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80207e2:	69bb      	ldr	r3, [r7, #24]
 80207e4:	2208      	movs	r2, #8
 80207e6:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80207e8:	693b      	ldr	r3, [r7, #16]
 80207ea:	3b01      	subs	r3, #1
 80207ec:	0e1b      	lsrs	r3, r3, #24
 80207ee:	b2da      	uxtb	r2, r3
 80207f0:	69bb      	ldr	r3, [r7, #24]
 80207f2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80207f4:	693b      	ldr	r3, [r7, #16]
 80207f6:	3b01      	subs	r3, #1
 80207f8:	0c1b      	lsrs	r3, r3, #16
 80207fa:	b2da      	uxtb	r2, r3
 80207fc:	69bb      	ldr	r3, [r7, #24]
 80207fe:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8020800:	693b      	ldr	r3, [r7, #16]
 8020802:	3b01      	subs	r3, #1
 8020804:	0a1b      	lsrs	r3, r3, #8
 8020806:	b2da      	uxtb	r2, r3
 8020808:	69bb      	ldr	r3, [r7, #24]
 802080a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 802080c:	693b      	ldr	r3, [r7, #16]
 802080e:	b2db      	uxtb	r3, r3
 8020810:	3b01      	subs	r3, #1
 8020812:	b2da      	uxtb	r2, r3
 8020814:	69bb      	ldr	r3, [r7, #24]
 8020816:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8020818:	69bb      	ldr	r3, [r7, #24]
 802081a:	2202      	movs	r2, #2
 802081c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 802081e:	8abb      	ldrh	r3, [r7, #20]
 8020820:	141b      	asrs	r3, r3, #16
 8020822:	b2da      	uxtb	r2, r3
 8020824:	69bb      	ldr	r3, [r7, #24]
 8020826:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8020828:	8abb      	ldrh	r3, [r7, #20]
 802082a:	0a1b      	lsrs	r3, r3, #8
 802082c:	b29b      	uxth	r3, r3
 802082e:	b2da      	uxtb	r2, r3
 8020830:	69bb      	ldr	r3, [r7, #24]
 8020832:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020834:	8abb      	ldrh	r3, [r7, #20]
 8020836:	b2da      	uxtb	r2, r3
 8020838:	69bb      	ldr	r3, [r7, #24]
 802083a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802083c:	69bb      	ldr	r3, [r7, #24]
 802083e:	220c      	movs	r2, #12
 8020840:	60da      	str	r2, [r3, #12]

  return 0;
 8020842:	2300      	movs	r3, #0
}
 8020844:	4618      	mov	r0, r3
 8020846:	3720      	adds	r7, #32
 8020848:	46bd      	mov	sp, r7
 802084a:	bd80      	pop	{r7, pc}

0802084c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	b086      	sub	sp, #24
 8020850:	af00      	add	r7, sp, #0
 8020852:	60f8      	str	r0, [r7, #12]
 8020854:	460b      	mov	r3, r1
 8020856:	607a      	str	r2, [r7, #4]
 8020858:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	32b0      	adds	r2, #176	; 0xb0
 8020864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020868:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 802086a:	2317      	movs	r3, #23
 802086c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802086e:	693b      	ldr	r3, [r7, #16]
 8020870:	2b00      	cmp	r3, #0
 8020872:	d102      	bne.n	802087a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8020874:	f04f 33ff 	mov.w	r3, #4294967295
 8020878:	e011      	b.n	802089e <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	3304      	adds	r3, #4
 802087e:	781b      	ldrb	r3, [r3, #0]
 8020880:	b29b      	uxth	r3, r3
 8020882:	8afa      	ldrh	r2, [r7, #22]
 8020884:	429a      	cmp	r2, r3
 8020886:	d303      	bcc.n	8020890 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	3304      	adds	r3, #4
 802088c:	781b      	ldrb	r3, [r3, #0]
 802088e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020890:	8afb      	ldrh	r3, [r7, #22]
 8020892:	461a      	mov	r2, r3
 8020894:	4904      	ldr	r1, [pc, #16]	; (80208a8 <SCSI_ModeSense6+0x5c>)
 8020896:	6938      	ldr	r0, [r7, #16]
 8020898:	f000 fe28 	bl	80214ec <SCSI_UpdateBotData>

  return 0;
 802089c:	2300      	movs	r3, #0
}
 802089e:	4618      	mov	r0, r3
 80208a0:	3718      	adds	r7, #24
 80208a2:	46bd      	mov	sp, r7
 80208a4:	bd80      	pop	{r7, pc}
 80208a6:	bf00      	nop
 80208a8:	200005f8 	.word	0x200005f8

080208ac <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b086      	sub	sp, #24
 80208b0:	af00      	add	r7, sp, #0
 80208b2:	60f8      	str	r0, [r7, #12]
 80208b4:	460b      	mov	r3, r1
 80208b6:	607a      	str	r2, [r7, #4]
 80208b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80208ba:	68fb      	ldr	r3, [r7, #12]
 80208bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	32b0      	adds	r2, #176	; 0xb0
 80208c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80208c8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80208ca:	231b      	movs	r3, #27
 80208cc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80208ce:	693b      	ldr	r3, [r7, #16]
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	d102      	bne.n	80208da <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80208d4:	f04f 33ff 	mov.w	r3, #4294967295
 80208d8:	e011      	b.n	80208fe <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80208da:	687b      	ldr	r3, [r7, #4]
 80208dc:	3308      	adds	r3, #8
 80208de:	781b      	ldrb	r3, [r3, #0]
 80208e0:	b29b      	uxth	r3, r3
 80208e2:	8afa      	ldrh	r2, [r7, #22]
 80208e4:	429a      	cmp	r2, r3
 80208e6:	d303      	bcc.n	80208f0 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	3308      	adds	r3, #8
 80208ec:	781b      	ldrb	r3, [r3, #0]
 80208ee:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80208f0:	8afb      	ldrh	r3, [r7, #22]
 80208f2:	461a      	mov	r2, r3
 80208f4:	4904      	ldr	r1, [pc, #16]	; (8020908 <SCSI_ModeSense10+0x5c>)
 80208f6:	6938      	ldr	r0, [r7, #16]
 80208f8:	f000 fdf8 	bl	80214ec <SCSI_UpdateBotData>

  return 0;
 80208fc:	2300      	movs	r3, #0
}
 80208fe:	4618      	mov	r0, r3
 8020900:	3718      	adds	r7, #24
 8020902:	46bd      	mov	sp, r7
 8020904:	bd80      	pop	{r7, pc}
 8020906:	bf00      	nop
 8020908:	20000610 	.word	0x20000610

0802090c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802090c:	b580      	push	{r7, lr}
 802090e:	b086      	sub	sp, #24
 8020910:	af00      	add	r7, sp, #0
 8020912:	60f8      	str	r0, [r7, #12]
 8020914:	460b      	mov	r3, r1
 8020916:	607a      	str	r2, [r7, #4]
 8020918:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802091a:	68fb      	ldr	r3, [r7, #12]
 802091c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020920:	68fb      	ldr	r3, [r7, #12]
 8020922:	32b0      	adds	r2, #176	; 0xb0
 8020924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020928:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 802092a:	693b      	ldr	r3, [r7, #16]
 802092c:	2b00      	cmp	r3, #0
 802092e:	d102      	bne.n	8020936 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8020930:	f04f 33ff 	mov.w	r3, #4294967295
 8020934:	e069      	b.n	8020a0a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8020936:	693b      	ldr	r3, [r7, #16]
 8020938:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802093c:	2b00      	cmp	r3, #0
 802093e:	d10a      	bne.n	8020956 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020940:	693b      	ldr	r3, [r7, #16]
 8020942:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020946:	2320      	movs	r3, #32
 8020948:	2205      	movs	r2, #5
 802094a:	68f8      	ldr	r0, [r7, #12]
 802094c:	f000 f861 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 8020950:	f04f 33ff 	mov.w	r3, #4294967295
 8020954:	e059      	b.n	8020a0a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020956:	2300      	movs	r3, #0
 8020958:	75fb      	strb	r3, [r7, #23]
 802095a:	e007      	b.n	802096c <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 802095c:	7dfb      	ldrb	r3, [r7, #23]
 802095e:	693a      	ldr	r2, [r7, #16]
 8020960:	4413      	add	r3, r2
 8020962:	2200      	movs	r2, #0
 8020964:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8020966:	7dfb      	ldrb	r3, [r7, #23]
 8020968:	3301      	adds	r3, #1
 802096a:	75fb      	strb	r3, [r7, #23]
 802096c:	7dfb      	ldrb	r3, [r7, #23]
 802096e:	2b11      	cmp	r3, #17
 8020970:	d9f4      	bls.n	802095c <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8020972:	693b      	ldr	r3, [r7, #16]
 8020974:	2270      	movs	r2, #112	; 0x70
 8020976:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020978:	693b      	ldr	r3, [r7, #16]
 802097a:	220c      	movs	r2, #12
 802097c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 802097e:	693b      	ldr	r3, [r7, #16]
 8020980:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8020984:	693b      	ldr	r3, [r7, #16]
 8020986:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802098a:	429a      	cmp	r2, r3
 802098c:	d02e      	beq.n	80209ec <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802098e:	693b      	ldr	r3, [r7, #16]
 8020990:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020994:	461a      	mov	r2, r3
 8020996:	693b      	ldr	r3, [r7, #16]
 8020998:	3248      	adds	r2, #72	; 0x48
 802099a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 802099e:	693b      	ldr	r3, [r7, #16]
 80209a0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80209a2:	693b      	ldr	r3, [r7, #16]
 80209a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80209a8:	693a      	ldr	r2, [r7, #16]
 80209aa:	3348      	adds	r3, #72	; 0x48
 80209ac:	00db      	lsls	r3, r3, #3
 80209ae:	4413      	add	r3, r2
 80209b0:	791a      	ldrb	r2, [r3, #4]
 80209b2:	693b      	ldr	r3, [r7, #16]
 80209b4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80209b6:	693b      	ldr	r3, [r7, #16]
 80209b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80209bc:	693a      	ldr	r2, [r7, #16]
 80209be:	3348      	adds	r3, #72	; 0x48
 80209c0:	00db      	lsls	r3, r3, #3
 80209c2:	4413      	add	r3, r2
 80209c4:	795a      	ldrb	r2, [r3, #5]
 80209c6:	693b      	ldr	r3, [r7, #16]
 80209c8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80209ca:	693b      	ldr	r3, [r7, #16]
 80209cc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80209d0:	3301      	adds	r3, #1
 80209d2:	b2da      	uxtb	r2, r3
 80209d4:	693b      	ldr	r3, [r7, #16]
 80209d6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80209da:	693b      	ldr	r3, [r7, #16]
 80209dc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80209e0:	2b04      	cmp	r3, #4
 80209e2:	d103      	bne.n	80209ec <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80209e4:	693b      	ldr	r3, [r7, #16]
 80209e6:	2200      	movs	r2, #0
 80209e8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80209ec:	693b      	ldr	r3, [r7, #16]
 80209ee:	2212      	movs	r2, #18
 80209f0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	3304      	adds	r3, #4
 80209f6:	781b      	ldrb	r3, [r3, #0]
 80209f8:	2b12      	cmp	r3, #18
 80209fa:	d805      	bhi.n	8020a08 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	3304      	adds	r3, #4
 8020a00:	781b      	ldrb	r3, [r3, #0]
 8020a02:	461a      	mov	r2, r3
 8020a04:	693b      	ldr	r3, [r7, #16]
 8020a06:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8020a08:	2300      	movs	r3, #0
}
 8020a0a:	4618      	mov	r0, r3
 8020a0c:	3718      	adds	r7, #24
 8020a0e:	46bd      	mov	sp, r7
 8020a10:	bd80      	pop	{r7, pc}

08020a12 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8020a12:	b480      	push	{r7}
 8020a14:	b085      	sub	sp, #20
 8020a16:	af00      	add	r7, sp, #0
 8020a18:	6078      	str	r0, [r7, #4]
 8020a1a:	4608      	mov	r0, r1
 8020a1c:	4611      	mov	r1, r2
 8020a1e:	461a      	mov	r2, r3
 8020a20:	4603      	mov	r3, r0
 8020a22:	70fb      	strb	r3, [r7, #3]
 8020a24:	460b      	mov	r3, r1
 8020a26:	70bb      	strb	r3, [r7, #2]
 8020a28:	4613      	mov	r3, r2
 8020a2a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	32b0      	adds	r2, #176	; 0xb0
 8020a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020a3a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8020a3c:	68fb      	ldr	r3, [r7, #12]
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d02c      	beq.n	8020a9c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020a42:	68fb      	ldr	r3, [r7, #12]
 8020a44:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a48:	461a      	mov	r2, r3
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	3248      	adds	r2, #72	; 0x48
 8020a4e:	78b9      	ldrb	r1, [r7, #2]
 8020a50:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020a54:	68fb      	ldr	r3, [r7, #12]
 8020a56:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a5a:	68fa      	ldr	r2, [r7, #12]
 8020a5c:	3348      	adds	r3, #72	; 0x48
 8020a5e:	00db      	lsls	r3, r3, #3
 8020a60:	4413      	add	r3, r2
 8020a62:	787a      	ldrb	r2, [r7, #1]
 8020a64:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8020a66:	68fb      	ldr	r3, [r7, #12]
 8020a68:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a6c:	68fa      	ldr	r2, [r7, #12]
 8020a6e:	3348      	adds	r3, #72	; 0x48
 8020a70:	00db      	lsls	r3, r3, #3
 8020a72:	4413      	add	r3, r2
 8020a74:	2200      	movs	r2, #0
 8020a76:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a7e:	3301      	adds	r3, #1
 8020a80:	b2da      	uxtb	r2, r3
 8020a82:	68fb      	ldr	r3, [r7, #12]
 8020a84:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020a8e:	2b04      	cmp	r3, #4
 8020a90:	d105      	bne.n	8020a9e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8020a92:	68fb      	ldr	r3, [r7, #12]
 8020a94:	2200      	movs	r2, #0
 8020a96:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8020a9a:	e000      	b.n	8020a9e <SCSI_SenseCode+0x8c>
    return;
 8020a9c:	bf00      	nop
  }
}
 8020a9e:	3714      	adds	r7, #20
 8020aa0:	46bd      	mov	sp, r7
 8020aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aa6:	4770      	bx	lr

08020aa8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b086      	sub	sp, #24
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	60f8      	str	r0, [r7, #12]
 8020ab0:	460b      	mov	r3, r1
 8020ab2:	607a      	str	r2, [r7, #4]
 8020ab4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020ab6:	68fb      	ldr	r3, [r7, #12]
 8020ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020abc:	68fb      	ldr	r3, [r7, #12]
 8020abe:	32b0      	adds	r2, #176	; 0xb0
 8020ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ac4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020ac6:	697b      	ldr	r3, [r7, #20]
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d102      	bne.n	8020ad2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8020acc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ad0:	e03b      	b.n	8020b4a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020ad2:	697b      	ldr	r3, [r7, #20]
 8020ad4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020ad8:	2b01      	cmp	r3, #1
 8020ada:	d10f      	bne.n	8020afc <SCSI_StartStopUnit+0x54>
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	3304      	adds	r3, #4
 8020ae0:	781b      	ldrb	r3, [r3, #0]
 8020ae2:	f003 0303 	and.w	r3, r3, #3
 8020ae6:	2b02      	cmp	r3, #2
 8020ae8:	d108      	bne.n	8020afc <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020aea:	7af9      	ldrb	r1, [r7, #11]
 8020aec:	2324      	movs	r3, #36	; 0x24
 8020aee:	2205      	movs	r2, #5
 8020af0:	68f8      	ldr	r0, [r7, #12]
 8020af2:	f7ff ff8e 	bl	8020a12 <SCSI_SenseCode>

    return -1;
 8020af6:	f04f 33ff 	mov.w	r3, #4294967295
 8020afa:	e026      	b.n	8020b4a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	3304      	adds	r3, #4
 8020b00:	781b      	ldrb	r3, [r3, #0]
 8020b02:	f003 0303 	and.w	r3, r3, #3
 8020b06:	2b01      	cmp	r3, #1
 8020b08:	d104      	bne.n	8020b14 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020b0a:	697b      	ldr	r3, [r7, #20]
 8020b0c:	2200      	movs	r2, #0
 8020b0e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020b12:	e016      	b.n	8020b42 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	3304      	adds	r3, #4
 8020b18:	781b      	ldrb	r3, [r3, #0]
 8020b1a:	f003 0303 	and.w	r3, r3, #3
 8020b1e:	2b02      	cmp	r3, #2
 8020b20:	d104      	bne.n	8020b2c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8020b22:	697b      	ldr	r3, [r7, #20]
 8020b24:	2202      	movs	r2, #2
 8020b26:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020b2a:	e00a      	b.n	8020b42 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	3304      	adds	r3, #4
 8020b30:	781b      	ldrb	r3, [r3, #0]
 8020b32:	f003 0303 	and.w	r3, r3, #3
 8020b36:	2b03      	cmp	r3, #3
 8020b38:	d103      	bne.n	8020b42 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020b3a:	697b      	ldr	r3, [r7, #20]
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8020b42:	697b      	ldr	r3, [r7, #20]
 8020b44:	2200      	movs	r2, #0
 8020b46:	60da      	str	r2, [r3, #12]

  return 0;
 8020b48:	2300      	movs	r3, #0
}
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	3718      	adds	r7, #24
 8020b4e:	46bd      	mov	sp, r7
 8020b50:	bd80      	pop	{r7, pc}

08020b52 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020b52:	b480      	push	{r7}
 8020b54:	b087      	sub	sp, #28
 8020b56:	af00      	add	r7, sp, #0
 8020b58:	60f8      	str	r0, [r7, #12]
 8020b5a:	460b      	mov	r3, r1
 8020b5c:	607a      	str	r2, [r7, #4]
 8020b5e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020b66:	68fb      	ldr	r3, [r7, #12]
 8020b68:	32b0      	adds	r2, #176	; 0xb0
 8020b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020b6e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020b70:	697b      	ldr	r3, [r7, #20]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d102      	bne.n	8020b7c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8020b76:	f04f 33ff 	mov.w	r3, #4294967295
 8020b7a:	e011      	b.n	8020ba0 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	3304      	adds	r3, #4
 8020b80:	781b      	ldrb	r3, [r3, #0]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d104      	bne.n	8020b90 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020b86:	697b      	ldr	r3, [r7, #20]
 8020b88:	2200      	movs	r2, #0
 8020b8a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8020b8e:	e003      	b.n	8020b98 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020b90:	697b      	ldr	r3, [r7, #20]
 8020b92:	2201      	movs	r2, #1
 8020b94:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	2200      	movs	r2, #0
 8020b9c:	60da      	str	r2, [r3, #12]

  return 0;
 8020b9e:	2300      	movs	r3, #0
}
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	371c      	adds	r7, #28
 8020ba4:	46bd      	mov	sp, r7
 8020ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020baa:	4770      	bx	lr

08020bac <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020bac:	b580      	push	{r7, lr}
 8020bae:	b086      	sub	sp, #24
 8020bb0:	af00      	add	r7, sp, #0
 8020bb2:	60f8      	str	r0, [r7, #12]
 8020bb4:	460b      	mov	r3, r1
 8020bb6:	607a      	str	r2, [r7, #4]
 8020bb8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	32b0      	adds	r2, #176	; 0xb0
 8020bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020bc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020bca:	697b      	ldr	r3, [r7, #20]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d102      	bne.n	8020bd6 <SCSI_Read10+0x2a>
  {
    return -1;
 8020bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8020bd4:	e090      	b.n	8020cf8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020bd6:	697b      	ldr	r3, [r7, #20]
 8020bd8:	7a1b      	ldrb	r3, [r3, #8]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	f040 8082 	bne.w	8020ce4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020be0:	697b      	ldr	r3, [r7, #20]
 8020be2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020be6:	b25b      	sxtb	r3, r3
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	db0a      	blt.n	8020c02 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020bf2:	2320      	movs	r3, #32
 8020bf4:	2205      	movs	r2, #5
 8020bf6:	68f8      	ldr	r0, [r7, #12]
 8020bf8:	f7ff ff0b 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8020c00:	e07a      	b.n	8020cf8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020c02:	697b      	ldr	r3, [r7, #20]
 8020c04:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020c08:	2b02      	cmp	r3, #2
 8020c0a:	d108      	bne.n	8020c1e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020c0c:	7af9      	ldrb	r1, [r7, #11]
 8020c0e:	233a      	movs	r3, #58	; 0x3a
 8020c10:	2202      	movs	r2, #2
 8020c12:	68f8      	ldr	r0, [r7, #12]
 8020c14:	f7ff fefd 	bl	8020a12 <SCSI_SenseCode>

      return -1;
 8020c18:	f04f 33ff 	mov.w	r3, #4294967295
 8020c1c:	e06c      	b.n	8020cf8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020c1e:	68fb      	ldr	r3, [r7, #12]
 8020c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020c24:	68fa      	ldr	r2, [r7, #12]
 8020c26:	33b0      	adds	r3, #176	; 0xb0
 8020c28:	009b      	lsls	r3, r3, #2
 8020c2a:	4413      	add	r3, r2
 8020c2c:	685b      	ldr	r3, [r3, #4]
 8020c2e:	689b      	ldr	r3, [r3, #8]
 8020c30:	7afa      	ldrb	r2, [r7, #11]
 8020c32:	4610      	mov	r0, r2
 8020c34:	4798      	blx	r3
 8020c36:	4603      	mov	r3, r0
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d008      	beq.n	8020c4e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020c3c:	7af9      	ldrb	r1, [r7, #11]
 8020c3e:	233a      	movs	r3, #58	; 0x3a
 8020c40:	2202      	movs	r2, #2
 8020c42:	68f8      	ldr	r0, [r7, #12]
 8020c44:	f7ff fee5 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020c48:	f04f 33ff 	mov.w	r3, #4294967295
 8020c4c:	e054      	b.n	8020cf8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	3302      	adds	r3, #2
 8020c52:	781b      	ldrb	r3, [r3, #0]
 8020c54:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020c56:	687b      	ldr	r3, [r7, #4]
 8020c58:	3303      	adds	r3, #3
 8020c5a:	781b      	ldrb	r3, [r3, #0]
 8020c5c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c5e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020c60:	687b      	ldr	r3, [r7, #4]
 8020c62:	3304      	adds	r3, #4
 8020c64:	781b      	ldrb	r3, [r3, #0]
 8020c66:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020c68:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020c6a:	687a      	ldr	r2, [r7, #4]
 8020c6c:	3205      	adds	r2, #5
 8020c6e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020c70:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020c72:	697b      	ldr	r3, [r7, #20]
 8020c74:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	3307      	adds	r3, #7
 8020c7c:	781b      	ldrb	r3, [r3, #0]
 8020c7e:	021b      	lsls	r3, r3, #8
 8020c80:	687a      	ldr	r2, [r7, #4]
 8020c82:	3208      	adds	r2, #8
 8020c84:	7812      	ldrb	r2, [r2, #0]
 8020c86:	431a      	orrs	r2, r3
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020c8e:	697b      	ldr	r3, [r7, #20]
 8020c90:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c94:	697b      	ldr	r3, [r7, #20]
 8020c96:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c9a:	7af9      	ldrb	r1, [r7, #11]
 8020c9c:	68f8      	ldr	r0, [r7, #12]
 8020c9e:	f000 fadc 	bl	802125a <SCSI_CheckAddressRange>
 8020ca2:	4603      	mov	r3, r0
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	da02      	bge.n	8020cae <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8020cac:	e024      	b.n	8020cf8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020cae:	697b      	ldr	r3, [r7, #20]
 8020cb0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020cb4:	697b      	ldr	r3, [r7, #20]
 8020cb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020cba:	6979      	ldr	r1, [r7, #20]
 8020cbc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020cc0:	fb01 f303 	mul.w	r3, r1, r3
 8020cc4:	429a      	cmp	r2, r3
 8020cc6:	d00a      	beq.n	8020cde <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020cc8:	697b      	ldr	r3, [r7, #20]
 8020cca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020cce:	2320      	movs	r3, #32
 8020cd0:	2205      	movs	r2, #5
 8020cd2:	68f8      	ldr	r0, [r7, #12]
 8020cd4:	f7ff fe9d 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8020cdc:	e00c      	b.n	8020cf8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020cde:	697b      	ldr	r3, [r7, #20]
 8020ce0:	2202      	movs	r2, #2
 8020ce2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020ce4:	697b      	ldr	r3, [r7, #20]
 8020ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020cea:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020cec:	7afb      	ldrb	r3, [r7, #11]
 8020cee:	4619      	mov	r1, r3
 8020cf0:	68f8      	ldr	r0, [r7, #12]
 8020cf2:	f000 fadf 	bl	80212b4 <SCSI_ProcessRead>
 8020cf6:	4603      	mov	r3, r0
}
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	3718      	adds	r7, #24
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	bd80      	pop	{r7, pc}

08020d00 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020d00:	b580      	push	{r7, lr}
 8020d02:	b086      	sub	sp, #24
 8020d04:	af00      	add	r7, sp, #0
 8020d06:	60f8      	str	r0, [r7, #12]
 8020d08:	460b      	mov	r3, r1
 8020d0a:	607a      	str	r2, [r7, #4]
 8020d0c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020d0e:	68fb      	ldr	r3, [r7, #12]
 8020d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020d14:	68fb      	ldr	r3, [r7, #12]
 8020d16:	32b0      	adds	r2, #176	; 0xb0
 8020d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020d1c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020d1e:	697b      	ldr	r3, [r7, #20]
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d102      	bne.n	8020d2a <SCSI_Read12+0x2a>
  {
    return -1;
 8020d24:	f04f 33ff 	mov.w	r3, #4294967295
 8020d28:	e09a      	b.n	8020e60 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020d2a:	697b      	ldr	r3, [r7, #20]
 8020d2c:	7a1b      	ldrb	r3, [r3, #8]
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f040 808c 	bne.w	8020e4c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020d34:	697b      	ldr	r3, [r7, #20]
 8020d36:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020d3a:	b25b      	sxtb	r3, r3
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	db0a      	blt.n	8020d56 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020d46:	2320      	movs	r3, #32
 8020d48:	2205      	movs	r2, #5
 8020d4a:	68f8      	ldr	r0, [r7, #12]
 8020d4c:	f7ff fe61 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020d50:	f04f 33ff 	mov.w	r3, #4294967295
 8020d54:	e084      	b.n	8020e60 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020d56:	697b      	ldr	r3, [r7, #20]
 8020d58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020d5c:	2b02      	cmp	r3, #2
 8020d5e:	d108      	bne.n	8020d72 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020d60:	7af9      	ldrb	r1, [r7, #11]
 8020d62:	233a      	movs	r3, #58	; 0x3a
 8020d64:	2202      	movs	r2, #2
 8020d66:	68f8      	ldr	r0, [r7, #12]
 8020d68:	f7ff fe53 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8020d70:	e076      	b.n	8020e60 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020d72:	68fb      	ldr	r3, [r7, #12]
 8020d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020d78:	68fa      	ldr	r2, [r7, #12]
 8020d7a:	33b0      	adds	r3, #176	; 0xb0
 8020d7c:	009b      	lsls	r3, r3, #2
 8020d7e:	4413      	add	r3, r2
 8020d80:	685b      	ldr	r3, [r3, #4]
 8020d82:	689b      	ldr	r3, [r3, #8]
 8020d84:	7afa      	ldrb	r2, [r7, #11]
 8020d86:	4610      	mov	r0, r2
 8020d88:	4798      	blx	r3
 8020d8a:	4603      	mov	r3, r0
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d008      	beq.n	8020da2 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020d90:	7af9      	ldrb	r1, [r7, #11]
 8020d92:	233a      	movs	r3, #58	; 0x3a
 8020d94:	2202      	movs	r2, #2
 8020d96:	68f8      	ldr	r0, [r7, #12]
 8020d98:	f7ff fe3b 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8020da0:	e05e      	b.n	8020e60 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	3302      	adds	r3, #2
 8020da6:	781b      	ldrb	r3, [r3, #0]
 8020da8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020daa:	687b      	ldr	r3, [r7, #4]
 8020dac:	3303      	adds	r3, #3
 8020dae:	781b      	ldrb	r3, [r3, #0]
 8020db0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020db2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	3304      	adds	r3, #4
 8020db8:	781b      	ldrb	r3, [r3, #0]
 8020dba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020dbc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020dbe:	687a      	ldr	r2, [r7, #4]
 8020dc0:	3205      	adds	r2, #5
 8020dc2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8020dc4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020dc6:	697b      	ldr	r3, [r7, #20]
 8020dc8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	3306      	adds	r3, #6
 8020dd0:	781b      	ldrb	r3, [r3, #0]
 8020dd2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	3307      	adds	r3, #7
 8020dd8:	781b      	ldrb	r3, [r3, #0]
 8020dda:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020ddc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	3308      	adds	r3, #8
 8020de2:	781b      	ldrb	r3, [r3, #0]
 8020de4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020de6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020de8:	687a      	ldr	r2, [r7, #4]
 8020dea:	3209      	adds	r2, #9
 8020dec:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020dee:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020df0:	697b      	ldr	r3, [r7, #20]
 8020df2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020df6:	697b      	ldr	r3, [r7, #20]
 8020df8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020dfc:	697b      	ldr	r3, [r7, #20]
 8020dfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e02:	7af9      	ldrb	r1, [r7, #11]
 8020e04:	68f8      	ldr	r0, [r7, #12]
 8020e06:	f000 fa28 	bl	802125a <SCSI_CheckAddressRange>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	da02      	bge.n	8020e16 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020e10:	f04f 33ff 	mov.w	r3, #4294967295
 8020e14:	e024      	b.n	8020e60 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020e16:	697b      	ldr	r3, [r7, #20]
 8020e18:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020e1c:	697b      	ldr	r3, [r7, #20]
 8020e1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020e22:	6979      	ldr	r1, [r7, #20]
 8020e24:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8020e28:	fb01 f303 	mul.w	r3, r1, r3
 8020e2c:	429a      	cmp	r2, r3
 8020e2e:	d00a      	beq.n	8020e46 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020e30:	697b      	ldr	r3, [r7, #20]
 8020e32:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020e36:	2320      	movs	r3, #32
 8020e38:	2205      	movs	r2, #5
 8020e3a:	68f8      	ldr	r0, [r7, #12]
 8020e3c:	f7ff fde9 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020e40:	f04f 33ff 	mov.w	r3, #4294967295
 8020e44:	e00c      	b.n	8020e60 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8020e46:	697b      	ldr	r3, [r7, #20]
 8020e48:	2202      	movs	r2, #2
 8020e4a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020e4c:	697b      	ldr	r3, [r7, #20]
 8020e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020e52:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020e54:	7afb      	ldrb	r3, [r7, #11]
 8020e56:	4619      	mov	r1, r3
 8020e58:	68f8      	ldr	r0, [r7, #12]
 8020e5a:	f000 fa2b 	bl	80212b4 <SCSI_ProcessRead>
 8020e5e:	4603      	mov	r3, r0
}
 8020e60:	4618      	mov	r0, r3
 8020e62:	3718      	adds	r7, #24
 8020e64:	46bd      	mov	sp, r7
 8020e66:	bd80      	pop	{r7, pc}

08020e68 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b086      	sub	sp, #24
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	60f8      	str	r0, [r7, #12]
 8020e70:	460b      	mov	r3, r1
 8020e72:	607a      	str	r2, [r7, #4]
 8020e74:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020e76:	68fb      	ldr	r3, [r7, #12]
 8020e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e7c:	68fb      	ldr	r3, [r7, #12]
 8020e7e:	32b0      	adds	r2, #176	; 0xb0
 8020e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e84:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d102      	bne.n	8020e92 <SCSI_Write10+0x2a>
  {
    return -1;
 8020e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8020e90:	e0ba      	b.n	8021008 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020e92:	697b      	ldr	r3, [r7, #20]
 8020e94:	7a1b      	ldrb	r3, [r3, #8]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	f040 80b0 	bne.w	8020ffc <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020e9c:	697b      	ldr	r3, [r7, #20]
 8020e9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d10a      	bne.n	8020ebc <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ea6:	697b      	ldr	r3, [r7, #20]
 8020ea8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020eac:	2320      	movs	r3, #32
 8020eae:	2205      	movs	r2, #5
 8020eb0:	68f8      	ldr	r0, [r7, #12]
 8020eb2:	f7ff fdae 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8020eba:	e0a5      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020ec2:	b25b      	sxtb	r3, r3
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	da0a      	bge.n	8020ede <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ec8:	697b      	ldr	r3, [r7, #20]
 8020eca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ece:	2320      	movs	r3, #32
 8020ed0:	2205      	movs	r2, #5
 8020ed2:	68f8      	ldr	r0, [r7, #12]
 8020ed4:	f7ff fd9d 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8020edc:	e094      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020ee4:	68fa      	ldr	r2, [r7, #12]
 8020ee6:	33b0      	adds	r3, #176	; 0xb0
 8020ee8:	009b      	lsls	r3, r3, #2
 8020eea:	4413      	add	r3, r2
 8020eec:	685b      	ldr	r3, [r3, #4]
 8020eee:	689b      	ldr	r3, [r3, #8]
 8020ef0:	7afa      	ldrb	r2, [r7, #11]
 8020ef2:	4610      	mov	r0, r2
 8020ef4:	4798      	blx	r3
 8020ef6:	4603      	mov	r3, r0
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d008      	beq.n	8020f0e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020efc:	7af9      	ldrb	r1, [r7, #11]
 8020efe:	233a      	movs	r3, #58	; 0x3a
 8020f00:	2202      	movs	r2, #2
 8020f02:	68f8      	ldr	r0, [r7, #12]
 8020f04:	f7ff fd85 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020f08:	f04f 33ff 	mov.w	r3, #4294967295
 8020f0c:	e07c      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020f14:	68fa      	ldr	r2, [r7, #12]
 8020f16:	33b0      	adds	r3, #176	; 0xb0
 8020f18:	009b      	lsls	r3, r3, #2
 8020f1a:	4413      	add	r3, r2
 8020f1c:	685b      	ldr	r3, [r3, #4]
 8020f1e:	68db      	ldr	r3, [r3, #12]
 8020f20:	7afa      	ldrb	r2, [r7, #11]
 8020f22:	4610      	mov	r0, r2
 8020f24:	4798      	blx	r3
 8020f26:	4603      	mov	r3, r0
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	d008      	beq.n	8020f3e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020f2c:	7af9      	ldrb	r1, [r7, #11]
 8020f2e:	2327      	movs	r3, #39	; 0x27
 8020f30:	2202      	movs	r2, #2
 8020f32:	68f8      	ldr	r0, [r7, #12]
 8020f34:	f7ff fd6d 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020f38:	f04f 33ff 	mov.w	r3, #4294967295
 8020f3c:	e064      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	3302      	adds	r3, #2
 8020f42:	781b      	ldrb	r3, [r3, #0]
 8020f44:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	3303      	adds	r3, #3
 8020f4a:	781b      	ldrb	r3, [r3, #0]
 8020f4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020f4e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	3304      	adds	r3, #4
 8020f54:	781b      	ldrb	r3, [r3, #0]
 8020f56:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020f58:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020f5a:	687a      	ldr	r2, [r7, #4]
 8020f5c:	3205      	adds	r2, #5
 8020f5e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020f60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020f62:	697b      	ldr	r3, [r7, #20]
 8020f64:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	3307      	adds	r3, #7
 8020f6c:	781b      	ldrb	r3, [r3, #0]
 8020f6e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	3208      	adds	r2, #8
 8020f74:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020f76:	431a      	orrs	r2, r3
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020f7e:	697b      	ldr	r3, [r7, #20]
 8020f80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020f84:	697b      	ldr	r3, [r7, #20]
 8020f86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020f8a:	7af9      	ldrb	r1, [r7, #11]
 8020f8c:	68f8      	ldr	r0, [r7, #12]
 8020f8e:	f000 f964 	bl	802125a <SCSI_CheckAddressRange>
 8020f92:	4603      	mov	r3, r0
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	da02      	bge.n	8020f9e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020f98:	f04f 33ff 	mov.w	r3, #4294967295
 8020f9c:	e034      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020f9e:	697b      	ldr	r3, [r7, #20]
 8020fa0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020fa4:	697a      	ldr	r2, [r7, #20]
 8020fa6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020faa:	fb02 f303 	mul.w	r3, r2, r3
 8020fae:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020fb0:	697b      	ldr	r3, [r7, #20]
 8020fb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020fb6:	693a      	ldr	r2, [r7, #16]
 8020fb8:	429a      	cmp	r2, r3
 8020fba:	d00a      	beq.n	8020fd2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020fbc:	697b      	ldr	r3, [r7, #20]
 8020fbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020fc2:	2320      	movs	r3, #32
 8020fc4:	2205      	movs	r2, #5
 8020fc6:	68f8      	ldr	r0, [r7, #12]
 8020fc8:	f7ff fd23 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8020fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8020fd0:	e01a      	b.n	8021008 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020fd2:	693b      	ldr	r3, [r7, #16]
 8020fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020fd8:	bf28      	it	cs
 8020fda:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020fde:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020fe0:	697b      	ldr	r3, [r7, #20]
 8020fe2:	2201      	movs	r2, #1
 8020fe4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8020fe6:	4b0a      	ldr	r3, [pc, #40]	; (8021010 <SCSI_Write10+0x1a8>)
 8020fe8:	7819      	ldrb	r1, [r3, #0]
 8020fea:	697b      	ldr	r3, [r7, #20]
 8020fec:	f103 0210 	add.w	r2, r3, #16
 8020ff0:	693b      	ldr	r3, [r7, #16]
 8020ff2:	68f8      	ldr	r0, [r7, #12]
 8020ff4:	f005 f92b 	bl	802624e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020ff8:	2300      	movs	r3, #0
 8020ffa:	e005      	b.n	8021008 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8020ffc:	7afb      	ldrb	r3, [r7, #11]
 8020ffe:	4619      	mov	r1, r3
 8021000:	68f8      	ldr	r0, [r7, #12]
 8021002:	f000 f9dd 	bl	80213c0 <SCSI_ProcessWrite>
 8021006:	4603      	mov	r3, r0
}
 8021008:	4618      	mov	r0, r3
 802100a:	3718      	adds	r7, #24
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}
 8021010:	200005e7 	.word	0x200005e7

08021014 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	b086      	sub	sp, #24
 8021018:	af00      	add	r7, sp, #0
 802101a:	60f8      	str	r0, [r7, #12]
 802101c:	460b      	mov	r3, r1
 802101e:	607a      	str	r2, [r7, #4]
 8021020:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	32b0      	adds	r2, #176	; 0xb0
 802102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021030:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8021032:	697b      	ldr	r3, [r7, #20]
 8021034:	2b00      	cmp	r3, #0
 8021036:	d102      	bne.n	802103e <SCSI_Write12+0x2a>
  {
    return -1;
 8021038:	f04f 33ff 	mov.w	r3, #4294967295
 802103c:	e0ca      	b.n	80211d4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802103e:	697b      	ldr	r3, [r7, #20]
 8021040:	7a1b      	ldrb	r3, [r3, #8]
 8021042:	2b00      	cmp	r3, #0
 8021044:	f040 80c0 	bne.w	80211c8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8021048:	697b      	ldr	r3, [r7, #20]
 802104a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802104e:	2b00      	cmp	r3, #0
 8021050:	d10a      	bne.n	8021068 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8021052:	697b      	ldr	r3, [r7, #20]
 8021054:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8021058:	2320      	movs	r3, #32
 802105a:	2205      	movs	r2, #5
 802105c:	68f8      	ldr	r0, [r7, #12]
 802105e:	f7ff fcd8 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8021062:	f04f 33ff 	mov.w	r3, #4294967295
 8021066:	e0b5      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8021068:	697b      	ldr	r3, [r7, #20]
 802106a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802106e:	b25b      	sxtb	r3, r3
 8021070:	2b00      	cmp	r3, #0
 8021072:	da0a      	bge.n	802108a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8021074:	697b      	ldr	r3, [r7, #20]
 8021076:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802107a:	2320      	movs	r3, #32
 802107c:	2205      	movs	r2, #5
 802107e:	68f8      	ldr	r0, [r7, #12]
 8021080:	f7ff fcc7 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8021084:	f04f 33ff 	mov.w	r3, #4294967295
 8021088:	e0a4      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8021090:	68fa      	ldr	r2, [r7, #12]
 8021092:	33b0      	adds	r3, #176	; 0xb0
 8021094:	009b      	lsls	r3, r3, #2
 8021096:	4413      	add	r3, r2
 8021098:	685b      	ldr	r3, [r3, #4]
 802109a:	689b      	ldr	r3, [r3, #8]
 802109c:	7afa      	ldrb	r2, [r7, #11]
 802109e:	4610      	mov	r0, r2
 80210a0:	4798      	blx	r3
 80210a2:	4603      	mov	r3, r0
 80210a4:	2b00      	cmp	r3, #0
 80210a6:	d00b      	beq.n	80210c0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80210a8:	7af9      	ldrb	r1, [r7, #11]
 80210aa:	233a      	movs	r3, #58	; 0x3a
 80210ac:	2202      	movs	r2, #2
 80210ae:	68f8      	ldr	r0, [r7, #12]
 80210b0:	f7ff fcaf 	bl	8020a12 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80210b4:	697b      	ldr	r3, [r7, #20]
 80210b6:	2205      	movs	r2, #5
 80210b8:	721a      	strb	r2, [r3, #8]
      return -1;
 80210ba:	f04f 33ff 	mov.w	r3, #4294967295
 80210be:	e089      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80210c0:	68fb      	ldr	r3, [r7, #12]
 80210c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80210c6:	68fa      	ldr	r2, [r7, #12]
 80210c8:	33b0      	adds	r3, #176	; 0xb0
 80210ca:	009b      	lsls	r3, r3, #2
 80210cc:	4413      	add	r3, r2
 80210ce:	685b      	ldr	r3, [r3, #4]
 80210d0:	68db      	ldr	r3, [r3, #12]
 80210d2:	7afa      	ldrb	r2, [r7, #11]
 80210d4:	4610      	mov	r0, r2
 80210d6:	4798      	blx	r3
 80210d8:	4603      	mov	r3, r0
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d00b      	beq.n	80210f6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80210de:	7af9      	ldrb	r1, [r7, #11]
 80210e0:	2327      	movs	r3, #39	; 0x27
 80210e2:	2202      	movs	r2, #2
 80210e4:	68f8      	ldr	r0, [r7, #12]
 80210e6:	f7ff fc94 	bl	8020a12 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80210ea:	697b      	ldr	r3, [r7, #20]
 80210ec:	2205      	movs	r2, #5
 80210ee:	721a      	strb	r2, [r3, #8]
      return -1;
 80210f0:	f04f 33ff 	mov.w	r3, #4294967295
 80210f4:	e06e      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	3302      	adds	r3, #2
 80210fa:	781b      	ldrb	r3, [r3, #0]
 80210fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	3303      	adds	r3, #3
 8021102:	781b      	ldrb	r3, [r3, #0]
 8021104:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8021106:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	3304      	adds	r3, #4
 802110c:	781b      	ldrb	r3, [r3, #0]
 802110e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8021110:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8021112:	687a      	ldr	r2, [r7, #4]
 8021114:	3205      	adds	r2, #5
 8021116:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8021118:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802111a:	697b      	ldr	r3, [r7, #20]
 802111c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	3306      	adds	r3, #6
 8021124:	781b      	ldrb	r3, [r3, #0]
 8021126:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	3307      	adds	r3, #7
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8021130:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	3308      	adds	r3, #8
 8021136:	781b      	ldrb	r3, [r3, #0]
 8021138:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 802113a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 802113c:	687a      	ldr	r2, [r7, #4]
 802113e:	3209      	adds	r2, #9
 8021140:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8021142:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8021144:	697b      	ldr	r3, [r7, #20]
 8021146:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802114a:	697b      	ldr	r3, [r7, #20]
 802114c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021150:	697b      	ldr	r3, [r7, #20]
 8021152:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021156:	7af9      	ldrb	r1, [r7, #11]
 8021158:	68f8      	ldr	r0, [r7, #12]
 802115a:	f000 f87e 	bl	802125a <SCSI_CheckAddressRange>
 802115e:	4603      	mov	r3, r0
 8021160:	2b00      	cmp	r3, #0
 8021162:	da02      	bge.n	802116a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8021164:	f04f 33ff 	mov.w	r3, #4294967295
 8021168:	e034      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 802116a:	697b      	ldr	r3, [r7, #20]
 802116c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021170:	697a      	ldr	r2, [r7, #20]
 8021172:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8021176:	fb02 f303 	mul.w	r3, r2, r3
 802117a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 802117c:	697b      	ldr	r3, [r7, #20]
 802117e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8021182:	693a      	ldr	r2, [r7, #16]
 8021184:	429a      	cmp	r2, r3
 8021186:	d00a      	beq.n	802119e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8021188:	697b      	ldr	r3, [r7, #20]
 802118a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802118e:	2320      	movs	r3, #32
 8021190:	2205      	movs	r2, #5
 8021192:	68f8      	ldr	r0, [r7, #12]
 8021194:	f7ff fc3d 	bl	8020a12 <SCSI_SenseCode>
      return -1;
 8021198:	f04f 33ff 	mov.w	r3, #4294967295
 802119c:	e01a      	b.n	80211d4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 802119e:	693b      	ldr	r3, [r7, #16]
 80211a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80211a4:	bf28      	it	cs
 80211a6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80211aa:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80211ac:	697b      	ldr	r3, [r7, #20]
 80211ae:	2201      	movs	r2, #1
 80211b0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80211b2:	4b0a      	ldr	r3, [pc, #40]	; (80211dc <SCSI_Write12+0x1c8>)
 80211b4:	7819      	ldrb	r1, [r3, #0]
 80211b6:	697b      	ldr	r3, [r7, #20]
 80211b8:	f103 0210 	add.w	r2, r3, #16
 80211bc:	693b      	ldr	r3, [r7, #16]
 80211be:	68f8      	ldr	r0, [r7, #12]
 80211c0:	f005 f845 	bl	802624e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80211c4:	2300      	movs	r3, #0
 80211c6:	e005      	b.n	80211d4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80211c8:	7afb      	ldrb	r3, [r7, #11]
 80211ca:	4619      	mov	r1, r3
 80211cc:	68f8      	ldr	r0, [r7, #12]
 80211ce:	f000 f8f7 	bl	80213c0 <SCSI_ProcessWrite>
 80211d2:	4603      	mov	r3, r0
}
 80211d4:	4618      	mov	r0, r3
 80211d6:	3718      	adds	r7, #24
 80211d8:	46bd      	mov	sp, r7
 80211da:	bd80      	pop	{r7, pc}
 80211dc:	200005e7 	.word	0x200005e7

080211e0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b086      	sub	sp, #24
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	60f8      	str	r0, [r7, #12]
 80211e8:	460b      	mov	r3, r1
 80211ea:	607a      	str	r2, [r7, #4]
 80211ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80211ee:	68fb      	ldr	r3, [r7, #12]
 80211f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80211f4:	68fb      	ldr	r3, [r7, #12]
 80211f6:	32b0      	adds	r2, #176	; 0xb0
 80211f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80211fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80211fe:	697b      	ldr	r3, [r7, #20]
 8021200:	2b00      	cmp	r3, #0
 8021202:	d102      	bne.n	802120a <SCSI_Verify10+0x2a>
  {
    return -1;
 8021204:	f04f 33ff 	mov.w	r3, #4294967295
 8021208:	e023      	b.n	8021252 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	3301      	adds	r3, #1
 802120e:	781b      	ldrb	r3, [r3, #0]
 8021210:	f003 0302 	and.w	r3, r3, #2
 8021214:	2b00      	cmp	r3, #0
 8021216:	d008      	beq.n	802122a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8021218:	7af9      	ldrb	r1, [r7, #11]
 802121a:	2324      	movs	r3, #36	; 0x24
 802121c:	2205      	movs	r2, #5
 802121e:	68f8      	ldr	r0, [r7, #12]
 8021220:	f7ff fbf7 	bl	8020a12 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8021224:	f04f 33ff 	mov.w	r3, #4294967295
 8021228:	e013      	b.n	8021252 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 802122a:	697b      	ldr	r3, [r7, #20]
 802122c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021230:	697b      	ldr	r3, [r7, #20]
 8021232:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8021236:	7af9      	ldrb	r1, [r7, #11]
 8021238:	68f8      	ldr	r0, [r7, #12]
 802123a:	f000 f80e 	bl	802125a <SCSI_CheckAddressRange>
 802123e:	4603      	mov	r3, r0
 8021240:	2b00      	cmp	r3, #0
 8021242:	da02      	bge.n	802124a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8021244:	f04f 33ff 	mov.w	r3, #4294967295
 8021248:	e003      	b.n	8021252 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 802124a:	697b      	ldr	r3, [r7, #20]
 802124c:	2200      	movs	r2, #0
 802124e:	60da      	str	r2, [r3, #12]

  return 0;
 8021250:	2300      	movs	r3, #0
}
 8021252:	4618      	mov	r0, r3
 8021254:	3718      	adds	r7, #24
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}

0802125a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 802125a:	b580      	push	{r7, lr}
 802125c:	b086      	sub	sp, #24
 802125e:	af00      	add	r7, sp, #0
 8021260:	60f8      	str	r0, [r7, #12]
 8021262:	607a      	str	r2, [r7, #4]
 8021264:	603b      	str	r3, [r7, #0]
 8021266:	460b      	mov	r3, r1
 8021268:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802126a:	68fb      	ldr	r3, [r7, #12]
 802126c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	32b0      	adds	r2, #176	; 0xb0
 8021274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021278:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802127a:	697b      	ldr	r3, [r7, #20]
 802127c:	2b00      	cmp	r3, #0
 802127e:	d102      	bne.n	8021286 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8021280:	f04f 33ff 	mov.w	r3, #4294967295
 8021284:	e011      	b.n	80212aa <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8021286:	687a      	ldr	r2, [r7, #4]
 8021288:	683b      	ldr	r3, [r7, #0]
 802128a:	441a      	add	r2, r3
 802128c:	697b      	ldr	r3, [r7, #20]
 802128e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8021292:	429a      	cmp	r2, r3
 8021294:	d908      	bls.n	80212a8 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8021296:	7af9      	ldrb	r1, [r7, #11]
 8021298:	2321      	movs	r3, #33	; 0x21
 802129a:	2205      	movs	r2, #5
 802129c:	68f8      	ldr	r0, [r7, #12]
 802129e:	f7ff fbb8 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 80212a2:	f04f 33ff 	mov.w	r3, #4294967295
 80212a6:	e000      	b.n	80212aa <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 80212a8:	2300      	movs	r3, #0
}
 80212aa:	4618      	mov	r0, r3
 80212ac:	3718      	adds	r7, #24
 80212ae:	46bd      	mov	sp, r7
 80212b0:	bd80      	pop	{r7, pc}
	...

080212b4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80212b4:	b590      	push	{r4, r7, lr}
 80212b6:	b085      	sub	sp, #20
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
 80212bc:	460b      	mov	r3, r1
 80212be:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	32b0      	adds	r2, #176	; 0xb0
 80212ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ce:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d102      	bne.n	80212dc <SCSI_ProcessRead+0x28>
  {
    return -1;
 80212d6:	f04f 33ff 	mov.w	r3, #4294967295
 80212da:	e06a      	b.n	80213b2 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80212dc:	68fb      	ldr	r3, [r7, #12]
 80212de:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80212e2:	68fa      	ldr	r2, [r7, #12]
 80212e4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80212e8:	fb02 f303 	mul.w	r3, r2, r3
 80212ec:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80212ee:	68bb      	ldr	r3, [r7, #8]
 80212f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80212f4:	bf28      	it	cs
 80212f6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80212fa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8021302:	687a      	ldr	r2, [r7, #4]
 8021304:	33b0      	adds	r3, #176	; 0xb0
 8021306:	009b      	lsls	r3, r3, #2
 8021308:	4413      	add	r3, r2
 802130a:	685b      	ldr	r3, [r3, #4]
 802130c:	691c      	ldr	r4, [r3, #16]
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	f103 0110 	add.w	r1, r3, #16
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021320:	4618      	mov	r0, r3
 8021322:	68bb      	ldr	r3, [r7, #8]
 8021324:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8021328:	b29b      	uxth	r3, r3
 802132a:	78f8      	ldrb	r0, [r7, #3]
 802132c:	47a0      	blx	r4
 802132e:	4603      	mov	r3, r0
 8021330:	2b00      	cmp	r3, #0
 8021332:	da08      	bge.n	8021346 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8021334:	78f9      	ldrb	r1, [r7, #3]
 8021336:	2311      	movs	r3, #17
 8021338:	2204      	movs	r2, #4
 802133a:	6878      	ldr	r0, [r7, #4]
 802133c:	f7ff fb69 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 8021340:	f04f 33ff 	mov.w	r3, #4294967295
 8021344:	e035      	b.n	80213b2 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8021346:	4b1d      	ldr	r3, [pc, #116]	; (80213bc <SCSI_ProcessRead+0x108>)
 8021348:	7819      	ldrb	r1, [r3, #0]
 802134a:	68fb      	ldr	r3, [r7, #12]
 802134c:	f103 0210 	add.w	r2, r3, #16
 8021350:	68bb      	ldr	r3, [r7, #8]
 8021352:	6878      	ldr	r0, [r7, #4]
 8021354:	f004 ff5a 	bl	802620c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8021358:	68fb      	ldr	r3, [r7, #12]
 802135a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 802135e:	68fb      	ldr	r3, [r7, #12]
 8021360:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021364:	4619      	mov	r1, r3
 8021366:	68bb      	ldr	r3, [r7, #8]
 8021368:	fbb3 f3f1 	udiv	r3, r3, r1
 802136c:	441a      	add	r2, r3
 802136e:	68fb      	ldr	r3, [r7, #12]
 8021370:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 802137a:	68fb      	ldr	r3, [r7, #12]
 802137c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8021380:	4619      	mov	r1, r3
 8021382:	68bb      	ldr	r3, [r7, #8]
 8021384:	fbb3 f3f1 	udiv	r3, r3, r1
 8021388:	1ad2      	subs	r2, r2, r3
 802138a:	68fb      	ldr	r3, [r7, #12]
 802138c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8021396:	68bb      	ldr	r3, [r7, #8]
 8021398:	1ad2      	subs	r2, r2, r3
 802139a:	68fb      	ldr	r3, [r7, #12]
 802139c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d102      	bne.n	80213b0 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	2203      	movs	r2, #3
 80213ae:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80213b0:	2300      	movs	r3, #0
}
 80213b2:	4618      	mov	r0, r3
 80213b4:	3714      	adds	r7, #20
 80213b6:	46bd      	mov	sp, r7
 80213b8:	bd90      	pop	{r4, r7, pc}
 80213ba:	bf00      	nop
 80213bc:	200005e6 	.word	0x200005e6

080213c0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80213c0:	b590      	push	{r4, r7, lr}
 80213c2:	b085      	sub	sp, #20
 80213c4:	af00      	add	r7, sp, #0
 80213c6:	6078      	str	r0, [r7, #4]
 80213c8:	460b      	mov	r3, r1
 80213ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	32b0      	adds	r2, #176	; 0xb0
 80213d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80213da:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d102      	bne.n	80213e8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80213e2:	f04f 33ff 	mov.w	r3, #4294967295
 80213e6:	e07a      	b.n	80214de <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80213ee:	68fa      	ldr	r2, [r7, #12]
 80213f0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80213f4:	fb02 f303 	mul.w	r3, r2, r3
 80213f8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80213fa:	68bb      	ldr	r3, [r7, #8]
 80213fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021400:	bf28      	it	cs
 8021402:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8021406:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802140e:	687a      	ldr	r2, [r7, #4]
 8021410:	33b0      	adds	r3, #176	; 0xb0
 8021412:	009b      	lsls	r3, r3, #2
 8021414:	4413      	add	r3, r2
 8021416:	685b      	ldr	r3, [r3, #4]
 8021418:	695c      	ldr	r4, [r3, #20]
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	f103 0110 	add.w	r1, r3, #16
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802142c:	4618      	mov	r0, r3
 802142e:	68bb      	ldr	r3, [r7, #8]
 8021430:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8021434:	b29b      	uxth	r3, r3
 8021436:	78f8      	ldrb	r0, [r7, #3]
 8021438:	47a0      	blx	r4
 802143a:	4603      	mov	r3, r0
 802143c:	2b00      	cmp	r3, #0
 802143e:	da08      	bge.n	8021452 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8021440:	78f9      	ldrb	r1, [r7, #3]
 8021442:	2303      	movs	r3, #3
 8021444:	2204      	movs	r2, #4
 8021446:	6878      	ldr	r0, [r7, #4]
 8021448:	f7ff fae3 	bl	8020a12 <SCSI_SenseCode>
    return -1;
 802144c:	f04f 33ff 	mov.w	r3, #4294967295
 8021450:	e045      	b.n	80214de <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8021458:	68fb      	ldr	r3, [r7, #12]
 802145a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802145e:	4619      	mov	r1, r3
 8021460:	68bb      	ldr	r3, [r7, #8]
 8021462:	fbb3 f3f1 	udiv	r3, r3, r1
 8021466:	441a      	add	r2, r3
 8021468:	68fb      	ldr	r3, [r7, #12]
 802146a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 802146e:	68fb      	ldr	r3, [r7, #12]
 8021470:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8021474:	68fb      	ldr	r3, [r7, #12]
 8021476:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802147a:	4619      	mov	r1, r3
 802147c:	68bb      	ldr	r3, [r7, #8]
 802147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8021482:	1ad2      	subs	r2, r2, r3
 8021484:	68fb      	ldr	r3, [r7, #12]
 8021486:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 802148a:	68fb      	ldr	r3, [r7, #12]
 802148c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8021490:	68bb      	ldr	r3, [r7, #8]
 8021492:	1ad2      	subs	r2, r2, r3
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 802149a:	68fb      	ldr	r3, [r7, #12]
 802149c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80214a0:	2b00      	cmp	r3, #0
 80214a2:	d104      	bne.n	80214ae <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80214a4:	2100      	movs	r1, #0
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f7fe fd14 	bl	801fed4 <MSC_BOT_SendCSW>
 80214ac:	e016      	b.n	80214dc <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80214ae:	68fb      	ldr	r3, [r7, #12]
 80214b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80214b4:	68fa      	ldr	r2, [r7, #12]
 80214b6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80214ba:	fb02 f303 	mul.w	r3, r2, r3
 80214be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80214c2:	bf28      	it	cs
 80214c4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80214c8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80214ca:	4b07      	ldr	r3, [pc, #28]	; (80214e8 <SCSI_ProcessWrite+0x128>)
 80214cc:	7819      	ldrb	r1, [r3, #0]
 80214ce:	68fb      	ldr	r3, [r7, #12]
 80214d0:	f103 0210 	add.w	r2, r3, #16
 80214d4:	68bb      	ldr	r3, [r7, #8]
 80214d6:	6878      	ldr	r0, [r7, #4]
 80214d8:	f004 feb9 	bl	802624e <USBD_LL_PrepareReceive>
  }

  return 0;
 80214dc:	2300      	movs	r3, #0
}
 80214de:	4618      	mov	r0, r3
 80214e0:	3714      	adds	r7, #20
 80214e2:	46bd      	mov	sp, r7
 80214e4:	bd90      	pop	{r4, r7, pc}
 80214e6:	bf00      	nop
 80214e8:	200005e7 	.word	0x200005e7

080214ec <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80214ec:	b480      	push	{r7}
 80214ee:	b087      	sub	sp, #28
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	60f8      	str	r0, [r7, #12]
 80214f4:	60b9      	str	r1, [r7, #8]
 80214f6:	4613      	mov	r3, r2
 80214f8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80214fa:	88fb      	ldrh	r3, [r7, #6]
 80214fc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80214fe:	68fb      	ldr	r3, [r7, #12]
 8021500:	2b00      	cmp	r3, #0
 8021502:	d102      	bne.n	802150a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8021504:	f04f 33ff 	mov.w	r3, #4294967295
 8021508:	e013      	b.n	8021532 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 802150a:	8afa      	ldrh	r2, [r7, #22]
 802150c:	68fb      	ldr	r3, [r7, #12]
 802150e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8021510:	e00b      	b.n	802152a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8021512:	8afb      	ldrh	r3, [r7, #22]
 8021514:	3b01      	subs	r3, #1
 8021516:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8021518:	8afb      	ldrh	r3, [r7, #22]
 802151a:	68ba      	ldr	r2, [r7, #8]
 802151c:	441a      	add	r2, r3
 802151e:	8afb      	ldrh	r3, [r7, #22]
 8021520:	7811      	ldrb	r1, [r2, #0]
 8021522:	68fa      	ldr	r2, [r7, #12]
 8021524:	4413      	add	r3, r2
 8021526:	460a      	mov	r2, r1
 8021528:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 802152a:	8afb      	ldrh	r3, [r7, #22]
 802152c:	2b00      	cmp	r3, #0
 802152e:	d1f0      	bne.n	8021512 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8021530:	2300      	movs	r3, #0
}
 8021532:	4618      	mov	r0, r3
 8021534:	371c      	adds	r7, #28
 8021536:	46bd      	mov	sp, r7
 8021538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153c:	4770      	bx	lr

0802153e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802153e:	b580      	push	{r7, lr}
 8021540:	b086      	sub	sp, #24
 8021542:	af00      	add	r7, sp, #0
 8021544:	60f8      	str	r0, [r7, #12]
 8021546:	60b9      	str	r1, [r7, #8]
 8021548:	4613      	mov	r3, r2
 802154a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d101      	bne.n	8021556 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8021552:	2303      	movs	r3, #3
 8021554:	e01f      	b.n	8021596 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	2200      	movs	r2, #0
 802155a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802155e:	68fb      	ldr	r3, [r7, #12]
 8021560:	2200      	movs	r2, #0
 8021562:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8021566:	68fb      	ldr	r3, [r7, #12]
 8021568:	2200      	movs	r2, #0
 802156a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802156e:	68bb      	ldr	r3, [r7, #8]
 8021570:	2b00      	cmp	r3, #0
 8021572:	d003      	beq.n	802157c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021574:	68fb      	ldr	r3, [r7, #12]
 8021576:	68ba      	ldr	r2, [r7, #8]
 8021578:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	2201      	movs	r2, #1
 8021580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	79fa      	ldrb	r2, [r7, #7]
 8021588:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802158a:	68f8      	ldr	r0, [r7, #12]
 802158c:	f004 fcea 	bl	8025f64 <USBD_LL_Init>
 8021590:	4603      	mov	r3, r0
 8021592:	75fb      	strb	r3, [r7, #23]

  return ret;
 8021594:	7dfb      	ldrb	r3, [r7, #23]
}
 8021596:	4618      	mov	r0, r3
 8021598:	3718      	adds	r7, #24
 802159a:	46bd      	mov	sp, r7
 802159c:	bd80      	pop	{r7, pc}

0802159e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802159e:	b580      	push	{r7, lr}
 80215a0:	b084      	sub	sp, #16
 80215a2:	af00      	add	r7, sp, #0
 80215a4:	6078      	str	r0, [r7, #4]
 80215a6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80215a8:	2300      	movs	r3, #0
 80215aa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80215ac:	683b      	ldr	r3, [r7, #0]
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	d101      	bne.n	80215b6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80215b2:	2303      	movs	r3, #3
 80215b4:	e025      	b.n	8021602 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	683a      	ldr	r2, [r7, #0]
 80215ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	32ae      	adds	r2, #174	; 0xae
 80215c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80215cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d00f      	beq.n	80215f2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	32ae      	adds	r2, #174	; 0xae
 80215dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80215e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215e2:	f107 020e 	add.w	r2, r7, #14
 80215e6:	4610      	mov	r0, r2
 80215e8:	4798      	blx	r3
 80215ea:	4602      	mov	r2, r0
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80215f8:	1c5a      	adds	r2, r3, #1
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8021600:	2300      	movs	r3, #0
}
 8021602:	4618      	mov	r0, r3
 8021604:	3710      	adds	r7, #16
 8021606:	46bd      	mov	sp, r7
 8021608:	bd80      	pop	{r7, pc}

0802160a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802160a:	b580      	push	{r7, lr}
 802160c:	b082      	sub	sp, #8
 802160e:	af00      	add	r7, sp, #0
 8021610:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8021612:	6878      	ldr	r0, [r7, #4]
 8021614:	f004 fcf2 	bl	8025ffc <USBD_LL_Start>
 8021618:	4603      	mov	r3, r0
}
 802161a:	4618      	mov	r0, r3
 802161c:	3708      	adds	r7, #8
 802161e:	46bd      	mov	sp, r7
 8021620:	bd80      	pop	{r7, pc}

08021622 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8021622:	b480      	push	{r7}
 8021624:	b083      	sub	sp, #12
 8021626:	af00      	add	r7, sp, #0
 8021628:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802162a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802162c:	4618      	mov	r0, r3
 802162e:	370c      	adds	r7, #12
 8021630:	46bd      	mov	sp, r7
 8021632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021636:	4770      	bx	lr

08021638 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021638:	b580      	push	{r7, lr}
 802163a:	b084      	sub	sp, #16
 802163c:	af00      	add	r7, sp, #0
 802163e:	6078      	str	r0, [r7, #4]
 8021640:	460b      	mov	r3, r1
 8021642:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8021644:	2300      	movs	r3, #0
 8021646:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802164e:	2b00      	cmp	r3, #0
 8021650:	d009      	beq.n	8021666 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	78fa      	ldrb	r2, [r7, #3]
 802165c:	4611      	mov	r1, r2
 802165e:	6878      	ldr	r0, [r7, #4]
 8021660:	4798      	blx	r3
 8021662:	4603      	mov	r3, r0
 8021664:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8021666:	7bfb      	ldrb	r3, [r7, #15]
}
 8021668:	4618      	mov	r0, r3
 802166a:	3710      	adds	r7, #16
 802166c:	46bd      	mov	sp, r7
 802166e:	bd80      	pop	{r7, pc}

08021670 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021670:	b580      	push	{r7, lr}
 8021672:	b084      	sub	sp, #16
 8021674:	af00      	add	r7, sp, #0
 8021676:	6078      	str	r0, [r7, #4]
 8021678:	460b      	mov	r3, r1
 802167a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802167c:	2300      	movs	r3, #0
 802167e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021686:	685b      	ldr	r3, [r3, #4]
 8021688:	78fa      	ldrb	r2, [r7, #3]
 802168a:	4611      	mov	r1, r2
 802168c:	6878      	ldr	r0, [r7, #4]
 802168e:	4798      	blx	r3
 8021690:	4603      	mov	r3, r0
 8021692:	2b00      	cmp	r3, #0
 8021694:	d001      	beq.n	802169a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8021696:	2303      	movs	r3, #3
 8021698:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802169a:	7bfb      	ldrb	r3, [r7, #15]
}
 802169c:	4618      	mov	r0, r3
 802169e:	3710      	adds	r7, #16
 80216a0:	46bd      	mov	sp, r7
 80216a2:	bd80      	pop	{r7, pc}

080216a4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80216a4:	b580      	push	{r7, lr}
 80216a6:	b084      	sub	sp, #16
 80216a8:	af00      	add	r7, sp, #0
 80216aa:	6078      	str	r0, [r7, #4]
 80216ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80216b4:	6839      	ldr	r1, [r7, #0]
 80216b6:	4618      	mov	r0, r3
 80216b8:	f001 f933 	bl	8022922 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	2201      	movs	r2, #1
 80216c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80216ca:	461a      	mov	r2, r3
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80216d8:	f003 031f 	and.w	r3, r3, #31
 80216dc:	2b02      	cmp	r3, #2
 80216de:	d01a      	beq.n	8021716 <USBD_LL_SetupStage+0x72>
 80216e0:	2b02      	cmp	r3, #2
 80216e2:	d822      	bhi.n	802172a <USBD_LL_SetupStage+0x86>
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d002      	beq.n	80216ee <USBD_LL_SetupStage+0x4a>
 80216e8:	2b01      	cmp	r3, #1
 80216ea:	d00a      	beq.n	8021702 <USBD_LL_SetupStage+0x5e>
 80216ec:	e01d      	b.n	802172a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80216ee:	687b      	ldr	r3, [r7, #4]
 80216f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80216f4:	4619      	mov	r1, r3
 80216f6:	6878      	ldr	r0, [r7, #4]
 80216f8:	f000 fb60 	bl	8021dbc <USBD_StdDevReq>
 80216fc:	4603      	mov	r3, r0
 80216fe:	73fb      	strb	r3, [r7, #15]
      break;
 8021700:	e020      	b.n	8021744 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021708:	4619      	mov	r1, r3
 802170a:	6878      	ldr	r0, [r7, #4]
 802170c:	f000 fbc8 	bl	8021ea0 <USBD_StdItfReq>
 8021710:	4603      	mov	r3, r0
 8021712:	73fb      	strb	r3, [r7, #15]
      break;
 8021714:	e016      	b.n	8021744 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802171c:	4619      	mov	r1, r3
 802171e:	6878      	ldr	r0, [r7, #4]
 8021720:	f000 fc2a 	bl	8021f78 <USBD_StdEPReq>
 8021724:	4603      	mov	r3, r0
 8021726:	73fb      	strb	r3, [r7, #15]
      break;
 8021728:	e00c      	b.n	8021744 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8021730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021734:	b2db      	uxtb	r3, r3
 8021736:	4619      	mov	r1, r3
 8021738:	6878      	ldr	r0, [r7, #4]
 802173a:	f004 fcde 	bl	80260fa <USBD_LL_StallEP>
 802173e:	4603      	mov	r3, r0
 8021740:	73fb      	strb	r3, [r7, #15]
      break;
 8021742:	bf00      	nop
  }

  return ret;
 8021744:	7bfb      	ldrb	r3, [r7, #15]
}
 8021746:	4618      	mov	r0, r3
 8021748:	3710      	adds	r7, #16
 802174a:	46bd      	mov	sp, r7
 802174c:	bd80      	pop	{r7, pc}

0802174e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802174e:	b580      	push	{r7, lr}
 8021750:	b086      	sub	sp, #24
 8021752:	af00      	add	r7, sp, #0
 8021754:	60f8      	str	r0, [r7, #12]
 8021756:	460b      	mov	r3, r1
 8021758:	607a      	str	r2, [r7, #4]
 802175a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802175c:	2300      	movs	r3, #0
 802175e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8021760:	7afb      	ldrb	r3, [r7, #11]
 8021762:	2b00      	cmp	r3, #0
 8021764:	d16e      	bne.n	8021844 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802176c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802176e:	68fb      	ldr	r3, [r7, #12]
 8021770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021774:	2b03      	cmp	r3, #3
 8021776:	f040 8098 	bne.w	80218aa <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802177a:	693b      	ldr	r3, [r7, #16]
 802177c:	689a      	ldr	r2, [r3, #8]
 802177e:	693b      	ldr	r3, [r7, #16]
 8021780:	68db      	ldr	r3, [r3, #12]
 8021782:	429a      	cmp	r2, r3
 8021784:	d913      	bls.n	80217ae <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8021786:	693b      	ldr	r3, [r7, #16]
 8021788:	689a      	ldr	r2, [r3, #8]
 802178a:	693b      	ldr	r3, [r7, #16]
 802178c:	68db      	ldr	r3, [r3, #12]
 802178e:	1ad2      	subs	r2, r2, r3
 8021790:	693b      	ldr	r3, [r7, #16]
 8021792:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8021794:	693b      	ldr	r3, [r7, #16]
 8021796:	68da      	ldr	r2, [r3, #12]
 8021798:	693b      	ldr	r3, [r7, #16]
 802179a:	689b      	ldr	r3, [r3, #8]
 802179c:	4293      	cmp	r3, r2
 802179e:	bf28      	it	cs
 80217a0:	4613      	movcs	r3, r2
 80217a2:	461a      	mov	r2, r3
 80217a4:	6879      	ldr	r1, [r7, #4]
 80217a6:	68f8      	ldr	r0, [r7, #12]
 80217a8:	f001 f992 	bl	8022ad0 <USBD_CtlContinueRx>
 80217ac:	e07d      	b.n	80218aa <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80217ae:	68fb      	ldr	r3, [r7, #12]
 80217b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80217b4:	f003 031f 	and.w	r3, r3, #31
 80217b8:	2b02      	cmp	r3, #2
 80217ba:	d014      	beq.n	80217e6 <USBD_LL_DataOutStage+0x98>
 80217bc:	2b02      	cmp	r3, #2
 80217be:	d81d      	bhi.n	80217fc <USBD_LL_DataOutStage+0xae>
 80217c0:	2b00      	cmp	r3, #0
 80217c2:	d002      	beq.n	80217ca <USBD_LL_DataOutStage+0x7c>
 80217c4:	2b01      	cmp	r3, #1
 80217c6:	d003      	beq.n	80217d0 <USBD_LL_DataOutStage+0x82>
 80217c8:	e018      	b.n	80217fc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80217ca:	2300      	movs	r3, #0
 80217cc:	75bb      	strb	r3, [r7, #22]
            break;
 80217ce:	e018      	b.n	8021802 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80217d0:	68fb      	ldr	r3, [r7, #12]
 80217d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80217d6:	b2db      	uxtb	r3, r3
 80217d8:	4619      	mov	r1, r3
 80217da:	68f8      	ldr	r0, [r7, #12]
 80217dc:	f000 fa5e 	bl	8021c9c <USBD_CoreFindIF>
 80217e0:	4603      	mov	r3, r0
 80217e2:	75bb      	strb	r3, [r7, #22]
            break;
 80217e4:	e00d      	b.n	8021802 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80217e6:	68fb      	ldr	r3, [r7, #12]
 80217e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80217ec:	b2db      	uxtb	r3, r3
 80217ee:	4619      	mov	r1, r3
 80217f0:	68f8      	ldr	r0, [r7, #12]
 80217f2:	f000 fa60 	bl	8021cb6 <USBD_CoreFindEP>
 80217f6:	4603      	mov	r3, r0
 80217f8:	75bb      	strb	r3, [r7, #22]
            break;
 80217fa:	e002      	b.n	8021802 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80217fc:	2300      	movs	r3, #0
 80217fe:	75bb      	strb	r3, [r7, #22]
            break;
 8021800:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8021802:	7dbb      	ldrb	r3, [r7, #22]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d119      	bne.n	802183c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021808:	68fb      	ldr	r3, [r7, #12]
 802180a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802180e:	b2db      	uxtb	r3, r3
 8021810:	2b03      	cmp	r3, #3
 8021812:	d113      	bne.n	802183c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8021814:	7dba      	ldrb	r2, [r7, #22]
 8021816:	68fb      	ldr	r3, [r7, #12]
 8021818:	32ae      	adds	r2, #174	; 0xae
 802181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802181e:	691b      	ldr	r3, [r3, #16]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d00b      	beq.n	802183c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8021824:	7dba      	ldrb	r2, [r7, #22]
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802182c:	7dba      	ldrb	r2, [r7, #22]
 802182e:	68fb      	ldr	r3, [r7, #12]
 8021830:	32ae      	adds	r2, #174	; 0xae
 8021832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021836:	691b      	ldr	r3, [r3, #16]
 8021838:	68f8      	ldr	r0, [r7, #12]
 802183a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802183c:	68f8      	ldr	r0, [r7, #12]
 802183e:	f001 f958 	bl	8022af2 <USBD_CtlSendStatus>
 8021842:	e032      	b.n	80218aa <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8021844:	7afb      	ldrb	r3, [r7, #11]
 8021846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802184a:	b2db      	uxtb	r3, r3
 802184c:	4619      	mov	r1, r3
 802184e:	68f8      	ldr	r0, [r7, #12]
 8021850:	f000 fa31 	bl	8021cb6 <USBD_CoreFindEP>
 8021854:	4603      	mov	r3, r0
 8021856:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021858:	7dbb      	ldrb	r3, [r7, #22]
 802185a:	2bff      	cmp	r3, #255	; 0xff
 802185c:	d025      	beq.n	80218aa <USBD_LL_DataOutStage+0x15c>
 802185e:	7dbb      	ldrb	r3, [r7, #22]
 8021860:	2b00      	cmp	r3, #0
 8021862:	d122      	bne.n	80218aa <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021864:	68fb      	ldr	r3, [r7, #12]
 8021866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802186a:	b2db      	uxtb	r3, r3
 802186c:	2b03      	cmp	r3, #3
 802186e:	d117      	bne.n	80218a0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8021870:	7dba      	ldrb	r2, [r7, #22]
 8021872:	68fb      	ldr	r3, [r7, #12]
 8021874:	32ae      	adds	r2, #174	; 0xae
 8021876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802187a:	699b      	ldr	r3, [r3, #24]
 802187c:	2b00      	cmp	r3, #0
 802187e:	d00f      	beq.n	80218a0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8021880:	7dba      	ldrb	r2, [r7, #22]
 8021882:	68fb      	ldr	r3, [r7, #12]
 8021884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8021888:	7dba      	ldrb	r2, [r7, #22]
 802188a:	68fb      	ldr	r3, [r7, #12]
 802188c:	32ae      	adds	r2, #174	; 0xae
 802188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021892:	699b      	ldr	r3, [r3, #24]
 8021894:	7afa      	ldrb	r2, [r7, #11]
 8021896:	4611      	mov	r1, r2
 8021898:	68f8      	ldr	r0, [r7, #12]
 802189a:	4798      	blx	r3
 802189c:	4603      	mov	r3, r0
 802189e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80218a0:	7dfb      	ldrb	r3, [r7, #23]
 80218a2:	2b00      	cmp	r3, #0
 80218a4:	d001      	beq.n	80218aa <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80218a6:	7dfb      	ldrb	r3, [r7, #23]
 80218a8:	e000      	b.n	80218ac <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80218aa:	2300      	movs	r3, #0
}
 80218ac:	4618      	mov	r0, r3
 80218ae:	3718      	adds	r7, #24
 80218b0:	46bd      	mov	sp, r7
 80218b2:	bd80      	pop	{r7, pc}

080218b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	b086      	sub	sp, #24
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	60f8      	str	r0, [r7, #12]
 80218bc:	460b      	mov	r3, r1
 80218be:	607a      	str	r2, [r7, #4]
 80218c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80218c2:	7afb      	ldrb	r3, [r7, #11]
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d16f      	bne.n	80219a8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	3314      	adds	r3, #20
 80218cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80218ce:	68fb      	ldr	r3, [r7, #12]
 80218d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80218d4:	2b02      	cmp	r3, #2
 80218d6:	d15a      	bne.n	802198e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80218d8:	693b      	ldr	r3, [r7, #16]
 80218da:	689a      	ldr	r2, [r3, #8]
 80218dc:	693b      	ldr	r3, [r7, #16]
 80218de:	68db      	ldr	r3, [r3, #12]
 80218e0:	429a      	cmp	r2, r3
 80218e2:	d914      	bls.n	802190e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80218e4:	693b      	ldr	r3, [r7, #16]
 80218e6:	689a      	ldr	r2, [r3, #8]
 80218e8:	693b      	ldr	r3, [r7, #16]
 80218ea:	68db      	ldr	r3, [r3, #12]
 80218ec:	1ad2      	subs	r2, r2, r3
 80218ee:	693b      	ldr	r3, [r7, #16]
 80218f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80218f2:	693b      	ldr	r3, [r7, #16]
 80218f4:	689b      	ldr	r3, [r3, #8]
 80218f6:	461a      	mov	r2, r3
 80218f8:	6879      	ldr	r1, [r7, #4]
 80218fa:	68f8      	ldr	r0, [r7, #12]
 80218fc:	f001 f8d7 	bl	8022aae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021900:	2300      	movs	r3, #0
 8021902:	2200      	movs	r2, #0
 8021904:	2100      	movs	r1, #0
 8021906:	68f8      	ldr	r0, [r7, #12]
 8021908:	f004 fca1 	bl	802624e <USBD_LL_PrepareReceive>
 802190c:	e03f      	b.n	802198e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802190e:	693b      	ldr	r3, [r7, #16]
 8021910:	68da      	ldr	r2, [r3, #12]
 8021912:	693b      	ldr	r3, [r7, #16]
 8021914:	689b      	ldr	r3, [r3, #8]
 8021916:	429a      	cmp	r2, r3
 8021918:	d11c      	bne.n	8021954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802191a:	693b      	ldr	r3, [r7, #16]
 802191c:	685a      	ldr	r2, [r3, #4]
 802191e:	693b      	ldr	r3, [r7, #16]
 8021920:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021922:	429a      	cmp	r2, r3
 8021924:	d316      	bcc.n	8021954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021926:	693b      	ldr	r3, [r7, #16]
 8021928:	685a      	ldr	r2, [r3, #4]
 802192a:	68fb      	ldr	r3, [r7, #12]
 802192c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8021930:	429a      	cmp	r2, r3
 8021932:	d20f      	bcs.n	8021954 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021934:	2200      	movs	r2, #0
 8021936:	2100      	movs	r1, #0
 8021938:	68f8      	ldr	r0, [r7, #12]
 802193a:	f001 f8b8 	bl	8022aae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	2200      	movs	r2, #0
 8021942:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021946:	2300      	movs	r3, #0
 8021948:	2200      	movs	r2, #0
 802194a:	2100      	movs	r1, #0
 802194c:	68f8      	ldr	r0, [r7, #12]
 802194e:	f004 fc7e 	bl	802624e <USBD_LL_PrepareReceive>
 8021952:	e01c      	b.n	802198e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021954:	68fb      	ldr	r3, [r7, #12]
 8021956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802195a:	b2db      	uxtb	r3, r3
 802195c:	2b03      	cmp	r3, #3
 802195e:	d10f      	bne.n	8021980 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8021960:	68fb      	ldr	r3, [r7, #12]
 8021962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021966:	68db      	ldr	r3, [r3, #12]
 8021968:	2b00      	cmp	r3, #0
 802196a:	d009      	beq.n	8021980 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802196c:	68fb      	ldr	r3, [r7, #12]
 802196e:	2200      	movs	r2, #0
 8021970:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8021974:	68fb      	ldr	r3, [r7, #12]
 8021976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802197a:	68db      	ldr	r3, [r3, #12]
 802197c:	68f8      	ldr	r0, [r7, #12]
 802197e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8021980:	2180      	movs	r1, #128	; 0x80
 8021982:	68f8      	ldr	r0, [r7, #12]
 8021984:	f004 fbb9 	bl	80260fa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8021988:	68f8      	ldr	r0, [r7, #12]
 802198a:	f001 f8c5 	bl	8022b18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8021994:	2b00      	cmp	r3, #0
 8021996:	d03a      	beq.n	8021a0e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8021998:	68f8      	ldr	r0, [r7, #12]
 802199a:	f7ff fe42 	bl	8021622 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	2200      	movs	r2, #0
 80219a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80219a6:	e032      	b.n	8021a0e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80219a8:	7afb      	ldrb	r3, [r7, #11]
 80219aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80219ae:	b2db      	uxtb	r3, r3
 80219b0:	4619      	mov	r1, r3
 80219b2:	68f8      	ldr	r0, [r7, #12]
 80219b4:	f000 f97f 	bl	8021cb6 <USBD_CoreFindEP>
 80219b8:	4603      	mov	r3, r0
 80219ba:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80219bc:	7dfb      	ldrb	r3, [r7, #23]
 80219be:	2bff      	cmp	r3, #255	; 0xff
 80219c0:	d025      	beq.n	8021a0e <USBD_LL_DataInStage+0x15a>
 80219c2:	7dfb      	ldrb	r3, [r7, #23]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d122      	bne.n	8021a0e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80219ce:	b2db      	uxtb	r3, r3
 80219d0:	2b03      	cmp	r3, #3
 80219d2:	d11c      	bne.n	8021a0e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80219d4:	7dfa      	ldrb	r2, [r7, #23]
 80219d6:	68fb      	ldr	r3, [r7, #12]
 80219d8:	32ae      	adds	r2, #174	; 0xae
 80219da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80219de:	695b      	ldr	r3, [r3, #20]
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d014      	beq.n	8021a0e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80219e4:	7dfa      	ldrb	r2, [r7, #23]
 80219e6:	68fb      	ldr	r3, [r7, #12]
 80219e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80219ec:	7dfa      	ldrb	r2, [r7, #23]
 80219ee:	68fb      	ldr	r3, [r7, #12]
 80219f0:	32ae      	adds	r2, #174	; 0xae
 80219f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80219f6:	695b      	ldr	r3, [r3, #20]
 80219f8:	7afa      	ldrb	r2, [r7, #11]
 80219fa:	4611      	mov	r1, r2
 80219fc:	68f8      	ldr	r0, [r7, #12]
 80219fe:	4798      	blx	r3
 8021a00:	4603      	mov	r3, r0
 8021a02:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8021a04:	7dbb      	ldrb	r3, [r7, #22]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	d001      	beq.n	8021a0e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8021a0a:	7dbb      	ldrb	r3, [r7, #22]
 8021a0c:	e000      	b.n	8021a10 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8021a0e:	2300      	movs	r3, #0
}
 8021a10:	4618      	mov	r0, r3
 8021a12:	3718      	adds	r7, #24
 8021a14:	46bd      	mov	sp, r7
 8021a16:	bd80      	pop	{r7, pc}

08021a18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8021a18:	b580      	push	{r7, lr}
 8021a1a:	b084      	sub	sp, #16
 8021a1c:	af00      	add	r7, sp, #0
 8021a1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8021a20:	2300      	movs	r3, #0
 8021a22:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	2201      	movs	r2, #1
 8021a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	2200      	movs	r2, #0
 8021a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	2200      	movs	r2, #0
 8021a38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	2200      	movs	r2, #0
 8021a46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d014      	beq.n	8021a7e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a5a:	685b      	ldr	r3, [r3, #4]
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	d00e      	beq.n	8021a7e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a66:	685b      	ldr	r3, [r3, #4]
 8021a68:	687a      	ldr	r2, [r7, #4]
 8021a6a:	6852      	ldr	r2, [r2, #4]
 8021a6c:	b2d2      	uxtb	r2, r2
 8021a6e:	4611      	mov	r1, r2
 8021a70:	6878      	ldr	r0, [r7, #4]
 8021a72:	4798      	blx	r3
 8021a74:	4603      	mov	r3, r0
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d001      	beq.n	8021a7e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8021a7a:	2303      	movs	r3, #3
 8021a7c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021a7e:	2340      	movs	r3, #64	; 0x40
 8021a80:	2200      	movs	r2, #0
 8021a82:	2100      	movs	r1, #0
 8021a84:	6878      	ldr	r0, [r7, #4]
 8021a86:	f004 fad4 	bl	8026032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021a8a:	687b      	ldr	r3, [r7, #4]
 8021a8c:	2201      	movs	r2, #1
 8021a8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	2240      	movs	r2, #64	; 0x40
 8021a96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021a9a:	2340      	movs	r3, #64	; 0x40
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	2180      	movs	r1, #128	; 0x80
 8021aa0:	6878      	ldr	r0, [r7, #4]
 8021aa2:	f004 fac6 	bl	8026032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	2201      	movs	r2, #1
 8021aaa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	2240      	movs	r2, #64	; 0x40
 8021ab0:	621a      	str	r2, [r3, #32]

  return ret;
 8021ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8021ab4:	4618      	mov	r0, r3
 8021ab6:	3710      	adds	r7, #16
 8021ab8:	46bd      	mov	sp, r7
 8021aba:	bd80      	pop	{r7, pc}

08021abc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021abc:	b480      	push	{r7}
 8021abe:	b083      	sub	sp, #12
 8021ac0:	af00      	add	r7, sp, #0
 8021ac2:	6078      	str	r0, [r7, #4]
 8021ac4:	460b      	mov	r3, r1
 8021ac6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	78fa      	ldrb	r2, [r7, #3]
 8021acc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021ace:	2300      	movs	r3, #0
}
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	370c      	adds	r7, #12
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ada:	4770      	bx	lr

08021adc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021adc:	b480      	push	{r7}
 8021ade:	b083      	sub	sp, #12
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021aea:	b2da      	uxtb	r2, r3
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	2204      	movs	r2, #4
 8021af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8021afa:	2300      	movs	r3, #0
}
 8021afc:	4618      	mov	r0, r3
 8021afe:	370c      	adds	r7, #12
 8021b00:	46bd      	mov	sp, r7
 8021b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b06:	4770      	bx	lr

08021b08 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021b08:	b480      	push	{r7}
 8021b0a:	b083      	sub	sp, #12
 8021b0c:	af00      	add	r7, sp, #0
 8021b0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b16:	b2db      	uxtb	r3, r3
 8021b18:	2b04      	cmp	r3, #4
 8021b1a:	d106      	bne.n	8021b2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021b22:	b2da      	uxtb	r2, r3
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021b2a:	2300      	movs	r3, #0
}
 8021b2c:	4618      	mov	r0, r3
 8021b2e:	370c      	adds	r7, #12
 8021b30:	46bd      	mov	sp, r7
 8021b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b36:	4770      	bx	lr

08021b38 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021b38:	b580      	push	{r7, lr}
 8021b3a:	b082      	sub	sp, #8
 8021b3c:	af00      	add	r7, sp, #0
 8021b3e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b46:	b2db      	uxtb	r3, r3
 8021b48:	2b03      	cmp	r3, #3
 8021b4a:	d110      	bne.n	8021b6e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d00b      	beq.n	8021b6e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b5c:	69db      	ldr	r3, [r3, #28]
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d005      	beq.n	8021b6e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021b68:	69db      	ldr	r3, [r3, #28]
 8021b6a:	6878      	ldr	r0, [r7, #4]
 8021b6c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8021b6e:	2300      	movs	r3, #0
}
 8021b70:	4618      	mov	r0, r3
 8021b72:	3708      	adds	r7, #8
 8021b74:	46bd      	mov	sp, r7
 8021b76:	bd80      	pop	{r7, pc}

08021b78 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b082      	sub	sp, #8
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	6078      	str	r0, [r7, #4]
 8021b80:	460b      	mov	r3, r1
 8021b82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	32ae      	adds	r2, #174	; 0xae
 8021b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d101      	bne.n	8021b9a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8021b96:	2303      	movs	r3, #3
 8021b98:	e01c      	b.n	8021bd4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ba0:	b2db      	uxtb	r3, r3
 8021ba2:	2b03      	cmp	r3, #3
 8021ba4:	d115      	bne.n	8021bd2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	32ae      	adds	r2, #174	; 0xae
 8021bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021bb4:	6a1b      	ldr	r3, [r3, #32]
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d00b      	beq.n	8021bd2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	32ae      	adds	r2, #174	; 0xae
 8021bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021bc8:	6a1b      	ldr	r3, [r3, #32]
 8021bca:	78fa      	ldrb	r2, [r7, #3]
 8021bcc:	4611      	mov	r1, r2
 8021bce:	6878      	ldr	r0, [r7, #4]
 8021bd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021bd2:	2300      	movs	r3, #0
}
 8021bd4:	4618      	mov	r0, r3
 8021bd6:	3708      	adds	r7, #8
 8021bd8:	46bd      	mov	sp, r7
 8021bda:	bd80      	pop	{r7, pc}

08021bdc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	b082      	sub	sp, #8
 8021be0:	af00      	add	r7, sp, #0
 8021be2:	6078      	str	r0, [r7, #4]
 8021be4:	460b      	mov	r3, r1
 8021be6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	32ae      	adds	r2, #174	; 0xae
 8021bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d101      	bne.n	8021bfe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8021bfa:	2303      	movs	r3, #3
 8021bfc:	e01c      	b.n	8021c38 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021c04:	b2db      	uxtb	r3, r3
 8021c06:	2b03      	cmp	r3, #3
 8021c08:	d115      	bne.n	8021c36 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	32ae      	adds	r2, #174	; 0xae
 8021c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d00b      	beq.n	8021c36 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	32ae      	adds	r2, #174	; 0xae
 8021c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c2e:	78fa      	ldrb	r2, [r7, #3]
 8021c30:	4611      	mov	r1, r2
 8021c32:	6878      	ldr	r0, [r7, #4]
 8021c34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021c36:	2300      	movs	r3, #0
}
 8021c38:	4618      	mov	r0, r3
 8021c3a:	3708      	adds	r7, #8
 8021c3c:	46bd      	mov	sp, r7
 8021c3e:	bd80      	pop	{r7, pc}

08021c40 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021c40:	b480      	push	{r7}
 8021c42:	b083      	sub	sp, #12
 8021c44:	af00      	add	r7, sp, #0
 8021c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021c48:	2300      	movs	r3, #0
}
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	370c      	adds	r7, #12
 8021c4e:	46bd      	mov	sp, r7
 8021c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c54:	4770      	bx	lr

08021c56 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021c56:	b580      	push	{r7, lr}
 8021c58:	b084      	sub	sp, #16
 8021c5a:	af00      	add	r7, sp, #0
 8021c5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8021c5e:	2300      	movs	r3, #0
 8021c60:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	2201      	movs	r2, #1
 8021c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d00e      	beq.n	8021c92 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c7a:	685b      	ldr	r3, [r3, #4]
 8021c7c:	687a      	ldr	r2, [r7, #4]
 8021c7e:	6852      	ldr	r2, [r2, #4]
 8021c80:	b2d2      	uxtb	r2, r2
 8021c82:	4611      	mov	r1, r2
 8021c84:	6878      	ldr	r0, [r7, #4]
 8021c86:	4798      	blx	r3
 8021c88:	4603      	mov	r3, r0
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d001      	beq.n	8021c92 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8021c8e:	2303      	movs	r3, #3
 8021c90:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8021c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c94:	4618      	mov	r0, r3
 8021c96:	3710      	adds	r7, #16
 8021c98:	46bd      	mov	sp, r7
 8021c9a:	bd80      	pop	{r7, pc}

08021c9c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8021c9c:	b480      	push	{r7}
 8021c9e:	b083      	sub	sp, #12
 8021ca0:	af00      	add	r7, sp, #0
 8021ca2:	6078      	str	r0, [r7, #4]
 8021ca4:	460b      	mov	r3, r1
 8021ca6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8021ca8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8021caa:	4618      	mov	r0, r3
 8021cac:	370c      	adds	r7, #12
 8021cae:	46bd      	mov	sp, r7
 8021cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb4:	4770      	bx	lr

08021cb6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8021cb6:	b480      	push	{r7}
 8021cb8:	b083      	sub	sp, #12
 8021cba:	af00      	add	r7, sp, #0
 8021cbc:	6078      	str	r0, [r7, #4]
 8021cbe:	460b      	mov	r3, r1
 8021cc0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8021cc2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8021cc4:	4618      	mov	r0, r3
 8021cc6:	370c      	adds	r7, #12
 8021cc8:	46bd      	mov	sp, r7
 8021cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cce:	4770      	bx	lr

08021cd0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8021cd0:	b580      	push	{r7, lr}
 8021cd2:	b086      	sub	sp, #24
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
 8021cd8:	460b      	mov	r3, r1
 8021cda:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8021ce4:	2300      	movs	r3, #0
 8021ce6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8021ce8:	68fb      	ldr	r3, [r7, #12]
 8021cea:	885b      	ldrh	r3, [r3, #2]
 8021cec:	b29a      	uxth	r2, r3
 8021cee:	68fb      	ldr	r3, [r7, #12]
 8021cf0:	781b      	ldrb	r3, [r3, #0]
 8021cf2:	b29b      	uxth	r3, r3
 8021cf4:	429a      	cmp	r2, r3
 8021cf6:	d920      	bls.n	8021d3a <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	781b      	ldrb	r3, [r3, #0]
 8021cfc:	b29b      	uxth	r3, r3
 8021cfe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8021d00:	e013      	b.n	8021d2a <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8021d02:	f107 030a 	add.w	r3, r7, #10
 8021d06:	4619      	mov	r1, r3
 8021d08:	6978      	ldr	r0, [r7, #20]
 8021d0a:	f000 f81b 	bl	8021d44 <USBD_GetNextDesc>
 8021d0e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8021d10:	697b      	ldr	r3, [r7, #20]
 8021d12:	785b      	ldrb	r3, [r3, #1]
 8021d14:	2b05      	cmp	r3, #5
 8021d16:	d108      	bne.n	8021d2a <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8021d18:	697b      	ldr	r3, [r7, #20]
 8021d1a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8021d1c:	693b      	ldr	r3, [r7, #16]
 8021d1e:	789b      	ldrb	r3, [r3, #2]
 8021d20:	78fa      	ldrb	r2, [r7, #3]
 8021d22:	429a      	cmp	r2, r3
 8021d24:	d008      	beq.n	8021d38 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8021d26:	2300      	movs	r3, #0
 8021d28:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	885b      	ldrh	r3, [r3, #2]
 8021d2e:	b29a      	uxth	r2, r3
 8021d30:	897b      	ldrh	r3, [r7, #10]
 8021d32:	429a      	cmp	r2, r3
 8021d34:	d8e5      	bhi.n	8021d02 <USBD_GetEpDesc+0x32>
 8021d36:	e000      	b.n	8021d3a <USBD_GetEpDesc+0x6a>
          break;
 8021d38:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8021d3a:	693b      	ldr	r3, [r7, #16]
}
 8021d3c:	4618      	mov	r0, r3
 8021d3e:	3718      	adds	r7, #24
 8021d40:	46bd      	mov	sp, r7
 8021d42:	bd80      	pop	{r7, pc}

08021d44 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8021d44:	b480      	push	{r7}
 8021d46:	b085      	sub	sp, #20
 8021d48:	af00      	add	r7, sp, #0
 8021d4a:	6078      	str	r0, [r7, #4]
 8021d4c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8021d52:	683b      	ldr	r3, [r7, #0]
 8021d54:	881a      	ldrh	r2, [r3, #0]
 8021d56:	68fb      	ldr	r3, [r7, #12]
 8021d58:	781b      	ldrb	r3, [r3, #0]
 8021d5a:	b29b      	uxth	r3, r3
 8021d5c:	4413      	add	r3, r2
 8021d5e:	b29a      	uxth	r2, r3
 8021d60:	683b      	ldr	r3, [r7, #0]
 8021d62:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	781b      	ldrb	r3, [r3, #0]
 8021d68:	461a      	mov	r2, r3
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	4413      	add	r3, r2
 8021d6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8021d70:	68fb      	ldr	r3, [r7, #12]
}
 8021d72:	4618      	mov	r0, r3
 8021d74:	3714      	adds	r7, #20
 8021d76:	46bd      	mov	sp, r7
 8021d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7c:	4770      	bx	lr

08021d7e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021d7e:	b480      	push	{r7}
 8021d80:	b087      	sub	sp, #28
 8021d82:	af00      	add	r7, sp, #0
 8021d84:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8021d8a:	697b      	ldr	r3, [r7, #20]
 8021d8c:	781b      	ldrb	r3, [r3, #0]
 8021d8e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021d90:	697b      	ldr	r3, [r7, #20]
 8021d92:	3301      	adds	r3, #1
 8021d94:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021d96:	697b      	ldr	r3, [r7, #20]
 8021d98:	781b      	ldrb	r3, [r3, #0]
 8021d9a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8021d9c:	8a3b      	ldrh	r3, [r7, #16]
 8021d9e:	021b      	lsls	r3, r3, #8
 8021da0:	b21a      	sxth	r2, r3
 8021da2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021da6:	4313      	orrs	r3, r2
 8021da8:	b21b      	sxth	r3, r3
 8021daa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8021dac:	89fb      	ldrh	r3, [r7, #14]
}
 8021dae:	4618      	mov	r0, r3
 8021db0:	371c      	adds	r7, #28
 8021db2:	46bd      	mov	sp, r7
 8021db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021db8:	4770      	bx	lr
	...

08021dbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021dbc:	b580      	push	{r7, lr}
 8021dbe:	b084      	sub	sp, #16
 8021dc0:	af00      	add	r7, sp, #0
 8021dc2:	6078      	str	r0, [r7, #4]
 8021dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021dc6:	2300      	movs	r3, #0
 8021dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021dca:	683b      	ldr	r3, [r7, #0]
 8021dcc:	781b      	ldrb	r3, [r3, #0]
 8021dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021dd2:	2b40      	cmp	r3, #64	; 0x40
 8021dd4:	d005      	beq.n	8021de2 <USBD_StdDevReq+0x26>
 8021dd6:	2b40      	cmp	r3, #64	; 0x40
 8021dd8:	d857      	bhi.n	8021e8a <USBD_StdDevReq+0xce>
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d00f      	beq.n	8021dfe <USBD_StdDevReq+0x42>
 8021dde:	2b20      	cmp	r3, #32
 8021de0:	d153      	bne.n	8021e8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	32ae      	adds	r2, #174	; 0xae
 8021dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021df0:	689b      	ldr	r3, [r3, #8]
 8021df2:	6839      	ldr	r1, [r7, #0]
 8021df4:	6878      	ldr	r0, [r7, #4]
 8021df6:	4798      	blx	r3
 8021df8:	4603      	mov	r3, r0
 8021dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8021dfc:	e04a      	b.n	8021e94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021dfe:	683b      	ldr	r3, [r7, #0]
 8021e00:	785b      	ldrb	r3, [r3, #1]
 8021e02:	2b09      	cmp	r3, #9
 8021e04:	d83b      	bhi.n	8021e7e <USBD_StdDevReq+0xc2>
 8021e06:	a201      	add	r2, pc, #4	; (adr r2, 8021e0c <USBD_StdDevReq+0x50>)
 8021e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e0c:	08021e61 	.word	0x08021e61
 8021e10:	08021e75 	.word	0x08021e75
 8021e14:	08021e7f 	.word	0x08021e7f
 8021e18:	08021e6b 	.word	0x08021e6b
 8021e1c:	08021e7f 	.word	0x08021e7f
 8021e20:	08021e3f 	.word	0x08021e3f
 8021e24:	08021e35 	.word	0x08021e35
 8021e28:	08021e7f 	.word	0x08021e7f
 8021e2c:	08021e57 	.word	0x08021e57
 8021e30:	08021e49 	.word	0x08021e49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021e34:	6839      	ldr	r1, [r7, #0]
 8021e36:	6878      	ldr	r0, [r7, #4]
 8021e38:	f000 fa3c 	bl	80222b4 <USBD_GetDescriptor>
          break;
 8021e3c:	e024      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021e3e:	6839      	ldr	r1, [r7, #0]
 8021e40:	6878      	ldr	r0, [r7, #4]
 8021e42:	f000 fbcb 	bl	80225dc <USBD_SetAddress>
          break;
 8021e46:	e01f      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021e48:	6839      	ldr	r1, [r7, #0]
 8021e4a:	6878      	ldr	r0, [r7, #4]
 8021e4c:	f000 fc0a 	bl	8022664 <USBD_SetConfig>
 8021e50:	4603      	mov	r3, r0
 8021e52:	73fb      	strb	r3, [r7, #15]
          break;
 8021e54:	e018      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021e56:	6839      	ldr	r1, [r7, #0]
 8021e58:	6878      	ldr	r0, [r7, #4]
 8021e5a:	f000 fcad 	bl	80227b8 <USBD_GetConfig>
          break;
 8021e5e:	e013      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021e60:	6839      	ldr	r1, [r7, #0]
 8021e62:	6878      	ldr	r0, [r7, #4]
 8021e64:	f000 fcde 	bl	8022824 <USBD_GetStatus>
          break;
 8021e68:	e00e      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021e6a:	6839      	ldr	r1, [r7, #0]
 8021e6c:	6878      	ldr	r0, [r7, #4]
 8021e6e:	f000 fd0d 	bl	802288c <USBD_SetFeature>
          break;
 8021e72:	e009      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021e74:	6839      	ldr	r1, [r7, #0]
 8021e76:	6878      	ldr	r0, [r7, #4]
 8021e78:	f000 fd31 	bl	80228de <USBD_ClrFeature>
          break;
 8021e7c:	e004      	b.n	8021e88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8021e7e:	6839      	ldr	r1, [r7, #0]
 8021e80:	6878      	ldr	r0, [r7, #4]
 8021e82:	f000 fd88 	bl	8022996 <USBD_CtlError>
          break;
 8021e86:	bf00      	nop
      }
      break;
 8021e88:	e004      	b.n	8021e94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8021e8a:	6839      	ldr	r1, [r7, #0]
 8021e8c:	6878      	ldr	r0, [r7, #4]
 8021e8e:	f000 fd82 	bl	8022996 <USBD_CtlError>
      break;
 8021e92:	bf00      	nop
  }

  return ret;
 8021e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8021e96:	4618      	mov	r0, r3
 8021e98:	3710      	adds	r7, #16
 8021e9a:	46bd      	mov	sp, r7
 8021e9c:	bd80      	pop	{r7, pc}
 8021e9e:	bf00      	nop

08021ea0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ea0:	b580      	push	{r7, lr}
 8021ea2:	b084      	sub	sp, #16
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	6078      	str	r0, [r7, #4]
 8021ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021eaa:	2300      	movs	r3, #0
 8021eac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021eae:	683b      	ldr	r3, [r7, #0]
 8021eb0:	781b      	ldrb	r3, [r3, #0]
 8021eb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021eb6:	2b40      	cmp	r3, #64	; 0x40
 8021eb8:	d005      	beq.n	8021ec6 <USBD_StdItfReq+0x26>
 8021eba:	2b40      	cmp	r3, #64	; 0x40
 8021ebc:	d852      	bhi.n	8021f64 <USBD_StdItfReq+0xc4>
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d001      	beq.n	8021ec6 <USBD_StdItfReq+0x26>
 8021ec2:	2b20      	cmp	r3, #32
 8021ec4:	d14e      	bne.n	8021f64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ecc:	b2db      	uxtb	r3, r3
 8021ece:	3b01      	subs	r3, #1
 8021ed0:	2b02      	cmp	r3, #2
 8021ed2:	d840      	bhi.n	8021f56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021ed4:	683b      	ldr	r3, [r7, #0]
 8021ed6:	889b      	ldrh	r3, [r3, #4]
 8021ed8:	b2db      	uxtb	r3, r3
 8021eda:	2b01      	cmp	r3, #1
 8021edc:	d836      	bhi.n	8021f4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8021ede:	683b      	ldr	r3, [r7, #0]
 8021ee0:	889b      	ldrh	r3, [r3, #4]
 8021ee2:	b2db      	uxtb	r3, r3
 8021ee4:	4619      	mov	r1, r3
 8021ee6:	6878      	ldr	r0, [r7, #4]
 8021ee8:	f7ff fed8 	bl	8021c9c <USBD_CoreFindIF>
 8021eec:	4603      	mov	r3, r0
 8021eee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021ef0:	7bbb      	ldrb	r3, [r7, #14]
 8021ef2:	2bff      	cmp	r3, #255	; 0xff
 8021ef4:	d01d      	beq.n	8021f32 <USBD_StdItfReq+0x92>
 8021ef6:	7bbb      	ldrb	r3, [r7, #14]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d11a      	bne.n	8021f32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8021efc:	7bba      	ldrb	r2, [r7, #14]
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	32ae      	adds	r2, #174	; 0xae
 8021f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021f06:	689b      	ldr	r3, [r3, #8]
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d00f      	beq.n	8021f2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8021f0c:	7bba      	ldrb	r2, [r7, #14]
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8021f14:	7bba      	ldrb	r2, [r7, #14]
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	32ae      	adds	r2, #174	; 0xae
 8021f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021f1e:	689b      	ldr	r3, [r3, #8]
 8021f20:	6839      	ldr	r1, [r7, #0]
 8021f22:	6878      	ldr	r0, [r7, #4]
 8021f24:	4798      	blx	r3
 8021f26:	4603      	mov	r3, r0
 8021f28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8021f2a:	e004      	b.n	8021f36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8021f2c:	2303      	movs	r3, #3
 8021f2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8021f30:	e001      	b.n	8021f36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8021f32:	2303      	movs	r3, #3
 8021f34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021f36:	683b      	ldr	r3, [r7, #0]
 8021f38:	88db      	ldrh	r3, [r3, #6]
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d110      	bne.n	8021f60 <USBD_StdItfReq+0xc0>
 8021f3e:	7bfb      	ldrb	r3, [r7, #15]
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d10d      	bne.n	8021f60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8021f44:	6878      	ldr	r0, [r7, #4]
 8021f46:	f000 fdd4 	bl	8022af2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021f4a:	e009      	b.n	8021f60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8021f4c:	6839      	ldr	r1, [r7, #0]
 8021f4e:	6878      	ldr	r0, [r7, #4]
 8021f50:	f000 fd21 	bl	8022996 <USBD_CtlError>
          break;
 8021f54:	e004      	b.n	8021f60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8021f56:	6839      	ldr	r1, [r7, #0]
 8021f58:	6878      	ldr	r0, [r7, #4]
 8021f5a:	f000 fd1c 	bl	8022996 <USBD_CtlError>
          break;
 8021f5e:	e000      	b.n	8021f62 <USBD_StdItfReq+0xc2>
          break;
 8021f60:	bf00      	nop
      }
      break;
 8021f62:	e004      	b.n	8021f6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8021f64:	6839      	ldr	r1, [r7, #0]
 8021f66:	6878      	ldr	r0, [r7, #4]
 8021f68:	f000 fd15 	bl	8022996 <USBD_CtlError>
      break;
 8021f6c:	bf00      	nop
  }

  return ret;
 8021f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	3710      	adds	r7, #16
 8021f74:	46bd      	mov	sp, r7
 8021f76:	bd80      	pop	{r7, pc}

08021f78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	b084      	sub	sp, #16
 8021f7c:	af00      	add	r7, sp, #0
 8021f7e:	6078      	str	r0, [r7, #4]
 8021f80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8021f82:	2300      	movs	r3, #0
 8021f84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8021f86:	683b      	ldr	r3, [r7, #0]
 8021f88:	889b      	ldrh	r3, [r3, #4]
 8021f8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021f8c:	683b      	ldr	r3, [r7, #0]
 8021f8e:	781b      	ldrb	r3, [r3, #0]
 8021f90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021f94:	2b40      	cmp	r3, #64	; 0x40
 8021f96:	d007      	beq.n	8021fa8 <USBD_StdEPReq+0x30>
 8021f98:	2b40      	cmp	r3, #64	; 0x40
 8021f9a:	f200 817f 	bhi.w	802229c <USBD_StdEPReq+0x324>
 8021f9e:	2b00      	cmp	r3, #0
 8021fa0:	d02a      	beq.n	8021ff8 <USBD_StdEPReq+0x80>
 8021fa2:	2b20      	cmp	r3, #32
 8021fa4:	f040 817a 	bne.w	802229c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8021fa8:	7bbb      	ldrb	r3, [r7, #14]
 8021faa:	4619      	mov	r1, r3
 8021fac:	6878      	ldr	r0, [r7, #4]
 8021fae:	f7ff fe82 	bl	8021cb6 <USBD_CoreFindEP>
 8021fb2:	4603      	mov	r3, r0
 8021fb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021fb6:	7b7b      	ldrb	r3, [r7, #13]
 8021fb8:	2bff      	cmp	r3, #255	; 0xff
 8021fba:	f000 8174 	beq.w	80222a6 <USBD_StdEPReq+0x32e>
 8021fbe:	7b7b      	ldrb	r3, [r7, #13]
 8021fc0:	2b00      	cmp	r3, #0
 8021fc2:	f040 8170 	bne.w	80222a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8021fc6:	7b7a      	ldrb	r2, [r7, #13]
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8021fce:	7b7a      	ldrb	r2, [r7, #13]
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	32ae      	adds	r2, #174	; 0xae
 8021fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021fd8:	689b      	ldr	r3, [r3, #8]
 8021fda:	2b00      	cmp	r3, #0
 8021fdc:	f000 8163 	beq.w	80222a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8021fe0:	7b7a      	ldrb	r2, [r7, #13]
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	32ae      	adds	r2, #174	; 0xae
 8021fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021fea:	689b      	ldr	r3, [r3, #8]
 8021fec:	6839      	ldr	r1, [r7, #0]
 8021fee:	6878      	ldr	r0, [r7, #4]
 8021ff0:	4798      	blx	r3
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8021ff6:	e156      	b.n	80222a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021ff8:	683b      	ldr	r3, [r7, #0]
 8021ffa:	785b      	ldrb	r3, [r3, #1]
 8021ffc:	2b03      	cmp	r3, #3
 8021ffe:	d008      	beq.n	8022012 <USBD_StdEPReq+0x9a>
 8022000:	2b03      	cmp	r3, #3
 8022002:	f300 8145 	bgt.w	8022290 <USBD_StdEPReq+0x318>
 8022006:	2b00      	cmp	r3, #0
 8022008:	f000 809b 	beq.w	8022142 <USBD_StdEPReq+0x1ca>
 802200c:	2b01      	cmp	r3, #1
 802200e:	d03c      	beq.n	802208a <USBD_StdEPReq+0x112>
 8022010:	e13e      	b.n	8022290 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022018:	b2db      	uxtb	r3, r3
 802201a:	2b02      	cmp	r3, #2
 802201c:	d002      	beq.n	8022024 <USBD_StdEPReq+0xac>
 802201e:	2b03      	cmp	r3, #3
 8022020:	d016      	beq.n	8022050 <USBD_StdEPReq+0xd8>
 8022022:	e02c      	b.n	802207e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022024:	7bbb      	ldrb	r3, [r7, #14]
 8022026:	2b00      	cmp	r3, #0
 8022028:	d00d      	beq.n	8022046 <USBD_StdEPReq+0xce>
 802202a:	7bbb      	ldrb	r3, [r7, #14]
 802202c:	2b80      	cmp	r3, #128	; 0x80
 802202e:	d00a      	beq.n	8022046 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8022030:	7bbb      	ldrb	r3, [r7, #14]
 8022032:	4619      	mov	r1, r3
 8022034:	6878      	ldr	r0, [r7, #4]
 8022036:	f004 f860 	bl	80260fa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802203a:	2180      	movs	r1, #128	; 0x80
 802203c:	6878      	ldr	r0, [r7, #4]
 802203e:	f004 f85c 	bl	80260fa <USBD_LL_StallEP>
 8022042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022044:	e020      	b.n	8022088 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8022046:	6839      	ldr	r1, [r7, #0]
 8022048:	6878      	ldr	r0, [r7, #4]
 802204a:	f000 fca4 	bl	8022996 <USBD_CtlError>
              break;
 802204e:	e01b      	b.n	8022088 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022050:	683b      	ldr	r3, [r7, #0]
 8022052:	885b      	ldrh	r3, [r3, #2]
 8022054:	2b00      	cmp	r3, #0
 8022056:	d10e      	bne.n	8022076 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8022058:	7bbb      	ldrb	r3, [r7, #14]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d00b      	beq.n	8022076 <USBD_StdEPReq+0xfe>
 802205e:	7bbb      	ldrb	r3, [r7, #14]
 8022060:	2b80      	cmp	r3, #128	; 0x80
 8022062:	d008      	beq.n	8022076 <USBD_StdEPReq+0xfe>
 8022064:	683b      	ldr	r3, [r7, #0]
 8022066:	88db      	ldrh	r3, [r3, #6]
 8022068:	2b00      	cmp	r3, #0
 802206a:	d104      	bne.n	8022076 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802206c:	7bbb      	ldrb	r3, [r7, #14]
 802206e:	4619      	mov	r1, r3
 8022070:	6878      	ldr	r0, [r7, #4]
 8022072:	f004 f842 	bl	80260fa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8022076:	6878      	ldr	r0, [r7, #4]
 8022078:	f000 fd3b 	bl	8022af2 <USBD_CtlSendStatus>

              break;
 802207c:	e004      	b.n	8022088 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802207e:	6839      	ldr	r1, [r7, #0]
 8022080:	6878      	ldr	r0, [r7, #4]
 8022082:	f000 fc88 	bl	8022996 <USBD_CtlError>
              break;
 8022086:	bf00      	nop
          }
          break;
 8022088:	e107      	b.n	802229a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022090:	b2db      	uxtb	r3, r3
 8022092:	2b02      	cmp	r3, #2
 8022094:	d002      	beq.n	802209c <USBD_StdEPReq+0x124>
 8022096:	2b03      	cmp	r3, #3
 8022098:	d016      	beq.n	80220c8 <USBD_StdEPReq+0x150>
 802209a:	e04b      	b.n	8022134 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802209c:	7bbb      	ldrb	r3, [r7, #14]
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d00d      	beq.n	80220be <USBD_StdEPReq+0x146>
 80220a2:	7bbb      	ldrb	r3, [r7, #14]
 80220a4:	2b80      	cmp	r3, #128	; 0x80
 80220a6:	d00a      	beq.n	80220be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80220a8:	7bbb      	ldrb	r3, [r7, #14]
 80220aa:	4619      	mov	r1, r3
 80220ac:	6878      	ldr	r0, [r7, #4]
 80220ae:	f004 f824 	bl	80260fa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80220b2:	2180      	movs	r1, #128	; 0x80
 80220b4:	6878      	ldr	r0, [r7, #4]
 80220b6:	f004 f820 	bl	80260fa <USBD_LL_StallEP>
 80220ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80220bc:	e040      	b.n	8022140 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80220be:	6839      	ldr	r1, [r7, #0]
 80220c0:	6878      	ldr	r0, [r7, #4]
 80220c2:	f000 fc68 	bl	8022996 <USBD_CtlError>
              break;
 80220c6:	e03b      	b.n	8022140 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80220c8:	683b      	ldr	r3, [r7, #0]
 80220ca:	885b      	ldrh	r3, [r3, #2]
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d136      	bne.n	802213e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80220d0:	7bbb      	ldrb	r3, [r7, #14]
 80220d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d004      	beq.n	80220e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80220da:	7bbb      	ldrb	r3, [r7, #14]
 80220dc:	4619      	mov	r1, r3
 80220de:	6878      	ldr	r0, [r7, #4]
 80220e0:	f004 f82a 	bl	8026138 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80220e4:	6878      	ldr	r0, [r7, #4]
 80220e6:	f000 fd04 	bl	8022af2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80220ea:	7bbb      	ldrb	r3, [r7, #14]
 80220ec:	4619      	mov	r1, r3
 80220ee:	6878      	ldr	r0, [r7, #4]
 80220f0:	f7ff fde1 	bl	8021cb6 <USBD_CoreFindEP>
 80220f4:	4603      	mov	r3, r0
 80220f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80220f8:	7b7b      	ldrb	r3, [r7, #13]
 80220fa:	2bff      	cmp	r3, #255	; 0xff
 80220fc:	d01f      	beq.n	802213e <USBD_StdEPReq+0x1c6>
 80220fe:	7b7b      	ldrb	r3, [r7, #13]
 8022100:	2b00      	cmp	r3, #0
 8022102:	d11c      	bne.n	802213e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8022104:	7b7a      	ldrb	r2, [r7, #13]
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802210c:	7b7a      	ldrb	r2, [r7, #13]
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	32ae      	adds	r2, #174	; 0xae
 8022112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022116:	689b      	ldr	r3, [r3, #8]
 8022118:	2b00      	cmp	r3, #0
 802211a:	d010      	beq.n	802213e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802211c:	7b7a      	ldrb	r2, [r7, #13]
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	32ae      	adds	r2, #174	; 0xae
 8022122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022126:	689b      	ldr	r3, [r3, #8]
 8022128:	6839      	ldr	r1, [r7, #0]
 802212a:	6878      	ldr	r0, [r7, #4]
 802212c:	4798      	blx	r3
 802212e:	4603      	mov	r3, r0
 8022130:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8022132:	e004      	b.n	802213e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8022134:	6839      	ldr	r1, [r7, #0]
 8022136:	6878      	ldr	r0, [r7, #4]
 8022138:	f000 fc2d 	bl	8022996 <USBD_CtlError>
              break;
 802213c:	e000      	b.n	8022140 <USBD_StdEPReq+0x1c8>
              break;
 802213e:	bf00      	nop
          }
          break;
 8022140:	e0ab      	b.n	802229a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022148:	b2db      	uxtb	r3, r3
 802214a:	2b02      	cmp	r3, #2
 802214c:	d002      	beq.n	8022154 <USBD_StdEPReq+0x1dc>
 802214e:	2b03      	cmp	r3, #3
 8022150:	d032      	beq.n	80221b8 <USBD_StdEPReq+0x240>
 8022152:	e097      	b.n	8022284 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022154:	7bbb      	ldrb	r3, [r7, #14]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d007      	beq.n	802216a <USBD_StdEPReq+0x1f2>
 802215a:	7bbb      	ldrb	r3, [r7, #14]
 802215c:	2b80      	cmp	r3, #128	; 0x80
 802215e:	d004      	beq.n	802216a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8022160:	6839      	ldr	r1, [r7, #0]
 8022162:	6878      	ldr	r0, [r7, #4]
 8022164:	f000 fc17 	bl	8022996 <USBD_CtlError>
                break;
 8022168:	e091      	b.n	802228e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802216a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802216e:	2b00      	cmp	r3, #0
 8022170:	da0b      	bge.n	802218a <USBD_StdEPReq+0x212>
 8022172:	7bbb      	ldrb	r3, [r7, #14]
 8022174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022178:	4613      	mov	r3, r2
 802217a:	009b      	lsls	r3, r3, #2
 802217c:	4413      	add	r3, r2
 802217e:	009b      	lsls	r3, r3, #2
 8022180:	3310      	adds	r3, #16
 8022182:	687a      	ldr	r2, [r7, #4]
 8022184:	4413      	add	r3, r2
 8022186:	3304      	adds	r3, #4
 8022188:	e00b      	b.n	80221a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802218a:	7bbb      	ldrb	r3, [r7, #14]
 802218c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022190:	4613      	mov	r3, r2
 8022192:	009b      	lsls	r3, r3, #2
 8022194:	4413      	add	r3, r2
 8022196:	009b      	lsls	r3, r3, #2
 8022198:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802219c:	687a      	ldr	r2, [r7, #4]
 802219e:	4413      	add	r3, r2
 80221a0:	3304      	adds	r3, #4
 80221a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80221a4:	68bb      	ldr	r3, [r7, #8]
 80221a6:	2200      	movs	r2, #0
 80221a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80221aa:	68bb      	ldr	r3, [r7, #8]
 80221ac:	2202      	movs	r2, #2
 80221ae:	4619      	mov	r1, r3
 80221b0:	6878      	ldr	r0, [r7, #4]
 80221b2:	f000 fc61 	bl	8022a78 <USBD_CtlSendData>
              break;
 80221b6:	e06a      	b.n	802228e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80221b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	da11      	bge.n	80221e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80221c0:	7bbb      	ldrb	r3, [r7, #14]
 80221c2:	f003 020f 	and.w	r2, r3, #15
 80221c6:	6879      	ldr	r1, [r7, #4]
 80221c8:	4613      	mov	r3, r2
 80221ca:	009b      	lsls	r3, r3, #2
 80221cc:	4413      	add	r3, r2
 80221ce:	009b      	lsls	r3, r3, #2
 80221d0:	440b      	add	r3, r1
 80221d2:	3324      	adds	r3, #36	; 0x24
 80221d4:	881b      	ldrh	r3, [r3, #0]
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d117      	bne.n	802220a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80221da:	6839      	ldr	r1, [r7, #0]
 80221dc:	6878      	ldr	r0, [r7, #4]
 80221de:	f000 fbda 	bl	8022996 <USBD_CtlError>
                  break;
 80221e2:	e054      	b.n	802228e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80221e4:	7bbb      	ldrb	r3, [r7, #14]
 80221e6:	f003 020f 	and.w	r2, r3, #15
 80221ea:	6879      	ldr	r1, [r7, #4]
 80221ec:	4613      	mov	r3, r2
 80221ee:	009b      	lsls	r3, r3, #2
 80221f0:	4413      	add	r3, r2
 80221f2:	009b      	lsls	r3, r3, #2
 80221f4:	440b      	add	r3, r1
 80221f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80221fa:	881b      	ldrh	r3, [r3, #0]
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d104      	bne.n	802220a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8022200:	6839      	ldr	r1, [r7, #0]
 8022202:	6878      	ldr	r0, [r7, #4]
 8022204:	f000 fbc7 	bl	8022996 <USBD_CtlError>
                  break;
 8022208:	e041      	b.n	802228e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802220a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802220e:	2b00      	cmp	r3, #0
 8022210:	da0b      	bge.n	802222a <USBD_StdEPReq+0x2b2>
 8022212:	7bbb      	ldrb	r3, [r7, #14]
 8022214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022218:	4613      	mov	r3, r2
 802221a:	009b      	lsls	r3, r3, #2
 802221c:	4413      	add	r3, r2
 802221e:	009b      	lsls	r3, r3, #2
 8022220:	3310      	adds	r3, #16
 8022222:	687a      	ldr	r2, [r7, #4]
 8022224:	4413      	add	r3, r2
 8022226:	3304      	adds	r3, #4
 8022228:	e00b      	b.n	8022242 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802222a:	7bbb      	ldrb	r3, [r7, #14]
 802222c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022230:	4613      	mov	r3, r2
 8022232:	009b      	lsls	r3, r3, #2
 8022234:	4413      	add	r3, r2
 8022236:	009b      	lsls	r3, r3, #2
 8022238:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802223c:	687a      	ldr	r2, [r7, #4]
 802223e:	4413      	add	r3, r2
 8022240:	3304      	adds	r3, #4
 8022242:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022244:	7bbb      	ldrb	r3, [r7, #14]
 8022246:	2b00      	cmp	r3, #0
 8022248:	d002      	beq.n	8022250 <USBD_StdEPReq+0x2d8>
 802224a:	7bbb      	ldrb	r3, [r7, #14]
 802224c:	2b80      	cmp	r3, #128	; 0x80
 802224e:	d103      	bne.n	8022258 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8022250:	68bb      	ldr	r3, [r7, #8]
 8022252:	2200      	movs	r2, #0
 8022254:	601a      	str	r2, [r3, #0]
 8022256:	e00e      	b.n	8022276 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8022258:	7bbb      	ldrb	r3, [r7, #14]
 802225a:	4619      	mov	r1, r3
 802225c:	6878      	ldr	r0, [r7, #4]
 802225e:	f003 ff8a 	bl	8026176 <USBD_LL_IsStallEP>
 8022262:	4603      	mov	r3, r0
 8022264:	2b00      	cmp	r3, #0
 8022266:	d003      	beq.n	8022270 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8022268:	68bb      	ldr	r3, [r7, #8]
 802226a:	2201      	movs	r2, #1
 802226c:	601a      	str	r2, [r3, #0]
 802226e:	e002      	b.n	8022276 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8022270:	68bb      	ldr	r3, [r7, #8]
 8022272:	2200      	movs	r2, #0
 8022274:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8022276:	68bb      	ldr	r3, [r7, #8]
 8022278:	2202      	movs	r2, #2
 802227a:	4619      	mov	r1, r3
 802227c:	6878      	ldr	r0, [r7, #4]
 802227e:	f000 fbfb 	bl	8022a78 <USBD_CtlSendData>
              break;
 8022282:	e004      	b.n	802228e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8022284:	6839      	ldr	r1, [r7, #0]
 8022286:	6878      	ldr	r0, [r7, #4]
 8022288:	f000 fb85 	bl	8022996 <USBD_CtlError>
              break;
 802228c:	bf00      	nop
          }
          break;
 802228e:	e004      	b.n	802229a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8022290:	6839      	ldr	r1, [r7, #0]
 8022292:	6878      	ldr	r0, [r7, #4]
 8022294:	f000 fb7f 	bl	8022996 <USBD_CtlError>
          break;
 8022298:	bf00      	nop
      }
      break;
 802229a:	e005      	b.n	80222a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802229c:	6839      	ldr	r1, [r7, #0]
 802229e:	6878      	ldr	r0, [r7, #4]
 80222a0:	f000 fb79 	bl	8022996 <USBD_CtlError>
      break;
 80222a4:	e000      	b.n	80222a8 <USBD_StdEPReq+0x330>
      break;
 80222a6:	bf00      	nop
  }

  return ret;
 80222a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80222aa:	4618      	mov	r0, r3
 80222ac:	3710      	adds	r7, #16
 80222ae:	46bd      	mov	sp, r7
 80222b0:	bd80      	pop	{r7, pc}
	...

080222b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80222b4:	b580      	push	{r7, lr}
 80222b6:	b084      	sub	sp, #16
 80222b8:	af00      	add	r7, sp, #0
 80222ba:	6078      	str	r0, [r7, #4]
 80222bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80222be:	2300      	movs	r3, #0
 80222c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80222c2:	2300      	movs	r3, #0
 80222c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80222c6:	2300      	movs	r3, #0
 80222c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80222ca:	683b      	ldr	r3, [r7, #0]
 80222cc:	885b      	ldrh	r3, [r3, #2]
 80222ce:	0a1b      	lsrs	r3, r3, #8
 80222d0:	b29b      	uxth	r3, r3
 80222d2:	3b01      	subs	r3, #1
 80222d4:	2b0e      	cmp	r3, #14
 80222d6:	f200 8152 	bhi.w	802257e <USBD_GetDescriptor+0x2ca>
 80222da:	a201      	add	r2, pc, #4	; (adr r2, 80222e0 <USBD_GetDescriptor+0x2c>)
 80222dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80222e0:	08022351 	.word	0x08022351
 80222e4:	08022369 	.word	0x08022369
 80222e8:	080223a9 	.word	0x080223a9
 80222ec:	0802257f 	.word	0x0802257f
 80222f0:	0802257f 	.word	0x0802257f
 80222f4:	0802251f 	.word	0x0802251f
 80222f8:	0802254b 	.word	0x0802254b
 80222fc:	0802257f 	.word	0x0802257f
 8022300:	0802257f 	.word	0x0802257f
 8022304:	0802257f 	.word	0x0802257f
 8022308:	0802257f 	.word	0x0802257f
 802230c:	0802257f 	.word	0x0802257f
 8022310:	0802257f 	.word	0x0802257f
 8022314:	0802257f 	.word	0x0802257f
 8022318:	0802231d 	.word	0x0802231d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022322:	69db      	ldr	r3, [r3, #28]
 8022324:	2b00      	cmp	r3, #0
 8022326:	d00b      	beq.n	8022340 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802232e:	69db      	ldr	r3, [r3, #28]
 8022330:	687a      	ldr	r2, [r7, #4]
 8022332:	7c12      	ldrb	r2, [r2, #16]
 8022334:	f107 0108 	add.w	r1, r7, #8
 8022338:	4610      	mov	r0, r2
 802233a:	4798      	blx	r3
 802233c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802233e:	e126      	b.n	802258e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8022340:	6839      	ldr	r1, [r7, #0]
 8022342:	6878      	ldr	r0, [r7, #4]
 8022344:	f000 fb27 	bl	8022996 <USBD_CtlError>
        err++;
 8022348:	7afb      	ldrb	r3, [r7, #11]
 802234a:	3301      	adds	r3, #1
 802234c:	72fb      	strb	r3, [r7, #11]
      break;
 802234e:	e11e      	b.n	802258e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	687a      	ldr	r2, [r7, #4]
 802235a:	7c12      	ldrb	r2, [r2, #16]
 802235c:	f107 0108 	add.w	r1, r7, #8
 8022360:	4610      	mov	r0, r2
 8022362:	4798      	blx	r3
 8022364:	60f8      	str	r0, [r7, #12]
      break;
 8022366:	e112      	b.n	802258e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	7c1b      	ldrb	r3, [r3, #16]
 802236c:	2b00      	cmp	r3, #0
 802236e:	d10d      	bne.n	802238c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022378:	f107 0208 	add.w	r2, r7, #8
 802237c:	4610      	mov	r0, r2
 802237e:	4798      	blx	r3
 8022380:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022382:	68fb      	ldr	r3, [r7, #12]
 8022384:	3301      	adds	r3, #1
 8022386:	2202      	movs	r2, #2
 8022388:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802238a:	e100      	b.n	802258e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022394:	f107 0208 	add.w	r2, r7, #8
 8022398:	4610      	mov	r0, r2
 802239a:	4798      	blx	r3
 802239c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802239e:	68fb      	ldr	r3, [r7, #12]
 80223a0:	3301      	adds	r3, #1
 80223a2:	2202      	movs	r2, #2
 80223a4:	701a      	strb	r2, [r3, #0]
      break;
 80223a6:	e0f2      	b.n	802258e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80223a8:	683b      	ldr	r3, [r7, #0]
 80223aa:	885b      	ldrh	r3, [r3, #2]
 80223ac:	b2db      	uxtb	r3, r3
 80223ae:	2b05      	cmp	r3, #5
 80223b0:	f200 80ac 	bhi.w	802250c <USBD_GetDescriptor+0x258>
 80223b4:	a201      	add	r2, pc, #4	; (adr r2, 80223bc <USBD_GetDescriptor+0x108>)
 80223b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80223ba:	bf00      	nop
 80223bc:	080223d5 	.word	0x080223d5
 80223c0:	08022409 	.word	0x08022409
 80223c4:	0802243d 	.word	0x0802243d
 80223c8:	08022471 	.word	0x08022471
 80223cc:	080224a5 	.word	0x080224a5
 80223d0:	080224d9 	.word	0x080224d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80223da:	685b      	ldr	r3, [r3, #4]
 80223dc:	2b00      	cmp	r3, #0
 80223de:	d00b      	beq.n	80223f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80223e0:	687b      	ldr	r3, [r7, #4]
 80223e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80223e6:	685b      	ldr	r3, [r3, #4]
 80223e8:	687a      	ldr	r2, [r7, #4]
 80223ea:	7c12      	ldrb	r2, [r2, #16]
 80223ec:	f107 0108 	add.w	r1, r7, #8
 80223f0:	4610      	mov	r0, r2
 80223f2:	4798      	blx	r3
 80223f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80223f6:	e091      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80223f8:	6839      	ldr	r1, [r7, #0]
 80223fa:	6878      	ldr	r0, [r7, #4]
 80223fc:	f000 facb 	bl	8022996 <USBD_CtlError>
            err++;
 8022400:	7afb      	ldrb	r3, [r7, #11]
 8022402:	3301      	adds	r3, #1
 8022404:	72fb      	strb	r3, [r7, #11]
          break;
 8022406:	e089      	b.n	802251c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802240e:	689b      	ldr	r3, [r3, #8]
 8022410:	2b00      	cmp	r3, #0
 8022412:	d00b      	beq.n	802242c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802241a:	689b      	ldr	r3, [r3, #8]
 802241c:	687a      	ldr	r2, [r7, #4]
 802241e:	7c12      	ldrb	r2, [r2, #16]
 8022420:	f107 0108 	add.w	r1, r7, #8
 8022424:	4610      	mov	r0, r2
 8022426:	4798      	blx	r3
 8022428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802242a:	e077      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802242c:	6839      	ldr	r1, [r7, #0]
 802242e:	6878      	ldr	r0, [r7, #4]
 8022430:	f000 fab1 	bl	8022996 <USBD_CtlError>
            err++;
 8022434:	7afb      	ldrb	r3, [r7, #11]
 8022436:	3301      	adds	r3, #1
 8022438:	72fb      	strb	r3, [r7, #11]
          break;
 802243a:	e06f      	b.n	802251c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022442:	68db      	ldr	r3, [r3, #12]
 8022444:	2b00      	cmp	r3, #0
 8022446:	d00b      	beq.n	8022460 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802244e:	68db      	ldr	r3, [r3, #12]
 8022450:	687a      	ldr	r2, [r7, #4]
 8022452:	7c12      	ldrb	r2, [r2, #16]
 8022454:	f107 0108 	add.w	r1, r7, #8
 8022458:	4610      	mov	r0, r2
 802245a:	4798      	blx	r3
 802245c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802245e:	e05d      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8022460:	6839      	ldr	r1, [r7, #0]
 8022462:	6878      	ldr	r0, [r7, #4]
 8022464:	f000 fa97 	bl	8022996 <USBD_CtlError>
            err++;
 8022468:	7afb      	ldrb	r3, [r7, #11]
 802246a:	3301      	adds	r3, #1
 802246c:	72fb      	strb	r3, [r7, #11]
          break;
 802246e:	e055      	b.n	802251c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022476:	691b      	ldr	r3, [r3, #16]
 8022478:	2b00      	cmp	r3, #0
 802247a:	d00b      	beq.n	8022494 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8022482:	691b      	ldr	r3, [r3, #16]
 8022484:	687a      	ldr	r2, [r7, #4]
 8022486:	7c12      	ldrb	r2, [r2, #16]
 8022488:	f107 0108 	add.w	r1, r7, #8
 802248c:	4610      	mov	r0, r2
 802248e:	4798      	blx	r3
 8022490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022492:	e043      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8022494:	6839      	ldr	r1, [r7, #0]
 8022496:	6878      	ldr	r0, [r7, #4]
 8022498:	f000 fa7d 	bl	8022996 <USBD_CtlError>
            err++;
 802249c:	7afb      	ldrb	r3, [r7, #11]
 802249e:	3301      	adds	r3, #1
 80224a0:	72fb      	strb	r3, [r7, #11]
          break;
 80224a2:	e03b      	b.n	802251c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80224aa:	695b      	ldr	r3, [r3, #20]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d00b      	beq.n	80224c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80224b6:	695b      	ldr	r3, [r3, #20]
 80224b8:	687a      	ldr	r2, [r7, #4]
 80224ba:	7c12      	ldrb	r2, [r2, #16]
 80224bc:	f107 0108 	add.w	r1, r7, #8
 80224c0:	4610      	mov	r0, r2
 80224c2:	4798      	blx	r3
 80224c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80224c6:	e029      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80224c8:	6839      	ldr	r1, [r7, #0]
 80224ca:	6878      	ldr	r0, [r7, #4]
 80224cc:	f000 fa63 	bl	8022996 <USBD_CtlError>
            err++;
 80224d0:	7afb      	ldrb	r3, [r7, #11]
 80224d2:	3301      	adds	r3, #1
 80224d4:	72fb      	strb	r3, [r7, #11]
          break;
 80224d6:	e021      	b.n	802251c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80224de:	699b      	ldr	r3, [r3, #24]
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d00b      	beq.n	80224fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80224ea:	699b      	ldr	r3, [r3, #24]
 80224ec:	687a      	ldr	r2, [r7, #4]
 80224ee:	7c12      	ldrb	r2, [r2, #16]
 80224f0:	f107 0108 	add.w	r1, r7, #8
 80224f4:	4610      	mov	r0, r2
 80224f6:	4798      	blx	r3
 80224f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80224fa:	e00f      	b.n	802251c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80224fc:	6839      	ldr	r1, [r7, #0]
 80224fe:	6878      	ldr	r0, [r7, #4]
 8022500:	f000 fa49 	bl	8022996 <USBD_CtlError>
            err++;
 8022504:	7afb      	ldrb	r3, [r7, #11]
 8022506:	3301      	adds	r3, #1
 8022508:	72fb      	strb	r3, [r7, #11]
          break;
 802250a:	e007      	b.n	802251c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802250c:	6839      	ldr	r1, [r7, #0]
 802250e:	6878      	ldr	r0, [r7, #4]
 8022510:	f000 fa41 	bl	8022996 <USBD_CtlError>
          err++;
 8022514:	7afb      	ldrb	r3, [r7, #11]
 8022516:	3301      	adds	r3, #1
 8022518:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802251a:	bf00      	nop
      }
      break;
 802251c:	e037      	b.n	802258e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	7c1b      	ldrb	r3, [r3, #16]
 8022522:	2b00      	cmp	r3, #0
 8022524:	d109      	bne.n	802253a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802252e:	f107 0208 	add.w	r2, r7, #8
 8022532:	4610      	mov	r0, r2
 8022534:	4798      	blx	r3
 8022536:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8022538:	e029      	b.n	802258e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802253a:	6839      	ldr	r1, [r7, #0]
 802253c:	6878      	ldr	r0, [r7, #4]
 802253e:	f000 fa2a 	bl	8022996 <USBD_CtlError>
        err++;
 8022542:	7afb      	ldrb	r3, [r7, #11]
 8022544:	3301      	adds	r3, #1
 8022546:	72fb      	strb	r3, [r7, #11]
      break;
 8022548:	e021      	b.n	802258e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	7c1b      	ldrb	r3, [r3, #16]
 802254e:	2b00      	cmp	r3, #0
 8022550:	d10d      	bne.n	802256e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8022558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802255a:	f107 0208 	add.w	r2, r7, #8
 802255e:	4610      	mov	r0, r2
 8022560:	4798      	blx	r3
 8022562:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8022564:	68fb      	ldr	r3, [r7, #12]
 8022566:	3301      	adds	r3, #1
 8022568:	2207      	movs	r2, #7
 802256a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802256c:	e00f      	b.n	802258e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802256e:	6839      	ldr	r1, [r7, #0]
 8022570:	6878      	ldr	r0, [r7, #4]
 8022572:	f000 fa10 	bl	8022996 <USBD_CtlError>
        err++;
 8022576:	7afb      	ldrb	r3, [r7, #11]
 8022578:	3301      	adds	r3, #1
 802257a:	72fb      	strb	r3, [r7, #11]
      break;
 802257c:	e007      	b.n	802258e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 802257e:	6839      	ldr	r1, [r7, #0]
 8022580:	6878      	ldr	r0, [r7, #4]
 8022582:	f000 fa08 	bl	8022996 <USBD_CtlError>
      err++;
 8022586:	7afb      	ldrb	r3, [r7, #11]
 8022588:	3301      	adds	r3, #1
 802258a:	72fb      	strb	r3, [r7, #11]
      break;
 802258c:	bf00      	nop
  }

  if (err != 0U)
 802258e:	7afb      	ldrb	r3, [r7, #11]
 8022590:	2b00      	cmp	r3, #0
 8022592:	d11e      	bne.n	80225d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8022594:	683b      	ldr	r3, [r7, #0]
 8022596:	88db      	ldrh	r3, [r3, #6]
 8022598:	2b00      	cmp	r3, #0
 802259a:	d016      	beq.n	80225ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 802259c:	893b      	ldrh	r3, [r7, #8]
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d00e      	beq.n	80225c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80225a2:	683b      	ldr	r3, [r7, #0]
 80225a4:	88da      	ldrh	r2, [r3, #6]
 80225a6:	893b      	ldrh	r3, [r7, #8]
 80225a8:	4293      	cmp	r3, r2
 80225aa:	bf28      	it	cs
 80225ac:	4613      	movcs	r3, r2
 80225ae:	b29b      	uxth	r3, r3
 80225b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80225b2:	893b      	ldrh	r3, [r7, #8]
 80225b4:	461a      	mov	r2, r3
 80225b6:	68f9      	ldr	r1, [r7, #12]
 80225b8:	6878      	ldr	r0, [r7, #4]
 80225ba:	f000 fa5d 	bl	8022a78 <USBD_CtlSendData>
 80225be:	e009      	b.n	80225d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80225c0:	6839      	ldr	r1, [r7, #0]
 80225c2:	6878      	ldr	r0, [r7, #4]
 80225c4:	f000 f9e7 	bl	8022996 <USBD_CtlError>
 80225c8:	e004      	b.n	80225d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80225ca:	6878      	ldr	r0, [r7, #4]
 80225cc:	f000 fa91 	bl	8022af2 <USBD_CtlSendStatus>
 80225d0:	e000      	b.n	80225d4 <USBD_GetDescriptor+0x320>
    return;
 80225d2:	bf00      	nop
  }
}
 80225d4:	3710      	adds	r7, #16
 80225d6:	46bd      	mov	sp, r7
 80225d8:	bd80      	pop	{r7, pc}
 80225da:	bf00      	nop

080225dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80225dc:	b580      	push	{r7, lr}
 80225de:	b084      	sub	sp, #16
 80225e0:	af00      	add	r7, sp, #0
 80225e2:	6078      	str	r0, [r7, #4]
 80225e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80225e6:	683b      	ldr	r3, [r7, #0]
 80225e8:	889b      	ldrh	r3, [r3, #4]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	d131      	bne.n	8022652 <USBD_SetAddress+0x76>
 80225ee:	683b      	ldr	r3, [r7, #0]
 80225f0:	88db      	ldrh	r3, [r3, #6]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d12d      	bne.n	8022652 <USBD_SetAddress+0x76>
 80225f6:	683b      	ldr	r3, [r7, #0]
 80225f8:	885b      	ldrh	r3, [r3, #2]
 80225fa:	2b7f      	cmp	r3, #127	; 0x7f
 80225fc:	d829      	bhi.n	8022652 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80225fe:	683b      	ldr	r3, [r7, #0]
 8022600:	885b      	ldrh	r3, [r3, #2]
 8022602:	b2db      	uxtb	r3, r3
 8022604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022608:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022610:	b2db      	uxtb	r3, r3
 8022612:	2b03      	cmp	r3, #3
 8022614:	d104      	bne.n	8022620 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8022616:	6839      	ldr	r1, [r7, #0]
 8022618:	6878      	ldr	r0, [r7, #4]
 802261a:	f000 f9bc 	bl	8022996 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802261e:	e01d      	b.n	802265c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	7bfa      	ldrb	r2, [r7, #15]
 8022624:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022628:	7bfb      	ldrb	r3, [r7, #15]
 802262a:	4619      	mov	r1, r3
 802262c:	6878      	ldr	r0, [r7, #4]
 802262e:	f003 fdce 	bl	80261ce <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8022632:	6878      	ldr	r0, [r7, #4]
 8022634:	f000 fa5d 	bl	8022af2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022638:	7bfb      	ldrb	r3, [r7, #15]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d004      	beq.n	8022648 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	2202      	movs	r2, #2
 8022642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022646:	e009      	b.n	802265c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	2201      	movs	r2, #1
 802264c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022650:	e004      	b.n	802265c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022652:	6839      	ldr	r1, [r7, #0]
 8022654:	6878      	ldr	r0, [r7, #4]
 8022656:	f000 f99e 	bl	8022996 <USBD_CtlError>
  }
}
 802265a:	bf00      	nop
 802265c:	bf00      	nop
 802265e:	3710      	adds	r7, #16
 8022660:	46bd      	mov	sp, r7
 8022662:	bd80      	pop	{r7, pc}

08022664 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022664:	b580      	push	{r7, lr}
 8022666:	b084      	sub	sp, #16
 8022668:	af00      	add	r7, sp, #0
 802266a:	6078      	str	r0, [r7, #4]
 802266c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802266e:	2300      	movs	r3, #0
 8022670:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022672:	683b      	ldr	r3, [r7, #0]
 8022674:	885b      	ldrh	r3, [r3, #2]
 8022676:	b2da      	uxtb	r2, r3
 8022678:	4b4e      	ldr	r3, [pc, #312]	; (80227b4 <USBD_SetConfig+0x150>)
 802267a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802267c:	4b4d      	ldr	r3, [pc, #308]	; (80227b4 <USBD_SetConfig+0x150>)
 802267e:	781b      	ldrb	r3, [r3, #0]
 8022680:	2b01      	cmp	r3, #1
 8022682:	d905      	bls.n	8022690 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8022684:	6839      	ldr	r1, [r7, #0]
 8022686:	6878      	ldr	r0, [r7, #4]
 8022688:	f000 f985 	bl	8022996 <USBD_CtlError>
    return USBD_FAIL;
 802268c:	2303      	movs	r3, #3
 802268e:	e08c      	b.n	80227aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022696:	b2db      	uxtb	r3, r3
 8022698:	2b02      	cmp	r3, #2
 802269a:	d002      	beq.n	80226a2 <USBD_SetConfig+0x3e>
 802269c:	2b03      	cmp	r3, #3
 802269e:	d029      	beq.n	80226f4 <USBD_SetConfig+0x90>
 80226a0:	e075      	b.n	802278e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80226a2:	4b44      	ldr	r3, [pc, #272]	; (80227b4 <USBD_SetConfig+0x150>)
 80226a4:	781b      	ldrb	r3, [r3, #0]
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d020      	beq.n	80226ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80226aa:	4b42      	ldr	r3, [pc, #264]	; (80227b4 <USBD_SetConfig+0x150>)
 80226ac:	781b      	ldrb	r3, [r3, #0]
 80226ae:	461a      	mov	r2, r3
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80226b4:	4b3f      	ldr	r3, [pc, #252]	; (80227b4 <USBD_SetConfig+0x150>)
 80226b6:	781b      	ldrb	r3, [r3, #0]
 80226b8:	4619      	mov	r1, r3
 80226ba:	6878      	ldr	r0, [r7, #4]
 80226bc:	f7fe ffbc 	bl	8021638 <USBD_SetClassConfig>
 80226c0:	4603      	mov	r3, r0
 80226c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80226c4:	7bfb      	ldrb	r3, [r7, #15]
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d008      	beq.n	80226dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80226ca:	6839      	ldr	r1, [r7, #0]
 80226cc:	6878      	ldr	r0, [r7, #4]
 80226ce:	f000 f962 	bl	8022996 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	2202      	movs	r2, #2
 80226d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80226da:	e065      	b.n	80227a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80226dc:	6878      	ldr	r0, [r7, #4]
 80226de:	f000 fa08 	bl	8022af2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	2203      	movs	r2, #3
 80226e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80226ea:	e05d      	b.n	80227a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80226ec:	6878      	ldr	r0, [r7, #4]
 80226ee:	f000 fa00 	bl	8022af2 <USBD_CtlSendStatus>
      break;
 80226f2:	e059      	b.n	80227a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80226f4:	4b2f      	ldr	r3, [pc, #188]	; (80227b4 <USBD_SetConfig+0x150>)
 80226f6:	781b      	ldrb	r3, [r3, #0]
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	d112      	bne.n	8022722 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	2202      	movs	r2, #2
 8022700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8022704:	4b2b      	ldr	r3, [pc, #172]	; (80227b4 <USBD_SetConfig+0x150>)
 8022706:	781b      	ldrb	r3, [r3, #0]
 8022708:	461a      	mov	r2, r3
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 802270e:	4b29      	ldr	r3, [pc, #164]	; (80227b4 <USBD_SetConfig+0x150>)
 8022710:	781b      	ldrb	r3, [r3, #0]
 8022712:	4619      	mov	r1, r3
 8022714:	6878      	ldr	r0, [r7, #4]
 8022716:	f7fe ffab 	bl	8021670 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 802271a:	6878      	ldr	r0, [r7, #4]
 802271c:	f000 f9e9 	bl	8022af2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8022720:	e042      	b.n	80227a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8022722:	4b24      	ldr	r3, [pc, #144]	; (80227b4 <USBD_SetConfig+0x150>)
 8022724:	781b      	ldrb	r3, [r3, #0]
 8022726:	461a      	mov	r2, r3
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	685b      	ldr	r3, [r3, #4]
 802272c:	429a      	cmp	r2, r3
 802272e:	d02a      	beq.n	8022786 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	685b      	ldr	r3, [r3, #4]
 8022734:	b2db      	uxtb	r3, r3
 8022736:	4619      	mov	r1, r3
 8022738:	6878      	ldr	r0, [r7, #4]
 802273a:	f7fe ff99 	bl	8021670 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 802273e:	4b1d      	ldr	r3, [pc, #116]	; (80227b4 <USBD_SetConfig+0x150>)
 8022740:	781b      	ldrb	r3, [r3, #0]
 8022742:	461a      	mov	r2, r3
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8022748:	4b1a      	ldr	r3, [pc, #104]	; (80227b4 <USBD_SetConfig+0x150>)
 802274a:	781b      	ldrb	r3, [r3, #0]
 802274c:	4619      	mov	r1, r3
 802274e:	6878      	ldr	r0, [r7, #4]
 8022750:	f7fe ff72 	bl	8021638 <USBD_SetClassConfig>
 8022754:	4603      	mov	r3, r0
 8022756:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8022758:	7bfb      	ldrb	r3, [r7, #15]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d00f      	beq.n	802277e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 802275e:	6839      	ldr	r1, [r7, #0]
 8022760:	6878      	ldr	r0, [r7, #4]
 8022762:	f000 f918 	bl	8022996 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	685b      	ldr	r3, [r3, #4]
 802276a:	b2db      	uxtb	r3, r3
 802276c:	4619      	mov	r1, r3
 802276e:	6878      	ldr	r0, [r7, #4]
 8022770:	f7fe ff7e 	bl	8021670 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	2202      	movs	r2, #2
 8022778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802277c:	e014      	b.n	80227a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802277e:	6878      	ldr	r0, [r7, #4]
 8022780:	f000 f9b7 	bl	8022af2 <USBD_CtlSendStatus>
      break;
 8022784:	e010      	b.n	80227a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8022786:	6878      	ldr	r0, [r7, #4]
 8022788:	f000 f9b3 	bl	8022af2 <USBD_CtlSendStatus>
      break;
 802278c:	e00c      	b.n	80227a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 802278e:	6839      	ldr	r1, [r7, #0]
 8022790:	6878      	ldr	r0, [r7, #4]
 8022792:	f000 f900 	bl	8022996 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8022796:	4b07      	ldr	r3, [pc, #28]	; (80227b4 <USBD_SetConfig+0x150>)
 8022798:	781b      	ldrb	r3, [r3, #0]
 802279a:	4619      	mov	r1, r3
 802279c:	6878      	ldr	r0, [r7, #4]
 802279e:	f7fe ff67 	bl	8021670 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80227a2:	2303      	movs	r3, #3
 80227a4:	73fb      	strb	r3, [r7, #15]
      break;
 80227a6:	bf00      	nop
  }

  return ret;
 80227a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80227aa:	4618      	mov	r0, r3
 80227ac:	3710      	adds	r7, #16
 80227ae:	46bd      	mov	sp, r7
 80227b0:	bd80      	pop	{r7, pc}
 80227b2:	bf00      	nop
 80227b4:	20009ad4 	.word	0x20009ad4

080227b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80227b8:	b580      	push	{r7, lr}
 80227ba:	b082      	sub	sp, #8
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
 80227c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80227c2:	683b      	ldr	r3, [r7, #0]
 80227c4:	88db      	ldrh	r3, [r3, #6]
 80227c6:	2b01      	cmp	r3, #1
 80227c8:	d004      	beq.n	80227d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80227ca:	6839      	ldr	r1, [r7, #0]
 80227cc:	6878      	ldr	r0, [r7, #4]
 80227ce:	f000 f8e2 	bl	8022996 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80227d2:	e023      	b.n	802281c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80227da:	b2db      	uxtb	r3, r3
 80227dc:	2b02      	cmp	r3, #2
 80227de:	dc02      	bgt.n	80227e6 <USBD_GetConfig+0x2e>
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	dc03      	bgt.n	80227ec <USBD_GetConfig+0x34>
 80227e4:	e015      	b.n	8022812 <USBD_GetConfig+0x5a>
 80227e6:	2b03      	cmp	r3, #3
 80227e8:	d00b      	beq.n	8022802 <USBD_GetConfig+0x4a>
 80227ea:	e012      	b.n	8022812 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	2200      	movs	r2, #0
 80227f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	3308      	adds	r3, #8
 80227f6:	2201      	movs	r2, #1
 80227f8:	4619      	mov	r1, r3
 80227fa:	6878      	ldr	r0, [r7, #4]
 80227fc:	f000 f93c 	bl	8022a78 <USBD_CtlSendData>
        break;
 8022800:	e00c      	b.n	802281c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	3304      	adds	r3, #4
 8022806:	2201      	movs	r2, #1
 8022808:	4619      	mov	r1, r3
 802280a:	6878      	ldr	r0, [r7, #4]
 802280c:	f000 f934 	bl	8022a78 <USBD_CtlSendData>
        break;
 8022810:	e004      	b.n	802281c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8022812:	6839      	ldr	r1, [r7, #0]
 8022814:	6878      	ldr	r0, [r7, #4]
 8022816:	f000 f8be 	bl	8022996 <USBD_CtlError>
        break;
 802281a:	bf00      	nop
}
 802281c:	bf00      	nop
 802281e:	3708      	adds	r7, #8
 8022820:	46bd      	mov	sp, r7
 8022822:	bd80      	pop	{r7, pc}

08022824 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022824:	b580      	push	{r7, lr}
 8022826:	b082      	sub	sp, #8
 8022828:	af00      	add	r7, sp, #0
 802282a:	6078      	str	r0, [r7, #4]
 802282c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8022834:	b2db      	uxtb	r3, r3
 8022836:	3b01      	subs	r3, #1
 8022838:	2b02      	cmp	r3, #2
 802283a:	d81e      	bhi.n	802287a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802283c:	683b      	ldr	r3, [r7, #0]
 802283e:	88db      	ldrh	r3, [r3, #6]
 8022840:	2b02      	cmp	r3, #2
 8022842:	d004      	beq.n	802284e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8022844:	6839      	ldr	r1, [r7, #0]
 8022846:	6878      	ldr	r0, [r7, #4]
 8022848:	f000 f8a5 	bl	8022996 <USBD_CtlError>
        break;
 802284c:	e01a      	b.n	8022884 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	2201      	movs	r2, #1
 8022852:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 802285a:	2b00      	cmp	r3, #0
 802285c:	d005      	beq.n	802286a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	68db      	ldr	r3, [r3, #12]
 8022862:	f043 0202 	orr.w	r2, r3, #2
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	330c      	adds	r3, #12
 802286e:	2202      	movs	r2, #2
 8022870:	4619      	mov	r1, r3
 8022872:	6878      	ldr	r0, [r7, #4]
 8022874:	f000 f900 	bl	8022a78 <USBD_CtlSendData>
      break;
 8022878:	e004      	b.n	8022884 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 802287a:	6839      	ldr	r1, [r7, #0]
 802287c:	6878      	ldr	r0, [r7, #4]
 802287e:	f000 f88a 	bl	8022996 <USBD_CtlError>
      break;
 8022882:	bf00      	nop
  }
}
 8022884:	bf00      	nop
 8022886:	3708      	adds	r7, #8
 8022888:	46bd      	mov	sp, r7
 802288a:	bd80      	pop	{r7, pc}

0802288c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b082      	sub	sp, #8
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
 8022894:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022896:	683b      	ldr	r3, [r7, #0]
 8022898:	885b      	ldrh	r3, [r3, #2]
 802289a:	2b01      	cmp	r3, #1
 802289c:	d107      	bne.n	80228ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	2201      	movs	r2, #1
 80228a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80228a6:	6878      	ldr	r0, [r7, #4]
 80228a8:	f000 f923 	bl	8022af2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80228ac:	e013      	b.n	80228d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80228ae:	683b      	ldr	r3, [r7, #0]
 80228b0:	885b      	ldrh	r3, [r3, #2]
 80228b2:	2b02      	cmp	r3, #2
 80228b4:	d10b      	bne.n	80228ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80228b6:	683b      	ldr	r3, [r7, #0]
 80228b8:	889b      	ldrh	r3, [r3, #4]
 80228ba:	0a1b      	lsrs	r3, r3, #8
 80228bc:	b29b      	uxth	r3, r3
 80228be:	b2da      	uxtb	r2, r3
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80228c6:	6878      	ldr	r0, [r7, #4]
 80228c8:	f000 f913 	bl	8022af2 <USBD_CtlSendStatus>
}
 80228cc:	e003      	b.n	80228d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80228ce:	6839      	ldr	r1, [r7, #0]
 80228d0:	6878      	ldr	r0, [r7, #4]
 80228d2:	f000 f860 	bl	8022996 <USBD_CtlError>
}
 80228d6:	bf00      	nop
 80228d8:	3708      	adds	r7, #8
 80228da:	46bd      	mov	sp, r7
 80228dc:	bd80      	pop	{r7, pc}

080228de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80228de:	b580      	push	{r7, lr}
 80228e0:	b082      	sub	sp, #8
 80228e2:	af00      	add	r7, sp, #0
 80228e4:	6078      	str	r0, [r7, #4]
 80228e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80228ee:	b2db      	uxtb	r3, r3
 80228f0:	3b01      	subs	r3, #1
 80228f2:	2b02      	cmp	r3, #2
 80228f4:	d80b      	bhi.n	802290e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80228f6:	683b      	ldr	r3, [r7, #0]
 80228f8:	885b      	ldrh	r3, [r3, #2]
 80228fa:	2b01      	cmp	r3, #1
 80228fc:	d10c      	bne.n	8022918 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	2200      	movs	r2, #0
 8022902:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8022906:	6878      	ldr	r0, [r7, #4]
 8022908:	f000 f8f3 	bl	8022af2 <USBD_CtlSendStatus>
      }
      break;
 802290c:	e004      	b.n	8022918 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 802290e:	6839      	ldr	r1, [r7, #0]
 8022910:	6878      	ldr	r0, [r7, #4]
 8022912:	f000 f840 	bl	8022996 <USBD_CtlError>
      break;
 8022916:	e000      	b.n	802291a <USBD_ClrFeature+0x3c>
      break;
 8022918:	bf00      	nop
  }
}
 802291a:	bf00      	nop
 802291c:	3708      	adds	r7, #8
 802291e:	46bd      	mov	sp, r7
 8022920:	bd80      	pop	{r7, pc}

08022922 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022922:	b580      	push	{r7, lr}
 8022924:	b084      	sub	sp, #16
 8022926:	af00      	add	r7, sp, #0
 8022928:	6078      	str	r0, [r7, #4]
 802292a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802292c:	683b      	ldr	r3, [r7, #0]
 802292e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8022930:	68fb      	ldr	r3, [r7, #12]
 8022932:	781a      	ldrb	r2, [r3, #0]
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8022938:	68fb      	ldr	r3, [r7, #12]
 802293a:	3301      	adds	r3, #1
 802293c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 802293e:	68fb      	ldr	r3, [r7, #12]
 8022940:	781a      	ldrb	r2, [r3, #0]
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	3301      	adds	r3, #1
 802294a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802294c:	68f8      	ldr	r0, [r7, #12]
 802294e:	f7ff fa16 	bl	8021d7e <SWAPBYTE>
 8022952:	4603      	mov	r3, r0
 8022954:	461a      	mov	r2, r3
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	805a      	strh	r2, [r3, #2]

  pbuff++;
 802295a:	68fb      	ldr	r3, [r7, #12]
 802295c:	3301      	adds	r3, #1
 802295e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	3301      	adds	r3, #1
 8022964:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8022966:	68f8      	ldr	r0, [r7, #12]
 8022968:	f7ff fa09 	bl	8021d7e <SWAPBYTE>
 802296c:	4603      	mov	r3, r0
 802296e:	461a      	mov	r2, r3
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8022974:	68fb      	ldr	r3, [r7, #12]
 8022976:	3301      	adds	r3, #1
 8022978:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802297a:	68fb      	ldr	r3, [r7, #12]
 802297c:	3301      	adds	r3, #1
 802297e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8022980:	68f8      	ldr	r0, [r7, #12]
 8022982:	f7ff f9fc 	bl	8021d7e <SWAPBYTE>
 8022986:	4603      	mov	r3, r0
 8022988:	461a      	mov	r2, r3
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	80da      	strh	r2, [r3, #6]
}
 802298e:	bf00      	nop
 8022990:	3710      	adds	r7, #16
 8022992:	46bd      	mov	sp, r7
 8022994:	bd80      	pop	{r7, pc}

08022996 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022996:	b580      	push	{r7, lr}
 8022998:	b082      	sub	sp, #8
 802299a:	af00      	add	r7, sp, #0
 802299c:	6078      	str	r0, [r7, #4]
 802299e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80229a0:	2180      	movs	r1, #128	; 0x80
 80229a2:	6878      	ldr	r0, [r7, #4]
 80229a4:	f003 fba9 	bl	80260fa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80229a8:	2100      	movs	r1, #0
 80229aa:	6878      	ldr	r0, [r7, #4]
 80229ac:	f003 fba5 	bl	80260fa <USBD_LL_StallEP>
}
 80229b0:	bf00      	nop
 80229b2:	3708      	adds	r7, #8
 80229b4:	46bd      	mov	sp, r7
 80229b6:	bd80      	pop	{r7, pc}

080229b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b086      	sub	sp, #24
 80229bc:	af00      	add	r7, sp, #0
 80229be:	60f8      	str	r0, [r7, #12]
 80229c0:	60b9      	str	r1, [r7, #8]
 80229c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80229c4:	2300      	movs	r3, #0
 80229c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80229c8:	68fb      	ldr	r3, [r7, #12]
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d036      	beq.n	8022a3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80229ce:	68fb      	ldr	r3, [r7, #12]
 80229d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80229d2:	6938      	ldr	r0, [r7, #16]
 80229d4:	f000 f836 	bl	8022a44 <USBD_GetLen>
 80229d8:	4603      	mov	r3, r0
 80229da:	3301      	adds	r3, #1
 80229dc:	b29b      	uxth	r3, r3
 80229de:	005b      	lsls	r3, r3, #1
 80229e0:	b29a      	uxth	r2, r3
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80229e6:	7dfb      	ldrb	r3, [r7, #23]
 80229e8:	68ba      	ldr	r2, [r7, #8]
 80229ea:	4413      	add	r3, r2
 80229ec:	687a      	ldr	r2, [r7, #4]
 80229ee:	7812      	ldrb	r2, [r2, #0]
 80229f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80229f2:	7dfb      	ldrb	r3, [r7, #23]
 80229f4:	3301      	adds	r3, #1
 80229f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80229f8:	7dfb      	ldrb	r3, [r7, #23]
 80229fa:	68ba      	ldr	r2, [r7, #8]
 80229fc:	4413      	add	r3, r2
 80229fe:	2203      	movs	r2, #3
 8022a00:	701a      	strb	r2, [r3, #0]
  idx++;
 8022a02:	7dfb      	ldrb	r3, [r7, #23]
 8022a04:	3301      	adds	r3, #1
 8022a06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8022a08:	e013      	b.n	8022a32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8022a0a:	7dfb      	ldrb	r3, [r7, #23]
 8022a0c:	68ba      	ldr	r2, [r7, #8]
 8022a0e:	4413      	add	r3, r2
 8022a10:	693a      	ldr	r2, [r7, #16]
 8022a12:	7812      	ldrb	r2, [r2, #0]
 8022a14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022a16:	693b      	ldr	r3, [r7, #16]
 8022a18:	3301      	adds	r3, #1
 8022a1a:	613b      	str	r3, [r7, #16]
    idx++;
 8022a1c:	7dfb      	ldrb	r3, [r7, #23]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8022a22:	7dfb      	ldrb	r3, [r7, #23]
 8022a24:	68ba      	ldr	r2, [r7, #8]
 8022a26:	4413      	add	r3, r2
 8022a28:	2200      	movs	r2, #0
 8022a2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8022a2c:	7dfb      	ldrb	r3, [r7, #23]
 8022a2e:	3301      	adds	r3, #1
 8022a30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8022a32:	693b      	ldr	r3, [r7, #16]
 8022a34:	781b      	ldrb	r3, [r3, #0]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d1e7      	bne.n	8022a0a <USBD_GetString+0x52>
 8022a3a:	e000      	b.n	8022a3e <USBD_GetString+0x86>
    return;
 8022a3c:	bf00      	nop
  }
}
 8022a3e:	3718      	adds	r7, #24
 8022a40:	46bd      	mov	sp, r7
 8022a42:	bd80      	pop	{r7, pc}

08022a44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022a44:	b480      	push	{r7}
 8022a46:	b085      	sub	sp, #20
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022a4c:	2300      	movs	r3, #0
 8022a4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8022a54:	e005      	b.n	8022a62 <USBD_GetLen+0x1e>
  {
    len++;
 8022a56:	7bfb      	ldrb	r3, [r7, #15]
 8022a58:	3301      	adds	r3, #1
 8022a5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8022a5c:	68bb      	ldr	r3, [r7, #8]
 8022a5e:	3301      	adds	r3, #1
 8022a60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8022a62:	68bb      	ldr	r3, [r7, #8]
 8022a64:	781b      	ldrb	r3, [r3, #0]
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d1f5      	bne.n	8022a56 <USBD_GetLen+0x12>
  }

  return len;
 8022a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8022a6c:	4618      	mov	r0, r3
 8022a6e:	3714      	adds	r7, #20
 8022a70:	46bd      	mov	sp, r7
 8022a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a76:	4770      	bx	lr

08022a78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8022a78:	b580      	push	{r7, lr}
 8022a7a:	b084      	sub	sp, #16
 8022a7c:	af00      	add	r7, sp, #0
 8022a7e:	60f8      	str	r0, [r7, #12]
 8022a80:	60b9      	str	r1, [r7, #8]
 8022a82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022a84:	68fb      	ldr	r3, [r7, #12]
 8022a86:	2202      	movs	r2, #2
 8022a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	687a      	ldr	r2, [r7, #4]
 8022a90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	687a      	ldr	r2, [r7, #4]
 8022a96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	68ba      	ldr	r2, [r7, #8]
 8022a9c:	2100      	movs	r1, #0
 8022a9e:	68f8      	ldr	r0, [r7, #12]
 8022aa0:	f003 fbb4 	bl	802620c <USBD_LL_Transmit>

  return USBD_OK;
 8022aa4:	2300      	movs	r3, #0
}
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	3710      	adds	r7, #16
 8022aaa:	46bd      	mov	sp, r7
 8022aac:	bd80      	pop	{r7, pc}

08022aae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022aae:	b580      	push	{r7, lr}
 8022ab0:	b084      	sub	sp, #16
 8022ab2:	af00      	add	r7, sp, #0
 8022ab4:	60f8      	str	r0, [r7, #12]
 8022ab6:	60b9      	str	r1, [r7, #8]
 8022ab8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	68ba      	ldr	r2, [r7, #8]
 8022abe:	2100      	movs	r1, #0
 8022ac0:	68f8      	ldr	r0, [r7, #12]
 8022ac2:	f003 fba3 	bl	802620c <USBD_LL_Transmit>

  return USBD_OK;
 8022ac6:	2300      	movs	r3, #0
}
 8022ac8:	4618      	mov	r0, r3
 8022aca:	3710      	adds	r7, #16
 8022acc:	46bd      	mov	sp, r7
 8022ace:	bd80      	pop	{r7, pc}

08022ad0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b084      	sub	sp, #16
 8022ad4:	af00      	add	r7, sp, #0
 8022ad6:	60f8      	str	r0, [r7, #12]
 8022ad8:	60b9      	str	r1, [r7, #8]
 8022ada:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	68ba      	ldr	r2, [r7, #8]
 8022ae0:	2100      	movs	r1, #0
 8022ae2:	68f8      	ldr	r0, [r7, #12]
 8022ae4:	f003 fbb3 	bl	802624e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022ae8:	2300      	movs	r3, #0
}
 8022aea:	4618      	mov	r0, r3
 8022aec:	3710      	adds	r7, #16
 8022aee:	46bd      	mov	sp, r7
 8022af0:	bd80      	pop	{r7, pc}

08022af2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8022af2:	b580      	push	{r7, lr}
 8022af4:	b082      	sub	sp, #8
 8022af6:	af00      	add	r7, sp, #0
 8022af8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	2204      	movs	r2, #4
 8022afe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8022b02:	2300      	movs	r3, #0
 8022b04:	2200      	movs	r2, #0
 8022b06:	2100      	movs	r1, #0
 8022b08:	6878      	ldr	r0, [r7, #4]
 8022b0a:	f003 fb7f 	bl	802620c <USBD_LL_Transmit>

  return USBD_OK;
 8022b0e:	2300      	movs	r3, #0
}
 8022b10:	4618      	mov	r0, r3
 8022b12:	3708      	adds	r7, #8
 8022b14:	46bd      	mov	sp, r7
 8022b16:	bd80      	pop	{r7, pc}

08022b18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022b18:	b580      	push	{r7, lr}
 8022b1a:	b082      	sub	sp, #8
 8022b1c:	af00      	add	r7, sp, #0
 8022b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	2205      	movs	r2, #5
 8022b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022b28:	2300      	movs	r3, #0
 8022b2a:	2200      	movs	r2, #0
 8022b2c:	2100      	movs	r1, #0
 8022b2e:	6878      	ldr	r0, [r7, #4]
 8022b30:	f003 fb8d 	bl	802624e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022b34:	2300      	movs	r3, #0
}
 8022b36:	4618      	mov	r0, r3
 8022b38:	3708      	adds	r7, #8
 8022b3a:	46bd      	mov	sp, r7
 8022b3c:	bd80      	pop	{r7, pc}
	...

08022b40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8022b40:	b580      	push	{r7, lr}
 8022b42:	b084      	sub	sp, #16
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	4603      	mov	r3, r0
 8022b48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8022b4a:	79fb      	ldrb	r3, [r7, #7]
 8022b4c:	4a08      	ldr	r2, [pc, #32]	; (8022b70 <disk_status+0x30>)
 8022b4e:	009b      	lsls	r3, r3, #2
 8022b50:	4413      	add	r3, r2
 8022b52:	685b      	ldr	r3, [r3, #4]
 8022b54:	685b      	ldr	r3, [r3, #4]
 8022b56:	79fa      	ldrb	r2, [r7, #7]
 8022b58:	4905      	ldr	r1, [pc, #20]	; (8022b70 <disk_status+0x30>)
 8022b5a:	440a      	add	r2, r1
 8022b5c:	7a12      	ldrb	r2, [r2, #8]
 8022b5e:	4610      	mov	r0, r2
 8022b60:	4798      	blx	r3
 8022b62:	4603      	mov	r3, r0
 8022b64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8022b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b68:	4618      	mov	r0, r3
 8022b6a:	3710      	adds	r7, #16
 8022b6c:	46bd      	mov	sp, r7
 8022b6e:	bd80      	pop	{r7, pc}
 8022b70:	20009b00 	.word	0x20009b00

08022b74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8022b74:	b580      	push	{r7, lr}
 8022b76:	b084      	sub	sp, #16
 8022b78:	af00      	add	r7, sp, #0
 8022b7a:	4603      	mov	r3, r0
 8022b7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8022b7e:	2300      	movs	r3, #0
 8022b80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8022b82:	79fb      	ldrb	r3, [r7, #7]
 8022b84:	4a0d      	ldr	r2, [pc, #52]	; (8022bbc <disk_initialize+0x48>)
 8022b86:	5cd3      	ldrb	r3, [r2, r3]
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d111      	bne.n	8022bb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8022b8c:	79fb      	ldrb	r3, [r7, #7]
 8022b8e:	4a0b      	ldr	r2, [pc, #44]	; (8022bbc <disk_initialize+0x48>)
 8022b90:	2101      	movs	r1, #1
 8022b92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8022b94:	79fb      	ldrb	r3, [r7, #7]
 8022b96:	4a09      	ldr	r2, [pc, #36]	; (8022bbc <disk_initialize+0x48>)
 8022b98:	009b      	lsls	r3, r3, #2
 8022b9a:	4413      	add	r3, r2
 8022b9c:	685b      	ldr	r3, [r3, #4]
 8022b9e:	681b      	ldr	r3, [r3, #0]
 8022ba0:	79fa      	ldrb	r2, [r7, #7]
 8022ba2:	4906      	ldr	r1, [pc, #24]	; (8022bbc <disk_initialize+0x48>)
 8022ba4:	440a      	add	r2, r1
 8022ba6:	7a12      	ldrb	r2, [r2, #8]
 8022ba8:	4610      	mov	r0, r2
 8022baa:	4798      	blx	r3
 8022bac:	4603      	mov	r3, r0
 8022bae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8022bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8022bb2:	4618      	mov	r0, r3
 8022bb4:	3710      	adds	r7, #16
 8022bb6:	46bd      	mov	sp, r7
 8022bb8:	bd80      	pop	{r7, pc}
 8022bba:	bf00      	nop
 8022bbc:	20009b00 	.word	0x20009b00

08022bc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8022bc0:	b590      	push	{r4, r7, lr}
 8022bc2:	b087      	sub	sp, #28
 8022bc4:	af00      	add	r7, sp, #0
 8022bc6:	60b9      	str	r1, [r7, #8]
 8022bc8:	607a      	str	r2, [r7, #4]
 8022bca:	603b      	str	r3, [r7, #0]
 8022bcc:	4603      	mov	r3, r0
 8022bce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8022bd0:	7bfb      	ldrb	r3, [r7, #15]
 8022bd2:	4a0a      	ldr	r2, [pc, #40]	; (8022bfc <disk_read+0x3c>)
 8022bd4:	009b      	lsls	r3, r3, #2
 8022bd6:	4413      	add	r3, r2
 8022bd8:	685b      	ldr	r3, [r3, #4]
 8022bda:	689c      	ldr	r4, [r3, #8]
 8022bdc:	7bfb      	ldrb	r3, [r7, #15]
 8022bde:	4a07      	ldr	r2, [pc, #28]	; (8022bfc <disk_read+0x3c>)
 8022be0:	4413      	add	r3, r2
 8022be2:	7a18      	ldrb	r0, [r3, #8]
 8022be4:	683b      	ldr	r3, [r7, #0]
 8022be6:	687a      	ldr	r2, [r7, #4]
 8022be8:	68b9      	ldr	r1, [r7, #8]
 8022bea:	47a0      	blx	r4
 8022bec:	4603      	mov	r3, r0
 8022bee:	75fb      	strb	r3, [r7, #23]
  return res;
 8022bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8022bf2:	4618      	mov	r0, r3
 8022bf4:	371c      	adds	r7, #28
 8022bf6:	46bd      	mov	sp, r7
 8022bf8:	bd90      	pop	{r4, r7, pc}
 8022bfa:	bf00      	nop
 8022bfc:	20009b00 	.word	0x20009b00

08022c00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8022c00:	b590      	push	{r4, r7, lr}
 8022c02:	b087      	sub	sp, #28
 8022c04:	af00      	add	r7, sp, #0
 8022c06:	60b9      	str	r1, [r7, #8]
 8022c08:	607a      	str	r2, [r7, #4]
 8022c0a:	603b      	str	r3, [r7, #0]
 8022c0c:	4603      	mov	r3, r0
 8022c0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8022c10:	7bfb      	ldrb	r3, [r7, #15]
 8022c12:	4a0a      	ldr	r2, [pc, #40]	; (8022c3c <disk_write+0x3c>)
 8022c14:	009b      	lsls	r3, r3, #2
 8022c16:	4413      	add	r3, r2
 8022c18:	685b      	ldr	r3, [r3, #4]
 8022c1a:	68dc      	ldr	r4, [r3, #12]
 8022c1c:	7bfb      	ldrb	r3, [r7, #15]
 8022c1e:	4a07      	ldr	r2, [pc, #28]	; (8022c3c <disk_write+0x3c>)
 8022c20:	4413      	add	r3, r2
 8022c22:	7a18      	ldrb	r0, [r3, #8]
 8022c24:	683b      	ldr	r3, [r7, #0]
 8022c26:	687a      	ldr	r2, [r7, #4]
 8022c28:	68b9      	ldr	r1, [r7, #8]
 8022c2a:	47a0      	blx	r4
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8022c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8022c32:	4618      	mov	r0, r3
 8022c34:	371c      	adds	r7, #28
 8022c36:	46bd      	mov	sp, r7
 8022c38:	bd90      	pop	{r4, r7, pc}
 8022c3a:	bf00      	nop
 8022c3c:	20009b00 	.word	0x20009b00

08022c40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8022c40:	b580      	push	{r7, lr}
 8022c42:	b084      	sub	sp, #16
 8022c44:	af00      	add	r7, sp, #0
 8022c46:	4603      	mov	r3, r0
 8022c48:	603a      	str	r2, [r7, #0]
 8022c4a:	71fb      	strb	r3, [r7, #7]
 8022c4c:	460b      	mov	r3, r1
 8022c4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8022c50:	79fb      	ldrb	r3, [r7, #7]
 8022c52:	4a09      	ldr	r2, [pc, #36]	; (8022c78 <disk_ioctl+0x38>)
 8022c54:	009b      	lsls	r3, r3, #2
 8022c56:	4413      	add	r3, r2
 8022c58:	685b      	ldr	r3, [r3, #4]
 8022c5a:	691b      	ldr	r3, [r3, #16]
 8022c5c:	79fa      	ldrb	r2, [r7, #7]
 8022c5e:	4906      	ldr	r1, [pc, #24]	; (8022c78 <disk_ioctl+0x38>)
 8022c60:	440a      	add	r2, r1
 8022c62:	7a10      	ldrb	r0, [r2, #8]
 8022c64:	79b9      	ldrb	r1, [r7, #6]
 8022c66:	683a      	ldr	r2, [r7, #0]
 8022c68:	4798      	blx	r3
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8022c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022c70:	4618      	mov	r0, r3
 8022c72:	3710      	adds	r7, #16
 8022c74:	46bd      	mov	sp, r7
 8022c76:	bd80      	pop	{r7, pc}
 8022c78:	20009b00 	.word	0x20009b00

08022c7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8022c7c:	b480      	push	{r7}
 8022c7e:	b085      	sub	sp, #20
 8022c80:	af00      	add	r7, sp, #0
 8022c82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	3301      	adds	r3, #1
 8022c88:	781b      	ldrb	r3, [r3, #0]
 8022c8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8022c8c:	89fb      	ldrh	r3, [r7, #14]
 8022c8e:	021b      	lsls	r3, r3, #8
 8022c90:	b21a      	sxth	r2, r3
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	781b      	ldrb	r3, [r3, #0]
 8022c96:	b21b      	sxth	r3, r3
 8022c98:	4313      	orrs	r3, r2
 8022c9a:	b21b      	sxth	r3, r3
 8022c9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8022c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8022ca0:	4618      	mov	r0, r3
 8022ca2:	3714      	adds	r7, #20
 8022ca4:	46bd      	mov	sp, r7
 8022ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022caa:	4770      	bx	lr

08022cac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8022cac:	b480      	push	{r7}
 8022cae:	b085      	sub	sp, #20
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	3303      	adds	r3, #3
 8022cb8:	781b      	ldrb	r3, [r3, #0]
 8022cba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8022cbc:	68fb      	ldr	r3, [r7, #12]
 8022cbe:	021b      	lsls	r3, r3, #8
 8022cc0:	687a      	ldr	r2, [r7, #4]
 8022cc2:	3202      	adds	r2, #2
 8022cc4:	7812      	ldrb	r2, [r2, #0]
 8022cc6:	4313      	orrs	r3, r2
 8022cc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8022cca:	68fb      	ldr	r3, [r7, #12]
 8022ccc:	021b      	lsls	r3, r3, #8
 8022cce:	687a      	ldr	r2, [r7, #4]
 8022cd0:	3201      	adds	r2, #1
 8022cd2:	7812      	ldrb	r2, [r2, #0]
 8022cd4:	4313      	orrs	r3, r2
 8022cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8022cd8:	68fb      	ldr	r3, [r7, #12]
 8022cda:	021b      	lsls	r3, r3, #8
 8022cdc:	687a      	ldr	r2, [r7, #4]
 8022cde:	7812      	ldrb	r2, [r2, #0]
 8022ce0:	4313      	orrs	r3, r2
 8022ce2:	60fb      	str	r3, [r7, #12]
	return rv;
 8022ce4:	68fb      	ldr	r3, [r7, #12]
}
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	3714      	adds	r7, #20
 8022cea:	46bd      	mov	sp, r7
 8022cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cf0:	4770      	bx	lr

08022cf2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8022cf2:	b480      	push	{r7}
 8022cf4:	b083      	sub	sp, #12
 8022cf6:	af00      	add	r7, sp, #0
 8022cf8:	6078      	str	r0, [r7, #4]
 8022cfa:	460b      	mov	r3, r1
 8022cfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8022cfe:	687b      	ldr	r3, [r7, #4]
 8022d00:	1c5a      	adds	r2, r3, #1
 8022d02:	607a      	str	r2, [r7, #4]
 8022d04:	887a      	ldrh	r2, [r7, #2]
 8022d06:	b2d2      	uxtb	r2, r2
 8022d08:	701a      	strb	r2, [r3, #0]
 8022d0a:	887b      	ldrh	r3, [r7, #2]
 8022d0c:	0a1b      	lsrs	r3, r3, #8
 8022d0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	1c5a      	adds	r2, r3, #1
 8022d14:	607a      	str	r2, [r7, #4]
 8022d16:	887a      	ldrh	r2, [r7, #2]
 8022d18:	b2d2      	uxtb	r2, r2
 8022d1a:	701a      	strb	r2, [r3, #0]
}
 8022d1c:	bf00      	nop
 8022d1e:	370c      	adds	r7, #12
 8022d20:	46bd      	mov	sp, r7
 8022d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d26:	4770      	bx	lr

08022d28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8022d28:	b480      	push	{r7}
 8022d2a:	b083      	sub	sp, #12
 8022d2c:	af00      	add	r7, sp, #0
 8022d2e:	6078      	str	r0, [r7, #4]
 8022d30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	1c5a      	adds	r2, r3, #1
 8022d36:	607a      	str	r2, [r7, #4]
 8022d38:	683a      	ldr	r2, [r7, #0]
 8022d3a:	b2d2      	uxtb	r2, r2
 8022d3c:	701a      	strb	r2, [r3, #0]
 8022d3e:	683b      	ldr	r3, [r7, #0]
 8022d40:	0a1b      	lsrs	r3, r3, #8
 8022d42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	1c5a      	adds	r2, r3, #1
 8022d48:	607a      	str	r2, [r7, #4]
 8022d4a:	683a      	ldr	r2, [r7, #0]
 8022d4c:	b2d2      	uxtb	r2, r2
 8022d4e:	701a      	strb	r2, [r3, #0]
 8022d50:	683b      	ldr	r3, [r7, #0]
 8022d52:	0a1b      	lsrs	r3, r3, #8
 8022d54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	1c5a      	adds	r2, r3, #1
 8022d5a:	607a      	str	r2, [r7, #4]
 8022d5c:	683a      	ldr	r2, [r7, #0]
 8022d5e:	b2d2      	uxtb	r2, r2
 8022d60:	701a      	strb	r2, [r3, #0]
 8022d62:	683b      	ldr	r3, [r7, #0]
 8022d64:	0a1b      	lsrs	r3, r3, #8
 8022d66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	1c5a      	adds	r2, r3, #1
 8022d6c:	607a      	str	r2, [r7, #4]
 8022d6e:	683a      	ldr	r2, [r7, #0]
 8022d70:	b2d2      	uxtb	r2, r2
 8022d72:	701a      	strb	r2, [r3, #0]
}
 8022d74:	bf00      	nop
 8022d76:	370c      	adds	r7, #12
 8022d78:	46bd      	mov	sp, r7
 8022d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d7e:	4770      	bx	lr

08022d80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8022d80:	b480      	push	{r7}
 8022d82:	b087      	sub	sp, #28
 8022d84:	af00      	add	r7, sp, #0
 8022d86:	60f8      	str	r0, [r7, #12]
 8022d88:	60b9      	str	r1, [r7, #8]
 8022d8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022d8c:	68fb      	ldr	r3, [r7, #12]
 8022d8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8022d90:	68bb      	ldr	r3, [r7, #8]
 8022d92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	2b00      	cmp	r3, #0
 8022d98:	d00d      	beq.n	8022db6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8022d9a:	693a      	ldr	r2, [r7, #16]
 8022d9c:	1c53      	adds	r3, r2, #1
 8022d9e:	613b      	str	r3, [r7, #16]
 8022da0:	697b      	ldr	r3, [r7, #20]
 8022da2:	1c59      	adds	r1, r3, #1
 8022da4:	6179      	str	r1, [r7, #20]
 8022da6:	7812      	ldrb	r2, [r2, #0]
 8022da8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	3b01      	subs	r3, #1
 8022dae:	607b      	str	r3, [r7, #4]
 8022db0:	687b      	ldr	r3, [r7, #4]
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	d1f1      	bne.n	8022d9a <mem_cpy+0x1a>
	}
}
 8022db6:	bf00      	nop
 8022db8:	371c      	adds	r7, #28
 8022dba:	46bd      	mov	sp, r7
 8022dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc0:	4770      	bx	lr

08022dc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8022dc2:	b480      	push	{r7}
 8022dc4:	b087      	sub	sp, #28
 8022dc6:	af00      	add	r7, sp, #0
 8022dc8:	60f8      	str	r0, [r7, #12]
 8022dca:	60b9      	str	r1, [r7, #8]
 8022dcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8022dce:	68fb      	ldr	r3, [r7, #12]
 8022dd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8022dd2:	697b      	ldr	r3, [r7, #20]
 8022dd4:	1c5a      	adds	r2, r3, #1
 8022dd6:	617a      	str	r2, [r7, #20]
 8022dd8:	68ba      	ldr	r2, [r7, #8]
 8022dda:	b2d2      	uxtb	r2, r2
 8022ddc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	3b01      	subs	r3, #1
 8022de2:	607b      	str	r3, [r7, #4]
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d1f3      	bne.n	8022dd2 <mem_set+0x10>
}
 8022dea:	bf00      	nop
 8022dec:	bf00      	nop
 8022dee:	371c      	adds	r7, #28
 8022df0:	46bd      	mov	sp, r7
 8022df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df6:	4770      	bx	lr

08022df8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8022df8:	b480      	push	{r7}
 8022dfa:	b089      	sub	sp, #36	; 0x24
 8022dfc:	af00      	add	r7, sp, #0
 8022dfe:	60f8      	str	r0, [r7, #12]
 8022e00:	60b9      	str	r1, [r7, #8]
 8022e02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8022e04:	68fb      	ldr	r3, [r7, #12]
 8022e06:	61fb      	str	r3, [r7, #28]
 8022e08:	68bb      	ldr	r3, [r7, #8]
 8022e0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8022e10:	69fb      	ldr	r3, [r7, #28]
 8022e12:	1c5a      	adds	r2, r3, #1
 8022e14:	61fa      	str	r2, [r7, #28]
 8022e16:	781b      	ldrb	r3, [r3, #0]
 8022e18:	4619      	mov	r1, r3
 8022e1a:	69bb      	ldr	r3, [r7, #24]
 8022e1c:	1c5a      	adds	r2, r3, #1
 8022e1e:	61ba      	str	r2, [r7, #24]
 8022e20:	781b      	ldrb	r3, [r3, #0]
 8022e22:	1acb      	subs	r3, r1, r3
 8022e24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	3b01      	subs	r3, #1
 8022e2a:	607b      	str	r3, [r7, #4]
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	2b00      	cmp	r3, #0
 8022e30:	d002      	beq.n	8022e38 <mem_cmp+0x40>
 8022e32:	697b      	ldr	r3, [r7, #20]
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d0eb      	beq.n	8022e10 <mem_cmp+0x18>

	return r;
 8022e38:	697b      	ldr	r3, [r7, #20]
}
 8022e3a:	4618      	mov	r0, r3
 8022e3c:	3724      	adds	r7, #36	; 0x24
 8022e3e:	46bd      	mov	sp, r7
 8022e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e44:	4770      	bx	lr

08022e46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8022e46:	b480      	push	{r7}
 8022e48:	b083      	sub	sp, #12
 8022e4a:	af00      	add	r7, sp, #0
 8022e4c:	6078      	str	r0, [r7, #4]
 8022e4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8022e50:	e002      	b.n	8022e58 <chk_chr+0x12>
 8022e52:	687b      	ldr	r3, [r7, #4]
 8022e54:	3301      	adds	r3, #1
 8022e56:	607b      	str	r3, [r7, #4]
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	781b      	ldrb	r3, [r3, #0]
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d005      	beq.n	8022e6c <chk_chr+0x26>
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	781b      	ldrb	r3, [r3, #0]
 8022e64:	461a      	mov	r2, r3
 8022e66:	683b      	ldr	r3, [r7, #0]
 8022e68:	4293      	cmp	r3, r2
 8022e6a:	d1f2      	bne.n	8022e52 <chk_chr+0xc>
	return *str;
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	781b      	ldrb	r3, [r3, #0]
}
 8022e70:	4618      	mov	r0, r3
 8022e72:	370c      	adds	r7, #12
 8022e74:	46bd      	mov	sp, r7
 8022e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e7a:	4770      	bx	lr

08022e7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022e7c:	b480      	push	{r7}
 8022e7e:	b085      	sub	sp, #20
 8022e80:	af00      	add	r7, sp, #0
 8022e82:	6078      	str	r0, [r7, #4]
 8022e84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8022e86:	2300      	movs	r3, #0
 8022e88:	60bb      	str	r3, [r7, #8]
 8022e8a:	68bb      	ldr	r3, [r7, #8]
 8022e8c:	60fb      	str	r3, [r7, #12]
 8022e8e:	e029      	b.n	8022ee4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8022e90:	4a27      	ldr	r2, [pc, #156]	; (8022f30 <chk_lock+0xb4>)
 8022e92:	68fb      	ldr	r3, [r7, #12]
 8022e94:	011b      	lsls	r3, r3, #4
 8022e96:	4413      	add	r3, r2
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d01d      	beq.n	8022eda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8022e9e:	4a24      	ldr	r2, [pc, #144]	; (8022f30 <chk_lock+0xb4>)
 8022ea0:	68fb      	ldr	r3, [r7, #12]
 8022ea2:	011b      	lsls	r3, r3, #4
 8022ea4:	4413      	add	r3, r2
 8022ea6:	681a      	ldr	r2, [r3, #0]
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	681b      	ldr	r3, [r3, #0]
 8022eac:	429a      	cmp	r2, r3
 8022eae:	d116      	bne.n	8022ede <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8022eb0:	4a1f      	ldr	r2, [pc, #124]	; (8022f30 <chk_lock+0xb4>)
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	011b      	lsls	r3, r3, #4
 8022eb6:	4413      	add	r3, r2
 8022eb8:	3304      	adds	r3, #4
 8022eba:	681a      	ldr	r2, [r3, #0]
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8022ec0:	429a      	cmp	r2, r3
 8022ec2:	d10c      	bne.n	8022ede <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8022ec4:	4a1a      	ldr	r2, [pc, #104]	; (8022f30 <chk_lock+0xb4>)
 8022ec6:	68fb      	ldr	r3, [r7, #12]
 8022ec8:	011b      	lsls	r3, r3, #4
 8022eca:	4413      	add	r3, r2
 8022ecc:	3308      	adds	r3, #8
 8022ece:	681a      	ldr	r2, [r3, #0]
 8022ed0:	687b      	ldr	r3, [r7, #4]
 8022ed2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8022ed4:	429a      	cmp	r2, r3
 8022ed6:	d102      	bne.n	8022ede <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8022ed8:	e007      	b.n	8022eea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8022eda:	2301      	movs	r3, #1
 8022edc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	3301      	adds	r3, #1
 8022ee2:	60fb      	str	r3, [r7, #12]
 8022ee4:	68fb      	ldr	r3, [r7, #12]
 8022ee6:	2b01      	cmp	r3, #1
 8022ee8:	d9d2      	bls.n	8022e90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8022eea:	68fb      	ldr	r3, [r7, #12]
 8022eec:	2b02      	cmp	r3, #2
 8022eee:	d109      	bne.n	8022f04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8022ef0:	68bb      	ldr	r3, [r7, #8]
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d102      	bne.n	8022efc <chk_lock+0x80>
 8022ef6:	683b      	ldr	r3, [r7, #0]
 8022ef8:	2b02      	cmp	r3, #2
 8022efa:	d101      	bne.n	8022f00 <chk_lock+0x84>
 8022efc:	2300      	movs	r3, #0
 8022efe:	e010      	b.n	8022f22 <chk_lock+0xa6>
 8022f00:	2312      	movs	r3, #18
 8022f02:	e00e      	b.n	8022f22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8022f04:	683b      	ldr	r3, [r7, #0]
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	d108      	bne.n	8022f1c <chk_lock+0xa0>
 8022f0a:	4a09      	ldr	r2, [pc, #36]	; (8022f30 <chk_lock+0xb4>)
 8022f0c:	68fb      	ldr	r3, [r7, #12]
 8022f0e:	011b      	lsls	r3, r3, #4
 8022f10:	4413      	add	r3, r2
 8022f12:	330c      	adds	r3, #12
 8022f14:	881b      	ldrh	r3, [r3, #0]
 8022f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022f1a:	d101      	bne.n	8022f20 <chk_lock+0xa4>
 8022f1c:	2310      	movs	r3, #16
 8022f1e:	e000      	b.n	8022f22 <chk_lock+0xa6>
 8022f20:	2300      	movs	r3, #0
}
 8022f22:	4618      	mov	r0, r3
 8022f24:	3714      	adds	r7, #20
 8022f26:	46bd      	mov	sp, r7
 8022f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f2c:	4770      	bx	lr
 8022f2e:	bf00      	nop
 8022f30:	20009ae0 	.word	0x20009ae0

08022f34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8022f34:	b480      	push	{r7}
 8022f36:	b083      	sub	sp, #12
 8022f38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8022f3a:	2300      	movs	r3, #0
 8022f3c:	607b      	str	r3, [r7, #4]
 8022f3e:	e002      	b.n	8022f46 <enq_lock+0x12>
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	3301      	adds	r3, #1
 8022f44:	607b      	str	r3, [r7, #4]
 8022f46:	687b      	ldr	r3, [r7, #4]
 8022f48:	2b01      	cmp	r3, #1
 8022f4a:	d806      	bhi.n	8022f5a <enq_lock+0x26>
 8022f4c:	4a09      	ldr	r2, [pc, #36]	; (8022f74 <enq_lock+0x40>)
 8022f4e:	687b      	ldr	r3, [r7, #4]
 8022f50:	011b      	lsls	r3, r3, #4
 8022f52:	4413      	add	r3, r2
 8022f54:	681b      	ldr	r3, [r3, #0]
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d1f2      	bne.n	8022f40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	2b02      	cmp	r3, #2
 8022f5e:	bf14      	ite	ne
 8022f60:	2301      	movne	r3, #1
 8022f62:	2300      	moveq	r3, #0
 8022f64:	b2db      	uxtb	r3, r3
}
 8022f66:	4618      	mov	r0, r3
 8022f68:	370c      	adds	r7, #12
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f70:	4770      	bx	lr
 8022f72:	bf00      	nop
 8022f74:	20009ae0 	.word	0x20009ae0

08022f78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8022f78:	b480      	push	{r7}
 8022f7a:	b085      	sub	sp, #20
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	6078      	str	r0, [r7, #4]
 8022f80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8022f82:	2300      	movs	r3, #0
 8022f84:	60fb      	str	r3, [r7, #12]
 8022f86:	e01f      	b.n	8022fc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8022f88:	4a41      	ldr	r2, [pc, #260]	; (8023090 <inc_lock+0x118>)
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	011b      	lsls	r3, r3, #4
 8022f8e:	4413      	add	r3, r2
 8022f90:	681a      	ldr	r2, [r3, #0]
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	429a      	cmp	r2, r3
 8022f98:	d113      	bne.n	8022fc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8022f9a:	4a3d      	ldr	r2, [pc, #244]	; (8023090 <inc_lock+0x118>)
 8022f9c:	68fb      	ldr	r3, [r7, #12]
 8022f9e:	011b      	lsls	r3, r3, #4
 8022fa0:	4413      	add	r3, r2
 8022fa2:	3304      	adds	r3, #4
 8022fa4:	681a      	ldr	r2, [r3, #0]
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8022faa:	429a      	cmp	r2, r3
 8022fac:	d109      	bne.n	8022fc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8022fae:	4a38      	ldr	r2, [pc, #224]	; (8023090 <inc_lock+0x118>)
 8022fb0:	68fb      	ldr	r3, [r7, #12]
 8022fb2:	011b      	lsls	r3, r3, #4
 8022fb4:	4413      	add	r3, r2
 8022fb6:	3308      	adds	r3, #8
 8022fb8:	681a      	ldr	r2, [r3, #0]
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8022fbe:	429a      	cmp	r2, r3
 8022fc0:	d006      	beq.n	8022fd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8022fc2:	68fb      	ldr	r3, [r7, #12]
 8022fc4:	3301      	adds	r3, #1
 8022fc6:	60fb      	str	r3, [r7, #12]
 8022fc8:	68fb      	ldr	r3, [r7, #12]
 8022fca:	2b01      	cmp	r3, #1
 8022fcc:	d9dc      	bls.n	8022f88 <inc_lock+0x10>
 8022fce:	e000      	b.n	8022fd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8022fd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8022fd2:	68fb      	ldr	r3, [r7, #12]
 8022fd4:	2b02      	cmp	r3, #2
 8022fd6:	d132      	bne.n	802303e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8022fd8:	2300      	movs	r3, #0
 8022fda:	60fb      	str	r3, [r7, #12]
 8022fdc:	e002      	b.n	8022fe4 <inc_lock+0x6c>
 8022fde:	68fb      	ldr	r3, [r7, #12]
 8022fe0:	3301      	adds	r3, #1
 8022fe2:	60fb      	str	r3, [r7, #12]
 8022fe4:	68fb      	ldr	r3, [r7, #12]
 8022fe6:	2b01      	cmp	r3, #1
 8022fe8:	d806      	bhi.n	8022ff8 <inc_lock+0x80>
 8022fea:	4a29      	ldr	r2, [pc, #164]	; (8023090 <inc_lock+0x118>)
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	011b      	lsls	r3, r3, #4
 8022ff0:	4413      	add	r3, r2
 8022ff2:	681b      	ldr	r3, [r3, #0]
 8022ff4:	2b00      	cmp	r3, #0
 8022ff6:	d1f2      	bne.n	8022fde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	2b02      	cmp	r3, #2
 8022ffc:	d101      	bne.n	8023002 <inc_lock+0x8a>
 8022ffe:	2300      	movs	r3, #0
 8023000:	e040      	b.n	8023084 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	681a      	ldr	r2, [r3, #0]
 8023006:	4922      	ldr	r1, [pc, #136]	; (8023090 <inc_lock+0x118>)
 8023008:	68fb      	ldr	r3, [r7, #12]
 802300a:	011b      	lsls	r3, r3, #4
 802300c:	440b      	add	r3, r1
 802300e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8023010:	687b      	ldr	r3, [r7, #4]
 8023012:	689a      	ldr	r2, [r3, #8]
 8023014:	491e      	ldr	r1, [pc, #120]	; (8023090 <inc_lock+0x118>)
 8023016:	68fb      	ldr	r3, [r7, #12]
 8023018:	011b      	lsls	r3, r3, #4
 802301a:	440b      	add	r3, r1
 802301c:	3304      	adds	r3, #4
 802301e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	695a      	ldr	r2, [r3, #20]
 8023024:	491a      	ldr	r1, [pc, #104]	; (8023090 <inc_lock+0x118>)
 8023026:	68fb      	ldr	r3, [r7, #12]
 8023028:	011b      	lsls	r3, r3, #4
 802302a:	440b      	add	r3, r1
 802302c:	3308      	adds	r3, #8
 802302e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8023030:	4a17      	ldr	r2, [pc, #92]	; (8023090 <inc_lock+0x118>)
 8023032:	68fb      	ldr	r3, [r7, #12]
 8023034:	011b      	lsls	r3, r3, #4
 8023036:	4413      	add	r3, r2
 8023038:	330c      	adds	r3, #12
 802303a:	2200      	movs	r2, #0
 802303c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802303e:	683b      	ldr	r3, [r7, #0]
 8023040:	2b00      	cmp	r3, #0
 8023042:	d009      	beq.n	8023058 <inc_lock+0xe0>
 8023044:	4a12      	ldr	r2, [pc, #72]	; (8023090 <inc_lock+0x118>)
 8023046:	68fb      	ldr	r3, [r7, #12]
 8023048:	011b      	lsls	r3, r3, #4
 802304a:	4413      	add	r3, r2
 802304c:	330c      	adds	r3, #12
 802304e:	881b      	ldrh	r3, [r3, #0]
 8023050:	2b00      	cmp	r3, #0
 8023052:	d001      	beq.n	8023058 <inc_lock+0xe0>
 8023054:	2300      	movs	r3, #0
 8023056:	e015      	b.n	8023084 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8023058:	683b      	ldr	r3, [r7, #0]
 802305a:	2b00      	cmp	r3, #0
 802305c:	d108      	bne.n	8023070 <inc_lock+0xf8>
 802305e:	4a0c      	ldr	r2, [pc, #48]	; (8023090 <inc_lock+0x118>)
 8023060:	68fb      	ldr	r3, [r7, #12]
 8023062:	011b      	lsls	r3, r3, #4
 8023064:	4413      	add	r3, r2
 8023066:	330c      	adds	r3, #12
 8023068:	881b      	ldrh	r3, [r3, #0]
 802306a:	3301      	adds	r3, #1
 802306c:	b29a      	uxth	r2, r3
 802306e:	e001      	b.n	8023074 <inc_lock+0xfc>
 8023070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023074:	4906      	ldr	r1, [pc, #24]	; (8023090 <inc_lock+0x118>)
 8023076:	68fb      	ldr	r3, [r7, #12]
 8023078:	011b      	lsls	r3, r3, #4
 802307a:	440b      	add	r3, r1
 802307c:	330c      	adds	r3, #12
 802307e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8023080:	68fb      	ldr	r3, [r7, #12]
 8023082:	3301      	adds	r3, #1
}
 8023084:	4618      	mov	r0, r3
 8023086:	3714      	adds	r7, #20
 8023088:	46bd      	mov	sp, r7
 802308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802308e:	4770      	bx	lr
 8023090:	20009ae0 	.word	0x20009ae0

08023094 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8023094:	b480      	push	{r7}
 8023096:	b085      	sub	sp, #20
 8023098:	af00      	add	r7, sp, #0
 802309a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	3b01      	subs	r3, #1
 80230a0:	607b      	str	r3, [r7, #4]
 80230a2:	687b      	ldr	r3, [r7, #4]
 80230a4:	2b01      	cmp	r3, #1
 80230a6:	d825      	bhi.n	80230f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80230a8:	4a17      	ldr	r2, [pc, #92]	; (8023108 <dec_lock+0x74>)
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	011b      	lsls	r3, r3, #4
 80230ae:	4413      	add	r3, r2
 80230b0:	330c      	adds	r3, #12
 80230b2:	881b      	ldrh	r3, [r3, #0]
 80230b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80230b6:	89fb      	ldrh	r3, [r7, #14]
 80230b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80230bc:	d101      	bne.n	80230c2 <dec_lock+0x2e>
 80230be:	2300      	movs	r3, #0
 80230c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80230c2:	89fb      	ldrh	r3, [r7, #14]
 80230c4:	2b00      	cmp	r3, #0
 80230c6:	d002      	beq.n	80230ce <dec_lock+0x3a>
 80230c8:	89fb      	ldrh	r3, [r7, #14]
 80230ca:	3b01      	subs	r3, #1
 80230cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80230ce:	4a0e      	ldr	r2, [pc, #56]	; (8023108 <dec_lock+0x74>)
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	011b      	lsls	r3, r3, #4
 80230d4:	4413      	add	r3, r2
 80230d6:	330c      	adds	r3, #12
 80230d8:	89fa      	ldrh	r2, [r7, #14]
 80230da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80230dc:	89fb      	ldrh	r3, [r7, #14]
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d105      	bne.n	80230ee <dec_lock+0x5a>
 80230e2:	4a09      	ldr	r2, [pc, #36]	; (8023108 <dec_lock+0x74>)
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	011b      	lsls	r3, r3, #4
 80230e8:	4413      	add	r3, r2
 80230ea:	2200      	movs	r2, #0
 80230ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80230ee:	2300      	movs	r3, #0
 80230f0:	737b      	strb	r3, [r7, #13]
 80230f2:	e001      	b.n	80230f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80230f4:	2302      	movs	r3, #2
 80230f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80230f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80230fa:	4618      	mov	r0, r3
 80230fc:	3714      	adds	r7, #20
 80230fe:	46bd      	mov	sp, r7
 8023100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023104:	4770      	bx	lr
 8023106:	bf00      	nop
 8023108:	20009ae0 	.word	0x20009ae0

0802310c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 802310c:	b480      	push	{r7}
 802310e:	b085      	sub	sp, #20
 8023110:	af00      	add	r7, sp, #0
 8023112:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8023114:	2300      	movs	r3, #0
 8023116:	60fb      	str	r3, [r7, #12]
 8023118:	e010      	b.n	802313c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802311a:	4a0d      	ldr	r2, [pc, #52]	; (8023150 <clear_lock+0x44>)
 802311c:	68fb      	ldr	r3, [r7, #12]
 802311e:	011b      	lsls	r3, r3, #4
 8023120:	4413      	add	r3, r2
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	687a      	ldr	r2, [r7, #4]
 8023126:	429a      	cmp	r2, r3
 8023128:	d105      	bne.n	8023136 <clear_lock+0x2a>
 802312a:	4a09      	ldr	r2, [pc, #36]	; (8023150 <clear_lock+0x44>)
 802312c:	68fb      	ldr	r3, [r7, #12]
 802312e:	011b      	lsls	r3, r3, #4
 8023130:	4413      	add	r3, r2
 8023132:	2200      	movs	r2, #0
 8023134:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8023136:	68fb      	ldr	r3, [r7, #12]
 8023138:	3301      	adds	r3, #1
 802313a:	60fb      	str	r3, [r7, #12]
 802313c:	68fb      	ldr	r3, [r7, #12]
 802313e:	2b01      	cmp	r3, #1
 8023140:	d9eb      	bls.n	802311a <clear_lock+0xe>
	}
}
 8023142:	bf00      	nop
 8023144:	bf00      	nop
 8023146:	3714      	adds	r7, #20
 8023148:	46bd      	mov	sp, r7
 802314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802314e:	4770      	bx	lr
 8023150:	20009ae0 	.word	0x20009ae0

08023154 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8023154:	b580      	push	{r7, lr}
 8023156:	b086      	sub	sp, #24
 8023158:	af00      	add	r7, sp, #0
 802315a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 802315c:	2300      	movs	r3, #0
 802315e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8023160:	687b      	ldr	r3, [r7, #4]
 8023162:	78db      	ldrb	r3, [r3, #3]
 8023164:	2b00      	cmp	r3, #0
 8023166:	d034      	beq.n	80231d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802316c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	7858      	ldrb	r0, [r3, #1]
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8023178:	2301      	movs	r3, #1
 802317a:	697a      	ldr	r2, [r7, #20]
 802317c:	f7ff fd40 	bl	8022c00 <disk_write>
 8023180:	4603      	mov	r3, r0
 8023182:	2b00      	cmp	r3, #0
 8023184:	d002      	beq.n	802318c <sync_window+0x38>
			res = FR_DISK_ERR;
 8023186:	2301      	movs	r3, #1
 8023188:	73fb      	strb	r3, [r7, #15]
 802318a:	e022      	b.n	80231d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	2200      	movs	r2, #0
 8023190:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8023192:	687b      	ldr	r3, [r7, #4]
 8023194:	6a1b      	ldr	r3, [r3, #32]
 8023196:	697a      	ldr	r2, [r7, #20]
 8023198:	1ad2      	subs	r2, r2, r3
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	699b      	ldr	r3, [r3, #24]
 802319e:	429a      	cmp	r2, r3
 80231a0:	d217      	bcs.n	80231d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	789b      	ldrb	r3, [r3, #2]
 80231a6:	613b      	str	r3, [r7, #16]
 80231a8:	e010      	b.n	80231cc <sync_window+0x78>
					wsect += fs->fsize;
 80231aa:	687b      	ldr	r3, [r7, #4]
 80231ac:	699b      	ldr	r3, [r3, #24]
 80231ae:	697a      	ldr	r2, [r7, #20]
 80231b0:	4413      	add	r3, r2
 80231b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	7858      	ldrb	r0, [r3, #1]
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80231be:	2301      	movs	r3, #1
 80231c0:	697a      	ldr	r2, [r7, #20]
 80231c2:	f7ff fd1d 	bl	8022c00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80231c6:	693b      	ldr	r3, [r7, #16]
 80231c8:	3b01      	subs	r3, #1
 80231ca:	613b      	str	r3, [r7, #16]
 80231cc:	693b      	ldr	r3, [r7, #16]
 80231ce:	2b01      	cmp	r3, #1
 80231d0:	d8eb      	bhi.n	80231aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80231d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80231d4:	4618      	mov	r0, r3
 80231d6:	3718      	adds	r7, #24
 80231d8:	46bd      	mov	sp, r7
 80231da:	bd80      	pop	{r7, pc}

080231dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80231dc:	b580      	push	{r7, lr}
 80231de:	b084      	sub	sp, #16
 80231e0:	af00      	add	r7, sp, #0
 80231e2:	6078      	str	r0, [r7, #4]
 80231e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80231e6:	2300      	movs	r3, #0
 80231e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80231ea:	687b      	ldr	r3, [r7, #4]
 80231ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231ee:	683a      	ldr	r2, [r7, #0]
 80231f0:	429a      	cmp	r2, r3
 80231f2:	d01b      	beq.n	802322c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80231f4:	6878      	ldr	r0, [r7, #4]
 80231f6:	f7ff ffad 	bl	8023154 <sync_window>
 80231fa:	4603      	mov	r3, r0
 80231fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80231fe:	7bfb      	ldrb	r3, [r7, #15]
 8023200:	2b00      	cmp	r3, #0
 8023202:	d113      	bne.n	802322c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	7858      	ldrb	r0, [r3, #1]
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802320e:	2301      	movs	r3, #1
 8023210:	683a      	ldr	r2, [r7, #0]
 8023212:	f7ff fcd5 	bl	8022bc0 <disk_read>
 8023216:	4603      	mov	r3, r0
 8023218:	2b00      	cmp	r3, #0
 802321a:	d004      	beq.n	8023226 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802321c:	f04f 33ff 	mov.w	r3, #4294967295
 8023220:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8023222:	2301      	movs	r3, #1
 8023224:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	683a      	ldr	r2, [r7, #0]
 802322a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 802322c:	7bfb      	ldrb	r3, [r7, #15]
}
 802322e:	4618      	mov	r0, r3
 8023230:	3710      	adds	r7, #16
 8023232:	46bd      	mov	sp, r7
 8023234:	bd80      	pop	{r7, pc}
	...

08023238 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8023238:	b580      	push	{r7, lr}
 802323a:	b084      	sub	sp, #16
 802323c:	af00      	add	r7, sp, #0
 802323e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8023240:	6878      	ldr	r0, [r7, #4]
 8023242:	f7ff ff87 	bl	8023154 <sync_window>
 8023246:	4603      	mov	r3, r0
 8023248:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802324a:	7bfb      	ldrb	r3, [r7, #15]
 802324c:	2b00      	cmp	r3, #0
 802324e:	d158      	bne.n	8023302 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	781b      	ldrb	r3, [r3, #0]
 8023254:	2b03      	cmp	r3, #3
 8023256:	d148      	bne.n	80232ea <sync_fs+0xb2>
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	791b      	ldrb	r3, [r3, #4]
 802325c:	2b01      	cmp	r3, #1
 802325e:	d144      	bne.n	80232ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	3330      	adds	r3, #48	; 0x30
 8023264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023268:	2100      	movs	r1, #0
 802326a:	4618      	mov	r0, r3
 802326c:	f7ff fda9 	bl	8022dc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8023270:	687b      	ldr	r3, [r7, #4]
 8023272:	3330      	adds	r3, #48	; 0x30
 8023274:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023278:	f64a 2155 	movw	r1, #43605	; 0xaa55
 802327c:	4618      	mov	r0, r3
 802327e:	f7ff fd38 	bl	8022cf2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8023282:	687b      	ldr	r3, [r7, #4]
 8023284:	3330      	adds	r3, #48	; 0x30
 8023286:	4921      	ldr	r1, [pc, #132]	; (802330c <sync_fs+0xd4>)
 8023288:	4618      	mov	r0, r3
 802328a:	f7ff fd4d 	bl	8022d28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	3330      	adds	r3, #48	; 0x30
 8023292:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8023296:	491e      	ldr	r1, [pc, #120]	; (8023310 <sync_fs+0xd8>)
 8023298:	4618      	mov	r0, r3
 802329a:	f7ff fd45 	bl	8022d28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	3330      	adds	r3, #48	; 0x30
 80232a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	691b      	ldr	r3, [r3, #16]
 80232aa:	4619      	mov	r1, r3
 80232ac:	4610      	mov	r0, r2
 80232ae:	f7ff fd3b 	bl	8022d28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	3330      	adds	r3, #48	; 0x30
 80232b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	68db      	ldr	r3, [r3, #12]
 80232be:	4619      	mov	r1, r3
 80232c0:	4610      	mov	r0, r2
 80232c2:	f7ff fd31 	bl	8022d28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	69db      	ldr	r3, [r3, #28]
 80232ca:	1c5a      	adds	r2, r3, #1
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	7858      	ldrb	r0, [r3, #1]
 80232d4:	687b      	ldr	r3, [r7, #4]
 80232d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80232de:	2301      	movs	r3, #1
 80232e0:	f7ff fc8e 	bl	8022c00 <disk_write>
			fs->fsi_flag = 0;
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	2200      	movs	r2, #0
 80232e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	785b      	ldrb	r3, [r3, #1]
 80232ee:	2200      	movs	r2, #0
 80232f0:	2100      	movs	r1, #0
 80232f2:	4618      	mov	r0, r3
 80232f4:	f7ff fca4 	bl	8022c40 <disk_ioctl>
 80232f8:	4603      	mov	r3, r0
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d001      	beq.n	8023302 <sync_fs+0xca>
 80232fe:	2301      	movs	r3, #1
 8023300:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8023302:	7bfb      	ldrb	r3, [r7, #15]
}
 8023304:	4618      	mov	r0, r3
 8023306:	3710      	adds	r7, #16
 8023308:	46bd      	mov	sp, r7
 802330a:	bd80      	pop	{r7, pc}
 802330c:	41615252 	.word	0x41615252
 8023310:	61417272 	.word	0x61417272

08023314 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8023314:	b480      	push	{r7}
 8023316:	b083      	sub	sp, #12
 8023318:	af00      	add	r7, sp, #0
 802331a:	6078      	str	r0, [r7, #4]
 802331c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 802331e:	683b      	ldr	r3, [r7, #0]
 8023320:	3b02      	subs	r3, #2
 8023322:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	695b      	ldr	r3, [r3, #20]
 8023328:	3b02      	subs	r3, #2
 802332a:	683a      	ldr	r2, [r7, #0]
 802332c:	429a      	cmp	r2, r3
 802332e:	d301      	bcc.n	8023334 <clust2sect+0x20>
 8023330:	2300      	movs	r3, #0
 8023332:	e008      	b.n	8023346 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	895b      	ldrh	r3, [r3, #10]
 8023338:	461a      	mov	r2, r3
 802333a:	683b      	ldr	r3, [r7, #0]
 802333c:	fb03 f202 	mul.w	r2, r3, r2
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023344:	4413      	add	r3, r2
}
 8023346:	4618      	mov	r0, r3
 8023348:	370c      	adds	r7, #12
 802334a:	46bd      	mov	sp, r7
 802334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023350:	4770      	bx	lr

08023352 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8023352:	b580      	push	{r7, lr}
 8023354:	b086      	sub	sp, #24
 8023356:	af00      	add	r7, sp, #0
 8023358:	6078      	str	r0, [r7, #4]
 802335a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8023362:	683b      	ldr	r3, [r7, #0]
 8023364:	2b01      	cmp	r3, #1
 8023366:	d904      	bls.n	8023372 <get_fat+0x20>
 8023368:	693b      	ldr	r3, [r7, #16]
 802336a:	695b      	ldr	r3, [r3, #20]
 802336c:	683a      	ldr	r2, [r7, #0]
 802336e:	429a      	cmp	r2, r3
 8023370:	d302      	bcc.n	8023378 <get_fat+0x26>
		val = 1;	/* Internal error */
 8023372:	2301      	movs	r3, #1
 8023374:	617b      	str	r3, [r7, #20]
 8023376:	e091      	b.n	802349c <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8023378:	f04f 33ff 	mov.w	r3, #4294967295
 802337c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 802337e:	693b      	ldr	r3, [r7, #16]
 8023380:	781b      	ldrb	r3, [r3, #0]
 8023382:	2b03      	cmp	r3, #3
 8023384:	d063      	beq.n	802344e <get_fat+0xfc>
 8023386:	2b03      	cmp	r3, #3
 8023388:	dc7e      	bgt.n	8023488 <get_fat+0x136>
 802338a:	2b01      	cmp	r3, #1
 802338c:	d002      	beq.n	8023394 <get_fat+0x42>
 802338e:	2b02      	cmp	r3, #2
 8023390:	d042      	beq.n	8023418 <get_fat+0xc6>
 8023392:	e079      	b.n	8023488 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8023394:	683b      	ldr	r3, [r7, #0]
 8023396:	60fb      	str	r3, [r7, #12]
 8023398:	68fb      	ldr	r3, [r7, #12]
 802339a:	085b      	lsrs	r3, r3, #1
 802339c:	68fa      	ldr	r2, [r7, #12]
 802339e:	4413      	add	r3, r2
 80233a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80233a2:	693b      	ldr	r3, [r7, #16]
 80233a4:	6a1a      	ldr	r2, [r3, #32]
 80233a6:	68fb      	ldr	r3, [r7, #12]
 80233a8:	0b1b      	lsrs	r3, r3, #12
 80233aa:	4413      	add	r3, r2
 80233ac:	4619      	mov	r1, r3
 80233ae:	6938      	ldr	r0, [r7, #16]
 80233b0:	f7ff ff14 	bl	80231dc <move_window>
 80233b4:	4603      	mov	r3, r0
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	d169      	bne.n	802348e <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 80233ba:	68fb      	ldr	r3, [r7, #12]
 80233bc:	1c5a      	adds	r2, r3, #1
 80233be:	60fa      	str	r2, [r7, #12]
 80233c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233c4:	693a      	ldr	r2, [r7, #16]
 80233c6:	4413      	add	r3, r2
 80233c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80233cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80233ce:	693b      	ldr	r3, [r7, #16]
 80233d0:	6a1a      	ldr	r2, [r3, #32]
 80233d2:	68fb      	ldr	r3, [r7, #12]
 80233d4:	0b1b      	lsrs	r3, r3, #12
 80233d6:	4413      	add	r3, r2
 80233d8:	4619      	mov	r1, r3
 80233da:	6938      	ldr	r0, [r7, #16]
 80233dc:	f7ff fefe 	bl	80231dc <move_window>
 80233e0:	4603      	mov	r3, r0
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	d155      	bne.n	8023492 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 80233e6:	68fb      	ldr	r3, [r7, #12]
 80233e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80233ec:	693a      	ldr	r2, [r7, #16]
 80233ee:	4413      	add	r3, r2
 80233f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80233f4:	021b      	lsls	r3, r3, #8
 80233f6:	461a      	mov	r2, r3
 80233f8:	68bb      	ldr	r3, [r7, #8]
 80233fa:	4313      	orrs	r3, r2
 80233fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80233fe:	683b      	ldr	r3, [r7, #0]
 8023400:	f003 0301 	and.w	r3, r3, #1
 8023404:	2b00      	cmp	r3, #0
 8023406:	d002      	beq.n	802340e <get_fat+0xbc>
 8023408:	68bb      	ldr	r3, [r7, #8]
 802340a:	091b      	lsrs	r3, r3, #4
 802340c:	e002      	b.n	8023414 <get_fat+0xc2>
 802340e:	68bb      	ldr	r3, [r7, #8]
 8023410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023414:	617b      	str	r3, [r7, #20]
			break;
 8023416:	e041      	b.n	802349c <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8023418:	693b      	ldr	r3, [r7, #16]
 802341a:	6a1a      	ldr	r2, [r3, #32]
 802341c:	683b      	ldr	r3, [r7, #0]
 802341e:	0adb      	lsrs	r3, r3, #11
 8023420:	4413      	add	r3, r2
 8023422:	4619      	mov	r1, r3
 8023424:	6938      	ldr	r0, [r7, #16]
 8023426:	f7ff fed9 	bl	80231dc <move_window>
 802342a:	4603      	mov	r3, r0
 802342c:	2b00      	cmp	r3, #0
 802342e:	d132      	bne.n	8023496 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8023430:	693b      	ldr	r3, [r7, #16]
 8023432:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023436:	683b      	ldr	r3, [r7, #0]
 8023438:	0059      	lsls	r1, r3, #1
 802343a:	f640 73fe 	movw	r3, #4094	; 0xffe
 802343e:	400b      	ands	r3, r1
 8023440:	4413      	add	r3, r2
 8023442:	4618      	mov	r0, r3
 8023444:	f7ff fc1a 	bl	8022c7c <ld_word>
 8023448:	4603      	mov	r3, r0
 802344a:	617b      	str	r3, [r7, #20]
			break;
 802344c:	e026      	b.n	802349c <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802344e:	693b      	ldr	r3, [r7, #16]
 8023450:	6a1a      	ldr	r2, [r3, #32]
 8023452:	683b      	ldr	r3, [r7, #0]
 8023454:	0a9b      	lsrs	r3, r3, #10
 8023456:	4413      	add	r3, r2
 8023458:	4619      	mov	r1, r3
 802345a:	6938      	ldr	r0, [r7, #16]
 802345c:	f7ff febe 	bl	80231dc <move_window>
 8023460:	4603      	mov	r3, r0
 8023462:	2b00      	cmp	r3, #0
 8023464:	d119      	bne.n	802349a <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8023466:	693b      	ldr	r3, [r7, #16]
 8023468:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802346c:	683b      	ldr	r3, [r7, #0]
 802346e:	0099      	lsls	r1, r3, #2
 8023470:	f640 73fc 	movw	r3, #4092	; 0xffc
 8023474:	400b      	ands	r3, r1
 8023476:	4413      	add	r3, r2
 8023478:	4618      	mov	r0, r3
 802347a:	f7ff fc17 	bl	8022cac <ld_dword>
 802347e:	4603      	mov	r3, r0
 8023480:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8023484:	617b      	str	r3, [r7, #20]
			break;
 8023486:	e009      	b.n	802349c <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8023488:	2301      	movs	r3, #1
 802348a:	617b      	str	r3, [r7, #20]
 802348c:	e006      	b.n	802349c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802348e:	bf00      	nop
 8023490:	e004      	b.n	802349c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023492:	bf00      	nop
 8023494:	e002      	b.n	802349c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8023496:	bf00      	nop
 8023498:	e000      	b.n	802349c <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802349a:	bf00      	nop
		}
	}

	return val;
 802349c:	697b      	ldr	r3, [r7, #20]
}
 802349e:	4618      	mov	r0, r3
 80234a0:	3718      	adds	r7, #24
 80234a2:	46bd      	mov	sp, r7
 80234a4:	bd80      	pop	{r7, pc}

080234a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80234a6:	b590      	push	{r4, r7, lr}
 80234a8:	b089      	sub	sp, #36	; 0x24
 80234aa:	af00      	add	r7, sp, #0
 80234ac:	60f8      	str	r0, [r7, #12]
 80234ae:	60b9      	str	r1, [r7, #8]
 80234b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80234b2:	2302      	movs	r3, #2
 80234b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80234b6:	68bb      	ldr	r3, [r7, #8]
 80234b8:	2b01      	cmp	r3, #1
 80234ba:	f240 80d5 	bls.w	8023668 <put_fat+0x1c2>
 80234be:	68fb      	ldr	r3, [r7, #12]
 80234c0:	695b      	ldr	r3, [r3, #20]
 80234c2:	68ba      	ldr	r2, [r7, #8]
 80234c4:	429a      	cmp	r2, r3
 80234c6:	f080 80cf 	bcs.w	8023668 <put_fat+0x1c2>
		switch (fs->fs_type) {
 80234ca:	68fb      	ldr	r3, [r7, #12]
 80234cc:	781b      	ldrb	r3, [r3, #0]
 80234ce:	2b03      	cmp	r3, #3
 80234d0:	f000 8097 	beq.w	8023602 <put_fat+0x15c>
 80234d4:	2b03      	cmp	r3, #3
 80234d6:	f300 80d0 	bgt.w	802367a <put_fat+0x1d4>
 80234da:	2b01      	cmp	r3, #1
 80234dc:	d002      	beq.n	80234e4 <put_fat+0x3e>
 80234de:	2b02      	cmp	r3, #2
 80234e0:	d06e      	beq.n	80235c0 <put_fat+0x11a>
 80234e2:	e0ca      	b.n	802367a <put_fat+0x1d4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80234e4:	68bb      	ldr	r3, [r7, #8]
 80234e6:	61bb      	str	r3, [r7, #24]
 80234e8:	69bb      	ldr	r3, [r7, #24]
 80234ea:	085b      	lsrs	r3, r3, #1
 80234ec:	69ba      	ldr	r2, [r7, #24]
 80234ee:	4413      	add	r3, r2
 80234f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80234f2:	68fb      	ldr	r3, [r7, #12]
 80234f4:	6a1a      	ldr	r2, [r3, #32]
 80234f6:	69bb      	ldr	r3, [r7, #24]
 80234f8:	0b1b      	lsrs	r3, r3, #12
 80234fa:	4413      	add	r3, r2
 80234fc:	4619      	mov	r1, r3
 80234fe:	68f8      	ldr	r0, [r7, #12]
 8023500:	f7ff fe6c 	bl	80231dc <move_window>
 8023504:	4603      	mov	r3, r0
 8023506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8023508:	7ffb      	ldrb	r3, [r7, #31]
 802350a:	2b00      	cmp	r3, #0
 802350c:	f040 80ae 	bne.w	802366c <put_fat+0x1c6>
			p = fs->win + bc++ % SS(fs);
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023516:	69bb      	ldr	r3, [r7, #24]
 8023518:	1c59      	adds	r1, r3, #1
 802351a:	61b9      	str	r1, [r7, #24]
 802351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023520:	4413      	add	r3, r2
 8023522:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8023524:	68bb      	ldr	r3, [r7, #8]
 8023526:	f003 0301 	and.w	r3, r3, #1
 802352a:	2b00      	cmp	r3, #0
 802352c:	d00d      	beq.n	802354a <put_fat+0xa4>
 802352e:	697b      	ldr	r3, [r7, #20]
 8023530:	781b      	ldrb	r3, [r3, #0]
 8023532:	b25b      	sxtb	r3, r3
 8023534:	f003 030f 	and.w	r3, r3, #15
 8023538:	b25a      	sxtb	r2, r3
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	b2db      	uxtb	r3, r3
 802353e:	011b      	lsls	r3, r3, #4
 8023540:	b25b      	sxtb	r3, r3
 8023542:	4313      	orrs	r3, r2
 8023544:	b25b      	sxtb	r3, r3
 8023546:	b2db      	uxtb	r3, r3
 8023548:	e001      	b.n	802354e <put_fat+0xa8>
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	b2db      	uxtb	r3, r3
 802354e:	697a      	ldr	r2, [r7, #20]
 8023550:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8023552:	68fb      	ldr	r3, [r7, #12]
 8023554:	2201      	movs	r2, #1
 8023556:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	6a1a      	ldr	r2, [r3, #32]
 802355c:	69bb      	ldr	r3, [r7, #24]
 802355e:	0b1b      	lsrs	r3, r3, #12
 8023560:	4413      	add	r3, r2
 8023562:	4619      	mov	r1, r3
 8023564:	68f8      	ldr	r0, [r7, #12]
 8023566:	f7ff fe39 	bl	80231dc <move_window>
 802356a:	4603      	mov	r3, r0
 802356c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802356e:	7ffb      	ldrb	r3, [r7, #31]
 8023570:	2b00      	cmp	r3, #0
 8023572:	d17d      	bne.n	8023670 <put_fat+0x1ca>
			p = fs->win + bc % SS(fs);
 8023574:	68fb      	ldr	r3, [r7, #12]
 8023576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802357a:	69bb      	ldr	r3, [r7, #24]
 802357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023580:	4413      	add	r3, r2
 8023582:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8023584:	68bb      	ldr	r3, [r7, #8]
 8023586:	f003 0301 	and.w	r3, r3, #1
 802358a:	2b00      	cmp	r3, #0
 802358c:	d003      	beq.n	8023596 <put_fat+0xf0>
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	091b      	lsrs	r3, r3, #4
 8023592:	b2db      	uxtb	r3, r3
 8023594:	e00e      	b.n	80235b4 <put_fat+0x10e>
 8023596:	697b      	ldr	r3, [r7, #20]
 8023598:	781b      	ldrb	r3, [r3, #0]
 802359a:	b25b      	sxtb	r3, r3
 802359c:	f023 030f 	bic.w	r3, r3, #15
 80235a0:	b25a      	sxtb	r2, r3
 80235a2:	687b      	ldr	r3, [r7, #4]
 80235a4:	0a1b      	lsrs	r3, r3, #8
 80235a6:	b25b      	sxtb	r3, r3
 80235a8:	f003 030f 	and.w	r3, r3, #15
 80235ac:	b25b      	sxtb	r3, r3
 80235ae:	4313      	orrs	r3, r2
 80235b0:	b25b      	sxtb	r3, r3
 80235b2:	b2db      	uxtb	r3, r3
 80235b4:	697a      	ldr	r2, [r7, #20]
 80235b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80235b8:	68fb      	ldr	r3, [r7, #12]
 80235ba:	2201      	movs	r2, #1
 80235bc:	70da      	strb	r2, [r3, #3]
			break;
 80235be:	e05c      	b.n	802367a <put_fat+0x1d4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80235c0:	68fb      	ldr	r3, [r7, #12]
 80235c2:	6a1a      	ldr	r2, [r3, #32]
 80235c4:	68bb      	ldr	r3, [r7, #8]
 80235c6:	0adb      	lsrs	r3, r3, #11
 80235c8:	4413      	add	r3, r2
 80235ca:	4619      	mov	r1, r3
 80235cc:	68f8      	ldr	r0, [r7, #12]
 80235ce:	f7ff fe05 	bl	80231dc <move_window>
 80235d2:	4603      	mov	r3, r0
 80235d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80235d6:	7ffb      	ldrb	r3, [r7, #31]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d14b      	bne.n	8023674 <put_fat+0x1ce>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80235e2:	68bb      	ldr	r3, [r7, #8]
 80235e4:	0059      	lsls	r1, r3, #1
 80235e6:	f640 73fe 	movw	r3, #4094	; 0xffe
 80235ea:	400b      	ands	r3, r1
 80235ec:	4413      	add	r3, r2
 80235ee:	687a      	ldr	r2, [r7, #4]
 80235f0:	b292      	uxth	r2, r2
 80235f2:	4611      	mov	r1, r2
 80235f4:	4618      	mov	r0, r3
 80235f6:	f7ff fb7c 	bl	8022cf2 <st_word>
			fs->wflag = 1;
 80235fa:	68fb      	ldr	r3, [r7, #12]
 80235fc:	2201      	movs	r2, #1
 80235fe:	70da      	strb	r2, [r3, #3]
			break;
 8023600:	e03b      	b.n	802367a <put_fat+0x1d4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8023602:	68fb      	ldr	r3, [r7, #12]
 8023604:	6a1a      	ldr	r2, [r3, #32]
 8023606:	68bb      	ldr	r3, [r7, #8]
 8023608:	0a9b      	lsrs	r3, r3, #10
 802360a:	4413      	add	r3, r2
 802360c:	4619      	mov	r1, r3
 802360e:	68f8      	ldr	r0, [r7, #12]
 8023610:	f7ff fde4 	bl	80231dc <move_window>
 8023614:	4603      	mov	r3, r0
 8023616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8023618:	7ffb      	ldrb	r3, [r7, #31]
 802361a:	2b00      	cmp	r3, #0
 802361c:	d12c      	bne.n	8023678 <put_fat+0x1d2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8023624:	68fb      	ldr	r3, [r7, #12]
 8023626:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802362a:	68bb      	ldr	r3, [r7, #8]
 802362c:	0099      	lsls	r1, r3, #2
 802362e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8023632:	400b      	ands	r3, r1
 8023634:	4413      	add	r3, r2
 8023636:	4618      	mov	r0, r3
 8023638:	f7ff fb38 	bl	8022cac <ld_dword>
 802363c:	4603      	mov	r3, r0
 802363e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8023642:	4323      	orrs	r3, r4
 8023644:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8023646:	68fb      	ldr	r3, [r7, #12]
 8023648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802364c:	68bb      	ldr	r3, [r7, #8]
 802364e:	0099      	lsls	r1, r3, #2
 8023650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8023654:	400b      	ands	r3, r1
 8023656:	4413      	add	r3, r2
 8023658:	6879      	ldr	r1, [r7, #4]
 802365a:	4618      	mov	r0, r3
 802365c:	f7ff fb64 	bl	8022d28 <st_dword>
			fs->wflag = 1;
 8023660:	68fb      	ldr	r3, [r7, #12]
 8023662:	2201      	movs	r2, #1
 8023664:	70da      	strb	r2, [r3, #3]
			break;
 8023666:	e008      	b.n	802367a <put_fat+0x1d4>
		}
	}
 8023668:	bf00      	nop
 802366a:	e006      	b.n	802367a <put_fat+0x1d4>
			if (res != FR_OK) break;
 802366c:	bf00      	nop
 802366e:	e004      	b.n	802367a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023670:	bf00      	nop
 8023672:	e002      	b.n	802367a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023674:	bf00      	nop
 8023676:	e000      	b.n	802367a <put_fat+0x1d4>
			if (res != FR_OK) break;
 8023678:	bf00      	nop
	return res;
 802367a:	7ffb      	ldrb	r3, [r7, #31]
}
 802367c:	4618      	mov	r0, r3
 802367e:	3724      	adds	r7, #36	; 0x24
 8023680:	46bd      	mov	sp, r7
 8023682:	bd90      	pop	{r4, r7, pc}

08023684 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8023684:	b580      	push	{r7, lr}
 8023686:	b088      	sub	sp, #32
 8023688:	af00      	add	r7, sp, #0
 802368a:	60f8      	str	r0, [r7, #12]
 802368c:	60b9      	str	r1, [r7, #8]
 802368e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8023690:	2300      	movs	r3, #0
 8023692:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8023694:	68fb      	ldr	r3, [r7, #12]
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 802369a:	68bb      	ldr	r3, [r7, #8]
 802369c:	2b01      	cmp	r3, #1
 802369e:	d904      	bls.n	80236aa <remove_chain+0x26>
 80236a0:	69bb      	ldr	r3, [r7, #24]
 80236a2:	695b      	ldr	r3, [r3, #20]
 80236a4:	68ba      	ldr	r2, [r7, #8]
 80236a6:	429a      	cmp	r2, r3
 80236a8:	d301      	bcc.n	80236ae <remove_chain+0x2a>
 80236aa:	2302      	movs	r3, #2
 80236ac:	e04b      	b.n	8023746 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	d00c      	beq.n	80236ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80236b4:	f04f 32ff 	mov.w	r2, #4294967295
 80236b8:	6879      	ldr	r1, [r7, #4]
 80236ba:	69b8      	ldr	r0, [r7, #24]
 80236bc:	f7ff fef3 	bl	80234a6 <put_fat>
 80236c0:	4603      	mov	r3, r0
 80236c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80236c4:	7ffb      	ldrb	r3, [r7, #31]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d001      	beq.n	80236ce <remove_chain+0x4a>
 80236ca:	7ffb      	ldrb	r3, [r7, #31]
 80236cc:	e03b      	b.n	8023746 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80236ce:	68b9      	ldr	r1, [r7, #8]
 80236d0:	68f8      	ldr	r0, [r7, #12]
 80236d2:	f7ff fe3e 	bl	8023352 <get_fat>
 80236d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80236d8:	697b      	ldr	r3, [r7, #20]
 80236da:	2b00      	cmp	r3, #0
 80236dc:	d031      	beq.n	8023742 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80236de:	697b      	ldr	r3, [r7, #20]
 80236e0:	2b01      	cmp	r3, #1
 80236e2:	d101      	bne.n	80236e8 <remove_chain+0x64>
 80236e4:	2302      	movs	r3, #2
 80236e6:	e02e      	b.n	8023746 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80236e8:	697b      	ldr	r3, [r7, #20]
 80236ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236ee:	d101      	bne.n	80236f4 <remove_chain+0x70>
 80236f0:	2301      	movs	r3, #1
 80236f2:	e028      	b.n	8023746 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80236f4:	2200      	movs	r2, #0
 80236f6:	68b9      	ldr	r1, [r7, #8]
 80236f8:	69b8      	ldr	r0, [r7, #24]
 80236fa:	f7ff fed4 	bl	80234a6 <put_fat>
 80236fe:	4603      	mov	r3, r0
 8023700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8023702:	7ffb      	ldrb	r3, [r7, #31]
 8023704:	2b00      	cmp	r3, #0
 8023706:	d001      	beq.n	802370c <remove_chain+0x88>
 8023708:	7ffb      	ldrb	r3, [r7, #31]
 802370a:	e01c      	b.n	8023746 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 802370c:	69bb      	ldr	r3, [r7, #24]
 802370e:	691a      	ldr	r2, [r3, #16]
 8023710:	69bb      	ldr	r3, [r7, #24]
 8023712:	695b      	ldr	r3, [r3, #20]
 8023714:	3b02      	subs	r3, #2
 8023716:	429a      	cmp	r2, r3
 8023718:	d20b      	bcs.n	8023732 <remove_chain+0xae>
			fs->free_clst++;
 802371a:	69bb      	ldr	r3, [r7, #24]
 802371c:	691b      	ldr	r3, [r3, #16]
 802371e:	1c5a      	adds	r2, r3, #1
 8023720:	69bb      	ldr	r3, [r7, #24]
 8023722:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8023724:	69bb      	ldr	r3, [r7, #24]
 8023726:	791b      	ldrb	r3, [r3, #4]
 8023728:	f043 0301 	orr.w	r3, r3, #1
 802372c:	b2da      	uxtb	r2, r3
 802372e:	69bb      	ldr	r3, [r7, #24]
 8023730:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8023732:	697b      	ldr	r3, [r7, #20]
 8023734:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8023736:	69bb      	ldr	r3, [r7, #24]
 8023738:	695b      	ldr	r3, [r3, #20]
 802373a:	68ba      	ldr	r2, [r7, #8]
 802373c:	429a      	cmp	r2, r3
 802373e:	d3c6      	bcc.n	80236ce <remove_chain+0x4a>
 8023740:	e000      	b.n	8023744 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8023742:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8023744:	2300      	movs	r3, #0
}
 8023746:	4618      	mov	r0, r3
 8023748:	3720      	adds	r7, #32
 802374a:	46bd      	mov	sp, r7
 802374c:	bd80      	pop	{r7, pc}

0802374e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 802374e:	b580      	push	{r7, lr}
 8023750:	b088      	sub	sp, #32
 8023752:	af00      	add	r7, sp, #0
 8023754:	6078      	str	r0, [r7, #4]
 8023756:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 802375e:	683b      	ldr	r3, [r7, #0]
 8023760:	2b00      	cmp	r3, #0
 8023762:	d10d      	bne.n	8023780 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8023764:	693b      	ldr	r3, [r7, #16]
 8023766:	68db      	ldr	r3, [r3, #12]
 8023768:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 802376a:	69bb      	ldr	r3, [r7, #24]
 802376c:	2b00      	cmp	r3, #0
 802376e:	d004      	beq.n	802377a <create_chain+0x2c>
 8023770:	693b      	ldr	r3, [r7, #16]
 8023772:	695b      	ldr	r3, [r3, #20]
 8023774:	69ba      	ldr	r2, [r7, #24]
 8023776:	429a      	cmp	r2, r3
 8023778:	d31b      	bcc.n	80237b2 <create_chain+0x64>
 802377a:	2301      	movs	r3, #1
 802377c:	61bb      	str	r3, [r7, #24]
 802377e:	e018      	b.n	80237b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8023780:	6839      	ldr	r1, [r7, #0]
 8023782:	6878      	ldr	r0, [r7, #4]
 8023784:	f7ff fde5 	bl	8023352 <get_fat>
 8023788:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	2b01      	cmp	r3, #1
 802378e:	d801      	bhi.n	8023794 <create_chain+0x46>
 8023790:	2301      	movs	r3, #1
 8023792:	e070      	b.n	8023876 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8023794:	68fb      	ldr	r3, [r7, #12]
 8023796:	f1b3 3fff 	cmp.w	r3, #4294967295
 802379a:	d101      	bne.n	80237a0 <create_chain+0x52>
 802379c:	68fb      	ldr	r3, [r7, #12]
 802379e:	e06a      	b.n	8023876 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80237a0:	693b      	ldr	r3, [r7, #16]
 80237a2:	695b      	ldr	r3, [r3, #20]
 80237a4:	68fa      	ldr	r2, [r7, #12]
 80237a6:	429a      	cmp	r2, r3
 80237a8:	d201      	bcs.n	80237ae <create_chain+0x60>
 80237aa:	68fb      	ldr	r3, [r7, #12]
 80237ac:	e063      	b.n	8023876 <create_chain+0x128>
		scl = clst;
 80237ae:	683b      	ldr	r3, [r7, #0]
 80237b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80237b2:	69bb      	ldr	r3, [r7, #24]
 80237b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80237b6:	69fb      	ldr	r3, [r7, #28]
 80237b8:	3301      	adds	r3, #1
 80237ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80237bc:	693b      	ldr	r3, [r7, #16]
 80237be:	695b      	ldr	r3, [r3, #20]
 80237c0:	69fa      	ldr	r2, [r7, #28]
 80237c2:	429a      	cmp	r2, r3
 80237c4:	d307      	bcc.n	80237d6 <create_chain+0x88>
				ncl = 2;
 80237c6:	2302      	movs	r3, #2
 80237c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80237ca:	69fa      	ldr	r2, [r7, #28]
 80237cc:	69bb      	ldr	r3, [r7, #24]
 80237ce:	429a      	cmp	r2, r3
 80237d0:	d901      	bls.n	80237d6 <create_chain+0x88>
 80237d2:	2300      	movs	r3, #0
 80237d4:	e04f      	b.n	8023876 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80237d6:	69f9      	ldr	r1, [r7, #28]
 80237d8:	6878      	ldr	r0, [r7, #4]
 80237da:	f7ff fdba 	bl	8023352 <get_fat>
 80237de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80237e0:	68fb      	ldr	r3, [r7, #12]
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	d00e      	beq.n	8023804 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80237e6:	68fb      	ldr	r3, [r7, #12]
 80237e8:	2b01      	cmp	r3, #1
 80237ea:	d003      	beq.n	80237f4 <create_chain+0xa6>
 80237ec:	68fb      	ldr	r3, [r7, #12]
 80237ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80237f2:	d101      	bne.n	80237f8 <create_chain+0xaa>
 80237f4:	68fb      	ldr	r3, [r7, #12]
 80237f6:	e03e      	b.n	8023876 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80237f8:	69fa      	ldr	r2, [r7, #28]
 80237fa:	69bb      	ldr	r3, [r7, #24]
 80237fc:	429a      	cmp	r2, r3
 80237fe:	d1da      	bne.n	80237b6 <create_chain+0x68>
 8023800:	2300      	movs	r3, #0
 8023802:	e038      	b.n	8023876 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8023804:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8023806:	f04f 32ff 	mov.w	r2, #4294967295
 802380a:	69f9      	ldr	r1, [r7, #28]
 802380c:	6938      	ldr	r0, [r7, #16]
 802380e:	f7ff fe4a 	bl	80234a6 <put_fat>
 8023812:	4603      	mov	r3, r0
 8023814:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8023816:	7dfb      	ldrb	r3, [r7, #23]
 8023818:	2b00      	cmp	r3, #0
 802381a:	d109      	bne.n	8023830 <create_chain+0xe2>
 802381c:	683b      	ldr	r3, [r7, #0]
 802381e:	2b00      	cmp	r3, #0
 8023820:	d006      	beq.n	8023830 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8023822:	69fa      	ldr	r2, [r7, #28]
 8023824:	6839      	ldr	r1, [r7, #0]
 8023826:	6938      	ldr	r0, [r7, #16]
 8023828:	f7ff fe3d 	bl	80234a6 <put_fat>
 802382c:	4603      	mov	r3, r0
 802382e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8023830:	7dfb      	ldrb	r3, [r7, #23]
 8023832:	2b00      	cmp	r3, #0
 8023834:	d116      	bne.n	8023864 <create_chain+0x116>
		fs->last_clst = ncl;
 8023836:	693b      	ldr	r3, [r7, #16]
 8023838:	69fa      	ldr	r2, [r7, #28]
 802383a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 802383c:	693b      	ldr	r3, [r7, #16]
 802383e:	691a      	ldr	r2, [r3, #16]
 8023840:	693b      	ldr	r3, [r7, #16]
 8023842:	695b      	ldr	r3, [r3, #20]
 8023844:	3b02      	subs	r3, #2
 8023846:	429a      	cmp	r2, r3
 8023848:	d804      	bhi.n	8023854 <create_chain+0x106>
 802384a:	693b      	ldr	r3, [r7, #16]
 802384c:	691b      	ldr	r3, [r3, #16]
 802384e:	1e5a      	subs	r2, r3, #1
 8023850:	693b      	ldr	r3, [r7, #16]
 8023852:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8023854:	693b      	ldr	r3, [r7, #16]
 8023856:	791b      	ldrb	r3, [r3, #4]
 8023858:	f043 0301 	orr.w	r3, r3, #1
 802385c:	b2da      	uxtb	r2, r3
 802385e:	693b      	ldr	r3, [r7, #16]
 8023860:	711a      	strb	r2, [r3, #4]
 8023862:	e007      	b.n	8023874 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8023864:	7dfb      	ldrb	r3, [r7, #23]
 8023866:	2b01      	cmp	r3, #1
 8023868:	d102      	bne.n	8023870 <create_chain+0x122>
 802386a:	f04f 33ff 	mov.w	r3, #4294967295
 802386e:	e000      	b.n	8023872 <create_chain+0x124>
 8023870:	2301      	movs	r3, #1
 8023872:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8023874:	69fb      	ldr	r3, [r7, #28]
}
 8023876:	4618      	mov	r0, r3
 8023878:	3720      	adds	r7, #32
 802387a:	46bd      	mov	sp, r7
 802387c:	bd80      	pop	{r7, pc}

0802387e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 802387e:	b580      	push	{r7, lr}
 8023880:	b086      	sub	sp, #24
 8023882:	af00      	add	r7, sp, #0
 8023884:	6078      	str	r0, [r7, #4]
 8023886:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	681b      	ldr	r3, [r3, #0]
 802388c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 802388e:	683b      	ldr	r3, [r7, #0]
 8023890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8023894:	d204      	bcs.n	80238a0 <dir_sdi+0x22>
 8023896:	683b      	ldr	r3, [r7, #0]
 8023898:	f003 031f 	and.w	r3, r3, #31
 802389c:	2b00      	cmp	r3, #0
 802389e:	d001      	beq.n	80238a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80238a0:	2302      	movs	r3, #2
 80238a2:	e063      	b.n	802396c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	683a      	ldr	r2, [r7, #0]
 80238a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80238aa:	687b      	ldr	r3, [r7, #4]
 80238ac:	689b      	ldr	r3, [r3, #8]
 80238ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80238b0:	697b      	ldr	r3, [r7, #20]
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	d106      	bne.n	80238c4 <dir_sdi+0x46>
 80238b6:	693b      	ldr	r3, [r7, #16]
 80238b8:	781b      	ldrb	r3, [r3, #0]
 80238ba:	2b02      	cmp	r3, #2
 80238bc:	d902      	bls.n	80238c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80238be:	693b      	ldr	r3, [r7, #16]
 80238c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80238c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80238c4:	697b      	ldr	r3, [r7, #20]
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d10c      	bne.n	80238e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80238ca:	683b      	ldr	r3, [r7, #0]
 80238cc:	095b      	lsrs	r3, r3, #5
 80238ce:	693a      	ldr	r2, [r7, #16]
 80238d0:	8912      	ldrh	r2, [r2, #8]
 80238d2:	4293      	cmp	r3, r2
 80238d4:	d301      	bcc.n	80238da <dir_sdi+0x5c>
 80238d6:	2302      	movs	r3, #2
 80238d8:	e048      	b.n	802396c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80238da:	693b      	ldr	r3, [r7, #16]
 80238dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	61da      	str	r2, [r3, #28]
 80238e2:	e029      	b.n	8023938 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80238e4:	693b      	ldr	r3, [r7, #16]
 80238e6:	895b      	ldrh	r3, [r3, #10]
 80238e8:	031b      	lsls	r3, r3, #12
 80238ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80238ec:	e019      	b.n	8023922 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	6979      	ldr	r1, [r7, #20]
 80238f2:	4618      	mov	r0, r3
 80238f4:	f7ff fd2d 	bl	8023352 <get_fat>
 80238f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80238fa:	697b      	ldr	r3, [r7, #20]
 80238fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023900:	d101      	bne.n	8023906 <dir_sdi+0x88>
 8023902:	2301      	movs	r3, #1
 8023904:	e032      	b.n	802396c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8023906:	697b      	ldr	r3, [r7, #20]
 8023908:	2b01      	cmp	r3, #1
 802390a:	d904      	bls.n	8023916 <dir_sdi+0x98>
 802390c:	693b      	ldr	r3, [r7, #16]
 802390e:	695b      	ldr	r3, [r3, #20]
 8023910:	697a      	ldr	r2, [r7, #20]
 8023912:	429a      	cmp	r2, r3
 8023914:	d301      	bcc.n	802391a <dir_sdi+0x9c>
 8023916:	2302      	movs	r3, #2
 8023918:	e028      	b.n	802396c <dir_sdi+0xee>
			ofs -= csz;
 802391a:	683a      	ldr	r2, [r7, #0]
 802391c:	68fb      	ldr	r3, [r7, #12]
 802391e:	1ad3      	subs	r3, r2, r3
 8023920:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8023922:	683a      	ldr	r2, [r7, #0]
 8023924:	68fb      	ldr	r3, [r7, #12]
 8023926:	429a      	cmp	r2, r3
 8023928:	d2e1      	bcs.n	80238ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 802392a:	6979      	ldr	r1, [r7, #20]
 802392c:	6938      	ldr	r0, [r7, #16]
 802392e:	f7ff fcf1 	bl	8023314 <clust2sect>
 8023932:	4602      	mov	r2, r0
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8023938:	687b      	ldr	r3, [r7, #4]
 802393a:	697a      	ldr	r2, [r7, #20]
 802393c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	69db      	ldr	r3, [r3, #28]
 8023942:	2b00      	cmp	r3, #0
 8023944:	d101      	bne.n	802394a <dir_sdi+0xcc>
 8023946:	2302      	movs	r3, #2
 8023948:	e010      	b.n	802396c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802394a:	687b      	ldr	r3, [r7, #4]
 802394c:	69da      	ldr	r2, [r3, #28]
 802394e:	683b      	ldr	r3, [r7, #0]
 8023950:	0b1b      	lsrs	r3, r3, #12
 8023952:	441a      	add	r2, r3
 8023954:	687b      	ldr	r3, [r7, #4]
 8023956:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8023958:	693b      	ldr	r3, [r7, #16]
 802395a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802395e:	683b      	ldr	r3, [r7, #0]
 8023960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023964:	441a      	add	r2, r3
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802396a:	2300      	movs	r3, #0
}
 802396c:	4618      	mov	r0, r3
 802396e:	3718      	adds	r7, #24
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}

08023974 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8023974:	b580      	push	{r7, lr}
 8023976:	b086      	sub	sp, #24
 8023978:	af00      	add	r7, sp, #0
 802397a:	6078      	str	r0, [r7, #4]
 802397c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	681b      	ldr	r3, [r3, #0]
 8023982:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	695b      	ldr	r3, [r3, #20]
 8023988:	3320      	adds	r3, #32
 802398a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	69db      	ldr	r3, [r3, #28]
 8023990:	2b00      	cmp	r3, #0
 8023992:	d003      	beq.n	802399c <dir_next+0x28>
 8023994:	68bb      	ldr	r3, [r7, #8]
 8023996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802399a:	d301      	bcc.n	80239a0 <dir_next+0x2c>
 802399c:	2304      	movs	r3, #4
 802399e:	e0aa      	b.n	8023af6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80239a0:	68bb      	ldr	r3, [r7, #8]
 80239a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239a6:	2b00      	cmp	r3, #0
 80239a8:	f040 8098 	bne.w	8023adc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	69db      	ldr	r3, [r3, #28]
 80239b0:	1c5a      	adds	r2, r3, #1
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	699b      	ldr	r3, [r3, #24]
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d10b      	bne.n	80239d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80239be:	68bb      	ldr	r3, [r7, #8]
 80239c0:	095b      	lsrs	r3, r3, #5
 80239c2:	68fa      	ldr	r2, [r7, #12]
 80239c4:	8912      	ldrh	r2, [r2, #8]
 80239c6:	4293      	cmp	r3, r2
 80239c8:	f0c0 8088 	bcc.w	8023adc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80239cc:	687b      	ldr	r3, [r7, #4]
 80239ce:	2200      	movs	r2, #0
 80239d0:	61da      	str	r2, [r3, #28]
 80239d2:	2304      	movs	r3, #4
 80239d4:	e08f      	b.n	8023af6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80239d6:	68bb      	ldr	r3, [r7, #8]
 80239d8:	0b1b      	lsrs	r3, r3, #12
 80239da:	68fa      	ldr	r2, [r7, #12]
 80239dc:	8952      	ldrh	r2, [r2, #10]
 80239de:	3a01      	subs	r2, #1
 80239e0:	4013      	ands	r3, r2
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d17a      	bne.n	8023adc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80239e6:	687a      	ldr	r2, [r7, #4]
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	699b      	ldr	r3, [r3, #24]
 80239ec:	4619      	mov	r1, r3
 80239ee:	4610      	mov	r0, r2
 80239f0:	f7ff fcaf 	bl	8023352 <get_fat>
 80239f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80239f6:	697b      	ldr	r3, [r7, #20]
 80239f8:	2b01      	cmp	r3, #1
 80239fa:	d801      	bhi.n	8023a00 <dir_next+0x8c>
 80239fc:	2302      	movs	r3, #2
 80239fe:	e07a      	b.n	8023af6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8023a00:	697b      	ldr	r3, [r7, #20]
 8023a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a06:	d101      	bne.n	8023a0c <dir_next+0x98>
 8023a08:	2301      	movs	r3, #1
 8023a0a:	e074      	b.n	8023af6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8023a0c:	68fb      	ldr	r3, [r7, #12]
 8023a0e:	695b      	ldr	r3, [r3, #20]
 8023a10:	697a      	ldr	r2, [r7, #20]
 8023a12:	429a      	cmp	r2, r3
 8023a14:	d358      	bcc.n	8023ac8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8023a16:	683b      	ldr	r3, [r7, #0]
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d104      	bne.n	8023a26 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	2200      	movs	r2, #0
 8023a20:	61da      	str	r2, [r3, #28]
 8023a22:	2304      	movs	r3, #4
 8023a24:	e067      	b.n	8023af6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8023a26:	687a      	ldr	r2, [r7, #4]
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	699b      	ldr	r3, [r3, #24]
 8023a2c:	4619      	mov	r1, r3
 8023a2e:	4610      	mov	r0, r2
 8023a30:	f7ff fe8d 	bl	802374e <create_chain>
 8023a34:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8023a36:	697b      	ldr	r3, [r7, #20]
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d101      	bne.n	8023a40 <dir_next+0xcc>
 8023a3c:	2307      	movs	r3, #7
 8023a3e:	e05a      	b.n	8023af6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8023a40:	697b      	ldr	r3, [r7, #20]
 8023a42:	2b01      	cmp	r3, #1
 8023a44:	d101      	bne.n	8023a4a <dir_next+0xd6>
 8023a46:	2302      	movs	r3, #2
 8023a48:	e055      	b.n	8023af6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023a4a:	697b      	ldr	r3, [r7, #20]
 8023a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a50:	d101      	bne.n	8023a56 <dir_next+0xe2>
 8023a52:	2301      	movs	r3, #1
 8023a54:	e04f      	b.n	8023af6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8023a56:	68f8      	ldr	r0, [r7, #12]
 8023a58:	f7ff fb7c 	bl	8023154 <sync_window>
 8023a5c:	4603      	mov	r3, r0
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d001      	beq.n	8023a66 <dir_next+0xf2>
 8023a62:	2301      	movs	r3, #1
 8023a64:	e047      	b.n	8023af6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8023a66:	68fb      	ldr	r3, [r7, #12]
 8023a68:	3330      	adds	r3, #48	; 0x30
 8023a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023a6e:	2100      	movs	r1, #0
 8023a70:	4618      	mov	r0, r3
 8023a72:	f7ff f9a6 	bl	8022dc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023a76:	2300      	movs	r3, #0
 8023a78:	613b      	str	r3, [r7, #16]
 8023a7a:	6979      	ldr	r1, [r7, #20]
 8023a7c:	68f8      	ldr	r0, [r7, #12]
 8023a7e:	f7ff fc49 	bl	8023314 <clust2sect>
 8023a82:	4602      	mov	r2, r0
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8023a88:	e012      	b.n	8023ab0 <dir_next+0x13c>
						fs->wflag = 1;
 8023a8a:	68fb      	ldr	r3, [r7, #12]
 8023a8c:	2201      	movs	r2, #1
 8023a8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8023a90:	68f8      	ldr	r0, [r7, #12]
 8023a92:	f7ff fb5f 	bl	8023154 <sync_window>
 8023a96:	4603      	mov	r3, r0
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	d001      	beq.n	8023aa0 <dir_next+0x12c>
 8023a9c:	2301      	movs	r3, #1
 8023a9e:	e02a      	b.n	8023af6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023aa0:	693b      	ldr	r3, [r7, #16]
 8023aa2:	3301      	adds	r3, #1
 8023aa4:	613b      	str	r3, [r7, #16]
 8023aa6:	68fb      	ldr	r3, [r7, #12]
 8023aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023aaa:	1c5a      	adds	r2, r3, #1
 8023aac:	68fb      	ldr	r3, [r7, #12]
 8023aae:	62da      	str	r2, [r3, #44]	; 0x2c
 8023ab0:	68fb      	ldr	r3, [r7, #12]
 8023ab2:	895b      	ldrh	r3, [r3, #10]
 8023ab4:	461a      	mov	r2, r3
 8023ab6:	693b      	ldr	r3, [r7, #16]
 8023ab8:	4293      	cmp	r3, r2
 8023aba:	d3e6      	bcc.n	8023a8a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8023abc:	68fb      	ldr	r3, [r7, #12]
 8023abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023ac0:	693b      	ldr	r3, [r7, #16]
 8023ac2:	1ad2      	subs	r2, r2, r3
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	697a      	ldr	r2, [r7, #20]
 8023acc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8023ace:	6979      	ldr	r1, [r7, #20]
 8023ad0:	68f8      	ldr	r0, [r7, #12]
 8023ad2:	f7ff fc1f 	bl	8023314 <clust2sect>
 8023ad6:	4602      	mov	r2, r0
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	68ba      	ldr	r2, [r7, #8]
 8023ae0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8023ae2:	68fb      	ldr	r3, [r7, #12]
 8023ae4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023ae8:	68bb      	ldr	r3, [r7, #8]
 8023aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023aee:	441a      	add	r2, r3
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8023af4:	2300      	movs	r3, #0
}
 8023af6:	4618      	mov	r0, r3
 8023af8:	3718      	adds	r7, #24
 8023afa:	46bd      	mov	sp, r7
 8023afc:	bd80      	pop	{r7, pc}

08023afe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8023afe:	b580      	push	{r7, lr}
 8023b00:	b086      	sub	sp, #24
 8023b02:	af00      	add	r7, sp, #0
 8023b04:	6078      	str	r0, [r7, #4]
 8023b06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8023b08:	687b      	ldr	r3, [r7, #4]
 8023b0a:	681b      	ldr	r3, [r3, #0]
 8023b0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8023b0e:	2100      	movs	r1, #0
 8023b10:	6878      	ldr	r0, [r7, #4]
 8023b12:	f7ff feb4 	bl	802387e <dir_sdi>
 8023b16:	4603      	mov	r3, r0
 8023b18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8023b1a:	7dfb      	ldrb	r3, [r7, #23]
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d12b      	bne.n	8023b78 <dir_alloc+0x7a>
		n = 0;
 8023b20:	2300      	movs	r3, #0
 8023b22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	69db      	ldr	r3, [r3, #28]
 8023b28:	4619      	mov	r1, r3
 8023b2a:	68f8      	ldr	r0, [r7, #12]
 8023b2c:	f7ff fb56 	bl	80231dc <move_window>
 8023b30:	4603      	mov	r3, r0
 8023b32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8023b34:	7dfb      	ldrb	r3, [r7, #23]
 8023b36:	2b00      	cmp	r3, #0
 8023b38:	d11d      	bne.n	8023b76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	6a1b      	ldr	r3, [r3, #32]
 8023b3e:	781b      	ldrb	r3, [r3, #0]
 8023b40:	2be5      	cmp	r3, #229	; 0xe5
 8023b42:	d004      	beq.n	8023b4e <dir_alloc+0x50>
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	6a1b      	ldr	r3, [r3, #32]
 8023b48:	781b      	ldrb	r3, [r3, #0]
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d107      	bne.n	8023b5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8023b4e:	693b      	ldr	r3, [r7, #16]
 8023b50:	3301      	adds	r3, #1
 8023b52:	613b      	str	r3, [r7, #16]
 8023b54:	693a      	ldr	r2, [r7, #16]
 8023b56:	683b      	ldr	r3, [r7, #0]
 8023b58:	429a      	cmp	r2, r3
 8023b5a:	d102      	bne.n	8023b62 <dir_alloc+0x64>
 8023b5c:	e00c      	b.n	8023b78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8023b5e:	2300      	movs	r3, #0
 8023b60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8023b62:	2101      	movs	r1, #1
 8023b64:	6878      	ldr	r0, [r7, #4]
 8023b66:	f7ff ff05 	bl	8023974 <dir_next>
 8023b6a:	4603      	mov	r3, r0
 8023b6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8023b6e:	7dfb      	ldrb	r3, [r7, #23]
 8023b70:	2b00      	cmp	r3, #0
 8023b72:	d0d7      	beq.n	8023b24 <dir_alloc+0x26>
 8023b74:	e000      	b.n	8023b78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8023b76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8023b78:	7dfb      	ldrb	r3, [r7, #23]
 8023b7a:	2b04      	cmp	r3, #4
 8023b7c:	d101      	bne.n	8023b82 <dir_alloc+0x84>
 8023b7e:	2307      	movs	r3, #7
 8023b80:	75fb      	strb	r3, [r7, #23]
	return res;
 8023b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8023b84:	4618      	mov	r0, r3
 8023b86:	3718      	adds	r7, #24
 8023b88:	46bd      	mov	sp, r7
 8023b8a:	bd80      	pop	{r7, pc}

08023b8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8023b8c:	b580      	push	{r7, lr}
 8023b8e:	b084      	sub	sp, #16
 8023b90:	af00      	add	r7, sp, #0
 8023b92:	6078      	str	r0, [r7, #4]
 8023b94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8023b96:	683b      	ldr	r3, [r7, #0]
 8023b98:	331a      	adds	r3, #26
 8023b9a:	4618      	mov	r0, r3
 8023b9c:	f7ff f86e 	bl	8022c7c <ld_word>
 8023ba0:	4603      	mov	r3, r0
 8023ba2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	781b      	ldrb	r3, [r3, #0]
 8023ba8:	2b03      	cmp	r3, #3
 8023baa:	d109      	bne.n	8023bc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8023bac:	683b      	ldr	r3, [r7, #0]
 8023bae:	3314      	adds	r3, #20
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	f7ff f863 	bl	8022c7c <ld_word>
 8023bb6:	4603      	mov	r3, r0
 8023bb8:	041b      	lsls	r3, r3, #16
 8023bba:	68fa      	ldr	r2, [r7, #12]
 8023bbc:	4313      	orrs	r3, r2
 8023bbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8023bc0:	68fb      	ldr	r3, [r7, #12]
}
 8023bc2:	4618      	mov	r0, r3
 8023bc4:	3710      	adds	r7, #16
 8023bc6:	46bd      	mov	sp, r7
 8023bc8:	bd80      	pop	{r7, pc}

08023bca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8023bca:	b580      	push	{r7, lr}
 8023bcc:	b084      	sub	sp, #16
 8023bce:	af00      	add	r7, sp, #0
 8023bd0:	60f8      	str	r0, [r7, #12]
 8023bd2:	60b9      	str	r1, [r7, #8]
 8023bd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8023bd6:	68bb      	ldr	r3, [r7, #8]
 8023bd8:	331a      	adds	r3, #26
 8023bda:	687a      	ldr	r2, [r7, #4]
 8023bdc:	b292      	uxth	r2, r2
 8023bde:	4611      	mov	r1, r2
 8023be0:	4618      	mov	r0, r3
 8023be2:	f7ff f886 	bl	8022cf2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8023be6:	68fb      	ldr	r3, [r7, #12]
 8023be8:	781b      	ldrb	r3, [r3, #0]
 8023bea:	2b03      	cmp	r3, #3
 8023bec:	d109      	bne.n	8023c02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8023bee:	68bb      	ldr	r3, [r7, #8]
 8023bf0:	f103 0214 	add.w	r2, r3, #20
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	0c1b      	lsrs	r3, r3, #16
 8023bf8:	b29b      	uxth	r3, r3
 8023bfa:	4619      	mov	r1, r3
 8023bfc:	4610      	mov	r0, r2
 8023bfe:	f7ff f878 	bl	8022cf2 <st_word>
	}
}
 8023c02:	bf00      	nop
 8023c04:	3710      	adds	r7, #16
 8023c06:	46bd      	mov	sp, r7
 8023c08:	bd80      	pop	{r7, pc}

08023c0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8023c0a:	b580      	push	{r7, lr}
 8023c0c:	b086      	sub	sp, #24
 8023c0e:	af00      	add	r7, sp, #0
 8023c10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	681b      	ldr	r3, [r3, #0]
 8023c16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8023c18:	2100      	movs	r1, #0
 8023c1a:	6878      	ldr	r0, [r7, #4]
 8023c1c:	f7ff fe2f 	bl	802387e <dir_sdi>
 8023c20:	4603      	mov	r3, r0
 8023c22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8023c24:	7dfb      	ldrb	r3, [r7, #23]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	d001      	beq.n	8023c2e <dir_find+0x24>
 8023c2a:	7dfb      	ldrb	r3, [r7, #23]
 8023c2c:	e03e      	b.n	8023cac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8023c2e:	687b      	ldr	r3, [r7, #4]
 8023c30:	69db      	ldr	r3, [r3, #28]
 8023c32:	4619      	mov	r1, r3
 8023c34:	6938      	ldr	r0, [r7, #16]
 8023c36:	f7ff fad1 	bl	80231dc <move_window>
 8023c3a:	4603      	mov	r3, r0
 8023c3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8023c3e:	7dfb      	ldrb	r3, [r7, #23]
 8023c40:	2b00      	cmp	r3, #0
 8023c42:	d12f      	bne.n	8023ca4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	6a1b      	ldr	r3, [r3, #32]
 8023c48:	781b      	ldrb	r3, [r3, #0]
 8023c4a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8023c4c:	7bfb      	ldrb	r3, [r7, #15]
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d102      	bne.n	8023c58 <dir_find+0x4e>
 8023c52:	2304      	movs	r3, #4
 8023c54:	75fb      	strb	r3, [r7, #23]
 8023c56:	e028      	b.n	8023caa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8023c58:	687b      	ldr	r3, [r7, #4]
 8023c5a:	6a1b      	ldr	r3, [r3, #32]
 8023c5c:	330b      	adds	r3, #11
 8023c5e:	781b      	ldrb	r3, [r3, #0]
 8023c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023c64:	b2da      	uxtb	r2, r3
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8023c6a:	687b      	ldr	r3, [r7, #4]
 8023c6c:	6a1b      	ldr	r3, [r3, #32]
 8023c6e:	330b      	adds	r3, #11
 8023c70:	781b      	ldrb	r3, [r3, #0]
 8023c72:	f003 0308 	and.w	r3, r3, #8
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d10a      	bne.n	8023c90 <dir_find+0x86>
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	6a18      	ldr	r0, [r3, #32]
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	3324      	adds	r3, #36	; 0x24
 8023c82:	220b      	movs	r2, #11
 8023c84:	4619      	mov	r1, r3
 8023c86:	f7ff f8b7 	bl	8022df8 <mem_cmp>
 8023c8a:	4603      	mov	r3, r0
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	d00b      	beq.n	8023ca8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8023c90:	2100      	movs	r1, #0
 8023c92:	6878      	ldr	r0, [r7, #4]
 8023c94:	f7ff fe6e 	bl	8023974 <dir_next>
 8023c98:	4603      	mov	r3, r0
 8023c9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8023c9c:	7dfb      	ldrb	r3, [r7, #23]
 8023c9e:	2b00      	cmp	r3, #0
 8023ca0:	d0c5      	beq.n	8023c2e <dir_find+0x24>
 8023ca2:	e002      	b.n	8023caa <dir_find+0xa0>
		if (res != FR_OK) break;
 8023ca4:	bf00      	nop
 8023ca6:	e000      	b.n	8023caa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8023ca8:	bf00      	nop

	return res;
 8023caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8023cac:	4618      	mov	r0, r3
 8023cae:	3718      	adds	r7, #24
 8023cb0:	46bd      	mov	sp, r7
 8023cb2:	bd80      	pop	{r7, pc}

08023cb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8023cb4:	b580      	push	{r7, lr}
 8023cb6:	b084      	sub	sp, #16
 8023cb8:	af00      	add	r7, sp, #0
 8023cba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	681b      	ldr	r3, [r3, #0]
 8023cc0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8023cc2:	2101      	movs	r1, #1
 8023cc4:	6878      	ldr	r0, [r7, #4]
 8023cc6:	f7ff ff1a 	bl	8023afe <dir_alloc>
 8023cca:	4603      	mov	r3, r0
 8023ccc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8023cce:	7bfb      	ldrb	r3, [r7, #15]
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d11c      	bne.n	8023d0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	69db      	ldr	r3, [r3, #28]
 8023cd8:	4619      	mov	r1, r3
 8023cda:	68b8      	ldr	r0, [r7, #8]
 8023cdc:	f7ff fa7e 	bl	80231dc <move_window>
 8023ce0:	4603      	mov	r3, r0
 8023ce2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8023ce4:	7bfb      	ldrb	r3, [r7, #15]
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	d111      	bne.n	8023d0e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	6a1b      	ldr	r3, [r3, #32]
 8023cee:	2220      	movs	r2, #32
 8023cf0:	2100      	movs	r1, #0
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	f7ff f865 	bl	8022dc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8023cf8:	687b      	ldr	r3, [r7, #4]
 8023cfa:	6a18      	ldr	r0, [r3, #32]
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	3324      	adds	r3, #36	; 0x24
 8023d00:	220b      	movs	r2, #11
 8023d02:	4619      	mov	r1, r3
 8023d04:	f7ff f83c 	bl	8022d80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8023d08:	68bb      	ldr	r3, [r7, #8]
 8023d0a:	2201      	movs	r2, #1
 8023d0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8023d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d10:	4618      	mov	r0, r3
 8023d12:	3710      	adds	r7, #16
 8023d14:	46bd      	mov	sp, r7
 8023d16:	bd80      	pop	{r7, pc}

08023d18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b088      	sub	sp, #32
 8023d1c:	af00      	add	r7, sp, #0
 8023d1e:	6078      	str	r0, [r7, #4]
 8023d20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8023d22:	683b      	ldr	r3, [r7, #0]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	60fb      	str	r3, [r7, #12]
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	3324      	adds	r3, #36	; 0x24
 8023d2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8023d2e:	220b      	movs	r2, #11
 8023d30:	2120      	movs	r1, #32
 8023d32:	68b8      	ldr	r0, [r7, #8]
 8023d34:	f7ff f845 	bl	8022dc2 <mem_set>
	si = i = 0; ni = 8;
 8023d38:	2300      	movs	r3, #0
 8023d3a:	613b      	str	r3, [r7, #16]
 8023d3c:	693b      	ldr	r3, [r7, #16]
 8023d3e:	61fb      	str	r3, [r7, #28]
 8023d40:	2308      	movs	r3, #8
 8023d42:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8023d44:	69fb      	ldr	r3, [r7, #28]
 8023d46:	1c5a      	adds	r2, r3, #1
 8023d48:	61fa      	str	r2, [r7, #28]
 8023d4a:	68fa      	ldr	r2, [r7, #12]
 8023d4c:	4413      	add	r3, r2
 8023d4e:	781b      	ldrb	r3, [r3, #0]
 8023d50:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8023d52:	7efb      	ldrb	r3, [r7, #27]
 8023d54:	2b20      	cmp	r3, #32
 8023d56:	d94e      	bls.n	8023df6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8023d58:	7efb      	ldrb	r3, [r7, #27]
 8023d5a:	2b2f      	cmp	r3, #47	; 0x2f
 8023d5c:	d006      	beq.n	8023d6c <create_name+0x54>
 8023d5e:	7efb      	ldrb	r3, [r7, #27]
 8023d60:	2b5c      	cmp	r3, #92	; 0x5c
 8023d62:	d110      	bne.n	8023d86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8023d64:	e002      	b.n	8023d6c <create_name+0x54>
 8023d66:	69fb      	ldr	r3, [r7, #28]
 8023d68:	3301      	adds	r3, #1
 8023d6a:	61fb      	str	r3, [r7, #28]
 8023d6c:	68fa      	ldr	r2, [r7, #12]
 8023d6e:	69fb      	ldr	r3, [r7, #28]
 8023d70:	4413      	add	r3, r2
 8023d72:	781b      	ldrb	r3, [r3, #0]
 8023d74:	2b2f      	cmp	r3, #47	; 0x2f
 8023d76:	d0f6      	beq.n	8023d66 <create_name+0x4e>
 8023d78:	68fa      	ldr	r2, [r7, #12]
 8023d7a:	69fb      	ldr	r3, [r7, #28]
 8023d7c:	4413      	add	r3, r2
 8023d7e:	781b      	ldrb	r3, [r3, #0]
 8023d80:	2b5c      	cmp	r3, #92	; 0x5c
 8023d82:	d0f0      	beq.n	8023d66 <create_name+0x4e>
			break;
 8023d84:	e038      	b.n	8023df8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8023d86:	7efb      	ldrb	r3, [r7, #27]
 8023d88:	2b2e      	cmp	r3, #46	; 0x2e
 8023d8a:	d003      	beq.n	8023d94 <create_name+0x7c>
 8023d8c:	693a      	ldr	r2, [r7, #16]
 8023d8e:	697b      	ldr	r3, [r7, #20]
 8023d90:	429a      	cmp	r2, r3
 8023d92:	d30c      	bcc.n	8023dae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8023d94:	697b      	ldr	r3, [r7, #20]
 8023d96:	2b0b      	cmp	r3, #11
 8023d98:	d002      	beq.n	8023da0 <create_name+0x88>
 8023d9a:	7efb      	ldrb	r3, [r7, #27]
 8023d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8023d9e:	d001      	beq.n	8023da4 <create_name+0x8c>
 8023da0:	2306      	movs	r3, #6
 8023da2:	e044      	b.n	8023e2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8023da4:	2308      	movs	r3, #8
 8023da6:	613b      	str	r3, [r7, #16]
 8023da8:	230b      	movs	r3, #11
 8023daa:	617b      	str	r3, [r7, #20]
			continue;
 8023dac:	e022      	b.n	8023df4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8023dae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	da04      	bge.n	8023dc0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8023db6:	7efb      	ldrb	r3, [r7, #27]
 8023db8:	3b80      	subs	r3, #128	; 0x80
 8023dba:	4a1f      	ldr	r2, [pc, #124]	; (8023e38 <create_name+0x120>)
 8023dbc:	5cd3      	ldrb	r3, [r2, r3]
 8023dbe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8023dc0:	7efb      	ldrb	r3, [r7, #27]
 8023dc2:	4619      	mov	r1, r3
 8023dc4:	481d      	ldr	r0, [pc, #116]	; (8023e3c <create_name+0x124>)
 8023dc6:	f7ff f83e 	bl	8022e46 <chk_chr>
 8023dca:	4603      	mov	r3, r0
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d001      	beq.n	8023dd4 <create_name+0xbc>
 8023dd0:	2306      	movs	r3, #6
 8023dd2:	e02c      	b.n	8023e2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8023dd4:	7efb      	ldrb	r3, [r7, #27]
 8023dd6:	2b60      	cmp	r3, #96	; 0x60
 8023dd8:	d905      	bls.n	8023de6 <create_name+0xce>
 8023dda:	7efb      	ldrb	r3, [r7, #27]
 8023ddc:	2b7a      	cmp	r3, #122	; 0x7a
 8023dde:	d802      	bhi.n	8023de6 <create_name+0xce>
 8023de0:	7efb      	ldrb	r3, [r7, #27]
 8023de2:	3b20      	subs	r3, #32
 8023de4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8023de6:	693b      	ldr	r3, [r7, #16]
 8023de8:	1c5a      	adds	r2, r3, #1
 8023dea:	613a      	str	r2, [r7, #16]
 8023dec:	68ba      	ldr	r2, [r7, #8]
 8023dee:	4413      	add	r3, r2
 8023df0:	7efa      	ldrb	r2, [r7, #27]
 8023df2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8023df4:	e7a6      	b.n	8023d44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8023df6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8023df8:	68fa      	ldr	r2, [r7, #12]
 8023dfa:	69fb      	ldr	r3, [r7, #28]
 8023dfc:	441a      	add	r2, r3
 8023dfe:	683b      	ldr	r3, [r7, #0]
 8023e00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8023e02:	693b      	ldr	r3, [r7, #16]
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d101      	bne.n	8023e0c <create_name+0xf4>
 8023e08:	2306      	movs	r3, #6
 8023e0a:	e010      	b.n	8023e2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8023e0c:	68bb      	ldr	r3, [r7, #8]
 8023e0e:	781b      	ldrb	r3, [r3, #0]
 8023e10:	2be5      	cmp	r3, #229	; 0xe5
 8023e12:	d102      	bne.n	8023e1a <create_name+0x102>
 8023e14:	68bb      	ldr	r3, [r7, #8]
 8023e16:	2205      	movs	r2, #5
 8023e18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8023e1a:	7efb      	ldrb	r3, [r7, #27]
 8023e1c:	2b20      	cmp	r3, #32
 8023e1e:	d801      	bhi.n	8023e24 <create_name+0x10c>
 8023e20:	2204      	movs	r2, #4
 8023e22:	e000      	b.n	8023e26 <create_name+0x10e>
 8023e24:	2200      	movs	r2, #0
 8023e26:	68bb      	ldr	r3, [r7, #8]
 8023e28:	330b      	adds	r3, #11
 8023e2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8023e2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8023e2e:	4618      	mov	r0, r3
 8023e30:	3720      	adds	r7, #32
 8023e32:	46bd      	mov	sp, r7
 8023e34:	bd80      	pop	{r7, pc}
 8023e36:	bf00      	nop
 8023e38:	08002404 	.word	0x08002404
 8023e3c:	08000adc 	.word	0x08000adc

08023e40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8023e40:	b580      	push	{r7, lr}
 8023e42:	b086      	sub	sp, #24
 8023e44:	af00      	add	r7, sp, #0
 8023e46:	6078      	str	r0, [r7, #4]
 8023e48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8023e4e:	693b      	ldr	r3, [r7, #16]
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8023e54:	e002      	b.n	8023e5c <follow_path+0x1c>
 8023e56:	683b      	ldr	r3, [r7, #0]
 8023e58:	3301      	adds	r3, #1
 8023e5a:	603b      	str	r3, [r7, #0]
 8023e5c:	683b      	ldr	r3, [r7, #0]
 8023e5e:	781b      	ldrb	r3, [r3, #0]
 8023e60:	2b2f      	cmp	r3, #47	; 0x2f
 8023e62:	d0f8      	beq.n	8023e56 <follow_path+0x16>
 8023e64:	683b      	ldr	r3, [r7, #0]
 8023e66:	781b      	ldrb	r3, [r3, #0]
 8023e68:	2b5c      	cmp	r3, #92	; 0x5c
 8023e6a:	d0f4      	beq.n	8023e56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8023e6c:	693b      	ldr	r3, [r7, #16]
 8023e6e:	2200      	movs	r2, #0
 8023e70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8023e72:	683b      	ldr	r3, [r7, #0]
 8023e74:	781b      	ldrb	r3, [r3, #0]
 8023e76:	2b1f      	cmp	r3, #31
 8023e78:	d80a      	bhi.n	8023e90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	2280      	movs	r2, #128	; 0x80
 8023e7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8023e82:	2100      	movs	r1, #0
 8023e84:	6878      	ldr	r0, [r7, #4]
 8023e86:	f7ff fcfa 	bl	802387e <dir_sdi>
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	75fb      	strb	r3, [r7, #23]
 8023e8e:	e043      	b.n	8023f18 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023e90:	463b      	mov	r3, r7
 8023e92:	4619      	mov	r1, r3
 8023e94:	6878      	ldr	r0, [r7, #4]
 8023e96:	f7ff ff3f 	bl	8023d18 <create_name>
 8023e9a:	4603      	mov	r3, r0
 8023e9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8023e9e:	7dfb      	ldrb	r3, [r7, #23]
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	d134      	bne.n	8023f0e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8023ea4:	6878      	ldr	r0, [r7, #4]
 8023ea6:	f7ff feb0 	bl	8023c0a <dir_find>
 8023eaa:	4603      	mov	r3, r0
 8023eac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8023eb4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8023eb6:	7dfb      	ldrb	r3, [r7, #23]
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d00a      	beq.n	8023ed2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8023ebc:	7dfb      	ldrb	r3, [r7, #23]
 8023ebe:	2b04      	cmp	r3, #4
 8023ec0:	d127      	bne.n	8023f12 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8023ec2:	7afb      	ldrb	r3, [r7, #11]
 8023ec4:	f003 0304 	and.w	r3, r3, #4
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d122      	bne.n	8023f12 <follow_path+0xd2>
 8023ecc:	2305      	movs	r3, #5
 8023ece:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8023ed0:	e01f      	b.n	8023f12 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8023ed2:	7afb      	ldrb	r3, [r7, #11]
 8023ed4:	f003 0304 	and.w	r3, r3, #4
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d11c      	bne.n	8023f16 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8023edc:	693b      	ldr	r3, [r7, #16]
 8023ede:	799b      	ldrb	r3, [r3, #6]
 8023ee0:	f003 0310 	and.w	r3, r3, #16
 8023ee4:	2b00      	cmp	r3, #0
 8023ee6:	d102      	bne.n	8023eee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8023ee8:	2305      	movs	r3, #5
 8023eea:	75fb      	strb	r3, [r7, #23]
 8023eec:	e014      	b.n	8023f18 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8023eee:	68fb      	ldr	r3, [r7, #12]
 8023ef0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	695b      	ldr	r3, [r3, #20]
 8023ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023efc:	4413      	add	r3, r2
 8023efe:	4619      	mov	r1, r3
 8023f00:	68f8      	ldr	r0, [r7, #12]
 8023f02:	f7ff fe43 	bl	8023b8c <ld_clust>
 8023f06:	4602      	mov	r2, r0
 8023f08:	693b      	ldr	r3, [r7, #16]
 8023f0a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8023f0c:	e7c0      	b.n	8023e90 <follow_path+0x50>
			if (res != FR_OK) break;
 8023f0e:	bf00      	nop
 8023f10:	e002      	b.n	8023f18 <follow_path+0xd8>
				break;
 8023f12:	bf00      	nop
 8023f14:	e000      	b.n	8023f18 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8023f16:	bf00      	nop
			}
		}
	}

	return res;
 8023f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8023f1a:	4618      	mov	r0, r3
 8023f1c:	3718      	adds	r7, #24
 8023f1e:	46bd      	mov	sp, r7
 8023f20:	bd80      	pop	{r7, pc}

08023f22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8023f22:	b480      	push	{r7}
 8023f24:	b087      	sub	sp, #28
 8023f26:	af00      	add	r7, sp, #0
 8023f28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8023f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8023f2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	681b      	ldr	r3, [r3, #0]
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d031      	beq.n	8023f9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	681b      	ldr	r3, [r3, #0]
 8023f3c:	617b      	str	r3, [r7, #20]
 8023f3e:	e002      	b.n	8023f46 <get_ldnumber+0x24>
 8023f40:	697b      	ldr	r3, [r7, #20]
 8023f42:	3301      	adds	r3, #1
 8023f44:	617b      	str	r3, [r7, #20]
 8023f46:	697b      	ldr	r3, [r7, #20]
 8023f48:	781b      	ldrb	r3, [r3, #0]
 8023f4a:	2b20      	cmp	r3, #32
 8023f4c:	d903      	bls.n	8023f56 <get_ldnumber+0x34>
 8023f4e:	697b      	ldr	r3, [r7, #20]
 8023f50:	781b      	ldrb	r3, [r3, #0]
 8023f52:	2b3a      	cmp	r3, #58	; 0x3a
 8023f54:	d1f4      	bne.n	8023f40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8023f56:	697b      	ldr	r3, [r7, #20]
 8023f58:	781b      	ldrb	r3, [r3, #0]
 8023f5a:	2b3a      	cmp	r3, #58	; 0x3a
 8023f5c:	d11c      	bne.n	8023f98 <get_ldnumber+0x76>
			tp = *path;
 8023f5e:	687b      	ldr	r3, [r7, #4]
 8023f60:	681b      	ldr	r3, [r3, #0]
 8023f62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8023f64:	68fb      	ldr	r3, [r7, #12]
 8023f66:	1c5a      	adds	r2, r3, #1
 8023f68:	60fa      	str	r2, [r7, #12]
 8023f6a:	781b      	ldrb	r3, [r3, #0]
 8023f6c:	3b30      	subs	r3, #48	; 0x30
 8023f6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8023f70:	68bb      	ldr	r3, [r7, #8]
 8023f72:	2b09      	cmp	r3, #9
 8023f74:	d80e      	bhi.n	8023f94 <get_ldnumber+0x72>
 8023f76:	68fa      	ldr	r2, [r7, #12]
 8023f78:	697b      	ldr	r3, [r7, #20]
 8023f7a:	429a      	cmp	r2, r3
 8023f7c:	d10a      	bne.n	8023f94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8023f7e:	68bb      	ldr	r3, [r7, #8]
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d107      	bne.n	8023f94 <get_ldnumber+0x72>
					vol = (int)i;
 8023f84:	68bb      	ldr	r3, [r7, #8]
 8023f86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8023f88:	697b      	ldr	r3, [r7, #20]
 8023f8a:	3301      	adds	r3, #1
 8023f8c:	617b      	str	r3, [r7, #20]
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	697a      	ldr	r2, [r7, #20]
 8023f92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8023f94:	693b      	ldr	r3, [r7, #16]
 8023f96:	e002      	b.n	8023f9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8023f98:	2300      	movs	r3, #0
 8023f9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8023f9c:	693b      	ldr	r3, [r7, #16]
}
 8023f9e:	4618      	mov	r0, r3
 8023fa0:	371c      	adds	r7, #28
 8023fa2:	46bd      	mov	sp, r7
 8023fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa8:	4770      	bx	lr
	...

08023fac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8023fac:	b580      	push	{r7, lr}
 8023fae:	b082      	sub	sp, #8
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
 8023fb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	2200      	movs	r2, #0
 8023fba:	70da      	strb	r2, [r3, #3]
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8023fc2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8023fc4:	6839      	ldr	r1, [r7, #0]
 8023fc6:	6878      	ldr	r0, [r7, #4]
 8023fc8:	f7ff f908 	bl	80231dc <move_window>
 8023fcc:	4603      	mov	r3, r0
 8023fce:	2b00      	cmp	r3, #0
 8023fd0:	d001      	beq.n	8023fd6 <check_fs+0x2a>
 8023fd2:	2304      	movs	r3, #4
 8023fd4:	e038      	b.n	8024048 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8023fd6:	687b      	ldr	r3, [r7, #4]
 8023fd8:	3330      	adds	r3, #48	; 0x30
 8023fda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8023fde:	4618      	mov	r0, r3
 8023fe0:	f7fe fe4c 	bl	8022c7c <ld_word>
 8023fe4:	4603      	mov	r3, r0
 8023fe6:	461a      	mov	r2, r3
 8023fe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8023fec:	429a      	cmp	r2, r3
 8023fee:	d001      	beq.n	8023ff4 <check_fs+0x48>
 8023ff0:	2303      	movs	r3, #3
 8023ff2:	e029      	b.n	8024048 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8023ff4:	687b      	ldr	r3, [r7, #4]
 8023ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023ffa:	2be9      	cmp	r3, #233	; 0xe9
 8023ffc:	d009      	beq.n	8024012 <check_fs+0x66>
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024004:	2beb      	cmp	r3, #235	; 0xeb
 8024006:	d11e      	bne.n	8024046 <check_fs+0x9a>
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802400e:	2b90      	cmp	r3, #144	; 0x90
 8024010:	d119      	bne.n	8024046 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	3330      	adds	r3, #48	; 0x30
 8024016:	3336      	adds	r3, #54	; 0x36
 8024018:	4618      	mov	r0, r3
 802401a:	f7fe fe47 	bl	8022cac <ld_dword>
 802401e:	4603      	mov	r3, r0
 8024020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8024024:	4a0a      	ldr	r2, [pc, #40]	; (8024050 <check_fs+0xa4>)
 8024026:	4293      	cmp	r3, r2
 8024028:	d101      	bne.n	802402e <check_fs+0x82>
 802402a:	2300      	movs	r3, #0
 802402c:	e00c      	b.n	8024048 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	3330      	adds	r3, #48	; 0x30
 8024032:	3352      	adds	r3, #82	; 0x52
 8024034:	4618      	mov	r0, r3
 8024036:	f7fe fe39 	bl	8022cac <ld_dword>
 802403a:	4603      	mov	r3, r0
 802403c:	4a05      	ldr	r2, [pc, #20]	; (8024054 <check_fs+0xa8>)
 802403e:	4293      	cmp	r3, r2
 8024040:	d101      	bne.n	8024046 <check_fs+0x9a>
 8024042:	2300      	movs	r3, #0
 8024044:	e000      	b.n	8024048 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8024046:	2302      	movs	r3, #2
}
 8024048:	4618      	mov	r0, r3
 802404a:	3708      	adds	r7, #8
 802404c:	46bd      	mov	sp, r7
 802404e:	bd80      	pop	{r7, pc}
 8024050:	00544146 	.word	0x00544146
 8024054:	33544146 	.word	0x33544146

08024058 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8024058:	b580      	push	{r7, lr}
 802405a:	b096      	sub	sp, #88	; 0x58
 802405c:	af00      	add	r7, sp, #0
 802405e:	60f8      	str	r0, [r7, #12]
 8024060:	60b9      	str	r1, [r7, #8]
 8024062:	4613      	mov	r3, r2
 8024064:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8024066:	68bb      	ldr	r3, [r7, #8]
 8024068:	2200      	movs	r2, #0
 802406a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 802406c:	68f8      	ldr	r0, [r7, #12]
 802406e:	f7ff ff58 	bl	8023f22 <get_ldnumber>
 8024072:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8024074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024076:	2b00      	cmp	r3, #0
 8024078:	da01      	bge.n	802407e <find_volume+0x26>
 802407a:	230b      	movs	r3, #11
 802407c:	e22d      	b.n	80244da <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 802407e:	4aa1      	ldr	r2, [pc, #644]	; (8024304 <find_volume+0x2ac>)
 8024080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024086:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8024088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802408a:	2b00      	cmp	r3, #0
 802408c:	d101      	bne.n	8024092 <find_volume+0x3a>
 802408e:	230c      	movs	r3, #12
 8024090:	e223      	b.n	80244da <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8024092:	68bb      	ldr	r3, [r7, #8]
 8024094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024096:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8024098:	79fb      	ldrb	r3, [r7, #7]
 802409a:	f023 0301 	bic.w	r3, r3, #1
 802409e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80240a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240a2:	781b      	ldrb	r3, [r3, #0]
 80240a4:	2b00      	cmp	r3, #0
 80240a6:	d01a      	beq.n	80240de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80240a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240aa:	785b      	ldrb	r3, [r3, #1]
 80240ac:	4618      	mov	r0, r3
 80240ae:	f7fe fd47 	bl	8022b40 <disk_status>
 80240b2:	4603      	mov	r3, r0
 80240b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80240b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240bc:	f003 0301 	and.w	r3, r3, #1
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	d10c      	bne.n	80240de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80240c4:	79fb      	ldrb	r3, [r7, #7]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d007      	beq.n	80240da <find_volume+0x82>
 80240ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80240ce:	f003 0304 	and.w	r3, r3, #4
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	d001      	beq.n	80240da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80240d6:	230a      	movs	r3, #10
 80240d8:	e1ff      	b.n	80244da <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80240da:	2300      	movs	r3, #0
 80240dc:	e1fd      	b.n	80244da <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80240de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240e0:	2200      	movs	r2, #0
 80240e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80240e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80240e6:	b2da      	uxtb	r2, r3
 80240e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80240ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240ee:	785b      	ldrb	r3, [r3, #1]
 80240f0:	4618      	mov	r0, r3
 80240f2:	f7fe fd3f 	bl	8022b74 <disk_initialize>
 80240f6:	4603      	mov	r3, r0
 80240f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80240fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024100:	f003 0301 	and.w	r3, r3, #1
 8024104:	2b00      	cmp	r3, #0
 8024106:	d001      	beq.n	802410c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8024108:	2303      	movs	r3, #3
 802410a:	e1e6      	b.n	80244da <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 802410c:	79fb      	ldrb	r3, [r7, #7]
 802410e:	2b00      	cmp	r3, #0
 8024110:	d007      	beq.n	8024122 <find_volume+0xca>
 8024112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024116:	f003 0304 	and.w	r3, r3, #4
 802411a:	2b00      	cmp	r3, #0
 802411c:	d001      	beq.n	8024122 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802411e:	230a      	movs	r3, #10
 8024120:	e1db      	b.n	80244da <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8024122:	2300      	movs	r3, #0
 8024124:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8024126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802412a:	f7ff ff3f 	bl	8023fac <check_fs>
 802412e:	4603      	mov	r3, r0
 8024130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8024134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8024138:	2b02      	cmp	r3, #2
 802413a:	d149      	bne.n	80241d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802413c:	2300      	movs	r3, #0
 802413e:	643b      	str	r3, [r7, #64]	; 0x40
 8024140:	e01e      	b.n	8024180 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8024142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024144:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8024148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802414a:	011b      	lsls	r3, r3, #4
 802414c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8024150:	4413      	add	r3, r2
 8024152:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8024154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024156:	3304      	adds	r3, #4
 8024158:	781b      	ldrb	r3, [r3, #0]
 802415a:	2b00      	cmp	r3, #0
 802415c:	d006      	beq.n	802416c <find_volume+0x114>
 802415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024160:	3308      	adds	r3, #8
 8024162:	4618      	mov	r0, r3
 8024164:	f7fe fda2 	bl	8022cac <ld_dword>
 8024168:	4602      	mov	r2, r0
 802416a:	e000      	b.n	802416e <find_volume+0x116>
 802416c:	2200      	movs	r2, #0
 802416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024170:	009b      	lsls	r3, r3, #2
 8024172:	3358      	adds	r3, #88	; 0x58
 8024174:	443b      	add	r3, r7
 8024176:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802417c:	3301      	adds	r3, #1
 802417e:	643b      	str	r3, [r7, #64]	; 0x40
 8024180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024182:	2b03      	cmp	r3, #3
 8024184:	d9dd      	bls.n	8024142 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8024186:	2300      	movs	r3, #0
 8024188:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 802418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802418c:	2b00      	cmp	r3, #0
 802418e:	d002      	beq.n	8024196 <find_volume+0x13e>
 8024190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024192:	3b01      	subs	r3, #1
 8024194:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8024196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8024198:	009b      	lsls	r3, r3, #2
 802419a:	3358      	adds	r3, #88	; 0x58
 802419c:	443b      	add	r3, r7
 802419e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80241a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80241a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80241a6:	2b00      	cmp	r3, #0
 80241a8:	d005      	beq.n	80241b6 <find_volume+0x15e>
 80241aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80241ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80241ae:	f7ff fefd 	bl	8023fac <check_fs>
 80241b2:	4603      	mov	r3, r0
 80241b4:	e000      	b.n	80241b8 <find_volume+0x160>
 80241b6:	2303      	movs	r3, #3
 80241b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80241bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80241c0:	2b01      	cmp	r3, #1
 80241c2:	d905      	bls.n	80241d0 <find_volume+0x178>
 80241c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80241c6:	3301      	adds	r3, #1
 80241c8:	643b      	str	r3, [r7, #64]	; 0x40
 80241ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80241cc:	2b03      	cmp	r3, #3
 80241ce:	d9e2      	bls.n	8024196 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80241d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80241d4:	2b04      	cmp	r3, #4
 80241d6:	d101      	bne.n	80241dc <find_volume+0x184>
 80241d8:	2301      	movs	r3, #1
 80241da:	e17e      	b.n	80244da <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80241dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80241e0:	2b01      	cmp	r3, #1
 80241e2:	d901      	bls.n	80241e8 <find_volume+0x190>
 80241e4:	230d      	movs	r3, #13
 80241e6:	e178      	b.n	80244da <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80241e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80241ea:	3330      	adds	r3, #48	; 0x30
 80241ec:	330b      	adds	r3, #11
 80241ee:	4618      	mov	r0, r3
 80241f0:	f7fe fd44 	bl	8022c7c <ld_word>
 80241f4:	4603      	mov	r3, r0
 80241f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80241fa:	d001      	beq.n	8024200 <find_volume+0x1a8>
 80241fc:	230d      	movs	r3, #13
 80241fe:	e16c      	b.n	80244da <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8024200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024202:	3330      	adds	r3, #48	; 0x30
 8024204:	3316      	adds	r3, #22
 8024206:	4618      	mov	r0, r3
 8024208:	f7fe fd38 	bl	8022c7c <ld_word>
 802420c:	4603      	mov	r3, r0
 802420e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8024210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024212:	2b00      	cmp	r3, #0
 8024214:	d106      	bne.n	8024224 <find_volume+0x1cc>
 8024216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024218:	3330      	adds	r3, #48	; 0x30
 802421a:	3324      	adds	r3, #36	; 0x24
 802421c:	4618      	mov	r0, r3
 802421e:	f7fe fd45 	bl	8022cac <ld_dword>
 8024222:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8024224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8024228:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802422c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8024230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024232:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8024234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024236:	789b      	ldrb	r3, [r3, #2]
 8024238:	2b01      	cmp	r3, #1
 802423a:	d005      	beq.n	8024248 <find_volume+0x1f0>
 802423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802423e:	789b      	ldrb	r3, [r3, #2]
 8024240:	2b02      	cmp	r3, #2
 8024242:	d001      	beq.n	8024248 <find_volume+0x1f0>
 8024244:	230d      	movs	r3, #13
 8024246:	e148      	b.n	80244da <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8024248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802424a:	789b      	ldrb	r3, [r3, #2]
 802424c:	461a      	mov	r2, r3
 802424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024250:	fb02 f303 	mul.w	r3, r2, r3
 8024254:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8024256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802425c:	b29a      	uxth	r2, r3
 802425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024260:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8024262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024264:	895b      	ldrh	r3, [r3, #10]
 8024266:	2b00      	cmp	r3, #0
 8024268:	d008      	beq.n	802427c <find_volume+0x224>
 802426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802426c:	895b      	ldrh	r3, [r3, #10]
 802426e:	461a      	mov	r2, r3
 8024270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024272:	895b      	ldrh	r3, [r3, #10]
 8024274:	3b01      	subs	r3, #1
 8024276:	4013      	ands	r3, r2
 8024278:	2b00      	cmp	r3, #0
 802427a:	d001      	beq.n	8024280 <find_volume+0x228>
 802427c:	230d      	movs	r3, #13
 802427e:	e12c      	b.n	80244da <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8024280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024282:	3330      	adds	r3, #48	; 0x30
 8024284:	3311      	adds	r3, #17
 8024286:	4618      	mov	r0, r3
 8024288:	f7fe fcf8 	bl	8022c7c <ld_word>
 802428c:	4603      	mov	r3, r0
 802428e:	461a      	mov	r2, r3
 8024290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024292:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8024294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024296:	891b      	ldrh	r3, [r3, #8]
 8024298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802429c:	b29b      	uxth	r3, r3
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d001      	beq.n	80242a6 <find_volume+0x24e>
 80242a2:	230d      	movs	r3, #13
 80242a4:	e119      	b.n	80244da <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80242a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80242a8:	3330      	adds	r3, #48	; 0x30
 80242aa:	3313      	adds	r3, #19
 80242ac:	4618      	mov	r0, r3
 80242ae:	f7fe fce5 	bl	8022c7c <ld_word>
 80242b2:	4603      	mov	r3, r0
 80242b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80242b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80242b8:	2b00      	cmp	r3, #0
 80242ba:	d106      	bne.n	80242ca <find_volume+0x272>
 80242bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80242be:	3330      	adds	r3, #48	; 0x30
 80242c0:	3320      	adds	r3, #32
 80242c2:	4618      	mov	r0, r3
 80242c4:	f7fe fcf2 	bl	8022cac <ld_dword>
 80242c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80242ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80242cc:	3330      	adds	r3, #48	; 0x30
 80242ce:	330e      	adds	r3, #14
 80242d0:	4618      	mov	r0, r3
 80242d2:	f7fe fcd3 	bl	8022c7c <ld_word>
 80242d6:	4603      	mov	r3, r0
 80242d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80242da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80242dc:	2b00      	cmp	r3, #0
 80242de:	d101      	bne.n	80242e4 <find_volume+0x28c>
 80242e0:	230d      	movs	r3, #13
 80242e2:	e0fa      	b.n	80244da <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80242e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80242e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80242e8:	4413      	add	r3, r2
 80242ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80242ec:	8912      	ldrh	r2, [r2, #8]
 80242ee:	09d2      	lsrs	r2, r2, #7
 80242f0:	b292      	uxth	r2, r2
 80242f2:	4413      	add	r3, r2
 80242f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80242f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80242f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242fa:	429a      	cmp	r2, r3
 80242fc:	d204      	bcs.n	8024308 <find_volume+0x2b0>
 80242fe:	230d      	movs	r3, #13
 8024300:	e0eb      	b.n	80244da <find_volume+0x482>
 8024302:	bf00      	nop
 8024304:	20009ad8 	.word	0x20009ad8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8024308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802430c:	1ad3      	subs	r3, r2, r3
 802430e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024310:	8952      	ldrh	r2, [r2, #10]
 8024312:	fbb3 f3f2 	udiv	r3, r3, r2
 8024316:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8024318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802431a:	2b00      	cmp	r3, #0
 802431c:	d101      	bne.n	8024322 <find_volume+0x2ca>
 802431e:	230d      	movs	r3, #13
 8024320:	e0db      	b.n	80244da <find_volume+0x482>
		fmt = FS_FAT32;
 8024322:	2303      	movs	r3, #3
 8024324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8024328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802432a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 802432e:	4293      	cmp	r3, r2
 8024330:	d802      	bhi.n	8024338 <find_volume+0x2e0>
 8024332:	2302      	movs	r3, #2
 8024334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8024338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802433a:	f640 72f5 	movw	r2, #4085	; 0xff5
 802433e:	4293      	cmp	r3, r2
 8024340:	d802      	bhi.n	8024348 <find_volume+0x2f0>
 8024342:	2301      	movs	r3, #1
 8024344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8024348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802434a:	1c9a      	adds	r2, r3, #2
 802434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802434e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8024350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8024354:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8024356:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8024358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802435a:	441a      	add	r2, r3
 802435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802435e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8024360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8024362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024364:	441a      	add	r2, r3
 8024366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024368:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 802436a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802436e:	2b03      	cmp	r3, #3
 8024370:	d11e      	bne.n	80243b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8024372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024374:	3330      	adds	r3, #48	; 0x30
 8024376:	332a      	adds	r3, #42	; 0x2a
 8024378:	4618      	mov	r0, r3
 802437a:	f7fe fc7f 	bl	8022c7c <ld_word>
 802437e:	4603      	mov	r3, r0
 8024380:	2b00      	cmp	r3, #0
 8024382:	d001      	beq.n	8024388 <find_volume+0x330>
 8024384:	230d      	movs	r3, #13
 8024386:	e0a8      	b.n	80244da <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8024388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802438a:	891b      	ldrh	r3, [r3, #8]
 802438c:	2b00      	cmp	r3, #0
 802438e:	d001      	beq.n	8024394 <find_volume+0x33c>
 8024390:	230d      	movs	r3, #13
 8024392:	e0a2      	b.n	80244da <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8024394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024396:	3330      	adds	r3, #48	; 0x30
 8024398:	332c      	adds	r3, #44	; 0x2c
 802439a:	4618      	mov	r0, r3
 802439c:	f7fe fc86 	bl	8022cac <ld_dword>
 80243a0:	4602      	mov	r2, r0
 80243a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243a4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80243a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243a8:	695b      	ldr	r3, [r3, #20]
 80243aa:	009b      	lsls	r3, r3, #2
 80243ac:	647b      	str	r3, [r7, #68]	; 0x44
 80243ae:	e01f      	b.n	80243f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80243b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243b2:	891b      	ldrh	r3, [r3, #8]
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	d101      	bne.n	80243bc <find_volume+0x364>
 80243b8:	230d      	movs	r3, #13
 80243ba:	e08e      	b.n	80244da <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80243bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243be:	6a1a      	ldr	r2, [r3, #32]
 80243c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80243c2:	441a      	add	r2, r3
 80243c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80243c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80243cc:	2b02      	cmp	r3, #2
 80243ce:	d103      	bne.n	80243d8 <find_volume+0x380>
 80243d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243d2:	695b      	ldr	r3, [r3, #20]
 80243d4:	005b      	lsls	r3, r3, #1
 80243d6:	e00a      	b.n	80243ee <find_volume+0x396>
 80243d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243da:	695a      	ldr	r2, [r3, #20]
 80243dc:	4613      	mov	r3, r2
 80243de:	005b      	lsls	r3, r3, #1
 80243e0:	4413      	add	r3, r2
 80243e2:	085a      	lsrs	r2, r3, #1
 80243e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243e6:	695b      	ldr	r3, [r3, #20]
 80243e8:	f003 0301 	and.w	r3, r3, #1
 80243ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80243ee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80243f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80243f2:	699a      	ldr	r2, [r3, #24]
 80243f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80243f6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80243fa:	0b1b      	lsrs	r3, r3, #12
 80243fc:	429a      	cmp	r2, r3
 80243fe:	d201      	bcs.n	8024404 <find_volume+0x3ac>
 8024400:	230d      	movs	r3, #13
 8024402:	e06a      	b.n	80244da <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8024404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024406:	f04f 32ff 	mov.w	r2, #4294967295
 802440a:	611a      	str	r2, [r3, #16]
 802440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802440e:	691a      	ldr	r2, [r3, #16]
 8024410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024412:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8024414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024416:	2280      	movs	r2, #128	; 0x80
 8024418:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 802441a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802441e:	2b03      	cmp	r3, #3
 8024420:	d149      	bne.n	80244b6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8024422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024424:	3330      	adds	r3, #48	; 0x30
 8024426:	3330      	adds	r3, #48	; 0x30
 8024428:	4618      	mov	r0, r3
 802442a:	f7fe fc27 	bl	8022c7c <ld_word>
 802442e:	4603      	mov	r3, r0
 8024430:	2b01      	cmp	r3, #1
 8024432:	d140      	bne.n	80244b6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8024434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024436:	3301      	adds	r3, #1
 8024438:	4619      	mov	r1, r3
 802443a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802443c:	f7fe fece 	bl	80231dc <move_window>
 8024440:	4603      	mov	r3, r0
 8024442:	2b00      	cmp	r3, #0
 8024444:	d137      	bne.n	80244b6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8024446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024448:	2200      	movs	r2, #0
 802444a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 802444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802444e:	3330      	adds	r3, #48	; 0x30
 8024450:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024454:	4618      	mov	r0, r3
 8024456:	f7fe fc11 	bl	8022c7c <ld_word>
 802445a:	4603      	mov	r3, r0
 802445c:	461a      	mov	r2, r3
 802445e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8024462:	429a      	cmp	r2, r3
 8024464:	d127      	bne.n	80244b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8024466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024468:	3330      	adds	r3, #48	; 0x30
 802446a:	4618      	mov	r0, r3
 802446c:	f7fe fc1e 	bl	8022cac <ld_dword>
 8024470:	4603      	mov	r3, r0
 8024472:	4a1c      	ldr	r2, [pc, #112]	; (80244e4 <find_volume+0x48c>)
 8024474:	4293      	cmp	r3, r2
 8024476:	d11e      	bne.n	80244b6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8024478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802447a:	3330      	adds	r3, #48	; 0x30
 802447c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8024480:	4618      	mov	r0, r3
 8024482:	f7fe fc13 	bl	8022cac <ld_dword>
 8024486:	4603      	mov	r3, r0
 8024488:	4a17      	ldr	r2, [pc, #92]	; (80244e8 <find_volume+0x490>)
 802448a:	4293      	cmp	r3, r2
 802448c:	d113      	bne.n	80244b6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 802448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024490:	3330      	adds	r3, #48	; 0x30
 8024492:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8024496:	4618      	mov	r0, r3
 8024498:	f7fe fc08 	bl	8022cac <ld_dword>
 802449c:	4602      	mov	r2, r0
 802449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244a0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80244a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244a4:	3330      	adds	r3, #48	; 0x30
 80244a6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80244aa:	4618      	mov	r0, r3
 80244ac:	f7fe fbfe 	bl	8022cac <ld_dword>
 80244b0:	4602      	mov	r2, r0
 80244b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244b4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80244b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80244bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80244be:	4b0b      	ldr	r3, [pc, #44]	; (80244ec <find_volume+0x494>)
 80244c0:	881b      	ldrh	r3, [r3, #0]
 80244c2:	3301      	adds	r3, #1
 80244c4:	b29a      	uxth	r2, r3
 80244c6:	4b09      	ldr	r3, [pc, #36]	; (80244ec <find_volume+0x494>)
 80244c8:	801a      	strh	r2, [r3, #0]
 80244ca:	4b08      	ldr	r3, [pc, #32]	; (80244ec <find_volume+0x494>)
 80244cc:	881a      	ldrh	r2, [r3, #0]
 80244ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244d0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80244d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80244d4:	f7fe fe1a 	bl	802310c <clear_lock>
#endif
	return FR_OK;
 80244d8:	2300      	movs	r3, #0
}
 80244da:	4618      	mov	r0, r3
 80244dc:	3758      	adds	r7, #88	; 0x58
 80244de:	46bd      	mov	sp, r7
 80244e0:	bd80      	pop	{r7, pc}
 80244e2:	bf00      	nop
 80244e4:	41615252 	.word	0x41615252
 80244e8:	61417272 	.word	0x61417272
 80244ec:	20009adc 	.word	0x20009adc

080244f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80244f0:	b580      	push	{r7, lr}
 80244f2:	b084      	sub	sp, #16
 80244f4:	af00      	add	r7, sp, #0
 80244f6:	6078      	str	r0, [r7, #4]
 80244f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80244fa:	2309      	movs	r3, #9
 80244fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80244fe:	687b      	ldr	r3, [r7, #4]
 8024500:	2b00      	cmp	r3, #0
 8024502:	d01c      	beq.n	802453e <validate+0x4e>
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	2b00      	cmp	r3, #0
 802450a:	d018      	beq.n	802453e <validate+0x4e>
 802450c:	687b      	ldr	r3, [r7, #4]
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	781b      	ldrb	r3, [r3, #0]
 8024512:	2b00      	cmp	r3, #0
 8024514:	d013      	beq.n	802453e <validate+0x4e>
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	889a      	ldrh	r2, [r3, #4]
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	681b      	ldr	r3, [r3, #0]
 802451e:	88db      	ldrh	r3, [r3, #6]
 8024520:	429a      	cmp	r2, r3
 8024522:	d10c      	bne.n	802453e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	681b      	ldr	r3, [r3, #0]
 8024528:	785b      	ldrb	r3, [r3, #1]
 802452a:	4618      	mov	r0, r3
 802452c:	f7fe fb08 	bl	8022b40 <disk_status>
 8024530:	4603      	mov	r3, r0
 8024532:	f003 0301 	and.w	r3, r3, #1
 8024536:	2b00      	cmp	r3, #0
 8024538:	d101      	bne.n	802453e <validate+0x4e>
			res = FR_OK;
 802453a:	2300      	movs	r3, #0
 802453c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 802453e:	7bfb      	ldrb	r3, [r7, #15]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d102      	bne.n	802454a <validate+0x5a>
 8024544:	687b      	ldr	r3, [r7, #4]
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	e000      	b.n	802454c <validate+0x5c>
 802454a:	2300      	movs	r3, #0
 802454c:	683a      	ldr	r2, [r7, #0]
 802454e:	6013      	str	r3, [r2, #0]
	return res;
 8024550:	7bfb      	ldrb	r3, [r7, #15]
}
 8024552:	4618      	mov	r0, r3
 8024554:	3710      	adds	r7, #16
 8024556:	46bd      	mov	sp, r7
 8024558:	bd80      	pop	{r7, pc}
	...

0802455c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 802455c:	b580      	push	{r7, lr}
 802455e:	b088      	sub	sp, #32
 8024560:	af00      	add	r7, sp, #0
 8024562:	60f8      	str	r0, [r7, #12]
 8024564:	60b9      	str	r1, [r7, #8]
 8024566:	4613      	mov	r3, r2
 8024568:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 802456a:	68bb      	ldr	r3, [r7, #8]
 802456c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 802456e:	f107 0310 	add.w	r3, r7, #16
 8024572:	4618      	mov	r0, r3
 8024574:	f7ff fcd5 	bl	8023f22 <get_ldnumber>
 8024578:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 802457a:	69fb      	ldr	r3, [r7, #28]
 802457c:	2b00      	cmp	r3, #0
 802457e:	da01      	bge.n	8024584 <f_mount+0x28>
 8024580:	230b      	movs	r3, #11
 8024582:	e02b      	b.n	80245dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8024584:	4a17      	ldr	r2, [pc, #92]	; (80245e4 <f_mount+0x88>)
 8024586:	69fb      	ldr	r3, [r7, #28]
 8024588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802458c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 802458e:	69bb      	ldr	r3, [r7, #24]
 8024590:	2b00      	cmp	r3, #0
 8024592:	d005      	beq.n	80245a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8024594:	69b8      	ldr	r0, [r7, #24]
 8024596:	f7fe fdb9 	bl	802310c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 802459a:	69bb      	ldr	r3, [r7, #24]
 802459c:	2200      	movs	r2, #0
 802459e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80245a0:	68fb      	ldr	r3, [r7, #12]
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	d002      	beq.n	80245ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80245a6:	68fb      	ldr	r3, [r7, #12]
 80245a8:	2200      	movs	r2, #0
 80245aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80245ac:	68fa      	ldr	r2, [r7, #12]
 80245ae:	490d      	ldr	r1, [pc, #52]	; (80245e4 <f_mount+0x88>)
 80245b0:	69fb      	ldr	r3, [r7, #28]
 80245b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80245b6:	68fb      	ldr	r3, [r7, #12]
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d002      	beq.n	80245c2 <f_mount+0x66>
 80245bc:	79fb      	ldrb	r3, [r7, #7]
 80245be:	2b01      	cmp	r3, #1
 80245c0:	d001      	beq.n	80245c6 <f_mount+0x6a>
 80245c2:	2300      	movs	r3, #0
 80245c4:	e00a      	b.n	80245dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80245c6:	f107 010c 	add.w	r1, r7, #12
 80245ca:	f107 0308 	add.w	r3, r7, #8
 80245ce:	2200      	movs	r2, #0
 80245d0:	4618      	mov	r0, r3
 80245d2:	f7ff fd41 	bl	8024058 <find_volume>
 80245d6:	4603      	mov	r3, r0
 80245d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80245da:	7dfb      	ldrb	r3, [r7, #23]
}
 80245dc:	4618      	mov	r0, r3
 80245de:	3720      	adds	r7, #32
 80245e0:	46bd      	mov	sp, r7
 80245e2:	bd80      	pop	{r7, pc}
 80245e4:	20009ad8 	.word	0x20009ad8

080245e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80245e8:	b580      	push	{r7, lr}
 80245ea:	b098      	sub	sp, #96	; 0x60
 80245ec:	af00      	add	r7, sp, #0
 80245ee:	60f8      	str	r0, [r7, #12]
 80245f0:	60b9      	str	r1, [r7, #8]
 80245f2:	4613      	mov	r3, r2
 80245f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80245f6:	68fb      	ldr	r3, [r7, #12]
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d101      	bne.n	8024600 <f_open+0x18>
 80245fc:	2309      	movs	r3, #9
 80245fe:	e1a9      	b.n	8024954 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8024600:	79fb      	ldrb	r3, [r7, #7]
 8024602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024606:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8024608:	79fa      	ldrb	r2, [r7, #7]
 802460a:	f107 0110 	add.w	r1, r7, #16
 802460e:	f107 0308 	add.w	r3, r7, #8
 8024612:	4618      	mov	r0, r3
 8024614:	f7ff fd20 	bl	8024058 <find_volume>
 8024618:	4603      	mov	r3, r0
 802461a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 802461e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024622:	2b00      	cmp	r3, #0
 8024624:	f040 818d 	bne.w	8024942 <f_open+0x35a>
		dj.obj.fs = fs;
 8024628:	693b      	ldr	r3, [r7, #16]
 802462a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 802462c:	68ba      	ldr	r2, [r7, #8]
 802462e:	f107 0314 	add.w	r3, r7, #20
 8024632:	4611      	mov	r1, r2
 8024634:	4618      	mov	r0, r3
 8024636:	f7ff fc03 	bl	8023e40 <follow_path>
 802463a:	4603      	mov	r3, r0
 802463c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8024640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024644:	2b00      	cmp	r3, #0
 8024646:	d11a      	bne.n	802467e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8024648:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802464c:	b25b      	sxtb	r3, r3
 802464e:	2b00      	cmp	r3, #0
 8024650:	da03      	bge.n	802465a <f_open+0x72>
				res = FR_INVALID_NAME;
 8024652:	2306      	movs	r3, #6
 8024654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024658:	e011      	b.n	802467e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 802465a:	79fb      	ldrb	r3, [r7, #7]
 802465c:	f023 0301 	bic.w	r3, r3, #1
 8024660:	2b00      	cmp	r3, #0
 8024662:	bf14      	ite	ne
 8024664:	2301      	movne	r3, #1
 8024666:	2300      	moveq	r3, #0
 8024668:	b2db      	uxtb	r3, r3
 802466a:	461a      	mov	r2, r3
 802466c:	f107 0314 	add.w	r3, r7, #20
 8024670:	4611      	mov	r1, r2
 8024672:	4618      	mov	r0, r3
 8024674:	f7fe fc02 	bl	8022e7c <chk_lock>
 8024678:	4603      	mov	r3, r0
 802467a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 802467e:	79fb      	ldrb	r3, [r7, #7]
 8024680:	f003 031c 	and.w	r3, r3, #28
 8024684:	2b00      	cmp	r3, #0
 8024686:	d07e      	beq.n	8024786 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8024688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802468c:	2b00      	cmp	r3, #0
 802468e:	d017      	beq.n	80246c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8024690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024694:	2b04      	cmp	r3, #4
 8024696:	d10e      	bne.n	80246b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8024698:	f7fe fc4c 	bl	8022f34 <enq_lock>
 802469c:	4603      	mov	r3, r0
 802469e:	2b00      	cmp	r3, #0
 80246a0:	d006      	beq.n	80246b0 <f_open+0xc8>
 80246a2:	f107 0314 	add.w	r3, r7, #20
 80246a6:	4618      	mov	r0, r3
 80246a8:	f7ff fb04 	bl	8023cb4 <dir_register>
 80246ac:	4603      	mov	r3, r0
 80246ae:	e000      	b.n	80246b2 <f_open+0xca>
 80246b0:	2312      	movs	r3, #18
 80246b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80246b6:	79fb      	ldrb	r3, [r7, #7]
 80246b8:	f043 0308 	orr.w	r3, r3, #8
 80246bc:	71fb      	strb	r3, [r7, #7]
 80246be:	e010      	b.n	80246e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80246c0:	7ebb      	ldrb	r3, [r7, #26]
 80246c2:	f003 0311 	and.w	r3, r3, #17
 80246c6:	2b00      	cmp	r3, #0
 80246c8:	d003      	beq.n	80246d2 <f_open+0xea>
					res = FR_DENIED;
 80246ca:	2307      	movs	r3, #7
 80246cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80246d0:	e007      	b.n	80246e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80246d2:	79fb      	ldrb	r3, [r7, #7]
 80246d4:	f003 0304 	and.w	r3, r3, #4
 80246d8:	2b00      	cmp	r3, #0
 80246da:	d002      	beq.n	80246e2 <f_open+0xfa>
 80246dc:	2308      	movs	r3, #8
 80246de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80246e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80246e6:	2b00      	cmp	r3, #0
 80246e8:	d167      	bne.n	80247ba <f_open+0x1d2>
 80246ea:	79fb      	ldrb	r3, [r7, #7]
 80246ec:	f003 0308 	and.w	r3, r3, #8
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d062      	beq.n	80247ba <f_open+0x1d2>
				dw = GET_FATTIME();
 80246f4:	4b99      	ldr	r3, [pc, #612]	; (802495c <f_open+0x374>)
 80246f6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80246f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80246fa:	330e      	adds	r3, #14
 80246fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80246fe:	4618      	mov	r0, r3
 8024700:	f7fe fb12 	bl	8022d28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8024704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024706:	3316      	adds	r3, #22
 8024708:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802470a:	4618      	mov	r0, r3
 802470c:	f7fe fb0c 	bl	8022d28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8024710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024712:	330b      	adds	r3, #11
 8024714:	2220      	movs	r2, #32
 8024716:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8024718:	693b      	ldr	r3, [r7, #16]
 802471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802471c:	4611      	mov	r1, r2
 802471e:	4618      	mov	r0, r3
 8024720:	f7ff fa34 	bl	8023b8c <ld_clust>
 8024724:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8024726:	693b      	ldr	r3, [r7, #16]
 8024728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802472a:	2200      	movs	r2, #0
 802472c:	4618      	mov	r0, r3
 802472e:	f7ff fa4c 	bl	8023bca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8024732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024734:	331c      	adds	r3, #28
 8024736:	2100      	movs	r1, #0
 8024738:	4618      	mov	r0, r3
 802473a:	f7fe faf5 	bl	8022d28 <st_dword>
					fs->wflag = 1;
 802473e:	693b      	ldr	r3, [r7, #16]
 8024740:	2201      	movs	r2, #1
 8024742:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8024744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8024746:	2b00      	cmp	r3, #0
 8024748:	d037      	beq.n	80247ba <f_open+0x1d2>
						dw = fs->winsect;
 802474a:	693b      	ldr	r3, [r7, #16]
 802474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802474e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8024750:	f107 0314 	add.w	r3, r7, #20
 8024754:	2200      	movs	r2, #0
 8024756:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8024758:	4618      	mov	r0, r3
 802475a:	f7fe ff93 	bl	8023684 <remove_chain>
 802475e:	4603      	mov	r3, r0
 8024760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8024764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024768:	2b00      	cmp	r3, #0
 802476a:	d126      	bne.n	80247ba <f_open+0x1d2>
							res = move_window(fs, dw);
 802476c:	693b      	ldr	r3, [r7, #16]
 802476e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8024770:	4618      	mov	r0, r3
 8024772:	f7fe fd33 	bl	80231dc <move_window>
 8024776:	4603      	mov	r3, r0
 8024778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 802477c:	693b      	ldr	r3, [r7, #16]
 802477e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8024780:	3a01      	subs	r2, #1
 8024782:	60da      	str	r2, [r3, #12]
 8024784:	e019      	b.n	80247ba <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8024786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802478a:	2b00      	cmp	r3, #0
 802478c:	d115      	bne.n	80247ba <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 802478e:	7ebb      	ldrb	r3, [r7, #26]
 8024790:	f003 0310 	and.w	r3, r3, #16
 8024794:	2b00      	cmp	r3, #0
 8024796:	d003      	beq.n	80247a0 <f_open+0x1b8>
					res = FR_NO_FILE;
 8024798:	2304      	movs	r3, #4
 802479a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 802479e:	e00c      	b.n	80247ba <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80247a0:	79fb      	ldrb	r3, [r7, #7]
 80247a2:	f003 0302 	and.w	r3, r3, #2
 80247a6:	2b00      	cmp	r3, #0
 80247a8:	d007      	beq.n	80247ba <f_open+0x1d2>
 80247aa:	7ebb      	ldrb	r3, [r7, #26]
 80247ac:	f003 0301 	and.w	r3, r3, #1
 80247b0:	2b00      	cmp	r3, #0
 80247b2:	d002      	beq.n	80247ba <f_open+0x1d2>
						res = FR_DENIED;
 80247b4:	2307      	movs	r3, #7
 80247b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80247ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80247be:	2b00      	cmp	r3, #0
 80247c0:	d128      	bne.n	8024814 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80247c2:	79fb      	ldrb	r3, [r7, #7]
 80247c4:	f003 0308 	and.w	r3, r3, #8
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	d003      	beq.n	80247d4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80247cc:	79fb      	ldrb	r3, [r7, #7]
 80247ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247d2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80247d4:	693b      	ldr	r3, [r7, #16]
 80247d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80247dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247de:	68fb      	ldr	r3, [r7, #12]
 80247e0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80247e2:	79fb      	ldrb	r3, [r7, #7]
 80247e4:	f023 0301 	bic.w	r3, r3, #1
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	bf14      	ite	ne
 80247ec:	2301      	movne	r3, #1
 80247ee:	2300      	moveq	r3, #0
 80247f0:	b2db      	uxtb	r3, r3
 80247f2:	461a      	mov	r2, r3
 80247f4:	f107 0314 	add.w	r3, r7, #20
 80247f8:	4611      	mov	r1, r2
 80247fa:	4618      	mov	r0, r3
 80247fc:	f7fe fbbc 	bl	8022f78 <inc_lock>
 8024800:	4602      	mov	r2, r0
 8024802:	68fb      	ldr	r3, [r7, #12]
 8024804:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8024806:	68fb      	ldr	r3, [r7, #12]
 8024808:	691b      	ldr	r3, [r3, #16]
 802480a:	2b00      	cmp	r3, #0
 802480c:	d102      	bne.n	8024814 <f_open+0x22c>
 802480e:	2302      	movs	r3, #2
 8024810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8024814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024818:	2b00      	cmp	r3, #0
 802481a:	f040 8092 	bne.w	8024942 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 802481e:	693b      	ldr	r3, [r7, #16]
 8024820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024822:	4611      	mov	r1, r2
 8024824:	4618      	mov	r0, r3
 8024826:	f7ff f9b1 	bl	8023b8c <ld_clust>
 802482a:	4602      	mov	r2, r0
 802482c:	68fb      	ldr	r3, [r7, #12]
 802482e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8024830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024832:	331c      	adds	r3, #28
 8024834:	4618      	mov	r0, r3
 8024836:	f7fe fa39 	bl	8022cac <ld_dword>
 802483a:	4602      	mov	r2, r0
 802483c:	68fb      	ldr	r3, [r7, #12]
 802483e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8024840:	693a      	ldr	r2, [r7, #16]
 8024842:	68fb      	ldr	r3, [r7, #12]
 8024844:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8024846:	693b      	ldr	r3, [r7, #16]
 8024848:	88da      	ldrh	r2, [r3, #6]
 802484a:	68fb      	ldr	r3, [r7, #12]
 802484c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 802484e:	68fb      	ldr	r3, [r7, #12]
 8024850:	79fa      	ldrb	r2, [r7, #7]
 8024852:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8024854:	68fb      	ldr	r3, [r7, #12]
 8024856:	2200      	movs	r2, #0
 8024858:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	2200      	movs	r2, #0
 802485e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8024860:	68fb      	ldr	r3, [r7, #12]
 8024862:	2200      	movs	r2, #0
 8024864:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8024866:	68fb      	ldr	r3, [r7, #12]
 8024868:	332c      	adds	r3, #44	; 0x2c
 802486a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802486e:	2100      	movs	r1, #0
 8024870:	4618      	mov	r0, r3
 8024872:	f7fe faa6 	bl	8022dc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8024876:	79fb      	ldrb	r3, [r7, #7]
 8024878:	f003 0320 	and.w	r3, r3, #32
 802487c:	2b00      	cmp	r3, #0
 802487e:	d060      	beq.n	8024942 <f_open+0x35a>
 8024880:	68fb      	ldr	r3, [r7, #12]
 8024882:	68db      	ldr	r3, [r3, #12]
 8024884:	2b00      	cmp	r3, #0
 8024886:	d05c      	beq.n	8024942 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8024888:	68fb      	ldr	r3, [r7, #12]
 802488a:	68da      	ldr	r2, [r3, #12]
 802488c:	68fb      	ldr	r3, [r7, #12]
 802488e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8024890:	693b      	ldr	r3, [r7, #16]
 8024892:	895b      	ldrh	r3, [r3, #10]
 8024894:	031b      	lsls	r3, r3, #12
 8024896:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8024898:	68fb      	ldr	r3, [r7, #12]
 802489a:	689b      	ldr	r3, [r3, #8]
 802489c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	68db      	ldr	r3, [r3, #12]
 80248a2:	657b      	str	r3, [r7, #84]	; 0x54
 80248a4:	e016      	b.n	80248d4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80248a6:	68fb      	ldr	r3, [r7, #12]
 80248a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80248aa:	4618      	mov	r0, r3
 80248ac:	f7fe fd51 	bl	8023352 <get_fat>
 80248b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80248b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80248b4:	2b01      	cmp	r3, #1
 80248b6:	d802      	bhi.n	80248be <f_open+0x2d6>
 80248b8:	2302      	movs	r3, #2
 80248ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80248be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80248c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248c4:	d102      	bne.n	80248cc <f_open+0x2e4>
 80248c6:	2301      	movs	r3, #1
 80248c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80248cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80248ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80248d0:	1ad3      	subs	r3, r2, r3
 80248d2:	657b      	str	r3, [r7, #84]	; 0x54
 80248d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d103      	bne.n	80248e4 <f_open+0x2fc>
 80248dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80248de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80248e0:	429a      	cmp	r2, r3
 80248e2:	d8e0      	bhi.n	80248a6 <f_open+0x2be>
				}
				fp->clust = clst;
 80248e4:	68fb      	ldr	r3, [r7, #12]
 80248e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80248e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80248ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	d127      	bne.n	8024942 <f_open+0x35a>
 80248f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80248f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d022      	beq.n	8024942 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80248fc:	693b      	ldr	r3, [r7, #16]
 80248fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8024900:	4618      	mov	r0, r3
 8024902:	f7fe fd07 	bl	8023314 <clust2sect>
 8024906:	6478      	str	r0, [r7, #68]	; 0x44
 8024908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802490a:	2b00      	cmp	r3, #0
 802490c:	d103      	bne.n	8024916 <f_open+0x32e>
						res = FR_INT_ERR;
 802490e:	2302      	movs	r3, #2
 8024910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8024914:	e015      	b.n	8024942 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8024916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024918:	0b1a      	lsrs	r2, r3, #12
 802491a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802491c:	441a      	add	r2, r3
 802491e:	68fb      	ldr	r3, [r7, #12]
 8024920:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8024922:	693b      	ldr	r3, [r7, #16]
 8024924:	7858      	ldrb	r0, [r3, #1]
 8024926:	68fb      	ldr	r3, [r7, #12]
 8024928:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 802492c:	68fb      	ldr	r3, [r7, #12]
 802492e:	6a1a      	ldr	r2, [r3, #32]
 8024930:	2301      	movs	r3, #1
 8024932:	f7fe f945 	bl	8022bc0 <disk_read>
 8024936:	4603      	mov	r3, r0
 8024938:	2b00      	cmp	r3, #0
 802493a:	d002      	beq.n	8024942 <f_open+0x35a>
 802493c:	2301      	movs	r3, #1
 802493e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8024942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8024946:	2b00      	cmp	r3, #0
 8024948:	d002      	beq.n	8024950 <f_open+0x368>
 802494a:	68fb      	ldr	r3, [r7, #12]
 802494c:	2200      	movs	r2, #0
 802494e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8024950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8024954:	4618      	mov	r0, r3
 8024956:	3760      	adds	r7, #96	; 0x60
 8024958:	46bd      	mov	sp, r7
 802495a:	bd80      	pop	{r7, pc}
 802495c:	53740000 	.word	0x53740000

08024960 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8024960:	b580      	push	{r7, lr}
 8024962:	b08e      	sub	sp, #56	; 0x38
 8024964:	af00      	add	r7, sp, #0
 8024966:	60f8      	str	r0, [r7, #12]
 8024968:	60b9      	str	r1, [r7, #8]
 802496a:	607a      	str	r2, [r7, #4]
 802496c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 802496e:	68bb      	ldr	r3, [r7, #8]
 8024970:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8024972:	683b      	ldr	r3, [r7, #0]
 8024974:	2200      	movs	r2, #0
 8024976:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8024978:	68fb      	ldr	r3, [r7, #12]
 802497a:	f107 0214 	add.w	r2, r7, #20
 802497e:	4611      	mov	r1, r2
 8024980:	4618      	mov	r0, r3
 8024982:	f7ff fdb5 	bl	80244f0 <validate>
 8024986:	4603      	mov	r3, r0
 8024988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 802498c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024990:	2b00      	cmp	r3, #0
 8024992:	d107      	bne.n	80249a4 <f_read+0x44>
 8024994:	68fb      	ldr	r3, [r7, #12]
 8024996:	7d5b      	ldrb	r3, [r3, #21]
 8024998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802499c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80249a0:	2b00      	cmp	r3, #0
 80249a2:	d002      	beq.n	80249aa <f_read+0x4a>
 80249a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80249a8:	e0ef      	b.n	8024b8a <f_read+0x22a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80249aa:	68fb      	ldr	r3, [r7, #12]
 80249ac:	7d1b      	ldrb	r3, [r3, #20]
 80249ae:	f003 0301 	and.w	r3, r3, #1
 80249b2:	2b00      	cmp	r3, #0
 80249b4:	d101      	bne.n	80249ba <f_read+0x5a>
 80249b6:	2307      	movs	r3, #7
 80249b8:	e0e7      	b.n	8024b8a <f_read+0x22a>
	remain = fp->obj.objsize - fp->fptr;
 80249ba:	68fb      	ldr	r3, [r7, #12]
 80249bc:	68da      	ldr	r2, [r3, #12]
 80249be:	68fb      	ldr	r3, [r7, #12]
 80249c0:	699b      	ldr	r3, [r3, #24]
 80249c2:	1ad3      	subs	r3, r2, r3
 80249c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80249c6:	687a      	ldr	r2, [r7, #4]
 80249c8:	6a3b      	ldr	r3, [r7, #32]
 80249ca:	429a      	cmp	r2, r3
 80249cc:	f240 80d8 	bls.w	8024b80 <f_read+0x220>
 80249d0:	6a3b      	ldr	r3, [r7, #32]
 80249d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80249d4:	e0d4      	b.n	8024b80 <f_read+0x220>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80249d6:	68fb      	ldr	r3, [r7, #12]
 80249d8:	699b      	ldr	r3, [r3, #24]
 80249da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80249de:	2b00      	cmp	r3, #0
 80249e0:	f040 80a0 	bne.w	8024b24 <f_read+0x1c4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80249e4:	68fb      	ldr	r3, [r7, #12]
 80249e6:	699b      	ldr	r3, [r3, #24]
 80249e8:	0b1b      	lsrs	r3, r3, #12
 80249ea:	697a      	ldr	r2, [r7, #20]
 80249ec:	8952      	ldrh	r2, [r2, #10]
 80249ee:	3a01      	subs	r2, #1
 80249f0:	4013      	ands	r3, r2
 80249f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80249f4:	69fb      	ldr	r3, [r7, #28]
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	d123      	bne.n	8024a42 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80249fa:	68fb      	ldr	r3, [r7, #12]
 80249fc:	699b      	ldr	r3, [r3, #24]
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d103      	bne.n	8024a0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8024a02:	68fb      	ldr	r3, [r7, #12]
 8024a04:	689b      	ldr	r3, [r3, #8]
 8024a06:	633b      	str	r3, [r7, #48]	; 0x30
 8024a08:	e007      	b.n	8024a1a <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8024a0a:	68fa      	ldr	r2, [r7, #12]
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	69db      	ldr	r3, [r3, #28]
 8024a10:	4619      	mov	r1, r3
 8024a12:	4610      	mov	r0, r2
 8024a14:	f7fe fc9d 	bl	8023352 <get_fat>
 8024a18:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8024a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a1c:	2b01      	cmp	r3, #1
 8024a1e:	d804      	bhi.n	8024a2a <f_read+0xca>
 8024a20:	68fb      	ldr	r3, [r7, #12]
 8024a22:	2202      	movs	r2, #2
 8024a24:	755a      	strb	r2, [r3, #21]
 8024a26:	2302      	movs	r3, #2
 8024a28:	e0af      	b.n	8024b8a <f_read+0x22a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8024a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a30:	d104      	bne.n	8024a3c <f_read+0xdc>
 8024a32:	68fb      	ldr	r3, [r7, #12]
 8024a34:	2201      	movs	r2, #1
 8024a36:	755a      	strb	r2, [r3, #21]
 8024a38:	2301      	movs	r3, #1
 8024a3a:	e0a6      	b.n	8024b8a <f_read+0x22a>
				fp->clust = clst;				/* Update current cluster */
 8024a3c:	68fb      	ldr	r3, [r7, #12]
 8024a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024a40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8024a42:	697a      	ldr	r2, [r7, #20]
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	69db      	ldr	r3, [r3, #28]
 8024a48:	4619      	mov	r1, r3
 8024a4a:	4610      	mov	r0, r2
 8024a4c:	f7fe fc62 	bl	8023314 <clust2sect>
 8024a50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8024a52:	69bb      	ldr	r3, [r7, #24]
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d104      	bne.n	8024a62 <f_read+0x102>
 8024a58:	68fb      	ldr	r3, [r7, #12]
 8024a5a:	2202      	movs	r2, #2
 8024a5c:	755a      	strb	r2, [r3, #21]
 8024a5e:	2302      	movs	r3, #2
 8024a60:	e093      	b.n	8024b8a <f_read+0x22a>
			sect += csect;
 8024a62:	69ba      	ldr	r2, [r7, #24]
 8024a64:	69fb      	ldr	r3, [r7, #28]
 8024a66:	4413      	add	r3, r2
 8024a68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8024a6a:	687b      	ldr	r3, [r7, #4]
 8024a6c:	0b1b      	lsrs	r3, r3, #12
 8024a6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8024a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d01f      	beq.n	8024ab6 <f_read+0x156>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8024a76:	69fa      	ldr	r2, [r7, #28]
 8024a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a7a:	4413      	add	r3, r2
 8024a7c:	697a      	ldr	r2, [r7, #20]
 8024a7e:	8952      	ldrh	r2, [r2, #10]
 8024a80:	4293      	cmp	r3, r2
 8024a82:	d905      	bls.n	8024a90 <f_read+0x130>
					cc = fs->csize - csect;
 8024a84:	697b      	ldr	r3, [r7, #20]
 8024a86:	895b      	ldrh	r3, [r3, #10]
 8024a88:	461a      	mov	r2, r3
 8024a8a:	69fb      	ldr	r3, [r7, #28]
 8024a8c:	1ad3      	subs	r3, r2, r3
 8024a8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024a90:	697b      	ldr	r3, [r7, #20]
 8024a92:	7858      	ldrb	r0, [r3, #1]
 8024a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a96:	69ba      	ldr	r2, [r7, #24]
 8024a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024a9a:	f7fe f891 	bl	8022bc0 <disk_read>
 8024a9e:	4603      	mov	r3, r0
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	d004      	beq.n	8024aae <f_read+0x14e>
 8024aa4:	68fb      	ldr	r3, [r7, #12]
 8024aa6:	2201      	movs	r2, #1
 8024aa8:	755a      	strb	r2, [r3, #21]
 8024aaa:	2301      	movs	r3, #1
 8024aac:	e06d      	b.n	8024b8a <f_read+0x22a>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8024aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ab0:	031b      	lsls	r3, r3, #12
 8024ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8024ab4:	e050      	b.n	8024b58 <f_read+0x1f8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8024ab6:	68fb      	ldr	r3, [r7, #12]
 8024ab8:	6a1b      	ldr	r3, [r3, #32]
 8024aba:	69ba      	ldr	r2, [r7, #24]
 8024abc:	429a      	cmp	r2, r3
 8024abe:	d02e      	beq.n	8024b1e <f_read+0x1be>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	7d1b      	ldrb	r3, [r3, #20]
 8024ac4:	b25b      	sxtb	r3, r3
 8024ac6:	2b00      	cmp	r3, #0
 8024ac8:	da18      	bge.n	8024afc <f_read+0x19c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024aca:	697b      	ldr	r3, [r7, #20]
 8024acc:	7858      	ldrb	r0, [r3, #1]
 8024ace:	68fb      	ldr	r3, [r7, #12]
 8024ad0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024ad4:	68fb      	ldr	r3, [r7, #12]
 8024ad6:	6a1a      	ldr	r2, [r3, #32]
 8024ad8:	2301      	movs	r3, #1
 8024ada:	f7fe f891 	bl	8022c00 <disk_write>
 8024ade:	4603      	mov	r3, r0
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	d004      	beq.n	8024aee <f_read+0x18e>
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	2201      	movs	r2, #1
 8024ae8:	755a      	strb	r2, [r3, #21]
 8024aea:	2301      	movs	r3, #1
 8024aec:	e04d      	b.n	8024b8a <f_read+0x22a>
					fp->flag &= (BYTE)~FA_DIRTY;
 8024aee:	68fb      	ldr	r3, [r7, #12]
 8024af0:	7d1b      	ldrb	r3, [r3, #20]
 8024af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024af6:	b2da      	uxtb	r2, r3
 8024af8:	68fb      	ldr	r3, [r7, #12]
 8024afa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8024afc:	697b      	ldr	r3, [r7, #20]
 8024afe:	7858      	ldrb	r0, [r3, #1]
 8024b00:	68fb      	ldr	r3, [r7, #12]
 8024b02:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024b06:	2301      	movs	r3, #1
 8024b08:	69ba      	ldr	r2, [r7, #24]
 8024b0a:	f7fe f859 	bl	8022bc0 <disk_read>
 8024b0e:	4603      	mov	r3, r0
 8024b10:	2b00      	cmp	r3, #0
 8024b12:	d004      	beq.n	8024b1e <f_read+0x1be>
 8024b14:	68fb      	ldr	r3, [r7, #12]
 8024b16:	2201      	movs	r2, #1
 8024b18:	755a      	strb	r2, [r3, #21]
 8024b1a:	2301      	movs	r3, #1
 8024b1c:	e035      	b.n	8024b8a <f_read+0x22a>
			}
#endif
			fp->sect = sect;
 8024b1e:	68fb      	ldr	r3, [r7, #12]
 8024b20:	69ba      	ldr	r2, [r7, #24]
 8024b22:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8024b24:	68fb      	ldr	r3, [r7, #12]
 8024b26:	699b      	ldr	r3, [r3, #24]
 8024b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024b2c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024b30:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8024b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	429a      	cmp	r2, r3
 8024b38:	d901      	bls.n	8024b3e <f_read+0x1de>
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8024b3e:	68fb      	ldr	r3, [r7, #12]
 8024b40:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	699b      	ldr	r3, [r3, #24]
 8024b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024b4c:	4413      	add	r3, r2
 8024b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024b50:	4619      	mov	r1, r3
 8024b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024b54:	f7fe f914 	bl	8022d80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8024b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b5c:	4413      	add	r3, r2
 8024b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8024b60:	68fb      	ldr	r3, [r7, #12]
 8024b62:	699a      	ldr	r2, [r3, #24]
 8024b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b66:	441a      	add	r2, r3
 8024b68:	68fb      	ldr	r3, [r7, #12]
 8024b6a:	619a      	str	r2, [r3, #24]
 8024b6c:	683b      	ldr	r3, [r7, #0]
 8024b6e:	681a      	ldr	r2, [r3, #0]
 8024b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b72:	441a      	add	r2, r3
 8024b74:	683b      	ldr	r3, [r7, #0]
 8024b76:	601a      	str	r2, [r3, #0]
 8024b78:	687a      	ldr	r2, [r7, #4]
 8024b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b7c:	1ad3      	subs	r3, r2, r3
 8024b7e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	f47f af27 	bne.w	80249d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8024b88:	2300      	movs	r3, #0
}
 8024b8a:	4618      	mov	r0, r3
 8024b8c:	3738      	adds	r7, #56	; 0x38
 8024b8e:	46bd      	mov	sp, r7
 8024b90:	bd80      	pop	{r7, pc}

08024b92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8024b92:	b580      	push	{r7, lr}
 8024b94:	b08c      	sub	sp, #48	; 0x30
 8024b96:	af00      	add	r7, sp, #0
 8024b98:	60f8      	str	r0, [r7, #12]
 8024b9a:	60b9      	str	r1, [r7, #8]
 8024b9c:	607a      	str	r2, [r7, #4]
 8024b9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8024ba0:	68bb      	ldr	r3, [r7, #8]
 8024ba2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8024ba4:	683b      	ldr	r3, [r7, #0]
 8024ba6:	2200      	movs	r2, #0
 8024ba8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8024baa:	68fb      	ldr	r3, [r7, #12]
 8024bac:	f107 0210 	add.w	r2, r7, #16
 8024bb0:	4611      	mov	r1, r2
 8024bb2:	4618      	mov	r0, r3
 8024bb4:	f7ff fc9c 	bl	80244f0 <validate>
 8024bb8:	4603      	mov	r3, r0
 8024bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8024bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024bc2:	2b00      	cmp	r3, #0
 8024bc4:	d107      	bne.n	8024bd6 <f_write+0x44>
 8024bc6:	68fb      	ldr	r3, [r7, #12]
 8024bc8:	7d5b      	ldrb	r3, [r3, #21]
 8024bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8024bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024bd2:	2b00      	cmp	r3, #0
 8024bd4:	d002      	beq.n	8024bdc <f_write+0x4a>
 8024bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024bda:	e122      	b.n	8024e22 <f_write+0x290>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8024bdc:	68fb      	ldr	r3, [r7, #12]
 8024bde:	7d1b      	ldrb	r3, [r3, #20]
 8024be0:	f003 0302 	and.w	r3, r3, #2
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	d101      	bne.n	8024bec <f_write+0x5a>
 8024be8:	2307      	movs	r3, #7
 8024bea:	e11a      	b.n	8024e22 <f_write+0x290>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	699a      	ldr	r2, [r3, #24]
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	441a      	add	r2, r3
 8024bf4:	68fb      	ldr	r3, [r7, #12]
 8024bf6:	699b      	ldr	r3, [r3, #24]
 8024bf8:	429a      	cmp	r2, r3
 8024bfa:	f080 8104 	bcs.w	8024e06 <f_write+0x274>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8024bfe:	68fb      	ldr	r3, [r7, #12]
 8024c00:	699b      	ldr	r3, [r3, #24]
 8024c02:	43db      	mvns	r3, r3
 8024c04:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8024c06:	e0fe      	b.n	8024e06 <f_write+0x274>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8024c08:	68fb      	ldr	r3, [r7, #12]
 8024c0a:	699b      	ldr	r3, [r3, #24]
 8024c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	f040 80ba 	bne.w	8024d8a <f_write+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8024c16:	68fb      	ldr	r3, [r7, #12]
 8024c18:	699b      	ldr	r3, [r3, #24]
 8024c1a:	0b1b      	lsrs	r3, r3, #12
 8024c1c:	693a      	ldr	r2, [r7, #16]
 8024c1e:	8952      	ldrh	r2, [r2, #10]
 8024c20:	3a01      	subs	r2, #1
 8024c22:	4013      	ands	r3, r2
 8024c24:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8024c26:	69bb      	ldr	r3, [r7, #24]
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d137      	bne.n	8024c9c <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8024c2c:	68fb      	ldr	r3, [r7, #12]
 8024c2e:	699b      	ldr	r3, [r3, #24]
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	d10c      	bne.n	8024c4e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8024c34:	68fb      	ldr	r3, [r7, #12]
 8024c36:	689b      	ldr	r3, [r3, #8]
 8024c38:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8024c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d10e      	bne.n	8024c5e <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8024c40:	68fb      	ldr	r3, [r7, #12]
 8024c42:	2100      	movs	r1, #0
 8024c44:	4618      	mov	r0, r3
 8024c46:	f7fe fd82 	bl	802374e <create_chain>
 8024c4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8024c4c:	e007      	b.n	8024c5e <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8024c4e:	68fa      	ldr	r2, [r7, #12]
 8024c50:	68fb      	ldr	r3, [r7, #12]
 8024c52:	69db      	ldr	r3, [r3, #28]
 8024c54:	4619      	mov	r1, r3
 8024c56:	4610      	mov	r0, r2
 8024c58:	f7fe fd79 	bl	802374e <create_chain>
 8024c5c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	f000 80d5 	beq.w	8024e10 <f_write+0x27e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8024c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c68:	2b01      	cmp	r3, #1
 8024c6a:	d104      	bne.n	8024c76 <f_write+0xe4>
 8024c6c:	68fb      	ldr	r3, [r7, #12]
 8024c6e:	2202      	movs	r2, #2
 8024c70:	755a      	strb	r2, [r3, #21]
 8024c72:	2302      	movs	r3, #2
 8024c74:	e0d5      	b.n	8024e22 <f_write+0x290>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8024c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c7c:	d104      	bne.n	8024c88 <f_write+0xf6>
 8024c7e:	68fb      	ldr	r3, [r7, #12]
 8024c80:	2201      	movs	r2, #1
 8024c82:	755a      	strb	r2, [r3, #21]
 8024c84:	2301      	movs	r3, #1
 8024c86:	e0cc      	b.n	8024e22 <f_write+0x290>
				fp->clust = clst;			/* Update current cluster */
 8024c88:	68fb      	ldr	r3, [r7, #12]
 8024c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c8c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8024c8e:	68fb      	ldr	r3, [r7, #12]
 8024c90:	689b      	ldr	r3, [r3, #8]
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	d102      	bne.n	8024c9c <f_write+0x10a>
 8024c96:	68fb      	ldr	r3, [r7, #12]
 8024c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024c9a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8024c9c:	68fb      	ldr	r3, [r7, #12]
 8024c9e:	7d1b      	ldrb	r3, [r3, #20]
 8024ca0:	b25b      	sxtb	r3, r3
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	da18      	bge.n	8024cd8 <f_write+0x146>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024ca6:	693b      	ldr	r3, [r7, #16]
 8024ca8:	7858      	ldrb	r0, [r3, #1]
 8024caa:	68fb      	ldr	r3, [r7, #12]
 8024cac:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	6a1a      	ldr	r2, [r3, #32]
 8024cb4:	2301      	movs	r3, #1
 8024cb6:	f7fd ffa3 	bl	8022c00 <disk_write>
 8024cba:	4603      	mov	r3, r0
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d004      	beq.n	8024cca <f_write+0x138>
 8024cc0:	68fb      	ldr	r3, [r7, #12]
 8024cc2:	2201      	movs	r2, #1
 8024cc4:	755a      	strb	r2, [r3, #21]
 8024cc6:	2301      	movs	r3, #1
 8024cc8:	e0ab      	b.n	8024e22 <f_write+0x290>
				fp->flag &= (BYTE)~FA_DIRTY;
 8024cca:	68fb      	ldr	r3, [r7, #12]
 8024ccc:	7d1b      	ldrb	r3, [r3, #20]
 8024cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024cd2:	b2da      	uxtb	r2, r3
 8024cd4:	68fb      	ldr	r3, [r7, #12]
 8024cd6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8024cd8:	693a      	ldr	r2, [r7, #16]
 8024cda:	68fb      	ldr	r3, [r7, #12]
 8024cdc:	69db      	ldr	r3, [r3, #28]
 8024cde:	4619      	mov	r1, r3
 8024ce0:	4610      	mov	r0, r2
 8024ce2:	f7fe fb17 	bl	8023314 <clust2sect>
 8024ce6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8024ce8:	697b      	ldr	r3, [r7, #20]
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d104      	bne.n	8024cf8 <f_write+0x166>
 8024cee:	68fb      	ldr	r3, [r7, #12]
 8024cf0:	2202      	movs	r2, #2
 8024cf2:	755a      	strb	r2, [r3, #21]
 8024cf4:	2302      	movs	r3, #2
 8024cf6:	e094      	b.n	8024e22 <f_write+0x290>
			sect += csect;
 8024cf8:	697a      	ldr	r2, [r7, #20]
 8024cfa:	69bb      	ldr	r3, [r7, #24]
 8024cfc:	4413      	add	r3, r2
 8024cfe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8024d00:	687b      	ldr	r3, [r7, #4]
 8024d02:	0b1b      	lsrs	r3, r3, #12
 8024d04:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8024d06:	6a3b      	ldr	r3, [r7, #32]
 8024d08:	2b00      	cmp	r3, #0
 8024d0a:	d01f      	beq.n	8024d4c <f_write+0x1ba>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8024d0c:	69ba      	ldr	r2, [r7, #24]
 8024d0e:	6a3b      	ldr	r3, [r7, #32]
 8024d10:	4413      	add	r3, r2
 8024d12:	693a      	ldr	r2, [r7, #16]
 8024d14:	8952      	ldrh	r2, [r2, #10]
 8024d16:	4293      	cmp	r3, r2
 8024d18:	d905      	bls.n	8024d26 <f_write+0x194>
					cc = fs->csize - csect;
 8024d1a:	693b      	ldr	r3, [r7, #16]
 8024d1c:	895b      	ldrh	r3, [r3, #10]
 8024d1e:	461a      	mov	r2, r3
 8024d20:	69bb      	ldr	r3, [r7, #24]
 8024d22:	1ad3      	subs	r3, r2, r3
 8024d24:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8024d26:	693b      	ldr	r3, [r7, #16]
 8024d28:	7858      	ldrb	r0, [r3, #1]
 8024d2a:	6a3b      	ldr	r3, [r7, #32]
 8024d2c:	697a      	ldr	r2, [r7, #20]
 8024d2e:	69f9      	ldr	r1, [r7, #28]
 8024d30:	f7fd ff66 	bl	8022c00 <disk_write>
 8024d34:	4603      	mov	r3, r0
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	d004      	beq.n	8024d44 <f_write+0x1b2>
 8024d3a:	68fb      	ldr	r3, [r7, #12]
 8024d3c:	2201      	movs	r2, #1
 8024d3e:	755a      	strb	r2, [r3, #21]
 8024d40:	2301      	movs	r3, #1
 8024d42:	e06e      	b.n	8024e22 <f_write+0x290>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8024d44:	6a3b      	ldr	r3, [r7, #32]
 8024d46:	031b      	lsls	r3, r3, #12
 8024d48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8024d4a:	e03f      	b.n	8024dcc <f_write+0x23a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8024d4c:	68fb      	ldr	r3, [r7, #12]
 8024d4e:	6a1b      	ldr	r3, [r3, #32]
 8024d50:	697a      	ldr	r2, [r7, #20]
 8024d52:	429a      	cmp	r2, r3
 8024d54:	d016      	beq.n	8024d84 <f_write+0x1f2>
				fp->fptr < fp->obj.objsize &&
 8024d56:	68fb      	ldr	r3, [r7, #12]
 8024d58:	699a      	ldr	r2, [r3, #24]
 8024d5a:	68fb      	ldr	r3, [r7, #12]
 8024d5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8024d5e:	429a      	cmp	r2, r3
 8024d60:	d210      	bcs.n	8024d84 <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8024d62:	693b      	ldr	r3, [r7, #16]
 8024d64:	7858      	ldrb	r0, [r3, #1]
 8024d66:	68fb      	ldr	r3, [r7, #12]
 8024d68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024d6c:	2301      	movs	r3, #1
 8024d6e:	697a      	ldr	r2, [r7, #20]
 8024d70:	f7fd ff26 	bl	8022bc0 <disk_read>
 8024d74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	d004      	beq.n	8024d84 <f_write+0x1f2>
					ABORT(fs, FR_DISK_ERR);
 8024d7a:	68fb      	ldr	r3, [r7, #12]
 8024d7c:	2201      	movs	r2, #1
 8024d7e:	755a      	strb	r2, [r3, #21]
 8024d80:	2301      	movs	r3, #1
 8024d82:	e04e      	b.n	8024e22 <f_write+0x290>
			}
#endif
			fp->sect = sect;
 8024d84:	68fb      	ldr	r3, [r7, #12]
 8024d86:	697a      	ldr	r2, [r7, #20]
 8024d88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8024d8a:	68fb      	ldr	r3, [r7, #12]
 8024d8c:	699b      	ldr	r3, [r3, #24]
 8024d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d92:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8024d96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8024d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	429a      	cmp	r2, r3
 8024d9e:	d901      	bls.n	8024da4 <f_write+0x212>
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8024da4:	68fb      	ldr	r3, [r7, #12]
 8024da6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8024daa:	68fb      	ldr	r3, [r7, #12]
 8024dac:	699b      	ldr	r3, [r3, #24]
 8024dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024db2:	4413      	add	r3, r2
 8024db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024db6:	69f9      	ldr	r1, [r7, #28]
 8024db8:	4618      	mov	r0, r3
 8024dba:	f7fd ffe1 	bl	8022d80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8024dbe:	68fb      	ldr	r3, [r7, #12]
 8024dc0:	7d1b      	ldrb	r3, [r3, #20]
 8024dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8024dc6:	b2da      	uxtb	r2, r3
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8024dcc:	69fa      	ldr	r2, [r7, #28]
 8024dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024dd0:	4413      	add	r3, r2
 8024dd2:	61fb      	str	r3, [r7, #28]
 8024dd4:	68fb      	ldr	r3, [r7, #12]
 8024dd6:	699a      	ldr	r2, [r3, #24]
 8024dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024dda:	441a      	add	r2, r3
 8024ddc:	68fb      	ldr	r3, [r7, #12]
 8024dde:	619a      	str	r2, [r3, #24]
 8024de0:	68fb      	ldr	r3, [r7, #12]
 8024de2:	68da      	ldr	r2, [r3, #12]
 8024de4:	68fb      	ldr	r3, [r7, #12]
 8024de6:	699b      	ldr	r3, [r3, #24]
 8024de8:	429a      	cmp	r2, r3
 8024dea:	bf38      	it	cc
 8024dec:	461a      	movcc	r2, r3
 8024dee:	68fb      	ldr	r3, [r7, #12]
 8024df0:	60da      	str	r2, [r3, #12]
 8024df2:	683b      	ldr	r3, [r7, #0]
 8024df4:	681a      	ldr	r2, [r3, #0]
 8024df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024df8:	441a      	add	r2, r3
 8024dfa:	683b      	ldr	r3, [r7, #0]
 8024dfc:	601a      	str	r2, [r3, #0]
 8024dfe:	687a      	ldr	r2, [r7, #4]
 8024e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e02:	1ad3      	subs	r3, r2, r3
 8024e04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8024e06:	687b      	ldr	r3, [r7, #4]
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	f47f aefd 	bne.w	8024c08 <f_write+0x76>
 8024e0e:	e000      	b.n	8024e12 <f_write+0x280>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8024e10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8024e12:	68fb      	ldr	r3, [r7, #12]
 8024e14:	7d1b      	ldrb	r3, [r3, #20]
 8024e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024e1a:	b2da      	uxtb	r2, r3
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8024e20:	2300      	movs	r3, #0
}
 8024e22:	4618      	mov	r0, r3
 8024e24:	3730      	adds	r7, #48	; 0x30
 8024e26:	46bd      	mov	sp, r7
 8024e28:	bd80      	pop	{r7, pc}
	...

08024e2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8024e2c:	b580      	push	{r7, lr}
 8024e2e:	b086      	sub	sp, #24
 8024e30:	af00      	add	r7, sp, #0
 8024e32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	f107 0208 	add.w	r2, r7, #8
 8024e3a:	4611      	mov	r1, r2
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f7ff fb57 	bl	80244f0 <validate>
 8024e42:	4603      	mov	r3, r0
 8024e44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8024e46:	7dfb      	ldrb	r3, [r7, #23]
 8024e48:	2b00      	cmp	r3, #0
 8024e4a:	d167      	bne.n	8024f1c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	7d1b      	ldrb	r3, [r3, #20]
 8024e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024e54:	2b00      	cmp	r3, #0
 8024e56:	d061      	beq.n	8024f1c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	7d1b      	ldrb	r3, [r3, #20]
 8024e5c:	b25b      	sxtb	r3, r3
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	da15      	bge.n	8024e8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8024e62:	68bb      	ldr	r3, [r7, #8]
 8024e64:	7858      	ldrb	r0, [r3, #1]
 8024e66:	687b      	ldr	r3, [r7, #4]
 8024e68:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	6a1a      	ldr	r2, [r3, #32]
 8024e70:	2301      	movs	r3, #1
 8024e72:	f7fd fec5 	bl	8022c00 <disk_write>
 8024e76:	4603      	mov	r3, r0
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	d001      	beq.n	8024e80 <f_sync+0x54>
 8024e7c:	2301      	movs	r3, #1
 8024e7e:	e04e      	b.n	8024f1e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	7d1b      	ldrb	r3, [r3, #20]
 8024e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024e88:	b2da      	uxtb	r2, r3
 8024e8a:	687b      	ldr	r3, [r7, #4]
 8024e8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8024e8e:	4b26      	ldr	r3, [pc, #152]	; (8024f28 <f_sync+0xfc>)
 8024e90:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8024e92:	68ba      	ldr	r2, [r7, #8]
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e98:	4619      	mov	r1, r3
 8024e9a:	4610      	mov	r0, r2
 8024e9c:	f7fe f99e 	bl	80231dc <move_window>
 8024ea0:	4603      	mov	r3, r0
 8024ea2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8024ea4:	7dfb      	ldrb	r3, [r7, #23]
 8024ea6:	2b00      	cmp	r3, #0
 8024ea8:	d138      	bne.n	8024f1c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8024eaa:	687b      	ldr	r3, [r7, #4]
 8024eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024eae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	330b      	adds	r3, #11
 8024eb4:	781a      	ldrb	r2, [r3, #0]
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	330b      	adds	r3, #11
 8024eba:	f042 0220 	orr.w	r2, r2, #32
 8024ebe:	b2d2      	uxtb	r2, r2
 8024ec0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	6818      	ldr	r0, [r3, #0]
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	689b      	ldr	r3, [r3, #8]
 8024eca:	461a      	mov	r2, r3
 8024ecc:	68f9      	ldr	r1, [r7, #12]
 8024ece:	f7fe fe7c 	bl	8023bca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8024ed2:	68fb      	ldr	r3, [r7, #12]
 8024ed4:	f103 021c 	add.w	r2, r3, #28
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	68db      	ldr	r3, [r3, #12]
 8024edc:	4619      	mov	r1, r3
 8024ede:	4610      	mov	r0, r2
 8024ee0:	f7fd ff22 	bl	8022d28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8024ee4:	68fb      	ldr	r3, [r7, #12]
 8024ee6:	3316      	adds	r3, #22
 8024ee8:	6939      	ldr	r1, [r7, #16]
 8024eea:	4618      	mov	r0, r3
 8024eec:	f7fd ff1c 	bl	8022d28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8024ef0:	68fb      	ldr	r3, [r7, #12]
 8024ef2:	3312      	adds	r3, #18
 8024ef4:	2100      	movs	r1, #0
 8024ef6:	4618      	mov	r0, r3
 8024ef8:	f7fd fefb 	bl	8022cf2 <st_word>
					fs->wflag = 1;
 8024efc:	68bb      	ldr	r3, [r7, #8]
 8024efe:	2201      	movs	r2, #1
 8024f00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8024f02:	68bb      	ldr	r3, [r7, #8]
 8024f04:	4618      	mov	r0, r3
 8024f06:	f7fe f997 	bl	8023238 <sync_fs>
 8024f0a:	4603      	mov	r3, r0
 8024f0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8024f0e:	687b      	ldr	r3, [r7, #4]
 8024f10:	7d1b      	ldrb	r3, [r3, #20]
 8024f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024f16:	b2da      	uxtb	r2, r3
 8024f18:	687b      	ldr	r3, [r7, #4]
 8024f1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8024f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8024f1e:	4618      	mov	r0, r3
 8024f20:	3718      	adds	r7, #24
 8024f22:	46bd      	mov	sp, r7
 8024f24:	bd80      	pop	{r7, pc}
 8024f26:	bf00      	nop
 8024f28:	53740000 	.word	0x53740000

08024f2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8024f2c:	b580      	push	{r7, lr}
 8024f2e:	b084      	sub	sp, #16
 8024f30:	af00      	add	r7, sp, #0
 8024f32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8024f34:	6878      	ldr	r0, [r7, #4]
 8024f36:	f7ff ff79 	bl	8024e2c <f_sync>
 8024f3a:	4603      	mov	r3, r0
 8024f3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8024f3e:	7bfb      	ldrb	r3, [r7, #15]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d118      	bne.n	8024f76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	f107 0208 	add.w	r2, r7, #8
 8024f4a:	4611      	mov	r1, r2
 8024f4c:	4618      	mov	r0, r3
 8024f4e:	f7ff facf 	bl	80244f0 <validate>
 8024f52:	4603      	mov	r3, r0
 8024f54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8024f56:	7bfb      	ldrb	r3, [r7, #15]
 8024f58:	2b00      	cmp	r3, #0
 8024f5a:	d10c      	bne.n	8024f76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	691b      	ldr	r3, [r3, #16]
 8024f60:	4618      	mov	r0, r3
 8024f62:	f7fe f897 	bl	8023094 <dec_lock>
 8024f66:	4603      	mov	r3, r0
 8024f68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8024f6a:	7bfb      	ldrb	r3, [r7, #15]
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	d102      	bne.n	8024f76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	2200      	movs	r2, #0
 8024f74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8024f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8024f78:	4618      	mov	r0, r3
 8024f7a:	3710      	adds	r7, #16
 8024f7c:	46bd      	mov	sp, r7
 8024f7e:	bd80      	pop	{r7, pc}

08024f80 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8024f80:	b580      	push	{r7, lr}
 8024f82:	b09c      	sub	sp, #112	; 0x70
 8024f84:	af00      	add	r7, sp, #0
 8024f86:	60f8      	str	r0, [r7, #12]
 8024f88:	607a      	str	r2, [r7, #4]
 8024f8a:	603b      	str	r3, [r7, #0]
 8024f8c:	460b      	mov	r3, r1
 8024f8e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8024f90:	2301      	movs	r3, #1
 8024f92:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8024f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024f98:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8024f9a:	f107 030c 	add.w	r3, r7, #12
 8024f9e:	4618      	mov	r0, r3
 8024fa0:	f7fe ffbf 	bl	8023f22 <get_ldnumber>
 8024fa4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8024fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	da02      	bge.n	8024fb2 <f_mkfs+0x32>
 8024fac:	230b      	movs	r3, #11
 8024fae:	f000 bc07 	b.w	80257c0 <f_mkfs+0x840>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8024fb2:	4a94      	ldr	r2, [pc, #592]	; (8025204 <f_mkfs+0x284>)
 8024fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	d005      	beq.n	8024fca <f_mkfs+0x4a>
 8024fbe:	4a91      	ldr	r2, [pc, #580]	; (8025204 <f_mkfs+0x284>)
 8024fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024fc6:	2200      	movs	r2, #0
 8024fc8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8024fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024fcc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8024fd0:	2300      	movs	r3, #0
 8024fd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8024fd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8024fda:	4618      	mov	r0, r3
 8024fdc:	f7fd fdca 	bl	8022b74 <disk_initialize>
 8024fe0:	4603      	mov	r3, r0
 8024fe2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8024fe6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8024fea:	f003 0301 	and.w	r3, r3, #1
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	d001      	beq.n	8024ff6 <f_mkfs+0x76>
 8024ff2:	2303      	movs	r3, #3
 8024ff4:	e3e4      	b.n	80257c0 <f_mkfs+0x840>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8024ff6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8024ffa:	f003 0304 	and.w	r3, r3, #4
 8024ffe:	2b00      	cmp	r3, #0
 8025000:	d001      	beq.n	8025006 <f_mkfs+0x86>
 8025002:	230a      	movs	r3, #10
 8025004:	e3dc      	b.n	80257c0 <f_mkfs+0x840>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8025006:	f107 0214 	add.w	r2, r7, #20
 802500a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 802500e:	2103      	movs	r1, #3
 8025010:	4618      	mov	r0, r3
 8025012:	f7fd fe15 	bl	8022c40 <disk_ioctl>
 8025016:	4603      	mov	r3, r0
 8025018:	2b00      	cmp	r3, #0
 802501a:	d10c      	bne.n	8025036 <f_mkfs+0xb6>
 802501c:	697b      	ldr	r3, [r7, #20]
 802501e:	2b00      	cmp	r3, #0
 8025020:	d009      	beq.n	8025036 <f_mkfs+0xb6>
 8025022:	697b      	ldr	r3, [r7, #20]
 8025024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025028:	d805      	bhi.n	8025036 <f_mkfs+0xb6>
 802502a:	697b      	ldr	r3, [r7, #20]
 802502c:	1e5a      	subs	r2, r3, #1
 802502e:	697b      	ldr	r3, [r7, #20]
 8025030:	4013      	ands	r3, r2
 8025032:	2b00      	cmp	r3, #0
 8025034:	d001      	beq.n	802503a <f_mkfs+0xba>
 8025036:	2301      	movs	r3, #1
 8025038:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 802503a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802503e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	2b00      	cmp	r3, #0
 8025044:	d003      	beq.n	802504e <f_mkfs+0xce>
 8025046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025048:	687a      	ldr	r2, [r7, #4]
 802504a:	429a      	cmp	r2, r3
 802504c:	d309      	bcc.n	8025062 <f_mkfs+0xe2>
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8025054:	d805      	bhi.n	8025062 <f_mkfs+0xe2>
 8025056:	687b      	ldr	r3, [r7, #4]
 8025058:	1e5a      	subs	r2, r3, #1
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	4013      	ands	r3, r2
 802505e:	2b00      	cmp	r3, #0
 8025060:	d001      	beq.n	8025066 <f_mkfs+0xe6>
 8025062:	2313      	movs	r3, #19
 8025064:	e3ac      	b.n	80257c0 <f_mkfs+0x840>
	au /= ss;	/* Cluster size in unit of sector */
 8025066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025068:	687a      	ldr	r2, [r7, #4]
 802506a:	fbb2 f3f3 	udiv	r3, r2, r3
 802506e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8025070:	683b      	ldr	r3, [r7, #0]
 8025072:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8025074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025076:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025078:	fbb2 f3f3 	udiv	r3, r2, r3
 802507c:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 802507e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025082:	fb02 f303 	mul.w	r3, r2, r3
 8025086:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8025088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802508a:	2b00      	cmp	r3, #0
 802508c:	d101      	bne.n	8025092 <f_mkfs+0x112>
 802508e:	230e      	movs	r3, #14
 8025090:	e396      	b.n	80257c0 <f_mkfs+0x840>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8025092:	f107 0210 	add.w	r2, r7, #16
 8025096:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 802509a:	2101      	movs	r1, #1
 802509c:	4618      	mov	r0, r3
 802509e:	f7fd fdcf 	bl	8022c40 <disk_ioctl>
 80250a2:	4603      	mov	r3, r0
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d001      	beq.n	80250ac <f_mkfs+0x12c>
 80250a8:	2301      	movs	r3, #1
 80250aa:	e389      	b.n	80257c0 <f_mkfs+0x840>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80250ac:	7afb      	ldrb	r3, [r7, #11]
 80250ae:	f003 0308 	and.w	r3, r3, #8
 80250b2:	2b00      	cmp	r3, #0
 80250b4:	d001      	beq.n	80250ba <f_mkfs+0x13a>
 80250b6:	2300      	movs	r3, #0
 80250b8:	e000      	b.n	80250bc <f_mkfs+0x13c>
 80250ba:	233f      	movs	r3, #63	; 0x3f
 80250bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80250be:	693b      	ldr	r3, [r7, #16]
 80250c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80250c2:	429a      	cmp	r2, r3
 80250c4:	d901      	bls.n	80250ca <f_mkfs+0x14a>
 80250c6:	230e      	movs	r3, #14
 80250c8:	e37a      	b.n	80257c0 <f_mkfs+0x840>
		sz_vol -= b_vol;						/* Volume size */
 80250ca:	693a      	ldr	r2, [r7, #16]
 80250cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250ce:	1ad3      	subs	r3, r2, r3
 80250d0:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80250d2:	693b      	ldr	r3, [r7, #16]
 80250d4:	2b7f      	cmp	r3, #127	; 0x7f
 80250d6:	d801      	bhi.n	80250dc <f_mkfs+0x15c>
 80250d8:	230e      	movs	r3, #14
 80250da:	e371      	b.n	80257c0 <f_mkfs+0x840>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	2b80      	cmp	r3, #128	; 0x80
 80250e0:	d901      	bls.n	80250e6 <f_mkfs+0x166>
 80250e2:	2313      	movs	r3, #19
 80250e4:	e36c      	b.n	80257c0 <f_mkfs+0x840>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80250e6:	7afb      	ldrb	r3, [r7, #11]
 80250e8:	f003 0302 	and.w	r3, r3, #2
 80250ec:	2b00      	cmp	r3, #0
 80250ee:	d00d      	beq.n	802510c <f_mkfs+0x18c>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80250f0:	7afb      	ldrb	r3, [r7, #11]
 80250f2:	f003 0307 	and.w	r3, r3, #7
 80250f6:	2b02      	cmp	r3, #2
 80250f8:	d004      	beq.n	8025104 <f_mkfs+0x184>
 80250fa:	7afb      	ldrb	r3, [r7, #11]
 80250fc:	f003 0301 	and.w	r3, r3, #1
 8025100:	2b00      	cmp	r3, #0
 8025102:	d103      	bne.n	802510c <f_mkfs+0x18c>
				fmt = FS_FAT32; break;
 8025104:	2303      	movs	r3, #3
 8025106:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802510a:	e009      	b.n	8025120 <f_mkfs+0x1a0>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 802510c:	7afb      	ldrb	r3, [r7, #11]
 802510e:	f003 0301 	and.w	r3, r3, #1
 8025112:	2b00      	cmp	r3, #0
 8025114:	d101      	bne.n	802511a <f_mkfs+0x19a>
 8025116:	2313      	movs	r3, #19
 8025118:	e352      	b.n	80257c0 <f_mkfs+0x840>
		fmt = FS_FAT16;
 802511a:	2302      	movs	r3, #2
 802511c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8025120:	687b      	ldr	r3, [r7, #4]
 8025122:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8025124:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025128:	2b03      	cmp	r3, #3
 802512a:	d13c      	bne.n	80251a6 <f_mkfs+0x226>
				if (!pau) {	/* au auto-selection */
 802512c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802512e:	2b00      	cmp	r3, #0
 8025130:	d11b      	bne.n	802516a <f_mkfs+0x1ea>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8025132:	693b      	ldr	r3, [r7, #16]
 8025134:	0c5b      	lsrs	r3, r3, #17
 8025136:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8025138:	2300      	movs	r3, #0
 802513a:	64bb      	str	r3, [r7, #72]	; 0x48
 802513c:	2301      	movs	r3, #1
 802513e:	653b      	str	r3, [r7, #80]	; 0x50
 8025140:	e005      	b.n	802514e <f_mkfs+0x1ce>
 8025142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025144:	3301      	adds	r3, #1
 8025146:	64bb      	str	r3, [r7, #72]	; 0x48
 8025148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802514a:	005b      	lsls	r3, r3, #1
 802514c:	653b      	str	r3, [r7, #80]	; 0x50
 802514e:	4a2e      	ldr	r2, [pc, #184]	; (8025208 <f_mkfs+0x288>)
 8025150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025156:	2b00      	cmp	r3, #0
 8025158:	d007      	beq.n	802516a <f_mkfs+0x1ea>
 802515a:	4a2b      	ldr	r2, [pc, #172]	; (8025208 <f_mkfs+0x288>)
 802515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802515e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025162:	461a      	mov	r2, r3
 8025164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025166:	4293      	cmp	r3, r2
 8025168:	d2eb      	bcs.n	8025142 <f_mkfs+0x1c2>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 802516a:	693a      	ldr	r2, [r7, #16]
 802516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8025172:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8025174:	6a3b      	ldr	r3, [r7, #32]
 8025176:	3302      	adds	r3, #2
 8025178:	009a      	lsls	r2, r3, #2
 802517a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802517c:	4413      	add	r3, r2
 802517e:	1e5a      	subs	r2, r3, #1
 8025180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025182:	fbb2 f3f3 	udiv	r3, r2, r3
 8025186:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8025188:	2320      	movs	r3, #32
 802518a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 802518c:	2300      	movs	r3, #0
 802518e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8025190:	6a3b      	ldr	r3, [r7, #32]
 8025192:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8025196:	4293      	cmp	r3, r2
 8025198:	d903      	bls.n	80251a2 <f_mkfs+0x222>
 802519a:	6a3b      	ldr	r3, [r7, #32]
 802519c:	4a1b      	ldr	r2, [pc, #108]	; (802520c <f_mkfs+0x28c>)
 802519e:	4293      	cmp	r3, r2
 80251a0:	d953      	bls.n	802524a <f_mkfs+0x2ca>
 80251a2:	230e      	movs	r3, #14
 80251a4:	e30c      	b.n	80257c0 <f_mkfs+0x840>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80251a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80251a8:	2b00      	cmp	r3, #0
 80251aa:	d11b      	bne.n	80251e4 <f_mkfs+0x264>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80251ac:	693b      	ldr	r3, [r7, #16]
 80251ae:	0b1b      	lsrs	r3, r3, #12
 80251b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80251b2:	2300      	movs	r3, #0
 80251b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80251b6:	2301      	movs	r3, #1
 80251b8:	653b      	str	r3, [r7, #80]	; 0x50
 80251ba:	e005      	b.n	80251c8 <f_mkfs+0x248>
 80251bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80251be:	3301      	adds	r3, #1
 80251c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80251c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80251c4:	005b      	lsls	r3, r3, #1
 80251c6:	653b      	str	r3, [r7, #80]	; 0x50
 80251c8:	4a11      	ldr	r2, [pc, #68]	; (8025210 <f_mkfs+0x290>)
 80251ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80251cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d007      	beq.n	80251e4 <f_mkfs+0x264>
 80251d4:	4a0e      	ldr	r2, [pc, #56]	; (8025210 <f_mkfs+0x290>)
 80251d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80251d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80251dc:	461a      	mov	r2, r3
 80251de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251e0:	4293      	cmp	r3, r2
 80251e2:	d2eb      	bcs.n	80251bc <f_mkfs+0x23c>
				}
				n_clst = sz_vol / pau;
 80251e4:	693a      	ldr	r2, [r7, #16]
 80251e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80251e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80251ec:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80251ee:	6a3b      	ldr	r3, [r7, #32]
 80251f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80251f4:	4293      	cmp	r3, r2
 80251f6:	d90d      	bls.n	8025214 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80251f8:	6a3b      	ldr	r3, [r7, #32]
 80251fa:	3302      	adds	r3, #2
 80251fc:	005b      	lsls	r3, r3, #1
 80251fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025200:	e013      	b.n	802522a <f_mkfs+0x2aa>
 8025202:	bf00      	nop
 8025204:	20009ad8 	.word	0x20009ad8
 8025208:	08002484 	.word	0x08002484
 802520c:	0ffffff5 	.word	0x0ffffff5
 8025210:	08002494 	.word	0x08002494
				} else {
					fmt = FS_FAT12;
 8025214:	2301      	movs	r3, #1
 8025216:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 802521a:	6a3a      	ldr	r2, [r7, #32]
 802521c:	4613      	mov	r3, r2
 802521e:	005b      	lsls	r3, r3, #1
 8025220:	4413      	add	r3, r2
 8025222:	3301      	adds	r3, #1
 8025224:	085b      	lsrs	r3, r3, #1
 8025226:	3303      	adds	r3, #3
 8025228:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 802522a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802522c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802522e:	4413      	add	r3, r2
 8025230:	1e5a      	subs	r2, r3, #1
 8025232:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025234:	fbb2 f3f3 	udiv	r3, r2, r3
 8025238:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 802523a:	2301      	movs	r3, #1
 802523c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 802523e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025240:	015a      	lsls	r2, r3, #5
 8025242:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025244:	fbb2 f3f3 	udiv	r3, r2, r3
 8025248:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 802524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802524c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802524e:	4413      	add	r3, r2
 8025250:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8025252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8025254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025256:	fb03 f202 	mul.w	r2, r3, r2
 802525a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802525c:	4413      	add	r3, r2
 802525e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8025260:	4413      	add	r3, r2
 8025262:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8025264:	697a      	ldr	r2, [r7, #20]
 8025266:	69fb      	ldr	r3, [r7, #28]
 8025268:	4413      	add	r3, r2
 802526a:	1e5a      	subs	r2, r3, #1
 802526c:	697b      	ldr	r3, [r7, #20]
 802526e:	425b      	negs	r3, r3
 8025270:	401a      	ands	r2, r3
 8025272:	69fb      	ldr	r3, [r7, #28]
 8025274:	1ad3      	subs	r3, r2, r3
 8025276:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8025278:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802527c:	2b03      	cmp	r3, #3
 802527e:	d108      	bne.n	8025292 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8025280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025284:	4413      	add	r3, r2
 8025286:	657b      	str	r3, [r7, #84]	; 0x54
 8025288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802528c:	4413      	add	r3, r2
 802528e:	65bb      	str	r3, [r7, #88]	; 0x58
 8025290:	e006      	b.n	80252a0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8025292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025296:	fbb2 f3f3 	udiv	r3, r2, r3
 802529a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802529c:	4413      	add	r3, r2
 802529e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80252a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252a2:	011a      	lsls	r2, r3, #4
 80252a4:	69fb      	ldr	r3, [r7, #28]
 80252a6:	441a      	add	r2, r3
 80252a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252aa:	1ad2      	subs	r2, r2, r3
 80252ac:	693b      	ldr	r3, [r7, #16]
 80252ae:	429a      	cmp	r2, r3
 80252b0:	d901      	bls.n	80252b6 <f_mkfs+0x336>
 80252b2:	230e      	movs	r3, #14
 80252b4:	e284      	b.n	80257c0 <f_mkfs+0x840>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80252b6:	693a      	ldr	r2, [r7, #16]
 80252b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252ba:	1ad2      	subs	r2, r2, r3
 80252bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80252be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80252c0:	fb01 f303 	mul.w	r3, r1, r3
 80252c4:	1ad2      	subs	r2, r2, r3
 80252c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80252c8:	1ad2      	subs	r2, r2, r3
 80252ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80252d0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80252d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80252d6:	2b03      	cmp	r3, #3
 80252d8:	d10f      	bne.n	80252fa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80252da:	6a3b      	ldr	r3, [r7, #32]
 80252dc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80252e0:	4293      	cmp	r3, r2
 80252e2:	d80a      	bhi.n	80252fa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	d105      	bne.n	80252f6 <f_mkfs+0x376>
 80252ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80252ec:	085b      	lsrs	r3, r3, #1
 80252ee:	607b      	str	r3, [r7, #4]
 80252f0:	687b      	ldr	r3, [r7, #4]
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d144      	bne.n	8025380 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80252f6:	230e      	movs	r3, #14
 80252f8:	e262      	b.n	80257c0 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT16) {
 80252fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80252fe:	2b02      	cmp	r3, #2
 8025300:	d133      	bne.n	802536a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8025302:	6a3b      	ldr	r3, [r7, #32]
 8025304:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8025308:	4293      	cmp	r3, r2
 802530a:	d91e      	bls.n	802534a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	2b00      	cmp	r3, #0
 8025310:	d107      	bne.n	8025322 <f_mkfs+0x3a2>
 8025312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025314:	005b      	lsls	r3, r3, #1
 8025316:	2b40      	cmp	r3, #64	; 0x40
 8025318:	d803      	bhi.n	8025322 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 802531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802531c:	005b      	lsls	r3, r3, #1
 802531e:	607b      	str	r3, [r7, #4]
 8025320:	e033      	b.n	802538a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8025322:	7afb      	ldrb	r3, [r7, #11]
 8025324:	f003 0302 	and.w	r3, r3, #2
 8025328:	2b00      	cmp	r3, #0
 802532a:	d003      	beq.n	8025334 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 802532c:	2303      	movs	r3, #3
 802532e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8025332:	e02a      	b.n	802538a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	2b00      	cmp	r3, #0
 8025338:	d105      	bne.n	8025346 <f_mkfs+0x3c6>
 802533a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802533c:	005b      	lsls	r3, r3, #1
 802533e:	607b      	str	r3, [r7, #4]
 8025340:	687b      	ldr	r3, [r7, #4]
 8025342:	2b80      	cmp	r3, #128	; 0x80
 8025344:	d91e      	bls.n	8025384 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8025346:	230e      	movs	r3, #14
 8025348:	e23a      	b.n	80257c0 <f_mkfs+0x840>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 802534a:	6a3b      	ldr	r3, [r7, #32]
 802534c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025350:	4293      	cmp	r3, r2
 8025352:	d80a      	bhi.n	802536a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	2b00      	cmp	r3, #0
 8025358:	d105      	bne.n	8025366 <f_mkfs+0x3e6>
 802535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802535c:	005b      	lsls	r3, r3, #1
 802535e:	607b      	str	r3, [r7, #4]
 8025360:	687b      	ldr	r3, [r7, #4]
 8025362:	2b80      	cmp	r3, #128	; 0x80
 8025364:	d910      	bls.n	8025388 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8025366:	230e      	movs	r3, #14
 8025368:	e22a      	b.n	80257c0 <f_mkfs+0x840>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 802536a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802536e:	2b01      	cmp	r3, #1
 8025370:	d10c      	bne.n	802538c <f_mkfs+0x40c>
 8025372:	6a3b      	ldr	r3, [r7, #32]
 8025374:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025378:	4293      	cmp	r3, r2
 802537a:	d907      	bls.n	802538c <f_mkfs+0x40c>
 802537c:	230e      	movs	r3, #14
 802537e:	e21f      	b.n	80257c0 <f_mkfs+0x840>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8025380:	bf00      	nop
 8025382:	e6cd      	b.n	8025120 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8025384:	bf00      	nop
 8025386:	e6cb      	b.n	8025120 <f_mkfs+0x1a0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8025388:	bf00      	nop
			pau = au;
 802538a:	e6c9      	b.n	8025120 <f_mkfs+0x1a0>

			/* Ok, it is the valid cluster configuration */
			break;
 802538c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 802538e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025390:	461a      	mov	r2, r3
 8025392:	2100      	movs	r1, #0
 8025394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025396:	f7fd fd14 	bl	8022dc2 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 802539a:	220b      	movs	r2, #11
 802539c:	49ae      	ldr	r1, [pc, #696]	; (8025658 <f_mkfs+0x6d8>)
 802539e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80253a0:	f7fd fcee 	bl	8022d80 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80253a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253a6:	330b      	adds	r3, #11
 80253a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80253aa:	4611      	mov	r1, r2
 80253ac:	4618      	mov	r0, r3
 80253ae:	f7fd fca0 	bl	8022cf2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80253b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253b4:	330d      	adds	r3, #13
 80253b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80253b8:	b2d2      	uxtb	r2, r2
 80253ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80253bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253be:	330e      	adds	r3, #14
 80253c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80253c2:	b292      	uxth	r2, r2
 80253c4:	4611      	mov	r1, r2
 80253c6:	4618      	mov	r0, r3
 80253c8:	f7fd fc93 	bl	8022cf2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80253cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253ce:	3310      	adds	r3, #16
 80253d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80253d2:	b2d2      	uxtb	r2, r2
 80253d4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80253d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253d8:	f103 0211 	add.w	r2, r3, #17
 80253dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80253e0:	2b03      	cmp	r3, #3
 80253e2:	d002      	beq.n	80253ea <f_mkfs+0x46a>
 80253e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253e6:	b29b      	uxth	r3, r3
 80253e8:	e000      	b.n	80253ec <f_mkfs+0x46c>
 80253ea:	2300      	movs	r3, #0
 80253ec:	4619      	mov	r1, r3
 80253ee:	4610      	mov	r0, r2
 80253f0:	f7fd fc7f 	bl	8022cf2 <st_word>
		if (sz_vol < 0x10000) {
 80253f4:	693b      	ldr	r3, [r7, #16]
 80253f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80253fa:	d208      	bcs.n	802540e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80253fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253fe:	3313      	adds	r3, #19
 8025400:	693a      	ldr	r2, [r7, #16]
 8025402:	b292      	uxth	r2, r2
 8025404:	4611      	mov	r1, r2
 8025406:	4618      	mov	r0, r3
 8025408:	f7fd fc73 	bl	8022cf2 <st_word>
 802540c:	e006      	b.n	802541c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 802540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025410:	3320      	adds	r3, #32
 8025412:	693a      	ldr	r2, [r7, #16]
 8025414:	4611      	mov	r1, r2
 8025416:	4618      	mov	r0, r3
 8025418:	f7fd fc86 	bl	8022d28 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 802541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802541e:	3315      	adds	r3, #21
 8025420:	22f8      	movs	r2, #248	; 0xf8
 8025422:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8025424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025426:	3318      	adds	r3, #24
 8025428:	213f      	movs	r1, #63	; 0x3f
 802542a:	4618      	mov	r0, r3
 802542c:	f7fd fc61 	bl	8022cf2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8025430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025432:	331a      	adds	r3, #26
 8025434:	21ff      	movs	r1, #255	; 0xff
 8025436:	4618      	mov	r0, r3
 8025438:	f7fd fc5b 	bl	8022cf2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 802543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802543e:	331c      	adds	r3, #28
 8025440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025442:	4618      	mov	r0, r3
 8025444:	f7fd fc70 	bl	8022d28 <st_dword>
		if (fmt == FS_FAT32) {
 8025448:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802544c:	2b03      	cmp	r3, #3
 802544e:	d12d      	bne.n	80254ac <f_mkfs+0x52c>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8025450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025452:	3343      	adds	r3, #67	; 0x43
 8025454:	4981      	ldr	r1, [pc, #516]	; (802565c <f_mkfs+0x6dc>)
 8025456:	4618      	mov	r0, r3
 8025458:	f7fd fc66 	bl	8022d28 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 802545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802545e:	3324      	adds	r3, #36	; 0x24
 8025460:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8025462:	4618      	mov	r0, r3
 8025464:	f7fd fc60 	bl	8022d28 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8025468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802546a:	332c      	adds	r3, #44	; 0x2c
 802546c:	2102      	movs	r1, #2
 802546e:	4618      	mov	r0, r3
 8025470:	f7fd fc5a 	bl	8022d28 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8025474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025476:	3330      	adds	r3, #48	; 0x30
 8025478:	2101      	movs	r1, #1
 802547a:	4618      	mov	r0, r3
 802547c:	f7fd fc39 	bl	8022cf2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8025480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025482:	3332      	adds	r3, #50	; 0x32
 8025484:	2106      	movs	r1, #6
 8025486:	4618      	mov	r0, r3
 8025488:	f7fd fc33 	bl	8022cf2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 802548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802548e:	3340      	adds	r3, #64	; 0x40
 8025490:	2280      	movs	r2, #128	; 0x80
 8025492:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8025494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025496:	3342      	adds	r3, #66	; 0x42
 8025498:	2229      	movs	r2, #41	; 0x29
 802549a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 802549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802549e:	3347      	adds	r3, #71	; 0x47
 80254a0:	2213      	movs	r2, #19
 80254a2:	496f      	ldr	r1, [pc, #444]	; (8025660 <f_mkfs+0x6e0>)
 80254a4:	4618      	mov	r0, r3
 80254a6:	f7fd fc6b 	bl	8022d80 <mem_cpy>
 80254aa:	e01c      	b.n	80254e6 <f_mkfs+0x566>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80254ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254ae:	3327      	adds	r3, #39	; 0x27
 80254b0:	496a      	ldr	r1, [pc, #424]	; (802565c <f_mkfs+0x6dc>)
 80254b2:	4618      	mov	r0, r3
 80254b4:	f7fd fc38 	bl	8022d28 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80254b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254ba:	3316      	adds	r3, #22
 80254bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80254be:	b292      	uxth	r2, r2
 80254c0:	4611      	mov	r1, r2
 80254c2:	4618      	mov	r0, r3
 80254c4:	f7fd fc15 	bl	8022cf2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80254c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254ca:	3324      	adds	r3, #36	; 0x24
 80254cc:	2280      	movs	r2, #128	; 0x80
 80254ce:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80254d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254d2:	3326      	adds	r3, #38	; 0x26
 80254d4:	2229      	movs	r2, #41	; 0x29
 80254d6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80254d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254da:	332b      	adds	r3, #43	; 0x2b
 80254dc:	2213      	movs	r2, #19
 80254de:	4961      	ldr	r1, [pc, #388]	; (8025664 <f_mkfs+0x6e4>)
 80254e0:	4618      	mov	r0, r3
 80254e2:	f7fd fc4d 	bl	8022d80 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80254e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80254e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80254ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80254f0:	4618      	mov	r0, r3
 80254f2:	f7fd fbfe 	bl	8022cf2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80254f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80254fa:	2301      	movs	r3, #1
 80254fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80254fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025500:	f7fd fb7e 	bl	8022c00 <disk_write>
 8025504:	4603      	mov	r3, r0
 8025506:	2b00      	cmp	r3, #0
 8025508:	d001      	beq.n	802550e <f_mkfs+0x58e>
 802550a:	2301      	movs	r3, #1
 802550c:	e158      	b.n	80257c0 <f_mkfs+0x840>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 802550e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025512:	2b03      	cmp	r3, #3
 8025514:	d140      	bne.n	8025598 <f_mkfs+0x618>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8025516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025518:	1d9a      	adds	r2, r3, #6
 802551a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 802551e:	2301      	movs	r3, #1
 8025520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025522:	f7fd fb6d 	bl	8022c00 <disk_write>
			mem_set(buf, 0, ss);
 8025526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025528:	461a      	mov	r2, r3
 802552a:	2100      	movs	r1, #0
 802552c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802552e:	f7fd fc48 	bl	8022dc2 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8025532:	494d      	ldr	r1, [pc, #308]	; (8025668 <f_mkfs+0x6e8>)
 8025534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025536:	f7fd fbf7 	bl	8022d28 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 802553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802553c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8025540:	494a      	ldr	r1, [pc, #296]	; (802566c <f_mkfs+0x6ec>)
 8025542:	4618      	mov	r0, r3
 8025544:	f7fd fbf0 	bl	8022d28 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8025548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802554a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 802554e:	6a3b      	ldr	r3, [r7, #32]
 8025550:	3b01      	subs	r3, #1
 8025552:	4619      	mov	r1, r3
 8025554:	4610      	mov	r0, r2
 8025556:	f7fd fbe7 	bl	8022d28 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 802555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802555c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8025560:	2102      	movs	r1, #2
 8025562:	4618      	mov	r0, r3
 8025564:	f7fd fbe0 	bl	8022d28 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8025568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802556a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802556e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8025572:	4618      	mov	r0, r3
 8025574:	f7fd fbbd 	bl	8022cf2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8025578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802557a:	1dda      	adds	r2, r3, #7
 802557c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025580:	2301      	movs	r3, #1
 8025582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025584:	f7fd fb3c 	bl	8022c00 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8025588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802558a:	1c5a      	adds	r2, r3, #1
 802558c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025590:	2301      	movs	r3, #1
 8025592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025594:	f7fd fb34 	bl	8022c00 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8025598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802559a:	2100      	movs	r1, #0
 802559c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802559e:	f7fd fc10 	bl	8022dc2 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80255a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80255a4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80255a6:	2300      	movs	r3, #0
 80255a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80255aa:	e04b      	b.n	8025644 <f_mkfs+0x6c4>
			if (fmt == FS_FAT32) {
 80255ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80255b0:	2b03      	cmp	r3, #3
 80255b2:	d113      	bne.n	80255dc <f_mkfs+0x65c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80255b4:	f06f 0107 	mvn.w	r1, #7
 80255b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80255ba:	f7fd fbb5 	bl	8022d28 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80255be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255c0:	3304      	adds	r3, #4
 80255c2:	f04f 31ff 	mov.w	r1, #4294967295
 80255c6:	4618      	mov	r0, r3
 80255c8:	f7fd fbae 	bl	8022d28 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80255cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255ce:	3308      	adds	r3, #8
 80255d0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80255d4:	4618      	mov	r0, r3
 80255d6:	f7fd fba7 	bl	8022d28 <st_dword>
 80255da:	e00b      	b.n	80255f4 <f_mkfs+0x674>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80255dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80255e0:	2b01      	cmp	r3, #1
 80255e2:	d101      	bne.n	80255e8 <f_mkfs+0x668>
 80255e4:	4b22      	ldr	r3, [pc, #136]	; (8025670 <f_mkfs+0x6f0>)
 80255e6:	e001      	b.n	80255ec <f_mkfs+0x66c>
 80255e8:	f06f 0307 	mvn.w	r3, #7
 80255ec:	4619      	mov	r1, r3
 80255ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80255f0:	f7fd fb9a 	bl	8022d28 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80255f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80255f6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80255f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80255fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255fc:	4293      	cmp	r3, r2
 80255fe:	bf28      	it	cs
 8025600:	4613      	movcs	r3, r2
 8025602:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8025604:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802560a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802560c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802560e:	f7fd faf7 	bl	8022c00 <disk_write>
 8025612:	4603      	mov	r3, r0
 8025614:	2b00      	cmp	r3, #0
 8025616:	d001      	beq.n	802561c <f_mkfs+0x69c>
 8025618:	2301      	movs	r3, #1
 802561a:	e0d1      	b.n	80257c0 <f_mkfs+0x840>
				mem_set(buf, 0, ss);
 802561c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802561e:	461a      	mov	r2, r3
 8025620:	2100      	movs	r1, #0
 8025622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025624:	f7fd fbcd 	bl	8022dc2 <mem_set>
				sect += n; nsect -= n;
 8025628:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802562a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802562c:	4413      	add	r3, r2
 802562e:	667b      	str	r3, [r7, #100]	; 0x64
 8025630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8025632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025634:	1ad3      	subs	r3, r2, r3
 8025636:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8025638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802563a:	2b00      	cmp	r3, #0
 802563c:	d1dc      	bne.n	80255f8 <f_mkfs+0x678>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 802563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025640:	3301      	adds	r3, #1
 8025642:	64bb      	str	r3, [r7, #72]	; 0x48
 8025644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025648:	429a      	cmp	r2, r3
 802564a:	d3af      	bcc.n	80255ac <f_mkfs+0x62c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 802564c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8025650:	2b03      	cmp	r3, #3
 8025652:	d10f      	bne.n	8025674 <f_mkfs+0x6f4>
 8025654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025656:	e00e      	b.n	8025676 <f_mkfs+0x6f6>
 8025658:	08000aec 	.word	0x08000aec
 802565c:	53740000 	.word	0x53740000
 8025660:	08000af8 	.word	0x08000af8
 8025664:	08000b0c 	.word	0x08000b0c
 8025668:	41615252 	.word	0x41615252
 802566c:	61417272 	.word	0x61417272
 8025670:	00fffff8 	.word	0x00fffff8
 8025674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025676:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8025678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802567c:	4293      	cmp	r3, r2
 802567e:	bf28      	it	cs
 8025680:	4613      	movcs	r3, r2
 8025682:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8025684:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802568a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802568c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802568e:	f7fd fab7 	bl	8022c00 <disk_write>
 8025692:	4603      	mov	r3, r0
 8025694:	2b00      	cmp	r3, #0
 8025696:	d001      	beq.n	802569c <f_mkfs+0x71c>
 8025698:	2301      	movs	r3, #1
 802569a:	e091      	b.n	80257c0 <f_mkfs+0x840>
			sect += n; nsect -= n;
 802569c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 802569e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80256a0:	4413      	add	r3, r2
 80256a2:	667b      	str	r3, [r7, #100]	; 0x64
 80256a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80256a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80256a8:	1ad3      	subs	r3, r2, r3
 80256aa:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80256ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d1e2      	bne.n	8025678 <f_mkfs+0x6f8>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80256b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80256b6:	2b03      	cmp	r3, #3
 80256b8:	d103      	bne.n	80256c2 <f_mkfs+0x742>
			sys = 0x0C;		/* FAT32X */
 80256ba:	230c      	movs	r3, #12
 80256bc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80256c0:	e010      	b.n	80256e4 <f_mkfs+0x764>
		} else {
			if (sz_vol >= 0x10000) {
 80256c2:	693b      	ldr	r3, [r7, #16]
 80256c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80256c8:	d303      	bcc.n	80256d2 <f_mkfs+0x752>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80256ca:	2306      	movs	r3, #6
 80256cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80256d0:	e008      	b.n	80256e4 <f_mkfs+0x764>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80256d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80256d6:	2b02      	cmp	r3, #2
 80256d8:	d101      	bne.n	80256de <f_mkfs+0x75e>
 80256da:	2304      	movs	r3, #4
 80256dc:	e000      	b.n	80256e0 <f_mkfs+0x760>
 80256de:	2301      	movs	r3, #1
 80256e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80256e4:	7afb      	ldrb	r3, [r7, #11]
 80256e6:	f003 0308 	and.w	r3, r3, #8
 80256ea:	2b00      	cmp	r3, #0
 80256ec:	d15b      	bne.n	80257a6 <f_mkfs+0x826>
			mem_set(buf, 0, ss);
 80256ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80256f0:	461a      	mov	r2, r3
 80256f2:	2100      	movs	r1, #0
 80256f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80256f6:	f7fd fb64 	bl	8022dc2 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80256fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8025700:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8025704:	4618      	mov	r0, r3
 8025706:	f7fd faf4 	bl	8022cf2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 802570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802570c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8025710:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8025712:	69bb      	ldr	r3, [r7, #24]
 8025714:	2200      	movs	r2, #0
 8025716:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8025718:	69bb      	ldr	r3, [r7, #24]
 802571a:	3301      	adds	r3, #1
 802571c:	2201      	movs	r2, #1
 802571e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8025720:	69bb      	ldr	r3, [r7, #24]
 8025722:	3302      	adds	r3, #2
 8025724:	2201      	movs	r2, #1
 8025726:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8025728:	69bb      	ldr	r3, [r7, #24]
 802572a:	3303      	adds	r3, #3
 802572c:	2200      	movs	r2, #0
 802572e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8025730:	69bb      	ldr	r3, [r7, #24]
 8025732:	3304      	adds	r3, #4
 8025734:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8025738:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 802573a:	693a      	ldr	r2, [r7, #16]
 802573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802573e:	441a      	add	r2, r3
 8025740:	4b21      	ldr	r3, [pc, #132]	; (80257c8 <f_mkfs+0x848>)
 8025742:	fba3 1302 	umull	r1, r3, r3, r2
 8025746:	1ad2      	subs	r2, r2, r3
 8025748:	0852      	lsrs	r2, r2, #1
 802574a:	4413      	add	r3, r2
 802574c:	0b5b      	lsrs	r3, r3, #13
 802574e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8025750:	69bb      	ldr	r3, [r7, #24]
 8025752:	3305      	adds	r3, #5
 8025754:	22fe      	movs	r2, #254	; 0xfe
 8025756:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8025758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802575a:	089b      	lsrs	r3, r3, #2
 802575c:	b2da      	uxtb	r2, r3
 802575e:	69bb      	ldr	r3, [r7, #24]
 8025760:	3306      	adds	r3, #6
 8025762:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8025766:	b2d2      	uxtb	r2, r2
 8025768:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 802576a:	69bb      	ldr	r3, [r7, #24]
 802576c:	3307      	adds	r3, #7
 802576e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025770:	b2d2      	uxtb	r2, r2
 8025772:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8025774:	69bb      	ldr	r3, [r7, #24]
 8025776:	3308      	adds	r3, #8
 8025778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802577a:	4618      	mov	r0, r3
 802577c:	f7fd fad4 	bl	8022d28 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8025780:	69bb      	ldr	r3, [r7, #24]
 8025782:	330c      	adds	r3, #12
 8025784:	693a      	ldr	r2, [r7, #16]
 8025786:	4611      	mov	r1, r2
 8025788:	4618      	mov	r0, r3
 802578a:	f7fd facd 	bl	8022d28 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 802578e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8025792:	2301      	movs	r3, #1
 8025794:	2200      	movs	r2, #0
 8025796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025798:	f7fd fa32 	bl	8022c00 <disk_write>
 802579c:	4603      	mov	r3, r0
 802579e:	2b00      	cmp	r3, #0
 80257a0:	d001      	beq.n	80257a6 <f_mkfs+0x826>
 80257a2:	2301      	movs	r3, #1
 80257a4:	e00c      	b.n	80257c0 <f_mkfs+0x840>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80257a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80257aa:	2200      	movs	r2, #0
 80257ac:	2100      	movs	r1, #0
 80257ae:	4618      	mov	r0, r3
 80257b0:	f7fd fa46 	bl	8022c40 <disk_ioctl>
 80257b4:	4603      	mov	r3, r0
 80257b6:	2b00      	cmp	r3, #0
 80257b8:	d001      	beq.n	80257be <f_mkfs+0x83e>
 80257ba:	2301      	movs	r3, #1
 80257bc:	e000      	b.n	80257c0 <f_mkfs+0x840>

	return FR_OK;
 80257be:	2300      	movs	r3, #0
}
 80257c0:	4618      	mov	r0, r3
 80257c2:	3770      	adds	r7, #112	; 0x70
 80257c4:	46bd      	mov	sp, r7
 80257c6:	bd80      	pop	{r7, pc}
 80257c8:	0515565b 	.word	0x0515565b

080257cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80257cc:	b480      	push	{r7}
 80257ce:	b087      	sub	sp, #28
 80257d0:	af00      	add	r7, sp, #0
 80257d2:	60f8      	str	r0, [r7, #12]
 80257d4:	60b9      	str	r1, [r7, #8]
 80257d6:	4613      	mov	r3, r2
 80257d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80257da:	2301      	movs	r3, #1
 80257dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80257de:	2300      	movs	r3, #0
 80257e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80257e2:	4b1f      	ldr	r3, [pc, #124]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 80257e4:	7a5b      	ldrb	r3, [r3, #9]
 80257e6:	b2db      	uxtb	r3, r3
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d131      	bne.n	8025850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80257ec:	4b1c      	ldr	r3, [pc, #112]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 80257ee:	7a5b      	ldrb	r3, [r3, #9]
 80257f0:	b2db      	uxtb	r3, r3
 80257f2:	461a      	mov	r2, r3
 80257f4:	4b1a      	ldr	r3, [pc, #104]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 80257f6:	2100      	movs	r1, #0
 80257f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80257fa:	4b19      	ldr	r3, [pc, #100]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 80257fc:	7a5b      	ldrb	r3, [r3, #9]
 80257fe:	b2db      	uxtb	r3, r3
 8025800:	4a17      	ldr	r2, [pc, #92]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 8025802:	009b      	lsls	r3, r3, #2
 8025804:	4413      	add	r3, r2
 8025806:	68fa      	ldr	r2, [r7, #12]
 8025808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802580a:	4b15      	ldr	r3, [pc, #84]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 802580c:	7a5b      	ldrb	r3, [r3, #9]
 802580e:	b2db      	uxtb	r3, r3
 8025810:	461a      	mov	r2, r3
 8025812:	4b13      	ldr	r3, [pc, #76]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 8025814:	4413      	add	r3, r2
 8025816:	79fa      	ldrb	r2, [r7, #7]
 8025818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802581a:	4b11      	ldr	r3, [pc, #68]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 802581c:	7a5b      	ldrb	r3, [r3, #9]
 802581e:	b2db      	uxtb	r3, r3
 8025820:	1c5a      	adds	r2, r3, #1
 8025822:	b2d1      	uxtb	r1, r2
 8025824:	4a0e      	ldr	r2, [pc, #56]	; (8025860 <FATFS_LinkDriverEx+0x94>)
 8025826:	7251      	strb	r1, [r2, #9]
 8025828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802582a:	7dbb      	ldrb	r3, [r7, #22]
 802582c:	3330      	adds	r3, #48	; 0x30
 802582e:	b2da      	uxtb	r2, r3
 8025830:	68bb      	ldr	r3, [r7, #8]
 8025832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8025834:	68bb      	ldr	r3, [r7, #8]
 8025836:	3301      	adds	r3, #1
 8025838:	223a      	movs	r2, #58	; 0x3a
 802583a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 802583c:	68bb      	ldr	r3, [r7, #8]
 802583e:	3302      	adds	r3, #2
 8025840:	222f      	movs	r2, #47	; 0x2f
 8025842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8025844:	68bb      	ldr	r3, [r7, #8]
 8025846:	3303      	adds	r3, #3
 8025848:	2200      	movs	r2, #0
 802584a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 802584c:	2300      	movs	r3, #0
 802584e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8025850:	7dfb      	ldrb	r3, [r7, #23]
}
 8025852:	4618      	mov	r0, r3
 8025854:	371c      	adds	r7, #28
 8025856:	46bd      	mov	sp, r7
 8025858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802585c:	4770      	bx	lr
 802585e:	bf00      	nop
 8025860:	20009b00 	.word	0x20009b00

08025864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8025864:	b580      	push	{r7, lr}
 8025866:	b082      	sub	sp, #8
 8025868:	af00      	add	r7, sp, #0
 802586a:	6078      	str	r0, [r7, #4]
 802586c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802586e:	2200      	movs	r2, #0
 8025870:	6839      	ldr	r1, [r7, #0]
 8025872:	6878      	ldr	r0, [r7, #4]
 8025874:	f7ff ffaa 	bl	80257cc <FATFS_LinkDriverEx>
 8025878:	4603      	mov	r3, r0
}
 802587a:	4618      	mov	r0, r3
 802587c:	3708      	adds	r7, #8
 802587e:	46bd      	mov	sp, r7
 8025880:	bd80      	pop	{r7, pc}
	...

08025884 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8025884:	b580      	push	{r7, lr}
 8025886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8025888:	2200      	movs	r2, #0
 802588a:	4912      	ldr	r1, [pc, #72]	; (80258d4 <MX_USB_DEVICE_Init+0x50>)
 802588c:	4812      	ldr	r0, [pc, #72]	; (80258d8 <MX_USB_DEVICE_Init+0x54>)
 802588e:	f7fb fe56 	bl	802153e <USBD_Init>
 8025892:	4603      	mov	r3, r0
 8025894:	2b00      	cmp	r3, #0
 8025896:	d001      	beq.n	802589c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8025898:	f7f1 fe60 	bl	801755c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 802589c:	490f      	ldr	r1, [pc, #60]	; (80258dc <MX_USB_DEVICE_Init+0x58>)
 802589e:	480e      	ldr	r0, [pc, #56]	; (80258d8 <MX_USB_DEVICE_Init+0x54>)
 80258a0:	f7fb fe7d 	bl	802159e <USBD_RegisterClass>
 80258a4:	4603      	mov	r3, r0
 80258a6:	2b00      	cmp	r3, #0
 80258a8:	d001      	beq.n	80258ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80258aa:	f7f1 fe57 	bl	801755c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80258ae:	490c      	ldr	r1, [pc, #48]	; (80258e0 <MX_USB_DEVICE_Init+0x5c>)
 80258b0:	4809      	ldr	r0, [pc, #36]	; (80258d8 <MX_USB_DEVICE_Init+0x54>)
 80258b2:	f7fa f927 	bl	801fb04 <USBD_MSC_RegisterStorage>
 80258b6:	4603      	mov	r3, r0
 80258b8:	2b00      	cmp	r3, #0
 80258ba:	d001      	beq.n	80258c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80258bc:	f7f1 fe4e 	bl	801755c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80258c0:	4805      	ldr	r0, [pc, #20]	; (80258d8 <MX_USB_DEVICE_Init+0x54>)
 80258c2:	f7fb fea2 	bl	802160a <USBD_Start>
 80258c6:	4603      	mov	r3, r0
 80258c8:	2b00      	cmp	r3, #0
 80258ca:	d001      	beq.n	80258d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80258cc:	f7f1 fe46 	bl	801755c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80258d0:	bf00      	nop
 80258d2:	bd80      	pop	{r7, pc}
 80258d4:	2000062c 	.word	0x2000062c
 80258d8:	20009b0c 	.word	0x20009b0c
 80258dc:	20000584 	.word	0x20000584
 80258e0:	2000068c 	.word	0x2000068c

080258e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80258e4:	b480      	push	{r7}
 80258e6:	b083      	sub	sp, #12
 80258e8:	af00      	add	r7, sp, #0
 80258ea:	4603      	mov	r3, r0
 80258ec:	6039      	str	r1, [r7, #0]
 80258ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80258f0:	683b      	ldr	r3, [r7, #0]
 80258f2:	2212      	movs	r2, #18
 80258f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80258f6:	4b03      	ldr	r3, [pc, #12]	; (8025904 <USBD_FS_DeviceDescriptor+0x20>)
}
 80258f8:	4618      	mov	r0, r3
 80258fa:	370c      	adds	r7, #12
 80258fc:	46bd      	mov	sp, r7
 80258fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025902:	4770      	bx	lr
 8025904:	2000064c 	.word	0x2000064c

08025908 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025908:	b480      	push	{r7}
 802590a:	b083      	sub	sp, #12
 802590c:	af00      	add	r7, sp, #0
 802590e:	4603      	mov	r3, r0
 8025910:	6039      	str	r1, [r7, #0]
 8025912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8025914:	683b      	ldr	r3, [r7, #0]
 8025916:	2204      	movs	r2, #4
 8025918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802591a:	4b03      	ldr	r3, [pc, #12]	; (8025928 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802591c:	4618      	mov	r0, r3
 802591e:	370c      	adds	r7, #12
 8025920:	46bd      	mov	sp, r7
 8025922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025926:	4770      	bx	lr
 8025928:	2000066c 	.word	0x2000066c

0802592c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802592c:	b580      	push	{r7, lr}
 802592e:	b082      	sub	sp, #8
 8025930:	af00      	add	r7, sp, #0
 8025932:	4603      	mov	r3, r0
 8025934:	6039      	str	r1, [r7, #0]
 8025936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8025938:	79fb      	ldrb	r3, [r7, #7]
 802593a:	2b00      	cmp	r3, #0
 802593c:	d105      	bne.n	802594a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802593e:	683a      	ldr	r2, [r7, #0]
 8025940:	4907      	ldr	r1, [pc, #28]	; (8025960 <USBD_FS_ProductStrDescriptor+0x34>)
 8025942:	4808      	ldr	r0, [pc, #32]	; (8025964 <USBD_FS_ProductStrDescriptor+0x38>)
 8025944:	f7fd f838 	bl	80229b8 <USBD_GetString>
 8025948:	e004      	b.n	8025954 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802594a:	683a      	ldr	r2, [r7, #0]
 802594c:	4904      	ldr	r1, [pc, #16]	; (8025960 <USBD_FS_ProductStrDescriptor+0x34>)
 802594e:	4805      	ldr	r0, [pc, #20]	; (8025964 <USBD_FS_ProductStrDescriptor+0x38>)
 8025950:	f7fd f832 	bl	80229b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8025954:	4b02      	ldr	r3, [pc, #8]	; (8025960 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8025956:	4618      	mov	r0, r3
 8025958:	3708      	adds	r7, #8
 802595a:	46bd      	mov	sp, r7
 802595c:	bd80      	pop	{r7, pc}
 802595e:	bf00      	nop
 8025960:	20009de8 	.word	0x20009de8
 8025964:	08000b20 	.word	0x08000b20

08025968 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025968:	b580      	push	{r7, lr}
 802596a:	b082      	sub	sp, #8
 802596c:	af00      	add	r7, sp, #0
 802596e:	4603      	mov	r3, r0
 8025970:	6039      	str	r1, [r7, #0]
 8025972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8025974:	683a      	ldr	r2, [r7, #0]
 8025976:	4904      	ldr	r1, [pc, #16]	; (8025988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8025978:	4804      	ldr	r0, [pc, #16]	; (802598c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802597a:	f7fd f81d 	bl	80229b8 <USBD_GetString>
  return USBD_StrDesc;
 802597e:	4b02      	ldr	r3, [pc, #8]	; (8025988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8025980:	4618      	mov	r0, r3
 8025982:	3708      	adds	r7, #8
 8025984:	46bd      	mov	sp, r7
 8025986:	bd80      	pop	{r7, pc}
 8025988:	20009de8 	.word	0x20009de8
 802598c:	08000b34 	.word	0x08000b34

08025990 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025990:	b580      	push	{r7, lr}
 8025992:	b082      	sub	sp, #8
 8025994:	af00      	add	r7, sp, #0
 8025996:	4603      	mov	r3, r0
 8025998:	6039      	str	r1, [r7, #0]
 802599a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802599c:	683b      	ldr	r3, [r7, #0]
 802599e:	221a      	movs	r2, #26
 80259a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80259a2:	f000 f855 	bl	8025a50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80259a6:	4b02      	ldr	r3, [pc, #8]	; (80259b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80259a8:	4618      	mov	r0, r3
 80259aa:	3708      	adds	r7, #8
 80259ac:	46bd      	mov	sp, r7
 80259ae:	bd80      	pop	{r7, pc}
 80259b0:	20000670 	.word	0x20000670

080259b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80259b4:	b580      	push	{r7, lr}
 80259b6:	b082      	sub	sp, #8
 80259b8:	af00      	add	r7, sp, #0
 80259ba:	4603      	mov	r3, r0
 80259bc:	6039      	str	r1, [r7, #0]
 80259be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80259c0:	79fb      	ldrb	r3, [r7, #7]
 80259c2:	2b00      	cmp	r3, #0
 80259c4:	d105      	bne.n	80259d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80259c6:	683a      	ldr	r2, [r7, #0]
 80259c8:	4907      	ldr	r1, [pc, #28]	; (80259e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80259ca:	4808      	ldr	r0, [pc, #32]	; (80259ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80259cc:	f7fc fff4 	bl	80229b8 <USBD_GetString>
 80259d0:	e004      	b.n	80259dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80259d2:	683a      	ldr	r2, [r7, #0]
 80259d4:	4904      	ldr	r1, [pc, #16]	; (80259e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80259d6:	4805      	ldr	r0, [pc, #20]	; (80259ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80259d8:	f7fc ffee 	bl	80229b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80259dc:	4b02      	ldr	r3, [pc, #8]	; (80259e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80259de:	4618      	mov	r0, r3
 80259e0:	3708      	adds	r7, #8
 80259e2:	46bd      	mov	sp, r7
 80259e4:	bd80      	pop	{r7, pc}
 80259e6:	bf00      	nop
 80259e8:	20009de8 	.word	0x20009de8
 80259ec:	08000b48 	.word	0x08000b48

080259f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80259f0:	b580      	push	{r7, lr}
 80259f2:	b082      	sub	sp, #8
 80259f4:	af00      	add	r7, sp, #0
 80259f6:	4603      	mov	r3, r0
 80259f8:	6039      	str	r1, [r7, #0]
 80259fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80259fc:	79fb      	ldrb	r3, [r7, #7]
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	d105      	bne.n	8025a0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8025a02:	683a      	ldr	r2, [r7, #0]
 8025a04:	4907      	ldr	r1, [pc, #28]	; (8025a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8025a06:	4808      	ldr	r0, [pc, #32]	; (8025a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8025a08:	f7fc ffd6 	bl	80229b8 <USBD_GetString>
 8025a0c:	e004      	b.n	8025a18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8025a0e:	683a      	ldr	r2, [r7, #0]
 8025a10:	4904      	ldr	r1, [pc, #16]	; (8025a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8025a12:	4805      	ldr	r0, [pc, #20]	; (8025a28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8025a14:	f7fc ffd0 	bl	80229b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8025a18:	4b02      	ldr	r3, [pc, #8]	; (8025a24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8025a1a:	4618      	mov	r0, r3
 8025a1c:	3708      	adds	r7, #8
 8025a1e:	46bd      	mov	sp, r7
 8025a20:	bd80      	pop	{r7, pc}
 8025a22:	bf00      	nop
 8025a24:	20009de8 	.word	0x20009de8
 8025a28:	08000b54 	.word	0x08000b54

08025a2c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8025a2c:	b480      	push	{r7}
 8025a2e:	b083      	sub	sp, #12
 8025a30:	af00      	add	r7, sp, #0
 8025a32:	4603      	mov	r3, r0
 8025a34:	6039      	str	r1, [r7, #0]
 8025a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8025a38:	683b      	ldr	r3, [r7, #0]
 8025a3a:	220c      	movs	r2, #12
 8025a3c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8025a3e:	4b03      	ldr	r3, [pc, #12]	; (8025a4c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8025a40:	4618      	mov	r0, r3
 8025a42:	370c      	adds	r7, #12
 8025a44:	46bd      	mov	sp, r7
 8025a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a4a:	4770      	bx	lr
 8025a4c:	20000660 	.word	0x20000660

08025a50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8025a50:	b580      	push	{r7, lr}
 8025a52:	b084      	sub	sp, #16
 8025a54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8025a56:	4b0f      	ldr	r3, [pc, #60]	; (8025a94 <Get_SerialNum+0x44>)
 8025a58:	681b      	ldr	r3, [r3, #0]
 8025a5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8025a5c:	4b0e      	ldr	r3, [pc, #56]	; (8025a98 <Get_SerialNum+0x48>)
 8025a5e:	681b      	ldr	r3, [r3, #0]
 8025a60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8025a62:	4b0e      	ldr	r3, [pc, #56]	; (8025a9c <Get_SerialNum+0x4c>)
 8025a64:	681b      	ldr	r3, [r3, #0]
 8025a66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8025a68:	68fa      	ldr	r2, [r7, #12]
 8025a6a:	687b      	ldr	r3, [r7, #4]
 8025a6c:	4413      	add	r3, r2
 8025a6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8025a70:	68fb      	ldr	r3, [r7, #12]
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	d009      	beq.n	8025a8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8025a76:	2208      	movs	r2, #8
 8025a78:	4909      	ldr	r1, [pc, #36]	; (8025aa0 <Get_SerialNum+0x50>)
 8025a7a:	68f8      	ldr	r0, [r7, #12]
 8025a7c:	f000 f814 	bl	8025aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8025a80:	2204      	movs	r2, #4
 8025a82:	4908      	ldr	r1, [pc, #32]	; (8025aa4 <Get_SerialNum+0x54>)
 8025a84:	68b8      	ldr	r0, [r7, #8]
 8025a86:	f000 f80f 	bl	8025aa8 <IntToUnicode>
  }
}
 8025a8a:	bf00      	nop
 8025a8c:	3710      	adds	r7, #16
 8025a8e:	46bd      	mov	sp, r7
 8025a90:	bd80      	pop	{r7, pc}
 8025a92:	bf00      	nop
 8025a94:	1fff7a10 	.word	0x1fff7a10
 8025a98:	1fff7a14 	.word	0x1fff7a14
 8025a9c:	1fff7a18 	.word	0x1fff7a18
 8025aa0:	20000672 	.word	0x20000672
 8025aa4:	20000682 	.word	0x20000682

08025aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8025aa8:	b480      	push	{r7}
 8025aaa:	b087      	sub	sp, #28
 8025aac:	af00      	add	r7, sp, #0
 8025aae:	60f8      	str	r0, [r7, #12]
 8025ab0:	60b9      	str	r1, [r7, #8]
 8025ab2:	4613      	mov	r3, r2
 8025ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8025ab6:	2300      	movs	r3, #0
 8025ab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8025aba:	2300      	movs	r3, #0
 8025abc:	75fb      	strb	r3, [r7, #23]
 8025abe:	e027      	b.n	8025b10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8025ac0:	68fb      	ldr	r3, [r7, #12]
 8025ac2:	0f1b      	lsrs	r3, r3, #28
 8025ac4:	2b09      	cmp	r3, #9
 8025ac6:	d80b      	bhi.n	8025ae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8025ac8:	68fb      	ldr	r3, [r7, #12]
 8025aca:	0f1b      	lsrs	r3, r3, #28
 8025acc:	b2da      	uxtb	r2, r3
 8025ace:	7dfb      	ldrb	r3, [r7, #23]
 8025ad0:	005b      	lsls	r3, r3, #1
 8025ad2:	4619      	mov	r1, r3
 8025ad4:	68bb      	ldr	r3, [r7, #8]
 8025ad6:	440b      	add	r3, r1
 8025ad8:	3230      	adds	r2, #48	; 0x30
 8025ada:	b2d2      	uxtb	r2, r2
 8025adc:	701a      	strb	r2, [r3, #0]
 8025ade:	e00a      	b.n	8025af6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8025ae0:	68fb      	ldr	r3, [r7, #12]
 8025ae2:	0f1b      	lsrs	r3, r3, #28
 8025ae4:	b2da      	uxtb	r2, r3
 8025ae6:	7dfb      	ldrb	r3, [r7, #23]
 8025ae8:	005b      	lsls	r3, r3, #1
 8025aea:	4619      	mov	r1, r3
 8025aec:	68bb      	ldr	r3, [r7, #8]
 8025aee:	440b      	add	r3, r1
 8025af0:	3237      	adds	r2, #55	; 0x37
 8025af2:	b2d2      	uxtb	r2, r2
 8025af4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8025af6:	68fb      	ldr	r3, [r7, #12]
 8025af8:	011b      	lsls	r3, r3, #4
 8025afa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8025afc:	7dfb      	ldrb	r3, [r7, #23]
 8025afe:	005b      	lsls	r3, r3, #1
 8025b00:	3301      	adds	r3, #1
 8025b02:	68ba      	ldr	r2, [r7, #8]
 8025b04:	4413      	add	r3, r2
 8025b06:	2200      	movs	r2, #0
 8025b08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8025b0a:	7dfb      	ldrb	r3, [r7, #23]
 8025b0c:	3301      	adds	r3, #1
 8025b0e:	75fb      	strb	r3, [r7, #23]
 8025b10:	7dfa      	ldrb	r2, [r7, #23]
 8025b12:	79fb      	ldrb	r3, [r7, #7]
 8025b14:	429a      	cmp	r2, r3
 8025b16:	d3d3      	bcc.n	8025ac0 <IntToUnicode+0x18>
  }
}
 8025b18:	bf00      	nop
 8025b1a:	bf00      	nop
 8025b1c:	371c      	adds	r7, #28
 8025b1e:	46bd      	mov	sp, r7
 8025b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b24:	4770      	bx	lr

08025b26 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8025b26:	b480      	push	{r7}
 8025b28:	b083      	sub	sp, #12
 8025b2a:	af00      	add	r7, sp, #0
 8025b2c:	4603      	mov	r3, r0
 8025b2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8025b30:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8025b32:	4618      	mov	r0, r3
 8025b34:	370c      	adds	r7, #12
 8025b36:	46bd      	mov	sp, r7
 8025b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b3c:	4770      	bx	lr
	...

08025b40 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8025b40:	b480      	push	{r7}
 8025b42:	b085      	sub	sp, #20
 8025b44:	af00      	add	r7, sp, #0
 8025b46:	4603      	mov	r3, r0
 8025b48:	60b9      	str	r1, [r7, #8]
 8025b4a:	607a      	str	r2, [r7, #4]
 8025b4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  *block_num  = W25Qx_Para.SUBSECTOR_COUNT;
 8025b4e:	4b07      	ldr	r3, [pc, #28]	; (8025b6c <STORAGE_GetCapacity_FS+0x2c>)
 8025b50:	689a      	ldr	r2, [r3, #8]
 8025b52:	68bb      	ldr	r3, [r7, #8]
 8025b54:	601a      	str	r2, [r3, #0]
	  *block_size = W25Qx_Para.SUBSECTOR_SIZE;
 8025b56:	4b05      	ldr	r3, [pc, #20]	; (8025b6c <STORAGE_GetCapacity_FS+0x2c>)
 8025b58:	899a      	ldrh	r2, [r3, #12]
 8025b5a:	687b      	ldr	r3, [r7, #4]
 8025b5c:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8025b5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8025b60:	4618      	mov	r0, r3
 8025b62:	3714      	adds	r7, #20
 8025b64:	46bd      	mov	sp, r7
 8025b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b6a:	4770      	bx	lr
 8025b6c:	20006a38 	.word	0x20006a38

08025b70 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8025b70:	b480      	push	{r7}
 8025b72:	b083      	sub	sp, #12
 8025b74:	af00      	add	r7, sp, #0
 8025b76:	4603      	mov	r3, r0
 8025b78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8025b7a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8025b7c:	4618      	mov	r0, r3
 8025b7e:	370c      	adds	r7, #12
 8025b80:	46bd      	mov	sp, r7
 8025b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b86:	4770      	bx	lr

08025b88 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8025b88:	b480      	push	{r7}
 8025b8a:	b083      	sub	sp, #12
 8025b8c:	af00      	add	r7, sp, #0
 8025b8e:	4603      	mov	r3, r0
 8025b90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8025b92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8025b94:	4618      	mov	r0, r3
 8025b96:	370c      	adds	r7, #12
 8025b98:	46bd      	mov	sp, r7
 8025b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b9e:	4770      	bx	lr

08025ba0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8025ba0:	b580      	push	{r7, lr}
 8025ba2:	b086      	sub	sp, #24
 8025ba4:	af00      	add	r7, sp, #0
 8025ba6:	60b9      	str	r1, [r7, #8]
 8025ba8:	607a      	str	r2, [r7, #4]
 8025baa:	461a      	mov	r2, r3
 8025bac:	4603      	mov	r3, r0
 8025bae:	73fb      	strb	r3, [r7, #15]
 8025bb0:	4613      	mov	r3, r2
 8025bb2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	short i;
	for(i = 0; i < blk_len; i ++)
 8025bb4:	2300      	movs	r3, #0
 8025bb6:	82fb      	strh	r3, [r7, #22]
 8025bb8:	e01a      	b.n	8025bf0 <STORAGE_Read_FS+0x50>
	{
		W25Qx_Read(buf, blk_addr*W25Qx_Para.SUBSECTOR_SIZE, W25Qx_Para.SUBSECTOR_SIZE);
 8025bba:	4b12      	ldr	r3, [pc, #72]	; (8025c04 <STORAGE_Read_FS+0x64>)
 8025bbc:	899b      	ldrh	r3, [r3, #12]
 8025bbe:	461a      	mov	r2, r3
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	fb02 f303 	mul.w	r3, r2, r3
 8025bc6:	4a0f      	ldr	r2, [pc, #60]	; (8025c04 <STORAGE_Read_FS+0x64>)
 8025bc8:	8992      	ldrh	r2, [r2, #12]
 8025bca:	4619      	mov	r1, r3
 8025bcc:	68b8      	ldr	r0, [r7, #8]
 8025bce:	f7f2 f907 	bl	8017de0 <W25Qx_Read>
		blk_addr ++;
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	3301      	adds	r3, #1
 8025bd6:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 8025bd8:	4b0a      	ldr	r3, [pc, #40]	; (8025c04 <STORAGE_Read_FS+0x64>)
 8025bda:	899b      	ldrh	r3, [r3, #12]
 8025bdc:	461a      	mov	r2, r3
 8025bde:	68bb      	ldr	r3, [r7, #8]
 8025be0:	4413      	add	r3, r2
 8025be2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 8025be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025be8:	b29b      	uxth	r3, r3
 8025bea:	3301      	adds	r3, #1
 8025bec:	b29b      	uxth	r3, r3
 8025bee:	82fb      	strh	r3, [r7, #22]
 8025bf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8025bf4:	89bb      	ldrh	r3, [r7, #12]
 8025bf6:	429a      	cmp	r2, r3
 8025bf8:	dbdf      	blt.n	8025bba <STORAGE_Read_FS+0x1a>
	}
  return (USBD_OK);
 8025bfa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	3718      	adds	r7, #24
 8025c00:	46bd      	mov	sp, r7
 8025c02:	bd80      	pop	{r7, pc}
 8025c04:	20006a38 	.word	0x20006a38

08025c08 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8025c08:	b580      	push	{r7, lr}
 8025c0a:	b086      	sub	sp, #24
 8025c0c:	af00      	add	r7, sp, #0
 8025c0e:	60b9      	str	r1, [r7, #8]
 8025c10:	607a      	str	r2, [r7, #4]
 8025c12:	461a      	mov	r2, r3
 8025c14:	4603      	mov	r3, r0
 8025c16:	73fb      	strb	r3, [r7, #15]
 8025c18:	4613      	mov	r3, r2
 8025c1a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	short i;
	for(i = 0; i < blk_len; i ++)
 8025c1c:	2300      	movs	r3, #0
 8025c1e:	82fb      	strh	r3, [r7, #22]
 8025c20:	e023      	b.n	8025c6a <STORAGE_Write_FS+0x62>
	{
		W25Qx_Erase_Block(blk_addr * W25Qx_Para.SUBSECTOR_SIZE);
 8025c22:	4b17      	ldr	r3, [pc, #92]	; (8025c80 <STORAGE_Write_FS+0x78>)
 8025c24:	899b      	ldrh	r3, [r3, #12]
 8025c26:	461a      	mov	r2, r3
 8025c28:	687b      	ldr	r3, [r7, #4]
 8025c2a:	fb02 f303 	mul.w	r3, r2, r3
 8025c2e:	4618      	mov	r0, r3
 8025c30:	f7f2 f9a0 	bl	8017f74 <W25Qx_Erase_Block>
		W25Qx_Write((uint8_t*)buf,blk_addr * W25Qx_Para.SUBSECTOR_SIZE,W25Qx_Para.SUBSECTOR_SIZE);
 8025c34:	4b12      	ldr	r3, [pc, #72]	; (8025c80 <STORAGE_Write_FS+0x78>)
 8025c36:	899b      	ldrh	r3, [r3, #12]
 8025c38:	461a      	mov	r2, r3
 8025c3a:	687b      	ldr	r3, [r7, #4]
 8025c3c:	fb02 f303 	mul.w	r3, r2, r3
 8025c40:	4a0f      	ldr	r2, [pc, #60]	; (8025c80 <STORAGE_Write_FS+0x78>)
 8025c42:	8992      	ldrh	r2, [r2, #12]
 8025c44:	4619      	mov	r1, r3
 8025c46:	68b8      	ldr	r0, [r7, #8]
 8025c48:	f7f2 f908 	bl	8017e5c <W25Qx_Write>
		blk_addr ++;
 8025c4c:	687b      	ldr	r3, [r7, #4]
 8025c4e:	3301      	adds	r3, #1
 8025c50:	607b      	str	r3, [r7, #4]
		buf += W25Qx_Para.SUBSECTOR_SIZE;
 8025c52:	4b0b      	ldr	r3, [pc, #44]	; (8025c80 <STORAGE_Write_FS+0x78>)
 8025c54:	899b      	ldrh	r3, [r3, #12]
 8025c56:	461a      	mov	r2, r3
 8025c58:	68bb      	ldr	r3, [r7, #8]
 8025c5a:	4413      	add	r3, r2
 8025c5c:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < blk_len; i ++)
 8025c5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025c62:	b29b      	uxth	r3, r3
 8025c64:	3301      	adds	r3, #1
 8025c66:	b29b      	uxth	r3, r3
 8025c68:	82fb      	strh	r3, [r7, #22]
 8025c6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8025c6e:	89bb      	ldrh	r3, [r7, #12]
 8025c70:	429a      	cmp	r2, r3
 8025c72:	dbd6      	blt.n	8025c22 <STORAGE_Write_FS+0x1a>
	}
	return (USBD_OK);
 8025c74:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8025c76:	4618      	mov	r0, r3
 8025c78:	3718      	adds	r7, #24
 8025c7a:	46bd      	mov	sp, r7
 8025c7c:	bd80      	pop	{r7, pc}
 8025c7e:	bf00      	nop
 8025c80:	20006a38 	.word	0x20006a38

08025c84 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8025c84:	b480      	push	{r7}
 8025c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8025c88:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8025c8a:	4618      	mov	r0, r3
 8025c8c:	46bd      	mov	sp, r7
 8025c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c92:	4770      	bx	lr

08025c94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8025c94:	b580      	push	{r7, lr}
 8025c96:	b0a0      	sub	sp, #128	; 0x80
 8025c98:	af00      	add	r7, sp, #0
 8025c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8025ca0:	2200      	movs	r2, #0
 8025ca2:	601a      	str	r2, [r3, #0]
 8025ca4:	605a      	str	r2, [r3, #4]
 8025ca6:	609a      	str	r2, [r3, #8]
 8025ca8:	60da      	str	r2, [r3, #12]
 8025caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8025cac:	f107 0310 	add.w	r3, r7, #16
 8025cb0:	225c      	movs	r2, #92	; 0x5c
 8025cb2:	2100      	movs	r1, #0
 8025cb4:	4618      	mov	r0, r3
 8025cb6:	f000 fbd9 	bl	802646c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	681b      	ldr	r3, [r3, #0]
 8025cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8025cc2:	d154      	bne.n	8025d6e <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8025cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025cc8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 8025cca:	2319      	movs	r3, #25
 8025ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8025cce:	23c0      	movs	r3, #192	; 0xc0
 8025cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8025cd2:	2302      	movs	r3, #2
 8025cd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8025cd6:	2304      	movs	r3, #4
 8025cd8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8025cda:	2301      	movs	r3, #1
 8025cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8025cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8025ce2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8025ce4:	f107 0310 	add.w	r3, r7, #16
 8025ce8:	4618      	mov	r0, r3
 8025cea:	f7f5 fa53 	bl	801b194 <HAL_RCCEx_PeriphCLKConfig>
 8025cee:	4603      	mov	r3, r0
 8025cf0:	2b00      	cmp	r3, #0
 8025cf2:	d001      	beq.n	8025cf8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8025cf4:	f7f1 fc32 	bl	801755c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025cf8:	2300      	movs	r3, #0
 8025cfa:	60fb      	str	r3, [r7, #12]
 8025cfc:	4b1e      	ldr	r3, [pc, #120]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d00:	4a1d      	ldr	r2, [pc, #116]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d02:	f043 0301 	orr.w	r3, r3, #1
 8025d06:	6313      	str	r3, [r2, #48]	; 0x30
 8025d08:	4b1b      	ldr	r3, [pc, #108]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d0c:	f003 0301 	and.w	r3, r3, #1
 8025d10:	60fb      	str	r3, [r7, #12]
 8025d12:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8025d14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8025d18:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d1a:	2302      	movs	r3, #2
 8025d1c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d1e:	2300      	movs	r3, #0
 8025d20:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025d22:	2303      	movs	r3, #3
 8025d24:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8025d26:	230a      	movs	r3, #10
 8025d28:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025d2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8025d2e:	4619      	mov	r1, r3
 8025d30:	4812      	ldr	r0, [pc, #72]	; (8025d7c <HAL_PCD_MspInit+0xe8>)
 8025d32:	f7f3 fc31 	bl	8019598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8025d36:	4b10      	ldr	r3, [pc, #64]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025d3a:	4a0f      	ldr	r2, [pc, #60]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025d40:	6353      	str	r3, [r2, #52]	; 0x34
 8025d42:	2300      	movs	r3, #0
 8025d44:	60bb      	str	r3, [r7, #8]
 8025d46:	4b0c      	ldr	r3, [pc, #48]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d4a:	4a0b      	ldr	r2, [pc, #44]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025d50:	6453      	str	r3, [r2, #68]	; 0x44
 8025d52:	4b09      	ldr	r3, [pc, #36]	; (8025d78 <HAL_PCD_MspInit+0xe4>)
 8025d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025d5a:	60bb      	str	r3, [r7, #8]
 8025d5c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8025d5e:	2200      	movs	r2, #0
 8025d60:	2100      	movs	r1, #0
 8025d62:	2043      	movs	r0, #67	; 0x43
 8025d64:	f7f2 fd57 	bl	8018816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025d68:	2043      	movs	r0, #67	; 0x43
 8025d6a:	f7f2 fd70 	bl	801884e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8025d6e:	bf00      	nop
 8025d70:	3780      	adds	r7, #128	; 0x80
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}
 8025d76:	bf00      	nop
 8025d78:	40023800 	.word	0x40023800
 8025d7c:	40020000 	.word	0x40020000

08025d80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025d80:	b580      	push	{r7, lr}
 8025d82:	b082      	sub	sp, #8
 8025d84:	af00      	add	r7, sp, #0
 8025d86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8025d88:	687b      	ldr	r3, [r7, #4]
 8025d8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025d94:	4619      	mov	r1, r3
 8025d96:	4610      	mov	r0, r2
 8025d98:	f7fb fc84 	bl	80216a4 <USBD_LL_SetupStage>
}
 8025d9c:	bf00      	nop
 8025d9e:	3708      	adds	r7, #8
 8025da0:	46bd      	mov	sp, r7
 8025da2:	bd80      	pop	{r7, pc}

08025da4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025da4:	b580      	push	{r7, lr}
 8025da6:	b082      	sub	sp, #8
 8025da8:	af00      	add	r7, sp, #0
 8025daa:	6078      	str	r0, [r7, #4]
 8025dac:	460b      	mov	r3, r1
 8025dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8025db6:	78fa      	ldrb	r2, [r7, #3]
 8025db8:	6879      	ldr	r1, [r7, #4]
 8025dba:	4613      	mov	r3, r2
 8025dbc:	00db      	lsls	r3, r3, #3
 8025dbe:	4413      	add	r3, r2
 8025dc0:	009b      	lsls	r3, r3, #2
 8025dc2:	440b      	add	r3, r1
 8025dc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8025dc8:	681a      	ldr	r2, [r3, #0]
 8025dca:	78fb      	ldrb	r3, [r7, #3]
 8025dcc:	4619      	mov	r1, r3
 8025dce:	f7fb fcbe 	bl	802174e <USBD_LL_DataOutStage>
}
 8025dd2:	bf00      	nop
 8025dd4:	3708      	adds	r7, #8
 8025dd6:	46bd      	mov	sp, r7
 8025dd8:	bd80      	pop	{r7, pc}

08025dda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025dda:	b580      	push	{r7, lr}
 8025ddc:	b082      	sub	sp, #8
 8025dde:	af00      	add	r7, sp, #0
 8025de0:	6078      	str	r0, [r7, #4]
 8025de2:	460b      	mov	r3, r1
 8025de4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8025de6:	687b      	ldr	r3, [r7, #4]
 8025de8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8025dec:	78fa      	ldrb	r2, [r7, #3]
 8025dee:	6879      	ldr	r1, [r7, #4]
 8025df0:	4613      	mov	r3, r2
 8025df2:	00db      	lsls	r3, r3, #3
 8025df4:	4413      	add	r3, r2
 8025df6:	009b      	lsls	r3, r3, #2
 8025df8:	440b      	add	r3, r1
 8025dfa:	334c      	adds	r3, #76	; 0x4c
 8025dfc:	681a      	ldr	r2, [r3, #0]
 8025dfe:	78fb      	ldrb	r3, [r7, #3]
 8025e00:	4619      	mov	r1, r3
 8025e02:	f7fb fd57 	bl	80218b4 <USBD_LL_DataInStage>
}
 8025e06:	bf00      	nop
 8025e08:	3708      	adds	r7, #8
 8025e0a:	46bd      	mov	sp, r7
 8025e0c:	bd80      	pop	{r7, pc}

08025e0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e0e:	b580      	push	{r7, lr}
 8025e10:	b082      	sub	sp, #8
 8025e12:	af00      	add	r7, sp, #0
 8025e14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8025e16:	687b      	ldr	r3, [r7, #4]
 8025e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e1c:	4618      	mov	r0, r3
 8025e1e:	f7fb fe8b 	bl	8021b38 <USBD_LL_SOF>
}
 8025e22:	bf00      	nop
 8025e24:	3708      	adds	r7, #8
 8025e26:	46bd      	mov	sp, r7
 8025e28:	bd80      	pop	{r7, pc}

08025e2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e2a:	b580      	push	{r7, lr}
 8025e2c:	b084      	sub	sp, #16
 8025e2e:	af00      	add	r7, sp, #0
 8025e30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8025e32:	2301      	movs	r3, #1
 8025e34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	68db      	ldr	r3, [r3, #12]
 8025e3a:	2b00      	cmp	r3, #0
 8025e3c:	d102      	bne.n	8025e44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8025e3e:	2300      	movs	r3, #0
 8025e40:	73fb      	strb	r3, [r7, #15]
 8025e42:	e008      	b.n	8025e56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8025e44:	687b      	ldr	r3, [r7, #4]
 8025e46:	68db      	ldr	r3, [r3, #12]
 8025e48:	2b02      	cmp	r3, #2
 8025e4a:	d102      	bne.n	8025e52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8025e4c:	2301      	movs	r3, #1
 8025e4e:	73fb      	strb	r3, [r7, #15]
 8025e50:	e001      	b.n	8025e56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8025e52:	f7f1 fb83 	bl	801755c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e5c:	7bfa      	ldrb	r2, [r7, #15]
 8025e5e:	4611      	mov	r1, r2
 8025e60:	4618      	mov	r0, r3
 8025e62:	f7fb fe2b 	bl	8021abc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8025e66:	687b      	ldr	r3, [r7, #4]
 8025e68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e6c:	4618      	mov	r0, r3
 8025e6e:	f7fb fdd3 	bl	8021a18 <USBD_LL_Reset>
}
 8025e72:	bf00      	nop
 8025e74:	3710      	adds	r7, #16
 8025e76:	46bd      	mov	sp, r7
 8025e78:	bd80      	pop	{r7, pc}
	...

08025e7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025e7c:	b580      	push	{r7, lr}
 8025e7e:	b082      	sub	sp, #8
 8025e80:	af00      	add	r7, sp, #0
 8025e82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8025e84:	687b      	ldr	r3, [r7, #4]
 8025e86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025e8a:	4618      	mov	r0, r3
 8025e8c:	f7fb fe26 	bl	8021adc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	681b      	ldr	r3, [r3, #0]
 8025e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8025e98:	681b      	ldr	r3, [r3, #0]
 8025e9a:	687a      	ldr	r2, [r7, #4]
 8025e9c:	6812      	ldr	r2, [r2, #0]
 8025e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8025ea2:	f043 0301 	orr.w	r3, r3, #1
 8025ea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	6a1b      	ldr	r3, [r3, #32]
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	d005      	beq.n	8025ebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8025eb0:	4b04      	ldr	r3, [pc, #16]	; (8025ec4 <HAL_PCD_SuspendCallback+0x48>)
 8025eb2:	691b      	ldr	r3, [r3, #16]
 8025eb4:	4a03      	ldr	r2, [pc, #12]	; (8025ec4 <HAL_PCD_SuspendCallback+0x48>)
 8025eb6:	f043 0306 	orr.w	r3, r3, #6
 8025eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8025ebc:	bf00      	nop
 8025ebe:	3708      	adds	r7, #8
 8025ec0:	46bd      	mov	sp, r7
 8025ec2:	bd80      	pop	{r7, pc}
 8025ec4:	e000ed00 	.word	0xe000ed00

08025ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025ec8:	b580      	push	{r7, lr}
 8025eca:	b082      	sub	sp, #8
 8025ecc:	af00      	add	r7, sp, #0
 8025ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f7fb fe16 	bl	8021b08 <USBD_LL_Resume>
}
 8025edc:	bf00      	nop
 8025ede:	3708      	adds	r7, #8
 8025ee0:	46bd      	mov	sp, r7
 8025ee2:	bd80      	pop	{r7, pc}

08025ee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025ee4:	b580      	push	{r7, lr}
 8025ee6:	b082      	sub	sp, #8
 8025ee8:	af00      	add	r7, sp, #0
 8025eea:	6078      	str	r0, [r7, #4]
 8025eec:	460b      	mov	r3, r1
 8025eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025ef0:	687b      	ldr	r3, [r7, #4]
 8025ef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025ef6:	78fa      	ldrb	r2, [r7, #3]
 8025ef8:	4611      	mov	r1, r2
 8025efa:	4618      	mov	r0, r3
 8025efc:	f7fb fe6e 	bl	8021bdc <USBD_LL_IsoOUTIncomplete>
}
 8025f00:	bf00      	nop
 8025f02:	3708      	adds	r7, #8
 8025f04:	46bd      	mov	sp, r7
 8025f06:	bd80      	pop	{r7, pc}

08025f08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025f08:	b580      	push	{r7, lr}
 8025f0a:	b082      	sub	sp, #8
 8025f0c:	af00      	add	r7, sp, #0
 8025f0e:	6078      	str	r0, [r7, #4]
 8025f10:	460b      	mov	r3, r1
 8025f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8025f14:	687b      	ldr	r3, [r7, #4]
 8025f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025f1a:	78fa      	ldrb	r2, [r7, #3]
 8025f1c:	4611      	mov	r1, r2
 8025f1e:	4618      	mov	r0, r3
 8025f20:	f7fb fe2a 	bl	8021b78 <USBD_LL_IsoINIncomplete>
}
 8025f24:	bf00      	nop
 8025f26:	3708      	adds	r7, #8
 8025f28:	46bd      	mov	sp, r7
 8025f2a:	bd80      	pop	{r7, pc}

08025f2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025f2c:	b580      	push	{r7, lr}
 8025f2e:	b082      	sub	sp, #8
 8025f30:	af00      	add	r7, sp, #0
 8025f32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025f3a:	4618      	mov	r0, r3
 8025f3c:	f7fb fe80 	bl	8021c40 <USBD_LL_DevConnected>
}
 8025f40:	bf00      	nop
 8025f42:	3708      	adds	r7, #8
 8025f44:	46bd      	mov	sp, r7
 8025f46:	bd80      	pop	{r7, pc}

08025f48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8025f48:	b580      	push	{r7, lr}
 8025f4a:	b082      	sub	sp, #8
 8025f4c:	af00      	add	r7, sp, #0
 8025f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8025f50:	687b      	ldr	r3, [r7, #4]
 8025f52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8025f56:	4618      	mov	r0, r3
 8025f58:	f7fb fe7d 	bl	8021c56 <USBD_LL_DevDisconnected>
}
 8025f5c:	bf00      	nop
 8025f5e:	3708      	adds	r7, #8
 8025f60:	46bd      	mov	sp, r7
 8025f62:	bd80      	pop	{r7, pc}

08025f64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8025f64:	b580      	push	{r7, lr}
 8025f66:	b082      	sub	sp, #8
 8025f68:	af00      	add	r7, sp, #0
 8025f6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8025f6c:	687b      	ldr	r3, [r7, #4]
 8025f6e:	781b      	ldrb	r3, [r3, #0]
 8025f70:	2b00      	cmp	r3, #0
 8025f72:	d13c      	bne.n	8025fee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8025f74:	4a20      	ldr	r2, [pc, #128]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f76:	687b      	ldr	r3, [r7, #4]
 8025f78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8025f7c:	687b      	ldr	r3, [r7, #4]
 8025f7e:	4a1e      	ldr	r2, [pc, #120]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8025f84:	4b1c      	ldr	r3, [pc, #112]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8025f8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8025f8c:	4b1a      	ldr	r3, [pc, #104]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f8e:	2206      	movs	r2, #6
 8025f90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8025f92:	4b19      	ldr	r3, [pc, #100]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f94:	2202      	movs	r2, #2
 8025f96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025f98:	4b17      	ldr	r3, [pc, #92]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025f9a:	2200      	movs	r2, #0
 8025f9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8025f9e:	4b16      	ldr	r3, [pc, #88]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fa0:	2202      	movs	r2, #2
 8025fa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8025fa4:	4b14      	ldr	r3, [pc, #80]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fa6:	2200      	movs	r2, #0
 8025fa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8025faa:	4b13      	ldr	r3, [pc, #76]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fac:	2200      	movs	r2, #0
 8025fae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8025fb0:	4b11      	ldr	r3, [pc, #68]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fb2:	2200      	movs	r2, #0
 8025fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8025fb6:	4b10      	ldr	r3, [pc, #64]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fb8:	2200      	movs	r2, #0
 8025fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8025fbc:	4b0e      	ldr	r3, [pc, #56]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fbe:	2200      	movs	r2, #0
 8025fc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8025fc2:	480d      	ldr	r0, [pc, #52]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fc4:	f7f3 fcad 	bl	8019922 <HAL_PCD_Init>
 8025fc8:	4603      	mov	r3, r0
 8025fca:	2b00      	cmp	r3, #0
 8025fcc:	d001      	beq.n	8025fd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8025fce:	f7f1 fac5 	bl	801755c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8025fd2:	2180      	movs	r1, #128	; 0x80
 8025fd4:	4808      	ldr	r0, [pc, #32]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fd6:	f7f4 ff66 	bl	801aea6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8025fda:	2240      	movs	r2, #64	; 0x40
 8025fdc:	2100      	movs	r1, #0
 8025fde:	4806      	ldr	r0, [pc, #24]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fe0:	f7f4 ff1a 	bl	801ae18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8025fe4:	2280      	movs	r2, #128	; 0x80
 8025fe6:	2101      	movs	r1, #1
 8025fe8:	4803      	ldr	r0, [pc, #12]	; (8025ff8 <USBD_LL_Init+0x94>)
 8025fea:	f7f4 ff15 	bl	801ae18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8025fee:	2300      	movs	r3, #0
}
 8025ff0:	4618      	mov	r0, r3
 8025ff2:	3708      	adds	r7, #8
 8025ff4:	46bd      	mov	sp, r7
 8025ff6:	bd80      	pop	{r7, pc}
 8025ff8:	20009fe8 	.word	0x20009fe8

08025ffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8025ffc:	b580      	push	{r7, lr}
 8025ffe:	b084      	sub	sp, #16
 8026000:	af00      	add	r7, sp, #0
 8026002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026004:	2300      	movs	r3, #0
 8026006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026008:	2300      	movs	r3, #0
 802600a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026012:	4618      	mov	r0, r3
 8026014:	f7f3 fda9 	bl	8019b6a <HAL_PCD_Start>
 8026018:	4603      	mov	r3, r0
 802601a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802601c:	7bfb      	ldrb	r3, [r7, #15]
 802601e:	4618      	mov	r0, r3
 8026020:	f000 f9b0 	bl	8026384 <USBD_Get_USB_Status>
 8026024:	4603      	mov	r3, r0
 8026026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026028:	7bbb      	ldrb	r3, [r7, #14]
}
 802602a:	4618      	mov	r0, r3
 802602c:	3710      	adds	r7, #16
 802602e:	46bd      	mov	sp, r7
 8026030:	bd80      	pop	{r7, pc}

08026032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8026032:	b580      	push	{r7, lr}
 8026034:	b084      	sub	sp, #16
 8026036:	af00      	add	r7, sp, #0
 8026038:	6078      	str	r0, [r7, #4]
 802603a:	4608      	mov	r0, r1
 802603c:	4611      	mov	r1, r2
 802603e:	461a      	mov	r2, r3
 8026040:	4603      	mov	r3, r0
 8026042:	70fb      	strb	r3, [r7, #3]
 8026044:	460b      	mov	r3, r1
 8026046:	70bb      	strb	r3, [r7, #2]
 8026048:	4613      	mov	r3, r2
 802604a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802604c:	2300      	movs	r3, #0
 802604e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026050:	2300      	movs	r3, #0
 8026052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8026054:	687b      	ldr	r3, [r7, #4]
 8026056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802605a:	78bb      	ldrb	r3, [r7, #2]
 802605c:	883a      	ldrh	r2, [r7, #0]
 802605e:	78f9      	ldrb	r1, [r7, #3]
 8026060:	f7f4 faa7 	bl	801a5b2 <HAL_PCD_EP_Open>
 8026064:	4603      	mov	r3, r0
 8026066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026068:	7bfb      	ldrb	r3, [r7, #15]
 802606a:	4618      	mov	r0, r3
 802606c:	f000 f98a 	bl	8026384 <USBD_Get_USB_Status>
 8026070:	4603      	mov	r3, r0
 8026072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026074:	7bbb      	ldrb	r3, [r7, #14]
}
 8026076:	4618      	mov	r0, r3
 8026078:	3710      	adds	r7, #16
 802607a:	46bd      	mov	sp, r7
 802607c:	bd80      	pop	{r7, pc}

0802607e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802607e:	b580      	push	{r7, lr}
 8026080:	b084      	sub	sp, #16
 8026082:	af00      	add	r7, sp, #0
 8026084:	6078      	str	r0, [r7, #4]
 8026086:	460b      	mov	r3, r1
 8026088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802608a:	2300      	movs	r3, #0
 802608c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802608e:	2300      	movs	r3, #0
 8026090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8026092:	687b      	ldr	r3, [r7, #4]
 8026094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026098:	78fa      	ldrb	r2, [r7, #3]
 802609a:	4611      	mov	r1, r2
 802609c:	4618      	mov	r0, r3
 802609e:	f7f4 faf0 	bl	801a682 <HAL_PCD_EP_Close>
 80260a2:	4603      	mov	r3, r0
 80260a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80260a6:	7bfb      	ldrb	r3, [r7, #15]
 80260a8:	4618      	mov	r0, r3
 80260aa:	f000 f96b 	bl	8026384 <USBD_Get_USB_Status>
 80260ae:	4603      	mov	r3, r0
 80260b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80260b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80260b4:	4618      	mov	r0, r3
 80260b6:	3710      	adds	r7, #16
 80260b8:	46bd      	mov	sp, r7
 80260ba:	bd80      	pop	{r7, pc}

080260bc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80260bc:	b580      	push	{r7, lr}
 80260be:	b084      	sub	sp, #16
 80260c0:	af00      	add	r7, sp, #0
 80260c2:	6078      	str	r0, [r7, #4]
 80260c4:	460b      	mov	r3, r1
 80260c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80260c8:	2300      	movs	r3, #0
 80260ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80260cc:	2300      	movs	r3, #0
 80260ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80260d6:	78fa      	ldrb	r2, [r7, #3]
 80260d8:	4611      	mov	r1, r2
 80260da:	4618      	mov	r0, r3
 80260dc:	f7f4 fcb3 	bl	801aa46 <HAL_PCD_EP_Flush>
 80260e0:	4603      	mov	r3, r0
 80260e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80260e4:	7bfb      	ldrb	r3, [r7, #15]
 80260e6:	4618      	mov	r0, r3
 80260e8:	f000 f94c 	bl	8026384 <USBD_Get_USB_Status>
 80260ec:	4603      	mov	r3, r0
 80260ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80260f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80260f2:	4618      	mov	r0, r3
 80260f4:	3710      	adds	r7, #16
 80260f6:	46bd      	mov	sp, r7
 80260f8:	bd80      	pop	{r7, pc}

080260fa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80260fa:	b580      	push	{r7, lr}
 80260fc:	b084      	sub	sp, #16
 80260fe:	af00      	add	r7, sp, #0
 8026100:	6078      	str	r0, [r7, #4]
 8026102:	460b      	mov	r3, r1
 8026104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026106:	2300      	movs	r3, #0
 8026108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802610a:	2300      	movs	r3, #0
 802610c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026114:	78fa      	ldrb	r2, [r7, #3]
 8026116:	4611      	mov	r1, r2
 8026118:	4618      	mov	r0, r3
 802611a:	f7f4 fba9 	bl	801a870 <HAL_PCD_EP_SetStall>
 802611e:	4603      	mov	r3, r0
 8026120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026122:	7bfb      	ldrb	r3, [r7, #15]
 8026124:	4618      	mov	r0, r3
 8026126:	f000 f92d 	bl	8026384 <USBD_Get_USB_Status>
 802612a:	4603      	mov	r3, r0
 802612c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802612e:	7bbb      	ldrb	r3, [r7, #14]
}
 8026130:	4618      	mov	r0, r3
 8026132:	3710      	adds	r7, #16
 8026134:	46bd      	mov	sp, r7
 8026136:	bd80      	pop	{r7, pc}

08026138 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026138:	b580      	push	{r7, lr}
 802613a:	b084      	sub	sp, #16
 802613c:	af00      	add	r7, sp, #0
 802613e:	6078      	str	r0, [r7, #4]
 8026140:	460b      	mov	r3, r1
 8026142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8026144:	2300      	movs	r3, #0
 8026146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026148:	2300      	movs	r3, #0
 802614a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802614c:	687b      	ldr	r3, [r7, #4]
 802614e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026152:	78fa      	ldrb	r2, [r7, #3]
 8026154:	4611      	mov	r1, r2
 8026156:	4618      	mov	r0, r3
 8026158:	f7f4 fbee 	bl	801a938 <HAL_PCD_EP_ClrStall>
 802615c:	4603      	mov	r3, r0
 802615e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026160:	7bfb      	ldrb	r3, [r7, #15]
 8026162:	4618      	mov	r0, r3
 8026164:	f000 f90e 	bl	8026384 <USBD_Get_USB_Status>
 8026168:	4603      	mov	r3, r0
 802616a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802616c:	7bbb      	ldrb	r3, [r7, #14]
}
 802616e:	4618      	mov	r0, r3
 8026170:	3710      	adds	r7, #16
 8026172:	46bd      	mov	sp, r7
 8026174:	bd80      	pop	{r7, pc}

08026176 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026176:	b480      	push	{r7}
 8026178:	b085      	sub	sp, #20
 802617a:	af00      	add	r7, sp, #0
 802617c:	6078      	str	r0, [r7, #4]
 802617e:	460b      	mov	r3, r1
 8026180:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8026182:	687b      	ldr	r3, [r7, #4]
 8026184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8026188:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802618a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802618e:	2b00      	cmp	r3, #0
 8026190:	da0b      	bge.n	80261aa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8026192:	78fb      	ldrb	r3, [r7, #3]
 8026194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8026198:	68f9      	ldr	r1, [r7, #12]
 802619a:	4613      	mov	r3, r2
 802619c:	00db      	lsls	r3, r3, #3
 802619e:	4413      	add	r3, r2
 80261a0:	009b      	lsls	r3, r3, #2
 80261a2:	440b      	add	r3, r1
 80261a4:	333e      	adds	r3, #62	; 0x3e
 80261a6:	781b      	ldrb	r3, [r3, #0]
 80261a8:	e00b      	b.n	80261c2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80261aa:	78fb      	ldrb	r3, [r7, #3]
 80261ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80261b0:	68f9      	ldr	r1, [r7, #12]
 80261b2:	4613      	mov	r3, r2
 80261b4:	00db      	lsls	r3, r3, #3
 80261b6:	4413      	add	r3, r2
 80261b8:	009b      	lsls	r3, r3, #2
 80261ba:	440b      	add	r3, r1
 80261bc:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80261c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80261c2:	4618      	mov	r0, r3
 80261c4:	3714      	adds	r7, #20
 80261c6:	46bd      	mov	sp, r7
 80261c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261cc:	4770      	bx	lr

080261ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80261ce:	b580      	push	{r7, lr}
 80261d0:	b084      	sub	sp, #16
 80261d2:	af00      	add	r7, sp, #0
 80261d4:	6078      	str	r0, [r7, #4]
 80261d6:	460b      	mov	r3, r1
 80261d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80261da:	2300      	movs	r3, #0
 80261dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80261de:	2300      	movs	r3, #0
 80261e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80261e2:	687b      	ldr	r3, [r7, #4]
 80261e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80261e8:	78fa      	ldrb	r2, [r7, #3]
 80261ea:	4611      	mov	r1, r2
 80261ec:	4618      	mov	r0, r3
 80261ee:	f7f4 f9bb 	bl	801a568 <HAL_PCD_SetAddress>
 80261f2:	4603      	mov	r3, r0
 80261f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80261f6:	7bfb      	ldrb	r3, [r7, #15]
 80261f8:	4618      	mov	r0, r3
 80261fa:	f000 f8c3 	bl	8026384 <USBD_Get_USB_Status>
 80261fe:	4603      	mov	r3, r0
 8026200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8026202:	7bbb      	ldrb	r3, [r7, #14]
}
 8026204:	4618      	mov	r0, r3
 8026206:	3710      	adds	r7, #16
 8026208:	46bd      	mov	sp, r7
 802620a:	bd80      	pop	{r7, pc}

0802620c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802620c:	b580      	push	{r7, lr}
 802620e:	b086      	sub	sp, #24
 8026210:	af00      	add	r7, sp, #0
 8026212:	60f8      	str	r0, [r7, #12]
 8026214:	607a      	str	r2, [r7, #4]
 8026216:	603b      	str	r3, [r7, #0]
 8026218:	460b      	mov	r3, r1
 802621a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802621c:	2300      	movs	r3, #0
 802621e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026220:	2300      	movs	r3, #0
 8026222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8026224:	68fb      	ldr	r3, [r7, #12]
 8026226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802622a:	7af9      	ldrb	r1, [r7, #11]
 802622c:	683b      	ldr	r3, [r7, #0]
 802622e:	687a      	ldr	r2, [r7, #4]
 8026230:	f7f4 fad4 	bl	801a7dc <HAL_PCD_EP_Transmit>
 8026234:	4603      	mov	r3, r0
 8026236:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8026238:	7dfb      	ldrb	r3, [r7, #23]
 802623a:	4618      	mov	r0, r3
 802623c:	f000 f8a2 	bl	8026384 <USBD_Get_USB_Status>
 8026240:	4603      	mov	r3, r0
 8026242:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8026244:	7dbb      	ldrb	r3, [r7, #22]
}
 8026246:	4618      	mov	r0, r3
 8026248:	3718      	adds	r7, #24
 802624a:	46bd      	mov	sp, r7
 802624c:	bd80      	pop	{r7, pc}

0802624e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802624e:	b580      	push	{r7, lr}
 8026250:	b086      	sub	sp, #24
 8026252:	af00      	add	r7, sp, #0
 8026254:	60f8      	str	r0, [r7, #12]
 8026256:	607a      	str	r2, [r7, #4]
 8026258:	603b      	str	r3, [r7, #0]
 802625a:	460b      	mov	r3, r1
 802625c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802625e:	2300      	movs	r3, #0
 8026260:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8026262:	2300      	movs	r3, #0
 8026264:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8026266:	68fb      	ldr	r3, [r7, #12]
 8026268:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802626c:	7af9      	ldrb	r1, [r7, #11]
 802626e:	683b      	ldr	r3, [r7, #0]
 8026270:	687a      	ldr	r2, [r7, #4]
 8026272:	f7f4 fa50 	bl	801a716 <HAL_PCD_EP_Receive>
 8026276:	4603      	mov	r3, r0
 8026278:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802627a:	7dfb      	ldrb	r3, [r7, #23]
 802627c:	4618      	mov	r0, r3
 802627e:	f000 f881 	bl	8026384 <USBD_Get_USB_Status>
 8026282:	4603      	mov	r3, r0
 8026284:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8026286:	7dbb      	ldrb	r3, [r7, #22]
}
 8026288:	4618      	mov	r0, r3
 802628a:	3718      	adds	r7, #24
 802628c:	46bd      	mov	sp, r7
 802628e:	bd80      	pop	{r7, pc}

08026290 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8026290:	b580      	push	{r7, lr}
 8026292:	b082      	sub	sp, #8
 8026294:	af00      	add	r7, sp, #0
 8026296:	6078      	str	r0, [r7, #4]
 8026298:	460b      	mov	r3, r1
 802629a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80262a2:	78fa      	ldrb	r2, [r7, #3]
 80262a4:	4611      	mov	r1, r2
 80262a6:	4618      	mov	r0, r3
 80262a8:	f7f4 fa80 	bl	801a7ac <HAL_PCD_EP_GetRxCount>
 80262ac:	4603      	mov	r3, r0
}
 80262ae:	4618      	mov	r0, r3
 80262b0:	3708      	adds	r7, #8
 80262b2:	46bd      	mov	sp, r7
 80262b4:	bd80      	pop	{r7, pc}
	...

080262b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80262b8:	b580      	push	{r7, lr}
 80262ba:	b082      	sub	sp, #8
 80262bc:	af00      	add	r7, sp, #0
 80262be:	6078      	str	r0, [r7, #4]
 80262c0:	460b      	mov	r3, r1
 80262c2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80262c4:	78fb      	ldrb	r3, [r7, #3]
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d002      	beq.n	80262d0 <HAL_PCDEx_LPM_Callback+0x18>
 80262ca:	2b01      	cmp	r3, #1
 80262cc:	d01f      	beq.n	802630e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80262ce:	e03b      	b.n	8026348 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80262d0:	687b      	ldr	r3, [r7, #4]
 80262d2:	6a1b      	ldr	r3, [r3, #32]
 80262d4:	2b00      	cmp	r3, #0
 80262d6:	d007      	beq.n	80262e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80262d8:	f7f0 fcb8 	bl	8016c4c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80262dc:	4b1c      	ldr	r3, [pc, #112]	; (8026350 <HAL_PCDEx_LPM_Callback+0x98>)
 80262de:	691b      	ldr	r3, [r3, #16]
 80262e0:	4a1b      	ldr	r2, [pc, #108]	; (8026350 <HAL_PCDEx_LPM_Callback+0x98>)
 80262e2:	f023 0306 	bic.w	r3, r3, #6
 80262e6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80262f0:	681b      	ldr	r3, [r3, #0]
 80262f2:	687a      	ldr	r2, [r7, #4]
 80262f4:	6812      	ldr	r2, [r2, #0]
 80262f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80262fa:	f023 0301 	bic.w	r3, r3, #1
 80262fe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8026300:	687b      	ldr	r3, [r7, #4]
 8026302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8026306:	4618      	mov	r0, r3
 8026308:	f7fb fbfe 	bl	8021b08 <USBD_LL_Resume>
    break;
 802630c:	e01c      	b.n	8026348 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	681b      	ldr	r3, [r3, #0]
 8026312:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8026316:	681b      	ldr	r3, [r3, #0]
 8026318:	687a      	ldr	r2, [r7, #4]
 802631a:	6812      	ldr	r2, [r2, #0]
 802631c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8026320:	f043 0301 	orr.w	r3, r3, #1
 8026324:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8026326:	687b      	ldr	r3, [r7, #4]
 8026328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 802632c:	4618      	mov	r0, r3
 802632e:	f7fb fbd5 	bl	8021adc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8026332:	687b      	ldr	r3, [r7, #4]
 8026334:	6a1b      	ldr	r3, [r3, #32]
 8026336:	2b00      	cmp	r3, #0
 8026338:	d005      	beq.n	8026346 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802633a:	4b05      	ldr	r3, [pc, #20]	; (8026350 <HAL_PCDEx_LPM_Callback+0x98>)
 802633c:	691b      	ldr	r3, [r3, #16]
 802633e:	4a04      	ldr	r2, [pc, #16]	; (8026350 <HAL_PCDEx_LPM_Callback+0x98>)
 8026340:	f043 0306 	orr.w	r3, r3, #6
 8026344:	6113      	str	r3, [r2, #16]
    break;
 8026346:	bf00      	nop
}
 8026348:	bf00      	nop
 802634a:	3708      	adds	r7, #8
 802634c:	46bd      	mov	sp, r7
 802634e:	bd80      	pop	{r7, pc}
 8026350:	e000ed00 	.word	0xe000ed00

08026354 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8026354:	b480      	push	{r7}
 8026356:	b083      	sub	sp, #12
 8026358:	af00      	add	r7, sp, #0
 802635a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 802635c:	4b03      	ldr	r3, [pc, #12]	; (802636c <USBD_static_malloc+0x18>)
}
 802635e:	4618      	mov	r0, r3
 8026360:	370c      	adds	r7, #12
 8026362:	46bd      	mov	sp, r7
 8026364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026368:	4770      	bx	lr
 802636a:	bf00      	nop
 802636c:	2000a4f4 	.word	0x2000a4f4

08026370 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8026370:	b480      	push	{r7}
 8026372:	b083      	sub	sp, #12
 8026374:	af00      	add	r7, sp, #0
 8026376:	6078      	str	r0, [r7, #4]

}
 8026378:	bf00      	nop
 802637a:	370c      	adds	r7, #12
 802637c:	46bd      	mov	sp, r7
 802637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026382:	4770      	bx	lr

08026384 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8026384:	b480      	push	{r7}
 8026386:	b085      	sub	sp, #20
 8026388:	af00      	add	r7, sp, #0
 802638a:	4603      	mov	r3, r0
 802638c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802638e:	2300      	movs	r3, #0
 8026390:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8026392:	79fb      	ldrb	r3, [r7, #7]
 8026394:	2b03      	cmp	r3, #3
 8026396:	d817      	bhi.n	80263c8 <USBD_Get_USB_Status+0x44>
 8026398:	a201      	add	r2, pc, #4	; (adr r2, 80263a0 <USBD_Get_USB_Status+0x1c>)
 802639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802639e:	bf00      	nop
 80263a0:	080263b1 	.word	0x080263b1
 80263a4:	080263b7 	.word	0x080263b7
 80263a8:	080263bd 	.word	0x080263bd
 80263ac:	080263c3 	.word	0x080263c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80263b0:	2300      	movs	r3, #0
 80263b2:	73fb      	strb	r3, [r7, #15]
    break;
 80263b4:	e00b      	b.n	80263ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80263b6:	2303      	movs	r3, #3
 80263b8:	73fb      	strb	r3, [r7, #15]
    break;
 80263ba:	e008      	b.n	80263ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80263bc:	2301      	movs	r3, #1
 80263be:	73fb      	strb	r3, [r7, #15]
    break;
 80263c0:	e005      	b.n	80263ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80263c2:	2303      	movs	r3, #3
 80263c4:	73fb      	strb	r3, [r7, #15]
    break;
 80263c6:	e002      	b.n	80263ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80263c8:	2303      	movs	r3, #3
 80263ca:	73fb      	strb	r3, [r7, #15]
    break;
 80263cc:	bf00      	nop
  }
  return usb_status;
 80263ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80263d0:	4618      	mov	r0, r3
 80263d2:	3714      	adds	r7, #20
 80263d4:	46bd      	mov	sp, r7
 80263d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263da:	4770      	bx	lr

080263dc <__errno>:
 80263dc:	4b01      	ldr	r3, [pc, #4]	; (80263e4 <__errno+0x8>)
 80263de:	6818      	ldr	r0, [r3, #0]
 80263e0:	4770      	bx	lr
 80263e2:	bf00      	nop
 80263e4:	200006ac 	.word	0x200006ac

080263e8 <__libc_init_array>:
 80263e8:	b570      	push	{r4, r5, r6, lr}
 80263ea:	4d0d      	ldr	r5, [pc, #52]	; (8026420 <__libc_init_array+0x38>)
 80263ec:	4c0d      	ldr	r4, [pc, #52]	; (8026424 <__libc_init_array+0x3c>)
 80263ee:	1b64      	subs	r4, r4, r5
 80263f0:	10a4      	asrs	r4, r4, #2
 80263f2:	2600      	movs	r6, #0
 80263f4:	42a6      	cmp	r6, r4
 80263f6:	d109      	bne.n	802640c <__libc_init_array+0x24>
 80263f8:	4d0b      	ldr	r5, [pc, #44]	; (8026428 <__libc_init_array+0x40>)
 80263fa:	4c0c      	ldr	r4, [pc, #48]	; (802642c <__libc_init_array+0x44>)
 80263fc:	f000 fd0e 	bl	8026e1c <_init>
 8026400:	1b64      	subs	r4, r4, r5
 8026402:	10a4      	asrs	r4, r4, #2
 8026404:	2600      	movs	r6, #0
 8026406:	42a6      	cmp	r6, r4
 8026408:	d105      	bne.n	8026416 <__libc_init_array+0x2e>
 802640a:	bd70      	pop	{r4, r5, r6, pc}
 802640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026410:	4798      	blx	r3
 8026412:	3601      	adds	r6, #1
 8026414:	e7ee      	b.n	80263f4 <__libc_init_array+0xc>
 8026416:	f855 3b04 	ldr.w	r3, [r5], #4
 802641a:	4798      	blx	r3
 802641c:	3601      	adds	r6, #1
 802641e:	e7f2      	b.n	8026406 <__libc_init_array+0x1e>
 8026420:	08026e3c 	.word	0x08026e3c
 8026424:	08026e3c 	.word	0x08026e3c
 8026428:	08026e3c 	.word	0x08026e3c
 802642c:	08026e40 	.word	0x08026e40

08026430 <malloc>:
 8026430:	4b02      	ldr	r3, [pc, #8]	; (802643c <malloc+0xc>)
 8026432:	4601      	mov	r1, r0
 8026434:	6818      	ldr	r0, [r3, #0]
 8026436:	f000 b88d 	b.w	8026554 <_malloc_r>
 802643a:	bf00      	nop
 802643c:	200006ac 	.word	0x200006ac

08026440 <free>:
 8026440:	4b02      	ldr	r3, [pc, #8]	; (802644c <free+0xc>)
 8026442:	4601      	mov	r1, r0
 8026444:	6818      	ldr	r0, [r3, #0]
 8026446:	f000 b819 	b.w	802647c <_free_r>
 802644a:	bf00      	nop
 802644c:	200006ac 	.word	0x200006ac

08026450 <memcpy>:
 8026450:	440a      	add	r2, r1
 8026452:	4291      	cmp	r1, r2
 8026454:	f100 33ff 	add.w	r3, r0, #4294967295
 8026458:	d100      	bne.n	802645c <memcpy+0xc>
 802645a:	4770      	bx	lr
 802645c:	b510      	push	{r4, lr}
 802645e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026466:	4291      	cmp	r1, r2
 8026468:	d1f9      	bne.n	802645e <memcpy+0xe>
 802646a:	bd10      	pop	{r4, pc}

0802646c <memset>:
 802646c:	4402      	add	r2, r0
 802646e:	4603      	mov	r3, r0
 8026470:	4293      	cmp	r3, r2
 8026472:	d100      	bne.n	8026476 <memset+0xa>
 8026474:	4770      	bx	lr
 8026476:	f803 1b01 	strb.w	r1, [r3], #1
 802647a:	e7f9      	b.n	8026470 <memset+0x4>

0802647c <_free_r>:
 802647c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802647e:	2900      	cmp	r1, #0
 8026480:	d044      	beq.n	802650c <_free_r+0x90>
 8026482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026486:	9001      	str	r0, [sp, #4]
 8026488:	2b00      	cmp	r3, #0
 802648a:	f1a1 0404 	sub.w	r4, r1, #4
 802648e:	bfb8      	it	lt
 8026490:	18e4      	addlt	r4, r4, r3
 8026492:	f000 f8e3 	bl	802665c <__malloc_lock>
 8026496:	4a1e      	ldr	r2, [pc, #120]	; (8026510 <_free_r+0x94>)
 8026498:	9801      	ldr	r0, [sp, #4]
 802649a:	6813      	ldr	r3, [r2, #0]
 802649c:	b933      	cbnz	r3, 80264ac <_free_r+0x30>
 802649e:	6063      	str	r3, [r4, #4]
 80264a0:	6014      	str	r4, [r2, #0]
 80264a2:	b003      	add	sp, #12
 80264a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80264a8:	f000 b8de 	b.w	8026668 <__malloc_unlock>
 80264ac:	42a3      	cmp	r3, r4
 80264ae:	d908      	bls.n	80264c2 <_free_r+0x46>
 80264b0:	6825      	ldr	r5, [r4, #0]
 80264b2:	1961      	adds	r1, r4, r5
 80264b4:	428b      	cmp	r3, r1
 80264b6:	bf01      	itttt	eq
 80264b8:	6819      	ldreq	r1, [r3, #0]
 80264ba:	685b      	ldreq	r3, [r3, #4]
 80264bc:	1949      	addeq	r1, r1, r5
 80264be:	6021      	streq	r1, [r4, #0]
 80264c0:	e7ed      	b.n	802649e <_free_r+0x22>
 80264c2:	461a      	mov	r2, r3
 80264c4:	685b      	ldr	r3, [r3, #4]
 80264c6:	b10b      	cbz	r3, 80264cc <_free_r+0x50>
 80264c8:	42a3      	cmp	r3, r4
 80264ca:	d9fa      	bls.n	80264c2 <_free_r+0x46>
 80264cc:	6811      	ldr	r1, [r2, #0]
 80264ce:	1855      	adds	r5, r2, r1
 80264d0:	42a5      	cmp	r5, r4
 80264d2:	d10b      	bne.n	80264ec <_free_r+0x70>
 80264d4:	6824      	ldr	r4, [r4, #0]
 80264d6:	4421      	add	r1, r4
 80264d8:	1854      	adds	r4, r2, r1
 80264da:	42a3      	cmp	r3, r4
 80264dc:	6011      	str	r1, [r2, #0]
 80264de:	d1e0      	bne.n	80264a2 <_free_r+0x26>
 80264e0:	681c      	ldr	r4, [r3, #0]
 80264e2:	685b      	ldr	r3, [r3, #4]
 80264e4:	6053      	str	r3, [r2, #4]
 80264e6:	4421      	add	r1, r4
 80264e8:	6011      	str	r1, [r2, #0]
 80264ea:	e7da      	b.n	80264a2 <_free_r+0x26>
 80264ec:	d902      	bls.n	80264f4 <_free_r+0x78>
 80264ee:	230c      	movs	r3, #12
 80264f0:	6003      	str	r3, [r0, #0]
 80264f2:	e7d6      	b.n	80264a2 <_free_r+0x26>
 80264f4:	6825      	ldr	r5, [r4, #0]
 80264f6:	1961      	adds	r1, r4, r5
 80264f8:	428b      	cmp	r3, r1
 80264fa:	bf04      	itt	eq
 80264fc:	6819      	ldreq	r1, [r3, #0]
 80264fe:	685b      	ldreq	r3, [r3, #4]
 8026500:	6063      	str	r3, [r4, #4]
 8026502:	bf04      	itt	eq
 8026504:	1949      	addeq	r1, r1, r5
 8026506:	6021      	streq	r1, [r4, #0]
 8026508:	6054      	str	r4, [r2, #4]
 802650a:	e7ca      	b.n	80264a2 <_free_r+0x26>
 802650c:	b003      	add	sp, #12
 802650e:	bd30      	pop	{r4, r5, pc}
 8026510:	2000a76c 	.word	0x2000a76c

08026514 <sbrk_aligned>:
 8026514:	b570      	push	{r4, r5, r6, lr}
 8026516:	4e0e      	ldr	r6, [pc, #56]	; (8026550 <sbrk_aligned+0x3c>)
 8026518:	460c      	mov	r4, r1
 802651a:	6831      	ldr	r1, [r6, #0]
 802651c:	4605      	mov	r5, r0
 802651e:	b911      	cbnz	r1, 8026526 <sbrk_aligned+0x12>
 8026520:	f000 f88c 	bl	802663c <_sbrk_r>
 8026524:	6030      	str	r0, [r6, #0]
 8026526:	4621      	mov	r1, r4
 8026528:	4628      	mov	r0, r5
 802652a:	f000 f887 	bl	802663c <_sbrk_r>
 802652e:	1c43      	adds	r3, r0, #1
 8026530:	d00a      	beq.n	8026548 <sbrk_aligned+0x34>
 8026532:	1cc4      	adds	r4, r0, #3
 8026534:	f024 0403 	bic.w	r4, r4, #3
 8026538:	42a0      	cmp	r0, r4
 802653a:	d007      	beq.n	802654c <sbrk_aligned+0x38>
 802653c:	1a21      	subs	r1, r4, r0
 802653e:	4628      	mov	r0, r5
 8026540:	f000 f87c 	bl	802663c <_sbrk_r>
 8026544:	3001      	adds	r0, #1
 8026546:	d101      	bne.n	802654c <sbrk_aligned+0x38>
 8026548:	f04f 34ff 	mov.w	r4, #4294967295
 802654c:	4620      	mov	r0, r4
 802654e:	bd70      	pop	{r4, r5, r6, pc}
 8026550:	2000a770 	.word	0x2000a770

08026554 <_malloc_r>:
 8026554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026558:	1ccd      	adds	r5, r1, #3
 802655a:	f025 0503 	bic.w	r5, r5, #3
 802655e:	3508      	adds	r5, #8
 8026560:	2d0c      	cmp	r5, #12
 8026562:	bf38      	it	cc
 8026564:	250c      	movcc	r5, #12
 8026566:	2d00      	cmp	r5, #0
 8026568:	4607      	mov	r7, r0
 802656a:	db01      	blt.n	8026570 <_malloc_r+0x1c>
 802656c:	42a9      	cmp	r1, r5
 802656e:	d905      	bls.n	802657c <_malloc_r+0x28>
 8026570:	230c      	movs	r3, #12
 8026572:	603b      	str	r3, [r7, #0]
 8026574:	2600      	movs	r6, #0
 8026576:	4630      	mov	r0, r6
 8026578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802657c:	4e2e      	ldr	r6, [pc, #184]	; (8026638 <_malloc_r+0xe4>)
 802657e:	f000 f86d 	bl	802665c <__malloc_lock>
 8026582:	6833      	ldr	r3, [r6, #0]
 8026584:	461c      	mov	r4, r3
 8026586:	bb34      	cbnz	r4, 80265d6 <_malloc_r+0x82>
 8026588:	4629      	mov	r1, r5
 802658a:	4638      	mov	r0, r7
 802658c:	f7ff ffc2 	bl	8026514 <sbrk_aligned>
 8026590:	1c43      	adds	r3, r0, #1
 8026592:	4604      	mov	r4, r0
 8026594:	d14d      	bne.n	8026632 <_malloc_r+0xde>
 8026596:	6834      	ldr	r4, [r6, #0]
 8026598:	4626      	mov	r6, r4
 802659a:	2e00      	cmp	r6, #0
 802659c:	d140      	bne.n	8026620 <_malloc_r+0xcc>
 802659e:	6823      	ldr	r3, [r4, #0]
 80265a0:	4631      	mov	r1, r6
 80265a2:	4638      	mov	r0, r7
 80265a4:	eb04 0803 	add.w	r8, r4, r3
 80265a8:	f000 f848 	bl	802663c <_sbrk_r>
 80265ac:	4580      	cmp	r8, r0
 80265ae:	d13a      	bne.n	8026626 <_malloc_r+0xd2>
 80265b0:	6821      	ldr	r1, [r4, #0]
 80265b2:	3503      	adds	r5, #3
 80265b4:	1a6d      	subs	r5, r5, r1
 80265b6:	f025 0503 	bic.w	r5, r5, #3
 80265ba:	3508      	adds	r5, #8
 80265bc:	2d0c      	cmp	r5, #12
 80265be:	bf38      	it	cc
 80265c0:	250c      	movcc	r5, #12
 80265c2:	4629      	mov	r1, r5
 80265c4:	4638      	mov	r0, r7
 80265c6:	f7ff ffa5 	bl	8026514 <sbrk_aligned>
 80265ca:	3001      	adds	r0, #1
 80265cc:	d02b      	beq.n	8026626 <_malloc_r+0xd2>
 80265ce:	6823      	ldr	r3, [r4, #0]
 80265d0:	442b      	add	r3, r5
 80265d2:	6023      	str	r3, [r4, #0]
 80265d4:	e00e      	b.n	80265f4 <_malloc_r+0xa0>
 80265d6:	6822      	ldr	r2, [r4, #0]
 80265d8:	1b52      	subs	r2, r2, r5
 80265da:	d41e      	bmi.n	802661a <_malloc_r+0xc6>
 80265dc:	2a0b      	cmp	r2, #11
 80265de:	d916      	bls.n	802660e <_malloc_r+0xba>
 80265e0:	1961      	adds	r1, r4, r5
 80265e2:	42a3      	cmp	r3, r4
 80265e4:	6025      	str	r5, [r4, #0]
 80265e6:	bf18      	it	ne
 80265e8:	6059      	strne	r1, [r3, #4]
 80265ea:	6863      	ldr	r3, [r4, #4]
 80265ec:	bf08      	it	eq
 80265ee:	6031      	streq	r1, [r6, #0]
 80265f0:	5162      	str	r2, [r4, r5]
 80265f2:	604b      	str	r3, [r1, #4]
 80265f4:	4638      	mov	r0, r7
 80265f6:	f104 060b 	add.w	r6, r4, #11
 80265fa:	f000 f835 	bl	8026668 <__malloc_unlock>
 80265fe:	f026 0607 	bic.w	r6, r6, #7
 8026602:	1d23      	adds	r3, r4, #4
 8026604:	1af2      	subs	r2, r6, r3
 8026606:	d0b6      	beq.n	8026576 <_malloc_r+0x22>
 8026608:	1b9b      	subs	r3, r3, r6
 802660a:	50a3      	str	r3, [r4, r2]
 802660c:	e7b3      	b.n	8026576 <_malloc_r+0x22>
 802660e:	6862      	ldr	r2, [r4, #4]
 8026610:	42a3      	cmp	r3, r4
 8026612:	bf0c      	ite	eq
 8026614:	6032      	streq	r2, [r6, #0]
 8026616:	605a      	strne	r2, [r3, #4]
 8026618:	e7ec      	b.n	80265f4 <_malloc_r+0xa0>
 802661a:	4623      	mov	r3, r4
 802661c:	6864      	ldr	r4, [r4, #4]
 802661e:	e7b2      	b.n	8026586 <_malloc_r+0x32>
 8026620:	4634      	mov	r4, r6
 8026622:	6876      	ldr	r6, [r6, #4]
 8026624:	e7b9      	b.n	802659a <_malloc_r+0x46>
 8026626:	230c      	movs	r3, #12
 8026628:	603b      	str	r3, [r7, #0]
 802662a:	4638      	mov	r0, r7
 802662c:	f000 f81c 	bl	8026668 <__malloc_unlock>
 8026630:	e7a1      	b.n	8026576 <_malloc_r+0x22>
 8026632:	6025      	str	r5, [r4, #0]
 8026634:	e7de      	b.n	80265f4 <_malloc_r+0xa0>
 8026636:	bf00      	nop
 8026638:	2000a76c 	.word	0x2000a76c

0802663c <_sbrk_r>:
 802663c:	b538      	push	{r3, r4, r5, lr}
 802663e:	4d06      	ldr	r5, [pc, #24]	; (8026658 <_sbrk_r+0x1c>)
 8026640:	2300      	movs	r3, #0
 8026642:	4604      	mov	r4, r0
 8026644:	4608      	mov	r0, r1
 8026646:	602b      	str	r3, [r5, #0]
 8026648:	f7f1 fa38 	bl	8017abc <_sbrk>
 802664c:	1c43      	adds	r3, r0, #1
 802664e:	d102      	bne.n	8026656 <_sbrk_r+0x1a>
 8026650:	682b      	ldr	r3, [r5, #0]
 8026652:	b103      	cbz	r3, 8026656 <_sbrk_r+0x1a>
 8026654:	6023      	str	r3, [r4, #0]
 8026656:	bd38      	pop	{r3, r4, r5, pc}
 8026658:	2000a774 	.word	0x2000a774

0802665c <__malloc_lock>:
 802665c:	4801      	ldr	r0, [pc, #4]	; (8026664 <__malloc_lock+0x8>)
 802665e:	f000 b809 	b.w	8026674 <__retarget_lock_acquire_recursive>
 8026662:	bf00      	nop
 8026664:	2000a778 	.word	0x2000a778

08026668 <__malloc_unlock>:
 8026668:	4801      	ldr	r0, [pc, #4]	; (8026670 <__malloc_unlock+0x8>)
 802666a:	f000 b804 	b.w	8026676 <__retarget_lock_release_recursive>
 802666e:	bf00      	nop
 8026670:	2000a778 	.word	0x2000a778

08026674 <__retarget_lock_acquire_recursive>:
 8026674:	4770      	bx	lr

08026676 <__retarget_lock_release_recursive>:
 8026676:	4770      	bx	lr

08026678 <powf>:
 8026678:	b508      	push	{r3, lr}
 802667a:	ed2d 8b04 	vpush	{d8-d9}
 802667e:	eeb0 8a60 	vmov.f32	s16, s1
 8026682:	eeb0 9a40 	vmov.f32	s18, s0
 8026686:	f000 f84f 	bl	8026728 <__ieee754_powf>
 802668a:	eeb4 8a48 	vcmp.f32	s16, s16
 802668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026692:	eef0 8a40 	vmov.f32	s17, s0
 8026696:	d63e      	bvs.n	8026716 <powf+0x9e>
 8026698:	eeb5 9a40 	vcmp.f32	s18, #0.0
 802669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266a0:	d112      	bne.n	80266c8 <powf+0x50>
 80266a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80266a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266aa:	d039      	beq.n	8026720 <powf+0xa8>
 80266ac:	eeb0 0a48 	vmov.f32	s0, s16
 80266b0:	f000 fb35 	bl	8026d1e <finitef>
 80266b4:	b378      	cbz	r0, 8026716 <powf+0x9e>
 80266b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80266ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266be:	d52a      	bpl.n	8026716 <powf+0x9e>
 80266c0:	f7ff fe8c 	bl	80263dc <__errno>
 80266c4:	2322      	movs	r3, #34	; 0x22
 80266c6:	e014      	b.n	80266f2 <powf+0x7a>
 80266c8:	f000 fb29 	bl	8026d1e <finitef>
 80266cc:	b998      	cbnz	r0, 80266f6 <powf+0x7e>
 80266ce:	eeb0 0a49 	vmov.f32	s0, s18
 80266d2:	f000 fb24 	bl	8026d1e <finitef>
 80266d6:	b170      	cbz	r0, 80266f6 <powf+0x7e>
 80266d8:	eeb0 0a48 	vmov.f32	s0, s16
 80266dc:	f000 fb1f 	bl	8026d1e <finitef>
 80266e0:	b148      	cbz	r0, 80266f6 <powf+0x7e>
 80266e2:	eef4 8a68 	vcmp.f32	s17, s17
 80266e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266ea:	d7e9      	bvc.n	80266c0 <powf+0x48>
 80266ec:	f7ff fe76 	bl	80263dc <__errno>
 80266f0:	2321      	movs	r3, #33	; 0x21
 80266f2:	6003      	str	r3, [r0, #0]
 80266f4:	e00f      	b.n	8026716 <powf+0x9e>
 80266f6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80266fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266fe:	d10a      	bne.n	8026716 <powf+0x9e>
 8026700:	eeb0 0a49 	vmov.f32	s0, s18
 8026704:	f000 fb0b 	bl	8026d1e <finitef>
 8026708:	b128      	cbz	r0, 8026716 <powf+0x9e>
 802670a:	eeb0 0a48 	vmov.f32	s0, s16
 802670e:	f000 fb06 	bl	8026d1e <finitef>
 8026712:	2800      	cmp	r0, #0
 8026714:	d1d4      	bne.n	80266c0 <powf+0x48>
 8026716:	eeb0 0a68 	vmov.f32	s0, s17
 802671a:	ecbd 8b04 	vpop	{d8-d9}
 802671e:	bd08      	pop	{r3, pc}
 8026720:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8026724:	e7f7      	b.n	8026716 <powf+0x9e>
	...

08026728 <__ieee754_powf>:
 8026728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802672c:	ee10 4a90 	vmov	r4, s1
 8026730:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8026734:	ed2d 8b02 	vpush	{d8}
 8026738:	ee10 6a10 	vmov	r6, s0
 802673c:	eeb0 8a40 	vmov.f32	s16, s0
 8026740:	eef0 8a60 	vmov.f32	s17, s1
 8026744:	d10c      	bne.n	8026760 <__ieee754_powf+0x38>
 8026746:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 802674a:	0076      	lsls	r6, r6, #1
 802674c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8026750:	f240 8296 	bls.w	8026c80 <__ieee754_powf+0x558>
 8026754:	ee38 0a28 	vadd.f32	s0, s16, s17
 8026758:	ecbd 8b02 	vpop	{d8}
 802675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026760:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8026764:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8026768:	dcf4      	bgt.n	8026754 <__ieee754_powf+0x2c>
 802676a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802676e:	dd08      	ble.n	8026782 <__ieee754_powf+0x5a>
 8026770:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8026774:	d1ee      	bne.n	8026754 <__ieee754_powf+0x2c>
 8026776:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802677a:	0064      	lsls	r4, r4, #1
 802677c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8026780:	e7e6      	b.n	8026750 <__ieee754_powf+0x28>
 8026782:	2e00      	cmp	r6, #0
 8026784:	da20      	bge.n	80267c8 <__ieee754_powf+0xa0>
 8026786:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 802678a:	da2d      	bge.n	80267e8 <__ieee754_powf+0xc0>
 802678c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8026790:	f2c0 827f 	blt.w	8026c92 <__ieee754_powf+0x56a>
 8026794:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8026798:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802679c:	fa48 f703 	asr.w	r7, r8, r3
 80267a0:	fa07 f303 	lsl.w	r3, r7, r3
 80267a4:	4543      	cmp	r3, r8
 80267a6:	f040 8274 	bne.w	8026c92 <__ieee754_powf+0x56a>
 80267aa:	f007 0701 	and.w	r7, r7, #1
 80267ae:	f1c7 0702 	rsb	r7, r7, #2
 80267b2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80267b6:	d11f      	bne.n	80267f8 <__ieee754_powf+0xd0>
 80267b8:	2c00      	cmp	r4, #0
 80267ba:	f280 8267 	bge.w	8026c8c <__ieee754_powf+0x564>
 80267be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80267c2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80267c6:	e7c7      	b.n	8026758 <__ieee754_powf+0x30>
 80267c8:	2700      	movs	r7, #0
 80267ca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80267ce:	d1f0      	bne.n	80267b2 <__ieee754_powf+0x8a>
 80267d0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80267d4:	f000 8254 	beq.w	8026c80 <__ieee754_powf+0x558>
 80267d8:	dd08      	ble.n	80267ec <__ieee754_powf+0xc4>
 80267da:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8026ae4 <__ieee754_powf+0x3bc>
 80267de:	2c00      	cmp	r4, #0
 80267e0:	bfa8      	it	ge
 80267e2:	eeb0 0a68 	vmovge.f32	s0, s17
 80267e6:	e7b7      	b.n	8026758 <__ieee754_powf+0x30>
 80267e8:	2702      	movs	r7, #2
 80267ea:	e7ee      	b.n	80267ca <__ieee754_powf+0xa2>
 80267ec:	2c00      	cmp	r4, #0
 80267ee:	f280 824a 	bge.w	8026c86 <__ieee754_powf+0x55e>
 80267f2:	eeb1 0a68 	vneg.f32	s0, s17
 80267f6:	e7af      	b.n	8026758 <__ieee754_powf+0x30>
 80267f8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80267fc:	d102      	bne.n	8026804 <__ieee754_powf+0xdc>
 80267fe:	ee28 0a08 	vmul.f32	s0, s16, s16
 8026802:	e7a9      	b.n	8026758 <__ieee754_powf+0x30>
 8026804:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8026808:	eeb0 0a48 	vmov.f32	s0, s16
 802680c:	d107      	bne.n	802681e <__ieee754_powf+0xf6>
 802680e:	2e00      	cmp	r6, #0
 8026810:	db05      	blt.n	802681e <__ieee754_powf+0xf6>
 8026812:	ecbd 8b02 	vpop	{d8}
 8026816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802681a:	f000 ba53 	b.w	8026cc4 <__ieee754_sqrtf>
 802681e:	f000 fa77 	bl	8026d10 <fabsf>
 8026822:	b125      	cbz	r5, 802682e <__ieee754_powf+0x106>
 8026824:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8026828:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 802682c:	d116      	bne.n	802685c <__ieee754_powf+0x134>
 802682e:	2c00      	cmp	r4, #0
 8026830:	bfbc      	itt	lt
 8026832:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8026836:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 802683a:	2e00      	cmp	r6, #0
 802683c:	da8c      	bge.n	8026758 <__ieee754_powf+0x30>
 802683e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8026842:	ea55 0307 	orrs.w	r3, r5, r7
 8026846:	d104      	bne.n	8026852 <__ieee754_powf+0x12a>
 8026848:	ee70 7a40 	vsub.f32	s15, s0, s0
 802684c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026850:	e782      	b.n	8026758 <__ieee754_powf+0x30>
 8026852:	2f01      	cmp	r7, #1
 8026854:	d180      	bne.n	8026758 <__ieee754_powf+0x30>
 8026856:	eeb1 0a40 	vneg.f32	s0, s0
 802685a:	e77d      	b.n	8026758 <__ieee754_powf+0x30>
 802685c:	0ff0      	lsrs	r0, r6, #31
 802685e:	3801      	subs	r0, #1
 8026860:	ea57 0300 	orrs.w	r3, r7, r0
 8026864:	d104      	bne.n	8026870 <__ieee754_powf+0x148>
 8026866:	ee38 8a48 	vsub.f32	s16, s16, s16
 802686a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 802686e:	e773      	b.n	8026758 <__ieee754_powf+0x30>
 8026870:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8026874:	dd74      	ble.n	8026960 <__ieee754_powf+0x238>
 8026876:	4b9c      	ldr	r3, [pc, #624]	; (8026ae8 <__ieee754_powf+0x3c0>)
 8026878:	429d      	cmp	r5, r3
 802687a:	dc08      	bgt.n	802688e <__ieee754_powf+0x166>
 802687c:	2c00      	cmp	r4, #0
 802687e:	da0b      	bge.n	8026898 <__ieee754_powf+0x170>
 8026880:	2000      	movs	r0, #0
 8026882:	ecbd 8b02 	vpop	{d8}
 8026886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802688a:	f000 ba3b 	b.w	8026d04 <__math_oflowf>
 802688e:	4b97      	ldr	r3, [pc, #604]	; (8026aec <__ieee754_powf+0x3c4>)
 8026890:	429d      	cmp	r5, r3
 8026892:	dd08      	ble.n	80268a6 <__ieee754_powf+0x17e>
 8026894:	2c00      	cmp	r4, #0
 8026896:	dcf3      	bgt.n	8026880 <__ieee754_powf+0x158>
 8026898:	2000      	movs	r0, #0
 802689a:	ecbd 8b02 	vpop	{d8}
 802689e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80268a2:	f000 ba29 	b.w	8026cf8 <__math_uflowf>
 80268a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80268aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80268ae:	eddf 6a90 	vldr	s13, [pc, #576]	; 8026af0 <__ieee754_powf+0x3c8>
 80268b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80268b6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80268ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80268be:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80268c2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80268c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80268ca:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8026af4 <__ieee754_powf+0x3cc>
 80268ce:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80268d2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8026af8 <__ieee754_powf+0x3d0>
 80268d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80268da:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8026afc <__ieee754_powf+0x3d4>
 80268de:	eef0 6a67 	vmov.f32	s13, s15
 80268e2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80268e6:	ee16 3a90 	vmov	r3, s13
 80268ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80268ee:	f023 030f 	bic.w	r3, r3, #15
 80268f2:	ee00 3a90 	vmov	s1, r3
 80268f6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80268fa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80268fe:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8026902:	f024 040f 	bic.w	r4, r4, #15
 8026906:	ee07 4a10 	vmov	s14, r4
 802690a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 802690e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8026912:	ee07 3a90 	vmov	s15, r3
 8026916:	eee7 0a27 	vfma.f32	s1, s14, s15
 802691a:	3f01      	subs	r7, #1
 802691c:	ea57 0200 	orrs.w	r2, r7, r0
 8026920:	ee07 4a10 	vmov	s14, r4
 8026924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8026928:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 802692c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8026930:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8026934:	ee17 4a10 	vmov	r4, s14
 8026938:	bf08      	it	eq
 802693a:	eeb0 8a40 	vmoveq.f32	s16, s0
 802693e:	2c00      	cmp	r4, #0
 8026940:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8026944:	f340 817e 	ble.w	8026c44 <__ieee754_powf+0x51c>
 8026948:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 802694c:	f340 80f8 	ble.w	8026b40 <__ieee754_powf+0x418>
 8026950:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026958:	bf4c      	ite	mi
 802695a:	2001      	movmi	r0, #1
 802695c:	2000      	movpl	r0, #0
 802695e:	e790      	b.n	8026882 <__ieee754_powf+0x15a>
 8026960:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8026964:	bf01      	itttt	eq
 8026966:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8026b00 <__ieee754_powf+0x3d8>
 802696a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 802696e:	f06f 0217 	mvneq.w	r2, #23
 8026972:	ee17 5a90 	vmoveq	r5, s15
 8026976:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802697a:	bf18      	it	ne
 802697c:	2200      	movne	r2, #0
 802697e:	3b7f      	subs	r3, #127	; 0x7f
 8026980:	4413      	add	r3, r2
 8026982:	4a60      	ldr	r2, [pc, #384]	; (8026b04 <__ieee754_powf+0x3dc>)
 8026984:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8026988:	4295      	cmp	r5, r2
 802698a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 802698e:	dd06      	ble.n	802699e <__ieee754_powf+0x276>
 8026990:	4a5d      	ldr	r2, [pc, #372]	; (8026b08 <__ieee754_powf+0x3e0>)
 8026992:	4295      	cmp	r5, r2
 8026994:	f340 80a4 	ble.w	8026ae0 <__ieee754_powf+0x3b8>
 8026998:	3301      	adds	r3, #1
 802699a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 802699e:	2500      	movs	r5, #0
 80269a0:	4a5a      	ldr	r2, [pc, #360]	; (8026b0c <__ieee754_powf+0x3e4>)
 80269a2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80269a6:	ee07 1a90 	vmov	s15, r1
 80269aa:	ed92 7a00 	vldr	s14, [r2]
 80269ae:	4a58      	ldr	r2, [pc, #352]	; (8026b10 <__ieee754_powf+0x3e8>)
 80269b0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80269b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80269b8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80269bc:	1049      	asrs	r1, r1, #1
 80269be:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80269c2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80269c6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80269ca:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80269ce:	ee06 1a10 	vmov	s12, r1
 80269d2:	ee65 4a26 	vmul.f32	s9, s10, s13
 80269d6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80269da:	ee14 6a90 	vmov	r6, s9
 80269de:	4016      	ands	r6, r2
 80269e0:	ee05 6a90 	vmov	s11, r6
 80269e4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80269e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80269ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8026b14 <__ieee754_powf+0x3ec>
 80269f0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80269f4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80269f8:	ee25 6a26 	vmul.f32	s12, s10, s13
 80269fc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8026b18 <__ieee754_powf+0x3f0>
 8026a00:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8026a04:	eddf 6a45 	vldr	s13, [pc, #276]	; 8026b1c <__ieee754_powf+0x3f4>
 8026a08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026a0c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8026af0 <__ieee754_powf+0x3c8>
 8026a10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8026a14:	eddf 6a42 	vldr	s13, [pc, #264]	; 8026b20 <__ieee754_powf+0x3f8>
 8026a18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8026a1c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8026b24 <__ieee754_powf+0x3fc>
 8026a20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8026a24:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8026a28:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8026a2c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8026a30:	eee5 6a07 	vfma.f32	s13, s10, s14
 8026a34:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8026a38:	eef0 7a45 	vmov.f32	s15, s10
 8026a3c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8026a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026a44:	ee17 1a90 	vmov	r1, s15
 8026a48:	4011      	ands	r1, r2
 8026a4a:	ee07 1a90 	vmov	s15, r1
 8026a4e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8026a52:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8026a56:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8026a5a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8026a5e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026a62:	eeb0 6a47 	vmov.f32	s12, s14
 8026a66:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8026a6a:	ee16 1a10 	vmov	r1, s12
 8026a6e:	4011      	ands	r1, r2
 8026a70:	ee06 1a90 	vmov	s13, r1
 8026a74:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8026a78:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026b28 <__ieee754_powf+0x400>
 8026a7c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8026b2c <__ieee754_powf+0x404>
 8026a80:	ee37 7a66 	vsub.f32	s14, s14, s13
 8026a84:	ee06 1a10 	vmov	s12, r1
 8026a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026a8c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8026b30 <__ieee754_powf+0x408>
 8026a90:	4928      	ldr	r1, [pc, #160]	; (8026b34 <__ieee754_powf+0x40c>)
 8026a92:	eea6 7a27 	vfma.f32	s14, s12, s15
 8026a96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8026a9a:	edd1 7a00 	vldr	s15, [r1]
 8026a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026aa2:	ee07 3a90 	vmov	s15, r3
 8026aa6:	4b24      	ldr	r3, [pc, #144]	; (8026b38 <__ieee754_powf+0x410>)
 8026aa8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8026aac:	eef0 7a47 	vmov.f32	s15, s14
 8026ab0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8026ab4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8026ab8:	edd5 0a00 	vldr	s1, [r5]
 8026abc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8026ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026ac4:	ee17 3a90 	vmov	r3, s15
 8026ac8:	4013      	ands	r3, r2
 8026aca:	ee07 3a90 	vmov	s15, r3
 8026ace:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8026ad2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8026ad6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8026ada:	ee77 7a66 	vsub.f32	s15, s14, s13
 8026ade:	e70e      	b.n	80268fe <__ieee754_powf+0x1d6>
 8026ae0:	2501      	movs	r5, #1
 8026ae2:	e75d      	b.n	80269a0 <__ieee754_powf+0x278>
 8026ae4:	00000000 	.word	0x00000000
 8026ae8:	3f7ffff3 	.word	0x3f7ffff3
 8026aec:	3f800007 	.word	0x3f800007
 8026af0:	3eaaaaab 	.word	0x3eaaaaab
 8026af4:	3fb8aa3b 	.word	0x3fb8aa3b
 8026af8:	36eca570 	.word	0x36eca570
 8026afc:	3fb8aa00 	.word	0x3fb8aa00
 8026b00:	4b800000 	.word	0x4b800000
 8026b04:	001cc471 	.word	0x001cc471
 8026b08:	005db3d6 	.word	0x005db3d6
 8026b0c:	080024c8 	.word	0x080024c8
 8026b10:	fffff000 	.word	0xfffff000
 8026b14:	3e6c3255 	.word	0x3e6c3255
 8026b18:	3e53f142 	.word	0x3e53f142
 8026b1c:	3e8ba305 	.word	0x3e8ba305
 8026b20:	3edb6db7 	.word	0x3edb6db7
 8026b24:	3f19999a 	.word	0x3f19999a
 8026b28:	3f76384f 	.word	0x3f76384f
 8026b2c:	3f763800 	.word	0x3f763800
 8026b30:	369dc3a0 	.word	0x369dc3a0
 8026b34:	080024d8 	.word	0x080024d8
 8026b38:	080024d0 	.word	0x080024d0
 8026b3c:	3338aa3c 	.word	0x3338aa3c
 8026b40:	f040 8095 	bne.w	8026c6e <__ieee754_powf+0x546>
 8026b44:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8026b3c <__ieee754_powf+0x414>
 8026b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026b4c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8026b50:	eef4 6ac7 	vcmpe.f32	s13, s14
 8026b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b58:	f73f aefa 	bgt.w	8026950 <__ieee754_powf+0x228>
 8026b5c:	15db      	asrs	r3, r3, #23
 8026b5e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8026b62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8026b66:	4103      	asrs	r3, r0
 8026b68:	4423      	add	r3, r4
 8026b6a:	494b      	ldr	r1, [pc, #300]	; (8026c98 <__ieee754_powf+0x570>)
 8026b6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026b70:	3a7f      	subs	r2, #127	; 0x7f
 8026b72:	4111      	asrs	r1, r2
 8026b74:	ea23 0101 	bic.w	r1, r3, r1
 8026b78:	ee07 1a10 	vmov	s14, r1
 8026b7c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8026b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8026b84:	f1c2 0217 	rsb	r2, r2, #23
 8026b88:	4110      	asrs	r0, r2
 8026b8a:	2c00      	cmp	r4, #0
 8026b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8026b90:	bfb8      	it	lt
 8026b92:	4240      	neglt	r0, r0
 8026b94:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8026b98:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8026c9c <__ieee754_powf+0x574>
 8026b9c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8026ca0 <__ieee754_powf+0x578>
 8026ba0:	ee17 3a10 	vmov	r3, s14
 8026ba4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8026ba8:	f023 030f 	bic.w	r3, r3, #15
 8026bac:	ee07 3a10 	vmov	s14, r3
 8026bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026bb4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8026bb8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8026bbc:	eddf 7a39 	vldr	s15, [pc, #228]	; 8026ca4 <__ieee754_powf+0x57c>
 8026bc0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8026bc4:	eef0 7a40 	vmov.f32	s15, s0
 8026bc8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8026bcc:	eeb0 6a67 	vmov.f32	s12, s15
 8026bd0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8026bd4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8026bd8:	ee30 0a46 	vsub.f32	s0, s0, s12
 8026bdc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8026ca8 <__ieee754_powf+0x580>
 8026be0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8026cac <__ieee754_powf+0x584>
 8026be4:	eee7 6a06 	vfma.f32	s13, s14, s12
 8026be8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8026cb0 <__ieee754_powf+0x588>
 8026bec:	eea6 6a87 	vfma.f32	s12, s13, s14
 8026bf0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8026cb4 <__ieee754_powf+0x58c>
 8026bf4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8026bf8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8026cb8 <__ieee754_powf+0x590>
 8026bfc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8026c00:	eef0 6a67 	vmov.f32	s13, s15
 8026c04:	eee6 6a47 	vfms.f32	s13, s12, s14
 8026c08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8026c0c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8026c10:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8026c14:	eea7 0a80 	vfma.f32	s0, s15, s0
 8026c18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8026c1c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8026c20:	ee70 7a67 	vsub.f32	s15, s0, s15
 8026c24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026c28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8026c2c:	ee10 3a10 	vmov	r3, s0
 8026c30:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8026c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8026c38:	da1f      	bge.n	8026c7a <__ieee754_powf+0x552>
 8026c3a:	f000 f87d 	bl	8026d38 <scalbnf>
 8026c3e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8026c42:	e589      	b.n	8026758 <__ieee754_powf+0x30>
 8026c44:	4a1d      	ldr	r2, [pc, #116]	; (8026cbc <__ieee754_powf+0x594>)
 8026c46:	4293      	cmp	r3, r2
 8026c48:	dd07      	ble.n	8026c5a <__ieee754_powf+0x532>
 8026c4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c52:	bf4c      	ite	mi
 8026c54:	2001      	movmi	r0, #1
 8026c56:	2000      	movpl	r0, #0
 8026c58:	e61f      	b.n	802689a <__ieee754_powf+0x172>
 8026c5a:	d108      	bne.n	8026c6e <__ieee754_powf+0x546>
 8026c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026c60:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8026c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c68:	f6ff af78 	blt.w	8026b5c <__ieee754_powf+0x434>
 8026c6c:	e7ed      	b.n	8026c4a <__ieee754_powf+0x522>
 8026c6e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8026c72:	f73f af73 	bgt.w	8026b5c <__ieee754_powf+0x434>
 8026c76:	2000      	movs	r0, #0
 8026c78:	e78c      	b.n	8026b94 <__ieee754_powf+0x46c>
 8026c7a:	ee00 3a10 	vmov	s0, r3
 8026c7e:	e7de      	b.n	8026c3e <__ieee754_powf+0x516>
 8026c80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8026c84:	e568      	b.n	8026758 <__ieee754_powf+0x30>
 8026c86:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8026cc0 <__ieee754_powf+0x598>
 8026c8a:	e565      	b.n	8026758 <__ieee754_powf+0x30>
 8026c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8026c90:	e562      	b.n	8026758 <__ieee754_powf+0x30>
 8026c92:	2700      	movs	r7, #0
 8026c94:	e58d      	b.n	80267b2 <__ieee754_powf+0x8a>
 8026c96:	bf00      	nop
 8026c98:	007fffff 	.word	0x007fffff
 8026c9c:	35bfbe8c 	.word	0x35bfbe8c
 8026ca0:	3f317200 	.word	0x3f317200
 8026ca4:	3f317218 	.word	0x3f317218
 8026ca8:	b5ddea0e 	.word	0xb5ddea0e
 8026cac:	3331bb4c 	.word	0x3331bb4c
 8026cb0:	388ab355 	.word	0x388ab355
 8026cb4:	bb360b61 	.word	0xbb360b61
 8026cb8:	3e2aaaab 	.word	0x3e2aaaab
 8026cbc:	43160000 	.word	0x43160000
 8026cc0:	00000000 	.word	0x00000000

08026cc4 <__ieee754_sqrtf>:
 8026cc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8026cc8:	4770      	bx	lr

08026cca <with_errnof>:
 8026cca:	b513      	push	{r0, r1, r4, lr}
 8026ccc:	4604      	mov	r4, r0
 8026cce:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026cd2:	f7ff fb83 	bl	80263dc <__errno>
 8026cd6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8026cda:	6004      	str	r4, [r0, #0]
 8026cdc:	b002      	add	sp, #8
 8026cde:	bd10      	pop	{r4, pc}

08026ce0 <xflowf>:
 8026ce0:	b130      	cbz	r0, 8026cf0 <xflowf+0x10>
 8026ce2:	eef1 7a40 	vneg.f32	s15, s0
 8026ce6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026cea:	2022      	movs	r0, #34	; 0x22
 8026cec:	f7ff bfed 	b.w	8026cca <with_errnof>
 8026cf0:	eef0 7a40 	vmov.f32	s15, s0
 8026cf4:	e7f7      	b.n	8026ce6 <xflowf+0x6>
	...

08026cf8 <__math_uflowf>:
 8026cf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026d00 <__math_uflowf+0x8>
 8026cfc:	f7ff bff0 	b.w	8026ce0 <xflowf>
 8026d00:	10000000 	.word	0x10000000

08026d04 <__math_oflowf>:
 8026d04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8026d0c <__math_oflowf+0x8>
 8026d08:	f7ff bfea 	b.w	8026ce0 <xflowf>
 8026d0c:	70000000 	.word	0x70000000

08026d10 <fabsf>:
 8026d10:	ee10 3a10 	vmov	r3, s0
 8026d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026d18:	ee00 3a10 	vmov	s0, r3
 8026d1c:	4770      	bx	lr

08026d1e <finitef>:
 8026d1e:	b082      	sub	sp, #8
 8026d20:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026d24:	9801      	ldr	r0, [sp, #4]
 8026d26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026d2a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026d2e:	bfac      	ite	ge
 8026d30:	2000      	movge	r0, #0
 8026d32:	2001      	movlt	r0, #1
 8026d34:	b002      	add	sp, #8
 8026d36:	4770      	bx	lr

08026d38 <scalbnf>:
 8026d38:	ee10 3a10 	vmov	r3, s0
 8026d3c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8026d40:	d025      	beq.n	8026d8e <scalbnf+0x56>
 8026d42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8026d46:	d302      	bcc.n	8026d4e <scalbnf+0x16>
 8026d48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026d4c:	4770      	bx	lr
 8026d4e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8026d52:	d122      	bne.n	8026d9a <scalbnf+0x62>
 8026d54:	4b2a      	ldr	r3, [pc, #168]	; (8026e00 <scalbnf+0xc8>)
 8026d56:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8026e04 <scalbnf+0xcc>
 8026d5a:	4298      	cmp	r0, r3
 8026d5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026d60:	db16      	blt.n	8026d90 <scalbnf+0x58>
 8026d62:	ee10 3a10 	vmov	r3, s0
 8026d66:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8026d6a:	3a19      	subs	r2, #25
 8026d6c:	4402      	add	r2, r0
 8026d6e:	2afe      	cmp	r2, #254	; 0xfe
 8026d70:	dd15      	ble.n	8026d9e <scalbnf+0x66>
 8026d72:	ee10 3a10 	vmov	r3, s0
 8026d76:	eddf 7a24 	vldr	s15, [pc, #144]	; 8026e08 <scalbnf+0xd0>
 8026d7a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8026e0c <scalbnf+0xd4>
 8026d7e:	2b00      	cmp	r3, #0
 8026d80:	eeb0 7a67 	vmov.f32	s14, s15
 8026d84:	bfb8      	it	lt
 8026d86:	eef0 7a66 	vmovlt.f32	s15, s13
 8026d8a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8026d8e:	4770      	bx	lr
 8026d90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026e10 <scalbnf+0xd8>
 8026d94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8026d98:	4770      	bx	lr
 8026d9a:	0dd2      	lsrs	r2, r2, #23
 8026d9c:	e7e6      	b.n	8026d6c <scalbnf+0x34>
 8026d9e:	2a00      	cmp	r2, #0
 8026da0:	dd06      	ble.n	8026db0 <scalbnf+0x78>
 8026da2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026da6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026daa:	ee00 3a10 	vmov	s0, r3
 8026dae:	4770      	bx	lr
 8026db0:	f112 0f16 	cmn.w	r2, #22
 8026db4:	da1a      	bge.n	8026dec <scalbnf+0xb4>
 8026db6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026dba:	4298      	cmp	r0, r3
 8026dbc:	ee10 3a10 	vmov	r3, s0
 8026dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8026dc4:	dd0a      	ble.n	8026ddc <scalbnf+0xa4>
 8026dc6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8026e08 <scalbnf+0xd0>
 8026dca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8026e0c <scalbnf+0xd4>
 8026dce:	eef0 7a40 	vmov.f32	s15, s0
 8026dd2:	2b00      	cmp	r3, #0
 8026dd4:	bf18      	it	ne
 8026dd6:	eeb0 0a47 	vmovne.f32	s0, s14
 8026dda:	e7db      	b.n	8026d94 <scalbnf+0x5c>
 8026ddc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8026e10 <scalbnf+0xd8>
 8026de0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8026e14 <scalbnf+0xdc>
 8026de4:	eef0 7a40 	vmov.f32	s15, s0
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	e7f3      	b.n	8026dd4 <scalbnf+0x9c>
 8026dec:	3219      	adds	r2, #25
 8026dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026df2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8026df6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8026e18 <scalbnf+0xe0>
 8026dfa:	ee07 3a10 	vmov	s14, r3
 8026dfe:	e7c4      	b.n	8026d8a <scalbnf+0x52>
 8026e00:	ffff3cb0 	.word	0xffff3cb0
 8026e04:	4c000000 	.word	0x4c000000
 8026e08:	7149f2ca 	.word	0x7149f2ca
 8026e0c:	f149f2ca 	.word	0xf149f2ca
 8026e10:	0da24260 	.word	0x0da24260
 8026e14:	8da24260 	.word	0x8da24260
 8026e18:	33000000 	.word	0x33000000

08026e1c <_init>:
 8026e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e1e:	bf00      	nop
 8026e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e22:	bc08      	pop	{r3}
 8026e24:	469e      	mov	lr, r3
 8026e26:	4770      	bx	lr

08026e28 <_fini>:
 8026e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e2a:	bf00      	nop
 8026e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e2e:	bc08      	pop	{r3}
 8026e30:	469e      	mov	lr, r3
 8026e32:	4770      	bx	lr
