
oscilliscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f38  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022f38  08022f38  00040760  2**0
                  CONTENTS
  4 .ARM          00000008  08022f38  08022f38  00032f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022f40  08022f40  00040760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022f40  08022f40  00032f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022f44  08022f44  00032f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  08022f48  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e00  20000760  080236a8  00040760  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20007560  080236a8  00047560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a96a  00000000  00000000  00040790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067c2  00000000  00000000  0007b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  000818c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  00083618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa5f  00000000  00000000  00085090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d75  00000000  00000000  000afaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b05  00000000  00000000  000d9864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001be369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007900  00000000  00000000  001be3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000760 	.word	0x20000760
 800c01c:	00000000 	.word	0x00000000
 800c020:	08022f20 	.word	0x08022f20

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000764 	.word	0x20000764
 800c03c:	08022f20 	.word	0x08022f20

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <__aeabi_uldivmod>:
 800c050:	b953      	cbnz	r3, 800c068 <__aeabi_uldivmod+0x18>
 800c052:	b94a      	cbnz	r2, 800c068 <__aeabi_uldivmod+0x18>
 800c054:	2900      	cmp	r1, #0
 800c056:	bf08      	it	eq
 800c058:	2800      	cmpeq	r0, #0
 800c05a:	bf1c      	itt	ne
 800c05c:	f04f 31ff 	movne.w	r1, #4294967295
 800c060:	f04f 30ff 	movne.w	r0, #4294967295
 800c064:	f000 b96e 	b.w	800c344 <__aeabi_idiv0>
 800c068:	f1ad 0c08 	sub.w	ip, sp, #8
 800c06c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c070:	f000 f806 	bl	800c080 <__udivmoddi4>
 800c074:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c07c:	b004      	add	sp, #16
 800c07e:	4770      	bx	lr

0800c080 <__udivmoddi4>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	9d08      	ldr	r5, [sp, #32]
 800c086:	4604      	mov	r4, r0
 800c088:	468c      	mov	ip, r1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8083 	bne.w	800c196 <__udivmoddi4+0x116>
 800c090:	428a      	cmp	r2, r1
 800c092:	4617      	mov	r7, r2
 800c094:	d947      	bls.n	800c126 <__udivmoddi4+0xa6>
 800c096:	fab2 f282 	clz	r2, r2
 800c09a:	b142      	cbz	r2, 800c0ae <__udivmoddi4+0x2e>
 800c09c:	f1c2 0020 	rsb	r0, r2, #32
 800c0a0:	fa24 f000 	lsr.w	r0, r4, r0
 800c0a4:	4091      	lsls	r1, r2
 800c0a6:	4097      	lsls	r7, r2
 800c0a8:	ea40 0c01 	orr.w	ip, r0, r1
 800c0ac:	4094      	lsls	r4, r2
 800c0ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c0b2:	0c23      	lsrs	r3, r4, #16
 800c0b4:	fbbc f6f8 	udiv	r6, ip, r8
 800c0b8:	fa1f fe87 	uxth.w	lr, r7
 800c0bc:	fb08 c116 	mls	r1, r8, r6, ip
 800c0c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c0c4:	fb06 f10e 	mul.w	r1, r6, lr
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	d909      	bls.n	800c0e0 <__udivmoddi4+0x60>
 800c0cc:	18fb      	adds	r3, r7, r3
 800c0ce:	f106 30ff 	add.w	r0, r6, #4294967295
 800c0d2:	f080 8119 	bcs.w	800c308 <__udivmoddi4+0x288>
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f240 8116 	bls.w	800c308 <__udivmoddi4+0x288>
 800c0dc:	3e02      	subs	r6, #2
 800c0de:	443b      	add	r3, r7
 800c0e0:	1a5b      	subs	r3, r3, r1
 800c0e2:	b2a4      	uxth	r4, r4
 800c0e4:	fbb3 f0f8 	udiv	r0, r3, r8
 800c0e8:	fb08 3310 	mls	r3, r8, r0, r3
 800c0ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c0f0:	fb00 fe0e 	mul.w	lr, r0, lr
 800c0f4:	45a6      	cmp	lr, r4
 800c0f6:	d909      	bls.n	800c10c <__udivmoddi4+0x8c>
 800c0f8:	193c      	adds	r4, r7, r4
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	f080 8105 	bcs.w	800c30c <__udivmoddi4+0x28c>
 800c102:	45a6      	cmp	lr, r4
 800c104:	f240 8102 	bls.w	800c30c <__udivmoddi4+0x28c>
 800c108:	3802      	subs	r0, #2
 800c10a:	443c      	add	r4, r7
 800c10c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c110:	eba4 040e 	sub.w	r4, r4, lr
 800c114:	2600      	movs	r6, #0
 800c116:	b11d      	cbz	r5, 800c120 <__udivmoddi4+0xa0>
 800c118:	40d4      	lsrs	r4, r2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9c5 4300 	strd	r4, r3, [r5]
 800c120:	4631      	mov	r1, r6
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	b902      	cbnz	r2, 800c12a <__udivmoddi4+0xaa>
 800c128:	deff      	udf	#255	; 0xff
 800c12a:	fab2 f282 	clz	r2, r2
 800c12e:	2a00      	cmp	r2, #0
 800c130:	d150      	bne.n	800c1d4 <__udivmoddi4+0x154>
 800c132:	1bcb      	subs	r3, r1, r7
 800c134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c138:	fa1f f887 	uxth.w	r8, r7
 800c13c:	2601      	movs	r6, #1
 800c13e:	fbb3 fcfe 	udiv	ip, r3, lr
 800c142:	0c21      	lsrs	r1, r4, #16
 800c144:	fb0e 331c 	mls	r3, lr, ip, r3
 800c148:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c14c:	fb08 f30c 	mul.w	r3, r8, ip
 800c150:	428b      	cmp	r3, r1
 800c152:	d907      	bls.n	800c164 <__udivmoddi4+0xe4>
 800c154:	1879      	adds	r1, r7, r1
 800c156:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c15a:	d202      	bcs.n	800c162 <__udivmoddi4+0xe2>
 800c15c:	428b      	cmp	r3, r1
 800c15e:	f200 80e9 	bhi.w	800c334 <__udivmoddi4+0x2b4>
 800c162:	4684      	mov	ip, r0
 800c164:	1ac9      	subs	r1, r1, r3
 800c166:	b2a3      	uxth	r3, r4
 800c168:	fbb1 f0fe 	udiv	r0, r1, lr
 800c16c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c170:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c174:	fb08 f800 	mul.w	r8, r8, r0
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d907      	bls.n	800c18c <__udivmoddi4+0x10c>
 800c17c:	193c      	adds	r4, r7, r4
 800c17e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c182:	d202      	bcs.n	800c18a <__udivmoddi4+0x10a>
 800c184:	45a0      	cmp	r8, r4
 800c186:	f200 80d9 	bhi.w	800c33c <__udivmoddi4+0x2bc>
 800c18a:	4618      	mov	r0, r3
 800c18c:	eba4 0408 	sub.w	r4, r4, r8
 800c190:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c194:	e7bf      	b.n	800c116 <__udivmoddi4+0x96>
 800c196:	428b      	cmp	r3, r1
 800c198:	d909      	bls.n	800c1ae <__udivmoddi4+0x12e>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	f000 80b1 	beq.w	800c302 <__udivmoddi4+0x282>
 800c1a0:	2600      	movs	r6, #0
 800c1a2:	e9c5 0100 	strd	r0, r1, [r5]
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	fab3 f683 	clz	r6, r3
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d14a      	bne.n	800c24c <__udivmoddi4+0x1cc>
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d302      	bcc.n	800c1c0 <__udivmoddi4+0x140>
 800c1ba:	4282      	cmp	r2, r0
 800c1bc:	f200 80b8 	bhi.w	800c330 <__udivmoddi4+0x2b0>
 800c1c0:	1a84      	subs	r4, r0, r2
 800c1c2:	eb61 0103 	sbc.w	r1, r1, r3
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	468c      	mov	ip, r1
 800c1ca:	2d00      	cmp	r5, #0
 800c1cc:	d0a8      	beq.n	800c120 <__udivmoddi4+0xa0>
 800c1ce:	e9c5 4c00 	strd	r4, ip, [r5]
 800c1d2:	e7a5      	b.n	800c120 <__udivmoddi4+0xa0>
 800c1d4:	f1c2 0320 	rsb	r3, r2, #32
 800c1d8:	fa20 f603 	lsr.w	r6, r0, r3
 800c1dc:	4097      	lsls	r7, r2
 800c1de:	fa01 f002 	lsl.w	r0, r1, r2
 800c1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1e6:	40d9      	lsrs	r1, r3
 800c1e8:	4330      	orrs	r0, r6
 800c1ea:	0c03      	lsrs	r3, r0, #16
 800c1ec:	fbb1 f6fe 	udiv	r6, r1, lr
 800c1f0:	fa1f f887 	uxth.w	r8, r7
 800c1f4:	fb0e 1116 	mls	r1, lr, r6, r1
 800c1f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c1fc:	fb06 f108 	mul.w	r1, r6, r8
 800c200:	4299      	cmp	r1, r3
 800c202:	fa04 f402 	lsl.w	r4, r4, r2
 800c206:	d909      	bls.n	800c21c <__udivmoddi4+0x19c>
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	f106 3cff 	add.w	ip, r6, #4294967295
 800c20e:	f080 808d 	bcs.w	800c32c <__udivmoddi4+0x2ac>
 800c212:	4299      	cmp	r1, r3
 800c214:	f240 808a 	bls.w	800c32c <__udivmoddi4+0x2ac>
 800c218:	3e02      	subs	r6, #2
 800c21a:	443b      	add	r3, r7
 800c21c:	1a5b      	subs	r3, r3, r1
 800c21e:	b281      	uxth	r1, r0
 800c220:	fbb3 f0fe 	udiv	r0, r3, lr
 800c224:	fb0e 3310 	mls	r3, lr, r0, r3
 800c228:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c22c:	fb00 f308 	mul.w	r3, r0, r8
 800c230:	428b      	cmp	r3, r1
 800c232:	d907      	bls.n	800c244 <__udivmoddi4+0x1c4>
 800c234:	1879      	adds	r1, r7, r1
 800c236:	f100 3cff 	add.w	ip, r0, #4294967295
 800c23a:	d273      	bcs.n	800c324 <__udivmoddi4+0x2a4>
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d971      	bls.n	800c324 <__udivmoddi4+0x2a4>
 800c240:	3802      	subs	r0, #2
 800c242:	4439      	add	r1, r7
 800c244:	1acb      	subs	r3, r1, r3
 800c246:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c24a:	e778      	b.n	800c13e <__udivmoddi4+0xbe>
 800c24c:	f1c6 0c20 	rsb	ip, r6, #32
 800c250:	fa03 f406 	lsl.w	r4, r3, r6
 800c254:	fa22 f30c 	lsr.w	r3, r2, ip
 800c258:	431c      	orrs	r4, r3
 800c25a:	fa20 f70c 	lsr.w	r7, r0, ip
 800c25e:	fa01 f306 	lsl.w	r3, r1, r6
 800c262:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c266:	fa21 f10c 	lsr.w	r1, r1, ip
 800c26a:	431f      	orrs	r7, r3
 800c26c:	0c3b      	lsrs	r3, r7, #16
 800c26e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c272:	fa1f f884 	uxth.w	r8, r4
 800c276:	fb0e 1119 	mls	r1, lr, r9, r1
 800c27a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c27e:	fb09 fa08 	mul.w	sl, r9, r8
 800c282:	458a      	cmp	sl, r1
 800c284:	fa02 f206 	lsl.w	r2, r2, r6
 800c288:	fa00 f306 	lsl.w	r3, r0, r6
 800c28c:	d908      	bls.n	800c2a0 <__udivmoddi4+0x220>
 800c28e:	1861      	adds	r1, r4, r1
 800c290:	f109 30ff 	add.w	r0, r9, #4294967295
 800c294:	d248      	bcs.n	800c328 <__udivmoddi4+0x2a8>
 800c296:	458a      	cmp	sl, r1
 800c298:	d946      	bls.n	800c328 <__udivmoddi4+0x2a8>
 800c29a:	f1a9 0902 	sub.w	r9, r9, #2
 800c29e:	4421      	add	r1, r4
 800c2a0:	eba1 010a 	sub.w	r1, r1, sl
 800c2a4:	b2bf      	uxth	r7, r7
 800c2a6:	fbb1 f0fe 	udiv	r0, r1, lr
 800c2aa:	fb0e 1110 	mls	r1, lr, r0, r1
 800c2ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c2b2:	fb00 f808 	mul.w	r8, r0, r8
 800c2b6:	45b8      	cmp	r8, r7
 800c2b8:	d907      	bls.n	800c2ca <__udivmoddi4+0x24a>
 800c2ba:	19e7      	adds	r7, r4, r7
 800c2bc:	f100 31ff 	add.w	r1, r0, #4294967295
 800c2c0:	d22e      	bcs.n	800c320 <__udivmoddi4+0x2a0>
 800c2c2:	45b8      	cmp	r8, r7
 800c2c4:	d92c      	bls.n	800c320 <__udivmoddi4+0x2a0>
 800c2c6:	3802      	subs	r0, #2
 800c2c8:	4427      	add	r7, r4
 800c2ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c2ce:	eba7 0708 	sub.w	r7, r7, r8
 800c2d2:	fba0 8902 	umull	r8, r9, r0, r2
 800c2d6:	454f      	cmp	r7, r9
 800c2d8:	46c6      	mov	lr, r8
 800c2da:	4649      	mov	r1, r9
 800c2dc:	d31a      	bcc.n	800c314 <__udivmoddi4+0x294>
 800c2de:	d017      	beq.n	800c310 <__udivmoddi4+0x290>
 800c2e0:	b15d      	cbz	r5, 800c2fa <__udivmoddi4+0x27a>
 800c2e2:	ebb3 020e 	subs.w	r2, r3, lr
 800c2e6:	eb67 0701 	sbc.w	r7, r7, r1
 800c2ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c2ee:	40f2      	lsrs	r2, r6
 800c2f0:	ea4c 0202 	orr.w	r2, ip, r2
 800c2f4:	40f7      	lsrs	r7, r6
 800c2f6:	e9c5 2700 	strd	r2, r7, [r5]
 800c2fa:	2600      	movs	r6, #0
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	462e      	mov	r6, r5
 800c304:	4628      	mov	r0, r5
 800c306:	e70b      	b.n	800c120 <__udivmoddi4+0xa0>
 800c308:	4606      	mov	r6, r0
 800c30a:	e6e9      	b.n	800c0e0 <__udivmoddi4+0x60>
 800c30c:	4618      	mov	r0, r3
 800c30e:	e6fd      	b.n	800c10c <__udivmoddi4+0x8c>
 800c310:	4543      	cmp	r3, r8
 800c312:	d2e5      	bcs.n	800c2e0 <__udivmoddi4+0x260>
 800c314:	ebb8 0e02 	subs.w	lr, r8, r2
 800c318:	eb69 0104 	sbc.w	r1, r9, r4
 800c31c:	3801      	subs	r0, #1
 800c31e:	e7df      	b.n	800c2e0 <__udivmoddi4+0x260>
 800c320:	4608      	mov	r0, r1
 800c322:	e7d2      	b.n	800c2ca <__udivmoddi4+0x24a>
 800c324:	4660      	mov	r0, ip
 800c326:	e78d      	b.n	800c244 <__udivmoddi4+0x1c4>
 800c328:	4681      	mov	r9, r0
 800c32a:	e7b9      	b.n	800c2a0 <__udivmoddi4+0x220>
 800c32c:	4666      	mov	r6, ip
 800c32e:	e775      	b.n	800c21c <__udivmoddi4+0x19c>
 800c330:	4630      	mov	r0, r6
 800c332:	e74a      	b.n	800c1ca <__udivmoddi4+0x14a>
 800c334:	f1ac 0c02 	sub.w	ip, ip, #2
 800c338:	4439      	add	r1, r7
 800c33a:	e713      	b.n	800c164 <__udivmoddi4+0xe4>
 800c33c:	3802      	subs	r0, #2
 800c33e:	443c      	add	r4, r7
 800c340:	e724      	b.n	800c18c <__udivmoddi4+0x10c>
 800c342:	bf00      	nop

0800c344 <__aeabi_idiv0>:
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop

0800c348 <BIOS_Info>:

/*******************************************************************************
 Info :  Ӳ���豸��Ϣ
*******************************************************************************/
unsigned BIOS_Info(char Item)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	71fb      	strb	r3, [r7, #7]
  switch (Item){
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <BIOS_Info+0x14>
    case CHA_CNT:
    	return /*(u16)DMA_CH_A->CNDTR*/0;
 800c358:	2300      	movs	r3, #0
 800c35a:	e000      	b.n	800c35e <BIOS_Info+0x16>
/*    case SIN_TAB: return (u32)SIN_DATA;
    case TRG_TAB: return (u32)TRG_DATA;
    case SAW_TAB: return (u32)SAW_DATA;    */
    default:
    	return 0;
 800c35c:	2300      	movs	r3, #0
  }
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <BIOS_Ctrl>:
/*******************************************************************************
 DevCtrl:  Ӳ���豸����
*******************************************************************************/
void BIOS_Ctrl(char Item, unsigned Val)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef         GPIO_InitStructure;

  switch (Item){
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b08      	cmp	r3, #8
 800c37c:	f200 8102 	bhi.w	800c584 <BIOS_Ctrl+0x218>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <BIOS_Ctrl+0x1c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c4b7 	.word	0x0800c4b7
 800c38c:	0800c4a7 	.word	0x0800c4a7
 800c390:	0800c585 	.word	0x0800c585
 800c394:	0800c585 	.word	0x0800c585
 800c398:	0800c3ad 	.word	0x0800c3ad
 800c39c:	0800c3ef 	.word	0x0800c3ef
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c437 	.word	0x0800c437
 800c3a8:	0800c499 	.word	0x0800c499
    case SMPL_ST: if(Val == DISABLE)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 80ea 	beq.w	800c588 <BIOS_Ctrl+0x21c>
    			  {
                    /*DMA1_Channel1->CCR &= (~ENABLE);*/
                  }
    			  else
    				  if(Val == ENABLE)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	f040 80e6 	bne.w	800c588 <BIOS_Ctrl+0x21c>
    				  {
                   /* DMA1_Channel1->CCR |= ENABLE; */
                    __HAL_ADC_ENABLE(&hadc1);  //ADC1->CR2 |= 0x00000001; //AD_ON
 800c3bc:	4b76      	ldr	r3, [pc, #472]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689a      	ldr	r2, [r3, #8]
 800c3c2:	4b75      	ldr	r3, [pc, #468]	; (800c598 <BIOS_Ctrl+0x22c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0201 	orr.w	r2, r2, #1
 800c3ca:	609a      	str	r2, [r3, #8]
                    __HAL_ADC_ENABLE(&hadc2);  //ADC2->CR2 |= 0x00000001; //AD_ON
 800c3cc:	4b73      	ldr	r3, [pc, #460]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	4b72      	ldr	r3, [pc, #456]	; (800c59c <BIOS_Ctrl+0x230>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f042 0201 	orr.w	r2, r2, #1
 800c3da:	609a      	str	r2, [r3, #8]
                    __HAL_TIM_ENABLE(&htim1);  /*TIM1->CR1 = 0x0081; */
 800c3dc:	4b70      	ldr	r3, [pc, #448]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b6f      	ldr	r3, [pc, #444]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f042 0201 	orr.w	r2, r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
                    if(Val == INTERLEAVE)
                    {
                      DMA1_Channel1->CCR = 0x3A80;
                    } */
                  }
    			  break;
 800c3ec:	e0cc      	b.n	800c588 <BIOS_Ctrl+0x21c>

    case SMPLTIM:
    			  octim1.Pulse = (Val+1)/2;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	4a6b      	ldr	r2, [pc, #428]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3f6:	6053      	str	r3, [r2, #4]
    			  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	496a      	ldr	r1, [pc, #424]	; (800c5a4 <BIOS_Ctrl+0x238>)
 800c3fc:	4868      	ldr	r0, [pc, #416]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c3fe:	f010 ffdd 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
    			  htim1.Init.Prescaler = 0;
 800c402:	4b67      	ldr	r3, [pc, #412]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]
    			  htim1.Init.Period = Val -1;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a64      	ldr	r2, [pc, #400]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c40e:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim1);
 800c410:	4863      	ldr	r0, [pc, #396]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c412:	f010 fe0b 	bl	801d02c <HAL_TIM_Base_Init>
                  break;
 800c416:	e0ba      	b.n	800c58e <BIOS_Ctrl+0x222>

    case SMPLNUM:
    			  __HAL_TIM_URS_DISABLE(&htim1);
 800c418:	4b61      	ldr	r3, [pc, #388]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	4b60      	ldr	r3, [pc, #384]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0204 	bic.w	r2, r2, #4
 800c426:	601a      	str	r2, [r3, #0]
    			  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c428:	4b5d      	ldr	r3, [pc, #372]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	609a      	str	r2, [r3, #8]
    			  HAL_TIM_Base_Init(&htim1);
 800c42e:	485c      	ldr	r0, [pc, #368]	; (800c5a0 <BIOS_Ctrl+0x234>)
 800c430:	f010 fdfc 	bl	801d02c <HAL_TIM_Base_Init>
                  /* DMA_CH_A->CNDTR = (u32)Val;    */
                  break;
 800c434:	e0ab      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AiRANGE: if(Val & DC)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	f003 0302 	and.w	r3, r3, #2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d005      	beq.n	800c44c <BIOS_Ctrl+0xe0>
    				  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_SET);  // AZ_HIGH;
 800c440:	2201      	movs	r2, #1
 800c442:	2110      	movs	r1, #16
 800c444:	4858      	ldr	r0, [pc, #352]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c446:	f00d fc55 	bl	8019cf4 <HAL_GPIO_WritePin>
 800c44a:	e004      	b.n	800c456 <BIOS_Ctrl+0xea>
                  else
                	  HAL_GPIO_WritePin(Az_GPIO_Port, Az_Pin,GPIO_PIN_RESET);  //AZ_LOW;   CH_A_AC
 800c44c:	2200      	movs	r2, #0
 800c44e:	2110      	movs	r1, #16
 800c450:	4855      	ldr	r0, [pc, #340]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c452:	f00d fc4f 	bl	8019cf4 <HAL_GPIO_WritePin>
                  if(Val & HV)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d005      	beq.n	800c46c <BIOS_Ctrl+0x100>
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_SET);  //AY_HIGH;  CH_A_HV
 800c460:	2201      	movs	r2, #1
 800c462:	2120      	movs	r1, #32
 800c464:	4850      	ldr	r0, [pc, #320]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c466:	f00d fc45 	bl	8019cf4 <HAL_GPIO_WritePin>
 800c46a:	e004      	b.n	800c476 <BIOS_Ctrl+0x10a>
                  else
                	  HAL_GPIO_WritePin(Ay_GPIO_Port, Ay_Pin,GPIO_PIN_RESET);  //AY_LOW;   CH_A_LV
 800c46c:	2200      	movs	r2, #0
 800c46e:	2120      	movs	r1, #32
 800c470:	484d      	ldr	r0, [pc, #308]	; (800c5a8 <BIOS_Ctrl+0x23c>)
 800c472:	f00d fc3f 	bl	8019cf4 <HAL_GPIO_WritePin>
                  if(Val & ACT)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <BIOS_Ctrl+0x120>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_SET);  //AX_HIGH;  CH_A_ACT
 800c480:	2201      	movs	r2, #1
 800c482:	2101      	movs	r1, #1
 800c484:	4849      	ldr	r0, [pc, #292]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c486:	f00d fc35 	bl	8019cf4 <HAL_GPIO_WritePin>
                  else
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
                  break;
 800c48a:	e080      	b.n	800c58e <BIOS_Ctrl+0x222>
                	  HAL_GPIO_WritePin(Ax_GPIO_Port, Ax_Pin,GPIO_PIN_RESET);  //AX_LOW;   CH_A_GND
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	4846      	ldr	r0, [pc, #280]	; (800c5ac <BIOS_Ctrl+0x240>)
 800c492:	f00d fc2f 	bl	8019cf4 <HAL_GPIO_WritePin>
                  break;
 800c496:	e07a      	b.n	800c58e <BIOS_Ctrl+0x222>

    case AOFFSET: HAL_DAC_SetValue( &hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Val);  /*DAC->DHR12R2  = (u16)Val; */
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2200      	movs	r2, #0
 800c49c:	2110      	movs	r1, #16
 800c49e:	4844      	ldr	r0, [pc, #272]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4a0:	f00c fb37 	bl	8018b12 <HAL_DAC_SetValue>
                  break;
 800c4a4:	e073      	b.n	800c58e <BIOS_Ctrl+0x222>

    case DAC_TIM:
    			  htim7.Init.Period = Val-1;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	4a42      	ldr	r2, [pc, #264]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4ac:	60d3      	str	r3, [r2, #12]
    			  HAL_TIM_Base_Init(&htim7);
 800c4ae:	4841      	ldr	r0, [pc, #260]	; (800c5b4 <BIOS_Ctrl+0x248>)
 800c4b0:	f010 fdbc 	bl	801d02c <HAL_TIM_Base_Init>
    			  break;
 800c4b4:	e06b      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;

    case OUT_CNT: /*OUT_DMA->CNDTR = (u16)Val; */    break;

    case OUT_MOD:
      GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	d009      	beq.n	800c4d4 <BIOS_Ctrl+0x168>
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d862      	bhi.n	800c58c <BIOS_Ctrl+0x220>
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d03d      	beq.n	800c548 <BIOS_Ctrl+0x1dc>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d01d      	beq.n	800c50e <BIOS_Ctrl+0x1a2>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
                                  break;
                  }
                  break;
 800c4d2:	e05b      	b.n	800c58c <BIOS_Ctrl+0x220>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c4d4:	4b36      	ldr	r3, [pc, #216]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b35      	ldr	r3, [pc, #212]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0201 	bic.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin;
 800c4e4:	2304      	movs	r3, #4
 800c4e6:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4831      	ldr	r0, [pc, #196]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c4f4:	f00d f976 	bl	80197e4 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	4619      	mov	r1, r3
 800c506:	482c      	ldr	r0, [pc, #176]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c508:	f00d f96c 	bl	80197e4 <HAL_GPIO_Init>
                                  break;
 800c50c:	e039      	b.n	800c582 <BIOS_Ctrl+0x216>
                    			  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c50e:	2304      	movs	r3, #4
 800c510:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	4619      	mov	r1, r3
 800c51c:	4826      	ldr	r0, [pc, #152]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c51e:	f00d f961 	bl	80197e4 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c522:	2310      	movs	r3, #16
 800c524:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_ANALOG;
 800c526:	2303      	movs	r3, #3
 800c528:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c52a:	f107 030c 	add.w	r3, r7, #12
 800c52e:	4619      	mov	r1, r3
 800c530:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c532:	f00d f957 	bl	80197e4 <HAL_GPIO_Init>
                                  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 800c536:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	601a      	str	r2, [r3, #0]
                                  break;
 800c546:	e01c      	b.n	800c582 <BIOS_Ctrl+0x216>
                    		      __HAL_DAC_DISABLE(&hdac, DAC_CHANNEL_1);
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <BIOS_Ctrl+0x244>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]
                                  GPIO_InitStructure.Pin   = Fo2_Pin ;
 800c558:	2304      	movs	r3, #4
 800c55a:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800c55c:	2302      	movs	r3, #2
 800c55e:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStructure);
 800c560:	f107 030c 	add.w	r3, r7, #12
 800c564:	4619      	mov	r1, r3
 800c566:	4814      	ldr	r0, [pc, #80]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c568:	f00d f93c 	bl	80197e4 <HAL_GPIO_Init>
                                  GPIO_InitStructure.Pin   = Fo4_Pin ;
 800c56c:	2310      	movs	r3, #16
 800c56e:	60fb      	str	r3, [r7, #12]
                                  GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 800c570:	2300      	movs	r3, #0
 800c572:	613b      	str	r3, [r7, #16]
                                  HAL_GPIO_Init(Fo4_GPIO_Port, &GPIO_InitStructure);
 800c574:	f107 030c 	add.w	r3, r7, #12
 800c578:	4619      	mov	r1, r3
 800c57a:	480f      	ldr	r0, [pc, #60]	; (800c5b8 <BIOS_Ctrl+0x24c>)
 800c57c:	f00d f932 	bl	80197e4 <HAL_GPIO_Init>
                                  break;
 800c580:	bf00      	nop
                  break;
 800c582:	e003      	b.n	800c58c <BIOS_Ctrl+0x220>

    default: break;
 800c584:	bf00      	nop
 800c586:	e002      	b.n	800c58e <BIOS_Ctrl+0x222>
    			  break;
 800c588:	bf00      	nop
 800c58a:	e000      	b.n	800c58e <BIOS_Ctrl+0x222>
                  break;
 800c58c:	bf00      	nop
  }
}
 800c58e:	bf00      	nop
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20006ad0 	.word	0x20006ad0
 800c59c:	200068e0 	.word	0x200068e0
 800c5a0:	20006bc4 	.word	0x20006bc4
 800c5a4:	20006ba8 	.word	0x20006ba8
 800c5a8:	40020800 	.word	0x40020800
 800c5ac:	40020400 	.word	0x40020400
 800c5b0:	20006b34 	.word	0x20006b34
 800c5b4:	20006c0c 	.word	0x20006c0c
 800c5b8:	40020000 	.word	0x40020000

0800c5bc <Set_Base>:

/*******************************************************************************
 Set_Base: ˮƽɨ��ʱ��ת������
*******************************************************************************/
void Set_Base(short Base)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	80fb      	strh	r3, [r7, #6]
	octim1.Pulse = (ARR[Base]+1)/2;
 800c5c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ca:	4a13      	ldr	r2, [pc, #76]	; (800c618 <Set_Base+0x5c>)
 800c5cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	0fda      	lsrs	r2, r3, #31
 800c5d4:	4413      	add	r3, r2
 800c5d6:	105b      	asrs	r3, r3, #1
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b10      	ldr	r3, [pc, #64]	; (800c61c <Set_Base+0x60>)
 800c5dc:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 800c5de:	2201      	movs	r2, #1
 800c5e0:	490e      	ldr	r1, [pc, #56]	; (800c61c <Set_Base+0x60>)
 800c5e2:	480f      	ldr	r0, [pc, #60]	; (800c620 <Set_Base+0x64>)
 800c5e4:	f010 feea 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
	htim1.Init.Prescaler = PSC[Base];
 800c5e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <Set_Base+0x68>)
 800c5ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <Set_Base+0x64>)
 800c5f6:	605a      	str	r2, [r3, #4]
	htim1.Init.Period = ARR[Base];
 800c5f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5fc:	4a06      	ldr	r2, [pc, #24]	; (800c618 <Set_Base+0x5c>)
 800c5fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c602:	461a      	mov	r2, r3
 800c604:	4b06      	ldr	r3, [pc, #24]	; (800c620 <Set_Base+0x64>)
 800c606:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim1);
 800c608:	4805      	ldr	r0, [pc, #20]	; (800c620 <Set_Base+0x64>)
 800c60a:	f010 fd0f 	bl	801d02c <HAL_TIM_Base_Init>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	08000b30 	.word	0x08000b30
 800c61c:	20006ba8 	.word	0x20006ba8
 800c620:	20006bc4 	.word	0x20006bc4
 800c624:	08000b08 	.word	0x08000b08

0800c628 <Set_Duty>:

/*******************************************************************************
 Set_Duty: �������ռ�ձ�����
*******************************************************************************/
void Set_Duty(void)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	af00      	add	r7, sp, #0
	 octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)*(10-List[FREQ_DUT].Val)/10;
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <Set_Duty+0x44>)
 800c62e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 800c632:	461a      	mov	r2, r3
 800c634:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <Set_Duty+0x48>)
 800c636:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c63a:	3301      	adds	r3, #1
 800c63c:	4a0b      	ldr	r2, [pc, #44]	; (800c66c <Set_Duty+0x44>)
 800c63e:	f9b2 2134 	ldrsh.w	r2, [r2, #308]	; 0x134
 800c642:	f1c2 020a 	rsb	r2, r2, #10
 800c646:	fb02 f303 	mul.w	r3, r2, r3
 800c64a:	4a0a      	ldr	r2, [pc, #40]	; (800c674 <Set_Duty+0x4c>)
 800c64c:	fb82 1203 	smull	r1, r2, r2, r3
 800c650:	1092      	asrs	r2, r2, #2
 800c652:	17db      	asrs	r3, r3, #31
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	461a      	mov	r2, r3
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <Set_Duty+0x50>)
 800c65a:	605a      	str	r2, [r3, #4]
	 HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c65c:	2203      	movs	r2, #3
 800c65e:	4906      	ldr	r1, [pc, #24]	; (800c678 <Set_Duty+0x50>)
 800c660:	4806      	ldr	r0, [pc, #24]	; (800c67c <Set_Duty+0x54>)
 800c662:	f010 feab 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
}
 800c666:	bf00      	nop
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	20000298 	.word	0x20000298
 800c670:	08000ae8 	.word	0x08000ae8
 800c674:	66666667 	.word	0x66666667
 800c678:	20006b18 	.word	0x20006b18
 800c67c:	20006988 	.word	0x20006988

0800c680 <Set_Fout>:

/*******************************************************************************
 Set_Fout: �������Ƶ������
*******************************************************************************/
void Set_Fout(short Range)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	80fb      	strh	r3, [r7, #6]
	octim5.Pulse = (FARR[Range]+1)/2;
 800c68a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c68e:	4a13      	ldr	r2, [pc, #76]	; (800c6dc <Set_Fout+0x5c>)
 800c690:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c694:	3301      	adds	r3, #1
 800c696:	0fda      	lsrs	r2, r3, #31
 800c698:	4413      	add	r3, r2
 800c69a:	105b      	asrs	r3, r3, #1
 800c69c:	461a      	mov	r2, r3
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <Set_Fout+0x60>)
 800c6a0:	605a      	str	r2, [r3, #4]
	HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	490e      	ldr	r1, [pc, #56]	; (800c6e0 <Set_Fout+0x60>)
 800c6a6:	480f      	ldr	r0, [pc, #60]	; (800c6e4 <Set_Fout+0x64>)
 800c6a8:	f010 fe88 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
	htim5.Init.Prescaler = FPSC[Range];
 800c6ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6b0:	4a0d      	ldr	r2, [pc, #52]	; (800c6e8 <Set_Fout+0x68>)
 800c6b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	4b0a      	ldr	r3, [pc, #40]	; (800c6e4 <Set_Fout+0x64>)
 800c6ba:	605a      	str	r2, [r3, #4]
	htim5.Init.Period = FARR[Range];
 800c6bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c6c0:	4a06      	ldr	r2, [pc, #24]	; (800c6dc <Set_Fout+0x5c>)
 800c6c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <Set_Fout+0x64>)
 800c6ca:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim5);
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <Set_Fout+0x64>)
 800c6ce:	f010 fcad 	bl	801d02c <HAL_TIM_Base_Init>
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	08000ae8 	.word	0x08000ae8
 800c6e0:	20006b18 	.word	0x20006b18
 800c6e4:	20006988 	.word	0x20006988
 800c6e8:	08000ac8 	.word	0x08000ac8

0800c6ec <ADC_Start>:

/*******************************************************************************
 ADC_Start: ���¿�ʼADCɨ�����
*******************************************************************************/
void ADC_Start(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
  Sampl[0]   = List[TIM_BASE].Val;         // �������ʱ����λֵ
 800c6f0:	4b17      	ldr	r3, [pc, #92]	; (800c750 <ADC_Start+0x64>)
 800c6f2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800c6f6:	4b17      	ldr	r3, [pc, #92]	; (800c754 <ADC_Start+0x68>)
 800c6f8:	801a      	strh	r2, [r3, #0]
//  DMA1_Channel1->CCR   &= 0xFFFFFFFFE;
//  DMA1_Channel1->CMAR  = (u32)&Sampl[2];             // �����趨DMAͨ��1
  if(( List[SYNCMODE].Val == NONE|| List[SYNCMODE].Val == SCAN)
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <ADC_Start+0x64>)
 800c6fc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c700:	2b05      	cmp	r3, #5
 800c702:	d004      	beq.n	800c70e <ADC_Start+0x22>
 800c704:	4b12      	ldr	r3, [pc, #72]	; (800c750 <ADC_Start+0x64>)
 800c706:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d10e      	bne.n	800c72c <ADC_Start+0x40>
     &&( List[TIM_BASE].Val>11))
 800c70e:	4b10      	ldr	r3, [pc, #64]	; (800c750 <ADC_Start+0x64>)
 800c710:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c714:	2b0b      	cmp	r3, #11
 800c716:	dd09      	ble.n	800c72c <ADC_Start+0x40>
  {
	  __HAL_DMA_SET_COUNTER(&hdma_adc1, 302);//       DMA1_Channel1->CNDTR  = 302;                       //10ms
 800c718:	4b0f      	ldr	r3, [pc, #60]	; (800c758 <ADC_Start+0x6c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c720:	605a      	str	r2, [r3, #4]
       List[VIEWPOSI].Val= 0;
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <ADC_Start+0x64>)
 800c724:	2200      	movs	r2, #0
 800c726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800c72a:	e00b      	b.n	800c744 <ADC_Start+0x58>
     }
  else
  __HAL_DMA_SET_COUNTER(&hdma_adc1, DEPTH[List[SMPL_DPTH].Val]);//    DMA1_Channel1->CNDTR = DEPTH[List[SMPL_DPTH].Val]; // 0x00001000;
 800c72c:	4b08      	ldr	r3, [pc, #32]	; (800c750 <ADC_Start+0x64>)
 800c72e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800c732:	461a      	mov	r2, r3
 800c734:	4b09      	ldr	r3, [pc, #36]	; (800c75c <ADC_Start+0x70>)
 800c736:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <ADC_Start+0x6c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	605a      	str	r2, [r3, #4]
//  DMA1_Channel1->CCR  |= 0x00000001;                 // ���¿�ʼɨ�����
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20000298 	.word	0x20000298
 800c754:	20002868 	.word	0x20002868
 800c758:	20006b48 	.word	0x20006b48
 800c75c:	08002270 	.word	0x08002270

0800c760 <Tim3_ISP>:

/*******************************************************************************
* Tim3�жϴ������
*******************************************************************************/
void Tim3_ISP(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
//  unsigned char KeyCode;
//  TIM3->SR = 0;                             //���жϱ�־
  Tim_Cnt++;
 800c764:	4b47      	ldr	r3, [pc, #284]	; (800c884 <Tim3_ISP+0x124>)
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b21b      	sxth	r3, r3
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	3301      	adds	r3, #1
 800c76e:	b29b      	uxth	r3, r3
 800c770:	b21a      	sxth	r2, r3
 800c772:	4b44      	ldr	r3, [pc, #272]	; (800c884 <Tim3_ISP+0x124>)
 800c774:	801a      	strh	r2, [r3, #0]
//  if(KeymS_F)KeymS_Cnt++;                  //�������ʱ
  if(Delay_Cnt>0) Delay_Cnt--;
 800c776:	4b44      	ldr	r3, [pc, #272]	; (800c888 <Tim3_ISP+0x128>)
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	b21b      	sxth	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd08      	ble.n	800c792 <Tim3_ISP+0x32>
 800c780:	4b41      	ldr	r3, [pc, #260]	; (800c888 <Tim3_ISP+0x128>)
 800c782:	881b      	ldrh	r3, [r3, #0]
 800c784:	b21b      	sxth	r3, r3
 800c786:	b29b      	uxth	r3, r3
 800c788:	3b01      	subs	r3, #1
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	b21a      	sxth	r2, r3
 800c78e:	4b3e      	ldr	r3, [pc, #248]	; (800c888 <Tim3_ISP+0x128>)
 800c790:	801a      	strh	r2, [r3, #0]
  if (mS_Cnt > 0)
 800c792:	4b3e      	ldr	r3, [pc, #248]	; (800c88c <Tim3_ISP+0x12c>)
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b21b      	sxth	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dd3a      	ble.n	800c812 <Tim3_ISP+0xb2>
  {
    mS_Cnt--;
 800c79c:	4b3b      	ldr	r3, [pc, #236]	; (800c88c <Tim3_ISP+0x12c>)
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	b21b      	sxth	r3, r3
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	b21a      	sxth	r2, r3
 800c7aa:	4b38      	ldr	r3, [pc, #224]	; (800c88c <Tim3_ISP+0x12c>)
 800c7ac:	801a      	strh	r2, [r3, #0]
    if ((mS_Cnt%20)== 0)
 800c7ae:	4b37      	ldr	r3, [pc, #220]	; (800c88c <Tim3_ISP+0x12c>)
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	b21a      	sxth	r2, r3
 800c7b4:	4b36      	ldr	r3, [pc, #216]	; (800c890 <Tim3_ISP+0x130>)
 800c7b6:	fb83 1302 	smull	r1, r3, r3, r2
 800c7ba:	10d9      	asrs	r1, r3, #3
 800c7bc:	17d3      	asrs	r3, r2, #31
 800c7be:	1ac9      	subs	r1, r1, r3
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	440b      	add	r3, r1
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	b21b      	sxth	r3, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d157      	bne.n	800c880 <Tim3_ISP+0x120>
//      if(Key_Wait_Cnt)    Key_Wait_Cnt--;
//      if(Key_Repeat_Cnt)  Key_Repeat_Cnt--;
//      KeyCode = KeyScan();
//      if(KeyCode !=0) Key_Buffer = KeyCode;

      if(Cursor_Cnt >0)
 800c7d0:	4b30      	ldr	r3, [pc, #192]	; (800c894 <Tim3_ISP+0x134>)
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dd09      	ble.n	800c7ee <Tim3_ISP+0x8e>
    	  Cursor_Cnt--;
 800c7da:	4b2e      	ldr	r3, [pc, #184]	; (800c894 <Tim3_ISP+0x134>)
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	b21b      	sxth	r3, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	b21a      	sxth	r2, r3
 800c7e8:	4b2a      	ldr	r3, [pc, #168]	; (800c894 <Tim3_ISP+0x134>)
 800c7ea:	801a      	strh	r2, [r3, #0]
        Windows_Pop = 0;
        Clr_WavePosi(DAR);
      }
    }
  }
}
 800c7ec:	e048      	b.n	800c880 <Tim3_ISP+0x120>
        Cursor_Cnt = 12;                  // 12*20mS=240mS
 800c7ee:	4b29      	ldr	r3, [pc, #164]	; (800c894 <Tim3_ISP+0x134>)
 800c7f0:	220c      	movs	r2, #12
 800c7f2:	801a      	strh	r2, [r3, #0]
        Twink = !Twink;
 800c7f4:	4b28      	ldr	r3, [pc, #160]	; (800c898 <Tim3_ISP+0x138>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bf0c      	ite	eq
 800c7fe:	2301      	moveq	r3, #1
 800c800:	2300      	movne	r3, #0
 800c802:	b2db      	uxtb	r3, r3
 800c804:	461a      	mov	r2, r3
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <Tim3_ISP+0x138>)
 800c808:	701a      	strb	r2, [r3, #0]
        Blink =  BLINK;
 800c80a:	4b24      	ldr	r3, [pc, #144]	; (800c89c <Tim3_ISP+0x13c>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	701a      	strb	r2, [r3, #0]
}
 800c810:	e036      	b.n	800c880 <Tim3_ISP+0x120>
    mS_Cnt = 1000;
 800c812:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <Tim3_ISP+0x12c>)
 800c814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c818:	801a      	strh	r2, [r3, #0]
    if((List[STANDBY].Val !=0) && (StdBy_Time > 0))
 800c81a:	4b21      	ldr	r3, [pc, #132]	; (800c8a0 <Tim3_ISP+0x140>)
 800c81c:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00d      	beq.n	800c840 <Tim3_ISP+0xe0>
 800c824:	4b1f      	ldr	r3, [pc, #124]	; (800c8a4 <Tim3_ISP+0x144>)
 800c826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dd08      	ble.n	800c840 <Tim3_ISP+0xe0>
      StdBy_Time--;      //������ʱ
 800c82e:	4b1d      	ldr	r3, [pc, #116]	; (800c8a4 <Tim3_ISP+0x144>)
 800c830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c834:	b29b      	uxth	r3, r3
 800c836:	3b01      	subs	r3, #1
 800c838:	b29b      	uxth	r3, r3
 800c83a:	b21a      	sxth	r2, r3
 800c83c:	4b19      	ldr	r3, [pc, #100]	; (800c8a4 <Tim3_ISP+0x144>)
 800c83e:	801a      	strh	r2, [r3, #0]
    if(PopupCnt > 0)
 800c840:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <Tim3_ISP+0x148>)
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	b21b      	sxth	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	dd0d      	ble.n	800c866 <Tim3_ISP+0x106>
      if(Cal_Flag == 0)
 800c84a:	4b18      	ldr	r3, [pc, #96]	; (800c8ac <Tim3_ISP+0x14c>)
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d116      	bne.n	800c880 <Tim3_ISP+0x120>
    	  PopupCnt--;
 800c852:	4b15      	ldr	r3, [pc, #84]	; (800c8a8 <Tim3_ISP+0x148>)
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	b21b      	sxth	r3, r3
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	b21a      	sxth	r2, r3
 800c860:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <Tim3_ISP+0x148>)
 800c862:	801a      	strh	r2, [r3, #0]
}
 800c864:	e00c      	b.n	800c880 <Tim3_ISP+0x120>
      Close_Pop();        // �رնԻ���
 800c866:	f001 fef1 	bl	800e64c <Close_Pop>
      if(Windows_Pop)
 800c86a:	4b11      	ldr	r3, [pc, #68]	; (800c8b0 <Tim3_ISP+0x150>)
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d006      	beq.n	800c880 <Tim3_ISP+0x120>
        Windows_Pop = 0;
 800c872:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <Tim3_ISP+0x150>)
 800c874:	2200      	movs	r2, #0
 800c876:	701a      	strb	r2, [r3, #0]
        Clr_WavePosi(DAR);
 800c878:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800c87c:	f007 fe50 	bl	8014520 <Clr_WavePosi>
}
 800c880:	bf00      	nop
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20000a2e 	.word	0x20000a2e
 800c888:	20000784 	.word	0x20000784
 800c88c:	20000782 	.word	0x20000782
 800c890:	66666667 	.word	0x66666667
 800c894:	20000780 	.word	0x20000780
 800c898:	2000077c 	.word	0x2000077c
 800c89c:	20000a2c 	.word	0x20000a2c
 800c8a0:	20000298 	.word	0x20000298
 800c8a4:	20000798 	.word	0x20000798
 800c8a8:	20000000 	.word	0x20000000
 800c8ac:	200001b4 	.word	0x200001b4
 800c8b0:	200007a2 	.word	0x200007a2

0800c8b4 <Fill_Base>:
unsigned short AA[205];  //one more than orginal size

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pBuf, R5:Cnt, R6:Tmp,
//void Fill_Base(R3 = u32 Color)// �л��������ɫ RET: R4+202 Used: R3-R5
void Fill_Base(void)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
	R4.A = (char*) &AA[204]; // 204��/2 ��408 Bytes
 800c8b8:	4b12      	ldr	r3, [pc, #72]	; (800c904 <Fill_Base+0x50>)
 800c8ba:	4a13      	ldr	r2, [pc, #76]	; (800c908 <Fill_Base+0x54>)
 800c8bc:	601a      	str	r2, [r3, #0]
	R5 =102;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <Fill_Base+0x58>)
 800c8c0:	2266      	movs	r2, #102	; 0x66
 800c8c2:	601a      	str	r2, [r3, #0]

Fill_Loop0:
	*(unsigned*)R4.A =R3;
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <Fill_Base+0x50>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a11      	ldr	r2, [pc, #68]	; (800c910 <Fill_Base+0x5c>)
 800c8ca:	6812      	ldr	r2, [r2, #0]
 800c8cc:	601a      	str	r2, [r3, #0]
	R4.A= R4.A +4;
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <Fill_Base+0x50>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	4a0b      	ldr	r2, [pc, #44]	; (800c904 <Fill_Base+0x50>)
 800c8d6:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <Fill_Base+0x58>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	4a0b      	ldr	r2, [pc, #44]	; (800c90c <Fill_Base+0x58>)
 800c8e0:	6013      	str	r3, [r2, #0]
	if (R5!=0)
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <Fill_Base+0x58>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d000      	beq.n	800c8ec <Fill_Base+0x38>
	{
		goto Fill_Loop0;
 800c8ea:	e7eb      	b.n	800c8c4 <Fill_Base+0x10>
	}
	R4.A = (char*) &AA[203];
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <Fill_Base+0x50>)
 800c8ee:	4a09      	ldr	r2, [pc, #36]	; (800c914 <Fill_Base+0x60>)
 800c8f0:	601a      	str	r2, [r3, #0]
	R3= GRID;
 800c8f2:	4b07      	ldr	r3, [pc, #28]	; (800c910 <Fill_Base+0x5c>)
 800c8f4:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800c8f8:	601a      	str	r2, [r3, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	20000be4 	.word	0x20000be4
 800c908:	20000bd8 	.word	0x20000bd8
 800c90c:	20000a34 	.word	0x20000a34
 800c910:	20000a38 	.word	0x20000a38
 800c914:	20000bd6 	.word	0x20000bd6

0800c918 <Buld_0>:

/*// void Buld_0(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R5*/
void Buld_0(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800c91c:	4b03      	ldr	r3, [pc, #12]	; (800c92c <Buld_0+0x14>)
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800c922:	f7ff ffc7 	bl	800c8b4 <Fill_Base>
}
 800c926:	bf00      	nop
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20000a38 	.word	0x20000a38

0800c930 <Buld_1>:

// void Buld_1(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_1(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
	R3 = GRID_COLOR;
 800c934:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <Buld_1+0x40>)
 800c936:	4a0f      	ldr	r2, [pc, #60]	; (800c974 <Buld_1+0x44>)
 800c938:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800c93a:	f7ff ffbb 	bl	800c8b4 <Fill_Base>
	R3 =0;
 800c93e:	4b0c      	ldr	r3, [pc, #48]	; (800c970 <Buld_1+0x40>)
 800c940:	2200      	movs	r2, #0
 800c942:	601a      	str	r2, [r3, #0]
	R5=402;
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <Buld_1+0x48>)
 800c946:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800c94a:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800c94c:	4b08      	ldr	r3, [pc, #32]	; (800c970 <Buld_1+0x40>)
 800c94e:	6819      	ldr	r1, [r3, #0]
 800c950:	4b0a      	ldr	r3, [pc, #40]	; (800c97c <Buld_1+0x4c>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	4b08      	ldr	r3, [pc, #32]	; (800c978 <Buld_1+0x48>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4413      	add	r3, r2
 800c95a:	b28a      	uxth	r2, r1
 800c95c:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A -2)=R3;
 800c95e:	4b04      	ldr	r3, [pc, #16]	; (800c970 <Buld_1+0x40>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b06      	ldr	r3, [pc, #24]	; (800c97c <Buld_1+0x4c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3b02      	subs	r3, #2
 800c968:	b292      	uxth	r2, r2
 800c96a:	801a      	strh	r2, [r3, #0]
}
 800c96c:	bf00      	nop
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	20000a38 	.word	0x20000a38
 800c974:	7bef7bef 	.word	0x7bef7bef
 800c978:	20000a34 	.word	0x20000a34
 800c97c:	20000be4 	.word	0x20000be4

0800c980 <Buld_2>:

// void Buld_2(R4 = u16* pCol)   // ���������л������ı������� Used: R3-R6
void Buld_2(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800c984:	4b0c      	ldr	r3, [pc, #48]	; (800c9b8 <Buld_2+0x38>)
 800c986:	2200      	movs	r2, #0
 800c988:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800c98a:	f7ff ff93 	bl	800c8b4 <Fill_Base>
	R5 =400;
 800c98e:	4b0b      	ldr	r3, [pc, #44]	; (800c9bc <Buld_2+0x3c>)
 800c990:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c994:	601a      	str	r2, [r3, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800c996:	4b08      	ldr	r3, [pc, #32]	; (800c9b8 <Buld_2+0x38>)
 800c998:	6819      	ldr	r1, [r3, #0]
 800c99a:	4b09      	ldr	r3, [pc, #36]	; (800c9c0 <Buld_2+0x40>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b07      	ldr	r3, [pc, #28]	; (800c9bc <Buld_2+0x3c>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	b28a      	uxth	r2, r1
 800c9a6:	801a      	strh	r2, [r3, #0]
	*(unsigned short*)(R4.A)=R3;
 800c9a8:	4b03      	ldr	r3, [pc, #12]	; (800c9b8 <Buld_2+0x38>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <Buld_2+0x40>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	b292      	uxth	r2, r2
 800c9b2:	801a      	strh	r2, [r3, #0]
}
 800c9b4:	bf00      	nop
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000a38 	.word	0x20000a38
 800c9bc:	20000a34 	.word	0x20000a34
 800c9c0:	20000be4 	.word	0x20000be4

0800c9c4 <Buld_3>:

// void Buld_3(R4 = u16* pCol)   // ��������л������ı������� Used: R3-R6
void Buld_3(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800c9c8:	4b0e      	ldr	r3, [pc, #56]	; (800ca04 <Buld_3+0x40>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800c9ce:	f7ff ff71 	bl	800c8b4 <Fill_Base>
	R5=450;
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <Buld_3+0x44>)
 800c9d4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800c9d8:	601a      	str	r2, [r3, #0]

Loop3:
	R5 = R5 -50;
 800c9da:	4b0b      	ldr	r3, [pc, #44]	; (800ca08 <Buld_3+0x44>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3b32      	subs	r3, #50	; 0x32
 800c9e0:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <Buld_3+0x44>)
 800c9e2:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800c9e4:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <Buld_3+0x40>)
 800c9e6:	6819      	ldr	r1, [r3, #0]
 800c9e8:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <Buld_3+0x48>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <Buld_3+0x44>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	b28a      	uxth	r2, r1
 800c9f4:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800c9f6:	4b04      	ldr	r3, [pc, #16]	; (800ca08 <Buld_3+0x44>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d000      	beq.n	800ca00 <Buld_3+0x3c>
	{
		goto Loop3;
 800c9fe:	e7ec      	b.n	800c9da <Buld_3+0x16>
	}
	return;
 800ca00:	bf00      	nop
}
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20000a38 	.word	0x20000a38
 800ca08:	20000a34 	.word	0x20000a34
 800ca0c:	20000be4 	.word	0x20000be4

0800ca10 <Buld_4>:

// void Buld_4(R4 = u16* pCol)   // ���������л������ı�������
void Buld_4(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
	R3 = BACKGROUND;
 800ca14:	4b0e      	ldr	r3, [pc, #56]	; (800ca50 <Buld_4+0x40>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]
	Fill_Base();
 800ca1a:	f7ff ff4b 	bl	800c8b4 <Fill_Base>
	R5=410;
 800ca1e:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <Buld_4+0x44>)
 800ca20:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800ca24:	601a      	str	r2, [r3, #0]

Loop7:
	R5 = R5 -10;
 800ca26:	4b0b      	ldr	r3, [pc, #44]	; (800ca54 <Buld_4+0x44>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3b0a      	subs	r3, #10
 800ca2c:	4a09      	ldr	r2, [pc, #36]	; (800ca54 <Buld_4+0x44>)
 800ca2e:	6013      	str	r3, [r2, #0]
	*(unsigned short*)(R4.A +R5)=R3;
 800ca30:	4b07      	ldr	r3, [pc, #28]	; (800ca50 <Buld_4+0x40>)
 800ca32:	6819      	ldr	r1, [r3, #0]
 800ca34:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <Buld_4+0x48>)
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <Buld_4+0x44>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	b28a      	uxth	r2, r1
 800ca40:	801a      	strh	r2, [r3, #0]
	if ( R5!=0)
 800ca42:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <Buld_4+0x44>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d000      	beq.n	800ca4c <Buld_4+0x3c>
	{
		goto Loop7;
 800ca4a:	e7ec      	b.n	800ca26 <Buld_4+0x16>
	}
	return;
 800ca4c:	bf00      	nop
}
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	20000a38 	.word	0x20000a38
 800ca54:	20000a34 	.word	0x20000a34
 800ca58:	20000be4 	.word	0x20000be4

0800ca5c <Draw_Digit_Analog>:

// Draw_Digit(R0:pDat, R2:Col, R3:Color, R4:Posi, R8:Mask)// �����ֲ��� Used: R5-R7
// Draw_Analog(R2:Col, R3:Color, R4:pDat)// ��ģ�Ⲩ������  Used: R3-R7
void Draw_Digit_Analog(unsigned short DorA)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	80fb      	strh	r3, [r7, #6]
	if(DorA == 1)  //draw digit
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d144      	bne.n	800caf6 <Draw_Digit_Analog+0x9a>
	{
	R7 =R0 +900;
 800ca6c:	4b7d      	ldr	r3, [pc, #500]	; (800cc64 <Draw_Digit_Analog+0x208>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800ca74:	4a7c      	ldr	r2, [pc, #496]	; (800cc68 <Draw_Digit_Analog+0x20c>)
 800ca76:	6013      	str	r3, [r2, #0]
	R7 = R7 + R2;
 800ca78:	4b7b      	ldr	r3, [pc, #492]	; (800cc68 <Draw_Digit_Analog+0x20c>)
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	4b7b      	ldr	r3, [pc, #492]	; (800cc6c <Draw_Digit_Analog+0x210>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4413      	add	r3, r2
 800ca82:	4a79      	ldr	r2, [pc, #484]	; (800cc68 <Draw_Digit_Analog+0x20c>)
 800ca84:	6013      	str	r3, [r2, #0]
	R5 = *(char*) R7;
 800ca86:	4b78      	ldr	r3, [pc, #480]	; (800cc68 <Draw_Digit_Analog+0x20c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4b78      	ldr	r3, [pc, #480]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800ca90:	601a      	str	r2, [r3, #0]
	R6 = *(char*) (R7 -1);
 800ca92:	4b75      	ldr	r3, [pc, #468]	; (800cc68 <Draw_Digit_Analog+0x20c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	4b75      	ldr	r3, [pc, #468]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800ca9e:	601a      	str	r2, [r3, #0]
	R4.I = R4.I >> 1;
 800caa0:	4b75      	ldr	r3, [pc, #468]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	085b      	lsrs	r3, r3, #1
 800caa6:	4a74      	ldr	r2, [pc, #464]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800caa8:	6013      	str	r3, [r2, #0]
	R5 = R5 & R8;
 800caaa:	4b71      	ldr	r3, [pc, #452]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	4b73      	ldr	r3, [pc, #460]	; (800cc7c <Draw_Digit_Analog+0x220>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4013      	ands	r3, r2
 800cab4:	4a6e      	ldr	r2, [pc, #440]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cab6:	6013      	str	r3, [r2, #0]
	if (R5 == 0 )
 800cab8:	4b6d      	ldr	r3, [pc, #436]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <Draw_Digit_Analog+0x6e>
		R5 = R4.I;
 800cac0:	4b6d      	ldr	r3, [pc, #436]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a6a      	ldr	r2, [pc, #424]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	e004      	b.n	800cad4 <Draw_Digit_Analog+0x78>
	else
		R5 = R4.I + 30;
 800caca:	4b6b      	ldr	r3, [pc, #428]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	331e      	adds	r3, #30
 800cad0:	4a67      	ldr	r2, [pc, #412]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cad2:	6013      	str	r3, [r2, #0]
	R6 = R6 & R8;
 800cad4:	4b67      	ldr	r3, [pc, #412]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	4b68      	ldr	r3, [pc, #416]	; (800cc7c <Draw_Digit_Analog+0x220>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4013      	ands	r3, r2
 800cade:	4a65      	ldr	r2, [pc, #404]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cae0:	6013      	str	r3, [r2, #0]
	if( R6 != 0)
 800cae2:	4b64      	ldr	r3, [pc, #400]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d01c      	beq.n	800cb24 <Draw_Digit_Analog+0xc8>
		R4.I = R4.I + 30;
 800caea:	4b63      	ldr	r3, [pc, #396]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	331e      	adds	r3, #30
 800caf0:	4a61      	ldr	r2, [pc, #388]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800caf2:	6013      	str	r3, [r2, #0]
	goto Analog0;
 800caf4:	e016      	b.n	800cb24 <Draw_Digit_Analog+0xc8>
	}

	if(DorA == 0)  //draw analog
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f040 80a5 	bne.w	800cc48 <Draw_Digit_Analog+0x1ec>
	{
		R4.A = R4.A +2;
 800cafe:	4b5e      	ldr	r3, [pc, #376]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3302      	adds	r3, #2
 800cb04:	4a5c      	ldr	r2, [pc, #368]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb06:	6013      	str	r3, [r2, #0]
		R5 = *(char*)R4.A; //n1
 800cb08:	4b5b      	ldr	r3, [pc, #364]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	4b57      	ldr	r3, [pc, #348]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb12:	601a      	str	r2, [r3, #0]
		R4.I = *(char*)(R4.A-1); //n0
 800cb14:	4b58      	ldr	r3, [pc, #352]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	4b56      	ldr	r3, [pc, #344]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb20:	601a      	str	r2, [r3, #0]
		goto Analog0;
 800cb22:	e000      	b.n	800cb26 <Draw_Digit_Analog+0xca>
	goto Analog0;
 800cb24:	bf00      	nop

	R5 = R5 +50;
	R4.I =R4.I +50;

	Analog0:
	if (R5 == 255)
 800cb26:	4b52      	ldr	r3, [pc, #328]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2bff      	cmp	r3, #255	; 0xff
 800cb2c:	f000 808e 	beq.w	800cc4c <Draw_Digit_Analog+0x1f0>
		return;
	if (R5 == 0)
 800cb30:	4b4f      	ldr	r3, [pc, #316]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 808b 	beq.w	800cc50 <Draw_Digit_Analog+0x1f4>
		return;

	if(R5 >= R4.I)  // R5 = | n1 - n0 |
 800cb3a:	4b4f      	ldr	r3, [pc, #316]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	4b4c      	ldr	r3, [pc, #304]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d80b      	bhi.n	800cb5e <Draw_Digit_Analog+0x102>
	{
		R6 =R4.I;
 800cb46:	4b4c      	ldr	r3, [pc, #304]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a4a      	ldr	r2, [pc, #296]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cb4c:	6013      	str	r3, [r2, #0]
		R5 = R5 -R4.I;
 800cb4e:	4b48      	ldr	r3, [pc, #288]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	4b49      	ldr	r3, [pc, #292]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	4a45      	ldr	r2, [pc, #276]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	e00a      	b.n	800cb74 <Draw_Digit_Analog+0x118>
	}
	else
	{
		R6 = R5;  // n1, n0 ����С���� R6
 800cb5e:	4b44      	ldr	r3, [pc, #272]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a44      	ldr	r2, [pc, #272]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cb64:	6013      	str	r3, [r2, #0]
		R5 = R4.I -R5;
 800cb66:	4b44      	ldr	r3, [pc, #272]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4b41      	ldr	r3, [pc, #260]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	4a3f      	ldr	r2, [pc, #252]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb72:	6013      	str	r3, [r2, #0]
	}

	if(R6 > 199)
 800cb74:	4b3f      	ldr	r3, [pc, #252]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2bc7      	cmp	r3, #199	; 0xc7
 800cb7a:	d86b      	bhi.n	800cc54 <Draw_Digit_Analog+0x1f8>
		return;

	R4.I = R5 +R6;
 800cb7c:	4b3c      	ldr	r3, [pc, #240]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	4b3c      	ldr	r3, [pc, #240]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4413      	add	r3, r2
 800cb86:	4a3c      	ldr	r2, [pc, #240]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb88:	6013      	str	r3, [r2, #0]
	if(R4.I >199)
 800cb8a:	4b3b      	ldr	r3, [pc, #236]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2bc7      	cmp	r3, #199	; 0xc7
 800cb90:	d906      	bls.n	800cba0 <Draw_Digit_Analog+0x144>
	{
		R5 = 199 - R6;
 800cb92:	4b38      	ldr	r3, [pc, #224]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 800cb9a:	4a35      	ldr	r2, [pc, #212]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cb9c:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800cb9e:	e020      	b.n	800cbe2 <Draw_Digit_Analog+0x186>
	}

	if( R4.I < 3 )
 800cba0:	4b35      	ldr	r3, [pc, #212]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d957      	bls.n	800cc58 <Draw_Digit_Analog+0x1fc>
		return;

	if( R6 <3)
 800cba8:	4b32      	ldr	r3, [pc, #200]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d808      	bhi.n	800cbc2 <Draw_Digit_Analog+0x166>
	{
		R6 = 3;
 800cbb0:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cbb2:	2203      	movs	r2, #3
 800cbb4:	601a      	str	r2, [r3, #0]
		R5 =R4.I -3;
 800cbb6:	4b30      	ldr	r3, [pc, #192]	; (800cc78 <Draw_Digit_Analog+0x21c>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b03      	subs	r3, #3
 800cbbc:	4a2c      	ldr	r2, [pc, #176]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cbbe:	6013      	str	r3, [r2, #0]
		goto Analog2;
 800cbc0:	e00f      	b.n	800cbe2 <Draw_Digit_Analog+0x186>
	}

	if(R5 ==0 )
 800cbc2:	4b2b      	ldr	r3, [pc, #172]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <Draw_Digit_Analog+0x184>
	{
		R6 = R6 -1;
 800cbca:	4b2a      	ldr	r3, [pc, #168]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	4a28      	ldr	r2, [pc, #160]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cbd2:	6013      	str	r3, [r2, #0]
		R5 = R5 +2;
 800cbd4:	4b26      	ldr	r3, [pc, #152]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3302      	adds	r3, #2
 800cbda:	4a25      	ldr	r2, [pc, #148]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	e000      	b.n	800cbe2 <Draw_Digit_Analog+0x186>
	}

Analog2:
 800cbe0:	bf00      	nop
	if( R5>= 20)
 800cbe2:	4b23      	ldr	r3, [pc, #140]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b13      	cmp	r3, #19
 800cbe8:	d904      	bls.n	800cbf4 <Draw_Digit_Analog+0x198>
		R3= R3 +20;
 800cbea:	4b25      	ldr	r3, [pc, #148]	; (800cc80 <Draw_Digit_Analog+0x224>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	3314      	adds	r3, #20
 800cbf0:	4a23      	ldr	r2, [pc, #140]	; (800cc80 <Draw_Digit_Analog+0x224>)
 800cbf2:	6013      	str	r3, [r2, #0]

	R3 =  *(unsigned short*) (R1 +R3);
 800cbf4:	4b23      	ldr	r3, [pc, #140]	; (800cc84 <Draw_Digit_Analog+0x228>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	4b21      	ldr	r3, [pc, #132]	; (800cc80 <Draw_Digit_Analog+0x224>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	4b1f      	ldr	r3, [pc, #124]	; (800cc80 <Draw_Digit_Analog+0x224>)
 800cc04:	601a      	str	r2, [r3, #0]
	R6 = R6 << 1;
 800cc06:	4b1b      	ldr	r3, [pc, #108]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc0e:	6013      	str	r3, [r2, #0]
//    ADD     R6,  SP, R6            ;// ȷ����ʾλ��
    R6 = (unsigned) &AA[204- R6/2];
 800cc10:	4b18      	ldr	r3, [pc, #96]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	085b      	lsrs	r3, r3, #1
 800cc16:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4a1a      	ldr	r2, [pc, #104]	; (800cc88 <Draw_Digit_Analog+0x22c>)
 800cc1e:	4413      	add	r3, r2
 800cc20:	461a      	mov	r2, r3
 800cc22:	4b14      	ldr	r3, [pc, #80]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc24:	601a      	str	r2, [r3, #0]

Analog3:
	*(unsigned short*)R6 = R3;
 800cc26:	4b16      	ldr	r3, [pc, #88]	; (800cc80 <Draw_Digit_Analog+0x224>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	4b12      	ldr	r3, [pc, #72]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	b292      	uxth	r2, r2
 800cc30:	801a      	strh	r2, [r3, #0]
	R6 =R6 +2;
 800cc32:	4b10      	ldr	r3, [pc, #64]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3302      	adds	r3, #2
 800cc38:	4a0e      	ldr	r2, [pc, #56]	; (800cc74 <Draw_Digit_Analog+0x218>)
 800cc3a:	6013      	str	r3, [r2, #0]
	R5 =R5 -1;
 800cc3c:	4b0c      	ldr	r3, [pc, #48]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	4a0b      	ldr	r2, [pc, #44]	; (800cc70 <Draw_Digit_Analog+0x214>)
 800cc44:	6013      	str	r3, [r2, #0]
	if(R5>=0)
		goto Analog3;
 800cc46:	e7ee      	b.n	800cc26 <Draw_Digit_Analog+0x1ca>
	return;
 800cc48:	bf00      	nop
 800cc4a:	e006      	b.n	800cc5a <Draw_Digit_Analog+0x1fe>
		return;
 800cc4c:	bf00      	nop
 800cc4e:	e004      	b.n	800cc5a <Draw_Digit_Analog+0x1fe>
		return;
 800cc50:	bf00      	nop
 800cc52:	e002      	b.n	800cc5a <Draw_Digit_Analog+0x1fe>
		return;
 800cc54:	bf00      	nop
 800cc56:	e000      	b.n	800cc5a <Draw_Digit_Analog+0x1fe>
		return;
 800cc58:	bf00      	nop

return;
}
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	20000a3c 	.word	0x20000a3c
 800cc68:	20000bf8 	.word	0x20000bf8
 800cc6c:	20000bf0 	.word	0x20000bf0
 800cc70:	20000a34 	.word	0x20000a34
 800cc74:	20000be0 	.word	0x20000be0
 800cc78:	20000be4 	.word	0x20000be4
 800cc7c:	20000a30 	.word	0x20000a30
 800cc80:	20000a38 	.word	0x20000a38
 800cc84:	20000be8 	.word	0x20000be8
 800cc88:	20000a40 	.word	0x20000a40

0800cc8c <Cursor_0>:

// Cursor_0(R1:pTab, R2:Col)// ���������α�˵�  Used: R3-R6
void Cursor_0(short *pTab)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	R3 =6;
 800cc94:	4b3c      	ldr	r3, [pc, #240]	; (800cd88 <Cursor_0+0xfc>)
 800cc96:	2206      	movs	r2, #6
 800cc98:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800cc9a:	4b3c      	ldr	r3, [pc, #240]	; (800cd8c <Cursor_0+0x100>)
 800cc9c:	4a3c      	ldr	r2, [pc, #240]	; (800cd90 <Cursor_0+0x104>)
 800cc9e:	601a      	str	r2, [r3, #0]

Cursor01:
	R5 = pTab[R3];
 800cca0:	4b39      	ldr	r3, [pc, #228]	; (800cd88 <Cursor_0+0xfc>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4b38      	ldr	r3, [pc, #224]	; (800cd94 <Cursor_0+0x108>)
 800ccb2:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800ccb4:	4b37      	ldr	r3, [pc, #220]	; (800cd94 <Cursor_0+0x108>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d15c      	bne.n	800cd7a <Cursor_0+0xee>
	{
		goto Cursor02;
	}
	R5 = pTab[R3 +10];
 800ccc0:	4b31      	ldr	r3, [pc, #196]	; (800cd88 <Cursor_0+0xfc>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	330a      	adds	r3, #10
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4413      	add	r3, r2
 800cccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4b30      	ldr	r3, [pc, #192]	; (800cd94 <Cursor_0+0x108>)
 800ccd4:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800ccd6:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <Cursor_0+0x108>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4a2d      	ldr	r2, [pc, #180]	; (800cd98 <Cursor_0+0x10c>)
 800cce4:	4413      	add	r3, r2
 800cce6:	4a29      	ldr	r2, [pc, #164]	; (800cd8c <Cursor_0+0x100>)
 800cce8:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800ccea:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <Cursor_0+0xfc>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3314      	adds	r3, #20
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	4b27      	ldr	r3, [pc, #156]	; (800cd9c <Cursor_0+0x110>)
 800ccfe:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -4;
 800cd00:	4b22      	ldr	r3, [pc, #136]	; (800cd8c <Cursor_0+0x100>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3b04      	subs	r3, #4
 800cd06:	4a21      	ldr	r2, [pc, #132]	; (800cd8c <Cursor_0+0x100>)
 800cd08:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800cd0a:	4b24      	ldr	r3, [pc, #144]	; (800cd9c <Cursor_0+0x110>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	4b1f      	ldr	r3, [pc, #124]	; (800cd8c <Cursor_0+0x100>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	b292      	uxth	r2, r2
 800cd14:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800cd16:	4b1d      	ldr	r3, [pc, #116]	; (800cd8c <Cursor_0+0x100>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3302      	adds	r3, #2
 800cd1c:	4a1b      	ldr	r2, [pc, #108]	; (800cd8c <Cursor_0+0x100>)
 800cd1e:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800cd20:	4b1e      	ldr	r3, [pc, #120]	; (800cd9c <Cursor_0+0x110>)
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	4b19      	ldr	r3, [pc, #100]	; (800cd8c <Cursor_0+0x100>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	b292      	uxth	r2, r2
 800cd2a:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <Cursor_0+0x100>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3302      	adds	r3, #2
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <Cursor_0+0x100>)
 800cd34:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800cd36:	4b19      	ldr	r3, [pc, #100]	; (800cd9c <Cursor_0+0x110>)
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <Cursor_0+0x100>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	b292      	uxth	r2, r2
 800cd40:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800cd42:	4b12      	ldr	r3, [pc, #72]	; (800cd8c <Cursor_0+0x100>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3302      	adds	r3, #2
 800cd48:	4a10      	ldr	r2, [pc, #64]	; (800cd8c <Cursor_0+0x100>)
 800cd4a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800cd4c:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <Cursor_0+0x110>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <Cursor_0+0x100>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	b292      	uxth	r2, r2
 800cd56:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800cd58:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <Cursor_0+0x100>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3302      	adds	r3, #2
 800cd5e:	4a0b      	ldr	r2, [pc, #44]	; (800cd8c <Cursor_0+0x100>)
 800cd60:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800cd62:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <Cursor_0+0x110>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	4b09      	ldr	r3, [pc, #36]	; (800cd8c <Cursor_0+0x100>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	b292      	uxth	r2, r2
 800cd6c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800cd6e:	4b07      	ldr	r3, [pc, #28]	; (800cd8c <Cursor_0+0x100>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3302      	adds	r3, #2
 800cd74:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <Cursor_0+0x100>)
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	e000      	b.n	800cd7c <Cursor_0+0xf0>
		goto Cursor02;
 800cd7a:	bf00      	nop

Cursor02:
	R3 = R3 -1;
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <Cursor_0+0xfc>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	4a01      	ldr	r2, [pc, #4]	; (800cd88 <Cursor_0+0xfc>)
 800cd84:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor01;
 800cd86:	e78b      	b.n	800cca0 <Cursor_0+0x14>
 800cd88:	20000a38 	.word	0x20000a38
 800cd8c:	20000be4 	.word	0x20000be4
 800cd90:	20000bd8 	.word	0x20000bd8
 800cd94:	20000a34 	.word	0x20000a34
 800cd98:	20000a40 	.word	0x20000a40
 800cd9c:	20000be0 	.word	0x20000be0

0800cda0 <Cursor_1>:
	}
	return;
}

void Cursor_1(short *pTab)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	R3 =6;
 800cda8:	4b31      	ldr	r3, [pc, #196]	; (800ce70 <Cursor_1+0xd0>)
 800cdaa:	2206      	movs	r2, #6
 800cdac:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800cdae:	4b31      	ldr	r3, [pc, #196]	; (800ce74 <Cursor_1+0xd4>)
 800cdb0:	4a31      	ldr	r2, [pc, #196]	; (800ce78 <Cursor_1+0xd8>)
 800cdb2:	601a      	str	r2, [r3, #0]

Cursor11:
	R5 = pTab[R3];
 800cdb4:	4b2e      	ldr	r3, [pc, #184]	; (800ce70 <Cursor_1+0xd0>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	; (800ce7c <Cursor_1+0xdc>)
 800cdc6:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800cdc8:	4b2c      	ldr	r3, [pc, #176]	; (800ce7c <Cursor_1+0xdc>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f003 0301 	and.w	r3, r3, #1
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d146      	bne.n	800ce62 <Cursor_1+0xc2>
	{
		goto Cursor12;
	}
	R5 = pTab[R3 +10];
 800cdd4:	4b26      	ldr	r3, [pc, #152]	; (800ce70 <Cursor_1+0xd0>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	330a      	adds	r3, #10
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4413      	add	r3, r2
 800cde0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cde4:	461a      	mov	r2, r3
 800cde6:	4b25      	ldr	r3, [pc, #148]	; (800ce7c <Cursor_1+0xdc>)
 800cde8:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800cdea:	4b24      	ldr	r3, [pc, #144]	; (800ce7c <Cursor_1+0xdc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	085b      	lsrs	r3, r3, #1
 800cdf0:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4a22      	ldr	r2, [pc, #136]	; (800ce80 <Cursor_1+0xe0>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	4a1e      	ldr	r2, [pc, #120]	; (800ce74 <Cursor_1+0xd4>)
 800cdfc:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800cdfe:	4b1c      	ldr	r3, [pc, #112]	; (800ce70 <Cursor_1+0xd0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3314      	adds	r3, #20
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	4413      	add	r3, r2
 800ce0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <Cursor_1+0xe4>)
 800ce12:	601a      	str	r2, [r3, #0]
	R4.I = R4.I -2;
 800ce14:	4b17      	ldr	r3, [pc, #92]	; (800ce74 <Cursor_1+0xd4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3b02      	subs	r3, #2
 800ce1a:	4a16      	ldr	r2, [pc, #88]	; (800ce74 <Cursor_1+0xd4>)
 800ce1c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800ce1e:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <Cursor_1+0xe4>)
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <Cursor_1+0xd4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	b292      	uxth	r2, r2
 800ce28:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800ce2a:	4b12      	ldr	r3, [pc, #72]	; (800ce74 <Cursor_1+0xd4>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3302      	adds	r3, #2
 800ce30:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <Cursor_1+0xd4>)
 800ce32:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800ce34:	4b13      	ldr	r3, [pc, #76]	; (800ce84 <Cursor_1+0xe4>)
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <Cursor_1+0xd4>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800ce40:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <Cursor_1+0xd4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3302      	adds	r3, #2
 800ce46:	4a0b      	ldr	r2, [pc, #44]	; (800ce74 <Cursor_1+0xd4>)
 800ce48:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800ce4a:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <Cursor_1+0xe4>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <Cursor_1+0xd4>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	b292      	uxth	r2, r2
 800ce54:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800ce56:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <Cursor_1+0xd4>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	4a05      	ldr	r2, [pc, #20]	; (800ce74 <Cursor_1+0xd4>)
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	e000      	b.n	800ce64 <Cursor_1+0xc4>
		goto Cursor12;
 800ce62:	bf00      	nop

Cursor12:
	R3 = R3 -1;
 800ce64:	4b02      	ldr	r3, [pc, #8]	; (800ce70 <Cursor_1+0xd0>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	4a01      	ldr	r2, [pc, #4]	; (800ce70 <Cursor_1+0xd0>)
 800ce6c:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor11;
 800ce6e:	e7a1      	b.n	800cdb4 <Cursor_1+0x14>
 800ce70:	20000a38 	.word	0x20000a38
 800ce74:	20000be4 	.word	0x20000be4
 800ce78:	20000bd8 	.word	0x20000bd8
 800ce7c:	20000a34 	.word	0x20000a34
 800ce80:	20000a40 	.word	0x20000a40
 800ce84:	20000be0 	.word	0x20000be0

0800ce88 <Cursor_2>:
	}
	return;
}

void Cursor_2(short *pTab)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	R3 =6;
 800ce90:	4b21      	ldr	r3, [pc, #132]	; (800cf18 <Cursor_2+0x90>)
 800ce92:	2206      	movs	r2, #6
 800ce94:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <Cursor_2+0x94>)
 800ce98:	4a21      	ldr	r2, [pc, #132]	; (800cf20 <Cursor_2+0x98>)
 800ce9a:	601a      	str	r2, [r3, #0]

Cursor21:
	R5 = pTab[R3];
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <Cursor_2+0x90>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	4413      	add	r3, r2
 800cea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4b1d      	ldr	r3, [pc, #116]	; (800cf24 <Cursor_2+0x9c>)
 800ceae:	601a      	str	r2, [r3, #0]
	if( (R5&1) != 0)
 800ceb0:	4b1c      	ldr	r3, [pc, #112]	; (800cf24 <Cursor_2+0x9c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0301 	and.w	r3, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d126      	bne.n	800cf0a <Cursor_2+0x82>
	{
		goto Cursor22;
	}
	R5 = pTab[R3 +10];
 800cebc:	4b16      	ldr	r3, [pc, #88]	; (800cf18 <Cursor_2+0x90>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	330a      	adds	r3, #10
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	4413      	add	r3, r2
 800cec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cecc:	461a      	mov	r2, r3
 800cece:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <Cursor_2+0x9c>)
 800ced0:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800ced2:	4b14      	ldr	r3, [pc, #80]	; (800cf24 <Cursor_2+0x9c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	085b      	lsrs	r3, r3, #1
 800ced8:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	4a12      	ldr	r2, [pc, #72]	; (800cf28 <Cursor_2+0xa0>)
 800cee0:	4413      	add	r3, r2
 800cee2:	4a0e      	ldr	r2, [pc, #56]	; (800cf1c <Cursor_2+0x94>)
 800cee4:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800cee6:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <Cursor_2+0x90>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3314      	adds	r3, #20
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4413      	add	r3, r2
 800cef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cef6:	461a      	mov	r2, r3
 800cef8:	4b0c      	ldr	r3, [pc, #48]	; (800cf2c <Cursor_2+0xa4>)
 800cefa:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800cefc:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <Cursor_2+0xa4>)
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <Cursor_2+0x94>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	b292      	uxth	r2, r2
 800cf06:	801a      	strh	r2, [r3, #0]
 800cf08:	e000      	b.n	800cf0c <Cursor_2+0x84>
		goto Cursor22;
 800cf0a:	bf00      	nop

Cursor22:
	R3 = R3 -1;
 800cf0c:	4b02      	ldr	r3, [pc, #8]	; (800cf18 <Cursor_2+0x90>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	4a01      	ldr	r2, [pc, #4]	; (800cf18 <Cursor_2+0x90>)
 800cf14:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor21;
 800cf16:	e7c1      	b.n	800ce9c <Cursor_2+0x14>
 800cf18:	20000a38 	.word	0x20000a38
 800cf1c:	20000be4 	.word	0x20000be4
 800cf20:	20000bd8 	.word	0x20000bd8
 800cf24:	20000a34 	.word	0x20000a34
 800cf28:	20000a40 	.word	0x20000a40
 800cf2c:	20000be0 	.word	0x20000be0

0800cf30 <Cursor_3>:
	return;
}

// Cursor_3(R1:pTab, R2:Col)// ���������α���  Used: R3-R6
void Cursor_3(short *pTab)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	R3 =6;
 800cf38:	4b2a      	ldr	r3, [pc, #168]	; (800cfe4 <Cursor_3+0xb4>)
 800cf3a:	2206      	movs	r2, #6
 800cf3c:	601a      	str	r2, [r3, #0]
	R4.A = (char*) &AA[204];
 800cf3e:	4b2a      	ldr	r3, [pc, #168]	; (800cfe8 <Cursor_3+0xb8>)
 800cf40:	4a2a      	ldr	r2, [pc, #168]	; (800cfec <Cursor_3+0xbc>)
 800cf42:	601a      	str	r2, [r3, #0]

Cursor31:
	R5 = pTab[R3];
 800cf44:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <Cursor_3+0xb4>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf52:	461a      	mov	r2, r3
 800cf54:	4b26      	ldr	r3, [pc, #152]	; (800cff0 <Cursor_3+0xc0>)
 800cf56:	601a      	str	r2, [r3, #0]
	if( (R5&2) != 0)
 800cf58:	4b25      	ldr	r3, [pc, #148]	; (800cff0 <Cursor_3+0xc0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0302 	and.w	r3, r3, #2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d135      	bne.n	800cfd0 <Cursor_3+0xa0>
	{
		goto Cursor32;
	}

	R5= R2 -1;
 800cf64:	4b23      	ldr	r3, [pc, #140]	; (800cff4 <Cursor_3+0xc4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	4a21      	ldr	r2, [pc, #132]	; (800cff0 <Cursor_3+0xc0>)
 800cf6c:	6013      	str	r3, [r2, #0]
	R5 = R5 &3;
 800cf6e:	4b20      	ldr	r3, [pc, #128]	; (800cff0 <Cursor_3+0xc0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	4a1e      	ldr	r2, [pc, #120]	; (800cff0 <Cursor_3+0xc0>)
 800cf78:	6013      	str	r3, [r2, #0]
	if( R5 != 0)
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <Cursor_3+0xc0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d128      	bne.n	800cfd4 <Cursor_3+0xa4>
	{
		goto Cursor32;
	}

	R5 = pTab[R3 +10];
 800cf82:	4b18      	ldr	r3, [pc, #96]	; (800cfe4 <Cursor_3+0xb4>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	330a      	adds	r3, #10
 800cf88:	005b      	lsls	r3, r3, #1
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf92:	461a      	mov	r2, r3
 800cf94:	4b16      	ldr	r3, [pc, #88]	; (800cff0 <Cursor_3+0xc0>)
 800cf96:	601a      	str	r2, [r3, #0]
	R4.A = (char*)&AA[204 - R5/2];
 800cf98:	4b15      	ldr	r3, [pc, #84]	; (800cff0 <Cursor_3+0xc0>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	085b      	lsrs	r3, r3, #1
 800cf9e:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	4a14      	ldr	r2, [pc, #80]	; (800cff8 <Cursor_3+0xc8>)
 800cfa6:	4413      	add	r3, r2
 800cfa8:	4a0f      	ldr	r2, [pc, #60]	; (800cfe8 <Cursor_3+0xb8>)
 800cfaa:	6013      	str	r3, [r2, #0]
	R6 = pTab[R3 +20];
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <Cursor_3+0xb4>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3314      	adds	r3, #20
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <Cursor_3+0xcc>)
 800cfc0:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800cfc2:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <Cursor_3+0xcc>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	4b08      	ldr	r3, [pc, #32]	; (800cfe8 <Cursor_3+0xb8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	b292      	uxth	r2, r2
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	e002      	b.n	800cfd6 <Cursor_3+0xa6>
		goto Cursor32;
 800cfd0:	bf00      	nop
 800cfd2:	e000      	b.n	800cfd6 <Cursor_3+0xa6>
		goto Cursor32;
 800cfd4:	bf00      	nop

Cursor32:
	R3 = R3 -1;
 800cfd6:	4b03      	ldr	r3, [pc, #12]	; (800cfe4 <Cursor_3+0xb4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	4a01      	ldr	r2, [pc, #4]	; (800cfe4 <Cursor_3+0xb4>)
 800cfde:	6013      	str	r3, [r2, #0]
	if( R3 >= 0)
	{
		goto Cursor31;
 800cfe0:	e7b0      	b.n	800cf44 <Cursor_3+0x14>
 800cfe2:	bf00      	nop
 800cfe4:	20000a38 	.word	0x20000a38
 800cfe8:	20000be4 	.word	0x20000be4
 800cfec:	20000bd8 	.word	0x20000bd8
 800cff0:	20000a34 	.word	0x20000a34
 800cff4:	20000bf0 	.word	0x20000bf0
 800cff8:	20000a40 	.word	0x20000a40
 800cffc:	20000be0 	.word	0x20000be0

0800d000 <Cursor_4>:
	return;
}

// Cursor_4(R1:pTab, R2:Col)// �����л��α�˵�  Used: R3-R8
void Cursor_4(short *pTab)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
	R3 = 7;
 800d008:	4b7a      	ldr	r3, [pc, #488]	; (800d1f4 <Cursor_4+0x1f4>)
 800d00a:	2207      	movs	r2, #7
 800d00c:	601a      	str	r2, [r3, #0]

Cursor40:
	R4.A = (char*) &AA[204];
 800d00e:	4b7a      	ldr	r3, [pc, #488]	; (800d1f8 <Cursor_4+0x1f8>)
 800d010:	4a7a      	ldr	r2, [pc, #488]	; (800d1fc <Cursor_4+0x1fc>)
 800d012:	601a      	str	r2, [r3, #0]
	R5 = pTab[R3];
 800d014:	4b77      	ldr	r3, [pc, #476]	; (800d1f4 <Cursor_4+0x1f4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	4413      	add	r3, r2
 800d01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d022:	461a      	mov	r2, r3
 800d024:	4b76      	ldr	r3, [pc, #472]	; (800d200 <Cursor_4+0x200>)
 800d026:	601a      	str	r2, [r3, #0]
	if((R5 & 1) == 0)
 800d028:	4b75      	ldr	r3, [pc, #468]	; (800d200 <Cursor_4+0x200>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 0301 	and.w	r3, r3, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	f040 8145 	bne.w	800d2c0 <Cursor_4+0x2c0>
	{
		goto Cursor41;
 800d036:	bf00      	nop
	}
	goto Cursor49;

Cursor41:
	R5 = pTab[R3+10];
 800d038:	4b6e      	ldr	r3, [pc, #440]	; (800d1f4 <Cursor_4+0x1f4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	330a      	adds	r3, #10
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d048:	461a      	mov	r2, r3
 800d04a:	4b6d      	ldr	r3, [pc, #436]	; (800d200 <Cursor_4+0x200>)
 800d04c:	601a      	str	r2, [r3, #0]
	R6 = pTab[R3+20];
 800d04e:	4b69      	ldr	r3, [pc, #420]	; (800d1f4 <Cursor_4+0x1f4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3314      	adds	r3, #20
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d05e:	461a      	mov	r2, r3
 800d060:	4b68      	ldr	r3, [pc, #416]	; (800d204 <Cursor_4+0x204>)
 800d062:	601a      	str	r2, [r3, #0]

	R8 =R5 -2;
 800d064:	4b66      	ldr	r3, [pc, #408]	; (800d200 <Cursor_4+0x200>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3b02      	subs	r3, #2
 800d06a:	4a67      	ldr	r2, [pc, #412]	; (800d208 <Cursor_4+0x208>)
 800d06c:	6013      	str	r3, [r2, #0]
	if (R5 != R8)
 800d06e:	4b64      	ldr	r3, [pc, #400]	; (800d200 <Cursor_4+0x200>)
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	4b65      	ldr	r3, [pc, #404]	; (800d208 <Cursor_4+0x208>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d112      	bne.n	800d0a0 <Cursor_4+0xa0>
	{
		goto Cursor42;
	}

	*(unsigned short*)R4.A =R6;
 800d07a:	4b62      	ldr	r3, [pc, #392]	; (800d204 <Cursor_4+0x204>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	4b5e      	ldr	r3, [pc, #376]	; (800d1f8 <Cursor_4+0x1f8>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	b292      	uxth	r2, r2
 800d084:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +404;
 800d086:	4b5c      	ldr	r3, [pc, #368]	; (800d1f8 <Cursor_4+0x1f8>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d08e:	4a5a      	ldr	r2, [pc, #360]	; (800d1f8 <Cursor_4+0x1f8>)
 800d090:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d092:	4b5c      	ldr	r3, [pc, #368]	; (800d204 <Cursor_4+0x204>)
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	4b58      	ldr	r3, [pc, #352]	; (800d1f8 <Cursor_4+0x1f8>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	b292      	uxth	r2, r2
 800d09c:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d09e:	e114      	b.n	800d2ca <Cursor_4+0x2ca>
		goto Cursor42;
 800d0a0:	bf00      	nop

Cursor42:
	R8 = R8 +1;
 800d0a2:	4b59      	ldr	r3, [pc, #356]	; (800d208 <Cursor_4+0x208>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	4a57      	ldr	r2, [pc, #348]	; (800d208 <Cursor_4+0x208>)
 800d0aa:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d0ac:	4b57      	ldr	r3, [pc, #348]	; (800d20c <Cursor_4+0x20c>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	4b55      	ldr	r3, [pc, #340]	; (800d208 <Cursor_4+0x208>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d128      	bne.n	800d10a <Cursor_4+0x10a>
	{
		goto Cursor43;
	}

	*(unsigned short*)R4.A =R6;
 800d0b8:	4b52      	ldr	r3, [pc, #328]	; (800d204 <Cursor_4+0x204>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b4e      	ldr	r3, [pc, #312]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	b292      	uxth	r2, r2
 800d0c2:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d0c4:	4b4c      	ldr	r3, [pc, #304]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3302      	adds	r3, #2
 800d0ca:	4a4b      	ldr	r2, [pc, #300]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0cc:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d0ce:	4b4d      	ldr	r3, [pc, #308]	; (800d204 <Cursor_4+0x204>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	4b49      	ldr	r3, [pc, #292]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	801a      	strh	r2, [r3, #0]
	R4.A = R4.A +400;
 800d0da:	4b47      	ldr	r3, [pc, #284]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d0e2:	4a45      	ldr	r2, [pc, #276]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0e4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d0e6:	4b47      	ldr	r3, [pc, #284]	; (800d204 <Cursor_4+0x204>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	4b43      	ldr	r3, [pc, #268]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	b292      	uxth	r2, r2
 800d0f0:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d0f2:	4b41      	ldr	r3, [pc, #260]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3302      	adds	r3, #2
 800d0f8:	4a3f      	ldr	r2, [pc, #252]	; (800d1f8 <Cursor_4+0x1f8>)
 800d0fa:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d0fc:	4b41      	ldr	r3, [pc, #260]	; (800d204 <Cursor_4+0x204>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	4b3d      	ldr	r3, [pc, #244]	; (800d1f8 <Cursor_4+0x1f8>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	b292      	uxth	r2, r2
 800d106:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d108:	e0df      	b.n	800d2ca <Cursor_4+0x2ca>
		goto Cursor43;
 800d10a:	bf00      	nop

Cursor43:
	R8 = R8 +1;
 800d10c:	4b3e      	ldr	r3, [pc, #248]	; (800d208 <Cursor_4+0x208>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	3301      	adds	r3, #1
 800d112:	4a3d      	ldr	r2, [pc, #244]	; (800d208 <Cursor_4+0x208>)
 800d114:	6013      	str	r3, [r2, #0]
	if (R2 != R8)
 800d116:	4b3d      	ldr	r3, [pc, #244]	; (800d20c <Cursor_4+0x20c>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	4b3b      	ldr	r3, [pc, #236]	; (800d208 <Cursor_4+0x208>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d166      	bne.n	800d1f0 <Cursor_4+0x1f0>
	{
		goto Cursor45;
	}

	*(unsigned short*)R4.A =R6;
 800d122:	4b38      	ldr	r3, [pc, #224]	; (800d204 <Cursor_4+0x204>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	4b34      	ldr	r3, [pc, #208]	; (800d1f8 <Cursor_4+0x1f8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	b292      	uxth	r2, r2
 800d12c:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d12e:	4b32      	ldr	r3, [pc, #200]	; (800d1f8 <Cursor_4+0x1f8>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3302      	adds	r3, #2
 800d134:	4a30      	ldr	r2, [pc, #192]	; (800d1f8 <Cursor_4+0x1f8>)
 800d136:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d138:	4b32      	ldr	r3, [pc, #200]	; (800d204 <Cursor_4+0x204>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	4b2e      	ldr	r3, [pc, #184]	; (800d1f8 <Cursor_4+0x1f8>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	b292      	uxth	r2, r2
 800d142:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d144:	4b2c      	ldr	r3, [pc, #176]	; (800d1f8 <Cursor_4+0x1f8>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3302      	adds	r3, #2
 800d14a:	4a2b      	ldr	r2, [pc, #172]	; (800d1f8 <Cursor_4+0x1f8>)
 800d14c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d14e:	4b2d      	ldr	r3, [pc, #180]	; (800d204 <Cursor_4+0x204>)
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	4b29      	ldr	r3, [pc, #164]	; (800d1f8 <Cursor_4+0x1f8>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	b292      	uxth	r2, r2
 800d158:	801a      	strh	r2, [r3, #0]
	R4.A = (char*) &AA[4];
 800d15a:	4b27      	ldr	r3, [pc, #156]	; (800d1f8 <Cursor_4+0x1f8>)
 800d15c:	4a2c      	ldr	r2, [pc, #176]	; (800d210 <Cursor_4+0x210>)
 800d15e:	601a      	str	r2, [r3, #0]
	*(unsigned short*)R4.A =R6;
 800d160:	4b28      	ldr	r3, [pc, #160]	; (800d204 <Cursor_4+0x204>)
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <Cursor_4+0x1f8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	b292      	uxth	r2, r2
 800d16a:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d16c:	4b22      	ldr	r3, [pc, #136]	; (800d1f8 <Cursor_4+0x1f8>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3302      	adds	r3, #2
 800d172:	4a21      	ldr	r2, [pc, #132]	; (800d1f8 <Cursor_4+0x1f8>)
 800d174:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d176:	4b23      	ldr	r3, [pc, #140]	; (800d204 <Cursor_4+0x204>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	4b1f      	ldr	r3, [pc, #124]	; (800d1f8 <Cursor_4+0x1f8>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	b292      	uxth	r2, r2
 800d180:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d182:	4b1d      	ldr	r3, [pc, #116]	; (800d1f8 <Cursor_4+0x1f8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3302      	adds	r3, #2
 800d188:	4a1b      	ldr	r2, [pc, #108]	; (800d1f8 <Cursor_4+0x1f8>)
 800d18a:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d18c:	4b1d      	ldr	r3, [pc, #116]	; (800d204 <Cursor_4+0x204>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b19      	ldr	r3, [pc, #100]	; (800d1f8 <Cursor_4+0x1f8>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	b292      	uxth	r2, r2
 800d196:	801a      	strh	r2, [r3, #0]
	R5 = pTab[R3+10];
 800d198:	4b16      	ldr	r3, [pc, #88]	; (800d1f4 <Cursor_4+0x1f4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	330a      	adds	r3, #10
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	4b15      	ldr	r3, [pc, #84]	; (800d200 <Cursor_4+0x200>)
 800d1ac:	601a      	str	r2, [r3, #0]
	if((R5 & 2) != 0)
 800d1ae:	4b14      	ldr	r3, [pc, #80]	; (800d200 <Cursor_4+0x200>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d12e      	bne.n	800d218 <Cursor_4+0x218>
	{
		goto Cursor45;
	}
	R4.A = (char*) &AA[204];
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1bc:	4a0f      	ldr	r2, [pc, #60]	; (800d1fc <Cursor_4+0x1fc>)
 800d1be:	601a      	str	r2, [r3, #0]
	R7 = R4.I +400;
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d1c8:	4a12      	ldr	r2, [pc, #72]	; (800d214 <Cursor_4+0x214>)
 800d1ca:	6013      	str	r3, [r2, #0]

Cursor44:
	R4.A= R4.A +8;
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	4a09      	ldr	r2, [pc, #36]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1d4:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d1d6:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <Cursor_4+0x204>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	4b07      	ldr	r3, [pc, #28]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	b292      	uxth	r2, r2
 800d1e0:	801a      	strh	r2, [r3, #0]
	if(R7 >= R4.I)
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <Cursor_4+0x1f8>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <Cursor_4+0x214>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d86a      	bhi.n	800d2c4 <Cursor_4+0x2c4>
	{
		goto Cursor44;
 800d1ee:	e7ed      	b.n	800d1cc <Cursor_4+0x1cc>
		goto Cursor45;
 800d1f0:	bf00      	nop
 800d1f2:	e012      	b.n	800d21a <Cursor_4+0x21a>
 800d1f4:	20000a38 	.word	0x20000a38
 800d1f8:	20000be4 	.word	0x20000be4
 800d1fc:	20000bd8 	.word	0x20000bd8
 800d200:	20000a34 	.word	0x20000a34
 800d204:	20000be0 	.word	0x20000be0
 800d208:	20000a30 	.word	0x20000a30
 800d20c:	20000bf0 	.word	0x20000bf0
 800d210:	20000a48 	.word	0x20000a48
 800d214:	20000bf8 	.word	0x20000bf8
		goto Cursor45;
 800d218:	bf00      	nop
	}
	goto Cursor49;

Cursor45:
	R8 = R8 +1;
 800d21a:	4b34      	ldr	r3, [pc, #208]	; (800d2ec <Cursor_4+0x2ec>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3301      	adds	r3, #1
 800d220:	4a32      	ldr	r2, [pc, #200]	; (800d2ec <Cursor_4+0x2ec>)
 800d222:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d224:	4b31      	ldr	r3, [pc, #196]	; (800d2ec <Cursor_4+0x2ec>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	4b31      	ldr	r3, [pc, #196]	; (800d2f0 <Cursor_4+0x2f0>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d128      	bne.n	800d282 <Cursor_4+0x282>
	{
		goto Cursor46;
	}
	*(unsigned short*)R4.A =R6;
 800d230:	4b30      	ldr	r3, [pc, #192]	; (800d2f4 <Cursor_4+0x2f4>)
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	4b30      	ldr	r3, [pc, #192]	; (800d2f8 <Cursor_4+0x2f8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	b292      	uxth	r2, r2
 800d23a:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d23c:	4b2e      	ldr	r3, [pc, #184]	; (800d2f8 <Cursor_4+0x2f8>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	3302      	adds	r3, #2
 800d242:	4a2d      	ldr	r2, [pc, #180]	; (800d2f8 <Cursor_4+0x2f8>)
 800d244:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d246:	4b2b      	ldr	r3, [pc, #172]	; (800d2f4 <Cursor_4+0x2f4>)
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	4b2b      	ldr	r3, [pc, #172]	; (800d2f8 <Cursor_4+0x2f8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	b292      	uxth	r2, r2
 800d250:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +400;
 800d252:	4b29      	ldr	r3, [pc, #164]	; (800d2f8 <Cursor_4+0x2f8>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d25a:	4a27      	ldr	r2, [pc, #156]	; (800d2f8 <Cursor_4+0x2f8>)
 800d25c:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d25e:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <Cursor_4+0x2f4>)
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <Cursor_4+0x2f8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	b292      	uxth	r2, r2
 800d268:	801a      	strh	r2, [r3, #0]
	R4.A= R4.A +2;
 800d26a:	4b23      	ldr	r3, [pc, #140]	; (800d2f8 <Cursor_4+0x2f8>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3302      	adds	r3, #2
 800d270:	4a21      	ldr	r2, [pc, #132]	; (800d2f8 <Cursor_4+0x2f8>)
 800d272:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d274:	4b1f      	ldr	r3, [pc, #124]	; (800d2f4 <Cursor_4+0x2f4>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	4b1f      	ldr	r3, [pc, #124]	; (800d2f8 <Cursor_4+0x2f8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	b292      	uxth	r2, r2
 800d27e:	801a      	strh	r2, [r3, #0]
	goto Cursor49;
 800d280:	e023      	b.n	800d2ca <Cursor_4+0x2ca>
		goto Cursor46;
 800d282:	bf00      	nop

Cursor46:
	R8 = R8 +1;
 800d284:	4b19      	ldr	r3, [pc, #100]	; (800d2ec <Cursor_4+0x2ec>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3301      	adds	r3, #1
 800d28a:	4a18      	ldr	r2, [pc, #96]	; (800d2ec <Cursor_4+0x2ec>)
 800d28c:	6013      	str	r3, [r2, #0]
	if (R8 != R2)
 800d28e:	4b17      	ldr	r3, [pc, #92]	; (800d2ec <Cursor_4+0x2ec>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <Cursor_4+0x2f0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	d116      	bne.n	800d2c8 <Cursor_4+0x2c8>
	{
		goto Cursor49;
	}
	*(unsigned short*)R4.A =R6;
 800d29a:	4b16      	ldr	r3, [pc, #88]	; (800d2f4 <Cursor_4+0x2f4>)
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b16      	ldr	r3, [pc, #88]	; (800d2f8 <Cursor_4+0x2f8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	b292      	uxth	r2, r2
 800d2a4:	801a      	strh	r2, [r3, #0]
	R4.I = R4.I +404;
 800d2a6:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <Cursor_4+0x2f8>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800d2ae:	4a12      	ldr	r2, [pc, #72]	; (800d2f8 <Cursor_4+0x2f8>)
 800d2b0:	6013      	str	r3, [r2, #0]
	*(unsigned short*)R4.A =R6;
 800d2b2:	4b10      	ldr	r3, [pc, #64]	; (800d2f4 <Cursor_4+0x2f4>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b10      	ldr	r3, [pc, #64]	; (800d2f8 <Cursor_4+0x2f8>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	b292      	uxth	r2, r2
 800d2bc:	801a      	strh	r2, [r3, #0]
 800d2be:	e004      	b.n	800d2ca <Cursor_4+0x2ca>
	goto Cursor49;
 800d2c0:	bf00      	nop
 800d2c2:	e002      	b.n	800d2ca <Cursor_4+0x2ca>
	goto Cursor49;
 800d2c4:	bf00      	nop
 800d2c6:	e000      	b.n	800d2ca <Cursor_4+0x2ca>
		goto Cursor49;
 800d2c8:	bf00      	nop

Cursor49:
	R3 = R3 +1;
 800d2ca:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <Cursor_4+0x2fc>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	4a0a      	ldr	r2, [pc, #40]	; (800d2fc <Cursor_4+0x2fc>)
 800d2d2:	6013      	str	r3, [r2, #0]
	if (R3 != 10)
 800d2d4:	4b09      	ldr	r3, [pc, #36]	; (800d2fc <Cursor_4+0x2fc>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b0a      	cmp	r3, #10
 800d2da:	d000      	beq.n	800d2de <Cursor_4+0x2de>
		goto Cursor40;
 800d2dc:	e697      	b.n	800d00e <Cursor_4+0xe>

return;
 800d2de:	bf00      	nop
}
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20000a30 	.word	0x20000a30
 800d2f0:	20000bf0 	.word	0x20000bf0
 800d2f4:	20000be0 	.word	0x20000be0
 800d2f8:	20000be4 	.word	0x20000be4
 800d2fc:	20000a38 	.word	0x20000a38

0800d300 <Send_LCD>:

// R0:pDat, R1:pTab, R2:Col, R3:Tmp, R4:pBuf, R5:WR , R6:LCD, R7:Ctrl, R8:RS
// void Send_LCD(u16* pBuf, u16 Row) // �ӻ���������һ�����ݵ�LCD Used: R3-R8
void Send_LCD(short* pTab)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	R5 = (unsigned)&AA[204];
 800d308:	4a12      	ldr	r2, [pc, #72]	; (800d354 <Send_LCD+0x54>)
 800d30a:	4b13      	ldr	r3, [pc, #76]	; (800d358 <Send_LCD+0x58>)
 800d30c:	601a      	str	r2, [r3, #0]

	LCD_Set_Posi(R2, WINDOW_Y0);
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <Send_LCD+0x5c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	b21b      	sxth	r3, r3
 800d314:	2113      	movs	r1, #19
 800d316:	4618      	mov	r0, r3
 800d318:	f004 fec4 	bl	80120a4 <LCD_Set_Posi>
	R4.I =203;
 800d31c:	4b10      	ldr	r3, [pc, #64]	; (800d360 <Send_LCD+0x60>)
 800d31e:	22cb      	movs	r2, #203	; 0xcb
 800d320:	601a      	str	r2, [r3, #0]

Send_LCD_Loop:
	LCD_Set_Pixel( *(unsigned short*)R5);
 800d322:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <Send_LCD+0x58>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	4618      	mov	r0, r3
 800d32a:	f004 ff09 	bl	8012140 <LCD_Set_Pixel>
	R5 = R5+2;
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <Send_LCD+0x58>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3302      	adds	r3, #2
 800d334:	4a08      	ldr	r2, [pc, #32]	; (800d358 <Send_LCD+0x58>)
 800d336:	6013      	str	r3, [r2, #0]
	R4.I = R4.I - 1;
 800d338:	4b09      	ldr	r3, [pc, #36]	; (800d360 <Send_LCD+0x60>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4a08      	ldr	r2, [pc, #32]	; (800d360 <Send_LCD+0x60>)
 800d340:	6013      	str	r3, [r2, #0]
	if(R4.I !=0 )
 800d342:	4b07      	ldr	r3, [pc, #28]	; (800d360 <Send_LCD+0x60>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d000      	beq.n	800d34c <Send_LCD+0x4c>
		goto Send_LCD_Loop;
 800d34a:	e7ea      	b.n	800d322 <Send_LCD+0x22>

	return;
 800d34c:	bf00      	nop
}
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000bd8 	.word	0x20000bd8
 800d358:	20000a34 	.word	0x20000a34
 800d35c:	20000bf0 	.word	0x20000bf0
 800d360:	20000be4 	.word	0x20000be4

0800d364 <Draw_Pop>:

// Draw_Pop(R2:Col, R10:pPop, R11:By0, R12:By1)// ���������� Used: R5-R7
void Draw_Pop(short* pTab)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
	R7 = 0x10001;
 800d36c:	4b85      	ldr	r3, [pc, #532]	; (800d584 <Draw_Pop+0x220>)
 800d36e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d372:	601a      	str	r2, [r3, #0]
	R5 = pTab[36];
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3348      	adds	r3, #72	; 0x48
 800d378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b82      	ldr	r3, [pc, #520]	; (800d588 <Draw_Pop+0x224>)
 800d380:	601a      	str	r2, [r3, #0]
	R6 = pTab[37];
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	334a      	adds	r3, #74	; 0x4a
 800d386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d38a:	461a      	mov	r2, r3
 800d38c:	4b7f      	ldr	r3, [pc, #508]	; (800d58c <Draw_Pop+0x228>)
 800d38e:	601a      	str	r2, [r3, #0]

	R3 = R11;
 800d390:	4b7f      	ldr	r3, [pc, #508]	; (800d590 <Draw_Pop+0x22c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a7f      	ldr	r2, [pc, #508]	; (800d594 <Draw_Pop+0x230>)
 800d396:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d398:	4b7f      	ldr	r3, [pc, #508]	; (800d598 <Draw_Pop+0x234>)
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	4b7d      	ldr	r3, [pc, #500]	; (800d594 <Draw_Pop+0x230>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d10d      	bne.n	800d3c0 <Draw_Pop+0x5c>
	{
		R5 = R5 +6;
 800d3a4:	4b78      	ldr	r3, [pc, #480]	; (800d588 <Draw_Pop+0x224>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3306      	adds	r3, #6
 800d3aa:	4a77      	ldr	r2, [pc, #476]	; (800d588 <Draw_Pop+0x224>)
 800d3ac:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d3ae:	4b77      	ldr	r3, [pc, #476]	; (800d58c <Draw_Pop+0x228>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3b0c      	subs	r3, #12
 800d3b4:	4a75      	ldr	r2, [pc, #468]	; (800d58c <Draw_Pop+0x228>)
 800d3b6:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d3b8:	4b72      	ldr	r3, [pc, #456]	; (800d584 <Draw_Pop+0x220>)
 800d3ba:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d3be:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 1;
 800d3c0:	4b73      	ldr	r3, [pc, #460]	; (800d590 <Draw_Pop+0x22c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	4a73      	ldr	r2, [pc, #460]	; (800d594 <Draw_Pop+0x230>)
 800d3c8:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d3ca:	4b73      	ldr	r3, [pc, #460]	; (800d598 <Draw_Pop+0x234>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	4b71      	ldr	r3, [pc, #452]	; (800d594 <Draw_Pop+0x230>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d10d      	bne.n	800d3f2 <Draw_Pop+0x8e>
	{
		R5 = R5 +4;
 800d3d6:	4b6c      	ldr	r3, [pc, #432]	; (800d588 <Draw_Pop+0x224>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4a6a      	ldr	r2, [pc, #424]	; (800d588 <Draw_Pop+0x224>)
 800d3de:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d3e0:	4b6a      	ldr	r3, [pc, #424]	; (800d58c <Draw_Pop+0x228>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3b08      	subs	r3, #8
 800d3e6:	4a69      	ldr	r2, [pc, #420]	; (800d58c <Draw_Pop+0x228>)
 800d3e8:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d3ea:	4b66      	ldr	r3, [pc, #408]	; (800d584 <Draw_Pop+0x220>)
 800d3ec:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d3f0:	601a      	str	r2, [r3, #0]
	}

	R3 = R11 + 2;
 800d3f2:	4b67      	ldr	r3, [pc, #412]	; (800d590 <Draw_Pop+0x22c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3302      	adds	r3, #2
 800d3f8:	4a66      	ldr	r2, [pc, #408]	; (800d594 <Draw_Pop+0x230>)
 800d3fa:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d3fc:	4b66      	ldr	r3, [pc, #408]	; (800d598 <Draw_Pop+0x234>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	4b64      	ldr	r3, [pc, #400]	; (800d594 <Draw_Pop+0x230>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d10d      	bne.n	800d424 <Draw_Pop+0xc0>
	{
		R5 = R5 +2;
 800d408:	4b5f      	ldr	r3, [pc, #380]	; (800d588 <Draw_Pop+0x224>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3302      	adds	r3, #2
 800d40e:	4a5e      	ldr	r2, [pc, #376]	; (800d588 <Draw_Pop+0x224>)
 800d410:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d412:	4b5e      	ldr	r3, [pc, #376]	; (800d58c <Draw_Pop+0x228>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3b04      	subs	r3, #4
 800d418:	4a5c      	ldr	r2, [pc, #368]	; (800d58c <Draw_Pop+0x228>)
 800d41a:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d41c:	4b59      	ldr	r3, [pc, #356]	; (800d584 <Draw_Pop+0x220>)
 800d41e:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d422:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -3;
 800d424:	4b5d      	ldr	r3, [pc, #372]	; (800d59c <Draw_Pop+0x238>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	3b03      	subs	r3, #3
 800d42a:	4a5a      	ldr	r2, [pc, #360]	; (800d594 <Draw_Pop+0x230>)
 800d42c:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d42e:	4b5a      	ldr	r3, [pc, #360]	; (800d598 <Draw_Pop+0x234>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	4b58      	ldr	r3, [pc, #352]	; (800d594 <Draw_Pop+0x230>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	429a      	cmp	r2, r3
 800d438:	d10d      	bne.n	800d456 <Draw_Pop+0xf2>
	{
		R5 = R5 +2;
 800d43a:	4b53      	ldr	r3, [pc, #332]	; (800d588 <Draw_Pop+0x224>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3302      	adds	r3, #2
 800d440:	4a51      	ldr	r2, [pc, #324]	; (800d588 <Draw_Pop+0x224>)
 800d442:	6013      	str	r3, [r2, #0]
		R6 = R6 - 4;
 800d444:	4b51      	ldr	r3, [pc, #324]	; (800d58c <Draw_Pop+0x228>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3b04      	subs	r3, #4
 800d44a:	4a50      	ldr	r2, [pc, #320]	; (800d58c <Draw_Pop+0x228>)
 800d44c:	6013      	str	r3, [r2, #0]
		R7 = 0X20002;
 800d44e:	4b4d      	ldr	r3, [pc, #308]	; (800d584 <Draw_Pop+0x220>)
 800d450:	f04f 1202 	mov.w	r2, #131074	; 0x20002
 800d454:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -2;
 800d456:	4b51      	ldr	r3, [pc, #324]	; (800d59c <Draw_Pop+0x238>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3b02      	subs	r3, #2
 800d45c:	4a4d      	ldr	r2, [pc, #308]	; (800d594 <Draw_Pop+0x230>)
 800d45e:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d460:	4b4d      	ldr	r3, [pc, #308]	; (800d598 <Draw_Pop+0x234>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	4b4b      	ldr	r3, [pc, #300]	; (800d594 <Draw_Pop+0x230>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d10d      	bne.n	800d488 <Draw_Pop+0x124>
	{
		R5 = R5 +4;
 800d46c:	4b46      	ldr	r3, [pc, #280]	; (800d588 <Draw_Pop+0x224>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3304      	adds	r3, #4
 800d472:	4a45      	ldr	r2, [pc, #276]	; (800d588 <Draw_Pop+0x224>)
 800d474:	6013      	str	r3, [r2, #0]
		R6 = R6 - 8;
 800d476:	4b45      	ldr	r3, [pc, #276]	; (800d58c <Draw_Pop+0x228>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3b08      	subs	r3, #8
 800d47c:	4a43      	ldr	r2, [pc, #268]	; (800d58c <Draw_Pop+0x228>)
 800d47e:	6013      	str	r3, [r2, #0]
		R7 = 0X40004;
 800d480:	4b40      	ldr	r3, [pc, #256]	; (800d584 <Draw_Pop+0x220>)
 800d482:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 800d486:	601a      	str	r2, [r3, #0]
	}

	R3 = R12 -1;
 800d488:	4b44      	ldr	r3, [pc, #272]	; (800d59c <Draw_Pop+0x238>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	4a41      	ldr	r2, [pc, #260]	; (800d594 <Draw_Pop+0x230>)
 800d490:	6013      	str	r3, [r2, #0]
	if( R2 == R3 )
 800d492:	4b41      	ldr	r3, [pc, #260]	; (800d598 <Draw_Pop+0x234>)
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	4b3f      	ldr	r3, [pc, #252]	; (800d594 <Draw_Pop+0x230>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d10d      	bne.n	800d4ba <Draw_Pop+0x156>
	{
		R5 = R5 +6;
 800d49e:	4b3a      	ldr	r3, [pc, #232]	; (800d588 <Draw_Pop+0x224>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3306      	adds	r3, #6
 800d4a4:	4a38      	ldr	r2, [pc, #224]	; (800d588 <Draw_Pop+0x224>)
 800d4a6:	6013      	str	r3, [r2, #0]
		R6 = R6 - 12;
 800d4a8:	4b38      	ldr	r3, [pc, #224]	; (800d58c <Draw_Pop+0x228>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	3b0c      	subs	r3, #12
 800d4ae:	4a37      	ldr	r2, [pc, #220]	; (800d58c <Draw_Pop+0x228>)
 800d4b0:	6013      	str	r3, [r2, #0]
		R7 = 0X80008;
 800d4b2:	4b34      	ldr	r3, [pc, #208]	; (800d584 <Draw_Pop+0x220>)
 800d4b4:	f04f 1208 	mov.w	r2, #524296	; 0x80008
 800d4b8:	601a      	str	r2, [r3, #0]
	}

//    ADD     R4,  SP, R5
	R4.A = (char*) &AA[204-R5/2];
 800d4ba:	4b33      	ldr	r3, [pc, #204]	; (800d588 <Draw_Pop+0x224>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	085b      	lsrs	r3, r3, #1
 800d4c0:	f1c3 03cc 	rsb	r3, r3, #204	; 0xcc
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	4a36      	ldr	r2, [pc, #216]	; (800d5a0 <Draw_Pop+0x23c>)
 800d4c8:	4413      	add	r3, r2
 800d4ca:	4a36      	ldr	r2, [pc, #216]	; (800d5a4 <Draw_Pop+0x240>)
 800d4cc:	6013      	str	r3, [r2, #0]
	R8 = pTab[39];
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	334e      	adds	r3, #78	; 0x4e
 800d4d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	4b33      	ldr	r3, [pc, #204]	; (800d5a8 <Draw_Pop+0x244>)
 800d4da:	601a      	str	r2, [r3, #0]
	R9 = pTab[40];
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3350      	adds	r3, #80	; 0x50
 800d4e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	4b31      	ldr	r3, [pc, #196]	; (800d5ac <Draw_Pop+0x248>)
 800d4e8:	601a      	str	r2, [r3, #0]
	R3 =  *(unsigned short*) R10;
 800d4ea:	4b31      	ldr	r3, [pc, #196]	; (800d5b0 <Draw_Pop+0x24c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	4b28      	ldr	r3, [pc, #160]	; (800d594 <Draw_Pop+0x230>)
 800d4f4:	601a      	str	r2, [r3, #0]
	R10= R10+2;
 800d4f6:	4b2e      	ldr	r3, [pc, #184]	; (800d5b0 <Draw_Pop+0x24c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3302      	adds	r3, #2
 800d4fc:	4a2c      	ldr	r2, [pc, #176]	; (800d5b0 <Draw_Pop+0x24c>)
 800d4fe:	6013      	str	r3, [r2, #0]

	if(R8 == 0)
 800d500:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <Draw_Pop+0x244>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d100      	bne.n	800d50a <Draw_Pop+0x1a6>
	{
		goto Pop_Loop_Penetrate;
 800d508:	e054      	b.n	800d5b4 <Draw_Pop+0x250>
	}

Pop_Loop:
 800d50a:	bf00      	nop
	if((R3 & R7) != 0)
 800d50c:	4b21      	ldr	r3, [pc, #132]	; (800d594 <Draw_Pop+0x230>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <Draw_Pop+0x220>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4013      	ands	r3, r2
 800d516:	2b00      	cmp	r3, #0
 800d518:	d006      	beq.n	800d528 <Draw_Pop+0x1c4>
		R9 = *R4.A;
 800d51a:	4b22      	ldr	r3, [pc, #136]	; (800d5a4 <Draw_Pop+0x240>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	461a      	mov	r2, r3
 800d522:	4b22      	ldr	r3, [pc, #136]	; (800d5ac <Draw_Pop+0x248>)
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	e005      	b.n	800d534 <Draw_Pop+0x1d0>
	else
		R8 = *R4.A;
 800d528:	4b1e      	ldr	r3, [pc, #120]	; (800d5a4 <Draw_Pop+0x240>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	4b1d      	ldr	r3, [pc, #116]	; (800d5a8 <Draw_Pop+0x244>)
 800d532:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d534:	4b1b      	ldr	r3, [pc, #108]	; (800d5a4 <Draw_Pop+0x240>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	4a1a      	ldr	r2, [pc, #104]	; (800d5a4 <Draw_Pop+0x240>)
 800d53c:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d53e:	4b13      	ldr	r3, [pc, #76]	; (800d58c <Draw_Pop+0x228>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3b02      	subs	r3, #2
 800d544:	4a11      	ldr	r2, [pc, #68]	; (800d58c <Draw_Pop+0x228>)
 800d546:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d548:	4b10      	ldr	r3, [pc, #64]	; (800d58c <Draw_Pop+0x228>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d066      	beq.n	800d61e <Draw_Pop+0x2ba>
		return;

	if((R7 & 0x80000000) != 0 )
 800d550:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <Draw_Pop+0x220>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	da0f      	bge.n	800d578 <Draw_Pop+0x214>
	{
		R3 = *(unsigned short*) R10;
 800d558:	4b15      	ldr	r3, [pc, #84]	; (800d5b0 <Draw_Pop+0x24c>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	4b0c      	ldr	r3, [pc, #48]	; (800d594 <Draw_Pop+0x230>)
 800d562:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d564:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <Draw_Pop+0x24c>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3302      	adds	r3, #2
 800d56a:	4a11      	ldr	r2, [pc, #68]	; (800d5b0 <Draw_Pop+0x24c>)
 800d56c:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800d56e:	4b05      	ldr	r3, [pc, #20]	; (800d584 <Draw_Pop+0x220>)
 800d570:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	e7c9      	b.n	800d50c <Draw_Pop+0x1a8>
	}
	else
		R7 = R7 << 1;
 800d578:	4b02      	ldr	r3, [pc, #8]	; (800d584 <Draw_Pop+0x220>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	4a01      	ldr	r2, [pc, #4]	; (800d584 <Draw_Pop+0x220>)
 800d580:	6013      	str	r3, [r2, #0]
	goto Pop_Loop;
 800d582:	e7c3      	b.n	800d50c <Draw_Pop+0x1a8>
 800d584:	20000bf8 	.word	0x20000bf8
 800d588:	20000a34 	.word	0x20000a34
 800d58c:	20000be0 	.word	0x20000be0
 800d590:	20000bdc 	.word	0x20000bdc
 800d594:	20000a38 	.word	0x20000a38
 800d598:	20000bf0 	.word	0x20000bf0
 800d59c:	20000bec 	.word	0x20000bec
 800d5a0:	20000a40 	.word	0x20000a40
 800d5a4:	20000be4 	.word	0x20000be4
 800d5a8:	20000a30 	.word	0x20000a30
 800d5ac:	20000bf4 	.word	0x20000bf4
 800d5b0:	20000bfc 	.word	0x20000bfc

Pop_Loop_Penetrate:
	if((R2 & R7) != 0)
 800d5b4:	4b1e      	ldr	r3, [pc, #120]	; (800d630 <Draw_Pop+0x2cc>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	4b1e      	ldr	r3, [pc, #120]	; (800d634 <Draw_Pop+0x2d0>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4013      	ands	r3, r2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <Draw_Pop+0x26a>
		R9 = *R4.A;
 800d5c2:	4b1d      	ldr	r3, [pc, #116]	; (800d638 <Draw_Pop+0x2d4>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4b1c      	ldr	r3, [pc, #112]	; (800d63c <Draw_Pop+0x2d8>)
 800d5cc:	601a      	str	r2, [r3, #0]
	R4.A = R4.A + 1;
 800d5ce:	4b1a      	ldr	r3, [pc, #104]	; (800d638 <Draw_Pop+0x2d4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	4a18      	ldr	r2, [pc, #96]	; (800d638 <Draw_Pop+0x2d4>)
 800d5d6:	6013      	str	r3, [r2, #0]
	R6 = R6 - 2;
 800d5d8:	4b19      	ldr	r3, [pc, #100]	; (800d640 <Draw_Pop+0x2dc>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3b02      	subs	r3, #2
 800d5de:	4a18      	ldr	r2, [pc, #96]	; (800d640 <Draw_Pop+0x2dc>)
 800d5e0:	6013      	str	r3, [r2, #0]
	if(R6 == 0 )
 800d5e2:	4b17      	ldr	r3, [pc, #92]	; (800d640 <Draw_Pop+0x2dc>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d01b      	beq.n	800d622 <Draw_Pop+0x2be>
		return;

	if((R7 & 0x80000000) != 0 )
 800d5ea:	4b12      	ldr	r3, [pc, #72]	; (800d634 <Draw_Pop+0x2d0>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	da0f      	bge.n	800d612 <Draw_Pop+0x2ae>
	{
		R3 = *(unsigned short*) R10;
 800d5f2:	4b14      	ldr	r3, [pc, #80]	; (800d644 <Draw_Pop+0x2e0>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4b13      	ldr	r3, [pc, #76]	; (800d648 <Draw_Pop+0x2e4>)
 800d5fc:	601a      	str	r2, [r3, #0]
		R10= R10+2;
 800d5fe:	4b11      	ldr	r3, [pc, #68]	; (800d644 <Draw_Pop+0x2e0>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3302      	adds	r3, #2
 800d604:	4a0f      	ldr	r2, [pc, #60]	; (800d644 <Draw_Pop+0x2e0>)
 800d606:	6013      	str	r3, [r2, #0]
		R7 = 0x10001;
 800d608:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <Draw_Pop+0x2d0>)
 800d60a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	e7d0      	b.n	800d5b4 <Draw_Pop+0x250>
		}
	else
		R7 = R7 << 1;
 800d612:	4b08      	ldr	r3, [pc, #32]	; (800d634 <Draw_Pop+0x2d0>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	4a06      	ldr	r2, [pc, #24]	; (800d634 <Draw_Pop+0x2d0>)
 800d61a:	6013      	str	r3, [r2, #0]
	goto Pop_Loop_Penetrate;
 800d61c:	e7ca      	b.n	800d5b4 <Draw_Pop+0x250>
		return;
 800d61e:	bf00      	nop
 800d620:	e000      	b.n	800d624 <Draw_Pop+0x2c0>
		return;
 800d622:	bf00      	nop

}
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	20000bf0 	.word	0x20000bf0
 800d634:	20000bf8 	.word	0x20000bf8
 800d638:	20000be4 	.word	0x20000be4
 800d63c:	20000bf4 	.word	0x20000bf4
 800d640:	20000be0 	.word	0x20000be0
 800d644:	20000bfc 	.word	0x20000bfc
 800d648:	20000a38 	.word	0x20000a38

0800d64c <DrawWindow>:

// R0:pDat, R1:pTab, R2:Col, R3:Var, R4:pCol, R5:Cnt, R6:Tmp,
// R0:pBuf, R1:pTab, R2:Col, R3:LCD, R4:Ctrl, R5:WR,  R6:Tmp, R7:Cnt, R8:RS
void DrawWindow(char* pBuf, short* pTab)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
	R0 = (unsigned)&pBuf[0];
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a9b      	ldr	r2, [pc, #620]	; (800d8c8 <DrawWindow+0x27c>)
 800d65a:	6013      	str	r3, [r2, #0]
	R2 = 0;
 800d65c:	4b9b      	ldr	r3, [pc, #620]	; (800d8cc <DrawWindow+0x280>)
 800d65e:	2200      	movs	r2, #0
 800d660:	601a      	str	r2, [r3, #0]
	R10 = &pBuf[900];
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800d668:	4a99      	ldr	r2, [pc, #612]	; (800d8d0 <DrawWindow+0x284>)
 800d66a:	6013      	str	r3, [r2, #0]
	R11 = pTab[34];
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	3344      	adds	r3, #68	; 0x44
 800d670:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d674:	461a      	mov	r2, r3
 800d676:	4b97      	ldr	r3, [pc, #604]	; (800d8d4 <DrawWindow+0x288>)
 800d678:	601a      	str	r2, [r3, #0]
	R12 = pTab[35];
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	3346      	adds	r3, #70	; 0x46
 800d67e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d682:	461a      	mov	r2, r3
 800d684:	4b94      	ldr	r3, [pc, #592]	; (800d8d8 <DrawWindow+0x28c>)
 800d686:	601a      	str	r2, [r3, #0]
	R12 = R11 + R12;
 800d688:	4b92      	ldr	r3, [pc, #584]	; (800d8d4 <DrawWindow+0x288>)
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	4b92      	ldr	r3, [pc, #584]	; (800d8d8 <DrawWindow+0x28c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4413      	add	r3, r2
 800d692:	4a91      	ldr	r2, [pc, #580]	; (800d8d8 <DrawWindow+0x28c>)
 800d694:	6013      	str	r3, [r2, #0]

Draw_Loop:
	if (R2 == 0)
 800d696:	4b8d      	ldr	r3, [pc, #564]	; (800d8cc <DrawWindow+0x280>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <DrawWindow+0x58>
	{
		Buld_0();
 800d69e:	f7ff f93b 	bl	800c918 <Buld_0>
		goto Draw_Wave;
 800d6a2:	e064      	b.n	800d76e <DrawWindow+0x122>
	}

	if (R2 == 302)
 800d6a4:	4b89      	ldr	r3, [pc, #548]	; (800d8cc <DrawWindow+0x280>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d6ac:	d102      	bne.n	800d6b4 <DrawWindow+0x68>
	{
		Buld_0();
 800d6ae:	f7ff f933 	bl	800c918 <Buld_0>
		goto Draw_Wave;
 800d6b2:	e05c      	b.n	800d76e <DrawWindow+0x122>
	}

	if (R2 == 1)
 800d6b4:	4b85      	ldr	r3, [pc, #532]	; (800d8cc <DrawWindow+0x280>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d102      	bne.n	800d6c2 <DrawWindow+0x76>
	{
		Buld_1();
 800d6bc:	f7ff f938 	bl	800c930 <Buld_1>
		goto Draw_Wave;
 800d6c0:	e055      	b.n	800d76e <DrawWindow+0x122>
	}
	R3 = 301;
 800d6c2:	4b86      	ldr	r3, [pc, #536]	; (800d8dc <DrawWindow+0x290>)
 800d6c4:	f240 122d 	movw	r2, #301	; 0x12d
 800d6c8:	601a      	str	r2, [r3, #0]

	if (R2 == R3)
 800d6ca:	4b80      	ldr	r3, [pc, #512]	; (800d8cc <DrawWindow+0x280>)
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	4b83      	ldr	r3, [pc, #524]	; (800d8dc <DrawWindow+0x290>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d102      	bne.n	800d6dc <DrawWindow+0x90>
	{
		Buld_1();
 800d6d6:	f7ff f92b 	bl	800c930 <Buld_1>
		goto Draw_Wave;
 800d6da:	e048      	b.n	800d76e <DrawWindow+0x122>
	}

	R3 = R2 - 1;
 800d6dc:	4b7b      	ldr	r3, [pc, #492]	; (800d8cc <DrawWindow+0x280>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	4a7e      	ldr	r2, [pc, #504]	; (800d8dc <DrawWindow+0x290>)
 800d6e4:	6013      	str	r3, [r2, #0]
	R6 = 25;
 800d6e6:	4b7e      	ldr	r3, [pc, #504]	; (800d8e0 <DrawWindow+0x294>)
 800d6e8:	2219      	movs	r2, #25
 800d6ea:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800d6ec:	4b7b      	ldr	r3, [pc, #492]	; (800d8dc <DrawWindow+0x290>)
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	4b7b      	ldr	r3, [pc, #492]	; (800d8e0 <DrawWindow+0x294>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f8:	4a7a      	ldr	r2, [pc, #488]	; (800d8e4 <DrawWindow+0x298>)
 800d6fa:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800d6fc:	4b79      	ldr	r3, [pc, #484]	; (800d8e4 <DrawWindow+0x298>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a77      	ldr	r2, [pc, #476]	; (800d8e0 <DrawWindow+0x294>)
 800d702:	6812      	ldr	r2, [r2, #0]
 800d704:	fb02 f303 	mul.w	r3, r2, r3
 800d708:	4a76      	ldr	r2, [pc, #472]	; (800d8e4 <DrawWindow+0x298>)
 800d70a:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800d70c:	4b73      	ldr	r3, [pc, #460]	; (800d8dc <DrawWindow+0x290>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	4b74      	ldr	r3, [pc, #464]	; (800d8e4 <DrawWindow+0x298>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	4a73      	ldr	r2, [pc, #460]	; (800d8e4 <DrawWindow+0x298>)
 800d718:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800d71a:	4b72      	ldr	r3, [pc, #456]	; (800d8e4 <DrawWindow+0x298>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <DrawWindow+0xdc>
	{
		Buld_4();
 800d722:	f7ff f975 	bl	800ca10 <Buld_4>
		goto Draw_Wave;
 800d726:	e022      	b.n	800d76e <DrawWindow+0x122>
	}

	R6 = 5;
 800d728:	4b6d      	ldr	r3, [pc, #436]	; (800d8e0 <DrawWindow+0x294>)
 800d72a:	2205      	movs	r2, #5
 800d72c:	601a      	str	r2, [r3, #0]
	R5 = R3/R6;
 800d72e:	4b6b      	ldr	r3, [pc, #428]	; (800d8dc <DrawWindow+0x290>)
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	4b6b      	ldr	r3, [pc, #428]	; (800d8e0 <DrawWindow+0x294>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	fbb2 f3f3 	udiv	r3, r2, r3
 800d73a:	4a6a      	ldr	r2, [pc, #424]	; (800d8e4 <DrawWindow+0x298>)
 800d73c:	6013      	str	r3, [r2, #0]
	R5 = R5*R6;
 800d73e:	4b69      	ldr	r3, [pc, #420]	; (800d8e4 <DrawWindow+0x298>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a67      	ldr	r2, [pc, #412]	; (800d8e0 <DrawWindow+0x294>)
 800d744:	6812      	ldr	r2, [r2, #0]
 800d746:	fb02 f303 	mul.w	r3, r2, r3
 800d74a:	4a66      	ldr	r2, [pc, #408]	; (800d8e4 <DrawWindow+0x298>)
 800d74c:	6013      	str	r3, [r2, #0]
	R5 = R3 - R5;
 800d74e:	4b63      	ldr	r3, [pc, #396]	; (800d8dc <DrawWindow+0x290>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	4b64      	ldr	r3, [pc, #400]	; (800d8e4 <DrawWindow+0x298>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	4a62      	ldr	r2, [pc, #392]	; (800d8e4 <DrawWindow+0x298>)
 800d75a:	6013      	str	r3, [r2, #0]

	if (R5 == 0)
 800d75c:	4b61      	ldr	r3, [pc, #388]	; (800d8e4 <DrawWindow+0x298>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <DrawWindow+0x11e>
	{
		Buld_3();
 800d764:	f7ff f92e 	bl	800c9c4 <Buld_3>
		goto Draw_Wave;
 800d768:	e001      	b.n	800d76e <DrawWindow+0x122>
	}
	Buld_2();
 800d76a:	f7ff f909 	bl	800c980 <Buld_2>

Draw_Wave:
	if( (R2<3) || (R2 >= 300) ) //3 to 299
 800d76e:	4b57      	ldr	r3, [pc, #348]	; (800d8cc <DrawWindow+0x280>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b02      	cmp	r3, #2
 800d774:	d96c      	bls.n	800d850 <DrawWindow+0x204>
 800d776:	4b55      	ldr	r3, [pc, #340]	; (800d8cc <DrawWindow+0x280>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d77e:	d267      	bcs.n	800d850 <DrawWindow+0x204>
	{
		goto Horozontal;
	}
	R3 = pTab[3]; //Ch_3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	3306      	adds	r3, #6
 800d784:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d788:	461a      	mov	r2, r3
 800d78a:	4b54      	ldr	r3, [pc, #336]	; (800d8dc <DrawWindow+0x290>)
 800d78c:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800d78e:	4b53      	ldr	r3, [pc, #332]	; (800d8dc <DrawWindow+0x290>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0304 	and.w	r3, r3, #4
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10f      	bne.n	800d7ba <DrawWindow+0x16e>
	{
		R3 = 46;
 800d79a:	4b50      	ldr	r3, [pc, #320]	; (800d8dc <DrawWindow+0x290>)
 800d79c:	222e      	movs	r2, #46	; 0x2e
 800d79e:	601a      	str	r2, [r3, #0]
		R4.I = pTab[13];
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	331a      	adds	r3, #26
 800d7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4b4f      	ldr	r3, [pc, #316]	; (800d8e8 <DrawWindow+0x29c>)
 800d7ac:	601a      	str	r2, [r3, #0]
		R8 = 8;
 800d7ae:	4b4f      	ldr	r3, [pc, #316]	; (800d8ec <DrawWindow+0x2a0>)
 800d7b0:	2208      	movs	r2, #8
 800d7b2:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	f7ff f951 	bl	800ca5c <Draw_Digit_Analog>
	}

	R3 =pTab[2]; //Ch_2
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4b45      	ldr	r3, [pc, #276]	; (800d8dc <DrawWindow+0x290>)
 800d7c6:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800d7c8:	4b44      	ldr	r3, [pc, #272]	; (800d8dc <DrawWindow+0x290>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 0304 	and.w	r3, r3, #4
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10f      	bne.n	800d7f4 <DrawWindow+0x1a8>
	{
		R3 = 44;
 800d7d4:	4b41      	ldr	r3, [pc, #260]	; (800d8dc <DrawWindow+0x290>)
 800d7d6:	222c      	movs	r2, #44	; 0x2c
 800d7d8:	601a      	str	r2, [r3, #0]
		R4.I = pTab[12];
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	3318      	adds	r3, #24
 800d7de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	4b40      	ldr	r3, [pc, #256]	; (800d8e8 <DrawWindow+0x29c>)
 800d7e6:	601a      	str	r2, [r3, #0]
		R8 = 4;
 800d7e8:	4b40      	ldr	r3, [pc, #256]	; (800d8ec <DrawWindow+0x2a0>)
 800d7ea:	2204      	movs	r2, #4
 800d7ec:	601a      	str	r2, [r3, #0]
		Draw_Digit_Analog(1);
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	f7ff f934 	bl	800ca5c <Draw_Digit_Analog>
	}

	R3 =pTab[1]; //Ch_1
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	3302      	adds	r3, #2
 800d7f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	4b37      	ldr	r3, [pc, #220]	; (800d8dc <DrawWindow+0x290>)
 800d800:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800d802:	4b36      	ldr	r3, [pc, #216]	; (800d8dc <DrawWindow+0x290>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f003 0304 	and.w	r3, r3, #4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10a      	bne.n	800d824 <DrawWindow+0x1d8>
	{
		R3 = 42;
 800d80e:	4b33      	ldr	r3, [pc, #204]	; (800d8dc <DrawWindow+0x290>)
 800d810:	222a      	movs	r2, #42	; 0x2a
 800d812:	601a      	str	r2, [r3, #0]
		R4.A = &pBuf[300];
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800d81a:	4a33      	ldr	r2, [pc, #204]	; (800d8e8 <DrawWindow+0x29c>)
 800d81c:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800d81e:	2000      	movs	r0, #0
 800d820:	f7ff f91c 	bl	800ca5c <Draw_Digit_Analog>
	}

	R3 =pTab[0]; //Ch_0
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d82a:	461a      	mov	r2, r3
 800d82c:	4b2b      	ldr	r3, [pc, #172]	; (800d8dc <DrawWindow+0x290>)
 800d82e:	601a      	str	r2, [r3, #0]
	if((R3 & 4) == 0)
 800d830:	4b2a      	ldr	r3, [pc, #168]	; (800d8dc <DrawWindow+0x290>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f003 0304 	and.w	r3, r3, #4
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10b      	bne.n	800d854 <DrawWindow+0x208>
	{
		R3 = 40;
 800d83c:	4b27      	ldr	r3, [pc, #156]	; (800d8dc <DrawWindow+0x290>)
 800d83e:	2228      	movs	r2, #40	; 0x28
 800d840:	601a      	str	r2, [r3, #0]
		R4.A = pBuf;
 800d842:	4a29      	ldr	r2, [pc, #164]	; (800d8e8 <DrawWindow+0x29c>)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6013      	str	r3, [r2, #0]
		Draw_Digit_Analog(0);
 800d848:	2000      	movs	r0, #0
 800d84a:	f7ff f907 	bl	800ca5c <Draw_Digit_Analog>
 800d84e:	e002      	b.n	800d856 <DrawWindow+0x20a>
		goto Horozontal;
 800d850:	bf00      	nop
 800d852:	e000      	b.n	800d856 <DrawWindow+0x20a>
	}

Horozontal:
 800d854:	bf00      	nop
	if(R2 == 0)
 800d856:	4b1d      	ldr	r3, [pc, #116]	; (800d8cc <DrawWindow+0x280>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d103      	bne.n	800d866 <DrawWindow+0x21a>
	{
		Cursor_0(pTab);
 800d85e:	6838      	ldr	r0, [r7, #0]
 800d860:	f7ff fa14 	bl	800cc8c <Cursor_0>
		goto Vertical;
 800d864:	e047      	b.n	800d8f6 <DrawWindow+0x2aa>
	}

	if(R2 == 302)
 800d866:	4b19      	ldr	r3, [pc, #100]	; (800d8cc <DrawWindow+0x280>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d86e:	d103      	bne.n	800d878 <DrawWindow+0x22c>
	{
		Cursor_0(pTab);
 800d870:	6838      	ldr	r0, [r7, #0]
 800d872:	f7ff fa0b 	bl	800cc8c <Cursor_0>
		goto Vertical;
 800d876:	e03e      	b.n	800d8f6 <DrawWindow+0x2aa>
	}

	if(R2 == 1)
 800d878:	4b14      	ldr	r3, [pc, #80]	; (800d8cc <DrawWindow+0x280>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d103      	bne.n	800d888 <DrawWindow+0x23c>
	{
		Cursor_1(pTab);
 800d880:	6838      	ldr	r0, [r7, #0]
 800d882:	f7ff fa8d 	bl	800cda0 <Cursor_1>
		goto Vertical;
 800d886:	e036      	b.n	800d8f6 <DrawWindow+0x2aa>
	}
	R5 = 301;
 800d888:	4b16      	ldr	r3, [pc, #88]	; (800d8e4 <DrawWindow+0x298>)
 800d88a:	f240 122d 	movw	r2, #301	; 0x12d
 800d88e:	601a      	str	r2, [r3, #0]
	if(R2 == R5)
 800d890:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <DrawWindow+0x280>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	4b13      	ldr	r3, [pc, #76]	; (800d8e4 <DrawWindow+0x298>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d103      	bne.n	800d8a4 <DrawWindow+0x258>
	{
		Cursor_1(pTab);
 800d89c:	6838      	ldr	r0, [r7, #0]
 800d89e:	f7ff fa7f 	bl	800cda0 <Cursor_1>
		goto Vertical;
 800d8a2:	e028      	b.n	800d8f6 <DrawWindow+0x2aa>
	}

	if(R2 == 2)
 800d8a4:	4b09      	ldr	r3, [pc, #36]	; (800d8cc <DrawWindow+0x280>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d103      	bne.n	800d8b4 <DrawWindow+0x268>
	{
		Cursor_2(pTab);
 800d8ac:	6838      	ldr	r0, [r7, #0]
 800d8ae:	f7ff faeb 	bl	800ce88 <Cursor_2>
		goto Vertical;
 800d8b2:	e020      	b.n	800d8f6 <DrawWindow+0x2aa>
	}
	if(R2 == 300)
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <DrawWindow+0x280>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d8bc:	d118      	bne.n	800d8f0 <DrawWindow+0x2a4>
	{
		Cursor_2(pTab);
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f7ff fae2 	bl	800ce88 <Cursor_2>
		goto Vertical;
 800d8c4:	e017      	b.n	800d8f6 <DrawWindow+0x2aa>
 800d8c6:	bf00      	nop
 800d8c8:	20000a3c 	.word	0x20000a3c
 800d8cc:	20000bf0 	.word	0x20000bf0
 800d8d0:	20000bfc 	.word	0x20000bfc
 800d8d4:	20000bdc 	.word	0x20000bdc
 800d8d8:	20000bec 	.word	0x20000bec
 800d8dc:	20000a38 	.word	0x20000a38
 800d8e0:	20000be0 	.word	0x20000be0
 800d8e4:	20000a34 	.word	0x20000a34
 800d8e8:	20000be4 	.word	0x20000be4
 800d8ec:	20000a30 	.word	0x20000a30
	}
	Cursor_3(pTab);
 800d8f0:	6838      	ldr	r0, [r7, #0]
 800d8f2:	f7ff fb1d 	bl	800cf30 <Cursor_3>

Vertical:
	Cursor_4(pTab);
 800d8f6:	6838      	ldr	r0, [r7, #0]
 800d8f8:	f7ff fb82 	bl	800d000 <Cursor_4>

	R3 = pTab[38];
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	334c      	adds	r3, #76	; 0x4c
 800d900:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d904:	461a      	mov	r2, r3
 800d906:	4b17      	ldr	r3, [pc, #92]	; (800d964 <DrawWindow+0x318>)
 800d908:	601a      	str	r2, [r3, #0]
	if( (R3&1) !=1 )
 800d90a:	4b16      	ldr	r3, [pc, #88]	; (800d964 <DrawWindow+0x318>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00f      	beq.n	800d936 <DrawWindow+0x2ea>
	{
		goto Send;
	}

	if(R2 < R11)
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <DrawWindow+0x31c>)
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b14      	ldr	r3, [pc, #80]	; (800d96c <DrawWindow+0x320>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d30b      	bcc.n	800d93a <DrawWindow+0x2ee>
	{
		goto Send;
	}

	if(R2 < R12)
 800d922:	4b11      	ldr	r3, [pc, #68]	; (800d968 <DrawWindow+0x31c>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	4b12      	ldr	r3, [pc, #72]	; (800d970 <DrawWindow+0x324>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d207      	bcs.n	800d93e <DrawWindow+0x2f2>
	{
		Draw_Pop(pTab);
 800d92e:	6838      	ldr	r0, [r7, #0]
 800d930:	f7ff fd18 	bl	800d364 <Draw_Pop>
 800d934:	e004      	b.n	800d940 <DrawWindow+0x2f4>
		goto Send;
 800d936:	bf00      	nop
 800d938:	e002      	b.n	800d940 <DrawWindow+0x2f4>
		goto Send;
 800d93a:	bf00      	nop
 800d93c:	e000      	b.n	800d940 <DrawWindow+0x2f4>
	}

Send:
 800d93e:	bf00      	nop
	Send_LCD(pTab);
 800d940:	6838      	ldr	r0, [r7, #0]
 800d942:	f7ff fcdd 	bl	800d300 <Send_LCD>

	if( R2 != 302 )
 800d946:	4b08      	ldr	r3, [pc, #32]	; (800d968 <DrawWindow+0x31c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800d94e:	d005      	beq.n	800d95c <DrawWindow+0x310>
	{
		R2 =R2 +1;
 800d950:	4b05      	ldr	r3, [pc, #20]	; (800d968 <DrawWindow+0x31c>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3301      	adds	r3, #1
 800d956:	4a04      	ldr	r2, [pc, #16]	; (800d968 <DrawWindow+0x31c>)
 800d958:	6013      	str	r3, [r2, #0]
		goto Draw_Loop;
 800d95a:	e69c      	b.n	800d696 <DrawWindow+0x4a>
	}

	return;
 800d95c:	bf00      	nop
}
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20000a38 	.word	0x20000a38
 800d968:	20000bf0 	.word	0x20000bf0
 800d96c:	20000bdc 	.word	0x20000bdc
 800d970:	20000bec 	.word	0x20000bec

0800d974 <DispChar8x14>:
//+======+======+======+======+======+======+======+======+======+======+======+

char  WaveBuf[TRACK1_SIZE + TRACK2_SIZE + TRACK23_SIZE + POP_SIZE]; // ��ʾ������

void DispChar8x14(char Mode, char Code)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	460a      	mov	r2, r1
 800d97e:	71fb      	strb	r3, [r7, #7]
 800d980:	4613      	mov	r3, r2
 800d982:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<8; ++i)
 800d984:	2300      	movs	r3, #0
 800d986:	81fb      	strh	r3, [r7, #14]
 800d988:	e06d      	b.n	800da66 <DispChar8x14+0xf2>
  {
    if(Mode & SYMB)
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	f003 0310 	and.w	r3, r3, #16
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00a      	beq.n	800d9aa <DispChar8x14+0x36>
    	k = SYMB8x14[(Code - '@')*8 + i];
 800d994:	79bb      	ldrb	r3, [r7, #6]
 800d996:	3b40      	subs	r3, #64	; 0x40
 800d998:	00da      	lsls	r2, r3, #3
 800d99a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d99e:	4413      	add	r3, r2
 800d9a0:	4a35      	ldr	r2, [pc, #212]	; (800da78 <DispChar8x14+0x104>)
 800d9a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9a6:	817b      	strh	r3, [r7, #10]
 800d9a8:	e005      	b.n	800d9b6 <DispChar8x14+0x42>
    else
        k = CHAR8x14[i];
 800d9aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d9ae:	4a33      	ldr	r2, [pc, #204]	; (800da7c <DispChar8x14+0x108>)
 800d9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9b4:	817b      	strh	r3, [r7, #10]

    if(Mode & VOID)
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	f003 0320 	and.w	r3, r3, #32
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <DispChar8x14+0x66>
    	k &= (i%2)? 0xAAAA : 0x5555;
 800d9c0:	89fb      	ldrh	r3, [r7, #14]
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d001      	beq.n	800d9d0 <DispChar8x14+0x5c>
 800d9cc:	4a2c      	ldr	r2, [pc, #176]	; (800da80 <DispChar8x14+0x10c>)
 800d9ce:	e001      	b.n	800d9d4 <DispChar8x14+0x60>
 800d9d0:	f245 5255 	movw	r2, #21845	; 0x5555
 800d9d4:	897b      	ldrh	r3, [r7, #10]
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800d9da:	4b2a      	ldr	r3, [pc, #168]	; (800da84 <DispChar8x14+0x110>)
 800d9dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9e0:	4a29      	ldr	r2, [pc, #164]	; (800da88 <DispChar8x14+0x114>)
 800d9e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f004 fb5b 	bl	80120a4 <LCD_Set_Posi>
    for(j=0; j<14; ++j)
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	81bb      	strh	r3, [r7, #12]
 800d9f2:	e027      	b.n	800da44 <DispChar8x14+0xd0>
    {
      if(k & 4)
 800d9f4:	897b      	ldrh	r3, [r7, #10]
 800d9f6:	f003 0304 	and.w	r3, r3, #4
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00d      	beq.n	800da1a <DispChar8x14+0xa6>
    	  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <DispChar8x14+0x9a>
 800da08:	4b20      	ldr	r3, [pc, #128]	; (800da8c <DispChar8x14+0x118>)
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	e001      	b.n	800da12 <DispChar8x14+0x9e>
 800da0e:	4b20      	ldr	r3, [pc, #128]	; (800da90 <DispChar8x14+0x11c>)
 800da10:	881b      	ldrh	r3, [r3, #0]
 800da12:	4618      	mov	r0, r3
 800da14:	f004 fb94 	bl	8012140 <LCD_Set_Pixel>
 800da18:	e00c      	b.n	800da34 <DispChar8x14+0xc0>
      else
    	  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <DispChar8x14+0xb6>
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <DispChar8x14+0x11c>)
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	e001      	b.n	800da2e <DispChar8x14+0xba>
 800da2a:	4b18      	ldr	r3, [pc, #96]	; (800da8c <DispChar8x14+0x118>)
 800da2c:	881b      	ldrh	r3, [r3, #0]
 800da2e:	4618      	mov	r0, r3
 800da30:	f004 fb86 	bl	8012140 <LCD_Set_Pixel>
      k >>= 1;
 800da34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800da38:	105b      	asrs	r3, r3, #1
 800da3a:	817b      	strh	r3, [r7, #10]
    for(j=0; j<14; ++j)
 800da3c:	89bb      	ldrh	r3, [r7, #12]
 800da3e:	3301      	adds	r3, #1
 800da40:	b29b      	uxth	r3, r3
 800da42:	81bb      	strh	r3, [r7, #12]
 800da44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800da48:	2b0d      	cmp	r3, #13
 800da4a:	ddd3      	ble.n	800d9f4 <DispChar8x14+0x80>
    }
    Sx++;
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <DispChar8x14+0x110>)
 800da4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da52:	b29b      	uxth	r3, r3
 800da54:	3301      	adds	r3, #1
 800da56:	b29b      	uxth	r3, r3
 800da58:	b21a      	sxth	r2, r3
 800da5a:	4b0a      	ldr	r3, [pc, #40]	; (800da84 <DispChar8x14+0x110>)
 800da5c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<8; ++i)
 800da5e:	89fb      	ldrh	r3, [r7, #14]
 800da60:	3301      	adds	r3, #1
 800da62:	b29b      	uxth	r3, r3
 800da64:	81fb      	strh	r3, [r7, #14]
 800da66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800da6a:	2b07      	cmp	r3, #7
 800da6c:	dd8d      	ble.n	800d98a <DispChar8x14+0x16>
  }
}
 800da6e:	bf00      	nop
 800da70:	bf00      	nop
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	08001290 	.word	0x08001290
 800da7c:	08000c90 	.word	0x08000c90
 800da80:	ffffaaaa 	.word	0xffffaaaa
 800da84:	20000786 	.word	0x20000786
 800da88:	20000788 	.word	0x20000788
 800da8c:	200015c6 	.word	0x200015c6
 800da90:	200015c4 	.word	0x200015c4

0800da94 <DispStr8x14>:

//Mode = bit0: Normal/Inv, bit1: Char/Map
void DispStr8x14(short x0, short y0, char Mode, char *Str)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	4603      	mov	r3, r0
 800da9e:	81fb      	strh	r3, [r7, #14]
 800daa0:	460b      	mov	r3, r1
 800daa2:	81bb      	strh	r3, [r7, #12]
 800daa4:	4613      	mov	r3, r2
 800daa6:	72fb      	strb	r3, [r7, #11]
	  short i;
	  Sx = x0; Sy = y0;
 800daa8:	4a22      	ldr	r2, [pc, #136]	; (800db34 <DispStr8x14+0xa0>)
 800daaa:	89fb      	ldrh	r3, [r7, #14]
 800daac:	8013      	strh	r3, [r2, #0]
 800daae:	4a22      	ldr	r2, [pc, #136]	; (800db38 <DispStr8x14+0xa4>)
 800dab0:	89bb      	ldrh	r3, [r7, #12]
 800dab2:	8013      	strh	r3, [r2, #0]
	  LCD_Set_Posi(Sx, Sy);
 800dab4:	4b1f      	ldr	r3, [pc, #124]	; (800db34 <DispStr8x14+0xa0>)
 800dab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daba:	4a1f      	ldr	r2, [pc, #124]	; (800db38 <DispStr8x14+0xa4>)
 800dabc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dac0:	4611      	mov	r1, r2
 800dac2:	4618      	mov	r0, r3
 800dac4:	f004 faee 	bl	80120a4 <LCD_Set_Posi>
	  for (i=0; i<14; i++)
 800dac8:	2300      	movs	r3, #0
 800daca:	82fb      	strh	r3, [r7, #22]
 800dacc:	e012      	b.n	800daf4 <DispStr8x14+0x60>
	  {
		  LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <DispStr8x14+0x4a>
 800dad8:	4b18      	ldr	r3, [pc, #96]	; (800db3c <DispStr8x14+0xa8>)
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	e001      	b.n	800dae2 <DispStr8x14+0x4e>
 800dade:	4b18      	ldr	r3, [pc, #96]	; (800db40 <DispStr8x14+0xac>)
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f004 fb2c 	bl	8012140 <LCD_Set_Pixel>
	  for (i=0; i<14; i++)
 800dae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800daec:	b29b      	uxth	r3, r3
 800daee:	3301      	adds	r3, #1
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	82fb      	strh	r3, [r7, #22]
 800daf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800daf8:	2b0d      	cmp	r3, #13
 800dafa:	dde8      	ble.n	800dace <DispStr8x14+0x3a>
	  }
	  Sx++;
 800dafc:	4b0d      	ldr	r3, [pc, #52]	; (800db34 <DispStr8x14+0xa0>)
 800dafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db02:	b29b      	uxth	r3, r3
 800db04:	3301      	adds	r3, #1
 800db06:	b29b      	uxth	r3, r3
 800db08:	b21a      	sxth	r2, r3
 800db0a:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <DispStr8x14+0xa0>)
 800db0c:	801a      	strh	r2, [r3, #0]
	  while(*Str != 0)
 800db0e:	e008      	b.n	800db22 <DispStr8x14+0x8e>
	  {
	    DispChar8x14(Mode, *Str++);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	607a      	str	r2, [r7, #4]
 800db16:	781a      	ldrb	r2, [r3, #0]
 800db18:	7afb      	ldrb	r3, [r7, #11]
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff ff29 	bl	800d974 <DispChar8x14>
	  while(*Str != 0)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1f2      	bne.n	800db10 <DispStr8x14+0x7c>
	  }
}
 800db2a:	bf00      	nop
 800db2c:	bf00      	nop
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	20000786 	.word	0x20000786
 800db38:	20000788 	.word	0x20000788
 800db3c:	200015c4 	.word	0x200015c4
 800db40:	200015c6 	.word	0x200015c6

0800db44 <SetColor>:

void SetColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	460a      	mov	r2, r1
 800db4e:	80fb      	strh	r3, [r7, #6]
 800db50:	4613      	mov	r3, r2
 800db52:	80bb      	strh	r3, [r7, #4]
	  Background = Board_Color;
 800db54:	4a05      	ldr	r2, [pc, #20]	; (800db6c <SetColor+0x28>)
 800db56:	88fb      	ldrh	r3, [r7, #6]
 800db58:	8013      	strh	r3, [r2, #0]
	  Foreground = Text_Color;
 800db5a:	4a05      	ldr	r2, [pc, #20]	; (800db70 <SetColor+0x2c>)
 800db5c:	88bb      	ldrh	r3, [r7, #4]
 800db5e:	8013      	strh	r3, [r2, #0]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	200015c6 	.word	0x200015c6
 800db70:	200015c4 	.word	0x200015c4

0800db74 <DispStr>:

/*******************************************************************************
  DispStr: ����Ļ��ʾ�ַ�/ͼ�鴮        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr(short x0, short y0, char Mode, char *Str)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	607b      	str	r3, [r7, #4]
 800db7c:	4603      	mov	r3, r0
 800db7e:	81fb      	strh	r3, [r7, #14]
 800db80:	460b      	mov	r3, r1
 800db82:	81bb      	strh	r3, [r7, #12]
 800db84:	4613      	mov	r3, r2
 800db86:	72fb      	strb	r3, [r7, #11]
  char Code;
  short i, j, k;

  Sx = x0; Sy = y0;
 800db88:	4a5e      	ldr	r2, [pc, #376]	; (800dd04 <DispStr+0x190>)
 800db8a:	89fb      	ldrh	r3, [r7, #14]
 800db8c:	8013      	strh	r3, [r2, #0]
 800db8e:	4a5e      	ldr	r2, [pc, #376]	; (800dd08 <DispStr+0x194>)
 800db90:	89bb      	ldrh	r3, [r7, #12]
 800db92:	8013      	strh	r3, [r2, #0]
  LCD_Set_Posi(Sx, Sy);
 800db94:	4b5b      	ldr	r3, [pc, #364]	; (800dd04 <DispStr+0x190>)
 800db96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db9a:	4a5b      	ldr	r2, [pc, #364]	; (800dd08 <DispStr+0x194>)
 800db9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f004 fa7e 	bl	80120a4 <LCD_Set_Posi>

  while(*Str != 0)
 800dba8:	e0a1      	b.n	800dcee <DispStr+0x17a>
  {
    Code = *Str++;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	1c5a      	adds	r2, r3, #1
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	747b      	strb	r3, [r7, #17]
    for(i=0; i<6; ++i)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	82fb      	strh	r3, [r7, #22]
 800dbb8:	e094      	b.n	800dce4 <DispStr+0x170>
    {
      if(!(Mode & SYMB))
 800dbba:	7afb      	ldrb	r3, [r7, #11]
 800dbbc:	f003 0310 	and.w	r3, r3, #16
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10e      	bne.n	800dbe2 <DispStr+0x6e>
    	  k = CHAR6x8[((Code-0X21)*6)+i];
 800dbc4:	7c7b      	ldrb	r3, [r7, #17]
 800dbc6:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dbca:	4613      	mov	r3, r2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4413      	add	r3, r2
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbd8:	4413      	add	r3, r2
 800dbda:	4a4c      	ldr	r2, [pc, #304]	; (800dd0c <DispStr+0x198>)
 800dbdc:	5cd3      	ldrb	r3, [r2, r3]
 800dbde:	827b      	strh	r3, [r7, #18]
 800dbe0:	e00d      	b.n	800dbfe <DispStr+0x8a>
      else
    	  k = SYMB6x8[(Code - '!')*6 + i];
 800dbe2:	7c7b      	ldrb	r3, [r7, #17]
 800dbe4:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800dbe8:	4613      	mov	r3, r2
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4413      	add	r3, r2
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	4a45      	ldr	r2, [pc, #276]	; (800dd10 <DispStr+0x19c>)
 800dbfa:	5cd3      	ldrb	r3, [r2, r3]
 800dbfc:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID)
 800dbfe:	7afb      	ldrb	r3, [r7, #11]
 800dc00:	f003 0320 	and.w	r3, r3, #32
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00c      	beq.n	800dc22 <DispStr+0xae>
    	  k &= (i%2)? 0xAAAA : 0x5555;
 800dc08:	8afb      	ldrh	r3, [r7, #22]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <DispStr+0xa4>
 800dc14:	4a3f      	ldr	r2, [pc, #252]	; (800dd14 <DispStr+0x1a0>)
 800dc16:	e001      	b.n	800dc1c <DispStr+0xa8>
 800dc18:	f245 5255 	movw	r2, #21845	; 0x5555
 800dc1c:	8a7b      	ldrh	r3, [r7, #18]
 800dc1e:	4013      	ands	r3, r2
 800dc20:	827b      	strh	r3, [r7, #18]
      LCD_Set_Posi(Sx, Sy);
 800dc22:	4b38      	ldr	r3, [pc, #224]	; (800dd04 <DispStr+0x190>)
 800dc24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc28:	4a37      	ldr	r2, [pc, #220]	; (800dd08 <DispStr+0x194>)
 800dc2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dc2e:	4611      	mov	r1, r2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f004 fa37 	bl	80120a4 <LCD_Set_Posi>
      LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dc36:	7afb      	ldrb	r3, [r7, #11]
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <DispStr+0xd2>
 800dc40:	4b35      	ldr	r3, [pc, #212]	; (800dd18 <DispStr+0x1a4>)
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	e001      	b.n	800dc4a <DispStr+0xd6>
 800dc46:	4b35      	ldr	r3, [pc, #212]	; (800dd1c <DispStr+0x1a8>)
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f004 fa78 	bl	8012140 <LCD_Set_Pixel>
      LCD_Set_Posi(Sx, Sy+1);
 800dc50:	4b2c      	ldr	r3, [pc, #176]	; (800dd04 <DispStr+0x190>)
 800dc52:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dc56:	4b2c      	ldr	r3, [pc, #176]	; (800dd08 <DispStr+0x194>)
 800dc58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	3301      	adds	r3, #1
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f004 fa1c 	bl	80120a4 <LCD_Set_Posi>
      for(j=0; j<10; ++j)
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	82bb      	strh	r3, [r7, #20]
 800dc70:	e027      	b.n	800dcc2 <DispStr+0x14e>
      {  //j<8ʱ�����У�j<10������   �����¸�������
        if(k & 1)
 800dc72:	8a7b      	ldrh	r3, [r7, #18]
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <DispStr+0x124>
        	LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800dc7c:	7afb      	ldrb	r3, [r7, #11]
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <DispStr+0x118>
 800dc86:	4b25      	ldr	r3, [pc, #148]	; (800dd1c <DispStr+0x1a8>)
 800dc88:	881b      	ldrh	r3, [r3, #0]
 800dc8a:	e001      	b.n	800dc90 <DispStr+0x11c>
 800dc8c:	4b22      	ldr	r3, [pc, #136]	; (800dd18 <DispStr+0x1a4>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f004 fa55 	bl	8012140 <LCD_Set_Pixel>
 800dc96:	e00c      	b.n	800dcb2 <DispStr+0x13e>
        else
        	LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dc98:	7afb      	ldrb	r3, [r7, #11]
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d002      	beq.n	800dca8 <DispStr+0x134>
 800dca2:	4b1d      	ldr	r3, [pc, #116]	; (800dd18 <DispStr+0x1a4>)
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	e001      	b.n	800dcac <DispStr+0x138>
 800dca8:	4b1c      	ldr	r3, [pc, #112]	; (800dd1c <DispStr+0x1a8>)
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f004 fa47 	bl	8012140 <LCD_Set_Pixel>
       k >>= 1;
 800dcb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dcb6:	105b      	asrs	r3, r3, #1
 800dcb8:	827b      	strh	r3, [r7, #18]
      for(j=0; j<10; ++j)
 800dcba:	8abb      	ldrh	r3, [r7, #20]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	82bb      	strh	r3, [r7, #20]
 800dcc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800dcc6:	2b09      	cmp	r3, #9
 800dcc8:	ddd3      	ble.n	800dc72 <DispStr+0xfe>
      }
      Sx++;                 //��ʾλ��ˮƽ����+1
 800dcca:	4b0e      	ldr	r3, [pc, #56]	; (800dd04 <DispStr+0x190>)
 800dccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	b21a      	sxth	r2, r3
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <DispStr+0x190>)
 800dcda:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i)
 800dcdc:	8afb      	ldrh	r3, [r7, #22]
 800dcde:	3301      	adds	r3, #1
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	82fb      	strh	r3, [r7, #22]
 800dce4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dce8:	2b05      	cmp	r3, #5
 800dcea:	f77f af66 	ble.w	800dbba <DispStr+0x46>
  while(*Str != 0)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f47f af59 	bne.w	800dbaa <DispStr+0x36>
    }
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	bf00      	nop
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20000786 	.word	0x20000786
 800dd08:	20000788 	.word	0x20000788
 800dd0c:	080016c4 	.word	0x080016c4
 800dd10:	08001490 	.word	0x08001490
 800dd14:	ffffaaaa 	.word	0xffffaaaa
 800dd18:	200015c4 	.word	0x200015c4
 800dd1c:	200015c6 	.word	0x200015c6

0800dd20 <Draw_Circle_D>:

/*******************************************************************************
����Ŀ��˫��Բ�ǿ�
*******************************************************************************/
void Draw_Circle_D(char Mode, short Posi_x, short Posi_y, short High, short Width, short Distance)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	4623      	mov	r3, r4
 800dd30:	71fb      	strb	r3, [r7, #7]
 800dd32:	4603      	mov	r3, r0
 800dd34:	80bb      	strh	r3, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	807b      	strh	r3, [r7, #2]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	803b      	strh	r3, [r7, #0]
  short x, y, i, j;

  Distance = Distance + Width*2 + 5 ;
 800dd3e:	8c3b      	ldrh	r3, [r7, #32]
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd46:	4413      	add	r3, r2
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	3305      	adds	r3, #5
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	84bb      	strh	r3, [r7, #36]	; 0x24
  Posi_x = Posi_x - Width;
 800dd50:	88ba      	ldrh	r2, [r7, #4]
 800dd52:	8c3b      	ldrh	r3, [r7, #32]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	80bb      	strh	r3, [r7, #4]

  x = Posi_x;
 800dd5a:	88bb      	ldrh	r3, [r7, #4]
 800dd5c:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 2;
 800dd5e:	887b      	ldrh	r3, [r7, #2]
 800dd60:	3302      	adds	r3, #2
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800dd66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dd6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f004 f997 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dd76:	2300      	movs	r3, #0
 800dd78:	81bb      	strh	r3, [r7, #12]
 800dd7a:	e012      	b.n	800dda2 <Draw_Circle_D+0x82>
 800dd7c:	79fb      	ldrb	r3, [r7, #7]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d002      	beq.n	800dd8c <Draw_Circle_D+0x6c>
 800dd86:	4bad      	ldr	r3, [pc, #692]	; (800e03c <Draw_Circle_D+0x31c>)
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	e001      	b.n	800dd90 <Draw_Circle_D+0x70>
 800dd8c:	4bac      	ldr	r3, [pc, #688]	; (800e040 <Draw_Circle_D+0x320>)
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f004 f9d5 	bl	8012140 <LCD_Set_Pixel>
 800dd96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	81bb      	strh	r3, [r7, #12]
 800dda2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dda6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ddaa:	3b04      	subs	r3, #4
 800ddac:	429a      	cmp	r2, r3
 800ddae:	dbe5      	blt.n	800dd7c <Draw_Circle_D+0x5c>
  x = Posi_x + Distance;
 800ddb0:	88ba      	ldrh	r2, [r7, #4]
 800ddb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddb4:	4413      	add	r3, r2
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800ddba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ddbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f004 f96d 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High-4;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800ddca:	2300      	movs	r3, #0
 800ddcc:	81bb      	strh	r3, [r7, #12]
 800ddce:	e012      	b.n	800ddf6 <Draw_Circle_D+0xd6>
 800ddd0:	79fb      	ldrb	r3, [r7, #7]
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <Draw_Circle_D+0xc0>
 800ddda:	4b98      	ldr	r3, [pc, #608]	; (800e03c <Draw_Circle_D+0x31c>)
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	e001      	b.n	800dde4 <Draw_Circle_D+0xc4>
 800dde0:	4b97      	ldr	r3, [pc, #604]	; (800e040 <Draw_Circle_D+0x320>)
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f004 f9ab 	bl	8012140 <LCD_Set_Pixel>
 800ddea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	81bb      	strh	r3, [r7, #12]
 800ddf6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ddfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ddfe:	3b04      	subs	r3, #4
 800de00:	429a      	cmp	r2, r3
 800de02:	dbe5      	blt.n	800ddd0 <Draw_Circle_D+0xb0>

  x = Posi_x + 1;
 800de04:	88bb      	ldrh	r3, [r7, #4]
 800de06:	3301      	adds	r3, #1
 800de08:	b29b      	uxth	r3, r3
 800de0a:	817b      	strh	r3, [r7, #10]
  y = Posi_y + 1;
 800de0c:	887b      	ldrh	r3, [r7, #2]
 800de0e:	3301      	adds	r3, #1
 800de10:	b29b      	uxth	r3, r3
 800de12:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800de14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de1c:	4611      	mov	r1, r2
 800de1e:	4618      	mov	r0, r3
 800de20:	f004 f940 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800de24:	2300      	movs	r3, #0
 800de26:	81bb      	strh	r3, [r7, #12]
 800de28:	e012      	b.n	800de50 <Draw_Circle_D+0x130>
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <Draw_Circle_D+0x11a>
 800de34:	4b81      	ldr	r3, [pc, #516]	; (800e03c <Draw_Circle_D+0x31c>)
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	e001      	b.n	800de3e <Draw_Circle_D+0x11e>
 800de3a:	4b81      	ldr	r3, [pc, #516]	; (800e040 <Draw_Circle_D+0x320>)
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f004 f97e 	bl	8012140 <LCD_Set_Pixel>
 800de44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3301      	adds	r3, #1
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	81bb      	strh	r3, [r7, #12]
 800de50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800de54:	f9b7 3000 	ldrsh.w	r3, [r7]
 800de58:	3b02      	subs	r3, #2
 800de5a:	429a      	cmp	r2, r3
 800de5c:	dbe5      	blt.n	800de2a <Draw_Circle_D+0x10a>
  x = Posi_x + Distance-1;
 800de5e:	88ba      	ldrh	r2, [r7, #4]
 800de60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de62:	4413      	add	r3, r2
 800de64:	b29b      	uxth	r3, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	b29b      	uxth	r3, r3
 800de6a:	817b      	strh	r3, [r7, #10]
  LCD_Set_Posi(x, y);
 800de6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800de70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de74:	4611      	mov	r1, r2
 800de76:	4618      	mov	r0, r3
 800de78:	f004 f914 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High-2;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800de7c:	2300      	movs	r3, #0
 800de7e:	81bb      	strh	r3, [r7, #12]
 800de80:	e012      	b.n	800dea8 <Draw_Circle_D+0x188>
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <Draw_Circle_D+0x172>
 800de8c:	4b6b      	ldr	r3, [pc, #428]	; (800e03c <Draw_Circle_D+0x31c>)
 800de8e:	881b      	ldrh	r3, [r3, #0]
 800de90:	e001      	b.n	800de96 <Draw_Circle_D+0x176>
 800de92:	4b6b      	ldr	r3, [pc, #428]	; (800e040 <Draw_Circle_D+0x320>)
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	4618      	mov	r0, r3
 800de98:	f004 f952 	bl	8012140 <LCD_Set_Pixel>
 800de9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	3301      	adds	r3, #1
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	81bb      	strh	r3, [r7, #12]
 800dea8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800deac:	f9b7 3000 	ldrsh.w	r3, [r7]
 800deb0:	3b02      	subs	r3, #2
 800deb2:	429a      	cmp	r2, r3
 800deb4:	dbe5      	blt.n	800de82 <Draw_Circle_D+0x162>

  x = Posi_x + 2;
 800deb6:	88bb      	ldrh	r3, [r7, #4]
 800deb8:	3302      	adds	r3, #2
 800deba:	b29b      	uxth	r3, r3
 800debc:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800debe:	887b      	ldrh	r3, [r7, #2]
 800dec0:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800dec2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800deca:	4611      	mov	r1, r2
 800decc:	4618      	mov	r0, r3
 800dece:	f004 f8e9 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800ded2:	2300      	movs	r3, #0
 800ded4:	81bb      	strh	r3, [r7, #12]
 800ded6:	e012      	b.n	800defe <Draw_Circle_D+0x1de>
 800ded8:	79fb      	ldrb	r3, [r7, #7]
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d002      	beq.n	800dee8 <Draw_Circle_D+0x1c8>
 800dee2:	4b56      	ldr	r3, [pc, #344]	; (800e03c <Draw_Circle_D+0x31c>)
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	e001      	b.n	800deec <Draw_Circle_D+0x1cc>
 800dee8:	4b55      	ldr	r3, [pc, #340]	; (800e040 <Draw_Circle_D+0x320>)
 800deea:	881b      	ldrh	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f004 f927 	bl	8012140 <LCD_Set_Pixel>
 800def2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800def6:	b29b      	uxth	r3, r3
 800def8:	3301      	adds	r3, #1
 800defa:	b29b      	uxth	r3, r3
 800defc:	81bb      	strh	r3, [r7, #12]
 800defe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df02:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df06:	429a      	cmp	r2, r3
 800df08:	dbe6      	blt.n	800ded8 <Draw_Circle_D+0x1b8>
  x = Posi_x + Distance-2;
 800df0a:	88ba      	ldrh	r2, [r7, #4]
 800df0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df0e:	4413      	add	r3, r2
 800df10:	b29b      	uxth	r3, r3
 800df12:	3b02      	subs	r3, #2
 800df14:	b29b      	uxth	r3, r3
 800df16:	817b      	strh	r3, [r7, #10]
  y = Posi_y;
 800df18:	887b      	ldrh	r3, [r7, #2]
 800df1a:	813b      	strh	r3, [r7, #8]
  LCD_Set_Posi(x, y);
 800df1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df24:	4611      	mov	r1, r2
 800df26:	4618      	mov	r0, r3
 800df28:	f004 f8bc 	bl	80120a4 <LCD_Set_Posi>
  for(j=0;j<High;j++ )LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df2c:	2300      	movs	r3, #0
 800df2e:	81bb      	strh	r3, [r7, #12]
 800df30:	e012      	b.n	800df58 <Draw_Circle_D+0x238>
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	f003 0301 	and.w	r3, r3, #1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <Draw_Circle_D+0x222>
 800df3c:	4b3f      	ldr	r3, [pc, #252]	; (800e03c <Draw_Circle_D+0x31c>)
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	e001      	b.n	800df46 <Draw_Circle_D+0x226>
 800df42:	4b3f      	ldr	r3, [pc, #252]	; (800e040 <Draw_Circle_D+0x320>)
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	4618      	mov	r0, r3
 800df48:	f004 f8fa 	bl	8012140 <LCD_Set_Pixel>
 800df4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800df50:	b29b      	uxth	r3, r3
 800df52:	3301      	adds	r3, #1
 800df54:	b29b      	uxth	r3, r3
 800df56:	81bb      	strh	r3, [r7, #12]
 800df58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800df5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df60:	429a      	cmp	r2, r3
 800df62:	dbe6      	blt.n	800df32 <Draw_Circle_D+0x212>

  y = Posi_y;
 800df64:	887b      	ldrh	r3, [r7, #2]
 800df66:	813b      	strh	r3, [r7, #8]

  for(i=0;i<Width;i++){
 800df68:	2300      	movs	r3, #0
 800df6a:	81fb      	strh	r3, [r7, #14]
 800df6c:	e05a      	b.n	800e024 <Draw_Circle_D+0x304>
    LCD_Set_Posi(Posi_x+3+i, y);
 800df6e:	88ba      	ldrh	r2, [r7, #4]
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	4413      	add	r3, r2
 800df74:	b29b      	uxth	r3, r3
 800df76:	3303      	adds	r3, #3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	b21b      	sxth	r3, r3
 800df7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f004 f88e 	bl	80120a4 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800df88:	2300      	movs	r3, #0
 800df8a:	81bb      	strh	r3, [r7, #12]
 800df8c:	e012      	b.n	800dfb4 <Draw_Circle_D+0x294>
 800df8e:	79fb      	ldrb	r3, [r7, #7]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d002      	beq.n	800df9e <Draw_Circle_D+0x27e>
 800df98:	4b28      	ldr	r3, [pc, #160]	; (800e03c <Draw_Circle_D+0x31c>)
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	e001      	b.n	800dfa2 <Draw_Circle_D+0x282>
 800df9e:	4b28      	ldr	r3, [pc, #160]	; (800e040 <Draw_Circle_D+0x320>)
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f004 f8cc 	bl	8012140 <LCD_Set_Pixel>
 800dfa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	3301      	adds	r3, #1
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	81bb      	strh	r3, [r7, #12]
 800dfb4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dfb8:	f9b7 3000 	ldrsh.w	r3, [r7]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	dbe6      	blt.n	800df8e <Draw_Circle_D+0x26e>
    LCD_Set_Posi(Posi_x+Distance-3-i, y);
 800dfc0:	88ba      	ldrh	r2, [r7, #4]
 800dfc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfc4:	4413      	add	r3, r2
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	89fb      	ldrh	r3, [r7, #14]
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	3b03      	subs	r3, #3
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	b21b      	sxth	r3, r3
 800dfd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800dfd8:	4611      	mov	r1, r2
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f004 f862 	bl	80120a4 <LCD_Set_Posi>
    for(j=0; j<High; j++)LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	81bb      	strh	r3, [r7, #12]
 800dfe4:	e012      	b.n	800e00c <Draw_Circle_D+0x2ec>
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	f003 0301 	and.w	r3, r3, #1
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d002      	beq.n	800dff6 <Draw_Circle_D+0x2d6>
 800dff0:	4b12      	ldr	r3, [pc, #72]	; (800e03c <Draw_Circle_D+0x31c>)
 800dff2:	881b      	ldrh	r3, [r3, #0]
 800dff4:	e001      	b.n	800dffa <Draw_Circle_D+0x2da>
 800dff6:	4b12      	ldr	r3, [pc, #72]	; (800e040 <Draw_Circle_D+0x320>)
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f004 f8a0 	bl	8012140 <LCD_Set_Pixel>
 800e000:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e004:	b29b      	uxth	r3, r3
 800e006:	3301      	adds	r3, #1
 800e008:	b29b      	uxth	r3, r3
 800e00a:	81bb      	strh	r3, [r7, #12]
 800e00c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e010:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e014:	429a      	cmp	r2, r3
 800e016:	dbe6      	blt.n	800dfe6 <Draw_Circle_D+0x2c6>
  for(i=0;i<Width;i++){
 800e018:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	3301      	adds	r3, #1
 800e020:	b29b      	uxth	r3, r3
 800e022:	81fb      	strh	r3, [r7, #14]
 800e024:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e028:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	db9e      	blt.n	800df6e <Draw_Circle_D+0x24e>
  }
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200015c4 	.word	0x200015c4
 800e040:	200015c6 	.word	0x200015c6

0800e044 <DispStr10x14>:

/*******************************************************************************
  DispStr:                               Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispStr10x14(short x0, short y0, char Mode, char *Str)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	607b      	str	r3, [r7, #4]
 800e04c:	4603      	mov	r3, r0
 800e04e:	81fb      	strh	r3, [r7, #14]
 800e050:	460b      	mov	r3, r1
 800e052:	81bb      	strh	r3, [r7, #12]
 800e054:	4613      	mov	r3, r2
 800e056:	72fb      	strb	r3, [r7, #11]
  Sx = x0; Sy = y0;
 800e058:	4a0c      	ldr	r2, [pc, #48]	; (800e08c <DispStr10x14+0x48>)
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	8013      	strh	r3, [r2, #0]
 800e05e:	4a0c      	ldr	r2, [pc, #48]	; (800e090 <DispStr10x14+0x4c>)
 800e060:	89bb      	ldrh	r3, [r7, #12]
 800e062:	8013      	strh	r3, [r2, #0]
  while(*Str != 0)
 800e064:	e008      	b.n	800e078 <DispStr10x14+0x34>
  {
    DispChar10x14(Mode, *Str++);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	781a      	ldrb	r2, [r3, #0]
 800e06e:	7afb      	ldrb	r3, [r7, #11]
 800e070:	4611      	mov	r1, r2
 800e072:	4618      	mov	r0, r3
 800e074:	f000 f80e 	bl	800e094 <DispChar10x14>
  while(*Str != 0)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1f2      	bne.n	800e066 <DispStr10x14+0x22>
  }
}
 800e080:	bf00      	nop
 800e082:	bf00      	nop
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000786 	.word	0x20000786
 800e090:	20000788 	.word	0x20000788

0800e094 <DispChar10x14>:
/*******************************************************************************
 Disp_Char10x14:                        Mode = bit0: Normal/Inv, bit1: Char/Map
*******************************************************************************/
void DispChar10x14(char Mode, char Code)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	460a      	mov	r2, r1
 800e09e:	71fb      	strb	r3, [r7, #7]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	71bb      	strb	r3, [r7, #6]
  short i, j, k;

  for(i=0; i<10; ++i)
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	81fb      	strh	r3, [r7, #14]
 800e0a8:	e0fe      	b.n	800e2a8 <DispChar10x14+0x214>
  {
    if(Mode & SYMB) k = SYMB10x14[(Code - '@')*10 + i];
 800e0aa:	79fb      	ldrb	r3, [r7, #7]
 800e0ac:	f003 0310 	and.w	r3, r3, #16
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00f      	beq.n	800e0d4 <DispChar10x14+0x40>
 800e0b4:	79bb      	ldrb	r3, [r7, #6]
 800e0b6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	4a7c      	ldr	r2, [pc, #496]	; (800e2bc <DispChar10x14+0x228>)
 800e0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0d0:	817b      	strh	r3, [r7, #10]
 800e0d2:	e00e      	b.n	800e0f2 <DispChar10x14+0x5e>
    else            k = CHAR10x14[((Code-0X21)*10)+i];
 800e0d4:	79bb      	ldrb	r3, [r7, #6]
 800e0d6:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e0da:	4613      	mov	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	4a75      	ldr	r2, [pc, #468]	; (800e2c0 <DispChar10x14+0x22c>)
 800e0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f0:	817b      	strh	r3, [r7, #10]
    if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e0f2:	79fb      	ldrb	r3, [r7, #7]
 800e0f4:	f003 0320 	and.w	r3, r3, #32
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00c      	beq.n	800e116 <DispChar10x14+0x82>
 800e0fc:	89fb      	ldrh	r3, [r7, #14]
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	b29b      	uxth	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <DispChar10x14+0x78>
 800e108:	4a6e      	ldr	r2, [pc, #440]	; (800e2c4 <DispChar10x14+0x230>)
 800e10a:	e001      	b.n	800e110 <DispChar10x14+0x7c>
 800e10c:	f245 5255 	movw	r2, #21845	; 0x5555
 800e110:	897b      	ldrh	r3, [r7, #10]
 800e112:	4013      	ands	r3, r2
 800e114:	817b      	strh	r3, [r7, #10]
    LCD_Set_Posi(Sx, Sy);
 800e116:	4b6c      	ldr	r3, [pc, #432]	; (800e2c8 <DispChar10x14+0x234>)
 800e118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e11c:	4a6b      	ldr	r2, [pc, #428]	; (800e2cc <DispChar10x14+0x238>)
 800e11e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e122:	4611      	mov	r1, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f003 ffbd 	bl	80120a4 <LCD_Set_Posi>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	f003 0310 	and.w	r3, r3, #16
 800e130:	2b00      	cmp	r3, #0
 800e132:	d038      	beq.n	800e1a6 <DispChar10x14+0x112>
 800e134:	79bb      	ldrb	r3, [r7, #6]
 800e136:	2b43      	cmp	r3, #67	; 0x43
 800e138:	d005      	beq.n	800e146 <DispChar10x14+0xb2>
 800e13a:	79bb      	ldrb	r3, [r7, #6]
 800e13c:	2b44      	cmp	r3, #68	; 0x44
 800e13e:	d002      	beq.n	800e146 <DispChar10x14+0xb2>
 800e140:	79bb      	ldrb	r3, [r7, #6]
 800e142:	2b45      	cmp	r3, #69	; 0x45
 800e144:	d12f      	bne.n	800e1a6 <DispChar10x14+0x112>
      for(j=0; j<11; ++j){
 800e146:	2300      	movs	r3, #0
 800e148:	81bb      	strh	r3, [r7, #12]
 800e14a:	e027      	b.n	800e19c <DispChar10x14+0x108>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e14c:	897b      	ldrh	r3, [r7, #10]
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <DispChar10x14+0xde>
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	f003 0301 	and.w	r3, r3, #1
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <DispChar10x14+0xd2>
 800e160:	4b5b      	ldr	r3, [pc, #364]	; (800e2d0 <DispChar10x14+0x23c>)
 800e162:	881b      	ldrh	r3, [r3, #0]
 800e164:	e001      	b.n	800e16a <DispChar10x14+0xd6>
 800e166:	4b5b      	ldr	r3, [pc, #364]	; (800e2d4 <DispChar10x14+0x240>)
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f003 ffe8 	bl	8012140 <LCD_Set_Pixel>
 800e170:	e00c      	b.n	800e18c <DispChar10x14+0xf8>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	f003 0301 	and.w	r3, r3, #1
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <DispChar10x14+0xee>
 800e17c:	4b55      	ldr	r3, [pc, #340]	; (800e2d4 <DispChar10x14+0x240>)
 800e17e:	881b      	ldrh	r3, [r3, #0]
 800e180:	e001      	b.n	800e186 <DispChar10x14+0xf2>
 800e182:	4b53      	ldr	r3, [pc, #332]	; (800e2d0 <DispChar10x14+0x23c>)
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	f003 ffda 	bl	8012140 <LCD_Set_Pixel>
        k >>= 1;}
 800e18c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e190:	105b      	asrs	r3, r3, #1
 800e192:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	3301      	adds	r3, #1
 800e198:	b29b      	uxth	r3, r3
 800e19a:	81bb      	strh	r3, [r7, #12]
 800e19c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e1a0:	2b0a      	cmp	r3, #10
 800e1a2:	ddd3      	ble.n	800e14c <DispChar10x14+0xb8>
    if((Mode & SYMB)&&(Code == 'C' || Code=='D'|| Code=='E')){       //AC/DC
 800e1a4:	e073      	b.n	800e28e <DispChar10x14+0x1fa>
    }
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	f003 0310 	and.w	r3, r3, #16
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d03f      	beq.n	800e230 <DispChar10x14+0x19c>
 800e1b0:	79bb      	ldrb	r3, [r7, #6]
 800e1b2:	2b4c      	cmp	r3, #76	; 0x4c
 800e1b4:	d002      	beq.n	800e1bc <DispChar10x14+0x128>
 800e1b6:	79bb      	ldrb	r3, [r7, #6]
 800e1b8:	2b48      	cmp	r3, #72	; 0x48
 800e1ba:	d139      	bne.n	800e230 <DispChar10x14+0x19c>
      LCD_Set_Posi(Sx, Sy);
 800e1bc:	4b42      	ldr	r3, [pc, #264]	; (800e2c8 <DispChar10x14+0x234>)
 800e1be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1c2:	4a42      	ldr	r2, [pc, #264]	; (800e2cc <DispChar10x14+0x238>)
 800e1c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f003 ff6a 	bl	80120a4 <LCD_Set_Posi>
      for(j=0; j<11; ++j){
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	81bb      	strh	r3, [r7, #12]
 800e1d4:	e027      	b.n	800e226 <DispChar10x14+0x192>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e1d6:	897b      	ldrh	r3, [r7, #10]
 800e1d8:	f003 0304 	and.w	r3, r3, #4
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00d      	beq.n	800e1fc <DispChar10x14+0x168>
 800e1e0:	79fb      	ldrb	r3, [r7, #7]
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <DispChar10x14+0x15c>
 800e1ea:	4b39      	ldr	r3, [pc, #228]	; (800e2d0 <DispChar10x14+0x23c>)
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	e001      	b.n	800e1f4 <DispChar10x14+0x160>
 800e1f0:	4b38      	ldr	r3, [pc, #224]	; (800e2d4 <DispChar10x14+0x240>)
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f003 ffa3 	bl	8012140 <LCD_Set_Pixel>
 800e1fa:	e00c      	b.n	800e216 <DispChar10x14+0x182>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b00      	cmp	r3, #0
 800e204:	d002      	beq.n	800e20c <DispChar10x14+0x178>
 800e206:	4b33      	ldr	r3, [pc, #204]	; (800e2d4 <DispChar10x14+0x240>)
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	e001      	b.n	800e210 <DispChar10x14+0x17c>
 800e20c:	4b30      	ldr	r3, [pc, #192]	; (800e2d0 <DispChar10x14+0x23c>)
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	4618      	mov	r0, r3
 800e212:	f003 ff95 	bl	8012140 <LCD_Set_Pixel>
        k >>= 1;
 800e216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e21a:	105b      	asrs	r3, r3, #1
 800e21c:	817b      	strh	r3, [r7, #10]
      for(j=0; j<11; ++j){
 800e21e:	89bb      	ldrh	r3, [r7, #12]
 800e220:	3301      	adds	r3, #1
 800e222:	b29b      	uxth	r3, r3
 800e224:	81bb      	strh	r3, [r7, #12]
 800e226:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e22a:	2b0a      	cmp	r3, #10
 800e22c:	ddd3      	ble.n	800e1d6 <DispChar10x14+0x142>
    else if((Mode & SYMB)&&(Code == 'L' || Code=='H')){
 800e22e:	e02e      	b.n	800e28e <DispChar10x14+0x1fa>
      }
    }
    else{
      for(j=0; j<14; ++j){
 800e230:	2300      	movs	r3, #0
 800e232:	81bb      	strh	r3, [r7, #12]
 800e234:	e027      	b.n	800e286 <DispChar10x14+0x1f2>
        if(k & 4)  LCD_Set_Pixel((Mode & INV)? Background : Foreground);
 800e236:	897b      	ldrh	r3, [r7, #10]
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00d      	beq.n	800e25c <DispChar10x14+0x1c8>
 800e240:	79fb      	ldrb	r3, [r7, #7]
 800e242:	f003 0301 	and.w	r3, r3, #1
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <DispChar10x14+0x1bc>
 800e24a:	4b21      	ldr	r3, [pc, #132]	; (800e2d0 <DispChar10x14+0x23c>)
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	e001      	b.n	800e254 <DispChar10x14+0x1c0>
 800e250:	4b20      	ldr	r3, [pc, #128]	; (800e2d4 <DispChar10x14+0x240>)
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	4618      	mov	r0, r3
 800e256:	f003 ff73 	bl	8012140 <LCD_Set_Pixel>
 800e25a:	e00c      	b.n	800e276 <DispChar10x14+0x1e2>
        else       LCD_Set_Pixel((Mode & INV)? Foreground : Background);
 800e25c:	79fb      	ldrb	r3, [r7, #7]
 800e25e:	f003 0301 	and.w	r3, r3, #1
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <DispChar10x14+0x1d8>
 800e266:	4b1b      	ldr	r3, [pc, #108]	; (800e2d4 <DispChar10x14+0x240>)
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	e001      	b.n	800e270 <DispChar10x14+0x1dc>
 800e26c:	4b18      	ldr	r3, [pc, #96]	; (800e2d0 <DispChar10x14+0x23c>)
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f003 ff65 	bl	8012140 <LCD_Set_Pixel>
        k >>= 1;
 800e276:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e27a:	105b      	asrs	r3, r3, #1
 800e27c:	817b      	strh	r3, [r7, #10]
      for(j=0; j<14; ++j){
 800e27e:	89bb      	ldrh	r3, [r7, #12]
 800e280:	3301      	adds	r3, #1
 800e282:	b29b      	uxth	r3, r3
 800e284:	81bb      	strh	r3, [r7, #12]
 800e286:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e28a:	2b0d      	cmp	r3, #13
 800e28c:	ddd3      	ble.n	800e236 <DispChar10x14+0x1a2>
      }
    }
    Sx++;
 800e28e:	4b0e      	ldr	r3, [pc, #56]	; (800e2c8 <DispChar10x14+0x234>)
 800e290:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e294:	b29b      	uxth	r3, r3
 800e296:	3301      	adds	r3, #1
 800e298:	b29b      	uxth	r3, r3
 800e29a:	b21a      	sxth	r2, r3
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <DispChar10x14+0x234>)
 800e29e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<10; ++i)
 800e2a0:	89fb      	ldrh	r3, [r7, #14]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	81fb      	strh	r3, [r7, #14]
 800e2a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e2ac:	2b09      	cmp	r3, #9
 800e2ae:	f77f aefc 	ble.w	800e0aa <DispChar10x14+0x16>
  }
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	080018f8 	.word	0x080018f8
 800e2c0:	08001998 	.word	0x08001998
 800e2c4:	ffffaaaa 	.word	0xffffaaaa
 800e2c8:	20000786 	.word	0x20000786
 800e2cc:	20000788 	.word	0x20000788
 800e2d0:	200015c6 	.word	0x200015c6
 800e2d4:	200015c4 	.word	0x200015c4

0800e2d8 <NotePixel>:

/*******************************************************************************
 NotePixel: ��������������     Color: ������ɫ(1/0)  ���ض�λ: Nx, Ny
*******************************************************************************/
void NotePixel(char Color)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	71fb      	strb	r3, [r7, #7]
  short i, j, *pBuf = (short*)&WaveBuf[300 + 300 + 300];
 800e2e2:	4b42      	ldr	r3, [pc, #264]	; (800e3ec <NotePixel+0x114>)
 800e2e4:	60fb      	str	r3, [r7, #12]

  Nx = Nx%ParamTab[WXx1];
 800e2e6:	4b42      	ldr	r3, [pc, #264]	; (800e3f0 <NotePixel+0x118>)
 800e2e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2ec:	4a41      	ldr	r2, [pc, #260]	; (800e3f4 <NotePixel+0x11c>)
 800e2ee:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800e2f2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e2f6:	fb02 f201 	mul.w	r2, r2, r1
 800e2fa:	1a9b      	subs	r3, r3, r2
 800e2fc:	b21a      	sxth	r2, r3
 800e2fe:	4b3c      	ldr	r3, [pc, #240]	; (800e3f0 <NotePixel+0x118>)
 800e300:	801a      	strh	r2, [r3, #0]
  Ny = Ny%ParamTab[HYx2];             // Nx, Ny �����򷵻����
 800e302:	4b3d      	ldr	r3, [pc, #244]	; (800e3f8 <NotePixel+0x120>)
 800e304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e308:	4a3a      	ldr	r2, [pc, #232]	; (800e3f4 <NotePixel+0x11c>)
 800e30a:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 800e30e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e312:	fb02 f201 	mul.w	r2, r2, r1
 800e316:	1a9b      	subs	r3, r3, r2
 800e318:	b21a      	sxth	r2, r3
 800e31a:	4b37      	ldr	r3, [pc, #220]	; (800e3f8 <NotePixel+0x120>)
 800e31c:	801a      	strh	r2, [r3, #0]
  i  = Nx*(ParamTab[HYx2]/32)+ Ny/16;
 800e31e:	4b35      	ldr	r3, [pc, #212]	; (800e3f4 <NotePixel+0x11c>)
 800e320:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e324:	2b00      	cmp	r3, #0
 800e326:	da00      	bge.n	800e32a <NotePixel+0x52>
 800e328:	331f      	adds	r3, #31
 800e32a:	115b      	asrs	r3, r3, #5
 800e32c:	b21b      	sxth	r3, r3
 800e32e:	b29a      	uxth	r2, r3
 800e330:	4b2f      	ldr	r3, [pc, #188]	; (800e3f0 <NotePixel+0x118>)
 800e332:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e336:	b29b      	uxth	r3, r3
 800e338:	fb12 f303 	smulbb	r3, r2, r3
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	4b2e      	ldr	r3, [pc, #184]	; (800e3f8 <NotePixel+0x120>)
 800e340:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e344:	2b00      	cmp	r3, #0
 800e346:	da00      	bge.n	800e34a <NotePixel+0x72>
 800e348:	330f      	adds	r3, #15
 800e34a:	111b      	asrs	r3, r3, #4
 800e34c:	b21b      	sxth	r3, r3
 800e34e:	b29b      	uxth	r3, r3
 800e350:	4413      	add	r3, r2
 800e352:	b29b      	uxth	r3, r3
 800e354:	817b      	strh	r3, [r7, #10]
  j  = Ny%16;
 800e356:	4b28      	ldr	r3, [pc, #160]	; (800e3f8 <NotePixel+0x120>)
 800e358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e35c:	425a      	negs	r2, r3
 800e35e:	f003 030f 	and.w	r3, r3, #15
 800e362:	f002 020f 	and.w	r2, r2, #15
 800e366:	bf58      	it	pl
 800e368:	4253      	negpl	r3, r2
 800e36a:	813b      	strh	r3, [r7, #8]
  if(Color) pBuf[i] |=  1 << j;
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d015      	beq.n	800e39e <NotePixel+0xc6>
 800e372:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	4413      	add	r3, r2
 800e37c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e380:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e384:	2201      	movs	r2, #1
 800e386:	fa02 f303 	lsl.w	r3, r2, r3
 800e38a:	b21a      	sxth	r2, r3
 800e38c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	4403      	add	r3, r0
 800e396:	430a      	orrs	r2, r1
 800e398:	b212      	sxth	r2, r2
 800e39a:	801a      	strh	r2, [r3, #0]
 800e39c:	e016      	b.n	800e3cc <NotePixel+0xf4>
  else      pBuf[i] &=~(1 << j);
 800e39e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e3ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e3b6:	b21b      	sxth	r3, r3
 800e3b8:	43db      	mvns	r3, r3
 800e3ba:	b21a      	sxth	r2, r3
 800e3bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	4403      	add	r3, r0
 800e3c6:	400a      	ands	r2, r1
 800e3c8:	b212      	sxth	r2, r2
 800e3ca:	801a      	strh	r2, [r3, #0]
  Ny++;
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <NotePixel+0x120>)
 800e3ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	b21a      	sxth	r2, r3
 800e3da:	4b07      	ldr	r3, [pc, #28]	; (800e3f8 <NotePixel+0x120>)
 800e3dc:	801a      	strh	r2, [r3, #0]
}
 800e3de:	bf00      	nop
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	20000f84 	.word	0x20000f84
 800e3f0:	20000002 	.word	0x20000002
 800e3f4:	20000140 	.word	0x20000140
 800e3f8:	20000004 	.word	0x20000004

0800e3fc <Buil_Pop>:

/*******************************************************************************
  Bull_Pop: ������������ݼ���������   �������: Nx, Ny, Wx, Hy
*******************************************************************************/
void Buil_Pop(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
  short i;
  memset(&WaveBuf[TRACK1_SIZE+TRACK2_SIZE+TRACK23_SIZE], BLK, POP_SIZE);
 800e402:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e406:	2100      	movs	r1, #0
 800e408:	487f      	ldr	r0, [pc, #508]	; (800e608 <Buil_Pop+0x20c>)
 800e40a:	f014 fcb9 	bl	8022d80 <memset>
  Nx = 0; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e40e:	4b7f      	ldr	r3, [pc, #508]	; (800e60c <Buil_Pop+0x210>)
 800e410:	2200      	movs	r2, #0
 800e412:	801a      	strh	r2, [r3, #0]
 800e414:	4b7e      	ldr	r3, [pc, #504]	; (800e610 <Buil_Pop+0x214>)
 800e416:	2203      	movs	r2, #3
 800e418:	801a      	strh	r2, [r3, #0]
 800e41a:	2300      	movs	r3, #0
 800e41c:	80fb      	strh	r3, [r7, #6]
 800e41e:	e008      	b.n	800e432 <Buil_Pop+0x36>
 800e420:	2001      	movs	r0, #1
 800e422:	f7ff ff59 	bl	800e2d8 <NotePixel>
 800e426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	3301      	adds	r3, #1
 800e42e:	b29b      	uxth	r3, r3
 800e430:	80fb      	strh	r3, [r7, #6]
 800e432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e436:	4b77      	ldr	r3, [pc, #476]	; (800e614 <Buil_Pop+0x218>)
 800e438:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e43c:	0fd9      	lsrs	r1, r3, #31
 800e43e:	440b      	add	r3, r1
 800e440:	105b      	asrs	r3, r3, #1
 800e442:	b21b      	sxth	r3, r3
 800e444:	3b06      	subs	r3, #6
 800e446:	429a      	cmp	r2, r3
 800e448:	dbea      	blt.n	800e420 <Buil_Pop+0x24>
  Nx = 1; Ny = 2;                    NotePixel(1);
 800e44a:	4b70      	ldr	r3, [pc, #448]	; (800e60c <Buil_Pop+0x210>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	801a      	strh	r2, [r3, #0]
 800e450:	4b6f      	ldr	r3, [pc, #444]	; (800e610 <Buil_Pop+0x214>)
 800e452:	2202      	movs	r2, #2
 800e454:	801a      	strh	r2, [r3, #0]
 800e456:	2001      	movs	r0, #1
 800e458:	f7ff ff3e 	bl	800e2d8 <NotePixel>
  Nx = 1; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e45c:	4b6b      	ldr	r3, [pc, #428]	; (800e60c <Buil_Pop+0x210>)
 800e45e:	2201      	movs	r2, #1
 800e460:	801a      	strh	r2, [r3, #0]
 800e462:	4b6c      	ldr	r3, [pc, #432]	; (800e614 <Buil_Pop+0x218>)
 800e464:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e468:	0fda      	lsrs	r2, r3, #31
 800e46a:	4413      	add	r3, r2
 800e46c:	105b      	asrs	r3, r3, #1
 800e46e:	b21b      	sxth	r3, r3
 800e470:	b29b      	uxth	r3, r3
 800e472:	3b03      	subs	r3, #3
 800e474:	b29b      	uxth	r3, r3
 800e476:	b21a      	sxth	r2, r3
 800e478:	4b65      	ldr	r3, [pc, #404]	; (800e610 <Buil_Pop+0x214>)
 800e47a:	801a      	strh	r2, [r3, #0]
 800e47c:	2001      	movs	r0, #1
 800e47e:	f7ff ff2b 	bl	800e2d8 <NotePixel>
  Nx = 2; Ny = 1;                    NotePixel(1);
 800e482:	4b62      	ldr	r3, [pc, #392]	; (800e60c <Buil_Pop+0x210>)
 800e484:	2202      	movs	r2, #2
 800e486:	801a      	strh	r2, [r3, #0]
 800e488:	4b61      	ldr	r3, [pc, #388]	; (800e610 <Buil_Pop+0x214>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	801a      	strh	r2, [r3, #0]
 800e48e:	2001      	movs	r0, #1
 800e490:	f7ff ff22 	bl	800e2d8 <NotePixel>
  Nx = 2; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e494:	4b5d      	ldr	r3, [pc, #372]	; (800e60c <Buil_Pop+0x210>)
 800e496:	2202      	movs	r2, #2
 800e498:	801a      	strh	r2, [r3, #0]
 800e49a:	4b5e      	ldr	r3, [pc, #376]	; (800e614 <Buil_Pop+0x218>)
 800e49c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e4a0:	0fda      	lsrs	r2, r3, #31
 800e4a2:	4413      	add	r3, r2
 800e4a4:	105b      	asrs	r3, r3, #1
 800e4a6:	b21b      	sxth	r3, r3
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	3b02      	subs	r3, #2
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	b21a      	sxth	r2, r3
 800e4b0:	4b57      	ldr	r3, [pc, #348]	; (800e610 <Buil_Pop+0x214>)
 800e4b2:	801a      	strh	r2, [r3, #0]
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	f7ff ff0f 	bl	800e2d8 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e4ba:	4b54      	ldr	r3, [pc, #336]	; (800e60c <Buil_Pop+0x210>)
 800e4bc:	2203      	movs	r2, #3
 800e4be:	801a      	strh	r2, [r3, #0]
 800e4c0:	e01e      	b.n	800e500 <Buil_Pop+0x104>
  {
    Ny = 0;                     NotePixel(1);
 800e4c2:	4b53      	ldr	r3, [pc, #332]	; (800e610 <Buil_Pop+0x214>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	801a      	strh	r2, [r3, #0]
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	f7ff ff05 	bl	800e2d8 <NotePixel>
    Ny = ParamTab[HYx2]/2 - 1;; NotePixel(1);
 800e4ce:	4b51      	ldr	r3, [pc, #324]	; (800e614 <Buil_Pop+0x218>)
 800e4d0:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e4d4:	0fda      	lsrs	r2, r3, #31
 800e4d6:	4413      	add	r3, r2
 800e4d8:	105b      	asrs	r3, r3, #1
 800e4da:	b21b      	sxth	r3, r3
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	b21a      	sxth	r2, r3
 800e4e4:	4b4a      	ldr	r3, [pc, #296]	; (800e610 <Buil_Pop+0x214>)
 800e4e6:	801a      	strh	r2, [r3, #0]
 800e4e8:	2001      	movs	r0, #1
 800e4ea:	f7ff fef5 	bl	800e2d8 <NotePixel>
  for(Nx=3; Nx<ParamTab[WXx1]-2; Nx++)
 800e4ee:	4b47      	ldr	r3, [pc, #284]	; (800e60c <Buil_Pop+0x210>)
 800e4f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	b21a      	sxth	r2, r3
 800e4fc:	4b43      	ldr	r3, [pc, #268]	; (800e60c <Buil_Pop+0x210>)
 800e4fe:	801a      	strh	r2, [r3, #0]
 800e500:	4b42      	ldr	r3, [pc, #264]	; (800e60c <Buil_Pop+0x210>)
 800e502:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e506:	461a      	mov	r2, r3
 800e508:	4b42      	ldr	r3, [pc, #264]	; (800e614 <Buil_Pop+0x218>)
 800e50a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e50e:	3b02      	subs	r3, #2
 800e510:	429a      	cmp	r2, r3
 800e512:	dbd6      	blt.n	800e4c2 <Buil_Pop+0xc6>
  }
  Nx = ParamTab[WXx1]-3; Ny = 1;                    NotePixel(1);
 800e514:	4b3f      	ldr	r3, [pc, #252]	; (800e614 <Buil_Pop+0x218>)
 800e516:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	3b03      	subs	r3, #3
 800e51e:	b29b      	uxth	r3, r3
 800e520:	b21a      	sxth	r2, r3
 800e522:	4b3a      	ldr	r3, [pc, #232]	; (800e60c <Buil_Pop+0x210>)
 800e524:	801a      	strh	r2, [r3, #0]
 800e526:	4b3a      	ldr	r3, [pc, #232]	; (800e610 <Buil_Pop+0x214>)
 800e528:	2201      	movs	r2, #1
 800e52a:	801a      	strh	r2, [r3, #0]
 800e52c:	2001      	movs	r0, #1
 800e52e:	f7ff fed3 	bl	800e2d8 <NotePixel>
  Nx = ParamTab[WXx1]-3; Ny = ParamTab[HYx2]/2 - 2; NotePixel(1);
 800e532:	4b38      	ldr	r3, [pc, #224]	; (800e614 <Buil_Pop+0x218>)
 800e534:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b03      	subs	r3, #3
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	b21a      	sxth	r2, r3
 800e540:	4b32      	ldr	r3, [pc, #200]	; (800e60c <Buil_Pop+0x210>)
 800e542:	801a      	strh	r2, [r3, #0]
 800e544:	4b33      	ldr	r3, [pc, #204]	; (800e614 <Buil_Pop+0x218>)
 800e546:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e54a:	0fda      	lsrs	r2, r3, #31
 800e54c:	4413      	add	r3, r2
 800e54e:	105b      	asrs	r3, r3, #1
 800e550:	b21b      	sxth	r3, r3
 800e552:	b29b      	uxth	r3, r3
 800e554:	3b02      	subs	r3, #2
 800e556:	b29b      	uxth	r3, r3
 800e558:	b21a      	sxth	r2, r3
 800e55a:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <Buil_Pop+0x214>)
 800e55c:	801a      	strh	r2, [r3, #0]
 800e55e:	2001      	movs	r0, #1
 800e560:	f7ff feba 	bl	800e2d8 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = 2;                    NotePixel(1);
 800e564:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <Buil_Pop+0x218>)
 800e566:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b02      	subs	r3, #2
 800e56e:	b29b      	uxth	r3, r3
 800e570:	b21a      	sxth	r2, r3
 800e572:	4b26      	ldr	r3, [pc, #152]	; (800e60c <Buil_Pop+0x210>)
 800e574:	801a      	strh	r2, [r3, #0]
 800e576:	4b26      	ldr	r3, [pc, #152]	; (800e610 <Buil_Pop+0x214>)
 800e578:	2202      	movs	r2, #2
 800e57a:	801a      	strh	r2, [r3, #0]
 800e57c:	2001      	movs	r0, #1
 800e57e:	f7ff feab 	bl	800e2d8 <NotePixel>
  Nx = ParamTab[WXx1]-2; Ny = ParamTab[HYx2]/2 - 3; NotePixel(1);
 800e582:	4b24      	ldr	r3, [pc, #144]	; (800e614 <Buil_Pop+0x218>)
 800e584:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e588:	b29b      	uxth	r3, r3
 800e58a:	3b02      	subs	r3, #2
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	b21a      	sxth	r2, r3
 800e590:	4b1e      	ldr	r3, [pc, #120]	; (800e60c <Buil_Pop+0x210>)
 800e592:	801a      	strh	r2, [r3, #0]
 800e594:	4b1f      	ldr	r3, [pc, #124]	; (800e614 <Buil_Pop+0x218>)
 800e596:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e59a:	0fda      	lsrs	r2, r3, #31
 800e59c:	4413      	add	r3, r2
 800e59e:	105b      	asrs	r3, r3, #1
 800e5a0:	b21b      	sxth	r3, r3
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	3b03      	subs	r3, #3
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	b21a      	sxth	r2, r3
 800e5aa:	4b19      	ldr	r3, [pc, #100]	; (800e610 <Buil_Pop+0x214>)
 800e5ac:	801a      	strh	r2, [r3, #0]
 800e5ae:	2001      	movs	r0, #1
 800e5b0:	f7ff fe92 	bl	800e2d8 <NotePixel>
  Nx = ParamTab[WXx1]-1; Ny = 3; for(i=0; i<ParamTab[HYx2]/2-6; i++) NotePixel(1);
 800e5b4:	4b17      	ldr	r3, [pc, #92]	; (800e614 <Buil_Pop+0x218>)
 800e5b6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	b21a      	sxth	r2, r3
 800e5c2:	4b12      	ldr	r3, [pc, #72]	; (800e60c <Buil_Pop+0x210>)
 800e5c4:	801a      	strh	r2, [r3, #0]
 800e5c6:	4b12      	ldr	r3, [pc, #72]	; (800e610 <Buil_Pop+0x214>)
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	801a      	strh	r2, [r3, #0]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	80fb      	strh	r3, [r7, #6]
 800e5d0:	e008      	b.n	800e5e4 <Buil_Pop+0x1e8>
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	f7ff fe80 	bl	800e2d8 <NotePixel>
 800e5d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3301      	adds	r3, #1
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	80fb      	strh	r3, [r7, #6]
 800e5e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e5e8:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <Buil_Pop+0x218>)
 800e5ea:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800e5ee:	0fd9      	lsrs	r1, r3, #31
 800e5f0:	440b      	add	r3, r1
 800e5f2:	105b      	asrs	r3, r3, #1
 800e5f4:	b21b      	sxth	r3, r3
 800e5f6:	3b06      	subs	r3, #6
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	dbea      	blt.n	800e5d2 <Buil_Pop+0x1d6>
}
 800e5fc:	bf00      	nop
 800e5fe:	bf00      	nop
 800e600:	3708      	adds	r7, #8
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20000f84 	.word	0x20000f84
 800e60c:	20000002 	.word	0x20000002
 800e610:	20000004 	.word	0x20000004
 800e614:	20000140 	.word	0x20000140

0800e618 <PopColor>:

/*******************************************************************************
 PopColor: ��������ɫ����
*******************************************************************************/
void PopColor(unsigned short Board_Color, unsigned short Text_Color)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	460a      	mov	r2, r1
 800e622:	80fb      	strh	r3, [r7, #6]
 800e624:	4613      	mov	r3, r2
 800e626:	80bb      	strh	r3, [r7, #4]
  ParamTab[POP_B] = Board_Color;
 800e628:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e62c:	4b06      	ldr	r3, [pc, #24]	; (800e648 <PopColor+0x30>)
 800e62e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  ParamTab[POP_T] = Text_Color;
 800e632:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e636:	4b04      	ldr	r3, [pc, #16]	; (800e648 <PopColor+0x30>)
 800e638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	20000140 	.word	0x20000140

0800e64c <Close_Pop>:

/*******************************************************************************
  Close_Pop: �رղ˵������Ự��
*******************************************************************************/
void Close_Pop(void)
{
 800e64c:	b480      	push	{r7}
 800e64e:	af00      	add	r7, sp, #0
  PopType &= ~(LIST_POP | DAILOG_POP);
 800e650:	4b07      	ldr	r3, [pc, #28]	; (800e670 <Close_Pop+0x24>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	f023 0306 	bic.w	r3, r3, #6
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	4b05      	ldr	r3, [pc, #20]	; (800e670 <Close_Pop+0x24>)
 800e65c:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = P_HID;
 800e65e:	4b05      	ldr	r3, [pc, #20]	; (800e674 <Close_Pop+0x28>)
 800e660:	2201      	movs	r2, #1
 800e662:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e666:	bf00      	nop
 800e668:	46bd      	mov	sp, r7
 800e66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66e:	4770      	bx	lr
 800e670:	2000078a 	.word	0x2000078a
 800e674:	20000140 	.word	0x20000140

0800e678 <List_Pop>:

/*******************************************************************************
  List_Pop: �򿪲˵���
*******************************************************************************/
void List_Pop(void)
{
 800e678:	b480      	push	{r7}
 800e67a:	af00      	add	r7, sp, #0
  PopType |= LIST_POP;
 800e67c:	4b07      	ldr	r3, [pc, #28]	; (800e69c <List_Pop+0x24>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	f043 0302 	orr.w	r3, r3, #2
 800e684:	b2da      	uxtb	r2, r3
 800e686:	4b05      	ldr	r3, [pc, #20]	; (800e69c <List_Pop+0x24>)
 800e688:	701a      	strb	r2, [r3, #0]
  ParamTab[POP_F] = SHOW;
 800e68a:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <List_Pop+0x28>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e692:	bf00      	nop
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	2000078a 	.word	0x2000078a
 800e6a0:	20000140 	.word	0x20000140

0800e6a4 <Dialog_Pop>:

/*******************************************************************************
  Dialog_Pop: �����Ự��
*******************************************************************************/
void Dialog_Pop(char* Str)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af02      	add	r7, sp, #8
 800e6aa:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800e6ac:	4b2a      	ldr	r3, [pc, #168]	; (800e758 <Dialog_Pop+0xb4>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f043 0304 	orr.w	r3, r3, #4
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	4b28      	ldr	r3, [pc, #160]	; (800e758 <Dialog_Pop+0xb4>)
 800e6b8:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 16*8;
 800e6ba:	4b28      	ldr	r3, [pc, #160]	; (800e75c <Dialog_Pop+0xb8>)
 800e6bc:	2280      	movs	r2, #128	; 0x80
 800e6be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 2*3*16;
 800e6c2:	4b26      	ldr	r3, [pc, #152]	; (800e75c <Dialog_Pop+0xb8>)
 800e6c4:	2260      	movs	r2, #96	; 0x60
 800e6c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 80;
 800e6ca:	4b24      	ldr	r3, [pc, #144]	; (800e75c <Dialog_Pop+0xb8>)
 800e6cc:	2250      	movs	r2, #80	; 0x50
 800e6ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800e6d2:	4b22      	ldr	r3, [pc, #136]	; (800e75c <Dialog_Pop+0xb8>)
 800e6d4:	22c8      	movs	r2, #200	; 0xc8
 800e6d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800e6da:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e6de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e6e2:	f7ff ff99 	bl	800e618 <PopColor>
  Buil_Pop();
 800e6e6:	f7ff fe89 	bl	800e3fc <Buil_Pop>
  NoteSTR( 1*8, 28, PRN, Str);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	211c      	movs	r1, #28
 800e6f0:	2008      	movs	r0, #8
 800e6f2:	f000 f8e1 	bl	800e8b8 <NoteSTR>
  NoteSTR( 2*6, 8, SYMB+INV,  "{|");
 800e6f6:	4b1a      	ldr	r3, [pc, #104]	; (800e760 <Dialog_Pop+0xbc>)
 800e6f8:	2211      	movs	r2, #17
 800e6fa:	2108      	movs	r1, #8
 800e6fc:	200c      	movs	r0, #12
 800e6fe:	f000 f8db 	bl	800e8b8 <NoteSTR>
  Note_4Point(PRN, 2*6, 8, 2, 10);
 800e702:	230a      	movs	r3, #10
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	2302      	movs	r3, #2
 800e708:	2208      	movs	r2, #8
 800e70a:	210c      	movs	r1, #12
 800e70c:	2000      	movs	r0, #0
 800e70e:	f000 f979 	bl	800ea04 <Note_4Point>
  NoteSTR( 4*6, 8, PRN,  ": Yes");
 800e712:	4b14      	ldr	r3, [pc, #80]	; (800e764 <Dialog_Pop+0xc0>)
 800e714:	2200      	movs	r2, #0
 800e716:	2108      	movs	r1, #8
 800e718:	2018      	movs	r0, #24
 800e71a:	f000 f8cd 	bl	800e8b8 <NoteSTR>
  NoteSTR(12*6, 8, SYMB+INV,  "yz");
 800e71e:	4b12      	ldr	r3, [pc, #72]	; (800e768 <Dialog_Pop+0xc4>)
 800e720:	2211      	movs	r2, #17
 800e722:	2108      	movs	r1, #8
 800e724:	2048      	movs	r0, #72	; 0x48
 800e726:	f000 f8c7 	bl	800e8b8 <NoteSTR>
  Note_4Point(PRN, 12*6, 8, 2, 10);
 800e72a:	230a      	movs	r3, #10
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	2302      	movs	r3, #2
 800e730:	2208      	movs	r2, #8
 800e732:	2148      	movs	r1, #72	; 0x48
 800e734:	2000      	movs	r0, #0
 800e736:	f000 f965 	bl	800ea04 <Note_4Point>
  NoteSTR(14*6, 8, PRN,  ": No");
 800e73a:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <Dialog_Pop+0xc8>)
 800e73c:	2200      	movs	r2, #0
 800e73e:	2108      	movs	r1, #8
 800e740:	2054      	movs	r0, #84	; 0x54
 800e742:	f000 f8b9 	bl	800e8b8 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <Dialog_Pop+0xb8>)
 800e748:	2200      	movs	r2, #0
 800e74a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	2000078a 	.word	0x2000078a
 800e75c:	20000140 	.word	0x20000140
 800e760:	080001c4 	.word	0x080001c4
 800e764:	080001c8 	.word	0x080001c8
 800e768:	080001d0 	.word	0x080001d0
 800e76c:	080001d4 	.word	0x080001d4

0800e770 <Calibrate_Pop>:

/*******************************************************************************
  Calibrate_Pop: �����Ự��
*******************************************************************************/
void Calibrate_Pop(char* Str)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800e778:	4b16      	ldr	r3, [pc, #88]	; (800e7d4 <Calibrate_Pop+0x64>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	f043 0304 	orr.w	r3, r3, #4
 800e780:	b2da      	uxtb	r2, r3
 800e782:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <Calibrate_Pop+0x64>)
 800e784:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 25*8;
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <Calibrate_Pop+0x68>)
 800e788:	22c8      	movs	r2, #200	; 0xc8
 800e78a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 4*16;
 800e78e:	4b12      	ldr	r3, [pc, #72]	; (800e7d8 <Calibrate_Pop+0x68>)
 800e790:	2240      	movs	r2, #64	; 0x40
 800e792:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 50;
 800e796:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <Calibrate_Pop+0x68>)
 800e798:	2232      	movs	r2, #50	; 0x32
 800e79a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 230;
 800e79e:	4b0e      	ldr	r3, [pc, #56]	; (800e7d8 <Calibrate_Pop+0x68>)
 800e7a0:	22e6      	movs	r2, #230	; 0xe6
 800e7a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800e7a6:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e7aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e7ae:	f7ff ff33 	bl	800e618 <PopColor>
  Buil_Pop();
 800e7b2:	f7ff fe23 	bl	800e3fc <Buil_Pop>
  NoteSTR( 2*8, 10, PRN, Str);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	210a      	movs	r1, #10
 800e7bc:	2010      	movs	r0, #16
 800e7be:	f000 f87b 	bl	800e8b8 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <Calibrate_Pop+0x68>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	2000078a 	.word	0x2000078a
 800e7d8:	20000140 	.word	0x20000140

0800e7dc <CalSave_Pop>:

/*******************************************************************************
  CalSaveg_Pop: �����Ự��
*******************************************************************************/
void CalSave_Pop(char* Str)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af02      	add	r7, sp, #8
 800e7e2:	6078      	str	r0, [r7, #4]
  PopType |= DAILOG_POP;
 800e7e4:	4b2d      	ldr	r3, [pc, #180]	; (800e89c <CalSave_Pop+0xc0>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	f043 0304 	orr.w	r3, r3, #4
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	4b2b      	ldr	r3, [pc, #172]	; (800e89c <CalSave_Pop+0xc0>)
 800e7f0:	701a      	strb	r2, [r3, #0]
  ParamTab[WXx1]= 13*16;
 800e7f2:	4b2b      	ldr	r3, [pc, #172]	; (800e8a0 <CalSave_Pop+0xc4>)
 800e7f4:	22d0      	movs	r2, #208	; 0xd0
 800e7f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]= 6*16;
 800e7fa:	4b29      	ldr	r3, [pc, #164]	; (800e8a0 <CalSave_Pop+0xc4>)
 800e7fc:	2260      	movs	r2, #96	; 0x60
 800e7fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  ParamTab[BXx1]= 30;
 800e802:	4b27      	ldr	r3, [pc, #156]	; (800e8a0 <CalSave_Pop+0xc4>)
 800e804:	221e      	movs	r2, #30
 800e806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= 200;
 800e80a:	4b25      	ldr	r3, [pc, #148]	; (800e8a0 <CalSave_Pop+0xc4>)
 800e80c:	22c8      	movs	r2, #200	; 0xc8
 800e80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  PopColor(WHT, DAR);
 800e812:	f643 11e7 	movw	r1, #14823	; 0x39e7
 800e816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e81a:	f7ff fefd 	bl	800e618 <PopColor>
  Buil_Pop();
 800e81e:	f7ff fded 	bl	800e3fc <Buil_Pop>
  NoteSTR( 1*6, 28, PRN, "Complete Cal,");
 800e822:	4b20      	ldr	r3, [pc, #128]	; (800e8a4 <CalSave_Pop+0xc8>)
 800e824:	2200      	movs	r2, #0
 800e826:	211c      	movs	r1, #28
 800e828:	2006      	movs	r0, #6
 800e82a:	f000 f845 	bl	800e8b8 <NoteSTR>
  NoteSTR( 15*6, 28, PRN, Str);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	211c      	movs	r1, #28
 800e834:	205a      	movs	r0, #90	; 0x5a
 800e836:	f000 f83f 	bl	800e8b8 <NoteSTR>
  NoteSTR( 5*6, 8, SYMB+INV,  "{|");
 800e83a:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <CalSave_Pop+0xcc>)
 800e83c:	2211      	movs	r2, #17
 800e83e:	2108      	movs	r1, #8
 800e840:	201e      	movs	r0, #30
 800e842:	f000 f839 	bl	800e8b8 <NoteSTR>
  Note_4Point(PRN, 5*6, 8, 2, 10);
 800e846:	230a      	movs	r3, #10
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	2302      	movs	r3, #2
 800e84c:	2208      	movs	r2, #8
 800e84e:	211e      	movs	r1, #30
 800e850:	2000      	movs	r0, #0
 800e852:	f000 f8d7 	bl	800ea04 <Note_4Point>
  NoteSTR( 7*6, 8, PRN,  ": Yes");
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <CalSave_Pop+0xd0>)
 800e858:	2200      	movs	r2, #0
 800e85a:	2108      	movs	r1, #8
 800e85c:	202a      	movs	r0, #42	; 0x2a
 800e85e:	f000 f82b 	bl	800e8b8 <NoteSTR>
  NoteSTR(20*6, 8, SYMB+INV,  "yz");
 800e862:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <CalSave_Pop+0xd4>)
 800e864:	2211      	movs	r2, #17
 800e866:	2108      	movs	r1, #8
 800e868:	2078      	movs	r0, #120	; 0x78
 800e86a:	f000 f825 	bl	800e8b8 <NoteSTR>
  Note_4Point(PRN, 20*6, 8, 2, 10);
 800e86e:	230a      	movs	r3, #10
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	2302      	movs	r3, #2
 800e874:	2208      	movs	r2, #8
 800e876:	2178      	movs	r1, #120	; 0x78
 800e878:	2000      	movs	r0, #0
 800e87a:	f000 f8c3 	bl	800ea04 <Note_4Point>
  NoteSTR(22*6, 8, PRN,  ": No");
 800e87e:	4b0d      	ldr	r3, [pc, #52]	; (800e8b4 <CalSave_Pop+0xd8>)
 800e880:	2200      	movs	r2, #0
 800e882:	2108      	movs	r1, #8
 800e884:	2084      	movs	r0, #132	; 0x84
 800e886:	f000 f817 	bl	800e8b8 <NoteSTR>
  ParamTab[POP_F] = SHOW;
 800e88a:	4b05      	ldr	r3, [pc, #20]	; (800e8a0 <CalSave_Pop+0xc4>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	2000078a 	.word	0x2000078a
 800e8a0:	20000140 	.word	0x20000140
 800e8a4:	080001dc 	.word	0x080001dc
 800e8a8:	080001c4 	.word	0x080001c4
 800e8ac:	080001c8 	.word	0x080001c8
 800e8b0:	080001d0 	.word	0x080001d0
 800e8b4:	080001d4 	.word	0x080001d4

0800e8b8 <NoteSTR>:

/*******************************************************************************
 NoteSTR: ����������ʾ�ַ�/ͼ�鴮      Mode = bit0: Normal/Inv, bit1: Char/Symb
*******************************************************************************/
void NoteSTR(short Nx0, short Ny0, char Mode, char *Str)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	81fb      	strh	r3, [r7, #14]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	81bb      	strh	r3, [r7, #12]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	72fb      	strb	r3, [r7, #11]

  char Code;
  short i, j, k;

  Nx = Nx0, Ny = Ny0;
 800e8cc:	4a48      	ldr	r2, [pc, #288]	; (800e9f0 <NoteSTR+0x138>)
 800e8ce:	89fb      	ldrh	r3, [r7, #14]
 800e8d0:	8013      	strh	r3, [r2, #0]
 800e8d2:	4a48      	ldr	r2, [pc, #288]	; (800e9f4 <NoteSTR+0x13c>)
 800e8d4:	89bb      	ldrh	r3, [r7, #12]
 800e8d6:	8013      	strh	r3, [r2, #0]

  while(*Str != 0){
 800e8d8:	e080      	b.n	800e9dc <NoteSTR+0x124>
    Code = *Str++;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	607a      	str	r2, [r7, #4]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	747b      	strb	r3, [r7, #17]

    for(i=0; i<6; ++i){
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	82fb      	strh	r3, [r7, #22]
 800e8e8:	e074      	b.n	800e9d4 <NoteSTR+0x11c>
      if(!(Mode & SYMB)) k = CHAR6x8[((Code-0X21)*6)+ i];
 800e8ea:	7afb      	ldrb	r3, [r7, #11]
 800e8ec:	f003 0310 	and.w	r3, r3, #16
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10e      	bne.n	800e912 <NoteSTR+0x5a>
 800e8f4:	7c7b      	ldrb	r3, [r7, #17]
 800e8f6:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	4413      	add	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	461a      	mov	r2, r3
 800e904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e908:	4413      	add	r3, r2
 800e90a:	4a3b      	ldr	r2, [pc, #236]	; (800e9f8 <NoteSTR+0x140>)
 800e90c:	5cd3      	ldrb	r3, [r2, r3]
 800e90e:	827b      	strh	r3, [r7, #18]
 800e910:	e00d      	b.n	800e92e <NoteSTR+0x76>
      else               k = SYMB6x8[(Code - '!')*6 + i];
 800e912:	7c7b      	ldrb	r3, [r7, #17]
 800e914:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 800e918:	4613      	mov	r3, r2
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	4413      	add	r3, r2
 800e91e:	005b      	lsls	r3, r3, #1
 800e920:	461a      	mov	r2, r3
 800e922:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e926:	4413      	add	r3, r2
 800e928:	4a34      	ldr	r2, [pc, #208]	; (800e9fc <NoteSTR+0x144>)
 800e92a:	5cd3      	ldrb	r3, [r2, r3]
 800e92c:	827b      	strh	r3, [r7, #18]
      if(Mode & VOID) k &= (i%2)? 0xAAAA : 0x5555;
 800e92e:	7afb      	ldrb	r3, [r7, #11]
 800e930:	f003 0320 	and.w	r3, r3, #32
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00c      	beq.n	800e952 <NoteSTR+0x9a>
 800e938:	8afb      	ldrh	r3, [r7, #22]
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	b29b      	uxth	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <NoteSTR+0x90>
 800e944:	4a2e      	ldr	r2, [pc, #184]	; (800ea00 <NoteSTR+0x148>)
 800e946:	e001      	b.n	800e94c <NoteSTR+0x94>
 800e948:	f245 5255 	movw	r2, #21845	; 0x5555
 800e94c:	8a7b      	ldrh	r3, [r7, #18]
 800e94e:	4013      	ands	r3, r2
 800e950:	827b      	strh	r3, [r7, #18]
      k <<= 2;
 800e952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800e95a:	2300      	movs	r3, #0
 800e95c:	82bb      	strh	r3, [r7, #20]
 800e95e:	e01f      	b.n	800e9a0 <NoteSTR+0xe8>
        if(k & 1)  NotePixel((Mode & INV)? 0 : 1);
 800e960:	8a7b      	ldrh	r3, [r7, #18]
 800e962:	f003 0301 	and.w	r3, r3, #1
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00b      	beq.n	800e982 <NoteSTR+0xca>
 800e96a:	7afb      	ldrb	r3, [r7, #11]
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	bf0c      	ite	eq
 800e974:	2301      	moveq	r3, #1
 800e976:	2300      	movne	r3, #0
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff fcac 	bl	800e2d8 <NotePixel>
 800e980:	e006      	b.n	800e990 <NoteSTR+0xd8>
        else       NotePixel((Mode & INV)? 1 : 0);
 800e982:	7afb      	ldrb	r3, [r7, #11]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7ff fca4 	bl	800e2d8 <NotePixel>
       k >>= 1;
 800e990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e994:	105b      	asrs	r3, r3, #1
 800e996:	827b      	strh	r3, [r7, #18]
      for(j=0; j<14; ++j){  //j<8ʱ�����У�j<10������   �����¸�������
 800e998:	8abb      	ldrh	r3, [r7, #20]
 800e99a:	3301      	adds	r3, #1
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	82bb      	strh	r3, [r7, #20]
 800e9a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e9a4:	2b0d      	cmp	r3, #13
 800e9a6:	dddb      	ble.n	800e960 <NoteSTR+0xa8>
      }
      Nx++; Ny -= 14;
 800e9a8:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <NoteSTR+0x138>)
 800e9aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	b21a      	sxth	r2, r3
 800e9b6:	4b0e      	ldr	r3, [pc, #56]	; (800e9f0 <NoteSTR+0x138>)
 800e9b8:	801a      	strh	r2, [r3, #0]
 800e9ba:	4b0e      	ldr	r3, [pc, #56]	; (800e9f4 <NoteSTR+0x13c>)
 800e9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	3b0e      	subs	r3, #14
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	b21a      	sxth	r2, r3
 800e9c8:	4b0a      	ldr	r3, [pc, #40]	; (800e9f4 <NoteSTR+0x13c>)
 800e9ca:	801a      	strh	r2, [r3, #0]
    for(i=0; i<6; ++i){
 800e9cc:	8afb      	ldrh	r3, [r7, #22]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	82fb      	strh	r3, [r7, #22]
 800e9d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e9d8:	2b05      	cmp	r3, #5
 800e9da:	dd86      	ble.n	800e8ea <NoteSTR+0x32>
  while(*Str != 0){
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f47f af7a 	bne.w	800e8da <NoteSTR+0x22>
    }
  }
}
 800e9e6:	bf00      	nop
 800e9e8:	bf00      	nop
 800e9ea:	3718      	adds	r7, #24
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20000002 	.word	0x20000002
 800e9f4:	20000004 	.word	0x20000004
 800e9f8:	080016c4 	.word	0x080016c4
 800e9fc:	08001490 	.word	0x08001490
 800ea00:	ffffaaaa 	.word	0xffffaaaa

0800ea04 <Note_4Point>:

/*******************************************************************************
Note_4Point:���Ķ��ǵ�
*******************************************************************************/
void Note_4Point(char Mode, short x, short y, char Str_Cnt, char High)
{
 800ea04:	b590      	push	{r4, r7, lr}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	4608      	mov	r0, r1
 800ea0e:	4611      	mov	r1, r2
 800ea10:	461a      	mov	r2, r3
 800ea12:	4623      	mov	r3, r4
 800ea14:	71fb      	strb	r3, [r7, #7]
 800ea16:	4603      	mov	r3, r0
 800ea18:	80bb      	strh	r3, [r7, #4]
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	807b      	strh	r3, [r7, #2]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	71bb      	strb	r3, [r7, #6]
  High = High+4;
 800ea22:	7e3b      	ldrb	r3, [r7, #24]
 800ea24:	3304      	adds	r3, #4
 800ea26:	763b      	strb	r3, [r7, #24]

  Nx = x, Ny = y;
 800ea28:	4a2e      	ldr	r2, [pc, #184]	; (800eae4 <Note_4Point+0xe0>)
 800ea2a:	88bb      	ldrh	r3, [r7, #4]
 800ea2c:	8013      	strh	r3, [r2, #0]
 800ea2e:	4a2e      	ldr	r2, [pc, #184]	; (800eae8 <Note_4Point+0xe4>)
 800ea30:	887b      	ldrh	r3, [r7, #2]
 800ea32:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	f003 0301 	and.w	r3, r3, #1
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7ff fc4b 	bl	800e2d8 <NotePixel>
  Nx = x, Ny = y+High-1;
 800ea42:	4a28      	ldr	r2, [pc, #160]	; (800eae4 <Note_4Point+0xe0>)
 800ea44:	88bb      	ldrh	r3, [r7, #4]
 800ea46:	8013      	strh	r3, [r2, #0]
 800ea48:	7e3b      	ldrb	r3, [r7, #24]
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	887b      	ldrh	r3, [r7, #2]
 800ea4e:	4413      	add	r3, r2
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	3b01      	subs	r3, #1
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	b21a      	sxth	r2, r3
 800ea58:	4b23      	ldr	r3, [pc, #140]	; (800eae8 <Note_4Point+0xe4>)
 800ea5a:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff fc37 	bl	800e2d8 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y;
 800ea6a:	79bb      	ldrb	r3, [r7, #6]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	461a      	mov	r2, r3
 800ea70:	0052      	lsls	r2, r2, #1
 800ea72:	4413      	add	r3, r2
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	88bb      	ldrh	r3, [r7, #4]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	b21a      	sxth	r2, r3
 800ea84:	4b17      	ldr	r3, [pc, #92]	; (800eae4 <Note_4Point+0xe0>)
 800ea86:	801a      	strh	r2, [r3, #0]
 800ea88:	4a17      	ldr	r2, [pc, #92]	; (800eae8 <Note_4Point+0xe4>)
 800ea8a:	887b      	ldrh	r3, [r7, #2]
 800ea8c:	8013      	strh	r3, [r2, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	f003 0301 	and.w	r3, r3, #1
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff fc1e 	bl	800e2d8 <NotePixel>
  Nx = x+Str_Cnt*(6)-1, Ny = y+High-1;
 800ea9c:	79bb      	ldrb	r3, [r7, #6]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	0052      	lsls	r2, r2, #1
 800eaa4:	4413      	add	r3, r2
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	88bb      	ldrh	r3, [r7, #4]
 800eaac:	4413      	add	r3, r2
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b01      	subs	r3, #1
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	b21a      	sxth	r2, r3
 800eab6:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <Note_4Point+0xe0>)
 800eab8:	801a      	strh	r2, [r3, #0]
 800eaba:	7e3b      	ldrb	r3, [r7, #24]
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	887b      	ldrh	r3, [r7, #2]
 800eac0:	4413      	add	r3, r2
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	3b01      	subs	r3, #1
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	b21a      	sxth	r2, r3
 800eaca:	4b07      	ldr	r3, [pc, #28]	; (800eae8 <Note_4Point+0xe4>)
 800eacc:	801a      	strh	r2, [r3, #0]
  NotePixel((Mode & INV)? 1 : 0);
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fbfe 	bl	800e2d8 <NotePixel>

}
 800eadc:	bf00      	nop
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd90      	pop	{r4, r7, pc}
 800eae4:	20000002 	.word	0x20000002
 800eae8:	20000004 	.word	0x20000004

0800eaec <ExtFlash_SendByte>:

/*******************************************************************************
 SPI_FLASH_SendByte
*******************************************************************************/
char ExtFlash_SendByte(char byte)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	71fb      	strb	r3, [r7, #7]
   char retbyte=0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	73fb      	strb	r3, [r7, #15]
	Tout = 0;
 800eafa:	4b1d      	ldr	r3, [pc, #116]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eafc:	2200      	movs	r2, #0
 800eafe:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800eb00:	e009      	b.n	800eb16 <ExtFlash_SendByte+0x2a>
  {
    if(Tout++ > TMAX)
 800eb02:	4b1b      	ldr	r3, [pc, #108]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	4919      	ldr	r1, [pc, #100]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eb0a:	600a      	str	r2, [r1, #0]
 800eb0c:	4a19      	ldr	r2, [pc, #100]	; (800eb74 <ExtFlash_SendByte+0x88>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d901      	bls.n	800eb16 <ExtFlash_SendByte+0x2a>
    	return 255;
 800eb12:	23ff      	movs	r3, #255	; 0xff
 800eb14:	e027      	b.n	800eb66 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) /*SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET*/
 800eb16:	4818      	ldr	r0, [pc, #96]	; (800eb78 <ExtFlash_SendByte+0x8c>)
 800eb18:	f00e f936 	bl	801cd88 <HAL_SPI_GetState>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d1ef      	bne.n	800eb02 <ExtFlash_SendByte+0x16>
  }
  HAL_SPI_Transmit(&hspi2, (unsigned char*)&byte, 1, 1);// timeout 1 ms  SPI_I2S_SendData(SPI2, byte);
 800eb22:	1df9      	adds	r1, r7, #7
 800eb24:	2301      	movs	r3, #1
 800eb26:	2201      	movs	r2, #1
 800eb28:	4813      	ldr	r0, [pc, #76]	; (800eb78 <ExtFlash_SendByte+0x8c>)
 800eb2a:	f00d fc34 	bl	801c396 <HAL_SPI_Transmit>
  Tout = 0;
 800eb2e:	4b10      	ldr	r3, [pc, #64]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	601a      	str	r2, [r3, #0]
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800eb34:	e009      	b.n	800eb4a <ExtFlash_SendByte+0x5e>
  {
    if(Tout++ > TMAX)
 800eb36:	4b0e      	ldr	r3, [pc, #56]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	1c5a      	adds	r2, r3, #1
 800eb3c:	490c      	ldr	r1, [pc, #48]	; (800eb70 <ExtFlash_SendByte+0x84>)
 800eb3e:	600a      	str	r2, [r1, #0]
 800eb40:	4a0c      	ldr	r2, [pc, #48]	; (800eb74 <ExtFlash_SendByte+0x88>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d901      	bls.n	800eb4a <ExtFlash_SendByte+0x5e>
    	return 255;
 800eb46:	23ff      	movs	r3, #255	; 0xff
 800eb48:	e00d      	b.n	800eb66 <ExtFlash_SendByte+0x7a>
  while(HAL_SPI_GetState( &hspi2 ) != HAL_SPI_STATE_READY) //  while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
 800eb4a:	480b      	ldr	r0, [pc, #44]	; (800eb78 <ExtFlash_SendByte+0x8c>)
 800eb4c:	f00e f91c 	bl	801cd88 <HAL_SPI_GetState>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d1ef      	bne.n	800eb36 <ExtFlash_SendByte+0x4a>
  }
  HAL_SPI_Receive(&hspi2, (unsigned char*)&retbyte, 1, 1); //timeout 1 ms
 800eb56:	f107 010f 	add.w	r1, r7, #15
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	4806      	ldr	r0, [pc, #24]	; (800eb78 <ExtFlash_SendByte+0x8c>)
 800eb60:	f00d fd55 	bl	801c60e <HAL_SPI_Receive>
  return retbyte/*SPI_I2S_ReceiveData(SPI2)*/;
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	200015c8 	.word	0x200015c8
 800eb74:	000186a0 	.word	0x000186a0
 800eb78:	20006888 	.word	0x20006888

0800eb7c <ExtFlash_WaitForWriteEnd>:

/*******************************************************************************
 SPI_FLASH_WaitForWriteEnd
*******************************************************************************/
void ExtFlash_WaitForWriteEnd(void)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
  char FLASH_Status = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800eb86:	2200      	movs	r2, #0
 800eb88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800eb8c:	4812      	ldr	r0, [pc, #72]	; (800ebd8 <ExtFlash_WaitForWriteEnd+0x5c>)
 800eb8e:	f00b f8b1 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(RDSR);
 800eb92:	2005      	movs	r0, #5
 800eb94:	f7ff ffaa 	bl	800eaec <ExtFlash_SendByte>
  Tout = 0;
 800eb98:	4b10      	ldr	r3, [pc, #64]	; (800ebdc <ExtFlash_WaitForWriteEnd+0x60>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
  do
  {
	  FLASH_Status = ExtFlash_SendByte(Dummy_Byte);
 800eb9e:	20a5      	movs	r0, #165	; 0xa5
 800eba0:	f7ff ffa4 	bl	800eaec <ExtFlash_SendByte>
 800eba4:	4603      	mov	r3, r0
 800eba6:	71fb      	strb	r3, [r7, #7]
      if(Tout++ > TMAX)
 800eba8:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <ExtFlash_WaitForWriteEnd+0x60>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	1c5a      	adds	r2, r3, #1
 800ebae:	490b      	ldr	r1, [pc, #44]	; (800ebdc <ExtFlash_WaitForWriteEnd+0x60>)
 800ebb0:	600a      	str	r2, [r1, #0]
 800ebb2:	4a0b      	ldr	r2, [pc, #44]	; (800ebe0 <ExtFlash_WaitForWriteEnd+0x64>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d80b      	bhi.n	800ebd0 <ExtFlash_WaitForWriteEnd+0x54>
    	  return;
  }
  while((FLASH_Status & WIP_Flag) == SET);              // Write in progress
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d1ed      	bne.n	800eb9e <ExtFlash_WaitForWriteEnd+0x22>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ebc8:	4803      	ldr	r0, [pc, #12]	; (800ebd8 <ExtFlash_WaitForWriteEnd+0x5c>)
 800ebca:	f00b f893 	bl	8019cf4 <HAL_GPIO_WritePin>
 800ebce:	e000      	b.n	800ebd2 <ExtFlash_WaitForWriteEnd+0x56>
    	  return;
 800ebd0:	bf00      	nop
}
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	40020400 	.word	0x40020400
 800ebdc:	200015c8 	.word	0x200015c8
 800ebe0:	000186a0 	.word	0x000186a0

0800ebe4 <ExtFlash_PageRD>:

/*******************************************************************************
 SPI_FLASH_BufferRead
*******************************************************************************/
void ExtFlash_PageRD(char* pBuffer, unsigned ReadAddr, short Length)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	4613      	mov	r3, r2
 800ebf0:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ebf8:	481d      	ldr	r0, [pc, #116]	; (800ec70 <ExtFlash_PageRD+0x8c>)
 800ebfa:	f00b f87b 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ebfe:	f7ff ffbd 	bl	800eb7c <ExtFlash_WaitForWriteEnd>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ec02:	2200      	movs	r2, #0
 800ec04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec08:	4819      	ldr	r0, [pc, #100]	; (800ec70 <ExtFlash_PageRD+0x8c>)
 800ec0a:	f00b f873 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(READ);
 800ec0e:	2003      	movs	r0, #3
 800ec10:	f7ff ff6c 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr & 0xFF0000) >> 16);
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	0c1b      	lsrs	r3, r3, #16
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff ff66 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte((ReadAddr& 0xFF00) >> 8);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	0a1b      	lsrs	r3, r3, #8
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7ff ff60 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte(ReadAddr & 0xFF);
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff ff5b 	bl	800eaec <ExtFlash_SendByte>

  while(Length--)
 800ec36:	e009      	b.n	800ec4c <ExtFlash_PageRD+0x68>
  { // while there is data to be read
    *pBuffer = (ExtFlash_SendByte(Dummy_Byte));
 800ec38:	20a5      	movs	r0, #165	; 0xa5
 800ec3a:	f7ff ff57 	bl	800eaec <ExtFlash_SendByte>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	461a      	mov	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	701a      	strb	r2, [r3, #0]
    pBuffer++;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	60fb      	str	r3, [r7, #12]
  while(Length--)
 800ec4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	3a01      	subs	r2, #1
 800ec54:	b292      	uxth	r2, r2
 800ec56:	80fa      	strh	r2, [r7, #6]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1ed      	bne.n	800ec38 <ExtFlash_PageRD+0x54>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec62:	4803      	ldr	r0, [pc, #12]	; (800ec70 <ExtFlash_PageRD+0x8c>)
 800ec64:	f00b f846 	bl	8019cf4 <HAL_GPIO_WritePin>
}
 800ec68:	bf00      	nop
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	40020400 	.word	0x40020400

0800ec74 <ExtFlash_WriteEnable>:

/*******************************************************************************
 SPI_FLASH_WriteEnable
*******************************************************************************/
void ExtFlash_WriteEnable(void)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec7e:	4807      	ldr	r0, [pc, #28]	; (800ec9c <ExtFlash_WriteEnable+0x28>)
 800ec80:	f00b f838 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(WREN);
 800ec84:	2006      	movs	r0, #6
 800ec86:	f7ff ff31 	bl	800eaec <ExtFlash_SendByte>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ec90:	4802      	ldr	r0, [pc, #8]	; (800ec9c <ExtFlash_WriteEnable+0x28>)
 800ec92:	f00b f82f 	bl	8019cf4 <HAL_GPIO_WritePin>
}
 800ec96:	bf00      	nop
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	40020400 	.word	0x40020400

0800eca0 <ExtFlash_PageProg>:

/*******************************************************************************
 дFLASHҳ(256 Bytes)�� Mode=0: ��0��1���ݸ�д   Mode=1: ������д
*******************************************************************************/
void ExtFlash_PageProg(char* pBuffer, unsigned WriteAddr)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
  short   Lenght = 256;
 800ecaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecae:	81fb      	strh	r3, [r7, #14]

  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecb6:	481f      	ldr	r0, [pc, #124]	; (800ed34 <ExtFlash_PageProg+0x94>)
 800ecb8:	f00b f81c 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ecbc:	f7ff ff5e 	bl	800eb7c <ExtFlash_WaitForWriteEnd>
  ExtFlash_WriteEnable();
 800ecc0:	f7ff ffd8 	bl	800ec74 <ExtFlash_WriteEnable>
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ecca:	481a      	ldr	r0, [pc, #104]	; (800ed34 <ExtFlash_PageProg+0x94>)
 800eccc:	f00b f812 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_SendByte(PP);
 800ecd0:	2002      	movs	r0, #2
 800ecd2:	f7ff ff0b 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF0000) >> 16);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	0c1b      	lsrs	r3, r3, #16
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7ff ff05 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte((WriteAddr & 0xFF00) >> 8);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	0a1b      	lsrs	r3, r3, #8
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff feff 	bl	800eaec <ExtFlash_SendByte>
  ExtFlash_SendByte(WriteAddr & 0xFF);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7ff fefa 	bl	800eaec <ExtFlash_SendByte>
  while(Lenght--) {
 800ecf8:	e007      	b.n	800ed0a <ExtFlash_PageProg+0x6a>
    ExtFlash_SendByte((*pBuffer));
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff fef4 	bl	800eaec <ExtFlash_SendByte>
    pBuffer++;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3301      	adds	r3, #1
 800ed08:	607b      	str	r3, [r7, #4]
  while(Lenght--) {
 800ed0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	3a01      	subs	r2, #1
 800ed12:	b292      	uxth	r2, r2
 800ed14:	81fa      	strh	r2, [r7, #14]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1ef      	bne.n	800ecfa <ExtFlash_PageProg+0x5a>
  }
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed20:	4804      	ldr	r0, [pc, #16]	; (800ed34 <ExtFlash_PageProg+0x94>)
 800ed22:	f00a ffe7 	bl	8019cf4 <HAL_GPIO_WritePin>
  ExtFlash_WaitForWriteEnd();
 800ed26:	f7ff ff29 	bl	800eb7c <ExtFlash_WaitForWriteEnd>
}
 800ed2a:	bf00      	nop
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	40020400 	.word	0x40020400

0800ed38 <ExtFLASH_SectorErase>:

/*******************************************************************************
 SPI_FLASH_SectorErase  : Sector Erases the specified FLASH Page.(4k/sector)
*******************************************************************************/
void ExtFLASH_SectorErase(unsigned SectorAddr)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
    ExtFlash_WriteEnable();
 800ed40:	f7ff ff98 	bl	800ec74 <ExtFlash_WriteEnable>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET); //ExtFlash_CS_LOW();
 800ed44:	2200      	movs	r2, #0
 800ed46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed4a:	4811      	ldr	r0, [pc, #68]	; (800ed90 <ExtFLASH_SectorErase+0x58>)
 800ed4c:	f00a ffd2 	bl	8019cf4 <HAL_GPIO_WritePin>
    ExtFlash_SendByte(SE);
 800ed50:	2020      	movs	r0, #32
 800ed52:	f7ff fecb 	bl	800eaec <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF0000) >> 16);   //Send high address byte
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	0c1b      	lsrs	r3, r3, #16
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7ff fec5 	bl	800eaec <ExtFlash_SendByte>
    ExtFlash_SendByte((SectorAddr & 0xFF00) >> 8);      //Send medium address byte
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	0a1b      	lsrs	r3, r3, #8
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff febf 	bl	800eaec <ExtFlash_SendByte>
    ExtFlash_SendByte(SectorAddr & 0xFF);               //Send low address byte */
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff feba 	bl	800eaec <ExtFlash_SendByte>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET); //ExtFlash_CS_HIGH();
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ed7e:	4804      	ldr	r0, [pc, #16]	; (800ed90 <ExtFLASH_SectorErase+0x58>)
 800ed80:	f00a ffb8 	bl	8019cf4 <HAL_GPIO_WritePin>
    ExtFlash_WaitForWriteEnd();                         // Wait the end of Flash writing
 800ed84:	f7ff fefa 	bl	800eb7c <ExtFlash_WaitForWriteEnd>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	40020400 	.word	0x40020400

0800ed94 <ExtFlash_PageWR>:

void ExtFlash_PageWR(char* pBuffer, unsigned WriteAddr)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b0c8      	sub	sp, #288	; 0x120
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	1d3b      	adds	r3, r7, #4
 800ed9c:	6018      	str	r0, [r3, #0]
 800ed9e:	463b      	mov	r3, r7
 800eda0:	6019      	str	r1, [r3, #0]
  unsigned addr,i,j;
  char* ptr;
  char  page=0,flag=0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800eda8:	2300      	movs	r3, #0
 800edaa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  char  buffer[256];

  flag=0;
 800edae:	2300      	movs	r3, #0
 800edb0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    addr=WriteAddr & 0xFFF000;
 800edb4:	463b      	mov	r3, r7
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	4b3b      	ldr	r3, [pc, #236]	; (800eea8 <ExtFlash_PageWR+0x114>)
 800edba:	4013      	ands	r3, r2
 800edbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page=16;
 800edc0:	2310      	movs	r3, #16
 800edc2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800edc6:	e02e      	b.n	800ee26 <ExtFlash_PageWR+0x92>
  {
    ExtFlash_PageRD((char*)&buffer,addr, 256);
 800edc8:	f107 030c 	add.w	r3, r7, #12
 800edcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edd0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff ff05 	bl	800ebe4 <ExtFlash_PageRD>
    for(j=0;j<255;j++){
 800edda:	2300      	movs	r3, #0
 800eddc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ede0:	e012      	b.n	800ee08 <ExtFlash_PageWR+0x74>
      if(buffer[j++]!=0xff){
 800ede2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede6:	1c5a      	adds	r2, r3, #1
 800ede8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800edec:	f107 020c 	add.w	r2, r7, #12
 800edf0:	5cd3      	ldrb	r3, [r2, r3]
 800edf2:	2bff      	cmp	r3, #255	; 0xff
 800edf4:	d003      	beq.n	800edfe <ExtFlash_PageWR+0x6a>
        flag=1;
 800edf6:	2301      	movs	r3, #1
 800edf8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
        break;
 800edfc:	e008      	b.n	800ee10 <ExtFlash_PageWR+0x7c>
    for(j=0;j<255;j++){
 800edfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee02:	3301      	adds	r3, #1
 800ee04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ee08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0c:	2bfe      	cmp	r3, #254	; 0xfe
 800ee0e:	d9e8      	bls.n	800ede2 <ExtFlash_PageWR+0x4e>
      }
    }
    addr+=256;
 800ee10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ee14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ee18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    page--;
 800ee1c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ee20:	3b01      	subs	r3, #1
 800ee22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(page>0)
 800ee26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1cc      	bne.n	800edc8 <ExtFlash_PageWR+0x34>
  }
    page=16;
 800ee2e:	2310      	movs	r3, #16
 800ee30:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    addr=WriteAddr & 0xFFF000;
 800ee34:	463b      	mov	r3, r7
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	4b1b      	ldr	r3, [pc, #108]	; (800eea8 <ExtFlash_PageWR+0x114>)
 800ee3a:	4013      	ands	r3, r2
 800ee3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    if(flag==1)ExtFLASH_SectorErase(addr);
 800ee40:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d103      	bne.n	800ee50 <ExtFlash_PageWR+0xbc>
 800ee48:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ee4c:	f7ff ff74 	bl	800ed38 <ExtFLASH_SectorErase>
  ptr=pBuffer;
 800ee50:	1d3b      	adds	r3, r7, #4
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ee58:	2300      	movs	r3, #0
 800ee5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ee5e:	e016      	b.n	800ee8e <ExtFlash_PageWR+0xfa>
    ExtFlash_PageProg(ptr, addr);
 800ee60:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ee64:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ee68:	f7ff ff1a 	bl	800eca0 <ExtFlash_PageProg>
    addr+=256;
 800ee6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ee70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ee74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    ptr+=256;
 800ee78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ee80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  for(i=0;i<page;i++){
 800ee84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ee88:	3301      	adds	r3, #1
 800ee8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ee8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800ee92:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d3e2      	bcc.n	800ee60 <ExtFlash_PageWR+0xcc>
  }
}
 800ee9a:	bf00      	nop
 800ee9c:	bf00      	nop
 800ee9e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	00fff000 	.word	0x00fff000

0800eeac <ReadDiskData>:

/*******************************************************************************
(256 Bytes)
*******************************************************************************/
char ReadDiskData(char* pBuffer, unsigned ReadAddr, short Length)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
  char n = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	75fb      	strb	r3, [r7, #23]

  while(1)
  {
    Clash = 0;
 800eebe:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <ReadDiskData+0x48>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
    ExtFlash_PageRD(pBuffer, ReadAddr, Length);
 800eec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eec8:	461a      	mov	r2, r3
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f7ff fe89 	bl	800ebe4 <ExtFlash_PageRD>
    if(n++ > 6)
 800eed2:	7dfb      	ldrb	r3, [r7, #23]
 800eed4:	1c5a      	adds	r2, r3, #1
 800eed6:	75fa      	strb	r2, [r7, #23]
 800eed8:	2b06      	cmp	r3, #6
 800eeda:	d901      	bls.n	800eee0 <ReadDiskData+0x34>
    	return SEC_ERR;     //
 800eedc:	2301      	movs	r3, #1
 800eede:	e004      	b.n	800eeea <ReadDiskData+0x3e>
    if(Clash == 0)
 800eee0:	4b04      	ldr	r3, [pc, #16]	; (800eef4 <ReadDiskData+0x48>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1ea      	bne.n	800eebe <ReadDiskData+0x12>
    	return OK;       //
 800eee8:	2300      	movs	r3, #0
  }
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3718      	adds	r7, #24
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	2000078b 	.word	0x2000078b

0800eef8 <OpenFileRd>:

/*******************************************************************************

*******************************************************************************/
char OpenFileRd(char* pBuffer, char* pFileName, short* pCluster, unsigned* pDirAddr)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	603b      	str	r3, [r7, #0]
  short i, n;

  *pCluster = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	801a      	strh	r2, [r3, #0]
  for(*pDirAddr=FAT_V.ROOT_BASE; *pDirAddr<FAT_V.FILE_BASE; )
 800ef0c:	4b35      	ldr	r3, [pc, #212]	; (800efe4 <OpenFileRd+0xec>)
 800ef0e:	689a      	ldr	r2, [r3, #8]
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	e05b      	b.n	800efce <OpenFileRd+0xd6>
  {
    if(ReadDiskData(pBuffer, *pDirAddr,FAT_V.SEC_LEN)!= OK)
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a32      	ldr	r2, [pc, #200]	; (800efe4 <OpenFileRd+0xec>)
 800ef1c:	6952      	ldr	r2, [r2, #20]
 800ef1e:	b212      	sxth	r2, r2
 800ef20:	4619      	mov	r1, r3
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f7ff ffc2 	bl	800eeac <ReadDiskData>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <OpenFileRd+0x3a>
    	return SEC_ERR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e054      	b.n	800efdc <OpenFileRd+0xe4>
    for(n=0; n<FAT_V.SEC_LEN; n+=32)
 800ef32:	2300      	movs	r3, #0
 800ef34:	82bb      	strh	r3, [r7, #20]
 800ef36:	e044      	b.n	800efc2 <OpenFileRd+0xca>
    {   //?????????????????????256
      for(i=0; i<11; i++)
 800ef38:	2300      	movs	r3, #0
 800ef3a:	82fb      	strh	r3, [r7, #22]
 800ef3c:	e031      	b.n	800efa2 <OpenFileRd+0xaa>
      {
        if(pBuffer[n + i]!= 0)
 800ef3e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ef42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef46:	4413      	add	r3, r2
 800ef48:	461a      	mov	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d01e      	beq.n	800ef92 <OpenFileRd+0x9a>
        {
          if(pBuffer[n + i]!= pFileName[i])
 800ef54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ef58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	781a      	ldrb	r2, [r3, #0]
 800ef66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef6a:	68b9      	ldr	r1, [r7, #8]
 800ef6c:	440b      	add	r3, r1
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d11b      	bne.n	800efac <OpenFileRd+0xb4>
        	  break;
          if(i == 10)
 800ef74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef78:	2b0a      	cmp	r3, #10
 800ef7a:	d10c      	bne.n	800ef96 <OpenFileRd+0x9e>
          {                             //
            *pCluster = *(short*)(pBuffer + n + 0x1A); //
 800ef7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef80:	331a      	adds	r3, #26
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	4413      	add	r3, r2
 800ef86:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	801a      	strh	r2, [r3, #0]
            return OK;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e024      	b.n	800efdc <OpenFileRd+0xe4>
          }
        }
        else
        	return NEW;               //
 800ef92:	2304      	movs	r3, #4
 800ef94:	e022      	b.n	800efdc <OpenFileRd+0xe4>
      for(i=0; i<11; i++)
 800ef96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	82fb      	strh	r3, [r7, #22]
 800efa2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800efa6:	2b0a      	cmp	r3, #10
 800efa8:	ddc9      	ble.n	800ef3e <OpenFileRd+0x46>
 800efaa:	e000      	b.n	800efae <OpenFileRd+0xb6>
        	  break;
 800efac:	bf00      	nop
      }
      *pDirAddr += 32;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f103 0220 	add.w	r2, r3, #32
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	601a      	str	r2, [r3, #0]
    for(n=0; n<FAT_V.SEC_LEN; n+=32)
 800efba:	8abb      	ldrh	r3, [r7, #20]
 800efbc:	3320      	adds	r3, #32
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	82bb      	strh	r3, [r7, #20]
 800efc2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800efc6:	4b07      	ldr	r3, [pc, #28]	; (800efe4 <OpenFileRd+0xec>)
 800efc8:	695b      	ldr	r3, [r3, #20]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d3b4      	bcc.n	800ef38 <OpenFileRd+0x40>
  for(*pDirAddr=FAT_V.ROOT_BASE; *pDirAddr<FAT_V.FILE_BASE; )
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <OpenFileRd+0xec>)
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d39d      	bcc.n	800ef16 <OpenFileRd+0x1e>
    }
  }
  return OVER;
 800efda:	2303      	movs	r3, #3
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3718      	adds	r7, #24
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	20000194 	.word	0x20000194

0800efe8 <ProgDiskPage>:

/*******************************************************************************
 д����ҳ��(256 Bytes)  ����USB��д��ͻ����д
*******************************************************************************/
char ProgDiskPage(char* pBuffer, int ProgAddr)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  char n = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	73fb      	strb	r3, [r7, #15]

  while(1){
    Clash = 0;
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <ProgDiskPage+0x40>)
 800eff8:	2200      	movs	r2, #0
 800effa:	701a      	strb	r2, [r3, #0]
    ExtFlash_PageWR(pBuffer, ProgAddr);
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fec7 	bl	800ed94 <ExtFlash_PageWR>
    if(n++ > 6) return SEC_ERR;     // ��ʱ������
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	73fa      	strb	r2, [r7, #15]
 800f00c:	2b06      	cmp	r3, #6
 800f00e:	d901      	bls.n	800f014 <ProgDiskPage+0x2c>
 800f010:	2301      	movs	r3, #1
 800f012:	e004      	b.n	800f01e <ProgDiskPage+0x36>
    if(Clash == 0) return OK;       // �޳�ͻ�����򷵻�
 800f014:	4b04      	ldr	r3, [pc, #16]	; (800f028 <ProgDiskPage+0x40>)
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1ec      	bne.n	800eff6 <ProgDiskPage+0xe>
 800f01c:	2300      	movs	r3, #0
  }
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	2000078b 	.word	0x2000078b

0800f02c <SeekBlank>:

/*******************************************************************************
 ���ҿ��дغţ�����ʱָ��ָ����һ�����дغţ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char SeekBlank(char* pBuffer, short* pCluster)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  short  Tmp;
  char   Buffer[2];
  char   Tmp_Flag = 1;
 800f036:	2301      	movs	r3, #1
 800f038:	73fb      	strb	r3, [r7, #15]

  *(pCluster+1)= *pCluster;                                    // ���浱ǰ�غ�
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3302      	adds	r3, #2
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f044:	801a      	strh	r2, [r3, #0]

  for(*pCluster=0; (*pCluster)<4095; (*pCluster)++){
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2200      	movs	r2, #0
 800f04a:	801a      	strh	r2, [r3, #0]
 800f04c:	e05b      	b.n	800f106 <SeekBlank+0xda>
    if(ReadDiskData(Buffer, FAT_V.FAT1_BASE +(*pCluster)+(*pCluster)/2, 2)!= 0) return SEC_ERR;
 800f04e:	4b34      	ldr	r3, [pc, #208]	; (800f120 <SeekBlank+0xf4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f058:	441a      	add	r2, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f060:	0fd9      	lsrs	r1, r3, #31
 800f062:	440b      	add	r3, r1
 800f064:	105b      	asrs	r3, r3, #1
 800f066:	b21b      	sxth	r3, r3
 800f068:	18d1      	adds	r1, r2, r3
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	2202      	movs	r2, #2
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff ff1b 	bl	800eeac <ReadDiskData>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <SeekBlank+0x54>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e04a      	b.n	800f116 <SeekBlank+0xea>
    Tmp = ((*pCluster)& 1)?((*(short*)Buffer)>>4):((*(short*)Buffer)& 0xFFF);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f086:	b29b      	uxth	r3, r3
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d006      	beq.n	800f09e <SeekBlank+0x72>
 800f090:	f107 0308 	add.w	r3, r7, #8
 800f094:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f098:	111b      	asrs	r3, r3, #4
 800f09a:	b21b      	sxth	r3, r3
 800f09c:	e006      	b.n	800f0ac <SeekBlank+0x80>
 800f09e:	f107 0308 	add.w	r3, r7, #8
 800f0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f0aa:	b21b      	sxth	r3, r3
 800f0ac:	81bb      	strh	r3, [r7, #12]

    if((Tmp == 0)&&(Tmp_Flag == 0)&&(((*pCluster))!= *(pCluster+1))) {
 800f0ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d10f      	bne.n	800f0d6 <SeekBlank+0xaa>
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10c      	bne.n	800f0d6 <SeekBlank+0xaa>
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	3302      	adds	r3, #2
 800f0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d003      	beq.n	800f0d6 <SeekBlank+0xaa>
      Tmp_Flag = 1;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	73fb      	strb	r3, [r7, #15]
      return OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e01f      	b.n	800f116 <SeekBlank+0xea>
    }
    if((Tmp == 0)&&(Tmp_Flag == 1))  {
 800f0d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10a      	bne.n	800f0f4 <SeekBlank+0xc8>
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d107      	bne.n	800f0f4 <SeekBlank+0xc8>
      *(pCluster+2) = *pCluster;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f0ee:	801a      	strh	r2, [r3, #0]
      Tmp_Flag = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	73fb      	strb	r3, [r7, #15]
  for(*pCluster=0; (*pCluster)<4095; (*pCluster)++){
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	b21a      	sxth	r2, r3
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	801a      	strh	r2, [r3, #0]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f10c:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f110:	4293      	cmp	r3, r2
 800f112:	dd9c      	ble.n	800f04e <SeekBlank+0x22>
    }
  }
  return OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20000194 	.word	0x20000194

0800f124 <SetCluster>:

/*******************************************************************************
 ����һ�غ�д��FAT��ǰ������λ������ʱָ��ָ����һ�غţ�ָ��+1Ϊ��ǰ�غ�
*******************************************************************************/
char SetCluster(char* pBuffer, short* pCluster)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  short  Offset, i, k;
  int  SecAddr;

  i = *(pCluster+1);                    // ��ȡԭ��ǰ�غ�
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	82fb      	strh	r3, [r7, #22]
  k = *pCluster;                        // ��ȡ��һ�غ�
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	82bb      	strh	r3, [r7, #20]
  Offset = i+ i/2;
 800f13a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f13e:	0fda      	lsrs	r2, r3, #31
 800f140:	4413      	add	r3, r2
 800f142:	105b      	asrs	r3, r3, #1
 800f144:	b21b      	sxth	r3, r3
 800f146:	b29a      	uxth	r2, r3
 800f148:	8afb      	ldrh	r3, [r7, #22]
 800f14a:	4413      	add	r3, r2
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	827b      	strh	r3, [r7, #18]
  SecAddr = FAT_V.FAT1_BASE +(Offset & 0xF000 );
 800f150:	4b36      	ldr	r3, [pc, #216]	; (800f22c <SetCluster+0x108>)
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800f15c:	4413      	add	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]
  Offset &= 0x0FFF;
 800f160:	8a7b      	ldrh	r3, [r7, #18]
 800f162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f166:	827b      	strh	r3, [r7, #18]
  if(ReadDiskData(pBuffer, SecAddr, FAT_V.SEC_LEN)!= 0) return SEC_ERR; //???????????? old=258
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4a30      	ldr	r2, [pc, #192]	; (800f22c <SetCluster+0x108>)
 800f16c:	6952      	ldr	r2, [r2, #20]
 800f16e:	b212      	sxth	r2, r2
 800f170:	4619      	mov	r1, r3
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff fe9a 	bl	800eeac <ReadDiskData>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <SetCluster+0x5e>
 800f17e:	2301      	movs	r3, #1
 800f180:	e04f      	b.n	800f222 <SetCluster+0xfe>
  if(i & 1){
 800f182:	8afb      	ldrh	r3, [r7, #22]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d01e      	beq.n	800f1ca <SetCluster+0xa6>
    pBuffer[Offset  ]=(pBuffer[Offset]& 0x0F)+((k <<4)& 0xF0);
 800f18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	4413      	add	r3, r2
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f003 030f 	and.w	r3, r3, #15
 800f19a:	b2d9      	uxtb	r1, r3
 800f19c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f1a0:	011b      	lsls	r3, r3, #4
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	4403      	add	r3, r0
 800f1ac:	440a      	add	r2, r1
 800f1ae:	b2d2      	uxtb	r2, r2
 800f1b0:	701a      	strb	r2, [r3, #0]
    pBuffer[Offset+1]= k >>4;
 800f1b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f1b6:	111b      	asrs	r3, r3, #4
 800f1b8:	b219      	sxth	r1, r3
 800f1ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b2ca      	uxtb	r2, r1
 800f1c6:	701a      	strb	r2, [r3, #0]
 800f1c8:	e021      	b.n	800f20e <SetCluster+0xea>
  } else {
    pBuffer[Offset  ]= k & 0xFF;
 800f1ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	8aba      	ldrh	r2, [r7, #20]
 800f1d4:	b2d2      	uxtb	r2, r2
 800f1d6:	701a      	strb	r2, [r3, #0]
    pBuffer[Offset+1]=(pBuffer[Offset+1]& 0xF0)+((k>>8)& 0x0F);
 800f1d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1dc:	3301      	adds	r3, #1
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	f023 030f 	bic.w	r3, r3, #15
 800f1ea:	b25a      	sxtb	r2, r3
 800f1ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f1f0:	121b      	asrs	r3, r3, #8
 800f1f2:	b21b      	sxth	r3, r3
 800f1f4:	b25b      	sxtb	r3, r3
 800f1f6:	f003 030f 	and.w	r3, r3, #15
 800f1fa:	b25b      	sxtb	r3, r3
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	b259      	sxtb	r1, r3
 800f200:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f204:	3301      	adds	r3, #1
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	4413      	add	r3, r2
 800f20a:	b2ca      	uxtb	r2, r1
 800f20c:	701a      	strb	r2, [r3, #0]
  }

  if(ProgDiskPage(pBuffer, SecAddr)!= 0) return SEC_ERR;
 800f20e:	68f9      	ldr	r1, [r7, #12]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f7ff fee9 	bl	800efe8 <ProgDiskPage>
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <SetCluster+0xfc>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e000      	b.n	800f222 <SetCluster+0xfe>
  return OK;
 800f220:	2300      	movs	r3, #0
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20000194 	.word	0x20000194

0800f230 <NextCluster>:

/*******************************************************************************
 ������һ�����Ӵغź󷵻أ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char NextCluster(short* pCluster)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  short FatNum;
  int Addr;

  Addr=FAT_V.FAT1_BASE +(*pCluster + *pCluster/2);
 800f238:	4b27      	ldr	r3, [pc, #156]	; (800f2d8 <NextCluster+0xa8>)
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f242:	4618      	mov	r0, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f24a:	0fd9      	lsrs	r1, r3, #31
 800f24c:	440b      	add	r3, r1
 800f24e:	105b      	asrs	r3, r3, #1
 800f250:	b21b      	sxth	r3, r3
 800f252:	4403      	add	r3, r0
 800f254:	4413      	add	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
  *(pCluster+1)= *pCluster;                                   // ����ǰһ���غ�
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	3302      	adds	r3, #2
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f262:	801a      	strh	r2, [r3, #0]
  *pCluster = 0;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	801a      	strh	r2, [r3, #0]
  if((*(pCluster+1) >=FAT_V.FAT_END)||(*(pCluster+1)< 2)) return SEC_ERR;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3302      	adds	r3, #2
 800f26e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f272:	461a      	mov	r2, r3
 800f274:	4b18      	ldr	r3, [pc, #96]	; (800f2d8 <NextCluster+0xa8>)
 800f276:	699b      	ldr	r3, [r3, #24]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d205      	bcs.n	800f288 <NextCluster+0x58>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3302      	adds	r3, #2
 800f280:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f284:	2b01      	cmp	r3, #1
 800f286:	dc01      	bgt.n	800f28c <NextCluster+0x5c>
 800f288:	2301      	movs	r3, #1
 800f28a:	e021      	b.n	800f2d0 <NextCluster+0xa0>
  if(ReadDiskData((char*)&FatNum, Addr, 2)!= OK) return SEC_ERR;
 800f28c:	68f9      	ldr	r1, [r7, #12]
 800f28e:	f107 030a 	add.w	r3, r7, #10
 800f292:	2202      	movs	r2, #2
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fe09 	bl	800eeac <ReadDiskData>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <NextCluster+0x74>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e015      	b.n	800f2d0 <NextCluster+0xa0>
  *pCluster= (*(pCluster+1) & 1)?(FatNum >>4):(FatNum & 0xFFF); // ָ����һ���غ�
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3302      	adds	r3, #2
 800f2a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d004      	beq.n	800f2c0 <NextCluster+0x90>
 800f2b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f2ba:	111b      	asrs	r3, r3, #4
 800f2bc:	b21b      	sxth	r3, r3
 800f2be:	e004      	b.n	800f2ca <NextCluster+0x9a>
 800f2c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f2c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2c8:	b21b      	sxth	r3, r3
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	8013      	strh	r3, [r2, #0]
  return OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	20000194 	.word	0x20000194

0800f2dc <ProgFileSec>:

/*******************************************************************************
 д�ļ�����(512/4096 Bytes)����д��ǰFAT�����ز��ҵ�����һ���غ�
*******************************************************************************/
char ProgFileSec(char* pBuffer, short* pCluster)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  short Tmp;
  int ProgAddr = FAT_V.FILE_BASE + FAT_V.SEC_LEN*(*pCluster-2);
 800f2e6:	4b1f      	ldr	r3, [pc, #124]	; (800f364 <ProgFileSec+0x88>)
 800f2e8:	68da      	ldr	r2, [r3, #12]
 800f2ea:	4b1e      	ldr	r3, [pc, #120]	; (800f364 <ProgFileSec+0x88>)
 800f2ec:	695b      	ldr	r3, [r3, #20]
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f2f4:	3902      	subs	r1, #2
 800f2f6:	fb01 f303 	mul.w	r3, r1, r3
 800f2fa:	4413      	add	r3, r2
 800f2fc:	60fb      	str	r3, [r7, #12]
  if(ProgDiskPage(pBuffer, ProgAddr)!= OK) return SEC_ERR; // д���� 4096 Byte �� дǰ������
 800f2fe:	68f9      	ldr	r1, [r7, #12]
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7ff fe71 	bl	800efe8 <ProgDiskPage>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <ProgFileSec+0x34>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e025      	b.n	800f35c <ProgFileSec+0x80>

  if(NextCluster(pCluster)!=0) return FAT_ERR;                 // ȡ��һ���غ�
 800f310:	6838      	ldr	r0, [r7, #0]
 800f312:	f7ff ff8d 	bl	800f230 <NextCluster>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <ProgFileSec+0x44>
 800f31c:	2302      	movs	r3, #2
 800f31e:	e01d      	b.n	800f35c <ProgFileSec+0x80>
  Tmp = *(pCluster+1);
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	885b      	ldrh	r3, [r3, #2]
 800f324:	817b      	strh	r3, [r7, #10]
  if(*pCluster == 0){
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d114      	bne.n	800f35a <ProgFileSec+0x7e>
    *pCluster = Tmp;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	897a      	ldrh	r2, [r7, #10]
 800f334:	801a      	strh	r2, [r3, #0]
    if(SeekBlank (pBuffer, pCluster )!= OK) return OVER;
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff fe77 	bl	800f02c <SeekBlank>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <ProgFileSec+0x6c>
 800f344:	2303      	movs	r3, #3
 800f346:	e009      	b.n	800f35c <ProgFileSec+0x80>
    if(SetCluster(pBuffer, pCluster )!= OK) return SEC_ERR;
 800f348:	6839      	ldr	r1, [r7, #0]
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff feea 	bl	800f124 <SetCluster>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <ProgFileSec+0x7e>
 800f356:	2301      	movs	r3, #1
 800f358:	e000      	b.n	800f35c <ProgFileSec+0x80>
  }
  return OK;
 800f35a:	2300      	movs	r3, #0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	20000194 	.word	0x20000194

0800f368 <ReadFileSec>:

/*******************************************************************************
 ���ļ�����(512 Bytes), ����ʱָ��ָ����һ���غţ���ǰ�غű�����ָ��+1��λ��
*******************************************************************************/
char ReadFileSec(char* pBuffer, short* pCluster)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  int ReadAddr =FAT_V.FILE_BASE + FAT_V.SEC_LEN*(*pCluster-2);
 800f372:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <ReadFileSec+0x58>)
 800f374:	68da      	ldr	r2, [r3, #12]
 800f376:	4b12      	ldr	r3, [pc, #72]	; (800f3c0 <ReadFileSec+0x58>)
 800f378:	695b      	ldr	r3, [r3, #20]
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	f9b1 1000 	ldrsh.w	r1, [r1]
 800f380:	3902      	subs	r1, #2
 800f382:	fb01 f303 	mul.w	r3, r1, r3
 800f386:	4413      	add	r3, r2
 800f388:	60fb      	str	r3, [r7, #12]

  if(ReadDiskData(pBuffer, ReadAddr, FAT_V.SEC_LEN)!=OK) return SEC_ERR;  //(SEC_LEN=4096/512)
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4a0c      	ldr	r2, [pc, #48]	; (800f3c0 <ReadFileSec+0x58>)
 800f38e:	6952      	ldr	r2, [r2, #20]
 800f390:	b212      	sxth	r2, r2
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff fd89 	bl	800eeac <ReadDiskData>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <ReadFileSec+0x3c>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e008      	b.n	800f3b6 <ReadFileSec+0x4e>
  if(NextCluster(pCluster)!=0) return FAT_ERR;                 // ȡ��һ���غ�
 800f3a4:	6838      	ldr	r0, [r7, #0]
 800f3a6:	f7ff ff43 	bl	800f230 <NextCluster>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <ReadFileSec+0x4c>
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	e000      	b.n	800f3b6 <ReadFileSec+0x4e>
  return OK;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20000194 	.word	0x20000194

0800f3c4 <CloseFile>:

/*******************************************************************************
 �ر��ļ�����������д��FAT�����ļ�����д��Ŀ¼�����FAT1��FAT2
*******************************************************************************/
char CloseFile(char* pBuffer, int Lenght, short* pCluster, int* pDirAddr)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	603b      	str	r3, [r7, #0]
  int n;

  n=0xFFF;
 800f3d2:	f640 73ff 	movw	r3, #4095	; 0xfff
 800f3d6:	617b      	str	r3, [r7, #20]
  *pCluster = 0xFFF;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f3de:	801a      	strh	r2, [r3, #0]
  SetCluster(pBuffer, pCluster);
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7ff fe9e 	bl	800f124 <SetCluster>

  if(ReadDiskData(pBuffer, (*pDirAddr &(~n)), FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	43db      	mvns	r3, r3
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4b24      	ldr	r3, [pc, #144]	; (800f488 <CloseFile+0xc4>)
 800f3f6:	695b      	ldr	r3, [r3, #20]
 800f3f8:	b21b      	sxth	r3, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff fd55 	bl	800eeac <ReadDiskData>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <CloseFile+0x48>
 800f408:	2301      	movs	r3, #1
 800f40a:	e039      	b.n	800f480 <CloseFile+0xbc>
  *(char* )(pBuffer +(*pDirAddr & n)+ 0x0B)= 0x20;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	4013      	ands	r3, r2
 800f414:	330b      	adds	r3, #11
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	4413      	add	r3, r2
 800f41a:	2220      	movs	r2, #32
 800f41c:	701a      	strb	r2, [r3, #0]
  *(int*)(pBuffer +(*pDirAddr & n)+ 0x1C)= Lenght;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	4013      	ands	r3, r2
 800f426:	331c      	adds	r3, #28
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	601a      	str	r2, [r3, #0]
  if(ProgDiskPage(pBuffer, (*pDirAddr &(~n)))!= OK) return SEC_ERR;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	43db      	mvns	r3, r3
 800f438:	4013      	ands	r3, r2
 800f43a:	4619      	mov	r1, r3
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7ff fdd3 	bl	800efe8 <ProgDiskPage>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <CloseFile+0x88>
 800f448:	2301      	movs	r3, #1
 800f44a:	e019      	b.n	800f480 <CloseFile+0xbc>
    if(ReadDiskData(pBuffer, FAT_V.FAT1_BASE, FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f44c:	4b0e      	ldr	r3, [pc, #56]	; (800f488 <CloseFile+0xc4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a0d      	ldr	r2, [pc, #52]	; (800f488 <CloseFile+0xc4>)
 800f452:	6952      	ldr	r2, [r2, #20]
 800f454:	b212      	sxth	r2, r2
 800f456:	4619      	mov	r1, r3
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7ff fd27 	bl	800eeac <ReadDiskData>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <CloseFile+0xa4>
 800f464:	2301      	movs	r3, #1
 800f466:	e00b      	b.n	800f480 <CloseFile+0xbc>
    if(ProgDiskPage(pBuffer, FAT_V.FAT2_BASE     )!= OK) return SEC_ERR;
 800f468:	4b07      	ldr	r3, [pc, #28]	; (800f488 <CloseFile+0xc4>)
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	4619      	mov	r1, r3
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f7ff fdba 	bl	800efe8 <ProgDiskPage>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <CloseFile+0xba>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <CloseFile+0xbc>
 return OK;
 800f47e:	2300      	movs	r3, #0
}
 800f480:	4618      	mov	r0, r3
 800f482:	3718      	adds	r7, #24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20000194 	.word	0x20000194

0800f48c <OpenFileWr>:

/*******************************************************************************
 дģʽ���ļ��������ļ���һ���غż�Ŀ¼���ַ
*******************************************************************************/
char OpenFileWr(char* pBuffer, char* pFileName, short* pCluster, int* pDirAddr)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	60f8      	str	r0, [r7, #12]
 800f494:	60b9      	str	r1, [r7, #8]
 800f496:	607a      	str	r2, [r7, #4]
 800f498:	603b      	str	r3, [r7, #0]
  int i, n,offset;

  i = OpenFileRd(pBuffer, pFileName, pCluster, (unsigned *)pDirAddr);
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	68b9      	ldr	r1, [r7, #8]
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff fd29 	bl	800eef8 <OpenFileRd>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	61fb      	str	r3, [r7, #28]
  if(i != NEW) return i;
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	2b04      	cmp	r3, #4
 800f4ae:	d002      	beq.n	800f4b6 <OpenFileWr+0x2a>
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	e045      	b.n	800f542 <OpenFileWr+0xb6>
  else{                                                    // ��ǰ��Ϊ�հ�Ŀ¼��
    if(SeekBlank(pBuffer, pCluster)!= OK) return OVER;     // ��FAT��������
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f7ff fdb7 	bl	800f02c <SeekBlank>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <OpenFileWr+0x3c>
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e03c      	b.n	800f542 <OpenFileWr+0xb6>
      n =*pDirAddr & 0xFFF;
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f4d0:	61bb      	str	r3, [r7, #24]
    offset=*pDirAddr-n;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	617b      	str	r3, [r7, #20]
    if(ReadDiskData(pBuffer,offset, FAT_V.SEC_LEN)!= OK) return SEC_ERR;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	4a1b      	ldr	r2, [pc, #108]	; (800f54c <OpenFileWr+0xc0>)
 800f4e0:	6952      	ldr	r2, [r2, #20]
 800f4e2:	b212      	sxth	r2, r2
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff fce0 	bl	800eeac <ReadDiskData>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <OpenFileWr+0x6a>
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e025      	b.n	800f542 <OpenFileWr+0xb6>
    for(i=0; i<11; i++) pBuffer[n+i]= pFileName[i];      // ������Ŀ¼��offset +
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e00d      	b.n	800f518 <OpenFileWr+0x8c>
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	441a      	add	r2, r3
 800f502:	69b9      	ldr	r1, [r7, #24]
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	440b      	add	r3, r1
 800f508:	4619      	mov	r1, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	440b      	add	r3, r1
 800f50e:	7812      	ldrb	r2, [r2, #0]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	3301      	adds	r3, #1
 800f516:	61fb      	str	r3, [r7, #28]
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	2b0a      	cmp	r3, #10
 800f51c:	ddee      	ble.n	800f4fc <OpenFileWr+0x70>
    *(short*)(pBuffer + n + 0x1A)= *pCluster;
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	331a      	adds	r3, #26
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	4413      	add	r3, r2
 800f526:	687a      	ldr	r2, [r7, #4]
 800f528:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f52c:	801a      	strh	r2, [r3, #0]
    if(ProgDiskPage(pBuffer,offset)!= OK) return SEC_ERR;
 800f52e:	6979      	ldr	r1, [r7, #20]
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7ff fd59 	bl	800efe8 <ProgDiskPage>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <OpenFileWr+0xb4>
 800f53c:	2301      	movs	r3, #1
 800f53e:	e000      	b.n	800f542 <OpenFileWr+0xb6>
    return OK;
 800f540:	2300      	movs	r3, #0
  }
}
 800f542:	4618      	mov	r0, r3
 800f544:	3720      	adds	r7, #32
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20000194 	.word	0x20000194

0800f550 <Color_Num>:

/*******************************************************************************
Color_Num: �����ǰ��ɫ�Ķ�Ӧ��ɫ����
*******************************************************************************/
char Color_Num(short Color)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	80fb      	strh	r3, [r7, #6]
  if(Color == WHT)                  return 0;
  else if((Color & CYN  )== CYN  )  return 1;
 800f55a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f55e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800f562:	4013      	ands	r3, r2
 800f564:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800f568:	4293      	cmp	r3, r2
 800f56a:	d101      	bne.n	800f570 <Color_Num+0x20>
 800f56c:	2301      	movs	r3, #1
 800f56e:	e068      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & CYN_ )== CYN_ )  return 2;
 800f570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f574:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f578:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800f57c:	d101      	bne.n	800f582 <Color_Num+0x32>
 800f57e:	2302      	movs	r3, #2
 800f580:	e05f      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & YEL  )== YEL  )  return 3;
 800f582:	88fb      	ldrh	r3, [r7, #6]
 800f584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f588:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d101      	bne.n	800f594 <Color_Num+0x44>
 800f590:	2303      	movs	r3, #3
 800f592:	e056      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & YEL_ )== YEL_ )  return 4;
 800f594:	88fb      	ldrh	r3, [r7, #6]
 800f596:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f59a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f59e:	d101      	bne.n	800f5a4 <Color_Num+0x54>
 800f5a0:	2304      	movs	r3, #4
 800f5a2:	e04e      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & PUR  )== PUR  )  return 5;
 800f5a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f5a8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800f5ac:	4013      	ands	r3, r2
 800f5ae:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d101      	bne.n	800f5ba <Color_Num+0x6a>
 800f5b6:	2305      	movs	r3, #5
 800f5b8:	e043      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & PUR_ )== PUR_ )  return 6;
 800f5ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f5be:	f248 0310 	movw	r3, #32784	; 0x8010
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	f248 0210 	movw	r2, #32784	; 0x8010
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d101      	bne.n	800f5d0 <Color_Num+0x80>
 800f5cc:	2306      	movs	r3, #6
 800f5ce:	e038      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & GRN  )== GRN  )  return 7;
 800f5d0:	88fb      	ldrh	r3, [r7, #6]
 800f5d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800f5d6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800f5da:	d101      	bne.n	800f5e0 <Color_Num+0x90>
 800f5dc:	2307      	movs	r3, #7
 800f5de:	e030      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & GRN_ )== GRN_ )  return 8;
 800f5e0:	88fb      	ldrh	r3, [r7, #6]
 800f5e2:	f403 6382 	and.w	r3, r3, #1040	; 0x410
 800f5e6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800f5ea:	d101      	bne.n	800f5f0 <Color_Num+0xa0>
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	e028      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & GRY  )== GRY  )  return 9;
 800f5f0:	88fb      	ldrh	r3, [r7, #6]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	f643 13e7 	movw	r3, #14823	; 0x39e7
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	f643 12e7 	movw	r2, #14823	; 0x39e7
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d101      	bne.n	800f606 <Color_Num+0xb6>
 800f602:	2309      	movs	r3, #9
 800f604:	e01d      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & ORN  )== ORN  )  return 10;
 800f606:	88fb      	ldrh	r3, [r7, #6]
 800f608:	461a      	mov	r2, r3
 800f60a:	f240 531f 	movw	r3, #1311	; 0x51f
 800f60e:	4013      	ands	r3, r2
 800f610:	f240 521f 	movw	r2, #1311	; 0x51f
 800f614:	4293      	cmp	r3, r2
 800f616:	d101      	bne.n	800f61c <Color_Num+0xcc>
 800f618:	230a      	movs	r3, #10
 800f61a:	e012      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & BLU  )== BLU  )  return 11;
 800f61c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f620:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800f624:	4013      	ands	r3, r2
 800f626:	f64f 4210 	movw	r2, #64528	; 0xfc10
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d101      	bne.n	800f632 <Color_Num+0xe2>
 800f62e:	230b      	movs	r3, #11
 800f630:	e007      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & RED  )== RED  )  return 12;
 800f632:	88fb      	ldrh	r3, [r7, #6]
 800f634:	f003 031f 	and.w	r3, r3, #31
 800f638:	2b1f      	cmp	r3, #31
 800f63a:	d101      	bne.n	800f640 <Color_Num+0xf0>
 800f63c:	230c      	movs	r3, #12
 800f63e:	e000      	b.n	800f642 <Color_Num+0xf2>
  else if((Color & BLK  )== BLK  )  return 13;
 800f640:	230d      	movs	r3, #13
  else if((Color & LGN  )== LGN  )  return 14;
  else                              return 15;
}
 800f642:	4618      	mov	r0, r3
 800f644:	370c      	adds	r7, #12
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
	...

0800f650 <PrintClk>:

/*******************************************************************************
 Print_Clk: ����ָʾ
*******************************************************************************/
void PrintClk(short x0, short y0, char Phase)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	4603      	mov	r3, r0
 800f658:	80fb      	strh	r3, [r7, #6]
 800f65a:	460b      	mov	r3, r1
 800f65c:	80bb      	strh	r3, [r7, #4]
 800f65e:	4613      	mov	r3, r2
 800f660:	70fb      	strb	r3, [r7, #3]
  short i, j, b;
  SetColor(GRY, TCOLOR[FN]);
 800f662:	4b31      	ldr	r3, [pc, #196]	; (800f728 <PrintClk+0xd8>)
 800f664:	895b      	ldrh	r3, [r3, #10]
 800f666:	4619      	mov	r1, r3
 800f668:	f643 10e7 	movw	r0, #14823	; 0x39e7
 800f66c:	f7fe fa6a 	bl	800db44 <SetColor>
  x0=S_X[SAVE_BMP]+30;
 800f670:	4b2e      	ldr	r3, [pc, #184]	; (800f72c <PrintClk+0xdc>)
 800f672:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f676:	b29b      	uxth	r3, r3
 800f678:	331e      	adds	r3, #30
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	80fb      	strh	r3, [r7, #6]
  DispStr(S_X[SAVE_BMP]-3, LABLE_Y, PRN, "             ");
 800f67e:	4b2b      	ldr	r3, [pc, #172]	; (800f72c <PrintClk+0xdc>)
 800f680:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800f684:	b29b      	uxth	r3, r3
 800f686:	3b03      	subs	r3, #3
 800f688:	b29b      	uxth	r3, r3
 800f68a:	b218      	sxth	r0, r3
 800f68c:	4b28      	ldr	r3, [pc, #160]	; (800f730 <PrintClk+0xe0>)
 800f68e:	2200      	movs	r2, #0
 800f690:	2103      	movs	r1, #3
 800f692:	f7fe fa6f 	bl	800db74 <DispStr>
  for(i=1; i<11; ++i){
 800f696:	2301      	movs	r3, #1
 800f698:	81fb      	strh	r3, [r7, #14]
 800f69a:	e03c      	b.n	800f716 <PrintClk+0xc6>
    b = CLK_TAB[Phase *11 + i];
 800f69c:	78fa      	ldrb	r2, [r7, #3]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	441a      	add	r2, r3
 800f6a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	4a21      	ldr	r2, [pc, #132]	; (800f734 <PrintClk+0xe4>)
 800f6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b4:	817b      	strh	r3, [r7, #10]
    for(j=0; j<11; ++j){
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	81bb      	strh	r3, [r7, #12]
 800f6ba:	e024      	b.n	800f706 <PrintClk+0xb6>
      LCD_Set_Posi((x0+j), (y0+i));
 800f6bc:	88fa      	ldrh	r2, [r7, #6]
 800f6be:	89bb      	ldrh	r3, [r7, #12]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	b218      	sxth	r0, r3
 800f6c6:	88ba      	ldrh	r2, [r7, #4]
 800f6c8:	89fb      	ldrh	r3, [r7, #14]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	b21b      	sxth	r3, r3
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	f002 fce7 	bl	80120a4 <LCD_Set_Posi>
      if((b >> j)& 0x001)
 800f6d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f6da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f6de:	fa42 f303 	asr.w	r3, r2, r3
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d004      	beq.n	800f6f4 <PrintClk+0xa4>
        LCD_Set_Pixel(BLU);
 800f6ea:	f64f 4010 	movw	r0, #64528	; 0xfc10
 800f6ee:	f002 fd27 	bl	8012140 <LCD_Set_Pixel>
 800f6f2:	e004      	b.n	800f6fe <PrintClk+0xae>
      else
        LCD_Set_Pixel(Background);
 800f6f4:	4b10      	ldr	r3, [pc, #64]	; (800f738 <PrintClk+0xe8>)
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f002 fd21 	bl	8012140 <LCD_Set_Pixel>
    for(j=0; j<11; ++j){
 800f6fe:	89bb      	ldrh	r3, [r7, #12]
 800f700:	3301      	adds	r3, #1
 800f702:	b29b      	uxth	r3, r3
 800f704:	81bb      	strh	r3, [r7, #12]
 800f706:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f70a:	2b0a      	cmp	r3, #10
 800f70c:	ddd6      	ble.n	800f6bc <PrintClk+0x6c>
  for(i=1; i<11; ++i){
 800f70e:	89fb      	ldrh	r3, [r7, #14]
 800f710:	3301      	adds	r3, #1
 800f712:	b29b      	uxth	r3, r3
 800f714:	81fb      	strh	r3, [r7, #14]
 800f716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f71a:	2b0a      	cmp	r3, #10
 800f71c:	ddbe      	ble.n	800f69c <PrintClk+0x4c>
    }
  }
}
 800f71e:	bf00      	nop
 800f720:	bf00      	nop
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	08001f08 	.word	0x08001f08
 800f72c:	0800215c 	.word	0x0800215c
 800f730:	080001ec 	.word	0x080001ec
 800f734:	08001bbc 	.word	0x08001bbc
 800f738:	200015c6 	.word	0x200015c6

0800f73c <WriteVar>:

/*******************************************************************************
 WriteVar
*******************************************************************************/
void WriteVar(short Var, short* pClu)
  {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	4603      	mov	r3, r0
 800f744:	6039      	str	r1, [r7, #0]
 800f746:	80fb      	strh	r3, [r7, #6]
    short temp_addr,temp_len;
    short Buf_len = 4096;
 800f748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f74c:	81fb      	strh	r3, [r7, #14]

    memset(Num, 0, 4);
 800f74e:	2204      	movs	r2, #4
 800f750:	2100      	movs	r1, #0
 800f752:	4847      	ldr	r0, [pc, #284]	; (800f870 <WriteVar+0x134>)
 800f754:	f013 fb14 	bl	8022d80 <memset>
    u16ToDec4Str(Num,Var);
 800f758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f75c:	4619      	mov	r1, r3
 800f75e:	4844      	ldr	r0, [pc, #272]	; (800f870 <WriteVar+0x134>)
 800f760:	f002 fa1e 	bl	8011ba0 <u16ToDec4Str>
    Length = strlen((char const*)Num);
 800f764:	4842      	ldr	r0, [pc, #264]	; (800f870 <WriteVar+0x134>)
 800f766:	f7fc fc6b 	bl	800c040 <strlen>
 800f76a:	4603      	mov	r3, r0
 800f76c:	b21a      	sxth	r2, r3
 800f76e:	4b41      	ldr	r3, [pc, #260]	; (800f874 <WriteVar+0x138>)
 800f770:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Num, Length);
 800f772:	4b41      	ldr	r3, [pc, #260]	; (800f878 <WriteVar+0x13c>)
 800f774:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f778:	461a      	mov	r2, r3
 800f77a:	4b40      	ldr	r3, [pc, #256]	; (800f87c <WriteVar+0x140>)
 800f77c:	4413      	add	r3, r2
 800f77e:	4a3d      	ldr	r2, [pc, #244]	; (800f874 <WriteVar+0x138>)
 800f780:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f784:	493a      	ldr	r1, [pc, #232]	; (800f870 <WriteVar+0x134>)
 800f786:	4618      	mov	r0, r3
 800f788:	f013 faec 	bl	8022d64 <memcpy>
    Addr = Addr + Length;
 800f78c:	4b3a      	ldr	r3, [pc, #232]	; (800f878 <WriteVar+0x13c>)
 800f78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f792:	b29a      	uxth	r2, r3
 800f794:	4b37      	ldr	r3, [pc, #220]	; (800f874 <WriteVar+0x138>)
 800f796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4413      	add	r3, r2
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	b21a      	sxth	r2, r3
 800f7a2:	4b35      	ldr	r3, [pc, #212]	; (800f878 <WriteVar+0x13c>)
 800f7a4:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f7a6:	4b33      	ldr	r3, [pc, #204]	; (800f874 <WriteVar+0x138>)
 800f7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4b34      	ldr	r3, [pc, #208]	; (800f880 <WriteVar+0x144>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	4a32      	ldr	r2, [pc, #200]	; (800f880 <WriteVar+0x144>)
 800f7b6:	6013      	str	r3, [r2, #0]
    if(Addr >=Buf_len){
 800f7b8:	4b2f      	ldr	r3, [pc, #188]	; (800f878 <WriteVar+0x13c>)
 800f7ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	dc4f      	bgt.n	800f866 <WriteVar+0x12a>
      if(ProgFileSec(F_Buff, pClu)!= OK) {}; // д������
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	482c      	ldr	r0, [pc, #176]	; (800f87c <WriteVar+0x140>)
 800f7ca:	f7ff fd87 	bl	800f2dc <ProgFileSec>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);  // ����ָʾ
 800f7ce:	4b2d      	ldr	r3, [pc, #180]	; (800f884 <WriteVar+0x148>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	492b      	ldr	r1, [pc, #172]	; (800f884 <WriteVar+0x148>)
 800f7d6:	600a      	str	r2, [r1, #0]
 800f7d8:	105b      	asrs	r3, r3, #1
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	f003 0303 	and.w	r3, r3, #3
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	2102      	movs	r1, #2
 800f7e6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f7ea:	f7ff ff31 	bl	800f650 <PrintClk>
      temp_len = Addr -Buf_len;
 800f7ee:	4b22      	ldr	r3, [pc, #136]	; (800f878 <WriteVar+0x13c>)
 800f7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7f4:	b29a      	uxth	r2, r3
 800f7f6:	89fb      	ldrh	r3, [r7, #14]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	81bb      	strh	r3, [r7, #12]
      temp_addr = Length - temp_len;
 800f7fe:	4b1d      	ldr	r3, [pc, #116]	; (800f874 <WriteVar+0x138>)
 800f800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f804:	b29a      	uxth	r2, r3
 800f806:	89bb      	ldrh	r3, [r7, #12]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	817b      	strh	r3, [r7, #10]
      Addr = 0;
 800f80e:	4b1a      	ldr	r3, [pc, #104]	; (800f878 <WriteVar+0x13c>)
 800f810:	2200      	movs	r2, #0
 800f812:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,Buf_len);
 800f814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f818:	461a      	mov	r2, r3
 800f81a:	2100      	movs	r1, #0
 800f81c:	4817      	ldr	r0, [pc, #92]	; (800f87c <WriteVar+0x140>)
 800f81e:	f013 faaf 	bl	8022d80 <memset>
      memset(Data,0,310);
 800f822:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f826:	2100      	movs	r1, #0
 800f828:	4817      	ldr	r0, [pc, #92]	; (800f888 <WriteVar+0x14c>)
 800f82a:	f013 faa9 	bl	8022d80 <memset>
      memcpy(&F_Buff[Addr],Num + temp_addr, temp_len);
 800f82e:	4b12      	ldr	r3, [pc, #72]	; (800f878 <WriteVar+0x13c>)
 800f830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f834:	461a      	mov	r2, r3
 800f836:	4b11      	ldr	r3, [pc, #68]	; (800f87c <WriteVar+0x140>)
 800f838:	18d0      	adds	r0, r2, r3
 800f83a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f83e:	4a0c      	ldr	r2, [pc, #48]	; (800f870 <WriteVar+0x134>)
 800f840:	4413      	add	r3, r2
 800f842:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f846:	4619      	mov	r1, r3
 800f848:	f013 fa8c 	bl	8022d64 <memcpy>
      Addr = Addr + temp_len;
 800f84c:	4b0a      	ldr	r3, [pc, #40]	; (800f878 <WriteVar+0x13c>)
 800f84e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f852:	b29a      	uxth	r2, r3
 800f854:	89bb      	ldrh	r3, [r7, #12]
 800f856:	4413      	add	r3, r2
 800f858:	b29b      	uxth	r3, r3
 800f85a:	b21a      	sxth	r2, r3
 800f85c:	4b06      	ldr	r3, [pc, #24]	; (800f878 <WriteVar+0x13c>)
 800f85e:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f860:	4b04      	ldr	r3, [pc, #16]	; (800f874 <WriteVar+0x138>)
 800f862:	2200      	movs	r2, #0
 800f864:	801a      	strh	r2, [r3, #0]
    }
  }
 800f866:	bf00      	nop
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	200015cc 	.word	0x200015cc
 800f874:	2000078e 	.word	0x2000078e
 800f878:	2000078c 	.word	0x2000078c
 800f87c:	200017d0 	.word	0x200017d0
 800f880:	20000790 	.word	0x20000790
 800f884:	20000794 	.word	0x20000794
 800f888:	20000008 	.word	0x20000008

0800f88c <WriteStr>:

/*******************************************************************************
 WriteStr
*******************************************************************************/
void WriteStr(char* Str, short* pClu)
  {
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
    short temp_addr,temp_len;
    short Buf_len = 4096;
 800f896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f89a:	81fb      	strh	r3, [r7, #14]

    Length = strlen((char const*)Str);
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f7fc fbcf 	bl	800c040 <strlen>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	b21a      	sxth	r2, r3
 800f8a6:	4b40      	ldr	r3, [pc, #256]	; (800f9a8 <WriteStr+0x11c>)
 800f8a8:	801a      	strh	r2, [r3, #0]
    memcpy(&F_Buff[Addr], Str, Length);
 800f8aa:	4b40      	ldr	r3, [pc, #256]	; (800f9ac <WriteStr+0x120>)
 800f8ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	4b3f      	ldr	r3, [pc, #252]	; (800f9b0 <WriteStr+0x124>)
 800f8b4:	4413      	add	r3, r2
 800f8b6:	4a3c      	ldr	r2, [pc, #240]	; (800f9a8 <WriteStr+0x11c>)
 800f8b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f8bc:	6879      	ldr	r1, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f013 fa50 	bl	8022d64 <memcpy>
    Addr = Addr + Length;
 800f8c4:	4b39      	ldr	r3, [pc, #228]	; (800f9ac <WriteStr+0x120>)
 800f8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	4b36      	ldr	r3, [pc, #216]	; (800f9a8 <WriteStr+0x11c>)
 800f8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	4413      	add	r3, r2
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	b21a      	sxth	r2, r3
 800f8da:	4b34      	ldr	r3, [pc, #208]	; (800f9ac <WriteStr+0x120>)
 800f8dc:	801a      	strh	r2, [r3, #0]
    Svg_Cnt = Svg_Cnt+ Length;
 800f8de:	4b32      	ldr	r3, [pc, #200]	; (800f9a8 <WriteStr+0x11c>)
 800f8e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	4b33      	ldr	r3, [pc, #204]	; (800f9b4 <WriteStr+0x128>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	4a31      	ldr	r2, [pc, #196]	; (800f9b4 <WriteStr+0x128>)
 800f8ee:	6013      	str	r3, [r2, #0]
    if(Addr >=Buf_len){
 800f8f0:	4b2e      	ldr	r3, [pc, #184]	; (800f9ac <WriteStr+0x120>)
 800f8f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	dc4f      	bgt.n	800f99e <WriteStr+0x112>
      if(ProgFileSec(F_Buff, pClu)!= OK) {}; // д������
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	482b      	ldr	r0, [pc, #172]	; (800f9b0 <WriteStr+0x124>)
 800f902:	f7ff fceb 	bl	800f2dc <ProgFileSec>
      PrintClk(264,2,(Clk_Cnt++ >>1)& 3);     // ����ָʾ
 800f906:	4b2c      	ldr	r3, [pc, #176]	; (800f9b8 <WriteStr+0x12c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	492a      	ldr	r1, [pc, #168]	; (800f9b8 <WriteStr+0x12c>)
 800f90e:	600a      	str	r2, [r1, #0]
 800f910:	105b      	asrs	r3, r3, #1
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f003 0303 	and.w	r3, r3, #3
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	461a      	mov	r2, r3
 800f91c:	2102      	movs	r1, #2
 800f91e:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f922:	f7ff fe95 	bl	800f650 <PrintClk>
      temp_len = Addr -Buf_len;
 800f926:	4b21      	ldr	r3, [pc, #132]	; (800f9ac <WriteStr+0x120>)
 800f928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	89fb      	ldrh	r3, [r7, #14]
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	b29b      	uxth	r3, r3
 800f934:	81bb      	strh	r3, [r7, #12]
      temp_addr = Length - temp_len;
 800f936:	4b1c      	ldr	r3, [pc, #112]	; (800f9a8 <WriteStr+0x11c>)
 800f938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f93c:	b29a      	uxth	r2, r3
 800f93e:	89bb      	ldrh	r3, [r7, #12]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	b29b      	uxth	r3, r3
 800f944:	817b      	strh	r3, [r7, #10]
      Addr = 0;
 800f946:	4b19      	ldr	r3, [pc, #100]	; (800f9ac <WriteStr+0x120>)
 800f948:	2200      	movs	r2, #0
 800f94a:	801a      	strh	r2, [r3, #0]
      memset(F_Buff,0,Buf_len);
 800f94c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f950:	461a      	mov	r2, r3
 800f952:	2100      	movs	r1, #0
 800f954:	4816      	ldr	r0, [pc, #88]	; (800f9b0 <WriteStr+0x124>)
 800f956:	f013 fa13 	bl	8022d80 <memset>
      memset(Data,0,310);
 800f95a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800f95e:	2100      	movs	r1, #0
 800f960:	4816      	ldr	r0, [pc, #88]	; (800f9bc <WriteStr+0x130>)
 800f962:	f013 fa0d 	bl	8022d80 <memset>
      memcpy(&F_Buff[Addr],Str + temp_addr, temp_len);
 800f966:	4b11      	ldr	r3, [pc, #68]	; (800f9ac <WriteStr+0x120>)
 800f968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f96c:	461a      	mov	r2, r3
 800f96e:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <WriteStr+0x124>)
 800f970:	18d0      	adds	r0, r2, r3
 800f972:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	4413      	add	r3, r2
 800f97a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f97e:	4619      	mov	r1, r3
 800f980:	f013 f9f0 	bl	8022d64 <memcpy>
      Addr = Addr + temp_len;
 800f984:	4b09      	ldr	r3, [pc, #36]	; (800f9ac <WriteStr+0x120>)
 800f986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	89bb      	ldrh	r3, [r7, #12]
 800f98e:	4413      	add	r3, r2
 800f990:	b29b      	uxth	r3, r3
 800f992:	b21a      	sxth	r2, r3
 800f994:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <WriteStr+0x120>)
 800f996:	801a      	strh	r2, [r3, #0]
      Length = 0;
 800f998:	4b03      	ldr	r3, [pc, #12]	; (800f9a8 <WriteStr+0x11c>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	801a      	strh	r2, [r3, #0]
    }
  }
 800f99e:	bf00      	nop
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	2000078e 	.word	0x2000078e
 800f9ac:	2000078c 	.word	0x2000078c
 800f9b0:	200017d0 	.word	0x200017d0
 800f9b4:	20000790 	.word	0x20000790
 800f9b8:	20000794 	.word	0x20000794
 800f9bc:	20000008 	.word	0x20000008

0800f9c0 <Make_Filename>:

/*******************************************************************************

*******************************************************************************/
void Make_Filename(short FileNo, char* FileName)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	6039      	str	r1, [r7, #0]
 800f9ca:	80fb      	strh	r3, [r7, #6]
  char Num[4];
  u8ToDec3(Num, FileNo);
 800f9cc:	88fb      	ldrh	r3, [r7, #6]
 800f9ce:	b2da      	uxtb	r2, r3
 800f9d0:	f107 030c 	add.w	r3, r7, #12
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 ff3c 	bl	8011854 <u8ToDec3>
  FileName[4] = Num[0];
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	3304      	adds	r3, #4
 800f9e0:	7b3a      	ldrb	r2, [r7, #12]
 800f9e2:	701a      	strb	r2, [r3, #0]
  FileName[5] = Num[1];
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	3305      	adds	r3, #5
 800f9e8:	7b7a      	ldrb	r2, [r7, #13]
 800f9ea:	701a      	strb	r2, [r3, #0]
  FileName[6] = Num[2];
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	3306      	adds	r3, #6
 800f9f0:	7bba      	ldrb	r2, [r7, #14]
 800f9f2:	701a      	strb	r2, [r3, #0]
}
 800f9f4:	bf00      	nop
 800f9f6:	3710      	adds	r7, #16
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <Load_File_Num>:

/*******************************************************************************
Load_File_Num(char Tpye)
*******************************************************************************/
short Load_File_Num(char Type)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b08a      	sub	sp, #40	; 0x28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	4603      	mov	r3, r0
 800fa04:	71fb      	strb	r3, [r7, #7]
  short FileNo=0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	84fb      	strh	r3, [r7, #38]	; 0x26
  char  pFileName[12]="FILE       ";
 800fa0a:	4a87      	ldr	r2, [pc, #540]	; (800fc28 <Load_File_Num+0x22c>)
 800fa0c:	f107 0318 	add.w	r3, r7, #24
 800fa10:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr;

  switch(Type)
 800fa16:	79fb      	ldrb	r3, [r7, #7]
 800fa18:	3b1d      	subs	r3, #29
 800fa1a:	2b04      	cmp	r3, #4
 800fa1c:	f200 80fe 	bhi.w	800fc1c <Load_File_Num+0x220>
 800fa20:	a201      	add	r2, pc, #4	; (adr r2, 800fa28 <Load_File_Num+0x2c>)
 800fa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa26:	bf00      	nop
 800fa28:	0800fa3d 	.word	0x0800fa3d
 800fa2c:	0800fa9d 	.word	0x0800fa9d
 800fa30:	0800fafd 	.word	0x0800fafd
 800fa34:	0800fb5d 	.word	0x0800fb5d
 800fa38:	0800fbbd 	.word	0x0800fbbd
  {
  case SAVE_BMP:
    memset(F_Buff,0,4096);
 800fa3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa40:	2100      	movs	r1, #0
 800fa42:	487a      	ldr	r0, [pc, #488]	; (800fc2c <Load_File_Num+0x230>)
 800fa44:	f013 f99c 	bl	8022d80 <memset>
    memcpy(pFileName,"IMG_    BMP",12);
 800fa48:	4a79      	ldr	r2, [pc, #484]	; (800fc30 <Load_File_Num+0x234>)
 800fa4a:	f107 0318 	add.w	r3, r7, #24
 800fa4e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fa50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fa54:	f107 0218 	add.w	r2, r7, #24
 800fa58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff ffae 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fa64:	e00d      	b.n	800fa82 <Load_File_Num+0x86>
    {
      FileNo++;
 800fa66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800fa72:	f107 0218 	add.w	r2, r7, #24
 800fa76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7ff ff9f 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fa82:	f107 030c 	add.w	r3, r7, #12
 800fa86:	f107 0210 	add.w	r2, r7, #16
 800fa8a:	f107 0118 	add.w	r1, r7, #24
 800fa8e:	4867      	ldr	r0, [pc, #412]	; (800fc2c <Load_File_Num+0x230>)
 800fa90:	f7ff fa32 	bl	800eef8 <OpenFileRd>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d0e5      	beq.n	800fa66 <Load_File_Num+0x6a>
    }
    break;
 800fa9a:	e0bf      	b.n	800fc1c <Load_File_Num+0x220>
  case SAVE_DAT:
    memset(F_Buff,0,4096);
 800fa9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800faa0:	2100      	movs	r1, #0
 800faa2:	4862      	ldr	r0, [pc, #392]	; (800fc2c <Load_File_Num+0x230>)
 800faa4:	f013 f96c 	bl	8022d80 <memset>
    memcpy(pFileName,"FILE    DAT",12);
 800faa8:	4a62      	ldr	r2, [pc, #392]	; (800fc34 <Load_File_Num+0x238>)
 800faaa:	f107 0318 	add.w	r3, r7, #24
 800faae:	ca07      	ldmia	r2, {r0, r1, r2}
 800fab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fab4:	f107 0218 	add.w	r2, r7, #24
 800fab8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fabc:	4611      	mov	r1, r2
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7ff ff7e 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fac4:	e00d      	b.n	800fae2 <Load_File_Num+0xe6>
    {
      FileNo++;
 800fac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800faca:	b29b      	uxth	r3, r3
 800facc:	3301      	adds	r3, #1
 800face:	b29b      	uxth	r3, r3
 800fad0:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800fad2:	f107 0218 	add.w	r2, r7, #24
 800fad6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff ff6f 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fae2:	f107 030c 	add.w	r3, r7, #12
 800fae6:	f107 0210 	add.w	r2, r7, #16
 800faea:	f107 0118 	add.w	r1, r7, #24
 800faee:	484f      	ldr	r0, [pc, #316]	; (800fc2c <Load_File_Num+0x230>)
 800faf0:	f7ff fa02 	bl	800eef8 <OpenFileRd>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d0e5      	beq.n	800fac6 <Load_File_Num+0xca>
    }
    break;
 800fafa:	e08f      	b.n	800fc1c <Load_File_Num+0x220>
  case SAVE_BUF:
    memset(F_Buff,0,4096);
 800fafc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb00:	2100      	movs	r1, #0
 800fb02:	484a      	ldr	r0, [pc, #296]	; (800fc2c <Load_File_Num+0x230>)
 800fb04:	f013 f93c 	bl	8022d80 <memset>
    memcpy(pFileName,"DATA    BUF",12);
 800fb08:	4a4b      	ldr	r2, [pc, #300]	; (800fc38 <Load_File_Num+0x23c>)
 800fb0a:	f107 0318 	add.w	r3, r7, #24
 800fb0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fb14:	f107 0218 	add.w	r2, r7, #24
 800fb18:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff ff4e 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fb24:	e00d      	b.n	800fb42 <Load_File_Num+0x146>
    {
      FileNo++;
 800fb26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800fb32:	f107 0218 	add.w	r2, r7, #24
 800fb36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7ff ff3f 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fb42:	f107 030c 	add.w	r3, r7, #12
 800fb46:	f107 0210 	add.w	r2, r7, #16
 800fb4a:	f107 0118 	add.w	r1, r7, #24
 800fb4e:	4837      	ldr	r0, [pc, #220]	; (800fc2c <Load_File_Num+0x230>)
 800fb50:	f7ff f9d2 	bl	800eef8 <OpenFileRd>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0e5      	beq.n	800fb26 <Load_File_Num+0x12a>
    }
    break;
 800fb5a:	e05f      	b.n	800fc1c <Load_File_Num+0x220>
  case SAVE_CSV:
    memset(F_Buff,0,4096);
 800fb5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb60:	2100      	movs	r1, #0
 800fb62:	4832      	ldr	r0, [pc, #200]	; (800fc2c <Load_File_Num+0x230>)
 800fb64:	f013 f90c 	bl	8022d80 <memset>
    memcpy(pFileName,"DATA    CSV",12);
 800fb68:	4a34      	ldr	r2, [pc, #208]	; (800fc3c <Load_File_Num+0x240>)
 800fb6a:	f107 0318 	add.w	r3, r7, #24
 800fb6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fb74:	f107 0218 	add.w	r2, r7, #24
 800fb78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff ff1e 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fb84:	e00d      	b.n	800fba2 <Load_File_Num+0x1a6>
    {
      FileNo++;
 800fb86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800fb92:	f107 0218 	add.w	r2, r7, #24
 800fb96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff0f 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fba2:	f107 030c 	add.w	r3, r7, #12
 800fba6:	f107 0210 	add.w	r2, r7, #16
 800fbaa:	f107 0118 	add.w	r1, r7, #24
 800fbae:	481f      	ldr	r0, [pc, #124]	; (800fc2c <Load_File_Num+0x230>)
 800fbb0:	f7ff f9a2 	bl	800eef8 <OpenFileRd>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d0e5      	beq.n	800fb86 <Load_File_Num+0x18a>
    }
    break;
 800fbba:	e02f      	b.n	800fc1c <Load_File_Num+0x220>
  case SAVE_SVG:
    memset(F_Buff,0,4096);
 800fbbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	481a      	ldr	r0, [pc, #104]	; (800fc2c <Load_File_Num+0x230>)
 800fbc4:	f013 f8dc 	bl	8022d80 <memset>
    memcpy(pFileName,"DATA    SVG",12);
 800fbc8:	4a1d      	ldr	r2, [pc, #116]	; (800fc40 <Load_File_Num+0x244>)
 800fbca:	f107 0318 	add.w	r3, r7, #24
 800fbce:	ca07      	ldmia	r2, {r0, r1, r2}
 800fbd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Make_Filename(FileNo, pFileName);
 800fbd4:	f107 0218 	add.w	r2, r7, #24
 800fbd8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbdc:	4611      	mov	r1, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff feee 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fbe4:	e00d      	b.n	800fc02 <Load_File_Num+0x206>
    {
      FileNo++;
 800fbe6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	3301      	adds	r3, #1
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	84fb      	strh	r3, [r7, #38]	; 0x26
      Make_Filename(FileNo, pFileName);
 800fbf2:	f107 0218 	add.w	r2, r7, #24
 800fbf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff fedf 	bl	800f9c0 <Make_Filename>
    while(OpenFileRd(F_Buff, pFileName, pCluster, &pDirAddr)==OK)
 800fc02:	f107 030c 	add.w	r3, r7, #12
 800fc06:	f107 0210 	add.w	r2, r7, #16
 800fc0a:	f107 0118 	add.w	r1, r7, #24
 800fc0e:	4807      	ldr	r0, [pc, #28]	; (800fc2c <Load_File_Num+0x230>)
 800fc10:	f7ff f972 	bl	800eef8 <OpenFileRd>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0e5      	beq.n	800fbe6 <Load_File_Num+0x1ea>
    }
    break;
 800fc1a:	bf00      	nop
  }
  return FileNo;
 800fc1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3728      	adds	r7, #40	; 0x28
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	08000238 	.word	0x08000238
 800fc2c:	200017d0 	.word	0x200017d0
 800fc30:	080001fc 	.word	0x080001fc
 800fc34:	08000208 	.word	0x08000208
 800fc38:	08000214 	.word	0x08000214
 800fc3c:	08000220 	.word	0x08000220
 800fc40:	0800022c 	.word	0x0800022c

0800fc44 <File_Num>:

/*******************************************************************************
void File_Num(void)
*******************************************************************************/
void File_Num(void)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	af00      	add	r7, sp, #0
  List[SAVE_BMP].Val =  Load_File_Num(SAVE_BMP);
 800fc48:	201d      	movs	r0, #29
 800fc4a:	f7ff fed7 	bl	800f9fc <Load_File_Num>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b12      	ldr	r3, [pc, #72]	; (800fc9c <File_Num+0x58>)
 800fc54:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  List[SAVE_DAT].Val =  Load_File_Num(SAVE_DAT);
 800fc58:	201e      	movs	r0, #30
 800fc5a:	f7ff fecf 	bl	800f9fc <Load_File_Num>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	461a      	mov	r2, r3
 800fc62:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <File_Num+0x58>)
 800fc64:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  List[SAVE_BUF].Val =  Load_File_Num(SAVE_BUF);
 800fc68:	201f      	movs	r0, #31
 800fc6a:	f7ff fec7 	bl	800f9fc <Load_File_Num>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461a      	mov	r2, r3
 800fc72:	4b0a      	ldr	r3, [pc, #40]	; (800fc9c <File_Num+0x58>)
 800fc74:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  List[SAVE_CSV].Val =  Load_File_Num(SAVE_CSV);
 800fc78:	2020      	movs	r0, #32
 800fc7a:	f7ff febf 	bl	800f9fc <Load_File_Num>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	461a      	mov	r2, r3
 800fc82:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <File_Num+0x58>)
 800fc84:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  List[SAVE_SVG].Val =  Load_File_Num(SAVE_SVG);
 800fc88:	2021      	movs	r0, #33	; 0x21
 800fc8a:	f7ff feb7 	bl	800f9fc <Load_File_Num>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	461a      	mov	r2, r3
 800fc92:	4b02      	ldr	r3, [pc, #8]	; (800fc9c <File_Num+0x58>)
 800fc94:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 800fc98:	bf00      	nop
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	20000298 	.word	0x20000298

0800fca0 <Load_Buf>:

/*******************************************************************************
Load_Buf: ���ر�����Ĳɼ����ݻ�����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Buf(short FileNo)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b08e      	sub	sp, #56	; 0x38
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	4603      	mov	r3, r0
 800fca8:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    BUF";
 800fcaa:	4a66      	ldr	r2, [pc, #408]	; (800fe44 <Load_Buf+0x1a4>)
 800fcac:	f107 0318 	add.w	r3, r7, #24
 800fcb0:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr[1];
  short *ptr;
  int i,Rvalue=1;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int n,k;

  Make_Filename(FileNo, pFileName);
 800fcba:	f107 0218 	add.w	r2, r7, #24
 800fcbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fe7b 	bl	800f9c0 <Make_Filename>
  if( (Rvalue=OpenFileRd(F_Buff, pFileName, pCluster, pDirAddr))!= OK) return Rvalue;
 800fcca:	f107 030c 	add.w	r3, r7, #12
 800fcce:	f107 0210 	add.w	r2, r7, #16
 800fcd2:	f107 0118 	add.w	r1, r7, #24
 800fcd6:	485c      	ldr	r0, [pc, #368]	; (800fe48 <Load_Buf+0x1a8>)
 800fcd8:	f7ff f90e 	bl	800eef8 <OpenFileRd>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d002      	beq.n	800fcec <Load_Buf+0x4c>
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	e0a6      	b.n	800fe3a <Load_Buf+0x19a>
    n=2;k=4096;
 800fcec:	2302      	movs	r3, #2
 800fcee:	633b      	str	r3, [r7, #48]	; 0x30
 800fcf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcf4:	62bb      	str	r3, [r7, #40]	; 0x28
  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 800fcf6:	4b55      	ldr	r3, [pc, #340]	; (800fe4c <Load_Buf+0x1ac>)
 800fcf8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fcfc:	2b03      	cmp	r3, #3
 800fcfe:	d101      	bne.n	800fd04 <Load_Buf+0x64>
 800fd00:	2304      	movs	r3, #4
 800fd02:	633b      	str	r3, [r7, #48]	; 0x30
  for(i=0;i<n;i++){
 800fd04:	2300      	movs	r3, #0
 800fd06:	637b      	str	r3, [r7, #52]	; 0x34
 800fd08:	e01d      	b.n	800fd46 <Load_Buf+0xa6>
    if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 800fd0a:	f107 0310 	add.w	r3, r7, #16
 800fd0e:	4619      	mov	r1, r3
 800fd10:	484d      	ldr	r0, [pc, #308]	; (800fe48 <Load_Buf+0x1a8>)
 800fd12:	f7ff fb29 	bl	800f368 <ReadFileSec>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d001      	beq.n	800fd20 <Load_Buf+0x80>
 800fd1c:	2303      	movs	r3, #3
 800fd1e:	e08c      	b.n	800fe3a <Load_Buf+0x19a>
    memcpy(&(Sampl[i*k/2+2]),F_Buff,k);
 800fd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd24:	fb02 f303 	mul.w	r3, r2, r3
 800fd28:	0fda      	lsrs	r2, r3, #31
 800fd2a:	4413      	add	r3, r2
 800fd2c:	105b      	asrs	r3, r3, #1
 800fd2e:	3302      	adds	r3, #2
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	4a47      	ldr	r2, [pc, #284]	; (800fe50 <Load_Buf+0x1b0>)
 800fd34:	4413      	add	r3, r2
 800fd36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd38:	4943      	ldr	r1, [pc, #268]	; (800fe48 <Load_Buf+0x1a8>)
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f013 f812 	bl	8022d64 <memcpy>
  for(i=0;i<n;i++){
 800fd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd42:	3301      	adds	r3, #1
 800fd44:	637b      	str	r3, [r7, #52]	; 0x34
 800fd46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	dbdd      	blt.n	800fd0a <Load_Buf+0x6a>
	}
  if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 800fd4e:	f107 0310 	add.w	r3, r7, #16
 800fd52:	4619      	mov	r1, r3
 800fd54:	483c      	ldr	r0, [pc, #240]	; (800fe48 <Load_Buf+0x1a8>)
 800fd56:	f7ff fb07 	bl	800f368 <ReadFileSec>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d001      	beq.n	800fd64 <Load_Buf+0xc4>
 800fd60:	2303      	movs	r3, #3
 800fd62:	e06a      	b.n	800fe3a <Load_Buf+0x19a>
  ptr=(short*)F_Sector;                               //�����ֳ�
 800fd64:	4b3b      	ldr	r3, [pc, #236]	; (800fe54 <Load_Buf+0x1b4>)
 800fd66:	627b      	str	r3, [r7, #36]	; 0x24
  *ptr++=0xaa55;
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	1c9a      	adds	r2, r3, #2
 800fd6c:	627a      	str	r2, [r7, #36]	; 0x24
 800fd6e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800fd72:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[0];
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	1c9a      	adds	r2, r3, #2
 800fd78:	627a      	str	r2, [r7, #36]	; 0x24
 800fd7a:	4a35      	ldr	r2, [pc, #212]	; (800fe50 <Load_Buf+0x1b0>)
 800fd7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fd80:	801a      	strh	r2, [r3, #0]
  *ptr++=Sampl[1];
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	1c9a      	adds	r2, r3, #2
 800fd86:	627a      	str	r2, [r7, #36]	; 0x24
 800fd88:	4a31      	ldr	r2, [pc, #196]	; (800fe50 <Load_Buf+0x1b0>)
 800fd8a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800fd8e:	801a      	strh	r2, [r3, #0]
  *ptr++=List[Y_RANGES].Val;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	1c9a      	adds	r2, r3, #2
 800fd94:	627a      	str	r2, [r7, #36]	; 0x24
 800fd96:	4a2d      	ldr	r2, [pc, #180]	; (800fe4c <Load_Buf+0x1ac>)
 800fd98:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800fd9c:	801a      	strh	r2, [r3, #0]
  *ptr++=List[PROBEATT].Val;
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	1c9a      	adds	r2, r3, #2
 800fda2:	627a      	str	r2, [r7, #36]	; 0x24
 800fda4:	4a29      	ldr	r2, [pc, #164]	; (800fe4c <Load_Buf+0x1ac>)
 800fda6:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800fdaa:	801a      	strh	r2, [r3, #0]
  *ptr++=List[SMPL_DPTH].Val;
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	1c9a      	adds	r2, r3, #2
 800fdb0:	627a      	str	r2, [r7, #36]	; 0x24
 800fdb2:	4a26      	ldr	r2, [pc, #152]	; (800fe4c <Load_Buf+0x1ac>)
 800fdb4:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800fdb8:	801a      	strh	r2, [r3, #0]
  ptr =(short*)F_Buff;                            //��ԭ���Ĳ���
 800fdba:	4b23      	ldr	r3, [pc, #140]	; (800fe48 <Load_Buf+0x1a8>)
 800fdbc:	627b      	str	r3, [r7, #36]	; 0x24
  Sampl[0]=*ptr++;
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	1c9a      	adds	r2, r3, #2
 800fdc2:	627a      	str	r2, [r7, #36]	; 0x24
 800fdc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fdc8:	4b21      	ldr	r3, [pc, #132]	; (800fe50 <Load_Buf+0x1b0>)
 800fdca:	801a      	strh	r2, [r3, #0]
  Sampl[1]=*ptr++;
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	1c9a      	adds	r2, r3, #2
 800fdd0:	627a      	str	r2, [r7, #36]	; 0x24
 800fdd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fdd6:	4b1e      	ldr	r3, [pc, #120]	; (800fe50 <Load_Buf+0x1b0>)
 800fdd8:	805a      	strh	r2, [r3, #2]
  List[Y_RANGES].Val=*ptr++;
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	1c9a      	adds	r2, r3, #2
 800fdde:	627a      	str	r2, [r7, #36]	; 0x24
 800fde0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fde4:	4b19      	ldr	r3, [pc, #100]	; (800fe4c <Load_Buf+0x1ac>)
 800fde6:	809a      	strh	r2, [r3, #4]
  List[PROBEATT].Val=*ptr++;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	1c9a      	adds	r2, r3, #2
 800fdec:	627a      	str	r2, [r7, #36]	; 0x24
 800fdee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fdf2:	4b16      	ldr	r3, [pc, #88]	; (800fe4c <Load_Buf+0x1ac>)
 800fdf4:	829a      	strh	r2, [r3, #20]
  List[SMPL_DPTH].Val=*ptr++;
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	1c9a      	adds	r2, r3, #2
 800fdfa:	627a      	str	r2, [r7, #36]	; 0x24
 800fdfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fe00:	4b12      	ldr	r3, [pc, #72]	; (800fe4c <Load_Buf+0x1ac>)
 800fe02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  Status |=  STOP;
 800fe06:	4b14      	ldr	r3, [pc, #80]	; (800fe58 <Load_Buf+0x1b8>)
 800fe08:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe0c:	f043 0301 	orr.w	r3, r3, #1
 800fe10:	b21a      	sxth	r2, r3
 800fe12:	4b11      	ldr	r3, [pc, #68]	; (800fe58 <Load_Buf+0x1b8>)
 800fe14:	801a      	strh	r2, [r3, #0]
  DispStatus();
 800fe16:	f004 fa51 	bl	80142bc <DispStatus>
  if(List[LOAD_BUF].Val<99)List[LOAD_BUF].Val++;
 800fe1a:	4b0c      	ldr	r3, [pc, #48]	; (800fe4c <Load_Buf+0x1ac>)
 800fe1c:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800fe20:	2b62      	cmp	r3, #98	; 0x62
 800fe22:	dc09      	bgt.n	800fe38 <Load_Buf+0x198>
 800fe24:	4b09      	ldr	r3, [pc, #36]	; (800fe4c <Load_Buf+0x1ac>)
 800fe26:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	b21a      	sxth	r2, r3
 800fe32:	4b06      	ldr	r3, [pc, #24]	; (800fe4c <Load_Buf+0x1ac>)
 800fe34:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  return 0;
 800fe38:	2300      	movs	r3, #0
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3738      	adds	r7, #56	; 0x38
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	08000214 	.word	0x08000214
 800fe48:	200017d0 	.word	0x200017d0
 800fe4c:	20000298 	.word	0x20000298
 800fe50:	20002868 	.word	0x20002868
 800fe54:	200015d0 	.word	0x200015d0
 800fe58:	2000079c 	.word	0x2000079c

0800fe5c <Save_Buf>:

/*******************************************************************************
Save_Buf: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Buf(short FileNo)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b08e      	sub	sp, #56	; 0x38
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    BUF";
 800fe66:	4a64      	ldr	r2, [pc, #400]	; (800fff8 <Save_Buf+0x19c>)
 800fe68:	f107 0318 	add.w	r3, r7, #24
 800fe6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int i=0, Rvalue=DISK_RW_ERR;
 800fe72:	2300      	movs	r3, #0
 800fe74:	637b      	str	r3, [r7, #52]	; 0x34
 800fe76:	2304      	movs	r3, #4
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
  short *p;
  char  l=0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  short n,k;

   n=2; k=4096;
 800fe80:	2302      	movs	r3, #2
 800fe82:	863b      	strh	r3, [r7, #48]	; 0x30
 800fe84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe88:	857b      	strh	r3, [r7, #42]	; 0x2a

  if(List[SMPL_DPTH].Val==3) n =4 ;//8K
 800fe8a:	4b5c      	ldr	r3, [pc, #368]	; (800fffc <Save_Buf+0x1a0>)
 800fe8c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d101      	bne.n	800fe98 <Save_Buf+0x3c>
 800fe94:	2304      	movs	r3, #4
 800fe96:	863b      	strh	r3, [r7, #48]	; 0x30

  Make_Filename(FileNo, pFileName);
 800fe98:	f107 0218 	add.w	r2, r7, #24
 800fe9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fea0:	4611      	mov	r1, r2
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff fd8c 	bl	800f9c0 <Make_Filename>
  memset(F_Buff,0,4096);
 800fea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800feac:	2100      	movs	r1, #0
 800feae:	4854      	ldr	r0, [pc, #336]	; (8010000 <Save_Buf+0x1a4>)
 800feb0:	f012 ff66 	bl	8022d80 <memset>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 800feb4:	f107 030c 	add.w	r3, r7, #12
 800feb8:	f107 0210 	add.w	r2, r7, #16
 800febc:	f107 0118 	add.w	r1, r7, #24
 800fec0:	484f      	ldr	r0, [pc, #316]	; (8010000 <Save_Buf+0x1a4>)
 800fec2:	f7ff fae3 	bl	800f48c <OpenFileWr>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <Save_Buf+0x76>
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	e08e      	b.n	800fff0 <Save_Buf+0x194>

  for(i=0; i<n; i++){
 800fed2:	2300      	movs	r3, #0
 800fed4:	637b      	str	r3, [r7, #52]	; 0x34
 800fed6:	e02f      	b.n	800ff38 <Save_Buf+0xdc>
    memcpy(F_Buff,&(Sampl[i*k/2+2]),k);
 800fed8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fede:	fb02 f303 	mul.w	r3, r2, r3
 800fee2:	0fda      	lsrs	r2, r3, #31
 800fee4:	4413      	add	r3, r2
 800fee6:	105b      	asrs	r3, r3, #1
 800fee8:	3302      	adds	r3, #2
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	4a45      	ldr	r2, [pc, #276]	; (8010004 <Save_Buf+0x1a8>)
 800feee:	4413      	add	r3, r2
 800fef0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800fef4:	4619      	mov	r1, r3
 800fef6:	4842      	ldr	r0, [pc, #264]	; (8010000 <Save_Buf+0x1a4>)
 800fef8:	f012 ff34 	bl	8022d64 <memcpy>
    if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 800fefc:	f107 0310 	add.w	r3, r7, #16
 800ff00:	4619      	mov	r1, r3
 800ff02:	483f      	ldr	r0, [pc, #252]	; (8010000 <Save_Buf+0x1a4>)
 800ff04:	f7ff f9ea 	bl	800f2dc <ProgFileSec>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <Save_Buf+0xb6>
 800ff0e:	2303      	movs	r3, #3
 800ff10:	e06e      	b.n	800fff0 <Save_Buf+0x194>
    PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 800ff12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 800ff1c:	085b      	lsrs	r3, r3, #1
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	f003 0303 	and.w	r3, r3, #3
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	461a      	mov	r2, r3
 800ff28:	2102      	movs	r1, #2
 800ff2a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800ff2e:	f7ff fb8f 	bl	800f650 <PrintClk>
  for(i=0; i<n; i++){
 800ff32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff34:	3301      	adds	r3, #1
 800ff36:	637b      	str	r3, [r7, #52]	; 0x34
 800ff38:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ff3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	dbca      	blt.n	800fed8 <Save_Buf+0x7c>
  }
  memset(F_Buff,0,k);
 800ff42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ff46:	461a      	mov	r2, r3
 800ff48:	2100      	movs	r1, #0
 800ff4a:	482d      	ldr	r0, [pc, #180]	; (8010000 <Save_Buf+0x1a4>)
 800ff4c:	f012 ff18 	bl	8022d80 <memset>
  p =(short*)&F_Buff;
 800ff50:	4b2b      	ldr	r3, [pc, #172]	; (8010000 <Save_Buf+0x1a4>)
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
  *p++=Sampl[0];
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	1c9a      	adds	r2, r3, #2
 800ff58:	627a      	str	r2, [r7, #36]	; 0x24
 800ff5a:	4a2a      	ldr	r2, [pc, #168]	; (8010004 <Save_Buf+0x1a8>)
 800ff5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ff60:	801a      	strh	r2, [r3, #0]
  *p++=Sampl[1];
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	1c9a      	adds	r2, r3, #2
 800ff66:	627a      	str	r2, [r7, #36]	; 0x24
 800ff68:	4a26      	ldr	r2, [pc, #152]	; (8010004 <Save_Buf+0x1a8>)
 800ff6a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ff6e:	801a      	strh	r2, [r3, #0]
  *p++=List[Y_RANGES].Val;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	1c9a      	adds	r2, r3, #2
 800ff74:	627a      	str	r2, [r7, #36]	; 0x24
 800ff76:	4a21      	ldr	r2, [pc, #132]	; (800fffc <Save_Buf+0x1a0>)
 800ff78:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ff7c:	801a      	strh	r2, [r3, #0]
  *p++=List[PROBEATT].Val;
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	1c9a      	adds	r2, r3, #2
 800ff82:	627a      	str	r2, [r7, #36]	; 0x24
 800ff84:	4a1d      	ldr	r2, [pc, #116]	; (800fffc <Save_Buf+0x1a0>)
 800ff86:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800ff8a:	801a      	strh	r2, [r3, #0]
  *p++=List[SMPL_DPTH].Val;
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8e:	1c9a      	adds	r2, r3, #2
 800ff90:	627a      	str	r2, [r7, #36]	; 0x24
 800ff92:	4a1a      	ldr	r2, [pc, #104]	; (800fffc <Save_Buf+0x1a0>)
 800ff94:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 800ff98:	801a      	strh	r2, [r3, #0]
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 800ff9a:	f107 0310 	add.w	r3, r7, #16
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	4817      	ldr	r0, [pc, #92]	; (8010000 <Save_Buf+0x1a4>)
 800ffa2:	f7ff f99b 	bl	800f2dc <ProgFileSec>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d001      	beq.n	800ffb0 <Save_Buf+0x154>
 800ffac:	2303      	movs	r3, #3
 800ffae:	e01f      	b.n	800fff0 <Save_Buf+0x194>
  if(CloseFile(F_Buff, 16*512+k, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 800ffb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ffb4:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 800ffb8:	f107 030c 	add.w	r3, r7, #12
 800ffbc:	f107 0210 	add.w	r2, r7, #16
 800ffc0:	480f      	ldr	r0, [pc, #60]	; (8010000 <Save_Buf+0x1a4>)
 800ffc2:	f7ff f9ff 	bl	800f3c4 <CloseFile>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d001      	beq.n	800ffd0 <Save_Buf+0x174>
 800ffcc:	2303      	movs	r3, #3
 800ffce:	e00f      	b.n	800fff0 <Save_Buf+0x194>
  if(List[SAVE_BUF].Val<99)List[SAVE_BUF].Val++;
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <Save_Buf+0x1a0>)
 800ffd2:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800ffd6:	2b62      	cmp	r3, #98	; 0x62
 800ffd8:	dc09      	bgt.n	800ffee <Save_Buf+0x192>
 800ffda:	4b08      	ldr	r3, [pc, #32]	; (800fffc <Save_Buf+0x1a0>)
 800ffdc:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	b21a      	sxth	r2, r3
 800ffe8:	4b04      	ldr	r3, [pc, #16]	; (800fffc <Save_Buf+0x1a0>)
 800ffea:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  return OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3738      	adds	r7, #56	; 0x38
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	08000214 	.word	0x08000214
 800fffc:	20000298 	.word	0x20000298
 8010000:	200017d0 	.word	0x200017d0
 8010004:	20002868 	.word	0x20002868

08010008 <Save_Dat>:

/*******************************************************************************
Save_Dat: ���浱ǰ��Ļ��ʾͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Dat(short FileNo)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	; 0x28
 801000c:	af00      	add	r7, sp, #0
 801000e:	4603      	mov	r3, r0
 8010010:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="FILE    DAT";
 8010012:	4a42      	ldr	r2, [pc, #264]	; (801011c <Save_Dat+0x114>)
 8010014:	f107 0318 	add.w	r3, r7, #24
 8010018:	ca07      	ldmia	r2, {r0, r1, r2}
 801001a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short Rvalue=DISK_RW_ERR ;
 801001e:	2304      	movs	r3, #4
 8010020:	84fb      	strh	r3, [r7, #38]	; 0x26
  short pCluster[3];
  int pDirAddr[1];
  Make_Filename(FileNo, pFileName);
 8010022:	f107 0218 	add.w	r2, r7, #24
 8010026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801002a:	4611      	mov	r1, r2
 801002c:	4618      	mov	r0, r3
 801002e:	f7ff fcc7 	bl	800f9c0 <Make_Filename>
  memset(F_Buff,0,4096);
 8010032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010036:	2100      	movs	r1, #0
 8010038:	4839      	ldr	r0, [pc, #228]	; (8010120 <Save_Dat+0x118>)
 801003a:	f012 fea1 	bl	8022d80 <memset>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 801003e:	f107 030c 	add.w	r3, r7, #12
 8010042:	f107 0210 	add.w	r2, r7, #16
 8010046:	f107 0118 	add.w	r1, r7, #24
 801004a:	4835      	ldr	r0, [pc, #212]	; (8010120 <Save_Dat+0x118>)
 801004c:	f7ff fa1e 	bl	800f48c <OpenFileWr>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d002      	beq.n	801005c <Save_Dat+0x54>
 8010056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010058:	b2db      	uxtb	r3, r3
 801005a:	e05b      	b.n	8010114 <Save_Dat+0x10c>
  F_Buff[0]  = 1;              //Ver0001
 801005c:	4b30      	ldr	r3, [pc, #192]	; (8010120 <Save_Dat+0x118>)
 801005e:	2201      	movs	r2, #1
 8010060:	701a      	strb	r2, [r3, #0]
  F_Buff[1]  = List[V0_POSI].Val;
 8010062:	4b30      	ldr	r3, [pc, #192]	; (8010124 <Save_Dat+0x11c>)
 8010064:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010068:	b2da      	uxtb	r2, r3
 801006a:	4b2d      	ldr	r3, [pc, #180]	; (8010120 <Save_Dat+0x118>)
 801006c:	705a      	strb	r2, [r3, #1]
  F_Buff[2]  = List[EXT_POSI].Val;
 801006e:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <Save_Dat+0x11c>)
 8010070:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8010074:	b2da      	uxtb	r2, r3
 8010076:	4b2a      	ldr	r3, [pc, #168]	; (8010120 <Save_Dat+0x118>)
 8010078:	709a      	strb	r2, [r3, #2]
  F_Buff[3]  = List[TIM_BASE].Val;
 801007a:	4b2a      	ldr	r3, [pc, #168]	; (8010124 <Save_Dat+0x11c>)
 801007c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010080:	b2da      	uxtb	r2, r3
 8010082:	4b27      	ldr	r3, [pc, #156]	; (8010120 <Save_Dat+0x118>)
 8010084:	70da      	strb	r2, [r3, #3]
  F_Buff[4]  = List[Y_RANGES].Val;
 8010086:	4b27      	ldr	r3, [pc, #156]	; (8010124 <Save_Dat+0x11c>)
 8010088:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801008c:	b2da      	uxtb	r2, r3
 801008e:	4b24      	ldr	r3, [pc, #144]	; (8010120 <Save_Dat+0x118>)
 8010090:	711a      	strb	r2, [r3, #4]
  F_Buff[5]  = List[COUPLING].Val;
 8010092:	4b24      	ldr	r3, [pc, #144]	; (8010124 <Save_Dat+0x11c>)
 8010094:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010098:	b2da      	uxtb	r2, r3
 801009a:	4b21      	ldr	r3, [pc, #132]	; (8010120 <Save_Dat+0x118>)
 801009c:	715a      	strb	r2, [r3, #5]
  F_Buff[6]  = List[PROBEATT].Val;
 801009e:	4b21      	ldr	r3, [pc, #132]	; (8010124 <Save_Dat+0x11c>)
 80100a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80100a4:	b2da      	uxtb	r2, r3
 80100a6:	4b1e      	ldr	r3, [pc, #120]	; (8010120 <Save_Dat+0x118>)
 80100a8:	719a      	strb	r2, [r3, #6]
  F_Buff[7]  = List[TR_MODE].Val;
 80100aa:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <Save_Dat+0x11c>)
 80100ac:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	4b1b      	ldr	r3, [pc, #108]	; (8010120 <Save_Dat+0x118>)
 80100b4:	71da      	strb	r2, [r3, #7]

  memcpy(&F_Buff[10], WaveBuf, 300);
 80100b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80100ba:	491b      	ldr	r1, [pc, #108]	; (8010128 <Save_Dat+0x120>)
 80100bc:	481b      	ldr	r0, [pc, #108]	; (801012c <Save_Dat+0x124>)
 80100be:	f012 fe51 	bl	8022d64 <memcpy>
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 80100c2:	f107 0310 	add.w	r3, r7, #16
 80100c6:	4619      	mov	r1, r3
 80100c8:	4815      	ldr	r0, [pc, #84]	; (8010120 <Save_Dat+0x118>)
 80100ca:	f7ff f907 	bl	800f2dc <ProgFileSec>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <Save_Dat+0xd0>
 80100d4:	2303      	movs	r3, #3
 80100d6:	e01d      	b.n	8010114 <Save_Dat+0x10c>
  if(CloseFile(F_Buff, 512, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 80100d8:	f107 030c 	add.w	r3, r7, #12
 80100dc:	f107 0210 	add.w	r2, r7, #16
 80100e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80100e4:	480e      	ldr	r0, [pc, #56]	; (8010120 <Save_Dat+0x118>)
 80100e6:	f7ff f96d 	bl	800f3c4 <CloseFile>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <Save_Dat+0xec>
 80100f0:	2303      	movs	r3, #3
 80100f2:	e00f      	b.n	8010114 <Save_Dat+0x10c>
  if(List[SAVE_DAT].Val<99)List[SAVE_DAT].Val++;
 80100f4:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <Save_Dat+0x11c>)
 80100f6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80100fa:	2b62      	cmp	r3, #98	; 0x62
 80100fc:	dc09      	bgt.n	8010112 <Save_Dat+0x10a>
 80100fe:	4b09      	ldr	r3, [pc, #36]	; (8010124 <Save_Dat+0x11c>)
 8010100:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8010104:	b29b      	uxth	r3, r3
 8010106:	3301      	adds	r3, #1
 8010108:	b29b      	uxth	r3, r3
 801010a:	b21a      	sxth	r2, r3
 801010c:	4b05      	ldr	r3, [pc, #20]	; (8010124 <Save_Dat+0x11c>)
 801010e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  return OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3728      	adds	r7, #40	; 0x28
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	08000208 	.word	0x08000208
 8010120:	200017d0 	.word	0x200017d0
 8010124:	20000298 	.word	0x20000298
 8010128:	20000c00 	.word	0x20000c00
 801012c:	200017da 	.word	0x200017da

08010130 <Load_Dat>:

/*******************************************************************************
Load_Dat: ���ر��������Ļͼ��ԭʼ����    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Load_Dat(short FileNo)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b08a      	sub	sp, #40	; 0x28
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="FILE    DAT";
 801013a:	4a4f      	ldr	r2, [pc, #316]	; (8010278 <Load_Dat+0x148>)
 801013c:	f107 0314 	add.w	r3, r7, #20
 8010140:	ca07      	ldmia	r2, {r0, r1, r2}
 8010142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  unsigned pDirAddr[1];
  short  Rvalue=0;
 8010146:	2300      	movs	r3, #0
 8010148:	847b      	strh	r3, [r7, #34]	; 0x22
  int i;

  Make_Filename(FileNo, pFileName);
 801014a:	f107 0214 	add.w	r2, r7, #20
 801014e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010152:	4611      	mov	r1, r2
 8010154:	4618      	mov	r0, r3
 8010156:	f7ff fc33 	bl	800f9c0 <Make_Filename>
  if((Rvalue=OpenFileRd(F_Buff, pFileName, pCluster, pDirAddr))!= OK) return Rvalue;
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	f107 020c 	add.w	r2, r7, #12
 8010162:	f107 0114 	add.w	r1, r7, #20
 8010166:	4845      	ldr	r0, [pc, #276]	; (801027c <Load_Dat+0x14c>)
 8010168:	f7fe fec6 	bl	800eef8 <OpenFileRd>
 801016c:	4603      	mov	r3, r0
 801016e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010170:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <Load_Dat+0x4e>
 8010178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801017a:	b2db      	uxtb	r3, r3
 801017c:	e077      	b.n	801026e <Load_Dat+0x13e>
  if(ReadFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR;
 801017e:	f107 030c 	add.w	r3, r7, #12
 8010182:	4619      	mov	r1, r3
 8010184:	483d      	ldr	r0, [pc, #244]	; (801027c <Load_Dat+0x14c>)
 8010186:	f7ff f8ef 	bl	800f368 <ReadFileSec>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <Load_Dat+0x64>
 8010190:	2303      	movs	r3, #3
 8010192:	e06c      	b.n	801026e <Load_Dat+0x13e>
  memcpy(Data, F_Buff, 310);
 8010194:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010198:	4938      	ldr	r1, [pc, #224]	; (801027c <Load_Dat+0x14c>)
 801019a:	4839      	ldr	r0, [pc, #228]	; (8010280 <Load_Dat+0x150>)
 801019c:	f012 fde2 	bl	8022d64 <memcpy>

  List[TIM_BASE].Val = F_Buff[3];
 80101a0:	4b36      	ldr	r3, [pc, #216]	; (801027c <Load_Dat+0x14c>)
 80101a2:	78db      	ldrb	r3, [r3, #3]
 80101a4:	b21a      	sxth	r2, r3
 80101a6:	4b37      	ldr	r3, [pc, #220]	; (8010284 <Load_Dat+0x154>)
 80101a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  List[Y_RANGES].Val = F_Buff[4];
 80101aa:	4b34      	ldr	r3, [pc, #208]	; (801027c <Load_Dat+0x14c>)
 80101ac:	791b      	ldrb	r3, [r3, #4]
 80101ae:	b21a      	sxth	r2, r3
 80101b0:	4b34      	ldr	r3, [pc, #208]	; (8010284 <Load_Dat+0x154>)
 80101b2:	809a      	strh	r2, [r3, #4]
  List[COUPLING].Val = F_Buff[5];
 80101b4:	4b31      	ldr	r3, [pc, #196]	; (801027c <Load_Dat+0x14c>)
 80101b6:	795b      	ldrb	r3, [r3, #5]
 80101b8:	b21a      	sxth	r2, r3
 80101ba:	4b32      	ldr	r3, [pc, #200]	; (8010284 <Load_Dat+0x154>)
 80101bc:	819a      	strh	r2, [r3, #12]
  List[PROBEATT].Val = F_Buff[6];
 80101be:	4b2f      	ldr	r3, [pc, #188]	; (801027c <Load_Dat+0x14c>)
 80101c0:	799b      	ldrb	r3, [r3, #6]
 80101c2:	b21a      	sxth	r2, r3
 80101c4:	4b2f      	ldr	r3, [pc, #188]	; (8010284 <Load_Dat+0x154>)
 80101c6:	829a      	strh	r2, [r3, #20]
  List[TR_MODE].Val  = F_Buff[7];
 80101c8:	4b2c      	ldr	r3, [pc, #176]	; (801027c <Load_Dat+0x14c>)
 80101ca:	79db      	ldrb	r3, [r3, #7]
 80101cc:	b21a      	sxth	r2, r3
 80101ce:	4b2d      	ldr	r3, [pc, #180]	; (8010284 <Load_Dat+0x154>)
 80101d0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

  for(i=0;i<4;i++)List[i].Flg |= UPD;
 80101d4:	2300      	movs	r3, #0
 80101d6:	627b      	str	r3, [r7, #36]	; 0x24
 80101d8:	e010      	b.n	80101fc <Load_Dat+0xcc>
 80101da:	4a2a      	ldr	r2, [pc, #168]	; (8010284 <Load_Dat+0x154>)
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	4413      	add	r3, r2
 80101e2:	799b      	ldrb	r3, [r3, #6]
 80101e4:	f043 0320 	orr.w	r3, r3, #32
 80101e8:	b2d9      	uxtb	r1, r3
 80101ea:	4a26      	ldr	r2, [pc, #152]	; (8010284 <Load_Dat+0x154>)
 80101ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	4413      	add	r3, r2
 80101f2:	460a      	mov	r2, r1
 80101f4:	719a      	strb	r2, [r3, #6]
 80101f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f8:	3301      	adds	r3, #1
 80101fa:	627b      	str	r3, [r7, #36]	; 0x24
 80101fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fe:	2b03      	cmp	r3, #3
 8010200:	ddeb      	ble.n	80101da <Load_Dat+0xaa>
  List[EXT_REFN].Flg |= UPD;
 8010202:	4b20      	ldr	r3, [pc, #128]	; (8010284 <Load_Dat+0x154>)
 8010204:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8010208:	f043 0320 	orr.w	r3, r3, #32
 801020c:	b2da      	uxtb	r2, r3
 801020e:	4b1d      	ldr	r3, [pc, #116]	; (8010284 <Load_Dat+0x154>)
 8010210:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  List[EXT_POSI].Flg |= UPD;
 8010214:	4b1b      	ldr	r3, [pc, #108]	; (8010284 <Load_Dat+0x154>)
 8010216:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 801021a:	f043 0320 	orr.w	r3, r3, #32
 801021e:	b2da      	uxtb	r2, r3
 8010220:	4b18      	ldr	r3, [pc, #96]	; (8010284 <Load_Dat+0x154>)
 8010222:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  List[TIM_BASE].Flg |= UPD;
 8010226:	4b17      	ldr	r3, [pc, #92]	; (8010284 <Load_Dat+0x154>)
 8010228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801022c:	f043 0320 	orr.w	r3, r3, #32
 8010230:	b2da      	uxtb	r2, r3
 8010232:	4b14      	ldr	r3, [pc, #80]	; (8010284 <Load_Dat+0x154>)
 8010234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  List[TR_MODE].Flg |= UPD;
 8010238:	4b12      	ldr	r3, [pc, #72]	; (8010284 <Load_Dat+0x154>)
 801023a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801023e:	f043 0320 	orr.w	r3, r3, #32
 8010242:	b2da      	uxtb	r2, r3
 8010244:	4b0f      	ldr	r3, [pc, #60]	; (8010284 <Load_Dat+0x154>)
 8010246:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
  Update_Detail();
 801024a:	f002 ffab 	bl	80131a4 <Update_Detail>
  if(List[LOAD_DAT].Val<99)List[LOAD_DAT].Val++;
 801024e:	4b0d      	ldr	r3, [pc, #52]	; (8010284 <Load_Dat+0x154>)
 8010250:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8010254:	2b62      	cmp	r3, #98	; 0x62
 8010256:	dc09      	bgt.n	801026c <Load_Dat+0x13c>
 8010258:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <Load_Dat+0x154>)
 801025a:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 801025e:	b29b      	uxth	r3, r3
 8010260:	3301      	adds	r3, #1
 8010262:	b29b      	uxth	r3, r3
 8010264:	b21a      	sxth	r2, r3
 8010266:	4b07      	ldr	r3, [pc, #28]	; (8010284 <Load_Dat+0x154>)
 8010268:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
  return OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3728      	adds	r7, #40	; 0x28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	08000208 	.word	0x08000208
 801027c:	200017d0 	.word	0x200017d0
 8010280:	20000008 	.word	0x20000008
 8010284:	20000298 	.word	0x20000298

08010288 <Save_Bmp>:

/*******************************************************************************
Save_Bmp: ���浱ǰ��Ļ��ʾͼ��ΪBMP��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Bmp(short FileNo)
{
 8010288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801028a:	b08f      	sub	sp, #60	; 0x3c
 801028c:	af00      	add	r7, sp, #0
 801028e:	4603      	mov	r3, r0
 8010290:	80fb      	strh	r3, [r7, #6]
  char  pFileName[12]="IMG_    BMP";
 8010292:	4aaa      	ldr	r2, [pc, #680]	; (801053c <Save_Bmp+0x2b4>)
 8010294:	f107 0314 	add.w	r3, r7, #20
 8010298:	ca07      	ldmia	r2, {r0, r1, r2}
 801029a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int Rvalue=DISK_RW_ERR;
 801029e:	2304      	movs	r3, #4
 80102a0:	62bb      	str	r3, [r7, #40]	; 0x28
  short x, y, i=54, j,ColorH,ColorL ;
 80102a2:	2336      	movs	r3, #54	; 0x36
 80102a4:	867b      	strh	r3, [r7, #50]	; 0x32
  short k=0, l=0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80102aa:	2300      	movs	r3, #0
 80102ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int length;

  length=4096;
 80102ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24

  //USB_Connect(DISABLE);

  if(Current == FN){
 80102b4:	4ba2      	ldr	r3, [pc, #648]	; (8010540 <Save_Bmp+0x2b8>)
 80102b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102ba:	2b05      	cmp	r3, #5
 80102bc:	d105      	bne.n	80102ca <Save_Bmp+0x42>
    Close_Pop();
 80102be:	f7fe f9c5 	bl	800e64c <Close_Pop>
    DrawWindow(WaveBuf, ParamTab);
 80102c2:	49a0      	ldr	r1, [pc, #640]	; (8010544 <Save_Bmp+0x2bc>)
 80102c4:	48a0      	ldr	r0, [pc, #640]	; (8010548 <Save_Bmp+0x2c0>)
 80102c6:	f7fd f9c1 	bl	800d64c <DrawWindow>
  }
  Make_Filename(FileNo, pFileName);
 80102ca:	f107 0214 	add.w	r2, r7, #20
 80102ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102d2:	4611      	mov	r1, r2
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff fb73 	bl	800f9c0 <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 80102da:	f107 0308 	add.w	r3, r7, #8
 80102de:	f107 020c 	add.w	r2, r7, #12
 80102e2:	f107 0114 	add.w	r1, r7, #20
 80102e6:	4899      	ldr	r0, [pc, #612]	; (801054c <Save_Bmp+0x2c4>)
 80102e8:	f7ff f8d0 	bl	800f48c <OpenFileWr>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d002      	beq.n	80102f8 <Save_Bmp+0x70>
 80102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	e11c      	b.n	8010532 <Save_Bmp+0x2aa>
  memcpy(F_Buff, BmpHead, 54);
 80102f8:	4b94      	ldr	r3, [pc, #592]	; (801054c <Save_Bmp+0x2c4>)
 80102fa:	4a95      	ldr	r2, [pc, #596]	; (8010550 <Save_Bmp+0x2c8>)
 80102fc:	4614      	mov	r4, r2
 80102fe:	469c      	mov	ip, r3
 8010300:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8010304:	4665      	mov	r5, ip
 8010306:	4626      	mov	r6, r4
 8010308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801030a:	6028      	str	r0, [r5, #0]
 801030c:	6069      	str	r1, [r5, #4]
 801030e:	60aa      	str	r2, [r5, #8]
 8010310:	60eb      	str	r3, [r5, #12]
 8010312:	3410      	adds	r4, #16
 8010314:	f10c 0c10 	add.w	ip, ip, #16
 8010318:	4574      	cmp	r4, lr
 801031a:	d1f3      	bne.n	8010304 <Save_Bmp+0x7c>
 801031c:	4663      	mov	r3, ip
 801031e:	4622      	mov	r2, r4
 8010320:	6810      	ldr	r0, [r2, #0]
 8010322:	6018      	str	r0, [r3, #0]
 8010324:	8892      	ldrh	r2, [r2, #4]
 8010326:	809a      	strh	r2, [r3, #4]
  i = 0x0036;                                     // ��ɫ���ſ�ʼ��ַ
 8010328:	2336      	movs	r3, #54	; 0x36
 801032a:	867b      	strh	r3, [r7, #50]	; 0x32
  for(j=0; j<16; ++j){
 801032c:	2300      	movs	r3, #0
 801032e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010330:	e042      	b.n	80103b8 <Save_Bmp+0x130>
    F_Buff[j*4 +i+0]=(BMP_Color[j] & 0xF800)>>8;  // Bule
 8010332:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010336:	4a87      	ldr	r2, [pc, #540]	; (8010554 <Save_Bmp+0x2cc>)
 8010338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801033c:	121b      	asrs	r3, r3, #8
 801033e:	b2da      	uxtb	r2, r3
 8010340:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010344:	0099      	lsls	r1, r3, #2
 8010346:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801034a:	440b      	add	r3, r1
 801034c:	f022 0207 	bic.w	r2, r2, #7
 8010350:	b2d1      	uxtb	r1, r2
 8010352:	4a7e      	ldr	r2, [pc, #504]	; (801054c <Save_Bmp+0x2c4>)
 8010354:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+1]=(BMP_Color[j] & 0x07E0)>>3;  // Green&
 8010356:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801035a:	4a7e      	ldr	r2, [pc, #504]	; (8010554 <Save_Bmp+0x2cc>)
 801035c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010360:	10db      	asrs	r3, r3, #3
 8010362:	b2da      	uxtb	r2, r3
 8010364:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010368:	0099      	lsls	r1, r3, #2
 801036a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801036e:	440b      	add	r3, r1
 8010370:	3301      	adds	r3, #1
 8010372:	f022 0203 	bic.w	r2, r2, #3
 8010376:	b2d1      	uxtb	r1, r2
 8010378:	4a74      	ldr	r2, [pc, #464]	; (801054c <Save_Bmp+0x2c4>)
 801037a:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+2]=(BMP_Color[j] & 0x001F)<<3;  // Red
 801037c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010380:	4a74      	ldr	r2, [pc, #464]	; (8010554 <Save_Bmp+0x2cc>)
 8010382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010386:	00d9      	lsls	r1, r3, #3
 8010388:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801038c:	009a      	lsls	r2, r3, #2
 801038e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010392:	4413      	add	r3, r2
 8010394:	3302      	adds	r3, #2
 8010396:	b2c9      	uxtb	r1, r1
 8010398:	4a6c      	ldr	r2, [pc, #432]	; (801054c <Save_Bmp+0x2c4>)
 801039a:	54d1      	strb	r1, [r2, r3]
    F_Buff[j*4 +i+3]= 0;                          // Alpha
 801039c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103a0:	009a      	lsls	r2, r3, #2
 80103a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80103a6:	4413      	add	r3, r2
 80103a8:	3303      	adds	r3, #3
 80103aa:	4a68      	ldr	r2, [pc, #416]	; (801054c <Save_Bmp+0x2c4>)
 80103ac:	2100      	movs	r1, #0
 80103ae:	54d1      	strb	r1, [r2, r3]
  for(j=0; j<16; ++j){
 80103b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80103b2:	3301      	adds	r3, #1
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	863b      	strh	r3, [r7, #48]	; 0x30
 80103b8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80103bc:	2b0f      	cmp	r3, #15
 80103be:	ddb8      	ble.n	8010332 <Save_Bmp+0xaa>
  }
  i = 0x0076;                                     // ͼ�����ݿ�ʼ��ŵ�ַ
 80103c0:	2376      	movs	r3, #118	; 0x76
 80103c2:	867b      	strh	r3, [r7, #50]	; 0x32
  for(y=0; y<240; y++){
 80103c4:	2300      	movs	r3, #0
 80103c6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80103c8:	e079      	b.n	80104be <Save_Bmp+0x236>
    for(x=0; x<320 ; x+=2){
 80103ca:	2300      	movs	r3, #0
 80103cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80103ce:	e06b      	b.n	80104a8 <Save_Bmp+0x220>
      LCD_Set_Posi(x, y);
 80103d0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80103d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80103d8:	4611      	mov	r1, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f001 fe62 	bl	80120a4 <LCD_Set_Posi>
      ColorH = LCD_Get_Pixel();
 80103e0:	f001 fed6 	bl	8012190 <LCD_Get_Pixel>
 80103e4:	4603      	mov	r3, r0
 80103e6:	847b      	strh	r3, [r7, #34]	; 0x22
      LCD_Set_Posi(x+1, y);
 80103e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103ea:	3301      	adds	r3, #1
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	b21b      	sxth	r3, r3
 80103f0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f001 fe54 	bl	80120a4 <LCD_Set_Posi>
      ColorL = LCD_Get_Pixel();
 80103fc:	f001 fec8 	bl	8012190 <LCD_Get_Pixel>
 8010400:	4603      	mov	r3, r0
 8010402:	843b      	strh	r3, [r7, #32]
      F_Buff[i] =(Color_Num(ColorH)<<4)+ Color_Num(ColorL);
 8010404:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff f8a1 	bl	800f550 <Color_Num>
 801040e:	4603      	mov	r3, r0
 8010410:	011b      	lsls	r3, r3, #4
 8010412:	b2dc      	uxtb	r4, r3
 8010414:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff f899 	bl	800f550 <Color_Num>
 801041e:	4603      	mov	r3, r0
 8010420:	461a      	mov	r2, r3
 8010422:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010426:	4422      	add	r2, r4
 8010428:	b2d1      	uxtb	r1, r2
 801042a:	4a48      	ldr	r2, [pc, #288]	; (801054c <Save_Bmp+0x2c4>)
 801042c:	54d1      	strb	r1, [r2, r3]
      i++;
 801042e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010432:	b29b      	uxth	r3, r3
 8010434:	3301      	adds	r3, #1
 8010436:	b29b      	uxth	r3, r3
 8010438:	867b      	strh	r3, [r7, #50]	; 0x32
      if(i>=length){
 801043a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801043e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010440:	429a      	cmp	r2, r3
 8010442:	dc2d      	bgt.n	80104a0 <Save_Bmp+0x218>
        i=0;
 8010444:	2300      	movs	r3, #0
 8010446:	867b      	strh	r3, [r7, #50]	; 0x32
        if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	4619      	mov	r1, r3
 801044e:	483f      	ldr	r0, [pc, #252]	; (801054c <Save_Bmp+0x2c4>)
 8010450:	f7fe ff44 	bl	800f2dc <ProgFileSec>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d001      	beq.n	801045e <Save_Bmp+0x1d6>
 801045a:	2303      	movs	r3, #3
 801045c:	e069      	b.n	8010532 <Save_Bmp+0x2aa>
        if(l==0)PrintClk(168,2,(k++ >>1)& 3);         // ����ָʾ
 801045e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010462:	2b00      	cmp	r3, #0
 8010464:	d110      	bne.n	8010488 <Save_Bmp+0x200>
 8010466:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801046a:	b29a      	uxth	r2, r3
 801046c:	3201      	adds	r2, #1
 801046e:	b292      	uxth	r2, r2
 8010470:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8010472:	105b      	asrs	r3, r3, #1
 8010474:	b21b      	sxth	r3, r3
 8010476:	b2db      	uxtb	r3, r3
 8010478:	f003 0303 	and.w	r3, r3, #3
 801047c:	b2db      	uxtb	r3, r3
 801047e:	461a      	mov	r2, r3
 8010480:	2102      	movs	r1, #2
 8010482:	20a8      	movs	r0, #168	; 0xa8
 8010484:	f7ff f8e4 	bl	800f650 <PrintClk>
        l++;
 8010488:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801048c:	b29b      	uxth	r3, r3
 801048e:	3301      	adds	r3, #1
 8010490:	b29b      	uxth	r3, r3
 8010492:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(l>=2)l=0;
 8010494:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010498:	2b01      	cmp	r3, #1
 801049a:	dd01      	ble.n	80104a0 <Save_Bmp+0x218>
 801049c:	2300      	movs	r3, #0
 801049e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    for(x=0; x<320 ; x+=2){
 80104a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80104a2:	3302      	adds	r3, #2
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80104a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80104ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80104b0:	db8e      	blt.n	80103d0 <Save_Bmp+0x148>
  for(y=0; y<240; y++){
 80104b2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	3301      	adds	r3, #1
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80104be:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80104c2:	2bef      	cmp	r3, #239	; 0xef
 80104c4:	dd81      	ble.n	80103ca <Save_Bmp+0x142>
      }
    }
  }
  if(i!=0){
 80104c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00c      	beq.n	80104e8 <Save_Bmp+0x260>
      if(ProgFileSec(F_Buff, pCluster)!= OK){List_Pop();return FILE_RW_ERR;} // д������
 80104ce:	f107 030c 	add.w	r3, r7, #12
 80104d2:	4619      	mov	r1, r3
 80104d4:	481d      	ldr	r0, [pc, #116]	; (801054c <Save_Bmp+0x2c4>)
 80104d6:	f7fe ff01 	bl	800f2dc <ProgFileSec>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d003      	beq.n	80104e8 <Save_Bmp+0x260>
 80104e0:	f7fe f8ca 	bl	800e678 <List_Pop>
 80104e4:	2303      	movs	r3, #3
 80104e6:	e024      	b.n	8010532 <Save_Bmp+0x2aa>
    }
  if(CloseFile(F_Buff, 76*512, pCluster, pDirAddr)!= OK) return FILE_RW_ERR;
 80104e8:	f107 0308 	add.w	r3, r7, #8
 80104ec:	f107 020c 	add.w	r2, r7, #12
 80104f0:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80104f4:	4815      	ldr	r0, [pc, #84]	; (801054c <Save_Bmp+0x2c4>)
 80104f6:	f7fe ff65 	bl	800f3c4 <CloseFile>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d001      	beq.n	8010504 <Save_Bmp+0x27c>
 8010500:	2303      	movs	r3, #3
 8010502:	e016      	b.n	8010532 <Save_Bmp+0x2aa>
  if(Current == FN)List_Pop();
 8010504:	4b0e      	ldr	r3, [pc, #56]	; (8010540 <Save_Bmp+0x2b8>)
 8010506:	f9b3 3000 	ldrsh.w	r3, [r3]
 801050a:	2b05      	cmp	r3, #5
 801050c:	d101      	bne.n	8010512 <Save_Bmp+0x28a>
 801050e:	f7fe f8b3 	bl	800e678 <List_Pop>
  if(List[SAVE_BMP].Val<99)List[SAVE_BMP].Val++;
 8010512:	4b11      	ldr	r3, [pc, #68]	; (8010558 <Save_Bmp+0x2d0>)
 8010514:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010518:	2b62      	cmp	r3, #98	; 0x62
 801051a:	dc09      	bgt.n	8010530 <Save_Bmp+0x2a8>
 801051c:	4b0e      	ldr	r3, [pc, #56]	; (8010558 <Save_Bmp+0x2d0>)
 801051e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8010522:	b29b      	uxth	r3, r3
 8010524:	3301      	adds	r3, #1
 8010526:	b29b      	uxth	r3, r3
 8010528:	b21a      	sxth	r2, r3
 801052a:	4b0b      	ldr	r3, [pc, #44]	; (8010558 <Save_Bmp+0x2d0>)
 801052c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec

//  USB_Connect(ENABLE);
  return OK;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	373c      	adds	r7, #60	; 0x3c
 8010536:	46bd      	mov	sp, r7
 8010538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801053a:	bf00      	nop
 801053c:	080001fc 	.word	0x080001fc
 8010540:	2000079a 	.word	0x2000079a
 8010544:	20000140 	.word	0x20000140
 8010548:	20000c00 	.word	0x20000c00
 801054c:	200017d0 	.word	0x200017d0
 8010550:	08001b84 	.word	0x08001b84
 8010554:	08001b64 	.word	0x08001b64
 8010558:	20000298 	.word	0x20000298

0801055c <Save_Csv>:

/*******************************************************************************
Save_Csv: ����ɼ����ݻ�����ΪCSV��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Csv(short FileNo)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b094      	sub	sp, #80	; 0x50
 8010560:	af00      	add	r7, sp, #0
 8010562:	4603      	mov	r3, r0
 8010564:	80fb      	strh	r3, [r7, #6]

  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8010566:	4baf      	ldr	r3, [pc, #700]	; (8010824 <Save_Csv+0x2c8>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	4baf      	ldr	r3, [pc, #700]	; (8010828 <Save_Csv+0x2cc>)
 801056c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010570:	4619      	mov	r1, r3
 8010572:	4bae      	ldr	r3, [pc, #696]	; (801082c <Save_Csv+0x2d0>)
 8010574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010578:	2b00      	cmp	r3, #0
 801057a:	bf14      	ite	ne
 801057c:	2301      	movne	r3, #1
 801057e:	2300      	moveq	r3, #0
 8010580:	b2db      	uxtb	r3, r3
 8010582:	440b      	add	r3, r1
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	4413      	add	r3, r2
 8010588:	f9b3 3000 	ldrsh.w	r3, [r3]
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	4aa8      	ldr	r2, [pc, #672]	; (8010830 <Save_Csv+0x2d4>)
 8010590:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010594:	4611      	mov	r1, r2
 8010596:	4aa7      	ldr	r2, [pc, #668]	; (8010834 <Save_Csv+0x2d8>)
 8010598:	5c52      	ldrb	r2, [r2, r1]
 801059a:	fb93 f3f2 	sdiv	r3, r3, r2
 801059e:	63bb      	str	r3, [r7, #56]	; 0x38

  char pFileName[12]="DATA    CSV";
 80105a0:	4aa5      	ldr	r2, [pc, #660]	; (8010838 <Save_Csv+0x2dc>)
 80105a2:	f107 031c 	add.w	r3, r7, #28
 80105a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80105a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  int i,k=0,l=0,Rvalue=DISK_RW_ERR,length;
 80105ac:	2300      	movs	r3, #0
 80105ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80105b0:	2300      	movs	r3, #0
 80105b2:	647b      	str	r3, [r7, #68]	; 0x44
 80105b4:	2304      	movs	r3, #4
 80105b6:	637b      	str	r3, [r7, #52]	; 0x34
  short temp;
  short count;
  char* ptr;
  char* buf;

  length=4096;
 80105b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105bc:	633b      	str	r3, [r7, #48]	; 0x30

  Make_Filename(FileNo, pFileName);
 80105be:	f107 021c 	add.w	r2, r7, #28
 80105c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105c6:	4611      	mov	r1, r2
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff f9f9 	bl	800f9c0 <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 80105ce:	f107 0310 	add.w	r3, r7, #16
 80105d2:	f107 0214 	add.w	r2, r7, #20
 80105d6:	f107 011c 	add.w	r1, r7, #28
 80105da:	4898      	ldr	r0, [pc, #608]	; (801083c <Save_Csv+0x2e0>)
 80105dc:	f7fe ff56 	bl	800f48c <OpenFileWr>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d002      	beq.n	80105ec <Save_Csv+0x90>
 80105e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	e1d3      	b.n	8010994 <Save_Csv+0x438>
  memcpy(&F_Buff[0],TimeBase_Str[List[TIM_BASE].Val],5);
 80105ec:	4b94      	ldr	r3, [pc, #592]	; (8010840 <Save_Csv+0x2e4>)
 80105ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	4a93      	ldr	r2, [pc, #588]	; (8010844 <Save_Csv+0x2e8>)
 80105f6:	4413      	add	r3, r2
 80105f8:	2205      	movs	r2, #5
 80105fa:	4619      	mov	r1, r3
 80105fc:	488f      	ldr	r0, [pc, #572]	; (801083c <Save_Csv+0x2e0>)
 80105fe:	f012 fbb1 	bl	8022d64 <memcpy>
  memcpy(&F_Buff[5],"   ",3);
 8010602:	2203      	movs	r2, #3
 8010604:	4990      	ldr	r1, [pc, #576]	; (8010848 <Save_Csv+0x2ec>)
 8010606:	4891      	ldr	r0, [pc, #580]	; (801084c <Save_Csv+0x2f0>)
 8010608:	f012 fbac 	bl	8022d64 <memcpy>
  buf=&F_Buff[8];
 801060c:	4b90      	ldr	r3, [pc, #576]	; (8010850 <Save_Csv+0x2f4>)
 801060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //------------------------------------------------------------------
    i=0;
 8010610:	2300      	movs	r3, #0
 8010612:	64fb      	str	r3, [r7, #76]	; 0x4c
    ptr=(char*)&R[List[Y_RANGES].Val];
 8010614:	4b8a      	ldr	r3, [pc, #552]	; (8010840 <Save_Csv+0x2e4>)
 8010616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801061a:	461a      	mov	r2, r3
 801061c:	4613      	mov	r3, r2
 801061e:	005b      	lsls	r3, r3, #1
 8010620:	4413      	add	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4a8b      	ldr	r2, [pc, #556]	; (8010854 <Save_Csv+0x2f8>)
 8010626:	4413      	add	r3, r2
 8010628:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(*ptr != 0)
 801062a:	e00a      	b.n	8010642 <Save_Csv+0xe6>
    	buf[i++] = *ptr++;
 801062c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010634:	1c51      	adds	r1, r2, #1
 8010636:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010638:	4611      	mov	r1, r2
 801063a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801063c:	440a      	add	r2, r1
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 8010642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1f0      	bne.n	801062c <Save_Csv+0xd0>
    buf[i++]   = 0x2a;
 801064a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010650:	461a      	mov	r2, r3
 8010652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010654:	4413      	add	r3, r2
 8010656:	222a      	movs	r2, #42	; 0x2a
 8010658:	701a      	strb	r2, [r3, #0]
    ptr=(char*)&N[List[PROBEATT].Val];
 801065a:	4b79      	ldr	r3, [pc, #484]	; (8010840 <Save_Csv+0x2e4>)
 801065c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010660:	461a      	mov	r2, r3
 8010662:	4613      	mov	r3, r2
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	4413      	add	r3, r2
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	4a7b      	ldr	r2, [pc, #492]	; (8010858 <Save_Csv+0x2fc>)
 801066c:	4413      	add	r3, r2
 801066e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(*ptr != 0)
 8010670:	e00a      	b.n	8010688 <Save_Csv+0x12c>
    	buf[i++] = *ptr++;
 8010672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801067a:	1c51      	adds	r1, r2, #1
 801067c:	64f9      	str	r1, [r7, #76]	; 0x4c
 801067e:	4611      	mov	r1, r2
 8010680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010682:	440a      	add	r2, r1
 8010684:	781b      	ldrb	r3, [r3, #0]
 8010686:	7013      	strb	r3, [r2, #0]
    while(*ptr != 0)
 8010688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1f0      	bne.n	8010672 <Save_Csv+0x116>
    buf[i]   = 0x2c;
 8010690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010694:	4413      	add	r3, r2
 8010696:	222c      	movs	r2, #44	; 0x2c
 8010698:	701a      	strb	r2, [r3, #0]
    buf[i+1] = 0;
 801069a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801069c:	3301      	adds	r3, #1
 801069e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106a0:	4413      	add	r3, r2
 80106a2:	2200      	movs	r2, #0
 80106a4:	701a      	strb	r2, [r3, #0]
    count = i+1;
 80106a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	3301      	adds	r3, #1
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  k=8+count;
 80106b2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80106b6:	3308      	adds	r3, #8
 80106b8:	64bb      	str	r3, [r7, #72]	; 0x48
  memcpy(&F_Buff[k],"\r\n",2);
 80106ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106bc:	4a5f      	ldr	r2, [pc, #380]	; (801083c <Save_Csv+0x2e0>)
 80106be:	4413      	add	r3, r2
 80106c0:	2202      	movs	r2, #2
 80106c2:	4966      	ldr	r1, [pc, #408]	; (801085c <Save_Csv+0x300>)
 80106c4:	4618      	mov	r0, r3
 80106c6:	f012 fb4d 	bl	8022d64 <memcpy>
  k+=2;
 80106ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106cc:	3302      	adds	r3, #2
 80106ce:	64bb      	str	r3, [r7, #72]	; 0x48
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++){
 80106d0:	2300      	movs	r3, #0
 80106d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106d4:	e0fe      	b.n	80108d4 <Save_Csv+0x378>

    temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 80106d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d8:	3302      	adds	r3, #2
 80106da:	4a61      	ldr	r2, [pc, #388]	; (8010860 <Save_Csv+0x304>)
 80106dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80106e0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80106e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106e6:	fb02 f303 	mul.w	r3, r2, r3
 80106ea:	131b      	asrs	r3, r3, #12
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	3364      	adds	r3, #100	; 0x64
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if(temp > 0){
 80106f4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	dd0a      	ble.n	8010712 <Save_Csv+0x1b6>
      if(temp > 200)  track[0] = 199;
 80106fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010700:	2bc8      	cmp	r3, #200	; 0xc8
 8010702:	dd02      	ble.n	801070a <Save_Csv+0x1ae>
 8010704:	23c7      	movs	r3, #199	; 0xc7
 8010706:	723b      	strb	r3, [r7, #8]
 8010708:	e005      	b.n	8010716 <Save_Csv+0x1ba>
      else            track[0] = temp;
 801070a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801070c:	b2db      	uxtb	r3, r3
 801070e:	723b      	strb	r3, [r7, #8]
 8010710:	e001      	b.n	8010716 <Save_Csv+0x1ba>
    } else            track[0] = 0;
 8010712:	2300      	movs	r3, #0
 8010714:	723b      	strb	r3, [r7, #8]
    u8ToDec3(Num,track[0]);
 8010716:	7a3a      	ldrb	r2, [r7, #8]
 8010718:	f107 030c 	add.w	r3, r7, #12
 801071c:	4611      	mov	r1, r2
 801071e:	4618      	mov	r0, r3
 8010720:	f001 f898 	bl	8011854 <u8ToDec3>
    for(count=0; count<3; count++){
 8010724:	2300      	movs	r3, #0
 8010726:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801072a:	e03a      	b.n	80107a2 <Save_Csv+0x246>
      if(Num[count] == 0) break;
 801072c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010730:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010734:	4413      	add	r3, r2
 8010736:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d036      	beq.n	80107ac <Save_Csv+0x250>
      F_Buff[k++] = Num[count];
 801073e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8010742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010744:	1c59      	adds	r1, r3, #1
 8010746:	64b9      	str	r1, [r7, #72]	; 0x48
 8010748:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801074c:	440a      	add	r2, r1
 801074e:	f812 1c44 	ldrb.w	r1, [r2, #-68]
 8010752:	4a3a      	ldr	r2, [pc, #232]	; (801083c <Save_Csv+0x2e0>)
 8010754:	54d1      	strb	r1, [r2, r3]
      if(k >= length){
 8010756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	429a      	cmp	r2, r3
 801075c:	db1a      	blt.n	8010794 <Save_Csv+0x238>
        if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 801075e:	f107 0314 	add.w	r3, r7, #20
 8010762:	4619      	mov	r1, r3
 8010764:	4835      	ldr	r0, [pc, #212]	; (801083c <Save_Csv+0x2e0>)
 8010766:	f7fe fdb9 	bl	800f2dc <ProgFileSec>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d001      	beq.n	8010774 <Save_Csv+0x218>
 8010770:	2303      	movs	r3, #3
 8010772:	e10f      	b.n	8010994 <Save_Csv+0x438>
        PrintClk(264,2,(l++ >>1) & 3);                    // ����ָʾ
 8010774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	647a      	str	r2, [r7, #68]	; 0x44
 801077a:	105b      	asrs	r3, r3, #1
 801077c:	b2db      	uxtb	r3, r3
 801077e:	f003 0303 	and.w	r3, r3, #3
 8010782:	b2db      	uxtb	r3, r3
 8010784:	461a      	mov	r2, r3
 8010786:	2102      	movs	r1, #2
 8010788:	f44f 7084 	mov.w	r0, #264	; 0x108
 801078c:	f7fe ff60 	bl	800f650 <PrintClk>
        k = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	64bb      	str	r3, [r7, #72]	; 0x48
    for(count=0; count<3; count++){
 8010794:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010798:	b29b      	uxth	r3, r3
 801079a:	3301      	adds	r3, #1
 801079c:	b29b      	uxth	r3, r3
 801079e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80107a2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	ddc0      	ble.n	801072c <Save_Csv+0x1d0>
 80107aa:	e000      	b.n	80107ae <Save_Csv+0x252>
      if(Num[count] == 0) break;
 80107ac:	bf00      	nop
      }
    }
    F_Buff[k++] = 0x2c;
 80107ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107b0:	1c5a      	adds	r2, r3, #1
 80107b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80107b4:	4a21      	ldr	r2, [pc, #132]	; (801083c <Save_Csv+0x2e0>)
 80107b6:	212c      	movs	r1, #44	; 0x2c
 80107b8:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 80107ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	429a      	cmp	r2, r3
 80107c0:	db1a      	blt.n	80107f8 <Save_Csv+0x29c>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 80107c2:	f107 0314 	add.w	r3, r7, #20
 80107c6:	4619      	mov	r1, r3
 80107c8:	481c      	ldr	r0, [pc, #112]	; (801083c <Save_Csv+0x2e0>)
 80107ca:	f7fe fd87 	bl	800f2dc <ProgFileSec>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d001      	beq.n	80107d8 <Save_Csv+0x27c>
 80107d4:	2303      	movs	r3, #3
 80107d6:	e0dd      	b.n	8010994 <Save_Csv+0x438>
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 80107d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107da:	1c5a      	adds	r2, r3, #1
 80107dc:	647a      	str	r2, [r7, #68]	; 0x44
 80107de:	105b      	asrs	r3, r3, #1
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	f003 0303 	and.w	r3, r3, #3
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	461a      	mov	r2, r3
 80107ea:	2102      	movs	r1, #2
 80107ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 80107f0:	f7fe ff2e 	bl	800f650 <PrintClk>
      k = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    F_Buff[k++] = 0x0d;
 80107f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107fa:	1c5a      	adds	r2, r3, #1
 80107fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80107fe:	4a0f      	ldr	r2, [pc, #60]	; (801083c <Save_Csv+0x2e0>)
 8010800:	210d      	movs	r1, #13
 8010802:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 8010804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	429a      	cmp	r2, r3
 801080a:	db3b      	blt.n	8010884 <Save_Csv+0x328>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 801080c:	f107 0314 	add.w	r3, r7, #20
 8010810:	4619      	mov	r1, r3
 8010812:	480a      	ldr	r0, [pc, #40]	; (801083c <Save_Csv+0x2e0>)
 8010814:	f7fe fd62 	bl	800f2dc <ProgFileSec>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d022      	beq.n	8010864 <Save_Csv+0x308>
 801081e:	2303      	movs	r3, #3
 8010820:	e0b8      	b.n	8010994 <Save_Csv+0x438>
 8010822:	bf00      	nop
 8010824:	2000057c 	.word	0x2000057c
 8010828:	2000687e 	.word	0x2000687e
 801082c:	2000285a 	.word	0x2000285a
 8010830:	20002842 	.word	0x20002842
 8010834:	20000560 	.word	0x20000560
 8010838:	08000220 	.word	0x08000220
 801083c:	200017d0 	.word	0x200017d0
 8010840:	20000298 	.word	0x20000298
 8010844:	200001d0 	.word	0x200001d0
 8010848:	08000244 	.word	0x08000244
 801084c:	200017d5 	.word	0x200017d5
 8010850:	200017d8 	.word	0x200017d8
 8010854:	08001da8 	.word	0x08001da8
 8010858:	08001cd4 	.word	0x08001cd4
 801085c:	08000248 	.word	0x08000248
 8010860:	20002868 	.word	0x20002868
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 8010864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010866:	1c5a      	adds	r2, r3, #1
 8010868:	647a      	str	r2, [r7, #68]	; 0x44
 801086a:	105b      	asrs	r3, r3, #1
 801086c:	b2db      	uxtb	r3, r3
 801086e:	f003 0303 	and.w	r3, r3, #3
 8010872:	b2db      	uxtb	r3, r3
 8010874:	461a      	mov	r2, r3
 8010876:	2102      	movs	r1, #2
 8010878:	f44f 7084 	mov.w	r0, #264	; 0x108
 801087c:	f7fe fee8 	bl	800f650 <PrintClk>
      k = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    F_Buff[k++] = 0x0a;
 8010884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010886:	1c5a      	adds	r2, r3, #1
 8010888:	64ba      	str	r2, [r7, #72]	; 0x48
 801088a:	4a44      	ldr	r2, [pc, #272]	; (801099c <Save_Csv+0x440>)
 801088c:	210a      	movs	r1, #10
 801088e:	54d1      	strb	r1, [r2, r3]
    if(k >= length){
 8010890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	429a      	cmp	r2, r3
 8010896:	db1a      	blt.n	80108ce <Save_Csv+0x372>
      if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010898:	f107 0314 	add.w	r3, r7, #20
 801089c:	4619      	mov	r1, r3
 801089e:	483f      	ldr	r0, [pc, #252]	; (801099c <Save_Csv+0x440>)
 80108a0:	f7fe fd1c 	bl	800f2dc <ProgFileSec>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d001      	beq.n	80108ae <Save_Csv+0x352>
 80108aa:	2303      	movs	r3, #3
 80108ac:	e072      	b.n	8010994 <Save_Csv+0x438>
      PrintClk(264,2,(l++ >>1)& 3);                    // ����ָʾ
 80108ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	647a      	str	r2, [r7, #68]	; 0x44
 80108b4:	105b      	asrs	r3, r3, #1
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	f003 0303 	and.w	r3, r3, #3
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	461a      	mov	r2, r3
 80108c0:	2102      	movs	r1, #2
 80108c2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80108c6:	f7fe fec3 	bl	800f650 <PrintClk>
      k = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	64bb      	str	r3, [r7, #72]	; 0x48
  for(i=0; i<DEPTH[List[SMPL_DPTH].Val]; i++){
 80108ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d0:	3301      	adds	r3, #1
 80108d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108d4:	4b32      	ldr	r3, [pc, #200]	; (80109a0 <Save_Csv+0x444>)
 80108d6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80108da:	461a      	mov	r2, r3
 80108dc:	4b31      	ldr	r3, [pc, #196]	; (80109a4 <Save_Csv+0x448>)
 80108de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80108e2:	461a      	mov	r2, r3
 80108e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e6:	4293      	cmp	r3, r2
 80108e8:	f6ff aef5 	blt.w	80106d6 <Save_Csv+0x17a>
    }
  }
  if(k != 0){
 80108ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d030      	beq.n	8010954 <Save_Csv+0x3f8>
    F_Buff[k++]=0x0d;
 80108f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80108f8:	4a28      	ldr	r2, [pc, #160]	; (801099c <Save_Csv+0x440>)
 80108fa:	210d      	movs	r1, #13
 80108fc:	54d1      	strb	r1, [r2, r3]
    F_Buff[k++]=0x0a;
 80108fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010900:	1c5a      	adds	r2, r3, #1
 8010902:	64ba      	str	r2, [r7, #72]	; 0x48
 8010904:	4a25      	ldr	r2, [pc, #148]	; (801099c <Save_Csv+0x440>)
 8010906:	210a      	movs	r1, #10
 8010908:	54d1      	strb	r1, [r2, r3]
    memset(&F_Buff[k],32,(4096-k)); //32->�ո�
 801090a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801090c:	4a23      	ldr	r2, [pc, #140]	; (801099c <Save_Csv+0x440>)
 801090e:	1898      	adds	r0, r3, r2
 8010910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010912:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010916:	461a      	mov	r2, r3
 8010918:	2120      	movs	r1, #32
 801091a:	f012 fa31 	bl	8022d80 <memset>
    k=0;
 801091e:	2300      	movs	r3, #0
 8010920:	64bb      	str	r3, [r7, #72]	; 0x48
    if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8010922:	f107 0314 	add.w	r3, r7, #20
 8010926:	4619      	mov	r1, r3
 8010928:	481c      	ldr	r0, [pc, #112]	; (801099c <Save_Csv+0x440>)
 801092a:	f7fe fcd7 	bl	800f2dc <ProgFileSec>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <Save_Csv+0x3dc>
 8010934:	2303      	movs	r3, #3
 8010936:	e02d      	b.n	8010994 <Save_Csv+0x438>
    PrintClk(264,2,(l++ >>1)& 3);                     // ����ָʾ
 8010938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	647a      	str	r2, [r7, #68]	; 0x44
 801093e:	105b      	asrs	r3, r3, #1
 8010940:	b2db      	uxtb	r3, r3
 8010942:	f003 0303 	and.w	r3, r3, #3
 8010946:	b2db      	uxtb	r3, r3
 8010948:	461a      	mov	r2, r3
 801094a:	2102      	movs	r1, #2
 801094c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8010950:	f7fe fe7e 	bl	800f650 <PrintClk>
  }
  if(CloseFile(F_Buff, l*length, pCluster, pDirAddr)!= OK) return DISK_RW_ERR;
 8010954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010958:	fb02 f103 	mul.w	r1, r2, r3
 801095c:	f107 0310 	add.w	r3, r7, #16
 8010960:	f107 0214 	add.w	r2, r7, #20
 8010964:	480d      	ldr	r0, [pc, #52]	; (801099c <Save_Csv+0x440>)
 8010966:	f7fe fd2d 	bl	800f3c4 <CloseFile>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <Save_Csv+0x418>
 8010970:	2304      	movs	r3, #4
 8010972:	e00f      	b.n	8010994 <Save_Csv+0x438>
  if(List[SAVE_CSV].Val<99)List[SAVE_CSV].Val++;
 8010974:	4b0a      	ldr	r3, [pc, #40]	; (80109a0 <Save_Csv+0x444>)
 8010976:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 801097a:	2b62      	cmp	r3, #98	; 0x62
 801097c:	dc09      	bgt.n	8010992 <Save_Csv+0x436>
 801097e:	4b08      	ldr	r3, [pc, #32]	; (80109a0 <Save_Csv+0x444>)
 8010980:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 8010984:	b29b      	uxth	r3, r3
 8010986:	3301      	adds	r3, #1
 8010988:	b29b      	uxth	r3, r3
 801098a:	b21a      	sxth	r2, r3
 801098c:	4b04      	ldr	r3, [pc, #16]	; (80109a0 <Save_Csv+0x444>)
 801098e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  return OK;
 8010992:	2300      	movs	r3, #0
}
 8010994:	4618      	mov	r0, r3
 8010996:	3750      	adds	r7, #80	; 0x50
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}
 801099c:	200017d0 	.word	0x200017d0
 80109a0:	20000298 	.word	0x20000298
 80109a4:	08002270 	.word	0x08002270

080109a8 <Save_Svg>:

/*******************************************************************************
Save_Svg: ����ɼ����ݻ�����ΪBUF��ʽ    ���룺�ļ����     ����ֵ��0x00=�ɹ�
*******************************************************************************/
char Save_Svg(short FileNo)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b092      	sub	sp, #72	; 0x48
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	80fb      	strh	r3, [r7, #6]
  char pFileName[12]="DATA    SVG";
 80109b2:	4abb      	ldr	r2, [pc, #748]	; (8010ca0 <Save_Svg+0x2f8>)
 80109b4:	f107 031c 	add.w	r3, r7, #28
 80109b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80109ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  short pCluster[3];
  int pDirAddr[1];
  short track[4];
  int Rvalue = DISK_RW_ERR;
 80109be:	2304      	movs	r3, #4
 80109c0:	63bb      	str	r3, [r7, #56]	; 0x38
  int l = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	637b      	str	r3, [r7, #52]	; 0x34
  short Buf_len = 4096;
 80109c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109ca:	867b      	strh	r3, [r7, #50]	; 0x32
  short i,x, y;
  short temp;
  char  *str;
  short Posi1 = 0;
 80109cc:	2300      	movs	r3, #0
 80109ce:	863b      	strh	r3, [r7, #48]	; 0x30
  int Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80109d0:	4bb4      	ldr	r3, [pc, #720]	; (8010ca4 <Save_Svg+0x2fc>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	4bb4      	ldr	r3, [pc, #720]	; (8010ca8 <Save_Svg+0x300>)
 80109d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109da:	4619      	mov	r1, r3
 80109dc:	4bb3      	ldr	r3, [pc, #716]	; (8010cac <Save_Svg+0x304>)
 80109de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	bf14      	ite	ne
 80109e6:	2301      	movne	r3, #1
 80109e8:	2300      	moveq	r3, #0
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	440b      	add	r3, r1
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	4413      	add	r3, r2
 80109f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4aad      	ldr	r2, [pc, #692]	; (8010cb0 <Save_Svg+0x308>)
 80109fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80109fe:	4611      	mov	r1, r2
 8010a00:	4aac      	ldr	r2, [pc, #688]	; (8010cb4 <Save_Svg+0x30c>)
 8010a02:	5c52      	ldrb	r2, [r2, r1]
 8010a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a08:	62fb      	str	r3, [r7, #44]	; 0x2c


  Svg_Cnt = 0;
 8010a0a:	4bab      	ldr	r3, [pc, #684]	; (8010cb8 <Save_Svg+0x310>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	601a      	str	r2, [r3, #0]
  Addr = 0, Length = 0;
 8010a10:	4baa      	ldr	r3, [pc, #680]	; (8010cbc <Save_Svg+0x314>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	801a      	strh	r2, [r3, #0]
 8010a16:	4baa      	ldr	r3, [pc, #680]	; (8010cc0 <Save_Svg+0x318>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	801a      	strh	r2, [r3, #0]
  str = (char*)&Data;
 8010a1c:	4ba9      	ldr	r3, [pc, #676]	; (8010cc4 <Save_Svg+0x31c>)
 8010a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  //__USB_Port(DISABLE);
  memset(Data,0,310);
 8010a20:	f44f 729b 	mov.w	r2, #310	; 0x136
 8010a24:	2100      	movs	r1, #0
 8010a26:	48a7      	ldr	r0, [pc, #668]	; (8010cc4 <Save_Svg+0x31c>)
 8010a28:	f012 f9aa 	bl	8022d80 <memset>
  memset(F_Buff,0,Buf_len);
 8010a2c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010a30:	461a      	mov	r2, r3
 8010a32:	2100      	movs	r1, #0
 8010a34:	48a4      	ldr	r0, [pc, #656]	; (8010cc8 <Save_Svg+0x320>)
 8010a36:	f012 f9a3 	bl	8022d80 <memset>
  Make_Filename(FileNo, pFileName);
 8010a3a:	f107 021c 	add.w	r2, r7, #28
 8010a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a42:	4611      	mov	r1, r2
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fe ffbb 	bl	800f9c0 <Make_Filename>
  if(OpenFileWr(F_Buff, pFileName, pCluster, pDirAddr)!=OK) return Rvalue;
 8010a4a:	f107 0310 	add.w	r3, r7, #16
 8010a4e:	f107 0214 	add.w	r2, r7, #20
 8010a52:	f107 011c 	add.w	r1, r7, #28
 8010a56:	489c      	ldr	r0, [pc, #624]	; (8010cc8 <Save_Svg+0x320>)
 8010a58:	f7fe fd18 	bl	800f48c <OpenFileWr>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <Save_Svg+0xc0>
 8010a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	e3d5      	b.n	8011214 <Save_Svg+0x86c>
  //SVG �ĵ���ĳЩ��������SVG ,ָ���ⲿ��DTD
  str = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n";
 8010a68:	4b98      	ldr	r3, [pc, #608]	; (8010ccc <Save_Svg+0x324>)
 8010a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010a6c:	f107 0314 	add.w	r3, r7, #20
 8010a70:	4619      	mov	r1, r3
 8010a72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a74:	f7fe ff0a 	bl	800f88c <WriteStr>
  str = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n";
 8010a78:	4b95      	ldr	r3, [pc, #596]	; (8010cd0 <Save_Svg+0x328>)
 8010a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010a7c:	f107 0314 	add.w	r3, r7, #20
 8010a80:	4619      	mov	r1, r3
 8010a82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a84:	f7fe ff02 	bl	800f88c <WriteStr>
  str = "<svg width=\"";
 8010a88:	4b92      	ldr	r3, [pc, #584]	; (8010cd4 <Save_Svg+0x32c>)
 8010a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010a8c:	f107 0314 	add.w	r3, r7, #20
 8010a90:	4619      	mov	r1, r3
 8010a92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a94:	f7fe fefa 	bl	800f88c <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010a98:	4b8f      	ldr	r3, [pc, #572]	; (8010cd8 <Save_Svg+0x330>)
 8010a9a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4b8e      	ldr	r3, [pc, #568]	; (8010cdc <Save_Svg+0x334>)
 8010aa2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010aa6:	f107 0214 	add.w	r2, r7, #20
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe fe45 	bl	800f73c <WriteVar>
  str = "\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" onload=\"init(evt)\" onmousemove=\"msMove(evt)\">\n";
 8010ab2:	4b8b      	ldr	r3, [pc, #556]	; (8010ce0 <Save_Svg+0x338>)
 8010ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ab6:	f107 0314 	add.w	r3, r7, #20
 8010aba:	4619      	mov	r1, r3
 8010abc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010abe:	f7fe fee5 	bl	800f88c <WriteStr>

  //�������С��ɫ
  str = "<path stroke=\"none\" fill=\"black\" d=\"M0,0 H";
 8010ac2:	4b88      	ldr	r3, [pc, #544]	; (8010ce4 <Save_Svg+0x33c>)
 8010ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ac6:	f107 0314 	add.w	r3, r7, #20
 8010aca:	4619      	mov	r1, r3
 8010acc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ace:	f7fe fedd 	bl	800f88c <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010ad2:	4b81      	ldr	r3, [pc, #516]	; (8010cd8 <Save_Svg+0x330>)
 8010ad4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010ad8:	461a      	mov	r2, r3
 8010ada:	4b80      	ldr	r3, [pc, #512]	; (8010cdc <Save_Svg+0x334>)
 8010adc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010ae0:	f107 0214 	add.w	r2, r7, #20
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fe28 	bl	800f73c <WriteVar>
  str = " V200 H0 V0\"/>\n";
 8010aec:	4b7e      	ldr	r3, [pc, #504]	; (8010ce8 <Save_Svg+0x340>)
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010af0:	f107 0314 	add.w	r3, r7, #20
 8010af4:	4619      	mov	r1, r3
 8010af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010af8:	f7fe fec8 	bl	800f88c <WriteStr>
  //��ǰ���ڱ���
  str = "<path stroke=\"none\" fill=\"#400040\" d=\"M";  //��ɫ
 8010afc:	4b7b      	ldr	r3, [pc, #492]	; (8010cec <Save_Svg+0x344>)
 8010afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010b00:	f107 0314 	add.w	r3, r7, #20
 8010b04:	4619      	mov	r1, r3
 8010b06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b08:	f7fe fec0 	bl	800f88c <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010b0c:	4b72      	ldr	r3, [pc, #456]	; (8010cd8 <Save_Svg+0x330>)
 8010b0e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010b12:	f107 0214 	add.w	r2, r7, #20
 8010b16:	4611      	mov	r1, r2
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe fe0f 	bl	800f73c <WriteVar>
  str = ",0 H";
 8010b1e:	4b74      	ldr	r3, [pc, #464]	; (8010cf0 <Save_Svg+0x348>)
 8010b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010b22:	f107 0314 	add.w	r3, r7, #20
 8010b26:	4619      	mov	r1, r3
 8010b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b2a:	f7fe feaf 	bl	800f88c <WriteStr>
  WriteVar(List[VIEWPOSI].Val, pCluster);
 8010b2e:	4b6a      	ldr	r3, [pc, #424]	; (8010cd8 <Save_Svg+0x330>)
 8010b30:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010b34:	f107 0214 	add.w	r2, r7, #20
 8010b38:	4611      	mov	r1, r2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fe fdfe 	bl	800f73c <WriteVar>
  str = " V200 H";
 8010b40:	4b6c      	ldr	r3, [pc, #432]	; (8010cf4 <Save_Svg+0x34c>)
 8010b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010b44:	f107 0314 	add.w	r3, r7, #20
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b4c:	f7fe fe9e 	bl	800f88c <WriteStr>
  WriteVar(List[VIEWPOSI].Val+300, pCluster);
 8010b50:	4b61      	ldr	r3, [pc, #388]	; (8010cd8 <Save_Svg+0x330>)
 8010b52:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	b21b      	sxth	r3, r3
 8010b60:	f107 0214 	add.w	r2, r7, #20
 8010b64:	4611      	mov	r1, r2
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe fde8 	bl	800f73c <WriteVar>
  str = "  V0\"/>\n";
 8010b6c:	4b62      	ldr	r3, [pc, #392]	; (8010cf8 <Save_Svg+0x350>)
 8010b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010b70:	f107 0314 	add.w	r3, r7, #20
 8010b74:	4619      	mov	r1, r3
 8010b76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b78:	f7fe fe88 	bl	800f88c <WriteStr>
  //��������
 for (y=0; y<=200; y+=25){
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010b82:	e032      	b.n	8010bea <Save_Svg+0x242>
    //<path stroke="#404040" d="M0,0 H4096"/>
    str = "<path stroke=\"#404040\" d=\"M0,";
 8010b84:	4b5d      	ldr	r3, [pc, #372]	; (8010cfc <Save_Svg+0x354>)
 8010b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010b88:	f107 0314 	add.w	r3, r7, #20
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b90:	f7fe fe7c 	bl	800f88c <WriteStr>
    WriteVar(y, pCluster);
 8010b94:	f107 0214 	add.w	r2, r7, #20
 8010b98:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fe fdcc 	bl	800f73c <WriteVar>
    str = " H";
 8010ba4:	4b56      	ldr	r3, [pc, #344]	; (8010d00 <Save_Svg+0x358>)
 8010ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010ba8:	f107 0314 	add.w	r3, r7, #20
 8010bac:	4619      	mov	r1, r3
 8010bae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bb0:	f7fe fe6c 	bl	800f88c <WriteStr>
    WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010bb4:	4b48      	ldr	r3, [pc, #288]	; (8010cd8 <Save_Svg+0x330>)
 8010bb6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010bba:	461a      	mov	r2, r3
 8010bbc:	4b47      	ldr	r3, [pc, #284]	; (8010cdc <Save_Svg+0x334>)
 8010bbe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010bc2:	f107 0214 	add.w	r2, r7, #20
 8010bc6:	4611      	mov	r1, r2
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe fdb7 	bl	800f73c <WriteVar>
    str = "\"/>\n";
 8010bce:	4b4d      	ldr	r3, [pc, #308]	; (8010d04 <Save_Svg+0x35c>)
 8010bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010bd2:	f107 0314 	add.w	r3, r7, #20
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bda:	f7fe fe57 	bl	800f88c <WriteStr>
 for (y=0; y<=200; y+=25){
 8010bde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010be2:	3319      	adds	r3, #25
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010bea:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8010bee:	2bc8      	cmp	r3, #200	; 0xc8
 8010bf0:	ddc8      	ble.n	8010b84 <Save_Svg+0x1dc>
  }
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25){
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010bf8:	e01d      	b.n	8010c36 <Save_Svg+0x28e>
    //<path stroke="#404040" d="M0,0 V256"/>
    str = "<path stroke=\"#404040\" d=\"M";
 8010bfa:	4b43      	ldr	r3, [pc, #268]	; (8010d08 <Save_Svg+0x360>)
 8010bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010bfe:	f107 0314 	add.w	r3, r7, #20
 8010c02:	4619      	mov	r1, r3
 8010c04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c06:	f7fe fe41 	bl	800f88c <WriteStr>
    WriteVar(x, pCluster);
 8010c0a:	f107 0214 	add.w	r2, r7, #20
 8010c0e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010c12:	4611      	mov	r1, r2
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fe fd91 	bl	800f73c <WriteVar>
    str = ",0 V200\"/>\n";
 8010c1a:	4b3c      	ldr	r3, [pc, #240]	; (8010d0c <Save_Svg+0x364>)
 8010c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010c1e:	f107 0314 	add.w	r3, r7, #20
 8010c22:	4619      	mov	r1, r3
 8010c24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c26:	f7fe fe31 	bl	800f88c <WriteStr>
  for (x=0; x<=DEPTH[List[SMPL_DPTH].Val]; x+=25){
 8010c2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c2e:	3319      	adds	r3, #25
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010c36:	4b28      	ldr	r3, [pc, #160]	; (8010cd8 <Save_Svg+0x330>)
 8010c38:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4b27      	ldr	r3, [pc, #156]	; (8010cdc <Save_Svg+0x334>)
 8010c40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010c44:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	ddd6      	ble.n	8010bfa <Save_Svg+0x252>
  }
  //ͨ��A����
  str = "<path stroke=\"cyan\" fill=\"none\" stroke-width=\"1\" d=\"";
 8010c4c:	4b30      	ldr	r3, [pc, #192]	; (8010d10 <Save_Svg+0x368>)
 8010c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010c50:	f107 0314 	add.w	r3, r7, #20
 8010c54:	4619      	mov	r1, r3
 8010c56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c58:	f7fe fe18 	bl	800f88c <WriteStr>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++){
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010c62:	e091      	b.n	8010d88 <Save_Svg+0x3e0>
      temp = ((((Sampl[2+i])-2048)*Ak)>>12)+100;
 8010c64:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010c68:	3302      	adds	r3, #2
 8010c6a:	4a2a      	ldr	r2, [pc, #168]	; (8010d14 <Save_Svg+0x36c>)
 8010c6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010c70:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8010c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c76:	fb02 f303 	mul.w	r3, r2, r3
 8010c7a:	131b      	asrs	r3, r3, #12
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	3364      	adds	r3, #100	; 0x64
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(temp > 0){
 8010c84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	dd45      	ble.n	8010d18 <Save_Svg+0x370>
      if(temp > 200)  track[0] = 199;
 8010c8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010c90:	2bc8      	cmp	r3, #200	; 0xc8
 8010c92:	dd02      	ble.n	8010c9a <Save_Svg+0x2f2>
 8010c94:	23c7      	movs	r3, #199	; 0xc7
 8010c96:	813b      	strh	r3, [r7, #8]
 8010c98:	e040      	b.n	8010d1c <Save_Svg+0x374>
      else            track[0] = temp;
 8010c9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c9c:	813b      	strh	r3, [r7, #8]
 8010c9e:	e03d      	b.n	8010d1c <Save_Svg+0x374>
 8010ca0:	0800022c 	.word	0x0800022c
 8010ca4:	2000057c 	.word	0x2000057c
 8010ca8:	2000687e 	.word	0x2000687e
 8010cac:	2000285a 	.word	0x2000285a
 8010cb0:	20002842 	.word	0x20002842
 8010cb4:	20000560 	.word	0x20000560
 8010cb8:	20000790 	.word	0x20000790
 8010cbc:	2000078c 	.word	0x2000078c
 8010cc0:	2000078e 	.word	0x2000078e
 8010cc4:	20000008 	.word	0x20000008
 8010cc8:	200017d0 	.word	0x200017d0
 8010ccc:	0800024c 	.word	0x0800024c
 8010cd0:	0800027c 	.word	0x0800027c
 8010cd4:	080002e8 	.word	0x080002e8
 8010cd8:	20000298 	.word	0x20000298
 8010cdc:	08002270 	.word	0x08002270
 8010ce0:	080002f8 	.word	0x080002f8
 8010ce4:	08000384 	.word	0x08000384
 8010ce8:	080003b0 	.word	0x080003b0
 8010cec:	080003c0 	.word	0x080003c0
 8010cf0:	080003e8 	.word	0x080003e8
 8010cf4:	080003f0 	.word	0x080003f0
 8010cf8:	080003f8 	.word	0x080003f8
 8010cfc:	08000404 	.word	0x08000404
 8010d00:	08000424 	.word	0x08000424
 8010d04:	08000428 	.word	0x08000428
 8010d08:	08000430 	.word	0x08000430
 8010d0c:	0800044c 	.word	0x0800044c
 8010d10:	08000458 	.word	0x08000458
 8010d14:	20002868 	.word	0x20002868
    } else            track[0] = 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	813b      	strh	r3, [r7, #8]
    track[0] =  200- track[0];
 8010d1c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	b21b      	sxth	r3, r3
 8010d2a:	813b      	strh	r3, [r7, #8]
    if(i==0)str = "M";
 8010d2c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d102      	bne.n	8010d3a <Save_Svg+0x392>
 8010d34:	4b3b      	ldr	r3, [pc, #236]	; (8010e24 <Save_Svg+0x47c>)
 8010d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d38:	e001      	b.n	8010d3e <Save_Svg+0x396>
    else    str = " L";
 8010d3a:	4b3b      	ldr	r3, [pc, #236]	; (8010e28 <Save_Svg+0x480>)
 8010d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010d3e:	f107 0314 	add.w	r3, r7, #20
 8010d42:	4619      	mov	r1, r3
 8010d44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d46:	f7fe fda1 	bl	800f88c <WriteStr>
    WriteVar(i, pCluster);
 8010d4a:	f107 0214 	add.w	r2, r7, #20
 8010d4e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d52:	4611      	mov	r1, r2
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fe fcf1 	bl	800f73c <WriteVar>
    str = ",";
 8010d5a:	4b34      	ldr	r3, [pc, #208]	; (8010e2c <Save_Svg+0x484>)
 8010d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    WriteStr(str, pCluster);
 8010d5e:	f107 0314 	add.w	r3, r7, #20
 8010d62:	4619      	mov	r1, r3
 8010d64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d66:	f7fe fd91 	bl	800f88c <WriteStr>
    WriteVar(track[0], pCluster);
 8010d6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010d6e:	f107 0214 	add.w	r2, r7, #20
 8010d72:	4611      	mov	r1, r2
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe fce1 	bl	800f73c <WriteVar>
  for (i=0; i<=DEPTH[List[SMPL_DPTH].Val]; i++){
 8010d7a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	3301      	adds	r3, #1
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010d88:	4b29      	ldr	r3, [pc, #164]	; (8010e30 <Save_Svg+0x488>)
 8010d8a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010d8e:	461a      	mov	r2, r3
 8010d90:	4b28      	ldr	r3, [pc, #160]	; (8010e34 <Save_Svg+0x48c>)
 8010d92:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010d96:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	f77f af62 	ble.w	8010c64 <Save_Svg+0x2bc>
  }
  str = "\"/>\n";
 8010da0:	4b25      	ldr	r3, [pc, #148]	; (8010e38 <Save_Svg+0x490>)
 8010da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010da4:	f107 0314 	add.w	r3, r7, #20
 8010da8:	4619      	mov	r1, r3
 8010daa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dac:	f7fe fd6e 	bl	800f88c <WriteStr>

  //�Ҷ˵�λ��ʱ������
  str = "<text font-family=\"Arial\" x=\"638\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"end\" id=\"CH1s\">CH1: ";
 8010db0:	4b22      	ldr	r3, [pc, #136]	; (8010e3c <Save_Svg+0x494>)
 8010db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010db4:	f107 0314 	add.w	r3, r7, #20
 8010db8:	4619      	mov	r1, r3
 8010dba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dbc:	f7fe fd66 	bl	800f88c <WriteStr>
  if(List[PROBEATT].Val)str = (char*)Vol_10X[List[Y_RANGES].Val];
 8010dc0:	4b1b      	ldr	r3, [pc, #108]	; (8010e30 <Save_Svg+0x488>)
 8010dc2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d007      	beq.n	8010dda <Save_Svg+0x432>
 8010dca:	4b19      	ldr	r3, [pc, #100]	; (8010e30 <Save_Svg+0x488>)
 8010dcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	4a1b      	ldr	r2, [pc, #108]	; (8010e40 <Save_Svg+0x498>)
 8010dd4:	4413      	add	r3, r2
 8010dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dd8:	e006      	b.n	8010de8 <Save_Svg+0x440>
  else                         str = (char*)Vol_Str[List[Y_RANGES].Val];
 8010dda:	4b15      	ldr	r3, [pc, #84]	; (8010e30 <Save_Svg+0x488>)
 8010ddc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	4a18      	ldr	r2, [pc, #96]	; (8010e44 <Save_Svg+0x49c>)
 8010de4:	4413      	add	r3, r2
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010de8:	f107 0314 	add.w	r3, r7, #20
 8010dec:	4619      	mov	r1, r3
 8010dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010df0:	f7fe fd4c 	bl	800f88c <WriteStr>
  str = "/div ";
 8010df4:	4b14      	ldr	r3, [pc, #80]	; (8010e48 <Save_Svg+0x4a0>)
 8010df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010df8:	f107 0314 	add.w	r3, r7, #20
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e00:	f7fe fd44 	bl	800f88c <WriteStr>
  str = "(";
 8010e04:	4b11      	ldr	r3, [pc, #68]	; (8010e4c <Save_Svg+0x4a4>)
 8010e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010e08:	f107 0314 	add.w	r3, r7, #20
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e10:	f7fe fd3c 	bl	800f88c <WriteStr>
  if(List[PROBEATT].Val)str = "X10";        //X10
 8010e14:	4b06      	ldr	r3, [pc, #24]	; (8010e30 <Save_Svg+0x488>)
 8010e16:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d01a      	beq.n	8010e54 <Save_Svg+0x4ac>
 8010e1e:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <Save_Svg+0x4a8>)
 8010e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e22:	e019      	b.n	8010e58 <Save_Svg+0x4b0>
 8010e24:	08000490 	.word	0x08000490
 8010e28:	08000494 	.word	0x08000494
 8010e2c:	08000498 	.word	0x08000498
 8010e30:	20000298 	.word	0x20000298
 8010e34:	08002270 	.word	0x08002270
 8010e38:	08000428 	.word	0x08000428
 8010e3c:	0800049c 	.word	0x0800049c
 8010e40:	080019fc 	.word	0x080019fc
 8010e44:	080019ac 	.word	0x080019ac
 8010e48:	08000504 	.word	0x08000504
 8010e4c:	0800050c 	.word	0x0800050c
 8010e50:	08000510 	.word	0x08000510
  else                         str = "X1";  //X1
 8010e54:	4bb1      	ldr	r3, [pc, #708]	; (801111c <Save_Svg+0x774>)
 8010e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010e58:	f107 0314 	add.w	r3, r7, #20
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e60:	f7fe fd14 	bl	800f88c <WriteStr>
  str = ") ";
 8010e64:	4bae      	ldr	r3, [pc, #696]	; (8011120 <Save_Svg+0x778>)
 8010e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010e68:	f107 0314 	add.w	r3, r7, #20
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e70:	f7fe fd0c 	bl	800f88c <WriteStr>
  str = (char*)TimeBase_Str[List[TIM_BASE].Val]; //Timebase
 8010e74:	4bab      	ldr	r3, [pc, #684]	; (8011124 <Save_Svg+0x77c>)
 8010e76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e7a:	00db      	lsls	r3, r3, #3
 8010e7c:	4aaa      	ldr	r2, [pc, #680]	; (8011128 <Save_Svg+0x780>)
 8010e7e:	4413      	add	r3, r2
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010e82:	f107 0314 	add.w	r3, r7, #20
 8010e86:	4619      	mov	r1, r3
 8010e88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e8a:	f7fe fcff 	bl	800f88c <WriteStr>
  str = "/div</text>\n";
 8010e8e:	4ba7      	ldr	r3, [pc, #668]	; (801112c <Save_Svg+0x784>)
 8010e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010e92:	f107 0314 	add.w	r3, r7, #20
 8010e96:	4619      	mov	r1, r3
 8010e98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010e9a:	f7fe fcf7 	bl	800f88c <WriteStr>
  str = "<text font-family=\"Arial\" x=\"2\" y=\"170\" fill=\"cyan\" font-size=\"18\" text-anchor=\"start\" id=\"CH1\"> </text>\n";
 8010e9e:	4ba4      	ldr	r3, [pc, #656]	; (8011130 <Save_Svg+0x788>)
 8010ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ea2:	f107 0314 	add.w	r3, r7, #20
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eaa:	f7fe fcef 	bl	800f88c <WriteStr>
 //===============================
  //����
  Posi1 = 199-List[V0_POSI].Val;
 8010eae:	4b9d      	ldr	r3, [pc, #628]	; (8011124 <Save_Svg+0x77c>)
 8010eb0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	f1c3 03c7 	rsb	r3, r3, #199	; 0xc7
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	863b      	strh	r3, [r7, #48]	; 0x30
  //===============================
  str = "<script type=\"text/ecmascript\"><![CDATA[\n";
 8010ebe:	4b9d      	ldr	r3, [pc, #628]	; (8011134 <Save_Svg+0x78c>)
 8010ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ec2:	f107 0314 	add.w	r3, r7, #20
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eca:	f7fe fcdf 	bl	800f88c <WriteStr>
  str = "function init(evt) { if ( window.svgDocument == null ) svgDocument = evt.target.ownerDocument; }\n";
 8010ece:	4b9a      	ldr	r3, [pc, #616]	; (8011138 <Save_Svg+0x790>)
 8010ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ed2:	f107 0314 	add.w	r3, r7, #20
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eda:	f7fe fcd7 	bl	800f88c <WriteStr>
  str = "function fmtT(val, div) {\n";
 8010ede:	4b97      	ldr	r3, [pc, #604]	; (801113c <Save_Svg+0x794>)
 8010ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ee2:	f107 0314 	add.w	r3, r7, #20
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010eea:	f7fe fccf 	bl	800f88c <WriteStr>
  str = "if (div > 10000) return Math.floor(val*div/25/1000) + \" ms\";\n";
 8010eee:	4b94      	ldr	r3, [pc, #592]	; (8011140 <Save_Svg+0x798>)
 8010ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ef2:	f107 0314 	add.w	r3, r7, #20
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010efa:	f7fe fcc7 	bl	800f88c <WriteStr>
  str = "if (div > 250) return Math.floor(val*div/25)/1000 + \" ms\";\n";
 8010efe:	4b91      	ldr	r3, [pc, #580]	; (8011144 <Save_Svg+0x79c>)
 8010f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f02:	f107 0314 	add.w	r3, r7, #20
 8010f06:	4619      	mov	r1, r3
 8010f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f0a:	f7fe fcbf 	bl	800f88c <WriteStr>
  str = "return Math.floor(val*div*1000/25)/1000 + \" us\";\n";
 8010f0e:	4b8e      	ldr	r3, [pc, #568]	; (8011148 <Save_Svg+0x7a0>)
 8010f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f12:	f107 0314 	add.w	r3, r7, #20
 8010f16:	4619      	mov	r1, r3
 8010f18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f1a:	f7fe fcb7 	bl	800f88c <WriteStr>
  str = "}\n";
 8010f1e:	4b8b      	ldr	r3, [pc, #556]	; (801114c <Save_Svg+0x7a4>)
 8010f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f22:	f107 0314 	add.w	r3, r7, #20
 8010f26:	4619      	mov	r1, r3
 8010f28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f2a:	f7fe fcaf 	bl	800f88c <WriteStr>
  str = "function fmtU(val, div, shift) { return Math.floor((shift-val)*div/25) + \" mV\"; }\n";
 8010f2e:	4b88      	ldr	r3, [pc, #544]	; (8011150 <Save_Svg+0x7a8>)
 8010f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f32:	f107 0314 	add.w	r3, r7, #20
 8010f36:	4619      	mov	r1, r3
 8010f38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f3a:	f7fe fca7 	bl	800f88c <WriteStr>
  str = "function msMove (evt)\n";
 8010f3e:	4b85      	ldr	r3, [pc, #532]	; (8011154 <Save_Svg+0x7ac>)
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f42:	f107 0314 	add.w	r3, r7, #20
 8010f46:	4619      	mov	r1, r3
 8010f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f4a:	f7fe fc9f 	bl	800f88c <WriteStr>
  str = "{\n";
 8010f4e:	4b82      	ldr	r3, [pc, #520]	; (8011158 <Save_Svg+0x7b0>)
 8010f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f52:	f107 0314 	add.w	r3, r7, #20
 8010f56:	4619      	mov	r1, r3
 8010f58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f5a:	f7fe fc97 	bl	800f88c <WriteStr>
  str = "var x = evt.pageX;\n";
 8010f5e:	4b7f      	ldr	r3, [pc, #508]	; (801115c <Save_Svg+0x7b4>)
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f62:	f107 0314 	add.w	r3, r7, #20
 8010f66:	4619      	mov	r1, r3
 8010f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f6a:	f7fe fc8f 	bl	800f88c <WriteStr>
  str = "var y = evt.clientY;\n";
 8010f6e:	4b7c      	ldr	r3, [pc, #496]	; (8011160 <Save_Svg+0x7b8>)
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	4619      	mov	r1, r3
 8010f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f7a:	f7fe fc87 	bl	800f88c <WriteStr>
  str = "if (x < 0 || y < 0 || x >= ";
 8010f7e:	4b79      	ldr	r3, [pc, #484]	; (8011164 <Save_Svg+0x7bc>)
 8010f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010f82:	f107 0314 	add.w	r3, r7, #20
 8010f86:	4619      	mov	r1, r3
 8010f88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010f8a:	f7fe fc7f 	bl	800f88c <WriteStr>
  WriteVar(DEPTH[List[SMPL_DPTH].Val], pCluster);
 8010f8e:	4b65      	ldr	r3, [pc, #404]	; (8011124 <Save_Svg+0x77c>)
 8010f90:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8010f94:	461a      	mov	r2, r3
 8010f96:	4b74      	ldr	r3, [pc, #464]	; (8011168 <Save_Svg+0x7c0>)
 8010f98:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8010f9c:	f107 0214 	add.w	r2, r7, #20
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fbca 	bl	800f73c <WriteVar>
  str = "|| y >= 200)\n";
 8010fa8:	4b70      	ldr	r3, [pc, #448]	; (801116c <Save_Svg+0x7c4>)
 8010faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fac:	f107 0314 	add.w	r3, r7, #20
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fb4:	f7fe fc6a 	bl	800f88c <WriteStr>
  str = "return;\n";
 8010fb8:	4b6d      	ldr	r3, [pc, #436]	; (8011170 <Save_Svg+0x7c8>)
 8010fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fbc:	f107 0314 	add.w	r3, r7, #20
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fc4:	f7fe fc62 	bl	800f88c <WriteStr>
  str = "var hscroll = (document.all ? document.scrollLeft : window.pageXOffset);\n";
 8010fc8:	4b6a      	ldr	r3, [pc, #424]	; (8011174 <Save_Svg+0x7cc>)
 8010fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fd4:	f7fe fc5a 	bl	800f88c <WriteStr>
  str = "var width = window.innerWidth;\n";
 8010fd8:	4b67      	ldr	r3, [pc, #412]	; (8011178 <Save_Svg+0x7d0>)
 8010fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fdc:	f107 0314 	add.w	r3, r7, #20
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010fe4:	f7fe fc52 	bl	800f88c <WriteStr>
  str = "\n";
 8010fe8:	4b64      	ldr	r3, [pc, #400]	; (801117c <Save_Svg+0x7d4>)
 8010fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010fec:	f107 0314 	add.w	r3, r7, #20
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ff4:	f7fe fc4a 	bl	800f88c <WriteStr>
  str = "svgDocument.getElementById(\"CH1\").setAttribute(\"x\", hscroll+20);\n";
 8010ff8:	4b61      	ldr	r3, [pc, #388]	; (8011180 <Save_Svg+0x7d8>)
 8010ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8010ffc:	f107 0314 	add.w	r3, r7, #20
 8011000:	4619      	mov	r1, r3
 8011002:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011004:	f7fe fc42 	bl	800f88c <WriteStr>
  str = "svgDocument.getElementById(\"CH1s\").setAttribute(\"x\", hscroll+width-20);\n";
 8011008:	4b5e      	ldr	r3, [pc, #376]	; (8011184 <Save_Svg+0x7dc>)
 801100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801100c:	f107 0314 	add.w	r3, r7, #20
 8011010:	4619      	mov	r1, r3
 8011012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011014:	f7fe fc3a 	bl	800f88c <WriteStr>
  str = "\n";
 8011018:	4b58      	ldr	r3, [pc, #352]	; (801117c <Save_Svg+0x7d4>)
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801101c:	f107 0314 	add.w	r3, r7, #20
 8011020:	4619      	mov	r1, r3
 8011022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011024:	f7fe fc32 	bl	800f88c <WriteStr>
  //==============================
  str = "svgDocument.getElementById(\"CH1\").firstChild.data = \"CH1: \"+fmtU(y, ";
 8011028:	4b57      	ldr	r3, [pc, #348]	; (8011188 <Save_Svg+0x7e0>)
 801102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 801102c:	f107 0314 	add.w	r3, r7, #20
 8011030:	4619      	mov	r1, r3
 8011032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011034:	f7fe fc2a 	bl	800f88c <WriteStr>
  if(List[PROBEATT].Val)str = (char*)VScale_Str_10X[List[Y_RANGES].Val];
 8011038:	4b3a      	ldr	r3, [pc, #232]	; (8011124 <Save_Svg+0x77c>)
 801103a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00b      	beq.n	801105a <Save_Svg+0x6b2>
 8011042:	4b38      	ldr	r3, [pc, #224]	; (8011124 <Save_Svg+0x77c>)
 8011044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011048:	461a      	mov	r2, r3
 801104a:	4613      	mov	r3, r2
 801104c:	005b      	lsls	r3, r3, #1
 801104e:	4413      	add	r3, r2
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	4a4e      	ldr	r2, [pc, #312]	; (801118c <Save_Svg+0x7e4>)
 8011054:	4413      	add	r3, r2
 8011056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011058:	e00a      	b.n	8011070 <Save_Svg+0x6c8>
  else str = (char*)VScale_Str[List[Y_RANGES].Val];
 801105a:	4b32      	ldr	r3, [pc, #200]	; (8011124 <Save_Svg+0x77c>)
 801105c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011060:	461a      	mov	r2, r3
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	4a49      	ldr	r2, [pc, #292]	; (8011190 <Save_Svg+0x7e8>)
 801106c:	4413      	add	r3, r2
 801106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011070:	f107 0314 	add.w	r3, r7, #20
 8011074:	4619      	mov	r1, r3
 8011076:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011078:	f7fe fc08 	bl	800f88c <WriteStr>
  str = ", ";
 801107c:	4b45      	ldr	r3, [pc, #276]	; (8011194 <Save_Svg+0x7ec>)
 801107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 8011080:	f107 0314 	add.w	r3, r7, #20
 8011084:	4619      	mov	r1, r3
 8011086:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011088:	f7fe fc00 	bl	800f88c <WriteStr>
  WriteVar((short)Posi1, pCluster);
 801108c:	f107 0214 	add.w	r2, r7, #20
 8011090:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011094:	4611      	mov	r1, r2
 8011096:	4618      	mov	r0, r3
 8011098:	f7fe fb50 	bl	800f73c <WriteVar>
  str = ") + \" \" + fmtT(x, ";
 801109c:	4b3e      	ldr	r3, [pc, #248]	; (8011198 <Save_Svg+0x7f0>)
 801109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110a0:	f107 0314 	add.w	r3, r7, #20
 80110a4:	4619      	mov	r1, r3
 80110a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110a8:	f7fe fbf0 	bl	800f88c <WriteStr>
  str = (char*)TScale_Str[List[TIM_BASE].Val]; //Timebase
 80110ac:	4b1d      	ldr	r3, [pc, #116]	; (8011124 <Save_Svg+0x77c>)
 80110ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4a39      	ldr	r2, [pc, #228]	; (801119c <Save_Svg+0x7f4>)
 80110b6:	4413      	add	r3, r2
 80110b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110ba:	f107 0314 	add.w	r3, r7, #20
 80110be:	4619      	mov	r1, r3
 80110c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110c2:	f7fe fbe3 	bl	800f88c <WriteStr>
  str = ");\n";
 80110c6:	4b36      	ldr	r3, [pc, #216]	; (80111a0 <Save_Svg+0x7f8>)
 80110c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110ca:	f107 0314 	add.w	r3, r7, #20
 80110ce:	4619      	mov	r1, r3
 80110d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110d2:	f7fe fbdb 	bl	800f88c <WriteStr>

  //==============================
  str = "}\n";
 80110d6:	4b1d      	ldr	r3, [pc, #116]	; (801114c <Save_Svg+0x7a4>)
 80110d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110da:	f107 0314 	add.w	r3, r7, #20
 80110de:	4619      	mov	r1, r3
 80110e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110e2:	f7fe fbd3 	bl	800f88c <WriteStr>
  str = "]]></script>\n";
 80110e6:	4b2f      	ldr	r3, [pc, #188]	; (80111a4 <Save_Svg+0x7fc>)
 80110e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110ea:	f107 0314 	add.w	r3, r7, #20
 80110ee:	4619      	mov	r1, r3
 80110f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110f2:	f7fe fbcb 	bl	800f88c <WriteStr>
  str = "</svg>\n";
 80110f6:	4b2c      	ldr	r3, [pc, #176]	; (80111a8 <Save_Svg+0x800>)
 80110f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  WriteStr(str, pCluster);
 80110fa:	f107 0314 	add.w	r3, r7, #20
 80110fe:	4619      	mov	r1, r3
 8011100:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011102:	f7fe fbc3 	bl	800f88c <WriteStr>
  if(ProgFileSec(F_Buff, pCluster)!= OK) return FILE_RW_ERR; // д������
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	4619      	mov	r1, r3
 801110c:	4827      	ldr	r0, [pc, #156]	; (80111ac <Save_Svg+0x804>)
 801110e:	f7fe f8e5 	bl	800f2dc <ProgFileSec>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d04b      	beq.n	80111b0 <Save_Svg+0x808>
 8011118:	2303      	movs	r3, #3
 801111a:	e07b      	b.n	8011214 <Save_Svg+0x86c>
 801111c:	08000514 	.word	0x08000514
 8011120:	08000518 	.word	0x08000518
 8011124:	20000298 	.word	0x20000298
 8011128:	200001d0 	.word	0x200001d0
 801112c:	0800051c 	.word	0x0800051c
 8011130:	0800052c 	.word	0x0800052c
 8011134:	08000598 	.word	0x08000598
 8011138:	080005c4 	.word	0x080005c4
 801113c:	08000628 	.word	0x08000628
 8011140:	08000644 	.word	0x08000644
 8011144:	08000684 	.word	0x08000684
 8011148:	080006c0 	.word	0x080006c0
 801114c:	080006f4 	.word	0x080006f4
 8011150:	080006f8 	.word	0x080006f8
 8011154:	0800074c 	.word	0x0800074c
 8011158:	08000764 	.word	0x08000764
 801115c:	08000768 	.word	0x08000768
 8011160:	0800077c 	.word	0x0800077c
 8011164:	08000794 	.word	0x08000794
 8011168:	08002270 	.word	0x08002270
 801116c:	080007b0 	.word	0x080007b0
 8011170:	080007c0 	.word	0x080007c0
 8011174:	080007cc 	.word	0x080007cc
 8011178:	08000818 	.word	0x08000818
 801117c:	08000838 	.word	0x08000838
 8011180:	0800083c 	.word	0x0800083c
 8011184:	08000880 	.word	0x08000880
 8011188:	080008cc 	.word	0x080008cc
 801118c:	08001a88 	.word	0x08001a88
 8011190:	08001a4c 	.word	0x08001a4c
 8011194:	08000914 	.word	0x08000914
 8011198:	08000918 	.word	0x08000918
 801119c:	08001ac4 	.word	0x08001ac4
 80111a0:	0800092c 	.word	0x0800092c
 80111a4:	08000930 	.word	0x08000930
 80111a8:	08000940 	.word	0x08000940
 80111ac:	200017d0 	.word	0x200017d0
  PrintClk(264,2,(l++ >>1)& 3);                               // ����ָʾ
 80111b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111b2:	1c5a      	adds	r2, r3, #1
 80111b4:	637a      	str	r2, [r7, #52]	; 0x34
 80111b6:	105b      	asrs	r3, r3, #1
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	f003 0303 	and.w	r3, r3, #3
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	461a      	mov	r2, r3
 80111c2:	2102      	movs	r1, #2
 80111c4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80111c8:	f7fe fa42 	bl	800f650 <PrintClk>

  if(CloseFile(F_Buff, Svg_Cnt, pCluster, pDirAddr)!= OK)
 80111cc:	4b13      	ldr	r3, [pc, #76]	; (801121c <Save_Svg+0x874>)
 80111ce:	6819      	ldr	r1, [r3, #0]
 80111d0:	f107 0310 	add.w	r3, r7, #16
 80111d4:	f107 0214 	add.w	r2, r7, #20
 80111d8:	4811      	ldr	r0, [pc, #68]	; (8011220 <Save_Svg+0x878>)
 80111da:	f7fe f8f3 	bl	800f3c4 <CloseFile>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <Save_Svg+0x840>
    return DISK_RW_ERR;
 80111e4:	2304      	movs	r3, #4
 80111e6:	e015      	b.n	8011214 <Save_Svg+0x86c>
  if(List[SAVE_SVG].Val<99)List[SAVE_SVG].Val++;
 80111e8:	4b0e      	ldr	r3, [pc, #56]	; (8011224 <Save_Svg+0x87c>)
 80111ea:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80111ee:	2b62      	cmp	r3, #98	; 0x62
 80111f0:	dc09      	bgt.n	8011206 <Save_Svg+0x85e>
 80111f2:	4b0c      	ldr	r3, [pc, #48]	; (8011224 <Save_Svg+0x87c>)
 80111f4:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	3301      	adds	r3, #1
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	b21a      	sxth	r2, r3
 8011200:	4b08      	ldr	r3, [pc, #32]	; (8011224 <Save_Svg+0x87c>)
 8011202:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
  //__USB_Port(ENABLE);
  memset(Data,0,310);
 8011206:	f44f 729b 	mov.w	r2, #310	; 0x136
 801120a:	2100      	movs	r1, #0
 801120c:	4806      	ldr	r0, [pc, #24]	; (8011228 <Save_Svg+0x880>)
 801120e:	f011 fdb7 	bl	8022d80 <memset>
  return OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3748      	adds	r7, #72	; 0x48
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	20000790 	.word	0x20000790
 8011220:	200017d0 	.word	0x200017d0
 8011224:	20000298 	.word	0x20000298
 8011228:	20000008 	.word	0x20000008

0801122c <Read_CalFlag>:
unsigned long err;

FLASH_EraseInitTypeDef Flash_Erase ={0, 1, 1, 1, 2};

 void Read_CalFlag(void)
 {
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
	  unsigned short* ptr;
	  ptr=(unsigned short*)Kpg_Address;
 8011232:	4b10      	ldr	r3, [pc, #64]	; (8011274 <Read_CalFlag+0x48>)
 8011234:	607b      	str	r3, [r7, #4]
	  if(*ptr++!=0xaa55)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	1c9a      	adds	r2, r3, #2
 801123a:	607a      	str	r2, [r7, #4]
 801123c:	881b      	ldrh	r3, [r3, #0]
 801123e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011242:	4293      	cmp	r3, r2
 8011244:	d10e      	bne.n	8011264 <Read_CalFlag+0x38>
		  return;
	  if(*ptr++!=0x0400)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	1c9a      	adds	r2, r3, #2
 801124a:	607a      	str	r2, [r7, #4]
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011252:	d109      	bne.n	8011268 <Read_CalFlag+0x3c>
		  return;
	  Cal_Flag = *ptr++;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	1c9a      	adds	r2, r3, #2
 8011258:	607a      	str	r2, [r7, #4]
 801125a:	881b      	ldrh	r3, [r3, #0]
 801125c:	b2da      	uxtb	r2, r3
 801125e:	4b06      	ldr	r3, [pc, #24]	; (8011278 <Read_CalFlag+0x4c>)
 8011260:	701a      	strb	r2, [r3, #0]
	  return;
 8011262:	e002      	b.n	801126a <Read_CalFlag+0x3e>
		  return;
 8011264:	bf00      	nop
 8011266:	e000      	b.n	801126a <Read_CalFlag+0x3e>
		  return;
 8011268:	bf00      	nop
 }
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr
 8011274:	08004000 	.word	0x08004000
 8011278:	200001b4 	.word	0x200001b4

0801127c <Save_Parameter>:

 /*******************************************************************************
  Save_Parameter:                          Return: 0= Success
 *******************************************************************************/
 char Save_Parameter(void)
 {
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 2;
 8011282:	4b45      	ldr	r3, [pc, #276]	; (8011398 <Save_Parameter+0x11c>)
 8011284:	2202      	movs	r2, #2
 8011286:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 8011288:	f008 f818 	bl	80192bc <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 801128c:	4943      	ldr	r1, [pc, #268]	; (801139c <Save_Parameter+0x120>)
 801128e:	4842      	ldr	r0, [pc, #264]	; (8011398 <Save_Parameter+0x11c>)
 8011290:	f008 f986 	bl	80195a0 <HAL_FLASHEx_Erase>
 8011294:	4603      	mov	r3, r0
 8011296:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 8011298:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d173      	bne.n	8011388 <Save_Parameter+0x10c>
   {
     ptr=F_Buff;
 80112a0:	4b3f      	ldr	r3, [pc, #252]	; (80113a0 <Save_Parameter+0x124>)
 80112a2:	603b      	str	r3, [r7, #0]
     *ptr++=0x0400;                              //Ver:4.00
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	1c9a      	adds	r2, r3, #2
 80112a8:	603a      	str	r2, [r7, #0]
 80112aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80112ae:	801a      	strh	r2, [r3, #0]
     *ptr++=Current;
 80112b0:	4b3c      	ldr	r3, [pc, #240]	; (80113a4 <Save_Parameter+0x128>)
 80112b2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	1c9a      	adds	r2, r3, #2
 80112ba:	603a      	str	r2, [r7, #0]
 80112bc:	b28a      	uxth	r2, r1
 80112be:	801a      	strh	r2, [r3, #0]
     *ptr++=Status;
 80112c0:	4b39      	ldr	r3, [pc, #228]	; (80113a8 <Save_Parameter+0x12c>)
 80112c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	1c9a      	adds	r2, r3, #2
 80112ca:	603a      	str	r2, [r7, #0]
 80112cc:	b28a      	uxth	r2, r1
 80112ce:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80112d0:	2300      	movs	r3, #0
 80112d2:	80fb      	strh	r3, [r7, #6]
 80112d4:	e011      	b.n	80112fa <Save_Parameter+0x7e>
    	 *ptr++=List[i].Val;
 80112d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112da:	4a34      	ldr	r2, [pc, #208]	; (80113ac <Save_Parameter+0x130>)
 80112dc:	00db      	lsls	r3, r3, #3
 80112de:	4413      	add	r3, r2
 80112e0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	1c9a      	adds	r2, r3, #2
 80112e8:	603a      	str	r2, [r7, #0]
 80112ea:	b28a      	uxth	r2, r1
 80112ec:	801a      	strh	r2, [r3, #0]
     for(i=0;i<42;i++)
 80112ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	3301      	adds	r3, #1
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	80fb      	strh	r3, [r7, #6]
 80112fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112fe:	2b29      	cmp	r3, #41	; 0x29
 8011300:	dde9      	ble.n	80112d6 <Save_Parameter+0x5a>
     for(i=0;i<8;i++)
 8011302:	2300      	movs	r3, #0
 8011304:	80fb      	strh	r3, [r7, #6]
 8011306:	e00f      	b.n	8011328 <Save_Parameter+0xac>
    	 *ptr++=MenuNow[i];
 8011308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801130c:	4a28      	ldr	r2, [pc, #160]	; (80113b0 <Save_Parameter+0x134>)
 801130e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	1c9a      	adds	r2, r3, #2
 8011316:	603a      	str	r2, [r7, #0]
 8011318:	b28a      	uxth	r2, r1
 801131a:	801a      	strh	r2, [r3, #0]
     for(i=0;i<8;i++)
 801131c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011320:	b29b      	uxth	r3, r3
 8011322:	3301      	adds	r3, #1
 8011324:	b29b      	uxth	r3, r3
 8011326:	80fb      	strh	r3, [r7, #6]
 8011328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801132c:	2b07      	cmp	r3, #7
 801132e:	ddeb      	ble.n	8011308 <Save_Parameter+0x8c>
     *ptr++=0xaa55;
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	1c9a      	adds	r2, r3, #2
 8011334:	603a      	str	r2, [r7, #0]
 8011336:	f64a 2255 	movw	r2, #43605	; 0xaa55
 801133a:	801a      	strh	r2, [r3, #0]
     ptr=F_Buff;
 801133c:	4b18      	ldr	r3, [pc, #96]	; (80113a0 <Save_Parameter+0x124>)
 801133e:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011340:	2300      	movs	r3, #0
 8011342:	80fb      	strh	r3, [r7, #6]
 8011344:	e01a      	b.n	801137c <Save_Parameter+0x100>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page_Address+i, *ptr++);
 8011346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801134a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801134e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8011352:	4619      	mov	r1, r3
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	1c9a      	adds	r2, r3, #2
 8011358:	603a      	str	r2, [r7, #0]
 801135a:	881b      	ldrh	r3, [r3, #0]
 801135c:	b29a      	uxth	r2, r3
 801135e:	f04f 0300 	mov.w	r3, #0
 8011362:	2001      	movs	r0, #1
 8011364:	f007 ff56 	bl	8019214 <HAL_FLASH_Program>
 8011368:	4603      	mov	r3, r0
 801136a:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 801136c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d108      	bne.n	8011386 <Save_Parameter+0x10a>
     for(i=0; i<256; i+=2)
 8011374:	88fb      	ldrh	r3, [r7, #6]
 8011376:	3302      	adds	r3, #2
 8011378:	b29b      	uxth	r3, r3
 801137a:	80fb      	strh	r3, [r7, #6]
 801137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011380:	2bff      	cmp	r3, #255	; 0xff
 8011382:	dde0      	ble.n	8011346 <Save_Parameter+0xca>
 8011384:	e000      	b.n	8011388 <Save_Parameter+0x10c>
    	   break;
 8011386:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011388:	f007 ffba 	bl	8019300 <HAL_FLASH_Lock>

   return j;
 801138c:	88bb      	ldrh	r3, [r7, #4]
 801138e:	b2db      	uxtb	r3, r3
 }
 8011390:	4618      	mov	r0, r3
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	200001b8 	.word	0x200001b8
 801139c:	20002810 	.word	0x20002810
 80113a0:	200017d0 	.word	0x200017d0
 80113a4:	2000079a 	.word	0x2000079a
 80113a8:	2000079c 	.word	0x2000079c
 80113ac:	20000298 	.word	0x20000298
 80113b0:	20000538 	.word	0x20000538

080113b4 <Read_Parameter>:
 /*******************************************************************************
 Read_Parameter:
 *******************************************************************************/
 void Read_Parameter(void)
 {
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)(Page_Address+55*2); //94*2-40
 80113ba:	4b3f      	ldr	r3, [pc, #252]	; (80114b8 <Read_Parameter+0x104>)
 80113bc:	603b      	str	r3, [r7, #0]
   TIM_BASE_Val=List[TIM_BASE].Val;
 80113be:	4b3f      	ldr	r3, [pc, #252]	; (80114bc <Read_Parameter+0x108>)
 80113c0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80113c4:	4b3e      	ldr	r3, [pc, #248]	; (80114c0 <Read_Parameter+0x10c>)
 80113c6:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80113c8:	4b3c      	ldr	r3, [pc, #240]	; (80114bc <Read_Parameter+0x108>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	879a      	strh	r2, [r3, #60]	; 0x3c
   if(*ptr!=0xaa55)
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	881b      	ldrh	r3, [r3, #0]
 80113d2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d166      	bne.n	80114a8 <Read_Parameter+0xf4>
	   return ;
   ptr=(unsigned short*)Page_Address;
 80113da:	4b3a      	ldr	r3, [pc, #232]	; (80114c4 <Read_Parameter+0x110>)
 80113dc:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0x0400)
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	1c9a      	adds	r2, r3, #2
 80113e2:	603a      	str	r2, [r7, #0]
 80113e4:	881b      	ldrh	r3, [r3, #0]
 80113e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113ea:	d15f      	bne.n	80114ac <Read_Parameter+0xf8>
	   return ;
   Current=*ptr++;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	1c9a      	adds	r2, r3, #2
 80113f0:	603a      	str	r2, [r7, #0]
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	b21a      	sxth	r2, r3
 80113f6:	4b34      	ldr	r3, [pc, #208]	; (80114c8 <Read_Parameter+0x114>)
 80113f8:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 80113fa:	4b33      	ldr	r3, [pc, #204]	; (80114c8 <Read_Parameter+0x114>)
 80113fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011400:	461a      	mov	r2, r3
 8011402:	4b32      	ldr	r3, [pc, #200]	; (80114cc <Read_Parameter+0x118>)
 8011404:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011408:	4a2c      	ldr	r2, [pc, #176]	; (80114bc <Read_Parameter+0x108>)
 801140a:	00db      	lsls	r3, r3, #3
 801140c:	4413      	add	r3, r2
 801140e:	799b      	ldrb	r3, [r3, #6]
 8011410:	4a2d      	ldr	r2, [pc, #180]	; (80114c8 <Read_Parameter+0x114>)
 8011412:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011416:	4611      	mov	r1, r2
 8011418:	4a2c      	ldr	r2, [pc, #176]	; (80114cc <Read_Parameter+0x118>)
 801141a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801141e:	4610      	mov	r0, r2
 8011420:	f043 0320 	orr.w	r3, r3, #32
 8011424:	b2d9      	uxtb	r1, r3
 8011426:	4a25      	ldr	r2, [pc, #148]	; (80114bc <Read_Parameter+0x108>)
 8011428:	00c3      	lsls	r3, r0, #3
 801142a:	4413      	add	r3, r2
 801142c:	460a      	mov	r2, r1
 801142e:	719a      	strb	r2, [r3, #6]
   ptr++;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	3302      	adds	r3, #2
 8011434:	603b      	str	r3, [r7, #0]
   for(i=0;i<42;i++)
 8011436:	2300      	movs	r3, #0
 8011438:	80fb      	strh	r3, [r7, #6]
 801143a:	e011      	b.n	8011460 <Read_Parameter+0xac>
	   List[i].Val=*ptr++;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	1c9a      	adds	r2, r3, #2
 8011440:	603a      	str	r2, [r7, #0]
 8011442:	881a      	ldrh	r2, [r3, #0]
 8011444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011448:	b211      	sxth	r1, r2
 801144a:	4a1c      	ldr	r2, [pc, #112]	; (80114bc <Read_Parameter+0x108>)
 801144c:	00db      	lsls	r3, r3, #3
 801144e:	4413      	add	r3, r2
 8011450:	460a      	mov	r2, r1
 8011452:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 8011454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011458:	b29b      	uxth	r3, r3
 801145a:	3301      	adds	r3, #1
 801145c:	b29b      	uxth	r3, r3
 801145e:	80fb      	strh	r3, [r7, #6]
 8011460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011464:	2b29      	cmp	r3, #41	; 0x29
 8011466:	dde9      	ble.n	801143c <Read_Parameter+0x88>
   for(i=0;i<8;i++)
 8011468:	2300      	movs	r3, #0
 801146a:	80fb      	strh	r3, [r7, #6]
 801146c:	e00f      	b.n	801148e <Read_Parameter+0xda>
	   MenuNow[i]=*ptr++;
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	1c9a      	adds	r2, r3, #2
 8011472:	603a      	str	r2, [r7, #0]
 8011474:	881a      	ldrh	r2, [r3, #0]
 8011476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801147a:	b211      	sxth	r1, r2
 801147c:	4a13      	ldr	r2, [pc, #76]	; (80114cc <Read_Parameter+0x118>)
 801147e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 8011482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011486:	b29b      	uxth	r3, r3
 8011488:	3301      	adds	r3, #1
 801148a:	b29b      	uxth	r3, r3
 801148c:	80fb      	strh	r3, [r7, #6]
 801148e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011492:	2b07      	cmp	r3, #7
 8011494:	ddeb      	ble.n	801146e <Read_Parameter+0xba>
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011496:	4b09      	ldr	r3, [pc, #36]	; (80114bc <Read_Parameter+0x108>)
 8011498:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801149c:	4b08      	ldr	r3, [pc, #32]	; (80114c0 <Read_Parameter+0x10c>)
 801149e:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80114a0:	4b06      	ldr	r3, [pc, #24]	; (80114bc <Read_Parameter+0x108>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	879a      	strh	r2, [r3, #60]	; 0x3c

   return ;
 80114a6:	e002      	b.n	80114ae <Read_Parameter+0xfa>
	   return ;
 80114a8:	bf00      	nop
 80114aa:	e000      	b.n	80114ae <Read_Parameter+0xfa>
	   return ;
 80114ac:	bf00      	nop
 }
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	0800806e 	.word	0x0800806e
 80114bc:	20000298 	.word	0x20000298
 80114c0:	2000280c 	.word	0x2000280c
 80114c4:	08008000 	.word	0x08008000
 80114c8:	2000079a 	.word	0x2000079a
 80114cc:	20000538 	.word	0x20000538

080114d0 <Save_Kpg>:
 /*******************************************************************************
  Save_Kpg:                       Return: 0= Success
 *******************************************************************************/
 char Save_Kpg(void)
 {
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
   short i, j;
   unsigned short* ptr;

   Flash_Erase.Sector = 1;
 80114d6:	4b34      	ldr	r3, [pc, #208]	; (80115a8 <Save_Kpg+0xd8>)
 80114d8:	2201      	movs	r2, #1
 80114da:	609a      	str	r2, [r3, #8]

   HAL_FLASH_Unlock();
 80114dc:	f007 feee 	bl	80192bc <HAL_FLASH_Unlock>
   j=HAL_FLASHEx_Erase( &Flash_Erase, &err);
 80114e0:	4932      	ldr	r1, [pc, #200]	; (80115ac <Save_Kpg+0xdc>)
 80114e2:	4831      	ldr	r0, [pc, #196]	; (80115a8 <Save_Kpg+0xd8>)
 80114e4:	f008 f85c 	bl	80195a0 <HAL_FLASHEx_Erase>
 80114e8:	4603      	mov	r3, r0
 80114ea:	80bb      	strh	r3, [r7, #4]
   if(j== HAL_OK)
 80114ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d151      	bne.n	8011598 <Save_Kpg+0xc8>
   {
     ptr=F_Buff;
 80114f4:	4b2e      	ldr	r3, [pc, #184]	; (80115b0 <Save_Kpg+0xe0>)
 80114f6:	603b      	str	r3, [r7, #0]
     *ptr++=0xaa55;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	1c9a      	adds	r2, r3, #2
 80114fc:	603a      	str	r2, [r7, #0]
 80114fe:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8011502:	801a      	strh	r2, [r3, #0]
     *ptr++=0x0400;                              //Ver:3.00
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	1c9a      	adds	r2, r3, #2
 8011508:	603a      	str	r2, [r7, #0]
 801150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801150e:	801a      	strh	r2, [r3, #0]
     *ptr++=Cal_Flag;
 8011510:	4b28      	ldr	r3, [pc, #160]	; (80115b4 <Save_Kpg+0xe4>)
 8011512:	7819      	ldrb	r1, [r3, #0]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	1c9a      	adds	r2, r3, #2
 8011518:	603a      	str	r2, [r7, #0]
 801151a:	b28a      	uxth	r2, r1
 801151c:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 801151e:	2300      	movs	r3, #0
 8011520:	80fb      	strh	r3, [r7, #6]
 8011522:	e00f      	b.n	8011544 <Save_Kpg+0x74>
    	 *ptr++=Kpg[i];
 8011524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011528:	4a23      	ldr	r2, [pc, #140]	; (80115b8 <Save_Kpg+0xe8>)
 801152a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	1c9a      	adds	r2, r3, #2
 8011532:	603a      	str	r2, [r7, #0]
 8011534:	b28a      	uxth	r2, r1
 8011536:	801a      	strh	r2, [r3, #0]
     for(i=0;i<3;i++)
 8011538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801153c:	b29b      	uxth	r3, r3
 801153e:	3301      	adds	r3, #1
 8011540:	b29b      	uxth	r3, r3
 8011542:	80fb      	strh	r3, [r7, #6]
 8011544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011548:	2b02      	cmp	r3, #2
 801154a:	ddeb      	ble.n	8011524 <Save_Kpg+0x54>
     ptr=F_Buff;
 801154c:	4b18      	ldr	r3, [pc, #96]	; (80115b0 <Save_Kpg+0xe0>)
 801154e:	603b      	str	r3, [r7, #0]
     for(i=0; i<256; i+=2)
 8011550:	2300      	movs	r3, #0
 8011552:	80fb      	strh	r3, [r7, #6]
 8011554:	e01a      	b.n	801158c <Save_Kpg+0xbc>
     {                      //128 SHORT
       j= HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Kpg_Address+i, *ptr++);
 8011556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801155a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801155e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011562:	4619      	mov	r1, r3
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	1c9a      	adds	r2, r3, #2
 8011568:	603a      	str	r2, [r7, #0]
 801156a:	881b      	ldrh	r3, [r3, #0]
 801156c:	b29a      	uxth	r2, r3
 801156e:	f04f 0300 	mov.w	r3, #0
 8011572:	2001      	movs	r0, #1
 8011574:	f007 fe4e 	bl	8019214 <HAL_FLASH_Program>
 8011578:	4603      	mov	r3, r0
 801157a:	80bb      	strh	r3, [r7, #4]
       if(j!= HAL_OK)
 801157c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d108      	bne.n	8011596 <Save_Kpg+0xc6>
     for(i=0; i<256; i+=2)
 8011584:	88fb      	ldrh	r3, [r7, #6]
 8011586:	3302      	adds	r3, #2
 8011588:	b29b      	uxth	r3, r3
 801158a:	80fb      	strh	r3, [r7, #6]
 801158c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011590:	2bff      	cmp	r3, #255	; 0xff
 8011592:	dde0      	ble.n	8011556 <Save_Kpg+0x86>
 8011594:	e000      	b.n	8011598 <Save_Kpg+0xc8>
    	   break;
 8011596:	bf00      	nop
     }
   }
   HAL_FLASH_Lock();
 8011598:	f007 feb2 	bl	8019300 <HAL_FLASH_Lock>
   return j;
 801159c:	88bb      	ldrh	r3, [r7, #4]
 801159e:	b2db      	uxtb	r3, r3
 }
 80115a0:	4618      	mov	r0, r3
 80115a2:	3708      	adds	r7, #8
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	200001b8 	.word	0x200001b8
 80115ac:	20002810 	.word	0x20002810
 80115b0:	200017d0 	.word	0x200017d0
 80115b4:	200001b4 	.word	0x200001b4
 80115b8:	2000056c 	.word	0x2000056c

080115bc <Read_Kpg>:
 /*******************************************************************************
 Read_Kpg:
 *******************************************************************************/
 void Read_Kpg(void)
 {
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
   short i;
   unsigned short* ptr;
   ptr=(unsigned short*)Kpg_Address;
 80115c2:	4b1c      	ldr	r3, [pc, #112]	; (8011634 <Read_Kpg+0x78>)
 80115c4:	603b      	str	r3, [r7, #0]
   if(*ptr++!=0xaa55)
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	1c9a      	adds	r2, r3, #2
 80115ca:	603a      	str	r2, [r7, #0]
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d125      	bne.n	8011622 <Read_Kpg+0x66>
	   return ;
   if(*ptr++!=0x0400)
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	1c9a      	adds	r2, r3, #2
 80115da:	603a      	str	r2, [r7, #0]
 80115dc:	881b      	ldrh	r3, [r3, #0]
 80115de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115e2:	d120      	bne.n	8011626 <Read_Kpg+0x6a>
	   return ;
   Cal_Flag = *ptr++;
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	1c9a      	adds	r2, r3, #2
 80115e8:	603a      	str	r2, [r7, #0]
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b2da      	uxtb	r2, r3
 80115ee:	4b12      	ldr	r3, [pc, #72]	; (8011638 <Read_Kpg+0x7c>)
 80115f0:	701a      	strb	r2, [r3, #0]
   for(i=0;i< 3;i++)
 80115f2:	2300      	movs	r3, #0
 80115f4:	80fb      	strh	r3, [r7, #6]
 80115f6:	e00f      	b.n	8011618 <Read_Kpg+0x5c>
       Kpg[i] = *ptr++;  //CH_A,CH_B
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	1c9a      	adds	r2, r3, #2
 80115fc:	603a      	str	r2, [r7, #0]
 80115fe:	881a      	ldrh	r2, [r3, #0]
 8011600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011604:	b211      	sxth	r1, r2
 8011606:	4a0d      	ldr	r2, [pc, #52]	; (801163c <Read_Kpg+0x80>)
 8011608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i< 3;i++)
 801160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011610:	b29b      	uxth	r3, r3
 8011612:	3301      	adds	r3, #1
 8011614:	b29b      	uxth	r3, r3
 8011616:	80fb      	strh	r3, [r7, #6]
 8011618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801161c:	2b02      	cmp	r3, #2
 801161e:	ddeb      	ble.n	80115f8 <Read_Kpg+0x3c>
   return ;
 8011620:	e002      	b.n	8011628 <Read_Kpg+0x6c>
	   return ;
 8011622:	bf00      	nop
 8011624:	e000      	b.n	8011628 <Read_Kpg+0x6c>
	   return ;
 8011626:	bf00      	nop
 }
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	08004000 	.word	0x08004000
 8011638:	200001b4 	.word	0x200001b4
 801163c:	2000056c 	.word	0x2000056c

08011640 <Restore>:

 void Restore(void)
 {
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
   short i;
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011646:	4b2d      	ldr	r3, [pc, #180]	; (80116fc <Restore+0xbc>)
 8011648:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 801164c:	4b2c      	ldr	r3, [pc, #176]	; (8011700 <Restore+0xc0>)
 801164e:	801a      	strh	r2, [r3, #0]
   Current=0;
 8011650:	4b2c      	ldr	r3, [pc, #176]	; (8011704 <Restore+0xc4>)
 8011652:	2200      	movs	r2, #0
 8011654:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011656:	4b2b      	ldr	r3, [pc, #172]	; (8011704 <Restore+0xc4>)
 8011658:	f9b3 3000 	ldrsh.w	r3, [r3]
 801165c:	461a      	mov	r2, r3
 801165e:	4b2a      	ldr	r3, [pc, #168]	; (8011708 <Restore+0xc8>)
 8011660:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011664:	4a25      	ldr	r2, [pc, #148]	; (80116fc <Restore+0xbc>)
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	4413      	add	r3, r2
 801166a:	799b      	ldrb	r3, [r3, #6]
 801166c:	4a25      	ldr	r2, [pc, #148]	; (8011704 <Restore+0xc4>)
 801166e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011672:	4611      	mov	r1, r2
 8011674:	4a24      	ldr	r2, [pc, #144]	; (8011708 <Restore+0xc8>)
 8011676:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801167a:	4610      	mov	r0, r2
 801167c:	f043 0320 	orr.w	r3, r3, #32
 8011680:	b2d9      	uxtb	r1, r3
 8011682:	4a1e      	ldr	r2, [pc, #120]	; (80116fc <Restore+0xbc>)
 8011684:	00c3      	lsls	r3, r0, #3
 8011686:	4413      	add	r3, r2
 8011688:	460a      	mov	r2, r1
 801168a:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++)
 801168c:	2300      	movs	r3, #0
 801168e:	80fb      	strh	r3, [r7, #6]
 8011690:	e013      	b.n	80116ba <Restore+0x7a>
	   List[i].Val= List_c[i].Val;
 8011692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801169a:	491c      	ldr	r1, [pc, #112]	; (801170c <Restore+0xcc>)
 801169c:	00db      	lsls	r3, r3, #3
 801169e:	440b      	add	r3, r1
 80116a0:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80116a4:	4915      	ldr	r1, [pc, #84]	; (80116fc <Restore+0xbc>)
 80116a6:	00d3      	lsls	r3, r2, #3
 80116a8:	440b      	add	r3, r1
 80116aa:	4602      	mov	r2, r0
 80116ac:	809a      	strh	r2, [r3, #4]
   for(i=0;i<42;i++)
 80116ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	3301      	adds	r3, #1
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	80fb      	strh	r3, [r7, #6]
 80116ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116be:	2b29      	cmp	r3, #41	; 0x29
 80116c0:	dde7      	ble.n	8011692 <Restore+0x52>
   for(i=0;i<8;i++)
 80116c2:	2300      	movs	r3, #0
 80116c4:	80fb      	strh	r3, [r7, #6]
 80116c6:	e00f      	b.n	80116e8 <Restore+0xa8>
	   MenuNow[i]= MenuNow_C[i];
 80116c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80116cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116d0:	490f      	ldr	r1, [pc, #60]	; (8011710 <Restore+0xd0>)
 80116d2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80116d6:	4a0c      	ldr	r2, [pc, #48]	; (8011708 <Restore+0xc8>)
 80116d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for(i=0;i<8;i++)
 80116dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	3301      	adds	r3, #1
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	80fb      	strh	r3, [r7, #6]
 80116e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116ec:	2b07      	cmp	r3, #7
 80116ee:	ddeb      	ble.n	80116c8 <Restore+0x88>
   Update_Title();
 80116f0:	f000 fdec 	bl	80122cc <Update_Title>
}
 80116f4:	bf00      	nop
 80116f6:	3708      	adds	r7, #8
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	20000298 	.word	0x20000298
 8011700:	2000280c 	.word	0x2000280c
 8011704:	2000079a 	.word	0x2000079a
 8011708:	20000538 	.word	0x20000538
 801170c:	200003e8 	.word	0x200003e8
 8011710:	08001ef8 	.word	0x08001ef8

08011714 <Restore_CalPar>:

 void Restore_CalPar(void)
 {
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
   short i = 0;
 801171a:	2300      	movs	r3, #0
 801171c:	80fb      	strh	r3, [r7, #6]
   List[SMPL_DPTH].Flg |= UPD;
 801171e:	4b47      	ldr	r3, [pc, #284]	; (801183c <Restore_CalPar+0x128>)
 8011720:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011724:	f043 0320 	orr.w	r3, r3, #32
 8011728:	b2da      	uxtb	r2, r3
 801172a:	4b44      	ldr	r3, [pc, #272]	; (801183c <Restore_CalPar+0x128>)
 801172c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
   TIM_BASE_Val=List[TIM_BASE].Val;
 8011730:	4b42      	ldr	r3, [pc, #264]	; (801183c <Restore_CalPar+0x128>)
 8011732:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8011736:	4b42      	ldr	r3, [pc, #264]	; (8011840 <Restore_CalPar+0x12c>)
 8011738:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 801173a:	4b40      	ldr	r3, [pc, #256]	; (801183c <Restore_CalPar+0x128>)
 801173c:	2200      	movs	r2, #0
 801173e:	879a      	strh	r2, [r3, #60]	; 0x3c
   Current=0;
 8011740:	4b40      	ldr	r3, [pc, #256]	; (8011844 <Restore_CalPar+0x130>)
 8011742:	2200      	movs	r2, #0
 8011744:	801a      	strh	r2, [r3, #0]
   List[MenuNow[Current]].Flg |= UPD;
 8011746:	4b3f      	ldr	r3, [pc, #252]	; (8011844 <Restore_CalPar+0x130>)
 8011748:	f9b3 3000 	ldrsh.w	r3, [r3]
 801174c:	461a      	mov	r2, r3
 801174e:	4b3e      	ldr	r3, [pc, #248]	; (8011848 <Restore_CalPar+0x134>)
 8011750:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8011754:	4a39      	ldr	r2, [pc, #228]	; (801183c <Restore_CalPar+0x128>)
 8011756:	00db      	lsls	r3, r3, #3
 8011758:	4413      	add	r3, r2
 801175a:	799b      	ldrb	r3, [r3, #6]
 801175c:	4a39      	ldr	r2, [pc, #228]	; (8011844 <Restore_CalPar+0x130>)
 801175e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011762:	4611      	mov	r1, r2
 8011764:	4a38      	ldr	r2, [pc, #224]	; (8011848 <Restore_CalPar+0x134>)
 8011766:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 801176a:	4610      	mov	r0, r2
 801176c:	f043 0320 	orr.w	r3, r3, #32
 8011770:	b2d9      	uxtb	r1, r3
 8011772:	4a32      	ldr	r2, [pc, #200]	; (801183c <Restore_CalPar+0x128>)
 8011774:	00c3      	lsls	r3, r0, #3
 8011776:	4413      	add	r3, r2
 8011778:	460a      	mov	r2, r1
 801177a:	719a      	strb	r2, [r3, #6]
   for(i=0;i<42;i++) List[i].Val= List_c[i].Val;
 801177c:	2300      	movs	r3, #0
 801177e:	80fb      	strh	r3, [r7, #6]
 8011780:	e013      	b.n	80117aa <Restore_CalPar+0x96>
 8011782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011786:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801178a:	4930      	ldr	r1, [pc, #192]	; (801184c <Restore_CalPar+0x138>)
 801178c:	00db      	lsls	r3, r3, #3
 801178e:	440b      	add	r3, r1
 8011790:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8011794:	4929      	ldr	r1, [pc, #164]	; (801183c <Restore_CalPar+0x128>)
 8011796:	00d3      	lsls	r3, r2, #3
 8011798:	440b      	add	r3, r1
 801179a:	4602      	mov	r2, r0
 801179c:	809a      	strh	r2, [r3, #4]
 801179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	3301      	adds	r3, #1
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	80fb      	strh	r3, [r7, #6]
 80117aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117ae:	2b29      	cmp	r3, #41	; 0x29
 80117b0:	dde7      	ble.n	8011782 <Restore_CalPar+0x6e>
   for(i=0;i<8;i++)  MenuNow[i]= MenuNow_C[i];
 80117b2:	2300      	movs	r3, #0
 80117b4:	80fb      	strh	r3, [r7, #6]
 80117b6:	e00f      	b.n	80117d8 <Restore_CalPar+0xc4>
 80117b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80117bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117c0:	4923      	ldr	r1, [pc, #140]	; (8011850 <Restore_CalPar+0x13c>)
 80117c2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80117c6:	4a20      	ldr	r2, [pc, #128]	; (8011848 <Restore_CalPar+0x134>)
 80117c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80117cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	3301      	adds	r3, #1
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	80fb      	strh	r3, [r7, #6]
 80117d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117dc:	2b07      	cmp	r3, #7
 80117de:	ddeb      	ble.n	80117b8 <Restore_CalPar+0xa4>
   TIM_BASE_Val=List[TIM_BASE].Val;
 80117e0:	4b16      	ldr	r3, [pc, #88]	; (801183c <Restore_CalPar+0x128>)
 80117e2:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80117e6:	4b16      	ldr	r3, [pc, #88]	; (8011840 <Restore_CalPar+0x12c>)
 80117e8:	801a      	strh	r2, [r3, #0]
   List[TIM_BASE].Val=0;
 80117ea:	4b14      	ldr	r3, [pc, #80]	; (801183c <Restore_CalPar+0x128>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	879a      	strh	r2, [r3, #60]	; 0x3c
   for(i=Y_RANGES; i<=STANDBY; i++){
 80117f0:	2300      	movs	r3, #0
 80117f2:	80fb      	strh	r3, [r7, #6]
 80117f4:	e015      	b.n	8011822 <Restore_CalPar+0x10e>
   List[i].Flg |= UPD;
 80117f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80117fa:	4a10      	ldr	r2, [pc, #64]	; (801183c <Restore_CalPar+0x128>)
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	4413      	add	r3, r2
 8011800:	799a      	ldrb	r2, [r3, #6]
 8011802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011806:	f042 0220 	orr.w	r2, r2, #32
 801180a:	b2d1      	uxtb	r1, r2
 801180c:	4a0b      	ldr	r2, [pc, #44]	; (801183c <Restore_CalPar+0x128>)
 801180e:	00db      	lsls	r3, r3, #3
 8011810:	4413      	add	r3, r2
 8011812:	460a      	mov	r2, r1
 8011814:	719a      	strb	r2, [r3, #6]
   for(i=Y_RANGES; i<=STANDBY; i++){
 8011816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801181a:	b29b      	uxth	r3, r3
 801181c:	3301      	adds	r3, #1
 801181e:	b29b      	uxth	r3, r3
 8011820:	80fb      	strh	r3, [r7, #6]
 8011822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011826:	2b29      	cmp	r3, #41	; 0x29
 8011828:	dde5      	ble.n	80117f6 <Restore_CalPar+0xe2>
   }
   Update_Title();
 801182a:	f000 fd4f 	bl	80122cc <Update_Title>
   Close_Pop();
 801182e:	f7fc ff0d 	bl	800e64c <Close_Pop>
 }
 8011832:	bf00      	nop
 8011834:	3708      	adds	r7, #8
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	20000298 	.word	0x20000298
 8011840:	2000280c 	.word	0x2000280c
 8011844:	2000079a 	.word	0x2000079a
 8011848:	20000538 	.word	0x20000538
 801184c:	200003e8 	.word	0x200003e8
 8011850:	08001ef8 	.word	0x08001ef8

08011854 <u8ToDec3>:

/*******************************************************************************
 u8ToDec3: Change Byte to 3 decimal number string
*******************************************************************************/
void u8ToDec3(char *p, char n)
{
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/100;
 8011860:	78fb      	ldrb	r3, [r7, #3]
 8011862:	4a1e      	ldr	r2, [pc, #120]	; (80118dc <u8ToDec3+0x88>)
 8011864:	fba2 2303 	umull	r2, r3, r2, r3
 8011868:	095b      	lsrs	r3, r3, #5
 801186a:	b2da      	uxtb	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	1c59      	adds	r1, r3, #1
 8011870:	6079      	str	r1, [r7, #4]
 8011872:	3230      	adds	r2, #48	; 0x30
 8011874:	b2d2      	uxtb	r2, r2
 8011876:	701a      	strb	r2, [r3, #0]
    n %= 100;
 8011878:	78fb      	ldrb	r3, [r7, #3]
 801187a:	4a18      	ldr	r2, [pc, #96]	; (80118dc <u8ToDec3+0x88>)
 801187c:	fba2 1203 	umull	r1, r2, r2, r3
 8011880:	0952      	lsrs	r2, r2, #5
 8011882:	2164      	movs	r1, #100	; 0x64
 8011884:	fb01 f202 	mul.w	r2, r1, r2
 8011888:	1a9b      	subs	r3, r3, r2
 801188a:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n/10;
 801188c:	78fb      	ldrb	r3, [r7, #3]
 801188e:	4a14      	ldr	r2, [pc, #80]	; (80118e0 <u8ToDec3+0x8c>)
 8011890:	fba2 2303 	umull	r2, r3, r2, r3
 8011894:	08db      	lsrs	r3, r3, #3
 8011896:	b2da      	uxtb	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	1c59      	adds	r1, r3, #1
 801189c:	6079      	str	r1, [r7, #4]
 801189e:	3230      	adds	r2, #48	; 0x30
 80118a0:	b2d2      	uxtb	r2, r2
 80118a2:	701a      	strb	r2, [r3, #0]
    n %= 10;
 80118a4:	78fa      	ldrb	r2, [r7, #3]
 80118a6:	4b0e      	ldr	r3, [pc, #56]	; (80118e0 <u8ToDec3+0x8c>)
 80118a8:	fba3 1302 	umull	r1, r3, r3, r2
 80118ac:	08d9      	lsrs	r1, r3, #3
 80118ae:	460b      	mov	r3, r1
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	440b      	add	r3, r1
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	70fb      	strb	r3, [r7, #3]
    *p++ = '0'+n;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	78fa      	ldrb	r2, [r7, #3]
 80118c2:	3230      	adds	r2, #48	; 0x30
 80118c4:	b2d2      	uxtb	r2, r2
 80118c6:	701a      	strb	r2, [r3, #0]
    *p = 0;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	701a      	strb	r2, [r3, #0]
}
 80118ce:	bf00      	nop
 80118d0:	370c      	adds	r7, #12
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	51eb851f 	.word	0x51eb851f
 80118e0:	cccccccd 	.word	0xcccccccd

080118e4 <memset16>:

// 16 bit memset

void memset16(unsigned short* ptr, unsigned short value, short len)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	460b      	mov	r3, r1
 80118ee:	807b      	strh	r3, [r7, #2]
 80118f0:	4613      	mov	r3, r2
 80118f2:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 80118f4:	e00a      	b.n	801190c <memset16+0x28>
	{
		*ptr++ = value;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	1c9a      	adds	r2, r3, #2
 80118fa:	607a      	str	r2, [r7, #4]
 80118fc:	887a      	ldrh	r2, [r7, #2]
 80118fe:	801a      	strh	r2, [r3, #0]
		len--;
 8011900:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011904:	b29b      	uxth	r3, r3
 8011906:	3b01      	subs	r3, #1
 8011908:	b29b      	uxth	r3, r3
 801190a:	803b      	strh	r3, [r7, #0]
	while(len!=0)
 801190c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d1f0      	bne.n	80118f6 <memset16+0x12>
	}
}
 8011914:	bf00      	nop
 8011916:	bf00      	nop
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
	...

08011924 <Value2Str>:

/*******************************************************************************
 Value2Str: 32λ��תeλ��Ч���ַ��� + �����ַ������ṹΪUnit[][6]��+  ģʽ
*******************************************************************************/
void Value2Str(char *p, long n, const char *pUnit, char e, char Mode)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b088      	sub	sp, #32
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	70fb      	strb	r3, [r7, #3]
  short i = 0;
 8011932:	2300      	movs	r3, #0
 8011934:	83fb      	strh	r3, [r7, #30]
  long m = n, c = 5;
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	61bb      	str	r3, [r7, #24]
 801193a:	2305      	movs	r3, #5
 801193c:	617b      	str	r3, [r7, #20]

  if(Mode == SIGN)
 801193e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011942:	2b00      	cmp	r3, #0
 8011944:	d129      	bne.n	801199a <Value2Str+0x76>
  {
    if(n == 0) *p++ = ' ';
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d104      	bne.n	8011956 <Value2Str+0x32>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	1c5a      	adds	r2, r3, #1
 8011950:	60fa      	str	r2, [r7, #12]
 8011952:	2220      	movs	r2, #32
 8011954:	701a      	strb	r2, [r3, #0]
    if(n >  0) *p++ = '+';
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	dd04      	ble.n	8011966 <Value2Str+0x42>
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	1c5a      	adds	r2, r3, #1
 8011960:	60fa      	str	r2, [r7, #12]
 8011962:	222b      	movs	r2, #43	; 0x2b
 8011964:	701a      	strb	r2, [r3, #0]
    if(n <  0){*p++ = '-'; n = -n;}
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	2b00      	cmp	r3, #0
 801196a:	da16      	bge.n	801199a <Value2Str+0x76>
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	1c5a      	adds	r2, r3, #1
 8011970:	60fa      	str	r2, [r7, #12]
 8011972:	222d      	movs	r2, #45	; 0x2d
 8011974:	701a      	strb	r2, [r3, #0]
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	425b      	negs	r3, r3
 801197a:	60bb      	str	r3, [r7, #8]
  }
  while(m >= 10){m /= 10; i++;} // ���� n ����Чλ�� i
 801197c:	e00d      	b.n	801199a <Value2Str+0x76>
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	4a64      	ldr	r2, [pc, #400]	; (8011b14 <Value2Str+0x1f0>)
 8011982:	fb82 1203 	smull	r1, r2, r2, r3
 8011986:	1092      	asrs	r2, r2, #2
 8011988:	17db      	asrs	r3, r3, #31
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	61bb      	str	r3, [r7, #24]
 801198e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011992:	b29b      	uxth	r3, r3
 8011994:	3301      	adds	r3, #1
 8011996:	b29b      	uxth	r3, r3
 8011998:	83fb      	strh	r3, [r7, #30]
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	2b09      	cmp	r3, #9
 801199e:	dcee      	bgt.n	801197e <Value2Str+0x5a>
  if((i%3 == 2)&&(e == 2)) e++;
 80119a0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80119a4:	4b5c      	ldr	r3, [pc, #368]	; (8011b18 <Value2Str+0x1f4>)
 80119a6:	fb83 3102 	smull	r3, r1, r3, r2
 80119aa:	17d3      	asrs	r3, r2, #31
 80119ac:	1ac9      	subs	r1, r1, r3
 80119ae:	460b      	mov	r3, r1
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	440b      	add	r3, r1
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	b21b      	sxth	r3, r3
 80119b8:	2b02      	cmp	r3, #2
 80119ba:	d105      	bne.n	80119c8 <Value2Str+0xa4>
 80119bc:	78fb      	ldrb	r3, [r7, #3]
 80119be:	2b02      	cmp	r3, #2
 80119c0:	d102      	bne.n	80119c8 <Value2Str+0xa4>
 80119c2:	78fb      	ldrb	r3, [r7, #3]
 80119c4:	3301      	adds	r3, #1
 80119c6:	70fb      	strb	r3, [r7, #3]
  m = n; i = 0;
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	61bb      	str	r3, [r7, #24]
 80119cc:	2300      	movs	r3, #0
 80119ce:	83fb      	strh	r3, [r7, #30]
  while(m >= 10)
 80119d0:	e016      	b.n	8011a00 <Value2Str+0xdc>
  {
    m /= 10;
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	4a4f      	ldr	r2, [pc, #316]	; (8011b14 <Value2Str+0x1f0>)
 80119d6:	fb82 1203 	smull	r1, r2, r2, r3
 80119da:	1092      	asrs	r2, r2, #2
 80119dc:	17db      	asrs	r3, r3, #31
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	61bb      	str	r3, [r7, #24]
    if(++i > e) c *= 10;        // n ����Чλ�� i ����e�������������ֵ
 80119e2:	8bfb      	ldrh	r3, [r7, #30]
 80119e4:	3301      	adds	r3, #1
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	83fb      	strh	r3, [r7, #30]
 80119ea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80119ee:	78fb      	ldrb	r3, [r7, #3]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	dd05      	ble.n	8011a00 <Value2Str+0xdc>
 80119f4:	697a      	ldr	r2, [r7, #20]
 80119f6:	4613      	mov	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	4413      	add	r3, r2
 80119fc:	005b      	lsls	r3, r3, #1
 80119fe:	617b      	str	r3, [r7, #20]
  while(m >= 10)
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	2b09      	cmp	r3, #9
 8011a04:	dce5      	bgt.n	80119d2 <Value2Str+0xae>
  }
  if(i >= e) n += c;            // n ������������ֵ
 8011a06:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	db03      	blt.n	8011a18 <Value2Str+0xf4>
 8011a10:	68ba      	ldr	r2, [r7, #8]
 8011a12:	697b      	ldr	r3, [r7, #20]
 8011a14:	4413      	add	r3, r2
 8011a16:	60bb      	str	r3, [r7, #8]
  m = n; i = 0;
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	61bb      	str	r3, [r7, #24]
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	83fb      	strh	r3, [r7, #30]
  while(m >= 10){m /= 10; i++;} // ���¼��� n ����Чλ�� i
 8011a20:	e00d      	b.n	8011a3e <Value2Str+0x11a>
 8011a22:	69bb      	ldr	r3, [r7, #24]
 8011a24:	4a3b      	ldr	r2, [pc, #236]	; (8011b14 <Value2Str+0x1f0>)
 8011a26:	fb82 1203 	smull	r1, r2, r2, r3
 8011a2a:	1092      	asrs	r2, r2, #2
 8011a2c:	17db      	asrs	r3, r3, #31
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	61bb      	str	r3, [r7, #24]
 8011a32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	3301      	adds	r3, #1
 8011a3a:	b29b      	uxth	r3, r3
 8011a3c:	83fb      	strh	r3, [r7, #30]
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	2b09      	cmp	r3, #9
 8011a42:	dcee      	bgt.n	8011a22 <Value2Str+0xfe>

  m = i/3;                      // �������ٵ�λȡֵƫ����
 8011a44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a48:	4a33      	ldr	r2, [pc, #204]	; (8011b18 <Value2Str+0x1f4>)
 8011a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8011a4e:	17db      	asrs	r3, r3, #31
 8011a50:	1ad3      	subs	r3, r2, r3
 8011a52:	b21b      	sxth	r3, r3
 8011a54:	61bb      	str	r3, [r7, #24]
  while(e--)
 8011a56:	e03e      	b.n	8011ad6 <Value2Str+0x1b2>
  {
    *p++ = '0'+ n/Exp(i);
 8011a58:	8bfb      	ldrh	r3, [r7, #30]
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f000 f85d 	bl	8011b1c <Exp>
 8011a62:	4602      	mov	r2, r0
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	1c59      	adds	r1, r3, #1
 8011a70:	60f9      	str	r1, [r7, #12]
 8011a72:	3230      	adds	r2, #48	; 0x30
 8011a74:	b2d2      	uxtb	r2, r2
 8011a76:	701a      	strb	r2, [r3, #0]
    if(e &&(i%3 == 0)) *p++ = '.';
 8011a78:	78fb      	ldrb	r3, [r7, #3]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d012      	beq.n	8011aa4 <Value2Str+0x180>
 8011a7e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011a82:	4b25      	ldr	r3, [pc, #148]	; (8011b18 <Value2Str+0x1f4>)
 8011a84:	fb83 3102 	smull	r3, r1, r3, r2
 8011a88:	17d3      	asrs	r3, r2, #31
 8011a8a:	1ac9      	subs	r1, r1, r3
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	005b      	lsls	r3, r3, #1
 8011a90:	440b      	add	r3, r1
 8011a92:	1ad3      	subs	r3, r2, r3
 8011a94:	b21b      	sxth	r3, r3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d104      	bne.n	8011aa4 <Value2Str+0x180>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	1c5a      	adds	r2, r3, #1
 8011a9e:	60fa      	str	r2, [r7, #12]
 8011aa0:	222e      	movs	r2, #46	; 0x2e
 8011aa2:	701a      	strb	r2, [r3, #0]
    n = (i < 0)? 0 : n%Exp(i);
 8011aa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	db0c      	blt.n	8011ac6 <Value2Str+0x1a2>
 8011aac:	8bfb      	ldrh	r3, [r7, #30]
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f000 f833 	bl	8011b1c <Exp>
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	fb93 f1f2 	sdiv	r1, r3, r2
 8011abe:	fb02 f201 	mul.w	r2, r2, r1
 8011ac2:	1a9b      	subs	r3, r3, r2
 8011ac4:	e000      	b.n	8011ac8 <Value2Str+0x1a4>
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60bb      	str	r3, [r7, #8]
    i--;
 8011aca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	83fb      	strh	r3, [r7, #30]
  while(e--)
 8011ad6:	78fb      	ldrb	r3, [r7, #3]
 8011ad8:	1e5a      	subs	r2, r3, #1
 8011ada:	70fa      	strb	r2, [r7, #3]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d1bb      	bne.n	8011a58 <Value2Str+0x134>
  }
  pUnit += 6*m;                 //
 8011ae0:	69ba      	ldr	r2, [r7, #24]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	4413      	add	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	461a      	mov	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4413      	add	r3, r2
 8011af0:	607b      	str	r3, [r7, #4]
  do {*p++ = *pUnit;}
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	1c5a      	adds	r2, r3, #1
 8011af6:	60fa      	str	r2, [r7, #12]
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	7812      	ldrb	r2, [r2, #0]
 8011afc:	701a      	strb	r2, [r3, #0]
  while(*pUnit++);              // ���������ַ��ַ���
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	607a      	str	r2, [r7, #4]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1f3      	bne.n	8011af2 <Value2Str+0x1ce>
}
 8011b0a:	bf00      	nop
 8011b0c:	bf00      	nop
 8011b0e:	3720      	adds	r7, #32
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	66666667 	.word	0x66666667
 8011b18:	55555556 	.word	0x55555556

08011b1c <Exp>:

/*******************************************************************************
  ���� 10 �� x �η�
*******************************************************************************/
long Exp(char x)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	4603      	mov	r3, r0
 8011b24:	71fb      	strb	r3, [r7, #7]
  long m = 1;
 8011b26:	2301      	movs	r3, #1
 8011b28:	60fb      	str	r3, [r7, #12]

  while(x--)
 8011b2a:	e005      	b.n	8011b38 <Exp+0x1c>
	  m *= 10;
 8011b2c:	68fa      	ldr	r2, [r7, #12]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	4413      	add	r3, r2
 8011b34:	005b      	lsls	r3, r3, #1
 8011b36:	60fb      	str	r3, [r7, #12]
  while(x--)
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	1e5a      	subs	r2, r3, #1
 8011b3c:	71fa      	strb	r2, [r7, #7]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1f4      	bne.n	8011b2c <Exp+0x10>
  return m;
 8011b42:	68fb      	ldr	r3, [r7, #12]
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3714      	adds	r7, #20
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <Sqrt32>:

/*******************************************************************************
 Int_sqrt: unsigned int square root
*******************************************************************************/
short Sqrt32(int n)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
	int k;
  if ( n == 0 ) return 0;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d101      	bne.n	8011b62 <Sqrt32+0x12>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e019      	b.n	8011b96 <Sqrt32+0x46>
  k = 2*Sqrt32(n/4)+1;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	da00      	bge.n	8011b6a <Sqrt32+0x1a>
 8011b68:	3303      	adds	r3, #3
 8011b6a:	109b      	asrs	r3, r3, #2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7ff ffef 	bl	8011b50 <Sqrt32>
 8011b72:	4603      	mov	r3, r0
 8011b74:	005b      	lsls	r3, r3, #1
 8011b76:	3301      	adds	r3, #1
 8011b78:	60fb      	str	r3, [r7, #12]
  if ( k*k > n ) return k-1;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	fb03 f303 	mul.w	r3, r3, r3
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	da05      	bge.n	8011b92 <Sqrt32+0x42>
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	b21b      	sxth	r3, r3
 8011b90:	e001      	b.n	8011b96 <Sqrt32+0x46>
  else return k;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	b21b      	sxth	r3, r3
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
	...

08011ba0 <u16ToDec4Str>:

/*******************************************************************************
 u16ToDec4Str: �޷���16λ��������ת4λʮ�����ַ�������Ч����ǰ��ո�
*******************************************************************************/
void u16ToDec4Str(char *p, short n)
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	807b      	strh	r3, [r7, #2]
  if(n/10000){
 8011bac:	887b      	ldrh	r3, [r7, #2]
 8011bae:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8011bb2:	330f      	adds	r3, #15
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d917      	bls.n	8011bee <u16ToDec4Str+0x4e>
    *p++ = 'O';
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	1c5a      	adds	r2, r3, #1
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	224f      	movs	r2, #79	; 0x4f
 8011bc6:	701a      	strb	r2, [r3, #0]
    *p++ = 'v';
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	607a      	str	r2, [r7, #4]
 8011bce:	2276      	movs	r2, #118	; 0x76
 8011bd0:	701a      	strb	r2, [r3, #0]
    *p++ = 'e';
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	1c5a      	adds	r2, r3, #1
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	2265      	movs	r2, #101	; 0x65
 8011bda:	701a      	strb	r2, [r3, #0]
    *p++ = 'r';
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	1c5a      	adds	r2, r3, #1
 8011be0:	607a      	str	r2, [r7, #4]
 8011be2:	2272      	movs	r2, #114	; 0x72
 8011be4:	701a      	strb	r2, [r3, #0]
    *p   = 0;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2200      	movs	r2, #0
 8011bea:	701a      	strb	r2, [r3, #0]
    return;
 8011bec:	e07e      	b.n	8011cec <u16ToDec4Str+0x14c>
  }
  *p++ = '0'+n/1000;
 8011bee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bf2:	4a41      	ldr	r2, [pc, #260]	; (8011cf8 <u16ToDec4Str+0x158>)
 8011bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8011bf8:	1192      	asrs	r2, r2, #6
 8011bfa:	17db      	asrs	r3, r3, #31
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	b21b      	sxth	r3, r3
 8011c00:	b2da      	uxtb	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	1c59      	adds	r1, r3, #1
 8011c06:	6079      	str	r1, [r7, #4]
 8011c08:	3230      	adds	r2, #48	; 0x30
 8011c0a:	b2d2      	uxtb	r2, r2
 8011c0c:	701a      	strb	r2, [r3, #0]
  n %= 1000;
 8011c0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c12:	4a39      	ldr	r2, [pc, #228]	; (8011cf8 <u16ToDec4Str+0x158>)
 8011c14:	fb82 1203 	smull	r1, r2, r2, r3
 8011c18:	1191      	asrs	r1, r2, #6
 8011c1a:	17da      	asrs	r2, r3, #31
 8011c1c:	1a8a      	subs	r2, r1, r2
 8011c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011c22:	fb01 f202 	mul.w	r2, r1, r2
 8011c26:	1a9b      	subs	r3, r3, r2
 8011c28:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/100;
 8011c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c2e:	4a33      	ldr	r2, [pc, #204]	; (8011cfc <u16ToDec4Str+0x15c>)
 8011c30:	fb82 1203 	smull	r1, r2, r2, r3
 8011c34:	1152      	asrs	r2, r2, #5
 8011c36:	17db      	asrs	r3, r3, #31
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	b21b      	sxth	r3, r3
 8011c3c:	b2da      	uxtb	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	1c59      	adds	r1, r3, #1
 8011c42:	6079      	str	r1, [r7, #4]
 8011c44:	3230      	adds	r2, #48	; 0x30
 8011c46:	b2d2      	uxtb	r2, r2
 8011c48:	701a      	strb	r2, [r3, #0]
  n %= 100;
 8011c4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c4e:	4a2b      	ldr	r2, [pc, #172]	; (8011cfc <u16ToDec4Str+0x15c>)
 8011c50:	fb82 1203 	smull	r1, r2, r2, r3
 8011c54:	1151      	asrs	r1, r2, #5
 8011c56:	17da      	asrs	r2, r3, #31
 8011c58:	1a8a      	subs	r2, r1, r2
 8011c5a:	2164      	movs	r1, #100	; 0x64
 8011c5c:	fb01 f202 	mul.w	r2, r1, r2
 8011c60:	1a9b      	subs	r3, r3, r2
 8011c62:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n/10;
 8011c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011c68:	4a25      	ldr	r2, [pc, #148]	; (8011d00 <u16ToDec4Str+0x160>)
 8011c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8011c6e:	1092      	asrs	r2, r2, #2
 8011c70:	17db      	asrs	r3, r3, #31
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	b21b      	sxth	r3, r3
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	1c59      	adds	r1, r3, #1
 8011c7c:	6079      	str	r1, [r7, #4]
 8011c7e:	3230      	adds	r2, #48	; 0x30
 8011c80:	b2d2      	uxtb	r2, r2
 8011c82:	701a      	strb	r2, [r3, #0]
  n %= 10;
 8011c84:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011c88:	4b1d      	ldr	r3, [pc, #116]	; (8011d00 <u16ToDec4Str+0x160>)
 8011c8a:	fb83 1302 	smull	r1, r3, r3, r2
 8011c8e:	1099      	asrs	r1, r3, #2
 8011c90:	17d3      	asrs	r3, r2, #31
 8011c92:	1ac9      	subs	r1, r1, r3
 8011c94:	460b      	mov	r3, r1
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	440b      	add	r3, r1
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	807b      	strh	r3, [r7, #2]
  *p++ = '0'+n;
 8011ca0:	887b      	ldrh	r3, [r7, #2]
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	1c59      	adds	r1, r3, #1
 8011ca8:	6079      	str	r1, [r7, #4]
 8011caa:	3230      	adds	r2, #48	; 0x30
 8011cac:	b2d2      	uxtb	r2, r2
 8011cae:	701a      	strb	r2, [r3, #0]
  *p = 0;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	701a      	strb	r2, [r3, #0]
  if(p[-4] == '0'){
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3b04      	subs	r3, #4
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	2b30      	cmp	r3, #48	; 0x30
 8011cbe:	d115      	bne.n	8011cec <u16ToDec4Str+0x14c>
    p[-4] = ' ';
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3b04      	subs	r3, #4
 8011cc4:	2220      	movs	r2, #32
 8011cc6:	701a      	strb	r2, [r3, #0]
    if(p[-3] == '0'){
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	3b03      	subs	r3, #3
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	2b30      	cmp	r3, #48	; 0x30
 8011cd0:	d10c      	bne.n	8011cec <u16ToDec4Str+0x14c>
      p[-3] = ' ';
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	3b03      	subs	r3, #3
 8011cd6:	2220      	movs	r2, #32
 8011cd8:	701a      	strb	r2, [r3, #0]
      if(p[-2] == '0') p[-2] = ' ';
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	3b02      	subs	r3, #2
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b30      	cmp	r3, #48	; 0x30
 8011ce2:	d103      	bne.n	8011cec <u16ToDec4Str+0x14c>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3b02      	subs	r3, #2
 8011ce8:	2220      	movs	r2, #32
 8011cea:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr
 8011cf6:	bf00      	nop
 8011cf8:	10624dd3 	.word	0x10624dd3
 8011cfc:	51eb851f 	.word	0x51eb851f
 8011d00:	66666667 	.word	0x66666667

08011d04 <lcd_write_cmd_data>:
#include "Func.h"

unsigned short data[15];

void lcd_write_cmd_data( unsigned short Cmd, short Len, unsigned short *Data )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	603a      	str	r2, [r7, #0]
 8011d0e:	80fb      	strh	r3, [r7, #6]
 8011d10:	460b      	mov	r3, r1
 8011d12:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_RESET); // low for command
 8011d14:	2200      	movs	r2, #0
 8011d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011d1a:	480e      	ldr	r0, [pc, #56]	; (8011d54 <lcd_write_cmd_data+0x50>)
 8011d1c:	f007 ffea 	bl	8019cf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (unsigned char*)&Cmd, 1, 1);// timeout 1 ms
 8011d20:	1db9      	adds	r1, r7, #6
 8011d22:	2301      	movs	r3, #1
 8011d24:	2201      	movs	r2, #1
 8011d26:	480c      	ldr	r0, [pc, #48]	; (8011d58 <lcd_write_cmd_data+0x54>)
 8011d28:	f00a fb35 	bl	801c396 <HAL_SPI_Transmit>

	if(Len !=0)
 8011d2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d00b      	beq.n	8011d4c <lcd_write_cmd_data+0x48>
	{
		HAL_GPIO_WritePin( LcdRs_GPIO_Port, LcdRs_Pin, GPIO_PIN_SET);  //high for data
 8011d34:	2201      	movs	r2, #1
 8011d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011d3a:	4806      	ldr	r0, [pc, #24]	; (8011d54 <lcd_write_cmd_data+0x50>)
 8011d3c:	f007 ffda 	bl	8019cf4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, (unsigned char*)Data, Len, 1);// timeout 1 ms
 8011d40:	88ba      	ldrh	r2, [r7, #4]
 8011d42:	2301      	movs	r3, #1
 8011d44:	6839      	ldr	r1, [r7, #0]
 8011d46:	4804      	ldr	r0, [pc, #16]	; (8011d58 <lcd_write_cmd_data+0x54>)
 8011d48:	f00a fb25 	bl	801c396 <HAL_SPI_Transmit>
	}
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	40020800 	.word	0x40020800
 8011d58:	20006a18 	.word	0x20006a18

08011d5c <Init_LCD>:

// initialize the LCD
void Init_LCD(void)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011d60:	2200      	movs	r2, #0
 8011d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011d66:	4885      	ldr	r0, [pc, #532]	; (8011f7c <Init_LCD+0x220>)
 8011d68:	f007 ffc4 	bl	8019cf4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);  //display reset
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d72:	4883      	ldr	r0, [pc, #524]	; (8011f80 <Init_LCD+0x224>)
 8011d74:	f007 ffbe 	bl	8019cf4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8011d78:	2001      	movs	r0, #1
 8011d7a:	f006 facf 	bl	801831c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_RESET);
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d84:	487e      	ldr	r0, [pc, #504]	; (8011f80 <Init_LCD+0x224>)
 8011d86:	f007 ffb5 	bl	8019cf4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8011d8a:	200a      	movs	r0, #10
 8011d8c:	f006 fac6 	bl	801831c <HAL_Delay>
	HAL_GPIO_WritePin( Dres_GPIO_Port, Dres_Pin, GPIO_PIN_SET);
 8011d90:	2201      	movs	r2, #1
 8011d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011d96:	487a      	ldr	r0, [pc, #488]	; (8011f80 <Init_LCD+0x224>)
 8011d98:	f007 ffac 	bl	8019cf4 <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8011d9c:	2078      	movs	r0, #120	; 0x78
 8011d9e:	f006 fabd 	bl	801831c <HAL_Delay>

	data[0]=0;
 8011da2:	4b78      	ldr	r3, [pc, #480]	; (8011f84 <Init_LCD+0x228>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xb0, 1, data);  //set interface
 8011da8:	4a76      	ldr	r2, [pc, #472]	; (8011f84 <Init_LCD+0x228>)
 8011daa:	2101      	movs	r1, #1
 8011dac:	20b0      	movs	r0, #176	; 0xb0
 8011dae:	f7ff ffa9 	bl	8011d04 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011db2:	4a74      	ldr	r2, [pc, #464]	; (8011f84 <Init_LCD+0x228>)
 8011db4:	2100      	movs	r1, #0
 8011db6:	2011      	movs	r0, #17
 8011db8:	f7ff ffa4 	bl	8011d04 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011dbc:	2078      	movs	r0, #120	; 0x78
 8011dbe:	f006 faad 	bl	801831c <HAL_Delay>
	data[0]=0x55;
 8011dc2:	4b70      	ldr	r3, [pc, #448]	; (8011f84 <Init_LCD+0x228>)
 8011dc4:	2255      	movs	r2, #85	; 0x55
 8011dc6:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x3A, 1, data);  //set pixels to 16 bit
 8011dc8:	4a6e      	ldr	r2, [pc, #440]	; (8011f84 <Init_LCD+0x228>)
 8011dca:	2101      	movs	r1, #1
 8011dcc:	203a      	movs	r0, #58	; 0x3a
 8011dce:	f7ff ff99 	bl	8011d04 <lcd_write_cmd_data>
	data[0]=data[1]=9;
 8011dd2:	4b6c      	ldr	r3, [pc, #432]	; (8011f84 <Init_LCD+0x228>)
 8011dd4:	2209      	movs	r2, #9
 8011dd6:	805a      	strh	r2, [r3, #2]
 8011dd8:	4b6a      	ldr	r3, [pc, #424]	; (8011f84 <Init_LCD+0x228>)
 8011dda:	885a      	ldrh	r2, [r3, #2]
 8011ddc:	4b69      	ldr	r3, [pc, #420]	; (8011f84 <Init_LCD+0x228>)
 8011dde:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc0, 2, data);  //set power
 8011de0:	4a68      	ldr	r2, [pc, #416]	; (8011f84 <Init_LCD+0x228>)
 8011de2:	2102      	movs	r1, #2
 8011de4:	20c0      	movs	r0, #192	; 0xc0
 8011de6:	f7ff ff8d 	bl	8011d04 <lcd_write_cmd_data>
	data[0]= 0x41;
 8011dea:	4b66      	ldr	r3, [pc, #408]	; (8011f84 <Init_LCD+0x228>)
 8011dec:	2241      	movs	r2, #65	; 0x41
 8011dee:	801a      	strh	r2, [r3, #0]
	data[1]=0;
 8011df0:	4b64      	ldr	r3, [pc, #400]	; (8011f84 <Init_LCD+0x228>)
 8011df2:	2200      	movs	r2, #0
 8011df4:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0xc1, 2, data);  //set power
 8011df6:	4a63      	ldr	r2, [pc, #396]	; (8011f84 <Init_LCD+0x228>)
 8011df8:	2102      	movs	r1, #2
 8011dfa:	20c1      	movs	r0, #193	; 0xc1
 8011dfc:	f7ff ff82 	bl	8011d04 <lcd_write_cmd_data>
	data[0]= 0x33;
 8011e00:	4b60      	ldr	r3, [pc, #384]	; (8011f84 <Init_LCD+0x228>)
 8011e02:	2233      	movs	r2, #51	; 0x33
 8011e04:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0xc2, 1, data);  //set power
 8011e06:	4a5f      	ldr	r2, [pc, #380]	; (8011f84 <Init_LCD+0x228>)
 8011e08:	2101      	movs	r1, #1
 8011e0a:	20c2      	movs	r0, #194	; 0xc2
 8011e0c:	f7ff ff7a 	bl	8011d04 <lcd_write_cmd_data>
	data[0]=data[1]=0;
 8011e10:	4b5c      	ldr	r3, [pc, #368]	; (8011f84 <Init_LCD+0x228>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	805a      	strh	r2, [r3, #2]
 8011e16:	4b5b      	ldr	r3, [pc, #364]	; (8011f84 <Init_LCD+0x228>)
 8011e18:	885a      	ldrh	r2, [r3, #2]
 8011e1a:	4b5a      	ldr	r3, [pc, #360]	; (8011f84 <Init_LCD+0x228>)
 8011e1c:	801a      	strh	r2, [r3, #0]
	data[2]=data[3]=0;  //#3 may be 0x36
 8011e1e:	4b59      	ldr	r3, [pc, #356]	; (8011f84 <Init_LCD+0x228>)
 8011e20:	2200      	movs	r2, #0
 8011e22:	80da      	strh	r2, [r3, #6]
 8011e24:	4b57      	ldr	r3, [pc, #348]	; (8011f84 <Init_LCD+0x228>)
 8011e26:	88da      	ldrh	r2, [r3, #6]
 8011e28:	4b56      	ldr	r3, [pc, #344]	; (8011f84 <Init_LCD+0x228>)
 8011e2a:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xc5, 4, data);  //Vcom control
 8011e2c:	4a55      	ldr	r2, [pc, #340]	; (8011f84 <Init_LCD+0x228>)
 8011e2e:	2104      	movs	r1, #4
 8011e30:	20c5      	movs	r0, #197	; 0xc5
 8011e32:	f7ff ff67 	bl	8011d04 <lcd_write_cmd_data>

	data[0]=  0;
 8011e36:	4b53      	ldr	r3, [pc, #332]	; (8011f84 <Init_LCD+0x228>)
 8011e38:	2200      	movs	r2, #0
 8011e3a:	801a      	strh	r2, [r3, #0]
	lcd_write_cmd_data(0x36, 1, data);  //madctl
 8011e3c:	4a51      	ldr	r2, [pc, #324]	; (8011f84 <Init_LCD+0x228>)
 8011e3e:	2101      	movs	r1, #1
 8011e40:	2036      	movs	r0, #54	; 0x36
 8011e42:	f7ff ff5f 	bl	8011d04 <lcd_write_cmd_data>
	 Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75,
	          0x37, 0x06, 0x10, 0x03, 0x24, 0x20, 0x00,
    SPI_TRANSFER(0xE0 Positive Gamma Control, 0x00, 0x2C, 0x2C, 0x0B, 0x0C, 0x04, 0x4C, 0x64, 0x36, 0x03, 0x0E, 0x01, 0x10, 0x01, 0x00);
    SPI_TRANSFER(0xE1 Negative Gamma Control, 0x0F, 0x37, 0x37, 0x0C, 0x0F, 0x05, 0x50, 0x32, 0x36, 0x04, 0x0B, 0x00, 0x19, 0x14, 0x0F); */
	data[0]=data[14]=  0;
 8011e46:	4b4f      	ldr	r3, [pc, #316]	; (8011f84 <Init_LCD+0x228>)
 8011e48:	2200      	movs	r2, #0
 8011e4a:	839a      	strh	r2, [r3, #28]
 8011e4c:	4b4d      	ldr	r3, [pc, #308]	; (8011f84 <Init_LCD+0x228>)
 8011e4e:	8b9a      	ldrh	r2, [r3, #28]
 8011e50:	4b4c      	ldr	r3, [pc, #304]	; (8011f84 <Init_LCD+0x228>)
 8011e52:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]=   0x2C;
 8011e54:	4b4b      	ldr	r3, [pc, #300]	; (8011f84 <Init_LCD+0x228>)
 8011e56:	222c      	movs	r2, #44	; 0x2c
 8011e58:	809a      	strh	r2, [r3, #4]
 8011e5a:	4b4a      	ldr	r3, [pc, #296]	; (8011f84 <Init_LCD+0x228>)
 8011e5c:	889a      	ldrh	r2, [r3, #4]
 8011e5e:	4b49      	ldr	r3, [pc, #292]	; (8011f84 <Init_LCD+0x228>)
 8011e60:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0B;
 8011e62:	4b48      	ldr	r3, [pc, #288]	; (8011f84 <Init_LCD+0x228>)
 8011e64:	220b      	movs	r2, #11
 8011e66:	80da      	strh	r2, [r3, #6]
	data[4]=  0x0C;
 8011e68:	4b46      	ldr	r3, [pc, #280]	; (8011f84 <Init_LCD+0x228>)
 8011e6a:	220c      	movs	r2, #12
 8011e6c:	811a      	strh	r2, [r3, #8]
	data[5]=  0x04;
 8011e6e:	4b45      	ldr	r3, [pc, #276]	; (8011f84 <Init_LCD+0x228>)
 8011e70:	2204      	movs	r2, #4
 8011e72:	815a      	strh	r2, [r3, #10]
	data[6]=  0x4C;
 8011e74:	4b43      	ldr	r3, [pc, #268]	; (8011f84 <Init_LCD+0x228>)
 8011e76:	224c      	movs	r2, #76	; 0x4c
 8011e78:	819a      	strh	r2, [r3, #12]
	data[7]=  0x64;
 8011e7a:	4b42      	ldr	r3, [pc, #264]	; (8011f84 <Init_LCD+0x228>)
 8011e7c:	2264      	movs	r2, #100	; 0x64
 8011e7e:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011e80:	4b40      	ldr	r3, [pc, #256]	; (8011f84 <Init_LCD+0x228>)
 8011e82:	2236      	movs	r2, #54	; 0x36
 8011e84:	821a      	strh	r2, [r3, #16]
	data[9]=  0x03;
 8011e86:	4b3f      	ldr	r3, [pc, #252]	; (8011f84 <Init_LCD+0x228>)
 8011e88:	2203      	movs	r2, #3
 8011e8a:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0E;
 8011e8c:	4b3d      	ldr	r3, [pc, #244]	; (8011f84 <Init_LCD+0x228>)
 8011e8e:	220e      	movs	r2, #14
 8011e90:	829a      	strh	r2, [r3, #20]
	data[11]=data[13]= 0x2C;
 8011e92:	4b3c      	ldr	r3, [pc, #240]	; (8011f84 <Init_LCD+0x228>)
 8011e94:	222c      	movs	r2, #44	; 0x2c
 8011e96:	835a      	strh	r2, [r3, #26]
 8011e98:	4b3a      	ldr	r3, [pc, #232]	; (8011f84 <Init_LCD+0x228>)
 8011e9a:	8b5a      	ldrh	r2, [r3, #26]
 8011e9c:	4b39      	ldr	r3, [pc, #228]	; (8011f84 <Init_LCD+0x228>)
 8011e9e:	82da      	strh	r2, [r3, #22]
	data[12]= 0x10;
 8011ea0:	4b38      	ldr	r3, [pc, #224]	; (8011f84 <Init_LCD+0x228>)
 8011ea2:	2210      	movs	r2, #16
 8011ea4:	831a      	strh	r2, [r3, #24]
	lcd_write_cmd_data(0xe0, 15, data);  //positive gamma control
 8011ea6:	4a37      	ldr	r2, [pc, #220]	; (8011f84 <Init_LCD+0x228>)
 8011ea8:	210f      	movs	r1, #15
 8011eaa:	20e0      	movs	r0, #224	; 0xe0
 8011eac:	f7ff ff2a 	bl	8011d04 <lcd_write_cmd_data>

	data[0]=data[4]= data[14]= 0x0F;
 8011eb0:	4b34      	ldr	r3, [pc, #208]	; (8011f84 <Init_LCD+0x228>)
 8011eb2:	220f      	movs	r2, #15
 8011eb4:	839a      	strh	r2, [r3, #28]
 8011eb6:	4b33      	ldr	r3, [pc, #204]	; (8011f84 <Init_LCD+0x228>)
 8011eb8:	8b9a      	ldrh	r2, [r3, #28]
 8011eba:	4b32      	ldr	r3, [pc, #200]	; (8011f84 <Init_LCD+0x228>)
 8011ebc:	811a      	strh	r2, [r3, #8]
 8011ebe:	4b31      	ldr	r3, [pc, #196]	; (8011f84 <Init_LCD+0x228>)
 8011ec0:	891a      	ldrh	r2, [r3, #8]
 8011ec2:	4b30      	ldr	r3, [pc, #192]	; (8011f84 <Init_LCD+0x228>)
 8011ec4:	801a      	strh	r2, [r3, #0]
	data[1]=data[2]= 0x37;
 8011ec6:	4b2f      	ldr	r3, [pc, #188]	; (8011f84 <Init_LCD+0x228>)
 8011ec8:	2237      	movs	r2, #55	; 0x37
 8011eca:	809a      	strh	r2, [r3, #4]
 8011ecc:	4b2d      	ldr	r3, [pc, #180]	; (8011f84 <Init_LCD+0x228>)
 8011ece:	889a      	ldrh	r2, [r3, #4]
 8011ed0:	4b2c      	ldr	r3, [pc, #176]	; (8011f84 <Init_LCD+0x228>)
 8011ed2:	805a      	strh	r2, [r3, #2]
	data[3]=  0x0C;
 8011ed4:	4b2b      	ldr	r3, [pc, #172]	; (8011f84 <Init_LCD+0x228>)
 8011ed6:	220c      	movs	r2, #12
 8011ed8:	80da      	strh	r2, [r3, #6]
	data[5]=  0x05;
 8011eda:	4b2a      	ldr	r3, [pc, #168]	; (8011f84 <Init_LCD+0x228>)
 8011edc:	2205      	movs	r2, #5
 8011ede:	815a      	strh	r2, [r3, #10]
	data[6]=  0x50;
 8011ee0:	4b28      	ldr	r3, [pc, #160]	; (8011f84 <Init_LCD+0x228>)
 8011ee2:	2250      	movs	r2, #80	; 0x50
 8011ee4:	819a      	strh	r2, [r3, #12]
	data[7]=  0x32;
 8011ee6:	4b27      	ldr	r3, [pc, #156]	; (8011f84 <Init_LCD+0x228>)
 8011ee8:	2232      	movs	r2, #50	; 0x32
 8011eea:	81da      	strh	r2, [r3, #14]
	data[8]=  0x36;
 8011eec:	4b25      	ldr	r3, [pc, #148]	; (8011f84 <Init_LCD+0x228>)
 8011eee:	2236      	movs	r2, #54	; 0x36
 8011ef0:	821a      	strh	r2, [r3, #16]
	data[9]=  0x04;
 8011ef2:	4b24      	ldr	r3, [pc, #144]	; (8011f84 <Init_LCD+0x228>)
 8011ef4:	2204      	movs	r2, #4
 8011ef6:	825a      	strh	r2, [r3, #18]
	data[10]= 0x0B;
 8011ef8:	4b22      	ldr	r3, [pc, #136]	; (8011f84 <Init_LCD+0x228>)
 8011efa:	220b      	movs	r2, #11
 8011efc:	829a      	strh	r2, [r3, #20]
	data[11]= 0;
 8011efe:	4b21      	ldr	r3, [pc, #132]	; (8011f84 <Init_LCD+0x228>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	82da      	strh	r2, [r3, #22]
	data[12]= 0x19;
 8011f04:	4b1f      	ldr	r3, [pc, #124]	; (8011f84 <Init_LCD+0x228>)
 8011f06:	2219      	movs	r2, #25
 8011f08:	831a      	strh	r2, [r3, #24]
	data[13]= 0x14;
 8011f0a:	4b1e      	ldr	r3, [pc, #120]	; (8011f84 <Init_LCD+0x228>)
 8011f0c:	2214      	movs	r2, #20
 8011f0e:	835a      	strh	r2, [r3, #26]
	lcd_write_cmd_data(0xe1, 15, data);  //Negitive gamma control
 8011f10:	4a1c      	ldr	r2, [pc, #112]	; (8011f84 <Init_LCD+0x228>)
 8011f12:	210f      	movs	r1, #15
 8011f14:	20e1      	movs	r0, #225	; 0xe1
 8011f16:	f7ff fef5 	bl	8011d04 <lcd_write_cmd_data>

//	SPI_TRANSFER(0xB6/*Display Function Control*/, 0, /*ISC=2*/2, /*Display Height h=*/59); // Actual display height = (h+1)*8 so (59+1)*8=480
	data[0]=0;
 8011f1a:	4b1a      	ldr	r3, [pc, #104]	; (8011f84 <Init_LCD+0x228>)
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	801a      	strh	r2, [r3, #0]
	data[1]=2;
 8011f20:	4b18      	ldr	r3, [pc, #96]	; (8011f84 <Init_LCD+0x228>)
 8011f22:	2202      	movs	r2, #2
 8011f24:	805a      	strh	r2, [r3, #2]
	data[2]=59;
 8011f26:	4b17      	ldr	r3, [pc, #92]	; (8011f84 <Init_LCD+0x228>)
 8011f28:	223b      	movs	r2, #59	; 0x3b
 8011f2a:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0xb6, 3, data);  //display function control
 8011f2c:	4a15      	ldr	r2, [pc, #84]	; (8011f84 <Init_LCD+0x228>)
 8011f2e:	2103      	movs	r1, #3
 8011f30:	20b6      	movs	r0, #182	; 0xb6
 8011f32:	f7ff fee7 	bl	8011d04 <lcd_write_cmd_data>

	lcd_write_cmd_data(0x11, 0, data);  //sleep
 8011f36:	4a13      	ldr	r2, [pc, #76]	; (8011f84 <Init_LCD+0x228>)
 8011f38:	2100      	movs	r1, #0
 8011f3a:	2011      	movs	r0, #17
 8011f3c:	f7ff fee2 	bl	8011d04 <lcd_write_cmd_data>
	HAL_Delay(120);
 8011f40:	2078      	movs	r0, #120	; 0x78
 8011f42:	f006 f9eb 	bl	801831c <HAL_Delay>
	lcd_write_cmd_data(0x29, 0, data);  //display on
 8011f46:	4a0f      	ldr	r2, [pc, #60]	; (8011f84 <Init_LCD+0x228>)
 8011f48:	2100      	movs	r1, #0
 8011f4a:	2029      	movs	r0, #41	; 0x29
 8011f4c:	f7ff feda 	bl	8011d04 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x38, 0, data);  //idle off
 8011f50:	4a0c      	ldr	r2, [pc, #48]	; (8011f84 <Init_LCD+0x228>)
 8011f52:	2100      	movs	r1, #0
 8011f54:	2038      	movs	r0, #56	; 0x38
 8011f56:	f7ff fed5 	bl	8011d04 <lcd_write_cmd_data>
	lcd_write_cmd_data(0x13, 0, data);  //Normal Display Mode ON
 8011f5a:	4a0a      	ldr	r2, [pc, #40]	; (8011f84 <Init_LCD+0x228>)
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	2013      	movs	r0, #19
 8011f60:	f7ff fed0 	bl	8011d04 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8011f64:	2201      	movs	r2, #1
 8011f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011f6a:	4804      	ldr	r0, [pc, #16]	; (8011f7c <Init_LCD+0x220>)
 8011f6c:	f007 fec2 	bl	8019cf4 <HAL_GPIO_WritePin>

	LCD_ClrScrn(0);  //clear screen to black
 8011f70:	2000      	movs	r0, #0
 8011f72:	f000 f809 	bl	8011f88 <LCD_ClrScrn>
}
 8011f76:	bf00      	nop
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	40020800 	.word	0x40020800
 8011f80:	40020400 	.word	0x40020400
 8011f84:	20002814 	.word	0x20002814

08011f88 <LCD_ClrScrn>:

void LCD_ClrScrn(unsigned short Color)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	80fb      	strh	r3, [r7, #6]
short y;
unsigned short *ptr;

ptr = malloc(320*2);
 8011f92:	f44f 7020 	mov.w	r0, #640	; 0x280
 8011f96:	f010 fed5 	bl	8022d44 <malloc>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	60bb      	str	r3, [r7, #8]
HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011fa4:	483d      	ldr	r0, [pc, #244]	; (801209c <LCD_ClrScrn+0x114>)
 8011fa6:	f007 fea5 	bl	8019cf4 <HAL_GPIO_WritePin>

for(y=0; y<480; ++y )
 8011faa:	2300      	movs	r3, #0
 8011fac:	81fb      	strh	r3, [r7, #14]
 8011fae:	e03c      	b.n	801202a <LCD_ClrScrn+0xa2>
{
	data[0]=data[1]= 0;
 8011fb0:	4b3b      	ldr	r3, [pc, #236]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	805a      	strh	r2, [r3, #2]
 8011fb6:	4b3a      	ldr	r3, [pc, #232]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fb8:	885a      	ldrh	r2, [r3, #2]
 8011fba:	4b39      	ldr	r3, [pc, #228]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fbc:	801a      	strh	r2, [r3, #0]
	data[2]= 319>>8;
 8011fbe:	4b38      	ldr	r3, [pc, #224]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fc0:	2201      	movs	r2, #1
 8011fc2:	809a      	strh	r2, [r3, #4]
	data[3]= 319 & 0xFF;
 8011fc4:	4b36      	ldr	r3, [pc, #216]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fc6:	223f      	movs	r2, #63	; 0x3f
 8011fc8:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 8011fca:	4a35      	ldr	r2, [pc, #212]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fcc:	2104      	movs	r1, #4
 8011fce:	202a      	movs	r0, #42	; 0x2a
 8011fd0:	f7ff fe98 	bl	8011d04 <lcd_write_cmd_data>
	data[0]= y>>8;
 8011fd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011fd8:	121b      	asrs	r3, r3, #8
 8011fda:	b21b      	sxth	r3, r3
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	4b30      	ldr	r3, [pc, #192]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fe0:	801a      	strh	r2, [r3, #0]
	data[1]= y & 0xFF;
 8011fe2:	89fb      	ldrh	r3, [r7, #14]
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	4b2d      	ldr	r3, [pc, #180]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fea:	805a      	strh	r2, [r3, #2]
	data[2]= 479>>8;
 8011fec:	4b2c      	ldr	r3, [pc, #176]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011fee:	2201      	movs	r2, #1
 8011ff0:	809a      	strh	r2, [r3, #4]
	data[3]= 479 & 0xFF;
 8011ff2:	4b2b      	ldr	r3, [pc, #172]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011ff4:	22df      	movs	r2, #223	; 0xdf
 8011ff6:	80da      	strh	r2, [r3, #6]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 8011ff8:	4a29      	ldr	r2, [pc, #164]	; (80120a0 <LCD_ClrScrn+0x118>)
 8011ffa:	2104      	movs	r1, #4
 8011ffc:	202b      	movs	r0, #43	; 0x2b
 8011ffe:	f7ff fe81 	bl	8011d04 <lcd_write_cmd_data>

	if(ptr != NULL)
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d016      	beq.n	8012036 <LCD_ClrScrn+0xae>
	{
		memset16(ptr, Color, 320);
 8012008:	88fb      	ldrh	r3, [r7, #6]
 801200a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801200e:	4619      	mov	r1, r3
 8012010:	68b8      	ldr	r0, [r7, #8]
 8012012:	f7ff fc67 	bl	80118e4 <memset16>
		lcd_write_cmd_data(0x2C, 320, ptr);  //write out pixels
 8012016:	68ba      	ldr	r2, [r7, #8]
 8012018:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801201c:	202c      	movs	r0, #44	; 0x2c
 801201e:	f7ff fe71 	bl	8011d04 <lcd_write_cmd_data>
for(y=0; y<480; ++y )
 8012022:	89fb      	ldrh	r3, [r7, #14]
 8012024:	3301      	adds	r3, #1
 8012026:	b29b      	uxth	r3, r3
 8012028:	81fb      	strh	r3, [r7, #14]
 801202a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801202e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012032:	dbbd      	blt.n	8011fb0 <LCD_ClrScrn+0x28>
 8012034:	e000      	b.n	8012038 <LCD_ClrScrn+0xb0>
	}
	else
		break; //bail out
 8012036:	bf00      	nop
}

free(ptr);
 8012038:	68b8      	ldr	r0, [r7, #8]
 801203a:	f010 fe8b 	bl	8022d54 <free>

data[0]=data[1]= 0;
 801203e:	4b18      	ldr	r3, [pc, #96]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012040:	2200      	movs	r2, #0
 8012042:	805a      	strh	r2, [r3, #2]
 8012044:	4b16      	ldr	r3, [pc, #88]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012046:	885a      	ldrh	r2, [r3, #2]
 8012048:	4b15      	ldr	r3, [pc, #84]	; (80120a0 <LCD_ClrScrn+0x118>)
 801204a:	801a      	strh	r2, [r3, #0]
data[2]= 319>>8;
 801204c:	4b14      	ldr	r3, [pc, #80]	; (80120a0 <LCD_ClrScrn+0x118>)
 801204e:	2201      	movs	r2, #1
 8012050:	809a      	strh	r2, [r3, #4]
data[3]= 319 & 0xFF;
 8012052:	4b13      	ldr	r3, [pc, #76]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012054:	223f      	movs	r2, #63	; 0x3f
 8012056:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2A, 4, data);  //set x
 8012058:	4a11      	ldr	r2, [pc, #68]	; (80120a0 <LCD_ClrScrn+0x118>)
 801205a:	2104      	movs	r1, #4
 801205c:	202a      	movs	r0, #42	; 0x2a
 801205e:	f7ff fe51 	bl	8011d04 <lcd_write_cmd_data>
data[0]=data[1]= 0;
 8012062:	4b0f      	ldr	r3, [pc, #60]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012064:	2200      	movs	r2, #0
 8012066:	805a      	strh	r2, [r3, #2]
 8012068:	4b0d      	ldr	r3, [pc, #52]	; (80120a0 <LCD_ClrScrn+0x118>)
 801206a:	885a      	ldrh	r2, [r3, #2]
 801206c:	4b0c      	ldr	r3, [pc, #48]	; (80120a0 <LCD_ClrScrn+0x118>)
 801206e:	801a      	strh	r2, [r3, #0]
data[2]= 479>>8;
 8012070:	4b0b      	ldr	r3, [pc, #44]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012072:	2201      	movs	r2, #1
 8012074:	809a      	strh	r2, [r3, #4]
data[3]= 479 & 0xFF;
 8012076:	4b0a      	ldr	r3, [pc, #40]	; (80120a0 <LCD_ClrScrn+0x118>)
 8012078:	22df      	movs	r2, #223	; 0xdf
 801207a:	80da      	strh	r2, [r3, #6]
lcd_write_cmd_data(0x2B, 4, data);  //set y
 801207c:	4a08      	ldr	r2, [pc, #32]	; (80120a0 <LCD_ClrScrn+0x118>)
 801207e:	2104      	movs	r1, #4
 8012080:	202b      	movs	r0, #43	; 0x2b
 8012082:	f7ff fe3f 	bl	8011d04 <lcd_write_cmd_data>

HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);  //disable lcd controller
 8012086:	2201      	movs	r2, #1
 8012088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801208c:	4803      	ldr	r0, [pc, #12]	; (801209c <LCD_ClrScrn+0x114>)
 801208e:	f007 fe31 	bl	8019cf4 <HAL_GPIO_WritePin>

}
 8012092:	bf00      	nop
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	40020800 	.word	0x40020800
 80120a0:	20002814 	.word	0x20002814

080120a4 <LCD_Set_Posi>:

void LCD_Set_Posi(short Sx, short Sy)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	4603      	mov	r3, r0
 80120ac:	460a      	mov	r2, r1
 80120ae:	80fb      	strh	r3, [r7, #6]
 80120b0:	4613      	mov	r3, r2
 80120b2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 80120b4:	2200      	movs	r2, #0
 80120b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80120ba:	481f      	ldr	r0, [pc, #124]	; (8012138 <LCD_Set_Posi+0x94>)
 80120bc:	f007 fe1a 	bl	8019cf4 <HAL_GPIO_WritePin>

	data[0]= data[2]= Sx>>8;
 80120c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120c4:	121b      	asrs	r3, r3, #8
 80120c6:	b21b      	sxth	r3, r3
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	4b1c      	ldr	r3, [pc, #112]	; (801213c <LCD_Set_Posi+0x98>)
 80120cc:	809a      	strh	r2, [r3, #4]
 80120ce:	4b1b      	ldr	r3, [pc, #108]	; (801213c <LCD_Set_Posi+0x98>)
 80120d0:	889a      	ldrh	r2, [r3, #4]
 80120d2:	4b1a      	ldr	r3, [pc, #104]	; (801213c <LCD_Set_Posi+0x98>)
 80120d4:	801a      	strh	r2, [r3, #0]
	data[1]= data[3]= Sx & 0xFF;
 80120d6:	88fb      	ldrh	r3, [r7, #6]
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	b29a      	uxth	r2, r3
 80120dc:	4b17      	ldr	r3, [pc, #92]	; (801213c <LCD_Set_Posi+0x98>)
 80120de:	80da      	strh	r2, [r3, #6]
 80120e0:	4b16      	ldr	r3, [pc, #88]	; (801213c <LCD_Set_Posi+0x98>)
 80120e2:	88da      	ldrh	r2, [r3, #6]
 80120e4:	4b15      	ldr	r3, [pc, #84]	; (801213c <LCD_Set_Posi+0x98>)
 80120e6:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2A, 4, data);  //set x
 80120e8:	4a14      	ldr	r2, [pc, #80]	; (801213c <LCD_Set_Posi+0x98>)
 80120ea:	2104      	movs	r1, #4
 80120ec:	202a      	movs	r0, #42	; 0x2a
 80120ee:	f7ff fe09 	bl	8011d04 <lcd_write_cmd_data>
	data[0]= data[1]= Sy>>8;
 80120f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80120f6:	121b      	asrs	r3, r3, #8
 80120f8:	b21b      	sxth	r3, r3
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	4b0f      	ldr	r3, [pc, #60]	; (801213c <LCD_Set_Posi+0x98>)
 80120fe:	805a      	strh	r2, [r3, #2]
 8012100:	4b0e      	ldr	r3, [pc, #56]	; (801213c <LCD_Set_Posi+0x98>)
 8012102:	885a      	ldrh	r2, [r3, #2]
 8012104:	4b0d      	ldr	r3, [pc, #52]	; (801213c <LCD_Set_Posi+0x98>)
 8012106:	801a      	strh	r2, [r3, #0]
	data[2]= data[3]= Sy & 0xFF;
 8012108:	88bb      	ldrh	r3, [r7, #4]
 801210a:	b2db      	uxtb	r3, r3
 801210c:	b29a      	uxth	r2, r3
 801210e:	4b0b      	ldr	r3, [pc, #44]	; (801213c <LCD_Set_Posi+0x98>)
 8012110:	80da      	strh	r2, [r3, #6]
 8012112:	4b0a      	ldr	r3, [pc, #40]	; (801213c <LCD_Set_Posi+0x98>)
 8012114:	88da      	ldrh	r2, [r3, #6]
 8012116:	4b09      	ldr	r3, [pc, #36]	; (801213c <LCD_Set_Posi+0x98>)
 8012118:	809a      	strh	r2, [r3, #4]
	lcd_write_cmd_data(0x2B, 4, data);  //set y
 801211a:	4a08      	ldr	r2, [pc, #32]	; (801213c <LCD_Set_Posi+0x98>)
 801211c:	2104      	movs	r1, #4
 801211e:	202b      	movs	r0, #43	; 0x2b
 8012120:	f7ff fdf0 	bl	8011d04 <lcd_write_cmd_data>

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012124:	2201      	movs	r2, #1
 8012126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801212a:	4803      	ldr	r0, [pc, #12]	; (8012138 <LCD_Set_Posi+0x94>)
 801212c:	f007 fde2 	bl	8019cf4 <HAL_GPIO_WritePin>
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	40020800 	.word	0x40020800
 801213c:	20002814 	.word	0x20002814

08012140 <LCD_Set_Pixel>:

void LCD_Set_Pixel(unsigned short Color)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	4603      	mov	r3, r0
 8012148:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 801214a:	2200      	movs	r2, #0
 801214c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012150:	480d      	ldr	r0, [pc, #52]	; (8012188 <LCD_Set_Pixel+0x48>)
 8012152:	f007 fdcf 	bl	8019cf4 <HAL_GPIO_WritePin>

	data[0]= Color>>8;
 8012156:	88fb      	ldrh	r3, [r7, #6]
 8012158:	0a1b      	lsrs	r3, r3, #8
 801215a:	b29a      	uxth	r2, r3
 801215c:	4b0b      	ldr	r3, [pc, #44]	; (801218c <LCD_Set_Pixel+0x4c>)
 801215e:	801a      	strh	r2, [r3, #0]
	data[1]= Color & 0xFF;
 8012160:	88fb      	ldrh	r3, [r7, #6]
 8012162:	b2db      	uxtb	r3, r3
 8012164:	b29a      	uxth	r2, r3
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <LCD_Set_Pixel+0x4c>)
 8012168:	805a      	strh	r2, [r3, #2]
	lcd_write_cmd_data(0x2C, 2, data);  //set pixel
 801216a:	4a08      	ldr	r2, [pc, #32]	; (801218c <LCD_Set_Pixel+0x4c>)
 801216c:	2102      	movs	r1, #2
 801216e:	202c      	movs	r0, #44	; 0x2c
 8012170:	f7ff fdc8 	bl	8011d04 <lcd_write_cmd_data>
	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 8012174:	2201      	movs	r2, #1
 8012176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801217a:	4803      	ldr	r0, [pc, #12]	; (8012188 <LCD_Set_Pixel+0x48>)
 801217c:	f007 fdba 	bl	8019cf4 <HAL_GPIO_WritePin>
}
 8012180:	bf00      	nop
 8012182:	3708      	adds	r7, #8
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	40020800 	.word	0x40020800
 801218c:	20002814 	.word	0x20002814

08012190 <LCD_Get_Pixel>:

unsigned short LCD_Get_Pixel(void)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
	short ret;
	unsigned short fred;

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_RESET);  //enable lcd controller
 8012196:	2200      	movs	r2, #0
 8012198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801219c:	4814      	ldr	r0, [pc, #80]	; (80121f0 <LCD_Get_Pixel+0x60>)
 801219e:	f007 fda9 	bl	8019cf4 <HAL_GPIO_WritePin>
	lcd_write_cmd_data(0x2E, 0, data);  //read data
 80121a2:	4a14      	ldr	r2, [pc, #80]	; (80121f4 <LCD_Get_Pixel+0x64>)
 80121a4:	2100      	movs	r1, #0
 80121a6:	202e      	movs	r0, #46	; 0x2e
 80121a8:	f7ff fdac 	bl	8011d04 <lcd_write_cmd_data>

	ret = HAL_SPI_Receive(&hspi3, (unsigned char *)data, 2, 1);
 80121ac:	2301      	movs	r3, #1
 80121ae:	2202      	movs	r2, #2
 80121b0:	4910      	ldr	r1, [pc, #64]	; (80121f4 <LCD_Get_Pixel+0x64>)
 80121b2:	4811      	ldr	r0, [pc, #68]	; (80121f8 <LCD_Get_Pixel+0x68>)
 80121b4:	f00a fa2b 	bl	801c60e <HAL_SPI_Receive>
 80121b8:	4603      	mov	r3, r0
 80121ba:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin( LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);    //disable lcd controller
 80121bc:	2201      	movs	r2, #1
 80121be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80121c2:	480b      	ldr	r0, [pc, #44]	; (80121f0 <LCD_Get_Pixel+0x60>)
 80121c4:	f007 fd96 	bl	8019cf4 <HAL_GPIO_WritePin>

	if( ret == HAL_OK )
 80121c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10a      	bne.n	80121e6 <LCD_Get_Pixel+0x56>
		{
		fred =data[0]<<8;
 80121d0:	4b08      	ldr	r3, [pc, #32]	; (80121f4 <LCD_Get_Pixel+0x64>)
 80121d2:	881b      	ldrh	r3, [r3, #0]
 80121d4:	021b      	lsls	r3, r3, #8
 80121d6:	80bb      	strh	r3, [r7, #4]
		fred |= data[1];
 80121d8:	4b06      	ldr	r3, [pc, #24]	; (80121f4 <LCD_Get_Pixel+0x64>)
 80121da:	885a      	ldrh	r2, [r3, #2]
 80121dc:	88bb      	ldrh	r3, [r7, #4]
 80121de:	4313      	orrs	r3, r2
 80121e0:	80bb      	strh	r3, [r7, #4]
		return (fred);
 80121e2:	88bb      	ldrh	r3, [r7, #4]
 80121e4:	e000      	b.n	80121e8 <LCD_Get_Pixel+0x58>
		}
	else
		return 0;
 80121e6:	2300      	movs	r3, #0

}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	40020800 	.word	0x40020800
 80121f4:	20002814 	.word	0x20002814
 80121f8:	20006a18 	.word	0x20006a18

080121fc <Draw_4Point>:

/*******************************************************************************
Draw_4Point:
*******************************************************************************/
void Draw_4Point(short x, short y, char Str_Cnt, char High)
{
 80121fc:	b590      	push	{r4, r7, lr}
 80121fe:	b083      	sub	sp, #12
 8012200:	af00      	add	r7, sp, #0
 8012202:	4604      	mov	r4, r0
 8012204:	4608      	mov	r0, r1
 8012206:	4611      	mov	r1, r2
 8012208:	461a      	mov	r2, r3
 801220a:	4623      	mov	r3, r4
 801220c:	80fb      	strh	r3, [r7, #6]
 801220e:	4603      	mov	r3, r0
 8012210:	80bb      	strh	r3, [r7, #4]
 8012212:	460b      	mov	r3, r1
 8012214:	70fb      	strb	r3, [r7, #3]
 8012216:	4613      	mov	r3, r2
 8012218:	70bb      	strb	r3, [r7, #2]
  LCD_Set_Posi(x,y);
 801221a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801221e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012222:	4611      	mov	r1, r2
 8012224:	4618      	mov	r0, r3
 8012226:	f7ff ff3d 	bl	80120a4 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801222a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801222e:	f7ff ff87 	bl	8012140 <LCD_Set_Pixel>
  LCD_Set_Posi(x,y+High-1);
 8012232:	78bb      	ldrb	r3, [r7, #2]
 8012234:	b29a      	uxth	r2, r3
 8012236:	88bb      	ldrh	r3, [r7, #4]
 8012238:	4413      	add	r3, r2
 801223a:	b29b      	uxth	r3, r3
 801223c:	3b01      	subs	r3, #1
 801223e:	b29b      	uxth	r3, r3
 8012240:	b21a      	sxth	r2, r3
 8012242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012246:	4611      	mov	r1, r2
 8012248:	4618      	mov	r0, r3
 801224a:	f7ff ff2b 	bl	80120a4 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 801224e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012252:	f7ff ff75 	bl	8012140 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y);
 8012256:	78fb      	ldrb	r3, [r7, #3]
 8012258:	b29b      	uxth	r3, r3
 801225a:	78ba      	ldrb	r2, [r7, #2]
 801225c:	2a0a      	cmp	r2, #10
 801225e:	d901      	bls.n	8012264 <Draw_4Point+0x68>
 8012260:	2208      	movs	r2, #8
 8012262:	e000      	b.n	8012266 <Draw_4Point+0x6a>
 8012264:	2206      	movs	r2, #6
 8012266:	fb12 f303 	smulbb	r3, r2, r3
 801226a:	b29a      	uxth	r2, r3
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	4413      	add	r3, r2
 8012270:	b29b      	uxth	r3, r3
 8012272:	b21b      	sxth	r3, r3
 8012274:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012278:	4611      	mov	r1, r2
 801227a:	4618      	mov	r0, r3
 801227c:	f7ff ff12 	bl	80120a4 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 8012280:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012284:	f7ff ff5c 	bl	8012140 <LCD_Set_Pixel>
  LCD_Set_Posi(x+Str_Cnt*((High>10)? 8:6),y+High-1);
 8012288:	78fb      	ldrb	r3, [r7, #3]
 801228a:	b29b      	uxth	r3, r3
 801228c:	78ba      	ldrb	r2, [r7, #2]
 801228e:	2a0a      	cmp	r2, #10
 8012290:	d901      	bls.n	8012296 <Draw_4Point+0x9a>
 8012292:	2208      	movs	r2, #8
 8012294:	e000      	b.n	8012298 <Draw_4Point+0x9c>
 8012296:	2206      	movs	r2, #6
 8012298:	fb12 f303 	smulbb	r3, r2, r3
 801229c:	b29a      	uxth	r2, r3
 801229e:	88fb      	ldrh	r3, [r7, #6]
 80122a0:	4413      	add	r3, r2
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	b218      	sxth	r0, r3
 80122a6:	78bb      	ldrb	r3, [r7, #2]
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	88bb      	ldrh	r3, [r7, #4]
 80122ac:	4413      	add	r3, r2
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	3b01      	subs	r3, #1
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	b21b      	sxth	r3, r3
 80122b6:	4619      	mov	r1, r3
 80122b8:	f7ff fef4 	bl	80120a4 <LCD_Set_Posi>
  LCD_Set_Pixel(DAR);
 80122bc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80122c0:	f7ff ff3e 	bl	8012140 <LCD_Set_Pixel>
}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd90      	pop	{r4, r7, pc}

080122cc <Update_Title>:

/*******************************************************************************
 Update_Item:
*******************************************************************************/
void Update_Title(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
  short i;

  for(i=0; i<8; i++)
 80122d2:	2300      	movs	r3, #0
 80122d4:	80fb      	strh	r3, [r7, #6]
 80122d6:	e03b      	b.n	8012350 <Update_Title+0x84>
  {
    SetColor(GRY, TCOLOR[i]);
 80122d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122dc:	4a21      	ldr	r2, [pc, #132]	; (8012364 <Update_Title+0x98>)
 80122de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122e2:	4619      	mov	r1, r3
 80122e4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80122e8:	f7fb fc2c 	bl	800db44 <SetColor>
    DispStr8x14(T_X-2, TITLE_Y[i], (Current == i)? INV : PRN, (char*)TSTR[i]);
 80122ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122f0:	4a1d      	ldr	r2, [pc, #116]	; (8012368 <Update_Title+0x9c>)
 80122f2:	5cd3      	ldrb	r3, [r2, r3]
 80122f4:	b219      	sxth	r1, r3
 80122f6:	4b1d      	ldr	r3, [pc, #116]	; (801236c <Update_Title+0xa0>)
 80122f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012300:	429a      	cmp	r2, r3
 8012302:	bf0c      	ite	eq
 8012304:	2301      	moveq	r3, #1
 8012306:	2300      	movne	r3, #0
 8012308:	b2db      	uxtb	r3, r3
 801230a:	4618      	mov	r0, r3
 801230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	4a17      	ldr	r2, [pc, #92]	; (8012370 <Update_Title+0xa4>)
 8012314:	4413      	add	r3, r2
 8012316:	4602      	mov	r2, r0
 8012318:	f240 102f 	movw	r0, #303	; 0x12f
 801231c:	f7fb fbba 	bl	800da94 <DispStr8x14>
    if(Current == i)
 8012320:	4b12      	ldr	r3, [pc, #72]	; (801236c <Update_Title+0xa0>)
 8012322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012326:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801232a:	429a      	cmp	r2, r3
 801232c:	d10a      	bne.n	8012344 <Update_Title+0x78>
    {
        Draw_4Point(T_X-2, TITLE_Y[i], 2, Font8x14_H);
 801232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012332:	4a0d      	ldr	r2, [pc, #52]	; (8012368 <Update_Title+0x9c>)
 8012334:	5cd3      	ldrb	r3, [r2, r3]
 8012336:	b219      	sxth	r1, r3
 8012338:	230e      	movs	r3, #14
 801233a:	2202      	movs	r2, #2
 801233c:	f240 102f 	movw	r0, #303	; 0x12f
 8012340:	f7ff ff5c 	bl	80121fc <Draw_4Point>
  for(i=0; i<8; i++)
 8012344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012348:	b29b      	uxth	r3, r3
 801234a:	3301      	adds	r3, #1
 801234c:	b29b      	uxth	r3, r3
 801234e:	80fb      	strh	r3, [r7, #6]
 8012350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012354:	2b07      	cmp	r3, #7
 8012356:	ddbf      	ble.n	80122d8 <Update_Title+0xc>
    }
  }
}
 8012358:	bf00      	nop
 801235a:	bf00      	nop
 801235c:	3708      	adds	r7, #8
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	08001f08 	.word	0x08001f08
 8012368:	08001f38 	.word	0x08001f38
 801236c:	2000079a 	.word	0x2000079a
 8012370:	08001f18 	.word	0x08001f18

08012374 <Update_Blink>:

/*******************************************************************************
 Update_Blink:
*******************************************************************************/
void Update_Blink(void)
{
 8012374:	b590      	push	{r4, r7, lr}
 8012376:	b087      	sub	sp, #28
 8012378:	af02      	add	r7, sp, #8
  char* ptr;
  long Tmp;
  unsigned short i, Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 801237a:	4bbd      	ldr	r3, [pc, #756]	; (8012670 <Update_Blink+0x2fc>)
 801237c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012380:	b29a      	uxth	r2, r3
 8012382:	4bbb      	ldr	r3, [pc, #748]	; (8012670 <Update_Blink+0x2fc>)
 8012384:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012388:	b29b      	uxth	r3, r3
 801238a:	4619      	mov	r1, r3
 801238c:	0089      	lsls	r1, r1, #2
 801238e:	440b      	add	r3, r1
 8012390:	005b      	lsls	r3, r3, #1
 8012392:	b29b      	uxth	r3, r3
 8012394:	4413      	add	r3, r2
 8012396:	81fb      	strh	r3, [r7, #14]

  i = MenuNow[Current];
 8012398:	4bb6      	ldr	r3, [pc, #728]	; (8012674 <Update_Blink+0x300>)
 801239a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801239e:	461a      	mov	r2, r3
 80123a0:	4bb5      	ldr	r3, [pc, #724]	; (8012678 <Update_Blink+0x304>)
 80123a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80123a6:	81bb      	strh	r3, [r7, #12]
  ptr = (char*)(List[i].PTR +(List[i].Val)*6);
 80123a8:	89bb      	ldrh	r3, [r7, #12]
 80123aa:	4ab1      	ldr	r2, [pc, #708]	; (8012670 <Update_Blink+0x2fc>)
 80123ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80123b0:	89bb      	ldrh	r3, [r7, #12]
 80123b2:	49af      	ldr	r1, [pc, #700]	; (8012670 <Update_Blink+0x2fc>)
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	440b      	add	r3, r1
 80123b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80123bc:	4619      	mov	r1, r3
 80123be:	460b      	mov	r3, r1
 80123c0:	005b      	lsls	r3, r3, #1
 80123c2:	440b      	add	r3, r1
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	4413      	add	r3, r2
 80123c8:	60bb      	str	r3, [r7, #8]
  if(Blink == BLINK)
 80123ca:	4bac      	ldr	r3, [pc, #688]	; (801267c <Update_Blink+0x308>)
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	b2db      	uxtb	r3, r3
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	f040 86ca 	bne.w	801316a <Update_Blink+0xdf6>
  {
    Blink = 0;
 80123d6:	4ba9      	ldr	r3, [pc, #676]	; (801267c <Update_Blink+0x308>)
 80123d8:	2200      	movs	r2, #0
 80123da:	701a      	strb	r2, [r3, #0]
    List[MenuNow[ME]].Flg |= UPD; //
 80123dc:	4ba6      	ldr	r3, [pc, #664]	; (8012678 <Update_Blink+0x304>)
 80123de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80123e2:	4aa3      	ldr	r2, [pc, #652]	; (8012670 <Update_Blink+0x2fc>)
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	4413      	add	r3, r2
 80123e8:	799b      	ldrb	r3, [r3, #6]
 80123ea:	4aa3      	ldr	r2, [pc, #652]	; (8012678 <Update_Blink+0x304>)
 80123ec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80123f0:	4610      	mov	r0, r2
 80123f2:	f043 0320 	orr.w	r3, r3, #32
 80123f6:	b2d9      	uxtb	r1, r3
 80123f8:	4a9d      	ldr	r2, [pc, #628]	; (8012670 <Update_Blink+0x2fc>)
 80123fa:	00c3      	lsls	r3, r0, #3
 80123fc:	4413      	add	r3, r2
 80123fe:	460a      	mov	r2, r1
 8012400:	719a      	strb	r2, [r3, #6]
    switch(i)
 8012402:	89bb      	ldrh	r3, [r7, #12]
 8012404:	2b29      	cmp	r3, #41	; 0x29
 8012406:	f200 86aa 	bhi.w	801315e <Update_Blink+0xdea>
 801240a:	a201      	add	r2, pc, #4	; (adr r2, 8012410 <Update_Blink+0x9c>)
 801240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012410:	0801257b 	.word	0x0801257b
 8012414:	0801257b 	.word	0x0801257b
 8012418:	0801257b 	.word	0x0801257b
 801241c:	0801260f 	.word	0x0801260f
 8012420:	08012641 	.word	0x08012641
 8012424:	08012641 	.word	0x08012641
 8012428:	08012777 	.word	0x08012777
 801242c:	080127d5 	.word	0x080127d5
 8012430:	0801282d 	.word	0x0801282d
 8012434:	0801285f 	.word	0x0801285f
 8012438:	080128cb 	.word	0x080128cb
 801243c:	080128cb 	.word	0x080128cb
 8012440:	08012a2d 	.word	0x08012a2d
 8012444:	08012a87 	.word	0x08012a87
 8012448:	08012ae5 	.word	0x08012ae5
 801244c:	08012bb5 	.word	0x08012bb5
 8012450:	08012bdf 	.word	0x08012bdf
 8012454:	08012ae5 	.word	0x08012ae5
 8012458:	08012c0d 	.word	0x08012c0d
 801245c:	0801315f 	.word	0x0801315f
 8012460:	0801315f 	.word	0x0801315f
 8012464:	0801315f 	.word	0x0801315f
 8012468:	0801315f 	.word	0x0801315f
 801246c:	0801315f 	.word	0x0801315f
 8012470:	0801315f 	.word	0x0801315f
 8012474:	0801315f 	.word	0x0801315f
 8012478:	08012c85 	.word	0x08012c85
 801247c:	08012d01 	.word	0x08012d01
 8012480:	08012d2f 	.word	0x08012d2f
 8012484:	080124b9 	.word	0x080124b9
 8012488:	080124b9 	.word	0x080124b9
 801248c:	080124b9 	.word	0x080124b9
 8012490:	080124b9 	.word	0x080124b9
 8012494:	080124b9 	.word	0x080124b9
 8012498:	080124b9 	.word	0x080124b9
 801249c:	080124b9 	.word	0x080124b9
 80124a0:	08012dab 	.word	0x08012dab
 80124a4:	08012e45 	.word	0x08012e45
 80124a8:	08012f09 	.word	0x08012f09
 80124ac:	08012fb7 	.word	0x08012fb7
 80124b0:	08013051 	.word	0x08013051
 80124b4:	080130bf 	.word	0x080130bf
    case SAVE_BUF:
    case SAVE_CSV:
    case SAVE_SVG:
    case LOAD_DAT:
    case LOAD_BUF:
      SetColor(GRY, TCOLOR[FN]);
 80124b8:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80124bc:	4619      	mov	r1, r3
 80124be:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80124c2:	f7fb fb3f 	bl	800db44 <SetColor>
      u8ToDec3(NumStr, List[i].Val);
 80124c6:	89bb      	ldrh	r3, [r7, #12]
 80124c8:	4a69      	ldr	r2, [pc, #420]	; (8012670 <Update_Blink+0x2fc>)
 80124ca:	00db      	lsls	r3, r3, #3
 80124cc:	4413      	add	r3, r2
 80124ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	4619      	mov	r1, r3
 80124d6:	486a      	ldr	r0, [pc, #424]	; (8012680 <Update_Blink+0x30c>)
 80124d8:	f7ff f9bc 	bl	8011854 <u8ToDec3>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 80124dc:	4b69      	ldr	r3, [pc, #420]	; (8012684 <Update_Blink+0x310>)
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	b2d8      	uxtb	r0, r3
 80124e2:	89bb      	ldrh	r3, [r7, #12]
 80124e4:	4a68      	ldr	r2, [pc, #416]	; (8012688 <Update_Blink+0x314>)
 80124e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	3b03      	subs	r3, #3
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	b219      	sxth	r1, r3
 80124f2:	2342      	movs	r3, #66	; 0x42
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	2300      	movs	r3, #0
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	230b      	movs	r3, #11
 80124fc:	2203      	movs	r2, #3
 80124fe:	f7fb fc0f 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 8012502:	89bb      	ldrh	r3, [r7, #12]
 8012504:	4a60      	ldr	r2, [pc, #384]	; (8012688 <Update_Blink+0x314>)
 8012506:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801250a:	4b5e      	ldr	r3, [pc, #376]	; (8012684 <Update_Blink+0x310>)
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	b2da      	uxtb	r2, r3
 8012510:	89bb      	ldrh	r3, [r7, #12]
 8012512:	2b21      	cmp	r3, #33	; 0x21
 8012514:	d901      	bls.n	801251a <Update_Blink+0x1a6>
 8012516:	4b5d      	ldr	r3, [pc, #372]	; (801268c <Update_Blink+0x318>)
 8012518:	e000      	b.n	801251c <Update_Blink+0x1a8>
 801251a:	4b5d      	ldr	r3, [pc, #372]	; (8012690 <Update_Blink+0x31c>)
 801251c:	2103      	movs	r1, #3
 801251e:	f7fb fb29 	bl	800db74 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char *)NumStr);
 8012522:	89bb      	ldrh	r3, [r7, #12]
 8012524:	4a58      	ldr	r2, [pc, #352]	; (8012688 <Update_Blink+0x314>)
 8012526:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801252a:	b29b      	uxth	r3, r3
 801252c:	3318      	adds	r3, #24
 801252e:	b29b      	uxth	r3, r3
 8012530:	b218      	sxth	r0, r3
 8012532:	4b54      	ldr	r3, [pc, #336]	; (8012684 <Update_Blink+0x310>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	b2da      	uxtb	r2, r3
 8012538:	4b51      	ldr	r3, [pc, #324]	; (8012680 <Update_Blink+0x30c>)
 801253a:	2103      	movs	r1, #3
 801253c:	f7fb fb1a 	bl	800db74 <DispStr>
      DispStr(S_X[i]+42, LABLE_Y, Twink, (List[i].PTR +(i - SAVE_BMP)*6));
 8012540:	89bb      	ldrh	r3, [r7, #12]
 8012542:	4a51      	ldr	r2, [pc, #324]	; (8012688 <Update_Blink+0x314>)
 8012544:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012548:	b29b      	uxth	r3, r3
 801254a:	332a      	adds	r3, #42	; 0x2a
 801254c:	b29b      	uxth	r3, r3
 801254e:	b218      	sxth	r0, r3
 8012550:	4b4c      	ldr	r3, [pc, #304]	; (8012684 <Update_Blink+0x310>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	b2dc      	uxtb	r4, r3
 8012556:	89bb      	ldrh	r3, [r7, #12]
 8012558:	4a45      	ldr	r2, [pc, #276]	; (8012670 <Update_Blink+0x2fc>)
 801255a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801255e:	89bb      	ldrh	r3, [r7, #12]
 8012560:	f1a3 021d 	sub.w	r2, r3, #29
 8012564:	4613      	mov	r3, r2
 8012566:	005b      	lsls	r3, r3, #1
 8012568:	4413      	add	r3, r2
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	440b      	add	r3, r1
 801256e:	4622      	mov	r2, r4
 8012570:	2103      	movs	r1, #3
 8012572:	f7fb faff 	bl	800db74 <DispStr>
      break;
 8012576:	f000 bdf2 	b.w	801315e <Update_Blink+0xdea>

    case Y_RANGES:
    case COUPLING:
    case PROBEATT:
      SetColor(GRY, TCOLOR[YN]);
 801257a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801257e:	4619      	mov	r1, r3
 8012580:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012584:	f7fb fade 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8012588:	4b3e      	ldr	r3, [pc, #248]	; (8012684 <Update_Blink+0x310>)
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	b2d8      	uxtb	r0, r3
 801258e:	232f      	movs	r3, #47	; 0x2f
 8012590:	b29b      	uxth	r3, r3
 8012592:	3b03      	subs	r3, #3
 8012594:	b29b      	uxth	r3, r3
 8012596:	b219      	sxth	r1, r3
 8012598:	232a      	movs	r3, #42	; 0x2a
 801259a:	9301      	str	r3, [sp, #4]
 801259c:	2300      	movs	r3, #0
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	230b      	movs	r3, #11
 80125a2:	22e1      	movs	r2, #225	; 0xe1
 80125a4:	f7fb fbbc 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, Twink, (List[Y_RANGES].PTR +(Range)*6));
 80125a8:	242f      	movs	r4, #47	; 0x2f
 80125aa:	4b36      	ldr	r3, [pc, #216]	; (8012684 <Update_Blink+0x310>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	b2d8      	uxtb	r0, r3
 80125b0:	4b2f      	ldr	r3, [pc, #188]	; (8012670 <Update_Blink+0x2fc>)
 80125b2:	6819      	ldr	r1, [r3, #0]
 80125b4:	89fa      	ldrh	r2, [r7, #14]
 80125b6:	4613      	mov	r3, r2
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	4413      	add	r3, r2
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	440b      	add	r3, r1
 80125c0:	4602      	mov	r2, r0
 80125c2:	21e1      	movs	r1, #225	; 0xe1
 80125c4:	4620      	mov	r0, r4
 80125c6:	f7fb fad5 	bl	800db74 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, Twink, (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80125ca:	2047      	movs	r0, #71	; 0x47
 80125cc:	4b2d      	ldr	r3, [pc, #180]	; (8012684 <Update_Blink+0x310>)
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	b2d9      	uxtb	r1, r3
 80125d2:	4b27      	ldr	r3, [pc, #156]	; (8012670 <Update_Blink+0x2fc>)
 80125d4:	689a      	ldr	r2, [r3, #8]
 80125d6:	4b26      	ldr	r3, [pc, #152]	; (8012670 <Update_Blink+0x2fc>)
 80125d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80125dc:	461c      	mov	r4, r3
 80125de:	4623      	mov	r3, r4
 80125e0:	005b      	lsls	r3, r3, #1
 80125e2:	4423      	add	r3, r4
 80125e4:	005b      	lsls	r3, r3, #1
 80125e6:	4413      	add	r3, r2
 80125e8:	460a      	mov	r2, r1
 80125ea:	21e1      	movs	r1, #225	; 0xe1
 80125ec:	f7fb fac2 	bl	800db74 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80125f0:	2020      	movs	r0, #32
 80125f2:	4b1f      	ldr	r3, [pc, #124]	; (8012670 <Update_Blink+0x2fc>)
 80125f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <Update_Blink+0x28c>
 80125fc:	4b25      	ldr	r3, [pc, #148]	; (8012694 <Update_Blink+0x320>)
 80125fe:	e000      	b.n	8012602 <Update_Blink+0x28e>
 8012600:	4b25      	ldr	r3, [pc, #148]	; (8012698 <Update_Blink+0x324>)
 8012602:	2210      	movs	r2, #16
 8012604:	21e1      	movs	r1, #225	; 0xe1
 8012606:	f7fb fd1d 	bl	800e044 <DispStr10x14>
      break;
 801260a:	f000 bda8 	b.w	801315e <Update_Blink+0xdea>

    case V0_POSI:
      if(Twink) ParamTab[P1F] |=  D_HID;
 801260e:	4b1d      	ldr	r3, [pc, #116]	; (8012684 <Update_Blink+0x310>)
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <Update_Blink+0x2b8>
 8012618:	4b20      	ldr	r3, [pc, #128]	; (801269c <Update_Blink+0x328>)
 801261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801261e:	f043 0301 	orr.w	r3, r3, #1
 8012622:	b21a      	sxth	r2, r3
 8012624:	4b1d      	ldr	r3, [pc, #116]	; (801269c <Update_Blink+0x328>)
 8012626:	801a      	strh	r2, [r3, #0]
      else      ParamTab[P1F] &= ~D_HID;
      break;
 8012628:	f000 bd99 	b.w	801315e <Update_Blink+0xdea>
      else      ParamTab[P1F] &= ~D_HID;
 801262c:	4b1b      	ldr	r3, [pc, #108]	; (801269c <Update_Blink+0x328>)
 801262e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012632:	f023 0301 	bic.w	r3, r3, #1
 8012636:	b21a      	sxth	r2, r3
 8012638:	4b18      	ldr	r3, [pc, #96]	; (801269c <Update_Blink+0x328>)
 801263a:	801a      	strh	r2, [r3, #0]
      break;
 801263c:	f000 bd8f 	b.w	801315e <Update_Blink+0xdea>

    case V1_POSI:
    case V2_POSI:
      Tmp = (i == V1_POSI)? V1F : V2F;
 8012640:	89bb      	ldrh	r3, [r7, #12]
 8012642:	2b04      	cmp	r3, #4
 8012644:	d101      	bne.n	801264a <Update_Blink+0x2d6>
 8012646:	2305      	movs	r3, #5
 8012648:	e000      	b.n	801264c <Update_Blink+0x2d8>
 801264a:	2306      	movs	r3, #6
 801264c:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 801264e:	4b0d      	ldr	r3, [pc, #52]	; (8012684 <Update_Blink+0x310>)
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	b2db      	uxtb	r3, r3
 8012654:	2b00      	cmp	r3, #0
 8012656:	d023      	beq.n	80126a0 <Update_Blink+0x32c>
 8012658:	4a10      	ldr	r2, [pc, #64]	; (801269c <Update_Blink+0x328>)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012660:	f043 0301 	orr.w	r3, r3, #1
 8012664:	b219      	sxth	r1, r3
 8012666:	4a0d      	ldr	r2, [pc, #52]	; (801269c <Update_Blink+0x328>)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801266e:	e022      	b.n	80126b6 <Update_Blink+0x342>
 8012670:	20000298 	.word	0x20000298
 8012674:	2000079a 	.word	0x2000079a
 8012678:	20000538 	.word	0x20000538
 801267c:	20000a2c 	.word	0x20000a2c
 8012680:	20002834 	.word	0x20002834
 8012684:	2000077c 	.word	0x2000077c
 8012688:	0800215c 	.word	0x0800215c
 801268c:	08000948 	.word	0x08000948
 8012690:	08000950 	.word	0x08000950
 8012694:	08000958 	.word	0x08000958
 8012698:	0800095c 	.word	0x0800095c
 801269c:	20000140 	.word	0x20000140
      else      ParamTab[Tmp] &= ~D_HID;
 80126a0:	4ab1      	ldr	r2, [pc, #708]	; (8012968 <Update_Blink+0x5f4>)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80126a8:	f023 0301 	bic.w	r3, r3, #1
 80126ac:	b219      	sxth	r1, r3
 80126ae:	4aae      	ldr	r2, [pc, #696]	; (8012968 <Update_Blink+0x5f4>)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // V2 - V1 ��ֵ
 80126b6:	4bac      	ldr	r3, [pc, #688]	; (8012968 <Update_Blink+0x5f4>)
 80126b8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80126bc:	461a      	mov	r2, r3
 80126be:	4baa      	ldr	r3, [pc, #680]	; (8012968 <Update_Blink+0x5f4>)
 80126c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80126c4:	1ad3      	subs	r3, r2, r3
 80126c6:	0fda      	lsrs	r2, r3, #31
 80126c8:	4413      	add	r3, r2
 80126ca:	105b      	asrs	r3, r3, #1
 80126cc:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80126ce:	89fb      	ldrh	r3, [r7, #14]
 80126d0:	4aa6      	ldr	r2, [pc, #664]	; (801296c <Update_Blink+0x5f8>)
 80126d2:	5cd3      	ldrb	r3, [r2, r3]
 80126d4:	461c      	mov	r4, r3
 80126d6:	89fb      	ldrh	r3, [r7, #14]
 80126d8:	4aa5      	ldr	r2, [pc, #660]	; (8012970 <Update_Blink+0x5fc>)
 80126da:	5cd3      	ldrb	r3, [r2, r3]
 80126dc:	4618      	mov	r0, r3
 80126de:	f7ff fa1d 	bl	8011b1c <Exp>
 80126e2:	4603      	mov	r3, r0
 80126e4:	fb03 f204 	mul.w	r2, r3, r4
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	fb02 f303 	mul.w	r3, r2, r3
 80126ee:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80126f0:	2301      	movs	r3, #1
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	2303      	movs	r3, #3
 80126f6:	4a9f      	ldr	r2, [pc, #636]	; (8012974 <Update_Blink+0x600>)
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	489f      	ldr	r0, [pc, #636]	; (8012978 <Update_Blink+0x604>)
 80126fc:	f7ff f912 	bl	8011924 <Value2Str>
      SetColor(GRY, TCOLOR[YN]);
 8012700:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012704:	4619      	mov	r1, r3
 8012706:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801270a:	f7fb fa1b 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 801270e:	4b9b      	ldr	r3, [pc, #620]	; (801297c <Update_Blink+0x608>)
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	b2d8      	uxtb	r0, r3
 8012714:	2307      	movs	r3, #7
 8012716:	b29b      	uxth	r3, r3
 8012718:	3b03      	subs	r3, #3
 801271a:	b29b      	uxth	r3, r3
 801271c:	b219      	sxth	r1, r3
 801271e:	2336      	movs	r3, #54	; 0x36
 8012720:	9301      	str	r3, [sp, #4]
 8012722:	2300      	movs	r3, #0
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	230b      	movs	r3, #11
 8012728:	2203      	movs	r2, #3
 801272a:	f7fb faf9 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[V1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 801272e:	2007      	movs	r0, #7
 8012730:	4b92      	ldr	r3, [pc, #584]	; (801297c <Update_Blink+0x608>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	b2db      	uxtb	r3, r3
 8012736:	3310      	adds	r3, #16
 8012738:	b2da      	uxtb	r2, r3
 801273a:	4b91      	ldr	r3, [pc, #580]	; (8012980 <Update_Blink+0x60c>)
 801273c:	2103      	movs	r1, #3
 801273e:	f7fb fa19 	bl	800db74 <DispStr>
      DispStr(S_X[V1_POSI]+1*6, LABLE_Y, Twink,      "V:      ");
 8012742:	2307      	movs	r3, #7
 8012744:	b29b      	uxth	r3, r3
 8012746:	3306      	adds	r3, #6
 8012748:	b29b      	uxth	r3, r3
 801274a:	b218      	sxth	r0, r3
 801274c:	4b8b      	ldr	r3, [pc, #556]	; (801297c <Update_Blink+0x608>)
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	b2da      	uxtb	r2, r3
 8012752:	4b8c      	ldr	r3, [pc, #560]	; (8012984 <Update_Blink+0x610>)
 8012754:	2103      	movs	r1, #3
 8012756:	f7fb fa0d 	bl	800db74 <DispStr>
      DispStr(S_X[V1_POSI]+3*6, LABLE_Y, Twink, (char *)NumStr);
 801275a:	2307      	movs	r3, #7
 801275c:	b29b      	uxth	r3, r3
 801275e:	3312      	adds	r3, #18
 8012760:	b29b      	uxth	r3, r3
 8012762:	b218      	sxth	r0, r3
 8012764:	4b85      	ldr	r3, [pc, #532]	; (801297c <Update_Blink+0x608>)
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	b2da      	uxtb	r2, r3
 801276a:	4b83      	ldr	r3, [pc, #524]	; (8012978 <Update_Blink+0x604>)
 801276c:	2103      	movs	r1, #3
 801276e:	f7fb fa01 	bl	800db74 <DispStr>
      break;
 8012772:	f000 bcf4 	b.w	801315e <Update_Blink+0xdea>

    case YN_TYPE:
      if(Twink) ParamTab[V1F] |=  D_HID;
 8012776:	4b81      	ldr	r3, [pc, #516]	; (801297c <Update_Blink+0x608>)
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	b2db      	uxtb	r3, r3
 801277c:	2b00      	cmp	r3, #0
 801277e:	d008      	beq.n	8012792 <Update_Blink+0x41e>
 8012780:	4b79      	ldr	r3, [pc, #484]	; (8012968 <Update_Blink+0x5f4>)
 8012782:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012786:	f043 0301 	orr.w	r3, r3, #1
 801278a:	b21a      	sxth	r2, r3
 801278c:	4b76      	ldr	r3, [pc, #472]	; (8012968 <Update_Blink+0x5f4>)
 801278e:	815a      	strh	r2, [r3, #10]
 8012790:	e007      	b.n	80127a2 <Update_Blink+0x42e>
      else      ParamTab[V1F] &= ~D_HID;
 8012792:	4b75      	ldr	r3, [pc, #468]	; (8012968 <Update_Blink+0x5f4>)
 8012794:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012798:	f023 0301 	bic.w	r3, r3, #1
 801279c:	b21a      	sxth	r2, r3
 801279e:	4b72      	ldr	r3, [pc, #456]	; (8012968 <Update_Blink+0x5f4>)
 80127a0:	815a      	strh	r2, [r3, #10]
      if(Twink) ParamTab[V2F] |=  D_HID;
 80127a2:	4b76      	ldr	r3, [pc, #472]	; (801297c <Update_Blink+0x608>)
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d009      	beq.n	80127c0 <Update_Blink+0x44c>
 80127ac:	4b6e      	ldr	r3, [pc, #440]	; (8012968 <Update_Blink+0x5f4>)
 80127ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80127b2:	f043 0301 	orr.w	r3, r3, #1
 80127b6:	b21a      	sxth	r2, r3
 80127b8:	4b6b      	ldr	r3, [pc, #428]	; (8012968 <Update_Blink+0x5f4>)
 80127ba:	819a      	strh	r2, [r3, #12]
      else      ParamTab[V2F] &= ~D_HID;
      break;
 80127bc:	f000 bccf 	b.w	801315e <Update_Blink+0xdea>
      else      ParamTab[V2F] &= ~D_HID;
 80127c0:	4b69      	ldr	r3, [pc, #420]	; (8012968 <Update_Blink+0x5f4>)
 80127c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80127c6:	f023 0301 	bic.w	r3, r3, #1
 80127ca:	b21a      	sxth	r2, r3
 80127cc:	4b66      	ldr	r3, [pc, #408]	; (8012968 <Update_Blink+0x5f4>)
 80127ce:	819a      	strh	r2, [r3, #12]
      break;
 80127d0:	f000 bcc5 	b.w	801315e <Update_Blink+0xdea>

    case TIM_BASE:
      SetColor(GRY, TCOLOR[XN]);
 80127d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80127d8:	4619      	mov	r1, r3
 80127da:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80127de:	f7fb f9b1 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 80127e2:	4b66      	ldr	r3, [pc, #408]	; (801297c <Update_Blink+0x608>)
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	b2d8      	uxtb	r0, r3
 80127e8:	89bb      	ldrh	r3, [r7, #12]
 80127ea:	4a67      	ldr	r2, [pc, #412]	; (8012988 <Update_Blink+0x614>)
 80127ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	3b03      	subs	r3, #3
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	b219      	sxth	r1, r3
 80127f8:	231e      	movs	r3, #30
 80127fa:	9301      	str	r3, [sp, #4]
 80127fc:	2302      	movs	r3, #2
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	230b      	movs	r3, #11
 8012802:	22e1      	movs	r2, #225	; 0xe1
 8012804:	f7fb fa8c 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, TimeBase_Str[List[TIM_BASE].Val]);
 8012808:	89bb      	ldrh	r3, [r7, #12]
 801280a:	4a5f      	ldr	r2, [pc, #380]	; (8012988 <Update_Blink+0x614>)
 801280c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012810:	4b5a      	ldr	r3, [pc, #360]	; (801297c <Update_Blink+0x608>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	b2da      	uxtb	r2, r3
 8012816:	4b5d      	ldr	r3, [pc, #372]	; (801298c <Update_Blink+0x618>)
 8012818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801281c:	00db      	lsls	r3, r3, #3
 801281e:	495c      	ldr	r1, [pc, #368]	; (8012990 <Update_Blink+0x61c>)
 8012820:	440b      	add	r3, r1
 8012822:	21e1      	movs	r1, #225	; 0xe1
 8012824:	f7fb f9a6 	bl	800db74 <DispStr>
      break;
 8012828:	f000 bc99 	b.w	801315e <Update_Blink+0xdea>

    case VIEWPOSI:
      if(Twink) ParamTab[T0F] |=  D_HID;
 801282c:	4b53      	ldr	r3, [pc, #332]	; (801297c <Update_Blink+0x608>)
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d009      	beq.n	801284a <Update_Blink+0x4d6>
 8012836:	4b4c      	ldr	r3, [pc, #304]	; (8012968 <Update_Blink+0x5f4>)
 8012838:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801283c:	f043 0301 	orr.w	r3, r3, #1
 8012840:	b21a      	sxth	r2, r3
 8012842:	4b49      	ldr	r3, [pc, #292]	; (8012968 <Update_Blink+0x5f4>)
 8012844:	81da      	strh	r2, [r3, #14]
      else      ParamTab[T0F] &= ~D_HID;
      break;
 8012846:	f000 bc8a 	b.w	801315e <Update_Blink+0xdea>
      else      ParamTab[T0F] &= ~D_HID;
 801284a:	4b47      	ldr	r3, [pc, #284]	; (8012968 <Update_Blink+0x5f4>)
 801284c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012850:	f023 0301 	bic.w	r3, r3, #1
 8012854:	b21a      	sxth	r2, r3
 8012856:	4b44      	ldr	r3, [pc, #272]	; (8012968 <Update_Blink+0x5f4>)
 8012858:	81da      	strh	r2, [r3, #14]
      break;
 801285a:	f000 bc80 	b.w	801315e <Update_Blink+0xdea>

    case SMPL_DPTH:
      SetColor(GRY, TCOLOR[XN]);
 801285e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012862:	4619      	mov	r1, r3
 8012864:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012868:	f7fb f96c 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 801286c:	4b43      	ldr	r3, [pc, #268]	; (801297c <Update_Blink+0x608>)
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	b2d8      	uxtb	r0, r3
 8012872:	23f8      	movs	r3, #248	; 0xf8
 8012874:	b29b      	uxth	r3, r3
 8012876:	3b03      	subs	r3, #3
 8012878:	b29b      	uxth	r3, r3
 801287a:	b219      	sxth	r1, r3
 801287c:	2342      	movs	r3, #66	; 0x42
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	2300      	movs	r3, #0
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	230b      	movs	r3, #11
 8012886:	2203      	movs	r2, #3
 8012888:	f7fb fa4a 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[SMPL_DPTH],    LABLE_Y,  Twink, "SmplDpth:  ");
 801288c:	20f8      	movs	r0, #248	; 0xf8
 801288e:	4b3b      	ldr	r3, [pc, #236]	; (801297c <Update_Blink+0x608>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	b2da      	uxtb	r2, r3
 8012894:	4b3f      	ldr	r3, [pc, #252]	; (8012994 <Update_Blink+0x620>)
 8012896:	2103      	movs	r1, #3
 8012898:	f7fb f96c 	bl	800db74 <DispStr>
      DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  Twink, (char *)&D[List[SMPL_DPTH].Val]);
 801289c:	23f8      	movs	r3, #248	; 0xf8
 801289e:	b29b      	uxth	r3, r3
 80128a0:	3336      	adds	r3, #54	; 0x36
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	b218      	sxth	r0, r3
 80128a6:	4b35      	ldr	r3, [pc, #212]	; (801297c <Update_Blink+0x608>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	b2da      	uxtb	r2, r3
 80128ac:	4b37      	ldr	r3, [pc, #220]	; (801298c <Update_Blink+0x618>)
 80128ae:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80128b2:	4619      	mov	r1, r3
 80128b4:	460b      	mov	r3, r1
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	440b      	add	r3, r1
 80128ba:	005b      	lsls	r3, r3, #1
 80128bc:	4936      	ldr	r1, [pc, #216]	; (8012998 <Update_Blink+0x624>)
 80128be:	440b      	add	r3, r1
 80128c0:	2103      	movs	r1, #3
 80128c2:	f7fb f957 	bl	800db74 <DispStr>
      break;
 80128c6:	f000 bc4a 	b.w	801315e <Update_Blink+0xdea>

    case T1_POSI:
    case T2_POSI:
      Tmp = (i == T1_POSI)? T1F : T2F;
 80128ca:	89bb      	ldrh	r3, [r7, #12]
 80128cc:	2b0a      	cmp	r3, #10
 80128ce:	d101      	bne.n	80128d4 <Update_Blink+0x560>
 80128d0:	2308      	movs	r3, #8
 80128d2:	e000      	b.n	80128d6 <Update_Blink+0x562>
 80128d4:	2309      	movs	r3, #9
 80128d6:	607b      	str	r3, [r7, #4]
      if(Twink) ParamTab[Tmp] |=  D_HID;
 80128d8:	4b28      	ldr	r3, [pc, #160]	; (801297c <Update_Blink+0x608>)
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d00b      	beq.n	80128fa <Update_Blink+0x586>
 80128e2:	4a21      	ldr	r2, [pc, #132]	; (8012968 <Update_Blink+0x5f4>)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80128ea:	f043 0301 	orr.w	r3, r3, #1
 80128ee:	b219      	sxth	r1, r3
 80128f0:	4a1d      	ldr	r2, [pc, #116]	; (8012968 <Update_Blink+0x5f4>)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80128f8:	e00a      	b.n	8012910 <Update_Blink+0x59c>
      else      ParamTab[Tmp] &= ~D_HID;
 80128fa:	4a1b      	ldr	r2, [pc, #108]	; (8012968 <Update_Blink+0x5f4>)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012902:	f023 0301 	bic.w	r3, r3, #1
 8012906:	b219      	sxth	r1, r3
 8012908:	4a17      	ldr	r2, [pc, #92]	; (8012968 <Update_Blink+0x5f4>)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      Tmp  = ParamTab[T2x1] - ParamTab[T1x1];          // T2 - T1 ��ֵ
 8012910:	4b15      	ldr	r3, [pc, #84]	; (8012968 <Update_Blink+0x5f4>)
 8012912:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8012916:	461a      	mov	r2, r3
 8012918:	4b13      	ldr	r3, [pc, #76]	; (8012968 <Update_Blink+0x5f4>)
 801291a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	607b      	str	r3, [r7, #4]
      Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8012922:	4b1a      	ldr	r3, [pc, #104]	; (801298c <Update_Blink+0x618>)
 8012924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012928:	461a      	mov	r2, r3
 801292a:	4b1c      	ldr	r3, [pc, #112]	; (801299c <Update_Blink+0x628>)
 801292c:	5c9b      	ldrb	r3, [r3, r2]
 801292e:	461c      	mov	r4, r3
 8012930:	4b16      	ldr	r3, [pc, #88]	; (801298c <Update_Blink+0x618>)
 8012932:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012936:	461a      	mov	r2, r3
 8012938:	4b19      	ldr	r3, [pc, #100]	; (80129a0 <Update_Blink+0x62c>)
 801293a:	5c9b      	ldrb	r3, [r3, r2]
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff f8ed 	bl	8011b1c <Exp>
 8012942:	4603      	mov	r3, r0
 8012944:	fb03 f204 	mul.w	r2, r3, r4
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	fb02 f303 	mul.w	r3, r2, r3
 801294e:	607b      	str	r3, [r7, #4]
      if(Tmp>=0)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	db28      	blt.n	80129a8 <Update_Blink+0x634>
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8012956:	2301      	movs	r3, #1
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	2303      	movs	r3, #3
 801295c:	4a11      	ldr	r2, [pc, #68]	; (80129a4 <Update_Blink+0x630>)
 801295e:	6879      	ldr	r1, [r7, #4]
 8012960:	4805      	ldr	r0, [pc, #20]	; (8012978 <Update_Blink+0x604>)
 8012962:	f7fe ffdf 	bl	8011924 <Value2Str>
 8012966:	e027      	b.n	80129b8 <Update_Blink+0x644>
 8012968:	20000140 	.word	0x20000140
 801296c:	08002130 	.word	0x08002130
 8012970:	08002108 	.word	0x08002108
 8012974:	08001d00 	.word	0x08001d00
 8012978:	20002834 	.word	0x20002834
 801297c:	2000077c 	.word	0x2000077c
 8012980:	08000960 	.word	0x08000960
 8012984:	08000964 	.word	0x08000964
 8012988:	0800215c 	.word	0x0800215c
 801298c:	20000298 	.word	0x20000298
 8012990:	200001d0 	.word	0x200001d0
 8012994:	08000970 	.word	0x08000970
 8012998:	08001c4c 	.word	0x08001c4c
 801299c:	0800211c 	.word	0x0800211c
 80129a0:	080020f4 	.word	0x080020f4
 80129a4:	08001ce8 	.word	0x08001ce8
      else
        Value2Str(NumStr, Tmp, T[0], 3, SIGN);
 80129a8:	2300      	movs	r3, #0
 80129aa:	9300      	str	r3, [sp, #0]
 80129ac:	2303      	movs	r3, #3
 80129ae:	4aa3      	ldr	r2, [pc, #652]	; (8012c3c <Update_Blink+0x8c8>)
 80129b0:	6879      	ldr	r1, [r7, #4]
 80129b2:	48a3      	ldr	r0, [pc, #652]	; (8012c40 <Update_Blink+0x8cc>)
 80129b4:	f7fe ffb6 	bl	8011924 <Value2Str>
      SetColor(GRY, TCOLOR[XN]);
 80129b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80129bc:	4619      	mov	r1, r3
 80129be:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80129c2:	f7fb f8bf 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[T1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80129c6:	4b9f      	ldr	r3, [pc, #636]	; (8012c44 <Update_Blink+0x8d0>)
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	b2d8      	uxtb	r0, r3
 80129cc:	2307      	movs	r3, #7
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	3b03      	subs	r3, #3
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	b219      	sxth	r1, r3
 80129d6:	2336      	movs	r3, #54	; 0x36
 80129d8:	9301      	str	r3, [sp, #4]
 80129da:	2300      	movs	r3, #0
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	230b      	movs	r3, #11
 80129e0:	2203      	movs	r2, #3
 80129e2:	f7fb f99d 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[T1_POSI]+0*6, LABLE_Y, Twink+SYMB, "]");
 80129e6:	2007      	movs	r0, #7
 80129e8:	4b96      	ldr	r3, [pc, #600]	; (8012c44 <Update_Blink+0x8d0>)
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	3310      	adds	r3, #16
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	4b95      	ldr	r3, [pc, #596]	; (8012c48 <Update_Blink+0x8d4>)
 80129f4:	2103      	movs	r1, #3
 80129f6:	f7fb f8bd 	bl	800db74 <DispStr>
      DispStr(S_X[T1_POSI]+1*6, LABLE_Y, Twink,      "T:      ");
 80129fa:	2307      	movs	r3, #7
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	3306      	adds	r3, #6
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	b218      	sxth	r0, r3
 8012a04:	4b8f      	ldr	r3, [pc, #572]	; (8012c44 <Update_Blink+0x8d0>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	b2da      	uxtb	r2, r3
 8012a0a:	4b90      	ldr	r3, [pc, #576]	; (8012c4c <Update_Blink+0x8d8>)
 8012a0c:	2103      	movs	r1, #3
 8012a0e:	f7fb f8b1 	bl	800db74 <DispStr>
      DispStr(S_X[T1_POSI]+3*6, LABLE_Y, Twink,      (char *)NumStr);
 8012a12:	2307      	movs	r3, #7
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	3312      	adds	r3, #18
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	b218      	sxth	r0, r3
 8012a1c:	4b89      	ldr	r3, [pc, #548]	; (8012c44 <Update_Blink+0x8d0>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	b2da      	uxtb	r2, r3
 8012a22:	4b87      	ldr	r3, [pc, #540]	; (8012c40 <Update_Blink+0x8cc>)
 8012a24:	2103      	movs	r1, #3
 8012a26:	f7fb f8a5 	bl	800db74 <DispStr>
      break;
 8012a2a:	e398      	b.n	801315e <Update_Blink+0xdea>

    case XN_TYPE:
      if(Twink) ParamTab[T1F] |=  D_HID;
 8012a2c:	4b85      	ldr	r3, [pc, #532]	; (8012c44 <Update_Blink+0x8d0>)
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d008      	beq.n	8012a48 <Update_Blink+0x6d4>
 8012a36:	4b86      	ldr	r3, [pc, #536]	; (8012c50 <Update_Blink+0x8dc>)
 8012a38:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012a3c:	f043 0301 	orr.w	r3, r3, #1
 8012a40:	b21a      	sxth	r2, r3
 8012a42:	4b83      	ldr	r3, [pc, #524]	; (8012c50 <Update_Blink+0x8dc>)
 8012a44:	821a      	strh	r2, [r3, #16]
 8012a46:	e007      	b.n	8012a58 <Update_Blink+0x6e4>
      else      ParamTab[T1F] &= ~D_HID;
 8012a48:	4b81      	ldr	r3, [pc, #516]	; (8012c50 <Update_Blink+0x8dc>)
 8012a4a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012a4e:	f023 0301 	bic.w	r3, r3, #1
 8012a52:	b21a      	sxth	r2, r3
 8012a54:	4b7e      	ldr	r3, [pc, #504]	; (8012c50 <Update_Blink+0x8dc>)
 8012a56:	821a      	strh	r2, [r3, #16]
      if(Twink) ParamTab[T2F] |=  D_HID;
 8012a58:	4b7a      	ldr	r3, [pc, #488]	; (8012c44 <Update_Blink+0x8d0>)
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d008      	beq.n	8012a74 <Update_Blink+0x700>
 8012a62:	4b7b      	ldr	r3, [pc, #492]	; (8012c50 <Update_Blink+0x8dc>)
 8012a64:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012a68:	f043 0301 	orr.w	r3, r3, #1
 8012a6c:	b21a      	sxth	r2, r3
 8012a6e:	4b78      	ldr	r3, [pc, #480]	; (8012c50 <Update_Blink+0x8dc>)
 8012a70:	825a      	strh	r2, [r3, #18]
      else      ParamTab[T2F] &= ~D_HID;
      break;
 8012a72:	e374      	b.n	801315e <Update_Blink+0xdea>
      else      ParamTab[T2F] &= ~D_HID;
 8012a74:	4b76      	ldr	r3, [pc, #472]	; (8012c50 <Update_Blink+0x8dc>)
 8012a76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012a7a:	f023 0301 	bic.w	r3, r3, #1
 8012a7e:	b21a      	sxth	r2, r3
 8012a80:	4b73      	ldr	r3, [pc, #460]	; (8012c50 <Update_Blink+0x8dc>)
 8012a82:	825a      	strh	r2, [r3, #18]
      break;
 8012a84:	e36b      	b.n	801315e <Update_Blink+0xdea>

    case SYNCMODE:
      if(!(Status &  STOP))
 8012a86:	4b73      	ldr	r3, [pc, #460]	; (8012c54 <Update_Blink+0x8e0>)
 8012a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	f003 0301 	and.w	r3, r3, #1
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	f040 8362 	bne.w	801315c <Update_Blink+0xde8>
      {
      SetColor(GRY, TCOLOR[TRG]);
 8012a98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012aa2:	f7fb f84f 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*4);
 8012aa6:	4b67      	ldr	r3, [pc, #412]	; (8012c44 <Update_Blink+0x8d0>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	b2d8      	uxtb	r0, r3
 8012aac:	89bb      	ldrh	r3, [r7, #12]
 8012aae:	4a6a      	ldr	r2, [pc, #424]	; (8012c58 <Update_Blink+0x8e4>)
 8012ab0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	3b03      	subs	r3, #3
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	b219      	sxth	r1, r3
 8012abc:	2318      	movs	r3, #24
 8012abe:	9301      	str	r3, [sp, #4]
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	9300      	str	r3, [sp, #0]
 8012ac4:	230b      	movs	r3, #11
 8012ac6:	22e1      	movs	r2, #225	; 0xe1
 8012ac8:	f7fb f92a 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char *)ptr);
 8012acc:	89bb      	ldrh	r3, [r7, #12]
 8012ace:	4a62      	ldr	r2, [pc, #392]	; (8012c58 <Update_Blink+0x8e4>)
 8012ad0:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012ad4:	4b5b      	ldr	r3, [pc, #364]	; (8012c44 <Update_Blink+0x8d0>)
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	b2da      	uxtb	r2, r3
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	21e1      	movs	r1, #225	; 0xe1
 8012ade:	f7fb f849 	bl	800db74 <DispStr>
      }
      break;
 8012ae2:	e33b      	b.n	801315c <Update_Blink+0xde8>

    case TR_MODE:
    case SENSITIVE:
      SetColor(GRY, TCOLOR[TRG]);
 8012ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012ae8:	4619      	mov	r1, r3
 8012aea:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012aee:	f7fb f829 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8012af2:	4b54      	ldr	r3, [pc, #336]	; (8012c44 <Update_Blink+0x8d0>)
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	b2d8      	uxtb	r0, r3
 8012af8:	23dd      	movs	r3, #221	; 0xdd
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	3b03      	subs	r3, #3
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	b219      	sxth	r1, r3
 8012b02:	2330      	movs	r3, #48	; 0x30
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	2300      	movs	r3, #0
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	230b      	movs	r3, #11
 8012b0c:	22e1      	movs	r2, #225	; 0xe1
 8012b0e:	f7fb f907 	bl	800dd20 <Draw_Circle_D>
      DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, Twink+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8012b12:	20dd      	movs	r0, #221	; 0xdd
 8012b14:	4b4b      	ldr	r3, [pc, #300]	; (8012c44 <Update_Blink+0x8d0>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	3310      	adds	r3, #16
 8012b1c:	b2da      	uxtb	r2, r3
 8012b1e:	4b4f      	ldr	r3, [pc, #316]	; (8012c5c <Update_Blink+0x8e8>)
 8012b20:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <Update_Blink+0x7b8>
 8012b28:	4b4d      	ldr	r3, [pc, #308]	; (8012c60 <Update_Blink+0x8ec>)
 8012b2a:	e000      	b.n	8012b2e <Update_Blink+0x7ba>
 8012b2c:	4b4d      	ldr	r3, [pc, #308]	; (8012c64 <Update_Blink+0x8f0>)
 8012b2e:	21e1      	movs	r1, #225	; 0xe1
 8012b30:	f7fb fa88 	bl	800e044 <DispStr10x14>

      Tmp  = List[SENSITIVE].Val;                        // �����ز�ֵ
 8012b34:	4b49      	ldr	r3, [pc, #292]	; (8012c5c <Update_Blink+0x8e8>)
 8012b36:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8012b3a:	607b      	str	r3, [r7, #4]
      Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8012b3c:	89fb      	ldrh	r3, [r7, #14]
 8012b3e:	4a4a      	ldr	r2, [pc, #296]	; (8012c68 <Update_Blink+0x8f4>)
 8012b40:	5cd3      	ldrb	r3, [r2, r3]
 8012b42:	461c      	mov	r4, r3
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	4a49      	ldr	r2, [pc, #292]	; (8012c6c <Update_Blink+0x8f8>)
 8012b48:	5cd3      	ldrb	r3, [r2, r3]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fe ffe6 	bl	8011b1c <Exp>
 8012b50:	4603      	mov	r3, r0
 8012b52:	fb03 f204 	mul.w	r2, r3, r4
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	fb02 f303 	mul.w	r3, r2, r3
 8012b5c:	607b      	str	r3, [r7, #4]
      Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8012b5e:	2301      	movs	r3, #1
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	2302      	movs	r3, #2
 8012b64:	4a42      	ldr	r2, [pc, #264]	; (8012c70 <Update_Blink+0x8fc>)
 8012b66:	6879      	ldr	r1, [r7, #4]
 8012b68:	4835      	ldr	r0, [pc, #212]	; (8012c40 <Update_Blink+0x8cc>)
 8012b6a:	f7fe fedb 	bl	8011924 <Value2Str>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink,  "     ");
 8012b6e:	23e7      	movs	r3, #231	; 0xe7
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	3309      	adds	r3, #9
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	b218      	sxth	r0, r3
 8012b78:	4b32      	ldr	r3, [pc, #200]	; (8012c44 <Update_Blink+0x8d0>)
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	4b3d      	ldr	r3, [pc, #244]	; (8012c74 <Update_Blink+0x900>)
 8012b80:	21e1      	movs	r1, #225	; 0xe1
 8012b82:	f7fa fff7 	bl	800db74 <DispStr>
      DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, Twink+SYMB,"E");
 8012b86:	20e7      	movs	r0, #231	; 0xe7
 8012b88:	4b2e      	ldr	r3, [pc, #184]	; (8012c44 <Update_Blink+0x8d0>)
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	3310      	adds	r3, #16
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4b39      	ldr	r3, [pc, #228]	; (8012c78 <Update_Blink+0x904>)
 8012b94:	21e1      	movs	r1, #225	; 0xe1
 8012b96:	f7fb fa55 	bl	800e044 <DispStr10x14>
      DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, Twink     ,  (char *)NumStr);
 8012b9a:	23e7      	movs	r3, #231	; 0xe7
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	3309      	adds	r3, #9
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	b218      	sxth	r0, r3
 8012ba4:	4b27      	ldr	r3, [pc, #156]	; (8012c44 <Update_Blink+0x8d0>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	4b25      	ldr	r3, [pc, #148]	; (8012c40 <Update_Blink+0x8cc>)
 8012bac:	21e1      	movs	r1, #225	; 0xe1
 8012bae:	f7fa ffe1 	bl	800db74 <DispStr>
      break;
 8012bb2:	e2d4      	b.n	801315e <Update_Blink+0xdea>

    case FITTRIGG:
      SetColor(GRY, TCOLOR[TRG]);
 8012bb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012bb8:	4619      	mov	r1, r3
 8012bba:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012bbe:	f7fa ffc1 	bl	800db44 <SetColor>
      DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8012bc2:	20cf      	movs	r0, #207	; 0xcf
 8012bc4:	4b25      	ldr	r3, [pc, #148]	; (8012c5c <Update_Blink+0x8e8>)
 8012bc6:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d001      	beq.n	8012bd2 <Update_Blink+0x85e>
 8012bce:	4b2b      	ldr	r3, [pc, #172]	; (8012c7c <Update_Blink+0x908>)
 8012bd0:	e000      	b.n	8012bd4 <Update_Blink+0x860>
 8012bd2:	4b2b      	ldr	r3, [pc, #172]	; (8012c80 <Update_Blink+0x90c>)
 8012bd4:	2210      	movs	r2, #16
 8012bd6:	21e1      	movs	r1, #225	; 0xe1
 8012bd8:	f7fb fa34 	bl	800e044 <DispStr10x14>
      break;
 8012bdc:	e2bf      	b.n	801315e <Update_Blink+0xdea>

    case THRESHOLD:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012bde:	4b19      	ldr	r3, [pc, #100]	; (8012c44 <Update_Blink+0x8d0>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d008      	beq.n	8012bfa <Update_Blink+0x886>
 8012be8:	4b19      	ldr	r3, [pc, #100]	; (8012c50 <Update_Blink+0x8dc>)
 8012bea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012bee:	f043 0301 	orr.w	r3, r3, #1
 8012bf2:	b21a      	sxth	r2, r3
 8012bf4:	4b16      	ldr	r3, [pc, #88]	; (8012c50 <Update_Blink+0x8dc>)
 8012bf6:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012bf8:	e2b1      	b.n	801315e <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012bfa:	4b15      	ldr	r3, [pc, #84]	; (8012c50 <Update_Blink+0x8dc>)
 8012bfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c00:	f023 0301 	bic.w	r3, r3, #1
 8012c04:	b21a      	sxth	r2, r3
 8012c06:	4b12      	ldr	r3, [pc, #72]	; (8012c50 <Update_Blink+0x8dc>)
 8012c08:	811a      	strh	r2, [r3, #8]
      break;
 8012c0a:	e2a8      	b.n	801315e <Update_Blink+0xdea>

    case TR_TYPE:
      if(Twink) ParamTab[VTF] |=  D_HID;
 8012c0c:	4b0d      	ldr	r3, [pc, #52]	; (8012c44 <Update_Blink+0x8d0>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d008      	beq.n	8012c28 <Update_Blink+0x8b4>
 8012c16:	4b0e      	ldr	r3, [pc, #56]	; (8012c50 <Update_Blink+0x8dc>)
 8012c18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c1c:	f043 0301 	orr.w	r3, r3, #1
 8012c20:	b21a      	sxth	r2, r3
 8012c22:	4b0b      	ldr	r3, [pc, #44]	; (8012c50 <Update_Blink+0x8dc>)
 8012c24:	811a      	strh	r2, [r3, #8]
      else      ParamTab[VTF] &= ~D_HID;
      break;
 8012c26:	e29a      	b.n	801315e <Update_Blink+0xdea>
      else      ParamTab[VTF] &= ~D_HID;
 8012c28:	4b09      	ldr	r3, [pc, #36]	; (8012c50 <Update_Blink+0x8dc>)
 8012c2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012c2e:	f023 0301 	bic.w	r3, r3, #1
 8012c32:	b21a      	sxth	r2, r3
 8012c34:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <Update_Blink+0x8dc>)
 8012c36:	811a      	strh	r2, [r3, #8]
      break;
 8012c38:	e291      	b.n	801315e <Update_Blink+0xdea>
 8012c3a:	bf00      	nop
 8012c3c:	08001ce8 	.word	0x08001ce8
 8012c40:	20002834 	.word	0x20002834
 8012c44:	2000077c 	.word	0x2000077c
 8012c48:	08000960 	.word	0x08000960
 8012c4c:	0800097c 	.word	0x0800097c
 8012c50:	20000140 	.word	0x20000140
 8012c54:	2000079c 	.word	0x2000079c
 8012c58:	0800215c 	.word	0x0800215c
 8012c5c:	20000298 	.word	0x20000298
 8012c60:	08000988 	.word	0x08000988
 8012c64:	0800098c 	.word	0x0800098c
 8012c68:	08002130 	.word	0x08002130
 8012c6c:	08002108 	.word	0x08002108
 8012c70:	08001d00 	.word	0x08001d00
 8012c74:	08000990 	.word	0x08000990
 8012c78:	08000998 	.word	0x08000998
 8012c7c:	0800099c 	.word	0x0800099c
 8012c80:	0800095c 	.word	0x0800095c

    case EXT_REFN:
      SetColor(GRY, TCOLOR[EX]);
 8012c84:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012c88:	4619      	mov	r1, r3
 8012c8a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012c8e:	f7fa ff59 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012c92:	4b93      	ldr	r3, [pc, #588]	; (8012ee0 <Update_Blink+0xb6c>)
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	b2d8      	uxtb	r0, r3
 8012c98:	89bb      	ldrh	r3, [r7, #12]
 8012c9a:	4a92      	ldr	r2, [pc, #584]	; (8012ee4 <Update_Blink+0xb70>)
 8012c9c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	3b03      	subs	r3, #3
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	b219      	sxth	r1, r3
 8012ca8:	231e      	movs	r3, #30
 8012caa:	9301      	str	r3, [sp, #4]
 8012cac:	2301      	movs	r3, #1
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	230b      	movs	r3, #11
 8012cb2:	22e1      	movs	r2, #225	; 0xe1
 8012cb4:	f7fb f834 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012cb8:	89bb      	ldrh	r3, [r7, #12]
 8012cba:	4a8a      	ldr	r2, [pc, #552]	; (8012ee4 <Update_Blink+0xb70>)
 8012cbc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012cc0:	4b87      	ldr	r3, [pc, #540]	; (8012ee0 <Update_Blink+0xb6c>)
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	4b88      	ldr	r3, [pc, #544]	; (8012ee8 <Update_Blink+0xb74>)
 8012cc8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00a      	beq.n	8012ce6 <Update_Blink+0x972>
 8012cd0:	4b85      	ldr	r3, [pc, #532]	; (8012ee8 <Update_Blink+0xb74>)
 8012cd2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	460b      	mov	r3, r1
 8012cda:	005b      	lsls	r3, r3, #1
 8012cdc:	440b      	add	r3, r1
 8012cde:	005b      	lsls	r3, r3, #1
 8012ce0:	4982      	ldr	r1, [pc, #520]	; (8012eec <Update_Blink+0xb78>)
 8012ce2:	440b      	add	r3, r1
 8012ce4:	e000      	b.n	8012ce8 <Update_Blink+0x974>
 8012ce6:	4b82      	ldr	r3, [pc, #520]	; (8012ef0 <Update_Blink+0xb7c>)
 8012ce8:	21e1      	movs	r1, #225	; 0xe1
 8012cea:	f7fa ff43 	bl	800db74 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012cee:	4b81      	ldr	r3, [pc, #516]	; (8012ef4 <Update_Blink+0xb80>)
 8012cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012cf4:	f023 0301 	bic.w	r3, r3, #1
 8012cf8:	b21a      	sxth	r2, r3
 8012cfa:	4b7e      	ldr	r3, [pc, #504]	; (8012ef4 <Update_Blink+0xb80>)
 8012cfc:	805a      	strh	r2, [r3, #2]
      break;
 8012cfe:	e22e      	b.n	801315e <Update_Blink+0xdea>

    case EXT_POSI:
      if(Twink) ParamTab[P2F] |=  D_HID;
 8012d00:	4b77      	ldr	r3, [pc, #476]	; (8012ee0 <Update_Blink+0xb6c>)
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d008      	beq.n	8012d1c <Update_Blink+0x9a8>
 8012d0a:	4b7a      	ldr	r3, [pc, #488]	; (8012ef4 <Update_Blink+0xb80>)
 8012d0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d10:	f043 0301 	orr.w	r3, r3, #1
 8012d14:	b21a      	sxth	r2, r3
 8012d16:	4b77      	ldr	r3, [pc, #476]	; (8012ef4 <Update_Blink+0xb80>)
 8012d18:	805a      	strh	r2, [r3, #2]
      else      ParamTab[P2F] &= ~D_HID;
      break;
 8012d1a:	e220      	b.n	801315e <Update_Blink+0xdea>
      else      ParamTab[P2F] &= ~D_HID;
 8012d1c:	4b75      	ldr	r3, [pc, #468]	; (8012ef4 <Update_Blink+0xb80>)
 8012d1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d22:	f023 0301 	bic.w	r3, r3, #1
 8012d26:	b21a      	sxth	r2, r3
 8012d28:	4b72      	ldr	r3, [pc, #456]	; (8012ef4 <Update_Blink+0xb80>)
 8012d2a:	805a      	strh	r2, [r3, #2]
      break;
 8012d2c:	e217      	b.n	801315e <Update_Blink+0xdea>

    case EXT_HIDE:
      SetColor(GRY, TCOLOR[EX]);
 8012d2e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8012d32:	4619      	mov	r1, r3
 8012d34:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012d38:	f7fa ff04 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, TITLE_Y_POS, 11, 1, 6*5);
 8012d3c:	4b68      	ldr	r3, [pc, #416]	; (8012ee0 <Update_Blink+0xb6c>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	b2d8      	uxtb	r0, r3
 8012d42:	89bb      	ldrh	r3, [r7, #12]
 8012d44:	4a67      	ldr	r2, [pc, #412]	; (8012ee4 <Update_Blink+0xb70>)
 8012d46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	3b03      	subs	r3, #3
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	b219      	sxth	r1, r3
 8012d52:	231e      	movs	r3, #30
 8012d54:	9301      	str	r3, [sp, #4]
 8012d56:	2301      	movs	r3, #1
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	230b      	movs	r3, #11
 8012d5c:	22e1      	movs	r2, #225	; 0xe1
 8012d5e:	f7fa ffdf 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i], TITLE_Y_POS, Twink, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 8012d62:	89bb      	ldrh	r3, [r7, #12]
 8012d64:	4a5f      	ldr	r2, [pc, #380]	; (8012ee4 <Update_Blink+0xb70>)
 8012d66:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012d6a:	4b5d      	ldr	r3, [pc, #372]	; (8012ee0 <Update_Blink+0xb6c>)
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	b2da      	uxtb	r2, r3
 8012d70:	4b5d      	ldr	r3, [pc, #372]	; (8012ee8 <Update_Blink+0xb74>)
 8012d72:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00a      	beq.n	8012d90 <Update_Blink+0xa1c>
 8012d7a:	4b5b      	ldr	r3, [pc, #364]	; (8012ee8 <Update_Blink+0xb74>)
 8012d7c:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8012d80:	4619      	mov	r1, r3
 8012d82:	460b      	mov	r3, r1
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	440b      	add	r3, r1
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4958      	ldr	r1, [pc, #352]	; (8012eec <Update_Blink+0xb78>)
 8012d8c:	440b      	add	r3, r1
 8012d8e:	e000      	b.n	8012d92 <Update_Blink+0xa1e>
 8012d90:	4b57      	ldr	r3, [pc, #348]	; (8012ef0 <Update_Blink+0xb7c>)
 8012d92:	21e1      	movs	r1, #225	; 0xe1
 8012d94:	f7fa feee 	bl	800db74 <DispStr>
      ParamTab[P2F] &= ~D_HID;
 8012d98:	4b56      	ldr	r3, [pc, #344]	; (8012ef4 <Update_Blink+0xb80>)
 8012d9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d9e:	f023 0301 	bic.w	r3, r3, #1
 8012da2:	b21a      	sxth	r2, r3
 8012da4:	4b53      	ldr	r3, [pc, #332]	; (8012ef4 <Update_Blink+0xb80>)
 8012da6:	805a      	strh	r2, [r3, #2]
      break;
 8012da8:	e1d9      	b.n	801315e <Update_Blink+0xdea>

    case TPYE_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012daa:	f240 531f 	movw	r3, #1311	; 0x51f
 8012dae:	4619      	mov	r1, r3
 8012db0:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012db4:	f7fa fec6 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[TPYE_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012db8:	4b49      	ldr	r3, [pc, #292]	; (8012ee0 <Update_Blink+0xb6c>)
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	b2d8      	uxtb	r0, r3
 8012dbe:	2307      	movs	r3, #7
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	3b03      	subs	r3, #3
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	b219      	sxth	r1, r3
 8012dc8:	2336      	movs	r3, #54	; 0x36
 8012dca:	9301      	str	r3, [sp, #4]
 8012dcc:	2300      	movs	r3, #0
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	230b      	movs	r3, #11
 8012dd2:	2203      	movs	r2, #3
 8012dd4:	f7fa ffa4 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012dd8:	89bb      	ldrh	r3, [r7, #12]
 8012dda:	4a42      	ldr	r2, [pc, #264]	; (8012ee4 <Update_Blink+0xb70>)
 8012ddc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012de0:	4b3f      	ldr	r3, [pc, #252]	; (8012ee0 <Update_Blink+0xb6c>)
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	4b44      	ldr	r3, [pc, #272]	; (8012ef8 <Update_Blink+0xb84>)
 8012de8:	2103      	movs	r1, #3
 8012dea:	f7fa fec3 	bl	800db74 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012dee:	89bb      	ldrh	r3, [r7, #12]
 8012df0:	4a3c      	ldr	r2, [pc, #240]	; (8012ee4 <Update_Blink+0xb70>)
 8012df2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	3318      	adds	r3, #24
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	b218      	sxth	r0, r3
 8012dfe:	4b38      	ldr	r3, [pc, #224]	; (8012ee0 <Update_Blink+0xb6c>)
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	b2da      	uxtb	r2, r3
 8012e04:	4b3d      	ldr	r3, [pc, #244]	; (8012efc <Update_Blink+0xb88>)
 8012e06:	2103      	movs	r1, #3
 8012e08:	f7fa feb4 	bl	800db74 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)OT[List[i].Val]);
 8012e0c:	89bb      	ldrh	r3, [r7, #12]
 8012e0e:	4a35      	ldr	r2, [pc, #212]	; (8012ee4 <Update_Blink+0xb70>)
 8012e10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	3318      	adds	r3, #24
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	b218      	sxth	r0, r3
 8012e1c:	4b30      	ldr	r3, [pc, #192]	; (8012ee0 <Update_Blink+0xb6c>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	b2da      	uxtb	r2, r3
 8012e22:	89bb      	ldrh	r3, [r7, #12]
 8012e24:	4930      	ldr	r1, [pc, #192]	; (8012ee8 <Update_Blink+0xb74>)
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	440b      	add	r3, r1
 8012e2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	460b      	mov	r3, r1
 8012e32:	005b      	lsls	r3, r3, #1
 8012e34:	440b      	add	r3, r1
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	4931      	ldr	r1, [pc, #196]	; (8012f00 <Update_Blink+0xb8c>)
 8012e3a:	440b      	add	r3, r1
 8012e3c:	2103      	movs	r1, #3
 8012e3e:	f7fa fe99 	bl	800db74 <DispStr>
      break;
 8012e42:	e18c      	b.n	801315e <Update_Blink+0xdea>

    case FREQ_OUT:
      SetColor(GRY, TCOLOR[SN]);
 8012e44:	f240 531f 	movw	r3, #1311	; 0x51f
 8012e48:	4619      	mov	r1, r3
 8012e4a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012e4e:	f7fa fe79 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[FREQ_OUT]-3, LABLE_Y, 11, 0, 6*9);
 8012e52:	4b23      	ldr	r3, [pc, #140]	; (8012ee0 <Update_Blink+0xb6c>)
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	b2d8      	uxtb	r0, r3
 8012e58:	2307      	movs	r3, #7
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	3b03      	subs	r3, #3
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	b219      	sxth	r1, r3
 8012e62:	2336      	movs	r3, #54	; 0x36
 8012e64:	9301      	str	r3, [sp, #4]
 8012e66:	2300      	movs	r3, #0
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	230b      	movs	r3, #11
 8012e6c:	2203      	movs	r2, #3
 8012e6e:	f7fa ff57 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "FO: ");
 8012e72:	89bb      	ldrh	r3, [r7, #12]
 8012e74:	4a1b      	ldr	r2, [pc, #108]	; (8012ee4 <Update_Blink+0xb70>)
 8012e76:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012e7a:	4b19      	ldr	r3, [pc, #100]	; (8012ee0 <Update_Blink+0xb6c>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	4b1d      	ldr	r3, [pc, #116]	; (8012ef8 <Update_Blink+0xb84>)
 8012e82:	2103      	movs	r1, #3
 8012e84:	f7fa fe76 	bl	800db74 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, "     ");
 8012e88:	89bb      	ldrh	r3, [r7, #12]
 8012e8a:	4a16      	ldr	r2, [pc, #88]	; (8012ee4 <Update_Blink+0xb70>)
 8012e8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	3318      	adds	r3, #24
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	b218      	sxth	r0, r3
 8012e98:	4b11      	ldr	r3, [pc, #68]	; (8012ee0 <Update_Blink+0xb6c>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	4b17      	ldr	r3, [pc, #92]	; (8012efc <Update_Blink+0xb88>)
 8012ea0:	2103      	movs	r1, #3
 8012ea2:	f7fa fe67 	bl	800db74 <DispStr>
      DispStr(S_X[i]+24, LABLE_Y, Twink, (char*)Q[List[i].Val]);
 8012ea6:	89bb      	ldrh	r3, [r7, #12]
 8012ea8:	4a0e      	ldr	r2, [pc, #56]	; (8012ee4 <Update_Blink+0xb70>)
 8012eaa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	3318      	adds	r3, #24
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	b218      	sxth	r0, r3
 8012eb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ee0 <Update_Blink+0xb6c>)
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	89bb      	ldrh	r3, [r7, #12]
 8012ebe:	490a      	ldr	r1, [pc, #40]	; (8012ee8 <Update_Blink+0xb74>)
 8012ec0:	00db      	lsls	r3, r3, #3
 8012ec2:	440b      	add	r3, r1
 8012ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012ec8:	4619      	mov	r1, r3
 8012eca:	460b      	mov	r3, r1
 8012ecc:	005b      	lsls	r3, r3, #1
 8012ece:	440b      	add	r3, r1
 8012ed0:	005b      	lsls	r3, r3, #1
 8012ed2:	490c      	ldr	r1, [pc, #48]	; (8012f04 <Update_Blink+0xb90>)
 8012ed4:	440b      	add	r3, r1
 8012ed6:	2103      	movs	r1, #3
 8012ed8:	f7fa fe4c 	bl	800db74 <DispStr>
      break;
 8012edc:	e13f      	b.n	801315e <Update_Blink+0xdea>
 8012ede:	bf00      	nop
 8012ee0:	2000077c 	.word	0x2000077c
 8012ee4:	0800215c 	.word	0x0800215c
 8012ee8:	20000298 	.word	0x20000298
 8012eec:	08001c88 	.word	0x08001c88
 8012ef0:	08001cac 	.word	0x08001cac
 8012ef4:	20000140 	.word	0x20000140
 8012ef8:	080009a0 	.word	0x080009a0
 8012efc:	08000990 	.word	0x08000990
 8012f00:	08001d50 	.word	0x08001d50
 8012f04:	08001e98 	.word	0x08001e98

    case FREQ_DUT:
      SetColor(GRY, TCOLOR[SN]);
 8012f08:	f240 531f 	movw	r3, #1311	; 0x51f
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012f12:	f7fa fe17 	bl	800db44 <SetColor>
      Value2Str(NumStr, List[i].Val*10, List[i].PTR, 2, UNSIGN);
 8012f16:	89bb      	ldrh	r3, [r7, #12]
 8012f18:	4a96      	ldr	r2, [pc, #600]	; (8013174 <Update_Blink+0xe00>)
 8012f1a:	00db      	lsls	r3, r3, #3
 8012f1c:	4413      	add	r3, r2
 8012f1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012f22:	461a      	mov	r2, r3
 8012f24:	4613      	mov	r3, r2
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	4413      	add	r3, r2
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	89bb      	ldrh	r3, [r7, #12]
 8012f30:	4a90      	ldr	r2, [pc, #576]	; (8013174 <Update_Blink+0xe00>)
 8012f32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012f36:	2301      	movs	r3, #1
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	2302      	movs	r3, #2
 8012f3c:	488e      	ldr	r0, [pc, #568]	; (8013178 <Update_Blink+0xe04>)
 8012f3e:	f7fe fcf1 	bl	8011924 <Value2Str>
      Draw_Circle_D(Twink, S_X[FREQ_DUT]-3, LABLE_Y, 11, 0, 6*9);
 8012f42:	4b8e      	ldr	r3, [pc, #568]	; (801317c <Update_Blink+0xe08>)
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	b2d8      	uxtb	r0, r3
 8012f48:	2307      	movs	r3, #7
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	3b03      	subs	r3, #3
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	b219      	sxth	r1, r3
 8012f52:	2336      	movs	r3, #54	; 0x36
 8012f54:	9301      	str	r3, [sp, #4]
 8012f56:	2300      	movs	r3, #0
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	230b      	movs	r3, #11
 8012f5c:	2203      	movs	r2, #3
 8012f5e:	f7fa fedf 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink, "Duty: ");
 8012f62:	89bb      	ldrh	r3, [r7, #12]
 8012f64:	4a86      	ldr	r2, [pc, #536]	; (8013180 <Update_Blink+0xe0c>)
 8012f66:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8012f6a:	4b84      	ldr	r3, [pc, #528]	; (801317c <Update_Blink+0xe08>)
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	b2da      	uxtb	r2, r3
 8012f70:	4b84      	ldr	r3, [pc, #528]	; (8013184 <Update_Blink+0xe10>)
 8012f72:	2103      	movs	r1, #3
 8012f74:	f7fa fdfe 	bl	800db74 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, "   ");
 8012f78:	89bb      	ldrh	r3, [r7, #12]
 8012f7a:	4a81      	ldr	r2, [pc, #516]	; (8013180 <Update_Blink+0xe0c>)
 8012f7c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	3324      	adds	r3, #36	; 0x24
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	b218      	sxth	r0, r3
 8012f88:	4b7c      	ldr	r3, [pc, #496]	; (801317c <Update_Blink+0xe08>)
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	b2da      	uxtb	r2, r3
 8012f8e:	4b7e      	ldr	r3, [pc, #504]	; (8013188 <Update_Blink+0xe14>)
 8012f90:	2103      	movs	r1, #3
 8012f92:	f7fa fdef 	bl	800db74 <DispStr>
      DispStr(S_X[i]+36, LABLE_Y, Twink, (char *)NumStr);
 8012f96:	89bb      	ldrh	r3, [r7, #12]
 8012f98:	4a79      	ldr	r2, [pc, #484]	; (8013180 <Update_Blink+0xe0c>)
 8012f9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	3324      	adds	r3, #36	; 0x24
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	b218      	sxth	r0, r3
 8012fa6:	4b75      	ldr	r3, [pc, #468]	; (801317c <Update_Blink+0xe08>)
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	b2da      	uxtb	r2, r3
 8012fac:	4b72      	ldr	r3, [pc, #456]	; (8013178 <Update_Blink+0xe04>)
 8012fae:	2103      	movs	r1, #3
 8012fb0:	f7fa fde0 	bl	800db74 <DispStr>
      break;
 8012fb4:	e0d3      	b.n	801315e <Update_Blink+0xdea>

    case AUTO_CAL:
      if(Twink) ParamTab[P1F] |=  W_HID;
 8012fb6:	4b71      	ldr	r3, [pc, #452]	; (801317c <Update_Blink+0xe08>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d008      	beq.n	8012fd2 <Update_Blink+0xc5e>
 8012fc0:	4b72      	ldr	r3, [pc, #456]	; (801318c <Update_Blink+0xe18>)
 8012fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fc6:	f043 0304 	orr.w	r3, r3, #4
 8012fca:	b21a      	sxth	r2, r3
 8012fcc:	4b6f      	ldr	r3, [pc, #444]	; (801318c <Update_Blink+0xe18>)
 8012fce:	801a      	strh	r2, [r3, #0]
 8012fd0:	e007      	b.n	8012fe2 <Update_Blink+0xc6e>
      else      ParamTab[P1F] &= ~W_HID;
 8012fd2:	4b6e      	ldr	r3, [pc, #440]	; (801318c <Update_Blink+0xe18>)
 8012fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fd8:	f023 0304 	bic.w	r3, r3, #4
 8012fdc:	b21a      	sxth	r2, r3
 8012fde:	4b6b      	ldr	r3, [pc, #428]	; (801318c <Update_Blink+0xe18>)
 8012fe0:	801a      	strh	r2, [r3, #0]

      SetColor(GRY, TCOLOR[ST]);
 8012fe2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8012fec:	f7fa fdaa 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8012ff0:	4b62      	ldr	r3, [pc, #392]	; (801317c <Update_Blink+0xe08>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	b2d8      	uxtb	r0, r3
 8012ff6:	89bb      	ldrh	r3, [r7, #12]
 8012ff8:	4a61      	ldr	r2, [pc, #388]	; (8013180 <Update_Blink+0xe0c>)
 8012ffa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	3b03      	subs	r3, #3
 8013002:	b29b      	uxth	r3, r3
 8013004:	b219      	sxth	r1, r3
 8013006:	2336      	movs	r3, #54	; 0x36
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	2300      	movs	r3, #0
 801300c:	9300      	str	r3, [sp, #0]
 801300e:	230b      	movs	r3, #11
 8013010:	2203      	movs	r2, #3
 8013012:	f7fa fe85 	bl	800dd20 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013016:	89bb      	ldrh	r3, [r7, #12]
 8013018:	4a59      	ldr	r2, [pc, #356]	; (8013180 <Update_Blink+0xe0c>)
 801301a:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801301e:	4b57      	ldr	r3, [pc, #348]	; (801317c <Update_Blink+0xe08>)
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	b2da      	uxtb	r2, r3
 8013024:	4b5a      	ldr	r3, [pc, #360]	; (8013190 <Update_Blink+0xe1c>)
 8013026:	2103      	movs	r1, #3
 8013028:	f7fa fda4 	bl	800db74 <DispStr>
      DispStr(S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801302c:	89bb      	ldrh	r3, [r7, #12]
 801302e:	4a54      	ldr	r2, [pc, #336]	; (8013180 <Update_Blink+0xe0c>)
 8013030:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013034:	b29b      	uxth	r3, r3
 8013036:	3328      	adds	r3, #40	; 0x28
 8013038:	b29b      	uxth	r3, r3
 801303a:	b218      	sxth	r0, r3
 801303c:	4b4f      	ldr	r3, [pc, #316]	; (801317c <Update_Blink+0xe08>)
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	b2db      	uxtb	r3, r3
 8013042:	3310      	adds	r3, #16
 8013044:	b2da      	uxtb	r2, r3
 8013046:	4b53      	ldr	r3, [pc, #332]	; (8013194 <Update_Blink+0xe20>)
 8013048:	2103      	movs	r1, #3
 801304a:	f7fa fd93 	bl	800db74 <DispStr>
      break;
 801304e:	e086      	b.n	801315e <Update_Blink+0xdea>

    case RESTORE:
      SetColor(GRY, TCOLOR[ST]);
 8013050:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013054:	4619      	mov	r1, r3
 8013056:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801305a:	f7fa fd73 	bl	800db44 <SetColor>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 801305e:	4b47      	ldr	r3, [pc, #284]	; (801317c <Update_Blink+0xe08>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	b2d8      	uxtb	r0, r3
 8013064:	89bb      	ldrh	r3, [r7, #12]
 8013066:	4a46      	ldr	r2, [pc, #280]	; (8013180 <Update_Blink+0xe0c>)
 8013068:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801306c:	b29b      	uxth	r3, r3
 801306e:	3b03      	subs	r3, #3
 8013070:	b29b      	uxth	r3, r3
 8013072:	b219      	sxth	r1, r3
 8013074:	2336      	movs	r3, #54	; 0x36
 8013076:	9301      	str	r3, [sp, #4]
 8013078:	2300      	movs	r3, #0
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	230b      	movs	r3, #11
 801307e:	2203      	movs	r2, #3
 8013080:	f7fa fe4e 	bl	800dd20 <Draw_Circle_D>
      DispStr( S_X[i]+0, LABLE_Y, Twink+PRN,  "Press:   ");
 8013084:	89bb      	ldrh	r3, [r7, #12]
 8013086:	4a3e      	ldr	r2, [pc, #248]	; (8013180 <Update_Blink+0xe0c>)
 8013088:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801308c:	4b3b      	ldr	r3, [pc, #236]	; (801317c <Update_Blink+0xe08>)
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	b2da      	uxtb	r2, r3
 8013092:	4b3f      	ldr	r3, [pc, #252]	; (8013190 <Update_Blink+0xe1c>)
 8013094:	2103      	movs	r1, #3
 8013096:	f7fa fd6d 	bl	800db74 <DispStr>
      DispStr( S_X[i]+40, LABLE_Y, Twink+SYMB, "{|");//������ͣͼ��
 801309a:	89bb      	ldrh	r3, [r7, #12]
 801309c:	4a38      	ldr	r2, [pc, #224]	; (8013180 <Update_Blink+0xe0c>)
 801309e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	3328      	adds	r3, #40	; 0x28
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	b218      	sxth	r0, r3
 80130aa:	4b34      	ldr	r3, [pc, #208]	; (801317c <Update_Blink+0xe08>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	3310      	adds	r3, #16
 80130b2:	b2da      	uxtb	r2, r3
 80130b4:	4b37      	ldr	r3, [pc, #220]	; (8013194 <Update_Blink+0xe20>)
 80130b6:	2103      	movs	r1, #3
 80130b8:	f7fa fd5c 	bl	800db74 <DispStr>
      break;
 80130bc:	e04f      	b.n	801315e <Update_Blink+0xdea>

    case STANDBY:
      SetColor(GRY, TCOLOR[ST]);
 80130be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80130c2:	4619      	mov	r1, r3
 80130c4:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80130c8:	f7fa fd3c 	bl	800db44 <SetColor>
      Value2Str(NumStr, List[STANDBY].Val, NSTR[0], 2, UNSIGN);
 80130cc:	4b29      	ldr	r3, [pc, #164]	; (8013174 <Update_Blink+0xe00>)
 80130ce:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80130d2:	4619      	mov	r1, r3
 80130d4:	2301      	movs	r3, #1
 80130d6:	9300      	str	r3, [sp, #0]
 80130d8:	2302      	movs	r3, #2
 80130da:	4a2f      	ldr	r2, [pc, #188]	; (8013198 <Update_Blink+0xe24>)
 80130dc:	4826      	ldr	r0, [pc, #152]	; (8013178 <Update_Blink+0xe04>)
 80130de:	f7fe fc21 	bl	8011924 <Value2Str>
      Draw_Circle_D(Twink, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 80130e2:	4b26      	ldr	r3, [pc, #152]	; (801317c <Update_Blink+0xe08>)
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	b2d8      	uxtb	r0, r3
 80130e8:	89bb      	ldrh	r3, [r7, #12]
 80130ea:	4a25      	ldr	r2, [pc, #148]	; (8013180 <Update_Blink+0xe0c>)
 80130ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	3b03      	subs	r3, #3
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	b219      	sxth	r1, r3
 80130f8:	2336      	movs	r3, #54	; 0x36
 80130fa:	9301      	str	r3, [sp, #4]
 80130fc:	2300      	movs	r3, #0
 80130fe:	9300      	str	r3, [sp, #0]
 8013100:	230b      	movs	r3, #11
 8013102:	2203      	movs	r2, #3
 8013104:	f7fa fe0c 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[i],    LABLE_Y, Twink+PRN,  " ");
 8013108:	89bb      	ldrh	r3, [r7, #12]
 801310a:	4a1d      	ldr	r2, [pc, #116]	; (8013180 <Update_Blink+0xe0c>)
 801310c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013110:	4b1a      	ldr	r3, [pc, #104]	; (801317c <Update_Blink+0xe08>)
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	b2da      	uxtb	r2, r3
 8013116:	4b21      	ldr	r3, [pc, #132]	; (801319c <Update_Blink+0xe28>)
 8013118:	2103      	movs	r1, #3
 801311a:	f7fa fd2b 	bl	800db74 <DispStr>
      DispStr(S_X[i]+6, LABLE_Y, Twink+PRN,  (char *)NumStr);
 801311e:	89bb      	ldrh	r3, [r7, #12]
 8013120:	4a17      	ldr	r2, [pc, #92]	; (8013180 <Update_Blink+0xe0c>)
 8013122:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013126:	b29b      	uxth	r3, r3
 8013128:	3306      	adds	r3, #6
 801312a:	b29b      	uxth	r3, r3
 801312c:	b218      	sxth	r0, r3
 801312e:	4b13      	ldr	r3, [pc, #76]	; (801317c <Update_Blink+0xe08>)
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	b2da      	uxtb	r2, r3
 8013134:	4b10      	ldr	r3, [pc, #64]	; (8013178 <Update_Blink+0xe04>)
 8013136:	2103      	movs	r1, #3
 8013138:	f7fa fd1c 	bl	800db74 <DispStr>
      DispStr(S_X[i]+30, LABLE_Y, Twink+PRN,  "min ");
 801313c:	89bb      	ldrh	r3, [r7, #12]
 801313e:	4a10      	ldr	r2, [pc, #64]	; (8013180 <Update_Blink+0xe0c>)
 8013140:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013144:	b29b      	uxth	r3, r3
 8013146:	331e      	adds	r3, #30
 8013148:	b29b      	uxth	r3, r3
 801314a:	b218      	sxth	r0, r3
 801314c:	4b0b      	ldr	r3, [pc, #44]	; (801317c <Update_Blink+0xe08>)
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	b2da      	uxtb	r2, r3
 8013152:	4b13      	ldr	r3, [pc, #76]	; (80131a0 <Update_Blink+0xe2c>)
 8013154:	2103      	movs	r1, #3
 8013156:	f7fa fd0d 	bl	800db74 <DispStr>
      break;
 801315a:	e000      	b.n	801315e <Update_Blink+0xdea>
      break;
 801315c:	bf00      	nop

    }
    if(i != V0_POSI)  ParamTab[P1F]   = L_HID ;//0513
 801315e:	89bb      	ldrh	r3, [r7, #12]
 8013160:	2b03      	cmp	r3, #3
 8013162:	d002      	beq.n	801316a <Update_Blink+0xdf6>
 8013164:	4b09      	ldr	r3, [pc, #36]	; (801318c <Update_Blink+0xe18>)
 8013166:	2202      	movs	r2, #2
 8013168:	801a      	strh	r2, [r3, #0]
  }
}
 801316a:	bf00      	nop
 801316c:	3714      	adds	r7, #20
 801316e:	46bd      	mov	sp, r7
 8013170:	bd90      	pop	{r4, r7, pc}
 8013172:	bf00      	nop
 8013174:	20000298 	.word	0x20000298
 8013178:	20002834 	.word	0x20002834
 801317c:	2000077c 	.word	0x2000077c
 8013180:	0800215c 	.word	0x0800215c
 8013184:	080009a8 	.word	0x080009a8
 8013188:	080009b0 	.word	0x080009b0
 801318c:	20000140 	.word	0x20000140
 8013190:	080009b4 	.word	0x080009b4
 8013194:	080009c0 	.word	0x080009c0
 8013198:	20000548 	.word	0x20000548
 801319c:	080009c4 	.word	0x080009c4
 80131a0:	080009c8 	.word	0x080009c8

080131a4 <Update_Detail>:
/*******************************************************************************
 Update_Detail:
*******************************************************************************/
void Update_Detail(void)
{
 80131a4:	b590      	push	{r4, r7, lr}
 80131a6:	b089      	sub	sp, #36	; 0x24
 80131a8:	af02      	add	r7, sp, #8
  long scale = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	60bb      	str	r3, [r7, #8]
  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 80131ae:	4ba9      	ldr	r3, [pc, #676]	; (8013454 <Update_Detail+0x2b0>)
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	4ba9      	ldr	r3, [pc, #676]	; (8013458 <Update_Detail+0x2b4>)
 80131b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131b8:	4619      	mov	r1, r3
 80131ba:	4ba8      	ldr	r3, [pc, #672]	; (801345c <Update_Detail+0x2b8>)
 80131bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	bf14      	ite	ne
 80131c4:	2301      	movne	r3, #1
 80131c6:	2300      	moveq	r3, #0
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	440b      	add	r3, r1
 80131cc:	005b      	lsls	r3, r3, #1
 80131ce:	4413      	add	r3, r2
 80131d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	4aa2      	ldr	r2, [pc, #648]	; (8013460 <Update_Detail+0x2bc>)
 80131d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80131dc:	4611      	mov	r1, r2
 80131de:	4aa1      	ldr	r2, [pc, #644]	; (8013464 <Update_Detail+0x2c0>)
 80131e0:	5c52      	ldrb	r2, [r2, r1]
 80131e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80131e6:	607b      	str	r3, [r7, #4]
  unsigned short i, k = HighT+LowT;
 80131e8:	4b9f      	ldr	r3, [pc, #636]	; (8013468 <Update_Detail+0x2c4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	4b9f      	ldr	r3, [pc, #636]	; (801346c <Update_Detail+0x2c8>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4413      	add	r3, r2
 80131f6:	807b      	strh	r3, [r7, #2]
  long Tmp = 0;
 80131f8:	2300      	movs	r3, #0
 80131fa:	613b      	str	r3, [r7, #16]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80131fc:	4b9c      	ldr	r3, [pc, #624]	; (8013470 <Update_Detail+0x2cc>)
 80131fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013202:	b29a      	uxth	r2, r3
 8013204:	4b9a      	ldr	r3, [pc, #616]	; (8013470 <Update_Detail+0x2cc>)
 8013206:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801320a:	b29b      	uxth	r3, r3
 801320c:	4619      	mov	r1, r3
 801320e:	0089      	lsls	r1, r1, #2
 8013210:	440b      	add	r3, r1
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	b29b      	uxth	r3, r3
 8013216:	4413      	add	r3, r2
 8013218:	b29b      	uxth	r3, r3
 801321a:	803b      	strh	r3, [r7, #0]
  unsigned long FTmp;

  for(i=Y_RANGES; i<=STANDBY; i++){
 801321c:	2300      	movs	r3, #0
 801321e:	82fb      	strh	r3, [r7, #22]
 8013220:	f000 bfb3 	b.w	801418a <Update_Detail+0xfe6>
    if(i==FREQUENC)
 8013224:	8afb      	ldrh	r3, [r7, #22]
 8013226:	2b13      	cmp	r3, #19
 8013228:	d118      	bne.n	801325c <Update_Detail+0xb8>
    {
      if(Freq_Cnt > 10){
 801322a:	4b92      	ldr	r3, [pc, #584]	; (8013474 <Update_Detail+0x2d0>)
 801322c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013230:	2b0a      	cmp	r3, #10
 8013232:	dd0a      	ble.n	801324a <Update_Detail+0xa6>
        Freq_Cnt = 0;
 8013234:	4b8f      	ldr	r3, [pc, #572]	; (8013474 <Update_Detail+0x2d0>)
 8013236:	2200      	movs	r2, #0
 8013238:	801a      	strh	r2, [r3, #0]
        Freq_Flag |= UPD;
 801323a:	4b8f      	ldr	r3, [pc, #572]	; (8013478 <Update_Detail+0x2d4>)
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	f043 0320 	orr.w	r3, r3, #32
 8013242:	b2da      	uxtb	r2, r3
 8013244:	4b8c      	ldr	r3, [pc, #560]	; (8013478 <Update_Detail+0x2d4>)
 8013246:	701a      	strb	r2, [r3, #0]
 8013248:	e008      	b.n	801325c <Update_Detail+0xb8>
      }
      else Freq_Cnt++;
 801324a:	4b8a      	ldr	r3, [pc, #552]	; (8013474 <Update_Detail+0x2d0>)
 801324c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013250:	b29b      	uxth	r3, r3
 8013252:	3301      	adds	r3, #1
 8013254:	b29b      	uxth	r3, r3
 8013256:	b21a      	sxth	r2, r3
 8013258:	4b86      	ldr	r3, [pc, #536]	; (8013474 <Update_Detail+0x2d0>)
 801325a:	801a      	strh	r2, [r3, #0]
    }

    if(List[i].Flg & UPD){
 801325c:	8afb      	ldrh	r3, [r7, #22]
 801325e:	4a84      	ldr	r2, [pc, #528]	; (8013470 <Update_Detail+0x2cc>)
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	4413      	add	r3, r2
 8013264:	799b      	ldrb	r3, [r3, #6]
 8013266:	f003 0320 	and.w	r3, r3, #32
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 878a 	beq.w	8014184 <Update_Detail+0xfe0>
      List[i].Flg &= ~UPD;
 8013270:	8afb      	ldrh	r3, [r7, #22]
 8013272:	4a7f      	ldr	r2, [pc, #508]	; (8013470 <Update_Detail+0x2cc>)
 8013274:	00db      	lsls	r3, r3, #3
 8013276:	4413      	add	r3, r2
 8013278:	799a      	ldrb	r2, [r3, #6]
 801327a:	8afb      	ldrh	r3, [r7, #22]
 801327c:	f022 0220 	bic.w	r2, r2, #32
 8013280:	b2d1      	uxtb	r1, r2
 8013282:	4a7b      	ldr	r2, [pc, #492]	; (8013470 <Update_Detail+0x2cc>)
 8013284:	00db      	lsls	r3, r3, #3
 8013286:	4413      	add	r3, r2
 8013288:	460a      	mov	r2, r1
 801328a:	719a      	strb	r2, [r3, #6]
      switch (i){
 801328c:	8afb      	ldrh	r3, [r7, #22]
 801328e:	2b29      	cmp	r3, #41	; 0x29
 8013290:	f200 8739 	bhi.w	8014106 <Update_Detail+0xf62>
 8013294:	a201      	add	r2, pc, #4	; (adr r2, 801329c <Update_Detail+0xf8>)
 8013296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801329a:	bf00      	nop
 801329c:	08013345 	.word	0x08013345
 80132a0:	08013345 	.word	0x08013345
 80132a4:	08013345 	.word	0x08013345
 80132a8:	08013345 	.word	0x08013345
 80132ac:	08013345 	.word	0x08013345
 80132b0:	08013345 	.word	0x08013345
 80132b4:	08013345 	.word	0x08013345
 80132b8:	08013b4d 	.word	0x08013b4d
 80132bc:	08013b4d 	.word	0x08013b4d
 80132c0:	08013b4d 	.word	0x08013b4d
 80132c4:	08013b4d 	.word	0x08013b4d
 80132c8:	08013b4d 	.word	0x08013b4d
 80132cc:	08013b4d 	.word	0x08013b4d
 80132d0:	080139e3 	.word	0x080139e3
 80132d4:	080139e3 	.word	0x080139e3
 80132d8:	080139e3 	.word	0x080139e3
 80132dc:	080139e3 	.word	0x080139e3
 80132e0:	080139e3 	.word	0x080139e3
 80132e4:	080139e3 	.word	0x080139e3
 80132e8:	08013da5 	.word	0x08013da5
 80132ec:	08013e19 	.word	0x08013e19
 80132f0:	08013e39 	.word	0x08013e39
 80132f4:	08013f3f 	.word	0x08013f3f
 80132f8:	08013eaf 	.word	0x08013eaf
 80132fc:	08013fc5 	.word	0x08013fc5
 8013300:	0801404b 	.word	0x0801404b
 8013304:	080138c7 	.word	0x080138c7
 8013308:	080138c7 	.word	0x080138c7
 801330c:	0801395f 	.word	0x0801395f
 8013310:	08013645 	.word	0x08013645
 8013314:	08013645 	.word	0x08013645
 8013318:	08013645 	.word	0x08013645
 801331c:	08013645 	.word	0x08013645
 8013320:	08013645 	.word	0x08013645
 8013324:	08013645 	.word	0x08013645
 8013328:	08013645 	.word	0x08013645
 801332c:	080136f5 	.word	0x080136f5
 8013330:	080137e1 	.word	0x080137e1
 8013334:	08013883 	.word	0x08013883
 8013338:	08014107 	.word	0x08014107
 801333c:	08014107 	.word	0x08014107
 8013340:	08014107 	.word	0x08014107
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
      case V1_POSI:    // ˢ����ʾ��λ�α�λ��
      case V2_POSI:    // ˢ����ʾ��λ�α�λ��
      case YN_TYPE:    // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[YN]);
 8013344:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8013348:	4619      	mov	r1, r3
 801334a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801334e:	f7fa fbf9 	bl	800db44 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT)
 8013352:	8afb      	ldrh	r3, [r7, #22]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d005      	beq.n	8013364 <Update_Detail+0x1c0>
 8013358:	8afb      	ldrh	r3, [r7, #22]
 801335a:	2b01      	cmp	r3, #1
 801335c:	d002      	beq.n	8013364 <Update_Detail+0x1c0>
 801335e:	8afb      	ldrh	r3, [r7, #22]
 8013360:	2b02      	cmp	r3, #2
 8013362:	d138      	bne.n	80133d6 <Update_Detail+0x232>
        {
      Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 8013364:	232f      	movs	r3, #47	; 0x2f
 8013366:	b29b      	uxth	r3, r3
 8013368:	3b03      	subs	r3, #3
 801336a:	b29b      	uxth	r3, r3
 801336c:	b219      	sxth	r1, r3
 801336e:	232a      	movs	r3, #42	; 0x2a
 8013370:	9301      	str	r3, [sp, #4]
 8013372:	2300      	movs	r3, #0
 8013374:	9300      	str	r3, [sp, #0]
 8013376:	230b      	movs	r3, #11
 8013378:	22e1      	movs	r2, #225	; 0xe1
 801337a:	2001      	movs	r0, #1
 801337c:	f7fa fcd0 	bl	800dd20 <Draw_Circle_D>
      DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 8013380:	202f      	movs	r0, #47	; 0x2f
 8013382:	4b3b      	ldr	r3, [pc, #236]	; (8013470 <Update_Detail+0x2cc>)
 8013384:	6819      	ldr	r1, [r3, #0]
 8013386:	f9b7 2000 	ldrsh.w	r2, [r7]
 801338a:	4613      	mov	r3, r2
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	440b      	add	r3, r1
 8013394:	2201      	movs	r2, #1
 8013396:	21e1      	movs	r1, #225	; 0xe1
 8013398:	f7fa fbec 	bl	800db74 <DispStr>
      DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 801339c:	2047      	movs	r0, #71	; 0x47
 801339e:	4b34      	ldr	r3, [pc, #208]	; (8013470 <Update_Detail+0x2cc>)
 80133a0:	689a      	ldr	r2, [r3, #8]
 80133a2:	4b33      	ldr	r3, [pc, #204]	; (8013470 <Update_Detail+0x2cc>)
 80133a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80133a8:	4619      	mov	r1, r3
 80133aa:	460b      	mov	r3, r1
 80133ac:	005b      	lsls	r3, r3, #1
 80133ae:	440b      	add	r3, r1
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	4413      	add	r3, r2
 80133b4:	2201      	movs	r2, #1
 80133b6:	21e1      	movs	r1, #225	; 0xe1
 80133b8:	f7fa fbdc 	bl	800db74 <DispStr>
      DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 80133bc:	2020      	movs	r0, #32
 80133be:	4b2c      	ldr	r3, [pc, #176]	; (8013470 <Update_Detail+0x2cc>)
 80133c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d001      	beq.n	80133cc <Update_Detail+0x228>
 80133c8:	4b2c      	ldr	r3, [pc, #176]	; (801347c <Update_Detail+0x2d8>)
 80133ca:	e000      	b.n	80133ce <Update_Detail+0x22a>
 80133cc:	4b2c      	ldr	r3, [pc, #176]	; (8013480 <Update_Detail+0x2dc>)
 80133ce:	2210      	movs	r2, #16
 80133d0:	21e1      	movs	r1, #225	; 0xe1
 80133d2:	f7fa fe37 	bl	800e044 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 80133d6:	4b26      	ldr	r3, [pc, #152]	; (8013470 <Update_Detail+0x2cc>)
 80133d8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80133dc:	3301      	adds	r3, #1
 80133de:	b29b      	uxth	r3, r3
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	b21a      	sxth	r2, r3
 80133e6:	4b27      	ldr	r3, [pc, #156]	; (8013484 <Update_Detail+0x2e0>)
 80133e8:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 80133ea:	4b26      	ldr	r3, [pc, #152]	; (8013484 <Update_Detail+0x2e0>)
 80133ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80133f0:	b29a      	uxth	r2, r3
 80133f2:	4b1f      	ldr	r3, [pc, #124]	; (8013470 <Update_Detail+0x2cc>)
 80133f4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 80133f8:	3301      	adds	r3, #1
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	005b      	lsls	r3, r3, #1
 80133fe:	b29b      	uxth	r3, r3
 8013400:	4413      	add	r3, r2
 8013402:	b29b      	uxth	r3, r3
 8013404:	b21a      	sxth	r2, r3
 8013406:	4b1f      	ldr	r3, [pc, #124]	; (8013484 <Update_Detail+0x2e0>)
 8013408:	839a      	strh	r2, [r3, #28]
        ParamTab[V1x2] = 2*(List[V1_POSI].Val+1);
 801340a:	4b19      	ldr	r3, [pc, #100]	; (8013470 <Update_Detail+0x2cc>)
 801340c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013410:	3301      	adds	r3, #1
 8013412:	b29b      	uxth	r3, r3
 8013414:	005b      	lsls	r3, r3, #1
 8013416:	b29b      	uxth	r3, r3
 8013418:	b21a      	sxth	r2, r3
 801341a:	4b1a      	ldr	r3, [pc, #104]	; (8013484 <Update_Detail+0x2e0>)
 801341c:	83da      	strh	r2, [r3, #30]
        ParamTab[V2x2] = 2*(List[V2_POSI].Val+1);
 801341e:	4b14      	ldr	r3, [pc, #80]	; (8013470 <Update_Detail+0x2cc>)
 8013420:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8013424:	3301      	adds	r3, #1
 8013426:	b29b      	uxth	r3, r3
 8013428:	005b      	lsls	r3, r3, #1
 801342a:	b29b      	uxth	r3, r3
 801342c:	b21a      	sxth	r2, r3
 801342e:	4b15      	ldr	r3, [pc, #84]	; (8013484 <Update_Detail+0x2e0>)
 8013430:	841a      	strh	r2, [r3, #32]
        ParamTab[V1F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8013432:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <Update_Detail+0x2cc>)
 8013434:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013438:	2b00      	cmp	r3, #0
 801343a:	d001      	beq.n	8013440 <Update_Detail+0x29c>
 801343c:	2202      	movs	r2, #2
 801343e:	e000      	b.n	8013442 <Update_Detail+0x29e>
 8013440:	2200      	movs	r2, #0
 8013442:	4b10      	ldr	r3, [pc, #64]	; (8013484 <Update_Detail+0x2e0>)
 8013444:	815a      	strh	r2, [r3, #10]
        ParamTab[V2F]  = (List[YN_TYPE].Val)? L_HID : SHOW;
 8013446:	4b0a      	ldr	r3, [pc, #40]	; (8013470 <Update_Detail+0x2cc>)
 8013448:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01b      	beq.n	8013488 <Update_Detail+0x2e4>
 8013450:	2202      	movs	r2, #2
 8013452:	e01a      	b.n	801348a <Update_Detail+0x2e6>
 8013454:	2000057c 	.word	0x2000057c
 8013458:	2000687e 	.word	0x2000687e
 801345c:	2000285a 	.word	0x2000285a
 8013460:	20002842 	.word	0x20002842
 8013464:	20000560 	.word	0x20000560
 8013468:	20006870 	.word	0x20006870
 801346c:	20006884 	.word	0x20006884
 8013470:	20000298 	.word	0x20000298
 8013474:	200007a0 	.word	0x200007a0
 8013478:	200001cc 	.word	0x200001cc
 801347c:	08000958 	.word	0x08000958
 8013480:	0800095c 	.word	0x0800095c
 8013484:	20000140 	.word	0x20000140
 8013488:	2200      	movs	r2, #0
 801348a:	4ba6      	ldr	r3, [pc, #664]	; (8013724 <Update_Detail+0x580>)
 801348c:	819a      	strh	r2, [r3, #12]

        Tmp  =(ParamTab[V1x2]- ParamTab[V2x2])/2;         // ˢ����ʾV2-V1��ֵ
 801348e:	4ba5      	ldr	r3, [pc, #660]	; (8013724 <Update_Detail+0x580>)
 8013490:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013494:	461a      	mov	r2, r3
 8013496:	4ba3      	ldr	r3, [pc, #652]	; (8013724 <Update_Detail+0x580>)
 8013498:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	0fda      	lsrs	r2, r3, #31
 80134a0:	4413      	add	r3, r2
 80134a2:	105b      	asrs	r3, r3, #1
 80134a4:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 80134a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80134aa:	4a9f      	ldr	r2, [pc, #636]	; (8013728 <Update_Detail+0x584>)
 80134ac:	5cd3      	ldrb	r3, [r2, r3]
 80134ae:	461c      	mov	r4, r3
 80134b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80134b4:	4a9d      	ldr	r2, [pc, #628]	; (801372c <Update_Detail+0x588>)
 80134b6:	5cd3      	ldrb	r3, [r2, r3]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fe fb2f 	bl	8011b1c <Exp>
 80134be:	4603      	mov	r3, r0
 80134c0:	fb03 f204 	mul.w	r2, r3, r4
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	fb02 f303 	mul.w	r3, r2, r3
 80134ca:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 3, UNSIGN);
 80134cc:	2301      	movs	r3, #1
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	2303      	movs	r3, #3
 80134d2:	4a97      	ldr	r2, [pc, #604]	; (8013730 <Update_Detail+0x58c>)
 80134d4:	6939      	ldr	r1, [r7, #16]
 80134d6:	4897      	ldr	r0, [pc, #604]	; (8013734 <Update_Detail+0x590>)
 80134d8:	f7fe fa24 	bl	8011924 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 80134dc:	2307      	movs	r3, #7
 80134de:	b29b      	uxth	r3, r3
 80134e0:	3b03      	subs	r3, #3
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	b219      	sxth	r1, r3
 80134e6:	2336      	movs	r3, #54	; 0x36
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	2300      	movs	r3, #0
 80134ec:	9300      	str	r3, [sp, #0]
 80134ee:	230b      	movs	r3, #11
 80134f0:	2203      	movs	r2, #3
 80134f2:	2001      	movs	r0, #1
 80134f4:	f7fa fc14 	bl	800dd20 <Draw_Circle_D>
        DispStr(S_X[V1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 80134f8:	2007      	movs	r0, #7
 80134fa:	4b8f      	ldr	r3, [pc, #572]	; (8013738 <Update_Detail+0x594>)
 80134fc:	2211      	movs	r2, #17
 80134fe:	2103      	movs	r1, #3
 8013500:	f7fa fb38 	bl	800db74 <DispStr>
        DispStr(S_X[V1_POSI]+1*6, LABLE_Y, INV,      "V:      ");
 8013504:	2307      	movs	r3, #7
 8013506:	b29b      	uxth	r3, r3
 8013508:	3306      	adds	r3, #6
 801350a:	b29b      	uxth	r3, r3
 801350c:	b218      	sxth	r0, r3
 801350e:	4b8b      	ldr	r3, [pc, #556]	; (801373c <Update_Detail+0x598>)
 8013510:	2201      	movs	r2, #1
 8013512:	2103      	movs	r1, #3
 8013514:	f7fa fb2e 	bl	800db74 <DispStr>
        DispStr(S_X[V1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013518:	2307      	movs	r3, #7
 801351a:	b29b      	uxth	r3, r3
 801351c:	332a      	adds	r3, #42	; 0x2a
 801351e:	b29b      	uxth	r3, r3
 8013520:	b218      	sxth	r0, r3
 8013522:	4b87      	ldr	r3, [pc, #540]	; (8013740 <Update_Detail+0x59c>)
 8013524:	2201      	movs	r2, #1
 8013526:	2103      	movs	r1, #3
 8013528:	f7fa fb24 	bl	800db74 <DispStr>
        DispStr(S_X[V1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 801352c:	2307      	movs	r3, #7
 801352e:	b29b      	uxth	r3, r3
 8013530:	3312      	adds	r3, #18
 8013532:	b29b      	uxth	r3, r3
 8013534:	b218      	sxth	r0, r3
 8013536:	4b7f      	ldr	r3, [pc, #508]	; (8013734 <Update_Detail+0x590>)
 8013538:	2201      	movs	r2, #1
 801353a:	2103      	movs	r1, #3
 801353c:	f7fa fb1a 	bl	800db74 <DispStr>

        SetColor(GRY, TCOLOR[TRG]);
 8013540:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8013544:	4619      	mov	r1, r3
 8013546:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801354a:	f7fa fafb 	bl	800db44 <SetColor>
        Tmp  = List[SENSITIVE].Val;                       // ˢ����ʾ�����ز�ֵ
 801354e:	4b7d      	ldr	r3, [pc, #500]	; (8013744 <Update_Detail+0x5a0>)
 8013550:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013554:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013556:	f9b7 3000 	ldrsh.w	r3, [r7]
 801355a:	4a73      	ldr	r2, [pc, #460]	; (8013728 <Update_Detail+0x584>)
 801355c:	5cd3      	ldrb	r3, [r2, r3]
 801355e:	461c      	mov	r4, r3
 8013560:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013564:	4a71      	ldr	r2, [pc, #452]	; (801372c <Update_Detail+0x588>)
 8013566:	5cd3      	ldrb	r3, [r2, r3]
 8013568:	4618      	mov	r0, r3
 801356a:	f7fe fad7 	bl	8011b1c <Exp>
 801356e:	4603      	mov	r3, r0
 8013570:	fb03 f204 	mul.w	r2, r3, r4
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	fb02 f303 	mul.w	r3, r2, r3
 801357a:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp,V[0], 2, UNSIGN);
 801357c:	2301      	movs	r3, #1
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	2302      	movs	r3, #2
 8013582:	4a6b      	ldr	r2, [pc, #428]	; (8013730 <Update_Detail+0x58c>)
 8013584:	6939      	ldr	r1, [r7, #16]
 8013586:	486b      	ldr	r0, [pc, #428]	; (8013734 <Update_Detail+0x590>)
 8013588:	f7fe f9cc 	bl	8011924 <Value2Str>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 801358c:	23e7      	movs	r3, #231	; 0xe7
 801358e:	b29b      	uxth	r3, r3
 8013590:	3309      	adds	r3, #9
 8013592:	b29b      	uxth	r3, r3
 8013594:	b218      	sxth	r0, r3
 8013596:	4b6c      	ldr	r3, [pc, #432]	; (8013748 <Update_Detail+0x5a4>)
 8013598:	2201      	movs	r2, #1
 801359a:	21e1      	movs	r1, #225	; 0xe1
 801359c:	f7fa faea 	bl	800db74 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 80135a0:	23e7      	movs	r3, #231	; 0xe7
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	3309      	adds	r3, #9
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	b218      	sxth	r0, r3
 80135aa:	4b62      	ldr	r3, [pc, #392]	; (8013734 <Update_Detail+0x590>)
 80135ac:	2201      	movs	r2, #1
 80135ae:	21e1      	movs	r1, #225	; 0xe1
 80135b0:	f7fa fae0 	bl	800db74 <DispStr>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 80135b4:	20e7      	movs	r0, #231	; 0xe7
 80135b6:	4b65      	ldr	r3, [pc, #404]	; (801374c <Update_Detail+0x5a8>)
 80135b8:	2211      	movs	r2, #17
 80135ba:	21e1      	movs	r1, #225	; 0xe1
 80135bc:	f7fa fd42 	bl	800e044 <DispStr10x14>
        GainA  = (char)List[Y_RANGES].Val;
 80135c0:	4b60      	ldr	r3, [pc, #384]	; (8013744 <Update_Detail+0x5a0>)
 80135c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	b21a      	sxth	r2, r3
 80135ca:	4b61      	ldr	r3, [pc, #388]	; (8013750 <Update_Detail+0x5ac>)
 80135cc:	801a      	strh	r2, [r3, #0]

        if((char)List[Y_RANGES].Val>1)
 80135ce:	4b5d      	ldr	r3, [pc, #372]	; (8013744 <Update_Detail+0x5a0>)
 80135d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d903      	bls.n	80135e2 <Update_Detail+0x43e>
          KindA  = HV;
 80135da:	4b5e      	ldr	r3, [pc, #376]	; (8013754 <Update_Detail+0x5b0>)
 80135dc:	2201      	movs	r2, #1
 80135de:	801a      	strh	r2, [r3, #0]
 80135e0:	e002      	b.n	80135e8 <Update_Detail+0x444>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 80135e2:	4b5c      	ldr	r3, [pc, #368]	; (8013754 <Update_Detail+0x5b0>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	801a      	strh	r2, [r3, #0]
        StateA =  ((char)List[Y_RANGES].Val>5)?ACT: GND;
 80135e8:	4b56      	ldr	r3, [pc, #344]	; (8013744 <Update_Detail+0x5a0>)
 80135ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	2b05      	cmp	r3, #5
 80135f2:	d901      	bls.n	80135f8 <Update_Detail+0x454>
 80135f4:	2204      	movs	r2, #4
 80135f6:	e000      	b.n	80135fa <Update_Detail+0x456>
 80135f8:	2200      	movs	r2, #0
 80135fa:	4b57      	ldr	r3, [pc, #348]	; (8013758 <Update_Detail+0x5b4>)
 80135fc:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 80135fe:	4b51      	ldr	r3, [pc, #324]	; (8013744 <Update_Detail+0x5a0>)
 8013600:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d001      	beq.n	801360c <Update_Detail+0x468>
 8013608:	2200      	movs	r2, #0
 801360a:	e000      	b.n	801360e <Update_Detail+0x46a>
 801360c:	2202      	movs	r2, #2
 801360e:	4b53      	ldr	r3, [pc, #332]	; (801375c <Update_Detail+0x5b8>)
 8013610:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8013612:	4b50      	ldr	r3, [pc, #320]	; (8013754 <Update_Detail+0x5b0>)
 8013614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013618:	461a      	mov	r2, r3
 801361a:	4b50      	ldr	r3, [pc, #320]	; (801375c <Update_Detail+0x5b8>)
 801361c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013620:	4413      	add	r3, r2
 8013622:	4a4d      	ldr	r2, [pc, #308]	; (8013758 <Update_Detail+0x5b4>)
 8013624:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013628:	4413      	add	r3, r2
 801362a:	4619      	mov	r1, r3
 801362c:	2007      	movs	r0, #7
 801362e:	f7f8 fe9d 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8013632:	4b44      	ldr	r3, [pc, #272]	; (8013744 <Update_Detail+0x5a0>)
 8013634:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013638:	b2db      	uxtb	r3, r3
 801363a:	4618      	mov	r0, r3
 801363c:	f001 fc5c 	bl	8014ef8 <AiPosi>
        break;
 8013640:	f000 bd61 	b.w	8014106 <Update_Detail+0xf62>
      case SAVE_BUF:
      case SAVE_CSV:
      case SAVE_SVG:
      case LOAD_DAT: //��ʾ��ѡ��Ҫ��ȡ���ļ����
      case LOAD_BUF:
        SetColor(GRY, TCOLOR[FN]);
 8013644:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8013648:	4619      	mov	r1, r3
 801364a:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801364e:	f7fa fa79 	bl	800db44 <SetColor>
        u8ToDec3(NumStr, List[i].Val);
 8013652:	8afb      	ldrh	r3, [r7, #22]
 8013654:	4a3b      	ldr	r2, [pc, #236]	; (8013744 <Update_Detail+0x5a0>)
 8013656:	00db      	lsls	r3, r3, #3
 8013658:	4413      	add	r3, r2
 801365a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801365e:	b2db      	uxtb	r3, r3
 8013660:	4619      	mov	r1, r3
 8013662:	4834      	ldr	r0, [pc, #208]	; (8013734 <Update_Detail+0x590>)
 8013664:	f7fe f8f6 	bl	8011854 <u8ToDec3>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*11);
 8013668:	8afb      	ldrh	r3, [r7, #22]
 801366a:	4a3d      	ldr	r2, [pc, #244]	; (8013760 <Update_Detail+0x5bc>)
 801366c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013670:	b29b      	uxth	r3, r3
 8013672:	3b03      	subs	r3, #3
 8013674:	b29b      	uxth	r3, r3
 8013676:	b219      	sxth	r1, r3
 8013678:	2342      	movs	r3, #66	; 0x42
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	2300      	movs	r3, #0
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	230b      	movs	r3, #11
 8013682:	2203      	movs	r2, #3
 8013684:	2001      	movs	r0, #1
 8013686:	f7fa fb4b 	bl	800dd20 <Draw_Circle_D>
        DispStr(S_X[i],    LABLE_Y, INV, ((i > SAVE_SVG)? "Load" : "Save"));//0513
 801368a:	8afb      	ldrh	r3, [r7, #22]
 801368c:	4a34      	ldr	r2, [pc, #208]	; (8013760 <Update_Detail+0x5bc>)
 801368e:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013692:	8afb      	ldrh	r3, [r7, #22]
 8013694:	2b21      	cmp	r3, #33	; 0x21
 8013696:	d901      	bls.n	801369c <Update_Detail+0x4f8>
 8013698:	4b32      	ldr	r3, [pc, #200]	; (8013764 <Update_Detail+0x5c0>)
 801369a:	e000      	b.n	801369e <Update_Detail+0x4fa>
 801369c:	4b32      	ldr	r3, [pc, #200]	; (8013768 <Update_Detail+0x5c4>)
 801369e:	2201      	movs	r2, #1
 80136a0:	2103      	movs	r1, #3
 80136a2:	f7fa fa67 	bl	800db74 <DispStr>
        DispStr(S_X[i]+24, LABLE_Y, INV, (char *)NumStr);
 80136a6:	8afb      	ldrh	r3, [r7, #22]
 80136a8:	4a2d      	ldr	r2, [pc, #180]	; (8013760 <Update_Detail+0x5bc>)
 80136aa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3318      	adds	r3, #24
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	b218      	sxth	r0, r3
 80136b6:	4b1f      	ldr	r3, [pc, #124]	; (8013734 <Update_Detail+0x590>)
 80136b8:	2201      	movs	r2, #1
 80136ba:	2103      	movs	r1, #3
 80136bc:	f7fa fa5a 	bl	800db74 <DispStr>
        DispStr(S_X[i]+42, LABLE_Y, INV, (List[i].PTR +(i - SAVE_BMP)*6));
 80136c0:	8afb      	ldrh	r3, [r7, #22]
 80136c2:	4a27      	ldr	r2, [pc, #156]	; (8013760 <Update_Detail+0x5bc>)
 80136c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	332a      	adds	r3, #42	; 0x2a
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	b218      	sxth	r0, r3
 80136d0:	8afb      	ldrh	r3, [r7, #22]
 80136d2:	4a1c      	ldr	r2, [pc, #112]	; (8013744 <Update_Detail+0x5a0>)
 80136d4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80136d8:	8afb      	ldrh	r3, [r7, #22]
 80136da:	f1a3 021d 	sub.w	r2, r3, #29
 80136de:	4613      	mov	r3, r2
 80136e0:	005b      	lsls	r3, r3, #1
 80136e2:	4413      	add	r3, r2
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	440b      	add	r3, r1
 80136e8:	2201      	movs	r2, #1
 80136ea:	2103      	movs	r1, #3
 80136ec:	f7fa fa42 	bl	800db74 <DispStr>
        break;
 80136f0:	f000 bd09 	b.w	8014106 <Update_Detail+0xf62>

      case TPYE_OUT:
        if(List[TPYE_OUT].Val ==0) //suqar
 80136f4:	4b13      	ldr	r3, [pc, #76]	; (8013744 <Update_Detail+0x5a0>)
 80136f6:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d136      	bne.n	801376c <Update_Detail+0x5c8>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80136fe:	2100      	movs	r1, #0
 8013700:	2000      	movs	r0, #0
 8013702:	f7f8 fe33 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 8013706:	4b0f      	ldr	r3, [pc, #60]	; (8013744 <Update_Detail+0x5a0>)
 8013708:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801370c:	4618      	mov	r0, r3
 801370e:	f7f8 ffb7 	bl	800c680 <Set_Fout>
          Set_Duty();
 8013712:	f7f8 ff89 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013716:	2104      	movs	r1, #4
 8013718:	2000      	movs	r0, #0
 801371a:	f7f8 fe27 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }

      break;
 801371e:	f000 bcf2 	b.w	8014106 <Update_Detail+0xf62>
 8013722:	bf00      	nop
 8013724:	20000140 	.word	0x20000140
 8013728:	08002130 	.word	0x08002130
 801372c:	08002108 	.word	0x08002108
 8013730:	08001d00 	.word	0x08001d00
 8013734:	20002834 	.word	0x20002834
 8013738:	08000960 	.word	0x08000960
 801373c:	08000964 	.word	0x08000964
 8013740:	080009d0 	.word	0x080009d0
 8013744:	20000298 	.word	0x20000298
 8013748:	08000990 	.word	0x08000990
 801374c:	08000998 	.word	0x08000998
 8013750:	20002842 	.word	0x20002842
 8013754:	2000687e 	.word	0x2000687e
 8013758:	2000285a 	.word	0x2000285a
 801375c:	20006880 	.word	0x20006880
 8013760:	0800215c 	.word	0x0800215c
 8013764:	08000948 	.word	0x08000948
 8013768:	08000950 	.word	0x08000950
          if(List[FREQ_OUT].Val > MAX_FREQ)
 801376c:	4bbf      	ldr	r3, [pc, #764]	; (8013a6c <Update_Detail+0x8c8>)
 801376e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013772:	2b09      	cmp	r3, #9
 8013774:	dd03      	ble.n	801377e <Update_Detail+0x5da>
             List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013776:	4bbd      	ldr	r3, [pc, #756]	; (8013a6c <Update_Detail+0x8c8>)
 8013778:	2209      	movs	r2, #9
 801377a:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
           BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 801377e:	2100      	movs	r1, #0
 8013780:	2000      	movs	r0, #0
 8013782:	f7f8 fdf3 	bl	800c36c <BIOS_Ctrl>
           htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013786:	4bb9      	ldr	r3, [pc, #740]	; (8013a6c <Update_Detail+0x8c8>)
 8013788:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801378c:	461a      	mov	r2, r3
 801378e:	4bb8      	ldr	r3, [pc, #736]	; (8013a70 <Update_Detail+0x8cc>)
 8013790:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013794:	3b01      	subs	r3, #1
 8013796:	461a      	mov	r2, r3
 8013798:	4bb6      	ldr	r3, [pc, #728]	; (8013a74 <Update_Detail+0x8d0>)
 801379a:	605a      	str	r2, [r3, #4]
           BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 801379c:	4bb3      	ldr	r3, [pc, #716]	; (8013a6c <Update_Detail+0x8c8>)
 801379e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80137a2:	461a      	mov	r2, r3
 80137a4:	4bb4      	ldr	r3, [pc, #720]	; (8013a78 <Update_Detail+0x8d4>)
 80137a6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	4619      	mov	r1, r3
 80137ae:	2001      	movs	r0, #1
 80137b0:	f7f8 fddc 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_CNT, 180);
 80137b4:	21b4      	movs	r1, #180	; 0xb4
 80137b6:	2002      	movs	r0, #2
 80137b8:	f7f8 fdd8 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 80137bc:	4bab      	ldr	r3, [pc, #684]	; (8013a6c <Update_Detail+0x8c8>)
 80137be:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 fdbf 	bl	800c348 <BIOS_Info>
 80137ca:	4603      	mov	r3, r0
 80137cc:	4619      	mov	r1, r3
 80137ce:	2003      	movs	r0, #3
 80137d0:	f7f8 fdcc 	bl	800c36c <BIOS_Ctrl>
           BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 80137d4:	2102      	movs	r1, #2
 80137d6:	2000      	movs	r0, #0
 80137d8:	f7f8 fdc8 	bl	800c36c <BIOS_Ctrl>
      break;
 80137dc:	f000 bc93 	b.w	8014106 <Update_Detail+0xf62>

      case FREQ_OUT: // ��ʾ�������Ƶ��
        if(List[TPYE_OUT].Val ==0) //suqar
 80137e0:	4ba2      	ldr	r3, [pc, #648]	; (8013a6c <Update_Detail+0x8c8>)
 80137e2:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d111      	bne.n	801380e <Update_Detail+0x66a>
        {
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 80137ea:	2100      	movs	r1, #0
 80137ec:	2000      	movs	r0, #0
 80137ee:	f7f8 fdbd 	bl	800c36c <BIOS_Ctrl>
          Set_Fout(List[FREQ_OUT].Val);
 80137f2:	4b9e      	ldr	r3, [pc, #632]	; (8013a6c <Update_Detail+0x8c8>)
 80137f4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f8 ff41 	bl	800c680 <Set_Fout>
          Set_Duty();
 80137fe:	f7f8 ff13 	bl	800c628 <Set_Duty>
          BIOS_Ctrl(OUT_MOD, PULSED);             // �趨�������ģʽ
 8013802:	2104      	movs	r1, #4
 8013804:	2000      	movs	r0, #0
 8013806:	f7f8 fdb1 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
          BIOS_Ctrl(OUT_CNT, 180);
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
        }
        break;
 801380a:	f000 bc7c 	b.w	8014106 <Update_Detail+0xf62>
          if(List[FREQ_OUT].Val > MAX_FREQ)
 801380e:	4b97      	ldr	r3, [pc, #604]	; (8013a6c <Update_Detail+0x8c8>)
 8013810:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013814:	2b09      	cmp	r3, #9
 8013816:	dd03      	ble.n	8013820 <Update_Detail+0x67c>
            List[FREQ_OUT].Val = MAX_FREQ ;   //10KHz
 8013818:	4b94      	ldr	r3, [pc, #592]	; (8013a6c <Update_Detail+0x8c8>)
 801381a:	2209      	movs	r2, #9
 801381c:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
          BIOS_Ctrl(OUT_MOD, DISABLE);            // �ر����ģʽ
 8013820:	2100      	movs	r1, #0
 8013822:	2000      	movs	r0, #0
 8013824:	f7f8 fda2 	bl	800c36c <BIOS_Ctrl>
          htim7.Init.Prescaler = Dac_Psc[List[FREQ_OUT].Val] - 1;
 8013828:	4b90      	ldr	r3, [pc, #576]	; (8013a6c <Update_Detail+0x8c8>)
 801382a:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 801382e:	461a      	mov	r2, r3
 8013830:	4b8f      	ldr	r3, [pc, #572]	; (8013a70 <Update_Detail+0x8cc>)
 8013832:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013836:	3b01      	subs	r3, #1
 8013838:	461a      	mov	r2, r3
 801383a:	4b8e      	ldr	r3, [pc, #568]	; (8013a74 <Update_Detail+0x8d0>)
 801383c:	605a      	str	r2, [r3, #4]
          BIOS_Ctrl(DAC_TIM, Dac_Tim[List[FREQ_OUT].Val]-1); // 72MHz/2/180/100 = 2KHz ģ���������(ÿ����36��)
 801383e:	4b8b      	ldr	r3, [pc, #556]	; (8013a6c <Update_Detail+0x8c8>)
 8013840:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8013844:	461a      	mov	r2, r3
 8013846:	4b8c      	ldr	r3, [pc, #560]	; (8013a78 <Update_Detail+0x8d4>)
 8013848:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801384c:	3b01      	subs	r3, #1
 801384e:	4619      	mov	r1, r3
 8013850:	2001      	movs	r0, #1
 8013852:	f7f8 fd8b 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_CNT, 180);
 8013856:	21b4      	movs	r1, #180	; 0xb4
 8013858:	2002      	movs	r0, #2
 801385a:	f7f8 fd87 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_BUF, BIOS_Info(List[TPYE_OUT].Val));    // ����ģ��������Ҳ������ݱ�
 801385e:	4b83      	ldr	r3, [pc, #524]	; (8013a6c <Update_Detail+0x8c8>)
 8013860:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8013864:	b2db      	uxtb	r3, r3
 8013866:	4618      	mov	r0, r3
 8013868:	f7f8 fd6e 	bl	800c348 <BIOS_Info>
 801386c:	4603      	mov	r3, r0
 801386e:	4619      	mov	r1, r3
 8013870:	2003      	movs	r0, #3
 8013872:	f7f8 fd7b 	bl	800c36c <BIOS_Ctrl>
          BIOS_Ctrl(OUT_MOD, ANALOG);             // �趨ģ�����ģʽ
 8013876:	2102      	movs	r1, #2
 8013878:	2000      	movs	r0, #0
 801387a:	f7f8 fd77 	bl	800c36c <BIOS_Ctrl>
        break;
 801387e:	f000 bc42 	b.w	8014106 <Update_Detail+0xf62>

      case FREQ_DUT: // ��ʾ�������ռ�ձ�
        SetColor(GRY, TCOLOR[SN]);
 8013882:	f240 531f 	movw	r3, #1311	; 0x51f
 8013886:	4619      	mov	r1, r3
 8013888:	f643 10e7 	movw	r0, #14823	; 0x39e7
 801388c:	f7fa f95a 	bl	800db44 <SetColor>
        Draw_Circle_D(INV, S_X[i]-3, LABLE_Y, 11, 0, 6*9);
 8013890:	8afb      	ldrh	r3, [r7, #22]
 8013892:	4a7a      	ldr	r2, [pc, #488]	; (8013a7c <Update_Detail+0x8d8>)
 8013894:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013898:	b29b      	uxth	r3, r3
 801389a:	3b03      	subs	r3, #3
 801389c:	b29b      	uxth	r3, r3
 801389e:	b219      	sxth	r1, r3
 80138a0:	2336      	movs	r3, #54	; 0x36
 80138a2:	9301      	str	r3, [sp, #4]
 80138a4:	2300      	movs	r3, #0
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	230b      	movs	r3, #11
 80138aa:	2203      	movs	r2, #3
 80138ac:	2001      	movs	r0, #1
 80138ae:	f7fa fa37 	bl	800dd20 <Draw_Circle_D>
        if(List[TPYE_OUT].Val == 0) //suqar
 80138b2:	4b6e      	ldr	r3, [pc, #440]	; (8013a6c <Update_Detail+0x8c8>)
 80138b4:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	f040 8423 	bne.w	8014104 <Update_Detail+0xf60>
        {
          Set_Duty();
 80138be:	f7f8 feb3 	bl	800c628 <Set_Duty>
        }
        break;
 80138c2:	f000 bc1f 	b.w	8014104 <Update_Detail+0xf60>

      case EXT_REFN: // ��ʾ�ο���������
      case EXT_POSI: // ��ʾ�ο�����ƫ��
        SetColor(GRY, TCOLOR[EX]);
 80138c6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80138ca:	4619      	mov	r1, r3
 80138cc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80138d0:	f7fa f938 	bl	800db44 <SetColor>
        if((i == EXT_REFN) || (i == EXT_POSI))
 80138d4:	8afb      	ldrh	r3, [r7, #22]
 80138d6:	2b1a      	cmp	r3, #26
 80138d8:	d002      	beq.n	80138e0 <Update_Detail+0x73c>
 80138da:	8afb      	ldrh	r3, [r7, #22]
 80138dc:	2b1b      	cmp	r3, #27
 80138de:	d123      	bne.n	8013928 <Update_Detail+0x784>
        {
          Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 80138e0:	23a8      	movs	r3, #168	; 0xa8
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	3b03      	subs	r3, #3
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	b219      	sxth	r1, r3
 80138ea:	231e      	movs	r3, #30
 80138ec:	9301      	str	r3, [sp, #4]
 80138ee:	2301      	movs	r3, #1
 80138f0:	9300      	str	r3, [sp, #0]
 80138f2:	230b      	movs	r3, #11
 80138f4:	22e1      	movs	r2, #225	; 0xe1
 80138f6:	2001      	movs	r0, #1
 80138f8:	f7fa fa12 	bl	800dd20 <Draw_Circle_D>
          DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80138fc:	20a8      	movs	r0, #168	; 0xa8
 80138fe:	4b5b      	ldr	r3, [pc, #364]	; (8013a6c <Update_Detail+0x8c8>)
 8013900:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00a      	beq.n	801391e <Update_Detail+0x77a>
 8013908:	4b58      	ldr	r3, [pc, #352]	; (8013a6c <Update_Detail+0x8c8>)
 801390a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801390e:	461a      	mov	r2, r3
 8013910:	4613      	mov	r3, r2
 8013912:	005b      	lsls	r3, r3, #1
 8013914:	4413      	add	r3, r2
 8013916:	005b      	lsls	r3, r3, #1
 8013918:	4a59      	ldr	r2, [pc, #356]	; (8013a80 <Update_Detail+0x8dc>)
 801391a:	4413      	add	r3, r2
 801391c:	e000      	b.n	8013920 <Update_Detail+0x77c>
 801391e:	4b59      	ldr	r3, [pc, #356]	; (8013a84 <Update_Detail+0x8e0>)
 8013920:	2201      	movs	r2, #1
 8013922:	21e1      	movs	r1, #225	; 0xe1
 8013924:	f7fa f926 	bl	800db74 <DispStr>
        }
        if(List[EXT_REFN].Val < 6) ParamTab[P2x2]=(List[EXT_POSI].Val + 1)*2;
 8013928:	4b50      	ldr	r3, [pc, #320]	; (8013a6c <Update_Detail+0x8c8>)
 801392a:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 801392e:	2b05      	cmp	r3, #5
 8013930:	dc0a      	bgt.n	8013948 <Update_Detail+0x7a4>
 8013932:	4b4e      	ldr	r3, [pc, #312]	; (8013a6c <Update_Detail+0x8c8>)
 8013934:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8013938:	3301      	adds	r3, #1
 801393a:	b29b      	uxth	r3, r3
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	b29b      	uxth	r3, r3
 8013940:	b21a      	sxth	r2, r3
 8013942:	4b51      	ldr	r3, [pc, #324]	; (8013a88 <Update_Detail+0x8e4>)
 8013944:	82da      	strh	r2, [r3, #22]
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
        break;
 8013946:	e3de      	b.n	8014106 <Update_Detail+0xf62>
        else                       ParamTab[P2x2]=(List[ V0_POSI].Val + 1)*2;
 8013948:	4b48      	ldr	r3, [pc, #288]	; (8013a6c <Update_Detail+0x8c8>)
 801394a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801394e:	3301      	adds	r3, #1
 8013950:	b29b      	uxth	r3, r3
 8013952:	005b      	lsls	r3, r3, #1
 8013954:	b29b      	uxth	r3, r3
 8013956:	b21a      	sxth	r2, r3
 8013958:	4b4b      	ldr	r3, [pc, #300]	; (8013a88 <Update_Detail+0x8e4>)
 801395a:	82da      	strh	r2, [r3, #22]
        break;
 801395c:	e3d3      	b.n	8014106 <Update_Detail+0xf62>

      case EXT_HIDE:
        if(List[EXT_HIDE].Val == 0) ParamTab[P2F] |=  W_HID;  // W_HID�����ο�����
 801395e:	4b43      	ldr	r3, [pc, #268]	; (8013a6c <Update_Detail+0x8c8>)
 8013960:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 8013964:	2b00      	cmp	r3, #0
 8013966:	d108      	bne.n	801397a <Update_Detail+0x7d6>
 8013968:	4b47      	ldr	r3, [pc, #284]	; (8013a88 <Update_Detail+0x8e4>)
 801396a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801396e:	f043 0304 	orr.w	r3, r3, #4
 8013972:	b21a      	sxth	r2, r3
 8013974:	4b44      	ldr	r3, [pc, #272]	; (8013a88 <Update_Detail+0x8e4>)
 8013976:	805a      	strh	r2, [r3, #2]
 8013978:	e007      	b.n	801398a <Update_Detail+0x7e6>
        else                        ParamTab[P2F] &= ~W_HID;  // W_HID��ʾ�ο�����
 801397a:	4b43      	ldr	r3, [pc, #268]	; (8013a88 <Update_Detail+0x8e4>)
 801397c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013980:	f023 0304 	bic.w	r3, r3, #4
 8013984:	b21a      	sxth	r2, r3
 8013986:	4b40      	ldr	r3, [pc, #256]	; (8013a88 <Update_Detail+0x8e4>)
 8013988:	805a      	strh	r2, [r3, #2]
        SetColor(GRY, TCOLOR[EX]);
 801398a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 801398e:	4619      	mov	r1, r3
 8013990:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013994:	f7fa f8d6 	bl	800db44 <SetColor>
        Draw_Circle_D(INV, S_X[EXT_REFN]-3, TITLE_Y_POS, 11, 1, 6*5);
 8013998:	23a8      	movs	r3, #168	; 0xa8
 801399a:	b29b      	uxth	r3, r3
 801399c:	3b03      	subs	r3, #3
 801399e:	b29b      	uxth	r3, r3
 80139a0:	b219      	sxth	r1, r3
 80139a2:	231e      	movs	r3, #30
 80139a4:	9301      	str	r3, [sp, #4]
 80139a6:	2301      	movs	r3, #1
 80139a8:	9300      	str	r3, [sp, #0]
 80139aa:	230b      	movs	r3, #11
 80139ac:	22e1      	movs	r2, #225	; 0xe1
 80139ae:	2001      	movs	r0, #1
 80139b0:	f7fa f9b6 	bl	800dd20 <Draw_Circle_D>
        DispStr(S_X[EXT_REFN], TITLE_Y_POS, INV, (char*)(List[EXT_HIDE].Val? I[List[EXT_REFN].Val] : I[6]));
 80139b4:	20a8      	movs	r0, #168	; 0xa8
 80139b6:	4b2d      	ldr	r3, [pc, #180]	; (8013a6c <Update_Detail+0x8c8>)
 80139b8:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d00a      	beq.n	80139d6 <Update_Detail+0x832>
 80139c0:	4b2a      	ldr	r3, [pc, #168]	; (8013a6c <Update_Detail+0x8c8>)
 80139c2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 80139c6:	461a      	mov	r2, r3
 80139c8:	4613      	mov	r3, r2
 80139ca:	005b      	lsls	r3, r3, #1
 80139cc:	4413      	add	r3, r2
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	4a2b      	ldr	r2, [pc, #172]	; (8013a80 <Update_Detail+0x8dc>)
 80139d2:	4413      	add	r3, r2
 80139d4:	e000      	b.n	80139d8 <Update_Detail+0x834>
 80139d6:	4b2b      	ldr	r3, [pc, #172]	; (8013a84 <Update_Detail+0x8e0>)
 80139d8:	2201      	movs	r2, #1
 80139da:	21e1      	movs	r1, #225	; 0xe1
 80139dc:	f7fa f8ca 	bl	800db74 <DispStr>
      break;
 80139e0:	e391      	b.n	8014106 <Update_Detail+0xf62>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 80139e2:	f000 fc6b 	bl	80142bc <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 80139e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80139ea:	4619      	mov	r1, r3
 80139ec:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80139f0:	f7fa f8a8 	bl	800db44 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 80139f4:	8afb      	ldrh	r3, [r7, #22]
 80139f6:	2b0e      	cmp	r3, #14
 80139f8:	d002      	beq.n	8013a00 <Update_Detail+0x85c>
 80139fa:	8afb      	ldrh	r3, [r7, #22]
 80139fc:	2b11      	cmp	r3, #17
 80139fe:	d11a      	bne.n	8013a36 <Update_Detail+0x892>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8013a00:	23dd      	movs	r3, #221	; 0xdd
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	3b03      	subs	r3, #3
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	b219      	sxth	r1, r3
 8013a0a:	2330      	movs	r3, #48	; 0x30
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	230b      	movs	r3, #11
 8013a14:	22e1      	movs	r2, #225	; 0xe1
 8013a16:	2001      	movs	r0, #1
 8013a18:	f7fa f982 	bl	800dd20 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8013a1c:	20dd      	movs	r0, #221	; 0xdd
 8013a1e:	4b13      	ldr	r3, [pc, #76]	; (8013a6c <Update_Detail+0x8c8>)
 8013a20:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d001      	beq.n	8013a2c <Update_Detail+0x888>
 8013a28:	4b18      	ldr	r3, [pc, #96]	; (8013a8c <Update_Detail+0x8e8>)
 8013a2a:	e000      	b.n	8013a2e <Update_Detail+0x88a>
 8013a2c:	4b18      	ldr	r3, [pc, #96]	; (8013a90 <Update_Detail+0x8ec>)
 8013a2e:	2211      	movs	r2, #17
 8013a30:	21e1      	movs	r1, #225	; 0xe1
 8013a32:	f7fa fb07 	bl	800e044 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8013a36:	8afb      	ldrh	r3, [r7, #22]
 8013a38:	2b0f      	cmp	r3, #15
 8013a3a:	d134      	bne.n	8013aa6 <Update_Detail+0x902>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8013a3c:	20cf      	movs	r0, #207	; 0xcf
 8013a3e:	4b0b      	ldr	r3, [pc, #44]	; (8013a6c <Update_Detail+0x8c8>)
 8013a40:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d001      	beq.n	8013a4c <Update_Detail+0x8a8>
 8013a48:	4b12      	ldr	r3, [pc, #72]	; (8013a94 <Update_Detail+0x8f0>)
 8013a4a:	e000      	b.n	8013a4e <Update_Detail+0x8aa>
 8013a4c:	4b12      	ldr	r3, [pc, #72]	; (8013a98 <Update_Detail+0x8f4>)
 8013a4e:	2210      	movs	r2, #16
 8013a50:	21e1      	movs	r1, #225	; 0xe1
 8013a52:	f7fa faf7 	bl	800e044 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8013a56:	4b05      	ldr	r3, [pc, #20]	; (8013a6c <Update_Detail+0x8c8>)
 8013a58:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d01f      	beq.n	8013aa0 <Update_Detail+0x8fc>
 8013a60:	4b0e      	ldr	r3, [pc, #56]	; (8013a9c <Update_Detail+0x8f8>)
 8013a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013a66:	801a      	strh	r2, [r3, #0]
 8013a68:	e01d      	b.n	8013aa6 <Update_Detail+0x902>
 8013a6a:	bf00      	nop
 8013a6c:	20000298 	.word	0x20000298
 8013a70:	08002338 	.word	0x08002338
 8013a74:	20006c0c 	.word	0x20006c0c
 8013a78:	08001d90 	.word	0x08001d90
 8013a7c:	0800215c 	.word	0x0800215c
 8013a80:	08001c88 	.word	0x08001c88
 8013a84:	08001cac 	.word	0x08001cac
 8013a88:	20000140 	.word	0x20000140
 8013a8c:	08000988 	.word	0x08000988
 8013a90:	0800098c 	.word	0x0800098c
 8013a94:	0800099c 	.word	0x0800099c
 8013a98:	0800095c 	.word	0x0800095c
 8013a9c:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8013aa0:	4bac      	ldr	r3, [pc, #688]	; (8013d54 <Update_Detail+0xbb0>)
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	801a      	strh	r2, [r3, #0]
        }
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8013aa6:	4bac      	ldr	r3, [pc, #688]	; (8013d58 <Update_Detail+0xbb4>)
 8013aa8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	4bab      	ldr	r3, [pc, #684]	; (8013d5c <Update_Detail+0xbb8>)
 8013ab0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	4413      	add	r3, r2
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	b21a      	sxth	r2, r3
 8013ac0:	4ba5      	ldr	r3, [pc, #660]	; (8013d58 <Update_Detail+0xbb4>)
 8013ac2:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8013ac4:	4ba5      	ldr	r3, [pc, #660]	; (8013d5c <Update_Detail+0xbb8>)
 8013ac6:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8013aca:	613b      	str	r3, [r7, #16]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8013acc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013ad0:	4aa3      	ldr	r2, [pc, #652]	; (8013d60 <Update_Detail+0xbbc>)
 8013ad2:	5cd3      	ldrb	r3, [r2, r3]
 8013ad4:	461c      	mov	r4, r3
 8013ad6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013ada:	4aa2      	ldr	r2, [pc, #648]	; (8013d64 <Update_Detail+0xbc0>)
 8013adc:	5cd3      	ldrb	r3, [r2, r3]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7fe f81c 	bl	8011b1c <Exp>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	fb03 f204 	mul.w	r2, r3, r4
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	fb02 f303 	mul.w	r3, r2, r3
 8013af0:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, V[0], 2, UNSIGN);
 8013af2:	2301      	movs	r3, #1
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	2302      	movs	r3, #2
 8013af8:	4a9b      	ldr	r2, [pc, #620]	; (8013d68 <Update_Detail+0xbc4>)
 8013afa:	6939      	ldr	r1, [r7, #16]
 8013afc:	489b      	ldr	r0, [pc, #620]	; (8013d6c <Update_Detail+0xbc8>)
 8013afe:	f7fd ff11 	bl	8011924 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8013b02:	20e7      	movs	r0, #231	; 0xe7
 8013b04:	4b9a      	ldr	r3, [pc, #616]	; (8013d70 <Update_Detail+0xbcc>)
 8013b06:	2211      	movs	r2, #17
 8013b08:	21e1      	movs	r1, #225	; 0xe1
 8013b0a:	f7fa fa9b 	bl	800e044 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8013b0e:	23e7      	movs	r3, #231	; 0xe7
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	3309      	adds	r3, #9
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	b218      	sxth	r0, r3
 8013b18:	4b96      	ldr	r3, [pc, #600]	; (8013d74 <Update_Detail+0xbd0>)
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	21e1      	movs	r1, #225	; 0xe1
 8013b1e:	f7fa f829 	bl	800db74 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8013b22:	23e7      	movs	r3, #231	; 0xe7
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	3309      	adds	r3, #9
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	b218      	sxth	r0, r3
 8013b2c:	4b8f      	ldr	r3, [pc, #572]	; (8013d6c <Update_Detail+0xbc8>)
 8013b2e:	2201      	movs	r2, #1
 8013b30:	21e1      	movs	r1, #225	; 0xe1
 8013b32:	f7fa f81f 	bl	800db74 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8013b36:	4b89      	ldr	r3, [pc, #548]	; (8013d5c <Update_Detail+0xbb8>)
 8013b38:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <Update_Detail+0x9a0>
 8013b40:	2202      	movs	r2, #2
 8013b42:	e000      	b.n	8013b46 <Update_Detail+0x9a2>
 8013b44:	2200      	movs	r2, #0
 8013b46:	4b84      	ldr	r3, [pc, #528]	; (8013d58 <Update_Detail+0xbb4>)
 8013b48:	811a      	strh	r2, [r3, #8]
        break;
 8013b4a:	e2dc      	b.n	8014106 <Update_Detail+0xf62>
      case VIEWPOSI:  // ˢ����ʾˮƽ�Ӵ�λ��
      case SMPL_DPTH: // ˢ����ʾ�������
      case T1_POSI:   // ˢ����ʾ����α�λ��
      case T2_POSI:   // ˢ����ʾ�Ҷ��α�λ��
      case XN_TYPE:   // ˢ����ʾ�α���ʽ
        SetColor(GRY, TCOLOR[XN]);
 8013b4c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013b50:	4619      	mov	r1, r3
 8013b52:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8013b56:	f7f9 fff5 	bl	800db44 <SetColor>
        if(i == TIM_BASE)
 8013b5a:	8afb      	ldrh	r3, [r7, #22]
 8013b5c:	2b07      	cmp	r3, #7
 8013b5e:	d11e      	bne.n	8013b9e <Update_Detail+0x9fa>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8013b60:	8afb      	ldrh	r3, [r7, #22]
 8013b62:	4a85      	ldr	r2, [pc, #532]	; (8013d78 <Update_Detail+0xbd4>)
 8013b64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	3b03      	subs	r3, #3
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	b219      	sxth	r1, r3
 8013b70:	231e      	movs	r3, #30
 8013b72:	9301      	str	r3, [sp, #4]
 8013b74:	2302      	movs	r3, #2
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	230b      	movs	r3, #11
 8013b7a:	22e1      	movs	r2, #225	; 0xe1
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	f7fa f8cf 	bl	800dd20 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, TimeBase_Str[List[TIM_BASE].Val]);
 8013b82:	8afb      	ldrh	r3, [r7, #22]
 8013b84:	4a7c      	ldr	r2, [pc, #496]	; (8013d78 <Update_Detail+0xbd4>)
 8013b86:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8013b8a:	4b74      	ldr	r3, [pc, #464]	; (8013d5c <Update_Detail+0xbb8>)
 8013b8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	4a7a      	ldr	r2, [pc, #488]	; (8013d7c <Update_Detail+0xbd8>)
 8013b94:	4413      	add	r3, r2
 8013b96:	2201      	movs	r2, #1
 8013b98:	21e1      	movs	r1, #225	; 0xe1
 8013b9a:	f7f9 ffeb 	bl	800db74 <DispStr>
        }
        if(i == SMPL_DPTH){
 8013b9e:	8afb      	ldrh	r3, [r7, #22]
 8013ba0:	2b09      	cmp	r3, #9
 8013ba2:	d126      	bne.n	8013bf2 <Update_Detail+0xa4e>
          Draw_Circle_D(INV, S_X[SMPL_DPTH]-3, LABLE_Y, 11, 0, 6*11);
 8013ba4:	23f8      	movs	r3, #248	; 0xf8
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	3b03      	subs	r3, #3
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	b219      	sxth	r1, r3
 8013bae:	2342      	movs	r3, #66	; 0x42
 8013bb0:	9301      	str	r3, [sp, #4]
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	230b      	movs	r3, #11
 8013bb8:	2203      	movs	r2, #3
 8013bba:	2001      	movs	r0, #1
 8013bbc:	f7fa f8b0 	bl	800dd20 <Draw_Circle_D>
          DispStr(S_X[SMPL_DPTH],    LABLE_Y,  INV, "SmplDpth:  ");
 8013bc0:	20f8      	movs	r0, #248	; 0xf8
 8013bc2:	4b6f      	ldr	r3, [pc, #444]	; (8013d80 <Update_Detail+0xbdc>)
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	2103      	movs	r1, #3
 8013bc8:	f7f9 ffd4 	bl	800db74 <DispStr>
          DispStr(S_X[SMPL_DPTH]+6*9, LABLE_Y,  INV, (char *)&D[List[SMPL_DPTH].Val]);
 8013bcc:	23f8      	movs	r3, #248	; 0xf8
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	3336      	adds	r3, #54	; 0x36
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	b218      	sxth	r0, r3
 8013bd6:	4b61      	ldr	r3, [pc, #388]	; (8013d5c <Update_Detail+0xbb8>)
 8013bd8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8013bdc:	461a      	mov	r2, r3
 8013bde:	4613      	mov	r3, r2
 8013be0:	005b      	lsls	r3, r3, #1
 8013be2:	4413      	add	r3, r2
 8013be4:	005b      	lsls	r3, r3, #1
 8013be6:	4a67      	ldr	r2, [pc, #412]	; (8013d84 <Update_Detail+0xbe0>)
 8013be8:	4413      	add	r3, r2
 8013bea:	2201      	movs	r2, #1
 8013bec:	2103      	movs	r1, #3
 8013bee:	f7f9 ffc1 	bl	800db74 <DispStr>
        }
        Update_Windows();
 8013bf2:	f000 fbad 	bl	8014350 <Update_Windows>

        ParamTab[T0x1] = 2 + Presampling - List[VIEWPOSI].Val;
 8013bf6:	4b64      	ldr	r3, [pc, #400]	; (8013d88 <Update_Detail+0xbe4>)
 8013bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	4b57      	ldr	r3, [pc, #348]	; (8013d5c <Update_Detail+0xbb8>)
 8013c00:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	3302      	adds	r3, #2
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	b21a      	sxth	r2, r3
 8013c10:	4b51      	ldr	r3, [pc, #324]	; (8013d58 <Update_Detail+0xbb4>)
 8013c12:	845a      	strh	r2, [r3, #34]	; 0x22
        ParamTab[T0F] &= ~D_HID;
 8013c14:	4b50      	ldr	r3, [pc, #320]	; (8013d58 <Update_Detail+0xbb4>)
 8013c16:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013c1a:	f023 0301 	bic.w	r3, r3, #1
 8013c1e:	b21a      	sxth	r2, r3
 8013c20:	4b4d      	ldr	r3, [pc, #308]	; (8013d58 <Update_Detail+0xbb4>)
 8013c22:	81da      	strh	r2, [r3, #14]
        ParamTab[T1F] &= ~D_HID;
 8013c24:	4b4c      	ldr	r3, [pc, #304]	; (8013d58 <Update_Detail+0xbb4>)
 8013c26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013c2a:	f023 0301 	bic.w	r3, r3, #1
 8013c2e:	b21a      	sxth	r2, r3
 8013c30:	4b49      	ldr	r3, [pc, #292]	; (8013d58 <Update_Detail+0xbb4>)
 8013c32:	821a      	strh	r2, [r3, #16]
        ParamTab[T1F] &= ~D_HID;
 8013c34:	4b48      	ldr	r3, [pc, #288]	; (8013d58 <Update_Detail+0xbb4>)
 8013c36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013c3a:	f023 0301 	bic.w	r3, r3, #1
 8013c3e:	b21a      	sxth	r2, r3
 8013c40:	4b45      	ldr	r3, [pc, #276]	; (8013d58 <Update_Detail+0xbb4>)
 8013c42:	821a      	strh	r2, [r3, #16]
        ParamTab[T1x1] = List[T1_POSI].Val+1;
 8013c44:	4b45      	ldr	r3, [pc, #276]	; (8013d5c <Update_Detail+0xbb8>)
 8013c46:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	b21a      	sxth	r2, r3
 8013c52:	4b41      	ldr	r3, [pc, #260]	; (8013d58 <Update_Detail+0xbb4>)
 8013c54:	849a      	strh	r2, [r3, #36]	; 0x24
        ParamTab[T2x1] = List[T2_POSI].Val+1;
 8013c56:	4b41      	ldr	r3, [pc, #260]	; (8013d5c <Update_Detail+0xbb8>)
 8013c58:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	3301      	adds	r3, #1
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	b21a      	sxth	r2, r3
 8013c64:	4b3c      	ldr	r3, [pc, #240]	; (8013d58 <Update_Detail+0xbb4>)
 8013c66:	84da      	strh	r2, [r3, #38]	; 0x26
        ParamTab[T1F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013c68:	4b3c      	ldr	r3, [pc, #240]	; (8013d5c <Update_Detail+0xbb8>)
 8013c6a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d001      	beq.n	8013c76 <Update_Detail+0xad2>
 8013c72:	2202      	movs	r2, #2
 8013c74:	e000      	b.n	8013c78 <Update_Detail+0xad4>
 8013c76:	2200      	movs	r2, #0
 8013c78:	4b37      	ldr	r3, [pc, #220]	; (8013d58 <Update_Detail+0xbb4>)
 8013c7a:	821a      	strh	r2, [r3, #16]
        ParamTab[T2F]  = (List[XN_TYPE].Val)? L_HID : SHOW;
 8013c7c:	4b37      	ldr	r3, [pc, #220]	; (8013d5c <Update_Detail+0xbb8>)
 8013c7e:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d001      	beq.n	8013c8a <Update_Detail+0xae6>
 8013c86:	2202      	movs	r2, #2
 8013c88:	e000      	b.n	8013c8c <Update_Detail+0xae8>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4b32      	ldr	r3, [pc, #200]	; (8013d58 <Update_Detail+0xbb4>)
 8013c8e:	825a      	strh	r2, [r3, #18]
        Tmp  = ParamTab[T2x1] - ParamTab[T1x1];
 8013c90:	4b31      	ldr	r3, [pc, #196]	; (8013d58 <Update_Detail+0xbb4>)
 8013c92:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8013c96:	461a      	mov	r2, r3
 8013c98:	4b2f      	ldr	r3, [pc, #188]	; (8013d58 <Update_Detail+0xbb4>)
 8013c9a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8013c9e:	1ad3      	subs	r3, r2, r3
 8013ca0:	613b      	str	r3, [r7, #16]
        Tmp *= B_SCALE[List[TIM_BASE].Val]* Exp(T_SCALE[List[TIM_BASE].Val]);
 8013ca2:	4b2e      	ldr	r3, [pc, #184]	; (8013d5c <Update_Detail+0xbb8>)
 8013ca4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ca8:	461a      	mov	r2, r3
 8013caa:	4b38      	ldr	r3, [pc, #224]	; (8013d8c <Update_Detail+0xbe8>)
 8013cac:	5c9b      	ldrb	r3, [r3, r2]
 8013cae:	461c      	mov	r4, r3
 8013cb0:	4b2a      	ldr	r3, [pc, #168]	; (8013d5c <Update_Detail+0xbb8>)
 8013cb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	4b35      	ldr	r3, [pc, #212]	; (8013d90 <Update_Detail+0xbec>)
 8013cba:	5c9b      	ldrb	r3, [r3, r2]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fd ff2d 	bl	8011b1c <Exp>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	fb03 f204 	mul.w	r2, r3, r4
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	fb02 f303 	mul.w	r3, r2, r3
 8013cce:	613b      	str	r3, [r7, #16]
        Value2Str(NumStr, Tmp, T[0], 3, UNSIGN);
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	2303      	movs	r3, #3
 8013cd6:	4a2f      	ldr	r2, [pc, #188]	; (8013d94 <Update_Detail+0xbf0>)
 8013cd8:	6939      	ldr	r1, [r7, #16]
 8013cda:	4824      	ldr	r0, [pc, #144]	; (8013d6c <Update_Detail+0xbc8>)
 8013cdc:	f7fd fe22 	bl	8011924 <Value2Str>
        Draw_Circle_D(INV, S_X[V1_POSI]-3, LABLE_Y, 11, 0, 6*9);
 8013ce0:	2307      	movs	r3, #7
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	3b03      	subs	r3, #3
 8013ce6:	b29b      	uxth	r3, r3
 8013ce8:	b219      	sxth	r1, r3
 8013cea:	2336      	movs	r3, #54	; 0x36
 8013cec:	9301      	str	r3, [sp, #4]
 8013cee:	2300      	movs	r3, #0
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	230b      	movs	r3, #11
 8013cf4:	2203      	movs	r2, #3
 8013cf6:	2001      	movs	r0, #1
 8013cf8:	f7fa f812 	bl	800dd20 <Draw_Circle_D>
        DispStr(S_X[T1_POSI]+0*6, LABLE_Y, INV+SYMB, "]");
 8013cfc:	2007      	movs	r0, #7
 8013cfe:	4b26      	ldr	r3, [pc, #152]	; (8013d98 <Update_Detail+0xbf4>)
 8013d00:	2211      	movs	r2, #17
 8013d02:	2103      	movs	r1, #3
 8013d04:	f7f9 ff36 	bl	800db74 <DispStr>
        DispStr(S_X[T1_POSI]+1*6, LABLE_Y, INV,      "T:      ");
 8013d08:	2307      	movs	r3, #7
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	3306      	adds	r3, #6
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	b218      	sxth	r0, r3
 8013d12:	4b22      	ldr	r3, [pc, #136]	; (8013d9c <Update_Detail+0xbf8>)
 8013d14:	2201      	movs	r2, #1
 8013d16:	2103      	movs	r1, #3
 8013d18:	f7f9 ff2c 	bl	800db74 <DispStr>
        DispStr(S_X[T1_POSI]+7*6, LABLE_Y, INV,  "  ");
 8013d1c:	2307      	movs	r3, #7
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	332a      	adds	r3, #42	; 0x2a
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	b218      	sxth	r0, r3
 8013d26:	4b1e      	ldr	r3, [pc, #120]	; (8013da0 <Update_Detail+0xbfc>)
 8013d28:	2201      	movs	r2, #1
 8013d2a:	2103      	movs	r1, #3
 8013d2c:	f7f9 ff22 	bl	800db74 <DispStr>
        DispStr(S_X[T1_POSI]+3*6, LABLE_Y, INV,  (char *)NumStr);
 8013d30:	2307      	movs	r3, #7
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	3312      	adds	r3, #18
 8013d36:	b29b      	uxth	r3, r3
 8013d38:	b218      	sxth	r0, r3
 8013d3a:	4b0c      	ldr	r3, [pc, #48]	; (8013d6c <Update_Detail+0xbc8>)
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	2103      	movs	r1, #3
 8013d40:	f7f9 ff18 	bl	800db74 <DispStr>
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8013d44:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <Update_Detail+0xbb8>)
 8013d46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7f8 fc36 	bl	800c5bc <Set_Base>
      break;
 8013d50:	e1d9      	b.n	8014106 <Update_Detail+0xf62>
 8013d52:	bf00      	nop
 8013d54:	2000077e 	.word	0x2000077e
 8013d58:	20000140 	.word	0x20000140
 8013d5c:	20000298 	.word	0x20000298
 8013d60:	08002130 	.word	0x08002130
 8013d64:	08002108 	.word	0x08002108
 8013d68:	08001d00 	.word	0x08001d00
 8013d6c:	20002834 	.word	0x20002834
 8013d70:	08000998 	.word	0x08000998
 8013d74:	08000990 	.word	0x08000990
 8013d78:	0800215c 	.word	0x0800215c
 8013d7c:	200001d0 	.word	0x200001d0
 8013d80:	08000970 	.word	0x08000970
 8013d84:	08001c4c 	.word	0x08001c4c
 8013d88:	2000055a 	.word	0x2000055a
 8013d8c:	0800211c 	.word	0x0800211c
 8013d90:	080020f4 	.word	0x080020f4
 8013d94:	08001ce8 	.word	0x08001ce8
 8013d98:	08000960 	.word	0x08000960
 8013d9c:	0800097c 	.word	0x0800097c
 8013da0:	080009d0 	.word	0x080009d0

      case FREQUENC://��ʾƵ��
        FTmp=Edge*25*1000/2;
 8013da4:	4bb7      	ldr	r3, [pc, #732]	; (8014084 <Update_Detail+0xee0>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8013dac:	fb02 f303 	mul.w	r3, r2, r3
 8013db0:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8013db2:	4bb5      	ldr	r3, [pc, #724]	; (8014088 <Update_Detail+0xee4>)
 8013db4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013db8:	2b08      	cmp	r3, #8
 8013dba:	dc05      	bgt.n	8013dc8 <Update_Detail+0xc24>
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	4ab3      	ldr	r2, [pc, #716]	; (801408c <Update_Detail+0xee8>)
 8013dc0:	fb02 f303 	mul.w	r3, r2, r3
 8013dc4:	60fb      	str	r3, [r7, #12]
 8013dc6:	e00a      	b.n	8013dde <Update_Detail+0xc3a>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8013dc8:	4baf      	ldr	r3, [pc, #700]	; (8014088 <Update_Detail+0xee4>)
 8013dca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013dce:	2b11      	cmp	r3, #17
 8013dd0:	dc05      	bgt.n	8013dde <Update_Detail+0xc3a>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013dd8:	fb02 f303 	mul.w	r3, r2, r3
 8013ddc:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 8013dde:	4baa      	ldr	r3, [pc, #680]	; (8014088 <Update_Detail+0xee4>)
 8013de0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013de4:	461a      	mov	r2, r3
 8013de6:	4baa      	ldr	r3, [pc, #680]	; (8014090 <Update_Detail+0xeec>)
 8013de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dec:	461a      	mov	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013df4:	4aa4      	ldr	r2, [pc, #656]	; (8014088 <Update_Detail+0xee4>)
 8013df6:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	4aa5      	ldr	r2, [pc, #660]	; (8014094 <Update_Detail+0xef0>)
 8013dfe:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8013e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e06:	60fb      	str	r3, [r7, #12]
          DispMeter(i, 1, UNSIGN,FTmp);
 8013e08:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	2101      	movs	r1, #1
 8013e12:	f000 f9d3 	bl	80141bc <DispMeter>
      break;
 8013e16:	e176      	b.n	8014106 <Update_Detail+0xf62>

      case DUTY:    //��ʾռ�ձ�
         DispMeter(i, k, UNSIGN,(HighT*100)/k);
 8013e18:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013e1c:	887b      	ldrh	r3, [r7, #2]
 8013e1e:	b2d9      	uxtb	r1, r3
 8013e20:	4b9d      	ldr	r3, [pc, #628]	; (8014098 <Update_Detail+0xef4>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	2264      	movs	r2, #100	; 0x64
 8013e26:	fb02 f203 	mul.w	r2, r2, r3
 8013e2a:	887b      	ldrh	r3, [r7, #2]
 8013e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e30:	2201      	movs	r2, #1
 8013e32:	f000 f9c3 	bl	80141bc <DispMeter>
        break;
 8013e36:	e166      	b.n	8014106 <Update_Detail+0xf62>

      case VRMS://��ʾ��ѹ��Чֵ
        if(abs(Vrms)<4)
 8013e38:	4b98      	ldr	r3, [pc, #608]	; (801409c <Update_Detail+0xef8>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	f113 0f03 	cmn.w	r3, #3
 8013e40:	db06      	blt.n	8013e50 <Update_Detail+0xcac>
 8013e42:	4b96      	ldr	r3, [pc, #600]	; (801409c <Update_Detail+0xef8>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2b03      	cmp	r3, #3
 8013e48:	dc02      	bgt.n	8013e50 <Update_Detail+0xcac>
        {
          Tmp = 0.00;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	613b      	str	r3, [r7, #16]
 8013e4e:	e026      	b.n	8013e9e <Update_Detail+0xcfa>
        }else{
		  scale = (List[PROBEATT].Val?
 8013e50:	4b8d      	ldr	r3, [pc, #564]	; (8014088 <Update_Detail+0xee4>)
 8013e52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00b      	beq.n	8013e72 <Update_Detail+0xcce>
 8013e5a:	4b8b      	ldr	r3, [pc, #556]	; (8014088 <Update_Detail+0xee4>)
 8013e5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013e60:	461a      	mov	r2, r3
 8013e62:	4b8f      	ldr	r3, [pc, #572]	; (80140a0 <Update_Detail+0xefc>)
 8013e64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4413      	add	r3, r2
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	e00a      	b.n	8013e88 <Update_Detail+0xce4>
 8013e72:	4b85      	ldr	r3, [pc, #532]	; (8014088 <Update_Detail+0xee4>)
 8013e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	4b8a      	ldr	r3, [pc, #552]	; (80140a4 <Update_Detail+0xf00>)
 8013e7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e80:	4613      	mov	r3, r2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8013e88:	60bb      	str	r3, [r7, #8]
	          Tmp  = ((((Vrms)*Ak)>>12))*scale;
 8013e8a:	4b84      	ldr	r3, [pc, #528]	; (801409c <Update_Detail+0xef8>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	fb02 f303 	mul.w	r3, r2, r3
 8013e94:	131a      	asrs	r2, r3, #12
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	fb02 f303 	mul.w	r3, r2, r3
 8013e9c:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013e9e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	2101      	movs	r1, #1
 8013ea8:	f000 f988 	bl	80141bc <DispMeter>
        break;
 8013eac:	e12b      	b.n	8014106 <Update_Detail+0xf62>

      case VP_P://��ʾ��ѹ���ֵ
        if(abs(Vpp)<7){
 8013eae:	4b7e      	ldr	r3, [pc, #504]	; (80140a8 <Update_Detail+0xf04>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	f113 0f06 	cmn.w	r3, #6
 8013eb6:	db06      	blt.n	8013ec6 <Update_Detail+0xd22>
 8013eb8:	4b7b      	ldr	r3, [pc, #492]	; (80140a8 <Update_Detail+0xf04>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b06      	cmp	r3, #6
 8013ebe:	dc02      	bgt.n	8013ec6 <Update_Detail+0xd22>
          Tmp = 0.00;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	613b      	str	r3, [r7, #16]
 8013ec4:	e033      	b.n	8013f2e <Update_Detail+0xd8a>
        }
        else
        {
           scale = (List[PROBEATT].Val?
 8013ec6:	4b70      	ldr	r3, [pc, #448]	; (8014088 <Update_Detail+0xee4>)
 8013ec8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d00b      	beq.n	8013ee8 <Update_Detail+0xd44>
 8013ed0:	4b6d      	ldr	r3, [pc, #436]	; (8014088 <Update_Detail+0xee4>)
 8013ed2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	4b71      	ldr	r3, [pc, #452]	; (80140a0 <Update_Detail+0xefc>)
 8013eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ede:	4613      	mov	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4413      	add	r3, r2
 8013ee4:	00db      	lsls	r3, r3, #3
 8013ee6:	e00a      	b.n	8013efe <Update_Detail+0xd5a>
 8013ee8:	4b67      	ldr	r3, [pc, #412]	; (8014088 <Update_Detail+0xee4>)
 8013eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	4b6c      	ldr	r3, [pc, #432]	; (80140a4 <Update_Detail+0xf00>)
 8013ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	4413      	add	r3, r2
 8013efc:	00db      	lsls	r3, r3, #3
           scale = (List[PROBEATT].Val?
 8013efe:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)-(((Vmin-2048)*(Ak))>>12))*scale;
 8013f00:	4b6a      	ldr	r3, [pc, #424]	; (80140ac <Update_Detail+0xf08>)
 8013f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f06:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f0a:	687a      	ldr	r2, [r7, #4]
 8013f0c:	fb02 f303 	mul.w	r3, r2, r3
 8013f10:	131a      	asrs	r2, r3, #12
 8013f12:	4b67      	ldr	r3, [pc, #412]	; (80140b0 <Update_Detail+0xf0c>)
 8013f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f18:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f1c:	6879      	ldr	r1, [r7, #4]
 8013f1e:	fb01 f303 	mul.w	r3, r1, r3
 8013f22:	131b      	asrs	r3, r3, #12
 8013f24:	1ad2      	subs	r2, r2, r3
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	fb02 f303 	mul.w	r3, r2, r3
 8013f2c:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013f2e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	2201      	movs	r2, #1
 8013f36:	2101      	movs	r1, #1
 8013f38:	f000 f940 	bl	80141bc <DispMeter>
        break;
 8013f3c:	e0e3      	b.n	8014106 <Update_Detail+0xf62>

      case VAVG://��ʾ��ѹƽ��ֵ
        if(abs(Vavg)<4)
 8013f3e:	4b5d      	ldr	r3, [pc, #372]	; (80140b4 <Update_Detail+0xf10>)
 8013f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bfb8      	it	lt
 8013f48:	425b      	neglt	r3, r3
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d802      	bhi.n	8013f56 <Update_Detail+0xdb2>
        {
          Tmp = 0.00;
 8013f50:	2300      	movs	r3, #0
 8013f52:	613b      	str	r3, [r7, #16]
 8013f54:	e02e      	b.n	8013fb4 <Update_Detail+0xe10>
        }else{
          scale = (List[PROBEATT].Val?
 8013f56:	4b4c      	ldr	r3, [pc, #304]	; (8014088 <Update_Detail+0xee4>)
 8013f58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00b      	beq.n	8013f78 <Update_Detail+0xdd4>
 8013f60:	4b49      	ldr	r3, [pc, #292]	; (8014088 <Update_Detail+0xee4>)
 8013f62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f66:	461a      	mov	r2, r3
 8013f68:	4b4d      	ldr	r3, [pc, #308]	; (80140a0 <Update_Detail+0xefc>)
 8013f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	4413      	add	r3, r2
 8013f74:	00db      	lsls	r3, r3, #3
 8013f76:	e00a      	b.n	8013f8e <Update_Detail+0xdea>
 8013f78:	4b43      	ldr	r3, [pc, #268]	; (8014088 <Update_Detail+0xee4>)
 8013f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013f7e:	461a      	mov	r2, r3
 8013f80:	4b48      	ldr	r3, [pc, #288]	; (80140a4 <Update_Detail+0xf00>)
 8013f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013f86:	4613      	mov	r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	00db      	lsls	r3, r3, #3
          scale = (List[PROBEATT].Val?
 8013f8e:	60bb      	str	r3, [r7, #8]
          Tmp = ((((Vavg-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8013f90:	4b48      	ldr	r3, [pc, #288]	; (80140b4 <Update_Detail+0xf10>)
 8013f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f96:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	fb02 f303 	mul.w	r3, r2, r3
 8013fa0:	131b      	asrs	r3, r3, #12
 8013fa2:	3364      	adds	r3, #100	; 0x64
 8013fa4:	4a38      	ldr	r2, [pc, #224]	; (8014088 <Update_Detail+0xee4>)
 8013fa6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013faa:	1a9a      	subs	r2, r3, r2
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	fb02 f303 	mul.w	r3, r2, r3
 8013fb2:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 8013fb4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	2201      	movs	r2, #1
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	f000 f8fd 	bl	80141bc <DispMeter>
        break;
 8013fc2:	e0a0      	b.n	8014106 <Update_Detail+0xf62>

      case VMAX://��ʾ��ѹ���ֵ
        if(abs(Vmax)<4){
 8013fc4:	4b39      	ldr	r3, [pc, #228]	; (80140ac <Update_Detail+0xf08>)
 8013fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	bfb8      	it	lt
 8013fce:	425b      	neglt	r3, r3
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	2b03      	cmp	r3, #3
 8013fd4:	d802      	bhi.n	8013fdc <Update_Detail+0xe38>
          Tmp = 0.00;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	613b      	str	r3, [r7, #16]
 8013fda:	e02e      	b.n	801403a <Update_Detail+0xe96>
        }else{
		  scale = (List[PROBEATT].Val?
 8013fdc:	4b2a      	ldr	r3, [pc, #168]	; (8014088 <Update_Detail+0xee4>)
 8013fde:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                  VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00b      	beq.n	8013ffe <Update_Detail+0xe5a>
 8013fe6:	4b28      	ldr	r3, [pc, #160]	; (8014088 <Update_Detail+0xee4>)
 8013fe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013fec:	461a      	mov	r2, r3
 8013fee:	4b2c      	ldr	r3, [pc, #176]	; (80140a0 <Update_Detail+0xefc>)
 8013ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4413      	add	r3, r2
 8013ffa:	00db      	lsls	r3, r3, #3
 8013ffc:	e00a      	b.n	8014014 <Update_Detail+0xe70>
 8013ffe:	4b22      	ldr	r3, [pc, #136]	; (8014088 <Update_Detail+0xee4>)
 8014000:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014004:	461a      	mov	r2, r3
 8014006:	4b27      	ldr	r3, [pc, #156]	; (80140a4 <Update_Detail+0xf00>)
 8014008:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801400c:	4613      	mov	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 8014014:	60bb      	str	r3, [r7, #8]
          Tmp  = ((((Vmax-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 8014016:	4b25      	ldr	r3, [pc, #148]	; (80140ac <Update_Detail+0xf08>)
 8014018:	f9b3 3000 	ldrsh.w	r3, [r3]
 801401c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	fb02 f303 	mul.w	r3, r2, r3
 8014026:	131b      	asrs	r3, r3, #12
 8014028:	3364      	adds	r3, #100	; 0x64
 801402a:	4a17      	ldr	r2, [pc, #92]	; (8014088 <Update_Detail+0xee4>)
 801402c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8014030:	1a9a      	subs	r2, r3, r2
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	fb02 f303 	mul.w	r3, r2, r3
 8014038:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, UNSIGN, Tmp);
 801403a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2201      	movs	r2, #1
 8014042:	2101      	movs	r1, #1
 8014044:	f000 f8ba 	bl	80141bc <DispMeter>
        break;
 8014048:	e05d      	b.n	8014106 <Update_Detail+0xf62>

      case VMIN://��ʾ��ѹ��Сֵ
        if(abs(Vmin)<4){
 801404a:	4b19      	ldr	r3, [pc, #100]	; (80140b0 <Update_Detail+0xf0c>)
 801404c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014050:	2b00      	cmp	r3, #0
 8014052:	bfb8      	it	lt
 8014054:	425b      	neglt	r3, r3
 8014056:	b29b      	uxth	r3, r3
 8014058:	2b03      	cmp	r3, #3
 801405a:	d802      	bhi.n	8014062 <Update_Detail+0xebe>
          Tmp = 0.00;
 801405c:	2300      	movs	r3, #0
 801405e:	613b      	str	r3, [r7, #16]
 8014060:	e048      	b.n	80140f4 <Update_Detail+0xf50>
        }else{
		  scale = (List[PROBEATT].Val?
 8014062:	4b09      	ldr	r3, [pc, #36]	; (8014088 <Update_Detail+0xee4>)
 8014064:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
                           VScale_10X[List[Y_RANGES].Val]:VScale[List[Y_RANGES].Val])*40;
 8014068:	2b00      	cmp	r3, #0
 801406a:	d025      	beq.n	80140b8 <Update_Detail+0xf14>
 801406c:	4b06      	ldr	r3, [pc, #24]	; (8014088 <Update_Detail+0xee4>)
 801406e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014072:	461a      	mov	r2, r3
 8014074:	4b0a      	ldr	r3, [pc, #40]	; (80140a0 <Update_Detail+0xefc>)
 8014076:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801407a:	4613      	mov	r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	4413      	add	r3, r2
 8014080:	00db      	lsls	r3, r3, #3
 8014082:	e024      	b.n	80140ce <Update_Detail+0xf2a>
 8014084:	20002848 	.word	0x20002848
 8014088:	20000298 	.word	0x20000298
 801408c:	000f4240 	.word	0x000f4240
 8014090:	080022a0 	.word	0x080022a0
 8014094:	08002270 	.word	0x08002270
 8014098:	20006870 	.word	0x20006870
 801409c:	2000285c 	.word	0x2000285c
 80140a0:	20000270 	.word	0x20000270
 80140a4:	08001d68 	.word	0x08001d68
 80140a8:	20006878 	.word	0x20006878
 80140ac:	2000284e 	.word	0x2000284e
 80140b0:	20002860 	.word	0x20002860
 80140b4:	20002850 	.word	0x20002850
 80140b8:	4b38      	ldr	r3, [pc, #224]	; (801419c <Update_Detail+0xff8>)
 80140ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80140be:	461a      	mov	r2, r3
 80140c0:	4b37      	ldr	r3, [pc, #220]	; (80141a0 <Update_Detail+0xffc>)
 80140c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140c6:	4613      	mov	r3, r2
 80140c8:	009b      	lsls	r3, r3, #2
 80140ca:	4413      	add	r3, r2
 80140cc:	00db      	lsls	r3, r3, #3
		  scale = (List[PROBEATT].Val?
 80140ce:	60bb      	str	r3, [r7, #8]
                  Tmp  = ((((Vmin-2048)*(Ak))>>12)+100-List[V0_POSI].Val)*scale;
 80140d0:	4b34      	ldr	r3, [pc, #208]	; (80141a4 <Update_Detail+0x1000>)
 80140d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140d6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	fb02 f303 	mul.w	r3, r2, r3
 80140e0:	131b      	asrs	r3, r3, #12
 80140e2:	3364      	adds	r3, #100	; 0x64
 80140e4:	4a2d      	ldr	r2, [pc, #180]	; (801419c <Update_Detail+0xff8>)
 80140e6:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 80140ea:	1a9a      	subs	r2, r3, r2
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	fb02 f303 	mul.w	r3, r2, r3
 80140f2:	613b      	str	r3, [r7, #16]
        }
        DispMeter(i, 1, SIGN, Tmp);
 80140f4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	2200      	movs	r2, #0
 80140fc:	2101      	movs	r1, #1
 80140fe:	f000 f85d 	bl	80141bc <DispMeter>
        break;
 8014102:	e000      	b.n	8014106 <Update_Detail+0xf62>
        break;
 8014104:	bf00      	nop

        break;

      }
      /**/
      if(Freq_Flag){
 8014106:	4b28      	ldr	r3, [pc, #160]	; (80141a8 <Update_Detail+0x1004>)
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d03a      	beq.n	8014184 <Update_Detail+0xfe0>
        Freq_Flag = 0;
 801410e:	4b26      	ldr	r3, [pc, #152]	; (80141a8 <Update_Detail+0x1004>)
 8014110:	2200      	movs	r2, #0
 8014112:	701a      	strb	r2, [r3, #0]
        FTmp=Edge*25*1000/2;
 8014114:	4b25      	ldr	r3, [pc, #148]	; (80141ac <Update_Detail+0x1008>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	f243 02d4 	movw	r2, #12500	; 0x30d4
 801411c:	fb02 f303 	mul.w	r3, r2, r3
 8014120:	60fb      	str	r3, [r7, #12]
        if(List[TIM_BASE].Val<9)FTmp= FTmp*1000000;
 8014122:	4b1e      	ldr	r3, [pc, #120]	; (801419c <Update_Detail+0xff8>)
 8014124:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014128:	2b08      	cmp	r3, #8
 801412a:	dc05      	bgt.n	8014138 <Update_Detail+0xf94>
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	4a20      	ldr	r2, [pc, #128]	; (80141b0 <Update_Detail+0x100c>)
 8014130:	fb02 f303 	mul.w	r3, r2, r3
 8014134:	60fb      	str	r3, [r7, #12]
 8014136:	e00a      	b.n	801414e <Update_Detail+0xfaa>
        else if(List[TIM_BASE].Val<18)FTmp= FTmp*1000;
 8014138:	4b18      	ldr	r3, [pc, #96]	; (801419c <Update_Detail+0xff8>)
 801413a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801413e:	2b11      	cmp	r3, #17
 8014140:	dc05      	bgt.n	801414e <Update_Detail+0xfaa>
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014148:	fb02 f303 	mul.w	r3, r2, r3
 801414c:	60fb      	str	r3, [r7, #12]
        FTmp=FTmp/Ts[List[TIM_BASE].Val]/DEPTH[List[SMPL_DPTH].Val];
 801414e:	4b13      	ldr	r3, [pc, #76]	; (801419c <Update_Detail+0xff8>)
 8014150:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014154:	461a      	mov	r2, r3
 8014156:	4b17      	ldr	r3, [pc, #92]	; (80141b4 <Update_Detail+0x1010>)
 8014158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801415c:	461a      	mov	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	fbb3 f3f2 	udiv	r3, r3, r2
 8014164:	4a0d      	ldr	r2, [pc, #52]	; (801419c <Update_Detail+0xff8>)
 8014166:	f9b2 204c 	ldrsh.w	r2, [r2, #76]	; 0x4c
 801416a:	4611      	mov	r1, r2
 801416c:	4a12      	ldr	r2, [pc, #72]	; (80141b8 <Update_Detail+0x1014>)
 801416e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8014172:	fbb3 f3f2 	udiv	r3, r3, r2
 8014176:	60fb      	str	r3, [r7, #12]
        DispFreq(    1, UNSIGN,FTmp);
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	461a      	mov	r2, r3
 801417c:	2101      	movs	r1, #1
 801417e:	2001      	movs	r0, #1
 8014180:	f000 fa08 	bl	8014594 <DispFreq>
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014184:	8afb      	ldrh	r3, [r7, #22]
 8014186:	3301      	adds	r3, #1
 8014188:	82fb      	strh	r3, [r7, #22]
 801418a:	8afb      	ldrh	r3, [r7, #22]
 801418c:	2b29      	cmp	r3, #41	; 0x29
 801418e:	f67f a849 	bls.w	8013224 <Update_Detail+0x80>
      }
    }
  }

}
 8014192:	bf00      	nop
 8014194:	bf00      	nop
 8014196:	371c      	adds	r7, #28
 8014198:	46bd      	mov	sp, r7
 801419a:	bd90      	pop	{r4, r7, pc}
 801419c:	20000298 	.word	0x20000298
 80141a0:	08001d68 	.word	0x08001d68
 80141a4:	20002860 	.word	0x20002860
 80141a8:	200001cc 	.word	0x200001cc
 80141ac:	20002848 	.word	0x20002848
 80141b0:	000f4240 	.word	0x000f4240
 80141b4:	080022a0 	.word	0x080022a0
 80141b8:	08002270 	.word	0x08002270

080141bc <DispMeter>:
/*******************************************************************************

*******************************************************************************/
void DispMeter(short Item, char St, char Mode, int Val)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b084      	sub	sp, #16
 80141c0:	af02      	add	r7, sp, #8
 80141c2:	603b      	str	r3, [r7, #0]
 80141c4:	4603      	mov	r3, r0
 80141c6:	80fb      	strh	r3, [r7, #6]
 80141c8:	460b      	mov	r3, r1
 80141ca:	717b      	strb	r3, [r7, #5]
 80141cc:	4613      	mov	r3, r2
 80141ce:	713b      	strb	r3, [r7, #4]
  SetColor(GRY, TCOLOR[ME]);
 80141d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141d4:	4619      	mov	r1, r3
 80141d6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80141da:	f7f9 fcb3 	bl	800db44 <SetColor>

  Draw_Circle_D(INV, S_X[Item]-3, LABLE_Y, 11, 0, 6*12);
 80141de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80141e2:	4a30      	ldr	r2, [pc, #192]	; (80142a4 <DispMeter+0xe8>)
 80141e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	3b03      	subs	r3, #3
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	b219      	sxth	r1, r3
 80141f0:	2348      	movs	r3, #72	; 0x48
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	2300      	movs	r3, #0
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	230b      	movs	r3, #11
 80141fa:	2203      	movs	r2, #3
 80141fc:	2001      	movs	r0, #1
 80141fe:	f7f9 fd8f 	bl	800dd20 <Draw_Circle_D>
  DispStr(S_X[Item], LABLE_Y, INV, (char *)&Z[Item-FREQUENC]);// ��ʾ������Ŀ����
 8014202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014206:	4a27      	ldr	r2, [pc, #156]	; (80142a4 <DispMeter+0xe8>)
 8014208:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 801420c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014210:	f1a3 0213 	sub.w	r2, r3, #19
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4a22      	ldr	r2, [pc, #136]	; (80142a8 <DispMeter+0xec>)
 801421e:	4413      	add	r3, r2
 8014220:	2201      	movs	r2, #1
 8014222:	2103      	movs	r1, #3
 8014224:	f7f9 fca6 	bl	800db74 <DispStr>
  Value2Str(NumStr, Val, List[Item].PTR, 3, Mode);
 8014228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801422c:	4a1f      	ldr	r2, [pc, #124]	; (80142ac <DispMeter+0xf0>)
 801422e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014232:	793b      	ldrb	r3, [r7, #4]
 8014234:	9300      	str	r3, [sp, #0]
 8014236:	2303      	movs	r3, #3
 8014238:	6839      	ldr	r1, [r7, #0]
 801423a:	481d      	ldr	r0, [pc, #116]	; (80142b0 <DispMeter+0xf4>)
 801423c:	f7fd fb72 	bl	8011924 <Value2Str>

  if(St)
 8014240:	797b      	ldrb	r3, [r7, #5]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d01c      	beq.n	8014280 <DispMeter+0xc4>
  {
    DispStr(S_X[Item]+24, LABLE_Y, INV, ":       ");
 8014246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801424a:	4a16      	ldr	r2, [pc, #88]	; (80142a4 <DispMeter+0xe8>)
 801424c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014250:	b29b      	uxth	r3, r3
 8014252:	3318      	adds	r3, #24
 8014254:	b29b      	uxth	r3, r3
 8014256:	b218      	sxth	r0, r3
 8014258:	4b16      	ldr	r3, [pc, #88]	; (80142b4 <DispMeter+0xf8>)
 801425a:	2201      	movs	r2, #1
 801425c:	2103      	movs	r1, #3
 801425e:	f7f9 fc89 	bl	800db74 <DispStr>
    DispStr(S_X[Item]+30, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014266:	4a0f      	ldr	r2, [pc, #60]	; (80142a4 <DispMeter+0xe8>)
 8014268:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801426c:	b29b      	uxth	r3, r3
 801426e:	331e      	adds	r3, #30
 8014270:	b29b      	uxth	r3, r3
 8014272:	b218      	sxth	r0, r3
 8014274:	4b0e      	ldr	r3, [pc, #56]	; (80142b0 <DispMeter+0xf4>)
 8014276:	2201      	movs	r2, #1
 8014278:	2103      	movs	r1, #3
 801427a:	f7f9 fc7b 	bl	800db74 <DispStr>
  }
  else
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
}
 801427e:	e00d      	b.n	801429c <DispMeter+0xe0>
	  DispStr(S_X[Item]+24, LABLE_Y, INV, ": ----- ");
 8014280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014284:	4a07      	ldr	r2, [pc, #28]	; (80142a4 <DispMeter+0xe8>)
 8014286:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801428a:	b29b      	uxth	r3, r3
 801428c:	3318      	adds	r3, #24
 801428e:	b29b      	uxth	r3, r3
 8014290:	b218      	sxth	r0, r3
 8014292:	4b09      	ldr	r3, [pc, #36]	; (80142b8 <DispMeter+0xfc>)
 8014294:	2201      	movs	r2, #1
 8014296:	2103      	movs	r1, #3
 8014298:	f7f9 fc6c 	bl	800db74 <DispStr>
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	0800215c 	.word	0x0800215c
 80142a8:	08001d18 	.word	0x08001d18
 80142ac:	20000298 	.word	0x20000298
 80142b0:	20002834 	.word	0x20002834
 80142b4:	080009d4 	.word	0x080009d4
 80142b8:	080009e0 	.word	0x080009e0

080142bc <DispStatus>:

/*******************************************************************************

*******************************************************************************/
void DispStatus(void)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af02      	add	r7, sp, #8
  char* p;
  SetColor(GRY, (Status & STOP) ? RED : TCOLOR[TRG]);
 80142c2:	4b20      	ldr	r3, [pc, #128]	; (8014344 <DispStatus+0x88>)
 80142c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d102      	bne.n	80142d8 <DispStatus+0x1c>
 80142d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80142d6:	e000      	b.n	80142da <DispStatus+0x1e>
 80142d8:	231f      	movs	r3, #31
 80142da:	4619      	mov	r1, r3
 80142dc:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80142e0:	f7f9 fc30 	bl	800db44 <SetColor>
  p =(Status & STOP)?(char*)M :(List[SYNCMODE].PTR +(List[SYNCMODE].Val)*6);
 80142e4:	4b17      	ldr	r3, [pc, #92]	; (8014344 <DispStatus+0x88>)
 80142e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	f003 0301 	and.w	r3, r3, #1
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d10b      	bne.n	801430c <DispStatus+0x50>
 80142f4:	4b14      	ldr	r3, [pc, #80]	; (8014348 <DispStatus+0x8c>)
 80142f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80142f8:	4b13      	ldr	r3, [pc, #76]	; (8014348 <DispStatus+0x8c>)
 80142fa:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80142fe:	4619      	mov	r1, r3
 8014300:	460b      	mov	r3, r1
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	440b      	add	r3, r1
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	e000      	b.n	801430e <DispStatus+0x52>
 801430c:	4b0f      	ldr	r3, [pc, #60]	; (801434c <DispStatus+0x90>)
 801430e:	607b      	str	r3, [r7, #4]
  Draw_Circle_D(INV, S_X[SYNCMODE]-3, TITLE_Y_POS, 11, 1, 6*4);
 8014310:	f240 1321 	movw	r3, #289	; 0x121
 8014314:	b29b      	uxth	r3, r3
 8014316:	3b03      	subs	r3, #3
 8014318:	b29b      	uxth	r3, r3
 801431a:	b219      	sxth	r1, r3
 801431c:	2318      	movs	r3, #24
 801431e:	9301      	str	r3, [sp, #4]
 8014320:	2301      	movs	r3, #1
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	230b      	movs	r3, #11
 8014326:	22e1      	movs	r2, #225	; 0xe1
 8014328:	2001      	movs	r0, #1
 801432a:	f7f9 fcf9 	bl	800dd20 <Draw_Circle_D>
  DispStr(S_X[SYNCMODE], TITLE_Y_POS, INV, (char *)p);
 801432e:	f240 1021 	movw	r0, #289	; 0x121
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2201      	movs	r2, #1
 8014336:	21e1      	movs	r1, #225	; 0xe1
 8014338:	f7f9 fc1c 	bl	800db74 <DispStr>
}
 801433c:	bf00      	nop
 801433e:	3708      	adds	r7, #8
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	2000079c 	.word	0x2000079c
 8014348:	20000298 	.word	0x20000298
 801434c:	08001cb4 	.word	0x08001cb4

08014350 <Update_Windows>:

/*******************************************************************************
���»���������λ��
*******************************************************************************/
void Update_Windows(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
  short  x0,x,y,i,j,Width;
  short  Depth =  DEPTH[List[SMPL_DPTH].Val];
 8014356:	4b6a      	ldr	r3, [pc, #424]	; (8014500 <Update_Windows+0x1b0>)
 8014358:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801435c:	461a      	mov	r2, r3
 801435e:	4b69      	ldr	r3, [pc, #420]	; (8014504 <Update_Windows+0x1b4>)
 8014360:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014364:	80fb      	strh	r3, [r7, #6]
  Width =(300*300)/Depth;
 8014366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801436a:	4a67      	ldr	r2, [pc, #412]	; (8014508 <Update_Windows+0x1b8>)
 801436c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014370:	80bb      	strh	r3, [r7, #4]
  if(Current == XN &&(PopType & LIST_POP) )
 8014372:	4b66      	ldr	r3, [pc, #408]	; (801450c <Update_Windows+0x1bc>)
 8014374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014378:	2b01      	cmp	r3, #1
 801437a:	f040 80a9 	bne.w	80144d0 <Update_Windows+0x180>
 801437e:	4b64      	ldr	r3, [pc, #400]	; (8014510 <Update_Windows+0x1c0>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	f003 0302 	and.w	r3, r3, #2
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 80a2 	beq.w	80144d0 <Update_Windows+0x180>
  {
      Windows_Pop = 1;
 801438c:	4b61      	ldr	r3, [pc, #388]	; (8014514 <Update_Windows+0x1c4>)
 801438e:	2201      	movs	r2, #1
 8014390:	701a      	strb	r2, [r3, #0]
      x0=2+(List[VIEWPOSI].Val)*300/Depth;
 8014392:	4b5b      	ldr	r3, [pc, #364]	; (8014500 <Update_Windows+0x1b0>)
 8014394:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014398:	461a      	mov	r2, r3
 801439a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801439e:	fb03 f202 	mul.w	r2, r3, r2
 80143a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	3302      	adds	r3, #2
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	81fb      	strh	r3, [r7, #14]
      x=2;
 80143b2:	2302      	movs	r3, #2
 80143b4:	81bb      	strh	r3, [r7, #12]
      y=15;
 80143b6:	230f      	movs	r3, #15
 80143b8:	807b      	strh	r3, [r7, #2]
      for(i=0;i<300;i++){    //��������
 80143ba:	2300      	movs	r3, #0
 80143bc:	817b      	strh	r3, [r7, #10]
 80143be:	e029      	b.n	8014414 <Update_Windows+0xc4>
        LCD_Set_Posi(x++, y);
 80143c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80143c4:	b293      	uxth	r3, r2
 80143c6:	3301      	adds	r3, #1
 80143c8:	b29b      	uxth	r3, r3
 80143ca:	81bb      	strh	r3, [r7, #12]
 80143cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143d0:	4619      	mov	r1, r3
 80143d2:	4610      	mov	r0, r2
 80143d4:	f7fd fe66 	bl	80120a4 <LCD_Set_Posi>
        LCD_Set_Pixel(DAR);
 80143d8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80143dc:	f7fd feb0 	bl	8012140 <LCD_Set_Pixel>
        for(j=0; j<2; j++)LCD_Set_Pixel(RED);
 80143e0:	2300      	movs	r3, #0
 80143e2:	813b      	strh	r3, [r7, #8]
 80143e4:	e008      	b.n	80143f8 <Update_Windows+0xa8>
 80143e6:	201f      	movs	r0, #31
 80143e8:	f7fd feaa 	bl	8012140 <LCD_Set_Pixel>
 80143ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	3301      	adds	r3, #1
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	813b      	strh	r3, [r7, #8]
 80143f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	ddf2      	ble.n	80143e6 <Update_Windows+0x96>
        LCD_Set_Pixel(DAR);
 8014400:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014404:	f7fd fe9c 	bl	8012140 <LCD_Set_Pixel>
      for(i=0;i<300;i++){    //��������
 8014408:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801440c:	b29b      	uxth	r3, r3
 801440e:	3301      	adds	r3, #1
 8014410:	b29b      	uxth	r3, r3
 8014412:	817b      	strh	r3, [r7, #10]
 8014414:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014418:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801441c:	dbd0      	blt.n	80143c0 <Update_Windows+0x70>
      }
      if(Current == XN && (MenuNow[XN]==SMPL_DPTH ))
 801441e:	4b3b      	ldr	r3, [pc, #236]	; (801450c <Update_Windows+0x1bc>)
 8014420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014424:	2b01      	cmp	r3, #1
 8014426:	d122      	bne.n	801446e <Update_Windows+0x11e>
 8014428:	4b3b      	ldr	r3, [pc, #236]	; (8014518 <Update_Windows+0x1c8>)
 801442a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801442e:	2b09      	cmp	r3, #9
 8014430:	d11d      	bne.n	801446e <Update_Windows+0x11e>
      {  //Depthѡ��
        if(Key_Buffer == KEYCODE_RIGHT || Key_Buffer == KEYCODE_LEFT)
 8014432:	4b3a      	ldr	r3, [pc, #232]	; (801451c <Update_Windows+0x1cc>)
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b2db      	uxtb	r3, r3
 8014438:	2b06      	cmp	r3, #6
 801443a:	d004      	beq.n	8014446 <Update_Windows+0xf6>
 801443c:	4b37      	ldr	r3, [pc, #220]	; (801451c <Update_Windows+0x1cc>)
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	b2db      	uxtb	r3, r3
 8014442:	2b05      	cmp	r3, #5
 8014444:	d113      	bne.n	801446e <Update_Windows+0x11e>
        {  //ѡ���б䶯ʱ�ı�Ԥ����λ��
          List[VIEWPOSI].Val= 0;
 8014446:	4b2e      	ldr	r3, [pc, #184]	; (8014500 <Update_Windows+0x1b0>)
 8014448:	2200      	movs	r2, #0
 801444a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          x0=2+(List[VIEWPOSI].Val)*300/Depth;
 801444e:	4b2c      	ldr	r3, [pc, #176]	; (8014500 <Update_Windows+0x1b0>)
 8014450:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014454:	461a      	mov	r2, r3
 8014456:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801445a:	fb03 f202 	mul.w	r2, r3, r2
 801445e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014462:	fb92 f3f3 	sdiv	r3, r2, r3
 8014466:	b29b      	uxth	r3, r3
 8014468:	3302      	adds	r3, #2
 801446a:	b29b      	uxth	r3, r3
 801446c:	81fb      	strh	r3, [r7, #14]
        }
      }
      x = x0;               //��ǰ�����ڻ�����λ��
 801446e:	89fb      	ldrh	r3, [r7, #14]
 8014470:	81bb      	strh	r3, [r7, #12]
      y=15;
 8014472:	230f      	movs	r3, #15
 8014474:	807b      	strh	r3, [r7, #2]
      for(i=0;i<Width;i++){
 8014476:	2300      	movs	r3, #0
 8014478:	817b      	strh	r3, [r7, #10]
 801447a:	e022      	b.n	80144c2 <Update_Windows+0x172>
        LCD_Set_Posi(x++, y);
 801447c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8014480:	b293      	uxth	r3, r2
 8014482:	3301      	adds	r3, #1
 8014484:	b29b      	uxth	r3, r3
 8014486:	81bb      	strh	r3, [r7, #12]
 8014488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801448c:	4619      	mov	r1, r3
 801448e:	4610      	mov	r0, r2
 8014490:	f7fd fe08 	bl	80120a4 <LCD_Set_Posi>
        for(j=0; j<4; j++)LCD_Set_Pixel(GRN);
 8014494:	2300      	movs	r3, #0
 8014496:	813b      	strh	r3, [r7, #8]
 8014498:	e009      	b.n	80144ae <Update_Windows+0x15e>
 801449a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 801449e:	f7fd fe4f 	bl	8012140 <LCD_Set_Pixel>
 80144a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	3301      	adds	r3, #1
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	813b      	strh	r3, [r7, #8]
 80144ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80144b2:	2b03      	cmp	r3, #3
 80144b4:	ddf1      	ble.n	801449a <Update_Windows+0x14a>
      for(i=0;i<Width;i++){
 80144b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	3301      	adds	r3, #1
 80144be:	b29b      	uxth	r3, r3
 80144c0:	817b      	strh	r3, [r7, #10]
 80144c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80144c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	dbd6      	blt.n	801447c <Update_Windows+0x12c>
  if(Current == XN &&(PopType & LIST_POP) )
 80144ce:	e012      	b.n	80144f6 <Update_Windows+0x1a6>
      }
  }
  else if(Current == XN &&!(PopType & LIST_POP))
 80144d0:	4b0e      	ldr	r3, [pc, #56]	; (801450c <Update_Windows+0x1bc>)
 80144d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144d6:	2b01      	cmp	r3, #1
 80144d8:	d10d      	bne.n	80144f6 <Update_Windows+0x1a6>
 80144da:	4b0d      	ldr	r3, [pc, #52]	; (8014510 <Update_Windows+0x1c0>)
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	f003 0302 	and.w	r3, r3, #2
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d107      	bne.n	80144f6 <Update_Windows+0x1a6>
  {
    Windows_Pop = 0;
 80144e6:	4b0b      	ldr	r3, [pc, #44]	; (8014514 <Update_Windows+0x1c4>)
 80144e8:	2200      	movs	r2, #0
 80144ea:	701a      	strb	r2, [r3, #0]
    Clr_WavePosi(DAR);
 80144ec:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80144f0:	f000 f816 	bl	8014520 <Clr_WavePosi>
  }
}
 80144f4:	e7ff      	b.n	80144f6 <Update_Windows+0x1a6>
 80144f6:	bf00      	nop
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	20000298 	.word	0x20000298
 8014504:	08002270 	.word	0x08002270
 8014508:	00015f90 	.word	0x00015f90
 801450c:	2000079a 	.word	0x2000079a
 8014510:	2000078a 	.word	0x2000078a
 8014514:	200007a2 	.word	0x200007a2
 8014518:	20000538 	.word	0x20000538
 801451c:	2000077d 	.word	0x2000077d

08014520 <Clr_WavePosi>:

/*******************************************************************************
 void Clr_WavePosi(u16 Col)  �������λ����ʾ
*******************************************************************************/
void Clr_WavePosi(short Col)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	4603      	mov	r3, r0
 8014528:	80fb      	strh	r3, [r7, #6]
  short x,y,i,j;
  x=2;
 801452a:	2302      	movs	r3, #2
 801452c:	81fb      	strh	r3, [r7, #14]
  y=14;
 801452e:	230e      	movs	r3, #14
 8014530:	813b      	strh	r3, [r7, #8]
  for(i=0;i<300;i++)
 8014532:	2300      	movs	r3, #0
 8014534:	81bb      	strh	r3, [r7, #12]
 8014536:	e022      	b.n	801457e <Clr_WavePosi+0x5e>
  {
    LCD_Set_Posi(x++, y);
 8014538:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801453c:	b293      	uxth	r3, r2
 801453e:	3301      	adds	r3, #1
 8014540:	b29b      	uxth	r3, r3
 8014542:	81fb      	strh	r3, [r7, #14]
 8014544:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014548:	4619      	mov	r1, r3
 801454a:	4610      	mov	r0, r2
 801454c:	f7fd fdaa 	bl	80120a4 <LCD_Set_Posi>
    for(j=0; j<6; j++)
 8014550:	2300      	movs	r3, #0
 8014552:	817b      	strh	r3, [r7, #10]
 8014554:	e009      	b.n	801456a <Clr_WavePosi+0x4a>
    	LCD_Set_Pixel(Col);
 8014556:	88fb      	ldrh	r3, [r7, #6]
 8014558:	4618      	mov	r0, r3
 801455a:	f7fd fdf1 	bl	8012140 <LCD_Set_Pixel>
    for(j=0; j<6; j++)
 801455e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014562:	b29b      	uxth	r3, r3
 8014564:	3301      	adds	r3, #1
 8014566:	b29b      	uxth	r3, r3
 8014568:	817b      	strh	r3, [r7, #10]
 801456a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801456e:	2b05      	cmp	r3, #5
 8014570:	ddf1      	ble.n	8014556 <Clr_WavePosi+0x36>
  for(i=0;i<300;i++)
 8014572:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014576:	b29b      	uxth	r3, r3
 8014578:	3301      	adds	r3, #1
 801457a:	b29b      	uxth	r3, r3
 801457c:	81bb      	strh	r3, [r7, #12]
 801457e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014582:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014586:	dbd7      	blt.n	8014538 <Clr_WavePosi+0x18>
  }
}
 8014588:	bf00      	nop
 801458a:	bf00      	nop
 801458c:	3710      	adds	r7, #16
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
	...

08014594 <DispFreq>:

/*******************************************************************************

*******************************************************************************/
void DispFreq(char St, char Mode, int Val)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	b084      	sub	sp, #16
 8014598:	af02      	add	r7, sp, #8
 801459a:	4603      	mov	r3, r0
 801459c:	603a      	str	r2, [r7, #0]
 801459e:	71fb      	strb	r3, [r7, #7]
 80145a0:	460b      	mov	r3, r1
 80145a2:	71bb      	strb	r3, [r7, #6]
  SetColor(GRY, TCOLOR[ME]);
 80145a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145a8:	4619      	mov	r1, r3
 80145aa:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80145ae:	f7f9 fac9 	bl	800db44 <SetColor>

  Draw_Circle_D(INV, S_X[FREQUENC]-6*15-3+4, LABLE_Y, 11, 0, 6*12);
 80145b2:	23a2      	movs	r3, #162	; 0xa2
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	3b59      	subs	r3, #89	; 0x59
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	b219      	sxth	r1, r3
 80145bc:	2348      	movs	r3, #72	; 0x48
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	2300      	movs	r3, #0
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	230b      	movs	r3, #11
 80145c6:	2203      	movs	r2, #3
 80145c8:	2001      	movs	r0, #1
 80145ca:	f7f9 fba9 	bl	800dd20 <Draw_Circle_D>
  DispStr(S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char*)&Z[0]);// ��ʾ������Ŀ����
 80145ce:	23a2      	movs	r3, #162	; 0xa2
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	3b56      	subs	r3, #86	; 0x56
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	b218      	sxth	r0, r3
 80145d8:	4b1a      	ldr	r3, [pc, #104]	; (8014644 <DispFreq+0xb0>)
 80145da:	2201      	movs	r2, #1
 80145dc:	2103      	movs	r1, #3
 80145de:	f7f9 fac9 	bl	800db74 <DispStr>
  Value2Str(NumStr, Val, List[FREQUENC].PTR, 3, Mode);
 80145e2:	4b19      	ldr	r3, [pc, #100]	; (8014648 <DispFreq+0xb4>)
 80145e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80145e8:	79bb      	ldrb	r3, [r7, #6]
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	2303      	movs	r3, #3
 80145ee:	6839      	ldr	r1, [r7, #0]
 80145f0:	4816      	ldr	r0, [pc, #88]	; (801464c <DispFreq+0xb8>)
 80145f2:	f7fd f997 	bl	8011924 <Value2Str>

  if(St) {
 80145f6:	79fb      	ldrb	r3, [r7, #7]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d014      	beq.n	8014626 <DispFreq+0x92>
    DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ":       ");
 80145fc:	23a2      	movs	r3, #162	; 0xa2
 80145fe:	b29b      	uxth	r3, r3
 8014600:	3b3e      	subs	r3, #62	; 0x3e
 8014602:	b29b      	uxth	r3, r3
 8014604:	b218      	sxth	r0, r3
 8014606:	4b12      	ldr	r3, [pc, #72]	; (8014650 <DispFreq+0xbc>)
 8014608:	2201      	movs	r2, #1
 801460a:	2103      	movs	r1, #3
 801460c:	f7f9 fab2 	bl	800db74 <DispStr>
    DispStr(30+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, (char *)NumStr);   // ��ʾ������ֵ+����
 8014610:	23a2      	movs	r3, #162	; 0xa2
 8014612:	b29b      	uxth	r3, r3
 8014614:	3b38      	subs	r3, #56	; 0x38
 8014616:	b29b      	uxth	r3, r3
 8014618:	b218      	sxth	r0, r3
 801461a:	4b0c      	ldr	r3, [pc, #48]	; (801464c <DispFreq+0xb8>)
 801461c:	2201      	movs	r2, #1
 801461e:	2103      	movs	r1, #3
 8014620:	f7f9 faa8 	bl	800db74 <DispStr>
  }
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
}
 8014624:	e009      	b.n	801463a <DispFreq+0xa6>
  else   DispStr(24+S_X[FREQUENC]-6*15+4, LABLE_Y, INV, ": ---- ");
 8014626:	23a2      	movs	r3, #162	; 0xa2
 8014628:	b29b      	uxth	r3, r3
 801462a:	3b3e      	subs	r3, #62	; 0x3e
 801462c:	b29b      	uxth	r3, r3
 801462e:	b218      	sxth	r0, r3
 8014630:	4b08      	ldr	r3, [pc, #32]	; (8014654 <DispFreq+0xc0>)
 8014632:	2201      	movs	r2, #1
 8014634:	2103      	movs	r1, #3
 8014636:	f7f9 fa9d 	bl	800db74 <DispStr>
}
 801463a:	bf00      	nop
 801463c:	3708      	adds	r7, #8
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	08001d18 	.word	0x08001d18
 8014648:	20000298 	.word	0x20000298
 801464c:	20002834 	.word	0x20002834
 8014650:	080009d4 	.word	0x080009d4
 8014654:	080009ec 	.word	0x080009ec

08014658 <Show_List>:

/*******************************************************************************
 Show_List: ���ò˵���λ�á��ߴ硢��ɫ����ʾ����
*******************************************************************************/
void Show_List(void)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b088      	sub	sp, #32
 801465c:	af02      	add	r7, sp, #8
  short i, Ny0, Nx0, CurrentMax = MU_BEGN[Current]+ M_ITEMS[Current];
 801465e:	4b59      	ldr	r3, [pc, #356]	; (80147c4 <Show_List+0x16c>)
 8014660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014664:	461a      	mov	r2, r3
 8014666:	4b58      	ldr	r3, [pc, #352]	; (80147c8 <Show_List+0x170>)
 8014668:	5c9b      	ldrb	r3, [r3, r2]
 801466a:	b29a      	uxth	r2, r3
 801466c:	4b55      	ldr	r3, [pc, #340]	; (80147c4 <Show_List+0x16c>)
 801466e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014672:	4619      	mov	r1, r3
 8014674:	4b55      	ldr	r3, [pc, #340]	; (80147cc <Show_List+0x174>)
 8014676:	5c5b      	ldrb	r3, [r3, r1]
 8014678:	b29b      	uxth	r3, r3
 801467a:	4413      	add	r3, r2
 801467c:	b29b      	uxth	r3, r3
 801467e:	827b      	strh	r3, [r7, #18]
  char  Flag = 0;
 8014680:	2300      	movs	r3, #0
 8014682:	757b      	strb	r3, [r7, #21]
  char  str[12];
  ParamTab[BXx1]= BLOCK_X[Current];
 8014684:	4b4f      	ldr	r3, [pc, #316]	; (80147c4 <Show_List+0x16c>)
 8014686:	f9b3 3000 	ldrsh.w	r3, [r3]
 801468a:	461a      	mov	r2, r3
 801468c:	4b50      	ldr	r3, [pc, #320]	; (80147d0 <Show_List+0x178>)
 801468e:	5c9b      	ldrb	r3, [r3, r2]
 8014690:	b21a      	sxth	r2, r3
 8014692:	4b50      	ldr	r3, [pc, #320]	; (80147d4 <Show_List+0x17c>)
 8014694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  ParamTab[BYx2]= BLOCK_Y[Current]*2;
 8014698:	4b4a      	ldr	r3, [pc, #296]	; (80147c4 <Show_List+0x16c>)
 801469a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801469e:	461a      	mov	r2, r3
 80146a0:	4b4d      	ldr	r3, [pc, #308]	; (80147d8 <Show_List+0x180>)
 80146a2:	5c9b      	ldrb	r3, [r3, r2]
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	005b      	lsls	r3, r3, #1
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	b21a      	sxth	r2, r3
 80146ac:	4b49      	ldr	r3, [pc, #292]	; (80147d4 <Show_List+0x17c>)
 80146ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ParamTab[WXx1]= BLOCK_W[Current];
 80146b2:	4b44      	ldr	r3, [pc, #272]	; (80147c4 <Show_List+0x16c>)
 80146b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146b8:	461a      	mov	r2, r3
 80146ba:	4b48      	ldr	r3, [pc, #288]	; (80147dc <Show_List+0x184>)
 80146bc:	5c9b      	ldrb	r3, [r3, r2]
 80146be:	b21a      	sxth	r2, r3
 80146c0:	4b44      	ldr	r3, [pc, #272]	; (80147d4 <Show_List+0x17c>)
 80146c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  ParamTab[HYx2]=(M_ITEMS[Current]+1)*32;
 80146c6:	4b3f      	ldr	r3, [pc, #252]	; (80147c4 <Show_List+0x16c>)
 80146c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146cc:	461a      	mov	r2, r3
 80146ce:	4b3f      	ldr	r3, [pc, #252]	; (80147cc <Show_List+0x174>)
 80146d0:	5c9b      	ldrb	r3, [r3, r2]
 80146d2:	3301      	adds	r3, #1
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	015b      	lsls	r3, r3, #5
 80146d8:	b29b      	uxth	r3, r3
 80146da:	b21a      	sxth	r2, r3
 80146dc:	4b3d      	ldr	r3, [pc, #244]	; (80147d4 <Show_List+0x17c>)
 80146de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  PopColor(WHT, DAR);
 80146e2:	f643 11e7 	movw	r1, #14823	; 0x39e7
 80146e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80146ea:	f7f9 ff95 	bl	800e618 <PopColor>
  Buil_Pop();
 80146ee:	f7f9 fe85 	bl	800e3fc <Buil_Pop>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80146f2:	4b34      	ldr	r3, [pc, #208]	; (80147c4 <Show_List+0x16c>)
 80146f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146f8:	461a      	mov	r2, r3
 80146fa:	4b33      	ldr	r3, [pc, #204]	; (80147c8 <Show_List+0x170>)
 80146fc:	5c9b      	ldrb	r3, [r3, r2]
 80146fe:	82fb      	strh	r3, [r7, #22]
 8014700:	e054      	b.n	80147ac <Show_List+0x154>
    if(i == MenuNow[Current]) {
 8014702:	4b30      	ldr	r3, [pc, #192]	; (80147c4 <Show_List+0x16c>)
 8014704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014708:	461a      	mov	r2, r3
 801470a:	4b35      	ldr	r3, [pc, #212]	; (80147e0 <Show_List+0x188>)
 801470c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8014710:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014714:	429a      	cmp	r2, r3
 8014716:	d102      	bne.n	801471e <Show_List+0xc6>
      Flag = INV;
 8014718:	2301      	movs	r3, #1
 801471a:	757b      	strb	r3, [r7, #21]
 801471c:	e007      	b.n	801472e <Show_List+0xd6>
    }
    else                      {
      PopColor(WHT, DAR);
 801471e:	f643 11e7 	movw	r1, #14823	; 0x39e7
 8014722:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014726:	f7f9 ff77 	bl	800e618 <PopColor>
      Flag = PRN;
 801472a:	2300      	movs	r3, #0
 801472c:	757b      	strb	r3, [r7, #21]
    }
    Ny0 = ((CurrentMax - i)*17 - 10);
 801472e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8014732:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	b29b      	uxth	r3, r3
 801473a:	461a      	mov	r2, r3
 801473c:	0112      	lsls	r2, r2, #4
 801473e:	4413      	add	r3, r2
 8014740:	b29b      	uxth	r3, r3
 8014742:	3b0a      	subs	r3, #10
 8014744:	b29b      	uxth	r3, r3
 8014746:	823b      	strh	r3, [r7, #16]
    Nx0 = N_X ;
 8014748:	2304      	movs	r3, #4
 801474a:	81fb      	strh	r3, [r7, #14]
    memset(str,0,12);
 801474c:	463b      	mov	r3, r7
 801474e:	220c      	movs	r2, #12
 8014750:	2100      	movs	r1, #0
 8014752:	4618      	mov	r0, r3
 8014754:	f00e fb14 	bl	8022d80 <memset>
    memcpy(str,&ESTR[i],10);
 8014758:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801475c:	4613      	mov	r3, r2
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	4413      	add	r3, r2
 8014762:	005b      	lsls	r3, r3, #1
 8014764:	4a1f      	ldr	r2, [pc, #124]	; (80147e4 <Show_List+0x18c>)
 8014766:	1899      	adds	r1, r3, r2
 8014768:	463b      	mov	r3, r7
 801476a:	220a      	movs	r2, #10
 801476c:	4618      	mov	r0, r3
 801476e:	f00e faf9 	bl	8022d64 <memcpy>
    NoteSTR(Nx0, Ny0, Flag, (char *)str);
 8014772:	463b      	mov	r3, r7
 8014774:	7d7a      	ldrb	r2, [r7, #21]
 8014776:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 801477a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801477e:	f7fa f89b 	bl	800e8b8 <NoteSTR>
    Note_4Point(PRN, Nx0, Ny0, strlen((char*)str), Font6x8_H);
 8014782:	463b      	mov	r3, r7
 8014784:	4618      	mov	r0, r3
 8014786:	f7f7 fc5b 	bl	800c040 <strlen>
 801478a:	4603      	mov	r3, r0
 801478c:	b2db      	uxtb	r3, r3
 801478e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8014792:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8014796:	200a      	movs	r0, #10
 8014798:	9000      	str	r0, [sp, #0]
 801479a:	2000      	movs	r0, #0
 801479c:	f7fa f932 	bl	800ea04 <Note_4Point>
  for(i=MU_BEGN[Current]; i<CurrentMax; i++){
 80147a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	3301      	adds	r3, #1
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	82fb      	strh	r3, [r7, #22]
 80147ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	dba4      	blt.n	8014702 <Show_List+0xaa>
  }
  List_Pop();
 80147b8:	f7f9 ff5e 	bl	800e678 <List_Pop>
}
 80147bc:	bf00      	nop
 80147be:	3718      	adds	r7, #24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	2000079a 	.word	0x2000079a
 80147c8:	08001f40 	.word	0x08001f40
 80147cc:	08001f48 	.word	0x08001f48
 80147d0:	08002144 	.word	0x08002144
 80147d4:	20000140 	.word	0x20000140
 80147d8:	0800214c 	.word	0x0800214c
 80147dc:	08002154 	.word	0x08002154
 80147e0:	20000538 	.word	0x20000538
 80147e4:	08001f50 	.word	0x08001f50

080147e8 <DispFileInfo>:

/*******************************************************************************

*******************************************************************************/
void DispFileInfo(char Info)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b084      	sub	sp, #16
 80147ec:	af02      	add	r7, sp, #8
 80147ee:	4603      	mov	r3, r0
 80147f0:	71fb      	strb	r3, [r7, #7]
  SetColor(DAR, BLU);
 80147f2:	f64f 4110 	movw	r1, #64528	; 0xfc10
 80147f6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80147fa:	f7f9 f9a3 	bl	800db44 <SetColor>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 80147fe:	23f8      	movs	r3, #248	; 0xf8
 8014800:	b29b      	uxth	r3, r3
 8014802:	3b03      	subs	r3, #3
 8014804:	b29b      	uxth	r3, r3
 8014806:	b219      	sxth	r1, r3
 8014808:	2342      	movs	r3, #66	; 0x42
 801480a:	9301      	str	r3, [sp, #4]
 801480c:	2300      	movs	r3, #0
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	230b      	movs	r3, #11
 8014812:	2203      	movs	r2, #3
 8014814:	2001      	movs	r0, #1
 8014816:	f7f9 fa83 	bl	800dd20 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP], LABLE_Y, INV, (char *)(&FnNote+14*Info));
 801481a:	20f8      	movs	r0, #248	; 0xf8
 801481c:	79fb      	ldrb	r3, [r7, #7]
 801481e:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8014822:	fb02 f303 	mul.w	r3, r2, r3
 8014826:	4a07      	ldr	r2, [pc, #28]	; (8014844 <DispFileInfo+0x5c>)
 8014828:	4413      	add	r3, r2
 801482a:	2201      	movs	r2, #1
 801482c:	2103      	movs	r1, #3
 801482e:	f7f9 f9a1 	bl	800db74 <DispStr>
  HAL_Delay(2000);
 8014832:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014836:	f003 fd71 	bl	801831c <HAL_Delay>

}
 801483a:	bf00      	nop
 801483c:	3708      	adds	r7, #8
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	080022f0 	.word	0x080022f0

08014848 <DispBMPInfo>:

/*******************************************************************************

*******************************************************************************/
void DispBMPInfo(void)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af02      	add	r7, sp, #8
  SetColor(GRY, TCOLOR[FN]);
 801484e:	f64f 4310 	movw	r3, #64528	; 0xfc10
 8014852:	4619      	mov	r1, r3
 8014854:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014858:	f7f9 f974 	bl	800db44 <SetColor>
  u8ToDec3(NumStr, List[SAVE_BMP].Val);
 801485c:	4b1a      	ldr	r3, [pc, #104]	; (80148c8 <DispBMPInfo+0x80>)
 801485e:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8014862:	b2db      	uxtb	r3, r3
 8014864:	4619      	mov	r1, r3
 8014866:	4819      	ldr	r0, [pc, #100]	; (80148cc <DispBMPInfo+0x84>)
 8014868:	f7fc fff4 	bl	8011854 <u8ToDec3>
  Draw_Circle_D(INV, S_X[SAVE_BMP]-3, LABLE_Y, 11, 0, 6*11);
 801486c:	23f8      	movs	r3, #248	; 0xf8
 801486e:	b29b      	uxth	r3, r3
 8014870:	3b03      	subs	r3, #3
 8014872:	b29b      	uxth	r3, r3
 8014874:	b219      	sxth	r1, r3
 8014876:	2342      	movs	r3, #66	; 0x42
 8014878:	9301      	str	r3, [sp, #4]
 801487a:	2300      	movs	r3, #0
 801487c:	9300      	str	r3, [sp, #0]
 801487e:	230b      	movs	r3, #11
 8014880:	2203      	movs	r2, #3
 8014882:	2001      	movs	r0, #1
 8014884:	f7f9 fa4c 	bl	800dd20 <Draw_Circle_D>
  DispStr(S_X[SAVE_BMP],    LABLE_Y, INV, ("Save"));//0513
 8014888:	20f8      	movs	r0, #248	; 0xf8
 801488a:	4b11      	ldr	r3, [pc, #68]	; (80148d0 <DispBMPInfo+0x88>)
 801488c:	2201      	movs	r2, #1
 801488e:	2103      	movs	r1, #3
 8014890:	f7f9 f970 	bl	800db74 <DispStr>
  DispStr(S_X[SAVE_BMP]+24, LABLE_Y, INV, (char *)NumStr);
 8014894:	23f8      	movs	r3, #248	; 0xf8
 8014896:	b29b      	uxth	r3, r3
 8014898:	3318      	adds	r3, #24
 801489a:	b29b      	uxth	r3, r3
 801489c:	b218      	sxth	r0, r3
 801489e:	4b0b      	ldr	r3, [pc, #44]	; (80148cc <DispBMPInfo+0x84>)
 80148a0:	2201      	movs	r2, #1
 80148a2:	2103      	movs	r1, #3
 80148a4:	f7f9 f966 	bl	800db74 <DispStr>
  DispStr(S_X[SAVE_BMP]+42, LABLE_Y, INV, (List[SAVE_BMP].PTR ));
 80148a8:	23f8      	movs	r3, #248	; 0xf8
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	332a      	adds	r3, #42	; 0x2a
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	b218      	sxth	r0, r3
 80148b2:	4b05      	ldr	r3, [pc, #20]	; (80148c8 <DispBMPInfo+0x80>)
 80148b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148b8:	2201      	movs	r2, #1
 80148ba:	2103      	movs	r1, #3
 80148bc:	f7f9 f95a 	bl	800db74 <DispStr>
}
 80148c0:	bf00      	nop
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	20000298 	.word	0x20000298
 80148cc:	20002834 	.word	0x20002834
 80148d0:	08000950 	.word	0x08000950

080148d4 <Update_Proc_All>:

/*******************************************************************************
Update_Proc_All  ȫ��ˢ��
*******************************************************************************/
void Update_Proc_All(void)
{
 80148d4:	b590      	push	{r4, r7, lr}
 80148d6:	b087      	sub	sp, #28
 80148d8:	af02      	add	r7, sp, #8
  short i;
  long Tmp = 0;
 80148da:	2300      	movs	r3, #0
 80148dc:	60bb      	str	r3, [r7, #8]
  short Range = List[Y_RANGES].Val + 10*List[PROBEATT].Val;
 80148de:	4ba3      	ldr	r3, [pc, #652]	; (8014b6c <Update_Proc_All+0x298>)
 80148e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	4ba1      	ldr	r3, [pc, #644]	; (8014b6c <Update_Proc_All+0x298>)
 80148e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	4619      	mov	r1, r3
 80148f0:	0089      	lsls	r1, r1, #2
 80148f2:	440b      	add	r3, r1
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	4413      	add	r3, r2
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	80fb      	strh	r3, [r7, #6]

  for(i=Y_RANGES; i<=STANDBY; i++){
 80148fe:	2300      	movs	r3, #0
 8014900:	81fb      	strh	r3, [r7, #14]
 8014902:	e015      	b.n	8014930 <Update_Proc_All+0x5c>
    List[i].Flg |= UPD;
 8014904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014908:	4a98      	ldr	r2, [pc, #608]	; (8014b6c <Update_Proc_All+0x298>)
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	4413      	add	r3, r2
 801490e:	799a      	ldrb	r2, [r3, #6]
 8014910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014914:	f042 0220 	orr.w	r2, r2, #32
 8014918:	b2d1      	uxtb	r1, r2
 801491a:	4a94      	ldr	r2, [pc, #592]	; (8014b6c <Update_Proc_All+0x298>)
 801491c:	00db      	lsls	r3, r3, #3
 801491e:	4413      	add	r3, r2
 8014920:	460a      	mov	r2, r1
 8014922:	719a      	strb	r2, [r3, #6]
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014928:	b29b      	uxth	r3, r3
 801492a:	3301      	adds	r3, #1
 801492c:	b29b      	uxth	r3, r3
 801492e:	81fb      	strh	r3, [r7, #14]
 8014930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014934:	2b29      	cmp	r3, #41	; 0x29
 8014936:	dde5      	ble.n	8014904 <Update_Proc_All+0x30>
  }

  for(i=Y_RANGES; i<=STANDBY; i++){
 8014938:	2300      	movs	r3, #0
 801493a:	81fb      	strh	r3, [r7, #14]
 801493c:	e1be      	b.n	8014cbc <Update_Proc_All+0x3e8>
    if(List[i].Flg & UPD){
 801493e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014942:	4a8a      	ldr	r2, [pc, #552]	; (8014b6c <Update_Proc_All+0x298>)
 8014944:	00db      	lsls	r3, r3, #3
 8014946:	4413      	add	r3, r2
 8014948:	799b      	ldrb	r3, [r3, #6]
 801494a:	f003 0320 	and.w	r3, r3, #32
 801494e:	2b00      	cmp	r3, #0
 8014950:	f000 81ad 	beq.w	8014cae <Update_Proc_All+0x3da>
      List[i].Flg &= ~UPD;
 8014954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014958:	4a84      	ldr	r2, [pc, #528]	; (8014b6c <Update_Proc_All+0x298>)
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	4413      	add	r3, r2
 801495e:	799a      	ldrb	r2, [r3, #6]
 8014960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014964:	f022 0220 	bic.w	r2, r2, #32
 8014968:	b2d1      	uxtb	r1, r2
 801496a:	4a80      	ldr	r2, [pc, #512]	; (8014b6c <Update_Proc_All+0x298>)
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	4413      	add	r3, r2
 8014970:	460a      	mov	r2, r1
 8014972:	719a      	strb	r2, [r3, #6]
      switch (i){
 8014974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014978:	2b12      	cmp	r3, #18
 801497a:	f300 8199 	bgt.w	8014cb0 <Update_Proc_All+0x3dc>
 801497e:	2b0d      	cmp	r3, #13
 8014980:	f280 80ac 	bge.w	8014adc <Update_Proc_All+0x208>
 8014984:	2b03      	cmp	r3, #3
 8014986:	dc02      	bgt.n	801498e <Update_Proc_All+0xba>
 8014988:	2b00      	cmp	r3, #0
 801498a:	da04      	bge.n	8014996 <Update_Proc_All+0xc2>
 801498c:	e190      	b.n	8014cb0 <Update_Proc_All+0x3dc>
 801498e:	2b07      	cmp	r3, #7
 8014990:	f000 815a 	beq.w	8014c48 <Update_Proc_All+0x374>
 8014994:	e18c      	b.n	8014cb0 <Update_Proc_All+0x3dc>
      case Y_RANGES:   // ˢ����ʾ Y ���̵�λ
      case PROBEATT:   // ˢ����ʾ̽ͷ˥������
      case COUPLING:   // ˢ����ʾ���ģʽ״̬
      case V0_POSI:    // ˢ����ʾ��ֱƫ��λ��
        SetColor(GRY, TCOLOR[YN]);
 8014996:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801499a:	4619      	mov	r1, r3
 801499c:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80149a0:	f7f9 f8d0 	bl	800db44 <SetColor>
        if(i == Y_RANGES || i == COUPLING||i == PROBEATT){
 80149a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d007      	beq.n	80149bc <Update_Proc_All+0xe8>
 80149ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d003      	beq.n	80149bc <Update_Proc_All+0xe8>
 80149b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149b8:	2b02      	cmp	r3, #2
 80149ba:	d138      	bne.n	8014a2e <Update_Proc_All+0x15a>
          Draw_Circle_D(INV, S_X[Y_RANGES]-3, TITLE_Y_POS, 11, 0, 6*7);
 80149bc:	232f      	movs	r3, #47	; 0x2f
 80149be:	b29b      	uxth	r3, r3
 80149c0:	3b03      	subs	r3, #3
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	b219      	sxth	r1, r3
 80149c6:	232a      	movs	r3, #42	; 0x2a
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	2300      	movs	r3, #0
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	230b      	movs	r3, #11
 80149d0:	22e1      	movs	r2, #225	; 0xe1
 80149d2:	2001      	movs	r0, #1
 80149d4:	f7f9 f9a4 	bl	800dd20 <Draw_Circle_D>
          DispStr(S_X[Y_RANGES], TITLE_Y_POS, INV,      (List[Y_RANGES].PTR +(Range)*6));
 80149d8:	202f      	movs	r0, #47	; 0x2f
 80149da:	4b64      	ldr	r3, [pc, #400]	; (8014b6c <Update_Proc_All+0x298>)
 80149dc:	6819      	ldr	r1, [r3, #0]
 80149de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80149e2:	4613      	mov	r3, r2
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	4413      	add	r3, r2
 80149e8:	005b      	lsls	r3, r3, #1
 80149ea:	440b      	add	r3, r1
 80149ec:	2201      	movs	r2, #1
 80149ee:	21e1      	movs	r1, #225	; 0xe1
 80149f0:	f7f9 f8c0 	bl	800db74 <DispStr>
          DispStr(S_X[COUPLING], TITLE_Y_POS, INV,      (List[COUPLING].PTR +(List[COUPLING].Val)*6));
 80149f4:	2047      	movs	r0, #71	; 0x47
 80149f6:	4b5d      	ldr	r3, [pc, #372]	; (8014b6c <Update_Proc_All+0x298>)
 80149f8:	689a      	ldr	r2, [r3, #8]
 80149fa:	4b5c      	ldr	r3, [pc, #368]	; (8014b6c <Update_Proc_All+0x298>)
 80149fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014a00:	4619      	mov	r1, r3
 8014a02:	460b      	mov	r3, r1
 8014a04:	005b      	lsls	r3, r3, #1
 8014a06:	440b      	add	r3, r1
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	4413      	add	r3, r2
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	21e1      	movs	r1, #225	; 0xe1
 8014a10:	f7f9 f8b0 	bl	800db74 <DispStr>
          DispStr10x14(S_X[PROBEATT], TITLE_Y_POS, PRN+SYMB,(List[PROBEATT].Val?("A"):("B")));
 8014a14:	2020      	movs	r0, #32
 8014a16:	4b55      	ldr	r3, [pc, #340]	; (8014b6c <Update_Proc_All+0x298>)
 8014a18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d001      	beq.n	8014a24 <Update_Proc_All+0x150>
 8014a20:	4b53      	ldr	r3, [pc, #332]	; (8014b70 <Update_Proc_All+0x29c>)
 8014a22:	e000      	b.n	8014a26 <Update_Proc_All+0x152>
 8014a24:	4b53      	ldr	r3, [pc, #332]	; (8014b74 <Update_Proc_All+0x2a0>)
 8014a26:	2210      	movs	r2, #16
 8014a28:	21e1      	movs	r1, #225	; 0xe1
 8014a2a:	f7f9 fb0b 	bl	800e044 <DispStr10x14>
        }
        ParamTab[P1x2] = 2*((List[V0_POSI].Val+1));
 8014a2e:	4b4f      	ldr	r3, [pc, #316]	; (8014b6c <Update_Proc_All+0x298>)
 8014a30:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014a34:	3301      	adds	r3, #1
 8014a36:	b29b      	uxth	r3, r3
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	b21a      	sxth	r2, r3
 8014a3e:	4b4e      	ldr	r3, [pc, #312]	; (8014b78 <Update_Proc_All+0x2a4>)
 8014a40:	829a      	strh	r2, [r3, #20]
        ParamTab[VTx2] = ParamTab[P1x2]+ 2*(List[THRESHOLD].Val+1);
 8014a42:	4b4d      	ldr	r3, [pc, #308]	; (8014b78 <Update_Proc_All+0x2a4>)
 8014a44:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	4b48      	ldr	r3, [pc, #288]	; (8014b6c <Update_Proc_All+0x298>)
 8014a4c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014a50:	3301      	adds	r3, #1
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	4413      	add	r3, r2
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	b21a      	sxth	r2, r3
 8014a5e:	4b46      	ldr	r3, [pc, #280]	; (8014b78 <Update_Proc_All+0x2a4>)
 8014a60:	839a      	strh	r2, [r3, #28]

        StateA =  (List[Y_RANGES].Val>5)?ACT: GND;                                    //ACT GND �ӵػ򼤻�״̬
 8014a62:	4b42      	ldr	r3, [pc, #264]	; (8014b6c <Update_Proc_All+0x298>)
 8014a64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a68:	2b05      	cmp	r3, #5
 8014a6a:	dd01      	ble.n	8014a70 <Update_Proc_All+0x19c>
 8014a6c:	2204      	movs	r2, #4
 8014a6e:	e000      	b.n	8014a72 <Update_Proc_All+0x19e>
 8014a70:	2200      	movs	r2, #0
 8014a72:	4b42      	ldr	r3, [pc, #264]	; (8014b7c <Update_Proc_All+0x2a8>)
 8014a74:	801a      	strh	r2, [r3, #0]
        GainA  = List[Y_RANGES].Val;
 8014a76:	4b3d      	ldr	r3, [pc, #244]	; (8014b6c <Update_Proc_All+0x298>)
 8014a78:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014a7c:	4b40      	ldr	r3, [pc, #256]	; (8014b80 <Update_Proc_All+0x2ac>)
 8014a7e:	801a      	strh	r2, [r3, #0]
        if(List[Y_RANGES].Val>1)
 8014a80:	4b3a      	ldr	r3, [pc, #232]	; (8014b6c <Update_Proc_All+0x298>)
 8014a82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	dd03      	ble.n	8014a92 <Update_Proc_All+0x1be>
          KindA  = HV;
 8014a8a:	4b3e      	ldr	r3, [pc, #248]	; (8014b84 <Update_Proc_All+0x2b0>)
 8014a8c:	2201      	movs	r2, #1
 8014a8e:	801a      	strh	r2, [r3, #0]
 8014a90:	e002      	b.n	8014a98 <Update_Proc_All+0x1c4>
        else
          KindA  = LV;                //Ch1ѡ���ѹ���ѹ����
 8014a92:	4b3c      	ldr	r3, [pc, #240]	; (8014b84 <Update_Proc_All+0x2b0>)
 8014a94:	2200      	movs	r2, #0
 8014a96:	801a      	strh	r2, [r3, #0]

        CouplA = (List[COUPLING].Val)? AC : DC;                      // AC);  //AC/DC��Ϸ�ʽ
 8014a98:	4b34      	ldr	r3, [pc, #208]	; (8014b6c <Update_Proc_All+0x298>)
 8014a9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d001      	beq.n	8014aa6 <Update_Proc_All+0x1d2>
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	e000      	b.n	8014aa8 <Update_Proc_All+0x1d4>
 8014aa6:	2202      	movs	r2, #2
 8014aa8:	4b37      	ldr	r3, [pc, #220]	; (8014b88 <Update_Proc_All+0x2b4>)
 8014aaa:	801a      	strh	r2, [r3, #0]
        BIOS_Ctrl(AiRANGE, KindA+CouplA+StateA);             //Ch1״̬ˢ��
 8014aac:	4b35      	ldr	r3, [pc, #212]	; (8014b84 <Update_Proc_All+0x2b0>)
 8014aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	4b34      	ldr	r3, [pc, #208]	; (8014b88 <Update_Proc_All+0x2b4>)
 8014ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aba:	4413      	add	r3, r2
 8014abc:	4a2f      	ldr	r2, [pc, #188]	; (8014b7c <Update_Proc_All+0x2a8>)
 8014abe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	2007      	movs	r0, #7
 8014ac8:	f7f7 fc50 	bl	800c36c <BIOS_Ctrl>
        AiPosi(List[V0_POSI].Val);                        //Ch1Ӳ����Ӧλ��
 8014acc:	4b27      	ldr	r3, [pc, #156]	; (8014b6c <Update_Proc_All+0x298>)
 8014ace:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8014ad2:	b2db      	uxtb	r3, r3
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f000 fa0f 	bl	8014ef8 <AiPosi>

        break;
 8014ada:	e0e9      	b.n	8014cb0 <Update_Proc_All+0x3dc>
      case TR_MODE:   // ˢ����ʾ������ʽ
      case FITTRIGG:  // ˢ����ʾ�Զ�������ֵ
      case THRESHOLD: // ˢ����ʾ������ֵ
      case SENSITIVE: // ˢ����ʾ����������
      case TR_TYPE:   // ˢ����ʾ�α���ʽ
        DispStatus();
 8014adc:	f7ff fbee 	bl	80142bc <DispStatus>
        SetColor(GRY, TCOLOR[TRG]);
 8014ae0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014aea:	f7f9 f82b 	bl	800db44 <SetColor>
        if(i == TR_MODE || i==SENSITIVE)
 8014aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014af2:	2b0e      	cmp	r3, #14
 8014af4:	d003      	beq.n	8014afe <Update_Proc_All+0x22a>
 8014af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014afa:	2b11      	cmp	r3, #17
 8014afc:	d11a      	bne.n	8014b34 <Update_Proc_All+0x260>
        {
          Draw_Circle_D(INV, S_X[TR_MODE]-3, TITLE_Y_POS, 11, 0, 6*8);
 8014afe:	23dd      	movs	r3, #221	; 0xdd
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	3b03      	subs	r3, #3
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	b219      	sxth	r1, r3
 8014b08:	2330      	movs	r3, #48	; 0x30
 8014b0a:	9301      	str	r3, [sp, #4]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	9300      	str	r3, [sp, #0]
 8014b10:	230b      	movs	r3, #11
 8014b12:	22e1      	movs	r2, #225	; 0xe1
 8014b14:	2001      	movs	r0, #1
 8014b16:	f7f9 f903 	bl	800dd20 <Draw_Circle_D>
          DispStr10x14(S_X[TR_MODE], TITLE_Y_POS, INV+SYMB,(List[TR_MODE].Val?("D"):("C")));
 8014b1a:	20dd      	movs	r0, #221	; 0xdd
 8014b1c:	4b13      	ldr	r3, [pc, #76]	; (8014b6c <Update_Proc_All+0x298>)
 8014b1e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <Update_Proc_All+0x256>
 8014b26:	4b19      	ldr	r3, [pc, #100]	; (8014b8c <Update_Proc_All+0x2b8>)
 8014b28:	e000      	b.n	8014b2c <Update_Proc_All+0x258>
 8014b2a:	4b19      	ldr	r3, [pc, #100]	; (8014b90 <Update_Proc_All+0x2bc>)
 8014b2c:	2211      	movs	r2, #17
 8014b2e:	21e1      	movs	r1, #225	; 0xe1
 8014b30:	f7f9 fa88 	bl	800e044 <DispStr10x14>
        }
        if(i == FITTRIGG)
 8014b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b38:	2b0f      	cmp	r3, #15
 8014b3a:	d132      	bne.n	8014ba2 <Update_Proc_All+0x2ce>
        {
          DispStr10x14(S_X[FITTRIGG], TITLE_Y_POS, PRN+SYMB,(List[FITTRIGG].Val?("F"):("B")));
 8014b3c:	20cf      	movs	r0, #207	; 0xcf
 8014b3e:	4b0b      	ldr	r3, [pc, #44]	; (8014b6c <Update_Proc_All+0x298>)
 8014b40:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d001      	beq.n	8014b4c <Update_Proc_All+0x278>
 8014b48:	4b12      	ldr	r3, [pc, #72]	; (8014b94 <Update_Proc_All+0x2c0>)
 8014b4a:	e000      	b.n	8014b4e <Update_Proc_All+0x27a>
 8014b4c:	4b09      	ldr	r3, [pc, #36]	; (8014b74 <Update_Proc_All+0x2a0>)
 8014b4e:	2210      	movs	r2, #16
 8014b50:	21e1      	movs	r1, #225	; 0xe1
 8014b52:	f7f9 fa77 	bl	800e044 <DispStr10x14>
          if(List[FITTRIGG].Val)KEYTIME = 300;
 8014b56:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <Update_Proc_All+0x298>)
 8014b58:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01d      	beq.n	8014b9c <Update_Proc_All+0x2c8>
 8014b60:	4b0d      	ldr	r3, [pc, #52]	; (8014b98 <Update_Proc_All+0x2c4>)
 8014b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014b66:	801a      	strh	r2, [r3, #0]
 8014b68:	e01b      	b.n	8014ba2 <Update_Proc_All+0x2ce>
 8014b6a:	bf00      	nop
 8014b6c:	20000298 	.word	0x20000298
 8014b70:	08000958 	.word	0x08000958
 8014b74:	0800095c 	.word	0x0800095c
 8014b78:	20000140 	.word	0x20000140
 8014b7c:	2000285a 	.word	0x2000285a
 8014b80:	20002842 	.word	0x20002842
 8014b84:	2000687e 	.word	0x2000687e
 8014b88:	20006880 	.word	0x20006880
 8014b8c:	08000988 	.word	0x08000988
 8014b90:	0800098c 	.word	0x0800098c
 8014b94:	0800099c 	.word	0x0800099c
 8014b98:	2000077e 	.word	0x2000077e
          else KEYTIME = 0;
 8014b9c:	4b4c      	ldr	r3, [pc, #304]	; (8014cd0 <Update_Proc_All+0x3fc>)
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	801a      	strh	r2, [r3, #0]
        };
        ParamTab[VTx2]= ParamTab[P1x2]+2*List[THRESHOLD].Val;
 8014ba2:	4b4c      	ldr	r3, [pc, #304]	; (8014cd4 <Update_Proc_All+0x400>)
 8014ba4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	4b4b      	ldr	r3, [pc, #300]	; (8014cd8 <Update_Proc_All+0x404>)
 8014bac:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	005b      	lsls	r3, r3, #1
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	4413      	add	r3, r2
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	b21a      	sxth	r2, r3
 8014bbc:	4b45      	ldr	r3, [pc, #276]	; (8014cd4 <Update_Proc_All+0x400>)
 8014bbe:	839a      	strh	r2, [r3, #28]
        Tmp  = List[SENSITIVE].Val;
 8014bc0:	4b45      	ldr	r3, [pc, #276]	; (8014cd8 <Update_Proc_All+0x404>)
 8014bc2:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8014bc6:	60bb      	str	r3, [r7, #8]
        Tmp *= X_SCALE[Range]* Exp(V_SCALE[Range]);
 8014bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bcc:	4a43      	ldr	r2, [pc, #268]	; (8014cdc <Update_Proc_All+0x408>)
 8014bce:	5cd3      	ldrb	r3, [r2, r3]
 8014bd0:	461c      	mov	r4, r3
 8014bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bd6:	4a42      	ldr	r2, [pc, #264]	; (8014ce0 <Update_Proc_All+0x40c>)
 8014bd8:	5cd3      	ldrb	r3, [r2, r3]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fc ff9e 	bl	8011b1c <Exp>
 8014be0:	4603      	mov	r3, r0
 8014be2:	fb03 f204 	mul.w	r2, r3, r4
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	fb02 f303 	mul.w	r3, r2, r3
 8014bec:	60bb      	str	r3, [r7, #8]
        Value2Str(NumStr, Tmp, V[2], 2, UNSIGN);
 8014bee:	2301      	movs	r3, #1
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	4a3b      	ldr	r2, [pc, #236]	; (8014ce4 <Update_Proc_All+0x410>)
 8014bf6:	68b9      	ldr	r1, [r7, #8]
 8014bf8:	483b      	ldr	r0, [pc, #236]	; (8014ce8 <Update_Proc_All+0x414>)
 8014bfa:	f7fc fe93 	bl	8011924 <Value2Str>
        DispStr10x14(S_X[SENSITIVE], TITLE_Y_POS, INV+SYMB,"E");
 8014bfe:	20e7      	movs	r0, #231	; 0xe7
 8014c00:	4b3a      	ldr	r3, [pc, #232]	; (8014cec <Update_Proc_All+0x418>)
 8014c02:	2211      	movs	r2, #17
 8014c04:	21e1      	movs	r1, #225	; 0xe1
 8014c06:	f7f9 fa1d 	bl	800e044 <DispStr10x14>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  "     ");
 8014c0a:	23e7      	movs	r3, #231	; 0xe7
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	3309      	adds	r3, #9
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	b218      	sxth	r0, r3
 8014c14:	4b36      	ldr	r3, [pc, #216]	; (8014cf0 <Update_Proc_All+0x41c>)
 8014c16:	2201      	movs	r2, #1
 8014c18:	21e1      	movs	r1, #225	; 0xe1
 8014c1a:	f7f8 ffab 	bl	800db74 <DispStr>
        DispStr(S_X[SENSITIVE]+9, TITLE_Y_POS, INV,  (char *)NumStr);
 8014c1e:	23e7      	movs	r3, #231	; 0xe7
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	3309      	adds	r3, #9
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	b218      	sxth	r0, r3
 8014c28:	4b2f      	ldr	r3, [pc, #188]	; (8014ce8 <Update_Proc_All+0x414>)
 8014c2a:	2201      	movs	r2, #1
 8014c2c:	21e1      	movs	r1, #225	; 0xe1
 8014c2e:	f7f8 ffa1 	bl	800db74 <DispStr>
        ParamTab[VTF]=(List[TR_TYPE].Val)? L_HID : SHOW;
 8014c32:	4b29      	ldr	r3, [pc, #164]	; (8014cd8 <Update_Proc_All+0x404>)
 8014c34:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <Update_Proc_All+0x36c>
 8014c3c:	2202      	movs	r2, #2
 8014c3e:	e000      	b.n	8014c42 <Update_Proc_All+0x36e>
 8014c40:	2200      	movs	r2, #0
 8014c42:	4b24      	ldr	r3, [pc, #144]	; (8014cd4 <Update_Proc_All+0x400>)
 8014c44:	811a      	strh	r2, [r3, #8]
        break;
 8014c46:	e033      	b.n	8014cb0 <Update_Proc_All+0x3dc>

      case TIM_BASE:  // ˢ����ʾʱ����λ
        SetColor(GRY, TCOLOR[XN]);
 8014c48:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	f643 10e7 	movw	r0, #14823	; 0x39e7
 8014c52:	f7f8 ff77 	bl	800db44 <SetColor>
        if(i == TIM_BASE)
 8014c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c5a:	2b07      	cmp	r3, #7
 8014c5c:	d120      	bne.n	8014ca0 <Update_Proc_All+0x3cc>
        {
          Draw_Circle_D(INV, S_X[i]-3, TITLE_Y_POS, 11, 2, 6*5);
 8014c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c62:	4a24      	ldr	r2, [pc, #144]	; (8014cf4 <Update_Proc_All+0x420>)
 8014c64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014c68:	b29b      	uxth	r3, r3
 8014c6a:	3b03      	subs	r3, #3
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	b219      	sxth	r1, r3
 8014c70:	231e      	movs	r3, #30
 8014c72:	9301      	str	r3, [sp, #4]
 8014c74:	2302      	movs	r3, #2
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	230b      	movs	r3, #11
 8014c7a:	22e1      	movs	r2, #225	; 0xe1
 8014c7c:	2001      	movs	r0, #1
 8014c7e:	f7f9 f84f 	bl	800dd20 <Draw_Circle_D>
          DispStr(S_X[i], TITLE_Y_POS, INV, (char *)TimeBase_Str[List[TIM_BASE].Val]);
 8014c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c86:	4a1b      	ldr	r2, [pc, #108]	; (8014cf4 <Update_Proc_All+0x420>)
 8014c88:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8014c8c:	4b12      	ldr	r3, [pc, #72]	; (8014cd8 <Update_Proc_All+0x404>)
 8014c8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c92:	00db      	lsls	r3, r3, #3
 8014c94:	4a18      	ldr	r2, [pc, #96]	; (8014cf8 <Update_Proc_All+0x424>)
 8014c96:	4413      	add	r3, r2
 8014c98:	2201      	movs	r2, #1
 8014c9a:	21e1      	movs	r1, #225	; 0xe1
 8014c9c:	f7f8 ff6a 	bl	800db74 <DispStr>
        }
        Set_Base(List[TIM_BASE].Val);          // Ӳ������ɨ��ʱ����λ
 8014ca0:	4b0d      	ldr	r3, [pc, #52]	; (8014cd8 <Update_Proc_All+0x404>)
 8014ca2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7f7 fc88 	bl	800c5bc <Set_Base>
      break;
 8014cac:	e000      	b.n	8014cb0 <Update_Proc_All+0x3dc>

      }
    }
 8014cae:	bf00      	nop
  for(i=Y_RANGES; i<=STANDBY; i++){
 8014cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	81fb      	strh	r3, [r7, #14]
 8014cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014cc0:	2b29      	cmp	r3, #41	; 0x29
 8014cc2:	f77f ae3c 	ble.w	801493e <Update_Proc_All+0x6a>
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	bf00      	nop
 8014cca:	3714      	adds	r7, #20
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd90      	pop	{r4, r7, pc}
 8014cd0:	2000077e 	.word	0x2000077e
 8014cd4:	20000140 	.word	0x20000140
 8014cd8:	20000298 	.word	0x20000298
 8014cdc:	08002130 	.word	0x08002130
 8014ce0:	08002108 	.word	0x08002108
 8014ce4:	08001d0c 	.word	0x08001d0c
 8014ce8:	20002834 	.word	0x20002834
 8014cec:	08000998 	.word	0x08000998
 8014cf0:	08000990 	.word	0x08000990
 8014cf4:	0800215c 	.word	0x0800215c
 8014cf8:	200001d0 	.word	0x200001d0

08014cfc <Align_Set>:

/*******************************************************************************
 Align_Set:
*******************************************************************************/
void Align_Set(void)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b082      	sub	sp, #8
 8014d00:	af00      	add	r7, sp, #0
  unsigned short i, TmpA = 0, StA = 0;
 8014d02:	2300      	movs	r3, #0
 8014d04:	807b      	strh	r3, [r7, #2]
 8014d06:	2300      	movs	r3, #0
 8014d08:	80bb      	strh	r3, [r7, #4]

  Analys();
 8014d0a:	f000 f8b1 	bl	8014e70 <Analys>
  for(i=0; i<100; i++)
 8014d0e:	2300      	movs	r3, #0
 8014d10:	80fb      	strh	r3, [r7, #6]
 8014d12:	e051      	b.n	8014db8 <Align_Set+0xbc>
  {
    AiPosi(100);
 8014d14:	2064      	movs	r0, #100	; 0x64
 8014d16:	f000 f8ef 	bl	8014ef8 <AiPosi>
    HAL_Delay(10);                             // Wait 10mS
 8014d1a:	200a      	movs	r0, #10
 8014d1c:	f003 fafe 	bl	801831c <HAL_Delay>
    Analys();
 8014d20:	f000 f8a6 	bl	8014e70 <Analys>
    TmpA = 2048-Vavg;
 8014d24:	4b28      	ldr	r3, [pc, #160]	; (8014dc8 <Align_Set+0xcc>)
 8014d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8014d30:	807b      	strh	r3, [r7, #2]

    if(TmpA != 0)
 8014d32:	887b      	ldrh	r3, [r7, #2]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d036      	beq.n	8014da6 <Align_Set+0xaa>
    {
      KpA[KindA+(StateA?1:0)] += 700*TmpA/2048;
 8014d38:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <Align_Set+0xd0>)
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	4b24      	ldr	r3, [pc, #144]	; (8014dd0 <Align_Set+0xd4>)
 8014d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d42:	4619      	mov	r1, r3
 8014d44:	4b23      	ldr	r3, [pc, #140]	; (8014dd4 <Align_Set+0xd8>)
 8014d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	bf14      	ite	ne
 8014d4e:	2301      	movne	r3, #1
 8014d50:	2300      	moveq	r3, #0
 8014d52:	b2db      	uxtb	r3, r3
 8014d54:	440b      	add	r3, r1
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	887b      	ldrh	r3, [r7, #2]
 8014d62:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8014d66:	fb01 f303 	mul.w	r3, r1, r3
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	da01      	bge.n	8014d72 <Align_Set+0x76>
 8014d6e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8014d72:	12db      	asrs	r3, r3, #11
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	4413      	add	r3, r2
 8014d78:	b299      	uxth	r1, r3
 8014d7a:	4b14      	ldr	r3, [pc, #80]	; (8014dcc <Align_Set+0xd0>)
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	4b14      	ldr	r3, [pc, #80]	; (8014dd0 <Align_Set+0xd4>)
 8014d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d84:	4618      	mov	r0, r3
 8014d86:	4b13      	ldr	r3, [pc, #76]	; (8014dd4 <Align_Set+0xd8>)
 8014d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	bf14      	ite	ne
 8014d90:	2301      	movne	r3, #1
 8014d92:	2300      	moveq	r3, #0
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	4403      	add	r3, r0
 8014d98:	005b      	lsls	r3, r3, #1
 8014d9a:	4413      	add	r3, r2
 8014d9c:	b20a      	sxth	r2, r1
 8014d9e:	801a      	strh	r2, [r3, #0]
      StA = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	80bb      	strh	r3, [r7, #4]
 8014da4:	e002      	b.n	8014dac <Align_Set+0xb0>
    }
    else
      StA++;
 8014da6:	88bb      	ldrh	r3, [r7, #4]
 8014da8:	3301      	adds	r3, #1
 8014daa:	80bb      	strh	r3, [r7, #4]

    if(StA > 4)
 8014dac:	88bb      	ldrh	r3, [r7, #4]
 8014dae:	2b04      	cmp	r3, #4
 8014db0:	d806      	bhi.n	8014dc0 <Align_Set+0xc4>
  for(i=0; i<100; i++)
 8014db2:	88fb      	ldrh	r3, [r7, #6]
 8014db4:	3301      	adds	r3, #1
 8014db6:	80fb      	strh	r3, [r7, #6]
 8014db8:	88fb      	ldrh	r3, [r7, #6]
 8014dba:	2b63      	cmp	r3, #99	; 0x63
 8014dbc:	d9aa      	bls.n	8014d14 <Align_Set+0x18>
 8014dbe:	e000      	b.n	8014dc2 <Align_Set+0xc6>
    	return;
 8014dc0:	bf00      	nop
  }

}
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	20002850 	.word	0x20002850
 8014dcc:	20000578 	.word	0x20000578
 8014dd0:	2000687e 	.word	0x2000687e
 8014dd4:	2000285a 	.word	0x2000285a

08014dd8 <Zero_Align>:

/*******************************************************************************
 Channel's zero alignment:
*******************************************************************************/
void Zero_Align(void)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	af00      	add	r7, sp, #0
  GainA  = 0;//0x20;
 8014ddc:	4b21      	ldr	r3, [pc, #132]	; (8014e64 <Zero_Align+0x8c>)
 8014dde:	2200      	movs	r2, #0
 8014de0:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014de2:	4b21      	ldr	r3, [pc, #132]	; (8014e68 <Zero_Align+0x90>)
 8014de4:	2201      	movs	r2, #1
 8014de6:	801a      	strh	r2, [r3, #0]
  StateA = ACT;
 8014de8:	4b20      	ldr	r3, [pc, #128]	; (8014e6c <Zero_Align+0x94>)
 8014dea:	2204      	movs	r2, #4
 8014dec:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+ACT);
 8014dee:	2105      	movs	r1, #5
 8014df0:	2007      	movs	r0, #7
 8014df2:	f7f7 fabb 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014df6:	2064      	movs	r0, #100	; 0x64
 8014df8:	f000 f87e 	bl	8014ef8 <AiPosi>
  HAL_Delay(1000);
 8014dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e00:	f003 fa8c 	bl	801831c <HAL_Delay>
  Align_Set();
 8014e04:	f7ff ff7a 	bl	8014cfc <Align_Set>

  GainA  = 0;//0x20;
 8014e08:	4b16      	ldr	r3, [pc, #88]	; (8014e64 <Zero_Align+0x8c>)
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	801a      	strh	r2, [r3, #0]
  KindA  = HV;
 8014e0e:	4b16      	ldr	r3, [pc, #88]	; (8014e68 <Zero_Align+0x90>)
 8014e10:	2201      	movs	r2, #1
 8014e12:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014e14:	4b15      	ldr	r3, [pc, #84]	; (8014e6c <Zero_Align+0x94>)
 8014e16:	2200      	movs	r2, #0
 8014e18:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, HV+AC+GND);
 8014e1a:	2101      	movs	r1, #1
 8014e1c:	2007      	movs	r0, #7
 8014e1e:	f7f7 faa5 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014e22:	2064      	movs	r0, #100	; 0x64
 8014e24:	f000 f868 	bl	8014ef8 <AiPosi>
  HAL_Delay(1000);
 8014e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e2c:	f003 fa76 	bl	801831c <HAL_Delay>
  Align_Set();
 8014e30:	f7ff ff64 	bl	8014cfc <Align_Set>

  GainA  = 0;//0x20;
 8014e34:	4b0b      	ldr	r3, [pc, #44]	; (8014e64 <Zero_Align+0x8c>)
 8014e36:	2200      	movs	r2, #0
 8014e38:	801a      	strh	r2, [r3, #0]
  KindA  = LV;
 8014e3a:	4b0b      	ldr	r3, [pc, #44]	; (8014e68 <Zero_Align+0x90>)
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	801a      	strh	r2, [r3, #0]
  StateA = GND;
 8014e40:	4b0a      	ldr	r3, [pc, #40]	; (8014e6c <Zero_Align+0x94>)
 8014e42:	2200      	movs	r2, #0
 8014e44:	801a      	strh	r2, [r3, #0]
  BIOS_Ctrl(AiRANGE, LV+AC+GND);
 8014e46:	2100      	movs	r1, #0
 8014e48:	2007      	movs	r0, #7
 8014e4a:	f7f7 fa8f 	bl	800c36c <BIOS_Ctrl>
  AiPosi(100);
 8014e4e:	2064      	movs	r0, #100	; 0x64
 8014e50:	f000 f852 	bl	8014ef8 <AiPosi>
  HAL_Delay(1000);
 8014e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e58:	f003 fa60 	bl	801831c <HAL_Delay>
  Align_Set();
 8014e5c:	f7ff ff4e 	bl	8014cfc <Align_Set>

}
 8014e60:	bf00      	nop
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	20002842 	.word	0x20002842
 8014e68:	2000687e 	.word	0x2000687e
 8014e6c:	2000285a 	.word	0x2000285a

08014e70 <Analys>:

/*******************************************************************************
 Channel's error analys
*******************************************************************************/
void Analys(void)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	af00      	add	r7, sp, #0
  unsigned i, SumA = 0;
 8014e76:	2300      	movs	r3, #0
 8014e78:	603b      	str	r3, [r7, #0]

  BIOS_Ctrl(SMPL_ST, DISABLE);
 8014e7a:	2100      	movs	r1, #0
 8014e7c:	2004      	movs	r0, #4
 8014e7e:	f7f7 fa75 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLTIM, 720-1);      // 72MHz/360 = 400kHz = 2.5uS
 8014e82:	f240 21cf 	movw	r1, #719	; 0x2cf
 8014e86:	2005      	movs	r0, #5
 8014e88:	f7f7 fa70 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPLNUM, 4096);       // 8192
 8014e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e90:	2006      	movs	r0, #6
 8014e92:	f7f7 fa6b 	bl	800c36c <BIOS_Ctrl>
  BIOS_Ctrl(SMPL_ST, ENABLE);
 8014e96:	2101      	movs	r1, #1
 8014e98:	2004      	movs	r0, #4
 8014e9a:	f7f7 fa67 	bl	800c36c <BIOS_Ctrl>
  while((BIOS_Info(CHA_CNT) != 0)) {};
 8014e9e:	bf00      	nop
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	f7f7 fa51 	bl	800c348 <BIOS_Info>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d1f9      	bne.n	8014ea0 <Analys+0x30>
  for(i=2; i<4000+2; i++){
 8014eac:	2302      	movs	r3, #2
 8014eae:	607b      	str	r3, [r7, #4]
 8014eb0:	e00a      	b.n	8014ec8 <Analys+0x58>
    SumA += Sampl[i];
 8014eb2:	4a0e      	ldr	r2, [pc, #56]	; (8014eec <Analys+0x7c>)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8014eba:	461a      	mov	r2, r3
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	4413      	add	r3, r2
 8014ec0:	603b      	str	r3, [r7, #0]
  for(i=2; i<4000+2; i++){
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	607b      	str	r3, [r7, #4]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d9ef      	bls.n	8014eb2 <Analys+0x42>
  }
  Vavg = SumA/4000; // 4000
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	4a06      	ldr	r2, [pc, #24]	; (8014ef0 <Analys+0x80>)
 8014ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8014eda:	0a1b      	lsrs	r3, r3, #8
 8014edc:	b21a      	sxth	r2, r3
 8014ede:	4b05      	ldr	r3, [pc, #20]	; (8014ef4 <Analys+0x84>)
 8014ee0:	801a      	strh	r2, [r3, #0]
}
 8014ee2:	bf00      	nop
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	20002868 	.word	0x20002868
 8014ef0:	10624dd3 	.word	0x10624dd3
 8014ef4:	20002850 	.word	0x20002850

08014ef8 <AiPosi>:

/*******************************************************************************
 DevCtrl:  offset
*******************************************************************************/
void AiPosi(char Val)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b082      	sub	sp, #8
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	4603      	mov	r3, r0
 8014f00:	71fb      	strb	r3, [r7, #7]
   BIOS_Ctrl(AOFFSET,((char)Val-100)*(KpA[KindA+(StateA?1:0)]/2)*GK[GainA]/KgA[KindA+(StateA?1:0)]+KpA[KindA+(StateA?1:0)]);
 8014f02:	79fb      	ldrb	r3, [r7, #7]
 8014f04:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8014f08:	4b28      	ldr	r3, [pc, #160]	; (8014fac <AiPosi+0xb4>)
 8014f0a:	6819      	ldr	r1, [r3, #0]
 8014f0c:	4b28      	ldr	r3, [pc, #160]	; (8014fb0 <AiPosi+0xb8>)
 8014f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f12:	4618      	mov	r0, r3
 8014f14:	4b27      	ldr	r3, [pc, #156]	; (8014fb4 <AiPosi+0xbc>)
 8014f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	bf14      	ite	ne
 8014f1e:	2301      	movne	r3, #1
 8014f20:	2300      	moveq	r3, #0
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	4403      	add	r3, r0
 8014f26:	005b      	lsls	r3, r3, #1
 8014f28:	440b      	add	r3, r1
 8014f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014f2e:	0fd9      	lsrs	r1, r3, #31
 8014f30:	440b      	add	r3, r1
 8014f32:	105b      	asrs	r3, r3, #1
 8014f34:	b21b      	sxth	r3, r3
 8014f36:	fb03 f302 	mul.w	r3, r3, r2
 8014f3a:	4a1f      	ldr	r2, [pc, #124]	; (8014fb8 <AiPosi+0xc0>)
 8014f3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f40:	4611      	mov	r1, r2
 8014f42:	4a1e      	ldr	r2, [pc, #120]	; (8014fbc <AiPosi+0xc4>)
 8014f44:	5c52      	ldrb	r2, [r2, r1]
 8014f46:	fb02 f303 	mul.w	r3, r2, r3
 8014f4a:	4a1d      	ldr	r2, [pc, #116]	; (8014fc0 <AiPosi+0xc8>)
 8014f4c:	6811      	ldr	r1, [r2, #0]
 8014f4e:	4a18      	ldr	r2, [pc, #96]	; (8014fb0 <AiPosi+0xb8>)
 8014f50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f54:	4610      	mov	r0, r2
 8014f56:	4a17      	ldr	r2, [pc, #92]	; (8014fb4 <AiPosi+0xbc>)
 8014f58:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f5c:	2a00      	cmp	r2, #0
 8014f5e:	bf14      	ite	ne
 8014f60:	2201      	movne	r2, #1
 8014f62:	2200      	moveq	r2, #0
 8014f64:	b2d2      	uxtb	r2, r2
 8014f66:	4402      	add	r2, r0
 8014f68:	0052      	lsls	r2, r2, #1
 8014f6a:	440a      	add	r2, r1
 8014f6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f74:	4a0d      	ldr	r2, [pc, #52]	; (8014fac <AiPosi+0xb4>)
 8014f76:	6811      	ldr	r1, [r2, #0]
 8014f78:	4a0d      	ldr	r2, [pc, #52]	; (8014fb0 <AiPosi+0xb8>)
 8014f7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f7e:	4610      	mov	r0, r2
 8014f80:	4a0c      	ldr	r2, [pc, #48]	; (8014fb4 <AiPosi+0xbc>)
 8014f82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f86:	2a00      	cmp	r2, #0
 8014f88:	bf14      	ite	ne
 8014f8a:	2201      	movne	r2, #1
 8014f8c:	2200      	moveq	r2, #0
 8014f8e:	b2d2      	uxtb	r2, r2
 8014f90:	4402      	add	r2, r0
 8014f92:	0052      	lsls	r2, r2, #1
 8014f94:	440a      	add	r2, r1
 8014f96:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014f9a:	4413      	add	r3, r2
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	2008      	movs	r0, #8
 8014fa0:	f7f7 f9e4 	bl	800c36c <BIOS_Ctrl>
}
 8014fa4:	bf00      	nop
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	20000578 	.word	0x20000578
 8014fb0:	2000687e 	.word	0x2000687e
 8014fb4:	2000285a 	.word	0x2000285a
 8014fb8:	20002842 	.word	0x20002842
 8014fbc:	20000560 	.word	0x20000560
 8014fc0:	2000057c 	.word	0x2000057c

08014fc4 <WaveProcess>:
/*******************************************************************************
 WaveProcess: ���㴦���������������
*******************************************************************************/

void WaveProcess(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b094      	sub	sp, #80	; 0x50
 8014fc8:	af00      	add	r7, sp, #0
  //------------------ ����Ԥ����,���ɽ���ָ��������ݵ���Ч�� -----------------//

  short* Ain  = (short*)&Sampl[2];
 8014fca:	4bb0      	ldr	r3, [pc, #704]	; (801528c <WaveProcess+0x2c8>)
 8014fcc:	617b      	str	r3, [r7, #20]

  int  Ak = (KgA[KindA+(StateA?1:0)]*4)/GK[GainA];
 8014fce:	4bb0      	ldr	r3, [pc, #704]	; (8015290 <WaveProcess+0x2cc>)
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	4bb0      	ldr	r3, [pc, #704]	; (8015294 <WaveProcess+0x2d0>)
 8014fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fd8:	4619      	mov	r1, r3
 8014fda:	4baf      	ldr	r3, [pc, #700]	; (8015298 <WaveProcess+0x2d4>)
 8014fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	bf14      	ite	ne
 8014fe4:	2301      	movne	r3, #1
 8014fe6:	2300      	moveq	r3, #0
 8014fe8:	b2db      	uxtb	r3, r3
 8014fea:	440b      	add	r3, r1
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	4413      	add	r3, r2
 8014ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4aa9      	ldr	r2, [pc, #676]	; (801529c <WaveProcess+0x2d8>)
 8014ff8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	4aa8      	ldr	r2, [pc, #672]	; (80152a0 <WaveProcess+0x2dc>)
 8015000:	5c52      	ldrb	r2, [r2, r1]
 8015002:	fb93 f3f2 	sdiv	r3, r3, r2
 8015006:	613b      	str	r3, [r7, #16]
  short  i, n, k, p = 0;
 8015008:	2300      	movs	r3, #0
 801500a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  short  VtlA, ViA, VthA, VeA, VpA, VoA;            // VtA,

  short  DtA   = 0, TslA  =  0, TshA = 0, StA  = 2;
 801500e:	2300      	movs	r3, #0
 8015010:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015012:	2300      	movs	r3, #0
 8015014:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015016:	2300      	movs	r3, #0
 8015018:	873b      	strh	r3, [r7, #56]	; 0x38
 801501a:	2302      	movs	r3, #2
 801501c:	86fb      	strh	r3, [r7, #54]	; 0x36
  short  FallA = 0, RiseA =  0, UpA  = 0, DnA  = 0;
 801501e:	2300      	movs	r3, #0
 8015020:	86bb      	strh	r3, [r7, #52]	; 0x34
 8015022:	2300      	movs	r3, #0
 8015024:	867b      	strh	r3, [r7, #50]	; 0x32
 8015026:	2300      	movs	r3, #0
 8015028:	863b      	strh	r3, [r7, #48]	; 0x30
 801502a:	2300      	movs	r3, #0
 801502c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int  MaxA  = 0, MinA  = ~0, SumA = 0, SsqA = 0; // ���/��Сֵ,�ۼ�/ƽ���� = 0
 801502e:	2300      	movs	r3, #0
 8015030:	62bb      	str	r3, [r7, #40]	; 0x28
 8015032:	f04f 33ff 	mov.w	r3, #4294967295
 8015036:	627b      	str	r3, [r7, #36]	; 0x24
 8015038:	2300      	movs	r3, #0
 801503a:	623b      	str	r3, [r7, #32]
 801503c:	2300      	movs	r3, #0
 801503e:	61fb      	str	r3, [r7, #28]

  short  Dpth  = DEPTH[List[SMPL_DPTH].Val] - 1;
 8015040:	4b98      	ldr	r3, [pc, #608]	; (80152a4 <WaveProcess+0x2e0>)
 8015042:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8015046:	461a      	mov	r2, r3
 8015048:	4b97      	ldr	r3, [pc, #604]	; (80152a8 <WaveProcess+0x2e4>)
 801504a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801504e:	b29b      	uxth	r3, r3
 8015050:	3b01      	subs	r3, #1
 8015052:	b29b      	uxth	r3, r3
 8015054:	837b      	strh	r3, [r7, #26]
  short  Tp    = PRE_SMPL+1, Tm = List[TR_MODE].Val & 1;
 8015056:	2397      	movs	r3, #151	; 0x97
 8015058:	81fb      	strh	r3, [r7, #14]
 801505a:	4b92      	ldr	r3, [pc, #584]	; (80152a4 <WaveProcess+0x2e0>)
 801505c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8015060:	f003 0301 	and.w	r3, r3, #1
 8015064:	81bb      	strh	r3, [r7, #12]
  short  Ks    = KS[List[TIM_BASE].Val],  Sm = List[SYNCMODE].Val;
 8015066:	4b8f      	ldr	r3, [pc, #572]	; (80152a4 <WaveProcess+0x2e0>)
 8015068:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801506c:	461a      	mov	r2, r3
 801506e:	4b8f      	ldr	r3, [pc, #572]	; (80152ac <WaveProcess+0x2e8>)
 8015070:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015074:	817b      	strh	r3, [r7, #10]
 8015076:	4b8b      	ldr	r3, [pc, #556]	; (80152a4 <WaveProcess+0x2e0>)
 8015078:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801507c:	813b      	strh	r3, [r7, #8]
  char   Ext = List[EXT_REFN].Val;
 801507e:	4b89      	ldr	r3, [pc, #548]	; (80152a4 <WaveProcess+0x2e0>)
 8015080:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	; 0xd4
 8015084:	71fb      	strb	r3, [r7, #7]

//---------------------- ��������Ԥ����,����ʵ�ʴ�����ֵ ---------------------//
  if(Status == STOP)
 8015086:	4b8a      	ldr	r3, [pc, #552]	; (80152b0 <WaveProcess+0x2ec>)
 8015088:	f9b3 3000 	ldrsh.w	r3, [r3]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d13c      	bne.n	801510a <WaveProcess+0x146>
  {
    VtlA  = (((Tri_Posi + Ch1_Posi - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015090:	4b88      	ldr	r3, [pc, #544]	; (80152b4 <WaveProcess+0x2f0>)
 8015092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015096:	461a      	mov	r2, r3
 8015098:	4b87      	ldr	r3, [pc, #540]	; (80152b8 <WaveProcess+0x2f4>)
 801509a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801509e:	4413      	add	r3, r2
 80150a0:	4a80      	ldr	r2, [pc, #512]	; (80152a4 <WaveProcess+0x2e0>)
 80150a2:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80150a6:	1a9b      	subs	r3, r3, r2
 80150a8:	3b64      	subs	r3, #100	; 0x64
 80150aa:	031a      	lsls	r2, r3, #12
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((Tri_Posi + Ch1_Posi + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 80150be:	4b7d      	ldr	r3, [pc, #500]	; (80152b4 <WaveProcess+0x2f0>)
 80150c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150c4:	461a      	mov	r2, r3
 80150c6:	4b7c      	ldr	r3, [pc, #496]	; (80152b8 <WaveProcess+0x2f4>)
 80150c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80150cc:	4413      	add	r3, r2
 80150ce:	4a75      	ldr	r2, [pc, #468]	; (80152a4 <WaveProcess+0x2e0>)
 80150d0:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 80150d4:	4413      	add	r3, r2
 80150d6:	3b64      	subs	r3, #100	; 0x64
 80150d8:	031a      	lsls	r2, r3, #12
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048; //??
 80150ec:	4b6d      	ldr	r3, [pc, #436]	; (80152a4 <WaveProcess+0x2e0>)
 80150ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80150f2:	3b64      	subs	r3, #100	; 0x64
 80150f4:	031a      	lsls	r2, r3, #12
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015102:	b29b      	uxth	r3, r3
 8015104:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015108:	e03b      	b.n	8015182 <WaveProcess+0x1be>
  }
  else
  {
    VtlA  = (((List[THRESHOLD].Val + List[V0_POSI].Val - List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 801510a:	4b66      	ldr	r3, [pc, #408]	; (80152a4 <WaveProcess+0x2e0>)
 801510c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015110:	461a      	mov	r2, r3
 8015112:	4b64      	ldr	r3, [pc, #400]	; (80152a4 <WaveProcess+0x2e0>)
 8015114:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015118:	4413      	add	r3, r2
 801511a:	4a62      	ldr	r2, [pc, #392]	; (80152a4 <WaveProcess+0x2e0>)
 801511c:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 8015120:	1a9b      	subs	r3, r3, r2
 8015122:	3b64      	subs	r3, #100	; 0x64
 8015124:	031a      	lsls	r2, r3, #12
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	fb92 f3f3 	sdiv	r3, r2, r3
 801512c:	b29b      	uxth	r3, r3
 801512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015132:	b29b      	uxth	r3, r3
 8015134:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    VthA  = (((List[THRESHOLD].Val + List[V0_POSI].Val + List[SENSITIVE].Val-100)<<12)/Ak)+2048;
 8015138:	4b5a      	ldr	r3, [pc, #360]	; (80152a4 <WaveProcess+0x2e0>)
 801513a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 801513e:	461a      	mov	r2, r3
 8015140:	4b58      	ldr	r3, [pc, #352]	; (80152a4 <WaveProcess+0x2e0>)
 8015142:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015146:	4413      	add	r3, r2
 8015148:	4a56      	ldr	r2, [pc, #344]	; (80152a4 <WaveProcess+0x2e0>)
 801514a:	f9b2 208c 	ldrsh.w	r2, [r2, #140]	; 0x8c
 801514e:	4413      	add	r3, r2
 8015150:	3b64      	subs	r3, #100	; 0x64
 8015152:	031a      	lsls	r2, r3, #12
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	fb92 f3f3 	sdiv	r3, r2, r3
 801515a:	b29b      	uxth	r3, r3
 801515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015160:	b29b      	uxth	r3, r3
 8015162:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    VpA   = ((((List[V0_POSI].Val)       -100)<<12)/Ak)+2048;
 8015166:	4b4f      	ldr	r3, [pc, #316]	; (80152a4 <WaveProcess+0x2e0>)
 8015168:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801516c:	3b64      	subs	r3, #100	; 0x64
 801516e:	031a      	lsls	r2, r3, #12
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	fb92 f3f3 	sdiv	r3, r2, r3
 8015176:	b29b      	uxth	r3, r3
 8015178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801517c:	b29b      	uxth	r3, r3
 801517e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  }
//-------------------------- ��������ͳ������� ------------------------------//


  if(((List[SYNCMODE].Val == NONE)||(List[SYNCMODE].Val == SCAN))
 8015182:	4b48      	ldr	r3, [pc, #288]	; (80152a4 <WaveProcess+0x2e0>)
 8015184:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015188:	2b05      	cmp	r3, #5
 801518a:	d004      	beq.n	8015196 <WaveProcess+0x1d2>
 801518c:	4b45      	ldr	r3, [pc, #276]	; (80152a4 <WaveProcess+0x2e0>)
 801518e:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8015192:	2b01      	cmp	r3, #1
 8015194:	d10b      	bne.n	80151ae <WaveProcess+0x1ea>
     &&(List[TIM_BASE].Val>11))
 8015196:	4b43      	ldr	r3, [pc, #268]	; (80152a4 <WaveProcess+0x2e0>)
 8015198:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801519c:	2b0b      	cmp	r3, #11
 801519e:	dd06      	ble.n	80151ae <WaveProcess+0x1ea>
  {
    Dpth = 302;
 80151a0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80151a4:	837b      	strh	r3, [r7, #26]
    List[VIEWPOSI].Val = 0;
 80151a6:	4b3f      	ldr	r3, [pc, #252]	; (80152a4 <WaveProcess+0x2e0>)
 80151a8:	2200      	movs	r2, #0
 80151aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  for(i=0; i<Dpth; i++)
 80151ae:	2300      	movs	r3, #0
 80151b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80151b4:	e0ad      	b.n	8015312 <WaveProcess+0x34e>
  {
	n = __HAL_DMA_GET_COUNTER(&hdma_adc1);//    DMA1_Channel1->CNDTR;              //DMA_CH_A->CNDTR; //DMA1_CNDTR1
 80151b6:	4b41      	ldr	r3, [pc, #260]	; (80152bc <WaveProcess+0x2f8>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 80151c0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80151c4:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80151c8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80151cc:	1acb      	subs	r3, r1, r3
 80151ce:	429a      	cmp	r2, r3
 80151d0:	f280 80a7 	bge.w	8015322 <WaveProcess+0x35e>
    ViA = Ain[i];
 80151d4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80151d8:	005b      	lsls	r3, r3, #1
 80151da:	697a      	ldr	r2, [r7, #20]
 80151dc:	4413      	add	r3, r2
 80151de:	881b      	ldrh	r3, [r3, #0]
 80151e0:	80bb      	strh	r3, [r7, #4]

    if(MaxA < ViA) MaxA = ViA;    // ͳ�����ֵ
 80151e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80151e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151e8:	429a      	cmp	r2, r3
 80151ea:	da02      	bge.n	80151f2 <WaveProcess+0x22e>
 80151ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80151f0:	62bb      	str	r3, [r7, #40]	; 0x28
    if(MinA > ViA) MinA = ViA;    // ͳ����Сֵ
 80151f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80151f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f8:	429a      	cmp	r2, r3
 80151fa:	dd02      	ble.n	8015202 <WaveProcess+0x23e>
 80151fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015200:	627b      	str	r3, [r7, #36]	; 0x24
    SumA += ViA;                  // ͳ���ۼӺ�
 8015202:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015206:	6a3a      	ldr	r2, [r7, #32]
 8015208:	4413      	add	r3, r2
 801520a:	623b      	str	r3, [r7, #32]
    SsqA +=(ViA-VpA)*(ViA-VpA);   // ͳ��ƽ����
 801520c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015210:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801521a:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801521e:	1a8a      	subs	r2, r1, r2
 8015220:	fb02 f303 	mul.w	r3, r2, r3
 8015224:	69fa      	ldr	r2, [r7, #28]
 8015226:	4413      	add	r3, r2
 8015228:	61fb      	str	r3, [r7, #28]


    if(StA == 2) DtA = 0;                  // ����CH_A�׸�������ǰ��ʱ���ۼ�
 801522a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801522e:	2b02      	cmp	r3, #2
 8015230:	d102      	bne.n	8015238 <WaveProcess+0x274>
 8015232:	2300      	movs	r3, #0
 8015234:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015236:	e005      	b.n	8015244 <WaveProcess+0x280>
    else         DtA++;
 8015238:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801523c:	b29b      	uxth	r3, r3
 801523e:	3301      	adds	r3, #1
 8015240:	b29b      	uxth	r3, r3
 8015242:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(ViA > VthA){                        // ViA ������ֵ����
 8015244:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8015248:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801524c:	429a      	cmp	r2, r3
 801524e:	dd37      	ble.n	80152c0 <WaveProcess+0x2fc>
      if(StA == 0){
 8015250:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015254:	2b00      	cmp	r3, #0
 8015256:	d115      	bne.n	8015284 <WaveProcess+0x2c0>
        TslA += DtA; DtA = 0; RiseA++;     // CH_A��λʱ���ۼƣ��������ۼ�
 8015258:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801525a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801525c:	4413      	add	r3, r2
 801525e:	b29b      	uxth	r3, r3
 8015260:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015262:	2300      	movs	r3, #0
 8015264:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015266:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801526a:	b29b      	uxth	r3, r3
 801526c:	3301      	adds	r3, #1
 801526e:	b29b      	uxth	r3, r3
 8015270:	867b      	strh	r3, [r7, #50]	; 0x32
        if(UpA < Tp) UpA = i;              // ��¼Ԥ������CH_A��һ��������λ��
 8015272:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015276:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801527a:	429a      	cmp	r2, r3
 801527c:	da02      	bge.n	8015284 <WaveProcess+0x2c0>
 801527e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015282:	863b      	strh	r3, [r7, #48]	; 0x30
      }
      StA = 1;                             // ��ǰCH_A״̬��Ϊ��λ
 8015284:	2301      	movs	r3, #1
 8015286:	86fb      	strh	r3, [r7, #54]	; 0x36
 8015288:	e03c      	b.n	8015304 <WaveProcess+0x340>
 801528a:	bf00      	nop
 801528c:	2000286c 	.word	0x2000286c
 8015290:	2000057c 	.word	0x2000057c
 8015294:	2000687e 	.word	0x2000687e
 8015298:	2000285a 	.word	0x2000285a
 801529c:	20002842 	.word	0x20002842
 80152a0:	20000560 	.word	0x20000560
 80152a4:	20000298 	.word	0x20000298
 80152a8:	08002270 	.word	0x08002270
 80152ac:	08002278 	.word	0x08002278
 80152b0:	2000079c 	.word	0x2000079c
 80152b4:	20002858 	.word	0x20002858
 80152b8:	2000687c 	.word	0x2000687c
 80152bc:	20006b48 	.word	0x20006b48
    } else if(ViA < VtlA){                 // ViA ������ֵ����
 80152c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80152c4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80152c8:	429a      	cmp	r2, r3
 80152ca:	da1b      	bge.n	8015304 <WaveProcess+0x340>
      if(StA == 1){
 80152cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d115      	bne.n	8015300 <WaveProcess+0x33c>
        TshA += DtA; DtA = 0; FallA++;     // CH_A��λʱ���ۼƣ��½����ۼ�
 80152d4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80152d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80152d8:	4413      	add	r3, r2
 80152da:	b29b      	uxth	r3, r3
 80152dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80152de:	2300      	movs	r3, #0
 80152e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80152e2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80152e6:	b29b      	uxth	r3, r3
 80152e8:	3301      	adds	r3, #1
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(DnA < Tp) DnA = i;              // ��¼Ԥ������CH_A��һ���½���λ��
 80152ee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80152f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	da02      	bge.n	8015300 <WaveProcess+0x33c>
 80152fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80152fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      StA = 0;                             // ��ǰCH_A״̬��Ϊ��λ
 8015300:	2300      	movs	r3, #0
 8015302:	86fb      	strh	r3, [r7, #54]	; 0x36
  for(i=0; i<Dpth; i++)
 8015304:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015308:	b29b      	uxth	r3, r3
 801530a:	3301      	adds	r3, #1
 801530c:	b29b      	uxth	r3, r3
 801530e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015312:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015316:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801531a:	429a      	cmp	r2, r3
 801531c:	f6ff af4b 	blt.w	80151b6 <WaveProcess+0x1f2>
 8015320:	e000      	b.n	8015324 <WaveProcess+0x360>
    if(i >= (Dpth-n)) break;      // ����һ���ڵȴ�A/Dת�����
 8015322:	bf00      	nop
    }
  }
  if(n == 0)
 8015324:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015328:	2b00      	cmp	r3, #0
 801532a:	d14f      	bne.n	80153cc <WaveProcess+0x408>
  {                              // ����ȫ����ɺ��������ֵ i == Dpth
    Vmax = MaxA; Vmin = MinA; Vavg = SumA/i; Vssq = SsqA/(i+1);
 801532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532e:	b21a      	sxth	r2, r3
 8015330:	4b9a      	ldr	r3, [pc, #616]	; (801559c <WaveProcess+0x5d8>)
 8015332:	801a      	strh	r2, [r3, #0]
 8015334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015336:	b21a      	sxth	r2, r3
 8015338:	4b99      	ldr	r3, [pc, #612]	; (80155a0 <WaveProcess+0x5dc>)
 801533a:	801a      	strh	r2, [r3, #0]
 801533c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015340:	6a3a      	ldr	r2, [r7, #32]
 8015342:	fb92 f3f3 	sdiv	r3, r2, r3
 8015346:	b21a      	sxth	r2, r3
 8015348:	4b96      	ldr	r3, [pc, #600]	; (80155a4 <WaveProcess+0x5e0>)
 801534a:	801a      	strh	r2, [r3, #0]
 801534c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015350:	3301      	adds	r3, #1
 8015352:	69fa      	ldr	r2, [r7, #28]
 8015354:	fb92 f3f3 	sdiv	r3, r2, r3
 8015358:	4a93      	ldr	r2, [pc, #588]	; (80155a8 <WaveProcess+0x5e4>)
 801535a:	6013      	str	r3, [r2, #0]
    Vrms = (Sqrt32(Vssq)); Vmid = (Vmax + Vmin)/2; Vpp = Vmax - Vmin;
 801535c:	4b92      	ldr	r3, [pc, #584]	; (80155a8 <WaveProcess+0x5e4>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	4618      	mov	r0, r3
 8015362:	f7fc fbf5 	bl	8011b50 <Sqrt32>
 8015366:	4603      	mov	r3, r0
 8015368:	461a      	mov	r2, r3
 801536a:	4b90      	ldr	r3, [pc, #576]	; (80155ac <WaveProcess+0x5e8>)
 801536c:	601a      	str	r2, [r3, #0]
 801536e:	4b8b      	ldr	r3, [pc, #556]	; (801559c <WaveProcess+0x5d8>)
 8015370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015374:	461a      	mov	r2, r3
 8015376:	4b8a      	ldr	r3, [pc, #552]	; (80155a0 <WaveProcess+0x5dc>)
 8015378:	f9b3 3000 	ldrsh.w	r3, [r3]
 801537c:	4413      	add	r3, r2
 801537e:	0fda      	lsrs	r2, r3, #31
 8015380:	4413      	add	r3, r2
 8015382:	105b      	asrs	r3, r3, #1
 8015384:	b21a      	sxth	r2, r3
 8015386:	4b8a      	ldr	r3, [pc, #552]	; (80155b0 <WaveProcess+0x5ec>)
 8015388:	801a      	strh	r2, [r3, #0]
 801538a:	4b84      	ldr	r3, [pc, #528]	; (801559c <WaveProcess+0x5d8>)
 801538c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015390:	461a      	mov	r2, r3
 8015392:	4b83      	ldr	r3, [pc, #524]	; (80155a0 <WaveProcess+0x5dc>)
 8015394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	4a86      	ldr	r2, [pc, #536]	; (80155b4 <WaveProcess+0x5f0>)
 801539c:	6013      	str	r3, [r2, #0]
    HighT = TshA/FallA; LowT = TslA/RiseA; Edge = FallA+ RiseA;
 801539e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80153a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80153a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80153aa:	4a83      	ldr	r2, [pc, #524]	; (80155b8 <WaveProcess+0x5f4>)
 80153ac:	6013      	str	r3, [r2, #0]
 80153ae:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80153b2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80153b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80153ba:	4a80      	ldr	r2, [pc, #512]	; (80155bc <WaveProcess+0x5f8>)
 80153bc:	6013      	str	r3, [r2, #0]
 80153be:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80153c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80153c6:	4413      	add	r3, r2
 80153c8:	4a7d      	ldr	r2, [pc, #500]	; (80155c0 <WaveProcess+0x5fc>)
 80153ca:	6013      	str	r3, [r2, #0]

  }
//--------------------------- ���ɲ�����ʾ���� -------------------------------//

  if(((Sm == NONE)||(Sm == SCAN))){
 80153cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80153d0:	2b05      	cmp	r3, #5
 80153d2:	d003      	beq.n	80153dc <WaveProcess+0x418>
 80153d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d12f      	bne.n	801543c <WaveProcess+0x478>
    if(List[TIM_BASE].Val > 11)
 80153dc:	4b79      	ldr	r3, [pc, #484]	; (80155c4 <WaveProcess+0x600>)
 80153de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80153e2:	2b0b      	cmp	r3, #11
 80153e4:	dd03      	ble.n	80153ee <WaveProcess+0x42a>
      k = 1;                         // NONE SCAN ģʽ��ǿ�ƴ���
 80153e6:	2301      	movs	r3, #1
 80153e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 80153ec:	e033      	b.n	8015456 <WaveProcess+0x492>
    else
    {
      k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 80153ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d101      	bne.n	80153fa <WaveProcess+0x436>
 80153f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80153f8:	e000      	b.n	80153fc <WaveProcess+0x438>
 80153fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80153fc:	89fa      	ldrh	r2, [r7, #14]
 80153fe:	1a9b      	subs	r3, r3, r2
 8015400:	b29b      	uxth	r3, r3
 8015402:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if((Sm == SCAN)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 8015406:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d123      	bne.n	8015456 <WaveProcess+0x492>
 801540e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015412:	2b00      	cmp	r3, #0
 8015414:	da1f      	bge.n	8015456 <WaveProcess+0x492>
        if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 8015416:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801541a:	2b00      	cmp	r3, #0
 801541c:	da00      	bge.n	8015420 <WaveProcess+0x45c>
 801541e:	3303      	adds	r3, #3
 8015420:	109b      	asrs	r3, r3, #2
 8015422:	b21b      	sxth	r3, r3
 8015424:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015428:	429a      	cmp	r2, r3
 801542a:	dd03      	ble.n	8015434 <WaveProcess+0x470>
 801542c:	2301      	movs	r3, #1
 801542e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 8015432:	e010      	b.n	8015456 <WaveProcess+0x492>
        else           k = 0;    // ������1/4��ǰ����ʾ
 8015434:	2300      	movs	r3, #0
 8015436:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if(List[TIM_BASE].Val > 11)
 801543a:	e00c      	b.n	8015456 <WaveProcess+0x492>
      }

    }
  } else
    k =((Tm == RISE)? UpA : DnA)-Tp; // k:Ԥ�����󴥷���λ��
 801543c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d101      	bne.n	8015448 <WaveProcess+0x484>
 8015444:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015446:	e000      	b.n	801544a <WaveProcess+0x486>
 8015448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801544a:	89fa      	ldrh	r2, [r7, #14]
 801544c:	1a9b      	subs	r3, r3, r2
 801544e:	b29b      	uxth	r3, r3
 8015450:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8015454:	e000      	b.n	8015458 <WaveProcess+0x494>
    if(List[TIM_BASE].Val > 11)
 8015456:	bf00      	nop

  if((!n)&&(Sm == SINGL)&&(k > 0)){ // SNGL ģʽ���д���ʱ�����������Զ�ֹͣ
 8015458:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801545c:	2b00      	cmp	r3, #0
 801545e:	d10c      	bne.n	801547a <WaveProcess+0x4b6>
 8015460:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015464:	2b04      	cmp	r3, #4
 8015466:	d108      	bne.n	801547a <WaveProcess+0x4b6>
 8015468:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801546c:	2b00      	cmp	r3, #0
 801546e:	dd04      	ble.n	801547a <WaveProcess+0x4b6>
    Status = STOP;
 8015470:	4b55      	ldr	r3, [pc, #340]	; (80155c8 <WaveProcess+0x604>)
 8015472:	2201      	movs	r2, #1
 8015474:	801a      	strh	r2, [r3, #0]
    DispStatus();
 8015476:	f7fe ff21 	bl	80142bc <DispStatus>
  }

  if((Sm == AUTO)&&(k < 0)){ // AUTO ģʽ���޴���ʱ
 801547a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801547e:	2b02      	cmp	r3, #2
 8015480:	d115      	bne.n	80154ae <WaveProcess+0x4ea>
 8015482:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015486:	2b00      	cmp	r3, #0
 8015488:	da11      	bge.n	80154ae <WaveProcess+0x4ea>
    if(i > Dpth/4) k = 1;    // ������1/4����ǿ�ƴ���
 801548a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801548e:	2b00      	cmp	r3, #0
 8015490:	da00      	bge.n	8015494 <WaveProcess+0x4d0>
 8015492:	3303      	adds	r3, #3
 8015494:	109b      	asrs	r3, r3, #2
 8015496:	b21b      	sxth	r3, r3
 8015498:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801549c:	429a      	cmp	r2, r3
 801549e:	dd03      	ble.n	80154a8 <WaveProcess+0x4e4>
 80154a0:	2301      	movs	r3, #1
 80154a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80154a6:	e002      	b.n	80154ae <WaveProcess+0x4ea>
    else           k = 0;    // ������1/4��ǰ����ʾ
 80154a8:	2300      	movs	r3, #0
 80154aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  }

  Trigger_k = k;
 80154ae:	4a47      	ldr	r2, [pc, #284]	; (80155cc <WaveProcess+0x608>)
 80154b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80154b4:	8013      	strh	r3, [r2, #0]

  if(Trigger_k>0)NORM_Kflag = 1;
 80154b6:	4b45      	ldr	r3, [pc, #276]	; (80155cc <WaveProcess+0x608>)
 80154b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	dd02      	ble.n	80154c6 <WaveProcess+0x502>
 80154c0:	4b43      	ldr	r3, [pc, #268]	; (80155d0 <WaveProcess+0x60c>)
 80154c2:	2201      	movs	r2, #1
 80154c4:	701a      	strb	r2, [r3, #0]

  if((SNGL_Kflag)&&(Status == STOP))
 80154c6:	4b43      	ldr	r3, [pc, #268]	; (80155d4 <WaveProcess+0x610>)
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d016      	beq.n	80154fc <WaveProcess+0x538>
 80154ce:	4b3e      	ldr	r3, [pc, #248]	; (80155c8 <WaveProcess+0x604>)
 80154d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154d4:	2b01      	cmp	r3, #1
 80154d6:	d111      	bne.n	80154fc <WaveProcess+0x538>
  {
    Ch1_Posi = List[V0_POSI].Val;
 80154d8:	4b3a      	ldr	r3, [pc, #232]	; (80155c4 <WaveProcess+0x600>)
 80154da:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80154de:	4b3e      	ldr	r3, [pc, #248]	; (80155d8 <WaveProcess+0x614>)
 80154e0:	801a      	strh	r2, [r3, #0]
    Ch2_Posi = List[EXT_POSI].Val;
 80154e2:	4b38      	ldr	r3, [pc, #224]	; (80155c4 <WaveProcess+0x600>)
 80154e4:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80154e8:	4b3c      	ldr	r3, [pc, #240]	; (80155dc <WaveProcess+0x618>)
 80154ea:	801a      	strh	r2, [r3, #0]
    Tri_Posi = List[THRESHOLD].Val;
 80154ec:	4b35      	ldr	r3, [pc, #212]	; (80155c4 <WaveProcess+0x600>)
 80154ee:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 80154f2:	4b3b      	ldr	r3, [pc, #236]	; (80155e0 <WaveProcess+0x61c>)
 80154f4:	801a      	strh	r2, [r3, #0]
    SNGL_Kflag = 0;
 80154f6:	4b37      	ldr	r3, [pc, #220]	; (80155d4 <WaveProcess+0x610>)
 80154f8:	2200      	movs	r2, #0
 80154fa:	701a      	strb	r2, [r3, #0]
  }

  if(k > 0)
 80154fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015500:	2b00      	cmp	r3, #0
 8015502:	f340 8104 	ble.w	801570e <WaveProcess+0x74a>
  {                                               // �д���ʱ����ʾ����
    k += List[VIEWPOSI].Val+((1024-Ks)*Tp+512)/1024; // ���β�ֵ���
 8015506:	4b2f      	ldr	r3, [pc, #188]	; (80155c4 <WaveProcess+0x600>)
 8015508:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801550c:	b29a      	uxth	r2, r3
 801550e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015512:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8015516:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801551a:	fb01 f303 	mul.w	r3, r1, r3
 801551e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015522:	2b00      	cmp	r3, #0
 8015524:	da01      	bge.n	801552a <WaveProcess+0x566>
 8015526:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801552a:	129b      	asrs	r3, r3, #10
 801552c:	b29b      	uxth	r3, r3
 801552e:	4413      	add	r3, r2
 8015530:	b29a      	uxth	r2, r3
 8015532:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8015536:	4413      	add	r3, r2
 8015538:	b29b      	uxth	r3, r3
 801553a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    VeA =(((Ain[k]-2048)*Ak)>>12)+100;
 801553e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015542:	005b      	lsls	r3, r3, #1
 8015544:	697a      	ldr	r2, [r7, #20]
 8015546:	4413      	add	r3, r2
 8015548:	f9b3 3000 	ldrsh.w	r3, [r3]
 801554c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015550:	693a      	ldr	r2, [r7, #16]
 8015552:	fb02 f303 	mul.w	r3, r2, r3
 8015556:	131b      	asrs	r3, r3, #12
 8015558:	b29b      	uxth	r3, r3
 801555a:	3364      	adds	r3, #100	; 0x64
 801555c:	b29b      	uxth	r3, r3
 801555e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    for(n=0; n<300;)
 8015562:	2300      	movs	r3, #0
 8015564:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015568:	e0c7      	b.n	80156fa <WaveProcess+0x736>
    {
      ViA =(((Ain[k]-2048)*Ak)>>12)+100;
 801556a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801556e:	005b      	lsls	r3, r3, #1
 8015570:	697a      	ldr	r2, [r7, #20]
 8015572:	4413      	add	r3, r2
 8015574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015578:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801557c:	693a      	ldr	r2, [r7, #16]
 801557e:	fb02 f303 	mul.w	r3, r2, r3
 8015582:	131b      	asrs	r3, r3, #12
 8015584:	b29b      	uxth	r3, r3
 8015586:	3364      	adds	r3, #100	; 0x64
 8015588:	b29b      	uxth	r3, r3
 801558a:	80bb      	strh	r3, [r7, #4]
      k++;
 801558c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015590:	b29b      	uxth	r3, r3
 8015592:	3301      	adds	r3, #1
 8015594:	b29b      	uxth	r3, r3
 8015596:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      while(p > 0){
 801559a:	e09e      	b.n	80156da <WaveProcess+0x716>
 801559c:	2000284e 	.word	0x2000284e
 80155a0:	20002860 	.word	0x20002860
 80155a4:	20002850 	.word	0x20002850
 80155a8:	20002854 	.word	0x20002854
 80155ac:	2000285c 	.word	0x2000285c
 80155b0:	20002862 	.word	0x20002862
 80155b4:	20006878 	.word	0x20006878
 80155b8:	20006870 	.word	0x20006870
 80155bc:	20006884 	.word	0x20006884
 80155c0:	20002848 	.word	0x20002848
 80155c4:	20000298 	.word	0x20000298
 80155c8:	2000079c 	.word	0x2000079c
 80155cc:	2000284c 	.word	0x2000284c
 80155d0:	20002864 	.word	0x20002864
 80155d4:	2000055c 	.word	0x2000055c
 80155d8:	2000687c 	.word	0x2000687c
 80155dc:	20006874 	.word	0x20006874
 80155e0:	20002858 	.word	0x20002858
        VoA = VeA +((ViA-VeA)*(1024-p))/1024; // ���� A ͨ����ǰ���ε�Ĳ�ֵ
 80155e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80155e8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80155ec:	1ad3      	subs	r3, r2, r3
 80155ee:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80155f2:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80155f6:	fb02 f303 	mul.w	r3, r2, r3
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	da01      	bge.n	8015602 <WaveProcess+0x63e>
 80155fe:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8015602:	129b      	asrs	r3, r3, #10
 8015604:	b29a      	uxth	r2, r3
 8015606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801560a:	4413      	add	r3, r2
 801560c:	b29b      	uxth	r3, r3
 801560e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if(Status == STOP){
 8015610:	4b63      	ldr	r3, [pc, #396]	; (80157a0 <WaveProcess+0x7dc>)
 8015612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d132      	bne.n	8015680 <WaveProcess+0x6bc>

          Vo_Temp = VoA+(List[V0_POSI].Val-Ch1_Posi);
 801561a:	4b62      	ldr	r3, [pc, #392]	; (80157a4 <WaveProcess+0x7e0>)
 801561c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015620:	b29a      	uxth	r2, r3
 8015622:	4b61      	ldr	r3, [pc, #388]	; (80157a8 <WaveProcess+0x7e4>)
 8015624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015628:	b29b      	uxth	r3, r3
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	b29a      	uxth	r2, r3
 801562e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015630:	4413      	add	r3, r2
 8015632:	b29b      	uxth	r3, r3
 8015634:	b21a      	sxth	r2, r3
 8015636:	4b5d      	ldr	r3, [pc, #372]	; (80157ac <WaveProcess+0x7e8>)
 8015638:	801a      	strh	r2, [r3, #0]

          if(Vo_Temp > 199) Vo_Temp = 202;
 801563a:	4b5c      	ldr	r3, [pc, #368]	; (80157ac <WaveProcess+0x7e8>)
 801563c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015640:	2bc7      	cmp	r3, #199	; 0xc7
 8015642:	dd02      	ble.n	801564a <WaveProcess+0x686>
 8015644:	4b59      	ldr	r3, [pc, #356]	; (80157ac <WaveProcess+0x7e8>)
 8015646:	22ca      	movs	r2, #202	; 0xca
 8015648:	801a      	strh	r2, [r3, #0]
          if(Vo_Temp <   3) Vo_Temp = 1;                     // �����޷�
 801564a:	4b58      	ldr	r3, [pc, #352]	; (80157ac <WaveProcess+0x7e8>)
 801564c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015650:	2b02      	cmp	r3, #2
 8015652:	dc02      	bgt.n	801565a <WaveProcess+0x696>
 8015654:	4b55      	ldr	r3, [pc, #340]	; (80157ac <WaveProcess+0x7e8>)
 8015656:	2201      	movs	r2, #1
 8015658:	801a      	strh	r2, [r3, #0]

          WaveBuf[n]= Vo_Temp;
 801565a:	4b54      	ldr	r3, [pc, #336]	; (80157ac <WaveProcess+0x7e8>)
 801565c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015660:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015664:	b2d1      	uxtb	r1, r2
 8015666:	4a52      	ldr	r2, [pc, #328]	; (80157b0 <WaveProcess+0x7ec>)
 8015668:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 801566a:	4b4e      	ldr	r3, [pc, #312]	; (80157a4 <WaveProcess+0x7e0>)
 801566c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015670:	b2da      	uxtb	r2, r3
 8015672:	79f9      	ldrb	r1, [r7, #7]
 8015674:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015678:	4618      	mov	r0, r3
 801567a:	f000 f89d 	bl	80157b8 <Build_Ext>
 801567e:	e01b      	b.n	80156b8 <WaveProcess+0x6f4>
        }
        else{
          if(VoA > 199) VoA = 202;                   // �����޷�  ��������
 8015680:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015684:	2bc7      	cmp	r3, #199	; 0xc7
 8015686:	dd01      	ble.n	801568c <WaveProcess+0x6c8>
 8015688:	23ca      	movs	r3, #202	; 0xca
 801568a:	87fb      	strh	r3, [r7, #62]	; 0x3e
          if(VoA <   3) VoA = 2;                     // �����޷�
 801568c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015690:	2b02      	cmp	r3, #2
 8015692:	dc01      	bgt.n	8015698 <WaveProcess+0x6d4>
 8015694:	2302      	movs	r3, #2
 8015696:	87fb      	strh	r3, [r7, #62]	; 0x3e
          WaveBuf[n]= VoA;
 8015698:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801569c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801569e:	b2d1      	uxtb	r1, r2
 80156a0:	4a43      	ldr	r2, [pc, #268]	; (80157b0 <WaveProcess+0x7ec>)
 80156a2:	54d1      	strb	r1, [r2, r3]

          Build_Ext(n, Ext, List[V0_POSI].Val);
 80156a4:	4b3f      	ldr	r3, [pc, #252]	; (80157a4 <WaveProcess+0x7e0>)
 80156a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80156aa:	b2da      	uxtb	r2, r3
 80156ac:	79f9      	ldrb	r1, [r7, #7]
 80156ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156b2:	4618      	mov	r0, r3
 80156b4:	f000 f880 	bl	80157b8 <Build_Ext>
        }

        if(n++ >= 300) break;
 80156b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156bc:	b29a      	uxth	r2, r3
 80156be:	3201      	adds	r2, #1
 80156c0:	b292      	uxth	r2, r2
 80156c2:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 80156c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80156ca:	da0b      	bge.n	80156e4 <WaveProcess+0x720>
        p -= Ks;
 80156cc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80156d0:	897b      	ldrh	r3, [r7, #10]
 80156d2:	1ad3      	subs	r3, r2, r3
 80156d4:	b29b      	uxth	r3, r3
 80156d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 80156da:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80156de:	2b00      	cmp	r3, #0
 80156e0:	dc80      	bgt.n	80155e4 <WaveProcess+0x620>
 80156e2:	e000      	b.n	80156e6 <WaveProcess+0x722>
        if(n++ >= 300) break;
 80156e4:	bf00      	nop
      }
      p += 1024;
 80156e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80156ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80156ee:	b29b      	uxth	r3, r3
 80156f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      VeA = ViA;                              // �ݴ浱ǰ���ε��ֵ
 80156f4:	88bb      	ldrh	r3, [r7, #4]
 80156f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    for(n=0; n<300;)
 80156fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015702:	f6ff af32 	blt.w	801556a <WaveProcess+0x5a6>
    }
    Norm_Clr = 0;                                          //NORM����
 8015706:	4b2b      	ldr	r3, [pc, #172]	; (80157b4 <WaveProcess+0x7f0>)
 8015708:	2200      	movs	r2, #0
 801570a:	701a      	strb	r2, [r3, #0]
 801570c:	e037      	b.n	801577e <WaveProcess+0x7ba>
  }
  else if((k < 0) && ((Sm != NORM)||(Norm_Clr))){          //NORM��������Ļ
 801570e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8015712:	2b00      	cmp	r3, #0
 8015714:	da33      	bge.n	801577e <WaveProcess+0x7ba>
 8015716:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801571a:	2b03      	cmp	r3, #3
 801571c:	d103      	bne.n	8015726 <WaveProcess+0x762>
 801571e:	4b25      	ldr	r3, [pc, #148]	; (80157b4 <WaveProcess+0x7f0>)
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d02b      	beq.n	801577e <WaveProcess+0x7ba>
    for(n=0; n<300;){
 8015726:	2300      	movs	r3, #0
 8015728:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801572c:	e022      	b.n	8015774 <WaveProcess+0x7b0>
      while(p > 0){
        WaveBuf[n]= 255;
 801572e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015732:	4a1f      	ldr	r2, [pc, #124]	; (80157b0 <WaveProcess+0x7ec>)
 8015734:	21ff      	movs	r1, #255	; 0xff
 8015736:	54d1      	strb	r1, [r2, r3]

        if(n++ >= 300) break;
 8015738:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801573c:	b29a      	uxth	r2, r3
 801573e:	3201      	adds	r2, #1
 8015740:	b292      	uxth	r2, r2
 8015742:	f8a7 204c 	strh.w	r2, [r7, #76]	; 0x4c
 8015746:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801574a:	da0b      	bge.n	8015764 <WaveProcess+0x7a0>
        p -= Ks;
 801574c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015750:	897b      	ldrh	r3, [r7, #10]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	b29b      	uxth	r3, r3
 8015756:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      while(p > 0){
 801575a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801575e:	2b00      	cmp	r3, #0
 8015760:	dce5      	bgt.n	801572e <WaveProcess+0x76a>
 8015762:	e000      	b.n	8015766 <WaveProcess+0x7a2>
        if(n++ >= 300) break;
 8015764:	bf00      	nop
      }
      p += 1024;
 8015766:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801576a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801576e:	b29b      	uxth	r3, r3
 8015770:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    for(n=0; n<300;){
 8015774:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015778:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801577c:	dbed      	blt.n	801575a <WaveProcess+0x796>
    }
  }
  if((i == Dpth)&&(Status != STOP))
 801577e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015782:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015786:	429a      	cmp	r2, r3
 8015788:	d106      	bne.n	8015798 <WaveProcess+0x7d4>
 801578a:	4b05      	ldr	r3, [pc, #20]	; (80157a0 <WaveProcess+0x7dc>)
 801578c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015790:	2b01      	cmp	r3, #1
 8015792:	d001      	beq.n	8015798 <WaveProcess+0x7d4>
  {
	  ADC_Start();       // ���¿�ʼ ADC ɨ�����
 8015794:	f7f6 ffaa 	bl	800c6ec <ADC_Start>
  }
}
 8015798:	bf00      	nop
 801579a:	3750      	adds	r7, #80	; 0x50
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	2000079c 	.word	0x2000079c
 80157a4:	20000298 	.word	0x20000298
 80157a8:	2000687c 	.word	0x2000687c
 80157ac:	20002840 	.word	0x20002840
 80157b0:	20000c00 	.word	0x20000c00
 80157b4:	200007a3 	.word	0x200007a3

080157b8 <Build_Ext>:

/*******************************************************************************
 Build_Ext: ��չͨ��������ʾ
*******************************************************************************/
void  Build_Ext(short x, char Ext, char Yp)
{
 80157b8:	b480      	push	{r7}
 80157ba:	b085      	sub	sp, #20
 80157bc:	af00      	add	r7, sp, #0
 80157be:	4603      	mov	r3, r0
 80157c0:	80fb      	strh	r3, [r7, #6]
 80157c2:	460b      	mov	r3, r1
 80157c4:	717b      	strb	r3, [r7, #5]
 80157c6:	4613      	mov	r3, r2
 80157c8:	713b      	strb	r3, [r7, #4]
  char* Buf = WaveBuf + TRACK1_SIZE;
 80157ca:	4b69      	ldr	r3, [pc, #420]	; (8015970 <Build_Ext+0x1b8>)
 80157cc:	60bb      	str	r3, [r7, #8]
  short  Vo;

  Posi_2F1 = List[EXT_POSI].Val -  Data[1] - List[V0_POSI].Val;
 80157ce:	4b69      	ldr	r3, [pc, #420]	; (8015974 <Build_Ext+0x1bc>)
 80157d0:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	4b68      	ldr	r3, [pc, #416]	; (8015978 <Build_Ext+0x1c0>)
 80157d8:	785b      	ldrb	r3, [r3, #1]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	b29a      	uxth	r2, r3
 80157e0:	4b64      	ldr	r3, [pc, #400]	; (8015974 <Build_Ext+0x1bc>)
 80157e2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	1ad3      	subs	r3, r2, r3
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	b21a      	sxth	r2, r3
 80157ee:	4b63      	ldr	r3, [pc, #396]	; (801597c <Build_Ext+0x1c4>)
 80157f0:	801a      	strh	r2, [r3, #0]
  Posi_2F2 = List[EXT_POSI].Val;// - Data[2];
 80157f2:	4b60      	ldr	r3, [pc, #384]	; (8015974 <Build_Ext+0x1bc>)
 80157f4:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 80157f8:	4b61      	ldr	r3, [pc, #388]	; (8015980 <Build_Ext+0x1c8>)
 80157fa:	801a      	strh	r2, [r3, #0]

  switch(Ext)
 80157fc:	797b      	ldrb	r3, [r7, #5]
 80157fe:	2b05      	cmp	r3, #5
 8015800:	f200 809c 	bhi.w	801593c <Build_Ext+0x184>
 8015804:	a201      	add	r2, pc, #4	; (adr r2, 801580c <Build_Ext+0x54>)
 8015806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801580a:	bf00      	nop
 801580c:	08015825 	.word	0x08015825
 8015810:	0801584b 	.word	0x0801584b
 8015814:	08015871 	.word	0x08015871
 8015818:	0801589b 	.word	0x0801589b
 801581c:	080158db 	.word	0x080158db
 8015820:	0801591b 	.word	0x0801591b
  {
  case 0: // D
    Vo = Data[x+10]-Data[1]+List[EXT_POSI].Val; break;
 8015824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015828:	330a      	adds	r3, #10
 801582a:	4a53      	ldr	r2, [pc, #332]	; (8015978 <Build_Ext+0x1c0>)
 801582c:	5cd3      	ldrb	r3, [r2, r3]
 801582e:	b29a      	uxth	r2, r3
 8015830:	4b51      	ldr	r3, [pc, #324]	; (8015978 <Build_Ext+0x1c0>)
 8015832:	785b      	ldrb	r3, [r3, #1]
 8015834:	b29b      	uxth	r3, r3
 8015836:	1ad3      	subs	r3, r2, r3
 8015838:	b29a      	uxth	r2, r3
 801583a:	4b4e      	ldr	r3, [pc, #312]	; (8015974 <Build_Ext+0x1bc>)
 801583c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015840:	b29b      	uxth	r3, r3
 8015842:	4413      	add	r3, r2
 8015844:	b29b      	uxth	r3, r3
 8015846:	81fb      	strh	r3, [r7, #14]
 8015848:	e078      	b.n	801593c <Build_Ext+0x184>
  case 1: // -D
    Vo = List[EXT_POSI].Val+Data[1]-Data[x+10]; break;
 801584a:	4b4a      	ldr	r3, [pc, #296]	; (8015974 <Build_Ext+0x1bc>)
 801584c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015850:	b29a      	uxth	r2, r3
 8015852:	4b49      	ldr	r3, [pc, #292]	; (8015978 <Build_Ext+0x1c0>)
 8015854:	785b      	ldrb	r3, [r3, #1]
 8015856:	b29b      	uxth	r3, r3
 8015858:	4413      	add	r3, r2
 801585a:	b29a      	uxth	r2, r3
 801585c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015860:	330a      	adds	r3, #10
 8015862:	4945      	ldr	r1, [pc, #276]	; (8015978 <Build_Ext+0x1c0>)
 8015864:	5ccb      	ldrb	r3, [r1, r3]
 8015866:	b29b      	uxth	r3, r3
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	b29b      	uxth	r3, r3
 801586c:	81fb      	strh	r3, [r7, #14]
 801586e:	e065      	b.n	801593c <Build_Ext+0x184>
  case 2: // Inp+D
    Vo = Data[x+10]+ WaveBuf[x]+Posi_2F1; break;
 8015870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015874:	330a      	adds	r3, #10
 8015876:	4a40      	ldr	r2, [pc, #256]	; (8015978 <Build_Ext+0x1c0>)
 8015878:	5cd3      	ldrb	r3, [r2, r3]
 801587a:	b29a      	uxth	r2, r3
 801587c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015880:	4940      	ldr	r1, [pc, #256]	; (8015984 <Build_Ext+0x1cc>)
 8015882:	5ccb      	ldrb	r3, [r1, r3]
 8015884:	b29b      	uxth	r3, r3
 8015886:	4413      	add	r3, r2
 8015888:	b29a      	uxth	r2, r3
 801588a:	4b3c      	ldr	r3, [pc, #240]	; (801597c <Build_Ext+0x1c4>)
 801588c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015890:	b29b      	uxth	r3, r3
 8015892:	4413      	add	r3, r2
 8015894:	b29b      	uxth	r3, r3
 8015896:	81fb      	strh	r3, [r7, #14]
 8015898:	e050      	b.n	801593c <Build_Ext+0x184>
  case 3: // D-Inp
    Vo = (Data[x+10]-Data[1])- (WaveBuf[x]-List[V0_POSI].Val)+ List[EXT_POSI].Val; break;
 801589a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801589e:	330a      	adds	r3, #10
 80158a0:	4a35      	ldr	r2, [pc, #212]	; (8015978 <Build_Ext+0x1c0>)
 80158a2:	5cd3      	ldrb	r3, [r2, r3]
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	4b34      	ldr	r3, [pc, #208]	; (8015978 <Build_Ext+0x1c0>)
 80158a8:	785b      	ldrb	r3, [r3, #1]
 80158aa:	b29b      	uxth	r3, r3
 80158ac:	1ad3      	subs	r3, r2, r3
 80158ae:	b29a      	uxth	r2, r3
 80158b0:	4b30      	ldr	r3, [pc, #192]	; (8015974 <Build_Ext+0x1bc>)
 80158b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80158b6:	b299      	uxth	r1, r3
 80158b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158bc:	4831      	ldr	r0, [pc, #196]	; (8015984 <Build_Ext+0x1cc>)
 80158be:	5cc3      	ldrb	r3, [r0, r3]
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	1acb      	subs	r3, r1, r3
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	4413      	add	r3, r2
 80158c8:	b29a      	uxth	r2, r3
 80158ca:	4b2a      	ldr	r3, [pc, #168]	; (8015974 <Build_Ext+0x1bc>)
 80158cc:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 80158d0:	b29b      	uxth	r3, r3
 80158d2:	4413      	add	r3, r2
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	81fb      	strh	r3, [r7, #14]
 80158d8:	e030      	b.n	801593c <Build_Ext+0x184>
  case 4: // Inp-D
    Vo = (WaveBuf[x]-List[V0_POSI].Val)-(Data[x+10]-Data[1]) + List[EXT_POSI].Val; break;
 80158da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158de:	4a29      	ldr	r2, [pc, #164]	; (8015984 <Build_Ext+0x1cc>)
 80158e0:	5cd3      	ldrb	r3, [r2, r3]
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	4b23      	ldr	r3, [pc, #140]	; (8015974 <Build_Ext+0x1bc>)
 80158e6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	1ad3      	subs	r3, r2, r3
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	4b21      	ldr	r3, [pc, #132]	; (8015978 <Build_Ext+0x1c0>)
 80158f2:	785b      	ldrb	r3, [r3, #1]
 80158f4:	b299      	uxth	r1, r3
 80158f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80158fa:	330a      	adds	r3, #10
 80158fc:	481e      	ldr	r0, [pc, #120]	; (8015978 <Build_Ext+0x1c0>)
 80158fe:	5cc3      	ldrb	r3, [r0, r3]
 8015900:	b29b      	uxth	r3, r3
 8015902:	1acb      	subs	r3, r1, r3
 8015904:	b29b      	uxth	r3, r3
 8015906:	4413      	add	r3, r2
 8015908:	b29a      	uxth	r2, r3
 801590a:	4b1a      	ldr	r3, [pc, #104]	; (8015974 <Build_Ext+0x1bc>)
 801590c:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015910:	b29b      	uxth	r3, r3
 8015912:	4413      	add	r3, r2
 8015914:	b29b      	uxth	r3, r3
 8015916:	81fb      	strh	r3, [r7, #14]
 8015918:	e010      	b.n	801593c <Build_Ext+0x184>
  case 5: // -Inp
    Vo = Yp+List[EXT_POSI].Val - WaveBuf[x]; break;
 801591a:	793b      	ldrb	r3, [r7, #4]
 801591c:	b29a      	uxth	r2, r3
 801591e:	4b15      	ldr	r3, [pc, #84]	; (8015974 <Build_Ext+0x1bc>)
 8015920:	f9b3 30dc 	ldrsh.w	r3, [r3, #220]	; 0xdc
 8015924:	b29b      	uxth	r3, r3
 8015926:	4413      	add	r3, r2
 8015928:	b29a      	uxth	r2, r3
 801592a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801592e:	4915      	ldr	r1, [pc, #84]	; (8015984 <Build_Ext+0x1cc>)
 8015930:	5ccb      	ldrb	r3, [r1, r3]
 8015932:	b29b      	uxth	r3, r3
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	b29b      	uxth	r3, r3
 8015938:	81fb      	strh	r3, [r7, #14]
 801593a:	bf00      	nop
  }
  if(Vo > 199) Vo = 202;
 801593c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015940:	2bc7      	cmp	r3, #199	; 0xc7
 8015942:	dd01      	ble.n	8015948 <Build_Ext+0x190>
 8015944:	23ca      	movs	r3, #202	; 0xca
 8015946:	81fb      	strh	r3, [r7, #14]
  if(Vo <   3) Vo = 1;                     // �����޷�
 8015948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801594c:	2b02      	cmp	r3, #2
 801594e:	dc01      	bgt.n	8015954 <Build_Ext+0x19c>
 8015950:	2301      	movs	r3, #1
 8015952:	81fb      	strh	r3, [r7, #14]
  Buf[x]= Vo;
 8015954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015958:	68ba      	ldr	r2, [r7, #8]
 801595a:	4413      	add	r3, r2
 801595c:	89fa      	ldrh	r2, [r7, #14]
 801595e:	b2d2      	uxtb	r2, r2
 8015960:	701a      	strb	r2, [r3, #0]
}
 8015962:	bf00      	nop
 8015964:	3714      	adds	r7, #20
 8015966:	46bd      	mov	sp, r7
 8015968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596c:	4770      	bx	lr
 801596e:	bf00      	nop
 8015970:	20000d2c 	.word	0x20000d2c
 8015974:	20000298 	.word	0x20000298
 8015978:	20000008 	.word	0x20000008
 801597c:	20002844 	.word	0x20002844
 8015980:	2000686c 	.word	0x2000686c
 8015984:	20000c00 	.word	0x20000c00

08015988 <Auto_Fit>:

void Auto_Fit(void)
{
 8015988:	b590      	push	{r4, r7, lr}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
  char i,j,k=0;
 801598e:	2300      	movs	r3, #0
 8015990:	717b      	strb	r3, [r7, #5]
  short Tmp,Tmp1;

  if(Status != STOP){
 8015992:	4b38      	ldr	r3, [pc, #224]	; (8015a74 <Auto_Fit+0xec>)
 8015994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015998:	2b01      	cmp	r3, #1
 801599a:	f000 83de 	beq.w	801615a <Auto_Fit+0x7d2>
    //======��ѹ���Զ�ѡ��==============
    for(i=0;i<9;i++){
 801599e:	2300      	movs	r3, #0
 80159a0:	71fb      	strb	r3, [r7, #7]
 80159a2:	e098      	b.n	8015ad6 <Auto_Fit+0x14e>
      //******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 80159a4:	4b34      	ldr	r3, [pc, #208]	; (8015a78 <Auto_Fit+0xf0>)
 80159a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159aa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80159ae:	4a33      	ldr	r2, [pc, #204]	; (8015a7c <Auto_Fit+0xf4>)
 80159b0:	6811      	ldr	r1, [r2, #0]
 80159b2:	4a33      	ldr	r2, [pc, #204]	; (8015a80 <Auto_Fit+0xf8>)
 80159b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80159b8:	4610      	mov	r0, r2
 80159ba:	4a32      	ldr	r2, [pc, #200]	; (8015a84 <Auto_Fit+0xfc>)
 80159bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80159c0:	2a00      	cmp	r2, #0
 80159c2:	bf14      	ite	ne
 80159c4:	2201      	movne	r2, #1
 80159c6:	2200      	moveq	r2, #0
 80159c8:	b2d2      	uxtb	r2, r2
 80159ca:	4402      	add	r2, r0
 80159cc:	0052      	lsls	r2, r2, #1
 80159ce:	440a      	add	r2, r1
 80159d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80159d4:	0092      	lsls	r2, r2, #2
 80159d6:	492c      	ldr	r1, [pc, #176]	; (8015a88 <Auto_Fit+0x100>)
 80159d8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80159dc:	4608      	mov	r0, r1
 80159de:	492b      	ldr	r1, [pc, #172]	; (8015a8c <Auto_Fit+0x104>)
 80159e0:	5c09      	ldrb	r1, [r1, r0]
 80159e2:	fb92 f2f1 	sdiv	r2, r2, r1
 80159e6:	fb02 f303 	mul.w	r3, r2, r3
 80159ea:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	4b28      	ldr	r3, [pc, #160]	; (8015a90 <Auto_Fit+0x108>)
 80159f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80159f8:	4920      	ldr	r1, [pc, #128]	; (8015a7c <Auto_Fit+0xf4>)
 80159fa:	6808      	ldr	r0, [r1, #0]
 80159fc:	4920      	ldr	r1, [pc, #128]	; (8015a80 <Auto_Fit+0xf8>)
 80159fe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a02:	460c      	mov	r4, r1
 8015a04:	491f      	ldr	r1, [pc, #124]	; (8015a84 <Auto_Fit+0xfc>)
 8015a06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a0a:	2900      	cmp	r1, #0
 8015a0c:	bf14      	ite	ne
 8015a0e:	2101      	movne	r1, #1
 8015a10:	2100      	moveq	r1, #0
 8015a12:	b2c9      	uxtb	r1, r1
 8015a14:	4421      	add	r1, r4
 8015a16:	0049      	lsls	r1, r1, #1
 8015a18:	4401      	add	r1, r0
 8015a1a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015a1e:	0089      	lsls	r1, r1, #2
 8015a20:	4819      	ldr	r0, [pc, #100]	; (8015a88 <Auto_Fit+0x100>)
 8015a22:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015a26:	4604      	mov	r4, r0
 8015a28:	4818      	ldr	r0, [pc, #96]	; (8015a8c <Auto_Fit+0x104>)
 8015a2a:	5d00      	ldrb	r0, [r0, r4]
 8015a2c:	fb91 f1f0 	sdiv	r1, r1, r0
 8015a30:	fb01 f303 	mul.w	r3, r1, r3
 8015a34:	131b      	asrs	r3, r3, #12
 8015a36:	b29b      	uxth	r3, r3
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015a3c:	803b      	strh	r3, [r7, #0]
      if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015a3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015a42:	2b27      	cmp	r3, #39	; 0x27
 8015a44:	dc28      	bgt.n	8015a98 <Auto_Fit+0x110>
 8015a46:	4b13      	ldr	r3, [pc, #76]	; (8015a94 <Auto_Fit+0x10c>)
 8015a48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015a4c:	2b02      	cmp	r3, #2
 8015a4e:	dd23      	ble.n	8015a98 <Auto_Fit+0x110>
        List[Y_RANGES].Val--;
 8015a50:	4b10      	ldr	r3, [pc, #64]	; (8015a94 <Auto_Fit+0x10c>)
 8015a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	3b01      	subs	r3, #1
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	b21a      	sxth	r2, r3
 8015a5e:	4b0d      	ldr	r3, [pc, #52]	; (8015a94 <Auto_Fit+0x10c>)
 8015a60:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015a62:	4b0c      	ldr	r3, [pc, #48]	; (8015a94 <Auto_Fit+0x10c>)
 8015a64:	2264      	movs	r2, #100	; 0x64
 8015a66:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015a68:	f7ff faac 	bl	8014fc4 <WaveProcess>
        Update_Proc_All();
 8015a6c:	f7fe ff32 	bl	80148d4 <Update_Proc_All>
 8015a70:	e02b      	b.n	8015aca <Auto_Fit+0x142>
 8015a72:	bf00      	nop
 8015a74:	2000079c 	.word	0x2000079c
 8015a78:	2000284e 	.word	0x2000284e
 8015a7c:	2000057c 	.word	0x2000057c
 8015a80:	2000687e 	.word	0x2000687e
 8015a84:	2000285a 	.word	0x2000285a
 8015a88:	20002842 	.word	0x20002842
 8015a8c:	20000560 	.word	0x20000560
 8015a90:	20002860 	.word	0x20002860
 8015a94:	20000298 	.word	0x20000298
      }
      else if((Tmp1 > 110)&&(List[Y_RANGES].Val < 9)){ //110
 8015a98:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015a9c:	2b6e      	cmp	r3, #110	; 0x6e
 8015a9e:	dd14      	ble.n	8015aca <Auto_Fit+0x142>
 8015aa0:	4bbe      	ldr	r3, [pc, #760]	; (8015d9c <Auto_Fit+0x414>)
 8015aa2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015aa6:	2b08      	cmp	r3, #8
 8015aa8:	dc0f      	bgt.n	8015aca <Auto_Fit+0x142>
        List[Y_RANGES].Val++;
 8015aaa:	4bbc      	ldr	r3, [pc, #752]	; (8015d9c <Auto_Fit+0x414>)
 8015aac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	b21a      	sxth	r2, r3
 8015ab8:	4bb8      	ldr	r3, [pc, #736]	; (8015d9c <Auto_Fit+0x414>)
 8015aba:	809a      	strh	r2, [r3, #4]
        List[V0_POSI].Val=100;
 8015abc:	4bb7      	ldr	r3, [pc, #732]	; (8015d9c <Auto_Fit+0x414>)
 8015abe:	2264      	movs	r2, #100	; 0x64
 8015ac0:	839a      	strh	r2, [r3, #28]
        WaveProcess();
 8015ac2:	f7ff fa7f 	bl	8014fc4 <WaveProcess>
        Update_Proc_All();
 8015ac6:	f7fe ff05 	bl	80148d4 <Update_Proc_All>
      }
      HAL_Delay(50);
 8015aca:	2032      	movs	r0, #50	; 0x32
 8015acc:	f002 fc26 	bl	801831c <HAL_Delay>
    for(i=0;i<9;i++){
 8015ad0:	79fb      	ldrb	r3, [r7, #7]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	71fb      	strb	r3, [r7, #7]
 8015ad6:	79fb      	ldrb	r3, [r7, #7]
 8015ad8:	2b08      	cmp	r3, #8
 8015ada:	f67f af63 	bls.w	80159a4 <Auto_Fit+0x1c>
    //============ʶ�𴥷�Դ======================


    //======�������Զ�ѡ��==============
    //if(!List[TRI_Ch]){//******Aͨ��***********
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015ade:	4bb0      	ldr	r3, [pc, #704]	; (8015da0 <Auto_Fit+0x418>)
 8015ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ae4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ae8:	4aae      	ldr	r2, [pc, #696]	; (8015da4 <Auto_Fit+0x41c>)
 8015aea:	6811      	ldr	r1, [r2, #0]
 8015aec:	4aae      	ldr	r2, [pc, #696]	; (8015da8 <Auto_Fit+0x420>)
 8015aee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015af2:	4610      	mov	r0, r2
 8015af4:	4aad      	ldr	r2, [pc, #692]	; (8015dac <Auto_Fit+0x424>)
 8015af6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015afa:	2a00      	cmp	r2, #0
 8015afc:	bf14      	ite	ne
 8015afe:	2201      	movne	r2, #1
 8015b00:	2200      	moveq	r2, #0
 8015b02:	b2d2      	uxtb	r2, r2
 8015b04:	4402      	add	r2, r0
 8015b06:	0052      	lsls	r2, r2, #1
 8015b08:	440a      	add	r2, r1
 8015b0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b0e:	0092      	lsls	r2, r2, #2
 8015b10:	49a7      	ldr	r1, [pc, #668]	; (8015db0 <Auto_Fit+0x428>)
 8015b12:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b16:	4608      	mov	r0, r1
 8015b18:	49a6      	ldr	r1, [pc, #664]	; (8015db4 <Auto_Fit+0x42c>)
 8015b1a:	5c09      	ldrb	r1, [r1, r0]
 8015b1c:	fb92 f2f1 	sdiv	r2, r2, r1
 8015b20:	fb02 f303 	mul.w	r3, r2, r3
 8015b24:	131a      	asrs	r2, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val))/4;
 8015b26:	4ba4      	ldr	r3, [pc, #656]	; (8015db8 <Auto_Fit+0x430>)
 8015b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b2c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b30:	499c      	ldr	r1, [pc, #624]	; (8015da4 <Auto_Fit+0x41c>)
 8015b32:	6808      	ldr	r0, [r1, #0]
 8015b34:	499c      	ldr	r1, [pc, #624]	; (8015da8 <Auto_Fit+0x420>)
 8015b36:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	499b      	ldr	r1, [pc, #620]	; (8015dac <Auto_Fit+0x424>)
 8015b3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b42:	2900      	cmp	r1, #0
 8015b44:	bf14      	ite	ne
 8015b46:	2101      	movne	r1, #1
 8015b48:	2100      	moveq	r1, #0
 8015b4a:	b2c9      	uxtb	r1, r1
 8015b4c:	4421      	add	r1, r4
 8015b4e:	0049      	lsls	r1, r1, #1
 8015b50:	4401      	add	r1, r0
 8015b52:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015b56:	0089      	lsls	r1, r1, #2
 8015b58:	4895      	ldr	r0, [pc, #596]	; (8015db0 <Auto_Fit+0x428>)
 8015b5a:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015b5e:	4604      	mov	r4, r0
 8015b60:	4894      	ldr	r0, [pc, #592]	; (8015db4 <Auto_Fit+0x42c>)
 8015b62:	5d00      	ldrb	r0, [r0, r4]
 8015b64:	fb91 f1f0 	sdiv	r1, r1, r0
 8015b68:	fb01 f303 	mul.w	r3, r1, r3
 8015b6c:	131b      	asrs	r3, r3, #12
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	da00      	bge.n	8015b76 <Auto_Fit+0x1ee>
 8015b74:	3303      	adds	r3, #3
 8015b76:	109b      	asrs	r3, r3, #2
      Tmp = (((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015b78:	807b      	strh	r3, [r7, #2]
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015b7a:	4b88      	ldr	r3, [pc, #544]	; (8015d9c <Auto_Fit+0x414>)
 8015b7c:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015b80:	4618      	mov	r0, r3
 8015b82:	4b8e      	ldr	r3, [pc, #568]	; (8015dbc <Auto_Fit+0x434>)
 8015b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b88:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015b8c:	4a85      	ldr	r2, [pc, #532]	; (8015da4 <Auto_Fit+0x41c>)
 8015b8e:	6811      	ldr	r1, [r2, #0]
 8015b90:	4a85      	ldr	r2, [pc, #532]	; (8015da8 <Auto_Fit+0x420>)
 8015b92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b96:	4614      	mov	r4, r2
 8015b98:	4a84      	ldr	r2, [pc, #528]	; (8015dac <Auto_Fit+0x424>)
 8015b9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015b9e:	2a00      	cmp	r2, #0
 8015ba0:	bf14      	ite	ne
 8015ba2:	2201      	movne	r2, #1
 8015ba4:	2200      	moveq	r2, #0
 8015ba6:	b2d2      	uxtb	r2, r2
 8015ba8:	4422      	add	r2, r4
 8015baa:	0052      	lsls	r2, r2, #1
 8015bac:	440a      	add	r2, r1
 8015bae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bb2:	0092      	lsls	r2, r2, #2
 8015bb4:	497e      	ldr	r1, [pc, #504]	; (8015db0 <Auto_Fit+0x428>)
 8015bb6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015bba:	460c      	mov	r4, r1
 8015bbc:	497d      	ldr	r1, [pc, #500]	; (8015db4 <Auto_Fit+0x42c>)
 8015bbe:	5d09      	ldrb	r1, [r1, r4]
 8015bc0:	fb92 f2f1 	sdiv	r2, r2, r1
 8015bc4:	fb02 f303 	mul.w	r3, r2, r3
 8015bc8:	131b      	asrs	r3, r3, #12
 8015bca:	3364      	adds	r3, #100	; 0x64
 8015bcc:	4a73      	ldr	r2, [pc, #460]	; (8015d9c <Auto_Fit+0x414>)
 8015bce:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015bd2:	1a9a      	subs	r2, r3, r2
 8015bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015bd8:	4413      	add	r3, r2
 8015bda:	4298      	cmp	r0, r3
 8015bdc:	dc32      	bgt.n	8015c44 <Auto_Fit+0x2bc>
         (List[THRESHOLD].Val < (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  - Tmp))){
 8015bde:	4b6f      	ldr	r3, [pc, #444]	; (8015d9c <Auto_Fit+0x414>)
 8015be0:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015be4:	4618      	mov	r0, r3
 8015be6:	4b75      	ldr	r3, [pc, #468]	; (8015dbc <Auto_Fit+0x434>)
 8015be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015bf0:	4a6c      	ldr	r2, [pc, #432]	; (8015da4 <Auto_Fit+0x41c>)
 8015bf2:	6811      	ldr	r1, [r2, #0]
 8015bf4:	4a6c      	ldr	r2, [pc, #432]	; (8015da8 <Auto_Fit+0x420>)
 8015bf6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015bfa:	4614      	mov	r4, r2
 8015bfc:	4a6b      	ldr	r2, [pc, #428]	; (8015dac <Auto_Fit+0x424>)
 8015bfe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c02:	2a00      	cmp	r2, #0
 8015c04:	bf14      	ite	ne
 8015c06:	2201      	movne	r2, #1
 8015c08:	2200      	moveq	r2, #0
 8015c0a:	b2d2      	uxtb	r2, r2
 8015c0c:	4422      	add	r2, r4
 8015c0e:	0052      	lsls	r2, r2, #1
 8015c10:	440a      	add	r2, r1
 8015c12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c16:	0092      	lsls	r2, r2, #2
 8015c18:	4965      	ldr	r1, [pc, #404]	; (8015db0 <Auto_Fit+0x428>)
 8015c1a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c1e:	460c      	mov	r4, r1
 8015c20:	4964      	ldr	r1, [pc, #400]	; (8015db4 <Auto_Fit+0x42c>)
 8015c22:	5d09      	ldrb	r1, [r1, r4]
 8015c24:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c28:	fb02 f303 	mul.w	r3, r2, r3
 8015c2c:	131b      	asrs	r3, r3, #12
 8015c2e:	3364      	adds	r3, #100	; 0x64
 8015c30:	4a5a      	ldr	r2, [pc, #360]	; (8015d9c <Auto_Fit+0x414>)
 8015c32:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015c36:	1a9a      	subs	r2, r3, r2
 8015c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c3c:	1ad3      	subs	r3, r2, r3
      if((List[THRESHOLD].Val > (((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)  + Tmp))||
 8015c3e:	4298      	cmp	r0, r3
 8015c40:	f280 808e 	bge.w	8015d60 <Auto_Fit+0x3d8>
           if(abs(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15)<195)
 8015c44:	4b5d      	ldr	r3, [pc, #372]	; (8015dbc <Auto_Fit+0x434>)
 8015c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c4a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c4e:	4a55      	ldr	r2, [pc, #340]	; (8015da4 <Auto_Fit+0x41c>)
 8015c50:	6811      	ldr	r1, [r2, #0]
 8015c52:	4a55      	ldr	r2, [pc, #340]	; (8015da8 <Auto_Fit+0x420>)
 8015c54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c58:	4610      	mov	r0, r2
 8015c5a:	4a54      	ldr	r2, [pc, #336]	; (8015dac <Auto_Fit+0x424>)
 8015c5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c60:	2a00      	cmp	r2, #0
 8015c62:	bf14      	ite	ne
 8015c64:	2201      	movne	r2, #1
 8015c66:	2200      	moveq	r2, #0
 8015c68:	b2d2      	uxtb	r2, r2
 8015c6a:	4402      	add	r2, r0
 8015c6c:	0052      	lsls	r2, r2, #1
 8015c6e:	440a      	add	r2, r1
 8015c70:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015c74:	0092      	lsls	r2, r2, #2
 8015c76:	494e      	ldr	r1, [pc, #312]	; (8015db0 <Auto_Fit+0x428>)
 8015c78:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015c7c:	4608      	mov	r0, r1
 8015c7e:	494d      	ldr	r1, [pc, #308]	; (8015db4 <Auto_Fit+0x42c>)
 8015c80:	5c09      	ldrb	r1, [r1, r0]
 8015c82:	fb92 f2f1 	sdiv	r2, r2, r1
 8015c86:	fb02 f303 	mul.w	r3, r2, r3
 8015c8a:	131b      	asrs	r3, r3, #12
 8015c8c:	3364      	adds	r3, #100	; 0x64
 8015c8e:	4a43      	ldr	r2, [pc, #268]	; (8015d9c <Auto_Fit+0x414>)
 8015c90:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015c94:	1a9b      	subs	r3, r3, r2
 8015c96:	330f      	adds	r3, #15
 8015c98:	f113 0fc2 	cmn.w	r3, #194	; 0xc2
 8015c9c:	db5c      	blt.n	8015d58 <Auto_Fit+0x3d0>
 8015c9e:	4b47      	ldr	r3, [pc, #284]	; (8015dbc <Auto_Fit+0x434>)
 8015ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ca4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015ca8:	4a3e      	ldr	r2, [pc, #248]	; (8015da4 <Auto_Fit+0x41c>)
 8015caa:	6811      	ldr	r1, [r2, #0]
 8015cac:	4a3e      	ldr	r2, [pc, #248]	; (8015da8 <Auto_Fit+0x420>)
 8015cae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cb2:	4610      	mov	r0, r2
 8015cb4:	4a3d      	ldr	r2, [pc, #244]	; (8015dac <Auto_Fit+0x424>)
 8015cb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cba:	2a00      	cmp	r2, #0
 8015cbc:	bf14      	ite	ne
 8015cbe:	2201      	movne	r2, #1
 8015cc0:	2200      	moveq	r2, #0
 8015cc2:	b2d2      	uxtb	r2, r2
 8015cc4:	4402      	add	r2, r0
 8015cc6:	0052      	lsls	r2, r2, #1
 8015cc8:	440a      	add	r2, r1
 8015cca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015cce:	0092      	lsls	r2, r2, #2
 8015cd0:	4937      	ldr	r1, [pc, #220]	; (8015db0 <Auto_Fit+0x428>)
 8015cd2:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015cd6:	4608      	mov	r0, r1
 8015cd8:	4936      	ldr	r1, [pc, #216]	; (8015db4 <Auto_Fit+0x42c>)
 8015cda:	5c09      	ldrb	r1, [r1, r0]
 8015cdc:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ce0:	fb02 f303 	mul.w	r3, r2, r3
 8015ce4:	131b      	asrs	r3, r3, #12
 8015ce6:	3364      	adds	r3, #100	; 0x64
 8015ce8:	4a2c      	ldr	r2, [pc, #176]	; (8015d9c <Auto_Fit+0x414>)
 8015cea:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	330f      	adds	r3, #15
 8015cf2:	2bc2      	cmp	r3, #194	; 0xc2
 8015cf4:	dc30      	bgt.n	8015d58 <Auto_Fit+0x3d0>
             List[THRESHOLD].Val = ((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)+15 ;
 8015cf6:	4b31      	ldr	r3, [pc, #196]	; (8015dbc <Auto_Fit+0x434>)
 8015cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cfc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015d00:	4a28      	ldr	r2, [pc, #160]	; (8015da4 <Auto_Fit+0x41c>)
 8015d02:	6811      	ldr	r1, [r2, #0]
 8015d04:	4a28      	ldr	r2, [pc, #160]	; (8015da8 <Auto_Fit+0x420>)
 8015d06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d0a:	4610      	mov	r0, r2
 8015d0c:	4a27      	ldr	r2, [pc, #156]	; (8015dac <Auto_Fit+0x424>)
 8015d0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d12:	2a00      	cmp	r2, #0
 8015d14:	bf14      	ite	ne
 8015d16:	2201      	movne	r2, #1
 8015d18:	2200      	moveq	r2, #0
 8015d1a:	b2d2      	uxtb	r2, r2
 8015d1c:	4402      	add	r2, r0
 8015d1e:	0052      	lsls	r2, r2, #1
 8015d20:	440a      	add	r2, r1
 8015d22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015d26:	0092      	lsls	r2, r2, #2
 8015d28:	4921      	ldr	r1, [pc, #132]	; (8015db0 <Auto_Fit+0x428>)
 8015d2a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d2e:	4608      	mov	r0, r1
 8015d30:	4920      	ldr	r1, [pc, #128]	; (8015db4 <Auto_Fit+0x42c>)
 8015d32:	5c09      	ldrb	r1, [r1, r0]
 8015d34:	fb92 f2f1 	sdiv	r2, r2, r1
 8015d38:	fb02 f303 	mul.w	r3, r2, r3
 8015d3c:	131b      	asrs	r3, r3, #12
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	4b16      	ldr	r3, [pc, #88]	; (8015d9c <Auto_Fit+0x414>)
 8015d42:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	1ad3      	subs	r3, r2, r3
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	3373      	adds	r3, #115	; 0x73
 8015d4e:	b29b      	uxth	r3, r3
 8015d50:	b21a      	sxth	r2, r3
 8015d52:	4b12      	ldr	r3, [pc, #72]	; (8015d9c <Auto_Fit+0x414>)
 8015d54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
           WaveProcess();
 8015d58:	f7ff f934 	bl	8014fc4 <WaveProcess>
           Update_Proc_All();
 8015d5c:	f7fe fdba 	bl	80148d4 <Update_Proc_All>
         }

      ParamTab[VTx2]= ParamTab[P1x2] + 2*List[THRESHOLD].Val;
 8015d60:	4b17      	ldr	r3, [pc, #92]	; (8015dc0 <Auto_Fit+0x438>)
 8015d62:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	4b0c      	ldr	r3, [pc, #48]	; (8015d9c <Auto_Fit+0x414>)
 8015d6a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	005b      	lsls	r3, r3, #1
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	4413      	add	r3, r2
 8015d76:	b29b      	uxth	r3, r3
 8015d78:	b21a      	sxth	r2, r3
 8015d7a:	4b11      	ldr	r3, [pc, #68]	; (8015dc0 <Auto_Fit+0x438>)
 8015d7c:	839a      	strh	r2, [r3, #28]
      List[THRESHOLD].Flg |= UPD;
 8015d7e:	4b07      	ldr	r3, [pc, #28]	; (8015d9c <Auto_Fit+0x414>)
 8015d80:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015d84:	f043 0320 	orr.w	r3, r3, #32
 8015d88:	b2da      	uxtb	r2, r3
 8015d8a:	4b04      	ldr	r3, [pc, #16]	; (8015d9c <Auto_Fit+0x414>)
 8015d8c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      Update_Title();
 8015d90:	f7fc fa9c 	bl	80122cc <Update_Title>

    //===========��ƽʱ��������==================
    HAL_Delay(100);
 8015d94:	2064      	movs	r0, #100	; 0x64
 8015d96:	f002 fac1 	bl	801831c <HAL_Delay>
 8015d9a:	e013      	b.n	8015dc4 <Auto_Fit+0x43c>
 8015d9c:	20000298 	.word	0x20000298
 8015da0:	2000284e 	.word	0x2000284e
 8015da4:	2000057c 	.word	0x2000057c
 8015da8:	2000687e 	.word	0x2000687e
 8015dac:	2000285a 	.word	0x2000285a
 8015db0:	20002842 	.word	0x20002842
 8015db4:	20000560 	.word	0x20000560
 8015db8:	20002860 	.word	0x20002860
 8015dbc:	20002862 	.word	0x20002862
 8015dc0:	20000140 	.word	0x20000140

        if(((((Vmid-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)>10){
 8015dc4:	4ba3      	ldr	r3, [pc, #652]	; (8016054 <Auto_Fit+0x6cc>)
 8015dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015dce:	4aa2      	ldr	r2, [pc, #648]	; (8016058 <Auto_Fit+0x6d0>)
 8015dd0:	6811      	ldr	r1, [r2, #0]
 8015dd2:	4aa2      	ldr	r2, [pc, #648]	; (801605c <Auto_Fit+0x6d4>)
 8015dd4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dd8:	4610      	mov	r0, r2
 8015dda:	4aa1      	ldr	r2, [pc, #644]	; (8016060 <Auto_Fit+0x6d8>)
 8015ddc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015de0:	2a00      	cmp	r2, #0
 8015de2:	bf14      	ite	ne
 8015de4:	2201      	movne	r2, #1
 8015de6:	2200      	moveq	r2, #0
 8015de8:	b2d2      	uxtb	r2, r2
 8015dea:	4402      	add	r2, r0
 8015dec:	0052      	lsls	r2, r2, #1
 8015dee:	440a      	add	r2, r1
 8015df0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015df4:	0092      	lsls	r2, r2, #2
 8015df6:	499b      	ldr	r1, [pc, #620]	; (8016064 <Auto_Fit+0x6dc>)
 8015df8:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015dfc:	4608      	mov	r0, r1
 8015dfe:	499a      	ldr	r1, [pc, #616]	; (8016068 <Auto_Fit+0x6e0>)
 8015e00:	5c09      	ldrb	r1, [r1, r0]
 8015e02:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e06:	fb02 f303 	mul.w	r3, r2, r3
 8015e0a:	131b      	asrs	r3, r3, #12
 8015e0c:	3364      	adds	r3, #100	; 0x64
 8015e0e:	4a97      	ldr	r2, [pc, #604]	; (801606c <Auto_Fit+0x6e4>)
 8015e10:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8015e14:	1a9b      	subs	r3, r3, r2
 8015e16:	2b0a      	cmp	r3, #10
 8015e18:	dd76      	ble.n	8015f08 <Auto_Fit+0x580>
      WaveProcess();
 8015e1a:	f7ff f8d3 	bl	8014fc4 <WaveProcess>
      Update_Proc_All();
 8015e1e:	f7fe fd59 	bl	80148d4 <Update_Proc_All>
      HAL_Delay(100);
 8015e22:	2064      	movs	r0, #100	; 0x64
 8015e24:	f002 fa7a 	bl	801831c <HAL_Delay>
      for(i=0;i<9;i++){
 8015e28:	2300      	movs	r3, #0
 8015e2a:	71fb      	strb	r3, [r7, #7]
 8015e2c:	e068      	b.n	8015f00 <Auto_Fit+0x578>
        WaveProcess();
 8015e2e:	f7ff f8c9 	bl	8014fc4 <WaveProcess>
        Tmp1 = (((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val;
 8015e32:	4b8f      	ldr	r3, [pc, #572]	; (8016070 <Auto_Fit+0x6e8>)
 8015e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e38:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015e3c:	4a86      	ldr	r2, [pc, #536]	; (8016058 <Auto_Fit+0x6d0>)
 8015e3e:	6811      	ldr	r1, [r2, #0]
 8015e40:	4a86      	ldr	r2, [pc, #536]	; (801605c <Auto_Fit+0x6d4>)
 8015e42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e46:	4610      	mov	r0, r2
 8015e48:	4a85      	ldr	r2, [pc, #532]	; (8016060 <Auto_Fit+0x6d8>)
 8015e4a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e4e:	2a00      	cmp	r2, #0
 8015e50:	bf14      	ite	ne
 8015e52:	2201      	movne	r2, #1
 8015e54:	2200      	moveq	r2, #0
 8015e56:	b2d2      	uxtb	r2, r2
 8015e58:	4402      	add	r2, r0
 8015e5a:	0052      	lsls	r2, r2, #1
 8015e5c:	440a      	add	r2, r1
 8015e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015e62:	0092      	lsls	r2, r2, #2
 8015e64:	497f      	ldr	r1, [pc, #508]	; (8016064 <Auto_Fit+0x6dc>)
 8015e66:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015e6a:	4608      	mov	r0, r1
 8015e6c:	497e      	ldr	r1, [pc, #504]	; (8016068 <Auto_Fit+0x6e0>)
 8015e6e:	5c09      	ldrb	r1, [r1, r0]
 8015e70:	fb92 f2f1 	sdiv	r2, r2, r1
 8015e74:	fb02 f303 	mul.w	r3, r2, r3
 8015e78:	131b      	asrs	r3, r3, #12
 8015e7a:	b29a      	uxth	r2, r3
 8015e7c:	4b7b      	ldr	r3, [pc, #492]	; (801606c <Auto_Fit+0x6e4>)
 8015e7e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	1ad3      	subs	r3, r2, r3
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	3364      	adds	r3, #100	; 0x64
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	803b      	strh	r3, [r7, #0]
        if((Tmp1 < 40)&&(List[Y_RANGES].Val > 2)){       //40
 8015e8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015e92:	2b27      	cmp	r3, #39	; 0x27
 8015e94:	dc15      	bgt.n	8015ec2 <Auto_Fit+0x53a>
 8015e96:	4b75      	ldr	r3, [pc, #468]	; (801606c <Auto_Fit+0x6e4>)
 8015e98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e9c:	2b02      	cmp	r3, #2
 8015e9e:	dd10      	ble.n	8015ec2 <Auto_Fit+0x53a>
          List[Y_RANGES].Val--;
 8015ea0:	4b72      	ldr	r3, [pc, #456]	; (801606c <Auto_Fit+0x6e4>)
 8015ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	3b01      	subs	r3, #1
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	b21a      	sxth	r2, r3
 8015eae:	4b6f      	ldr	r3, [pc, #444]	; (801606c <Auto_Fit+0x6e4>)
 8015eb0:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015eb2:	4b6e      	ldr	r3, [pc, #440]	; (801606c <Auto_Fit+0x6e4>)
 8015eb4:	2264      	movs	r2, #100	; 0x64
 8015eb6:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015eb8:	f7ff f884 	bl	8014fc4 <WaveProcess>
          Update_Proc_All();
 8015ebc:	f7fe fd0a 	bl	80148d4 <Update_Proc_All>
 8015ec0:	e018      	b.n	8015ef4 <Auto_Fit+0x56c>
        }
        else if((Tmp1 > 100)&&(List[Y_RANGES].Val < 9)){ //110
 8015ec2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015ec6:	2b64      	cmp	r3, #100	; 0x64
 8015ec8:	dd14      	ble.n	8015ef4 <Auto_Fit+0x56c>
 8015eca:	4b68      	ldr	r3, [pc, #416]	; (801606c <Auto_Fit+0x6e4>)
 8015ecc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015ed0:	2b08      	cmp	r3, #8
 8015ed2:	dc0f      	bgt.n	8015ef4 <Auto_Fit+0x56c>
          List[Y_RANGES].Val++;
 8015ed4:	4b65      	ldr	r3, [pc, #404]	; (801606c <Auto_Fit+0x6e4>)
 8015ed6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	3301      	adds	r3, #1
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	b21a      	sxth	r2, r3
 8015ee2:	4b62      	ldr	r3, [pc, #392]	; (801606c <Auto_Fit+0x6e4>)
 8015ee4:	809a      	strh	r2, [r3, #4]
          List[V0_POSI].Val=100;
 8015ee6:	4b61      	ldr	r3, [pc, #388]	; (801606c <Auto_Fit+0x6e4>)
 8015ee8:	2264      	movs	r2, #100	; 0x64
 8015eea:	839a      	strh	r2, [r3, #28]
          WaveProcess();
 8015eec:	f7ff f86a 	bl	8014fc4 <WaveProcess>
          Update_Proc_All();
 8015ef0:	f7fe fcf0 	bl	80148d4 <Update_Proc_All>
        }
        HAL_Delay(50);
 8015ef4:	2032      	movs	r0, #50	; 0x32
 8015ef6:	f002 fa11 	bl	801831c <HAL_Delay>
      for(i=0;i<9;i++){
 8015efa:	79fb      	ldrb	r3, [r7, #7]
 8015efc:	3301      	adds	r3, #1
 8015efe:	71fb      	strb	r3, [r7, #7]
 8015f00:	79fb      	ldrb	r3, [r7, #7]
 8015f02:	2b08      	cmp	r3, #8
 8015f04:	d993      	bls.n	8015e2e <Auto_Fit+0x4a6>
 8015f06:	e054      	b.n	8015fb2 <Auto_Fit+0x62a>
      }
    }
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015f08:	4b59      	ldr	r3, [pc, #356]	; (8016070 <Auto_Fit+0x6e8>)
 8015f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f0e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f12:	4a51      	ldr	r2, [pc, #324]	; (8016058 <Auto_Fit+0x6d0>)
 8015f14:	6811      	ldr	r1, [r2, #0]
 8015f16:	4a51      	ldr	r2, [pc, #324]	; (801605c <Auto_Fit+0x6d4>)
 8015f18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f1c:	4610      	mov	r0, r2
 8015f1e:	4a50      	ldr	r2, [pc, #320]	; (8016060 <Auto_Fit+0x6d8>)
 8015f20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f24:	2a00      	cmp	r2, #0
 8015f26:	bf14      	ite	ne
 8015f28:	2201      	movne	r2, #1
 8015f2a:	2200      	moveq	r2, #0
 8015f2c:	b2d2      	uxtb	r2, r2
 8015f2e:	4402      	add	r2, r0
 8015f30:	0052      	lsls	r2, r2, #1
 8015f32:	440a      	add	r2, r1
 8015f34:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015f38:	0092      	lsls	r2, r2, #2
 8015f3a:	494a      	ldr	r1, [pc, #296]	; (8016064 <Auto_Fit+0x6dc>)
 8015f3c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f40:	4608      	mov	r0, r1
 8015f42:	4949      	ldr	r1, [pc, #292]	; (8016068 <Auto_Fit+0x6e0>)
 8015f44:	5c09      	ldrb	r1, [r1, r0]
 8015f46:	fb92 f2f1 	sdiv	r2, r2, r1
 8015f4a:	fb02 f303 	mul.w	r3, r2, r3
 8015f4e:	131a      	asrs	r2, r3, #12
         - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)) <10){
 8015f50:	4b48      	ldr	r3, [pc, #288]	; (8016074 <Auto_Fit+0x6ec>)
 8015f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f56:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015f5a:	493f      	ldr	r1, [pc, #252]	; (8016058 <Auto_Fit+0x6d0>)
 8015f5c:	6808      	ldr	r0, [r1, #0]
 8015f5e:	493f      	ldr	r1, [pc, #252]	; (801605c <Auto_Fit+0x6d4>)
 8015f60:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f64:	460c      	mov	r4, r1
 8015f66:	493e      	ldr	r1, [pc, #248]	; (8016060 <Auto_Fit+0x6d8>)
 8015f68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f6c:	2900      	cmp	r1, #0
 8015f6e:	bf14      	ite	ne
 8015f70:	2101      	movne	r1, #1
 8015f72:	2100      	moveq	r1, #0
 8015f74:	b2c9      	uxtb	r1, r1
 8015f76:	4421      	add	r1, r4
 8015f78:	0049      	lsls	r1, r1, #1
 8015f7a:	4401      	add	r1, r0
 8015f7c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015f80:	0089      	lsls	r1, r1, #2
 8015f82:	4838      	ldr	r0, [pc, #224]	; (8016064 <Auto_Fit+0x6dc>)
 8015f84:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015f88:	4604      	mov	r4, r0
 8015f8a:	4837      	ldr	r0, [pc, #220]	; (8016068 <Auto_Fit+0x6e0>)
 8015f8c:	5d00      	ldrb	r0, [r0, r4]
 8015f8e:	fb91 f1f0 	sdiv	r1, r1, r0
 8015f92:	fb01 f303 	mul.w	r3, r1, r3
 8015f96:	131b      	asrs	r3, r3, #12
 8015f98:	1ad3      	subs	r3, r2, r3
    else if((((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015f9a:	2b09      	cmp	r3, #9
 8015f9c:	dc09      	bgt.n	8015fb2 <Auto_Fit+0x62a>
      //===========���ź�ʱ��ѹ��2V==================
        List[Y_RANGES].Val=7; //2v
 8015f9e:	4b33      	ldr	r3, [pc, #204]	; (801606c <Auto_Fit+0x6e4>)
 8015fa0:	2207      	movs	r2, #7
 8015fa2:	809a      	strh	r2, [r3, #4]
        WaveProcess();
 8015fa4:	f7ff f80e 	bl	8014fc4 <WaveProcess>
        Update_Proc_All();
 8015fa8:	f7fe fc94 	bl	80148d4 <Update_Proc_All>
        HAL_Delay(50);
 8015fac:	2032      	movs	r0, #50	; 0x32
 8015fae:	f002 f9b5 	bl	801831c <HAL_Delay>


    //======ʱ���Զ�ѡ��==============

    //if(!List[TRI_Ch].Val){//******Aͨ��***********
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 8015fb2:	4b2f      	ldr	r3, [pc, #188]	; (8016070 <Auto_Fit+0x6e8>)
 8015fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fb8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015fbc:	4a26      	ldr	r2, [pc, #152]	; (8016058 <Auto_Fit+0x6d0>)
 8015fbe:	6811      	ldr	r1, [r2, #0]
 8015fc0:	4a26      	ldr	r2, [pc, #152]	; (801605c <Auto_Fit+0x6d4>)
 8015fc2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fc6:	4610      	mov	r0, r2
 8015fc8:	4a25      	ldr	r2, [pc, #148]	; (8016060 <Auto_Fit+0x6d8>)
 8015fca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fce:	2a00      	cmp	r2, #0
 8015fd0:	bf14      	ite	ne
 8015fd2:	2201      	movne	r2, #1
 8015fd4:	2200      	moveq	r2, #0
 8015fd6:	b2d2      	uxtb	r2, r2
 8015fd8:	4402      	add	r2, r0
 8015fda:	0052      	lsls	r2, r2, #1
 8015fdc:	440a      	add	r2, r1
 8015fde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015fe2:	0092      	lsls	r2, r2, #2
 8015fe4:	491f      	ldr	r1, [pc, #124]	; (8016064 <Auto_Fit+0x6dc>)
 8015fe6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015fea:	4608      	mov	r0, r1
 8015fec:	491e      	ldr	r1, [pc, #120]	; (8016068 <Auto_Fit+0x6e0>)
 8015fee:	5c09      	ldrb	r1, [r1, r0]
 8015ff0:	fb92 f2f1 	sdiv	r2, r2, r1
 8015ff4:	fb02 f303 	mul.w	r3, r2, r3
 8015ff8:	131b      	asrs	r3, r3, #12
           - ((((Vmin-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val);
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	4b1d      	ldr	r3, [pc, #116]	; (8016074 <Auto_Fit+0x6ec>)
 8015ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016002:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016006:	4914      	ldr	r1, [pc, #80]	; (8016058 <Auto_Fit+0x6d0>)
 8016008:	6808      	ldr	r0, [r1, #0]
 801600a:	4914      	ldr	r1, [pc, #80]	; (801605c <Auto_Fit+0x6d4>)
 801600c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016010:	460c      	mov	r4, r1
 8016012:	4913      	ldr	r1, [pc, #76]	; (8016060 <Auto_Fit+0x6d8>)
 8016014:	f9b1 1000 	ldrsh.w	r1, [r1]
 8016018:	2900      	cmp	r1, #0
 801601a:	bf14      	ite	ne
 801601c:	2101      	movne	r1, #1
 801601e:	2100      	moveq	r1, #0
 8016020:	b2c9      	uxtb	r1, r1
 8016022:	4421      	add	r1, r4
 8016024:	0049      	lsls	r1, r1, #1
 8016026:	4401      	add	r1, r0
 8016028:	f9b1 1000 	ldrsh.w	r1, [r1]
 801602c:	0089      	lsls	r1, r1, #2
 801602e:	480d      	ldr	r0, [pc, #52]	; (8016064 <Auto_Fit+0x6dc>)
 8016030:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016034:	4604      	mov	r4, r0
 8016036:	480c      	ldr	r0, [pc, #48]	; (8016068 <Auto_Fit+0x6e0>)
 8016038:	5d00      	ldrb	r0, [r0, r4]
 801603a:	fb91 f1f0 	sdiv	r1, r1, r0
 801603e:	fb01 f303 	mul.w	r3, r1, r3
 8016042:	131b      	asrs	r3, r3, #12
 8016044:	b29b      	uxth	r3, r3
 8016046:	1ad3      	subs	r3, r2, r3
 8016048:	b29b      	uxth	r3, r3
      Tmp1 = ((((Vmax-2048)*((KgA[KindA+(StateA?1:0)]*4)/GK[GainA]))>>12)+100-List[V0_POSI].Val)
 801604a:	803b      	strh	r3, [r7, #0]
      for(j=0;j<11;j++){
 801604c:	2300      	movs	r3, #0
 801604e:	71bb      	strb	r3, [r7, #6]
 8016050:	e06e      	b.n	8016130 <Auto_Fit+0x7a8>
 8016052:	bf00      	nop
 8016054:	20002862 	.word	0x20002862
 8016058:	2000057c 	.word	0x2000057c
 801605c:	2000687e 	.word	0x2000687e
 8016060:	2000285a 	.word	0x2000285a
 8016064:	20002842 	.word	0x20002842
 8016068:	20000560 	.word	0x20000560
 801606c:	20000298 	.word	0x20000298
 8016070:	2000284e 	.word	0x2000284e
 8016074:	20002860 	.word	0x20002860
        WaveProcess();
 8016078:	f7fe ffa4 	bl	8014fc4 <WaveProcess>
        if((k==0)&&(Edge < 60)&&(List[TIM_BASE].Val >5)){
 801607c:	797b      	ldrb	r3, [r7, #5]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d114      	bne.n	80160ac <Auto_Fit+0x724>
 8016082:	4b38      	ldr	r3, [pc, #224]	; (8016164 <Auto_Fit+0x7dc>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	2b3b      	cmp	r3, #59	; 0x3b
 8016088:	dc10      	bgt.n	80160ac <Auto_Fit+0x724>
 801608a:	4b37      	ldr	r3, [pc, #220]	; (8016168 <Auto_Fit+0x7e0>)
 801608c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016090:	2b05      	cmp	r3, #5
 8016092:	dd0b      	ble.n	80160ac <Auto_Fit+0x724>
          Set_Base(5);                           // Ӳ������ɨ��ʱ����λ
 8016094:	2005      	movs	r0, #5
 8016096:	f7f6 fa91 	bl	800c5bc <Set_Base>
          List[TIM_BASE].Val = 5;
 801609a:	4b33      	ldr	r3, [pc, #204]	; (8016168 <Auto_Fit+0x7e0>)
 801609c:	2205      	movs	r2, #5
 801609e:	879a      	strh	r2, [r3, #60]	; 0x3c
          WaveProcess();
 80160a0:	f7fe ff90 	bl	8014fc4 <WaveProcess>
          Update_Proc_All();
 80160a4:	f7fe fc16 	bl	80148d4 <Update_Proc_All>
          k=1;
 80160a8:	2301      	movs	r3, #1
 80160aa:	717b      	strb	r3, [r7, #5]
        }
        if((Edge > 180)&&(List[TIM_BASE].Val > 2)){
 80160ac:	4b2d      	ldr	r3, [pc, #180]	; (8016164 <Auto_Fit+0x7dc>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2bb4      	cmp	r3, #180	; 0xb4
 80160b2:	dd1b      	ble.n	80160ec <Auto_Fit+0x764>
 80160b4:	4b2c      	ldr	r3, [pc, #176]	; (8016168 <Auto_Fit+0x7e0>)
 80160b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160ba:	2b02      	cmp	r3, #2
 80160bc:	dd16      	ble.n	80160ec <Auto_Fit+0x764>
          List[TIM_BASE].Val--;
 80160be:	4b2a      	ldr	r3, [pc, #168]	; (8016168 <Auto_Fit+0x7e0>)
 80160c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	3b01      	subs	r3, #1
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	b21a      	sxth	r2, r3
 80160cc:	4b26      	ldr	r3, [pc, #152]	; (8016168 <Auto_Fit+0x7e0>)
 80160ce:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 80160d0:	4b25      	ldr	r3, [pc, #148]	; (8016168 <Auto_Fit+0x7e0>)
 80160d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7f6 fa70 	bl	800c5bc <Set_Base>
          WaveProcess();
 80160dc:	f7fe ff72 	bl	8014fc4 <WaveProcess>
                 Update_Proc_All();
 80160e0:	f7fe fbf8 	bl	80148d4 <Update_Proc_All>
          HAL_Delay(50);
 80160e4:	2032      	movs	r0, #50	; 0x32
 80160e6:	f002 f919 	bl	801831c <HAL_Delay>
 80160ea:	e01e      	b.n	801612a <Auto_Fit+0x7a2>
        }
        else if((Edge < 80)&&(List[TIM_BASE].Val< 11)){
 80160ec:	4b1d      	ldr	r3, [pc, #116]	; (8016164 <Auto_Fit+0x7dc>)
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b4f      	cmp	r3, #79	; 0x4f
 80160f2:	dc1a      	bgt.n	801612a <Auto_Fit+0x7a2>
 80160f4:	4b1c      	ldr	r3, [pc, #112]	; (8016168 <Auto_Fit+0x7e0>)
 80160f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160fa:	2b0a      	cmp	r3, #10
 80160fc:	dc15      	bgt.n	801612a <Auto_Fit+0x7a2>
          List[TIM_BASE].Val++;
 80160fe:	4b1a      	ldr	r3, [pc, #104]	; (8016168 <Auto_Fit+0x7e0>)
 8016100:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016104:	b29b      	uxth	r3, r3
 8016106:	3301      	adds	r3, #1
 8016108:	b29b      	uxth	r3, r3
 801610a:	b21a      	sxth	r2, r3
 801610c:	4b16      	ldr	r3, [pc, #88]	; (8016168 <Auto_Fit+0x7e0>)
 801610e:	879a      	strh	r2, [r3, #60]	; 0x3c
          Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016110:	4b15      	ldr	r3, [pc, #84]	; (8016168 <Auto_Fit+0x7e0>)
 8016112:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016116:	4618      	mov	r0, r3
 8016118:	f7f6 fa50 	bl	800c5bc <Set_Base>
          WaveProcess();
 801611c:	f7fe ff52 	bl	8014fc4 <WaveProcess>
                 Update_Proc_All();
 8016120:	f7fe fbd8 	bl	80148d4 <Update_Proc_All>
          HAL_Delay(50);
 8016124:	2032      	movs	r0, #50	; 0x32
 8016126:	f002 f8f9 	bl	801831c <HAL_Delay>
      for(j=0;j<11;j++){
 801612a:	79bb      	ldrb	r3, [r7, #6]
 801612c:	3301      	adds	r3, #1
 801612e:	71bb      	strb	r3, [r7, #6]
 8016130:	79bb      	ldrb	r3, [r7, #6]
 8016132:	2b0a      	cmp	r3, #10
 8016134:	d9a0      	bls.n	8016078 <Auto_Fit+0x6f0>
        }
      }

      if(Tmp1 < 20){
 8016136:	f9b7 3000 	ldrsh.w	r3, [r7]
 801613a:	2b13      	cmp	r3, #19
 801613c:	dc0b      	bgt.n	8016156 <Auto_Fit+0x7ce>
        List[TIM_BASE].Val=5; //50us
 801613e:	4b0a      	ldr	r3, [pc, #40]	; (8016168 <Auto_Fit+0x7e0>)
 8016140:	2205      	movs	r2, #5
 8016142:	879a      	strh	r2, [r3, #60]	; 0x3c
        Set_Base(List[TIM_BASE].Val);   // Ӳ������ɨ��ʱ����λ
 8016144:	4b08      	ldr	r3, [pc, #32]	; (8016168 <Auto_Fit+0x7e0>)
 8016146:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801614a:	4618      	mov	r0, r3
 801614c:	f7f6 fa36 	bl	800c5bc <Set_Base>
        HAL_Delay(50);
 8016150:	2032      	movs	r0, #50	; 0x32
 8016152:	f002 f8e3 	bl	801831c <HAL_Delay>
      }
       Update_Proc_All();
 8016156:	f7fe fbbd 	bl	80148d4 <Update_Proc_All>
  }
}
 801615a:	bf00      	nop
 801615c:	370c      	adds	r7, #12
 801615e:	46bd      	mov	sp, r7
 8016160:	bd90      	pop	{r4, r7, pc}
 8016162:	bf00      	nop
 8016164:	20002848 	.word	0x20002848
 8016168:	20000298 	.word	0x20000298

0801616c <Init_Touch>:

//SPI port is left set for LCD

// initialize touch screen
void Init_Touch(void)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	af00      	add	r7, sp, #0
	Touch_SPI();
 8016170:	f000 f810 	bl	8016194 <Touch_SPI>
	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_RESET);
 8016174:	2200      	movs	r2, #0
 8016176:	2140      	movs	r1, #64	; 0x40
 8016178:	4805      	ldr	r0, [pc, #20]	; (8016190 <Init_Touch+0x24>)
 801617a:	f003 fdbb 	bl	8019cf4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin( TpCs_GPIO_Port, TpCs_Pin, GPIO_PIN_SET);
 801617e:	2201      	movs	r2, #1
 8016180:	2140      	movs	r1, #64	; 0x40
 8016182:	4803      	ldr	r0, [pc, #12]	; (8016190 <Init_Touch+0x24>)
 8016184:	f003 fdb6 	bl	8019cf4 <HAL_GPIO_WritePin>
	LCD_SPI();
 8016188:	f000 f816 	bl	80161b8 <LCD_SPI>
}
 801618c:	bf00      	nop
 801618e:	bd80      	pop	{r7, pc}
 8016190:	40020400 	.word	0x40020400

08016194 <Touch_SPI>:

// set SPI for touch controller
void Touch_SPI(void)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&hspi3);
 8016198:	4806      	ldr	r0, [pc, #24]	; (80161b4 <Touch_SPI+0x20>)
 801619a:	f006 f8d4 	bl	801c346 <HAL_SPI_DeInit>
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 801619e:	4b05      	ldr	r3, [pc, #20]	; (80161b4 <Touch_SPI+0x20>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //slow clock for touch controller
 80161a4:	4b03      	ldr	r3, [pc, #12]	; (80161b4 <Touch_SPI+0x20>)
 80161a6:	2218      	movs	r2, #24
 80161a8:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80161aa:	4802      	ldr	r0, [pc, #8]	; (80161b4 <Touch_SPI+0x20>)
 80161ac:	f006 f842 	bl	801c234 <HAL_SPI_Init>
}
 80161b0:	bf00      	nop
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	20006a18 	.word	0x20006a18

080161b8 <LCD_SPI>:

// set SPI for LCD display
void LCD_SPI(void)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&hspi3);
 80161bc:	4807      	ldr	r0, [pc, #28]	; (80161dc <LCD_SPI+0x24>)
 80161be:	f006 f8c2 	bl	801c346 <HAL_SPI_DeInit>
	hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80161c2:	4b06      	ldr	r3, [pc, #24]	; (80161dc <LCD_SPI+0x24>)
 80161c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80161c8:	60da      	str	r2, [r3, #12]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80161ca:	4b04      	ldr	r3, [pc, #16]	; (80161dc <LCD_SPI+0x24>)
 80161cc:	2210      	movs	r2, #16
 80161ce:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 80161d0:	4802      	ldr	r0, [pc, #8]	; (80161dc <LCD_SPI+0x24>)
 80161d2:	f006 f82f 	bl	801c234 <HAL_SPI_Init>
}
 80161d6:	bf00      	nop
 80161d8:	bd80      	pop	{r7, pc}
 80161da:	bf00      	nop
 80161dc:	20006a18 	.word	0x20006a18

080161e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  short i;
  char SAVE_FLAG = 0;
 80161e6:	2300      	movs	r3, #0
 80161e8:	717b      	strb	r3, [r7, #5]
  char Pop_Num = 0;
 80161ea:	2300      	movs	r3, #0
 80161ec:	713b      	strb	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80161ee:	f002 f823 	bl	8018238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80161f2:	f001 f81d 	bl	8017230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80161f6:	f001 fbb5 	bl	8017964 <MX_GPIO_Init>
  MX_DMA_Init();
 80161fa:	f001 fb75 	bl	80178e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80161fe:	f001 f88b 	bl	8017318 <MX_ADC1_Init>
  MX_ADC2_Init();
 8016202:	f001 f8db 	bl	80173bc <MX_ADC2_Init>
  MX_DAC_Init();
 8016206:	f001 f92b 	bl	8017460 <MX_DAC_Init>
  MX_SPI2_Init();
 801620a:	f001 f967 	bl	80174dc <MX_SPI2_Init>
  MX_SPI3_Init();
 801620e:	f001 f99b 	bl	8017548 <MX_SPI3_Init>
  MX_TIM1_Init();
 8016212:	f001 f9d1 	bl	80175b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8016216:	f001 fa45 	bl	80176a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 801621a:	f001 fa91 	bl	8017740 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 801621e:	f00c f803 	bl	8022228 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8016222:	f001 fb1b 	bl	801785c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  Init_LCD();
 8016226:	f7fb fd99 	bl	8011d5c <Init_LCD>
  Init_Touch();
 801622a:	f7ff ff9f 	bl	801616c <Init_Touch>

  SetColor(BLK, WHT);
 801622e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016232:	2000      	movs	r0, #0
 8016234:	f7f7 fc86 	bl	800db44 <SetColor>

  DispStr8x14(8, 90, PRN, "         Oscilloscope              ");
 8016238:	4bb3      	ldr	r3, [pc, #716]	; (8016508 <main+0x328>)
 801623a:	2200      	movs	r2, #0
 801623c:	215a      	movs	r1, #90	; 0x5a
 801623e:	2008      	movs	r0, #8
 8016240:	f7f7 fc28 	bl	800da94 <DispStr8x14>
  DispStr8x14(8+22*8, 90, PRN, APP_VERSION);
 8016244:	4bb1      	ldr	r3, [pc, #708]	; (801650c <main+0x32c>)
 8016246:	2200      	movs	r2, #0
 8016248:	215a      	movs	r1, #90	; 0x5a
 801624a:	20b8      	movs	r0, #184	; 0xb8
 801624c:	f7f7 fc22 	bl	800da94 <DispStr8x14>
  DispStr8x14(8, 70, PRN, "        System Initializing...       ");
 8016250:	4baf      	ldr	r3, [pc, #700]	; (8016510 <main+0x330>)
 8016252:	2200      	movs	r2, #0
 8016254:	2146      	movs	r1, #70	; 0x46
 8016256:	2008      	movs	r0, #8
 8016258:	f7f7 fc1c 	bl	800da94 <DispStr8x14>

  HAL_Delay(1000);
 801625c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016260:	f002 f85c 	bl	801831c <HAL_Delay>

//=============================check callibration׼===========================
  Read_CalFlag();
 8016264:	f7fa ffe2 	bl	801122c <Read_CalFlag>

  if(Cal_Flag == 1)
 8016268:	4baa      	ldr	r3, [pc, #680]	; (8016514 <main+0x334>)
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	2b01      	cmp	r3, #1
 801626e:	d10f      	bne.n	8016290 <main+0xb0>
  {
	  Cal_Flag = 0;
 8016270:	4ba8      	ldr	r3, [pc, #672]	; (8016514 <main+0x334>)
 8016272:	2200      	movs	r2, #0
 8016274:	701a      	strb	r2, [r3, #0]
	  SetColor(BLK, WHT);
 8016276:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801627a:	2000      	movs	r0, #0
 801627c:	f7f7 fc62 	bl	800db44 <SetColor>
	  Zero_Align();                              //set zero
 8016280:	f7fe fdaa 	bl	8014dd8 <Zero_Align>
	  Restore();                                 //restore list
 8016284:	f7fb f9dc 	bl	8011640 <Restore>
	  Save_Parameter();                          //save list
 8016288:	f7fa fff8 	bl	801127c <Save_Parameter>
	  Save_Kpg();
 801628c:	f7fb f920 	bl	80114d0 <Save_Kpg>
  }
  Read_Kpg();
 8016290:	f7fb f994 	bl	80115bc <Read_Kpg>
  Read_Parameter();
 8016294:	f7fb f88e 	bl	80113b4 <Read_Parameter>
  File_Num();
 8016298:	f7f9 fcd4 	bl	800fc44 <File_Num>
  memcpy(Data, DEMO, 310);
 801629c:	f44f 729b 	mov.w	r2, #310	; 0x136
 80162a0:	499d      	ldr	r1, [pc, #628]	; (8016518 <main+0x338>)
 80162a2:	489e      	ldr	r0, [pc, #632]	; (801651c <main+0x33c>)
 80162a4:	f00c fd5e 	bl	8022d64 <memcpy>

  LCD_ClrScrn(GRY);
 80162a8:	f643 10e7 	movw	r0, #14823	; 0x39e7
 80162ac:	f7fb fe6c 	bl	8011f88 <LCD_ClrScrn>
  Update_Title();
 80162b0:	f7fc f80c 	bl	80122cc <Update_Title>

  List[SMPL_DPTH].Flg |= UPD;
 80162b4:	4b9a      	ldr	r3, [pc, #616]	; (8016520 <main+0x340>)
 80162b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80162ba:	f043 0320 	orr.w	r3, r3, #32
 80162be:	b2da      	uxtb	r2, r3
 80162c0:	4b97      	ldr	r3, [pc, #604]	; (8016520 <main+0x340>)
 80162c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  StdBy_Time = List[STANDBY].Val * MIN_UNIT;
 80162c6:	4b96      	ldr	r3, [pc, #600]	; (8016520 <main+0x340>)
 80162c8:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	461a      	mov	r2, r3
 80162d0:	0112      	lsls	r2, r2, #4
 80162d2:	1ad3      	subs	r3, r2, r3
 80162d4:	009b      	lsls	r3, r3, #2
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	b21a      	sxth	r2, r3
 80162da:	4b92      	ldr	r3, [pc, #584]	; (8016524 <main+0x344>)
 80162dc:	801a      	strh	r2, [r3, #0]

  // Start timer
  HAL_TIM_Base_Start_IT(&htim3);
 80162de:	4892      	ldr	r0, [pc, #584]	; (8016528 <main+0x348>)
 80162e0:	f006 fef4 	bl	801d0cc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 80162e4:	4b8e      	ldr	r3, [pc, #568]	; (8016520 <main+0x340>)
 80162e6:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d007      	beq.n	80162fe <main+0x11e>
 80162ee:	4b8d      	ldr	r3, [pc, #564]	; (8016524 <main+0x344>)
 80162f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d102      	bne.n	80162fe <main+0x11e>
	    {
	      StdBy_Flag = 1;
 80162f8:	4b8c      	ldr	r3, [pc, #560]	; (801652c <main+0x34c>)
 80162fa:	2201      	movs	r2, #1
 80162fc:	701a      	strb	r2, [r3, #0]
	    }

	    Update_Detail();
 80162fe:	f7fc ff51 	bl	80131a4 <Update_Detail>
	    Update_Blink();
 8016302:	f7fc f837 	bl	8012374 <Update_Blink>
	    WaveProcess();
 8016306:	f7fe fe5d 	bl	8014fc4 <WaveProcess>
	    DrawWindow(WaveBuf, ParamTab);
 801630a:	4989      	ldr	r1, [pc, #548]	; (8016530 <main+0x350>)
 801630c:	4889      	ldr	r0, [pc, #548]	; (8016534 <main+0x354>)
 801630e:	f7f7 f99d 	bl	800d64c <DrawWindow>

	   if(TIM_BASE_Val!=0)
 8016312:	4b89      	ldr	r3, [pc, #548]	; (8016538 <main+0x358>)
 8016314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d01c      	beq.n	8016356 <main+0x176>
	    {
	      List[TIM_BASE].Val=TIM_BASE_Val;
 801631c:	4b86      	ldr	r3, [pc, #536]	; (8016538 <main+0x358>)
 801631e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016322:	4b7f      	ldr	r3, [pc, #508]	; (8016520 <main+0x340>)
 8016324:	879a      	strh	r2, [r3, #60]	; 0x3c
	      List[TIM_BASE].Flg |= UPD;
 8016326:	4b7e      	ldr	r3, [pc, #504]	; (8016520 <main+0x340>)
 8016328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801632c:	f043 0320 	orr.w	r3, r3, #32
 8016330:	b2da      	uxtb	r2, r3
 8016332:	4b7b      	ldr	r3, [pc, #492]	; (8016520 <main+0x340>)
 8016334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	      TIM_BASE_Val=Current;
 8016338:	4b80      	ldr	r3, [pc, #512]	; (801653c <main+0x35c>)
 801633a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801633e:	4b7e      	ldr	r3, [pc, #504]	; (8016538 <main+0x358>)
 8016340:	801a      	strh	r2, [r3, #0]
	      Update_Title();
 8016342:	f7fb ffc3 	bl	80122cc <Update_Title>
	      Current=TIM_BASE_Val;
 8016346:	4b7c      	ldr	r3, [pc, #496]	; (8016538 <main+0x358>)
 8016348:	f9b3 2000 	ldrsh.w	r2, [r3]
 801634c:	4b7b      	ldr	r3, [pc, #492]	; (801653c <main+0x35c>)
 801634e:	801a      	strh	r2, [r3, #0]
	      TIM_BASE_Val=0;
 8016350:	4b79      	ldr	r3, [pc, #484]	; (8016538 <main+0x358>)
 8016352:	2200      	movs	r2, #0
 8016354:	801a      	strh	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(Key_Buffer != 0)
 8016356:	4b7a      	ldr	r3, [pc, #488]	; (8016540 <main+0x360>)
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	b2db      	uxtb	r3, r3
 801635c:	2b00      	cmp	r3, #0
 801635e:	d0c1      	beq.n	80162e4 <main+0x104>
	    {
	      StdBy_Flag = 0;
 8016360:	4b72      	ldr	r3, [pc, #456]	; (801652c <main+0x34c>)
 8016362:	2200      	movs	r2, #0
 8016364:	701a      	strb	r2, [r3, #0]
	      PopupCnt = 10;                  // �ް���ʱ�˵���ά����ʾ 10��
 8016366:	4b77      	ldr	r3, [pc, #476]	; (8016544 <main+0x364>)
 8016368:	220a      	movs	r2, #10
 801636a:	801a      	strh	r2, [r3, #0]
	      List[MenuNow[Current]].Flg |= UPD;
 801636c:	4b73      	ldr	r3, [pc, #460]	; (801653c <main+0x35c>)
 801636e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016372:	461a      	mov	r2, r3
 8016374:	4b74      	ldr	r3, [pc, #464]	; (8016548 <main+0x368>)
 8016376:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801637a:	4a69      	ldr	r2, [pc, #420]	; (8016520 <main+0x340>)
 801637c:	00db      	lsls	r3, r3, #3
 801637e:	4413      	add	r3, r2
 8016380:	799b      	ldrb	r3, [r3, #6]
 8016382:	4a6e      	ldr	r2, [pc, #440]	; (801653c <main+0x35c>)
 8016384:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016388:	4611      	mov	r1, r2
 801638a:	4a6f      	ldr	r2, [pc, #444]	; (8016548 <main+0x368>)
 801638c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016390:	4610      	mov	r0, r2
 8016392:	f043 0320 	orr.w	r3, r3, #32
 8016396:	b2d9      	uxtb	r1, r3
 8016398:	4a61      	ldr	r2, [pc, #388]	; (8016520 <main+0x340>)
 801639a:	00c3      	lsls	r3, r0, #3
 801639c:	4413      	add	r3, r2
 801639e:	460a      	mov	r2, r1
 80163a0:	719a      	strb	r2, [r3, #6]

	      switch (Key_Buffer)
 80163a2:	4b67      	ldr	r3, [pc, #412]	; (8016540 <main+0x360>)
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	3b01      	subs	r3, #1
 80163aa:	2b09      	cmp	r3, #9
 80163ac:	f200 86fc 	bhi.w	80171a8 <main+0xfc8>
 80163b0:	a201      	add	r2, pc, #4	; (adr r2, 80163b8 <main+0x1d8>)
 80163b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163b6:	bf00      	nop
 80163b8:	08016429 	.word	0x08016429
 80163bc:	08016733 	.word	0x08016733
 80163c0:	0801687d 	.word	0x0801687d
 80163c4:	0801692b 	.word	0x0801692b
 80163c8:	080169c7 	.word	0x080169c7
 80163cc:	08016d85 	.word	0x08016d85
 80163d0:	080171a9 	.word	0x080171a9
 80163d4:	08016403 	.word	0x08016403
 80163d8:	080163e1 	.word	0x080163e1
 80163dc:	0801671f 	.word	0x0801671f
	      {
	     case KEYCODE_MEM:
	         i = Save_Bmp(List[SAVE_BMP].Val);
 80163e0:	4b4f      	ldr	r3, [pc, #316]	; (8016520 <main+0x340>)
 80163e2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7f9 ff4e 	bl	8010288 <Save_Bmp>
 80163ec:	4603      	mov	r3, r0
 80163ee:	80fb      	strh	r3, [r7, #6]
	         DispFileInfo(i);
 80163f0:	88fb      	ldrh	r3, [r7, #6]
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7fe f9f7 	bl	80147e8 <DispFileInfo>
	         DispBMPInfo();
 80163fa:	f7fe fa25 	bl	8014848 <DispBMPInfo>
	        break;
 80163fe:	f000 bed3 	b.w	80171a8 <main+0xfc8>

	     case KEYCODE_ACT:
	       SAVE_FLAG=0;
 8016402:	2300      	movs	r3, #0
 8016404:	717b      	strb	r3, [r7, #5]
	       if(PopType & DAILOG_POP) Close_Pop();
 8016406:	4b51      	ldr	r3, [pc, #324]	; (801654c <main+0x36c>)
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	f003 0304 	and.w	r3, r3, #4
 801640e:	2b00      	cmp	r3, #0
 8016410:	d003      	beq.n	801641a <main+0x23a>
 8016412:	f7f8 f91b 	bl	800e64c <Close_Pop>
	       else {
	         Dialog_Pop("Save All ParamTab?");
	         Pop_Num = 1;
	       }
	       break;
 8016416:	f000 bec7 	b.w	80171a8 <main+0xfc8>
	         Dialog_Pop("Save All ParamTab?");
 801641a:	484d      	ldr	r0, [pc, #308]	; (8016550 <main+0x370>)
 801641c:	f7f8 f942 	bl	800e6a4 <Dialog_Pop>
	         Pop_Num = 1;
 8016420:	2301      	movs	r3, #1
 8016422:	713b      	strb	r3, [r7, #4]
	       break;
 8016424:	f000 bec0 	b.w	80171a8 <main+0xfc8>

	     case KEYCODE_PLAY:
	       if((Current == ST)&&(Cal_Flag==0))
 8016428:	4b44      	ldr	r3, [pc, #272]	; (801653c <main+0x35c>)
 801642a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801642e:	2b07      	cmp	r3, #7
 8016430:	d151      	bne.n	80164d6 <main+0x2f6>
 8016432:	4b38      	ldr	r3, [pc, #224]	; (8016514 <main+0x334>)
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d14d      	bne.n	80164d6 <main+0x2f6>
	       {
	         if(PopType & DAILOG_POP){
 801643a:	4b44      	ldr	r3, [pc, #272]	; (801654c <main+0x36c>)
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	f003 0304 	and.w	r3, r3, #4
 8016442:	2b00      	cmp	r3, #0
 8016444:	d00e      	beq.n	8016464 <main+0x284>
	           if(Pop_Num == 1){
 8016446:	793b      	ldrb	r3, [r7, #4]
 8016448:	2b01      	cmp	r3, #1
 801644a:	d105      	bne.n	8016458 <main+0x278>
	             Save_Parameter();
 801644c:	f7fa ff16 	bl	801127c <Save_Parameter>
	             Close_Pop();
 8016450:	f7f8 f8fc 	bl	800e64c <Close_Pop>
	           Zero_Align();
	           Update_Proc_All();
	           Close_Pop();
	           CalSave_Pop("Save Cal ParamTab?");
	         }
	         break;
 8016454:	f000 be99 	b.w	801718a <main+0xfaa>
	             Close_Pop();
 8016458:	f7f8 f8f8 	bl	800e64c <Close_Pop>
	             List_Pop();
 801645c:	f7f8 f90c 	bl	800e678 <List_Pop>
	         break;
 8016460:	f000 be93 	b.w	801718a <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==RESTORE )) {
 8016464:	4b39      	ldr	r3, [pc, #228]	; (801654c <main+0x36c>)
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	f003 0302 	and.w	r3, r3, #2
 801646c:	2b00      	cmp	r3, #0
 801646e:	d00e      	beq.n	801648e <main+0x2ae>
 8016470:	4b35      	ldr	r3, [pc, #212]	; (8016548 <main+0x368>)
 8016472:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016476:	2b28      	cmp	r3, #40	; 0x28
 8016478:	d109      	bne.n	801648e <main+0x2ae>
	           Restore_CalPar();
 801647a:	f7fb f94b 	bl	8011714 <Restore_CalPar>
	           Dialog_Pop("Save All ParamTab?");
 801647e:	4834      	ldr	r0, [pc, #208]	; (8016550 <main+0x370>)
 8016480:	f7f8 f910 	bl	800e6a4 <Dialog_Pop>
	           Cal_Flag = 1;
 8016484:	4b23      	ldr	r3, [pc, #140]	; (8016514 <main+0x334>)
 8016486:	2201      	movs	r2, #1
 8016488:	701a      	strb	r2, [r3, #0]
	         break;
 801648a:	f000 be7e 	b.w	801718a <main+0xfaa>
	         else if((PopType & LIST_POP) && (MenuNow[ST]==AUTO_CAL )) {
 801648e:	4b2f      	ldr	r3, [pc, #188]	; (801654c <main+0x36c>)
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	f003 0302 	and.w	r3, r3, #2
 8016496:	2b00      	cmp	r3, #0
 8016498:	f000 8677 	beq.w	801718a <main+0xfaa>
 801649c:	4b2a      	ldr	r3, [pc, #168]	; (8016548 <main+0x368>)
 801649e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80164a2:	2b27      	cmp	r3, #39	; 0x27
 80164a4:	f040 8671 	bne.w	801718a <main+0xfaa>
	           Close_Pop();
 80164a8:	f7f8 f8d0 	bl	800e64c <Close_Pop>
	           Calibrate_Pop("Waiting for Calibration...");
 80164ac:	4829      	ldr	r0, [pc, #164]	; (8016554 <main+0x374>)
 80164ae:	f7f8 f95f 	bl	800e770 <Calibrate_Pop>
	           Cal_Flag = 1;
 80164b2:	4b18      	ldr	r3, [pc, #96]	; (8016514 <main+0x334>)
 80164b4:	2201      	movs	r2, #1
 80164b6:	701a      	strb	r2, [r3, #0]
	           DrawWindow(WaveBuf, ParamTab);
 80164b8:	491d      	ldr	r1, [pc, #116]	; (8016530 <main+0x350>)
 80164ba:	481e      	ldr	r0, [pc, #120]	; (8016534 <main+0x354>)
 80164bc:	f7f7 f8c6 	bl	800d64c <DrawWindow>
	           Zero_Align();
 80164c0:	f7fe fc8a 	bl	8014dd8 <Zero_Align>
	           Update_Proc_All();
 80164c4:	f7fe fa06 	bl	80148d4 <Update_Proc_All>
	           Close_Pop();
 80164c8:	f7f8 f8c0 	bl	800e64c <Close_Pop>
	           CalSave_Pop("Save Cal ParamTab?");
 80164cc:	4822      	ldr	r0, [pc, #136]	; (8016558 <main+0x378>)
 80164ce:	f7f8 f985 	bl	800e7dc <CalSave_Pop>
	         break;
 80164d2:	f000 be5a 	b.w	801718a <main+0xfaa>
	       }
	       else if((Current == ST)&&(Cal_Flag==1)){
 80164d6:	4b19      	ldr	r3, [pc, #100]	; (801653c <main+0x35c>)
 80164d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164dc:	2b07      	cmp	r3, #7
 80164de:	d13d      	bne.n	801655c <main+0x37c>
 80164e0:	4b0c      	ldr	r3, [pc, #48]	; (8016514 <main+0x334>)
 80164e2:	781b      	ldrb	r3, [r3, #0]
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	d139      	bne.n	801655c <main+0x37c>
	         if(PopType & DAILOG_POP){
 80164e8:	4b18      	ldr	r3, [pc, #96]	; (801654c <main+0x36c>)
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	f003 0304 	and.w	r3, r3, #4
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f000 864c 	beq.w	801718e <main+0xfae>
	           Save_Kpg();
 80164f6:	f7fa ffeb 	bl	80114d0 <Save_Kpg>
	           Close_Pop();
 80164fa:	f7f8 f8a7 	bl	800e64c <Close_Pop>
	           Cal_Flag = 0;
 80164fe:	4b05      	ldr	r3, [pc, #20]	; (8016514 <main+0x334>)
 8016500:	2200      	movs	r2, #0
 8016502:	701a      	strb	r2, [r3, #0]
	         }
	         break;
 8016504:	f000 be43 	b.w	801718e <main+0xfae>
 8016508:	080009f4 	.word	0x080009f4
 801650c:	20000580 	.word	0x20000580
 8016510:	08000a18 	.word	0x08000a18
 8016514:	200001b4 	.word	0x200001b4
 8016518:	08000b58 	.word	0x08000b58
 801651c:	20000008 	.word	0x20000008
 8016520:	20000298 	.word	0x20000298
 8016524:	20000798 	.word	0x20000798
 8016528:	200069d0 	.word	0x200069d0
 801652c:	2000079e 	.word	0x2000079e
 8016530:	20000140 	.word	0x20000140
 8016534:	20000c00 	.word	0x20000c00
 8016538:	2000280c 	.word	0x2000280c
 801653c:	2000079a 	.word	0x2000079a
 8016540:	2000077d 	.word	0x2000077d
 8016544:	20000000 	.word	0x20000000
 8016548:	20000538 	.word	0x20000538
 801654c:	2000078a 	.word	0x2000078a
 8016550:	08000a40 	.word	0x08000a40
 8016554:	08000a54 	.word	0x08000a54
 8016558:	08000a70 	.word	0x08000a70
	       }

	       if ((Current == FN)&&(PopType & LIST_POP)){
 801655c:	4bbc      	ldr	r3, [pc, #752]	; (8016850 <main+0x670>)
 801655e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016562:	2b05      	cmp	r3, #5
 8016564:	d177      	bne.n	8016656 <main+0x476>
 8016566:	4bbb      	ldr	r3, [pc, #748]	; (8016854 <main+0x674>)
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	f003 0302 	and.w	r3, r3, #2
 801656e:	2b00      	cmp	r3, #0
 8016570:	d071      	beq.n	8016656 <main+0x476>
	         i = 0;
 8016572:	2300      	movs	r3, #0
 8016574:	80fb      	strh	r3, [r7, #6]
	         {
	           if(SAVE_FLAG==KEYCODE_MEM)Close_Pop();
 8016576:	797b      	ldrb	r3, [r7, #5]
 8016578:	2b09      	cmp	r3, #9
 801657a:	d101      	bne.n	8016580 <main+0x3a0>
 801657c:	f7f8 f866 	bl	800e64c <Close_Pop>
	           if(MenuNow[FN] == SAVE_BMP) i = Save_Bmp(List[SAVE_BMP].Val);
 8016580:	4bb5      	ldr	r3, [pc, #724]	; (8016858 <main+0x678>)
 8016582:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016586:	2b1d      	cmp	r3, #29
 8016588:	d107      	bne.n	801659a <main+0x3ba>
 801658a:	4bb4      	ldr	r3, [pc, #720]	; (801685c <main+0x67c>)
 801658c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 8016590:	4618      	mov	r0, r3
 8016592:	f7f9 fe79 	bl	8010288 <Save_Bmp>
 8016596:	4603      	mov	r3, r0
 8016598:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_DAT) i = Save_Dat(List[SAVE_DAT].Val);
 801659a:	4baf      	ldr	r3, [pc, #700]	; (8016858 <main+0x678>)
 801659c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80165a0:	2b1e      	cmp	r3, #30
 80165a2:	d107      	bne.n	80165b4 <main+0x3d4>
 80165a4:	4bad      	ldr	r3, [pc, #692]	; (801685c <main+0x67c>)
 80165a6:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f9 fd2c 	bl	8010008 <Save_Dat>
 80165b0:	4603      	mov	r3, r0
 80165b2:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_BUF) i = Save_Buf(List[SAVE_BUF].Val);
 80165b4:	4ba8      	ldr	r3, [pc, #672]	; (8016858 <main+0x678>)
 80165b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80165ba:	2b1f      	cmp	r3, #31
 80165bc:	d107      	bne.n	80165ce <main+0x3ee>
 80165be:	4ba7      	ldr	r3, [pc, #668]	; (801685c <main+0x67c>)
 80165c0:	f9b3 30fc 	ldrsh.w	r3, [r3, #252]	; 0xfc
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7f9 fc49 	bl	800fe5c <Save_Buf>
 80165ca:	4603      	mov	r3, r0
 80165cc:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_CSV) i = Save_Csv(List[SAVE_CSV].Val);
 80165ce:	4ba2      	ldr	r3, [pc, #648]	; (8016858 <main+0x678>)
 80165d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80165d4:	2b20      	cmp	r3, #32
 80165d6:	d107      	bne.n	80165e8 <main+0x408>
 80165d8:	4ba0      	ldr	r3, [pc, #640]	; (801685c <main+0x67c>)
 80165da:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 80165de:	4618      	mov	r0, r3
 80165e0:	f7f9 ffbc 	bl	801055c <Save_Csv>
 80165e4:	4603      	mov	r3, r0
 80165e6:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == SAVE_SVG) i = Save_Svg(List[SAVE_SVG].Val);
 80165e8:	4b9b      	ldr	r3, [pc, #620]	; (8016858 <main+0x678>)
 80165ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80165ee:	2b21      	cmp	r3, #33	; 0x21
 80165f0:	d107      	bne.n	8016602 <main+0x422>
 80165f2:	4b9a      	ldr	r3, [pc, #616]	; (801685c <main+0x67c>)
 80165f4:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	; 0x10c
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7fa f9d5 	bl	80109a8 <Save_Svg>
 80165fe:	4603      	mov	r3, r0
 8016600:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_DAT) i = Load_Dat(List[LOAD_DAT].Val);
 8016602:	4b95      	ldr	r3, [pc, #596]	; (8016858 <main+0x678>)
 8016604:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016608:	2b22      	cmp	r3, #34	; 0x22
 801660a:	d107      	bne.n	801661c <main+0x43c>
 801660c:	4b93      	ldr	r3, [pc, #588]	; (801685c <main+0x67c>)
 801660e:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	; 0x114
 8016612:	4618      	mov	r0, r3
 8016614:	f7f9 fd8c 	bl	8010130 <Load_Dat>
 8016618:	4603      	mov	r3, r0
 801661a:	80fb      	strh	r3, [r7, #6]
	           if(MenuNow[FN] == LOAD_BUF) i = Load_Buf(List[LOAD_BUF].Val);
 801661c:	4b8e      	ldr	r3, [pc, #568]	; (8016858 <main+0x678>)
 801661e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016622:	2b23      	cmp	r3, #35	; 0x23
 8016624:	d107      	bne.n	8016636 <main+0x456>
 8016626:	4b8d      	ldr	r3, [pc, #564]	; (801685c <main+0x67c>)
 8016628:	f9b3 311c 	ldrsh.w	r3, [r3, #284]	; 0x11c
 801662c:	4618      	mov	r0, r3
 801662e:	f7f9 fb37 	bl	800fca0 <Load_Buf>
 8016632:	4603      	mov	r3, r0
 8016634:	80fb      	strh	r3, [r7, #6]
	           SAVE_FLAG = 0;
 8016636:	2300      	movs	r3, #0
 8016638:	717b      	strb	r3, [r7, #5]
	         }
	         DispFileInfo(i);
 801663a:	88fb      	ldrh	r3, [r7, #6]
 801663c:	b2db      	uxtb	r3, r3
 801663e:	4618      	mov	r0, r3
 8016640:	f7fe f8d2 	bl	80147e8 <DispFileInfo>

	         if(PopType & DAILOG_POP)  Close_Pop();
 8016644:	4b83      	ldr	r3, [pc, #524]	; (8016854 <main+0x674>)
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	f003 0304 	and.w	r3, r3, #4
 801664c:	2b00      	cmp	r3, #0
 801664e:	d062      	beq.n	8016716 <main+0x536>
 8016650:	f7f7 fffc 	bl	800e64c <Close_Pop>
 8016654:	e05f      	b.n	8016716 <main+0x536>

	       }
	       else if((PopType & DAILOG_POP ) &&(SAVE_FLAG!=KEYCODE_MEM)){
 8016656:	4b7f      	ldr	r3, [pc, #508]	; (8016854 <main+0x674>)
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f003 0304 	and.w	r3, r3, #4
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00b      	beq.n	801667a <main+0x49a>
 8016662:	797b      	ldrb	r3, [r7, #5]
 8016664:	2b09      	cmp	r3, #9
 8016666:	d008      	beq.n	801667a <main+0x49a>
	         Save_Parameter();
 8016668:	f7fa fe08 	bl	801127c <Save_Parameter>
	         Cal_Flag = 0;
 801666c:	4b7c      	ldr	r3, [pc, #496]	; (8016860 <main+0x680>)
 801666e:	2200      	movs	r2, #0
 8016670:	701a      	strb	r2, [r3, #0]
	         Close_Pop();
 8016672:	f7f7 ffeb 	bl	800e64c <Close_Pop>
	         break;
 8016676:	f000 bd97 	b.w	80171a8 <main+0xfc8>
	       }
	       else {
	          if(Status & STOP){
 801667a:	4b7a      	ldr	r3, [pc, #488]	; (8016864 <main+0x684>)
 801667c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016680:	b29b      	uxth	r3, r3
 8016682:	f003 0301 	and.w	r3, r3, #1
 8016686:	2b00      	cmp	r3, #0
 8016688:	d02e      	beq.n	80166e8 <main+0x508>
	            if(Status & LOADM )Status &= ~LOADM;
 801668a:	4b76      	ldr	r3, [pc, #472]	; (8016864 <main+0x684>)
 801668c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016690:	b29b      	uxth	r3, r3
 8016692:	f003 0310 	and.w	r3, r3, #16
 8016696:	2b00      	cmp	r3, #0
 8016698:	d007      	beq.n	80166aa <main+0x4ca>
 801669a:	4b72      	ldr	r3, [pc, #456]	; (8016864 <main+0x684>)
 801669c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166a0:	f023 0310 	bic.w	r3, r3, #16
 80166a4:	b21a      	sxth	r2, r3
 80166a6:	4b6f      	ldr	r3, [pc, #444]	; (8016864 <main+0x684>)
 80166a8:	801a      	strh	r2, [r3, #0]
	            Status &= ~STOP;     // ��������״̬
 80166aa:	4b6e      	ldr	r3, [pc, #440]	; (8016864 <main+0x684>)
 80166ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166b0:	f023 0301 	bic.w	r3, r3, #1
 80166b4:	b21a      	sxth	r2, r3
 80166b6:	4b6b      	ldr	r3, [pc, #428]	; (8016864 <main+0x684>)
 80166b8:	801a      	strh	r2, [r3, #0]
	            if(List[SYNCMODE].Val==SINGL) ADC_Start();
 80166ba:	4b68      	ldr	r3, [pc, #416]	; (801685c <main+0x67c>)
 80166bc:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80166c0:	2b04      	cmp	r3, #4
 80166c2:	d101      	bne.n	80166c8 <main+0x4e8>
 80166c4:	f7f6 f812 	bl	800c6ec <ADC_Start>
	            if(List[SYNCMODE].Val==NORM)  ADC_Start();
 80166c8:	4b64      	ldr	r3, [pc, #400]	; (801685c <main+0x67c>)
 80166ca:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 80166ce:	2b03      	cmp	r3, #3
 80166d0:	d101      	bne.n	80166d6 <main+0x4f6>
 80166d2:	f7f6 f80b 	bl	800c6ec <ADC_Start>
	            Norm_Clr = 1;
 80166d6:	4b64      	ldr	r3, [pc, #400]	; (8016868 <main+0x688>)
 80166d8:	2201      	movs	r2, #1
 80166da:	701a      	strb	r2, [r3, #0]
	            SNGL_Kflag = 1;
 80166dc:	4b63      	ldr	r3, [pc, #396]	; (801686c <main+0x68c>)
 80166de:	2201      	movs	r2, #1
 80166e0:	701a      	strb	r2, [r3, #0]
	            Update_Proc_All();
 80166e2:	f7fe f8f7 	bl	80148d4 <Update_Proc_All>
 80166e6:	e016      	b.n	8016716 <main+0x536>

	            if(*(short*)F_Sector==0xaa55)Restore_Scene();

	          }
	          else {
	            Status |=  STOP;     // ������ͣ״̬
 80166e8:	4b5e      	ldr	r3, [pc, #376]	; (8016864 <main+0x684>)
 80166ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80166ee:	f043 0301 	orr.w	r3, r3, #1
 80166f2:	b21a      	sxth	r2, r3
 80166f4:	4b5b      	ldr	r3, [pc, #364]	; (8016864 <main+0x684>)
 80166f6:	801a      	strh	r2, [r3, #0]
	            Ch1_Posi = List[V0_POSI].Val;
 80166f8:	4b58      	ldr	r3, [pc, #352]	; (801685c <main+0x67c>)
 80166fa:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80166fe:	4b5c      	ldr	r3, [pc, #368]	; (8016870 <main+0x690>)
 8016700:	801a      	strh	r2, [r3, #0]
	            Ch2_Posi = List[EXT_POSI].Val;
 8016702:	4b56      	ldr	r3, [pc, #344]	; (801685c <main+0x67c>)
 8016704:	f9b3 20dc 	ldrsh.w	r2, [r3, #220]	; 0xdc
 8016708:	4b5a      	ldr	r3, [pc, #360]	; (8016874 <main+0x694>)
 801670a:	801a      	strh	r2, [r3, #0]
	            Tri_Posi = List[THRESHOLD].Val;
 801670c:	4b53      	ldr	r3, [pc, #332]	; (801685c <main+0x67c>)
 801670e:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 8016712:	4b59      	ldr	r3, [pc, #356]	; (8016878 <main+0x698>)
 8016714:	801a      	strh	r2, [r3, #0]
	            Save_Bmp(List[SAVE_BMP].Val);
	            List[SAVE_BMP].Val++;
	          #endif
	          }
	        }
	        DispStatus();            // ��ʾ����״̬
 8016716:	f7fd fdd1 	bl	80142bc <DispStatus>
 	       break;
 801671a:	f000 bd45 	b.w	80171a8 <main+0xfc8>

	      case KEYCODE_D_MANU:
	        if(List[FITTRIGG].Val)
 801671e:	4b4f      	ldr	r3, [pc, #316]	; (801685c <main+0x67c>)
 8016720:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8016724:	2b00      	cmp	r3, #0
 8016726:	f000 8534 	beq.w	8017192 <main+0xfb2>
	        {
	          Auto_Fit();
 801672a:	f7ff f92d 	bl	8015988 <Auto_Fit>
	        }
	        break;
 801672e:	f000 bd30 	b.w	8017192 <main+0xfb2>

	      case KEYCODE_MANU:
	        if(!(PopType & LIST_POP)){
 8016732:	4b48      	ldr	r3, [pc, #288]	; (8016854 <main+0x674>)
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	f003 0302 	and.w	r3, r3, #2
 801673a:	2b00      	cmp	r3, #0
 801673c:	d111      	bne.n	8016762 <main+0x582>
	            if(Cal_Flag){
 801673e:	4b48      	ldr	r3, [pc, #288]	; (8016860 <main+0x680>)
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d006      	beq.n	8016754 <main+0x574>
	              Cal_Flag = 0;
 8016746:	4b46      	ldr	r3, [pc, #280]	; (8016860 <main+0x680>)
 8016748:	2200      	movs	r2, #0
 801674a:	701a      	strb	r2, [r3, #0]
	              Close_Pop();
 801674c:	f7f7 ff7e 	bl	800e64c <Close_Pop>
	          // ------------ �ָ���ʾ��Ϣ��ʾ���Ҷ�ԭ����ʾ��Ϣ ------------
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
	        }
	        break;
 8016750:	f000 bd2a 	b.w	80171a8 <main+0xfc8>
	              Cal_Flag = 0;
 8016754:	4b42      	ldr	r3, [pc, #264]	; (8016860 <main+0x680>)
 8016756:	2200      	movs	r2, #0
 8016758:	701a      	strb	r2, [r3, #0]
	              List_Pop(); // �˵����ر�ʱ, �򿪲˵���
 801675a:	f7f7 ff8d 	bl	800e678 <List_Pop>
	        break;
 801675e:	f000 bd23 	b.w	80171a8 <main+0xfc8>
	          Close_Pop();                // �˵����Ѵ�ʱ, �رղ˵���
 8016762:	f7f7 ff73 	bl	800e64c <Close_Pop>
	          if(Current == XN)      List[T1_POSI   ].Flg |= UPD;
 8016766:	4b3a      	ldr	r3, [pc, #232]	; (8016850 <main+0x670>)
 8016768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801676c:	2b01      	cmp	r3, #1
 801676e:	d109      	bne.n	8016784 <main+0x5a4>
 8016770:	4b3a      	ldr	r3, [pc, #232]	; (801685c <main+0x67c>)
 8016772:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016776:	f043 0320 	orr.w	r3, r3, #32
 801677a:	b2da      	uxtb	r2, r3
 801677c:	4b37      	ldr	r3, [pc, #220]	; (801685c <main+0x67c>)
 801677e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8016782:	e021      	b.n	80167c8 <main+0x5e8>
	          else if(Current == YN) List[V1_POSI   ].Flg |= UPD;
 8016784:	4b32      	ldr	r3, [pc, #200]	; (8016850 <main+0x670>)
 8016786:	f9b3 3000 	ldrsh.w	r3, [r3]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d109      	bne.n	80167a2 <main+0x5c2>
 801678e:	4b33      	ldr	r3, [pc, #204]	; (801685c <main+0x67c>)
 8016790:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8016794:	f043 0320 	orr.w	r3, r3, #32
 8016798:	b2da      	uxtb	r2, r3
 801679a:	4b30      	ldr	r3, [pc, #192]	; (801685c <main+0x67c>)
 801679c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80167a0:	e012      	b.n	80167c8 <main+0x5e8>
	          else                   List[MenuNow[SN]].Flg |= UPD;
 80167a2:	4b2d      	ldr	r3, [pc, #180]	; (8016858 <main+0x678>)
 80167a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80167a8:	4a2c      	ldr	r2, [pc, #176]	; (801685c <main+0x67c>)
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	4413      	add	r3, r2
 80167ae:	799b      	ldrb	r3, [r3, #6]
 80167b0:	4a29      	ldr	r2, [pc, #164]	; (8016858 <main+0x678>)
 80167b2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80167b6:	4610      	mov	r0, r2
 80167b8:	f043 0320 	orr.w	r3, r3, #32
 80167bc:	b2d9      	uxtb	r1, r3
 80167be:	4a27      	ldr	r2, [pc, #156]	; (801685c <main+0x67c>)
 80167c0:	00c3      	lsls	r3, r0, #3
 80167c2:	4413      	add	r3, r2
 80167c4:	460a      	mov	r2, r1
 80167c6:	719a      	strb	r2, [r3, #6]
	          if(MenuNow[Current] == SMPL_DPTH) List[SMPL_DPTH].Flg  |= UPD; // ������ȸ�����ʾ
 80167c8:	4b21      	ldr	r3, [pc, #132]	; (8016850 <main+0x670>)
 80167ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167ce:	461a      	mov	r2, r3
 80167d0:	4b21      	ldr	r3, [pc, #132]	; (8016858 <main+0x678>)
 80167d2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80167d6:	2b09      	cmp	r3, #9
 80167d8:	d10a      	bne.n	80167f0 <main+0x610>
 80167da:	4b20      	ldr	r3, [pc, #128]	; (801685c <main+0x67c>)
 80167dc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80167e0:	f043 0320 	orr.w	r3, r3, #32
 80167e4:	b2da      	uxtb	r2, r3
 80167e6:	4b1d      	ldr	r3, [pc, #116]	; (801685c <main+0x67c>)
 80167e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	        break;
 80167ec:	f000 bcdc 	b.w	80171a8 <main+0xfc8>
	          else if(Current == FN)           List[MenuNow[FN]].Flg |= UPD; // ָ�����ļ���д�������ʾ
 80167f0:	4b17      	ldr	r3, [pc, #92]	; (8016850 <main+0x670>)
 80167f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167f6:	2b05      	cmp	r3, #5
 80167f8:	d114      	bne.n	8016824 <main+0x644>
 80167fa:	4b17      	ldr	r3, [pc, #92]	; (8016858 <main+0x678>)
 80167fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8016800:	4a16      	ldr	r2, [pc, #88]	; (801685c <main+0x67c>)
 8016802:	00db      	lsls	r3, r3, #3
 8016804:	4413      	add	r3, r2
 8016806:	799b      	ldrb	r3, [r3, #6]
 8016808:	4a13      	ldr	r2, [pc, #76]	; (8016858 <main+0x678>)
 801680a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801680e:	4610      	mov	r0, r2
 8016810:	f043 0320 	orr.w	r3, r3, #32
 8016814:	b2d9      	uxtb	r1, r3
 8016816:	4a11      	ldr	r2, [pc, #68]	; (801685c <main+0x67c>)
 8016818:	00c3      	lsls	r3, r0, #3
 801681a:	4413      	add	r3, r2
 801681c:	460a      	mov	r2, r1
 801681e:	719a      	strb	r2, [r3, #6]
	        break;
 8016820:	f000 bcc2 	b.w	80171a8 <main+0xfc8>
	          else                             List[MenuNow[ME]].Flg |= UPD; // ָ���Ĳ��β����������ʾ
 8016824:	4b0c      	ldr	r3, [pc, #48]	; (8016858 <main+0x678>)
 8016826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801682a:	4a0c      	ldr	r2, [pc, #48]	; (801685c <main+0x67c>)
 801682c:	00db      	lsls	r3, r3, #3
 801682e:	4413      	add	r3, r2
 8016830:	799b      	ldrb	r3, [r3, #6]
 8016832:	4a09      	ldr	r2, [pc, #36]	; (8016858 <main+0x678>)
 8016834:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8016838:	4610      	mov	r0, r2
 801683a:	f043 0320 	orr.w	r3, r3, #32
 801683e:	b2d9      	uxtb	r1, r3
 8016840:	4a06      	ldr	r2, [pc, #24]	; (801685c <main+0x67c>)
 8016842:	00c3      	lsls	r3, r0, #3
 8016844:	4413      	add	r3, r2
 8016846:	460a      	mov	r2, r1
 8016848:	719a      	strb	r2, [r3, #6]
	        break;
 801684a:	f000 bcad 	b.w	80171a8 <main+0xfc8>
 801684e:	bf00      	nop
 8016850:	2000079a 	.word	0x2000079a
 8016854:	2000078a 	.word	0x2000078a
 8016858:	20000538 	.word	0x20000538
 801685c:	20000298 	.word	0x20000298
 8016860:	200001b4 	.word	0x200001b4
 8016864:	2000079c 	.word	0x2000079c
 8016868:	200007a3 	.word	0x200007a3
 801686c:	2000055c 	.word	0x2000055c
 8016870:	2000687c 	.word	0x2000687c
 8016874:	20006874 	.word	0x20006874
 8016878:	20002858 	.word	0x20002858

	      case KEYCODE_UP:
	        if (PopType & LIST_POP){
 801687c:	4bac      	ldr	r3, [pc, #688]	; (8016b30 <main+0x950>)
 801687e:	781b      	ldrb	r3, [r3, #0]
 8016880:	f003 0302 	and.w	r3, r3, #2
 8016884:	2b00      	cmp	r3, #0
 8016886:	d03b      	beq.n	8016900 <main+0x720>
	          if(MenuNow[Current] > MU_BEGN[Current]) MenuNow[Current]--;
 8016888:	4baa      	ldr	r3, [pc, #680]	; (8016b34 <main+0x954>)
 801688a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801688e:	461a      	mov	r2, r3
 8016890:	4ba9      	ldr	r3, [pc, #676]	; (8016b38 <main+0x958>)
 8016892:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016896:	461a      	mov	r2, r3
 8016898:	4ba6      	ldr	r3, [pc, #664]	; (8016b34 <main+0x954>)
 801689a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801689e:	4619      	mov	r1, r3
 80168a0:	4ba6      	ldr	r3, [pc, #664]	; (8016b3c <main+0x95c>)
 80168a2:	5c5b      	ldrb	r3, [r3, r1]
 80168a4:	429a      	cmp	r2, r3
 80168a6:	dd0e      	ble.n	80168c6 <main+0x6e6>
 80168a8:	4ba2      	ldr	r3, [pc, #648]	; (8016b34 <main+0x954>)
 80168aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ae:	4aa2      	ldr	r2, [pc, #648]	; (8016b38 <main+0x958>)
 80168b0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80168b4:	b292      	uxth	r2, r2
 80168b6:	3a01      	subs	r2, #1
 80168b8:	b292      	uxth	r2, r2
 80168ba:	b211      	sxth	r1, r2
 80168bc:	4a9e      	ldr	r2, [pc, #632]	; (8016b38 <main+0x958>)
 80168be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
	        } else {
	          if (Current > 0) Current--;
	          else             Current = ST;
	        }
	        break;
 80168c2:	f000 bc71 	b.w	80171a8 <main+0xfc8>
	          else                  MenuNow[Current] += M_ITEMS[Current]-1;
 80168c6:	4b9b      	ldr	r3, [pc, #620]	; (8016b34 <main+0x954>)
 80168c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168cc:	461a      	mov	r2, r3
 80168ce:	4b9a      	ldr	r3, [pc, #616]	; (8016b38 <main+0x958>)
 80168d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	4b97      	ldr	r3, [pc, #604]	; (8016b34 <main+0x954>)
 80168d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168dc:	4619      	mov	r1, r3
 80168de:	4b98      	ldr	r3, [pc, #608]	; (8016b40 <main+0x960>)
 80168e0:	5c5b      	ldrb	r3, [r3, r1]
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	4413      	add	r3, r2
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	3b01      	subs	r3, #1
 80168ea:	b299      	uxth	r1, r3
 80168ec:	4b91      	ldr	r3, [pc, #580]	; (8016b34 <main+0x954>)
 80168ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168f2:	461a      	mov	r2, r3
 80168f4:	b209      	sxth	r1, r1
 80168f6:	4b90      	ldr	r3, [pc, #576]	; (8016b38 <main+0x958>)
 80168f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	        break;
 80168fc:	f000 bc54 	b.w	80171a8 <main+0xfc8>
	          if (Current > 0) Current--;
 8016900:	4b8c      	ldr	r3, [pc, #560]	; (8016b34 <main+0x954>)
 8016902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016906:	2b00      	cmp	r3, #0
 8016908:	dd0a      	ble.n	8016920 <main+0x740>
 801690a:	4b8a      	ldr	r3, [pc, #552]	; (8016b34 <main+0x954>)
 801690c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016910:	b29b      	uxth	r3, r3
 8016912:	3b01      	subs	r3, #1
 8016914:	b29b      	uxth	r3, r3
 8016916:	b21a      	sxth	r2, r3
 8016918:	4b86      	ldr	r3, [pc, #536]	; (8016b34 <main+0x954>)
 801691a:	801a      	strh	r2, [r3, #0]
	        break;
 801691c:	f000 bc44 	b.w	80171a8 <main+0xfc8>
	          else             Current = ST;
 8016920:	4b84      	ldr	r3, [pc, #528]	; (8016b34 <main+0x954>)
 8016922:	2207      	movs	r2, #7
 8016924:	801a      	strh	r2, [r3, #0]
	        break;
 8016926:	f000 bc3f 	b.w	80171a8 <main+0xfc8>

	     case KEYCODE_DOWN:
	        if(PopType & LIST_POP){
 801692a:	4b81      	ldr	r3, [pc, #516]	; (8016b30 <main+0x950>)
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	f003 0302 	and.w	r3, r3, #2
 8016932:	2b00      	cmp	r3, #0
 8016934:	d034      	beq.n	80169a0 <main+0x7c0>
	          MenuNow[Current]++;
 8016936:	4b7f      	ldr	r3, [pc, #508]	; (8016b34 <main+0x954>)
 8016938:	f9b3 3000 	ldrsh.w	r3, [r3]
 801693c:	4a7e      	ldr	r2, [pc, #504]	; (8016b38 <main+0x958>)
 801693e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8016942:	b292      	uxth	r2, r2
 8016944:	3201      	adds	r2, #1
 8016946:	b292      	uxth	r2, r2
 8016948:	b211      	sxth	r1, r2
 801694a:	4a7b      	ldr	r2, [pc, #492]	; (8016b38 <main+0x958>)
 801694c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          if(MenuNow[Current] >=(MU_BEGN[Current]+M_ITEMS[Current])){
 8016950:	4b78      	ldr	r3, [pc, #480]	; (8016b34 <main+0x954>)
 8016952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016956:	461a      	mov	r2, r3
 8016958:	4b77      	ldr	r3, [pc, #476]	; (8016b38 <main+0x958>)
 801695a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801695e:	461a      	mov	r2, r3
 8016960:	4b74      	ldr	r3, [pc, #464]	; (8016b34 <main+0x954>)
 8016962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016966:	4619      	mov	r1, r3
 8016968:	4b74      	ldr	r3, [pc, #464]	; (8016b3c <main+0x95c>)
 801696a:	5c5b      	ldrb	r3, [r3, r1]
 801696c:	4619      	mov	r1, r3
 801696e:	4b71      	ldr	r3, [pc, #452]	; (8016b34 <main+0x954>)
 8016970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016974:	4618      	mov	r0, r3
 8016976:	4b72      	ldr	r3, [pc, #456]	; (8016b40 <main+0x960>)
 8016978:	5c1b      	ldrb	r3, [r3, r0]
 801697a:	440b      	add	r3, r1
 801697c:	429a      	cmp	r2, r3
 801697e:	f2c0 840a 	blt.w	8017196 <main+0xfb6>
	            MenuNow[Current] = MU_BEGN[Current];
 8016982:	4b6c      	ldr	r3, [pc, #432]	; (8016b34 <main+0x954>)
 8016984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016988:	461a      	mov	r2, r3
 801698a:	4b6c      	ldr	r3, [pc, #432]	; (8016b3c <main+0x95c>)
 801698c:	5c99      	ldrb	r1, [r3, r2]
 801698e:	4b69      	ldr	r3, [pc, #420]	; (8016b34 <main+0x954>)
 8016990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016994:	461a      	mov	r2, r3
 8016996:	b209      	sxth	r1, r1
 8016998:	4b67      	ldr	r3, [pc, #412]	; (8016b38 <main+0x958>)
 801699a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	          }
	        } else {
	          if (Current < 7) Current++;
	          else             Current = YN;
	        }
	        break;
 801699e:	e3fa      	b.n	8017196 <main+0xfb6>
	          if (Current < 7) Current++;
 80169a0:	4b64      	ldr	r3, [pc, #400]	; (8016b34 <main+0x954>)
 80169a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169a6:	2b06      	cmp	r3, #6
 80169a8:	dc09      	bgt.n	80169be <main+0x7de>
 80169aa:	4b62      	ldr	r3, [pc, #392]	; (8016b34 <main+0x954>)
 80169ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169b0:	b29b      	uxth	r3, r3
 80169b2:	3301      	adds	r3, #1
 80169b4:	b29b      	uxth	r3, r3
 80169b6:	b21a      	sxth	r2, r3
 80169b8:	4b5e      	ldr	r3, [pc, #376]	; (8016b34 <main+0x954>)
 80169ba:	801a      	strh	r2, [r3, #0]
	        break;
 80169bc:	e3eb      	b.n	8017196 <main+0xfb6>
	          else             Current = YN;
 80169be:	4b5d      	ldr	r3, [pc, #372]	; (8016b34 <main+0x954>)
 80169c0:	2200      	movs	r2, #0
 80169c2:	801a      	strh	r2, [r3, #0]
	        break;
 80169c4:	e3e7      	b.n	8017196 <main+0xfb6>

	      case KEYCODE_LEFT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80169c6:	4b5b      	ldr	r3, [pc, #364]	; (8016b34 <main+0x954>)
 80169c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169cc:	2b07      	cmp	r3, #7
 80169ce:	d106      	bne.n	80169de <main+0x7fe>
 80169d0:	4b57      	ldr	r3, [pc, #348]	; (8016b30 <main+0x950>)
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	f003 0302 	and.w	r3, r3, #2
 80169d8:	2b00      	cmp	r3, #0
 80169da:	f000 83de 	beq.w	801719a <main+0xfba>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 80169de:	4b55      	ldr	r3, [pc, #340]	; (8016b34 <main+0x954>)
 80169e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169e4:	461a      	mov	r2, r3
 80169e6:	4b54      	ldr	r3, [pc, #336]	; (8016b38 <main+0x958>)
 80169e8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80169ec:	4a55      	ldr	r2, [pc, #340]	; (8016b44 <main+0x964>)
 80169ee:	00db      	lsls	r3, r3, #3
 80169f0:	4413      	add	r3, r2
 80169f2:	799b      	ldrb	r3, [r3, #6]
 80169f4:	4a4f      	ldr	r2, [pc, #316]	; (8016b34 <main+0x954>)
 80169f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80169fa:	4611      	mov	r1, r2
 80169fc:	4a4e      	ldr	r2, [pc, #312]	; (8016b38 <main+0x958>)
 80169fe:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016a02:	4610      	mov	r0, r2
 8016a04:	f043 0320 	orr.w	r3, r3, #32
 8016a08:	b2d9      	uxtb	r1, r3
 8016a0a:	4a4e      	ldr	r2, [pc, #312]	; (8016b44 <main+0x964>)
 8016a0c:	00c3      	lsls	r3, r0, #3
 8016a0e:	4413      	add	r3, r2
 8016a10:	460a      	mov	r2, r1
 8016a12:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val <=MIN[MenuNow[Current]]){
 8016a14:	4b47      	ldr	r3, [pc, #284]	; (8016b34 <main+0x954>)
 8016a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a1a:	461a      	mov	r2, r3
 8016a1c:	4b46      	ldr	r3, [pc, #280]	; (8016b38 <main+0x958>)
 8016a1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a22:	4a48      	ldr	r2, [pc, #288]	; (8016b44 <main+0x964>)
 8016a24:	00db      	lsls	r3, r3, #3
 8016a26:	4413      	add	r3, r2
 8016a28:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016a2c:	4b41      	ldr	r3, [pc, #260]	; (8016b34 <main+0x954>)
 8016a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a32:	4619      	mov	r1, r3
 8016a34:	4b40      	ldr	r3, [pc, #256]	; (8016b38 <main+0x958>)
 8016a36:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	4b42      	ldr	r3, [pc, #264]	; (8016b48 <main+0x968>)
 8016a3e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	f300 8084 	bgt.w	8016b50 <main+0x970>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016a48:	4b3a      	ldr	r3, [pc, #232]	; (8016b34 <main+0x954>)
 8016a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	4b39      	ldr	r3, [pc, #228]	; (8016b38 <main+0x958>)
 8016a52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a56:	2b01      	cmp	r3, #1
 8016a58:	d051      	beq.n	8016afe <main+0x91e>
 8016a5a:	4b36      	ldr	r3, [pc, #216]	; (8016b34 <main+0x954>)
 8016a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a60:	461a      	mov	r2, r3
 8016a62:	4b35      	ldr	r3, [pc, #212]	; (8016b38 <main+0x958>)
 8016a64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a68:	2b06      	cmp	r3, #6
 8016a6a:	d048      	beq.n	8016afe <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016a6c:	4b31      	ldr	r3, [pc, #196]	; (8016b34 <main+0x954>)
 8016a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a72:	461a      	mov	r2, r3
 8016a74:	4b30      	ldr	r3, [pc, #192]	; (8016b38 <main+0x958>)
 8016a76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016a7a:	2b0c      	cmp	r3, #12
 8016a7c:	d03f      	beq.n	8016afe <main+0x91e>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016a7e:	4b2d      	ldr	r3, [pc, #180]	; (8016b34 <main+0x954>)
 8016a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a84:	461a      	mov	r2, r3
 8016a86:	4b2c      	ldr	r3, [pc, #176]	; (8016b38 <main+0x958>)
 8016a88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016a8c:	2b1c      	cmp	r3, #28
 8016a8e:	d036      	beq.n	8016afe <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016a90:	4b28      	ldr	r3, [pc, #160]	; (8016b34 <main+0x954>)
 8016a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a96:	461a      	mov	r2, r3
 8016a98:	4b27      	ldr	r3, [pc, #156]	; (8016b38 <main+0x958>)
 8016a9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016a9e:	2b0f      	cmp	r3, #15
 8016aa0:	d02d      	beq.n	8016afe <main+0x91e>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016aa2:	4b24      	ldr	r3, [pc, #144]	; (8016b34 <main+0x954>)
 8016aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	4b23      	ldr	r3, [pc, #140]	; (8016b38 <main+0x958>)
 8016aac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ab0:	2b0e      	cmp	r3, #14
 8016ab2:	d024      	beq.n	8016afe <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ab4:	4b1f      	ldr	r3, [pc, #124]	; (8016b34 <main+0x954>)
 8016ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016aba:	461a      	mov	r2, r3
 8016abc:	4b1e      	ldr	r3, [pc, #120]	; (8016b38 <main+0x958>)
 8016abe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016ac2:	2b0d      	cmp	r3, #13
 8016ac4:	d01b      	beq.n	8016afe <main+0x91e>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ac6:	4b1b      	ldr	r3, [pc, #108]	; (8016b34 <main+0x954>)
 8016ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016acc:	461a      	mov	r2, r3
 8016ace:	4b1a      	ldr	r3, [pc, #104]	; (8016b38 <main+0x958>)
 8016ad0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ad4:	2b1a      	cmp	r3, #26
 8016ad6:	d012      	beq.n	8016afe <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016ad8:	4b16      	ldr	r3, [pc, #88]	; (8016b34 <main+0x954>)
 8016ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ade:	461a      	mov	r2, r3
 8016ae0:	4b15      	ldr	r3, [pc, #84]	; (8016b38 <main+0x958>)
 8016ae2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ae6:	2b02      	cmp	r3, #2
 8016ae8:	d009      	beq.n	8016afe <main+0x91e>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016aea:	4b12      	ldr	r3, [pc, #72]	; (8016b34 <main+0x954>)
 8016aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016af0:	461a      	mov	r2, r3
 8016af2:	4b11      	ldr	r3, [pc, #68]	; (8016b38 <main+0x958>)
 8016af4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016af8:	2b24      	cmp	r3, #36	; 0x24
 8016afa:	f040 812c 	bne.w	8016d56 <main+0xb76>
	            List[MenuNow[Current]].Val =MAX[MenuNow[Current]] ;
 8016afe:	4b0d      	ldr	r3, [pc, #52]	; (8016b34 <main+0x954>)
 8016b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b04:	461a      	mov	r2, r3
 8016b06:	4b0c      	ldr	r3, [pc, #48]	; (8016b38 <main+0x958>)
 8016b08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	4b09      	ldr	r3, [pc, #36]	; (8016b34 <main+0x954>)
 8016b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b14:	4619      	mov	r1, r3
 8016b16:	4b08      	ldr	r3, [pc, #32]	; (8016b38 <main+0x958>)
 8016b18:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	4b0b      	ldr	r3, [pc, #44]	; (8016b4c <main+0x96c>)
 8016b20:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016b24:	4a07      	ldr	r2, [pc, #28]	; (8016b44 <main+0x964>)
 8016b26:	00c3      	lsls	r3, r0, #3
 8016b28:	4413      	add	r3, r2
 8016b2a:	460a      	mov	r2, r1
 8016b2c:	809a      	strh	r2, [r3, #4]
 8016b2e:	e112      	b.n	8016d56 <main+0xb76>
 8016b30:	2000078a 	.word	0x2000078a
 8016b34:	2000079a 	.word	0x2000079a
 8016b38:	20000538 	.word	0x20000538
 8016b3c:	08001f40 	.word	0x08001f40
 8016b40:	08001f48 	.word	0x08001f48
 8016b44:	20000298 	.word	0x20000298
 8016b48:	08002214 	.word	0x08002214
 8016b4c:	080021b8 	.word	0x080021b8
	        } else {
	          if((MenuNow[Current] == VIEWPOSI)&&((List[MenuNow[Current]].Val) >=150 ))
 8016b50:	4b88      	ldr	r3, [pc, #544]	; (8016d74 <main+0xb94>)
 8016b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b56:	461a      	mov	r2, r3
 8016b58:	4b87      	ldr	r3, [pc, #540]	; (8016d78 <main+0xb98>)
 8016b5a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b5e:	2b08      	cmp	r3, #8
 8016b60:	d12a      	bne.n	8016bb8 <main+0x9d8>
 8016b62:	4b84      	ldr	r3, [pc, #528]	; (8016d74 <main+0xb94>)
 8016b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b68:	461a      	mov	r2, r3
 8016b6a:	4b83      	ldr	r3, [pc, #524]	; (8016d78 <main+0xb98>)
 8016b6c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b70:	4a82      	ldr	r2, [pc, #520]	; (8016d7c <main+0xb9c>)
 8016b72:	00db      	lsls	r3, r3, #3
 8016b74:	4413      	add	r3, r2
 8016b76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b7a:	2b95      	cmp	r3, #149	; 0x95
 8016b7c:	dd1c      	ble.n	8016bb8 <main+0x9d8>
	            List[MenuNow[Current]].Val-=25;
 8016b7e:	4b7d      	ldr	r3, [pc, #500]	; (8016d74 <main+0xb94>)
 8016b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b84:	461a      	mov	r2, r3
 8016b86:	4b7c      	ldr	r3, [pc, #496]	; (8016d78 <main+0xb98>)
 8016b88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016b8c:	4a7b      	ldr	r2, [pc, #492]	; (8016d7c <main+0xb9c>)
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	4413      	add	r3, r2
 8016b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	3b19      	subs	r3, #25
 8016b9a:	b29a      	uxth	r2, r3
 8016b9c:	4b75      	ldr	r3, [pc, #468]	; (8016d74 <main+0xb94>)
 8016b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	4b74      	ldr	r3, [pc, #464]	; (8016d78 <main+0xb98>)
 8016ba6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016baa:	b211      	sxth	r1, r2
 8016bac:	4a73      	ldr	r2, [pc, #460]	; (8016d7c <main+0xb9c>)
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	4413      	add	r3, r2
 8016bb2:	460a      	mov	r2, r1
 8016bb4:	809a      	strh	r2, [r3, #4]
 8016bb6:	e0a0      	b.n	8016cfa <main+0xb1a>
	          else{
	          //============5.04�޸������߳�����������========
	            if(MenuNow[Current] == THRESHOLD){
 8016bb8:	4b6e      	ldr	r3, [pc, #440]	; (8016d74 <main+0xb94>)
 8016bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	4b6d      	ldr	r3, [pc, #436]	; (8016d78 <main+0xb98>)
 8016bc2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bc6:	2b10      	cmp	r3, #16
 8016bc8:	d121      	bne.n	8016c0e <main+0xa2e>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) > 2)  //����������
 8016bca:	4b6c      	ldr	r3, [pc, #432]	; (8016d7c <main+0xb9c>)
 8016bcc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	4b6a      	ldr	r3, [pc, #424]	; (8016d7c <main+0xb9c>)
 8016bd4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016bd8:	4413      	add	r3, r2
 8016bda:	2b02      	cmp	r3, #2
 8016bdc:	f340 808d 	ble.w	8016cfa <main+0xb1a>
	                List[MenuNow[Current]].Val--;
 8016be0:	4b64      	ldr	r3, [pc, #400]	; (8016d74 <main+0xb94>)
 8016be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016be6:	461a      	mov	r2, r3
 8016be8:	4b63      	ldr	r3, [pc, #396]	; (8016d78 <main+0xb98>)
 8016bea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016bee:	461a      	mov	r2, r3
 8016bf0:	4962      	ldr	r1, [pc, #392]	; (8016d7c <main+0xb9c>)
 8016bf2:	00d3      	lsls	r3, r2, #3
 8016bf4:	440b      	add	r3, r1
 8016bf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	3b01      	subs	r3, #1
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	b218      	sxth	r0, r3
 8016c02:	495e      	ldr	r1, [pc, #376]	; (8016d7c <main+0xb9c>)
 8016c04:	00d3      	lsls	r3, r2, #3
 8016c06:	440b      	add	r3, r1
 8016c08:	4602      	mov	r2, r0
 8016c0a:	809a      	strh	r2, [r3, #4]
 8016c0c:	e075      	b.n	8016cfa <main+0xb1a>
	            }
	            else if(MenuNow[Current] == V0_POSI){
 8016c0e:	4b59      	ldr	r3, [pc, #356]	; (8016d74 <main+0xb94>)
 8016c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c14:	461a      	mov	r2, r3
 8016c16:	4b58      	ldr	r3, [pc, #352]	; (8016d78 <main+0xb98>)
 8016c18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c1c:	2b03      	cmp	r3, #3
 8016c1e:	d134      	bne.n	8016c8a <main+0xaaa>
	              if((List[V0_POSI].Val + List[THRESHOLD].Val) <2){
 8016c20:	4b56      	ldr	r3, [pc, #344]	; (8016d7c <main+0xb9c>)
 8016c22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016c26:	461a      	mov	r2, r3
 8016c28:	4b54      	ldr	r3, [pc, #336]	; (8016d7c <main+0xb9c>)
 8016c2a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016c2e:	4413      	add	r3, r2
 8016c30:	2b01      	cmp	r3, #1
 8016c32:	dc13      	bgt.n	8016c5c <main+0xa7c>
	                List[V0_POSI].Val--;
 8016c34:	4b51      	ldr	r3, [pc, #324]	; (8016d7c <main+0xb9c>)
 8016c36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	3b01      	subs	r3, #1
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	b21a      	sxth	r2, r3
 8016c42:	4b4e      	ldr	r3, [pc, #312]	; (8016d7c <main+0xb9c>)
 8016c44:	839a      	strh	r2, [r3, #28]
	                List[THRESHOLD].Val++;
 8016c46:	4b4d      	ldr	r3, [pc, #308]	; (8016d7c <main+0xb9c>)
 8016c48:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	3301      	adds	r3, #1
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	b21a      	sxth	r2, r3
 8016c54:	4b49      	ldr	r3, [pc, #292]	; (8016d7c <main+0xb9c>)
 8016c56:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8016c5a:	e04e      	b.n	8016cfa <main+0xb1a>
	              }else List[MenuNow[Current]].Val--;
 8016c5c:	4b45      	ldr	r3, [pc, #276]	; (8016d74 <main+0xb94>)
 8016c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c62:	461a      	mov	r2, r3
 8016c64:	4b44      	ldr	r3, [pc, #272]	; (8016d78 <main+0xb98>)
 8016c66:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	4943      	ldr	r1, [pc, #268]	; (8016d7c <main+0xb9c>)
 8016c6e:	00d3      	lsls	r3, r2, #3
 8016c70:	440b      	add	r3, r1
 8016c72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	3b01      	subs	r3, #1
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	b218      	sxth	r0, r3
 8016c7e:	493f      	ldr	r1, [pc, #252]	; (8016d7c <main+0xb9c>)
 8016c80:	00d3      	lsls	r3, r2, #3
 8016c82:	440b      	add	r3, r1
 8016c84:	4602      	mov	r2, r0
 8016c86:	809a      	strh	r2, [r3, #4]
 8016c88:	e037      	b.n	8016cfa <main+0xb1a>
	            }
	            else if((MenuNow[Current] ==V1_POSI) && (List[V1_POSI].Val <= List[V2_POSI].Val))
 8016c8a:	4b3a      	ldr	r3, [pc, #232]	; (8016d74 <main+0xb94>)
 8016c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c90:	461a      	mov	r2, r3
 8016c92:	4b39      	ldr	r3, [pc, #228]	; (8016d78 <main+0xb98>)
 8016c94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016c98:	2b04      	cmp	r3, #4
 8016c9a:	d118      	bne.n	8016cce <main+0xaee>
 8016c9c:	4b37      	ldr	r3, [pc, #220]	; (8016d7c <main+0xb9c>)
 8016c9e:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8016ca2:	4b36      	ldr	r3, [pc, #216]	; (8016d7c <main+0xb9c>)
 8016ca4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	dc10      	bgt.n	8016cce <main+0xaee>
	            List[MenuNow[Current]].Val=List[V2_POSI].Val;
 8016cac:	4b31      	ldr	r3, [pc, #196]	; (8016d74 <main+0xb94>)
 8016cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	4b30      	ldr	r3, [pc, #192]	; (8016d78 <main+0xb98>)
 8016cb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	4b2f      	ldr	r3, [pc, #188]	; (8016d7c <main+0xb9c>)
 8016cbe:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8016cc2:	4a2e      	ldr	r2, [pc, #184]	; (8016d7c <main+0xb9c>)
 8016cc4:	00c3      	lsls	r3, r0, #3
 8016cc6:	4413      	add	r3, r2
 8016cc8:	460a      	mov	r2, r1
 8016cca:	809a      	strh	r2, [r3, #4]
 8016ccc:	e015      	b.n	8016cfa <main+0xb1a>
	            else List[MenuNow[Current]].Val--;
 8016cce:	4b29      	ldr	r3, [pc, #164]	; (8016d74 <main+0xb94>)
 8016cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	4b28      	ldr	r3, [pc, #160]	; (8016d78 <main+0xb98>)
 8016cd8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016cdc:	461a      	mov	r2, r3
 8016cde:	4927      	ldr	r1, [pc, #156]	; (8016d7c <main+0xb9c>)
 8016ce0:	00d3      	lsls	r3, r2, #3
 8016ce2:	440b      	add	r3, r1
 8016ce4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	3b01      	subs	r3, #1
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	b218      	sxth	r0, r3
 8016cf0:	4922      	ldr	r1, [pc, #136]	; (8016d7c <main+0xb9c>)
 8016cf2:	00d3      	lsls	r3, r2, #3
 8016cf4:	440b      	add	r3, r1
 8016cf6:	4602      	mov	r2, r0
 8016cf8:	809a      	strh	r2, [r3, #4]
	          }
	          //==============================================
	            if(MenuNow[Current] == SMPL_DPTH){
 8016cfa:	4b1e      	ldr	r3, [pc, #120]	; (8016d74 <main+0xb94>)
 8016cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d00:	461a      	mov	r2, r3
 8016d02:	4b1d      	ldr	r3, [pc, #116]	; (8016d78 <main+0xb98>)
 8016d04:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d08:	2b09      	cmp	r3, #9
 8016d0a:	d103      	bne.n	8016d14 <main+0xb34>
	              List[VIEWPOSI].Val=1 ;
 8016d0c:	4b1b      	ldr	r3, [pc, #108]	; (8016d7c <main+0xb9c>)
 8016d0e:	2201      	movs	r2, #1
 8016d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	           }
	            if((MenuNow[Current] ==T2_POSI) && (List[T2_POSI].Val <= List[T1_POSI].Val))
 8016d14:	4b17      	ldr	r3, [pc, #92]	; (8016d74 <main+0xb94>)
 8016d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	4b16      	ldr	r3, [pc, #88]	; (8016d78 <main+0xb98>)
 8016d1e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d22:	2b0b      	cmp	r3, #11
 8016d24:	d117      	bne.n	8016d56 <main+0xb76>
 8016d26:	4b15      	ldr	r3, [pc, #84]	; (8016d7c <main+0xb9c>)
 8016d28:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8016d2c:	4b13      	ldr	r3, [pc, #76]	; (8016d7c <main+0xb9c>)
 8016d2e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8016d32:	429a      	cmp	r2, r3
 8016d34:	dc0f      	bgt.n	8016d56 <main+0xb76>
	              List[MenuNow[Current]].Val=List[T1_POSI].Val;
 8016d36:	4b0f      	ldr	r3, [pc, #60]	; (8016d74 <main+0xb94>)
 8016d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	4b0e      	ldr	r3, [pc, #56]	; (8016d78 <main+0xb98>)
 8016d40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016d44:	4618      	mov	r0, r3
 8016d46:	4b0d      	ldr	r3, [pc, #52]	; (8016d7c <main+0xb9c>)
 8016d48:	f9b3 1054 	ldrsh.w	r1, [r3, #84]	; 0x54
 8016d4c:	4a0b      	ldr	r2, [pc, #44]	; (8016d7c <main+0xb9c>)
 8016d4e:	00c3      	lsls	r3, r0, #3
 8016d50:	4413      	add	r3, r2
 8016d52:	460a      	mov	r2, r1
 8016d54:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8016d56:	4b07      	ldr	r3, [pc, #28]	; (8016d74 <main+0xb94>)
 8016d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d5c:	2b02      	cmp	r3, #2
 8016d5e:	f040 821e 	bne.w	801719e <main+0xfbe>
 8016d62:	4b07      	ldr	r3, [pc, #28]	; (8016d80 <main+0xba0>)
 8016d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d68:	f023 0301 	bic.w	r3, r3, #1
 8016d6c:	b21a      	sxth	r2, r3
 8016d6e:	4b04      	ldr	r3, [pc, #16]	; (8016d80 <main+0xba0>)
 8016d70:	801a      	strh	r2, [r3, #0]
	        break;
 8016d72:	e214      	b.n	801719e <main+0xfbe>
 8016d74:	2000079a 	.word	0x2000079a
 8016d78:	20000538 	.word	0x20000538
 8016d7c:	20000298 	.word	0x20000298
 8016d80:	2000079c 	.word	0x2000079c

	      case KEYCODE_RIGHT:
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 8016d84:	4bb7      	ldr	r3, [pc, #732]	; (8017064 <main+0xe84>)
 8016d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d8a:	2b07      	cmp	r3, #7
 8016d8c:	d106      	bne.n	8016d9c <main+0xbbc>
 8016d8e:	4bb6      	ldr	r3, [pc, #728]	; (8017068 <main+0xe88>)
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	f003 0302 	and.w	r3, r3, #2
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	f000 8203 	beq.w	80171a2 <main+0xfc2>
	        List[MenuNow[Current]].Flg |= UPD;  // ˢ�±��ǰԭ��ʾ��Ŀ����
 8016d9c:	4bb1      	ldr	r3, [pc, #708]	; (8017064 <main+0xe84>)
 8016d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016da2:	461a      	mov	r2, r3
 8016da4:	4bb1      	ldr	r3, [pc, #708]	; (801706c <main+0xe8c>)
 8016da6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016daa:	4ab1      	ldr	r2, [pc, #708]	; (8017070 <main+0xe90>)
 8016dac:	00db      	lsls	r3, r3, #3
 8016dae:	4413      	add	r3, r2
 8016db0:	799b      	ldrb	r3, [r3, #6]
 8016db2:	4aac      	ldr	r2, [pc, #688]	; (8017064 <main+0xe84>)
 8016db4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016db8:	4611      	mov	r1, r2
 8016dba:	4aac      	ldr	r2, [pc, #688]	; (801706c <main+0xe8c>)
 8016dbc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8016dc0:	4610      	mov	r0, r2
 8016dc2:	f043 0320 	orr.w	r3, r3, #32
 8016dc6:	b2d9      	uxtb	r1, r3
 8016dc8:	4aa9      	ldr	r2, [pc, #676]	; (8017070 <main+0xe90>)
 8016dca:	00c3      	lsls	r3, r0, #3
 8016dcc:	4413      	add	r3, r2
 8016dce:	460a      	mov	r2, r1
 8016dd0:	719a      	strb	r2, [r3, #6]
	        if(List[MenuNow[Current]].Val >=MAX[MenuNow[Current]] ){
 8016dd2:	4ba4      	ldr	r3, [pc, #656]	; (8017064 <main+0xe84>)
 8016dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dd8:	461a      	mov	r2, r3
 8016dda:	4ba4      	ldr	r3, [pc, #656]	; (801706c <main+0xe8c>)
 8016ddc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016de0:	4aa3      	ldr	r2, [pc, #652]	; (8017070 <main+0xe90>)
 8016de2:	00db      	lsls	r3, r3, #3
 8016de4:	4413      	add	r3, r2
 8016de6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8016dea:	4b9e      	ldr	r3, [pc, #632]	; (8017064 <main+0xe84>)
 8016dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016df0:	4619      	mov	r1, r3
 8016df2:	4b9e      	ldr	r3, [pc, #632]	; (801706c <main+0xe8c>)
 8016df4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	4b9e      	ldr	r3, [pc, #632]	; (8017074 <main+0xe94>)
 8016dfc:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	db73      	blt.n	8016eec <main+0xd0c>
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016e04:	4b97      	ldr	r3, [pc, #604]	; (8017064 <main+0xe84>)
 8016e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	4b97      	ldr	r3, [pc, #604]	; (801706c <main+0xe8c>)
 8016e0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e12:	2b01      	cmp	r3, #1
 8016e14:	d051      	beq.n	8016eba <main+0xcda>
 8016e16:	4b93      	ldr	r3, [pc, #588]	; (8017064 <main+0xe84>)
 8016e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	4b93      	ldr	r3, [pc, #588]	; (801706c <main+0xe8c>)
 8016e20:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e24:	2b06      	cmp	r3, #6
 8016e26:	d048      	beq.n	8016eba <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016e28:	4b8e      	ldr	r3, [pc, #568]	; (8017064 <main+0xe84>)
 8016e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e2e:	461a      	mov	r2, r3
 8016e30:	4b8e      	ldr	r3, [pc, #568]	; (801706c <main+0xe8c>)
 8016e32:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	          if((MenuNow[Current] == COUPLING)||(MenuNow[Current] == YN_TYPE )||
 8016e36:	2b0c      	cmp	r3, #12
 8016e38:	d03f      	beq.n	8016eba <main+0xcda>
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016e3a:	4b8a      	ldr	r3, [pc, #552]	; (8017064 <main+0xe84>)
 8016e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e40:	461a      	mov	r2, r3
 8016e42:	4b8a      	ldr	r3, [pc, #552]	; (801706c <main+0xe8c>)
 8016e44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e48:	2b1c      	cmp	r3, #28
 8016e4a:	d036      	beq.n	8016eba <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016e4c:	4b85      	ldr	r3, [pc, #532]	; (8017064 <main+0xe84>)
 8016e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e52:	461a      	mov	r2, r3
 8016e54:	4b85      	ldr	r3, [pc, #532]	; (801706c <main+0xe8c>)
 8016e56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            (MenuNow[Current] == XN_TYPE )||(MenuNow[Current] == EXT_HIDE)||
 8016e5a:	2b0f      	cmp	r3, #15
 8016e5c:	d02d      	beq.n	8016eba <main+0xcda>
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016e5e:	4b81      	ldr	r3, [pc, #516]	; (8017064 <main+0xe84>)
 8016e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e64:	461a      	mov	r2, r3
 8016e66:	4b81      	ldr	r3, [pc, #516]	; (801706c <main+0xe8c>)
 8016e68:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e6c:	2b0e      	cmp	r3, #14
 8016e6e:	d024      	beq.n	8016eba <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016e70:	4b7c      	ldr	r3, [pc, #496]	; (8017064 <main+0xe84>)
 8016e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e76:	461a      	mov	r2, r3
 8016e78:	4b7c      	ldr	r3, [pc, #496]	; (801706c <main+0xe8c>)
 8016e7a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == FITTRIGG)||(MenuNow[Current] == TR_MODE )||
 8016e7e:	2b0d      	cmp	r3, #13
 8016e80:	d01b      	beq.n	8016eba <main+0xcda>
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016e82:	4b78      	ldr	r3, [pc, #480]	; (8017064 <main+0xe84>)
 8016e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e88:	461a      	mov	r2, r3
 8016e8a:	4b78      	ldr	r3, [pc, #480]	; (801706c <main+0xe8c>)
 8016e8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016e90:	2b1a      	cmp	r3, #26
 8016e92:	d012      	beq.n	8016eba <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016e94:	4b73      	ldr	r3, [pc, #460]	; (8017064 <main+0xe84>)
 8016e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	4b73      	ldr	r3, [pc, #460]	; (801706c <main+0xe8c>)
 8016e9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
	            ( MenuNow[Current] == SYNCMODE)||(MenuNow[Current] == EXT_REFN)||
 8016ea2:	2b02      	cmp	r3, #2
 8016ea4:	d009      	beq.n	8016eba <main+0xcda>
	            (MenuNow[Current] == PROBEATT)||(MenuNow[Current] == TPYE_OUT))
 8016ea6:	4b6f      	ldr	r3, [pc, #444]	; (8017064 <main+0xe84>)
 8016ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eac:	461a      	mov	r2, r3
 8016eae:	4b6f      	ldr	r3, [pc, #444]	; (801706c <main+0xe8c>)
 8016eb0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016eb4:	2b24      	cmp	r3, #36	; 0x24
 8016eb6:	f040 8153 	bne.w	8017160 <main+0xf80>
	            List[MenuNow[Current]].Val =MIN[MenuNow[Current]] ;
 8016eba:	4b6a      	ldr	r3, [pc, #424]	; (8017064 <main+0xe84>)
 8016ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	4b6a      	ldr	r3, [pc, #424]	; (801706c <main+0xe8c>)
 8016ec4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ec8:	461a      	mov	r2, r3
 8016eca:	4b66      	ldr	r3, [pc, #408]	; (8017064 <main+0xe84>)
 8016ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ed0:	4619      	mov	r1, r3
 8016ed2:	4b66      	ldr	r3, [pc, #408]	; (801706c <main+0xe8c>)
 8016ed4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	4b67      	ldr	r3, [pc, #412]	; (8017078 <main+0xe98>)
 8016edc:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8016ee0:	4a63      	ldr	r2, [pc, #396]	; (8017070 <main+0xe90>)
 8016ee2:	00c3      	lsls	r3, r0, #3
 8016ee4:	4413      	add	r3, r2
 8016ee6:	460a      	mov	r2, r1
 8016ee8:	809a      	strh	r2, [r3, #4]
 8016eea:	e139      	b.n	8017160 <main+0xf80>
	        } else {
	            if(MenuNow[Current] == VIEWPOSI)
 8016eec:	4b5d      	ldr	r3, [pc, #372]	; (8017064 <main+0xe84>)
 8016eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef2:	461a      	mov	r2, r3
 8016ef4:	4b5d      	ldr	r3, [pc, #372]	; (801706c <main+0xe8c>)
 8016ef6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016efa:	2b08      	cmp	r3, #8
 8016efc:	d15f      	bne.n	8016fbe <main+0xdde>
	            {
	              if(List[MenuNow[Current]].Val <(DEPTH[List[SMPL_DPTH].Val]-(350-List[SMPL_DPTH].Val)))
 8016efe:	4b59      	ldr	r3, [pc, #356]	; (8017064 <main+0xe84>)
 8016f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f04:	461a      	mov	r2, r3
 8016f06:	4b59      	ldr	r3, [pc, #356]	; (801706c <main+0xe8c>)
 8016f08:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f0c:	4a58      	ldr	r2, [pc, #352]	; (8017070 <main+0xe90>)
 8016f0e:	00db      	lsls	r3, r3, #3
 8016f10:	4413      	add	r3, r2
 8016f12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f16:	461a      	mov	r2, r3
 8016f18:	4b55      	ldr	r3, [pc, #340]	; (8017070 <main+0xe90>)
 8016f1a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8016f1e:	4619      	mov	r1, r3
 8016f20:	4b56      	ldr	r3, [pc, #344]	; (801707c <main+0xe9c>)
 8016f22:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f26:	4619      	mov	r1, r3
 8016f28:	4b51      	ldr	r3, [pc, #324]	; (8017070 <main+0xe90>)
 8016f2a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8016f2e:	f5c3 73af 	rsb	r3, r3, #350	; 0x15e
 8016f32:	1acb      	subs	r3, r1, r3
 8016f34:	429a      	cmp	r2, r3
 8016f36:	f280 80f2 	bge.w	801711e <main+0xf3e>
	              {
	                if(List[MenuNow[Current]].Val >150 )
 8016f3a:	4b4a      	ldr	r3, [pc, #296]	; (8017064 <main+0xe84>)
 8016f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f40:	461a      	mov	r2, r3
 8016f42:	4b4a      	ldr	r3, [pc, #296]	; (801706c <main+0xe8c>)
 8016f44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f48:	4a49      	ldr	r2, [pc, #292]	; (8017070 <main+0xe90>)
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	4413      	add	r3, r2
 8016f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f52:	2b96      	cmp	r3, #150	; 0x96
 8016f54:	dd1c      	ble.n	8016f90 <main+0xdb0>
	                  List[MenuNow[Current]].Val += 25;
 8016f56:	4b43      	ldr	r3, [pc, #268]	; (8017064 <main+0xe84>)
 8016f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	4b43      	ldr	r3, [pc, #268]	; (801706c <main+0xe8c>)
 8016f60:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f64:	4a42      	ldr	r2, [pc, #264]	; (8017070 <main+0xe90>)
 8016f66:	00db      	lsls	r3, r3, #3
 8016f68:	4413      	add	r3, r2
 8016f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	3319      	adds	r3, #25
 8016f72:	b29a      	uxth	r2, r3
 8016f74:	4b3b      	ldr	r3, [pc, #236]	; (8017064 <main+0xe84>)
 8016f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	4b3b      	ldr	r3, [pc, #236]	; (801706c <main+0xe8c>)
 8016f7e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8016f82:	b211      	sxth	r1, r2
 8016f84:	4a3a      	ldr	r2, [pc, #232]	; (8017070 <main+0xe90>)
 8016f86:	00db      	lsls	r3, r3, #3
 8016f88:	4413      	add	r3, r2
 8016f8a:	460a      	mov	r2, r1
 8016f8c:	809a      	strh	r2, [r3, #4]
 8016f8e:	e0c6      	b.n	801711e <main+0xf3e>
	                else
	                  List[MenuNow[Current]].Val++;
 8016f90:	4b34      	ldr	r3, [pc, #208]	; (8017064 <main+0xe84>)
 8016f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f96:	461a      	mov	r2, r3
 8016f98:	4b34      	ldr	r3, [pc, #208]	; (801706c <main+0xe8c>)
 8016f9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	4933      	ldr	r1, [pc, #204]	; (8017070 <main+0xe90>)
 8016fa2:	00d3      	lsls	r3, r2, #3
 8016fa4:	440b      	add	r3, r1
 8016fa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	3301      	adds	r3, #1
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	b218      	sxth	r0, r3
 8016fb2:	492f      	ldr	r1, [pc, #188]	; (8017070 <main+0xe90>)
 8016fb4:	00d3      	lsls	r3, r2, #3
 8016fb6:	440b      	add	r3, r1
 8016fb8:	4602      	mov	r2, r0
 8016fba:	809a      	strh	r2, [r3, #4]
 8016fbc:	e0af      	b.n	801711e <main+0xf3e>
	              }
	            }
	            else{
	              //============4.27�޸������߳�����������========
	              if(MenuNow[Current] == THRESHOLD){
 8016fbe:	4b29      	ldr	r3, [pc, #164]	; (8017064 <main+0xe84>)
 8016fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	4b29      	ldr	r3, [pc, #164]	; (801706c <main+0xe8c>)
 8016fc8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016fcc:	2b10      	cmp	r3, #16
 8016fce:	d121      	bne.n	8017014 <main+0xe34>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) < 198)
 8016fd0:	4b27      	ldr	r3, [pc, #156]	; (8017070 <main+0xe90>)
 8016fd2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	4b25      	ldr	r3, [pc, #148]	; (8017070 <main+0xe90>)
 8016fda:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8016fde:	4413      	add	r3, r2
 8016fe0:	2bc5      	cmp	r3, #197	; 0xc5
 8016fe2:	f300 809c 	bgt.w	801711e <main+0xf3e>
	                 List[MenuNow[Current]].Val++;
 8016fe6:	4b1f      	ldr	r3, [pc, #124]	; (8017064 <main+0xe84>)
 8016fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fec:	461a      	mov	r2, r3
 8016fee:	4b1f      	ldr	r3, [pc, #124]	; (801706c <main+0xe8c>)
 8016ff0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	491e      	ldr	r1, [pc, #120]	; (8017070 <main+0xe90>)
 8016ff8:	00d3      	lsls	r3, r2, #3
 8016ffa:	440b      	add	r3, r1
 8016ffc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017000:	b29b      	uxth	r3, r3
 8017002:	3301      	adds	r3, #1
 8017004:	b29b      	uxth	r3, r3
 8017006:	b218      	sxth	r0, r3
 8017008:	4919      	ldr	r1, [pc, #100]	; (8017070 <main+0xe90>)
 801700a:	00d3      	lsls	r3, r2, #3
 801700c:	440b      	add	r3, r1
 801700e:	4602      	mov	r2, r0
 8017010:	809a      	strh	r2, [r3, #4]
 8017012:	e084      	b.n	801711e <main+0xf3e>
	              }
	              else if(MenuNow[Current] == V0_POSI){
 8017014:	4b13      	ldr	r3, [pc, #76]	; (8017064 <main+0xe84>)
 8017016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801701a:	461a      	mov	r2, r3
 801701c:	4b13      	ldr	r3, [pc, #76]	; (801706c <main+0xe8c>)
 801701e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017022:	2b03      	cmp	r3, #3
 8017024:	d143      	bne.n	80170ae <main+0xece>
	                if((List[V0_POSI].Val + List[THRESHOLD].Val) > 198){
 8017026:	4b12      	ldr	r3, [pc, #72]	; (8017070 <main+0xe90>)
 8017028:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801702c:	461a      	mov	r2, r3
 801702e:	4b10      	ldr	r3, [pc, #64]	; (8017070 <main+0xe90>)
 8017030:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017034:	4413      	add	r3, r2
 8017036:	2bc6      	cmp	r3, #198	; 0xc6
 8017038:	dd22      	ble.n	8017080 <main+0xea0>
	                  List[V0_POSI].Val++;
 801703a:	4b0d      	ldr	r3, [pc, #52]	; (8017070 <main+0xe90>)
 801703c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017040:	b29b      	uxth	r3, r3
 8017042:	3301      	adds	r3, #1
 8017044:	b29b      	uxth	r3, r3
 8017046:	b21a      	sxth	r2, r3
 8017048:	4b09      	ldr	r3, [pc, #36]	; (8017070 <main+0xe90>)
 801704a:	839a      	strh	r2, [r3, #28]
	                  List[THRESHOLD].Val--;
 801704c:	4b08      	ldr	r3, [pc, #32]	; (8017070 <main+0xe90>)
 801704e:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 8017052:	b29b      	uxth	r3, r3
 8017054:	3b01      	subs	r3, #1
 8017056:	b29b      	uxth	r3, r3
 8017058:	b21a      	sxth	r2, r3
 801705a:	4b05      	ldr	r3, [pc, #20]	; (8017070 <main+0xe90>)
 801705c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8017060:	e05d      	b.n	801711e <main+0xf3e>
 8017062:	bf00      	nop
 8017064:	2000079a 	.word	0x2000079a
 8017068:	2000078a 	.word	0x2000078a
 801706c:	20000538 	.word	0x20000538
 8017070:	20000298 	.word	0x20000298
 8017074:	080021b8 	.word	0x080021b8
 8017078:	08002214 	.word	0x08002214
 801707c:	08002270 	.word	0x08002270
	                }else List[MenuNow[Current]].Val++;
 8017080:	4b64      	ldr	r3, [pc, #400]	; (8017214 <main+0x1034>)
 8017082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017086:	461a      	mov	r2, r3
 8017088:	4b63      	ldr	r3, [pc, #396]	; (8017218 <main+0x1038>)
 801708a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801708e:	461a      	mov	r2, r3
 8017090:	4962      	ldr	r1, [pc, #392]	; (801721c <main+0x103c>)
 8017092:	00d3      	lsls	r3, r2, #3
 8017094:	440b      	add	r3, r1
 8017096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801709a:	b29b      	uxth	r3, r3
 801709c:	3301      	adds	r3, #1
 801709e:	b29b      	uxth	r3, r3
 80170a0:	b218      	sxth	r0, r3
 80170a2:	495e      	ldr	r1, [pc, #376]	; (801721c <main+0x103c>)
 80170a4:	00d3      	lsls	r3, r2, #3
 80170a6:	440b      	add	r3, r1
 80170a8:	4602      	mov	r2, r0
 80170aa:	809a      	strh	r2, [r3, #4]
 80170ac:	e037      	b.n	801711e <main+0xf3e>
	              }
	              else if((MenuNow[Current] ==V2_POSI) && (List[V2_POSI].Val >= List[V1_POSI].Val))
 80170ae:	4b59      	ldr	r3, [pc, #356]	; (8017214 <main+0x1034>)
 80170b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170b4:	461a      	mov	r2, r3
 80170b6:	4b58      	ldr	r3, [pc, #352]	; (8017218 <main+0x1038>)
 80170b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170bc:	2b05      	cmp	r3, #5
 80170be:	d118      	bne.n	80170f2 <main+0xf12>
 80170c0:	4b56      	ldr	r3, [pc, #344]	; (801721c <main+0x103c>)
 80170c2:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 80170c6:	4b55      	ldr	r3, [pc, #340]	; (801721c <main+0x103c>)
 80170c8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80170cc:	429a      	cmp	r2, r3
 80170ce:	db10      	blt.n	80170f2 <main+0xf12>
	                List[MenuNow[Current]].Val=List[V1_POSI].Val;
 80170d0:	4b50      	ldr	r3, [pc, #320]	; (8017214 <main+0x1034>)
 80170d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d6:	461a      	mov	r2, r3
 80170d8:	4b4f      	ldr	r3, [pc, #316]	; (8017218 <main+0x1038>)
 80170da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80170de:	4618      	mov	r0, r3
 80170e0:	4b4e      	ldr	r3, [pc, #312]	; (801721c <main+0x103c>)
 80170e2:	f9b3 1024 	ldrsh.w	r1, [r3, #36]	; 0x24
 80170e6:	4a4d      	ldr	r2, [pc, #308]	; (801721c <main+0x103c>)
 80170e8:	00c3      	lsls	r3, r0, #3
 80170ea:	4413      	add	r3, r2
 80170ec:	460a      	mov	r2, r1
 80170ee:	809a      	strh	r2, [r3, #4]
 80170f0:	e015      	b.n	801711e <main+0xf3e>
	              else List[MenuNow[Current]].Val++;
 80170f2:	4b48      	ldr	r3, [pc, #288]	; (8017214 <main+0x1034>)
 80170f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170f8:	461a      	mov	r2, r3
 80170fa:	4b47      	ldr	r3, [pc, #284]	; (8017218 <main+0x1038>)
 80170fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017100:	461a      	mov	r2, r3
 8017102:	4946      	ldr	r1, [pc, #280]	; (801721c <main+0x103c>)
 8017104:	00d3      	lsls	r3, r2, #3
 8017106:	440b      	add	r3, r1
 8017108:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801710c:	b29b      	uxth	r3, r3
 801710e:	3301      	adds	r3, #1
 8017110:	b29b      	uxth	r3, r3
 8017112:	b218      	sxth	r0, r3
 8017114:	4941      	ldr	r1, [pc, #260]	; (801721c <main+0x103c>)
 8017116:	00d3      	lsls	r3, r2, #3
 8017118:	440b      	add	r3, r1
 801711a:	4602      	mov	r2, r0
 801711c:	809a      	strh	r2, [r3, #4]
	            }
	            //==============================================
	            if((MenuNow[Current] ==T1_POSI) && (List[T1_POSI].Val >= List[T2_POSI].Val))
 801711e:	4b3d      	ldr	r3, [pc, #244]	; (8017214 <main+0x1034>)
 8017120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017124:	461a      	mov	r2, r3
 8017126:	4b3c      	ldr	r3, [pc, #240]	; (8017218 <main+0x1038>)
 8017128:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801712c:	2b0a      	cmp	r3, #10
 801712e:	d117      	bne.n	8017160 <main+0xf80>
 8017130:	4b3a      	ldr	r3, [pc, #232]	; (801721c <main+0x103c>)
 8017132:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8017136:	4b39      	ldr	r3, [pc, #228]	; (801721c <main+0x103c>)
 8017138:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 801713c:	429a      	cmp	r2, r3
 801713e:	db0f      	blt.n	8017160 <main+0xf80>
	               List[MenuNow[Current]].Val=List[T2_POSI].Val;
 8017140:	4b34      	ldr	r3, [pc, #208]	; (8017214 <main+0x1034>)
 8017142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017146:	461a      	mov	r2, r3
 8017148:	4b33      	ldr	r3, [pc, #204]	; (8017218 <main+0x1038>)
 801714a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801714e:	4618      	mov	r0, r3
 8017150:	4b32      	ldr	r3, [pc, #200]	; (801721c <main+0x103c>)
 8017152:	f9b3 105c 	ldrsh.w	r1, [r3, #92]	; 0x5c
 8017156:	4a31      	ldr	r2, [pc, #196]	; (801721c <main+0x103c>)
 8017158:	00c3      	lsls	r3, r0, #3
 801715a:	4413      	add	r3, r2
 801715c:	460a      	mov	r2, r1
 801715e:	809a      	strh	r2, [r3, #4]
	        }
	        if(Current == TRG) {Status &= ~STOP; // �ı�ͬ��ģʽ��ָ�����״̬
 8017160:	4b2c      	ldr	r3, [pc, #176]	; (8017214 <main+0x1034>)
 8017162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017166:	2b02      	cmp	r3, #2
 8017168:	d11d      	bne.n	80171a6 <main+0xfc6>
 801716a:	4b2d      	ldr	r3, [pc, #180]	; (8017220 <main+0x1040>)
 801716c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017170:	f023 0301 	bic.w	r3, r3, #1
 8017174:	b21a      	sxth	r2, r3
 8017176:	4b2a      	ldr	r3, [pc, #168]	; (8017220 <main+0x1040>)
 8017178:	801a      	strh	r2, [r3, #0]
	        if(List[SYNCMODE].Val==SINGL)ADC_Start(); }
 801717a:	4b28      	ldr	r3, [pc, #160]	; (801721c <main+0x103c>)
 801717c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8017180:	2b04      	cmp	r3, #4
 8017182:	d110      	bne.n	80171a6 <main+0xfc6>
 8017184:	f7f5 fab2 	bl	800c6ec <ADC_Start>
	        break;
 8017188:	e00d      	b.n	80171a6 <main+0xfc6>
	         break;
 801718a:	bf00      	nop
 801718c:	e00c      	b.n	80171a8 <main+0xfc8>
	         break;
 801718e:	bf00      	nop
 8017190:	e00a      	b.n	80171a8 <main+0xfc8>
	        break;
 8017192:	bf00      	nop
 8017194:	e008      	b.n	80171a8 <main+0xfc8>
	        break;
 8017196:	bf00      	nop
 8017198:	e006      	b.n	80171a8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 801719a:	bf00      	nop
 801719c:	e004      	b.n	80171a8 <main+0xfc8>
	        break;
 801719e:	bf00      	nop
 80171a0:	e002      	b.n	80171a8 <main+0xfc8>
	        if((Current==ST)&& !(PopType & LIST_POP))break;
 80171a2:	bf00      	nop
 80171a4:	e000      	b.n	80171a8 <main+0xfc8>
	        break;
 80171a6:	bf00      	nop

	     } //switch end
	     List[MenuNow[Current]].Flg |= UPD;
 80171a8:	4b1a      	ldr	r3, [pc, #104]	; (8017214 <main+0x1034>)
 80171aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ae:	461a      	mov	r2, r3
 80171b0:	4b19      	ldr	r3, [pc, #100]	; (8017218 <main+0x1038>)
 80171b2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80171b6:	4a19      	ldr	r2, [pc, #100]	; (801721c <main+0x103c>)
 80171b8:	00db      	lsls	r3, r3, #3
 80171ba:	4413      	add	r3, r2
 80171bc:	799b      	ldrb	r3, [r3, #6]
 80171be:	4a15      	ldr	r2, [pc, #84]	; (8017214 <main+0x1034>)
 80171c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80171c4:	4611      	mov	r1, r2
 80171c6:	4a14      	ldr	r2, [pc, #80]	; (8017218 <main+0x1038>)
 80171c8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80171cc:	4610      	mov	r0, r2
 80171ce:	f043 0320 	orr.w	r3, r3, #32
 80171d2:	b2d9      	uxtb	r1, r3
 80171d4:	4a11      	ldr	r2, [pc, #68]	; (801721c <main+0x103c>)
 80171d6:	00c3      	lsls	r3, r0, #3
 80171d8:	4413      	add	r3, r2
 80171da:	460a      	mov	r2, r1
 80171dc:	719a      	strb	r2, [r3, #6]
	     StdBy_Time  = List[STANDBY].Val * MIN_UNIT;  //����
 80171de:	4b0f      	ldr	r3, [pc, #60]	; (801721c <main+0x103c>)
 80171e0:	f9b3 314c 	ldrsh.w	r3, [r3, #332]	; 0x14c
 80171e4:	b29b      	uxth	r3, r3
 80171e6:	461a      	mov	r2, r3
 80171e8:	0112      	lsls	r2, r2, #4
 80171ea:	1ad3      	subs	r3, r2, r3
 80171ec:	009b      	lsls	r3, r3, #2
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	b21a      	sxth	r2, r3
 80171f2:	4b0c      	ldr	r3, [pc, #48]	; (8017224 <main+0x1044>)
 80171f4:	801a      	strh	r2, [r3, #0]

	      if(PopType & LIST_POP) Show_List();
 80171f6:	4b0c      	ldr	r3, [pc, #48]	; (8017228 <main+0x1048>)
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	f003 0302 	and.w	r3, r3, #2
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d001      	beq.n	8017206 <main+0x1026>
 8017202:	f7fd fa29 	bl	8014658 <Show_List>
	      Update_Title();
 8017206:	f7fb f861 	bl	80122cc <Update_Title>
	      Key_Buffer = 0;
 801720a:	4b08      	ldr	r3, [pc, #32]	; (801722c <main+0x104c>)
 801720c:	2200      	movs	r2, #0
 801720e:	701a      	strb	r2, [r3, #0]
	    if((List[STANDBY].Val != 0)&&(StdBy_Time == 0))
 8017210:	f7ff b868 	b.w	80162e4 <main+0x104>
 8017214:	2000079a 	.word	0x2000079a
 8017218:	20000538 	.word	0x20000538
 801721c:	20000298 	.word	0x20000298
 8017220:	2000079c 	.word	0x2000079c
 8017224:	20000798 	.word	0x20000798
 8017228:	2000078a 	.word	0x2000078a
 801722c:	2000077d 	.word	0x2000077d

08017230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b094      	sub	sp, #80	; 0x50
 8017234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017236:	f107 031c 	add.w	r3, r7, #28
 801723a:	2234      	movs	r2, #52	; 0x34
 801723c:	2100      	movs	r1, #0
 801723e:	4618      	mov	r0, r3
 8017240:	f00b fd9e 	bl	8022d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017244:	f107 0308 	add.w	r3, r7, #8
 8017248:	2200      	movs	r2, #0
 801724a:	601a      	str	r2, [r3, #0]
 801724c:	605a      	str	r2, [r3, #4]
 801724e:	609a      	str	r2, [r3, #8]
 8017250:	60da      	str	r2, [r3, #12]
 8017252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017254:	2300      	movs	r3, #0
 8017256:	607b      	str	r3, [r7, #4]
 8017258:	4b2d      	ldr	r3, [pc, #180]	; (8017310 <SystemClock_Config+0xe0>)
 801725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801725c:	4a2c      	ldr	r2, [pc, #176]	; (8017310 <SystemClock_Config+0xe0>)
 801725e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017262:	6413      	str	r3, [r2, #64]	; 0x40
 8017264:	4b2a      	ldr	r3, [pc, #168]	; (8017310 <SystemClock_Config+0xe0>)
 8017266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801726c:	607b      	str	r3, [r7, #4]
 801726e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017270:	2300      	movs	r3, #0
 8017272:	603b      	str	r3, [r7, #0]
 8017274:	4b27      	ldr	r3, [pc, #156]	; (8017314 <SystemClock_Config+0xe4>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	4a26      	ldr	r2, [pc, #152]	; (8017314 <SystemClock_Config+0xe4>)
 801727a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801727e:	6013      	str	r3, [r2, #0]
 8017280:	4b24      	ldr	r3, [pc, #144]	; (8017314 <SystemClock_Config+0xe4>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017288:	603b      	str	r3, [r7, #0]
 801728a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801728c:	2301      	movs	r3, #1
 801728e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017294:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017296:	2302      	movs	r3, #2
 8017298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801729a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801729e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80172a0:	2319      	movs	r3, #25
 80172a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80172a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80172a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80172aa:	2302      	movs	r3, #2
 80172ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80172ae:	2305      	movs	r3, #5
 80172b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80172b2:	2302      	movs	r3, #2
 80172b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80172b6:	f107 031c 	add.w	r3, r7, #28
 80172ba:	4618      	mov	r0, r3
 80172bc:	f004 fd1c 	bl	801bcf8 <HAL_RCC_OscConfig>
 80172c0:	4603      	mov	r3, r0
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d001      	beq.n	80172ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80172c6:	f000 fc19 	bl	8017afc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80172ca:	f003 ff4d 	bl	801b168 <HAL_PWREx_EnableOverDrive>
 80172ce:	4603      	mov	r3, r0
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d001      	beq.n	80172d8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80172d4:	f000 fc12 	bl	8017afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80172d8:	230f      	movs	r3, #15
 80172da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80172dc:	2302      	movs	r3, #2
 80172de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80172e0:	2300      	movs	r3, #0
 80172e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80172e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80172e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80172ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80172ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80172f0:	f107 0308 	add.w	r3, r7, #8
 80172f4:	2105      	movs	r1, #5
 80172f6:	4618      	mov	r0, r3
 80172f8:	f003 ff86 	bl	801b208 <HAL_RCC_ClockConfig>
 80172fc:	4603      	mov	r3, r0
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d001      	beq.n	8017306 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8017302:	f000 fbfb 	bl	8017afc <Error_Handler>
  }
}
 8017306:	bf00      	nop
 8017308:	3750      	adds	r7, #80	; 0x50
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	40023800 	.word	0x40023800
 8017314:	40007000 	.word	0x40007000

08017318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801731e:	463b      	mov	r3, r7
 8017320:	2200      	movs	r2, #0
 8017322:	601a      	str	r2, [r3, #0]
 8017324:	605a      	str	r2, [r3, #4]
 8017326:	609a      	str	r2, [r3, #8]
 8017328:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801732a:	4b22      	ldr	r3, [pc, #136]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801732c:	4a22      	ldr	r2, [pc, #136]	; (80173b8 <MX_ADC1_Init+0xa0>)
 801732e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017330:	4b20      	ldr	r3, [pc, #128]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017332:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017336:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017338:	4b1e      	ldr	r3, [pc, #120]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801733a:	2200      	movs	r2, #0
 801733c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801733e:	4b1d      	ldr	r3, [pc, #116]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017340:	2200      	movs	r2, #0
 8017342:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8017344:	4b1b      	ldr	r3, [pc, #108]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017346:	2200      	movs	r2, #0
 8017348:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801734a:	4b1a      	ldr	r3, [pc, #104]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801734c:	2200      	movs	r2, #0
 801734e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8017352:	4b18      	ldr	r3, [pc, #96]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017358:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 801735a:	4b16      	ldr	r3, [pc, #88]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801735c:	2200      	movs	r2, #0
 801735e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017360:	4b14      	ldr	r3, [pc, #80]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017362:	2200      	movs	r2, #0
 8017364:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8017366:	4b13      	ldr	r3, [pc, #76]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017368:	2201      	movs	r2, #1
 801736a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801736c:	4b11      	ldr	r3, [pc, #68]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801736e:	2200      	movs	r2, #0
 8017370:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017374:	4b0f      	ldr	r3, [pc, #60]	; (80173b4 <MX_ADC1_Init+0x9c>)
 8017376:	2201      	movs	r2, #1
 8017378:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801737a:	480e      	ldr	r0, [pc, #56]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801737c:	f000 fff2 	bl	8018364 <HAL_ADC_Init>
 8017380:	4603      	mov	r3, r0
 8017382:	2b00      	cmp	r3, #0
 8017384:	d001      	beq.n	801738a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8017386:	f000 fbb9 	bl	8017afc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 801738a:	2306      	movs	r3, #6
 801738c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801738e:	2301      	movs	r3, #1
 8017390:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017392:	2300      	movs	r3, #0
 8017394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017396:	463b      	mov	r3, r7
 8017398:	4619      	mov	r1, r3
 801739a:	4806      	ldr	r0, [pc, #24]	; (80173b4 <MX_ADC1_Init+0x9c>)
 801739c:	f001 f826 	bl	80183ec <HAL_ADC_ConfigChannel>
 80173a0:	4603      	mov	r3, r0
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d001      	beq.n	80173aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80173a6:	f000 fba9 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80173aa:	bf00      	nop
 80173ac:	3710      	adds	r7, #16
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}
 80173b2:	bf00      	nop
 80173b4:	20006ad0 	.word	0x20006ad0
 80173b8:	40012000 	.word	0x40012000

080173bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b084      	sub	sp, #16
 80173c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80173c2:	463b      	mov	r3, r7
 80173c4:	2200      	movs	r2, #0
 80173c6:	601a      	str	r2, [r3, #0]
 80173c8:	605a      	str	r2, [r3, #4]
 80173ca:	609a      	str	r2, [r3, #8]
 80173cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80173ce:	4b22      	ldr	r3, [pc, #136]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173d0:	4a22      	ldr	r2, [pc, #136]	; (801745c <MX_ADC2_Init+0xa0>)
 80173d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80173d4:	4b20      	ldr	r3, [pc, #128]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80173da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80173dc:	4b1e      	ldr	r3, [pc, #120]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173de:	2200      	movs	r2, #0
 80173e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80173e2:	4b1d      	ldr	r3, [pc, #116]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173e4:	2200      	movs	r2, #0
 80173e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80173e8:	4b1b      	ldr	r3, [pc, #108]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173ea:	2200      	movs	r2, #0
 80173ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80173ee:	4b1a      	ldr	r3, [pc, #104]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173f0:	2200      	movs	r2, #0
 80173f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80173f6:	4b18      	ldr	r3, [pc, #96]	; (8017458 <MX_ADC2_Init+0x9c>)
 80173f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80173fe:	4b16      	ldr	r3, [pc, #88]	; (8017458 <MX_ADC2_Init+0x9c>)
 8017400:	2200      	movs	r2, #0
 8017402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017404:	4b14      	ldr	r3, [pc, #80]	; (8017458 <MX_ADC2_Init+0x9c>)
 8017406:	2200      	movs	r2, #0
 8017408:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 801740a:	4b13      	ldr	r3, [pc, #76]	; (8017458 <MX_ADC2_Init+0x9c>)
 801740c:	2201      	movs	r2, #1
 801740e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8017410:	4b11      	ldr	r3, [pc, #68]	; (8017458 <MX_ADC2_Init+0x9c>)
 8017412:	2200      	movs	r2, #0
 8017414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017418:	4b0f      	ldr	r3, [pc, #60]	; (8017458 <MX_ADC2_Init+0x9c>)
 801741a:	2201      	movs	r2, #1
 801741c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 801741e:	480e      	ldr	r0, [pc, #56]	; (8017458 <MX_ADC2_Init+0x9c>)
 8017420:	f000 ffa0 	bl	8018364 <HAL_ADC_Init>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	d001      	beq.n	801742e <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 801742a:	f000 fb67 	bl	8017afc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801742e:	2307      	movs	r3, #7
 8017430:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8017432:	2301      	movs	r3, #1
 8017434:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8017436:	2300      	movs	r3, #0
 8017438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 801743a:	463b      	mov	r3, r7
 801743c:	4619      	mov	r1, r3
 801743e:	4806      	ldr	r0, [pc, #24]	; (8017458 <MX_ADC2_Init+0x9c>)
 8017440:	f000 ffd4 	bl	80183ec <HAL_ADC_ConfigChannel>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d001      	beq.n	801744e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 801744a:	f000 fb57 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801744e:	bf00      	nop
 8017450:	3710      	adds	r7, #16
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	200068e0 	.word	0x200068e0
 801745c:	40012100 	.word	0x40012100

08017460 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b082      	sub	sp, #8
 8017464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8017466:	463b      	mov	r3, r7
 8017468:	2200      	movs	r2, #0
 801746a:	601a      	str	r2, [r3, #0]
 801746c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801746e:	4b19      	ldr	r3, [pc, #100]	; (80174d4 <MX_DAC_Init+0x74>)
 8017470:	4a19      	ldr	r2, [pc, #100]	; (80174d8 <MX_DAC_Init+0x78>)
 8017472:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8017474:	4817      	ldr	r0, [pc, #92]	; (80174d4 <MX_DAC_Init+0x74>)
 8017476:	f001 fb2a 	bl	8018ace <HAL_DAC_Init>
 801747a:	4603      	mov	r3, r0
 801747c:	2b00      	cmp	r3, #0
 801747e:	d001      	beq.n	8017484 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8017480:	f000 fb3c 	bl	8017afc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8017484:	2300      	movs	r3, #0
 8017486:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8017488:	2300      	movs	r3, #0
 801748a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 801748c:	463b      	mov	r3, r7
 801748e:	2200      	movs	r2, #0
 8017490:	4619      	mov	r1, r3
 8017492:	4810      	ldr	r0, [pc, #64]	; (80174d4 <MX_DAC_Init+0x74>)
 8017494:	f001 fb62 	bl	8018b5c <HAL_DAC_ConfigChannel>
 8017498:	4603      	mov	r3, r0
 801749a:	2b00      	cmp	r3, #0
 801749c:	d001      	beq.n	80174a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 801749e:	f000 fb2d 	bl	8017afc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80174a2:	2302      	movs	r3, #2
 80174a4:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80174a6:	463b      	mov	r3, r7
 80174a8:	2210      	movs	r2, #16
 80174aa:	4619      	mov	r1, r3
 80174ac:	4809      	ldr	r0, [pc, #36]	; (80174d4 <MX_DAC_Init+0x74>)
 80174ae:	f001 fb55 	bl	8018b5c <HAL_DAC_ConfigChannel>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d001      	beq.n	80174bc <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80174b8:	f000 fb20 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 620);  //(620*4095)/330;//50mv
 80174bc:	f44f 731b 	mov.w	r3, #620	; 0x26c
 80174c0:	2200      	movs	r2, #0
 80174c2:	2110      	movs	r1, #16
 80174c4:	4803      	ldr	r0, [pc, #12]	; (80174d4 <MX_DAC_Init+0x74>)
 80174c6:	f001 fb24 	bl	8018b12 <HAL_DAC_SetValue>
  /* USER CODE END DAC_Init 2 */

}
 80174ca:	bf00      	nop
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	20006b34 	.word	0x20006b34
 80174d8:	40007400 	.word	0x40007400

080174dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80174e0:	4b17      	ldr	r3, [pc, #92]	; (8017540 <MX_SPI2_Init+0x64>)
 80174e2:	4a18      	ldr	r2, [pc, #96]	; (8017544 <MX_SPI2_Init+0x68>)
 80174e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80174e6:	4b16      	ldr	r3, [pc, #88]	; (8017540 <MX_SPI2_Init+0x64>)
 80174e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80174ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80174ee:	4b14      	ldr	r3, [pc, #80]	; (8017540 <MX_SPI2_Init+0x64>)
 80174f0:	2200      	movs	r2, #0
 80174f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80174f4:	4b12      	ldr	r3, [pc, #72]	; (8017540 <MX_SPI2_Init+0x64>)
 80174f6:	2200      	movs	r2, #0
 80174f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80174fa:	4b11      	ldr	r3, [pc, #68]	; (8017540 <MX_SPI2_Init+0x64>)
 80174fc:	2202      	movs	r2, #2
 80174fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017500:	4b0f      	ldr	r3, [pc, #60]	; (8017540 <MX_SPI2_Init+0x64>)
 8017502:	2201      	movs	r2, #1
 8017504:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017506:	4b0e      	ldr	r3, [pc, #56]	; (8017540 <MX_SPI2_Init+0x64>)
 8017508:	f44f 7200 	mov.w	r2, #512	; 0x200
 801750c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801750e:	4b0c      	ldr	r3, [pc, #48]	; (8017540 <MX_SPI2_Init+0x64>)
 8017510:	2200      	movs	r2, #0
 8017512:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017514:	4b0a      	ldr	r3, [pc, #40]	; (8017540 <MX_SPI2_Init+0x64>)
 8017516:	2280      	movs	r2, #128	; 0x80
 8017518:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801751a:	4b09      	ldr	r3, [pc, #36]	; (8017540 <MX_SPI2_Init+0x64>)
 801751c:	2200      	movs	r2, #0
 801751e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017520:	4b07      	ldr	r3, [pc, #28]	; (8017540 <MX_SPI2_Init+0x64>)
 8017522:	2200      	movs	r2, #0
 8017524:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8017526:	4b06      	ldr	r3, [pc, #24]	; (8017540 <MX_SPI2_Init+0x64>)
 8017528:	220a      	movs	r2, #10
 801752a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801752c:	4804      	ldr	r0, [pc, #16]	; (8017540 <MX_SPI2_Init+0x64>)
 801752e:	f004 fe81 	bl	801c234 <HAL_SPI_Init>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	d001      	beq.n	801753c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8017538:	f000 fae0 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 801753c:	bf00      	nop
 801753e:	bd80      	pop	{r7, pc}
 8017540:	20006888 	.word	0x20006888
 8017544:	40003800 	.word	0x40003800

08017548 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 801754c:	4b18      	ldr	r3, [pc, #96]	; (80175b0 <MX_SPI3_Init+0x68>)
 801754e:	4a19      	ldr	r2, [pc, #100]	; (80175b4 <MX_SPI3_Init+0x6c>)
 8017550:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017552:	4b17      	ldr	r3, [pc, #92]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017554:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017558:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801755a:	4b15      	ldr	r3, [pc, #84]	; (80175b0 <MX_SPI3_Init+0x68>)
 801755c:	2200      	movs	r2, #0
 801755e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8017560:	4b13      	ldr	r3, [pc, #76]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017566:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017568:	4b11      	ldr	r3, [pc, #68]	; (80175b0 <MX_SPI3_Init+0x68>)
 801756a:	2200      	movs	r2, #0
 801756c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801756e:	4b10      	ldr	r3, [pc, #64]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017570:	2200      	movs	r2, #0
 8017572:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017574:	4b0e      	ldr	r3, [pc, #56]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017576:	f44f 7200 	mov.w	r2, #512	; 0x200
 801757a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 801757c:	4b0c      	ldr	r3, [pc, #48]	; (80175b0 <MX_SPI3_Init+0x68>)
 801757e:	2210      	movs	r2, #16
 8017580:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8017582:	4b0b      	ldr	r3, [pc, #44]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017584:	2280      	movs	r2, #128	; 0x80
 8017586:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017588:	4b09      	ldr	r3, [pc, #36]	; (80175b0 <MX_SPI3_Init+0x68>)
 801758a:	2200      	movs	r2, #0
 801758c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801758e:	4b08      	ldr	r3, [pc, #32]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017590:	2200      	movs	r2, #0
 8017592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8017594:	4b06      	ldr	r3, [pc, #24]	; (80175b0 <MX_SPI3_Init+0x68>)
 8017596:	220a      	movs	r2, #10
 8017598:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801759a:	4805      	ldr	r0, [pc, #20]	; (80175b0 <MX_SPI3_Init+0x68>)
 801759c:	f004 fe4a 	bl	801c234 <HAL_SPI_Init>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d001      	beq.n	80175aa <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80175a6:	f000 faa9 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80175aa:	bf00      	nop
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	20006a18 	.word	0x20006a18
 80175b4:	40003c00 	.word	0x40003c00

080175b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80175be:	f107 0308 	add.w	r3, r7, #8
 80175c2:	2200      	movs	r2, #0
 80175c4:	601a      	str	r2, [r3, #0]
 80175c6:	605a      	str	r2, [r3, #4]
 80175c8:	609a      	str	r2, [r3, #8]
 80175ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80175cc:	463b      	mov	r3, r7
 80175ce:	2200      	movs	r2, #0
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  octim1.Pulse = 500;
 80175d4:	4b30      	ldr	r3, [pc, #192]	; (8017698 <MX_TIM1_Init+0xe0>)
 80175d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80175da:	605a      	str	r2, [r3, #4]
  octim1.OCMode = TIM_OCMODE_PWM2;
 80175dc:	4b2e      	ldr	r3, [pc, #184]	; (8017698 <MX_TIM1_Init+0xe0>)
 80175de:	2270      	movs	r2, #112	; 0x70
 80175e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80175e2:	4b2e      	ldr	r3, [pc, #184]	; (801769c <MX_TIM1_Init+0xe4>)
 80175e4:	4a2e      	ldr	r2, [pc, #184]	; (80176a0 <MX_TIM1_Init+0xe8>)
 80175e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 89;
 80175e8:	4b2c      	ldr	r3, [pc, #176]	; (801769c <MX_TIM1_Init+0xe4>)
 80175ea:	2259      	movs	r2, #89	; 0x59
 80175ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80175ee:	4b2b      	ldr	r3, [pc, #172]	; (801769c <MX_TIM1_Init+0xe4>)
 80175f0:	2210      	movs	r2, #16
 80175f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80175f4:	4b29      	ldr	r3, [pc, #164]	; (801769c <MX_TIM1_Init+0xe4>)
 80175f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80175fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80175fc:	4b27      	ldr	r3, [pc, #156]	; (801769c <MX_TIM1_Init+0xe4>)
 80175fe:	2200      	movs	r2, #0
 8017600:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017602:	4b26      	ldr	r3, [pc, #152]	; (801769c <MX_TIM1_Init+0xe4>)
 8017604:	2200      	movs	r2, #0
 8017606:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017608:	4b24      	ldr	r3, [pc, #144]	; (801769c <MX_TIM1_Init+0xe4>)
 801760a:	2280      	movs	r2, #128	; 0x80
 801760c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801760e:	4823      	ldr	r0, [pc, #140]	; (801769c <MX_TIM1_Init+0xe4>)
 8017610:	f005 fd0c 	bl	801d02c <HAL_TIM_Base_Init>
 8017614:	4603      	mov	r3, r0
 8017616:	2b00      	cmp	r3, #0
 8017618:	d001      	beq.n	801761e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 801761a:	f000 fa6f 	bl	8017afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801761e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017624:	f107 0308 	add.w	r3, r7, #8
 8017628:	4619      	mov	r1, r3
 801762a:	481c      	ldr	r0, [pc, #112]	; (801769c <MX_TIM1_Init+0xe4>)
 801762c:	f005 ff1e 	bl	801d46c <HAL_TIM_ConfigClockSource>
 8017630:	4603      	mov	r3, r0
 8017632:	2b00      	cmp	r3, #0
 8017634:	d001      	beq.n	801763a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8017636:	f000 fa61 	bl	8017afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801763a:	2300      	movs	r3, #0
 801763c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801763e:	2300      	movs	r3, #0
 8017640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017642:	463b      	mov	r3, r7
 8017644:	4619      	mov	r1, r3
 8017646:	4815      	ldr	r0, [pc, #84]	; (801769c <MX_TIM1_Init+0xe4>)
 8017648:	f006 fae6 	bl	801dc18 <HAL_TIMEx_MasterConfigSynchronization>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d001      	beq.n	8017656 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8017652:	f000 fa53 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_OC_ConfigChannel(&htim1, &octim1, 1 );
 8017656:	2201      	movs	r2, #1
 8017658:	490f      	ldr	r1, [pc, #60]	; (8017698 <MX_TIM1_Init+0xe0>)
 801765a:	4810      	ldr	r0, [pc, #64]	; (801769c <MX_TIM1_Init+0xe4>)
 801765c:	f005 feae 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim1);
 8017660:	4b0e      	ldr	r3, [pc, #56]	; (801769c <MX_TIM1_Init+0xe4>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	681a      	ldr	r2, [r3, #0]
 8017666:	4b0d      	ldr	r3, [pc, #52]	; (801769c <MX_TIM1_Init+0xe4>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	f042 0204 	orr.w	r2, r2, #4
 801766e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC1 | TIM_DMA_TRIGGER);
 8017670:	4b0a      	ldr	r3, [pc, #40]	; (801769c <MX_TIM1_Init+0xe4>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	68da      	ldr	r2, [r3, #12]
 8017676:	4b09      	ldr	r3, [pc, #36]	; (801769c <MX_TIM1_Init+0xe4>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f442 4284 	orr.w	r2, r2, #16896	; 0x4200
 801767e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8017680:	4b06      	ldr	r3, [pc, #24]	; (801769c <MX_TIM1_Init+0xe4>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	4b05      	ldr	r3, [pc, #20]	; (801769c <MX_TIM1_Init+0xe4>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	f042 0201 	orr.w	r2, r2, #1
 801768e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */

}
 8017690:	bf00      	nop
 8017692:	3718      	adds	r7, #24
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}
 8017698:	20006ba8 	.word	0x20006ba8
 801769c:	20006bc4 	.word	0x20006bc4
 80176a0:	40010000 	.word	0x40010000

080176a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b086      	sub	sp, #24
 80176a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80176aa:	f107 0308 	add.w	r3, r7, #8
 80176ae:	2200      	movs	r2, #0
 80176b0:	601a      	str	r2, [r3, #0]
 80176b2:	605a      	str	r2, [r3, #4]
 80176b4:	609a      	str	r2, [r3, #8]
 80176b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80176b8:	463b      	mov	r3, r7
 80176ba:	2200      	movs	r2, #0
 80176bc:	601a      	str	r2, [r3, #0]
 80176be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80176c0:	4b1d      	ldr	r3, [pc, #116]	; (8017738 <MX_TIM3_Init+0x94>)
 80176c2:	4a1e      	ldr	r2, [pc, #120]	; (801773c <MX_TIM3_Init+0x98>)
 80176c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80176c6:	4b1c      	ldr	r3, [pc, #112]	; (8017738 <MX_TIM3_Init+0x94>)
 80176c8:	220b      	movs	r2, #11
 80176ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80176cc:	4b1a      	ldr	r3, [pc, #104]	; (8017738 <MX_TIM3_Init+0x94>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 80176d2:	4b19      	ldr	r3, [pc, #100]	; (8017738 <MX_TIM3_Init+0x94>)
 80176d4:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80176d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80176da:	4b17      	ldr	r3, [pc, #92]	; (8017738 <MX_TIM3_Init+0x94>)
 80176dc:	2200      	movs	r2, #0
 80176de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80176e0:	4b15      	ldr	r3, [pc, #84]	; (8017738 <MX_TIM3_Init+0x94>)
 80176e2:	2280      	movs	r2, #128	; 0x80
 80176e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80176e6:	4814      	ldr	r0, [pc, #80]	; (8017738 <MX_TIM3_Init+0x94>)
 80176e8:	f005 fca0 	bl	801d02c <HAL_TIM_Base_Init>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d001      	beq.n	80176f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80176f2:	f000 fa03 	bl	8017afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80176f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80176fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80176fc:	f107 0308 	add.w	r3, r7, #8
 8017700:	4619      	mov	r1, r3
 8017702:	480d      	ldr	r0, [pc, #52]	; (8017738 <MX_TIM3_Init+0x94>)
 8017704:	f005 feb2 	bl	801d46c <HAL_TIM_ConfigClockSource>
 8017708:	4603      	mov	r3, r0
 801770a:	2b00      	cmp	r3, #0
 801770c:	d001      	beq.n	8017712 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 801770e:	f000 f9f5 	bl	8017afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8017712:	2320      	movs	r3, #32
 8017714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017716:	2300      	movs	r3, #0
 8017718:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801771a:	463b      	mov	r3, r7
 801771c:	4619      	mov	r1, r3
 801771e:	4806      	ldr	r0, [pc, #24]	; (8017738 <MX_TIM3_Init+0x94>)
 8017720:	f006 fa7a 	bl	801dc18 <HAL_TIMEx_MasterConfigSynchronization>
 8017724:	4603      	mov	r3, r0
 8017726:	2b00      	cmp	r3, #0
 8017728:	d001      	beq.n	801772e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 801772a:	f000 f9e7 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 801772e:	bf00      	nop
 8017730:	3718      	adds	r7, #24
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	200069d0 	.word	0x200069d0
 801773c:	40000400 	.word	0x40000400

08017740 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b086      	sub	sp, #24
 8017744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017746:	f107 0308 	add.w	r3, r7, #8
 801774a:	2200      	movs	r2, #0
 801774c:	601a      	str	r2, [r3, #0]
 801774e:	605a      	str	r2, [r3, #4]
 8017750:	609a      	str	r2, [r3, #8]
 8017752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017754:	463b      	mov	r3, r7
 8017756:	2200      	movs	r2, #0
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */
  octim5.Pulse = (FARR[List[FREQ_OUT].Val]+1)/2;
 801775c:	4b3a      	ldr	r3, [pc, #232]	; (8017848 <MX_TIM5_Init+0x108>)
 801775e:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8017762:	461a      	mov	r2, r3
 8017764:	4b39      	ldr	r3, [pc, #228]	; (801784c <MX_TIM5_Init+0x10c>)
 8017766:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801776a:	3301      	adds	r3, #1
 801776c:	0fda      	lsrs	r2, r3, #31
 801776e:	4413      	add	r3, r2
 8017770:	105b      	asrs	r3, r3, #1
 8017772:	461a      	mov	r2, r3
 8017774:	4b36      	ldr	r3, [pc, #216]	; (8017850 <MX_TIM5_Init+0x110>)
 8017776:	605a      	str	r2, [r3, #4]
  octim5.OCMode = TIM_OCMODE_PWM2;
 8017778:	4b35      	ldr	r3, [pc, #212]	; (8017850 <MX_TIM5_Init+0x110>)
 801777a:	2270      	movs	r2, #112	; 0x70
 801777c:	601a      	str	r2, [r3, #0]
  octim5.OCFastMode = TIM_OCFAST_ENABLE;
 801777e:	4b34      	ldr	r3, [pc, #208]	; (8017850 <MX_TIM5_Init+0x110>)
 8017780:	2204      	movs	r2, #4
 8017782:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017784:	4b33      	ldr	r3, [pc, #204]	; (8017854 <MX_TIM5_Init+0x114>)
 8017786:	4a34      	ldr	r2, [pc, #208]	; (8017858 <MX_TIM5_Init+0x118>)
 8017788:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 801778a:	4b32      	ldr	r3, [pc, #200]	; (8017854 <MX_TIM5_Init+0x114>)
 801778c:	2209      	movs	r2, #9
 801778e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017790:	4b30      	ldr	r3, [pc, #192]	; (8017854 <MX_TIM5_Init+0x114>)
 8017792:	2200      	movs	r2, #0
 8017794:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 18000-1;
 8017796:	4b2f      	ldr	r3, [pc, #188]	; (8017854 <MX_TIM5_Init+0x114>)
 8017798:	f244 624f 	movw	r2, #17999	; 0x464f
 801779c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801779e:	4b2d      	ldr	r3, [pc, #180]	; (8017854 <MX_TIM5_Init+0x114>)
 80177a0:	2200      	movs	r2, #0
 80177a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80177a4:	4b2b      	ldr	r3, [pc, #172]	; (8017854 <MX_TIM5_Init+0x114>)
 80177a6:	2280      	movs	r2, #128	; 0x80
 80177a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80177aa:	482a      	ldr	r0, [pc, #168]	; (8017854 <MX_TIM5_Init+0x114>)
 80177ac:	f005 fc3e 	bl	801d02c <HAL_TIM_Base_Init>
 80177b0:	4603      	mov	r3, r0
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d001      	beq.n	80177ba <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80177b6:	f000 f9a1 	bl	8017afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80177ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80177be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80177c0:	f107 0308 	add.w	r3, r7, #8
 80177c4:	4619      	mov	r1, r3
 80177c6:	4823      	ldr	r0, [pc, #140]	; (8017854 <MX_TIM5_Init+0x114>)
 80177c8:	f005 fe50 	bl	801d46c <HAL_TIM_ConfigClockSource>
 80177cc:	4603      	mov	r3, r0
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d001      	beq.n	80177d6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80177d2:	f000 f993 	bl	8017afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80177d6:	2300      	movs	r3, #0
 80177d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177da:	2300      	movs	r3, #0
 80177dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80177de:	463b      	mov	r3, r7
 80177e0:	4619      	mov	r1, r3
 80177e2:	481c      	ldr	r0, [pc, #112]	; (8017854 <MX_TIM5_Init+0x114>)
 80177e4:	f006 fa18 	bl	801dc18 <HAL_TIMEx_MasterConfigSynchronization>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d001      	beq.n	80177f2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80177ee:	f000 f985 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  htim5.Init.Period = FARR[List[FREQ_OUT].Val];
 80177f2:	4b15      	ldr	r3, [pc, #84]	; (8017848 <MX_TIM5_Init+0x108>)
 80177f4:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 80177f8:	461a      	mov	r2, r3
 80177fa:	4b14      	ldr	r3, [pc, #80]	; (801784c <MX_TIM5_Init+0x10c>)
 80177fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8017800:	461a      	mov	r2, r3
 8017802:	4b14      	ldr	r3, [pc, #80]	; (8017854 <MX_TIM5_Init+0x114>)
 8017804:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017806:	4813      	ldr	r0, [pc, #76]	; (8017854 <MX_TIM5_Init+0x114>)
 8017808:	f005 fc10 	bl	801d02c <HAL_TIM_Base_Init>
 801780c:	4603      	mov	r3, r0
 801780e:	2b00      	cmp	r3, #0
 8017810:	d001      	beq.n	8017816 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8017812:	f000 f973 	bl	8017afc <Error_Handler>
  }
  HAL_TIM_OC_ConfigChannel(&htim5, &octim5, 3 );
 8017816:	2203      	movs	r2, #3
 8017818:	490d      	ldr	r1, [pc, #52]	; (8017850 <MX_TIM5_Init+0x110>)
 801781a:	480e      	ldr	r0, [pc, #56]	; (8017854 <MX_TIM5_Init+0x114>)
 801781c:	f005 fdce 	bl	801d3bc <HAL_TIM_OC_ConfigChannel>
  __HAL_TIM_URS_ENABLE(&htim5);
 8017820:	4b0c      	ldr	r3, [pc, #48]	; (8017854 <MX_TIM5_Init+0x114>)
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	681a      	ldr	r2, [r3, #0]
 8017826:	4b0b      	ldr	r3, [pc, #44]	; (8017854 <MX_TIM5_Init+0x114>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	f042 0204 	orr.w	r2, r2, #4
 801782e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_ENABLE(&htim5);
 8017830:	4b08      	ldr	r3, [pc, #32]	; (8017854 <MX_TIM5_Init+0x114>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	681a      	ldr	r2, [r3, #0]
 8017836:	4b07      	ldr	r3, [pc, #28]	; (8017854 <MX_TIM5_Init+0x114>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	f042 0201 	orr.w	r2, r2, #1
 801783e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM5_Init 2 */

}
 8017840:	bf00      	nop
 8017842:	3718      	adds	r7, #24
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20000298 	.word	0x20000298
 801784c:	08000ae8 	.word	0x08000ae8
 8017850:	20006b18 	.word	0x20006b18
 8017854:	20006988 	.word	0x20006988
 8017858:	40000c00 	.word	0x40000c00

0801785c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */
  // aka tim_da
  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017862:	463b      	mov	r3, r7
 8017864:	2200      	movs	r2, #0
 8017866:	601a      	str	r2, [r3, #0]
 8017868:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 801786a:	4b1d      	ldr	r3, [pc, #116]	; (80178e0 <MX_TIM7_Init+0x84>)
 801786c:	4a1d      	ldr	r2, [pc, #116]	; (80178e4 <MX_TIM7_Init+0x88>)
 801786e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2;
 8017870:	4b1b      	ldr	r3, [pc, #108]	; (80178e0 <MX_TIM7_Init+0x84>)
 8017872:	2202      	movs	r2, #2
 8017874:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017876:	4b1a      	ldr	r3, [pc, #104]	; (80178e0 <MX_TIM7_Init+0x84>)
 8017878:	2200      	movs	r2, #0
 801787a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 801787c:	4b18      	ldr	r3, [pc, #96]	; (80178e0 <MX_TIM7_Init+0x84>)
 801787e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017882:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017884:	4b16      	ldr	r3, [pc, #88]	; (80178e0 <MX_TIM7_Init+0x84>)
 8017886:	2200      	movs	r2, #0
 8017888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801788a:	4815      	ldr	r0, [pc, #84]	; (80178e0 <MX_TIM7_Init+0x84>)
 801788c:	f005 fbce 	bl	801d02c <HAL_TIM_Base_Init>
 8017890:	4603      	mov	r3, r0
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8017896:	f000 f931 	bl	8017afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801789a:	2300      	movs	r3, #0
 801789c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801789e:	2300      	movs	r3, #0
 80178a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80178a2:	463b      	mov	r3, r7
 80178a4:	4619      	mov	r1, r3
 80178a6:	480e      	ldr	r0, [pc, #56]	; (80178e0 <MX_TIM7_Init+0x84>)
 80178a8:	f006 f9b6 	bl	801dc18 <HAL_TIMEx_MasterConfigSynchronization>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d001      	beq.n	80178b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80178b2:	f000 f923 	bl	8017afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  __HAL_TIM_ENABLE_DMA(&htim7,TIM_DMA_UPDATE);
 80178b6:	4b0a      	ldr	r3, [pc, #40]	; (80178e0 <MX_TIM7_Init+0x84>)
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	68da      	ldr	r2, [r3, #12]
 80178bc:	4b08      	ldr	r3, [pc, #32]	; (80178e0 <MX_TIM7_Init+0x84>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80178c4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim7);
 80178c6:	4b06      	ldr	r3, [pc, #24]	; (80178e0 <MX_TIM7_Init+0x84>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	4b04      	ldr	r3, [pc, #16]	; (80178e0 <MX_TIM7_Init+0x84>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f042 0201 	orr.w	r2, r2, #1
 80178d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_Init 2 */

}
 80178d6:	bf00      	nop
 80178d8:	3708      	adds	r7, #8
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	20006c0c 	.word	0x20006c0c
 80178e4:	40001400 	.word	0x40001400

080178e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80178ee:	2300      	movs	r3, #0
 80178f0:	607b      	str	r3, [r7, #4]
 80178f2:	4b1b      	ldr	r3, [pc, #108]	; (8017960 <MX_DMA_Init+0x78>)
 80178f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178f6:	4a1a      	ldr	r2, [pc, #104]	; (8017960 <MX_DMA_Init+0x78>)
 80178f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80178fc:	6313      	str	r3, [r2, #48]	; 0x30
 80178fe:	4b18      	ldr	r3, [pc, #96]	; (8017960 <MX_DMA_Init+0x78>)
 8017900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017906:	607b      	str	r3, [r7, #4]
 8017908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 801790a:	2300      	movs	r3, #0
 801790c:	603b      	str	r3, [r7, #0]
 801790e:	4b14      	ldr	r3, [pc, #80]	; (8017960 <MX_DMA_Init+0x78>)
 8017910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017912:	4a13      	ldr	r2, [pc, #76]	; (8017960 <MX_DMA_Init+0x78>)
 8017914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017918:	6313      	str	r3, [r2, #48]	; 0x30
 801791a:	4b11      	ldr	r3, [pc, #68]	; (8017960 <MX_DMA_Init+0x78>)
 801791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801791e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017922:	603b      	str	r3, [r7, #0]
 8017924:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8017926:	2200      	movs	r2, #0
 8017928:	2100      	movs	r1, #0
 801792a:	200d      	movs	r0, #13
 801792c:	f001 f88b 	bl	8018a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8017930:	200d      	movs	r0, #13
 8017932:	f001 f8a4 	bl	8018a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8017936:	2200      	movs	r2, #0
 8017938:	2100      	movs	r1, #0
 801793a:	2010      	movs	r0, #16
 801793c:	f001 f883 	bl	8018a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8017940:	2010      	movs	r0, #16
 8017942:	f001 f89c 	bl	8018a7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8017946:	2200      	movs	r2, #0
 8017948:	2100      	movs	r1, #0
 801794a:	2038      	movs	r0, #56	; 0x38
 801794c:	f001 f87b 	bl	8018a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017950:	2038      	movs	r0, #56	; 0x38
 8017952:	f001 f894 	bl	8018a7e <HAL_NVIC_EnableIRQ>

}
 8017956:	bf00      	nop
 8017958:	3708      	adds	r7, #8
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}
 801795e:	bf00      	nop
 8017960:	40023800 	.word	0x40023800

08017964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b08a      	sub	sp, #40	; 0x28
 8017968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801796a:	f107 0314 	add.w	r3, r7, #20
 801796e:	2200      	movs	r2, #0
 8017970:	601a      	str	r2, [r3, #0]
 8017972:	605a      	str	r2, [r3, #4]
 8017974:	609a      	str	r2, [r3, #8]
 8017976:	60da      	str	r2, [r3, #12]
 8017978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801797a:	2300      	movs	r3, #0
 801797c:	613b      	str	r3, [r7, #16]
 801797e:	4b52      	ldr	r3, [pc, #328]	; (8017ac8 <MX_GPIO_Init+0x164>)
 8017980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017982:	4a51      	ldr	r2, [pc, #324]	; (8017ac8 <MX_GPIO_Init+0x164>)
 8017984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017988:	6313      	str	r3, [r2, #48]	; 0x30
 801798a:	4b4f      	ldr	r3, [pc, #316]	; (8017ac8 <MX_GPIO_Init+0x164>)
 801798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017992:	613b      	str	r3, [r7, #16]
 8017994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017996:	2300      	movs	r3, #0
 8017998:	60fb      	str	r3, [r7, #12]
 801799a:	4b4b      	ldr	r3, [pc, #300]	; (8017ac8 <MX_GPIO_Init+0x164>)
 801799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801799e:	4a4a      	ldr	r2, [pc, #296]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179a0:	f043 0301 	orr.w	r3, r3, #1
 80179a4:	6313      	str	r3, [r2, #48]	; 0x30
 80179a6:	4b48      	ldr	r3, [pc, #288]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179aa:	f003 0301 	and.w	r3, r3, #1
 80179ae:	60fb      	str	r3, [r7, #12]
 80179b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80179b2:	2300      	movs	r3, #0
 80179b4:	60bb      	str	r3, [r7, #8]
 80179b6:	4b44      	ldr	r3, [pc, #272]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179ba:	4a43      	ldr	r2, [pc, #268]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179bc:	f043 0304 	orr.w	r3, r3, #4
 80179c0:	6313      	str	r3, [r2, #48]	; 0x30
 80179c2:	4b41      	ldr	r3, [pc, #260]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179c6:	f003 0304 	and.w	r3, r3, #4
 80179ca:	60bb      	str	r3, [r7, #8]
 80179cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80179ce:	2300      	movs	r3, #0
 80179d0:	607b      	str	r3, [r7, #4]
 80179d2:	4b3d      	ldr	r3, [pc, #244]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179d6:	4a3c      	ldr	r2, [pc, #240]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179d8:	f043 0302 	orr.w	r3, r3, #2
 80179dc:	6313      	str	r3, [r2, #48]	; 0x30
 80179de:	4b3a      	ldr	r3, [pc, #232]	; (8017ac8 <MX_GPIO_Init+0x164>)
 80179e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179e2:	f003 0302 	and.w	r3, r3, #2
 80179e6:	607b      	str	r3, [r7, #4]
 80179e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Fo2_GPIO_Port, Fo2_Pin, GPIO_PIN_RESET);
 80179ea:	2200      	movs	r2, #0
 80179ec:	2104      	movs	r1, #4
 80179ee:	4837      	ldr	r0, [pc, #220]	; (8017acc <MX_GPIO_Init+0x168>)
 80179f0:	f002 f980 	bl	8019cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Az_Pin|Ay_Pin|LcdRs_Pin, GPIO_PIN_RESET);
 80179f4:	2200      	movs	r2, #0
 80179f6:	f44f 6103 	mov.w	r1, #2096	; 0x830
 80179fa:	4835      	ldr	r0, [pc, #212]	; (8017ad0 <MX_GPIO_Init+0x16c>)
 80179fc:	f002 f97a 	bl	8019cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ax_Pin|Dres_Pin, GPIO_PIN_RESET);
 8017a00:	2200      	movs	r2, #0
 8017a02:	f240 2101 	movw	r1, #513	; 0x201
 8017a06:	4833      	ldr	r0, [pc, #204]	; (8017ad4 <MX_GPIO_Init+0x170>)
 8017a08:	f002 f974 	bl	8019cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_Pin|TpCs_Pin, GPIO_PIN_SET);
 8017a0c:	2201      	movs	r2, #1
 8017a0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8017a12:	4830      	ldr	r0, [pc, #192]	; (8017ad4 <MX_GPIO_Init+0x170>)
 8017a14:	f002 f96e 	bl	8019cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LcdCs_GPIO_Port, LcdCs_Pin, GPIO_PIN_SET);
 8017a18:	2201      	movs	r2, #1
 8017a1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017a1e:	482c      	ldr	r0, [pc, #176]	; (8017ad0 <MX_GPIO_Init+0x16c>)
 8017a20:	f002 f968 	bl	8019cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Fo2_Pin */
  GPIO_InitStruct.Pin = Fo2_Pin;
 8017a24:	2304      	movs	r3, #4
 8017a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017a28:	2301      	movs	r3, #1
 8017a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a30:	2300      	movs	r3, #0
 8017a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Fo2_GPIO_Port, &GPIO_InitStruct);
 8017a34:	f107 0314 	add.w	r3, r7, #20
 8017a38:	4619      	mov	r1, r3
 8017a3a:	4824      	ldr	r0, [pc, #144]	; (8017acc <MX_GPIO_Init+0x168>)
 8017a3c:	f001 fed2 	bl	80197e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Az_Pin Ay_Pin LcdRs_Pin LcdCs_Pin */
  GPIO_InitStruct.Pin = Az_Pin|Ay_Pin|LcdRs_Pin|LcdCs_Pin;
 8017a40:	f641 0330 	movw	r3, #6192	; 0x1830
 8017a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017a46:	2301      	movs	r3, #1
 8017a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017a52:	f107 0314 	add.w	r3, r7, #20
 8017a56:	4619      	mov	r1, r3
 8017a58:	481d      	ldr	r0, [pc, #116]	; (8017ad0 <MX_GPIO_Init+0x16c>)
 8017a5a:	f001 fec3 	bl	80197e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ax_Pin SS_Pin TpCs_Pin Dres_Pin */
  GPIO_InitStruct.Pin = Ax_Pin|SS_Pin|TpCs_Pin|Dres_Pin;
 8017a5e:	f241 2341 	movw	r3, #4673	; 0x1241
 8017a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017a64:	2301      	movs	r3, #1
 8017a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017a70:	f107 0314 	add.w	r3, r7, #20
 8017a74:	4619      	mov	r1, r3
 8017a76:	4817      	ldr	r0, [pc, #92]	; (8017ad4 <MX_GPIO_Init+0x170>)
 8017a78:	f001 feb4 	bl	80197e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot1_Pin */
  GPIO_InitStruct.Pin = Boot1_Pin;
 8017a7c:	2304      	movs	r3, #4
 8017a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017a80:	2300      	movs	r3, #0
 8017a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a84:	2300      	movs	r3, #0
 8017a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Boot1_GPIO_Port, &GPIO_InitStruct);
 8017a88:	f107 0314 	add.w	r3, r7, #20
 8017a8c:	4619      	mov	r1, r3
 8017a8e:	4811      	ldr	r0, [pc, #68]	; (8017ad4 <MX_GPIO_Init+0x170>)
 8017a90:	f001 fea8 	bl	80197e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TpI_Pin */
  GPIO_InitStruct.Pin = TpI_Pin;
 8017a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8017a9a:	4b0f      	ldr	r3, [pc, #60]	; (8017ad8 <MX_GPIO_Init+0x174>)
 8017a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TpI_GPIO_Port, &GPIO_InitStruct);
 8017aa2:	f107 0314 	add.w	r3, r7, #20
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	480a      	ldr	r0, [pc, #40]	; (8017ad4 <MX_GPIO_Init+0x170>)
 8017aaa:	f001 fe9b 	bl	80197e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8017aae:	2200      	movs	r2, #0
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	2017      	movs	r0, #23
 8017ab4:	f000 ffc7 	bl	8018a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8017ab8:	2017      	movs	r0, #23
 8017aba:	f000 ffe0 	bl	8018a7e <HAL_NVIC_EnableIRQ>

}
 8017abe:	bf00      	nop
 8017ac0:	3728      	adds	r7, #40	; 0x28
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	40023800 	.word	0x40023800
 8017acc:	40020000 	.word	0x40020000
 8017ad0:	40020800 	.word	0x40020800
 8017ad4:	40020400 	.word	0x40020400
 8017ad8:	10110000 	.word	0x10110000

08017adc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 )
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	4a04      	ldr	r2, [pc, #16]	; (8017af8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	d101      	bne.n	8017af0 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
	  Tim3_ISP();
 8017aec:	f7f4 fe38 	bl	800c760 <Tim3_ISP>
  }
}
 8017af0:	bf00      	nop
 8017af2:	3708      	adds	r7, #8
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}
 8017af8:	200069d0 	.word	0x200069d0

08017afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017afc:	b480      	push	{r7}
 8017afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017b00:	b672      	cpsid	i
}
 8017b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017b04:	e7fe      	b.n	8017b04 <Error_Handler+0x8>
	...

08017b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b083      	sub	sp, #12
 8017b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017b0e:	2300      	movs	r3, #0
 8017b10:	607b      	str	r3, [r7, #4]
 8017b12:	4b10      	ldr	r3, [pc, #64]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b16:	4a0f      	ldr	r2, [pc, #60]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8017b1e:	4b0d      	ldr	r3, [pc, #52]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017b26:	607b      	str	r3, [r7, #4]
 8017b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	603b      	str	r3, [r7, #0]
 8017b2e:	4b09      	ldr	r3, [pc, #36]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b32:	4a08      	ldr	r2, [pc, #32]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017b38:	6413      	str	r3, [r2, #64]	; 0x40
 8017b3a:	4b06      	ldr	r3, [pc, #24]	; (8017b54 <HAL_MspInit+0x4c>)
 8017b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017b42:	603b      	str	r3, [r7, #0]
 8017b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017b46:	bf00      	nop
 8017b48:	370c      	adds	r7, #12
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b50:	4770      	bx	lr
 8017b52:	bf00      	nop
 8017b54:	40023800 	.word	0x40023800

08017b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b08c      	sub	sp, #48	; 0x30
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b60:	f107 031c 	add.w	r3, r7, #28
 8017b64:	2200      	movs	r2, #0
 8017b66:	601a      	str	r2, [r3, #0]
 8017b68:	605a      	str	r2, [r3, #4]
 8017b6a:	609a      	str	r2, [r3, #8]
 8017b6c:	60da      	str	r2, [r3, #12]
 8017b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	4a45      	ldr	r2, [pc, #276]	; (8017c8c <HAL_ADC_MspInit+0x134>)
 8017b76:	4293      	cmp	r3, r2
 8017b78:	d157      	bne.n	8017c2a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	61bb      	str	r3, [r7, #24]
 8017b7e:	4b44      	ldr	r3, [pc, #272]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b82:	4a43      	ldr	r2, [pc, #268]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b88:	6453      	str	r3, [r2, #68]	; 0x44
 8017b8a:	4b41      	ldr	r3, [pc, #260]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b92:	61bb      	str	r3, [r7, #24]
 8017b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b96:	2300      	movs	r3, #0
 8017b98:	617b      	str	r3, [r7, #20]
 8017b9a:	4b3d      	ldr	r3, [pc, #244]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b9e:	4a3c      	ldr	r2, [pc, #240]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017ba0:	f043 0301 	orr.w	r3, r3, #1
 8017ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ba6:	4b3a      	ldr	r3, [pc, #232]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017baa:	f003 0301 	and.w	r3, r3, #1
 8017bae:	617b      	str	r3, [r7, #20]
 8017bb0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Ao_Pin;
 8017bb2:	2340      	movs	r3, #64	; 0x40
 8017bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017bb6:	2303      	movs	r3, #3
 8017bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Ao_GPIO_Port, &GPIO_InitStruct);
 8017bbe:	f107 031c 	add.w	r3, r7, #28
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	4833      	ldr	r0, [pc, #204]	; (8017c94 <HAL_ADC_MspInit+0x13c>)
 8017bc6:	f001 fe0d 	bl	80197e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8017bca:	4b33      	ldr	r3, [pc, #204]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bcc:	4a33      	ldr	r2, [pc, #204]	; (8017c9c <HAL_ADC_MspInit+0x144>)
 8017bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017bd0:	4b31      	ldr	r3, [pc, #196]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017bd6:	4b30      	ldr	r3, [pc, #192]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017bdc:	4b2e      	ldr	r3, [pc, #184]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bde:	2200      	movs	r2, #0
 8017be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017be2:	4b2d      	ldr	r3, [pc, #180]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017be8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017bea:	4b2b      	ldr	r3, [pc, #172]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017bf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017bf2:	4b29      	ldr	r3, [pc, #164]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017bf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017bfa:	4b27      	ldr	r3, [pc, #156]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017c00:	4b25      	ldr	r3, [pc, #148]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017c02:	2200      	movs	r2, #0
 8017c04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017c06:	4b24      	ldr	r3, [pc, #144]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017c08:	2200      	movs	r2, #0
 8017c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017c0c:	4822      	ldr	r0, [pc, #136]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017c0e:	f000 fff5 	bl	8018bfc <HAL_DMA_Init>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d001      	beq.n	8017c1c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8017c18:	f7ff ff70 	bl	8017afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	4a1e      	ldr	r2, [pc, #120]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017c20:	639a      	str	r2, [r3, #56]	; 0x38
 8017c22:	4a1d      	ldr	r2, [pc, #116]	; (8017c98 <HAL_ADC_MspInit+0x140>)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8017c28:	e02c      	b.n	8017c84 <HAL_ADC_MspInit+0x12c>
  else if(hadc->Instance==ADC2)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	4a1c      	ldr	r2, [pc, #112]	; (8017ca0 <HAL_ADC_MspInit+0x148>)
 8017c30:	4293      	cmp	r3, r2
 8017c32:	d127      	bne.n	8017c84 <HAL_ADC_MspInit+0x12c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8017c34:	2300      	movs	r3, #0
 8017c36:	613b      	str	r3, [r7, #16]
 8017c38:	4b15      	ldr	r3, [pc, #84]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c3c:	4a14      	ldr	r2, [pc, #80]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017c42:	6453      	str	r3, [r2, #68]	; 0x44
 8017c44:	4b12      	ldr	r3, [pc, #72]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017c4c:	613b      	str	r3, [r7, #16]
 8017c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017c50:	2300      	movs	r3, #0
 8017c52:	60fb      	str	r3, [r7, #12]
 8017c54:	4b0e      	ldr	r3, [pc, #56]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c58:	4a0d      	ldr	r2, [pc, #52]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c5a:	f043 0301 	orr.w	r3, r3, #1
 8017c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8017c60:	4b0b      	ldr	r3, [pc, #44]	; (8017c90 <HAL_ADC_MspInit+0x138>)
 8017c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c64:	f003 0301 	and.w	r3, r3, #1
 8017c68:	60fb      	str	r3, [r7, #12]
 8017c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AoA7_Pin;
 8017c6c:	2380      	movs	r3, #128	; 0x80
 8017c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017c70:	2303      	movs	r3, #3
 8017c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c74:	2300      	movs	r3, #0
 8017c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AoA7_GPIO_Port, &GPIO_InitStruct);
 8017c78:	f107 031c 	add.w	r3, r7, #28
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	4805      	ldr	r0, [pc, #20]	; (8017c94 <HAL_ADC_MspInit+0x13c>)
 8017c80:	f001 fdb0 	bl	80197e4 <HAL_GPIO_Init>
}
 8017c84:	bf00      	nop
 8017c86:	3730      	adds	r7, #48	; 0x30
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}
 8017c8c:	40012000 	.word	0x40012000
 8017c90:	40023800 	.word	0x40023800
 8017c94:	40020000 	.word	0x40020000
 8017c98:	20006b48 	.word	0x20006b48
 8017c9c:	40026410 	.word	0x40026410
 8017ca0:	40012100 	.word	0x40012100

08017ca4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b08a      	sub	sp, #40	; 0x28
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017cac:	f107 0314 	add.w	r3, r7, #20
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	601a      	str	r2, [r3, #0]
 8017cb4:	605a      	str	r2, [r3, #4]
 8017cb6:	609a      	str	r2, [r3, #8]
 8017cb8:	60da      	str	r2, [r3, #12]
 8017cba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	4a33      	ldr	r2, [pc, #204]	; (8017d90 <HAL_DAC_MspInit+0xec>)
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	d15f      	bne.n	8017d86 <HAL_DAC_MspInit+0xe2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	613b      	str	r3, [r7, #16]
 8017cca:	4b32      	ldr	r3, [pc, #200]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cce:	4a31      	ldr	r2, [pc, #196]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8017cd6:	4b2f      	ldr	r3, [pc, #188]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017cde:	613b      	str	r3, [r7, #16]
 8017ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	60fb      	str	r3, [r7, #12]
 8017ce6:	4b2b      	ldr	r3, [pc, #172]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cea:	4a2a      	ldr	r2, [pc, #168]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017cec:	f043 0301 	orr.w	r3, r3, #1
 8017cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8017cf2:	4b28      	ldr	r3, [pc, #160]	; (8017d94 <HAL_DAC_MspInit+0xf0>)
 8017cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cf6:	f003 0301 	and.w	r3, r3, #1
 8017cfa:	60fb      	str	r3, [r7, #12]
 8017cfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Fo4_Pin|Ap_Pin;
 8017cfe:	2330      	movs	r3, #48	; 0x30
 8017d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017d02:	2303      	movs	r3, #3
 8017d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d06:	2300      	movs	r3, #0
 8017d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017d0a:	f107 0314 	add.w	r3, r7, #20
 8017d0e:	4619      	mov	r1, r3
 8017d10:	4821      	ldr	r0, [pc, #132]	; (8017d98 <HAL_DAC_MspInit+0xf4>)
 8017d12:	f001 fd67 	bl	80197e4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8017d16:	4b21      	ldr	r3, [pc, #132]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d18:	4a21      	ldr	r2, [pc, #132]	; (8017da0 <HAL_DAC_MspInit+0xfc>)
 8017d1a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8017d1c:	4b1f      	ldr	r3, [pc, #124]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d1e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8017d22:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017d24:	4b1d      	ldr	r3, [pc, #116]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d26:	2240      	movs	r2, #64	; 0x40
 8017d28:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017d2a:	4b1c      	ldr	r3, [pc, #112]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8017d30:	4b1a      	ldr	r3, [pc, #104]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017d36:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017d38:	4b18      	ldr	r3, [pc, #96]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d3e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017d40:	4b16      	ldr	r3, [pc, #88]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017d46:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8017d48:	4b14      	ldr	r3, [pc, #80]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8017d4e:	4b13      	ldr	r3, [pc, #76]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d50:	2200      	movs	r2, #0
 8017d52:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017d54:	4b11      	ldr	r3, [pc, #68]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d56:	2200      	movs	r2, #0
 8017d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8017d5a:	4810      	ldr	r0, [pc, #64]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d5c:	f000 ff4e 	bl	8018bfc <HAL_DMA_Init>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d001      	beq.n	8017d6a <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8017d66:	f7ff fec9 	bl	8017afc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4a0b      	ldr	r2, [pc, #44]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d6e:	609a      	str	r2, [r3, #8]
 8017d70:	4a0a      	ldr	r2, [pc, #40]	; (8017d9c <HAL_DAC_MspInit+0xf8>)
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8017d76:	2200      	movs	r2, #0
 8017d78:	2100      	movs	r1, #0
 8017d7a:	2036      	movs	r0, #54	; 0x36
 8017d7c:	f000 fe63 	bl	8018a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017d80:	2036      	movs	r0, #54	; 0x36
 8017d82:	f000 fe7c 	bl	8018a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8017d86:	bf00      	nop
 8017d88:	3728      	adds	r7, #40	; 0x28
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd80      	pop	{r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	40007400 	.word	0x40007400
 8017d94:	40023800 	.word	0x40023800
 8017d98:	40020000 	.word	0x40020000
 8017d9c:	20006a70 	.word	0x20006a70
 8017da0:	40026088 	.word	0x40026088

08017da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b08c      	sub	sp, #48	; 0x30
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017dac:	f107 031c 	add.w	r3, r7, #28
 8017db0:	2200      	movs	r2, #0
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	605a      	str	r2, [r3, #4]
 8017db6:	609a      	str	r2, [r3, #8]
 8017db8:	60da      	str	r2, [r3, #12]
 8017dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	4a3a      	ldr	r2, [pc, #232]	; (8017eac <HAL_SPI_MspInit+0x108>)
 8017dc2:	4293      	cmp	r3, r2
 8017dc4:	d135      	bne.n	8017e32 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	61bb      	str	r3, [r7, #24]
 8017dca:	4b39      	ldr	r3, [pc, #228]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dce:	4a38      	ldr	r2, [pc, #224]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8017dd6:	4b36      	ldr	r3, [pc, #216]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017dde:	61bb      	str	r3, [r7, #24]
 8017de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017de2:	2300      	movs	r3, #0
 8017de4:	617b      	str	r3, [r7, #20]
 8017de6:	4b32      	ldr	r3, [pc, #200]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dea:	4a31      	ldr	r2, [pc, #196]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017dec:	f043 0302 	orr.w	r3, r3, #2
 8017df0:	6313      	str	r3, [r2, #48]	; 0x30
 8017df2:	4b2f      	ldr	r3, [pc, #188]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017df6:	f003 0302 	and.w	r3, r3, #2
 8017dfa:	617b      	str	r3, [r7, #20]
 8017dfc:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|So_Pin|Si_Pin;
 8017dfe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e04:	2302      	movs	r3, #2
 8017e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e0c:	2303      	movs	r3, #3
 8017e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017e10:	2305      	movs	r3, #5
 8017e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017e14:	f107 031c 	add.w	r3, r7, #28
 8017e18:	4619      	mov	r1, r3
 8017e1a:	4826      	ldr	r0, [pc, #152]	; (8017eb4 <HAL_SPI_MspInit+0x110>)
 8017e1c:	f001 fce2 	bl	80197e4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8017e20:	2200      	movs	r2, #0
 8017e22:	2101      	movs	r1, #1
 8017e24:	2024      	movs	r0, #36	; 0x24
 8017e26:	f000 fe0e 	bl	8018a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8017e2a:	2024      	movs	r0, #36	; 0x24
 8017e2c:	f000 fe27 	bl	8018a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8017e30:	e038      	b.n	8017ea4 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI3)
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4a20      	ldr	r2, [pc, #128]	; (8017eb8 <HAL_SPI_MspInit+0x114>)
 8017e38:	4293      	cmp	r3, r2
 8017e3a:	d133      	bne.n	8017ea4 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	613b      	str	r3, [r7, #16]
 8017e40:	4b1b      	ldr	r3, [pc, #108]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e44:	4a1a      	ldr	r2, [pc, #104]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8017e4c:	4b18      	ldr	r3, [pc, #96]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017e54:	613b      	str	r3, [r7, #16]
 8017e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017e58:	2300      	movs	r3, #0
 8017e5a:	60fb      	str	r3, [r7, #12]
 8017e5c:	4b14      	ldr	r3, [pc, #80]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e60:	4a13      	ldr	r2, [pc, #76]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e62:	f043 0302 	orr.w	r3, r3, #2
 8017e66:	6313      	str	r3, [r2, #48]	; 0x30
 8017e68:	4b11      	ldr	r3, [pc, #68]	; (8017eb0 <HAL_SPI_MspInit+0x10c>)
 8017e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e6c:	f003 0302 	and.w	r3, r3, #2
 8017e70:	60fb      	str	r3, [r7, #12]
 8017e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TpCk_Pin|TpSo_Pin|TpSi_Pin;
 8017e74:	2338      	movs	r3, #56	; 0x38
 8017e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e78:	2302      	movs	r3, #2
 8017e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e80:	2303      	movs	r3, #3
 8017e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017e84:	2306      	movs	r3, #6
 8017e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017e88:	f107 031c 	add.w	r3, r7, #28
 8017e8c:	4619      	mov	r1, r3
 8017e8e:	4809      	ldr	r0, [pc, #36]	; (8017eb4 <HAL_SPI_MspInit+0x110>)
 8017e90:	f001 fca8 	bl	80197e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8017e94:	2200      	movs	r2, #0
 8017e96:	2101      	movs	r1, #1
 8017e98:	2033      	movs	r0, #51	; 0x33
 8017e9a:	f000 fdd4 	bl	8018a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8017e9e:	2033      	movs	r0, #51	; 0x33
 8017ea0:	f000 fded 	bl	8018a7e <HAL_NVIC_EnableIRQ>
}
 8017ea4:	bf00      	nop
 8017ea6:	3730      	adds	r7, #48	; 0x30
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}
 8017eac:	40003800 	.word	0x40003800
 8017eb0:	40023800 	.word	0x40023800
 8017eb4:	40020400 	.word	0x40020400
 8017eb8:	40003c00 	.word	0x40003c00

08017ebc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b082      	sub	sp, #8
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	4a13      	ldr	r2, [pc, #76]	; (8017f18 <HAL_SPI_MspDeInit+0x5c>)
 8017eca:	4293      	cmp	r3, r2
 8017ecc:	d10e      	bne.n	8017eec <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8017ece:	4b13      	ldr	r3, [pc, #76]	; (8017f1c <HAL_SPI_MspDeInit+0x60>)
 8017ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed2:	4a12      	ldr	r2, [pc, #72]	; (8017f1c <HAL_SPI_MspDeInit+0x60>)
 8017ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017ed8:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, SCK_Pin|So_Pin|Si_Pin);
 8017eda:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8017ede:	4810      	ldr	r0, [pc, #64]	; (8017f20 <HAL_SPI_MspDeInit+0x64>)
 8017ee0:	f001 fe14 	bl	8019b0c <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8017ee4:	2024      	movs	r0, #36	; 0x24
 8017ee6:	f000 fdd8 	bl	8018a9a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8017eea:	e011      	b.n	8017f10 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI3)
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	4a0c      	ldr	r2, [pc, #48]	; (8017f24 <HAL_SPI_MspDeInit+0x68>)
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	d10c      	bne.n	8017f10 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8017ef6:	4b09      	ldr	r3, [pc, #36]	; (8017f1c <HAL_SPI_MspDeInit+0x60>)
 8017ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017efa:	4a08      	ldr	r2, [pc, #32]	; (8017f1c <HAL_SPI_MspDeInit+0x60>)
 8017efc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017f00:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, TpCk_Pin|TpSo_Pin|TpSi_Pin);
 8017f02:	2138      	movs	r1, #56	; 0x38
 8017f04:	4806      	ldr	r0, [pc, #24]	; (8017f20 <HAL_SPI_MspDeInit+0x64>)
 8017f06:	f001 fe01 	bl	8019b0c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8017f0a:	2033      	movs	r0, #51	; 0x33
 8017f0c:	f000 fdc5 	bl	8018a9a <HAL_NVIC_DisableIRQ>
}
 8017f10:	bf00      	nop
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	40003800 	.word	0x40003800
 8017f1c:	40023800 	.word	0x40023800
 8017f20:	40020400 	.word	0x40020400
 8017f24:	40003c00 	.word	0x40003c00

08017f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b086      	sub	sp, #24
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	4a44      	ldr	r2, [pc, #272]	; (8018048 <HAL_TIM_Base_MspInit+0x120>)
 8017f36:	4293      	cmp	r3, r2
 8017f38:	d10e      	bne.n	8017f58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	617b      	str	r3, [r7, #20]
 8017f3e:	4b43      	ldr	r3, [pc, #268]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f42:	4a42      	ldr	r2, [pc, #264]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f44:	f043 0301 	orr.w	r3, r3, #1
 8017f48:	6453      	str	r3, [r2, #68]	; 0x44
 8017f4a:	4b40      	ldr	r3, [pc, #256]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f4e:	f003 0301 	and.w	r3, r3, #1
 8017f52:	617b      	str	r3, [r7, #20]
 8017f54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8017f56:	e072      	b.n	801803e <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	4a3c      	ldr	r2, [pc, #240]	; (8018050 <HAL_TIM_Base_MspInit+0x128>)
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	d116      	bne.n	8017f90 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017f62:	2300      	movs	r3, #0
 8017f64:	613b      	str	r3, [r7, #16]
 8017f66:	4b39      	ldr	r3, [pc, #228]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6a:	4a38      	ldr	r2, [pc, #224]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f6c:	f043 0302 	orr.w	r3, r3, #2
 8017f70:	6413      	str	r3, [r2, #64]	; 0x40
 8017f72:	4b36      	ldr	r3, [pc, #216]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f76:	f003 0302 	and.w	r3, r3, #2
 8017f7a:	613b      	str	r3, [r7, #16]
 8017f7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8017f7e:	2200      	movs	r2, #0
 8017f80:	2100      	movs	r1, #0
 8017f82:	201d      	movs	r0, #29
 8017f84:	f000 fd5f 	bl	8018a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017f88:	201d      	movs	r0, #29
 8017f8a:	f000 fd78 	bl	8018a7e <HAL_NVIC_EnableIRQ>
}
 8017f8e:	e056      	b.n	801803e <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	4a2f      	ldr	r2, [pc, #188]	; (8018054 <HAL_TIM_Base_MspInit+0x12c>)
 8017f96:	4293      	cmp	r3, r2
 8017f98:	d10e      	bne.n	8017fb8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	60fb      	str	r3, [r7, #12]
 8017f9e:	4b2b      	ldr	r3, [pc, #172]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa2:	4a2a      	ldr	r2, [pc, #168]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fa4:	f043 0308 	orr.w	r3, r3, #8
 8017fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8017faa:	4b28      	ldr	r3, [pc, #160]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fae:	f003 0308 	and.w	r3, r3, #8
 8017fb2:	60fb      	str	r3, [r7, #12]
 8017fb4:	68fb      	ldr	r3, [r7, #12]
}
 8017fb6:	e042      	b.n	801803e <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	4a26      	ldr	r2, [pc, #152]	; (8018058 <HAL_TIM_Base_MspInit+0x130>)
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	d13d      	bne.n	801803e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	60bb      	str	r3, [r7, #8]
 8017fc6:	4b21      	ldr	r3, [pc, #132]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fca:	4a20      	ldr	r2, [pc, #128]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fcc:	f043 0320 	orr.w	r3, r3, #32
 8017fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8017fd2:	4b1e      	ldr	r3, [pc, #120]	; (801804c <HAL_TIM_Base_MspInit+0x124>)
 8017fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fd6:	f003 0320 	and.w	r3, r3, #32
 8017fda:	60bb      	str	r3, [r7, #8]
 8017fdc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim7_up.Instance = DMA1_Stream2;
 8017fde:	4b1f      	ldr	r3, [pc, #124]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8017fe0:	4a1f      	ldr	r2, [pc, #124]	; (8018060 <HAL_TIM_Base_MspInit+0x138>)
 8017fe2:	601a      	str	r2, [r3, #0]
    hdma_tim7_up.Init.Channel = DMA_CHANNEL_1;
 8017fe4:	4b1d      	ldr	r3, [pc, #116]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8017fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8017fea:	605a      	str	r2, [r3, #4]
    hdma_tim7_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017fec:	4b1b      	ldr	r3, [pc, #108]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8017fee:	2200      	movs	r2, #0
 8017ff0:	609a      	str	r2, [r3, #8]
    hdma_tim7_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8017ff2:	4b1a      	ldr	r3, [pc, #104]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	60da      	str	r2, [r3, #12]
    hdma_tim7_up.Init.MemInc = DMA_MINC_ENABLE;
 8017ff8:	4b18      	ldr	r3, [pc, #96]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8017ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017ffe:	611a      	str	r2, [r3, #16]
    hdma_tim7_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8018000:	4b16      	ldr	r3, [pc, #88]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8018002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018006:	615a      	str	r2, [r3, #20]
    hdma_tim7_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8018008:	4b14      	ldr	r3, [pc, #80]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 801800a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801800e:	619a      	str	r2, [r3, #24]
    hdma_tim7_up.Init.Mode = DMA_NORMAL;
 8018010:	4b12      	ldr	r3, [pc, #72]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8018012:	2200      	movs	r2, #0
 8018014:	61da      	str	r2, [r3, #28]
    hdma_tim7_up.Init.Priority = DMA_PRIORITY_LOW;
 8018016:	4b11      	ldr	r3, [pc, #68]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8018018:	2200      	movs	r2, #0
 801801a:	621a      	str	r2, [r3, #32]
    hdma_tim7_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801801c:	4b0f      	ldr	r3, [pc, #60]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 801801e:	2200      	movs	r2, #0
 8018020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim7_up) != HAL_OK)
 8018022:	480e      	ldr	r0, [pc, #56]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8018024:	f000 fdea 	bl	8018bfc <HAL_DMA_Init>
 8018028:	4603      	mov	r3, r0
 801802a:	2b00      	cmp	r3, #0
 801802c:	d001      	beq.n	8018032 <HAL_TIM_Base_MspInit+0x10a>
      Error_Handler();
 801802e:	f7ff fd65 	bl	8017afc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim7_up);
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4a09      	ldr	r2, [pc, #36]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 8018036:	621a      	str	r2, [r3, #32]
 8018038:	4a08      	ldr	r2, [pc, #32]	; (801805c <HAL_TIM_Base_MspInit+0x134>)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6393      	str	r3, [r2, #56]	; 0x38
}
 801803e:	bf00      	nop
 8018040:	3718      	adds	r7, #24
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	40010000 	.word	0x40010000
 801804c:	40023800 	.word	0x40023800
 8018050:	40000400 	.word	0x40000400
 8018054:	40000c00 	.word	0x40000c00
 8018058:	40001400 	.word	0x40001400
 801805c:	20006928 	.word	0x20006928
 8018060:	40026040 	.word	0x40026040

08018064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018064:	b480      	push	{r7}
 8018066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8018068:	e7fe      	b.n	8018068 <NMI_Handler+0x4>

0801806a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801806a:	b480      	push	{r7}
 801806c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801806e:	e7fe      	b.n	801806e <HardFault_Handler+0x4>

08018070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018070:	b480      	push	{r7}
 8018072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018074:	e7fe      	b.n	8018074 <MemManage_Handler+0x4>

08018076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018076:	b480      	push	{r7}
 8018078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801807a:	e7fe      	b.n	801807a <BusFault_Handler+0x4>

0801807c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801807c:	b480      	push	{r7}
 801807e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018080:	e7fe      	b.n	8018080 <UsageFault_Handler+0x4>

08018082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018082:	b480      	push	{r7}
 8018084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018086:	bf00      	nop
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018090:	b480      	push	{r7}
 8018092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018094:	bf00      	nop
 8018096:	46bd      	mov	sp, r7
 8018098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809c:	4770      	bx	lr

0801809e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801809e:	b480      	push	{r7}
 80180a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80180a2:	bf00      	nop
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80180b0:	f000 f914 	bl	80182dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80180b4:	bf00      	nop
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim7_up);
 80180bc:	4802      	ldr	r0, [pc, #8]	; (80180c8 <DMA1_Stream2_IRQHandler+0x10>)
 80180be:	f000 fe6d 	bl	8018d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80180c2:	bf00      	nop
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	20006928 	.word	0x20006928

080180cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80180d0:	4802      	ldr	r0, [pc, #8]	; (80180dc <DMA1_Stream5_IRQHandler+0x10>)
 80180d2:	f000 fe63 	bl	8018d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80180d6:	bf00      	nop
 80180d8:	bd80      	pop	{r7, pc}
 80180da:	bf00      	nop
 80180dc:	20006a70 	.word	0x20006a70

080180e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80180e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80180e8:	f001 fe1e 	bl	8019d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80180ec:	bf00      	nop
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80180f4:	4802      	ldr	r0, [pc, #8]	; (8018100 <TIM3_IRQHandler+0x10>)
 80180f6:	f005 f859 	bl	801d1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80180fa:	bf00      	nop
 80180fc:	bd80      	pop	{r7, pc}
 80180fe:	bf00      	nop
 8018100:	200069d0 	.word	0x200069d0

08018104 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8018108:	4802      	ldr	r0, [pc, #8]	; (8018114 <SPI2_IRQHandler+0x10>)
 801810a:	f004 fd33 	bl	801cb74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801810e:	bf00      	nop
 8018110:	bd80      	pop	{r7, pc}
 8018112:	bf00      	nop
 8018114:	20006888 	.word	0x20006888

08018118 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 801811c:	4802      	ldr	r0, [pc, #8]	; (8018128 <SPI3_IRQHandler+0x10>)
 801811e:	f004 fd29 	bl	801cb74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8018122:	bf00      	nop
 8018124:	bd80      	pop	{r7, pc}
 8018126:	bf00      	nop
 8018128:	20006a18 	.word	0x20006a18

0801812c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8018130:	4802      	ldr	r0, [pc, #8]	; (801813c <DMA2_Stream0_IRQHandler+0x10>)
 8018132:	f000 fe33 	bl	8018d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8018136:	bf00      	nop
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	20006b48 	.word	0x20006b48

08018140 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8018144:	4802      	ldr	r0, [pc, #8]	; (8018150 <OTG_FS_IRQHandler+0x10>)
 8018146:	f001 ff69 	bl	801a01c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801814a:	bf00      	nop
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	20007148 	.word	0x20007148

08018154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b086      	sub	sp, #24
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801815c:	4a14      	ldr	r2, [pc, #80]	; (80181b0 <_sbrk+0x5c>)
 801815e:	4b15      	ldr	r3, [pc, #84]	; (80181b4 <_sbrk+0x60>)
 8018160:	1ad3      	subs	r3, r2, r3
 8018162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018168:	4b13      	ldr	r3, [pc, #76]	; (80181b8 <_sbrk+0x64>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d102      	bne.n	8018176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018170:	4b11      	ldr	r3, [pc, #68]	; (80181b8 <_sbrk+0x64>)
 8018172:	4a12      	ldr	r2, [pc, #72]	; (80181bc <_sbrk+0x68>)
 8018174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8018176:	4b10      	ldr	r3, [pc, #64]	; (80181b8 <_sbrk+0x64>)
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	4413      	add	r3, r2
 801817e:	693a      	ldr	r2, [r7, #16]
 8018180:	429a      	cmp	r2, r3
 8018182:	d207      	bcs.n	8018194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8018184:	f00a fdb4 	bl	8022cf0 <__errno>
 8018188:	4603      	mov	r3, r0
 801818a:	220c      	movs	r2, #12
 801818c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801818e:	f04f 33ff 	mov.w	r3, #4294967295
 8018192:	e009      	b.n	80181a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8018194:	4b08      	ldr	r3, [pc, #32]	; (80181b8 <_sbrk+0x64>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801819a:	4b07      	ldr	r3, [pc, #28]	; (80181b8 <_sbrk+0x64>)
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	4413      	add	r3, r2
 80181a2:	4a05      	ldr	r2, [pc, #20]	; (80181b8 <_sbrk+0x64>)
 80181a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80181a6:	68fb      	ldr	r3, [r7, #12]
}
 80181a8:	4618      	mov	r0, r3
 80181aa:	3718      	adds	r7, #24
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}
 80181b0:	20020000 	.word	0x20020000
 80181b4:	00000600 	.word	0x00000600
 80181b8:	200007a4 	.word	0x200007a4
 80181bc:	20007560 	.word	0x20007560

080181c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80181c0:	b480      	push	{r7}
 80181c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80181c4:	4b06      	ldr	r3, [pc, #24]	; (80181e0 <SystemInit+0x20>)
 80181c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80181ca:	4a05      	ldr	r2, [pc, #20]	; (80181e0 <SystemInit+0x20>)
 80181cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80181d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80181d4:	bf00      	nop
 80181d6:	46bd      	mov	sp, r7
 80181d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop
 80181e0:	e000ed00 	.word	0xe000ed00

080181e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80181e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801821c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80181e8:	480d      	ldr	r0, [pc, #52]	; (8018220 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80181ea:	490e      	ldr	r1, [pc, #56]	; (8018224 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80181ec:	4a0e      	ldr	r2, [pc, #56]	; (8018228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80181ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80181f0:	e002      	b.n	80181f8 <LoopCopyDataInit>

080181f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80181f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80181f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80181f6:	3304      	adds	r3, #4

080181f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80181f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80181fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80181fc:	d3f9      	bcc.n	80181f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80181fe:	4a0b      	ldr	r2, [pc, #44]	; (801822c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8018200:	4c0b      	ldr	r4, [pc, #44]	; (8018230 <LoopFillZerobss+0x26>)
  movs r3, #0
 8018202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018204:	e001      	b.n	801820a <LoopFillZerobss>

08018206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018208:	3204      	adds	r2, #4

0801820a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801820a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801820c:	d3fb      	bcc.n	8018206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801820e:	f7ff ffd7 	bl	80181c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018212:	f00a fd73 	bl	8022cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018216:	f7fd ffe3 	bl	80161e0 <main>
  bx  lr    
 801821a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801821c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8018220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018224:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 8018228:	08022f48 	.word	0x08022f48
  ldr r2, =_sbss
 801822c:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8018230:	20007560 	.word	0x20007560

08018234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018234:	e7fe      	b.n	8018234 <ADC_IRQHandler>
	...

08018238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801823c:	4b0e      	ldr	r3, [pc, #56]	; (8018278 <HAL_Init+0x40>)
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	4a0d      	ldr	r2, [pc, #52]	; (8018278 <HAL_Init+0x40>)
 8018242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8018248:	4b0b      	ldr	r3, [pc, #44]	; (8018278 <HAL_Init+0x40>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	4a0a      	ldr	r2, [pc, #40]	; (8018278 <HAL_Init+0x40>)
 801824e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018254:	4b08      	ldr	r3, [pc, #32]	; (8018278 <HAL_Init+0x40>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	4a07      	ldr	r2, [pc, #28]	; (8018278 <HAL_Init+0x40>)
 801825a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801825e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018260:	2003      	movs	r0, #3
 8018262:	f000 fbe5 	bl	8018a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018266:	2000      	movs	r0, #0
 8018268:	f000 f808 	bl	801827c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801826c:	f7ff fc4c 	bl	8017b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018270:	2300      	movs	r3, #0
}
 8018272:	4618      	mov	r0, r3
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	40023c00 	.word	0x40023c00

0801827c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b082      	sub	sp, #8
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018284:	4b12      	ldr	r3, [pc, #72]	; (80182d0 <HAL_InitTick+0x54>)
 8018286:	681a      	ldr	r2, [r3, #0]
 8018288:	4b12      	ldr	r3, [pc, #72]	; (80182d4 <HAL_InitTick+0x58>)
 801828a:	781b      	ldrb	r3, [r3, #0]
 801828c:	4619      	mov	r1, r3
 801828e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018292:	fbb3 f3f1 	udiv	r3, r3, r1
 8018296:	fbb2 f3f3 	udiv	r3, r2, r3
 801829a:	4618      	mov	r0, r3
 801829c:	f000 fc0b 	bl	8018ab6 <HAL_SYSTICK_Config>
 80182a0:	4603      	mov	r3, r0
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d001      	beq.n	80182aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80182a6:	2301      	movs	r3, #1
 80182a8:	e00e      	b.n	80182c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	2b0f      	cmp	r3, #15
 80182ae:	d80a      	bhi.n	80182c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80182b0:	2200      	movs	r2, #0
 80182b2:	6879      	ldr	r1, [r7, #4]
 80182b4:	f04f 30ff 	mov.w	r0, #4294967295
 80182b8:	f000 fbc5 	bl	8018a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80182bc:	4a06      	ldr	r2, [pc, #24]	; (80182d8 <HAL_InitTick+0x5c>)
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80182c2:	2300      	movs	r3, #0
 80182c4:	e000      	b.n	80182c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80182c6:	2301      	movs	r3, #1
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3708      	adds	r7, #8
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	20000588 	.word	0x20000588
 80182d4:	20000590 	.word	0x20000590
 80182d8:	2000058c 	.word	0x2000058c

080182dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80182dc:	b480      	push	{r7}
 80182de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80182e0:	4b06      	ldr	r3, [pc, #24]	; (80182fc <HAL_IncTick+0x20>)
 80182e2:	781b      	ldrb	r3, [r3, #0]
 80182e4:	461a      	mov	r2, r3
 80182e6:	4b06      	ldr	r3, [pc, #24]	; (8018300 <HAL_IncTick+0x24>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	4413      	add	r3, r2
 80182ec:	4a04      	ldr	r2, [pc, #16]	; (8018300 <HAL_IncTick+0x24>)
 80182ee:	6013      	str	r3, [r2, #0]
}
 80182f0:	bf00      	nop
 80182f2:	46bd      	mov	sp, r7
 80182f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop
 80182fc:	20000590 	.word	0x20000590
 8018300:	20006c54 	.word	0x20006c54

08018304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018304:	b480      	push	{r7}
 8018306:	af00      	add	r7, sp, #0
  return uwTick;
 8018308:	4b03      	ldr	r3, [pc, #12]	; (8018318 <HAL_GetTick+0x14>)
 801830a:	681b      	ldr	r3, [r3, #0]
}
 801830c:	4618      	mov	r0, r3
 801830e:	46bd      	mov	sp, r7
 8018310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018314:	4770      	bx	lr
 8018316:	bf00      	nop
 8018318:	20006c54 	.word	0x20006c54

0801831c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018324:	f7ff ffee 	bl	8018304 <HAL_GetTick>
 8018328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018334:	d005      	beq.n	8018342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018336:	4b0a      	ldr	r3, [pc, #40]	; (8018360 <HAL_Delay+0x44>)
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	461a      	mov	r2, r3
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	4413      	add	r3, r2
 8018340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8018342:	bf00      	nop
 8018344:	f7ff ffde 	bl	8018304 <HAL_GetTick>
 8018348:	4602      	mov	r2, r0
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	1ad3      	subs	r3, r2, r3
 801834e:	68fa      	ldr	r2, [r7, #12]
 8018350:	429a      	cmp	r2, r3
 8018352:	d8f7      	bhi.n	8018344 <HAL_Delay+0x28>
  {
  }
}
 8018354:	bf00      	nop
 8018356:	bf00      	nop
 8018358:	3710      	adds	r7, #16
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}
 801835e:	bf00      	nop
 8018360:	20000590 	.word	0x20000590

08018364 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801836c:	2300      	movs	r3, #0
 801836e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d101      	bne.n	801837a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8018376:	2301      	movs	r3, #1
 8018378:	e033      	b.n	80183e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801837e:	2b00      	cmp	r3, #0
 8018380:	d109      	bne.n	8018396 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f7ff fbe8 	bl	8017b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2200      	movs	r2, #0
 801838c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2200      	movs	r2, #0
 8018392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801839a:	f003 0310 	and.w	r3, r3, #16
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d118      	bne.n	80183d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80183aa:	f023 0302 	bic.w	r3, r3, #2
 80183ae:	f043 0202 	orr.w	r2, r3, #2
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f000 f94a 	bl	8018650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2200      	movs	r2, #0
 80183c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c6:	f023 0303 	bic.w	r3, r3, #3
 80183ca:	f043 0201 	orr.w	r2, r3, #1
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	641a      	str	r2, [r3, #64]	; 0x40
 80183d2:	e001      	b.n	80183d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80183d4:	2301      	movs	r3, #1
 80183d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2200      	movs	r2, #0
 80183dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80183e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	3710      	adds	r7, #16
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}
	...

080183ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80183ec:	b480      	push	{r7}
 80183ee:	b085      	sub	sp, #20
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
 80183f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80183f6:	2300      	movs	r3, #0
 80183f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018400:	2b01      	cmp	r3, #1
 8018402:	d101      	bne.n	8018408 <HAL_ADC_ConfigChannel+0x1c>
 8018404:	2302      	movs	r3, #2
 8018406:	e113      	b.n	8018630 <HAL_ADC_ConfigChannel+0x244>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2201      	movs	r2, #1
 801840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b09      	cmp	r3, #9
 8018416:	d925      	bls.n	8018464 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	68d9      	ldr	r1, [r3, #12]
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	b29b      	uxth	r3, r3
 8018424:	461a      	mov	r2, r3
 8018426:	4613      	mov	r3, r2
 8018428:	005b      	lsls	r3, r3, #1
 801842a:	4413      	add	r3, r2
 801842c:	3b1e      	subs	r3, #30
 801842e:	2207      	movs	r2, #7
 8018430:	fa02 f303 	lsl.w	r3, r2, r3
 8018434:	43da      	mvns	r2, r3
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	400a      	ands	r2, r1
 801843c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	68d9      	ldr	r1, [r3, #12]
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	689a      	ldr	r2, [r3, #8]
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	b29b      	uxth	r3, r3
 801844e:	4618      	mov	r0, r3
 8018450:	4603      	mov	r3, r0
 8018452:	005b      	lsls	r3, r3, #1
 8018454:	4403      	add	r3, r0
 8018456:	3b1e      	subs	r3, #30
 8018458:	409a      	lsls	r2, r3
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	430a      	orrs	r2, r1
 8018460:	60da      	str	r2, [r3, #12]
 8018462:	e022      	b.n	80184aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	6919      	ldr	r1, [r3, #16]
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	b29b      	uxth	r3, r3
 8018470:	461a      	mov	r2, r3
 8018472:	4613      	mov	r3, r2
 8018474:	005b      	lsls	r3, r3, #1
 8018476:	4413      	add	r3, r2
 8018478:	2207      	movs	r2, #7
 801847a:	fa02 f303 	lsl.w	r3, r2, r3
 801847e:	43da      	mvns	r2, r3
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	400a      	ands	r2, r1
 8018486:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	6919      	ldr	r1, [r3, #16]
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	689a      	ldr	r2, [r3, #8]
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	b29b      	uxth	r3, r3
 8018498:	4618      	mov	r0, r3
 801849a:	4603      	mov	r3, r0
 801849c:	005b      	lsls	r3, r3, #1
 801849e:	4403      	add	r3, r0
 80184a0:	409a      	lsls	r2, r3
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	430a      	orrs	r2, r1
 80184a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80184aa:	683b      	ldr	r3, [r7, #0]
 80184ac:	685b      	ldr	r3, [r3, #4]
 80184ae:	2b06      	cmp	r3, #6
 80184b0:	d824      	bhi.n	80184fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	685a      	ldr	r2, [r3, #4]
 80184bc:	4613      	mov	r3, r2
 80184be:	009b      	lsls	r3, r3, #2
 80184c0:	4413      	add	r3, r2
 80184c2:	3b05      	subs	r3, #5
 80184c4:	221f      	movs	r2, #31
 80184c6:	fa02 f303 	lsl.w	r3, r2, r3
 80184ca:	43da      	mvns	r2, r3
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	400a      	ands	r2, r1
 80184d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	b29b      	uxth	r3, r3
 80184e0:	4618      	mov	r0, r3
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	685a      	ldr	r2, [r3, #4]
 80184e6:	4613      	mov	r3, r2
 80184e8:	009b      	lsls	r3, r3, #2
 80184ea:	4413      	add	r3, r2
 80184ec:	3b05      	subs	r3, #5
 80184ee:	fa00 f203 	lsl.w	r2, r0, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	430a      	orrs	r2, r1
 80184f8:	635a      	str	r2, [r3, #52]	; 0x34
 80184fa:	e04c      	b.n	8018596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	685b      	ldr	r3, [r3, #4]
 8018500:	2b0c      	cmp	r3, #12
 8018502:	d824      	bhi.n	801854e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	685a      	ldr	r2, [r3, #4]
 801850e:	4613      	mov	r3, r2
 8018510:	009b      	lsls	r3, r3, #2
 8018512:	4413      	add	r3, r2
 8018514:	3b23      	subs	r3, #35	; 0x23
 8018516:	221f      	movs	r2, #31
 8018518:	fa02 f303 	lsl.w	r3, r2, r3
 801851c:	43da      	mvns	r2, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	400a      	ands	r2, r1
 8018524:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	b29b      	uxth	r3, r3
 8018532:	4618      	mov	r0, r3
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	685a      	ldr	r2, [r3, #4]
 8018538:	4613      	mov	r3, r2
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	4413      	add	r3, r2
 801853e:	3b23      	subs	r3, #35	; 0x23
 8018540:	fa00 f203 	lsl.w	r2, r0, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	430a      	orrs	r2, r1
 801854a:	631a      	str	r2, [r3, #48]	; 0x30
 801854c:	e023      	b.n	8018596 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	685a      	ldr	r2, [r3, #4]
 8018558:	4613      	mov	r3, r2
 801855a:	009b      	lsls	r3, r3, #2
 801855c:	4413      	add	r3, r2
 801855e:	3b41      	subs	r3, #65	; 0x41
 8018560:	221f      	movs	r2, #31
 8018562:	fa02 f303 	lsl.w	r3, r2, r3
 8018566:	43da      	mvns	r2, r3
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	400a      	ands	r2, r1
 801856e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	b29b      	uxth	r3, r3
 801857c:	4618      	mov	r0, r3
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	685a      	ldr	r2, [r3, #4]
 8018582:	4613      	mov	r3, r2
 8018584:	009b      	lsls	r3, r3, #2
 8018586:	4413      	add	r3, r2
 8018588:	3b41      	subs	r3, #65	; 0x41
 801858a:	fa00 f203 	lsl.w	r2, r0, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	430a      	orrs	r2, r1
 8018594:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018596:	4b29      	ldr	r3, [pc, #164]	; (801863c <HAL_ADC_ConfigChannel+0x250>)
 8018598:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	4a28      	ldr	r2, [pc, #160]	; (8018640 <HAL_ADC_ConfigChannel+0x254>)
 80185a0:	4293      	cmp	r3, r2
 80185a2:	d10f      	bne.n	80185c4 <HAL_ADC_ConfigChannel+0x1d8>
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b12      	cmp	r3, #18
 80185aa:	d10b      	bne.n	80185c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	685b      	ldr	r3, [r3, #4]
 80185b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	4a1d      	ldr	r2, [pc, #116]	; (8018640 <HAL_ADC_ConfigChannel+0x254>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d12b      	bne.n	8018626 <HAL_ADC_ConfigChannel+0x23a>
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a1c      	ldr	r2, [pc, #112]	; (8018644 <HAL_ADC_ConfigChannel+0x258>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d003      	beq.n	80185e0 <HAL_ADC_ConfigChannel+0x1f4>
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b11      	cmp	r3, #17
 80185de:	d122      	bne.n	8018626 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	685b      	ldr	r3, [r3, #4]
 80185e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	685b      	ldr	r3, [r3, #4]
 80185f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a11      	ldr	r2, [pc, #68]	; (8018644 <HAL_ADC_ConfigChannel+0x258>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d111      	bne.n	8018626 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8018602:	4b11      	ldr	r3, [pc, #68]	; (8018648 <HAL_ADC_ConfigChannel+0x25c>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	4a11      	ldr	r2, [pc, #68]	; (801864c <HAL_ADC_ConfigChannel+0x260>)
 8018608:	fba2 2303 	umull	r2, r3, r2, r3
 801860c:	0c9a      	lsrs	r2, r3, #18
 801860e:	4613      	mov	r3, r2
 8018610:	009b      	lsls	r3, r3, #2
 8018612:	4413      	add	r3, r2
 8018614:	005b      	lsls	r3, r3, #1
 8018616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018618:	e002      	b.n	8018620 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	3b01      	subs	r3, #1
 801861e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d1f9      	bne.n	801861a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2200      	movs	r2, #0
 801862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801862e:	2300      	movs	r3, #0
}
 8018630:	4618      	mov	r0, r3
 8018632:	3714      	adds	r7, #20
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr
 801863c:	40012300 	.word	0x40012300
 8018640:	40012000 	.word	0x40012000
 8018644:	10000012 	.word	0x10000012
 8018648:	20000588 	.word	0x20000588
 801864c:	431bde83 	.word	0x431bde83

08018650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8018650:	b480      	push	{r7}
 8018652:	b085      	sub	sp, #20
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8018658:	4b79      	ldr	r3, [pc, #484]	; (8018840 <ADC_Init+0x1f0>)
 801865a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	685a      	ldr	r2, [r3, #4]
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	685b      	ldr	r3, [r3, #4]
 8018670:	431a      	orrs	r2, r3
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	685a      	ldr	r2, [r3, #4]
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	6859      	ldr	r1, [r3, #4]
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	691b      	ldr	r3, [r3, #16]
 8018690:	021a      	lsls	r2, r3, #8
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	430a      	orrs	r2, r1
 8018698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	685a      	ldr	r2, [r3, #4]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80186a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	6859      	ldr	r1, [r3, #4]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	689a      	ldr	r2, [r3, #8]
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	430a      	orrs	r2, r1
 80186ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	689a      	ldr	r2, [r3, #8]
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80186ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	6899      	ldr	r1, [r3, #8]
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	68da      	ldr	r2, [r3, #12]
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	430a      	orrs	r2, r1
 80186dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186e2:	4a58      	ldr	r2, [pc, #352]	; (8018844 <ADC_Init+0x1f4>)
 80186e4:	4293      	cmp	r3, r2
 80186e6:	d022      	beq.n	801872e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	689a      	ldr	r2, [r3, #8]
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80186f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	6899      	ldr	r1, [r3, #8]
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	430a      	orrs	r2, r1
 8018708:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	689a      	ldr	r2, [r3, #8]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8018718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	6899      	ldr	r1, [r3, #8]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	430a      	orrs	r2, r1
 801872a:	609a      	str	r2, [r3, #8]
 801872c:	e00f      	b.n	801874e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	689a      	ldr	r2, [r3, #8]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801873c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	689a      	ldr	r2, [r3, #8]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801874c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	689a      	ldr	r2, [r3, #8]
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	f022 0202 	bic.w	r2, r2, #2
 801875c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	6899      	ldr	r1, [r3, #8]
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	7e1b      	ldrb	r3, [r3, #24]
 8018768:	005a      	lsls	r2, r3, #1
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	430a      	orrs	r2, r1
 8018770:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d01b      	beq.n	80187b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	685a      	ldr	r2, [r3, #4]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801878a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	685a      	ldr	r2, [r3, #4]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801879a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	6859      	ldr	r1, [r3, #4]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a6:	3b01      	subs	r3, #1
 80187a8:	035a      	lsls	r2, r3, #13
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	430a      	orrs	r2, r1
 80187b0:	605a      	str	r2, [r3, #4]
 80187b2:	e007      	b.n	80187c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	685a      	ldr	r2, [r3, #4]
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80187c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80187d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	69db      	ldr	r3, [r3, #28]
 80187de:	3b01      	subs	r3, #1
 80187e0:	051a      	lsls	r2, r3, #20
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	430a      	orrs	r2, r1
 80187e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	689a      	ldr	r2, [r3, #8]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80187f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	6899      	ldr	r1, [r3, #8]
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018806:	025a      	lsls	r2, r3, #9
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	430a      	orrs	r2, r1
 801880e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	689a      	ldr	r2, [r3, #8]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801881e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	6899      	ldr	r1, [r3, #8]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	695b      	ldr	r3, [r3, #20]
 801882a:	029a      	lsls	r2, r3, #10
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	430a      	orrs	r2, r1
 8018832:	609a      	str	r2, [r3, #8]
}
 8018834:	bf00      	nop
 8018836:	3714      	adds	r7, #20
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr
 8018840:	40012300 	.word	0x40012300
 8018844:	0f000001 	.word	0x0f000001

08018848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018848:	b480      	push	{r7}
 801884a:	b085      	sub	sp, #20
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f003 0307 	and.w	r3, r3, #7
 8018856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018858:	4b0c      	ldr	r3, [pc, #48]	; (801888c <__NVIC_SetPriorityGrouping+0x44>)
 801885a:	68db      	ldr	r3, [r3, #12]
 801885c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801885e:	68ba      	ldr	r2, [r7, #8]
 8018860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8018864:	4013      	ands	r3, r2
 8018866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8018870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8018874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801887a:	4a04      	ldr	r2, [pc, #16]	; (801888c <__NVIC_SetPriorityGrouping+0x44>)
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	60d3      	str	r3, [r2, #12]
}
 8018880:	bf00      	nop
 8018882:	3714      	adds	r7, #20
 8018884:	46bd      	mov	sp, r7
 8018886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888a:	4770      	bx	lr
 801888c:	e000ed00 	.word	0xe000ed00

08018890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8018890:	b480      	push	{r7}
 8018892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8018894:	4b04      	ldr	r3, [pc, #16]	; (80188a8 <__NVIC_GetPriorityGrouping+0x18>)
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	0a1b      	lsrs	r3, r3, #8
 801889a:	f003 0307 	and.w	r3, r3, #7
}
 801889e:	4618      	mov	r0, r3
 80188a0:	46bd      	mov	sp, r7
 80188a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a6:	4770      	bx	lr
 80188a8:	e000ed00 	.word	0xe000ed00

080188ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80188ac:	b480      	push	{r7}
 80188ae:	b083      	sub	sp, #12
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	4603      	mov	r3, r0
 80188b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80188b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	db0b      	blt.n	80188d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80188be:	79fb      	ldrb	r3, [r7, #7]
 80188c0:	f003 021f 	and.w	r2, r3, #31
 80188c4:	4907      	ldr	r1, [pc, #28]	; (80188e4 <__NVIC_EnableIRQ+0x38>)
 80188c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188ca:	095b      	lsrs	r3, r3, #5
 80188cc:	2001      	movs	r0, #1
 80188ce:	fa00 f202 	lsl.w	r2, r0, r2
 80188d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80188d6:	bf00      	nop
 80188d8:	370c      	adds	r7, #12
 80188da:	46bd      	mov	sp, r7
 80188dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e0:	4770      	bx	lr
 80188e2:	bf00      	nop
 80188e4:	e000e100 	.word	0xe000e100

080188e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80188e8:	b480      	push	{r7}
 80188ea:	b083      	sub	sp, #12
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	4603      	mov	r3, r0
 80188f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80188f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	db12      	blt.n	8018920 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80188fa:	79fb      	ldrb	r3, [r7, #7]
 80188fc:	f003 021f 	and.w	r2, r3, #31
 8018900:	490a      	ldr	r1, [pc, #40]	; (801892c <__NVIC_DisableIRQ+0x44>)
 8018902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018906:	095b      	lsrs	r3, r3, #5
 8018908:	2001      	movs	r0, #1
 801890a:	fa00 f202 	lsl.w	r2, r0, r2
 801890e:	3320      	adds	r3, #32
 8018910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8018914:	f3bf 8f4f 	dsb	sy
}
 8018918:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801891a:	f3bf 8f6f 	isb	sy
}
 801891e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8018920:	bf00      	nop
 8018922:	370c      	adds	r7, #12
 8018924:	46bd      	mov	sp, r7
 8018926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892a:	4770      	bx	lr
 801892c:	e000e100 	.word	0xe000e100

08018930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	4603      	mov	r3, r0
 8018938:	6039      	str	r1, [r7, #0]
 801893a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801893c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018940:	2b00      	cmp	r3, #0
 8018942:	db0a      	blt.n	801895a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	b2da      	uxtb	r2, r3
 8018948:	490c      	ldr	r1, [pc, #48]	; (801897c <__NVIC_SetPriority+0x4c>)
 801894a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801894e:	0112      	lsls	r2, r2, #4
 8018950:	b2d2      	uxtb	r2, r2
 8018952:	440b      	add	r3, r1
 8018954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8018958:	e00a      	b.n	8018970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	b2da      	uxtb	r2, r3
 801895e:	4908      	ldr	r1, [pc, #32]	; (8018980 <__NVIC_SetPriority+0x50>)
 8018960:	79fb      	ldrb	r3, [r7, #7]
 8018962:	f003 030f 	and.w	r3, r3, #15
 8018966:	3b04      	subs	r3, #4
 8018968:	0112      	lsls	r2, r2, #4
 801896a:	b2d2      	uxtb	r2, r2
 801896c:	440b      	add	r3, r1
 801896e:	761a      	strb	r2, [r3, #24]
}
 8018970:	bf00      	nop
 8018972:	370c      	adds	r7, #12
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr
 801897c:	e000e100 	.word	0xe000e100
 8018980:	e000ed00 	.word	0xe000ed00

08018984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018984:	b480      	push	{r7}
 8018986:	b089      	sub	sp, #36	; 0x24
 8018988:	af00      	add	r7, sp, #0
 801898a:	60f8      	str	r0, [r7, #12]
 801898c:	60b9      	str	r1, [r7, #8]
 801898e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	f003 0307 	and.w	r3, r3, #7
 8018996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8018998:	69fb      	ldr	r3, [r7, #28]
 801899a:	f1c3 0307 	rsb	r3, r3, #7
 801899e:	2b04      	cmp	r3, #4
 80189a0:	bf28      	it	cs
 80189a2:	2304      	movcs	r3, #4
 80189a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80189a6:	69fb      	ldr	r3, [r7, #28]
 80189a8:	3304      	adds	r3, #4
 80189aa:	2b06      	cmp	r3, #6
 80189ac:	d902      	bls.n	80189b4 <NVIC_EncodePriority+0x30>
 80189ae:	69fb      	ldr	r3, [r7, #28]
 80189b0:	3b03      	subs	r3, #3
 80189b2:	e000      	b.n	80189b6 <NVIC_EncodePriority+0x32>
 80189b4:	2300      	movs	r3, #0
 80189b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80189b8:	f04f 32ff 	mov.w	r2, #4294967295
 80189bc:	69bb      	ldr	r3, [r7, #24]
 80189be:	fa02 f303 	lsl.w	r3, r2, r3
 80189c2:	43da      	mvns	r2, r3
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	401a      	ands	r2, r3
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80189cc:	f04f 31ff 	mov.w	r1, #4294967295
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	fa01 f303 	lsl.w	r3, r1, r3
 80189d6:	43d9      	mvns	r1, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80189dc:	4313      	orrs	r3, r2
         );
}
 80189de:	4618      	mov	r0, r3
 80189e0:	3724      	adds	r7, #36	; 0x24
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr
	...

080189ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b082      	sub	sp, #8
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	3b01      	subs	r3, #1
 80189f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80189fc:	d301      	bcc.n	8018a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80189fe:	2301      	movs	r3, #1
 8018a00:	e00f      	b.n	8018a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018a02:	4a0a      	ldr	r2, [pc, #40]	; (8018a2c <SysTick_Config+0x40>)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	3b01      	subs	r3, #1
 8018a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018a0a:	210f      	movs	r1, #15
 8018a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8018a10:	f7ff ff8e 	bl	8018930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018a14:	4b05      	ldr	r3, [pc, #20]	; (8018a2c <SysTick_Config+0x40>)
 8018a16:	2200      	movs	r2, #0
 8018a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018a1a:	4b04      	ldr	r3, [pc, #16]	; (8018a2c <SysTick_Config+0x40>)
 8018a1c:	2207      	movs	r2, #7
 8018a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018a20:	2300      	movs	r3, #0
}
 8018a22:	4618      	mov	r0, r3
 8018a24:	3708      	adds	r7, #8
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	e000e010 	.word	0xe000e010

08018a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f7ff ff05 	bl	8018848 <__NVIC_SetPriorityGrouping>
}
 8018a3e:	bf00      	nop
 8018a40:	3708      	adds	r7, #8
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b086      	sub	sp, #24
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	60b9      	str	r1, [r7, #8]
 8018a50:	607a      	str	r2, [r7, #4]
 8018a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8018a54:	2300      	movs	r3, #0
 8018a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8018a58:	f7ff ff1a 	bl	8018890 <__NVIC_GetPriorityGrouping>
 8018a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018a5e:	687a      	ldr	r2, [r7, #4]
 8018a60:	68b9      	ldr	r1, [r7, #8]
 8018a62:	6978      	ldr	r0, [r7, #20]
 8018a64:	f7ff ff8e 	bl	8018984 <NVIC_EncodePriority>
 8018a68:	4602      	mov	r2, r0
 8018a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a6e:	4611      	mov	r1, r2
 8018a70:	4618      	mov	r0, r3
 8018a72:	f7ff ff5d 	bl	8018930 <__NVIC_SetPriority>
}
 8018a76:	bf00      	nop
 8018a78:	3718      	adds	r7, #24
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}

08018a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8018a7e:	b580      	push	{r7, lr}
 8018a80:	b082      	sub	sp, #8
 8018a82:	af00      	add	r7, sp, #0
 8018a84:	4603      	mov	r3, r0
 8018a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8018a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7ff ff0d 	bl	80188ac <__NVIC_EnableIRQ>
}
 8018a92:	bf00      	nop
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}

08018a9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8018a9a:	b580      	push	{r7, lr}
 8018a9c:	b082      	sub	sp, #8
 8018a9e:	af00      	add	r7, sp, #0
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8018aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f7ff ff1d 	bl	80188e8 <__NVIC_DisableIRQ>
}
 8018aae:	bf00      	nop
 8018ab0:	3708      	adds	r7, #8
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}

08018ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	b082      	sub	sp, #8
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	f7ff ff94 	bl	80189ec <SysTick_Config>
 8018ac4:	4603      	mov	r3, r0
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	3708      	adds	r7, #8
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}

08018ace <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8018ace:	b580      	push	{r7, lr}
 8018ad0:	b082      	sub	sp, #8
 8018ad2:	af00      	add	r7, sp, #0
 8018ad4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d101      	bne.n	8018ae0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8018adc:	2301      	movs	r3, #1
 8018ade:	e014      	b.n	8018b0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	791b      	ldrb	r3, [r3, #4]
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d105      	bne.n	8018af6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2200      	movs	r2, #0
 8018aee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	f7ff f8d7 	bl	8017ca4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	2202      	movs	r2, #2
 8018afa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2200      	movs	r2, #0
 8018b00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2201      	movs	r2, #1
 8018b06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8018b08:	2300      	movs	r3, #0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3708      	adds	r7, #8
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}

08018b12 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8018b12:	b480      	push	{r7}
 8018b14:	b087      	sub	sp, #28
 8018b16:	af00      	add	r7, sp, #0
 8018b18:	60f8      	str	r0, [r7, #12]
 8018b1a:	60b9      	str	r1, [r7, #8]
 8018b1c:	607a      	str	r2, [r7, #4]
 8018b1e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8018b20:	2300      	movs	r3, #0
 8018b22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8018b2a:	68bb      	ldr	r3, [r7, #8]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d105      	bne.n	8018b3c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8018b30:	697a      	ldr	r2, [r7, #20]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	4413      	add	r3, r2
 8018b36:	3308      	adds	r3, #8
 8018b38:	617b      	str	r3, [r7, #20]
 8018b3a:	e004      	b.n	8018b46 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8018b3c:	697a      	ldr	r2, [r7, #20]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4413      	add	r3, r2
 8018b42:	3314      	adds	r3, #20
 8018b44:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8018b46:	697b      	ldr	r3, [r7, #20]
 8018b48:	461a      	mov	r2, r3
 8018b4a:	683b      	ldr	r3, [r7, #0]
 8018b4c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	371c      	adds	r7, #28
 8018b54:	46bd      	mov	sp, r7
 8018b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5a:	4770      	bx	lr

08018b5c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b087      	sub	sp, #28
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	60f8      	str	r0, [r7, #12]
 8018b64:	60b9      	str	r1, [r7, #8]
 8018b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	795b      	ldrb	r3, [r3, #5]
 8018b6c:	2b01      	cmp	r3, #1
 8018b6e:	d101      	bne.n	8018b74 <HAL_DAC_ConfigChannel+0x18>
 8018b70:	2302      	movs	r3, #2
 8018b72:	e03c      	b.n	8018bee <HAL_DAC_ConfigChannel+0x92>
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	2201      	movs	r2, #1
 8018b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	2202      	movs	r2, #2
 8018b7e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f003 0310 	and.w	r3, r3, #16
 8018b8e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8018b92:	fa02 f303 	lsl.w	r3, r2, r3
 8018b96:	43db      	mvns	r3, r3
 8018b98:	697a      	ldr	r2, [r7, #20]
 8018b9a:	4013      	ands	r3, r2
 8018b9c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	681a      	ldr	r2, [r3, #0]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	4313      	orrs	r3, r2
 8018ba8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	f003 0310 	and.w	r3, r3, #16
 8018bb0:	693a      	ldr	r2, [r7, #16]
 8018bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8018bb6:	697a      	ldr	r2, [r7, #20]
 8018bb8:	4313      	orrs	r3, r2
 8018bba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	697a      	ldr	r2, [r7, #20]
 8018bc2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	6819      	ldr	r1, [r3, #0]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f003 0310 	and.w	r3, r3, #16
 8018bd0:	22c0      	movs	r2, #192	; 0xc0
 8018bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8018bd6:	43da      	mvns	r2, r3
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	400a      	ands	r2, r1
 8018bde:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	2201      	movs	r2, #1
 8018be4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2200      	movs	r2, #0
 8018bea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8018bec:	2300      	movs	r3, #0
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	371c      	adds	r7, #28
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr
	...

08018bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b086      	sub	sp, #24
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8018c04:	2300      	movs	r3, #0
 8018c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8018c08:	f7ff fb7c 	bl	8018304 <HAL_GetTick>
 8018c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d101      	bne.n	8018c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8018c14:	2301      	movs	r3, #1
 8018c16:	e099      	b.n	8018d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2202      	movs	r2, #2
 8018c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f022 0201 	bic.w	r2, r2, #1
 8018c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c38:	e00f      	b.n	8018c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8018c3a:	f7ff fb63 	bl	8018304 <HAL_GetTick>
 8018c3e:	4602      	mov	r2, r0
 8018c40:	693b      	ldr	r3, [r7, #16]
 8018c42:	1ad3      	subs	r3, r2, r3
 8018c44:	2b05      	cmp	r3, #5
 8018c46:	d908      	bls.n	8018c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2220      	movs	r2, #32
 8018c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	2203      	movs	r2, #3
 8018c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8018c56:	2303      	movs	r3, #3
 8018c58:	e078      	b.n	8018d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	f003 0301 	and.w	r3, r3, #1
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d1e8      	bne.n	8018c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8018c70:	697a      	ldr	r2, [r7, #20]
 8018c72:	4b38      	ldr	r3, [pc, #224]	; (8018d54 <HAL_DMA_Init+0x158>)
 8018c74:	4013      	ands	r3, r2
 8018c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	685a      	ldr	r2, [r3, #4]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	689b      	ldr	r3, [r3, #8]
 8018c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	691b      	ldr	r3, [r3, #16]
 8018c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8018c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	699b      	ldr	r3, [r3, #24]
 8018c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8018c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	6a1b      	ldr	r3, [r3, #32]
 8018ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8018ca6:	697a      	ldr	r2, [r7, #20]
 8018ca8:	4313      	orrs	r3, r2
 8018caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb0:	2b04      	cmp	r3, #4
 8018cb2:	d107      	bne.n	8018cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cbc:	4313      	orrs	r3, r2
 8018cbe:	697a      	ldr	r2, [r7, #20]
 8018cc0:	4313      	orrs	r3, r2
 8018cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	697a      	ldr	r2, [r7, #20]
 8018cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	695b      	ldr	r3, [r3, #20]
 8018cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8018cd4:	697b      	ldr	r3, [r7, #20]
 8018cd6:	f023 0307 	bic.w	r3, r3, #7
 8018cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce0:	697a      	ldr	r2, [r7, #20]
 8018ce2:	4313      	orrs	r3, r2
 8018ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cea:	2b04      	cmp	r3, #4
 8018cec:	d117      	bne.n	8018d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cf2:	697a      	ldr	r2, [r7, #20]
 8018cf4:	4313      	orrs	r3, r2
 8018cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d00e      	beq.n	8018d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f000 fa0b 	bl	801911c <DMA_CheckFifoParam>
 8018d06:	4603      	mov	r3, r0
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d008      	beq.n	8018d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2240      	movs	r2, #64	; 0x40
 8018d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	2201      	movs	r2, #1
 8018d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	e016      	b.n	8018d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	697a      	ldr	r2, [r7, #20]
 8018d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f000 f9c2 	bl	80190b0 <DMA_CalcBaseAndBitshift>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d34:	223f      	movs	r2, #63	; 0x3f
 8018d36:	409a      	lsls	r2, r3
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	2201      	movs	r2, #1
 8018d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8018d4a:	2300      	movs	r3, #0
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3718      	adds	r7, #24
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}
 8018d54:	f010803f 	.word	0xf010803f

08018d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8018d58:	b480      	push	{r7}
 8018d5a:	b083      	sub	sp, #12
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	2b02      	cmp	r3, #2
 8018d6a:	d004      	beq.n	8018d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	2280      	movs	r2, #128	; 0x80
 8018d70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8018d72:	2301      	movs	r3, #1
 8018d74:	e00c      	b.n	8018d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2205      	movs	r2, #5
 8018d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	681a      	ldr	r2, [r3, #0]
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	f022 0201 	bic.w	r2, r2, #1
 8018d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8018d8e:	2300      	movs	r3, #0
}
 8018d90:	4618      	mov	r0, r3
 8018d92:	370c      	adds	r7, #12
 8018d94:	46bd      	mov	sp, r7
 8018d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9a:	4770      	bx	lr

08018d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b086      	sub	sp, #24
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8018da4:	2300      	movs	r3, #0
 8018da6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8018da8:	4b92      	ldr	r3, [pc, #584]	; (8018ff4 <HAL_DMA_IRQHandler+0x258>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4a92      	ldr	r2, [pc, #584]	; (8018ff8 <HAL_DMA_IRQHandler+0x25c>)
 8018dae:	fba2 2303 	umull	r2, r3, r2, r3
 8018db2:	0a9b      	lsrs	r3, r3, #10
 8018db4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018dba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8018dbc:	693b      	ldr	r3, [r7, #16]
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dc6:	2208      	movs	r2, #8
 8018dc8:	409a      	lsls	r2, r3
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	4013      	ands	r3, r2
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d01a      	beq.n	8018e08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	f003 0304 	and.w	r3, r3, #4
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d013      	beq.n	8018e08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	f022 0204 	bic.w	r2, r2, #4
 8018dee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018df4:	2208      	movs	r2, #8
 8018df6:	409a      	lsls	r2, r3
 8018df8:	693b      	ldr	r3, [r7, #16]
 8018dfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e00:	f043 0201 	orr.w	r2, r3, #1
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e0c:	2201      	movs	r2, #1
 8018e0e:	409a      	lsls	r2, r3
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	4013      	ands	r3, r2
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d012      	beq.n	8018e3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	695b      	ldr	r3, [r3, #20]
 8018e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d00b      	beq.n	8018e3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e2a:	2201      	movs	r2, #1
 8018e2c:	409a      	lsls	r2, r3
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e36:	f043 0202 	orr.w	r2, r3, #2
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e42:	2204      	movs	r2, #4
 8018e44:	409a      	lsls	r2, r3
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	4013      	ands	r3, r2
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d012      	beq.n	8018e74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	f003 0302 	and.w	r3, r3, #2
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d00b      	beq.n	8018e74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e60:	2204      	movs	r2, #4
 8018e62:	409a      	lsls	r2, r3
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e6c:	f043 0204 	orr.w	r2, r3, #4
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e78:	2210      	movs	r2, #16
 8018e7a:	409a      	lsls	r2, r3
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	4013      	ands	r3, r2
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d043      	beq.n	8018f0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	f003 0308 	and.w	r3, r3, #8
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d03c      	beq.n	8018f0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e96:	2210      	movs	r2, #16
 8018e98:	409a      	lsls	r2, r3
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d018      	beq.n	8018ede <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d108      	bne.n	8018ecc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d024      	beq.n	8018f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	4798      	blx	r3
 8018eca:	e01f      	b.n	8018f0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d01b      	beq.n	8018f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	4798      	blx	r3
 8018edc:	e016      	b.n	8018f0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d107      	bne.n	8018efc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	f022 0208 	bic.w	r2, r2, #8
 8018efa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d003      	beq.n	8018f0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f10:	2220      	movs	r2, #32
 8018f12:	409a      	lsls	r2, r3
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	4013      	ands	r3, r2
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f000 808e 	beq.w	801903a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	f003 0310 	and.w	r3, r3, #16
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f000 8086 	beq.w	801903a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f32:	2220      	movs	r2, #32
 8018f34:	409a      	lsls	r2, r3
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018f40:	b2db      	uxtb	r3, r3
 8018f42:	2b05      	cmp	r3, #5
 8018f44:	d136      	bne.n	8018fb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	681a      	ldr	r2, [r3, #0]
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	f022 0216 	bic.w	r2, r2, #22
 8018f54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	695a      	ldr	r2, [r3, #20]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018f64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d103      	bne.n	8018f76 <HAL_DMA_IRQHandler+0x1da>
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d007      	beq.n	8018f86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	681a      	ldr	r2, [r3, #0]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	f022 0208 	bic.w	r2, r2, #8
 8018f84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f8a:	223f      	movs	r2, #63	; 0x3f
 8018f8c:	409a      	lsls	r2, r3
 8018f8e:	693b      	ldr	r3, [r7, #16]
 8018f90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2200      	movs	r2, #0
 8018f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2201      	movs	r2, #1
 8018f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d07d      	beq.n	80190a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fae:	6878      	ldr	r0, [r7, #4]
 8018fb0:	4798      	blx	r3
        }
        return;
 8018fb2:	e078      	b.n	80190a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d01c      	beq.n	8018ffc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d108      	bne.n	8018fe2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d030      	beq.n	801903a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fdc:	6878      	ldr	r0, [r7, #4]
 8018fde:	4798      	blx	r3
 8018fe0:	e02b      	b.n	801903a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d027      	beq.n	801903a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fee:	6878      	ldr	r0, [r7, #4]
 8018ff0:	4798      	blx	r3
 8018ff2:	e022      	b.n	801903a <HAL_DMA_IRQHandler+0x29e>
 8018ff4:	20000588 	.word	0x20000588
 8018ff8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019006:	2b00      	cmp	r3, #0
 8019008:	d10f      	bne.n	801902a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	681a      	ldr	r2, [r3, #0]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	f022 0210 	bic.w	r2, r2, #16
 8019018:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2200      	movs	r2, #0
 801901e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	2201      	movs	r2, #1
 8019026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801902e:	2b00      	cmp	r3, #0
 8019030:	d003      	beq.n	801903a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019036:	6878      	ldr	r0, [r7, #4]
 8019038:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801903e:	2b00      	cmp	r3, #0
 8019040:	d032      	beq.n	80190a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019046:	f003 0301 	and.w	r3, r3, #1
 801904a:	2b00      	cmp	r3, #0
 801904c:	d022      	beq.n	8019094 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	2205      	movs	r2, #5
 8019052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f022 0201 	bic.w	r2, r2, #1
 8019064:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	3301      	adds	r3, #1
 801906a:	60bb      	str	r3, [r7, #8]
 801906c:	697a      	ldr	r2, [r7, #20]
 801906e:	429a      	cmp	r2, r3
 8019070:	d307      	bcc.n	8019082 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	f003 0301 	and.w	r3, r3, #1
 801907c:	2b00      	cmp	r3, #0
 801907e:	d1f2      	bne.n	8019066 <HAL_DMA_IRQHandler+0x2ca>
 8019080:	e000      	b.n	8019084 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8019082:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	2200      	movs	r2, #0
 8019088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	2201      	movs	r2, #1
 8019090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019098:	2b00      	cmp	r3, #0
 801909a:	d005      	beq.n	80190a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	4798      	blx	r3
 80190a4:	e000      	b.n	80190a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80190a6:	bf00      	nop
    }
  }
}
 80190a8:	3718      	adds	r7, #24
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}
 80190ae:	bf00      	nop

080190b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80190b0:	b480      	push	{r7}
 80190b2:	b085      	sub	sp, #20
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	b2db      	uxtb	r3, r3
 80190be:	3b10      	subs	r3, #16
 80190c0:	4a14      	ldr	r2, [pc, #80]	; (8019114 <DMA_CalcBaseAndBitshift+0x64>)
 80190c2:	fba2 2303 	umull	r2, r3, r2, r3
 80190c6:	091b      	lsrs	r3, r3, #4
 80190c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80190ca:	4a13      	ldr	r2, [pc, #76]	; (8019118 <DMA_CalcBaseAndBitshift+0x68>)
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	4413      	add	r3, r2
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	461a      	mov	r2, r3
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	2b03      	cmp	r3, #3
 80190dc:	d909      	bls.n	80190f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190e6:	f023 0303 	bic.w	r3, r3, #3
 80190ea:	1d1a      	adds	r2, r3, #4
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	659a      	str	r2, [r3, #88]	; 0x58
 80190f0:	e007      	b.n	8019102 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80190fa:	f023 0303 	bic.w	r3, r3, #3
 80190fe:	687a      	ldr	r2, [r7, #4]
 8019100:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019106:	4618      	mov	r0, r3
 8019108:	3714      	adds	r7, #20
 801910a:	46bd      	mov	sp, r7
 801910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019110:	4770      	bx	lr
 8019112:	bf00      	nop
 8019114:	aaaaaaab 	.word	0xaaaaaaab
 8019118:	08002360 	.word	0x08002360

0801911c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801911c:	b480      	push	{r7}
 801911e:	b085      	sub	sp, #20
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019124:	2300      	movs	r3, #0
 8019126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801912c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	699b      	ldr	r3, [r3, #24]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d11f      	bne.n	8019176 <DMA_CheckFifoParam+0x5a>
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	2b03      	cmp	r3, #3
 801913a:	d856      	bhi.n	80191ea <DMA_CheckFifoParam+0xce>
 801913c:	a201      	add	r2, pc, #4	; (adr r2, 8019144 <DMA_CheckFifoParam+0x28>)
 801913e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019142:	bf00      	nop
 8019144:	08019155 	.word	0x08019155
 8019148:	08019167 	.word	0x08019167
 801914c:	08019155 	.word	0x08019155
 8019150:	080191eb 	.word	0x080191eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801915c:	2b00      	cmp	r3, #0
 801915e:	d046      	beq.n	80191ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8019160:	2301      	movs	r3, #1
 8019162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019164:	e043      	b.n	80191ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801916a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801916e:	d140      	bne.n	80191f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8019170:	2301      	movs	r3, #1
 8019172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019174:	e03d      	b.n	80191f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	699b      	ldr	r3, [r3, #24]
 801917a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801917e:	d121      	bne.n	80191c4 <DMA_CheckFifoParam+0xa8>
 8019180:	68bb      	ldr	r3, [r7, #8]
 8019182:	2b03      	cmp	r3, #3
 8019184:	d837      	bhi.n	80191f6 <DMA_CheckFifoParam+0xda>
 8019186:	a201      	add	r2, pc, #4	; (adr r2, 801918c <DMA_CheckFifoParam+0x70>)
 8019188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801918c:	0801919d 	.word	0x0801919d
 8019190:	080191a3 	.word	0x080191a3
 8019194:	0801919d 	.word	0x0801919d
 8019198:	080191b5 	.word	0x080191b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801919c:	2301      	movs	r3, #1
 801919e:	73fb      	strb	r3, [r7, #15]
      break;
 80191a0:	e030      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d025      	beq.n	80191fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80191ae:	2301      	movs	r3, #1
 80191b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80191b2:	e022      	b.n	80191fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80191bc:	d11f      	bne.n	80191fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80191be:	2301      	movs	r3, #1
 80191c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80191c2:	e01c      	b.n	80191fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80191c4:	68bb      	ldr	r3, [r7, #8]
 80191c6:	2b02      	cmp	r3, #2
 80191c8:	d903      	bls.n	80191d2 <DMA_CheckFifoParam+0xb6>
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	2b03      	cmp	r3, #3
 80191ce:	d003      	beq.n	80191d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80191d0:	e018      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80191d2:	2301      	movs	r3, #1
 80191d4:	73fb      	strb	r3, [r7, #15]
      break;
 80191d6:	e015      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d00e      	beq.n	8019202 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80191e4:	2301      	movs	r3, #1
 80191e6:	73fb      	strb	r3, [r7, #15]
      break;
 80191e8:	e00b      	b.n	8019202 <DMA_CheckFifoParam+0xe6>
      break;
 80191ea:	bf00      	nop
 80191ec:	e00a      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;
 80191ee:	bf00      	nop
 80191f0:	e008      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;
 80191f2:	bf00      	nop
 80191f4:	e006      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;
 80191f6:	bf00      	nop
 80191f8:	e004      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;
 80191fa:	bf00      	nop
 80191fc:	e002      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;   
 80191fe:	bf00      	nop
 8019200:	e000      	b.n	8019204 <DMA_CheckFifoParam+0xe8>
      break;
 8019202:	bf00      	nop
    }
  } 
  
  return status; 
 8019204:	7bfb      	ldrb	r3, [r7, #15]
}
 8019206:	4618      	mov	r0, r3
 8019208:	3714      	adds	r7, #20
 801920a:	46bd      	mov	sp, r7
 801920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019210:	4770      	bx	lr
 8019212:	bf00      	nop

08019214 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b086      	sub	sp, #24
 8019218:	af00      	add	r7, sp, #0
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	60b9      	str	r1, [r7, #8]
 801921e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019222:	2301      	movs	r3, #1
 8019224:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019226:	4b23      	ldr	r3, [pc, #140]	; (80192b4 <HAL_FLASH_Program+0xa0>)
 8019228:	7e1b      	ldrb	r3, [r3, #24]
 801922a:	2b01      	cmp	r3, #1
 801922c:	d101      	bne.n	8019232 <HAL_FLASH_Program+0x1e>
 801922e:	2302      	movs	r3, #2
 8019230:	e03b      	b.n	80192aa <HAL_FLASH_Program+0x96>
 8019232:	4b20      	ldr	r3, [pc, #128]	; (80192b4 <HAL_FLASH_Program+0xa0>)
 8019234:	2201      	movs	r2, #1
 8019236:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019238:	f24c 3050 	movw	r0, #50000	; 0xc350
 801923c:	f000 f870 	bl	8019320 <FLASH_WaitForLastOperation>
 8019240:	4603      	mov	r3, r0
 8019242:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8019244:	7dfb      	ldrb	r3, [r7, #23]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d12b      	bne.n	80192a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d105      	bne.n	801925c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8019250:	783b      	ldrb	r3, [r7, #0]
 8019252:	4619      	mov	r1, r3
 8019254:	68b8      	ldr	r0, [r7, #8]
 8019256:	f000 f91b 	bl	8019490 <FLASH_Program_Byte>
 801925a:	e016      	b.n	801928a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	2b01      	cmp	r3, #1
 8019260:	d105      	bne.n	801926e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8019262:	883b      	ldrh	r3, [r7, #0]
 8019264:	4619      	mov	r1, r3
 8019266:	68b8      	ldr	r0, [r7, #8]
 8019268:	f000 f8ee 	bl	8019448 <FLASH_Program_HalfWord>
 801926c:	e00d      	b.n	801928a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	2b02      	cmp	r3, #2
 8019272:	d105      	bne.n	8019280 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8019274:	683b      	ldr	r3, [r7, #0]
 8019276:	4619      	mov	r1, r3
 8019278:	68b8      	ldr	r0, [r7, #8]
 801927a:	f000 f8c3 	bl	8019404 <FLASH_Program_Word>
 801927e:	e004      	b.n	801928a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8019280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019284:	68b8      	ldr	r0, [r7, #8]
 8019286:	f000 f88b 	bl	80193a0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801928a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801928e:	f000 f847 	bl	8019320 <FLASH_WaitForLastOperation>
 8019292:	4603      	mov	r3, r0
 8019294:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8019296:	4b08      	ldr	r3, [pc, #32]	; (80192b8 <HAL_FLASH_Program+0xa4>)
 8019298:	691b      	ldr	r3, [r3, #16]
 801929a:	4a07      	ldr	r2, [pc, #28]	; (80192b8 <HAL_FLASH_Program+0xa4>)
 801929c:	f023 0301 	bic.w	r3, r3, #1
 80192a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80192a2:	4b04      	ldr	r3, [pc, #16]	; (80192b4 <HAL_FLASH_Program+0xa0>)
 80192a4:	2200      	movs	r2, #0
 80192a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80192a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	3718      	adds	r7, #24
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	20006c58 	.word	0x20006c58
 80192b8:	40023c00 	.word	0x40023c00

080192bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80192bc:	b480      	push	{r7}
 80192be:	b083      	sub	sp, #12
 80192c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80192c2:	2300      	movs	r3, #0
 80192c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192c6:	4b0b      	ldr	r3, [pc, #44]	; (80192f4 <HAL_FLASH_Unlock+0x38>)
 80192c8:	691b      	ldr	r3, [r3, #16]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	da0b      	bge.n	80192e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80192ce:	4b09      	ldr	r3, [pc, #36]	; (80192f4 <HAL_FLASH_Unlock+0x38>)
 80192d0:	4a09      	ldr	r2, [pc, #36]	; (80192f8 <HAL_FLASH_Unlock+0x3c>)
 80192d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80192d4:	4b07      	ldr	r3, [pc, #28]	; (80192f4 <HAL_FLASH_Unlock+0x38>)
 80192d6:	4a09      	ldr	r2, [pc, #36]	; (80192fc <HAL_FLASH_Unlock+0x40>)
 80192d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80192da:	4b06      	ldr	r3, [pc, #24]	; (80192f4 <HAL_FLASH_Unlock+0x38>)
 80192dc:	691b      	ldr	r3, [r3, #16]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	da01      	bge.n	80192e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80192e2:	2301      	movs	r3, #1
 80192e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80192e6:	79fb      	ldrb	r3, [r7, #7]
}
 80192e8:	4618      	mov	r0, r3
 80192ea:	370c      	adds	r7, #12
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr
 80192f4:	40023c00 	.word	0x40023c00
 80192f8:	45670123 	.word	0x45670123
 80192fc:	cdef89ab 	.word	0xcdef89ab

08019300 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8019300:	b480      	push	{r7}
 8019302:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8019304:	4b05      	ldr	r3, [pc, #20]	; (801931c <HAL_FLASH_Lock+0x1c>)
 8019306:	691b      	ldr	r3, [r3, #16]
 8019308:	4a04      	ldr	r2, [pc, #16]	; (801931c <HAL_FLASH_Lock+0x1c>)
 801930a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801930e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8019310:	2300      	movs	r3, #0
}
 8019312:	4618      	mov	r0, r3
 8019314:	46bd      	mov	sp, r7
 8019316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931a:	4770      	bx	lr
 801931c:	40023c00 	.word	0x40023c00

08019320 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8019320:	b580      	push	{r7, lr}
 8019322:	b084      	sub	sp, #16
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019328:	2300      	movs	r3, #0
 801932a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801932c:	4b1a      	ldr	r3, [pc, #104]	; (8019398 <FLASH_WaitForLastOperation+0x78>)
 801932e:	2200      	movs	r2, #0
 8019330:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8019332:	f7fe ffe7 	bl	8018304 <HAL_GetTick>
 8019336:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8019338:	e010      	b.n	801935c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019340:	d00c      	beq.n	801935c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d007      	beq.n	8019358 <FLASH_WaitForLastOperation+0x38>
 8019348:	f7fe ffdc 	bl	8018304 <HAL_GetTick>
 801934c:	4602      	mov	r2, r0
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	1ad3      	subs	r3, r2, r3
 8019352:	687a      	ldr	r2, [r7, #4]
 8019354:	429a      	cmp	r2, r3
 8019356:	d201      	bcs.n	801935c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8019358:	2303      	movs	r3, #3
 801935a:	e019      	b.n	8019390 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801935c:	4b0f      	ldr	r3, [pc, #60]	; (801939c <FLASH_WaitForLastOperation+0x7c>)
 801935e:	68db      	ldr	r3, [r3, #12]
 8019360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019364:	2b00      	cmp	r3, #0
 8019366:	d1e8      	bne.n	801933a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8019368:	4b0c      	ldr	r3, [pc, #48]	; (801939c <FLASH_WaitForLastOperation+0x7c>)
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	f003 0301 	and.w	r3, r3, #1
 8019370:	2b00      	cmp	r3, #0
 8019372:	d002      	beq.n	801937a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8019374:	4b09      	ldr	r3, [pc, #36]	; (801939c <FLASH_WaitForLastOperation+0x7c>)
 8019376:	2201      	movs	r2, #1
 8019378:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801937a:	4b08      	ldr	r3, [pc, #32]	; (801939c <FLASH_WaitForLastOperation+0x7c>)
 801937c:	68db      	ldr	r3, [r3, #12]
 801937e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8019382:	2b00      	cmp	r3, #0
 8019384:	d003      	beq.n	801938e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8019386:	f000 f8a5 	bl	80194d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801938a:	2301      	movs	r3, #1
 801938c:	e000      	b.n	8019390 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801938e:	2300      	movs	r3, #0
  
}  
 8019390:	4618      	mov	r0, r3
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	20006c58 	.word	0x20006c58
 801939c:	40023c00 	.word	0x40023c00

080193a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80193a0:	b480      	push	{r7}
 80193a2:	b085      	sub	sp, #20
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80193ac:	4b14      	ldr	r3, [pc, #80]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193ae:	691b      	ldr	r3, [r3, #16]
 80193b0:	4a13      	ldr	r2, [pc, #76]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80193b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80193b8:	4b11      	ldr	r3, [pc, #68]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193ba:	691b      	ldr	r3, [r3, #16]
 80193bc:	4a10      	ldr	r2, [pc, #64]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80193c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80193c4:	4b0e      	ldr	r3, [pc, #56]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193c6:	691b      	ldr	r3, [r3, #16]
 80193c8:	4a0d      	ldr	r2, [pc, #52]	; (8019400 <FLASH_Program_DoubleWord+0x60>)
 80193ca:	f043 0301 	orr.w	r3, r3, #1
 80193ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	683a      	ldr	r2, [r7, #0]
 80193d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80193d6:	f3bf 8f6f 	isb	sy
}
 80193da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80193dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80193e0:	f04f 0200 	mov.w	r2, #0
 80193e4:	f04f 0300 	mov.w	r3, #0
 80193e8:	000a      	movs	r2, r1
 80193ea:	2300      	movs	r3, #0
 80193ec:	68f9      	ldr	r1, [r7, #12]
 80193ee:	3104      	adds	r1, #4
 80193f0:	4613      	mov	r3, r2
 80193f2:	600b      	str	r3, [r1, #0]
}
 80193f4:	bf00      	nop
 80193f6:	3714      	adds	r7, #20
 80193f8:	46bd      	mov	sp, r7
 80193fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fe:	4770      	bx	lr
 8019400:	40023c00 	.word	0x40023c00

08019404 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8019404:	b480      	push	{r7}
 8019406:	b083      	sub	sp, #12
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801940e:	4b0d      	ldr	r3, [pc, #52]	; (8019444 <FLASH_Program_Word+0x40>)
 8019410:	691b      	ldr	r3, [r3, #16]
 8019412:	4a0c      	ldr	r2, [pc, #48]	; (8019444 <FLASH_Program_Word+0x40>)
 8019414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019418:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801941a:	4b0a      	ldr	r3, [pc, #40]	; (8019444 <FLASH_Program_Word+0x40>)
 801941c:	691b      	ldr	r3, [r3, #16]
 801941e:	4a09      	ldr	r2, [pc, #36]	; (8019444 <FLASH_Program_Word+0x40>)
 8019420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8019426:	4b07      	ldr	r3, [pc, #28]	; (8019444 <FLASH_Program_Word+0x40>)
 8019428:	691b      	ldr	r3, [r3, #16]
 801942a:	4a06      	ldr	r2, [pc, #24]	; (8019444 <FLASH_Program_Word+0x40>)
 801942c:	f043 0301 	orr.w	r3, r3, #1
 8019430:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	683a      	ldr	r2, [r7, #0]
 8019436:	601a      	str	r2, [r3, #0]
}
 8019438:	bf00      	nop
 801943a:	370c      	adds	r7, #12
 801943c:	46bd      	mov	sp, r7
 801943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019442:	4770      	bx	lr
 8019444:	40023c00 	.word	0x40023c00

08019448 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8019448:	b480      	push	{r7}
 801944a:	b083      	sub	sp, #12
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
 8019450:	460b      	mov	r3, r1
 8019452:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019454:	4b0d      	ldr	r3, [pc, #52]	; (801948c <FLASH_Program_HalfWord+0x44>)
 8019456:	691b      	ldr	r3, [r3, #16]
 8019458:	4a0c      	ldr	r2, [pc, #48]	; (801948c <FLASH_Program_HalfWord+0x44>)
 801945a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801945e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8019460:	4b0a      	ldr	r3, [pc, #40]	; (801948c <FLASH_Program_HalfWord+0x44>)
 8019462:	691b      	ldr	r3, [r3, #16]
 8019464:	4a09      	ldr	r2, [pc, #36]	; (801948c <FLASH_Program_HalfWord+0x44>)
 8019466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801946a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801946c:	4b07      	ldr	r3, [pc, #28]	; (801948c <FLASH_Program_HalfWord+0x44>)
 801946e:	691b      	ldr	r3, [r3, #16]
 8019470:	4a06      	ldr	r2, [pc, #24]	; (801948c <FLASH_Program_HalfWord+0x44>)
 8019472:	f043 0301 	orr.w	r3, r3, #1
 8019476:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	887a      	ldrh	r2, [r7, #2]
 801947c:	801a      	strh	r2, [r3, #0]
}
 801947e:	bf00      	nop
 8019480:	370c      	adds	r7, #12
 8019482:	46bd      	mov	sp, r7
 8019484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019488:	4770      	bx	lr
 801948a:	bf00      	nop
 801948c:	40023c00 	.word	0x40023c00

08019490 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8019490:	b480      	push	{r7}
 8019492:	b083      	sub	sp, #12
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
 8019498:	460b      	mov	r3, r1
 801949a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801949c:	4b0c      	ldr	r3, [pc, #48]	; (80194d0 <FLASH_Program_Byte+0x40>)
 801949e:	691b      	ldr	r3, [r3, #16]
 80194a0:	4a0b      	ldr	r2, [pc, #44]	; (80194d0 <FLASH_Program_Byte+0x40>)
 80194a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80194a8:	4b09      	ldr	r3, [pc, #36]	; (80194d0 <FLASH_Program_Byte+0x40>)
 80194aa:	4a09      	ldr	r2, [pc, #36]	; (80194d0 <FLASH_Program_Byte+0x40>)
 80194ac:	691b      	ldr	r3, [r3, #16]
 80194ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80194b0:	4b07      	ldr	r3, [pc, #28]	; (80194d0 <FLASH_Program_Byte+0x40>)
 80194b2:	691b      	ldr	r3, [r3, #16]
 80194b4:	4a06      	ldr	r2, [pc, #24]	; (80194d0 <FLASH_Program_Byte+0x40>)
 80194b6:	f043 0301 	orr.w	r3, r3, #1
 80194ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	78fa      	ldrb	r2, [r7, #3]
 80194c0:	701a      	strb	r2, [r3, #0]
}
 80194c2:	bf00      	nop
 80194c4:	370c      	adds	r7, #12
 80194c6:	46bd      	mov	sp, r7
 80194c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194cc:	4770      	bx	lr
 80194ce:	bf00      	nop
 80194d0:	40023c00 	.word	0x40023c00

080194d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80194d4:	b480      	push	{r7}
 80194d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80194d8:	4b2f      	ldr	r3, [pc, #188]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 80194da:	68db      	ldr	r3, [r3, #12]
 80194dc:	f003 0310 	and.w	r3, r3, #16
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d008      	beq.n	80194f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80194e4:	4b2d      	ldr	r3, [pc, #180]	; (801959c <FLASH_SetErrorCode+0xc8>)
 80194e6:	69db      	ldr	r3, [r3, #28]
 80194e8:	f043 0310 	orr.w	r3, r3, #16
 80194ec:	4a2b      	ldr	r2, [pc, #172]	; (801959c <FLASH_SetErrorCode+0xc8>)
 80194ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80194f0:	4b29      	ldr	r3, [pc, #164]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 80194f2:	2210      	movs	r2, #16
 80194f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80194f6:	4b28      	ldr	r3, [pc, #160]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 80194f8:	68db      	ldr	r3, [r3, #12]
 80194fa:	f003 0320 	and.w	r3, r3, #32
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d008      	beq.n	8019514 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8019502:	4b26      	ldr	r3, [pc, #152]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019504:	69db      	ldr	r3, [r3, #28]
 8019506:	f043 0308 	orr.w	r3, r3, #8
 801950a:	4a24      	ldr	r2, [pc, #144]	; (801959c <FLASH_SetErrorCode+0xc8>)
 801950c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801950e:	4b22      	ldr	r3, [pc, #136]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 8019510:	2220      	movs	r2, #32
 8019512:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8019514:	4b20      	ldr	r3, [pc, #128]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 8019516:	68db      	ldr	r3, [r3, #12]
 8019518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801951c:	2b00      	cmp	r3, #0
 801951e:	d008      	beq.n	8019532 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8019520:	4b1e      	ldr	r3, [pc, #120]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019522:	69db      	ldr	r3, [r3, #28]
 8019524:	f043 0304 	orr.w	r3, r3, #4
 8019528:	4a1c      	ldr	r2, [pc, #112]	; (801959c <FLASH_SetErrorCode+0xc8>)
 801952a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801952c:	4b1a      	ldr	r3, [pc, #104]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 801952e:	2240      	movs	r2, #64	; 0x40
 8019530:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8019532:	4b19      	ldr	r3, [pc, #100]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 8019534:	68db      	ldr	r3, [r3, #12]
 8019536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801953a:	2b00      	cmp	r3, #0
 801953c:	d008      	beq.n	8019550 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801953e:	4b17      	ldr	r3, [pc, #92]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019540:	69db      	ldr	r3, [r3, #28]
 8019542:	f043 0302 	orr.w	r3, r3, #2
 8019546:	4a15      	ldr	r2, [pc, #84]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019548:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801954a:	4b13      	ldr	r3, [pc, #76]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 801954c:	2280      	movs	r2, #128	; 0x80
 801954e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8019550:	4b11      	ldr	r3, [pc, #68]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 8019552:	68db      	ldr	r3, [r3, #12]
 8019554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019558:	2b00      	cmp	r3, #0
 801955a:	d009      	beq.n	8019570 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801955c:	4b0f      	ldr	r3, [pc, #60]	; (801959c <FLASH_SetErrorCode+0xc8>)
 801955e:	69db      	ldr	r3, [r3, #28]
 8019560:	f043 0301 	orr.w	r3, r3, #1
 8019564:	4a0d      	ldr	r2, [pc, #52]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019566:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8019568:	4b0b      	ldr	r3, [pc, #44]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 801956a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801956e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8019570:	4b09      	ldr	r3, [pc, #36]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	f003 0302 	and.w	r3, r3, #2
 8019578:	2b00      	cmp	r3, #0
 801957a:	d008      	beq.n	801958e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801957c:	4b07      	ldr	r3, [pc, #28]	; (801959c <FLASH_SetErrorCode+0xc8>)
 801957e:	69db      	ldr	r3, [r3, #28]
 8019580:	f043 0320 	orr.w	r3, r3, #32
 8019584:	4a05      	ldr	r2, [pc, #20]	; (801959c <FLASH_SetErrorCode+0xc8>)
 8019586:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8019588:	4b03      	ldr	r3, [pc, #12]	; (8019598 <FLASH_SetErrorCode+0xc4>)
 801958a:	2202      	movs	r2, #2
 801958c:	60da      	str	r2, [r3, #12]
  }
}
 801958e:	bf00      	nop
 8019590:	46bd      	mov	sp, r7
 8019592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019596:	4770      	bx	lr
 8019598:	40023c00 	.word	0x40023c00
 801959c:	20006c58 	.word	0x20006c58

080195a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b084      	sub	sp, #16
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
 80195a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80195aa:	2301      	movs	r3, #1
 80195ac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80195ae:	2300      	movs	r3, #0
 80195b0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80195b2:	4b31      	ldr	r3, [pc, #196]	; (8019678 <HAL_FLASHEx_Erase+0xd8>)
 80195b4:	7e1b      	ldrb	r3, [r3, #24]
 80195b6:	2b01      	cmp	r3, #1
 80195b8:	d101      	bne.n	80195be <HAL_FLASHEx_Erase+0x1e>
 80195ba:	2302      	movs	r3, #2
 80195bc:	e058      	b.n	8019670 <HAL_FLASHEx_Erase+0xd0>
 80195be:	4b2e      	ldr	r3, [pc, #184]	; (8019678 <HAL_FLASHEx_Erase+0xd8>)
 80195c0:	2201      	movs	r2, #1
 80195c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195c8:	f7ff feaa 	bl	8019320 <FLASH_WaitForLastOperation>
 80195cc:	4603      	mov	r3, r0
 80195ce:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80195d0:	7bfb      	ldrb	r3, [r7, #15]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d148      	bne.n	8019668 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80195d6:	683b      	ldr	r3, [r7, #0]
 80195d8:	f04f 32ff 	mov.w	r2, #4294967295
 80195dc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	2b01      	cmp	r3, #1
 80195e4:	d115      	bne.n	8019612 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	691b      	ldr	r3, [r3, #16]
 80195ea:	b2da      	uxtb	r2, r3
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	685b      	ldr	r3, [r3, #4]
 80195f0:	4619      	mov	r1, r3
 80195f2:	4610      	mov	r0, r2
 80195f4:	f000 f844 	bl	8019680 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80195f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80195fc:	f7ff fe90 	bl	8019320 <FLASH_WaitForLastOperation>
 8019600:	4603      	mov	r3, r0
 8019602:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8019604:	4b1d      	ldr	r3, [pc, #116]	; (801967c <HAL_FLASHEx_Erase+0xdc>)
 8019606:	691b      	ldr	r3, [r3, #16]
 8019608:	4a1c      	ldr	r2, [pc, #112]	; (801967c <HAL_FLASHEx_Erase+0xdc>)
 801960a:	f023 0304 	bic.w	r3, r3, #4
 801960e:	6113      	str	r3, [r2, #16]
 8019610:	e028      	b.n	8019664 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	689b      	ldr	r3, [r3, #8]
 8019616:	60bb      	str	r3, [r7, #8]
 8019618:	e01c      	b.n	8019654 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	691b      	ldr	r3, [r3, #16]
 801961e:	b2db      	uxtb	r3, r3
 8019620:	4619      	mov	r1, r3
 8019622:	68b8      	ldr	r0, [r7, #8]
 8019624:	f000 f850 	bl	80196c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8019628:	f24c 3050 	movw	r0, #50000	; 0xc350
 801962c:	f7ff fe78 	bl	8019320 <FLASH_WaitForLastOperation>
 8019630:	4603      	mov	r3, r0
 8019632:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8019634:	4b11      	ldr	r3, [pc, #68]	; (801967c <HAL_FLASHEx_Erase+0xdc>)
 8019636:	691b      	ldr	r3, [r3, #16]
 8019638:	4a10      	ldr	r2, [pc, #64]	; (801967c <HAL_FLASHEx_Erase+0xdc>)
 801963a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801963e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8019640:	7bfb      	ldrb	r3, [r7, #15]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d003      	beq.n	801964e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8019646:	683b      	ldr	r3, [r7, #0]
 8019648:	68ba      	ldr	r2, [r7, #8]
 801964a:	601a      	str	r2, [r3, #0]
          break;
 801964c:	e00a      	b.n	8019664 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	3301      	adds	r3, #1
 8019652:	60bb      	str	r3, [r7, #8]
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	68da      	ldr	r2, [r3, #12]
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	689b      	ldr	r3, [r3, #8]
 801965c:	4413      	add	r3, r2
 801965e:	68ba      	ldr	r2, [r7, #8]
 8019660:	429a      	cmp	r2, r3
 8019662:	d3da      	bcc.n	801961a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8019664:	f000 f878 	bl	8019758 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019668:	4b03      	ldr	r3, [pc, #12]	; (8019678 <HAL_FLASHEx_Erase+0xd8>)
 801966a:	2200      	movs	r2, #0
 801966c:	761a      	strb	r2, [r3, #24]

  return status;
 801966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019670:	4618      	mov	r0, r3
 8019672:	3710      	adds	r7, #16
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	20006c58 	.word	0x20006c58
 801967c:	40023c00 	.word	0x40023c00

08019680 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8019680:	b480      	push	{r7}
 8019682:	b083      	sub	sp, #12
 8019684:	af00      	add	r7, sp, #0
 8019686:	4603      	mov	r3, r0
 8019688:	6039      	str	r1, [r7, #0]
 801968a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801968c:	4b0d      	ldr	r3, [pc, #52]	; (80196c4 <FLASH_MassErase+0x44>)
 801968e:	691b      	ldr	r3, [r3, #16]
 8019690:	4a0c      	ldr	r2, [pc, #48]	; (80196c4 <FLASH_MassErase+0x44>)
 8019692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8019698:	4b0a      	ldr	r3, [pc, #40]	; (80196c4 <FLASH_MassErase+0x44>)
 801969a:	691b      	ldr	r3, [r3, #16]
 801969c:	4a09      	ldr	r2, [pc, #36]	; (80196c4 <FLASH_MassErase+0x44>)
 801969e:	f043 0304 	orr.w	r3, r3, #4
 80196a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80196a4:	4b07      	ldr	r3, [pc, #28]	; (80196c4 <FLASH_MassErase+0x44>)
 80196a6:	691a      	ldr	r2, [r3, #16]
 80196a8:	79fb      	ldrb	r3, [r7, #7]
 80196aa:	021b      	lsls	r3, r3, #8
 80196ac:	4313      	orrs	r3, r2
 80196ae:	4a05      	ldr	r2, [pc, #20]	; (80196c4 <FLASH_MassErase+0x44>)
 80196b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196b4:	6113      	str	r3, [r2, #16]
}
 80196b6:	bf00      	nop
 80196b8:	370c      	adds	r7, #12
 80196ba:	46bd      	mov	sp, r7
 80196bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c0:	4770      	bx	lr
 80196c2:	bf00      	nop
 80196c4:	40023c00 	.word	0x40023c00

080196c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80196c8:	b480      	push	{r7}
 80196ca:	b085      	sub	sp, #20
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
 80196d0:	460b      	mov	r3, r1
 80196d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80196d4:	2300      	movs	r3, #0
 80196d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80196d8:	78fb      	ldrb	r3, [r7, #3]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d102      	bne.n	80196e4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80196de:	2300      	movs	r3, #0
 80196e0:	60fb      	str	r3, [r7, #12]
 80196e2:	e010      	b.n	8019706 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80196e4:	78fb      	ldrb	r3, [r7, #3]
 80196e6:	2b01      	cmp	r3, #1
 80196e8:	d103      	bne.n	80196f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80196ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196ee:	60fb      	str	r3, [r7, #12]
 80196f0:	e009      	b.n	8019706 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80196f2:	78fb      	ldrb	r3, [r7, #3]
 80196f4:	2b02      	cmp	r3, #2
 80196f6:	d103      	bne.n	8019700 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80196f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80196fc:	60fb      	str	r3, [r7, #12]
 80196fe:	e002      	b.n	8019706 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8019700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019704:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8019706:	4b13      	ldr	r3, [pc, #76]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019708:	691b      	ldr	r3, [r3, #16]
 801970a:	4a12      	ldr	r2, [pc, #72]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 801970c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019710:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8019712:	4b10      	ldr	r3, [pc, #64]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019714:	691a      	ldr	r2, [r3, #16]
 8019716:	490f      	ldr	r1, [pc, #60]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	4313      	orrs	r3, r2
 801971c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801971e:	4b0d      	ldr	r3, [pc, #52]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019720:	691b      	ldr	r3, [r3, #16]
 8019722:	4a0c      	ldr	r2, [pc, #48]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019724:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8019728:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801972a:	4b0a      	ldr	r3, [pc, #40]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 801972c:	691a      	ldr	r2, [r3, #16]
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	00db      	lsls	r3, r3, #3
 8019732:	4313      	orrs	r3, r2
 8019734:	4a07      	ldr	r2, [pc, #28]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019736:	f043 0302 	orr.w	r3, r3, #2
 801973a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801973c:	4b05      	ldr	r3, [pc, #20]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 801973e:	691b      	ldr	r3, [r3, #16]
 8019740:	4a04      	ldr	r2, [pc, #16]	; (8019754 <FLASH_Erase_Sector+0x8c>)
 8019742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019746:	6113      	str	r3, [r2, #16]
}
 8019748:	bf00      	nop
 801974a:	3714      	adds	r7, #20
 801974c:	46bd      	mov	sp, r7
 801974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019752:	4770      	bx	lr
 8019754:	40023c00 	.word	0x40023c00

08019758 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8019758:	b480      	push	{r7}
 801975a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801975c:	4b20      	ldr	r3, [pc, #128]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019764:	2b00      	cmp	r3, #0
 8019766:	d017      	beq.n	8019798 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8019768:	4b1d      	ldr	r3, [pc, #116]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	4a1c      	ldr	r2, [pc, #112]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801976e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019772:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8019774:	4b1a      	ldr	r3, [pc, #104]	; (80197e0 <FLASH_FlushCaches+0x88>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	4a19      	ldr	r2, [pc, #100]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801977a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801977e:	6013      	str	r3, [r2, #0]
 8019780:	4b17      	ldr	r3, [pc, #92]	; (80197e0 <FLASH_FlushCaches+0x88>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4a16      	ldr	r2, [pc, #88]	; (80197e0 <FLASH_FlushCaches+0x88>)
 8019786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801978a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801978c:	4b14      	ldr	r3, [pc, #80]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a13      	ldr	r2, [pc, #76]	; (80197e0 <FLASH_FlushCaches+0x88>)
 8019792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019796:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8019798:	4b11      	ldr	r3, [pc, #68]	; (80197e0 <FLASH_FlushCaches+0x88>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d017      	beq.n	80197d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80197a4:	4b0e      	ldr	r3, [pc, #56]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	4a0d      	ldr	r2, [pc, #52]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80197ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80197b0:	4b0b      	ldr	r3, [pc, #44]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	4a0a      	ldr	r2, [pc, #40]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80197ba:	6013      	str	r3, [r2, #0]
 80197bc:	4b08      	ldr	r3, [pc, #32]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a07      	ldr	r2, [pc, #28]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80197c8:	4b05      	ldr	r3, [pc, #20]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	4a04      	ldr	r2, [pc, #16]	; (80197e0 <FLASH_FlushCaches+0x88>)
 80197ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80197d2:	6013      	str	r3, [r2, #0]
  }
}
 80197d4:	bf00      	nop
 80197d6:	46bd      	mov	sp, r7
 80197d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop
 80197e0:	40023c00 	.word	0x40023c00

080197e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80197e4:	b480      	push	{r7}
 80197e6:	b089      	sub	sp, #36	; 0x24
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80197ee:	2300      	movs	r3, #0
 80197f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80197f2:	2300      	movs	r3, #0
 80197f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80197f6:	2300      	movs	r3, #0
 80197f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80197fa:	2300      	movs	r3, #0
 80197fc:	61fb      	str	r3, [r7, #28]
 80197fe:	e165      	b.n	8019acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019800:	2201      	movs	r2, #1
 8019802:	69fb      	ldr	r3, [r7, #28]
 8019804:	fa02 f303 	lsl.w	r3, r2, r3
 8019808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	697a      	ldr	r2, [r7, #20]
 8019810:	4013      	ands	r3, r2
 8019812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8019814:	693a      	ldr	r2, [r7, #16]
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	429a      	cmp	r2, r3
 801981a:	f040 8154 	bne.w	8019ac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	685b      	ldr	r3, [r3, #4]
 8019822:	f003 0303 	and.w	r3, r3, #3
 8019826:	2b01      	cmp	r3, #1
 8019828:	d005      	beq.n	8019836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8019832:	2b02      	cmp	r3, #2
 8019834:	d130      	bne.n	8019898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	689b      	ldr	r3, [r3, #8]
 801983a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801983c:	69fb      	ldr	r3, [r7, #28]
 801983e:	005b      	lsls	r3, r3, #1
 8019840:	2203      	movs	r2, #3
 8019842:	fa02 f303 	lsl.w	r3, r2, r3
 8019846:	43db      	mvns	r3, r3
 8019848:	69ba      	ldr	r2, [r7, #24]
 801984a:	4013      	ands	r3, r2
 801984c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	68da      	ldr	r2, [r3, #12]
 8019852:	69fb      	ldr	r3, [r7, #28]
 8019854:	005b      	lsls	r3, r3, #1
 8019856:	fa02 f303 	lsl.w	r3, r2, r3
 801985a:	69ba      	ldr	r2, [r7, #24]
 801985c:	4313      	orrs	r3, r2
 801985e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	69ba      	ldr	r2, [r7, #24]
 8019864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	685b      	ldr	r3, [r3, #4]
 801986a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801986c:	2201      	movs	r2, #1
 801986e:	69fb      	ldr	r3, [r7, #28]
 8019870:	fa02 f303 	lsl.w	r3, r2, r3
 8019874:	43db      	mvns	r3, r3
 8019876:	69ba      	ldr	r2, [r7, #24]
 8019878:	4013      	ands	r3, r2
 801987a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	685b      	ldr	r3, [r3, #4]
 8019880:	091b      	lsrs	r3, r3, #4
 8019882:	f003 0201 	and.w	r2, r3, #1
 8019886:	69fb      	ldr	r3, [r7, #28]
 8019888:	fa02 f303 	lsl.w	r3, r2, r3
 801988c:	69ba      	ldr	r2, [r7, #24]
 801988e:	4313      	orrs	r3, r2
 8019890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	69ba      	ldr	r2, [r7, #24]
 8019896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	685b      	ldr	r3, [r3, #4]
 801989c:	f003 0303 	and.w	r3, r3, #3
 80198a0:	2b03      	cmp	r3, #3
 80198a2:	d017      	beq.n	80198d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	68db      	ldr	r3, [r3, #12]
 80198a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	005b      	lsls	r3, r3, #1
 80198ae:	2203      	movs	r2, #3
 80198b0:	fa02 f303 	lsl.w	r3, r2, r3
 80198b4:	43db      	mvns	r3, r3
 80198b6:	69ba      	ldr	r2, [r7, #24]
 80198b8:	4013      	ands	r3, r2
 80198ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	689a      	ldr	r2, [r3, #8]
 80198c0:	69fb      	ldr	r3, [r7, #28]
 80198c2:	005b      	lsls	r3, r3, #1
 80198c4:	fa02 f303 	lsl.w	r3, r2, r3
 80198c8:	69ba      	ldr	r2, [r7, #24]
 80198ca:	4313      	orrs	r3, r2
 80198cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	69ba      	ldr	r2, [r7, #24]
 80198d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	685b      	ldr	r3, [r3, #4]
 80198d8:	f003 0303 	and.w	r3, r3, #3
 80198dc:	2b02      	cmp	r3, #2
 80198de:	d123      	bne.n	8019928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	08da      	lsrs	r2, r3, #3
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	3208      	adds	r2, #8
 80198e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80198ee:	69fb      	ldr	r3, [r7, #28]
 80198f0:	f003 0307 	and.w	r3, r3, #7
 80198f4:	009b      	lsls	r3, r3, #2
 80198f6:	220f      	movs	r2, #15
 80198f8:	fa02 f303 	lsl.w	r3, r2, r3
 80198fc:	43db      	mvns	r3, r3
 80198fe:	69ba      	ldr	r2, [r7, #24]
 8019900:	4013      	ands	r3, r2
 8019902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8019904:	683b      	ldr	r3, [r7, #0]
 8019906:	691a      	ldr	r2, [r3, #16]
 8019908:	69fb      	ldr	r3, [r7, #28]
 801990a:	f003 0307 	and.w	r3, r3, #7
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	fa02 f303 	lsl.w	r3, r2, r3
 8019914:	69ba      	ldr	r2, [r7, #24]
 8019916:	4313      	orrs	r3, r2
 8019918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801991a:	69fb      	ldr	r3, [r7, #28]
 801991c:	08da      	lsrs	r2, r3, #3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	3208      	adds	r2, #8
 8019922:	69b9      	ldr	r1, [r7, #24]
 8019924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801992e:	69fb      	ldr	r3, [r7, #28]
 8019930:	005b      	lsls	r3, r3, #1
 8019932:	2203      	movs	r2, #3
 8019934:	fa02 f303 	lsl.w	r3, r2, r3
 8019938:	43db      	mvns	r3, r3
 801993a:	69ba      	ldr	r2, [r7, #24]
 801993c:	4013      	ands	r3, r2
 801993e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	685b      	ldr	r3, [r3, #4]
 8019944:	f003 0203 	and.w	r2, r3, #3
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	005b      	lsls	r3, r3, #1
 801994c:	fa02 f303 	lsl.w	r3, r2, r3
 8019950:	69ba      	ldr	r2, [r7, #24]
 8019952:	4313      	orrs	r3, r2
 8019954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	69ba      	ldr	r2, [r7, #24]
 801995a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801995c:	683b      	ldr	r3, [r7, #0]
 801995e:	685b      	ldr	r3, [r3, #4]
 8019960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019964:	2b00      	cmp	r3, #0
 8019966:	f000 80ae 	beq.w	8019ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801996a:	2300      	movs	r3, #0
 801996c:	60fb      	str	r3, [r7, #12]
 801996e:	4b5d      	ldr	r3, [pc, #372]	; (8019ae4 <HAL_GPIO_Init+0x300>)
 8019970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019972:	4a5c      	ldr	r2, [pc, #368]	; (8019ae4 <HAL_GPIO_Init+0x300>)
 8019974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019978:	6453      	str	r3, [r2, #68]	; 0x44
 801997a:	4b5a      	ldr	r3, [pc, #360]	; (8019ae4 <HAL_GPIO_Init+0x300>)
 801997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801997e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019982:	60fb      	str	r3, [r7, #12]
 8019984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8019986:	4a58      	ldr	r2, [pc, #352]	; (8019ae8 <HAL_GPIO_Init+0x304>)
 8019988:	69fb      	ldr	r3, [r7, #28]
 801998a:	089b      	lsrs	r3, r3, #2
 801998c:	3302      	adds	r3, #2
 801998e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	f003 0303 	and.w	r3, r3, #3
 801999a:	009b      	lsls	r3, r3, #2
 801999c:	220f      	movs	r2, #15
 801999e:	fa02 f303 	lsl.w	r3, r2, r3
 80199a2:	43db      	mvns	r3, r3
 80199a4:	69ba      	ldr	r2, [r7, #24]
 80199a6:	4013      	ands	r3, r2
 80199a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	4a4f      	ldr	r2, [pc, #316]	; (8019aec <HAL_GPIO_Init+0x308>)
 80199ae:	4293      	cmp	r3, r2
 80199b0:	d025      	beq.n	80199fe <HAL_GPIO_Init+0x21a>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	4a4e      	ldr	r2, [pc, #312]	; (8019af0 <HAL_GPIO_Init+0x30c>)
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d01f      	beq.n	80199fa <HAL_GPIO_Init+0x216>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	4a4d      	ldr	r2, [pc, #308]	; (8019af4 <HAL_GPIO_Init+0x310>)
 80199be:	4293      	cmp	r3, r2
 80199c0:	d019      	beq.n	80199f6 <HAL_GPIO_Init+0x212>
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	4a4c      	ldr	r2, [pc, #304]	; (8019af8 <HAL_GPIO_Init+0x314>)
 80199c6:	4293      	cmp	r3, r2
 80199c8:	d013      	beq.n	80199f2 <HAL_GPIO_Init+0x20e>
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	4a4b      	ldr	r2, [pc, #300]	; (8019afc <HAL_GPIO_Init+0x318>)
 80199ce:	4293      	cmp	r3, r2
 80199d0:	d00d      	beq.n	80199ee <HAL_GPIO_Init+0x20a>
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	4a4a      	ldr	r2, [pc, #296]	; (8019b00 <HAL_GPIO_Init+0x31c>)
 80199d6:	4293      	cmp	r3, r2
 80199d8:	d007      	beq.n	80199ea <HAL_GPIO_Init+0x206>
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	4a49      	ldr	r2, [pc, #292]	; (8019b04 <HAL_GPIO_Init+0x320>)
 80199de:	4293      	cmp	r3, r2
 80199e0:	d101      	bne.n	80199e6 <HAL_GPIO_Init+0x202>
 80199e2:	2306      	movs	r3, #6
 80199e4:	e00c      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199e6:	2307      	movs	r3, #7
 80199e8:	e00a      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199ea:	2305      	movs	r3, #5
 80199ec:	e008      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199ee:	2304      	movs	r3, #4
 80199f0:	e006      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199f2:	2303      	movs	r3, #3
 80199f4:	e004      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199f6:	2302      	movs	r3, #2
 80199f8:	e002      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199fa:	2301      	movs	r3, #1
 80199fc:	e000      	b.n	8019a00 <HAL_GPIO_Init+0x21c>
 80199fe:	2300      	movs	r3, #0
 8019a00:	69fa      	ldr	r2, [r7, #28]
 8019a02:	f002 0203 	and.w	r2, r2, #3
 8019a06:	0092      	lsls	r2, r2, #2
 8019a08:	4093      	lsls	r3, r2
 8019a0a:	69ba      	ldr	r2, [r7, #24]
 8019a0c:	4313      	orrs	r3, r2
 8019a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8019a10:	4935      	ldr	r1, [pc, #212]	; (8019ae8 <HAL_GPIO_Init+0x304>)
 8019a12:	69fb      	ldr	r3, [r7, #28]
 8019a14:	089b      	lsrs	r3, r3, #2
 8019a16:	3302      	adds	r3, #2
 8019a18:	69ba      	ldr	r2, [r7, #24]
 8019a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8019a1e:	4b3a      	ldr	r3, [pc, #232]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a24:	693b      	ldr	r3, [r7, #16]
 8019a26:	43db      	mvns	r3, r3
 8019a28:	69ba      	ldr	r2, [r7, #24]
 8019a2a:	4013      	ands	r3, r2
 8019a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d003      	beq.n	8019a42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8019a3a:	69ba      	ldr	r2, [r7, #24]
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	4313      	orrs	r3, r2
 8019a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8019a42:	4a31      	ldr	r2, [pc, #196]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8019a48:	4b2f      	ldr	r3, [pc, #188]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a4a:	685b      	ldr	r3, [r3, #4]
 8019a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	43db      	mvns	r3, r3
 8019a52:	69ba      	ldr	r2, [r7, #24]
 8019a54:	4013      	ands	r3, r2
 8019a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d003      	beq.n	8019a6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8019a64:	69ba      	ldr	r2, [r7, #24]
 8019a66:	693b      	ldr	r3, [r7, #16]
 8019a68:	4313      	orrs	r3, r2
 8019a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8019a6c:	4a26      	ldr	r2, [pc, #152]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8019a72:	4b25      	ldr	r3, [pc, #148]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a74:	689b      	ldr	r3, [r3, #8]
 8019a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019a78:	693b      	ldr	r3, [r7, #16]
 8019a7a:	43db      	mvns	r3, r3
 8019a7c:	69ba      	ldr	r2, [r7, #24]
 8019a7e:	4013      	ands	r3, r2
 8019a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d003      	beq.n	8019a96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8019a8e:	69ba      	ldr	r2, [r7, #24]
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	4313      	orrs	r3, r2
 8019a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8019a96:	4a1c      	ldr	r2, [pc, #112]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8019a9c:	4b1a      	ldr	r3, [pc, #104]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019a9e:	68db      	ldr	r3, [r3, #12]
 8019aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8019aa2:	693b      	ldr	r3, [r7, #16]
 8019aa4:	43db      	mvns	r3, r3
 8019aa6:	69ba      	ldr	r2, [r7, #24]
 8019aa8:	4013      	ands	r3, r2
 8019aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	685b      	ldr	r3, [r3, #4]
 8019ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d003      	beq.n	8019ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8019ab8:	69ba      	ldr	r2, [r7, #24]
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	4313      	orrs	r3, r2
 8019abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8019ac0:	4a11      	ldr	r2, [pc, #68]	; (8019b08 <HAL_GPIO_Init+0x324>)
 8019ac2:	69bb      	ldr	r3, [r7, #24]
 8019ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019ac6:	69fb      	ldr	r3, [r7, #28]
 8019ac8:	3301      	adds	r3, #1
 8019aca:	61fb      	str	r3, [r7, #28]
 8019acc:	69fb      	ldr	r3, [r7, #28]
 8019ace:	2b0f      	cmp	r3, #15
 8019ad0:	f67f ae96 	bls.w	8019800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8019ad4:	bf00      	nop
 8019ad6:	bf00      	nop
 8019ad8:	3724      	adds	r7, #36	; 0x24
 8019ada:	46bd      	mov	sp, r7
 8019adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ae0:	4770      	bx	lr
 8019ae2:	bf00      	nop
 8019ae4:	40023800 	.word	0x40023800
 8019ae8:	40013800 	.word	0x40013800
 8019aec:	40020000 	.word	0x40020000
 8019af0:	40020400 	.word	0x40020400
 8019af4:	40020800 	.word	0x40020800
 8019af8:	40020c00 	.word	0x40020c00
 8019afc:	40021000 	.word	0x40021000
 8019b00:	40021400 	.word	0x40021400
 8019b04:	40021800 	.word	0x40021800
 8019b08:	40013c00 	.word	0x40013c00

08019b0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b087      	sub	sp, #28
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8019b16:	2300      	movs	r3, #0
 8019b18:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8019b1e:	2300      	movs	r3, #0
 8019b20:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019b22:	2300      	movs	r3, #0
 8019b24:	617b      	str	r3, [r7, #20]
 8019b26:	e0c7      	b.n	8019cb8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8019b28:	2201      	movs	r2, #1
 8019b2a:	697b      	ldr	r3, [r7, #20]
 8019b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b30:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	693b      	ldr	r3, [r7, #16]
 8019b36:	4013      	ands	r3, r2
 8019b38:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8019b3a:	68fa      	ldr	r2, [r7, #12]
 8019b3c:	693b      	ldr	r3, [r7, #16]
 8019b3e:	429a      	cmp	r2, r3
 8019b40:	f040 80b7 	bne.w	8019cb2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8019b44:	4a62      	ldr	r2, [pc, #392]	; (8019cd0 <HAL_GPIO_DeInit+0x1c4>)
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	089b      	lsrs	r3, r3, #2
 8019b4a:	3302      	adds	r3, #2
 8019b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b50:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	f003 0303 	and.w	r3, r3, #3
 8019b58:	009b      	lsls	r3, r3, #2
 8019b5a:	220f      	movs	r2, #15
 8019b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b60:	68ba      	ldr	r2, [r7, #8]
 8019b62:	4013      	ands	r3, r2
 8019b64:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	4a5a      	ldr	r2, [pc, #360]	; (8019cd4 <HAL_GPIO_DeInit+0x1c8>)
 8019b6a:	4293      	cmp	r3, r2
 8019b6c:	d025      	beq.n	8019bba <HAL_GPIO_DeInit+0xae>
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	4a59      	ldr	r2, [pc, #356]	; (8019cd8 <HAL_GPIO_DeInit+0x1cc>)
 8019b72:	4293      	cmp	r3, r2
 8019b74:	d01f      	beq.n	8019bb6 <HAL_GPIO_DeInit+0xaa>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	4a58      	ldr	r2, [pc, #352]	; (8019cdc <HAL_GPIO_DeInit+0x1d0>)
 8019b7a:	4293      	cmp	r3, r2
 8019b7c:	d019      	beq.n	8019bb2 <HAL_GPIO_DeInit+0xa6>
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	4a57      	ldr	r2, [pc, #348]	; (8019ce0 <HAL_GPIO_DeInit+0x1d4>)
 8019b82:	4293      	cmp	r3, r2
 8019b84:	d013      	beq.n	8019bae <HAL_GPIO_DeInit+0xa2>
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	4a56      	ldr	r2, [pc, #344]	; (8019ce4 <HAL_GPIO_DeInit+0x1d8>)
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d00d      	beq.n	8019baa <HAL_GPIO_DeInit+0x9e>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	4a55      	ldr	r2, [pc, #340]	; (8019ce8 <HAL_GPIO_DeInit+0x1dc>)
 8019b92:	4293      	cmp	r3, r2
 8019b94:	d007      	beq.n	8019ba6 <HAL_GPIO_DeInit+0x9a>
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	4a54      	ldr	r2, [pc, #336]	; (8019cec <HAL_GPIO_DeInit+0x1e0>)
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	d101      	bne.n	8019ba2 <HAL_GPIO_DeInit+0x96>
 8019b9e:	2306      	movs	r3, #6
 8019ba0:	e00c      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019ba2:	2307      	movs	r3, #7
 8019ba4:	e00a      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019ba6:	2305      	movs	r3, #5
 8019ba8:	e008      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019baa:	2304      	movs	r3, #4
 8019bac:	e006      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019bae:	2303      	movs	r3, #3
 8019bb0:	e004      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	e002      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	e000      	b.n	8019bbc <HAL_GPIO_DeInit+0xb0>
 8019bba:	2300      	movs	r3, #0
 8019bbc:	697a      	ldr	r2, [r7, #20]
 8019bbe:	f002 0203 	and.w	r2, r2, #3
 8019bc2:	0092      	lsls	r2, r2, #2
 8019bc4:	4093      	lsls	r3, r2
 8019bc6:	68ba      	ldr	r2, [r7, #8]
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	d132      	bne.n	8019c32 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8019bcc:	4b48      	ldr	r3, [pc, #288]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bce:	681a      	ldr	r2, [r3, #0]
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	43db      	mvns	r3, r3
 8019bd4:	4946      	ldr	r1, [pc, #280]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bd6:	4013      	ands	r3, r2
 8019bd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8019bda:	4b45      	ldr	r3, [pc, #276]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bdc:	685a      	ldr	r2, [r3, #4]
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	43db      	mvns	r3, r3
 8019be2:	4943      	ldr	r1, [pc, #268]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019be4:	4013      	ands	r3, r2
 8019be6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8019be8:	4b41      	ldr	r3, [pc, #260]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bea:	689a      	ldr	r2, [r3, #8]
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	43db      	mvns	r3, r3
 8019bf0:	493f      	ldr	r1, [pc, #252]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bf2:	4013      	ands	r3, r2
 8019bf4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8019bf6:	4b3e      	ldr	r3, [pc, #248]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019bf8:	68da      	ldr	r2, [r3, #12]
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	43db      	mvns	r3, r3
 8019bfe:	493c      	ldr	r1, [pc, #240]	; (8019cf0 <HAL_GPIO_DeInit+0x1e4>)
 8019c00:	4013      	ands	r3, r2
 8019c02:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8019c04:	697b      	ldr	r3, [r7, #20]
 8019c06:	f003 0303 	and.w	r3, r3, #3
 8019c0a:	009b      	lsls	r3, r3, #2
 8019c0c:	220f      	movs	r2, #15
 8019c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8019c14:	4a2e      	ldr	r2, [pc, #184]	; (8019cd0 <HAL_GPIO_DeInit+0x1c4>)
 8019c16:	697b      	ldr	r3, [r7, #20]
 8019c18:	089b      	lsrs	r3, r3, #2
 8019c1a:	3302      	adds	r3, #2
 8019c1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	43da      	mvns	r2, r3
 8019c24:	482a      	ldr	r0, [pc, #168]	; (8019cd0 <HAL_GPIO_DeInit+0x1c4>)
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	089b      	lsrs	r3, r3, #2
 8019c2a:	400a      	ands	r2, r1
 8019c2c:	3302      	adds	r3, #2
 8019c2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	681a      	ldr	r2, [r3, #0]
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	005b      	lsls	r3, r3, #1
 8019c3a:	2103      	movs	r1, #3
 8019c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8019c40:	43db      	mvns	r3, r3
 8019c42:	401a      	ands	r2, r3
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	08da      	lsrs	r2, r3, #3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	3208      	adds	r2, #8
 8019c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	f003 0307 	and.w	r3, r3, #7
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	220f      	movs	r2, #15
 8019c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c62:	43db      	mvns	r3, r3
 8019c64:	697a      	ldr	r2, [r7, #20]
 8019c66:	08d2      	lsrs	r2, r2, #3
 8019c68:	4019      	ands	r1, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	3208      	adds	r2, #8
 8019c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	68da      	ldr	r2, [r3, #12]
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	005b      	lsls	r3, r3, #1
 8019c7a:	2103      	movs	r1, #3
 8019c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8019c80:	43db      	mvns	r3, r3
 8019c82:	401a      	ands	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	685a      	ldr	r2, [r3, #4]
 8019c8c:	2101      	movs	r1, #1
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	fa01 f303 	lsl.w	r3, r1, r3
 8019c94:	43db      	mvns	r3, r3
 8019c96:	401a      	ands	r2, r3
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	689a      	ldr	r2, [r3, #8]
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	005b      	lsls	r3, r3, #1
 8019ca4:	2103      	movs	r1, #3
 8019ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8019caa:	43db      	mvns	r3, r3
 8019cac:	401a      	ands	r2, r3
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8019cb2:	697b      	ldr	r3, [r7, #20]
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	617b      	str	r3, [r7, #20]
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	2b0f      	cmp	r3, #15
 8019cbc:	f67f af34 	bls.w	8019b28 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8019cc0:	bf00      	nop
 8019cc2:	bf00      	nop
 8019cc4:	371c      	adds	r7, #28
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr
 8019cce:	bf00      	nop
 8019cd0:	40013800 	.word	0x40013800
 8019cd4:	40020000 	.word	0x40020000
 8019cd8:	40020400 	.word	0x40020400
 8019cdc:	40020800 	.word	0x40020800
 8019ce0:	40020c00 	.word	0x40020c00
 8019ce4:	40021000 	.word	0x40021000
 8019ce8:	40021400 	.word	0x40021400
 8019cec:	40021800 	.word	0x40021800
 8019cf0:	40013c00 	.word	0x40013c00

08019cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b083      	sub	sp, #12
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	460b      	mov	r3, r1
 8019cfe:	807b      	strh	r3, [r7, #2]
 8019d00:	4613      	mov	r3, r2
 8019d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8019d04:	787b      	ldrb	r3, [r7, #1]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d003      	beq.n	8019d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8019d0a:	887a      	ldrh	r2, [r7, #2]
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8019d10:	e003      	b.n	8019d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8019d12:	887b      	ldrh	r3, [r7, #2]
 8019d14:	041a      	lsls	r2, r3, #16
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	619a      	str	r2, [r3, #24]
}
 8019d1a:	bf00      	nop
 8019d1c:	370c      	adds	r7, #12
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d24:	4770      	bx	lr
	...

08019d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	4603      	mov	r3, r0
 8019d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8019d32:	4b08      	ldr	r3, [pc, #32]	; (8019d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8019d34:	695a      	ldr	r2, [r3, #20]
 8019d36:	88fb      	ldrh	r3, [r7, #6]
 8019d38:	4013      	ands	r3, r2
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d006      	beq.n	8019d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8019d3e:	4a05      	ldr	r2, [pc, #20]	; (8019d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8019d40:	88fb      	ldrh	r3, [r7, #6]
 8019d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8019d44:	88fb      	ldrh	r3, [r7, #6]
 8019d46:	4618      	mov	r0, r3
 8019d48:	f000 f806 	bl	8019d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8019d4c:	bf00      	nop
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	40013c00 	.word	0x40013c00

08019d58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b083      	sub	sp, #12
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	4603      	mov	r3, r0
 8019d60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8019d62:	bf00      	nop
 8019d64:	370c      	adds	r7, #12
 8019d66:	46bd      	mov	sp, r7
 8019d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6c:	4770      	bx	lr

08019d6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8019d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d70:	b08f      	sub	sp, #60	; 0x3c
 8019d72:	af0a      	add	r7, sp, #40	; 0x28
 8019d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d101      	bne.n	8019d80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	e116      	b.n	8019fae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d106      	bne.n	8019da0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2200      	movs	r2, #0
 8019d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019d9a:	6878      	ldr	r0, [r7, #4]
 8019d9c:	f008 fc04 	bl	80225a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2203      	movs	r2, #3
 8019da4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d102      	bne.n	8019dba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2200      	movs	r2, #0
 8019db8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f004 f8cf 	bl	801df62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	603b      	str	r3, [r7, #0]
 8019dca:	687e      	ldr	r6, [r7, #4]
 8019dcc:	466d      	mov	r5, sp
 8019dce:	f106 0410 	add.w	r4, r6, #16
 8019dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8019de2:	1d33      	adds	r3, r6, #4
 8019de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019de6:	6838      	ldr	r0, [r7, #0]
 8019de8:	f003 ffa6 	bl	801dd38 <USB_CoreInit>
 8019dec:	4603      	mov	r3, r0
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d005      	beq.n	8019dfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2202      	movs	r2, #2
 8019df6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019dfa:	2301      	movs	r3, #1
 8019dfc:	e0d7      	b.n	8019fae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	2100      	movs	r1, #0
 8019e04:	4618      	mov	r0, r3
 8019e06:	f004 f8bd 	bl	801df84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	73fb      	strb	r3, [r7, #15]
 8019e0e:	e04a      	b.n	8019ea6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019e10:	7bfa      	ldrb	r2, [r7, #15]
 8019e12:	6879      	ldr	r1, [r7, #4]
 8019e14:	4613      	mov	r3, r2
 8019e16:	00db      	lsls	r3, r3, #3
 8019e18:	1a9b      	subs	r3, r3, r2
 8019e1a:	009b      	lsls	r3, r3, #2
 8019e1c:	440b      	add	r3, r1
 8019e1e:	333d      	adds	r3, #61	; 0x3d
 8019e20:	2201      	movs	r2, #1
 8019e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8019e24:	7bfa      	ldrb	r2, [r7, #15]
 8019e26:	6879      	ldr	r1, [r7, #4]
 8019e28:	4613      	mov	r3, r2
 8019e2a:	00db      	lsls	r3, r3, #3
 8019e2c:	1a9b      	subs	r3, r3, r2
 8019e2e:	009b      	lsls	r3, r3, #2
 8019e30:	440b      	add	r3, r1
 8019e32:	333c      	adds	r3, #60	; 0x3c
 8019e34:	7bfa      	ldrb	r2, [r7, #15]
 8019e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8019e38:	7bfa      	ldrb	r2, [r7, #15]
 8019e3a:	7bfb      	ldrb	r3, [r7, #15]
 8019e3c:	b298      	uxth	r0, r3
 8019e3e:	6879      	ldr	r1, [r7, #4]
 8019e40:	4613      	mov	r3, r2
 8019e42:	00db      	lsls	r3, r3, #3
 8019e44:	1a9b      	subs	r3, r3, r2
 8019e46:	009b      	lsls	r3, r3, #2
 8019e48:	440b      	add	r3, r1
 8019e4a:	3342      	adds	r3, #66	; 0x42
 8019e4c:	4602      	mov	r2, r0
 8019e4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019e50:	7bfa      	ldrb	r2, [r7, #15]
 8019e52:	6879      	ldr	r1, [r7, #4]
 8019e54:	4613      	mov	r3, r2
 8019e56:	00db      	lsls	r3, r3, #3
 8019e58:	1a9b      	subs	r3, r3, r2
 8019e5a:	009b      	lsls	r3, r3, #2
 8019e5c:	440b      	add	r3, r1
 8019e5e:	333f      	adds	r3, #63	; 0x3f
 8019e60:	2200      	movs	r2, #0
 8019e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8019e64:	7bfa      	ldrb	r2, [r7, #15]
 8019e66:	6879      	ldr	r1, [r7, #4]
 8019e68:	4613      	mov	r3, r2
 8019e6a:	00db      	lsls	r3, r3, #3
 8019e6c:	1a9b      	subs	r3, r3, r2
 8019e6e:	009b      	lsls	r3, r3, #2
 8019e70:	440b      	add	r3, r1
 8019e72:	3344      	adds	r3, #68	; 0x44
 8019e74:	2200      	movs	r2, #0
 8019e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8019e78:	7bfa      	ldrb	r2, [r7, #15]
 8019e7a:	6879      	ldr	r1, [r7, #4]
 8019e7c:	4613      	mov	r3, r2
 8019e7e:	00db      	lsls	r3, r3, #3
 8019e80:	1a9b      	subs	r3, r3, r2
 8019e82:	009b      	lsls	r3, r3, #2
 8019e84:	440b      	add	r3, r1
 8019e86:	3348      	adds	r3, #72	; 0x48
 8019e88:	2200      	movs	r2, #0
 8019e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8019e8c:	7bfa      	ldrb	r2, [r7, #15]
 8019e8e:	6879      	ldr	r1, [r7, #4]
 8019e90:	4613      	mov	r3, r2
 8019e92:	00db      	lsls	r3, r3, #3
 8019e94:	1a9b      	subs	r3, r3, r2
 8019e96:	009b      	lsls	r3, r3, #2
 8019e98:	440b      	add	r3, r1
 8019e9a:	3350      	adds	r3, #80	; 0x50
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019ea0:	7bfb      	ldrb	r3, [r7, #15]
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	73fb      	strb	r3, [r7, #15]
 8019ea6:	7bfa      	ldrb	r2, [r7, #15]
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	429a      	cmp	r2, r3
 8019eae:	d3af      	bcc.n	8019e10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	73fb      	strb	r3, [r7, #15]
 8019eb4:	e044      	b.n	8019f40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8019eb6:	7bfa      	ldrb	r2, [r7, #15]
 8019eb8:	6879      	ldr	r1, [r7, #4]
 8019eba:	4613      	mov	r3, r2
 8019ebc:	00db      	lsls	r3, r3, #3
 8019ebe:	1a9b      	subs	r3, r3, r2
 8019ec0:	009b      	lsls	r3, r3, #2
 8019ec2:	440b      	add	r3, r1
 8019ec4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8019ec8:	2200      	movs	r2, #0
 8019eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8019ecc:	7bfa      	ldrb	r2, [r7, #15]
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	4613      	mov	r3, r2
 8019ed2:	00db      	lsls	r3, r3, #3
 8019ed4:	1a9b      	subs	r3, r3, r2
 8019ed6:	009b      	lsls	r3, r3, #2
 8019ed8:	440b      	add	r3, r1
 8019eda:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8019ede:	7bfa      	ldrb	r2, [r7, #15]
 8019ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019ee2:	7bfa      	ldrb	r2, [r7, #15]
 8019ee4:	6879      	ldr	r1, [r7, #4]
 8019ee6:	4613      	mov	r3, r2
 8019ee8:	00db      	lsls	r3, r3, #3
 8019eea:	1a9b      	subs	r3, r3, r2
 8019eec:	009b      	lsls	r3, r3, #2
 8019eee:	440b      	add	r3, r1
 8019ef0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019ef4:	2200      	movs	r2, #0
 8019ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019ef8:	7bfa      	ldrb	r2, [r7, #15]
 8019efa:	6879      	ldr	r1, [r7, #4]
 8019efc:	4613      	mov	r3, r2
 8019efe:	00db      	lsls	r3, r3, #3
 8019f00:	1a9b      	subs	r3, r3, r2
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	440b      	add	r3, r1
 8019f06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8019f0e:	7bfa      	ldrb	r2, [r7, #15]
 8019f10:	6879      	ldr	r1, [r7, #4]
 8019f12:	4613      	mov	r3, r2
 8019f14:	00db      	lsls	r3, r3, #3
 8019f16:	1a9b      	subs	r3, r3, r2
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	440b      	add	r3, r1
 8019f1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f20:	2200      	movs	r2, #0
 8019f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019f24:	7bfa      	ldrb	r2, [r7, #15]
 8019f26:	6879      	ldr	r1, [r7, #4]
 8019f28:	4613      	mov	r3, r2
 8019f2a:	00db      	lsls	r3, r3, #3
 8019f2c:	1a9b      	subs	r3, r3, r2
 8019f2e:	009b      	lsls	r3, r3, #2
 8019f30:	440b      	add	r3, r1
 8019f32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019f36:	2200      	movs	r2, #0
 8019f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019f3a:	7bfb      	ldrb	r3, [r7, #15]
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	73fb      	strb	r3, [r7, #15]
 8019f40:	7bfa      	ldrb	r2, [r7, #15]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	685b      	ldr	r3, [r3, #4]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d3b5      	bcc.n	8019eb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	603b      	str	r3, [r7, #0]
 8019f50:	687e      	ldr	r6, [r7, #4]
 8019f52:	466d      	mov	r5, sp
 8019f54:	f106 0410 	add.w	r4, r6, #16
 8019f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019f60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019f64:	e885 0003 	stmia.w	r5, {r0, r1}
 8019f68:	1d33      	adds	r3, r6, #4
 8019f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019f6c:	6838      	ldr	r0, [r7, #0]
 8019f6e:	f004 f833 	bl	801dfd8 <USB_DevInit>
 8019f72:	4603      	mov	r3, r0
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d005      	beq.n	8019f84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2202      	movs	r2, #2
 8019f7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8019f80:	2301      	movs	r3, #1
 8019f82:	e014      	b.n	8019fae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2200      	movs	r2, #0
 8019f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2201      	movs	r2, #1
 8019f90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d102      	bne.n	8019fa2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8019f9c:	6878      	ldr	r0, [r7, #4]
 8019f9e:	f001 f8bf 	bl	801b120 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f005 f86e 	bl	801f088 <USB_DevDisconnect>

  return HAL_OK;
 8019fac:	2300      	movs	r3, #0
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3714      	adds	r7, #20
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019fb6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8019fb6:	b580      	push	{r7, lr}
 8019fb8:	b084      	sub	sp, #16
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d101      	bne.n	8019fd2 <HAL_PCD_Start+0x1c>
 8019fce:	2302      	movs	r3, #2
 8019fd0:	e020      	b.n	801a014 <HAL_PCD_Start+0x5e>
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2201      	movs	r2, #1
 8019fd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fde:	2b01      	cmp	r3, #1
 8019fe0:	d109      	bne.n	8019ff6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8019fe6:	2b01      	cmp	r3, #1
 8019fe8:	d005      	beq.n	8019ff6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f003 ffa0 	bl	801df40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4618      	mov	r0, r3
 801a006:	f005 f81e 	bl	801f046 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	2200      	movs	r2, #0
 801a00e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a012:	2300      	movs	r3, #0
}
 801a014:	4618      	mov	r0, r3
 801a016:	3710      	adds	r7, #16
 801a018:	46bd      	mov	sp, r7
 801a01a:	bd80      	pop	{r7, pc}

0801a01c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801a01c:	b590      	push	{r4, r7, lr}
 801a01e:	b08d      	sub	sp, #52	; 0x34
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a02a:	6a3b      	ldr	r3, [r7, #32]
 801a02c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	4618      	mov	r0, r3
 801a034:	f005 f8dc 	bl	801f1f0 <USB_GetMode>
 801a038:	4603      	mov	r3, r0
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	f040 83ca 	bne.w	801a7d4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	4618      	mov	r0, r3
 801a046:	f005 f840 	bl	801f0ca <USB_ReadInterrupts>
 801a04a:	4603      	mov	r3, r0
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	f000 83c0 	beq.w	801a7d2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4618      	mov	r0, r3
 801a058:	f005 f837 	bl	801f0ca <USB_ReadInterrupts>
 801a05c:	4603      	mov	r3, r0
 801a05e:	f003 0302 	and.w	r3, r3, #2
 801a062:	2b02      	cmp	r3, #2
 801a064:	d107      	bne.n	801a076 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	695a      	ldr	r2, [r3, #20]
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	f002 0202 	and.w	r2, r2, #2
 801a074:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4618      	mov	r0, r3
 801a07c:	f005 f825 	bl	801f0ca <USB_ReadInterrupts>
 801a080:	4603      	mov	r3, r0
 801a082:	f003 0310 	and.w	r3, r3, #16
 801a086:	2b10      	cmp	r3, #16
 801a088:	d161      	bne.n	801a14e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	699a      	ldr	r2, [r3, #24]
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	f022 0210 	bic.w	r2, r2, #16
 801a098:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 801a09a:	6a3b      	ldr	r3, [r7, #32]
 801a09c:	6a1b      	ldr	r3, [r3, #32]
 801a09e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801a0a0:	69bb      	ldr	r3, [r7, #24]
 801a0a2:	f003 020f 	and.w	r2, r3, #15
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	00db      	lsls	r3, r3, #3
 801a0aa:	1a9b      	subs	r3, r3, r2
 801a0ac:	009b      	lsls	r3, r3, #2
 801a0ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	4413      	add	r3, r2
 801a0b6:	3304      	adds	r3, #4
 801a0b8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801a0ba:	69bb      	ldr	r3, [r7, #24]
 801a0bc:	0c5b      	lsrs	r3, r3, #17
 801a0be:	f003 030f 	and.w	r3, r3, #15
 801a0c2:	2b02      	cmp	r3, #2
 801a0c4:	d124      	bne.n	801a110 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801a0c6:	69ba      	ldr	r2, [r7, #24]
 801a0c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 801a0cc:	4013      	ands	r3, r2
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d035      	beq.n	801a13e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	091b      	lsrs	r3, r3, #4
 801a0da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801a0dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0e0:	b29b      	uxth	r3, r3
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	6a38      	ldr	r0, [r7, #32]
 801a0e6:	f004 fe8b 	bl	801ee00 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	68da      	ldr	r2, [r3, #12]
 801a0ee:	69bb      	ldr	r3, [r7, #24]
 801a0f0:	091b      	lsrs	r3, r3, #4
 801a0f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0f6:	441a      	add	r2, r3
 801a0f8:	697b      	ldr	r3, [r7, #20]
 801a0fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a0fc:	697b      	ldr	r3, [r7, #20]
 801a0fe:	699a      	ldr	r2, [r3, #24]
 801a100:	69bb      	ldr	r3, [r7, #24]
 801a102:	091b      	lsrs	r3, r3, #4
 801a104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a108:	441a      	add	r2, r3
 801a10a:	697b      	ldr	r3, [r7, #20]
 801a10c:	619a      	str	r2, [r3, #24]
 801a10e:	e016      	b.n	801a13e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 801a110:	69bb      	ldr	r3, [r7, #24]
 801a112:	0c5b      	lsrs	r3, r3, #17
 801a114:	f003 030f 	and.w	r3, r3, #15
 801a118:	2b06      	cmp	r3, #6
 801a11a:	d110      	bne.n	801a13e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a122:	2208      	movs	r2, #8
 801a124:	4619      	mov	r1, r3
 801a126:	6a38      	ldr	r0, [r7, #32]
 801a128:	f004 fe6a 	bl	801ee00 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	699a      	ldr	r2, [r3, #24]
 801a130:	69bb      	ldr	r3, [r7, #24]
 801a132:	091b      	lsrs	r3, r3, #4
 801a134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a138:	441a      	add	r2, r3
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	699a      	ldr	r2, [r3, #24]
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	f042 0210 	orr.w	r2, r2, #16
 801a14c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	4618      	mov	r0, r3
 801a154:	f004 ffb9 	bl	801f0ca <USB_ReadInterrupts>
 801a158:	4603      	mov	r3, r0
 801a15a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a15e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801a162:	d16e      	bne.n	801a242 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801a164:	2300      	movs	r3, #0
 801a166:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	4618      	mov	r0, r3
 801a16e:	f004 ffbf 	bl	801f0f0 <USB_ReadDevAllOutEpInterrupt>
 801a172:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801a174:	e062      	b.n	801a23c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a178:	f003 0301 	and.w	r3, r3, #1
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d057      	beq.n	801a230 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a186:	b2d2      	uxtb	r2, r2
 801a188:	4611      	mov	r1, r2
 801a18a:	4618      	mov	r0, r3
 801a18c:	f004 ffe4 	bl	801f158 <USB_ReadDevOutEPInterrupt>
 801a190:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801a192:	693b      	ldr	r3, [r7, #16]
 801a194:	f003 0301 	and.w	r3, r3, #1
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d00c      	beq.n	801a1b6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a19e:	015a      	lsls	r2, r3, #5
 801a1a0:	69fb      	ldr	r3, [r7, #28]
 801a1a2:	4413      	add	r3, r2
 801a1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1a8:	461a      	mov	r2, r3
 801a1aa:	2301      	movs	r3, #1
 801a1ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801a1ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f000 fe0b 	bl	801adcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801a1b6:	693b      	ldr	r3, [r7, #16]
 801a1b8:	f003 0308 	and.w	r3, r3, #8
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d00c      	beq.n	801a1da <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1c2:	015a      	lsls	r2, r3, #5
 801a1c4:	69fb      	ldr	r3, [r7, #28]
 801a1c6:	4413      	add	r3, r2
 801a1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	2308      	movs	r3, #8
 801a1d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801a1d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1d4:	6878      	ldr	r0, [r7, #4]
 801a1d6:	f000 ff05 	bl	801afe4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801a1da:	693b      	ldr	r3, [r7, #16]
 801a1dc:	f003 0310 	and.w	r3, r3, #16
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d008      	beq.n	801a1f6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e6:	015a      	lsls	r2, r3, #5
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	4413      	add	r3, r2
 801a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a1f0:	461a      	mov	r2, r3
 801a1f2:	2310      	movs	r3, #16
 801a1f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	f003 0320 	and.w	r3, r3, #32
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d008      	beq.n	801a212 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a202:	015a      	lsls	r2, r3, #5
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	4413      	add	r3, r2
 801a208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a20c:	461a      	mov	r2, r3
 801a20e:	2320      	movs	r3, #32
 801a210:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801a212:	693b      	ldr	r3, [r7, #16]
 801a214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d009      	beq.n	801a230 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a21e:	015a      	lsls	r2, r3, #5
 801a220:	69fb      	ldr	r3, [r7, #28]
 801a222:	4413      	add	r3, r2
 801a224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a228:	461a      	mov	r2, r3
 801a22a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a22e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a232:	3301      	adds	r3, #1
 801a234:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a238:	085b      	lsrs	r3, r3, #1
 801a23a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d199      	bne.n	801a176 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	4618      	mov	r0, r3
 801a248:	f004 ff3f 	bl	801f0ca <USB_ReadInterrupts>
 801a24c:	4603      	mov	r3, r0
 801a24e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801a256:	f040 80c0 	bne.w	801a3da <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	4618      	mov	r0, r3
 801a260:	f004 ff60 	bl	801f124 <USB_ReadDevAllInEpInterrupt>
 801a264:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801a266:	2300      	movs	r3, #0
 801a268:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801a26a:	e0b2      	b.n	801a3d2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a26e:	f003 0301 	and.w	r3, r3, #1
 801a272:	2b00      	cmp	r3, #0
 801a274:	f000 80a7 	beq.w	801a3c6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a27e:	b2d2      	uxtb	r2, r2
 801a280:	4611      	mov	r1, r2
 801a282:	4618      	mov	r0, r3
 801a284:	f004 ff86 	bl	801f194 <USB_ReadDevInEPInterrupt>
 801a288:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801a28a:	693b      	ldr	r3, [r7, #16]
 801a28c:	f003 0301 	and.w	r3, r3, #1
 801a290:	2b00      	cmp	r3, #0
 801a292:	d057      	beq.n	801a344 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a296:	f003 030f 	and.w	r3, r3, #15
 801a29a:	2201      	movs	r2, #1
 801a29c:	fa02 f303 	lsl.w	r3, r2, r3
 801a2a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801a2a2:	69fb      	ldr	r3, [r7, #28]
 801a2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a2a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	43db      	mvns	r3, r3
 801a2ae:	69f9      	ldr	r1, [r7, #28]
 801a2b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a2b4:	4013      	ands	r3, r2
 801a2b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ba:	015a      	lsls	r2, r3, #5
 801a2bc:	69fb      	ldr	r3, [r7, #28]
 801a2be:	4413      	add	r3, r2
 801a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a2c4:	461a      	mov	r2, r3
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	691b      	ldr	r3, [r3, #16]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d132      	bne.n	801a338 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801a2d2:	6879      	ldr	r1, [r7, #4]
 801a2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	00db      	lsls	r3, r3, #3
 801a2da:	1a9b      	subs	r3, r3, r2
 801a2dc:	009b      	lsls	r3, r3, #2
 801a2de:	440b      	add	r3, r1
 801a2e0:	3348      	adds	r3, #72	; 0x48
 801a2e2:	6819      	ldr	r1, [r3, #0]
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2e8:	4613      	mov	r3, r2
 801a2ea:	00db      	lsls	r3, r3, #3
 801a2ec:	1a9b      	subs	r3, r3, r2
 801a2ee:	009b      	lsls	r3, r3, #2
 801a2f0:	4403      	add	r3, r0
 801a2f2:	3344      	adds	r3, #68	; 0x44
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	4419      	add	r1, r3
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a2fc:	4613      	mov	r3, r2
 801a2fe:	00db      	lsls	r3, r3, #3
 801a300:	1a9b      	subs	r3, r3, r2
 801a302:	009b      	lsls	r3, r3, #2
 801a304:	4403      	add	r3, r0
 801a306:	3348      	adds	r3, #72	; 0x48
 801a308:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 801a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d113      	bne.n	801a338 <HAL_PCD_IRQHandler+0x31c>
 801a310:	6879      	ldr	r1, [r7, #4]
 801a312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a314:	4613      	mov	r3, r2
 801a316:	00db      	lsls	r3, r3, #3
 801a318:	1a9b      	subs	r3, r3, r2
 801a31a:	009b      	lsls	r3, r3, #2
 801a31c:	440b      	add	r3, r1
 801a31e:	3350      	adds	r3, #80	; 0x50
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d108      	bne.n	801a338 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	6818      	ldr	r0, [r3, #0]
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a330:	461a      	mov	r2, r3
 801a332:	2101      	movs	r1, #1
 801a334:	f004 ff8e 	bl	801f254 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	4619      	mov	r1, r3
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f008 f9d5 	bl	80226ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	f003 0308 	and.w	r3, r3, #8
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d008      	beq.n	801a360 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a350:	015a      	lsls	r2, r3, #5
 801a352:	69fb      	ldr	r3, [r7, #28]
 801a354:	4413      	add	r3, r2
 801a356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a35a:	461a      	mov	r2, r3
 801a35c:	2308      	movs	r3, #8
 801a35e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801a360:	693b      	ldr	r3, [r7, #16]
 801a362:	f003 0310 	and.w	r3, r3, #16
 801a366:	2b00      	cmp	r3, #0
 801a368:	d008      	beq.n	801a37c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	015a      	lsls	r2, r3, #5
 801a36e:	69fb      	ldr	r3, [r7, #28]
 801a370:	4413      	add	r3, r2
 801a372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a376:	461a      	mov	r2, r3
 801a378:	2310      	movs	r3, #16
 801a37a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a382:	2b00      	cmp	r3, #0
 801a384:	d008      	beq.n	801a398 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a388:	015a      	lsls	r2, r3, #5
 801a38a:	69fb      	ldr	r3, [r7, #28]
 801a38c:	4413      	add	r3, r2
 801a38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a392:	461a      	mov	r2, r3
 801a394:	2340      	movs	r3, #64	; 0x40
 801a396:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801a398:	693b      	ldr	r3, [r7, #16]
 801a39a:	f003 0302 	and.w	r3, r3, #2
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d008      	beq.n	801a3b4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a4:	015a      	lsls	r2, r3, #5
 801a3a6:	69fb      	ldr	r3, [r7, #28]
 801a3a8:	4413      	add	r3, r2
 801a3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	2302      	movs	r3, #2
 801a3b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801a3b4:	693b      	ldr	r3, [r7, #16]
 801a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d003      	beq.n	801a3c6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801a3be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a3c0:	6878      	ldr	r0, [r7, #4]
 801a3c2:	f000 fc75 	bl	801acb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 801a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ce:	085b      	lsrs	r3, r3, #1
 801a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	f47f af49 	bne.w	801a26c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f004 fe73 	bl	801f0ca <USB_ReadInterrupts>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a3ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a3ee:	d122      	bne.n	801a436 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a3f0:	69fb      	ldr	r3, [r7, #28]
 801a3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	69fa      	ldr	r2, [r7, #28]
 801a3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a3fe:	f023 0301 	bic.w	r3, r3, #1
 801a402:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	d108      	bne.n	801a420 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	2200      	movs	r2, #0
 801a412:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801a416:	2100      	movs	r1, #0
 801a418:	6878      	ldr	r0, [r7, #4]
 801a41a:	f008 fbd7 	bl	8022bcc <HAL_PCDEx_LPM_Callback>
 801a41e:	e002      	b.n	801a426 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 801a420:	6878      	ldr	r0, [r7, #4]
 801a422:	f008 f9db 	bl	80227dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	695a      	ldr	r2, [r3, #20]
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4618      	mov	r0, r3
 801a43c:	f004 fe45 	bl	801f0ca <USB_ReadInterrupts>
 801a440:	4603      	mov	r3, r0
 801a442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a44a:	d112      	bne.n	801a472 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801a44c:	69fb      	ldr	r3, [r7, #28]
 801a44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a452:	689b      	ldr	r3, [r3, #8]
 801a454:	f003 0301 	and.w	r3, r3, #1
 801a458:	2b01      	cmp	r3, #1
 801a45a:	d102      	bne.n	801a462 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a45c:	6878      	ldr	r0, [r7, #4]
 801a45e:	f008 f997 	bl	8022790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	695a      	ldr	r2, [r3, #20]
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801a470:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	4618      	mov	r0, r3
 801a478:	f004 fe27 	bl	801f0ca <USB_ReadInterrupts>
 801a47c:	4603      	mov	r3, r0
 801a47e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a486:	d121      	bne.n	801a4cc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	695a      	ldr	r2, [r3, #20]
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801a496:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d111      	bne.n	801a4c6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	2201      	movs	r2, #1
 801a4a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4b0:	089b      	lsrs	r3, r3, #2
 801a4b2:	f003 020f 	and.w	r2, r3, #15
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801a4bc:	2101      	movs	r1, #1
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f008 fb84 	bl	8022bcc <HAL_PCDEx_LPM_Callback>
 801a4c4:	e002      	b.n	801a4cc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	f008 f962 	bl	8022790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	f004 fdfa 	bl	801f0ca <USB_ReadInterrupts>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a4e0:	f040 80c7 	bne.w	801a672 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	69fa      	ldr	r2, [r7, #28]
 801a4ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a4f2:	f023 0301 	bic.w	r3, r3, #1
 801a4f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	2110      	movs	r1, #16
 801a4fe:	4618      	mov	r0, r3
 801a500:	f003 fec8 	bl	801e294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a504:	2300      	movs	r3, #0
 801a506:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a508:	e056      	b.n	801a5b8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a50c:	015a      	lsls	r2, r3, #5
 801a50e:	69fb      	ldr	r3, [r7, #28]
 801a510:	4413      	add	r3, r2
 801a512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a516:	461a      	mov	r2, r3
 801a518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a51c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a520:	015a      	lsls	r2, r3, #5
 801a522:	69fb      	ldr	r3, [r7, #28]
 801a524:	4413      	add	r3, r2
 801a526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a52e:	0151      	lsls	r1, r2, #5
 801a530:	69fa      	ldr	r2, [r7, #28]
 801a532:	440a      	add	r2, r1
 801a534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a53c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a540:	015a      	lsls	r2, r3, #5
 801a542:	69fb      	ldr	r3, [r7, #28]
 801a544:	4413      	add	r3, r2
 801a546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a54e:	0151      	lsls	r1, r2, #5
 801a550:	69fa      	ldr	r2, [r7, #28]
 801a552:	440a      	add	r2, r1
 801a554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801a558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a55c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a560:	015a      	lsls	r2, r3, #5
 801a562:	69fb      	ldr	r3, [r7, #28]
 801a564:	4413      	add	r3, r2
 801a566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a56a:	461a      	mov	r2, r3
 801a56c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a570:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a574:	015a      	lsls	r2, r3, #5
 801a576:	69fb      	ldr	r3, [r7, #28]
 801a578:	4413      	add	r3, r2
 801a57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a582:	0151      	lsls	r1, r2, #5
 801a584:	69fa      	ldr	r2, [r7, #28]
 801a586:	440a      	add	r2, r1
 801a588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a58c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801a590:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a594:	015a      	lsls	r2, r3, #5
 801a596:	69fb      	ldr	r3, [r7, #28]
 801a598:	4413      	add	r3, r2
 801a59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5a2:	0151      	lsls	r1, r2, #5
 801a5a4:	69fa      	ldr	r2, [r7, #28]
 801a5a6:	440a      	add	r2, r1
 801a5a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801a5ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a5b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	685b      	ldr	r3, [r3, #4]
 801a5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d3a3      	bcc.n	801a50a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801a5c2:	69fb      	ldr	r3, [r7, #28]
 801a5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a5c8:	69db      	ldr	r3, [r3, #28]
 801a5ca:	69fa      	ldr	r2, [r7, #28]
 801a5cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a5d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801a5d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d016      	beq.n	801a60c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a5e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a5e8:	69fa      	ldr	r2, [r7, #28]
 801a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a5ee:	f043 030b 	orr.w	r3, r3, #11
 801a5f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801a5f6:	69fb      	ldr	r3, [r7, #28]
 801a5f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5fe:	69fa      	ldr	r2, [r7, #28]
 801a600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a604:	f043 030b 	orr.w	r3, r3, #11
 801a608:	6453      	str	r3, [r2, #68]	; 0x44
 801a60a:	e015      	b.n	801a638 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a612:	695b      	ldr	r3, [r3, #20]
 801a614:	69fa      	ldr	r2, [r7, #28]
 801a616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a61a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a61e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801a622:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801a624:	69fb      	ldr	r3, [r7, #28]
 801a626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a62a:	691b      	ldr	r3, [r3, #16]
 801a62c:	69fa      	ldr	r2, [r7, #28]
 801a62e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a632:	f043 030b 	orr.w	r3, r3, #11
 801a636:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801a638:	69fb      	ldr	r3, [r7, #28]
 801a63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	69fa      	ldr	r2, [r7, #28]
 801a642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a646:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801a64a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6818      	ldr	r0, [r3, #0]
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	691b      	ldr	r3, [r3, #16]
 801a654:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 801a65c:	461a      	mov	r2, r3
 801a65e:	f004 fdf9 	bl	801f254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	695a      	ldr	r2, [r3, #20]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801a670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	4618      	mov	r0, r3
 801a678:	f004 fd27 	bl	801f0ca <USB_ReadInterrupts>
 801a67c:	4603      	mov	r3, r0
 801a67e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a686:	d124      	bne.n	801a6d2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	4618      	mov	r0, r3
 801a68e:	f004 fdbd 	bl	801f20c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	4618      	mov	r0, r3
 801a698:	f003 fe5d 	bl	801e356 <USB_GetDevSpeed>
 801a69c:	4603      	mov	r3, r0
 801a69e:	461a      	mov	r2, r3
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681c      	ldr	r4, [r3, #0]
 801a6a8:	f000 fe94 	bl	801b3d4 <HAL_RCC_GetHCLKFreq>
 801a6ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801a6b2:	b2db      	uxtb	r3, r3
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f003 fba0 	bl	801ddfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 801a6bc:	6878      	ldr	r0, [r7, #4]
 801a6be:	f008 f83e 	bl	802273e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	695a      	ldr	r2, [r3, #20]
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801a6d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	f004 fcf7 	bl	801f0ca <USB_ReadInterrupts>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	f003 0308 	and.w	r3, r3, #8
 801a6e2:	2b08      	cmp	r3, #8
 801a6e4:	d10a      	bne.n	801a6fc <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801a6e6:	6878      	ldr	r0, [r7, #4]
 801a6e8:	f008 f81b 	bl	8022722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	695a      	ldr	r2, [r3, #20]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	f002 0208 	and.w	r2, r2, #8
 801a6fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	4618      	mov	r0, r3
 801a702:	f004 fce2 	bl	801f0ca <USB_ReadInterrupts>
 801a706:	4603      	mov	r3, r0
 801a708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a70c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a710:	d10f      	bne.n	801a732 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a712:	2300      	movs	r3, #0
 801a714:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	4619      	mov	r1, r3
 801a71c:	6878      	ldr	r0, [r7, #4]
 801a71e:	f008 f87d 	bl	802281c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	695a      	ldr	r2, [r3, #20]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801a730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	4618      	mov	r0, r3
 801a738:	f004 fcc7 	bl	801f0ca <USB_ReadInterrupts>
 801a73c:	4603      	mov	r3, r0
 801a73e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a746:	d10f      	bne.n	801a768 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801a748:	2300      	movs	r3, #0
 801a74a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a74e:	b2db      	uxtb	r3, r3
 801a750:	4619      	mov	r1, r3
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	f008 f850 	bl	80227f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	695a      	ldr	r2, [r3, #20]
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801a766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	4618      	mov	r0, r3
 801a76e:	f004 fcac 	bl	801f0ca <USB_ReadInterrupts>
 801a772:	4603      	mov	r3, r0
 801a774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801a778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a77c:	d10a      	bne.n	801a794 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	f008 f85e 	bl	8022840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	695a      	ldr	r2, [r3, #20]
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	4618      	mov	r0, r3
 801a79a:	f004 fc96 	bl	801f0ca <USB_ReadInterrupts>
 801a79e:	4603      	mov	r3, r0
 801a7a0:	f003 0304 	and.w	r3, r3, #4
 801a7a4:	2b04      	cmp	r3, #4
 801a7a6:	d115      	bne.n	801a7d4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801a7b0:	69bb      	ldr	r3, [r7, #24]
 801a7b2:	f003 0304 	and.w	r3, r3, #4
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d002      	beq.n	801a7c0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f008 f84e 	bl	802285c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	6859      	ldr	r1, [r3, #4]
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	69ba      	ldr	r2, [r7, #24]
 801a7cc:	430a      	orrs	r2, r1
 801a7ce:	605a      	str	r2, [r3, #4]
 801a7d0:	e000      	b.n	801a7d4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 801a7d2:	bf00      	nop
    }
  }
}
 801a7d4:	3734      	adds	r7, #52	; 0x34
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	bd90      	pop	{r4, r7, pc}

0801a7da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801a7da:	b580      	push	{r7, lr}
 801a7dc:	b082      	sub	sp, #8
 801a7de:	af00      	add	r7, sp, #0
 801a7e0:	6078      	str	r0, [r7, #4]
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a7ec:	2b01      	cmp	r3, #1
 801a7ee:	d101      	bne.n	801a7f4 <HAL_PCD_SetAddress+0x1a>
 801a7f0:	2302      	movs	r3, #2
 801a7f2:	e013      	b.n	801a81c <HAL_PCD_SetAddress+0x42>
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	2201      	movs	r2, #1
 801a7f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	78fa      	ldrb	r2, [r7, #3]
 801a800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	78fa      	ldrb	r2, [r7, #3]
 801a80a:	4611      	mov	r1, r2
 801a80c:	4618      	mov	r0, r3
 801a80e:	f004 fbf4 	bl	801effa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	2200      	movs	r2, #0
 801a816:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801a81a:	2300      	movs	r3, #0
}
 801a81c:	4618      	mov	r0, r3
 801a81e:	3708      	adds	r7, #8
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}

0801a824 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b084      	sub	sp, #16
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	4608      	mov	r0, r1
 801a82e:	4611      	mov	r1, r2
 801a830:	461a      	mov	r2, r3
 801a832:	4603      	mov	r3, r0
 801a834:	70fb      	strb	r3, [r7, #3]
 801a836:	460b      	mov	r3, r1
 801a838:	803b      	strh	r3, [r7, #0]
 801a83a:	4613      	mov	r3, r2
 801a83c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 801a83e:	2300      	movs	r3, #0
 801a840:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a846:	2b00      	cmp	r3, #0
 801a848:	da0f      	bge.n	801a86a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a84a:	78fb      	ldrb	r3, [r7, #3]
 801a84c:	f003 020f 	and.w	r2, r3, #15
 801a850:	4613      	mov	r3, r2
 801a852:	00db      	lsls	r3, r3, #3
 801a854:	1a9b      	subs	r3, r3, r2
 801a856:	009b      	lsls	r3, r3, #2
 801a858:	3338      	adds	r3, #56	; 0x38
 801a85a:	687a      	ldr	r2, [r7, #4]
 801a85c:	4413      	add	r3, r2
 801a85e:	3304      	adds	r3, #4
 801a860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	2201      	movs	r2, #1
 801a866:	705a      	strb	r2, [r3, #1]
 801a868:	e00f      	b.n	801a88a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a86a:	78fb      	ldrb	r3, [r7, #3]
 801a86c:	f003 020f 	and.w	r2, r3, #15
 801a870:	4613      	mov	r3, r2
 801a872:	00db      	lsls	r3, r3, #3
 801a874:	1a9b      	subs	r3, r3, r2
 801a876:	009b      	lsls	r3, r3, #2
 801a878:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a87c:	687a      	ldr	r2, [r7, #4]
 801a87e:	4413      	add	r3, r2
 801a880:	3304      	adds	r3, #4
 801a882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	2200      	movs	r2, #0
 801a888:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801a88a:	78fb      	ldrb	r3, [r7, #3]
 801a88c:	f003 030f 	and.w	r3, r3, #15
 801a890:	b2da      	uxtb	r2, r3
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801a896:	883a      	ldrh	r2, [r7, #0]
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	78ba      	ldrb	r2, [r7, #2]
 801a8a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	785b      	ldrb	r3, [r3, #1]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d004      	beq.n	801a8b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	781b      	ldrb	r3, [r3, #0]
 801a8ae:	b29a      	uxth	r2, r3
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801a8b4:	78bb      	ldrb	r3, [r7, #2]
 801a8b6:	2b02      	cmp	r3, #2
 801a8b8:	d102      	bne.n	801a8c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	2200      	movs	r2, #0
 801a8be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a8c6:	2b01      	cmp	r3, #1
 801a8c8:	d101      	bne.n	801a8ce <HAL_PCD_EP_Open+0xaa>
 801a8ca:	2302      	movs	r3, #2
 801a8cc:	e00e      	b.n	801a8ec <HAL_PCD_EP_Open+0xc8>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	2201      	movs	r2, #1
 801a8d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	68f9      	ldr	r1, [r7, #12]
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f003 fd5f 	bl	801e3a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 801a8ea:	7afb      	ldrb	r3, [r7, #11]
}
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	3710      	adds	r7, #16
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}

0801a8f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b084      	sub	sp, #16
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801a900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a904:	2b00      	cmp	r3, #0
 801a906:	da0f      	bge.n	801a928 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a908:	78fb      	ldrb	r3, [r7, #3]
 801a90a:	f003 020f 	and.w	r2, r3, #15
 801a90e:	4613      	mov	r3, r2
 801a910:	00db      	lsls	r3, r3, #3
 801a912:	1a9b      	subs	r3, r3, r2
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	3338      	adds	r3, #56	; 0x38
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	4413      	add	r3, r2
 801a91c:	3304      	adds	r3, #4
 801a91e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	2201      	movs	r2, #1
 801a924:	705a      	strb	r2, [r3, #1]
 801a926:	e00f      	b.n	801a948 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a928:	78fb      	ldrb	r3, [r7, #3]
 801a92a:	f003 020f 	and.w	r2, r3, #15
 801a92e:	4613      	mov	r3, r2
 801a930:	00db      	lsls	r3, r3, #3
 801a932:	1a9b      	subs	r3, r3, r2
 801a934:	009b      	lsls	r3, r3, #2
 801a936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a93a:	687a      	ldr	r2, [r7, #4]
 801a93c:	4413      	add	r3, r2
 801a93e:	3304      	adds	r3, #4
 801a940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	2200      	movs	r2, #0
 801a946:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 801a948:	78fb      	ldrb	r3, [r7, #3]
 801a94a:	f003 030f 	and.w	r3, r3, #15
 801a94e:	b2da      	uxtb	r2, r3
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d101      	bne.n	801a962 <HAL_PCD_EP_Close+0x6e>
 801a95e:	2302      	movs	r3, #2
 801a960:	e00e      	b.n	801a980 <HAL_PCD_EP_Close+0x8c>
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2201      	movs	r2, #1
 801a966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	68f9      	ldr	r1, [r7, #12]
 801a970:	4618      	mov	r0, r3
 801a972:	f003 fd9d 	bl	801e4b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2200      	movs	r2, #0
 801a97a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801a97e:	2300      	movs	r3, #0
}
 801a980:	4618      	mov	r0, r3
 801a982:	3710      	adds	r7, #16
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}

0801a988 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b086      	sub	sp, #24
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	607a      	str	r2, [r7, #4]
 801a992:	603b      	str	r3, [r7, #0]
 801a994:	460b      	mov	r3, r1
 801a996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801a998:	7afb      	ldrb	r3, [r7, #11]
 801a99a:	f003 020f 	and.w	r2, r3, #15
 801a99e:	4613      	mov	r3, r2
 801a9a0:	00db      	lsls	r3, r3, #3
 801a9a2:	1a9b      	subs	r3, r3, r2
 801a9a4:	009b      	lsls	r3, r3, #2
 801a9a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801a9aa:	68fa      	ldr	r2, [r7, #12]
 801a9ac:	4413      	add	r3, r2
 801a9ae:	3304      	adds	r3, #4
 801a9b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801a9b2:	697b      	ldr	r3, [r7, #20]
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801a9b8:	697b      	ldr	r3, [r7, #20]
 801a9ba:	683a      	ldr	r2, [r7, #0]
 801a9bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801a9be:	697b      	ldr	r3, [r7, #20]
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801a9c4:	697b      	ldr	r3, [r7, #20]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801a9ca:	7afb      	ldrb	r3, [r7, #11]
 801a9cc:	f003 030f 	and.w	r3, r3, #15
 801a9d0:	b2da      	uxtb	r2, r3
 801a9d2:	697b      	ldr	r3, [r7, #20]
 801a9d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	691b      	ldr	r3, [r3, #16]
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	d102      	bne.n	801a9e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801a9de:	687a      	ldr	r2, [r7, #4]
 801a9e0:	697b      	ldr	r3, [r7, #20]
 801a9e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801a9e4:	7afb      	ldrb	r3, [r7, #11]
 801a9e6:	f003 030f 	and.w	r3, r3, #15
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d109      	bne.n	801aa02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	6818      	ldr	r0, [r3, #0]
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	691b      	ldr	r3, [r3, #16]
 801a9f6:	b2db      	uxtb	r3, r3
 801a9f8:	461a      	mov	r2, r3
 801a9fa:	6979      	ldr	r1, [r7, #20]
 801a9fc:	f004 f878 	bl	801eaf0 <USB_EP0StartXfer>
 801aa00:	e008      	b.n	801aa14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	6818      	ldr	r0, [r3, #0]
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	691b      	ldr	r3, [r3, #16]
 801aa0a:	b2db      	uxtb	r3, r3
 801aa0c:	461a      	mov	r2, r3
 801aa0e:	6979      	ldr	r1, [r7, #20]
 801aa10:	f003 fe2a 	bl	801e668 <USB_EPStartXfer>
  }

  return HAL_OK;
 801aa14:	2300      	movs	r3, #0
}
 801aa16:	4618      	mov	r0, r3
 801aa18:	3718      	adds	r7, #24
 801aa1a:	46bd      	mov	sp, r7
 801aa1c:	bd80      	pop	{r7, pc}

0801aa1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aa1e:	b480      	push	{r7}
 801aa20:	b083      	sub	sp, #12
 801aa22:	af00      	add	r7, sp, #0
 801aa24:	6078      	str	r0, [r7, #4]
 801aa26:	460b      	mov	r3, r1
 801aa28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801aa2a:	78fb      	ldrb	r3, [r7, #3]
 801aa2c:	f003 020f 	and.w	r2, r3, #15
 801aa30:	6879      	ldr	r1, [r7, #4]
 801aa32:	4613      	mov	r3, r2
 801aa34:	00db      	lsls	r3, r3, #3
 801aa36:	1a9b      	subs	r3, r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	440b      	add	r3, r1
 801aa3c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801aa40:	681b      	ldr	r3, [r3, #0]
}
 801aa42:	4618      	mov	r0, r3
 801aa44:	370c      	adds	r7, #12
 801aa46:	46bd      	mov	sp, r7
 801aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4c:	4770      	bx	lr

0801aa4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801aa4e:	b580      	push	{r7, lr}
 801aa50:	b086      	sub	sp, #24
 801aa52:	af00      	add	r7, sp, #0
 801aa54:	60f8      	str	r0, [r7, #12]
 801aa56:	607a      	str	r2, [r7, #4]
 801aa58:	603b      	str	r3, [r7, #0]
 801aa5a:	460b      	mov	r3, r1
 801aa5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801aa5e:	7afb      	ldrb	r3, [r7, #11]
 801aa60:	f003 020f 	and.w	r2, r3, #15
 801aa64:	4613      	mov	r3, r2
 801aa66:	00db      	lsls	r3, r3, #3
 801aa68:	1a9b      	subs	r3, r3, r2
 801aa6a:	009b      	lsls	r3, r3, #2
 801aa6c:	3338      	adds	r3, #56	; 0x38
 801aa6e:	68fa      	ldr	r2, [r7, #12]
 801aa70:	4413      	add	r3, r2
 801aa72:	3304      	adds	r3, #4
 801aa74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801aa76:	697b      	ldr	r3, [r7, #20]
 801aa78:	687a      	ldr	r2, [r7, #4]
 801aa7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 801aa7c:	697b      	ldr	r3, [r7, #20]
 801aa7e:	683a      	ldr	r2, [r7, #0]
 801aa80:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801aa82:	697b      	ldr	r3, [r7, #20]
 801aa84:	2200      	movs	r2, #0
 801aa86:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	2201      	movs	r2, #1
 801aa8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801aa8e:	7afb      	ldrb	r3, [r7, #11]
 801aa90:	f003 030f 	and.w	r3, r3, #15
 801aa94:	b2da      	uxtb	r2, r3
 801aa96:	697b      	ldr	r3, [r7, #20]
 801aa98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	691b      	ldr	r3, [r3, #16]
 801aa9e:	2b01      	cmp	r3, #1
 801aaa0:	d102      	bne.n	801aaa8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801aaa2:	687a      	ldr	r2, [r7, #4]
 801aaa4:	697b      	ldr	r3, [r7, #20]
 801aaa6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801aaa8:	7afb      	ldrb	r3, [r7, #11]
 801aaaa:	f003 030f 	and.w	r3, r3, #15
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d109      	bne.n	801aac6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	6818      	ldr	r0, [r3, #0]
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	691b      	ldr	r3, [r3, #16]
 801aaba:	b2db      	uxtb	r3, r3
 801aabc:	461a      	mov	r2, r3
 801aabe:	6979      	ldr	r1, [r7, #20]
 801aac0:	f004 f816 	bl	801eaf0 <USB_EP0StartXfer>
 801aac4:	e008      	b.n	801aad8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	6818      	ldr	r0, [r3, #0]
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	691b      	ldr	r3, [r3, #16]
 801aace:	b2db      	uxtb	r3, r3
 801aad0:	461a      	mov	r2, r3
 801aad2:	6979      	ldr	r1, [r7, #20]
 801aad4:	f003 fdc8 	bl	801e668 <USB_EPStartXfer>
  }

  return HAL_OK;
 801aad8:	2300      	movs	r3, #0
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3718      	adds	r7, #24
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}

0801aae2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801aae2:	b580      	push	{r7, lr}
 801aae4:	b084      	sub	sp, #16
 801aae6:	af00      	add	r7, sp, #0
 801aae8:	6078      	str	r0, [r7, #4]
 801aaea:	460b      	mov	r3, r1
 801aaec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801aaee:	78fb      	ldrb	r3, [r7, #3]
 801aaf0:	f003 020f 	and.w	r2, r3, #15
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d901      	bls.n	801ab00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801aafc:	2301      	movs	r3, #1
 801aafe:	e050      	b.n	801aba2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801ab00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	da0f      	bge.n	801ab28 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801ab08:	78fb      	ldrb	r3, [r7, #3]
 801ab0a:	f003 020f 	and.w	r2, r3, #15
 801ab0e:	4613      	mov	r3, r2
 801ab10:	00db      	lsls	r3, r3, #3
 801ab12:	1a9b      	subs	r3, r3, r2
 801ab14:	009b      	lsls	r3, r3, #2
 801ab16:	3338      	adds	r3, #56	; 0x38
 801ab18:	687a      	ldr	r2, [r7, #4]
 801ab1a:	4413      	add	r3, r2
 801ab1c:	3304      	adds	r3, #4
 801ab1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	2201      	movs	r2, #1
 801ab24:	705a      	strb	r2, [r3, #1]
 801ab26:	e00d      	b.n	801ab44 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801ab28:	78fa      	ldrb	r2, [r7, #3]
 801ab2a:	4613      	mov	r3, r2
 801ab2c:	00db      	lsls	r3, r3, #3
 801ab2e:	1a9b      	subs	r3, r3, r2
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ab36:	687a      	ldr	r2, [r7, #4]
 801ab38:	4413      	add	r3, r2
 801ab3a:	3304      	adds	r3, #4
 801ab3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	2200      	movs	r2, #0
 801ab42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	2201      	movs	r2, #1
 801ab48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ab4a:	78fb      	ldrb	r3, [r7, #3]
 801ab4c:	f003 030f 	and.w	r3, r3, #15
 801ab50:	b2da      	uxtb	r2, r3
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ab5c:	2b01      	cmp	r3, #1
 801ab5e:	d101      	bne.n	801ab64 <HAL_PCD_EP_SetStall+0x82>
 801ab60:	2302      	movs	r3, #2
 801ab62:	e01e      	b.n	801aba2 <HAL_PCD_EP_SetStall+0xc0>
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2201      	movs	r2, #1
 801ab68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	68f9      	ldr	r1, [r7, #12]
 801ab72:	4618      	mov	r0, r3
 801ab74:	f004 f96d 	bl	801ee52 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801ab78:	78fb      	ldrb	r3, [r7, #3]
 801ab7a:	f003 030f 	and.w	r3, r3, #15
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d10a      	bne.n	801ab98 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6818      	ldr	r0, [r3, #0]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	691b      	ldr	r3, [r3, #16]
 801ab8a:	b2d9      	uxtb	r1, r3
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801ab92:	461a      	mov	r2, r3
 801ab94:	f004 fb5e 	bl	801f254 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aba0:	2300      	movs	r3, #0
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	3710      	adds	r7, #16
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}

0801abaa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801abaa:	b580      	push	{r7, lr}
 801abac:	b084      	sub	sp, #16
 801abae:	af00      	add	r7, sp, #0
 801abb0:	6078      	str	r0, [r7, #4]
 801abb2:	460b      	mov	r3, r1
 801abb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801abb6:	78fb      	ldrb	r3, [r7, #3]
 801abb8:	f003 020f 	and.w	r2, r3, #15
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	685b      	ldr	r3, [r3, #4]
 801abc0:	429a      	cmp	r2, r3
 801abc2:	d901      	bls.n	801abc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801abc4:	2301      	movs	r3, #1
 801abc6:	e042      	b.n	801ac4e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801abc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	da0f      	bge.n	801abf0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801abd0:	78fb      	ldrb	r3, [r7, #3]
 801abd2:	f003 020f 	and.w	r2, r3, #15
 801abd6:	4613      	mov	r3, r2
 801abd8:	00db      	lsls	r3, r3, #3
 801abda:	1a9b      	subs	r3, r3, r2
 801abdc:	009b      	lsls	r3, r3, #2
 801abde:	3338      	adds	r3, #56	; 0x38
 801abe0:	687a      	ldr	r2, [r7, #4]
 801abe2:	4413      	add	r3, r2
 801abe4:	3304      	adds	r3, #4
 801abe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	2201      	movs	r2, #1
 801abec:	705a      	strb	r2, [r3, #1]
 801abee:	e00f      	b.n	801ac10 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801abf0:	78fb      	ldrb	r3, [r7, #3]
 801abf2:	f003 020f 	and.w	r2, r3, #15
 801abf6:	4613      	mov	r3, r2
 801abf8:	00db      	lsls	r3, r3, #3
 801abfa:	1a9b      	subs	r3, r3, r2
 801abfc:	009b      	lsls	r3, r3, #2
 801abfe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801ac02:	687a      	ldr	r2, [r7, #4]
 801ac04:	4413      	add	r3, r2
 801ac06:	3304      	adds	r3, #4
 801ac08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	2200      	movs	r2, #0
 801ac14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801ac16:	78fb      	ldrb	r3, [r7, #3]
 801ac18:	f003 030f 	and.w	r3, r3, #15
 801ac1c:	b2da      	uxtb	r2, r3
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ac28:	2b01      	cmp	r3, #1
 801ac2a:	d101      	bne.n	801ac30 <HAL_PCD_EP_ClrStall+0x86>
 801ac2c:	2302      	movs	r3, #2
 801ac2e:	e00e      	b.n	801ac4e <HAL_PCD_EP_ClrStall+0xa4>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	2201      	movs	r2, #1
 801ac34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	68f9      	ldr	r1, [r7, #12]
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f004 f975 	bl	801ef2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2200      	movs	r2, #0
 801ac48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801ac4c:	2300      	movs	r3, #0
}
 801ac4e:	4618      	mov	r0, r3
 801ac50:	3710      	adds	r7, #16
 801ac52:	46bd      	mov	sp, r7
 801ac54:	bd80      	pop	{r7, pc}

0801ac56 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801ac56:	b580      	push	{r7, lr}
 801ac58:	b082      	sub	sp, #8
 801ac5a:	af00      	add	r7, sp, #0
 801ac5c:	6078      	str	r0, [r7, #4]
 801ac5e:	460b      	mov	r3, r1
 801ac60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801ac68:	2b01      	cmp	r3, #1
 801ac6a:	d101      	bne.n	801ac70 <HAL_PCD_EP_Flush+0x1a>
 801ac6c:	2302      	movs	r3, #2
 801ac6e:	e01b      	b.n	801aca8 <HAL_PCD_EP_Flush+0x52>
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2201      	movs	r2, #1
 801ac74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 801ac78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	da09      	bge.n	801ac94 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681a      	ldr	r2, [r3, #0]
 801ac84:	78fb      	ldrb	r3, [r7, #3]
 801ac86:	f003 030f 	and.w	r3, r3, #15
 801ac8a:	4619      	mov	r1, r3
 801ac8c:	4610      	mov	r0, r2
 801ac8e:	f003 fb01 	bl	801e294 <USB_FlushTxFifo>
 801ac92:	e004      	b.n	801ac9e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f003 fb21 	bl	801e2e0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	2200      	movs	r2, #0
 801aca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801aca6:	2300      	movs	r3, #0
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	3708      	adds	r7, #8
 801acac:	46bd      	mov	sp, r7
 801acae:	bd80      	pop	{r7, pc}

0801acb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b08a      	sub	sp, #40	; 0x28
 801acb4:	af02      	add	r7, sp, #8
 801acb6:	6078      	str	r0, [r7, #4]
 801acb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801acc4:	683a      	ldr	r2, [r7, #0]
 801acc6:	4613      	mov	r3, r2
 801acc8:	00db      	lsls	r3, r3, #3
 801acca:	1a9b      	subs	r3, r3, r2
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	3338      	adds	r3, #56	; 0x38
 801acd0:	687a      	ldr	r2, [r7, #4]
 801acd2:	4413      	add	r3, r2
 801acd4:	3304      	adds	r3, #4
 801acd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	699a      	ldr	r2, [r3, #24]
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	695b      	ldr	r3, [r3, #20]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d901      	bls.n	801ace8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801ace4:	2301      	movs	r3, #1
 801ace6:	e06c      	b.n	801adc2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	695a      	ldr	r2, [r3, #20]
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	699b      	ldr	r3, [r3, #24]
 801acf0:	1ad3      	subs	r3, r2, r3
 801acf2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	689b      	ldr	r3, [r3, #8]
 801acf8:	69fa      	ldr	r2, [r7, #28]
 801acfa:	429a      	cmp	r2, r3
 801acfc:	d902      	bls.n	801ad04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	689b      	ldr	r3, [r3, #8]
 801ad02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801ad04:	69fb      	ldr	r3, [r7, #28]
 801ad06:	3303      	adds	r3, #3
 801ad08:	089b      	lsrs	r3, r3, #2
 801ad0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ad0c:	e02b      	b.n	801ad66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	695a      	ldr	r2, [r3, #20]
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	699b      	ldr	r3, [r3, #24]
 801ad16:	1ad3      	subs	r3, r2, r3
 801ad18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	689b      	ldr	r3, [r3, #8]
 801ad1e:	69fa      	ldr	r2, [r7, #28]
 801ad20:	429a      	cmp	r2, r3
 801ad22:	d902      	bls.n	801ad2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	689b      	ldr	r3, [r3, #8]
 801ad28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801ad2a:	69fb      	ldr	r3, [r7, #28]
 801ad2c:	3303      	adds	r3, #3
 801ad2e:	089b      	lsrs	r3, r3, #2
 801ad30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	68d9      	ldr	r1, [r3, #12]
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	b2da      	uxtb	r2, r3
 801ad3a:	69fb      	ldr	r3, [r7, #28]
 801ad3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	9300      	str	r3, [sp, #0]
 801ad46:	4603      	mov	r3, r0
 801ad48:	6978      	ldr	r0, [r7, #20]
 801ad4a:	f004 f824 	bl	801ed96 <USB_WritePacket>

    ep->xfer_buff  += len;
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	68da      	ldr	r2, [r3, #12]
 801ad52:	69fb      	ldr	r3, [r7, #28]
 801ad54:	441a      	add	r2, r3
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	699a      	ldr	r2, [r3, #24]
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	441a      	add	r2, r3
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	015a      	lsls	r2, r3, #5
 801ad6a:	693b      	ldr	r3, [r7, #16]
 801ad6c:	4413      	add	r3, r2
 801ad6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ad72:	699b      	ldr	r3, [r3, #24]
 801ad74:	b29b      	uxth	r3, r3
 801ad76:	69ba      	ldr	r2, [r7, #24]
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d809      	bhi.n	801ad90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	699a      	ldr	r2, [r3, #24]
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801ad84:	429a      	cmp	r2, r3
 801ad86:	d203      	bcs.n	801ad90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	695b      	ldr	r3, [r3, #20]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d1be      	bne.n	801ad0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	695a      	ldr	r2, [r3, #20]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	699b      	ldr	r3, [r3, #24]
 801ad98:	429a      	cmp	r2, r3
 801ad9a:	d811      	bhi.n	801adc0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801ad9c:	683b      	ldr	r3, [r7, #0]
 801ad9e:	f003 030f 	and.w	r3, r3, #15
 801ada2:	2201      	movs	r2, #1
 801ada4:	fa02 f303 	lsl.w	r3, r2, r3
 801ada8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801adb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801adb2:	68bb      	ldr	r3, [r7, #8]
 801adb4:	43db      	mvns	r3, r3
 801adb6:	6939      	ldr	r1, [r7, #16]
 801adb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801adbc:	4013      	ands	r3, r2
 801adbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801adc0:	2300      	movs	r3, #0
}
 801adc2:	4618      	mov	r0, r3
 801adc4:	3720      	adds	r7, #32
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd80      	pop	{r7, pc}
	...

0801adcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b086      	sub	sp, #24
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801addc:	697b      	ldr	r3, [r7, #20]
 801adde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	333c      	adds	r3, #60	; 0x3c
 801ade4:	3304      	adds	r3, #4
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801adea:	683b      	ldr	r3, [r7, #0]
 801adec:	015a      	lsls	r2, r3, #5
 801adee:	693b      	ldr	r3, [r7, #16]
 801adf0:	4413      	add	r3, r2
 801adf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801adf6:	689b      	ldr	r3, [r3, #8]
 801adf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	691b      	ldr	r3, [r3, #16]
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	f040 80a0 	bne.w	801af44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801ae04:	68bb      	ldr	r3, [r7, #8]
 801ae06:	f003 0308 	and.w	r3, r3, #8
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d015      	beq.n	801ae3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	4a72      	ldr	r2, [pc, #456]	; (801afdc <PCD_EP_OutXfrComplete_int+0x210>)
 801ae12:	4293      	cmp	r3, r2
 801ae14:	f240 80dd 	bls.w	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	f000 80d7 	beq.w	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	015a      	lsls	r2, r3, #5
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	4413      	add	r3, r2
 801ae2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae30:	461a      	mov	r2, r3
 801ae32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae36:	6093      	str	r3, [r2, #8]
 801ae38:	e0cb      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	f003 0320 	and.w	r3, r3, #32
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d009      	beq.n	801ae58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ae44:	683b      	ldr	r3, [r7, #0]
 801ae46:	015a      	lsls	r2, r3, #5
 801ae48:	693b      	ldr	r3, [r7, #16]
 801ae4a:	4413      	add	r3, r2
 801ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae50:	461a      	mov	r2, r3
 801ae52:	2320      	movs	r3, #32
 801ae54:	6093      	str	r3, [r2, #8]
 801ae56:	e0bc      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	f040 80b7 	bne.w	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	4a5d      	ldr	r2, [pc, #372]	; (801afdc <PCD_EP_OutXfrComplete_int+0x210>)
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	d90f      	bls.n	801ae8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d00a      	beq.n	801ae8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ae76:	683b      	ldr	r3, [r7, #0]
 801ae78:	015a      	lsls	r2, r3, #5
 801ae7a:	693b      	ldr	r3, [r7, #16]
 801ae7c:	4413      	add	r3, r2
 801ae7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ae82:	461a      	mov	r2, r3
 801ae84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae88:	6093      	str	r3, [r2, #8]
 801ae8a:	e0a2      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 801ae8c:	6879      	ldr	r1, [r7, #4]
 801ae8e:	683a      	ldr	r2, [r7, #0]
 801ae90:	4613      	mov	r3, r2
 801ae92:	00db      	lsls	r3, r3, #3
 801ae94:	1a9b      	subs	r3, r3, r2
 801ae96:	009b      	lsls	r3, r3, #2
 801ae98:	440b      	add	r3, r1
 801ae9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801ae9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	0159      	lsls	r1, r3, #5
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	440b      	add	r3, r1
 801aea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aeac:	691b      	ldr	r3, [r3, #16]
 801aeae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 801aeb2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 801aeb4:	6878      	ldr	r0, [r7, #4]
 801aeb6:	683a      	ldr	r2, [r7, #0]
 801aeb8:	4613      	mov	r3, r2
 801aeba:	00db      	lsls	r3, r3, #3
 801aebc:	1a9b      	subs	r3, r3, r2
 801aebe:	009b      	lsls	r3, r3, #2
 801aec0:	4403      	add	r3, r0
 801aec2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801aec6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 801aec8:	6879      	ldr	r1, [r7, #4]
 801aeca:	683a      	ldr	r2, [r7, #0]
 801aecc:	4613      	mov	r3, r2
 801aece:	00db      	lsls	r3, r3, #3
 801aed0:	1a9b      	subs	r3, r3, r2
 801aed2:	009b      	lsls	r3, r3, #2
 801aed4:	440b      	add	r3, r1
 801aed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aeda:	6819      	ldr	r1, [r3, #0]
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	683a      	ldr	r2, [r7, #0]
 801aee0:	4613      	mov	r3, r2
 801aee2:	00db      	lsls	r3, r3, #3
 801aee4:	1a9b      	subs	r3, r3, r2
 801aee6:	009b      	lsls	r3, r3, #2
 801aee8:	4403      	add	r3, r0
 801aeea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	4419      	add	r1, r3
 801aef2:	6878      	ldr	r0, [r7, #4]
 801aef4:	683a      	ldr	r2, [r7, #0]
 801aef6:	4613      	mov	r3, r2
 801aef8:	00db      	lsls	r3, r3, #3
 801aefa:	1a9b      	subs	r3, r3, r2
 801aefc:	009b      	lsls	r3, r3, #2
 801aefe:	4403      	add	r3, r0
 801af00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801af04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d114      	bne.n	801af36 <PCD_EP_OutXfrComplete_int+0x16a>
 801af0c:	6879      	ldr	r1, [r7, #4]
 801af0e:	683a      	ldr	r2, [r7, #0]
 801af10:	4613      	mov	r3, r2
 801af12:	00db      	lsls	r3, r3, #3
 801af14:	1a9b      	subs	r3, r3, r2
 801af16:	009b      	lsls	r3, r3, #2
 801af18:	440b      	add	r3, r1
 801af1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d108      	bne.n	801af36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6818      	ldr	r0, [r3, #0]
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801af2e:	461a      	mov	r2, r3
 801af30:	2101      	movs	r1, #1
 801af32:	f004 f98f 	bl	801f254 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801af36:	683b      	ldr	r3, [r7, #0]
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	4619      	mov	r1, r3
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	f007 fbbb 	bl	80226b8 <HAL_PCD_DataOutStageCallback>
 801af42:	e046      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	4a26      	ldr	r2, [pc, #152]	; (801afe0 <PCD_EP_OutXfrComplete_int+0x214>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d124      	bne.n	801af96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801af4c:	68bb      	ldr	r3, [r7, #8]
 801af4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801af52:	2b00      	cmp	r3, #0
 801af54:	d00a      	beq.n	801af6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	015a      	lsls	r2, r3, #5
 801af5a:	693b      	ldr	r3, [r7, #16]
 801af5c:	4413      	add	r3, r2
 801af5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af62:	461a      	mov	r2, r3
 801af64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af68:	6093      	str	r3, [r2, #8]
 801af6a:	e032      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801af6c:	68bb      	ldr	r3, [r7, #8]
 801af6e:	f003 0320 	and.w	r3, r3, #32
 801af72:	2b00      	cmp	r3, #0
 801af74:	d008      	beq.n	801af88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	015a      	lsls	r2, r3, #5
 801af7a:	693b      	ldr	r3, [r7, #16]
 801af7c:	4413      	add	r3, r2
 801af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af82:	461a      	mov	r2, r3
 801af84:	2320      	movs	r3, #32
 801af86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	b2db      	uxtb	r3, r3
 801af8c:	4619      	mov	r1, r3
 801af8e:	6878      	ldr	r0, [r7, #4]
 801af90:	f007 fb92 	bl	80226b8 <HAL_PCD_DataOutStageCallback>
 801af94:	e01d      	b.n	801afd2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d114      	bne.n	801afc6 <PCD_EP_OutXfrComplete_int+0x1fa>
 801af9c:	6879      	ldr	r1, [r7, #4]
 801af9e:	683a      	ldr	r2, [r7, #0]
 801afa0:	4613      	mov	r3, r2
 801afa2:	00db      	lsls	r3, r3, #3
 801afa4:	1a9b      	subs	r3, r3, r2
 801afa6:	009b      	lsls	r3, r3, #2
 801afa8:	440b      	add	r3, r1
 801afaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d108      	bne.n	801afc6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	6818      	ldr	r0, [r3, #0]
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801afbe:	461a      	mov	r2, r3
 801afc0:	2100      	movs	r1, #0
 801afc2:	f004 f947 	bl	801f254 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	b2db      	uxtb	r3, r3
 801afca:	4619      	mov	r1, r3
 801afcc:	6878      	ldr	r0, [r7, #4]
 801afce:	f007 fb73 	bl	80226b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801afd2:	2300      	movs	r3, #0
}
 801afd4:	4618      	mov	r0, r3
 801afd6:	3718      	adds	r7, #24
 801afd8:	46bd      	mov	sp, r7
 801afda:	bd80      	pop	{r7, pc}
 801afdc:	4f54300a 	.word	0x4f54300a
 801afe0:	4f54310a 	.word	0x4f54310a

0801afe4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b086      	sub	sp, #24
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aff4:	697b      	ldr	r3, [r7, #20]
 801aff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	333c      	adds	r3, #60	; 0x3c
 801affc:	3304      	adds	r3, #4
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b002:	683b      	ldr	r3, [r7, #0]
 801b004:	015a      	lsls	r2, r3, #5
 801b006:	693b      	ldr	r3, [r7, #16]
 801b008:	4413      	add	r3, r2
 801b00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b00e:	689b      	ldr	r3, [r3, #8]
 801b010:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	4a15      	ldr	r2, [pc, #84]	; (801b06c <PCD_EP_OutSetupPacket_int+0x88>)
 801b016:	4293      	cmp	r3, r2
 801b018:	d90e      	bls.n	801b038 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801b01a:	68bb      	ldr	r3, [r7, #8]
 801b01c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801b020:	2b00      	cmp	r3, #0
 801b022:	d009      	beq.n	801b038 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	015a      	lsls	r2, r3, #5
 801b028:	693b      	ldr	r3, [r7, #16]
 801b02a:	4413      	add	r3, r2
 801b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b030:	461a      	mov	r2, r3
 801b032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b036:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801b038:	6878      	ldr	r0, [r7, #4]
 801b03a:	f007 fb2b 	bl	8022694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	4a0a      	ldr	r2, [pc, #40]	; (801b06c <PCD_EP_OutSetupPacket_int+0x88>)
 801b042:	4293      	cmp	r3, r2
 801b044:	d90c      	bls.n	801b060 <PCD_EP_OutSetupPacket_int+0x7c>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	691b      	ldr	r3, [r3, #16]
 801b04a:	2b01      	cmp	r3, #1
 801b04c:	d108      	bne.n	801b060 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	6818      	ldr	r0, [r3, #0]
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b058:	461a      	mov	r2, r3
 801b05a:	2101      	movs	r1, #1
 801b05c:	f004 f8fa 	bl	801f254 <USB_EP0_OutStart>
  }

  return HAL_OK;
 801b060:	2300      	movs	r3, #0
}
 801b062:	4618      	mov	r0, r3
 801b064:	3718      	adds	r7, #24
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}
 801b06a:	bf00      	nop
 801b06c:	4f54300a 	.word	0x4f54300a

0801b070 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801b070:	b480      	push	{r7}
 801b072:	b085      	sub	sp, #20
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]
 801b078:	460b      	mov	r3, r1
 801b07a:	70fb      	strb	r3, [r7, #3]
 801b07c:	4613      	mov	r3, r2
 801b07e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b086:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801b088:	78fb      	ldrb	r3, [r7, #3]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d107      	bne.n	801b09e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801b08e:	883b      	ldrh	r3, [r7, #0]
 801b090:	0419      	lsls	r1, r3, #16
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	68ba      	ldr	r2, [r7, #8]
 801b098:	430a      	orrs	r2, r1
 801b09a:	629a      	str	r2, [r3, #40]	; 0x28
 801b09c:	e028      	b.n	801b0f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0a4:	0c1b      	lsrs	r3, r3, #16
 801b0a6:	68ba      	ldr	r2, [r7, #8]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	73fb      	strb	r3, [r7, #15]
 801b0b0:	e00d      	b.n	801b0ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681a      	ldr	r2, [r3, #0]
 801b0b6:	7bfb      	ldrb	r3, [r7, #15]
 801b0b8:	3340      	adds	r3, #64	; 0x40
 801b0ba:	009b      	lsls	r3, r3, #2
 801b0bc:	4413      	add	r3, r2
 801b0be:	685b      	ldr	r3, [r3, #4]
 801b0c0:	0c1b      	lsrs	r3, r3, #16
 801b0c2:	68ba      	ldr	r2, [r7, #8]
 801b0c4:	4413      	add	r3, r2
 801b0c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801b0c8:	7bfb      	ldrb	r3, [r7, #15]
 801b0ca:	3301      	adds	r3, #1
 801b0cc:	73fb      	strb	r3, [r7, #15]
 801b0ce:	7bfa      	ldrb	r2, [r7, #15]
 801b0d0:	78fb      	ldrb	r3, [r7, #3]
 801b0d2:	3b01      	subs	r3, #1
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d3ec      	bcc.n	801b0b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801b0d8:	883b      	ldrh	r3, [r7, #0]
 801b0da:	0418      	lsls	r0, r3, #16
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6819      	ldr	r1, [r3, #0]
 801b0e0:	78fb      	ldrb	r3, [r7, #3]
 801b0e2:	3b01      	subs	r3, #1
 801b0e4:	68ba      	ldr	r2, [r7, #8]
 801b0e6:	4302      	orrs	r2, r0
 801b0e8:	3340      	adds	r3, #64	; 0x40
 801b0ea:	009b      	lsls	r3, r3, #2
 801b0ec:	440b      	add	r3, r1
 801b0ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801b0f0:	2300      	movs	r3, #0
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3714      	adds	r7, #20
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fc:	4770      	bx	lr

0801b0fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801b0fe:	b480      	push	{r7}
 801b100:	b083      	sub	sp, #12
 801b102:	af00      	add	r7, sp, #0
 801b104:	6078      	str	r0, [r7, #4]
 801b106:	460b      	mov	r3, r1
 801b108:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	887a      	ldrh	r2, [r7, #2]
 801b110:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b112:	2300      	movs	r3, #0
}
 801b114:	4618      	mov	r0, r3
 801b116:	370c      	adds	r7, #12
 801b118:	46bd      	mov	sp, r7
 801b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11e:	4770      	bx	lr

0801b120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b120:	b480      	push	{r7}
 801b122:	b085      	sub	sp, #20
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	2201      	movs	r2, #1
 801b132:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	2200      	movs	r2, #0
 801b13a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	699b      	ldr	r3, [r3, #24]
 801b142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b14e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b152:	f043 0303 	orr.w	r3, r3, #3
 801b156:	68fa      	ldr	r2, [r7, #12]
 801b158:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b15a:	2300      	movs	r3, #0
}
 801b15c:	4618      	mov	r0, r3
 801b15e:	3714      	adds	r7, #20
 801b160:	46bd      	mov	sp, r7
 801b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b166:	4770      	bx	lr

0801b168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b082      	sub	sp, #8
 801b16c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801b16e:	2300      	movs	r3, #0
 801b170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801b172:	2300      	movs	r3, #0
 801b174:	603b      	str	r3, [r7, #0]
 801b176:	4b20      	ldr	r3, [pc, #128]	; (801b1f8 <HAL_PWREx_EnableOverDrive+0x90>)
 801b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b17a:	4a1f      	ldr	r2, [pc, #124]	; (801b1f8 <HAL_PWREx_EnableOverDrive+0x90>)
 801b17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b180:	6413      	str	r3, [r2, #64]	; 0x40
 801b182:	4b1d      	ldr	r3, [pc, #116]	; (801b1f8 <HAL_PWREx_EnableOverDrive+0x90>)
 801b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b18a:	603b      	str	r3, [r7, #0]
 801b18c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801b18e:	4b1b      	ldr	r3, [pc, #108]	; (801b1fc <HAL_PWREx_EnableOverDrive+0x94>)
 801b190:	2201      	movs	r2, #1
 801b192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b194:	f7fd f8b6 	bl	8018304 <HAL_GetTick>
 801b198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b19a:	e009      	b.n	801b1b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b19c:	f7fd f8b2 	bl	8018304 <HAL_GetTick>
 801b1a0:	4602      	mov	r2, r0
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	1ad3      	subs	r3, r2, r3
 801b1a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b1aa:	d901      	bls.n	801b1b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801b1ac:	2303      	movs	r3, #3
 801b1ae:	e01f      	b.n	801b1f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801b1b0:	4b13      	ldr	r3, [pc, #76]	; (801b200 <HAL_PWREx_EnableOverDrive+0x98>)
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b1b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1bc:	d1ee      	bne.n	801b19c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801b1be:	4b11      	ldr	r3, [pc, #68]	; (801b204 <HAL_PWREx_EnableOverDrive+0x9c>)
 801b1c0:	2201      	movs	r2, #1
 801b1c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b1c4:	f7fd f89e 	bl	8018304 <HAL_GetTick>
 801b1c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b1ca:	e009      	b.n	801b1e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801b1cc:	f7fd f89a 	bl	8018304 <HAL_GetTick>
 801b1d0:	4602      	mov	r2, r0
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	1ad3      	subs	r3, r2, r3
 801b1d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b1da:	d901      	bls.n	801b1e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801b1dc:	2303      	movs	r3, #3
 801b1de:	e007      	b.n	801b1f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801b1e0:	4b07      	ldr	r3, [pc, #28]	; (801b200 <HAL_PWREx_EnableOverDrive+0x98>)
 801b1e2:	685b      	ldr	r3, [r3, #4]
 801b1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b1e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801b1ec:	d1ee      	bne.n	801b1cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801b1ee:	2300      	movs	r3, #0
}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	3708      	adds	r7, #8
 801b1f4:	46bd      	mov	sp, r7
 801b1f6:	bd80      	pop	{r7, pc}
 801b1f8:	40023800 	.word	0x40023800
 801b1fc:	420e0040 	.word	0x420e0040
 801b200:	40007000 	.word	0x40007000
 801b204:	420e0044 	.word	0x420e0044

0801b208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b084      	sub	sp, #16
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
 801b210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	2b00      	cmp	r3, #0
 801b216:	d101      	bne.n	801b21c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b218:	2301      	movs	r3, #1
 801b21a:	e0cc      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801b21c:	4b68      	ldr	r3, [pc, #416]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	f003 030f 	and.w	r3, r3, #15
 801b224:	683a      	ldr	r2, [r7, #0]
 801b226:	429a      	cmp	r2, r3
 801b228:	d90c      	bls.n	801b244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b22a:	4b65      	ldr	r3, [pc, #404]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b22c:	683a      	ldr	r2, [r7, #0]
 801b22e:	b2d2      	uxtb	r2, r2
 801b230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b232:	4b63      	ldr	r3, [pc, #396]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	f003 030f 	and.w	r3, r3, #15
 801b23a:	683a      	ldr	r2, [r7, #0]
 801b23c:	429a      	cmp	r2, r3
 801b23e:	d001      	beq.n	801b244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801b240:	2301      	movs	r3, #1
 801b242:	e0b8      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	f003 0302 	and.w	r3, r3, #2
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d020      	beq.n	801b292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	f003 0304 	and.w	r3, r3, #4
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d005      	beq.n	801b268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b25c:	4b59      	ldr	r3, [pc, #356]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b25e:	689b      	ldr	r3, [r3, #8]
 801b260:	4a58      	ldr	r2, [pc, #352]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801b266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	f003 0308 	and.w	r3, r3, #8
 801b270:	2b00      	cmp	r3, #0
 801b272:	d005      	beq.n	801b280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801b274:	4b53      	ldr	r3, [pc, #332]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b276:	689b      	ldr	r3, [r3, #8]
 801b278:	4a52      	ldr	r2, [pc, #328]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b27a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801b27e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b280:	4b50      	ldr	r3, [pc, #320]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b282:	689b      	ldr	r3, [r3, #8]
 801b284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	689b      	ldr	r3, [r3, #8]
 801b28c:	494d      	ldr	r1, [pc, #308]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b28e:	4313      	orrs	r3, r2
 801b290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	f003 0301 	and.w	r3, r3, #1
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d044      	beq.n	801b328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	2b01      	cmp	r3, #1
 801b2a4:	d107      	bne.n	801b2b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801b2a6:	4b47      	ldr	r3, [pc, #284]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d119      	bne.n	801b2e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b2b2:	2301      	movs	r3, #1
 801b2b4:	e07f      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	685b      	ldr	r3, [r3, #4]
 801b2ba:	2b02      	cmp	r3, #2
 801b2bc:	d003      	beq.n	801b2c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801b2c2:	2b03      	cmp	r3, #3
 801b2c4:	d107      	bne.n	801b2d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801b2c6:	4b3f      	ldr	r3, [pc, #252]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d109      	bne.n	801b2e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	e06f      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801b2d6:	4b3b      	ldr	r3, [pc, #236]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	f003 0302 	and.w	r3, r3, #2
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d101      	bne.n	801b2e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801b2e2:	2301      	movs	r3, #1
 801b2e4:	e067      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801b2e6:	4b37      	ldr	r3, [pc, #220]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b2e8:	689b      	ldr	r3, [r3, #8]
 801b2ea:	f023 0203 	bic.w	r2, r3, #3
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	685b      	ldr	r3, [r3, #4]
 801b2f2:	4934      	ldr	r1, [pc, #208]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b2f4:	4313      	orrs	r3, r2
 801b2f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801b2f8:	f7fd f804 	bl	8018304 <HAL_GetTick>
 801b2fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b2fe:	e00a      	b.n	801b316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b300:	f7fd f800 	bl	8018304 <HAL_GetTick>
 801b304:	4602      	mov	r2, r0
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	1ad3      	subs	r3, r2, r3
 801b30a:	f241 3288 	movw	r2, #5000	; 0x1388
 801b30e:	4293      	cmp	r3, r2
 801b310:	d901      	bls.n	801b316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801b312:	2303      	movs	r3, #3
 801b314:	e04f      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b316:	4b2b      	ldr	r3, [pc, #172]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b318:	689b      	ldr	r3, [r3, #8]
 801b31a:	f003 020c 	and.w	r2, r3, #12
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	685b      	ldr	r3, [r3, #4]
 801b322:	009b      	lsls	r3, r3, #2
 801b324:	429a      	cmp	r2, r3
 801b326:	d1eb      	bne.n	801b300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801b328:	4b25      	ldr	r3, [pc, #148]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	f003 030f 	and.w	r3, r3, #15
 801b330:	683a      	ldr	r2, [r7, #0]
 801b332:	429a      	cmp	r2, r3
 801b334:	d20c      	bcs.n	801b350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b336:	4b22      	ldr	r3, [pc, #136]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b338:	683a      	ldr	r2, [r7, #0]
 801b33a:	b2d2      	uxtb	r2, r2
 801b33c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801b33e:	4b20      	ldr	r3, [pc, #128]	; (801b3c0 <HAL_RCC_ClockConfig+0x1b8>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	f003 030f 	and.w	r3, r3, #15
 801b346:	683a      	ldr	r2, [r7, #0]
 801b348:	429a      	cmp	r2, r3
 801b34a:	d001      	beq.n	801b350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801b34c:	2301      	movs	r3, #1
 801b34e:	e032      	b.n	801b3b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	f003 0304 	and.w	r3, r3, #4
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d008      	beq.n	801b36e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b35c:	4b19      	ldr	r3, [pc, #100]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b35e:	689b      	ldr	r3, [r3, #8]
 801b360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	68db      	ldr	r3, [r3, #12]
 801b368:	4916      	ldr	r1, [pc, #88]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b36a:	4313      	orrs	r3, r2
 801b36c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f003 0308 	and.w	r3, r3, #8
 801b376:	2b00      	cmp	r3, #0
 801b378:	d009      	beq.n	801b38e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b37a:	4b12      	ldr	r3, [pc, #72]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b37c:	689b      	ldr	r3, [r3, #8]
 801b37e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	691b      	ldr	r3, [r3, #16]
 801b386:	00db      	lsls	r3, r3, #3
 801b388:	490e      	ldr	r1, [pc, #56]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b38a:	4313      	orrs	r3, r2
 801b38c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b38e:	f000 fb57 	bl	801ba40 <HAL_RCC_GetSysClockFreq>
 801b392:	4602      	mov	r2, r0
 801b394:	4b0b      	ldr	r3, [pc, #44]	; (801b3c4 <HAL_RCC_ClockConfig+0x1bc>)
 801b396:	689b      	ldr	r3, [r3, #8]
 801b398:	091b      	lsrs	r3, r3, #4
 801b39a:	f003 030f 	and.w	r3, r3, #15
 801b39e:	490a      	ldr	r1, [pc, #40]	; (801b3c8 <HAL_RCC_ClockConfig+0x1c0>)
 801b3a0:	5ccb      	ldrb	r3, [r1, r3]
 801b3a2:	fa22 f303 	lsr.w	r3, r2, r3
 801b3a6:	4a09      	ldr	r2, [pc, #36]	; (801b3cc <HAL_RCC_ClockConfig+0x1c4>)
 801b3a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801b3aa:	4b09      	ldr	r3, [pc, #36]	; (801b3d0 <HAL_RCC_ClockConfig+0x1c8>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7fc ff64 	bl	801827c <HAL_InitTick>

  return HAL_OK;
 801b3b4:	2300      	movs	r3, #0
}
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	3710      	adds	r7, #16
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	bd80      	pop	{r7, pc}
 801b3be:	bf00      	nop
 801b3c0:	40023c00 	.word	0x40023c00
 801b3c4:	40023800 	.word	0x40023800
 801b3c8:	08002350 	.word	0x08002350
 801b3cc:	20000588 	.word	0x20000588
 801b3d0:	2000058c 	.word	0x2000058c

0801b3d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b3d8:	4b03      	ldr	r3, [pc, #12]	; (801b3e8 <HAL_RCC_GetHCLKFreq+0x14>)
 801b3da:	681b      	ldr	r3, [r3, #0]
}
 801b3dc:	4618      	mov	r0, r3
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e4:	4770      	bx	lr
 801b3e6:	bf00      	nop
 801b3e8:	20000588 	.word	0x20000588

0801b3ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b08c      	sub	sp, #48	; 0x30
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 801b400:	2300      	movs	r3, #0
 801b402:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801b404:	2300      	movs	r3, #0
 801b406:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 801b408:	2300      	movs	r3, #0
 801b40a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 801b40c:	2300      	movs	r3, #0
 801b40e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 801b410:	2300      	movs	r3, #0
 801b412:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 801b414:	2300      	movs	r3, #0
 801b416:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	f003 0301 	and.w	r3, r3, #1
 801b420:	2b00      	cmp	r3, #0
 801b422:	d010      	beq.n	801b446 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801b424:	4b6f      	ldr	r3, [pc, #444]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b42a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b432:	496c      	ldr	r1, [pc, #432]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b434:	4313      	orrs	r3, r2
 801b436:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d101      	bne.n	801b446 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 801b442:	2301      	movs	r3, #1
 801b444:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	f003 0302 	and.w	r3, r3, #2
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d010      	beq.n	801b474 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 801b452:	4b64      	ldr	r3, [pc, #400]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b458:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b460:	4960      	ldr	r1, [pc, #384]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b462:	4313      	orrs	r3, r2
 801b464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d101      	bne.n	801b474 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 801b470:	2301      	movs	r3, #1
 801b472:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f003 0304 	and.w	r3, r3, #4
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d017      	beq.n	801b4b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b480:	4b58      	ldr	r3, [pc, #352]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b48e:	4955      	ldr	r1, [pc, #340]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b490:	4313      	orrs	r3, r2
 801b492:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b49e:	d101      	bne.n	801b4a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d101      	bne.n	801b4b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 801b4ac:	2301      	movs	r3, #1
 801b4ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	f003 0308 	and.w	r3, r3, #8
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d017      	beq.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801b4bc:	4b49      	ldr	r3, [pc, #292]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b4c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4ca:	4946      	ldr	r1, [pc, #280]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b4cc:	4313      	orrs	r3, r2
 801b4ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b4da:	d101      	bne.n	801b4e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 801b4dc:	2301      	movs	r3, #1
 801b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d101      	bne.n	801b4ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 801b4e8:	2301      	movs	r3, #1
 801b4ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f003 0320 	and.w	r3, r3, #32
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	f000 808a 	beq.w	801b60e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	60bb      	str	r3, [r7, #8]
 801b4fe:	4b39      	ldr	r3, [pc, #228]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b502:	4a38      	ldr	r2, [pc, #224]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b508:	6413      	str	r3, [r2, #64]	; 0x40
 801b50a:	4b36      	ldr	r3, [pc, #216]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b512:	60bb      	str	r3, [r7, #8]
 801b514:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801b516:	4b34      	ldr	r3, [pc, #208]	; (801b5e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	4a33      	ldr	r2, [pc, #204]	; (801b5e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b51c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b520:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b522:	f7fc feef 	bl	8018304 <HAL_GetTick>
 801b526:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b528:	e008      	b.n	801b53c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b52a:	f7fc feeb 	bl	8018304 <HAL_GetTick>
 801b52e:	4602      	mov	r2, r0
 801b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b532:	1ad3      	subs	r3, r2, r3
 801b534:	2b02      	cmp	r3, #2
 801b536:	d901      	bls.n	801b53c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 801b538:	2303      	movs	r3, #3
 801b53a:	e278      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801b53c:	4b2a      	ldr	r3, [pc, #168]	; (801b5e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b544:	2b00      	cmp	r3, #0
 801b546:	d0f0      	beq.n	801b52a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801b548:	4b26      	ldr	r3, [pc, #152]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b54c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b550:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801b552:	6a3b      	ldr	r3, [r7, #32]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d02f      	beq.n	801b5b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b55c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b560:	6a3a      	ldr	r2, [r7, #32]
 801b562:	429a      	cmp	r2, r3
 801b564:	d028      	beq.n	801b5b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b566:	4b1f      	ldr	r3, [pc, #124]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b56a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b56e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b570:	4b1e      	ldr	r3, [pc, #120]	; (801b5ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b572:	2201      	movs	r2, #1
 801b574:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b576:	4b1d      	ldr	r3, [pc, #116]	; (801b5ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 801b578:	2200      	movs	r2, #0
 801b57a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801b57c:	4a19      	ldr	r2, [pc, #100]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b57e:	6a3b      	ldr	r3, [r7, #32]
 801b580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801b582:	4b18      	ldr	r3, [pc, #96]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b586:	f003 0301 	and.w	r3, r3, #1
 801b58a:	2b01      	cmp	r3, #1
 801b58c:	d114      	bne.n	801b5b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801b58e:	f7fc feb9 	bl	8018304 <HAL_GetTick>
 801b592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b594:	e00a      	b.n	801b5ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b596:	f7fc feb5 	bl	8018304 <HAL_GetTick>
 801b59a:	4602      	mov	r2, r0
 801b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b59e:	1ad3      	subs	r3, r2, r3
 801b5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 801b5a4:	4293      	cmp	r3, r2
 801b5a6:	d901      	bls.n	801b5ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 801b5a8:	2303      	movs	r3, #3
 801b5aa:	e240      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801b5ac:	4b0d      	ldr	r3, [pc, #52]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5b0:	f003 0302 	and.w	r3, r3, #2
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d0ee      	beq.n	801b596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b5c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b5c4:	d114      	bne.n	801b5f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801b5c6:	4b07      	ldr	r3, [pc, #28]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5c8:	689b      	ldr	r3, [r3, #8]
 801b5ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b5d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b5da:	4902      	ldr	r1, [pc, #8]	; (801b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801b5dc:	4313      	orrs	r3, r2
 801b5de:	608b      	str	r3, [r1, #8]
 801b5e0:	e00c      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 801b5e2:	bf00      	nop
 801b5e4:	40023800 	.word	0x40023800
 801b5e8:	40007000 	.word	0x40007000
 801b5ec:	42470e40 	.word	0x42470e40
 801b5f0:	4b4a      	ldr	r3, [pc, #296]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b5f2:	689b      	ldr	r3, [r3, #8]
 801b5f4:	4a49      	ldr	r2, [pc, #292]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b5f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801b5fa:	6093      	str	r3, [r2, #8]
 801b5fc:	4b47      	ldr	r3, [pc, #284]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b5fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b608:	4944      	ldr	r1, [pc, #272]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b60a:	4313      	orrs	r3, r2
 801b60c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	f003 0310 	and.w	r3, r3, #16
 801b616:	2b00      	cmp	r3, #0
 801b618:	d004      	beq.n	801b624 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b620:	4b3f      	ldr	r3, [pc, #252]	; (801b720 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801b622:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d00a      	beq.n	801b646 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 801b630:	4b3a      	ldr	r3, [pc, #232]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b636:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b63e:	4937      	ldr	r1, [pc, #220]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b640:	4313      	orrs	r3, r2
 801b642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d00a      	beq.n	801b668 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801b652:	4b32      	ldr	r3, [pc, #200]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b658:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b660:	492e      	ldr	r1, [pc, #184]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b662:	4313      	orrs	r3, r2
 801b664:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b670:	2b00      	cmp	r3, #0
 801b672:	d011      	beq.n	801b698 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801b674:	4b29      	ldr	r3, [pc, #164]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b67a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b682:	4926      	ldr	r1, [pc, #152]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b684:	4313      	orrs	r3, r2
 801b686:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b68e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b692:	d101      	bne.n	801b698 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 801b694:	2301      	movs	r3, #1
 801b696:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d00a      	beq.n	801b6ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801b6a4:	4b1d      	ldr	r3, [pc, #116]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b6aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6b2:	491a      	ldr	r1, [pc, #104]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6b4:	4313      	orrs	r3, r2
 801b6b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d011      	beq.n	801b6ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801b6c6:	4b15      	ldr	r3, [pc, #84]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b6cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6d4:	4911      	ldr	r1, [pc, #68]	; (801b71c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801b6d6:	4313      	orrs	r3, r2
 801b6d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b6e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b6e4:	d101      	bne.n	801b6ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801b6e6:	2301      	movs	r3, #1
 801b6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 801b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6ec:	2b01      	cmp	r3, #1
 801b6ee:	d005      	beq.n	801b6fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b6f8:	f040 80ff 	bne.w	801b8fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801b6fc:	4b09      	ldr	r3, [pc, #36]	; (801b724 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b6fe:	2200      	movs	r2, #0
 801b700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b702:	f7fc fdff 	bl	8018304 <HAL_GetTick>
 801b706:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b708:	e00e      	b.n	801b728 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b70a:	f7fc fdfb 	bl	8018304 <HAL_GetTick>
 801b70e:	4602      	mov	r2, r0
 801b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b712:	1ad3      	subs	r3, r2, r3
 801b714:	2b02      	cmp	r3, #2
 801b716:	d907      	bls.n	801b728 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b718:	2303      	movs	r3, #3
 801b71a:	e188      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b71c:	40023800 	.word	0x40023800
 801b720:	424711e0 	.word	0x424711e0
 801b724:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801b728:	4b7e      	ldr	r3, [pc, #504]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b730:	2b00      	cmp	r3, #0
 801b732:	d1ea      	bne.n	801b70a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f003 0301 	and.w	r3, r3, #1
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d003      	beq.n	801b748 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b744:	2b00      	cmp	r3, #0
 801b746:	d009      	beq.n	801b75c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 801b750:	2b00      	cmp	r3, #0
 801b752:	d028      	beq.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d124      	bne.n	801b7a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b75c:	4b71      	ldr	r3, [pc, #452]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b762:	0c1b      	lsrs	r3, r3, #16
 801b764:	f003 0303 	and.w	r3, r3, #3
 801b768:	3301      	adds	r3, #1
 801b76a:	005b      	lsls	r3, r3, #1
 801b76c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801b76e:	4b6d      	ldr	r3, [pc, #436]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b774:	0e1b      	lsrs	r3, r3, #24
 801b776:	f003 030f 	and.w	r3, r3, #15
 801b77a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	685a      	ldr	r2, [r3, #4]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	689b      	ldr	r3, [r3, #8]
 801b784:	019b      	lsls	r3, r3, #6
 801b786:	431a      	orrs	r2, r3
 801b788:	69fb      	ldr	r3, [r7, #28]
 801b78a:	085b      	lsrs	r3, r3, #1
 801b78c:	3b01      	subs	r3, #1
 801b78e:	041b      	lsls	r3, r3, #16
 801b790:	431a      	orrs	r2, r3
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	061b      	lsls	r3, r3, #24
 801b796:	431a      	orrs	r2, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	695b      	ldr	r3, [r3, #20]
 801b79c:	071b      	lsls	r3, r3, #28
 801b79e:	4961      	ldr	r1, [pc, #388]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7a0:	4313      	orrs	r3, r2
 801b7a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	f003 0304 	and.w	r3, r3, #4
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d004      	beq.n	801b7bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b7ba:	d00a      	beq.n	801b7d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d035      	beq.n	801b834 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801b7d0:	d130      	bne.n	801b834 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b7d2:	4b54      	ldr	r3, [pc, #336]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b7d8:	0c1b      	lsrs	r3, r3, #16
 801b7da:	f003 0303 	and.w	r3, r3, #3
 801b7de:	3301      	adds	r3, #1
 801b7e0:	005b      	lsls	r3, r3, #1
 801b7e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b7e4:	4b4f      	ldr	r3, [pc, #316]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b7ea:	0f1b      	lsrs	r3, r3, #28
 801b7ec:	f003 0307 	and.w	r3, r3, #7
 801b7f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	685a      	ldr	r2, [r3, #4]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	689b      	ldr	r3, [r3, #8]
 801b7fa:	019b      	lsls	r3, r3, #6
 801b7fc:	431a      	orrs	r2, r3
 801b7fe:	69fb      	ldr	r3, [r7, #28]
 801b800:	085b      	lsrs	r3, r3, #1
 801b802:	3b01      	subs	r3, #1
 801b804:	041b      	lsls	r3, r3, #16
 801b806:	431a      	orrs	r2, r3
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	691b      	ldr	r3, [r3, #16]
 801b80c:	061b      	lsls	r3, r3, #24
 801b80e:	431a      	orrs	r2, r3
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	071b      	lsls	r3, r3, #28
 801b814:	4943      	ldr	r1, [pc, #268]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b816:	4313      	orrs	r3, r2
 801b818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801b81c:	4b41      	ldr	r3, [pc, #260]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b822:	f023 021f 	bic.w	r2, r3, #31
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b82a:	3b01      	subs	r3, #1
 801b82c:	493d      	ldr	r1, [pc, #244]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b82e:	4313      	orrs	r3, r2
 801b830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d029      	beq.n	801b894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b848:	d124      	bne.n	801b894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801b84a:	4b36      	ldr	r3, [pc, #216]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b850:	0c1b      	lsrs	r3, r3, #16
 801b852:	f003 0303 	and.w	r3, r3, #3
 801b856:	3301      	adds	r3, #1
 801b858:	005b      	lsls	r3, r3, #1
 801b85a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801b85c:	4b31      	ldr	r3, [pc, #196]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b862:	0f1b      	lsrs	r3, r3, #28
 801b864:	f003 0307 	and.w	r3, r3, #7
 801b868:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	685a      	ldr	r2, [r3, #4]
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	689b      	ldr	r3, [r3, #8]
 801b872:	019b      	lsls	r3, r3, #6
 801b874:	431a      	orrs	r2, r3
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	68db      	ldr	r3, [r3, #12]
 801b87a:	085b      	lsrs	r3, r3, #1
 801b87c:	3b01      	subs	r3, #1
 801b87e:	041b      	lsls	r3, r3, #16
 801b880:	431a      	orrs	r2, r3
 801b882:	69bb      	ldr	r3, [r7, #24]
 801b884:	061b      	lsls	r3, r3, #24
 801b886:	431a      	orrs	r2, r3
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	071b      	lsls	r3, r3, #28
 801b88c:	4925      	ldr	r1, [pc, #148]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b88e:	4313      	orrs	r3, r2
 801b890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d016      	beq.n	801b8ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	685a      	ldr	r2, [r3, #4]
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	689b      	ldr	r3, [r3, #8]
 801b8a8:	019b      	lsls	r3, r3, #6
 801b8aa:	431a      	orrs	r2, r3
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	68db      	ldr	r3, [r3, #12]
 801b8b0:	085b      	lsrs	r3, r3, #1
 801b8b2:	3b01      	subs	r3, #1
 801b8b4:	041b      	lsls	r3, r3, #16
 801b8b6:	431a      	orrs	r2, r3
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	691b      	ldr	r3, [r3, #16]
 801b8bc:	061b      	lsls	r3, r3, #24
 801b8be:	431a      	orrs	r2, r3
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	695b      	ldr	r3, [r3, #20]
 801b8c4:	071b      	lsls	r3, r3, #28
 801b8c6:	4917      	ldr	r1, [pc, #92]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8c8:	4313      	orrs	r3, r2
 801b8ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801b8ce:	4b16      	ldr	r3, [pc, #88]	; (801b928 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 801b8d0:	2201      	movs	r2, #1
 801b8d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b8d4:	f7fc fd16 	bl	8018304 <HAL_GetTick>
 801b8d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b8da:	e008      	b.n	801b8ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801b8dc:	f7fc fd12 	bl	8018304 <HAL_GetTick>
 801b8e0:	4602      	mov	r2, r0
 801b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e4:	1ad3      	subs	r3, r2, r3
 801b8e6:	2b02      	cmp	r3, #2
 801b8e8:	d901      	bls.n	801b8ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b8ea:	2303      	movs	r3, #3
 801b8ec:	e09f      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801b8ee:	4b0d      	ldr	r3, [pc, #52]	; (801b924 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d0f0      	beq.n	801b8dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 801b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8fc:	2b01      	cmp	r3, #1
 801b8fe:	f040 8095 	bne.w	801ba2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801b902:	4b0a      	ldr	r3, [pc, #40]	; (801b92c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 801b904:	2200      	movs	r2, #0
 801b906:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801b908:	f7fc fcfc 	bl	8018304 <HAL_GetTick>
 801b90c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b90e:	e00f      	b.n	801b930 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801b910:	f7fc fcf8 	bl	8018304 <HAL_GetTick>
 801b914:	4602      	mov	r2, r0
 801b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b918:	1ad3      	subs	r3, r2, r3
 801b91a:	2b02      	cmp	r3, #2
 801b91c:	d908      	bls.n	801b930 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801b91e:	2303      	movs	r3, #3
 801b920:	e085      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 801b922:	bf00      	nop
 801b924:	40023800 	.word	0x40023800
 801b928:	42470068 	.word	0x42470068
 801b92c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801b930:	4b41      	ldr	r3, [pc, #260]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801b938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b93c:	d0e8      	beq.n	801b910 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	f003 0304 	and.w	r3, r3, #4
 801b946:	2b00      	cmp	r3, #0
 801b948:	d003      	beq.n	801b952 <HAL_RCCEx_PeriphCLKConfig+0x566>
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d009      	beq.n	801b966 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d02b      	beq.n	801b9b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b962:	2b00      	cmp	r3, #0
 801b964:	d127      	bne.n	801b9b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 801b966:	4b34      	ldr	r3, [pc, #208]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b96c:	0c1b      	lsrs	r3, r3, #16
 801b96e:	f003 0303 	and.w	r3, r3, #3
 801b972:	3301      	adds	r3, #1
 801b974:	005b      	lsls	r3, r3, #1
 801b976:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	699a      	ldr	r2, [r3, #24]
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	69db      	ldr	r3, [r3, #28]
 801b980:	019b      	lsls	r3, r3, #6
 801b982:	431a      	orrs	r2, r3
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	085b      	lsrs	r3, r3, #1
 801b988:	3b01      	subs	r3, #1
 801b98a:	041b      	lsls	r3, r3, #16
 801b98c:	431a      	orrs	r2, r3
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b992:	061b      	lsls	r3, r3, #24
 801b994:	4928      	ldr	r1, [pc, #160]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b996:	4313      	orrs	r3, r2
 801b998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801b99c:	4b26      	ldr	r3, [pc, #152]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9aa:	3b01      	subs	r3, #1
 801b9ac:	021b      	lsls	r3, r3, #8
 801b9ae:	4922      	ldr	r1, [pc, #136]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b9b0:	4313      	orrs	r3, r2
 801b9b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d01d      	beq.n	801b9fe <HAL_RCCEx_PeriphCLKConfig+0x612>
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b9c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801b9ca:	d118      	bne.n	801b9fe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801b9cc:	4b1a      	ldr	r3, [pc, #104]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9d2:	0e1b      	lsrs	r3, r3, #24
 801b9d4:	f003 030f 	and.w	r3, r3, #15
 801b9d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	699a      	ldr	r2, [r3, #24]
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	69db      	ldr	r3, [r3, #28]
 801b9e2:	019b      	lsls	r3, r3, #6
 801b9e4:	431a      	orrs	r2, r3
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6a1b      	ldr	r3, [r3, #32]
 801b9ea:	085b      	lsrs	r3, r3, #1
 801b9ec:	3b01      	subs	r3, #1
 801b9ee:	041b      	lsls	r3, r3, #16
 801b9f0:	431a      	orrs	r2, r3
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	061b      	lsls	r3, r3, #24
 801b9f6:	4910      	ldr	r1, [pc, #64]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801b9f8:	4313      	orrs	r3, r2
 801b9fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801b9fe:	4b0f      	ldr	r3, [pc, #60]	; (801ba3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 801ba00:	2201      	movs	r2, #1
 801ba02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801ba04:	f7fc fc7e 	bl	8018304 <HAL_GetTick>
 801ba08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801ba0a:	e008      	b.n	801ba1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 801ba0c:	f7fc fc7a 	bl	8018304 <HAL_GetTick>
 801ba10:	4602      	mov	r2, r0
 801ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba14:	1ad3      	subs	r3, r2, r3
 801ba16:	2b02      	cmp	r3, #2
 801ba18:	d901      	bls.n	801ba1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801ba1a:	2303      	movs	r3, #3
 801ba1c:	e007      	b.n	801ba2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801ba1e:	4b06      	ldr	r3, [pc, #24]	; (801ba38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801ba26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ba2a:	d1ef      	bne.n	801ba0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 801ba2c:	2300      	movs	r3, #0
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	3730      	adds	r7, #48	; 0x30
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd80      	pop	{r7, pc}
 801ba36:	bf00      	nop
 801ba38:	40023800 	.word	0x40023800
 801ba3c:	42470070 	.word	0x42470070

0801ba40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ba40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba44:	b087      	sub	sp, #28
 801ba46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 801ba48:	2600      	movs	r6, #0
 801ba4a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 801ba4c:	2600      	movs	r6, #0
 801ba4e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 801ba50:	2600      	movs	r6, #0
 801ba52:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 801ba54:	2600      	movs	r6, #0
 801ba56:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801ba58:	2600      	movs	r6, #0
 801ba5a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ba5c:	4ea3      	ldr	r6, [pc, #652]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801ba5e:	68b6      	ldr	r6, [r6, #8]
 801ba60:	f006 060c 	and.w	r6, r6, #12
 801ba64:	2e0c      	cmp	r6, #12
 801ba66:	f200 8137 	bhi.w	801bcd8 <HAL_RCC_GetSysClockFreq+0x298>
 801ba6a:	f20f 0c08 	addw	ip, pc, #8
 801ba6e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 801ba72:	bf00      	nop
 801ba74:	0801baa9 	.word	0x0801baa9
 801ba78:	0801bcd9 	.word	0x0801bcd9
 801ba7c:	0801bcd9 	.word	0x0801bcd9
 801ba80:	0801bcd9 	.word	0x0801bcd9
 801ba84:	0801baaf 	.word	0x0801baaf
 801ba88:	0801bcd9 	.word	0x0801bcd9
 801ba8c:	0801bcd9 	.word	0x0801bcd9
 801ba90:	0801bcd9 	.word	0x0801bcd9
 801ba94:	0801bab5 	.word	0x0801bab5
 801ba98:	0801bcd9 	.word	0x0801bcd9
 801ba9c:	0801bcd9 	.word	0x0801bcd9
 801baa0:	0801bcd9 	.word	0x0801bcd9
 801baa4:	0801bbcb 	.word	0x0801bbcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801baa8:	4b91      	ldr	r3, [pc, #580]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801baaa:	613b      	str	r3, [r7, #16]
       break;
 801baac:	e117      	b.n	801bcde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801baae:	4b91      	ldr	r3, [pc, #580]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bab0:	613b      	str	r3, [r7, #16]
      break;
 801bab2:	e114      	b.n	801bcde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bab4:	4b8d      	ldr	r3, [pc, #564]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bab6:	685b      	ldr	r3, [r3, #4]
 801bab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801babc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801babe:	4b8b      	ldr	r3, [pc, #556]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bac0:	685b      	ldr	r3, [r3, #4]
 801bac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d024      	beq.n	801bb14 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801baca:	4b88      	ldr	r3, [pc, #544]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	099b      	lsrs	r3, r3, #6
 801bad0:	461a      	mov	r2, r3
 801bad2:	f04f 0300 	mov.w	r3, #0
 801bad6:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bada:	f04f 0500 	mov.w	r5, #0
 801bade:	ea02 0004 	and.w	r0, r2, r4
 801bae2:	ea03 0105 	and.w	r1, r3, r5
 801bae6:	4b83      	ldr	r3, [pc, #524]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bae8:	fb03 f201 	mul.w	r2, r3, r1
 801baec:	2300      	movs	r3, #0
 801baee:	fb03 f300 	mul.w	r3, r3, r0
 801baf2:	4413      	add	r3, r2
 801baf4:	4a7f      	ldr	r2, [pc, #508]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801baf6:	fba0 0102 	umull	r0, r1, r0, r2
 801bafa:	440b      	add	r3, r1
 801bafc:	4619      	mov	r1, r3
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	461a      	mov	r2, r3
 801bb02:	f04f 0300 	mov.w	r3, #0
 801bb06:	f7f0 faa3 	bl	800c050 <__aeabi_uldivmod>
 801bb0a:	4602      	mov	r2, r0
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	4613      	mov	r3, r2
 801bb10:	617b      	str	r3, [r7, #20]
 801bb12:	e04c      	b.n	801bbae <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bb14:	4b75      	ldr	r3, [pc, #468]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	099b      	lsrs	r3, r3, #6
 801bb1a:	461a      	mov	r2, r3
 801bb1c:	f04f 0300 	mov.w	r3, #0
 801bb20:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bb24:	f04f 0100 	mov.w	r1, #0
 801bb28:	ea02 0800 	and.w	r8, r2, r0
 801bb2c:	ea03 0901 	and.w	r9, r3, r1
 801bb30:	4640      	mov	r0, r8
 801bb32:	4649      	mov	r1, r9
 801bb34:	f04f 0200 	mov.w	r2, #0
 801bb38:	f04f 0300 	mov.w	r3, #0
 801bb3c:	014b      	lsls	r3, r1, #5
 801bb3e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bb42:	0142      	lsls	r2, r0, #5
 801bb44:	4610      	mov	r0, r2
 801bb46:	4619      	mov	r1, r3
 801bb48:	ebb0 0008 	subs.w	r0, r0, r8
 801bb4c:	eb61 0109 	sbc.w	r1, r1, r9
 801bb50:	f04f 0200 	mov.w	r2, #0
 801bb54:	f04f 0300 	mov.w	r3, #0
 801bb58:	018b      	lsls	r3, r1, #6
 801bb5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bb5e:	0182      	lsls	r2, r0, #6
 801bb60:	1a12      	subs	r2, r2, r0
 801bb62:	eb63 0301 	sbc.w	r3, r3, r1
 801bb66:	f04f 0000 	mov.w	r0, #0
 801bb6a:	f04f 0100 	mov.w	r1, #0
 801bb6e:	00d9      	lsls	r1, r3, #3
 801bb70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bb74:	00d0      	lsls	r0, r2, #3
 801bb76:	4602      	mov	r2, r0
 801bb78:	460b      	mov	r3, r1
 801bb7a:	eb12 0208 	adds.w	r2, r2, r8
 801bb7e:	eb43 0309 	adc.w	r3, r3, r9
 801bb82:	f04f 0000 	mov.w	r0, #0
 801bb86:	f04f 0100 	mov.w	r1, #0
 801bb8a:	0299      	lsls	r1, r3, #10
 801bb8c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bb90:	0290      	lsls	r0, r2, #10
 801bb92:	4602      	mov	r2, r0
 801bb94:	460b      	mov	r3, r1
 801bb96:	4610      	mov	r0, r2
 801bb98:	4619      	mov	r1, r3
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	461a      	mov	r2, r3
 801bb9e:	f04f 0300 	mov.w	r3, #0
 801bba2:	f7f0 fa55 	bl	800c050 <__aeabi_uldivmod>
 801bba6:	4602      	mov	r2, r0
 801bba8:	460b      	mov	r3, r1
 801bbaa:	4613      	mov	r3, r2
 801bbac:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801bbae:	4b4f      	ldr	r3, [pc, #316]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bbb0:	685b      	ldr	r3, [r3, #4]
 801bbb2:	0c1b      	lsrs	r3, r3, #16
 801bbb4:	f003 0303 	and.w	r3, r3, #3
 801bbb8:	3301      	adds	r3, #1
 801bbba:	005b      	lsls	r3, r3, #1
 801bbbc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 801bbbe:	697a      	ldr	r2, [r7, #20]
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbc6:	613b      	str	r3, [r7, #16]
      break;
 801bbc8:	e089      	b.n	801bcde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801bbca:	4948      	ldr	r1, [pc, #288]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bbcc:	6849      	ldr	r1, [r1, #4]
 801bbce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801bbd2:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801bbd4:	4945      	ldr	r1, [pc, #276]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bbd6:	6849      	ldr	r1, [r1, #4]
 801bbd8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 801bbdc:	2900      	cmp	r1, #0
 801bbde:	d024      	beq.n	801bc2a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bbe0:	4942      	ldr	r1, [pc, #264]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bbe2:	6849      	ldr	r1, [r1, #4]
 801bbe4:	0989      	lsrs	r1, r1, #6
 801bbe6:	4608      	mov	r0, r1
 801bbe8:	f04f 0100 	mov.w	r1, #0
 801bbec:	f240 14ff 	movw	r4, #511	; 0x1ff
 801bbf0:	f04f 0500 	mov.w	r5, #0
 801bbf4:	ea00 0204 	and.w	r2, r0, r4
 801bbf8:	ea01 0305 	and.w	r3, r1, r5
 801bbfc:	493d      	ldr	r1, [pc, #244]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bbfe:	fb01 f003 	mul.w	r0, r1, r3
 801bc02:	2100      	movs	r1, #0
 801bc04:	fb01 f102 	mul.w	r1, r1, r2
 801bc08:	1844      	adds	r4, r0, r1
 801bc0a:	493a      	ldr	r1, [pc, #232]	; (801bcf4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 801bc0c:	fba2 0101 	umull	r0, r1, r2, r1
 801bc10:	1863      	adds	r3, r4, r1
 801bc12:	4619      	mov	r1, r3
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	461a      	mov	r2, r3
 801bc18:	f04f 0300 	mov.w	r3, #0
 801bc1c:	f7f0 fa18 	bl	800c050 <__aeabi_uldivmod>
 801bc20:	4602      	mov	r2, r0
 801bc22:	460b      	mov	r3, r1
 801bc24:	4613      	mov	r3, r2
 801bc26:	617b      	str	r3, [r7, #20]
 801bc28:	e04a      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801bc2a:	4b30      	ldr	r3, [pc, #192]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bc2c:	685b      	ldr	r3, [r3, #4]
 801bc2e:	099b      	lsrs	r3, r3, #6
 801bc30:	461a      	mov	r2, r3
 801bc32:	f04f 0300 	mov.w	r3, #0
 801bc36:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bc3a:	f04f 0100 	mov.w	r1, #0
 801bc3e:	ea02 0400 	and.w	r4, r2, r0
 801bc42:	ea03 0501 	and.w	r5, r3, r1
 801bc46:	4620      	mov	r0, r4
 801bc48:	4629      	mov	r1, r5
 801bc4a:	f04f 0200 	mov.w	r2, #0
 801bc4e:	f04f 0300 	mov.w	r3, #0
 801bc52:	014b      	lsls	r3, r1, #5
 801bc54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801bc58:	0142      	lsls	r2, r0, #5
 801bc5a:	4610      	mov	r0, r2
 801bc5c:	4619      	mov	r1, r3
 801bc5e:	1b00      	subs	r0, r0, r4
 801bc60:	eb61 0105 	sbc.w	r1, r1, r5
 801bc64:	f04f 0200 	mov.w	r2, #0
 801bc68:	f04f 0300 	mov.w	r3, #0
 801bc6c:	018b      	lsls	r3, r1, #6
 801bc6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801bc72:	0182      	lsls	r2, r0, #6
 801bc74:	1a12      	subs	r2, r2, r0
 801bc76:	eb63 0301 	sbc.w	r3, r3, r1
 801bc7a:	f04f 0000 	mov.w	r0, #0
 801bc7e:	f04f 0100 	mov.w	r1, #0
 801bc82:	00d9      	lsls	r1, r3, #3
 801bc84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bc88:	00d0      	lsls	r0, r2, #3
 801bc8a:	4602      	mov	r2, r0
 801bc8c:	460b      	mov	r3, r1
 801bc8e:	1912      	adds	r2, r2, r4
 801bc90:	eb45 0303 	adc.w	r3, r5, r3
 801bc94:	f04f 0000 	mov.w	r0, #0
 801bc98:	f04f 0100 	mov.w	r1, #0
 801bc9c:	0299      	lsls	r1, r3, #10
 801bc9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801bca2:	0290      	lsls	r0, r2, #10
 801bca4:	4602      	mov	r2, r0
 801bca6:	460b      	mov	r3, r1
 801bca8:	4610      	mov	r0, r2
 801bcaa:	4619      	mov	r1, r3
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	461a      	mov	r2, r3
 801bcb0:	f04f 0300 	mov.w	r3, #0
 801bcb4:	f7f0 f9cc 	bl	800c050 <__aeabi_uldivmod>
 801bcb8:	4602      	mov	r2, r0
 801bcba:	460b      	mov	r3, r1
 801bcbc:	4613      	mov	r3, r2
 801bcbe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 801bcc0:	4b0a      	ldr	r3, [pc, #40]	; (801bcec <HAL_RCC_GetSysClockFreq+0x2ac>)
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	0f1b      	lsrs	r3, r3, #28
 801bcc6:	f003 0307 	and.w	r3, r3, #7
 801bcca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 801bccc:	697a      	ldr	r2, [r7, #20]
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	fbb2 f3f3 	udiv	r3, r2, r3
 801bcd4:	613b      	str	r3, [r7, #16]
      break;
 801bcd6:	e002      	b.n	801bcde <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801bcd8:	4b05      	ldr	r3, [pc, #20]	; (801bcf0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 801bcda:	613b      	str	r3, [r7, #16]
      break;
 801bcdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 801bcde:	693b      	ldr	r3, [r7, #16]
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	371c      	adds	r7, #28
 801bce4:	46bd      	mov	sp, r7
 801bce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bcea:	bf00      	nop
 801bcec:	40023800 	.word	0x40023800
 801bcf0:	00f42400 	.word	0x00f42400
 801bcf4:	017d7840 	.word	0x017d7840

0801bcf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bcf8:	b580      	push	{r7, lr}
 801bcfa:	b086      	sub	sp, #24
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d101      	bne.n	801bd0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801bd06:	2301      	movs	r3, #1
 801bd08:	e28d      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	f003 0301 	and.w	r3, r3, #1
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	f000 8083 	beq.w	801be1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bd18:	4b94      	ldr	r3, [pc, #592]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd1a:	689b      	ldr	r3, [r3, #8]
 801bd1c:	f003 030c 	and.w	r3, r3, #12
 801bd20:	2b04      	cmp	r3, #4
 801bd22:	d019      	beq.n	801bd58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bd24:	4b91      	ldr	r3, [pc, #580]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd26:	689b      	ldr	r3, [r3, #8]
 801bd28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 801bd2c:	2b08      	cmp	r3, #8
 801bd2e:	d106      	bne.n	801bd3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bd30:	4b8e      	ldr	r3, [pc, #568]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd32:	685b      	ldr	r3, [r3, #4]
 801bd34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bd3c:	d00c      	beq.n	801bd58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bd3e:	4b8b      	ldr	r3, [pc, #556]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd40:	689b      	ldr	r3, [r3, #8]
 801bd42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801bd46:	2b0c      	cmp	r3, #12
 801bd48:	d112      	bne.n	801bd70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801bd4a:	4b88      	ldr	r3, [pc, #544]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd4c:	685b      	ldr	r3, [r3, #4]
 801bd4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bd52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bd56:	d10b      	bne.n	801bd70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bd58:	4b84      	ldr	r3, [pc, #528]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d05b      	beq.n	801be1c <HAL_RCC_OscConfig+0x124>
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	685b      	ldr	r3, [r3, #4]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d157      	bne.n	801be1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	e25a      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	685b      	ldr	r3, [r3, #4]
 801bd74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bd78:	d106      	bne.n	801bd88 <HAL_RCC_OscConfig+0x90>
 801bd7a:	4b7c      	ldr	r3, [pc, #496]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	4a7b      	ldr	r2, [pc, #492]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd84:	6013      	str	r3, [r2, #0]
 801bd86:	e01d      	b.n	801bdc4 <HAL_RCC_OscConfig+0xcc>
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	685b      	ldr	r3, [r3, #4]
 801bd8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bd90:	d10c      	bne.n	801bdac <HAL_RCC_OscConfig+0xb4>
 801bd92:	4b76      	ldr	r3, [pc, #472]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	4a75      	ldr	r2, [pc, #468]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bd98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bd9c:	6013      	str	r3, [r2, #0]
 801bd9e:	4b73      	ldr	r3, [pc, #460]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	4a72      	ldr	r2, [pc, #456]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bda4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bda8:	6013      	str	r3, [r2, #0]
 801bdaa:	e00b      	b.n	801bdc4 <HAL_RCC_OscConfig+0xcc>
 801bdac:	4b6f      	ldr	r3, [pc, #444]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	4a6e      	ldr	r2, [pc, #440]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bdb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bdb6:	6013      	str	r3, [r2, #0]
 801bdb8:	4b6c      	ldr	r3, [pc, #432]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	4a6b      	ldr	r2, [pc, #428]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bdbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bdc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	685b      	ldr	r3, [r3, #4]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d013      	beq.n	801bdf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bdcc:	f7fc fa9a 	bl	8018304 <HAL_GetTick>
 801bdd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bdd2:	e008      	b.n	801bde6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bdd4:	f7fc fa96 	bl	8018304 <HAL_GetTick>
 801bdd8:	4602      	mov	r2, r0
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	1ad3      	subs	r3, r2, r3
 801bdde:	2b64      	cmp	r3, #100	; 0x64
 801bde0:	d901      	bls.n	801bde6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801bde2:	2303      	movs	r3, #3
 801bde4:	e21f      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801bde6:	4b61      	ldr	r3, [pc, #388]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d0f0      	beq.n	801bdd4 <HAL_RCC_OscConfig+0xdc>
 801bdf2:	e014      	b.n	801be1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bdf4:	f7fc fa86 	bl	8018304 <HAL_GetTick>
 801bdf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801bdfa:	e008      	b.n	801be0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801bdfc:	f7fc fa82 	bl	8018304 <HAL_GetTick>
 801be00:	4602      	mov	r2, r0
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	1ad3      	subs	r3, r2, r3
 801be06:	2b64      	cmp	r3, #100	; 0x64
 801be08:	d901      	bls.n	801be0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801be0a:	2303      	movs	r3, #3
 801be0c:	e20b      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801be0e:	4b57      	ldr	r3, [pc, #348]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be16:	2b00      	cmp	r3, #0
 801be18:	d1f0      	bne.n	801bdfc <HAL_RCC_OscConfig+0x104>
 801be1a:	e000      	b.n	801be1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	f003 0302 	and.w	r3, r3, #2
 801be26:	2b00      	cmp	r3, #0
 801be28:	d06f      	beq.n	801bf0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801be2a:	4b50      	ldr	r3, [pc, #320]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be2c:	689b      	ldr	r3, [r3, #8]
 801be2e:	f003 030c 	and.w	r3, r3, #12
 801be32:	2b00      	cmp	r3, #0
 801be34:	d017      	beq.n	801be66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801be36:	4b4d      	ldr	r3, [pc, #308]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be38:	689b      	ldr	r3, [r3, #8]
 801be3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801be3e:	2b08      	cmp	r3, #8
 801be40:	d105      	bne.n	801be4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801be42:	4b4a      	ldr	r3, [pc, #296]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be44:	685b      	ldr	r3, [r3, #4]
 801be46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d00b      	beq.n	801be66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801be4e:	4b47      	ldr	r3, [pc, #284]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be50:	689b      	ldr	r3, [r3, #8]
 801be52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 801be56:	2b0c      	cmp	r3, #12
 801be58:	d11c      	bne.n	801be94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801be5a:	4b44      	ldr	r3, [pc, #272]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be5c:	685b      	ldr	r3, [r3, #4]
 801be5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801be62:	2b00      	cmp	r3, #0
 801be64:	d116      	bne.n	801be94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801be66:	4b41      	ldr	r3, [pc, #260]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f003 0302 	and.w	r3, r3, #2
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d005      	beq.n	801be7e <HAL_RCC_OscConfig+0x186>
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	68db      	ldr	r3, [r3, #12]
 801be76:	2b01      	cmp	r3, #1
 801be78:	d001      	beq.n	801be7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801be7a:	2301      	movs	r3, #1
 801be7c:	e1d3      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801be7e:	4b3b      	ldr	r3, [pc, #236]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	691b      	ldr	r3, [r3, #16]
 801be8a:	00db      	lsls	r3, r3, #3
 801be8c:	4937      	ldr	r1, [pc, #220]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801be8e:	4313      	orrs	r3, r2
 801be90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801be92:	e03a      	b.n	801bf0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	68db      	ldr	r3, [r3, #12]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d020      	beq.n	801bede <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801be9c:	4b34      	ldr	r3, [pc, #208]	; (801bf70 <HAL_RCC_OscConfig+0x278>)
 801be9e:	2201      	movs	r2, #1
 801bea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bea2:	f7fc fa2f 	bl	8018304 <HAL_GetTick>
 801bea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bea8:	e008      	b.n	801bebc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801beaa:	f7fc fa2b 	bl	8018304 <HAL_GetTick>
 801beae:	4602      	mov	r2, r0
 801beb0:	693b      	ldr	r3, [r7, #16]
 801beb2:	1ad3      	subs	r3, r2, r3
 801beb4:	2b02      	cmp	r3, #2
 801beb6:	d901      	bls.n	801bebc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 801beb8:	2303      	movs	r3, #3
 801beba:	e1b4      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801bebc:	4b2b      	ldr	r3, [pc, #172]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	f003 0302 	and.w	r3, r3, #2
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d0f0      	beq.n	801beaa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bec8:	4b28      	ldr	r3, [pc, #160]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	691b      	ldr	r3, [r3, #16]
 801bed4:	00db      	lsls	r3, r3, #3
 801bed6:	4925      	ldr	r1, [pc, #148]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bed8:	4313      	orrs	r3, r2
 801beda:	600b      	str	r3, [r1, #0]
 801bedc:	e015      	b.n	801bf0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bede:	4b24      	ldr	r3, [pc, #144]	; (801bf70 <HAL_RCC_OscConfig+0x278>)
 801bee0:	2200      	movs	r2, #0
 801bee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bee4:	f7fc fa0e 	bl	8018304 <HAL_GetTick>
 801bee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801beea:	e008      	b.n	801befe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801beec:	f7fc fa0a 	bl	8018304 <HAL_GetTick>
 801bef0:	4602      	mov	r2, r0
 801bef2:	693b      	ldr	r3, [r7, #16]
 801bef4:	1ad3      	subs	r3, r2, r3
 801bef6:	2b02      	cmp	r3, #2
 801bef8:	d901      	bls.n	801befe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801befa:	2303      	movs	r3, #3
 801befc:	e193      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801befe:	4b1b      	ldr	r3, [pc, #108]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	f003 0302 	and.w	r3, r3, #2
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d1f0      	bne.n	801beec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f003 0308 	and.w	r3, r3, #8
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d036      	beq.n	801bf84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	695b      	ldr	r3, [r3, #20]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d016      	beq.n	801bf4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801bf1e:	4b15      	ldr	r3, [pc, #84]	; (801bf74 <HAL_RCC_OscConfig+0x27c>)
 801bf20:	2201      	movs	r2, #1
 801bf22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf24:	f7fc f9ee 	bl	8018304 <HAL_GetTick>
 801bf28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bf2a:	e008      	b.n	801bf3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bf2c:	f7fc f9ea 	bl	8018304 <HAL_GetTick>
 801bf30:	4602      	mov	r2, r0
 801bf32:	693b      	ldr	r3, [r7, #16]
 801bf34:	1ad3      	subs	r3, r2, r3
 801bf36:	2b02      	cmp	r3, #2
 801bf38:	d901      	bls.n	801bf3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801bf3a:	2303      	movs	r3, #3
 801bf3c:	e173      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801bf3e:	4b0b      	ldr	r3, [pc, #44]	; (801bf6c <HAL_RCC_OscConfig+0x274>)
 801bf40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf42:	f003 0302 	and.w	r3, r3, #2
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d0f0      	beq.n	801bf2c <HAL_RCC_OscConfig+0x234>
 801bf4a:	e01b      	b.n	801bf84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bf4c:	4b09      	ldr	r3, [pc, #36]	; (801bf74 <HAL_RCC_OscConfig+0x27c>)
 801bf4e:	2200      	movs	r2, #0
 801bf50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bf52:	f7fc f9d7 	bl	8018304 <HAL_GetTick>
 801bf56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bf58:	e00e      	b.n	801bf78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801bf5a:	f7fc f9d3 	bl	8018304 <HAL_GetTick>
 801bf5e:	4602      	mov	r2, r0
 801bf60:	693b      	ldr	r3, [r7, #16]
 801bf62:	1ad3      	subs	r3, r2, r3
 801bf64:	2b02      	cmp	r3, #2
 801bf66:	d907      	bls.n	801bf78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801bf68:	2303      	movs	r3, #3
 801bf6a:	e15c      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
 801bf6c:	40023800 	.word	0x40023800
 801bf70:	42470000 	.word	0x42470000
 801bf74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801bf78:	4b8a      	ldr	r3, [pc, #552]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801bf7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf7c:	f003 0302 	and.w	r3, r3, #2
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d1ea      	bne.n	801bf5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	f003 0304 	and.w	r3, r3, #4
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	f000 8097 	beq.w	801c0c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801bf92:	2300      	movs	r3, #0
 801bf94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bf96:	4b83      	ldr	r3, [pc, #524]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d10f      	bne.n	801bfc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	60bb      	str	r3, [r7, #8]
 801bfa6:	4b7f      	ldr	r3, [pc, #508]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfaa:	4a7e      	ldr	r2, [pc, #504]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801bfac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bfb0:	6413      	str	r3, [r2, #64]	; 0x40
 801bfb2:	4b7c      	ldr	r3, [pc, #496]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bfba:	60bb      	str	r3, [r7, #8]
 801bfbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bfc2:	4b79      	ldr	r3, [pc, #484]	; (801c1a8 <HAL_RCC_OscConfig+0x4b0>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d118      	bne.n	801c000 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bfce:	4b76      	ldr	r3, [pc, #472]	; (801c1a8 <HAL_RCC_OscConfig+0x4b0>)
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	4a75      	ldr	r2, [pc, #468]	; (801c1a8 <HAL_RCC_OscConfig+0x4b0>)
 801bfd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bfd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801bfda:	f7fc f993 	bl	8018304 <HAL_GetTick>
 801bfde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bfe0:	e008      	b.n	801bff4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bfe2:	f7fc f98f 	bl	8018304 <HAL_GetTick>
 801bfe6:	4602      	mov	r2, r0
 801bfe8:	693b      	ldr	r3, [r7, #16]
 801bfea:	1ad3      	subs	r3, r2, r3
 801bfec:	2b02      	cmp	r3, #2
 801bfee:	d901      	bls.n	801bff4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 801bff0:	2303      	movs	r3, #3
 801bff2:	e118      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bff4:	4b6c      	ldr	r3, [pc, #432]	; (801c1a8 <HAL_RCC_OscConfig+0x4b0>)
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d0f0      	beq.n	801bfe2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	689b      	ldr	r3, [r3, #8]
 801c004:	2b01      	cmp	r3, #1
 801c006:	d106      	bne.n	801c016 <HAL_RCC_OscConfig+0x31e>
 801c008:	4b66      	ldr	r3, [pc, #408]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c00c:	4a65      	ldr	r2, [pc, #404]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c00e:	f043 0301 	orr.w	r3, r3, #1
 801c012:	6713      	str	r3, [r2, #112]	; 0x70
 801c014:	e01c      	b.n	801c050 <HAL_RCC_OscConfig+0x358>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	689b      	ldr	r3, [r3, #8]
 801c01a:	2b05      	cmp	r3, #5
 801c01c:	d10c      	bne.n	801c038 <HAL_RCC_OscConfig+0x340>
 801c01e:	4b61      	ldr	r3, [pc, #388]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c022:	4a60      	ldr	r2, [pc, #384]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c024:	f043 0304 	orr.w	r3, r3, #4
 801c028:	6713      	str	r3, [r2, #112]	; 0x70
 801c02a:	4b5e      	ldr	r3, [pc, #376]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c02e:	4a5d      	ldr	r2, [pc, #372]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c030:	f043 0301 	orr.w	r3, r3, #1
 801c034:	6713      	str	r3, [r2, #112]	; 0x70
 801c036:	e00b      	b.n	801c050 <HAL_RCC_OscConfig+0x358>
 801c038:	4b5a      	ldr	r3, [pc, #360]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c03c:	4a59      	ldr	r2, [pc, #356]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c03e:	f023 0301 	bic.w	r3, r3, #1
 801c042:	6713      	str	r3, [r2, #112]	; 0x70
 801c044:	4b57      	ldr	r3, [pc, #348]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c048:	4a56      	ldr	r2, [pc, #344]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c04a:	f023 0304 	bic.w	r3, r3, #4
 801c04e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	689b      	ldr	r3, [r3, #8]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d015      	beq.n	801c084 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c058:	f7fc f954 	bl	8018304 <HAL_GetTick>
 801c05c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c05e:	e00a      	b.n	801c076 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c060:	f7fc f950 	bl	8018304 <HAL_GetTick>
 801c064:	4602      	mov	r2, r0
 801c066:	693b      	ldr	r3, [r7, #16]
 801c068:	1ad3      	subs	r3, r2, r3
 801c06a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c06e:	4293      	cmp	r3, r2
 801c070:	d901      	bls.n	801c076 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 801c072:	2303      	movs	r3, #3
 801c074:	e0d7      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c076:	4b4b      	ldr	r3, [pc, #300]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c07a:	f003 0302 	and.w	r3, r3, #2
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d0ee      	beq.n	801c060 <HAL_RCC_OscConfig+0x368>
 801c082:	e014      	b.n	801c0ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c084:	f7fc f93e 	bl	8018304 <HAL_GetTick>
 801c088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c08a:	e00a      	b.n	801c0a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c08c:	f7fc f93a 	bl	8018304 <HAL_GetTick>
 801c090:	4602      	mov	r2, r0
 801c092:	693b      	ldr	r3, [r7, #16]
 801c094:	1ad3      	subs	r3, r2, r3
 801c096:	f241 3288 	movw	r2, #5000	; 0x1388
 801c09a:	4293      	cmp	r3, r2
 801c09c:	d901      	bls.n	801c0a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801c09e:	2303      	movs	r3, #3
 801c0a0:	e0c1      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c0a2:	4b40      	ldr	r3, [pc, #256]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0a6:	f003 0302 	and.w	r3, r3, #2
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d1ee      	bne.n	801c08c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c0ae:	7dfb      	ldrb	r3, [r7, #23]
 801c0b0:	2b01      	cmp	r3, #1
 801c0b2:	d105      	bne.n	801c0c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c0b4:	4b3b      	ldr	r3, [pc, #236]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0b8:	4a3a      	ldr	r2, [pc, #232]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c0ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c0be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	699b      	ldr	r3, [r3, #24]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	f000 80ad 	beq.w	801c224 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c0ca:	4b36      	ldr	r3, [pc, #216]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c0cc:	689b      	ldr	r3, [r3, #8]
 801c0ce:	f003 030c 	and.w	r3, r3, #12
 801c0d2:	2b08      	cmp	r3, #8
 801c0d4:	d060      	beq.n	801c198 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	699b      	ldr	r3, [r3, #24]
 801c0da:	2b02      	cmp	r3, #2
 801c0dc:	d145      	bne.n	801c16a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c0de:	4b33      	ldr	r3, [pc, #204]	; (801c1ac <HAL_RCC_OscConfig+0x4b4>)
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0e4:	f7fc f90e 	bl	8018304 <HAL_GetTick>
 801c0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c0ea:	e008      	b.n	801c0fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c0ec:	f7fc f90a 	bl	8018304 <HAL_GetTick>
 801c0f0:	4602      	mov	r2, r0
 801c0f2:	693b      	ldr	r3, [r7, #16]
 801c0f4:	1ad3      	subs	r3, r2, r3
 801c0f6:	2b02      	cmp	r3, #2
 801c0f8:	d901      	bls.n	801c0fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801c0fa:	2303      	movs	r3, #3
 801c0fc:	e093      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c0fe:	4b29      	ldr	r3, [pc, #164]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c106:	2b00      	cmp	r3, #0
 801c108:	d1f0      	bne.n	801c0ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	69da      	ldr	r2, [r3, #28]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	6a1b      	ldr	r3, [r3, #32]
 801c112:	431a      	orrs	r2, r3
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c118:	019b      	lsls	r3, r3, #6
 801c11a:	431a      	orrs	r2, r3
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c120:	085b      	lsrs	r3, r3, #1
 801c122:	3b01      	subs	r3, #1
 801c124:	041b      	lsls	r3, r3, #16
 801c126:	431a      	orrs	r2, r3
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c12c:	061b      	lsls	r3, r3, #24
 801c12e:	431a      	orrs	r2, r3
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c134:	071b      	lsls	r3, r3, #28
 801c136:	491b      	ldr	r1, [pc, #108]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c138:	4313      	orrs	r3, r2
 801c13a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c13c:	4b1b      	ldr	r3, [pc, #108]	; (801c1ac <HAL_RCC_OscConfig+0x4b4>)
 801c13e:	2201      	movs	r2, #1
 801c140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c142:	f7fc f8df 	bl	8018304 <HAL_GetTick>
 801c146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c148:	e008      	b.n	801c15c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c14a:	f7fc f8db 	bl	8018304 <HAL_GetTick>
 801c14e:	4602      	mov	r2, r0
 801c150:	693b      	ldr	r3, [r7, #16]
 801c152:	1ad3      	subs	r3, r2, r3
 801c154:	2b02      	cmp	r3, #2
 801c156:	d901      	bls.n	801c15c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801c158:	2303      	movs	r3, #3
 801c15a:	e064      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c15c:	4b11      	ldr	r3, [pc, #68]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c164:	2b00      	cmp	r3, #0
 801c166:	d0f0      	beq.n	801c14a <HAL_RCC_OscConfig+0x452>
 801c168:	e05c      	b.n	801c224 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c16a:	4b10      	ldr	r3, [pc, #64]	; (801c1ac <HAL_RCC_OscConfig+0x4b4>)
 801c16c:	2200      	movs	r2, #0
 801c16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c170:	f7fc f8c8 	bl	8018304 <HAL_GetTick>
 801c174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c176:	e008      	b.n	801c18a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801c178:	f7fc f8c4 	bl	8018304 <HAL_GetTick>
 801c17c:	4602      	mov	r2, r0
 801c17e:	693b      	ldr	r3, [r7, #16]
 801c180:	1ad3      	subs	r3, r2, r3
 801c182:	2b02      	cmp	r3, #2
 801c184:	d901      	bls.n	801c18a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801c186:	2303      	movs	r3, #3
 801c188:	e04d      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c18a:	4b06      	ldr	r3, [pc, #24]	; (801c1a4 <HAL_RCC_OscConfig+0x4ac>)
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c192:	2b00      	cmp	r3, #0
 801c194:	d1f0      	bne.n	801c178 <HAL_RCC_OscConfig+0x480>
 801c196:	e045      	b.n	801c224 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	699b      	ldr	r3, [r3, #24]
 801c19c:	2b01      	cmp	r3, #1
 801c19e:	d107      	bne.n	801c1b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 801c1a0:	2301      	movs	r3, #1
 801c1a2:	e040      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
 801c1a4:	40023800 	.word	0x40023800
 801c1a8:	40007000 	.word	0x40007000
 801c1ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801c1b0:	4b1f      	ldr	r3, [pc, #124]	; (801c230 <HAL_RCC_OscConfig+0x538>)
 801c1b2:	685b      	ldr	r3, [r3, #4]
 801c1b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	699b      	ldr	r3, [r3, #24]
 801c1ba:	2b01      	cmp	r3, #1
 801c1bc:	d030      	beq.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c1c8:	429a      	cmp	r2, r3
 801c1ca:	d129      	bne.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d122      	bne.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c1da:	68fa      	ldr	r2, [r7, #12]
 801c1dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c1e0:	4013      	ands	r3, r2
 801c1e2:	687a      	ldr	r2, [r7, #4]
 801c1e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c1e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801c1e8:	4293      	cmp	r3, r2
 801c1ea:	d119      	bne.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1f6:	085b      	lsrs	r3, r3, #1
 801c1f8:	3b01      	subs	r3, #1
 801c1fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d10f      	bne.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c20a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d107      	bne.n	801c220 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c21a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d001      	beq.n	801c224 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 801c220:	2301      	movs	r3, #1
 801c222:	e000      	b.n	801c226 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 801c224:	2300      	movs	r3, #0
}
 801c226:	4618      	mov	r0, r3
 801c228:	3718      	adds	r7, #24
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bd80      	pop	{r7, pc}
 801c22e:	bf00      	nop
 801c230:	40023800 	.word	0x40023800

0801c234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b082      	sub	sp, #8
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d101      	bne.n	801c246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801c242:	2301      	movs	r3, #1
 801c244:	e07b      	b.n	801c33e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d108      	bne.n	801c260 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	685b      	ldr	r3, [r3, #4]
 801c252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c256:	d009      	beq.n	801c26c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	2200      	movs	r2, #0
 801c25c:	61da      	str	r2, [r3, #28]
 801c25e:	e005      	b.n	801c26c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	2200      	movs	r2, #0
 801c264:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2200      	movs	r2, #0
 801c26a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	2200      	movs	r2, #0
 801c270:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c278:	b2db      	uxtb	r3, r3
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d106      	bne.n	801c28c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	2200      	movs	r2, #0
 801c282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801c286:	6878      	ldr	r0, [r7, #4]
 801c288:	f7fb fd8c 	bl	8017da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	2202      	movs	r2, #2
 801c290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	681a      	ldr	r2, [r3, #0]
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c2a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	685b      	ldr	r3, [r3, #4]
 801c2a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	689b      	ldr	r3, [r3, #8]
 801c2b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801c2b4:	431a      	orrs	r2, r3
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	68db      	ldr	r3, [r3, #12]
 801c2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c2be:	431a      	orrs	r2, r3
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	691b      	ldr	r3, [r3, #16]
 801c2c4:	f003 0302 	and.w	r3, r3, #2
 801c2c8:	431a      	orrs	r2, r3
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	695b      	ldr	r3, [r3, #20]
 801c2ce:	f003 0301 	and.w	r3, r3, #1
 801c2d2:	431a      	orrs	r2, r3
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	699b      	ldr	r3, [r3, #24]
 801c2d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c2dc:	431a      	orrs	r2, r3
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	69db      	ldr	r3, [r3, #28]
 801c2e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801c2e6:	431a      	orrs	r2, r3
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	6a1b      	ldr	r3, [r3, #32]
 801c2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c2f0:	ea42 0103 	orr.w	r1, r2, r3
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	430a      	orrs	r2, r1
 801c302:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	699b      	ldr	r3, [r3, #24]
 801c308:	0c1b      	lsrs	r3, r3, #16
 801c30a:	f003 0104 	and.w	r1, r3, #4
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c312:	f003 0210 	and.w	r2, r3, #16
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	430a      	orrs	r2, r1
 801c31c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	69da      	ldr	r2, [r3, #28]
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c32c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	2200      	movs	r2, #0
 801c332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	2201      	movs	r2, #1
 801c338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801c33c:	2300      	movs	r3, #0
}
 801c33e:	4618      	mov	r0, r3
 801c340:	3708      	adds	r7, #8
 801c342:	46bd      	mov	sp, r7
 801c344:	bd80      	pop	{r7, pc}

0801c346 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 801c346:	b580      	push	{r7, lr}
 801c348:	b082      	sub	sp, #8
 801c34a:	af00      	add	r7, sp, #0
 801c34c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d101      	bne.n	801c358 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801c354:	2301      	movs	r3, #1
 801c356:	e01a      	b.n	801c38e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	2202      	movs	r2, #2
 801c35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	681a      	ldr	r2, [r3, #0]
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c36e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 801c370:	6878      	ldr	r0, [r7, #4]
 801c372:	f7fb fda3 	bl	8017ebc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	2200      	movs	r2, #0
 801c37a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	2200      	movs	r2, #0
 801c380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	2200      	movs	r2, #0
 801c388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801c38c:	2300      	movs	r3, #0
}
 801c38e:	4618      	mov	r0, r3
 801c390:	3708      	adds	r7, #8
 801c392:	46bd      	mov	sp, r7
 801c394:	bd80      	pop	{r7, pc}

0801c396 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c396:	b580      	push	{r7, lr}
 801c398:	b088      	sub	sp, #32
 801c39a:	af00      	add	r7, sp, #0
 801c39c:	60f8      	str	r0, [r7, #12]
 801c39e:	60b9      	str	r1, [r7, #8]
 801c3a0:	603b      	str	r3, [r7, #0]
 801c3a2:	4613      	mov	r3, r2
 801c3a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c3b0:	2b01      	cmp	r3, #1
 801c3b2:	d101      	bne.n	801c3b8 <HAL_SPI_Transmit+0x22>
 801c3b4:	2302      	movs	r3, #2
 801c3b6:	e126      	b.n	801c606 <HAL_SPI_Transmit+0x270>
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	2201      	movs	r2, #1
 801c3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c3c0:	f7fb ffa0 	bl	8018304 <HAL_GetTick>
 801c3c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801c3c6:	88fb      	ldrh	r3, [r7, #6]
 801c3c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	2b01      	cmp	r3, #1
 801c3d4:	d002      	beq.n	801c3dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801c3d6:	2302      	movs	r3, #2
 801c3d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c3da:	e10b      	b.n	801c5f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801c3dc:	68bb      	ldr	r3, [r7, #8]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d002      	beq.n	801c3e8 <HAL_SPI_Transmit+0x52>
 801c3e2:	88fb      	ldrh	r3, [r7, #6]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d102      	bne.n	801c3ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 801c3ec:	e102      	b.n	801c5f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	2203      	movs	r2, #3
 801c3f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	68ba      	ldr	r2, [r7, #8]
 801c400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	88fa      	ldrh	r2, [r7, #6]
 801c406:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	88fa      	ldrh	r2, [r7, #6]
 801c40c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	2200      	movs	r2, #0
 801c412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801c414:	68fb      	ldr	r3, [r7, #12]
 801c416:	2200      	movs	r2, #0
 801c418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	2200      	movs	r2, #0
 801c41e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	2200      	movs	r2, #0
 801c424:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	2200      	movs	r2, #0
 801c42a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	689b      	ldr	r3, [r3, #8]
 801c430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c434:	d10f      	bne.n	801c456 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	681a      	ldr	r2, [r3, #0]
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	681a      	ldr	r2, [r3, #0]
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c460:	2b40      	cmp	r3, #64	; 0x40
 801c462:	d007      	beq.n	801c474 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	681a      	ldr	r2, [r3, #0]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	68db      	ldr	r3, [r3, #12]
 801c478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c47c:	d14b      	bne.n	801c516 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	685b      	ldr	r3, [r3, #4]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d002      	beq.n	801c48c <HAL_SPI_Transmit+0xf6>
 801c486:	8afb      	ldrh	r3, [r7, #22]
 801c488:	2b01      	cmp	r3, #1
 801c48a:	d13e      	bne.n	801c50a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c490:	881a      	ldrh	r2, [r3, #0]
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c49c:	1c9a      	adds	r2, r3, #2
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c4a6:	b29b      	uxth	r3, r3
 801c4a8:	3b01      	subs	r3, #1
 801c4aa:	b29a      	uxth	r2, r3
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801c4b0:	e02b      	b.n	801c50a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	689b      	ldr	r3, [r3, #8]
 801c4b8:	f003 0302 	and.w	r3, r3, #2
 801c4bc:	2b02      	cmp	r3, #2
 801c4be:	d112      	bne.n	801c4e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4c4:	881a      	ldrh	r2, [r3, #0]
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4d0:	1c9a      	adds	r2, r3, #2
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c4da:	b29b      	uxth	r3, r3
 801c4dc:	3b01      	subs	r3, #1
 801c4de:	b29a      	uxth	r2, r3
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	86da      	strh	r2, [r3, #54]	; 0x36
 801c4e4:	e011      	b.n	801c50a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c4e6:	f7fb ff0d 	bl	8018304 <HAL_GetTick>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	69bb      	ldr	r3, [r7, #24]
 801c4ee:	1ad3      	subs	r3, r2, r3
 801c4f0:	683a      	ldr	r2, [r7, #0]
 801c4f2:	429a      	cmp	r2, r3
 801c4f4:	d803      	bhi.n	801c4fe <HAL_SPI_Transmit+0x168>
 801c4f6:	683b      	ldr	r3, [r7, #0]
 801c4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4fc:	d102      	bne.n	801c504 <HAL_SPI_Transmit+0x16e>
 801c4fe:	683b      	ldr	r3, [r7, #0]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d102      	bne.n	801c50a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801c504:	2303      	movs	r3, #3
 801c506:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c508:	e074      	b.n	801c5f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c50e:	b29b      	uxth	r3, r3
 801c510:	2b00      	cmp	r3, #0
 801c512:	d1ce      	bne.n	801c4b2 <HAL_SPI_Transmit+0x11c>
 801c514:	e04c      	b.n	801c5b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	685b      	ldr	r3, [r3, #4]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d002      	beq.n	801c524 <HAL_SPI_Transmit+0x18e>
 801c51e:	8afb      	ldrh	r3, [r7, #22]
 801c520:	2b01      	cmp	r3, #1
 801c522:	d140      	bne.n	801c5a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	330c      	adds	r3, #12
 801c52e:	7812      	ldrb	r2, [r2, #0]
 801c530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c536:	1c5a      	adds	r2, r3, #1
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c540:	b29b      	uxth	r3, r3
 801c542:	3b01      	subs	r3, #1
 801c544:	b29a      	uxth	r2, r3
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801c54a:	e02c      	b.n	801c5a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	689b      	ldr	r3, [r3, #8]
 801c552:	f003 0302 	and.w	r3, r3, #2
 801c556:	2b02      	cmp	r3, #2
 801c558:	d113      	bne.n	801c582 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801c55a:	68fb      	ldr	r3, [r7, #12]
 801c55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	330c      	adds	r3, #12
 801c564:	7812      	ldrb	r2, [r2, #0]
 801c566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801c568:	68fb      	ldr	r3, [r7, #12]
 801c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c56c:	1c5a      	adds	r2, r3, #1
 801c56e:	68fb      	ldr	r3, [r7, #12]
 801c570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c576:	b29b      	uxth	r3, r3
 801c578:	3b01      	subs	r3, #1
 801c57a:	b29a      	uxth	r2, r3
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	86da      	strh	r2, [r3, #54]	; 0x36
 801c580:	e011      	b.n	801c5a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c582:	f7fb febf 	bl	8018304 <HAL_GetTick>
 801c586:	4602      	mov	r2, r0
 801c588:	69bb      	ldr	r3, [r7, #24]
 801c58a:	1ad3      	subs	r3, r2, r3
 801c58c:	683a      	ldr	r2, [r7, #0]
 801c58e:	429a      	cmp	r2, r3
 801c590:	d803      	bhi.n	801c59a <HAL_SPI_Transmit+0x204>
 801c592:	683b      	ldr	r3, [r7, #0]
 801c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c598:	d102      	bne.n	801c5a0 <HAL_SPI_Transmit+0x20a>
 801c59a:	683b      	ldr	r3, [r7, #0]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d102      	bne.n	801c5a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801c5a0:	2303      	movs	r3, #3
 801c5a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c5a4:	e026      	b.n	801c5f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801c5a6:	68fb      	ldr	r3, [r7, #12]
 801c5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c5aa:	b29b      	uxth	r3, r3
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d1cd      	bne.n	801c54c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c5b0:	69ba      	ldr	r2, [r7, #24]
 801c5b2:	6839      	ldr	r1, [r7, #0]
 801c5b4:	68f8      	ldr	r0, [r7, #12]
 801c5b6:	f000 fcf7 	bl	801cfa8 <SPI_EndRxTxTransaction>
 801c5ba:	4603      	mov	r3, r0
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d002      	beq.n	801c5c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	2220      	movs	r2, #32
 801c5c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	689b      	ldr	r3, [r3, #8]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d10a      	bne.n	801c5e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c5ce:	2300      	movs	r3, #0
 801c5d0:	613b      	str	r3, [r7, #16]
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	68db      	ldr	r3, [r3, #12]
 801c5d8:	613b      	str	r3, [r7, #16]
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	689b      	ldr	r3, [r3, #8]
 801c5e0:	613b      	str	r3, [r7, #16]
 801c5e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d002      	beq.n	801c5f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801c5ec:	2301      	movs	r3, #1
 801c5ee:	77fb      	strb	r3, [r7, #31]
 801c5f0:	e000      	b.n	801c5f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 801c5f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	2201      	movs	r2, #1
 801c5f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c5fc:	68fb      	ldr	r3, [r7, #12]
 801c5fe:	2200      	movs	r2, #0
 801c600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c604:	7ffb      	ldrb	r3, [r7, #31]
}
 801c606:	4618      	mov	r0, r3
 801c608:	3720      	adds	r7, #32
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bd80      	pop	{r7, pc}

0801c60e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c60e:	b580      	push	{r7, lr}
 801c610:	b088      	sub	sp, #32
 801c612:	af02      	add	r7, sp, #8
 801c614:	60f8      	str	r0, [r7, #12]
 801c616:	60b9      	str	r1, [r7, #8]
 801c618:	603b      	str	r3, [r7, #0]
 801c61a:	4613      	mov	r3, r2
 801c61c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c61e:	2300      	movs	r3, #0
 801c620:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	685b      	ldr	r3, [r3, #4]
 801c626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c62a:	d112      	bne.n	801c652 <HAL_SPI_Receive+0x44>
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	689b      	ldr	r3, [r3, #8]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d10e      	bne.n	801c652 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	2204      	movs	r2, #4
 801c638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c63c:	88fa      	ldrh	r2, [r7, #6]
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	9300      	str	r3, [sp, #0]
 801c642:	4613      	mov	r3, r2
 801c644:	68ba      	ldr	r2, [r7, #8]
 801c646:	68b9      	ldr	r1, [r7, #8]
 801c648:	68f8      	ldr	r0, [r7, #12]
 801c64a:	f000 f8f1 	bl	801c830 <HAL_SPI_TransmitReceive>
 801c64e:	4603      	mov	r3, r0
 801c650:	e0ea      	b.n	801c828 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c658:	2b01      	cmp	r3, #1
 801c65a:	d101      	bne.n	801c660 <HAL_SPI_Receive+0x52>
 801c65c:	2302      	movs	r3, #2
 801c65e:	e0e3      	b.n	801c828 <HAL_SPI_Receive+0x21a>
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	2201      	movs	r2, #1
 801c664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c668:	f7fb fe4c 	bl	8018304 <HAL_GetTick>
 801c66c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c674:	b2db      	uxtb	r3, r3
 801c676:	2b01      	cmp	r3, #1
 801c678:	d002      	beq.n	801c680 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c67a:	2302      	movs	r3, #2
 801c67c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c67e:	e0ca      	b.n	801c816 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801c680:	68bb      	ldr	r3, [r7, #8]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d002      	beq.n	801c68c <HAL_SPI_Receive+0x7e>
 801c686:	88fb      	ldrh	r3, [r7, #6]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d102      	bne.n	801c692 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c68c:	2301      	movs	r3, #1
 801c68e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c690:	e0c1      	b.n	801c816 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	2204      	movs	r2, #4
 801c696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	2200      	movs	r2, #0
 801c69e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	68ba      	ldr	r2, [r7, #8]
 801c6a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	88fa      	ldrh	r2, [r7, #6]
 801c6aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	88fa      	ldrh	r2, [r7, #6]
 801c6b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	2200      	movs	r2, #0
 801c6bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	2200      	movs	r2, #0
 801c6c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	689b      	ldr	r3, [r3, #8]
 801c6d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c6d8:	d10f      	bne.n	801c6fa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	681a      	ldr	r2, [r3, #0]
 801c6e0:	68fb      	ldr	r3, [r7, #12]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c6e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	681a      	ldr	r2, [r3, #0]
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c6f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c704:	2b40      	cmp	r3, #64	; 0x40
 801c706:	d007      	beq.n	801c718 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c716:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	68db      	ldr	r3, [r3, #12]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d162      	bne.n	801c7e6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c720:	e02e      	b.n	801c780 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	689b      	ldr	r3, [r3, #8]
 801c728:	f003 0301 	and.w	r3, r3, #1
 801c72c:	2b01      	cmp	r3, #1
 801c72e:	d115      	bne.n	801c75c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	f103 020c 	add.w	r2, r3, #12
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c73c:	7812      	ldrb	r2, [r2, #0]
 801c73e:	b2d2      	uxtb	r2, r2
 801c740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c746:	1c5a      	adds	r2, r3, #1
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c750:	b29b      	uxth	r3, r3
 801c752:	3b01      	subs	r3, #1
 801c754:	b29a      	uxth	r2, r3
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c75a:	e011      	b.n	801c780 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c75c:	f7fb fdd2 	bl	8018304 <HAL_GetTick>
 801c760:	4602      	mov	r2, r0
 801c762:	693b      	ldr	r3, [r7, #16]
 801c764:	1ad3      	subs	r3, r2, r3
 801c766:	683a      	ldr	r2, [r7, #0]
 801c768:	429a      	cmp	r2, r3
 801c76a:	d803      	bhi.n	801c774 <HAL_SPI_Receive+0x166>
 801c76c:	683b      	ldr	r3, [r7, #0]
 801c76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c772:	d102      	bne.n	801c77a <HAL_SPI_Receive+0x16c>
 801c774:	683b      	ldr	r3, [r7, #0]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d102      	bne.n	801c780 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801c77a:	2303      	movs	r3, #3
 801c77c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c77e:	e04a      	b.n	801c816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c784:	b29b      	uxth	r3, r3
 801c786:	2b00      	cmp	r3, #0
 801c788:	d1cb      	bne.n	801c722 <HAL_SPI_Receive+0x114>
 801c78a:	e031      	b.n	801c7f0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	689b      	ldr	r3, [r3, #8]
 801c792:	f003 0301 	and.w	r3, r3, #1
 801c796:	2b01      	cmp	r3, #1
 801c798:	d113      	bne.n	801c7c2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	68da      	ldr	r2, [r3, #12]
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7a4:	b292      	uxth	r2, r2
 801c7a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7ac:	1c9a      	adds	r2, r3, #2
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	3b01      	subs	r3, #1
 801c7ba:	b29a      	uxth	r2, r3
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c7c0:	e011      	b.n	801c7e6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c7c2:	f7fb fd9f 	bl	8018304 <HAL_GetTick>
 801c7c6:	4602      	mov	r2, r0
 801c7c8:	693b      	ldr	r3, [r7, #16]
 801c7ca:	1ad3      	subs	r3, r2, r3
 801c7cc:	683a      	ldr	r2, [r7, #0]
 801c7ce:	429a      	cmp	r2, r3
 801c7d0:	d803      	bhi.n	801c7da <HAL_SPI_Receive+0x1cc>
 801c7d2:	683b      	ldr	r3, [r7, #0]
 801c7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c7d8:	d102      	bne.n	801c7e0 <HAL_SPI_Receive+0x1d2>
 801c7da:	683b      	ldr	r3, [r7, #0]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d102      	bne.n	801c7e6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801c7e0:	2303      	movs	r3, #3
 801c7e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c7e4:	e017      	b.n	801c816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d1cd      	bne.n	801c78c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c7f0:	693a      	ldr	r2, [r7, #16]
 801c7f2:	6839      	ldr	r1, [r7, #0]
 801c7f4:	68f8      	ldr	r0, [r7, #12]
 801c7f6:	f000 fb71 	bl	801cedc <SPI_EndRxTransaction>
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d002      	beq.n	801c806 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	2220      	movs	r2, #32
 801c804:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d002      	beq.n	801c814 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801c80e:	2301      	movs	r3, #1
 801c810:	75fb      	strb	r3, [r7, #23]
 801c812:	e000      	b.n	801c816 <HAL_SPI_Receive+0x208>
  }

error :
 801c814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	2201      	movs	r2, #1
 801c81a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	2200      	movs	r2, #0
 801c822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801c826:	7dfb      	ldrb	r3, [r7, #23]
}
 801c828:	4618      	mov	r0, r3
 801c82a:	3718      	adds	r7, #24
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}

0801c830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b08c      	sub	sp, #48	; 0x30
 801c834:	af00      	add	r7, sp, #0
 801c836:	60f8      	str	r0, [r7, #12]
 801c838:	60b9      	str	r1, [r7, #8]
 801c83a:	607a      	str	r2, [r7, #4]
 801c83c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c83e:	2301      	movs	r3, #1
 801c840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c842:	2300      	movs	r3, #0
 801c844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c84e:	2b01      	cmp	r3, #1
 801c850:	d101      	bne.n	801c856 <HAL_SPI_TransmitReceive+0x26>
 801c852:	2302      	movs	r3, #2
 801c854:	e18a      	b.n	801cb6c <HAL_SPI_TransmitReceive+0x33c>
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	2201      	movs	r2, #1
 801c85a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c85e:	f7fb fd51 	bl	8018304 <HAL_GetTick>
 801c862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c86a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801c86e:	68fb      	ldr	r3, [r7, #12]
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801c874:	887b      	ldrh	r3, [r7, #2]
 801c876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c87c:	2b01      	cmp	r3, #1
 801c87e:	d00f      	beq.n	801c8a0 <HAL_SPI_TransmitReceive+0x70>
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c886:	d107      	bne.n	801c898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	689b      	ldr	r3, [r3, #8]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d103      	bne.n	801c898 <HAL_SPI_TransmitReceive+0x68>
 801c890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c894:	2b04      	cmp	r3, #4
 801c896:	d003      	beq.n	801c8a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801c898:	2302      	movs	r3, #2
 801c89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c89e:	e15b      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c8a0:	68bb      	ldr	r3, [r7, #8]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d005      	beq.n	801c8b2 <HAL_SPI_TransmitReceive+0x82>
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d002      	beq.n	801c8b2 <HAL_SPI_TransmitReceive+0x82>
 801c8ac:	887b      	ldrh	r3, [r7, #2]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d103      	bne.n	801c8ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801c8b2:	2301      	movs	r3, #1
 801c8b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801c8b8:	e14e      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	2b04      	cmp	r3, #4
 801c8c4:	d003      	beq.n	801c8ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	2205      	movs	r2, #5
 801c8ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	687a      	ldr	r2, [r7, #4]
 801c8d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	887a      	ldrh	r2, [r7, #2]
 801c8de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	887a      	ldrh	r2, [r7, #2]
 801c8e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	68ba      	ldr	r2, [r7, #8]
 801c8ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	887a      	ldrh	r2, [r7, #2]
 801c8f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	887a      	ldrh	r2, [r7, #2]
 801c8f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	2200      	movs	r2, #0
 801c902:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c90e:	2b40      	cmp	r3, #64	; 0x40
 801c910:	d007      	beq.n	801c922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	681a      	ldr	r2, [r3, #0]
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801c922:	68fb      	ldr	r3, [r7, #12]
 801c924:	68db      	ldr	r3, [r3, #12]
 801c926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c92a:	d178      	bne.n	801ca1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	685b      	ldr	r3, [r3, #4]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d002      	beq.n	801c93a <HAL_SPI_TransmitReceive+0x10a>
 801c934:	8b7b      	ldrh	r3, [r7, #26]
 801c936:	2b01      	cmp	r3, #1
 801c938:	d166      	bne.n	801ca08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c93e:	881a      	ldrh	r2, [r3, #0]
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c94a:	1c9a      	adds	r2, r3, #2
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c954:	b29b      	uxth	r3, r3
 801c956:	3b01      	subs	r3, #1
 801c958:	b29a      	uxth	r2, r3
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c95e:	e053      	b.n	801ca08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	689b      	ldr	r3, [r3, #8]
 801c966:	f003 0302 	and.w	r3, r3, #2
 801c96a:	2b02      	cmp	r3, #2
 801c96c:	d11b      	bne.n	801c9a6 <HAL_SPI_TransmitReceive+0x176>
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c972:	b29b      	uxth	r3, r3
 801c974:	2b00      	cmp	r3, #0
 801c976:	d016      	beq.n	801c9a6 <HAL_SPI_TransmitReceive+0x176>
 801c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c97a:	2b01      	cmp	r3, #1
 801c97c:	d113      	bne.n	801c9a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c982:	881a      	ldrh	r2, [r3, #0]
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c98e:	1c9a      	adds	r2, r3, #2
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801c998:	b29b      	uxth	r3, r3
 801c99a:	3b01      	subs	r3, #1
 801c99c:	b29a      	uxth	r2, r3
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	689b      	ldr	r3, [r3, #8]
 801c9ac:	f003 0301 	and.w	r3, r3, #1
 801c9b0:	2b01      	cmp	r3, #1
 801c9b2:	d119      	bne.n	801c9e8 <HAL_SPI_TransmitReceive+0x1b8>
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9b8:	b29b      	uxth	r3, r3
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d014      	beq.n	801c9e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	68da      	ldr	r2, [r3, #12]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9c8:	b292      	uxth	r2, r2
 801c9ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9d0:	1c9a      	adds	r2, r3, #2
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	3b01      	subs	r3, #1
 801c9de:	b29a      	uxth	r2, r3
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c9e4:	2301      	movs	r3, #1
 801c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c9e8:	f7fb fc8c 	bl	8018304 <HAL_GetTick>
 801c9ec:	4602      	mov	r2, r0
 801c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9f0:	1ad3      	subs	r3, r2, r3
 801c9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9f4:	429a      	cmp	r2, r3
 801c9f6:	d807      	bhi.n	801ca08 <HAL_SPI_TransmitReceive+0x1d8>
 801c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9fe:	d003      	beq.n	801ca08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801ca00:	2303      	movs	r3, #3
 801ca02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801ca06:	e0a7      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca0c:	b29b      	uxth	r3, r3
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d1a6      	bne.n	801c960 <HAL_SPI_TransmitReceive+0x130>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ca16:	b29b      	uxth	r3, r3
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d1a1      	bne.n	801c960 <HAL_SPI_TransmitReceive+0x130>
 801ca1c:	e07c      	b.n	801cb18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	685b      	ldr	r3, [r3, #4]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d002      	beq.n	801ca2c <HAL_SPI_TransmitReceive+0x1fc>
 801ca26:	8b7b      	ldrh	r3, [r7, #26]
 801ca28:	2b01      	cmp	r3, #1
 801ca2a:	d16b      	bne.n	801cb04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	330c      	adds	r3, #12
 801ca36:	7812      	ldrb	r2, [r2, #0]
 801ca38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca3e:	1c5a      	adds	r2, r3, #1
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca48:	b29b      	uxth	r3, r3
 801ca4a:	3b01      	subs	r3, #1
 801ca4c:	b29a      	uxth	r2, r3
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ca52:	e057      	b.n	801cb04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	689b      	ldr	r3, [r3, #8]
 801ca5a:	f003 0302 	and.w	r3, r3, #2
 801ca5e:	2b02      	cmp	r3, #2
 801ca60:	d11c      	bne.n	801ca9c <HAL_SPI_TransmitReceive+0x26c>
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca66:	b29b      	uxth	r3, r3
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d017      	beq.n	801ca9c <HAL_SPI_TransmitReceive+0x26c>
 801ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca6e:	2b01      	cmp	r3, #1
 801ca70:	d114      	bne.n	801ca9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ca72:	68fb      	ldr	r3, [r7, #12]
 801ca74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	330c      	adds	r3, #12
 801ca7c:	7812      	ldrb	r2, [r2, #0]
 801ca7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca84:	1c5a      	adds	r2, r3, #1
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801ca8e:	b29b      	uxth	r3, r3
 801ca90:	3b01      	subs	r3, #1
 801ca92:	b29a      	uxth	r2, r3
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ca98:	2300      	movs	r3, #0
 801ca9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	689b      	ldr	r3, [r3, #8]
 801caa2:	f003 0301 	and.w	r3, r3, #1
 801caa6:	2b01      	cmp	r3, #1
 801caa8:	d119      	bne.n	801cade <HAL_SPI_TransmitReceive+0x2ae>
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801caae:	b29b      	uxth	r3, r3
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d014      	beq.n	801cade <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	68da      	ldr	r2, [r3, #12]
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cabe:	b2d2      	uxtb	r2, r2
 801cac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cac6:	1c5a      	adds	r2, r3, #1
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cad0:	b29b      	uxth	r3, r3
 801cad2:	3b01      	subs	r3, #1
 801cad4:	b29a      	uxth	r2, r3
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801cada:	2301      	movs	r3, #1
 801cadc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801cade:	f7fb fc11 	bl	8018304 <HAL_GetTick>
 801cae2:	4602      	mov	r2, r0
 801cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cae6:	1ad3      	subs	r3, r2, r3
 801cae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801caea:	429a      	cmp	r2, r3
 801caec:	d803      	bhi.n	801caf6 <HAL_SPI_TransmitReceive+0x2c6>
 801caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801caf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caf4:	d102      	bne.n	801cafc <HAL_SPI_TransmitReceive+0x2cc>
 801caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d103      	bne.n	801cb04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801cafc:	2303      	movs	r3, #3
 801cafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801cb02:	e029      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801cb08:	b29b      	uxth	r3, r3
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d1a2      	bne.n	801ca54 <HAL_SPI_TransmitReceive+0x224>
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d19d      	bne.n	801ca54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801cb18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cb1c:	68f8      	ldr	r0, [r7, #12]
 801cb1e:	f000 fa43 	bl	801cfa8 <SPI_EndRxTxTransaction>
 801cb22:	4603      	mov	r3, r0
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d006      	beq.n	801cb36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801cb28:	2301      	movs	r3, #1
 801cb2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	2220      	movs	r2, #32
 801cb32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801cb34:	e010      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	689b      	ldr	r3, [r3, #8]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d10b      	bne.n	801cb56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cb3e:	2300      	movs	r3, #0
 801cb40:	617b      	str	r3, [r7, #20]
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	68db      	ldr	r3, [r3, #12]
 801cb48:	617b      	str	r3, [r7, #20]
 801cb4a:	68fb      	ldr	r3, [r7, #12]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	689b      	ldr	r3, [r3, #8]
 801cb50:	617b      	str	r3, [r7, #20]
 801cb52:	697b      	ldr	r3, [r7, #20]
 801cb54:	e000      	b.n	801cb58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801cb56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	2200      	movs	r2, #0
 801cb64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801cb68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	3730      	adds	r7, #48	; 0x30
 801cb70:	46bd      	mov	sp, r7
 801cb72:	bd80      	pop	{r7, pc}

0801cb74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801cb74:	b580      	push	{r7, lr}
 801cb76:	b088      	sub	sp, #32
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	685b      	ldr	r3, [r3, #4]
 801cb82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	689b      	ldr	r3, [r3, #8]
 801cb8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cb8c:	69bb      	ldr	r3, [r7, #24]
 801cb8e:	099b      	lsrs	r3, r3, #6
 801cb90:	f003 0301 	and.w	r3, r3, #1
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d10f      	bne.n	801cbb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cb98:	69bb      	ldr	r3, [r7, #24]
 801cb9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d00a      	beq.n	801cbb8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801cba2:	69fb      	ldr	r3, [r7, #28]
 801cba4:	099b      	lsrs	r3, r3, #6
 801cba6:	f003 0301 	and.w	r3, r3, #1
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d004      	beq.n	801cbb8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbb2:	6878      	ldr	r0, [r7, #4]
 801cbb4:	4798      	blx	r3
    return;
 801cbb6:	e0d7      	b.n	801cd68 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801cbb8:	69bb      	ldr	r3, [r7, #24]
 801cbba:	085b      	lsrs	r3, r3, #1
 801cbbc:	f003 0301 	and.w	r3, r3, #1
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d00a      	beq.n	801cbda <HAL_SPI_IRQHandler+0x66>
 801cbc4:	69fb      	ldr	r3, [r7, #28]
 801cbc6:	09db      	lsrs	r3, r3, #7
 801cbc8:	f003 0301 	and.w	r3, r3, #1
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d004      	beq.n	801cbda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbd4:	6878      	ldr	r0, [r7, #4]
 801cbd6:	4798      	blx	r3
    return;
 801cbd8:	e0c6      	b.n	801cd68 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cbda:	69bb      	ldr	r3, [r7, #24]
 801cbdc:	095b      	lsrs	r3, r3, #5
 801cbde:	f003 0301 	and.w	r3, r3, #1
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d10c      	bne.n	801cc00 <HAL_SPI_IRQHandler+0x8c>
 801cbe6:	69bb      	ldr	r3, [r7, #24]
 801cbe8:	099b      	lsrs	r3, r3, #6
 801cbea:	f003 0301 	and.w	r3, r3, #1
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d106      	bne.n	801cc00 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801cbf2:	69bb      	ldr	r3, [r7, #24]
 801cbf4:	0a1b      	lsrs	r3, r3, #8
 801cbf6:	f003 0301 	and.w	r3, r3, #1
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	f000 80b4 	beq.w	801cd68 <HAL_SPI_IRQHandler+0x1f4>
 801cc00:	69fb      	ldr	r3, [r7, #28]
 801cc02:	095b      	lsrs	r3, r3, #5
 801cc04:	f003 0301 	and.w	r3, r3, #1
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	f000 80ad 	beq.w	801cd68 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801cc0e:	69bb      	ldr	r3, [r7, #24]
 801cc10:	099b      	lsrs	r3, r3, #6
 801cc12:	f003 0301 	and.w	r3, r3, #1
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d023      	beq.n	801cc62 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	2b03      	cmp	r3, #3
 801cc24:	d011      	beq.n	801cc4a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc2a:	f043 0204 	orr.w	r2, r3, #4
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cc32:	2300      	movs	r3, #0
 801cc34:	617b      	str	r3, [r7, #20]
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	68db      	ldr	r3, [r3, #12]
 801cc3c:	617b      	str	r3, [r7, #20]
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	689b      	ldr	r3, [r3, #8]
 801cc44:	617b      	str	r3, [r7, #20]
 801cc46:	697b      	ldr	r3, [r7, #20]
 801cc48:	e00b      	b.n	801cc62 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	613b      	str	r3, [r7, #16]
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	68db      	ldr	r3, [r3, #12]
 801cc54:	613b      	str	r3, [r7, #16]
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	689b      	ldr	r3, [r3, #8]
 801cc5c:	613b      	str	r3, [r7, #16]
 801cc5e:	693b      	ldr	r3, [r7, #16]
        return;
 801cc60:	e082      	b.n	801cd68 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801cc62:	69bb      	ldr	r3, [r7, #24]
 801cc64:	095b      	lsrs	r3, r3, #5
 801cc66:	f003 0301 	and.w	r3, r3, #1
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d014      	beq.n	801cc98 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc72:	f043 0201 	orr.w	r2, r3, #1
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	60fb      	str	r3, [r7, #12]
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	689b      	ldr	r3, [r3, #8]
 801cc84:	60fb      	str	r3, [r7, #12]
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	681a      	ldr	r2, [r3, #0]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cc94:	601a      	str	r2, [r3, #0]
 801cc96:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801cc98:	69bb      	ldr	r3, [r7, #24]
 801cc9a:	0a1b      	lsrs	r3, r3, #8
 801cc9c:	f003 0301 	and.w	r3, r3, #1
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d00c      	beq.n	801ccbe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cca8:	f043 0208 	orr.w	r2, r3, #8
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	60bb      	str	r3, [r7, #8]
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	689b      	ldr	r3, [r3, #8]
 801ccba:	60bb      	str	r3, [r7, #8]
 801ccbc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d04f      	beq.n	801cd66 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	685a      	ldr	r2, [r3, #4]
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ccd4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	2201      	movs	r2, #1
 801ccda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801ccde:	69fb      	ldr	r3, [r7, #28]
 801cce0:	f003 0302 	and.w	r3, r3, #2
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d104      	bne.n	801ccf2 <HAL_SPI_IRQHandler+0x17e>
 801cce8:	69fb      	ldr	r3, [r7, #28]
 801ccea:	f003 0301 	and.w	r3, r3, #1
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d034      	beq.n	801cd5c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	685a      	ldr	r2, [r3, #4]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	f022 0203 	bic.w	r2, r2, #3
 801cd00:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d011      	beq.n	801cd2e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd0e:	4a18      	ldr	r2, [pc, #96]	; (801cd70 <HAL_SPI_IRQHandler+0x1fc>)
 801cd10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd16:	4618      	mov	r0, r3
 801cd18:	f7fc f81e 	bl	8018d58 <HAL_DMA_Abort_IT>
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d005      	beq.n	801cd2e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d016      	beq.n	801cd64 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd3a:	4a0d      	ldr	r2, [pc, #52]	; (801cd70 <HAL_SPI_IRQHandler+0x1fc>)
 801cd3c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd42:	4618      	mov	r0, r3
 801cd44:	f7fc f808 	bl	8018d58 <HAL_DMA_Abort_IT>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d00a      	beq.n	801cd64 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801cd5a:	e003      	b.n	801cd64 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	f000 f809 	bl	801cd74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801cd62:	e000      	b.n	801cd66 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801cd64:	bf00      	nop
    return;
 801cd66:	bf00      	nop
  }
}
 801cd68:	3720      	adds	r7, #32
 801cd6a:	46bd      	mov	sp, r7
 801cd6c:	bd80      	pop	{r7, pc}
 801cd6e:	bf00      	nop
 801cd70:	0801cda5 	.word	0x0801cda5

0801cd74 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801cd74:	b480      	push	{r7}
 801cd76:	b083      	sub	sp, #12
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801cd7c:	bf00      	nop
 801cd7e:	370c      	adds	r7, #12
 801cd80:	46bd      	mov	sp, r7
 801cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd86:	4770      	bx	lr

0801cd88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801cd88:	b480      	push	{r7}
 801cd8a:	b083      	sub	sp, #12
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801cd96:	b2db      	uxtb	r3, r3
}
 801cd98:	4618      	mov	r0, r3
 801cd9a:	370c      	adds	r7, #12
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cda2:	4770      	bx	lr

0801cda4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b084      	sub	sp, #16
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	2200      	movs	r2, #0
 801cdb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	2200      	movs	r2, #0
 801cdbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801cdbe:	68f8      	ldr	r0, [r7, #12]
 801cdc0:	f7ff ffd8 	bl	801cd74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801cdc4:	bf00      	nop
 801cdc6:	3710      	adds	r7, #16
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}

0801cdcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b088      	sub	sp, #32
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	60f8      	str	r0, [r7, #12]
 801cdd4:	60b9      	str	r1, [r7, #8]
 801cdd6:	603b      	str	r3, [r7, #0]
 801cdd8:	4613      	mov	r3, r2
 801cdda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801cddc:	f7fb fa92 	bl	8018304 <HAL_GetTick>
 801cde0:	4602      	mov	r2, r0
 801cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cde4:	1a9b      	subs	r3, r3, r2
 801cde6:	683a      	ldr	r2, [r7, #0]
 801cde8:	4413      	add	r3, r2
 801cdea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801cdec:	f7fb fa8a 	bl	8018304 <HAL_GetTick>
 801cdf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801cdf2:	4b39      	ldr	r3, [pc, #228]	; (801ced8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	015b      	lsls	r3, r3, #5
 801cdf8:	0d1b      	lsrs	r3, r3, #20
 801cdfa:	69fa      	ldr	r2, [r7, #28]
 801cdfc:	fb02 f303 	mul.w	r3, r2, r3
 801ce00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ce02:	e054      	b.n	801ceae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce0a:	d050      	beq.n	801ceae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ce0c:	f7fb fa7a 	bl	8018304 <HAL_GetTick>
 801ce10:	4602      	mov	r2, r0
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	1ad3      	subs	r3, r2, r3
 801ce16:	69fa      	ldr	r2, [r7, #28]
 801ce18:	429a      	cmp	r2, r3
 801ce1a:	d902      	bls.n	801ce22 <SPI_WaitFlagStateUntilTimeout+0x56>
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d13d      	bne.n	801ce9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	685a      	ldr	r2, [r3, #4]
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ce30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	685b      	ldr	r3, [r3, #4]
 801ce36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ce3a:	d111      	bne.n	801ce60 <SPI_WaitFlagStateUntilTimeout+0x94>
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	689b      	ldr	r3, [r3, #8]
 801ce40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ce44:	d004      	beq.n	801ce50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	689b      	ldr	r3, [r3, #8]
 801ce4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ce4e:	d107      	bne.n	801ce60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	681a      	ldr	r2, [r3, #0]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ce5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ce68:	d10f      	bne.n	801ce8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	681a      	ldr	r2, [r3, #0]
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ce78:	601a      	str	r2, [r3, #0]
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	681a      	ldr	r2, [r3, #0]
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ce88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	2201      	movs	r2, #1
 801ce8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	2200      	movs	r2, #0
 801ce96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801ce9a:	2303      	movs	r3, #3
 801ce9c:	e017      	b.n	801cece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d101      	bne.n	801cea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801cea4:	2300      	movs	r3, #0
 801cea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801cea8:	697b      	ldr	r3, [r7, #20]
 801ceaa:	3b01      	subs	r3, #1
 801ceac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	689a      	ldr	r2, [r3, #8]
 801ceb4:	68bb      	ldr	r3, [r7, #8]
 801ceb6:	4013      	ands	r3, r2
 801ceb8:	68ba      	ldr	r2, [r7, #8]
 801ceba:	429a      	cmp	r2, r3
 801cebc:	bf0c      	ite	eq
 801cebe:	2301      	moveq	r3, #1
 801cec0:	2300      	movne	r3, #0
 801cec2:	b2db      	uxtb	r3, r3
 801cec4:	461a      	mov	r2, r3
 801cec6:	79fb      	ldrb	r3, [r7, #7]
 801cec8:	429a      	cmp	r2, r3
 801ceca:	d19b      	bne.n	801ce04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801cecc:	2300      	movs	r3, #0
}
 801cece:	4618      	mov	r0, r3
 801ced0:	3720      	adds	r7, #32
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd80      	pop	{r7, pc}
 801ced6:	bf00      	nop
 801ced8:	20000588 	.word	0x20000588

0801cedc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b086      	sub	sp, #24
 801cee0:	af02      	add	r7, sp, #8
 801cee2:	60f8      	str	r0, [r7, #12]
 801cee4:	60b9      	str	r1, [r7, #8]
 801cee6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	685b      	ldr	r3, [r3, #4]
 801ceec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cef0:	d111      	bne.n	801cf16 <SPI_EndRxTransaction+0x3a>
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	689b      	ldr	r3, [r3, #8]
 801cef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cefa:	d004      	beq.n	801cf06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	689b      	ldr	r3, [r3, #8]
 801cf00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cf04:	d107      	bne.n	801cf16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	681a      	ldr	r2, [r3, #0]
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cf14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	685b      	ldr	r3, [r3, #4]
 801cf1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cf1e:	d12a      	bne.n	801cf76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801cf20:	68fb      	ldr	r3, [r7, #12]
 801cf22:	689b      	ldr	r3, [r3, #8]
 801cf24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cf28:	d012      	beq.n	801cf50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	9300      	str	r3, [sp, #0]
 801cf2e:	68bb      	ldr	r3, [r7, #8]
 801cf30:	2200      	movs	r2, #0
 801cf32:	2180      	movs	r1, #128	; 0x80
 801cf34:	68f8      	ldr	r0, [r7, #12]
 801cf36:	f7ff ff49 	bl	801cdcc <SPI_WaitFlagStateUntilTimeout>
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d02d      	beq.n	801cf9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf44:	f043 0220 	orr.w	r2, r3, #32
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cf4c:	2303      	movs	r3, #3
 801cf4e:	e026      	b.n	801cf9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	9300      	str	r3, [sp, #0]
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	2200      	movs	r2, #0
 801cf58:	2101      	movs	r1, #1
 801cf5a:	68f8      	ldr	r0, [r7, #12]
 801cf5c:	f7ff ff36 	bl	801cdcc <SPI_WaitFlagStateUntilTimeout>
 801cf60:	4603      	mov	r3, r0
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d01a      	beq.n	801cf9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cf66:	68fb      	ldr	r3, [r7, #12]
 801cf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf6a:	f043 0220 	orr.w	r2, r3, #32
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801cf72:	2303      	movs	r3, #3
 801cf74:	e013      	b.n	801cf9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	9300      	str	r3, [sp, #0]
 801cf7a:	68bb      	ldr	r3, [r7, #8]
 801cf7c:	2200      	movs	r2, #0
 801cf7e:	2101      	movs	r1, #1
 801cf80:	68f8      	ldr	r0, [r7, #12]
 801cf82:	f7ff ff23 	bl	801cdcc <SPI_WaitFlagStateUntilTimeout>
 801cf86:	4603      	mov	r3, r0
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d007      	beq.n	801cf9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf90:	f043 0220 	orr.w	r2, r3, #32
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cf98:	2303      	movs	r3, #3
 801cf9a:	e000      	b.n	801cf9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801cf9c:	2300      	movs	r3, #0
}
 801cf9e:	4618      	mov	r0, r3
 801cfa0:	3710      	adds	r7, #16
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	bd80      	pop	{r7, pc}
	...

0801cfa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b088      	sub	sp, #32
 801cfac:	af02      	add	r7, sp, #8
 801cfae:	60f8      	str	r0, [r7, #12]
 801cfb0:	60b9      	str	r1, [r7, #8]
 801cfb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801cfb4:	4b1b      	ldr	r3, [pc, #108]	; (801d024 <SPI_EndRxTxTransaction+0x7c>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	4a1b      	ldr	r2, [pc, #108]	; (801d028 <SPI_EndRxTxTransaction+0x80>)
 801cfba:	fba2 2303 	umull	r2, r3, r2, r3
 801cfbe:	0d5b      	lsrs	r3, r3, #21
 801cfc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cfc4:	fb02 f303 	mul.w	r3, r2, r3
 801cfc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cfca:	68fb      	ldr	r3, [r7, #12]
 801cfcc:	685b      	ldr	r3, [r3, #4]
 801cfce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cfd2:	d112      	bne.n	801cffa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	9300      	str	r3, [sp, #0]
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	2180      	movs	r1, #128	; 0x80
 801cfde:	68f8      	ldr	r0, [r7, #12]
 801cfe0:	f7ff fef4 	bl	801cdcc <SPI_WaitFlagStateUntilTimeout>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d016      	beq.n	801d018 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cfee:	f043 0220 	orr.w	r2, r3, #32
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801cff6:	2303      	movs	r3, #3
 801cff8:	e00f      	b.n	801d01a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801cffa:	697b      	ldr	r3, [r7, #20]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d00a      	beq.n	801d016 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801d000:	697b      	ldr	r3, [r7, #20]
 801d002:	3b01      	subs	r3, #1
 801d004:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801d006:	68fb      	ldr	r3, [r7, #12]
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	689b      	ldr	r3, [r3, #8]
 801d00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d010:	2b80      	cmp	r3, #128	; 0x80
 801d012:	d0f2      	beq.n	801cffa <SPI_EndRxTxTransaction+0x52>
 801d014:	e000      	b.n	801d018 <SPI_EndRxTxTransaction+0x70>
        break;
 801d016:	bf00      	nop
  }

  return HAL_OK;
 801d018:	2300      	movs	r3, #0
}
 801d01a:	4618      	mov	r0, r3
 801d01c:	3718      	adds	r7, #24
 801d01e:	46bd      	mov	sp, r7
 801d020:	bd80      	pop	{r7, pc}
 801d022:	bf00      	nop
 801d024:	20000588 	.word	0x20000588
 801d028:	165e9f81 	.word	0x165e9f81

0801d02c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b082      	sub	sp, #8
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d101      	bne.n	801d03e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801d03a:	2301      	movs	r3, #1
 801d03c:	e041      	b.n	801d0c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d044:	b2db      	uxtb	r3, r3
 801d046:	2b00      	cmp	r3, #0
 801d048:	d106      	bne.n	801d058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	2200      	movs	r2, #0
 801d04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801d052:	6878      	ldr	r0, [r7, #4]
 801d054:	f7fa ff68 	bl	8017f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2202      	movs	r2, #2
 801d05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681a      	ldr	r2, [r3, #0]
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	3304      	adds	r3, #4
 801d068:	4619      	mov	r1, r3
 801d06a:	4610      	mov	r0, r2
 801d06c:	f000 faea 	bl	801d644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	2201      	movs	r2, #1
 801d074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	2201      	movs	r2, #1
 801d07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	2201      	movs	r2, #1
 801d084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	2201      	movs	r2, #1
 801d08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	2201      	movs	r2, #1
 801d094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2201      	movs	r2, #1
 801d09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	2201      	movs	r2, #1
 801d0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	2201      	movs	r2, #1
 801d0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	2201      	movs	r2, #1
 801d0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801d0c0:	2300      	movs	r3, #0
}
 801d0c2:	4618      	mov	r0, r3
 801d0c4:	3708      	adds	r7, #8
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
	...

0801d0cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801d0cc:	b480      	push	{r7}
 801d0ce:	b085      	sub	sp, #20
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d0da:	b2db      	uxtb	r3, r3
 801d0dc:	2b01      	cmp	r3, #1
 801d0de:	d001      	beq.n	801d0e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801d0e0:	2301      	movs	r3, #1
 801d0e2:	e04e      	b.n	801d182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2202      	movs	r2, #2
 801d0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	68da      	ldr	r2, [r3, #12]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	f042 0201 	orr.w	r2, r2, #1
 801d0fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	4a23      	ldr	r2, [pc, #140]	; (801d190 <HAL_TIM_Base_Start_IT+0xc4>)
 801d102:	4293      	cmp	r3, r2
 801d104:	d022      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d10e:	d01d      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	4a1f      	ldr	r2, [pc, #124]	; (801d194 <HAL_TIM_Base_Start_IT+0xc8>)
 801d116:	4293      	cmp	r3, r2
 801d118:	d018      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	4a1e      	ldr	r2, [pc, #120]	; (801d198 <HAL_TIM_Base_Start_IT+0xcc>)
 801d120:	4293      	cmp	r3, r2
 801d122:	d013      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	4a1c      	ldr	r2, [pc, #112]	; (801d19c <HAL_TIM_Base_Start_IT+0xd0>)
 801d12a:	4293      	cmp	r3, r2
 801d12c:	d00e      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	4a1b      	ldr	r2, [pc, #108]	; (801d1a0 <HAL_TIM_Base_Start_IT+0xd4>)
 801d134:	4293      	cmp	r3, r2
 801d136:	d009      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	4a19      	ldr	r2, [pc, #100]	; (801d1a4 <HAL_TIM_Base_Start_IT+0xd8>)
 801d13e:	4293      	cmp	r3, r2
 801d140:	d004      	beq.n	801d14c <HAL_TIM_Base_Start_IT+0x80>
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	4a18      	ldr	r2, [pc, #96]	; (801d1a8 <HAL_TIM_Base_Start_IT+0xdc>)
 801d148:	4293      	cmp	r3, r2
 801d14a:	d111      	bne.n	801d170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	689b      	ldr	r3, [r3, #8]
 801d152:	f003 0307 	and.w	r3, r3, #7
 801d156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	2b06      	cmp	r3, #6
 801d15c:	d010      	beq.n	801d180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	681a      	ldr	r2, [r3, #0]
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	f042 0201 	orr.w	r2, r2, #1
 801d16c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d16e:	e007      	b.n	801d180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	681a      	ldr	r2, [r3, #0]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	f042 0201 	orr.w	r2, r2, #1
 801d17e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d180:	2300      	movs	r3, #0
}
 801d182:	4618      	mov	r0, r3
 801d184:	3714      	adds	r7, #20
 801d186:	46bd      	mov	sp, r7
 801d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d18c:	4770      	bx	lr
 801d18e:	bf00      	nop
 801d190:	40010000 	.word	0x40010000
 801d194:	40000400 	.word	0x40000400
 801d198:	40000800 	.word	0x40000800
 801d19c:	40000c00 	.word	0x40000c00
 801d1a0:	40010400 	.word	0x40010400
 801d1a4:	40014000 	.word	0x40014000
 801d1a8:	40001800 	.word	0x40001800

0801d1ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b082      	sub	sp, #8
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	691b      	ldr	r3, [r3, #16]
 801d1ba:	f003 0302 	and.w	r3, r3, #2
 801d1be:	2b02      	cmp	r3, #2
 801d1c0:	d122      	bne.n	801d208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	68db      	ldr	r3, [r3, #12]
 801d1c8:	f003 0302 	and.w	r3, r3, #2
 801d1cc:	2b02      	cmp	r3, #2
 801d1ce:	d11b      	bne.n	801d208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	f06f 0202 	mvn.w	r2, #2
 801d1d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	2201      	movs	r2, #1
 801d1de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	699b      	ldr	r3, [r3, #24]
 801d1e6:	f003 0303 	and.w	r3, r3, #3
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d003      	beq.n	801d1f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d1ee:	6878      	ldr	r0, [r7, #4]
 801d1f0:	f000 fa0a 	bl	801d608 <HAL_TIM_IC_CaptureCallback>
 801d1f4:	e005      	b.n	801d202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d1f6:	6878      	ldr	r0, [r7, #4]
 801d1f8:	f000 f9fc 	bl	801d5f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d1fc:	6878      	ldr	r0, [r7, #4]
 801d1fe:	f000 fa0d 	bl	801d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	2200      	movs	r2, #0
 801d206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	691b      	ldr	r3, [r3, #16]
 801d20e:	f003 0304 	and.w	r3, r3, #4
 801d212:	2b04      	cmp	r3, #4
 801d214:	d122      	bne.n	801d25c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	68db      	ldr	r3, [r3, #12]
 801d21c:	f003 0304 	and.w	r3, r3, #4
 801d220:	2b04      	cmp	r3, #4
 801d222:	d11b      	bne.n	801d25c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	f06f 0204 	mvn.w	r2, #4
 801d22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	2202      	movs	r2, #2
 801d232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	699b      	ldr	r3, [r3, #24]
 801d23a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d003      	beq.n	801d24a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d242:	6878      	ldr	r0, [r7, #4]
 801d244:	f000 f9e0 	bl	801d608 <HAL_TIM_IC_CaptureCallback>
 801d248:	e005      	b.n	801d256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f000 f9d2 	bl	801d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d250:	6878      	ldr	r0, [r7, #4]
 801d252:	f000 f9e3 	bl	801d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	2200      	movs	r2, #0
 801d25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	691b      	ldr	r3, [r3, #16]
 801d262:	f003 0308 	and.w	r3, r3, #8
 801d266:	2b08      	cmp	r3, #8
 801d268:	d122      	bne.n	801d2b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	68db      	ldr	r3, [r3, #12]
 801d270:	f003 0308 	and.w	r3, r3, #8
 801d274:	2b08      	cmp	r3, #8
 801d276:	d11b      	bne.n	801d2b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	f06f 0208 	mvn.w	r2, #8
 801d280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	2204      	movs	r2, #4
 801d286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	69db      	ldr	r3, [r3, #28]
 801d28e:	f003 0303 	and.w	r3, r3, #3
 801d292:	2b00      	cmp	r3, #0
 801d294:	d003      	beq.n	801d29e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d296:	6878      	ldr	r0, [r7, #4]
 801d298:	f000 f9b6 	bl	801d608 <HAL_TIM_IC_CaptureCallback>
 801d29c:	e005      	b.n	801d2aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d29e:	6878      	ldr	r0, [r7, #4]
 801d2a0:	f000 f9a8 	bl	801d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2a4:	6878      	ldr	r0, [r7, #4]
 801d2a6:	f000 f9b9 	bl	801d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	2200      	movs	r2, #0
 801d2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	691b      	ldr	r3, [r3, #16]
 801d2b6:	f003 0310 	and.w	r3, r3, #16
 801d2ba:	2b10      	cmp	r3, #16
 801d2bc:	d122      	bne.n	801d304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	68db      	ldr	r3, [r3, #12]
 801d2c4:	f003 0310 	and.w	r3, r3, #16
 801d2c8:	2b10      	cmp	r3, #16
 801d2ca:	d11b      	bne.n	801d304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	f06f 0210 	mvn.w	r2, #16
 801d2d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	2208      	movs	r2, #8
 801d2da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	69db      	ldr	r3, [r3, #28]
 801d2e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d003      	beq.n	801d2f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d2ea:	6878      	ldr	r0, [r7, #4]
 801d2ec:	f000 f98c 	bl	801d608 <HAL_TIM_IC_CaptureCallback>
 801d2f0:	e005      	b.n	801d2fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f000 f97e 	bl	801d5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2f8:	6878      	ldr	r0, [r7, #4]
 801d2fa:	f000 f98f 	bl	801d61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	2200      	movs	r2, #0
 801d302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	691b      	ldr	r3, [r3, #16]
 801d30a:	f003 0301 	and.w	r3, r3, #1
 801d30e:	2b01      	cmp	r3, #1
 801d310:	d10e      	bne.n	801d330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	68db      	ldr	r3, [r3, #12]
 801d318:	f003 0301 	and.w	r3, r3, #1
 801d31c:	2b01      	cmp	r3, #1
 801d31e:	d107      	bne.n	801d330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	f06f 0201 	mvn.w	r2, #1
 801d328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d32a:	6878      	ldr	r0, [r7, #4]
 801d32c:	f7fa fbd6 	bl	8017adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	691b      	ldr	r3, [r3, #16]
 801d336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d33a:	2b80      	cmp	r3, #128	; 0x80
 801d33c:	d10e      	bne.n	801d35c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	68db      	ldr	r3, [r3, #12]
 801d344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d348:	2b80      	cmp	r3, #128	; 0x80
 801d34a:	d107      	bne.n	801d35c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d356:	6878      	ldr	r0, [r7, #4]
 801d358:	f000 fce4 	bl	801dd24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	691b      	ldr	r3, [r3, #16]
 801d362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d366:	2b40      	cmp	r3, #64	; 0x40
 801d368:	d10e      	bne.n	801d388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	68db      	ldr	r3, [r3, #12]
 801d370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d374:	2b40      	cmp	r3, #64	; 0x40
 801d376:	d107      	bne.n	801d388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d382:	6878      	ldr	r0, [r7, #4]
 801d384:	f000 f954 	bl	801d630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	691b      	ldr	r3, [r3, #16]
 801d38e:	f003 0320 	and.w	r3, r3, #32
 801d392:	2b20      	cmp	r3, #32
 801d394:	d10e      	bne.n	801d3b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	68db      	ldr	r3, [r3, #12]
 801d39c:	f003 0320 	and.w	r3, r3, #32
 801d3a0:	2b20      	cmp	r3, #32
 801d3a2:	d107      	bne.n	801d3b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	f06f 0220 	mvn.w	r2, #32
 801d3ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d3ae:	6878      	ldr	r0, [r7, #4]
 801d3b0:	f000 fcae 	bl	801dd10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d3b4:	bf00      	nop
 801d3b6:	3708      	adds	r7, #8
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	bd80      	pop	{r7, pc}

0801d3bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b084      	sub	sp, #16
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d3ce:	2b01      	cmp	r3, #1
 801d3d0:	d101      	bne.n	801d3d6 <HAL_TIM_OC_ConfigChannel+0x1a>
 801d3d2:	2302      	movs	r3, #2
 801d3d4:	e046      	b.n	801d464 <HAL_TIM_OC_ConfigChannel+0xa8>
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	2201      	movs	r2, #1
 801d3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	2b0c      	cmp	r3, #12
 801d3e2:	d839      	bhi.n	801d458 <HAL_TIM_OC_ConfigChannel+0x9c>
 801d3e4:	a201      	add	r2, pc, #4	; (adr r2, 801d3ec <HAL_TIM_OC_ConfigChannel+0x30>)
 801d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3ea:	bf00      	nop
 801d3ec:	0801d421 	.word	0x0801d421
 801d3f0:	0801d459 	.word	0x0801d459
 801d3f4:	0801d459 	.word	0x0801d459
 801d3f8:	0801d459 	.word	0x0801d459
 801d3fc:	0801d42f 	.word	0x0801d42f
 801d400:	0801d459 	.word	0x0801d459
 801d404:	0801d459 	.word	0x0801d459
 801d408:	0801d459 	.word	0x0801d459
 801d40c:	0801d43d 	.word	0x0801d43d
 801d410:	0801d459 	.word	0x0801d459
 801d414:	0801d459 	.word	0x0801d459
 801d418:	0801d459 	.word	0x0801d459
 801d41c:	0801d44b 	.word	0x0801d44b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	68b9      	ldr	r1, [r7, #8]
 801d426:	4618      	mov	r0, r3
 801d428:	f000 f9ac 	bl	801d784 <TIM_OC1_SetConfig>
      break;
 801d42c:	e015      	b.n	801d45a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	68b9      	ldr	r1, [r7, #8]
 801d434:	4618      	mov	r0, r3
 801d436:	f000 fa15 	bl	801d864 <TIM_OC2_SetConfig>
      break;
 801d43a:	e00e      	b.n	801d45a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	68b9      	ldr	r1, [r7, #8]
 801d442:	4618      	mov	r0, r3
 801d444:	f000 fa84 	bl	801d950 <TIM_OC3_SetConfig>
      break;
 801d448:	e007      	b.n	801d45a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	68b9      	ldr	r1, [r7, #8]
 801d450:	4618      	mov	r0, r3
 801d452:	f000 faf1 	bl	801da38 <TIM_OC4_SetConfig>
      break;
 801d456:	e000      	b.n	801d45a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 801d458:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	2200      	movs	r2, #0
 801d45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d462:	2300      	movs	r3, #0
}
 801d464:	4618      	mov	r0, r3
 801d466:	3710      	adds	r7, #16
 801d468:	46bd      	mov	sp, r7
 801d46a:	bd80      	pop	{r7, pc}

0801d46c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801d46c:	b580      	push	{r7, lr}
 801d46e:	b084      	sub	sp, #16
 801d470:	af00      	add	r7, sp, #0
 801d472:	6078      	str	r0, [r7, #4]
 801d474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d47c:	2b01      	cmp	r3, #1
 801d47e:	d101      	bne.n	801d484 <HAL_TIM_ConfigClockSource+0x18>
 801d480:	2302      	movs	r3, #2
 801d482:	e0b3      	b.n	801d5ec <HAL_TIM_ConfigClockSource+0x180>
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	2201      	movs	r2, #1
 801d488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	2202      	movs	r2, #2
 801d490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	689b      	ldr	r3, [r3, #8]
 801d49a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801d4a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801d4aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	68fa      	ldr	r2, [r7, #12]
 801d4b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801d4b4:	683b      	ldr	r3, [r7, #0]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d4bc:	d03e      	beq.n	801d53c <HAL_TIM_ConfigClockSource+0xd0>
 801d4be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d4c2:	f200 8087 	bhi.w	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d4ca:	f000 8085 	beq.w	801d5d8 <HAL_TIM_ConfigClockSource+0x16c>
 801d4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d4d2:	d87f      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4d4:	2b70      	cmp	r3, #112	; 0x70
 801d4d6:	d01a      	beq.n	801d50e <HAL_TIM_ConfigClockSource+0xa2>
 801d4d8:	2b70      	cmp	r3, #112	; 0x70
 801d4da:	d87b      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4dc:	2b60      	cmp	r3, #96	; 0x60
 801d4de:	d050      	beq.n	801d582 <HAL_TIM_ConfigClockSource+0x116>
 801d4e0:	2b60      	cmp	r3, #96	; 0x60
 801d4e2:	d877      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4e4:	2b50      	cmp	r3, #80	; 0x50
 801d4e6:	d03c      	beq.n	801d562 <HAL_TIM_ConfigClockSource+0xf6>
 801d4e8:	2b50      	cmp	r3, #80	; 0x50
 801d4ea:	d873      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4ec:	2b40      	cmp	r3, #64	; 0x40
 801d4ee:	d058      	beq.n	801d5a2 <HAL_TIM_ConfigClockSource+0x136>
 801d4f0:	2b40      	cmp	r3, #64	; 0x40
 801d4f2:	d86f      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4f4:	2b30      	cmp	r3, #48	; 0x30
 801d4f6:	d064      	beq.n	801d5c2 <HAL_TIM_ConfigClockSource+0x156>
 801d4f8:	2b30      	cmp	r3, #48	; 0x30
 801d4fa:	d86b      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d4fc:	2b20      	cmp	r3, #32
 801d4fe:	d060      	beq.n	801d5c2 <HAL_TIM_ConfigClockSource+0x156>
 801d500:	2b20      	cmp	r3, #32
 801d502:	d867      	bhi.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
 801d504:	2b00      	cmp	r3, #0
 801d506:	d05c      	beq.n	801d5c2 <HAL_TIM_ConfigClockSource+0x156>
 801d508:	2b10      	cmp	r3, #16
 801d50a:	d05a      	beq.n	801d5c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 801d50c:	e062      	b.n	801d5d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	6818      	ldr	r0, [r3, #0]
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	6899      	ldr	r1, [r3, #8]
 801d516:	683b      	ldr	r3, [r7, #0]
 801d518:	685a      	ldr	r2, [r3, #4]
 801d51a:	683b      	ldr	r3, [r7, #0]
 801d51c:	68db      	ldr	r3, [r3, #12]
 801d51e:	f000 fb5b 	bl	801dbd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	689b      	ldr	r3, [r3, #8]
 801d528:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801d530:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	68fa      	ldr	r2, [r7, #12]
 801d538:	609a      	str	r2, [r3, #8]
      break;
 801d53a:	e04e      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	6818      	ldr	r0, [r3, #0]
 801d540:	683b      	ldr	r3, [r7, #0]
 801d542:	6899      	ldr	r1, [r3, #8]
 801d544:	683b      	ldr	r3, [r7, #0]
 801d546:	685a      	ldr	r2, [r3, #4]
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	68db      	ldr	r3, [r3, #12]
 801d54c:	f000 fb44 	bl	801dbd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	689a      	ldr	r2, [r3, #8]
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d55e:	609a      	str	r2, [r3, #8]
      break;
 801d560:	e03b      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	6818      	ldr	r0, [r3, #0]
 801d566:	683b      	ldr	r3, [r7, #0]
 801d568:	6859      	ldr	r1, [r3, #4]
 801d56a:	683b      	ldr	r3, [r7, #0]
 801d56c:	68db      	ldr	r3, [r3, #12]
 801d56e:	461a      	mov	r2, r3
 801d570:	f000 fab8 	bl	801dae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	2150      	movs	r1, #80	; 0x50
 801d57a:	4618      	mov	r0, r3
 801d57c:	f000 fb11 	bl	801dba2 <TIM_ITRx_SetConfig>
      break;
 801d580:	e02b      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	6818      	ldr	r0, [r3, #0]
 801d586:	683b      	ldr	r3, [r7, #0]
 801d588:	6859      	ldr	r1, [r3, #4]
 801d58a:	683b      	ldr	r3, [r7, #0]
 801d58c:	68db      	ldr	r3, [r3, #12]
 801d58e:	461a      	mov	r2, r3
 801d590:	f000 fad7 	bl	801db42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	2160      	movs	r1, #96	; 0x60
 801d59a:	4618      	mov	r0, r3
 801d59c:	f000 fb01 	bl	801dba2 <TIM_ITRx_SetConfig>
      break;
 801d5a0:	e01b      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6818      	ldr	r0, [r3, #0]
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	6859      	ldr	r1, [r3, #4]
 801d5aa:	683b      	ldr	r3, [r7, #0]
 801d5ac:	68db      	ldr	r3, [r3, #12]
 801d5ae:	461a      	mov	r2, r3
 801d5b0:	f000 fa98 	bl	801dae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	2140      	movs	r1, #64	; 0x40
 801d5ba:	4618      	mov	r0, r3
 801d5bc:	f000 faf1 	bl	801dba2 <TIM_ITRx_SetConfig>
      break;
 801d5c0:	e00b      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	681a      	ldr	r2, [r3, #0]
 801d5c6:	683b      	ldr	r3, [r7, #0]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	4610      	mov	r0, r2
 801d5ce:	f000 fae8 	bl	801dba2 <TIM_ITRx_SetConfig>
        break;
 801d5d2:	e002      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801d5d4:	bf00      	nop
 801d5d6:	e000      	b.n	801d5da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801d5d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	2201      	movs	r2, #1
 801d5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	2200      	movs	r2, #0
 801d5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801d5ea:	2300      	movs	r3, #0
}
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	3710      	adds	r7, #16
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bd80      	pop	{r7, pc}

0801d5f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d5f4:	b480      	push	{r7}
 801d5f6:	b083      	sub	sp, #12
 801d5f8:	af00      	add	r7, sp, #0
 801d5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d5fc:	bf00      	nop
 801d5fe:	370c      	adds	r7, #12
 801d600:	46bd      	mov	sp, r7
 801d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d606:	4770      	bx	lr

0801d608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d608:	b480      	push	{r7}
 801d60a:	b083      	sub	sp, #12
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d610:	bf00      	nop
 801d612:	370c      	adds	r7, #12
 801d614:	46bd      	mov	sp, r7
 801d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d61a:	4770      	bx	lr

0801d61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d61c:	b480      	push	{r7}
 801d61e:	b083      	sub	sp, #12
 801d620:	af00      	add	r7, sp, #0
 801d622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d624:	bf00      	nop
 801d626:	370c      	adds	r7, #12
 801d628:	46bd      	mov	sp, r7
 801d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d62e:	4770      	bx	lr

0801d630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d630:	b480      	push	{r7}
 801d632:	b083      	sub	sp, #12
 801d634:	af00      	add	r7, sp, #0
 801d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d638:	bf00      	nop
 801d63a:	370c      	adds	r7, #12
 801d63c:	46bd      	mov	sp, r7
 801d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d642:	4770      	bx	lr

0801d644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d644:	b480      	push	{r7}
 801d646:	b085      	sub	sp, #20
 801d648:	af00      	add	r7, sp, #0
 801d64a:	6078      	str	r0, [r7, #4]
 801d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	4a40      	ldr	r2, [pc, #256]	; (801d758 <TIM_Base_SetConfig+0x114>)
 801d658:	4293      	cmp	r3, r2
 801d65a:	d013      	beq.n	801d684 <TIM_Base_SetConfig+0x40>
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d662:	d00f      	beq.n	801d684 <TIM_Base_SetConfig+0x40>
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	4a3d      	ldr	r2, [pc, #244]	; (801d75c <TIM_Base_SetConfig+0x118>)
 801d668:	4293      	cmp	r3, r2
 801d66a:	d00b      	beq.n	801d684 <TIM_Base_SetConfig+0x40>
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	4a3c      	ldr	r2, [pc, #240]	; (801d760 <TIM_Base_SetConfig+0x11c>)
 801d670:	4293      	cmp	r3, r2
 801d672:	d007      	beq.n	801d684 <TIM_Base_SetConfig+0x40>
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	4a3b      	ldr	r2, [pc, #236]	; (801d764 <TIM_Base_SetConfig+0x120>)
 801d678:	4293      	cmp	r3, r2
 801d67a:	d003      	beq.n	801d684 <TIM_Base_SetConfig+0x40>
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	4a3a      	ldr	r2, [pc, #232]	; (801d768 <TIM_Base_SetConfig+0x124>)
 801d680:	4293      	cmp	r3, r2
 801d682:	d108      	bne.n	801d696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	685b      	ldr	r3, [r3, #4]
 801d690:	68fa      	ldr	r2, [r7, #12]
 801d692:	4313      	orrs	r3, r2
 801d694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	4a2f      	ldr	r2, [pc, #188]	; (801d758 <TIM_Base_SetConfig+0x114>)
 801d69a:	4293      	cmp	r3, r2
 801d69c:	d02b      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d6a4:	d027      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	4a2c      	ldr	r2, [pc, #176]	; (801d75c <TIM_Base_SetConfig+0x118>)
 801d6aa:	4293      	cmp	r3, r2
 801d6ac:	d023      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	4a2b      	ldr	r2, [pc, #172]	; (801d760 <TIM_Base_SetConfig+0x11c>)
 801d6b2:	4293      	cmp	r3, r2
 801d6b4:	d01f      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	4a2a      	ldr	r2, [pc, #168]	; (801d764 <TIM_Base_SetConfig+0x120>)
 801d6ba:	4293      	cmp	r3, r2
 801d6bc:	d01b      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	4a29      	ldr	r2, [pc, #164]	; (801d768 <TIM_Base_SetConfig+0x124>)
 801d6c2:	4293      	cmp	r3, r2
 801d6c4:	d017      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	4a28      	ldr	r2, [pc, #160]	; (801d76c <TIM_Base_SetConfig+0x128>)
 801d6ca:	4293      	cmp	r3, r2
 801d6cc:	d013      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	4a27      	ldr	r2, [pc, #156]	; (801d770 <TIM_Base_SetConfig+0x12c>)
 801d6d2:	4293      	cmp	r3, r2
 801d6d4:	d00f      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	4a26      	ldr	r2, [pc, #152]	; (801d774 <TIM_Base_SetConfig+0x130>)
 801d6da:	4293      	cmp	r3, r2
 801d6dc:	d00b      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	4a25      	ldr	r2, [pc, #148]	; (801d778 <TIM_Base_SetConfig+0x134>)
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	d007      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	4a24      	ldr	r2, [pc, #144]	; (801d77c <TIM_Base_SetConfig+0x138>)
 801d6ea:	4293      	cmp	r3, r2
 801d6ec:	d003      	beq.n	801d6f6 <TIM_Base_SetConfig+0xb2>
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	4a23      	ldr	r2, [pc, #140]	; (801d780 <TIM_Base_SetConfig+0x13c>)
 801d6f2:	4293      	cmp	r3, r2
 801d6f4:	d108      	bne.n	801d708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d6fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	68db      	ldr	r3, [r3, #12]
 801d702:	68fa      	ldr	r2, [r7, #12]
 801d704:	4313      	orrs	r3, r2
 801d706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d70e:	683b      	ldr	r3, [r7, #0]
 801d710:	695b      	ldr	r3, [r3, #20]
 801d712:	4313      	orrs	r3, r2
 801d714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	68fa      	ldr	r2, [r7, #12]
 801d71a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d71c:	683b      	ldr	r3, [r7, #0]
 801d71e:	689a      	ldr	r2, [r3, #8]
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d724:	683b      	ldr	r3, [r7, #0]
 801d726:	681a      	ldr	r2, [r3, #0]
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	4a0a      	ldr	r2, [pc, #40]	; (801d758 <TIM_Base_SetConfig+0x114>)
 801d730:	4293      	cmp	r3, r2
 801d732:	d003      	beq.n	801d73c <TIM_Base_SetConfig+0xf8>
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	4a0c      	ldr	r2, [pc, #48]	; (801d768 <TIM_Base_SetConfig+0x124>)
 801d738:	4293      	cmp	r3, r2
 801d73a:	d103      	bne.n	801d744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d73c:	683b      	ldr	r3, [r7, #0]
 801d73e:	691a      	ldr	r2, [r3, #16]
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	2201      	movs	r2, #1
 801d748:	615a      	str	r2, [r3, #20]
}
 801d74a:	bf00      	nop
 801d74c:	3714      	adds	r7, #20
 801d74e:	46bd      	mov	sp, r7
 801d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d754:	4770      	bx	lr
 801d756:	bf00      	nop
 801d758:	40010000 	.word	0x40010000
 801d75c:	40000400 	.word	0x40000400
 801d760:	40000800 	.word	0x40000800
 801d764:	40000c00 	.word	0x40000c00
 801d768:	40010400 	.word	0x40010400
 801d76c:	40014000 	.word	0x40014000
 801d770:	40014400 	.word	0x40014400
 801d774:	40014800 	.word	0x40014800
 801d778:	40001800 	.word	0x40001800
 801d77c:	40001c00 	.word	0x40001c00
 801d780:	40002000 	.word	0x40002000

0801d784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d784:	b480      	push	{r7}
 801d786:	b087      	sub	sp, #28
 801d788:	af00      	add	r7, sp, #0
 801d78a:	6078      	str	r0, [r7, #4]
 801d78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	6a1b      	ldr	r3, [r3, #32]
 801d792:	f023 0201 	bic.w	r2, r3, #1
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	6a1b      	ldr	r3, [r3, #32]
 801d79e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	685b      	ldr	r3, [r3, #4]
 801d7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	699b      	ldr	r3, [r3, #24]
 801d7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	f023 0303 	bic.w	r3, r3, #3
 801d7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d7bc:	683b      	ldr	r3, [r7, #0]
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	68fa      	ldr	r2, [r7, #12]
 801d7c2:	4313      	orrs	r3, r2
 801d7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d7c6:	697b      	ldr	r3, [r7, #20]
 801d7c8:	f023 0302 	bic.w	r3, r3, #2
 801d7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	689b      	ldr	r3, [r3, #8]
 801d7d2:	697a      	ldr	r2, [r7, #20]
 801d7d4:	4313      	orrs	r3, r2
 801d7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	4a20      	ldr	r2, [pc, #128]	; (801d85c <TIM_OC1_SetConfig+0xd8>)
 801d7dc:	4293      	cmp	r3, r2
 801d7de:	d003      	beq.n	801d7e8 <TIM_OC1_SetConfig+0x64>
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	4a1f      	ldr	r2, [pc, #124]	; (801d860 <TIM_OC1_SetConfig+0xdc>)
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	d10c      	bne.n	801d802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d7e8:	697b      	ldr	r3, [r7, #20]
 801d7ea:	f023 0308 	bic.w	r3, r3, #8
 801d7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d7f0:	683b      	ldr	r3, [r7, #0]
 801d7f2:	68db      	ldr	r3, [r3, #12]
 801d7f4:	697a      	ldr	r2, [r7, #20]
 801d7f6:	4313      	orrs	r3, r2
 801d7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d7fa:	697b      	ldr	r3, [r7, #20]
 801d7fc:	f023 0304 	bic.w	r3, r3, #4
 801d800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	4a15      	ldr	r2, [pc, #84]	; (801d85c <TIM_OC1_SetConfig+0xd8>)
 801d806:	4293      	cmp	r3, r2
 801d808:	d003      	beq.n	801d812 <TIM_OC1_SetConfig+0x8e>
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	4a14      	ldr	r2, [pc, #80]	; (801d860 <TIM_OC1_SetConfig+0xdc>)
 801d80e:	4293      	cmp	r3, r2
 801d810:	d111      	bne.n	801d836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d812:	693b      	ldr	r3, [r7, #16]
 801d814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d81a:	693b      	ldr	r3, [r7, #16]
 801d81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d822:	683b      	ldr	r3, [r7, #0]
 801d824:	695b      	ldr	r3, [r3, #20]
 801d826:	693a      	ldr	r2, [r7, #16]
 801d828:	4313      	orrs	r3, r2
 801d82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d82c:	683b      	ldr	r3, [r7, #0]
 801d82e:	699b      	ldr	r3, [r3, #24]
 801d830:	693a      	ldr	r2, [r7, #16]
 801d832:	4313      	orrs	r3, r2
 801d834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	693a      	ldr	r2, [r7, #16]
 801d83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	68fa      	ldr	r2, [r7, #12]
 801d840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d842:	683b      	ldr	r3, [r7, #0]
 801d844:	685a      	ldr	r2, [r3, #4]
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	697a      	ldr	r2, [r7, #20]
 801d84e:	621a      	str	r2, [r3, #32]
}
 801d850:	bf00      	nop
 801d852:	371c      	adds	r7, #28
 801d854:	46bd      	mov	sp, r7
 801d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85a:	4770      	bx	lr
 801d85c:	40010000 	.word	0x40010000
 801d860:	40010400 	.word	0x40010400

0801d864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d864:	b480      	push	{r7}
 801d866:	b087      	sub	sp, #28
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
 801d86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6a1b      	ldr	r3, [r3, #32]
 801d872:	f023 0210 	bic.w	r2, r3, #16
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	6a1b      	ldr	r3, [r3, #32]
 801d87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	685b      	ldr	r3, [r3, #4]
 801d884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	699b      	ldr	r3, [r3, #24]
 801d88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d89c:	683b      	ldr	r3, [r7, #0]
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	021b      	lsls	r3, r3, #8
 801d8a2:	68fa      	ldr	r2, [r7, #12]
 801d8a4:	4313      	orrs	r3, r2
 801d8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d8a8:	697b      	ldr	r3, [r7, #20]
 801d8aa:	f023 0320 	bic.w	r3, r3, #32
 801d8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d8b0:	683b      	ldr	r3, [r7, #0]
 801d8b2:	689b      	ldr	r3, [r3, #8]
 801d8b4:	011b      	lsls	r3, r3, #4
 801d8b6:	697a      	ldr	r2, [r7, #20]
 801d8b8:	4313      	orrs	r3, r2
 801d8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	4a22      	ldr	r2, [pc, #136]	; (801d948 <TIM_OC2_SetConfig+0xe4>)
 801d8c0:	4293      	cmp	r3, r2
 801d8c2:	d003      	beq.n	801d8cc <TIM_OC2_SetConfig+0x68>
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	4a21      	ldr	r2, [pc, #132]	; (801d94c <TIM_OC2_SetConfig+0xe8>)
 801d8c8:	4293      	cmp	r3, r2
 801d8ca:	d10d      	bne.n	801d8e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d8cc:	697b      	ldr	r3, [r7, #20]
 801d8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	68db      	ldr	r3, [r3, #12]
 801d8d8:	011b      	lsls	r3, r3, #4
 801d8da:	697a      	ldr	r2, [r7, #20]
 801d8dc:	4313      	orrs	r3, r2
 801d8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d8e0:	697b      	ldr	r3, [r7, #20]
 801d8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d8e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	4a17      	ldr	r2, [pc, #92]	; (801d948 <TIM_OC2_SetConfig+0xe4>)
 801d8ec:	4293      	cmp	r3, r2
 801d8ee:	d003      	beq.n	801d8f8 <TIM_OC2_SetConfig+0x94>
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	4a16      	ldr	r2, [pc, #88]	; (801d94c <TIM_OC2_SetConfig+0xe8>)
 801d8f4:	4293      	cmp	r3, r2
 801d8f6:	d113      	bne.n	801d920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d8f8:	693b      	ldr	r3, [r7, #16]
 801d8fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d8fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d900:	693b      	ldr	r3, [r7, #16]
 801d902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d908:	683b      	ldr	r3, [r7, #0]
 801d90a:	695b      	ldr	r3, [r3, #20]
 801d90c:	009b      	lsls	r3, r3, #2
 801d90e:	693a      	ldr	r2, [r7, #16]
 801d910:	4313      	orrs	r3, r2
 801d912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	699b      	ldr	r3, [r3, #24]
 801d918:	009b      	lsls	r3, r3, #2
 801d91a:	693a      	ldr	r2, [r7, #16]
 801d91c:	4313      	orrs	r3, r2
 801d91e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	693a      	ldr	r2, [r7, #16]
 801d924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	68fa      	ldr	r2, [r7, #12]
 801d92a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d92c:	683b      	ldr	r3, [r7, #0]
 801d92e:	685a      	ldr	r2, [r3, #4]
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	697a      	ldr	r2, [r7, #20]
 801d938:	621a      	str	r2, [r3, #32]
}
 801d93a:	bf00      	nop
 801d93c:	371c      	adds	r7, #28
 801d93e:	46bd      	mov	sp, r7
 801d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d944:	4770      	bx	lr
 801d946:	bf00      	nop
 801d948:	40010000 	.word	0x40010000
 801d94c:	40010400 	.word	0x40010400

0801d950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d950:	b480      	push	{r7}
 801d952:	b087      	sub	sp, #28
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
 801d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6a1b      	ldr	r3, [r3, #32]
 801d95e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	6a1b      	ldr	r3, [r3, #32]
 801d96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	685b      	ldr	r3, [r3, #4]
 801d970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	69db      	ldr	r3, [r3, #28]
 801d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	f023 0303 	bic.w	r3, r3, #3
 801d986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d988:	683b      	ldr	r3, [r7, #0]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	68fa      	ldr	r2, [r7, #12]
 801d98e:	4313      	orrs	r3, r2
 801d990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d992:	697b      	ldr	r3, [r7, #20]
 801d994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d99a:	683b      	ldr	r3, [r7, #0]
 801d99c:	689b      	ldr	r3, [r3, #8]
 801d99e:	021b      	lsls	r3, r3, #8
 801d9a0:	697a      	ldr	r2, [r7, #20]
 801d9a2:	4313      	orrs	r3, r2
 801d9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	4a21      	ldr	r2, [pc, #132]	; (801da30 <TIM_OC3_SetConfig+0xe0>)
 801d9aa:	4293      	cmp	r3, r2
 801d9ac:	d003      	beq.n	801d9b6 <TIM_OC3_SetConfig+0x66>
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	4a20      	ldr	r2, [pc, #128]	; (801da34 <TIM_OC3_SetConfig+0xe4>)
 801d9b2:	4293      	cmp	r3, r2
 801d9b4:	d10d      	bne.n	801d9d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d9b6:	697b      	ldr	r3, [r7, #20]
 801d9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d9be:	683b      	ldr	r3, [r7, #0]
 801d9c0:	68db      	ldr	r3, [r3, #12]
 801d9c2:	021b      	lsls	r3, r3, #8
 801d9c4:	697a      	ldr	r2, [r7, #20]
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d9ca:	697b      	ldr	r3, [r7, #20]
 801d9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	4a16      	ldr	r2, [pc, #88]	; (801da30 <TIM_OC3_SetConfig+0xe0>)
 801d9d6:	4293      	cmp	r3, r2
 801d9d8:	d003      	beq.n	801d9e2 <TIM_OC3_SetConfig+0x92>
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	4a15      	ldr	r2, [pc, #84]	; (801da34 <TIM_OC3_SetConfig+0xe4>)
 801d9de:	4293      	cmp	r3, r2
 801d9e0:	d113      	bne.n	801da0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d9e2:	693b      	ldr	r3, [r7, #16]
 801d9e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d9ea:	693b      	ldr	r3, [r7, #16]
 801d9ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d9f2:	683b      	ldr	r3, [r7, #0]
 801d9f4:	695b      	ldr	r3, [r3, #20]
 801d9f6:	011b      	lsls	r3, r3, #4
 801d9f8:	693a      	ldr	r2, [r7, #16]
 801d9fa:	4313      	orrs	r3, r2
 801d9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	699b      	ldr	r3, [r3, #24]
 801da02:	011b      	lsls	r3, r3, #4
 801da04:	693a      	ldr	r2, [r7, #16]
 801da06:	4313      	orrs	r3, r2
 801da08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	693a      	ldr	r2, [r7, #16]
 801da0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	68fa      	ldr	r2, [r7, #12]
 801da14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	685a      	ldr	r2, [r3, #4]
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	697a      	ldr	r2, [r7, #20]
 801da22:	621a      	str	r2, [r3, #32]
}
 801da24:	bf00      	nop
 801da26:	371c      	adds	r7, #28
 801da28:	46bd      	mov	sp, r7
 801da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da2e:	4770      	bx	lr
 801da30:	40010000 	.word	0x40010000
 801da34:	40010400 	.word	0x40010400

0801da38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da38:	b480      	push	{r7}
 801da3a:	b087      	sub	sp, #28
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
 801da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	6a1b      	ldr	r3, [r3, #32]
 801da46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	6a1b      	ldr	r3, [r3, #32]
 801da52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	685b      	ldr	r3, [r3, #4]
 801da58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	69db      	ldr	r3, [r3, #28]
 801da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801da70:	683b      	ldr	r3, [r7, #0]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	021b      	lsls	r3, r3, #8
 801da76:	68fa      	ldr	r2, [r7, #12]
 801da78:	4313      	orrs	r3, r2
 801da7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801da7c:	693b      	ldr	r3, [r7, #16]
 801da7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801da82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801da84:	683b      	ldr	r3, [r7, #0]
 801da86:	689b      	ldr	r3, [r3, #8]
 801da88:	031b      	lsls	r3, r3, #12
 801da8a:	693a      	ldr	r2, [r7, #16]
 801da8c:	4313      	orrs	r3, r2
 801da8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	4a12      	ldr	r2, [pc, #72]	; (801dadc <TIM_OC4_SetConfig+0xa4>)
 801da94:	4293      	cmp	r3, r2
 801da96:	d003      	beq.n	801daa0 <TIM_OC4_SetConfig+0x68>
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	4a11      	ldr	r2, [pc, #68]	; (801dae0 <TIM_OC4_SetConfig+0xa8>)
 801da9c:	4293      	cmp	r3, r2
 801da9e:	d109      	bne.n	801dab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801daa0:	697b      	ldr	r3, [r7, #20]
 801daa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801daa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	695b      	ldr	r3, [r3, #20]
 801daac:	019b      	lsls	r3, r3, #6
 801daae:	697a      	ldr	r2, [r7, #20]
 801dab0:	4313      	orrs	r3, r2
 801dab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	697a      	ldr	r2, [r7, #20]
 801dab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	68fa      	ldr	r2, [r7, #12]
 801dabe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801dac0:	683b      	ldr	r3, [r7, #0]
 801dac2:	685a      	ldr	r2, [r3, #4]
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	693a      	ldr	r2, [r7, #16]
 801dacc:	621a      	str	r2, [r3, #32]
}
 801dace:	bf00      	nop
 801dad0:	371c      	adds	r7, #28
 801dad2:	46bd      	mov	sp, r7
 801dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dad8:	4770      	bx	lr
 801dada:	bf00      	nop
 801dadc:	40010000 	.word	0x40010000
 801dae0:	40010400 	.word	0x40010400

0801dae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801dae4:	b480      	push	{r7}
 801dae6:	b087      	sub	sp, #28
 801dae8:	af00      	add	r7, sp, #0
 801daea:	60f8      	str	r0, [r7, #12]
 801daec:	60b9      	str	r1, [r7, #8]
 801daee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	6a1b      	ldr	r3, [r3, #32]
 801daf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	6a1b      	ldr	r3, [r3, #32]
 801dafa:	f023 0201 	bic.w	r2, r3, #1
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	699b      	ldr	r3, [r3, #24]
 801db06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801db08:	693b      	ldr	r3, [r7, #16]
 801db0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801db0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	011b      	lsls	r3, r3, #4
 801db14:	693a      	ldr	r2, [r7, #16]
 801db16:	4313      	orrs	r3, r2
 801db18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801db1a:	697b      	ldr	r3, [r7, #20]
 801db1c:	f023 030a 	bic.w	r3, r3, #10
 801db20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801db22:	697a      	ldr	r2, [r7, #20]
 801db24:	68bb      	ldr	r3, [r7, #8]
 801db26:	4313      	orrs	r3, r2
 801db28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	693a      	ldr	r2, [r7, #16]
 801db2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	697a      	ldr	r2, [r7, #20]
 801db34:	621a      	str	r2, [r3, #32]
}
 801db36:	bf00      	nop
 801db38:	371c      	adds	r7, #28
 801db3a:	46bd      	mov	sp, r7
 801db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db40:	4770      	bx	lr

0801db42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801db42:	b480      	push	{r7}
 801db44:	b087      	sub	sp, #28
 801db46:	af00      	add	r7, sp, #0
 801db48:	60f8      	str	r0, [r7, #12]
 801db4a:	60b9      	str	r1, [r7, #8]
 801db4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	6a1b      	ldr	r3, [r3, #32]
 801db52:	f023 0210 	bic.w	r2, r3, #16
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	699b      	ldr	r3, [r3, #24]
 801db5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	6a1b      	ldr	r3, [r3, #32]
 801db64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801db66:	697b      	ldr	r3, [r7, #20]
 801db68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801db6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	031b      	lsls	r3, r3, #12
 801db72:	697a      	ldr	r2, [r7, #20]
 801db74:	4313      	orrs	r3, r2
 801db76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801db7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801db80:	68bb      	ldr	r3, [r7, #8]
 801db82:	011b      	lsls	r3, r3, #4
 801db84:	693a      	ldr	r2, [r7, #16]
 801db86:	4313      	orrs	r3, r2
 801db88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	697a      	ldr	r2, [r7, #20]
 801db8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	693a      	ldr	r2, [r7, #16]
 801db94:	621a      	str	r2, [r3, #32]
}
 801db96:	bf00      	nop
 801db98:	371c      	adds	r7, #28
 801db9a:	46bd      	mov	sp, r7
 801db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba0:	4770      	bx	lr

0801dba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801dba2:	b480      	push	{r7}
 801dba4:	b085      	sub	sp, #20
 801dba6:	af00      	add	r7, sp, #0
 801dba8:	6078      	str	r0, [r7, #4]
 801dbaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	689b      	ldr	r3, [r3, #8]
 801dbb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dbb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801dbba:	683a      	ldr	r2, [r7, #0]
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	4313      	orrs	r3, r2
 801dbc0:	f043 0307 	orr.w	r3, r3, #7
 801dbc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	68fa      	ldr	r2, [r7, #12]
 801dbca:	609a      	str	r2, [r3, #8]
}
 801dbcc:	bf00      	nop
 801dbce:	3714      	adds	r7, #20
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd6:	4770      	bx	lr

0801dbd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801dbd8:	b480      	push	{r7}
 801dbda:	b087      	sub	sp, #28
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	60f8      	str	r0, [r7, #12]
 801dbe0:	60b9      	str	r1, [r7, #8]
 801dbe2:	607a      	str	r2, [r7, #4]
 801dbe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	689b      	ldr	r3, [r3, #8]
 801dbea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801dbec:	697b      	ldr	r3, [r7, #20]
 801dbee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801dbf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	021a      	lsls	r2, r3, #8
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	431a      	orrs	r2, r3
 801dbfc:	68bb      	ldr	r3, [r7, #8]
 801dbfe:	4313      	orrs	r3, r2
 801dc00:	697a      	ldr	r2, [r7, #20]
 801dc02:	4313      	orrs	r3, r2
 801dc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	697a      	ldr	r2, [r7, #20]
 801dc0a:	609a      	str	r2, [r3, #8]
}
 801dc0c:	bf00      	nop
 801dc0e:	371c      	adds	r7, #28
 801dc10:	46bd      	mov	sp, r7
 801dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc16:	4770      	bx	lr

0801dc18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dc18:	b480      	push	{r7}
 801dc1a:	b085      	sub	sp, #20
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]
 801dc20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dc28:	2b01      	cmp	r3, #1
 801dc2a:	d101      	bne.n	801dc30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dc2c:	2302      	movs	r3, #2
 801dc2e:	e05a      	b.n	801dce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	2201      	movs	r2, #1
 801dc34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	2202      	movs	r2, #2
 801dc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	685b      	ldr	r3, [r3, #4]
 801dc46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	689b      	ldr	r3, [r3, #8]
 801dc4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dc56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	68fa      	ldr	r2, [r7, #12]
 801dc5e:	4313      	orrs	r3, r2
 801dc60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	68fa      	ldr	r2, [r7, #12]
 801dc68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	681b      	ldr	r3, [r3, #0]
 801dc6e:	4a21      	ldr	r2, [pc, #132]	; (801dcf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801dc70:	4293      	cmp	r3, r2
 801dc72:	d022      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dc7c:	d01d      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	4a1d      	ldr	r2, [pc, #116]	; (801dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801dc84:	4293      	cmp	r3, r2
 801dc86:	d018      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	4a1b      	ldr	r2, [pc, #108]	; (801dcfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801dc8e:	4293      	cmp	r3, r2
 801dc90:	d013      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	4a1a      	ldr	r2, [pc, #104]	; (801dd00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801dc98:	4293      	cmp	r3, r2
 801dc9a:	d00e      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	4a18      	ldr	r2, [pc, #96]	; (801dd04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801dca2:	4293      	cmp	r3, r2
 801dca4:	d009      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	4a17      	ldr	r2, [pc, #92]	; (801dd08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d004      	beq.n	801dcba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	4a15      	ldr	r2, [pc, #84]	; (801dd0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801dcb6:	4293      	cmp	r3, r2
 801dcb8:	d10c      	bne.n	801dcd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801dcba:	68bb      	ldr	r3, [r7, #8]
 801dcbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dcc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801dcc2:	683b      	ldr	r3, [r7, #0]
 801dcc4:	685b      	ldr	r3, [r3, #4]
 801dcc6:	68ba      	ldr	r2, [r7, #8]
 801dcc8:	4313      	orrs	r3, r2
 801dcca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	68ba      	ldr	r2, [r7, #8]
 801dcd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	2201      	movs	r2, #1
 801dcd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	2200      	movs	r2, #0
 801dce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dce4:	2300      	movs	r3, #0
}
 801dce6:	4618      	mov	r0, r3
 801dce8:	3714      	adds	r7, #20
 801dcea:	46bd      	mov	sp, r7
 801dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcf0:	4770      	bx	lr
 801dcf2:	bf00      	nop
 801dcf4:	40010000 	.word	0x40010000
 801dcf8:	40000400 	.word	0x40000400
 801dcfc:	40000800 	.word	0x40000800
 801dd00:	40000c00 	.word	0x40000c00
 801dd04:	40010400 	.word	0x40010400
 801dd08:	40014000 	.word	0x40014000
 801dd0c:	40001800 	.word	0x40001800

0801dd10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dd10:	b480      	push	{r7}
 801dd12:	b083      	sub	sp, #12
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dd18:	bf00      	nop
 801dd1a:	370c      	adds	r7, #12
 801dd1c:	46bd      	mov	sp, r7
 801dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd22:	4770      	bx	lr

0801dd24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b083      	sub	sp, #12
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801dd2c:	bf00      	nop
 801dd2e:	370c      	adds	r7, #12
 801dd30:	46bd      	mov	sp, r7
 801dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd36:	4770      	bx	lr

0801dd38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dd38:	b084      	sub	sp, #16
 801dd3a:	b580      	push	{r7, lr}
 801dd3c:	b084      	sub	sp, #16
 801dd3e:	af00      	add	r7, sp, #0
 801dd40:	6078      	str	r0, [r7, #4]
 801dd42:	f107 001c 	add.w	r0, r7, #28
 801dd46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd4c:	2b01      	cmp	r3, #1
 801dd4e:	d122      	bne.n	801dd96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801dd58:	687b      	ldr	r3, [r7, #4]
 801dd5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	68db      	ldr	r3, [r3, #12]
 801dd60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801dd64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801dd68:	687a      	ldr	r2, [r7, #4]
 801dd6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	68db      	ldr	r3, [r3, #12]
 801dd70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801dd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd7a:	2b01      	cmp	r3, #1
 801dd7c:	d105      	bne.n	801dd8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	68db      	ldr	r3, [r3, #12]
 801dd82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801dd8a:	6878      	ldr	r0, [r7, #4]
 801dd8c:	f001 fac0 	bl	801f310 <USB_CoreReset>
 801dd90:	4603      	mov	r3, r0
 801dd92:	73fb      	strb	r3, [r7, #15]
 801dd94:	e01a      	b.n	801ddcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	68db      	ldr	r3, [r3, #12]
 801dd9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f001 fab4 	bl	801f310 <USB_CoreReset>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801ddac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d106      	bne.n	801ddc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	639a      	str	r2, [r3, #56]	; 0x38
 801ddbe:	e005      	b.n	801ddcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddce:	2b01      	cmp	r3, #1
 801ddd0:	d10b      	bne.n	801ddea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	689b      	ldr	r3, [r3, #8]
 801ddd6:	f043 0206 	orr.w	r2, r3, #6
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	689b      	ldr	r3, [r3, #8]
 801dde2:	f043 0220 	orr.w	r2, r3, #32
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801ddea:	7bfb      	ldrb	r3, [r7, #15]
}
 801ddec:	4618      	mov	r0, r3
 801ddee:	3710      	adds	r7, #16
 801ddf0:	46bd      	mov	sp, r7
 801ddf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ddf6:	b004      	add	sp, #16
 801ddf8:	4770      	bx	lr
	...

0801ddfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801ddfc:	b480      	push	{r7}
 801ddfe:	b087      	sub	sp, #28
 801de00:	af00      	add	r7, sp, #0
 801de02:	60f8      	str	r0, [r7, #12]
 801de04:	60b9      	str	r1, [r7, #8]
 801de06:	4613      	mov	r3, r2
 801de08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801de0a:	79fb      	ldrb	r3, [r7, #7]
 801de0c:	2b02      	cmp	r3, #2
 801de0e:	d165      	bne.n	801dedc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801de10:	68bb      	ldr	r3, [r7, #8]
 801de12:	4a41      	ldr	r2, [pc, #260]	; (801df18 <USB_SetTurnaroundTime+0x11c>)
 801de14:	4293      	cmp	r3, r2
 801de16:	d906      	bls.n	801de26 <USB_SetTurnaroundTime+0x2a>
 801de18:	68bb      	ldr	r3, [r7, #8]
 801de1a:	4a40      	ldr	r2, [pc, #256]	; (801df1c <USB_SetTurnaroundTime+0x120>)
 801de1c:	4293      	cmp	r3, r2
 801de1e:	d202      	bcs.n	801de26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801de20:	230f      	movs	r3, #15
 801de22:	617b      	str	r3, [r7, #20]
 801de24:	e062      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801de26:	68bb      	ldr	r3, [r7, #8]
 801de28:	4a3c      	ldr	r2, [pc, #240]	; (801df1c <USB_SetTurnaroundTime+0x120>)
 801de2a:	4293      	cmp	r3, r2
 801de2c:	d306      	bcc.n	801de3c <USB_SetTurnaroundTime+0x40>
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	4a3b      	ldr	r2, [pc, #236]	; (801df20 <USB_SetTurnaroundTime+0x124>)
 801de32:	4293      	cmp	r3, r2
 801de34:	d202      	bcs.n	801de3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801de36:	230e      	movs	r3, #14
 801de38:	617b      	str	r3, [r7, #20]
 801de3a:	e057      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801de3c:	68bb      	ldr	r3, [r7, #8]
 801de3e:	4a38      	ldr	r2, [pc, #224]	; (801df20 <USB_SetTurnaroundTime+0x124>)
 801de40:	4293      	cmp	r3, r2
 801de42:	d306      	bcc.n	801de52 <USB_SetTurnaroundTime+0x56>
 801de44:	68bb      	ldr	r3, [r7, #8]
 801de46:	4a37      	ldr	r2, [pc, #220]	; (801df24 <USB_SetTurnaroundTime+0x128>)
 801de48:	4293      	cmp	r3, r2
 801de4a:	d202      	bcs.n	801de52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801de4c:	230d      	movs	r3, #13
 801de4e:	617b      	str	r3, [r7, #20]
 801de50:	e04c      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801de52:	68bb      	ldr	r3, [r7, #8]
 801de54:	4a33      	ldr	r2, [pc, #204]	; (801df24 <USB_SetTurnaroundTime+0x128>)
 801de56:	4293      	cmp	r3, r2
 801de58:	d306      	bcc.n	801de68 <USB_SetTurnaroundTime+0x6c>
 801de5a:	68bb      	ldr	r3, [r7, #8]
 801de5c:	4a32      	ldr	r2, [pc, #200]	; (801df28 <USB_SetTurnaroundTime+0x12c>)
 801de5e:	4293      	cmp	r3, r2
 801de60:	d802      	bhi.n	801de68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801de62:	230c      	movs	r3, #12
 801de64:	617b      	str	r3, [r7, #20]
 801de66:	e041      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	4a2f      	ldr	r2, [pc, #188]	; (801df28 <USB_SetTurnaroundTime+0x12c>)
 801de6c:	4293      	cmp	r3, r2
 801de6e:	d906      	bls.n	801de7e <USB_SetTurnaroundTime+0x82>
 801de70:	68bb      	ldr	r3, [r7, #8]
 801de72:	4a2e      	ldr	r2, [pc, #184]	; (801df2c <USB_SetTurnaroundTime+0x130>)
 801de74:	4293      	cmp	r3, r2
 801de76:	d802      	bhi.n	801de7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801de78:	230b      	movs	r3, #11
 801de7a:	617b      	str	r3, [r7, #20]
 801de7c:	e036      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801de7e:	68bb      	ldr	r3, [r7, #8]
 801de80:	4a2a      	ldr	r2, [pc, #168]	; (801df2c <USB_SetTurnaroundTime+0x130>)
 801de82:	4293      	cmp	r3, r2
 801de84:	d906      	bls.n	801de94 <USB_SetTurnaroundTime+0x98>
 801de86:	68bb      	ldr	r3, [r7, #8]
 801de88:	4a29      	ldr	r2, [pc, #164]	; (801df30 <USB_SetTurnaroundTime+0x134>)
 801de8a:	4293      	cmp	r3, r2
 801de8c:	d802      	bhi.n	801de94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801de8e:	230a      	movs	r3, #10
 801de90:	617b      	str	r3, [r7, #20]
 801de92:	e02b      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801de94:	68bb      	ldr	r3, [r7, #8]
 801de96:	4a26      	ldr	r2, [pc, #152]	; (801df30 <USB_SetTurnaroundTime+0x134>)
 801de98:	4293      	cmp	r3, r2
 801de9a:	d906      	bls.n	801deaa <USB_SetTurnaroundTime+0xae>
 801de9c:	68bb      	ldr	r3, [r7, #8]
 801de9e:	4a25      	ldr	r2, [pc, #148]	; (801df34 <USB_SetTurnaroundTime+0x138>)
 801dea0:	4293      	cmp	r3, r2
 801dea2:	d202      	bcs.n	801deaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801dea4:	2309      	movs	r3, #9
 801dea6:	617b      	str	r3, [r7, #20]
 801dea8:	e020      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801deaa:	68bb      	ldr	r3, [r7, #8]
 801deac:	4a21      	ldr	r2, [pc, #132]	; (801df34 <USB_SetTurnaroundTime+0x138>)
 801deae:	4293      	cmp	r3, r2
 801deb0:	d306      	bcc.n	801dec0 <USB_SetTurnaroundTime+0xc4>
 801deb2:	68bb      	ldr	r3, [r7, #8]
 801deb4:	4a20      	ldr	r2, [pc, #128]	; (801df38 <USB_SetTurnaroundTime+0x13c>)
 801deb6:	4293      	cmp	r3, r2
 801deb8:	d802      	bhi.n	801dec0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801deba:	2308      	movs	r3, #8
 801debc:	617b      	str	r3, [r7, #20]
 801debe:	e015      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801dec0:	68bb      	ldr	r3, [r7, #8]
 801dec2:	4a1d      	ldr	r2, [pc, #116]	; (801df38 <USB_SetTurnaroundTime+0x13c>)
 801dec4:	4293      	cmp	r3, r2
 801dec6:	d906      	bls.n	801ded6 <USB_SetTurnaroundTime+0xda>
 801dec8:	68bb      	ldr	r3, [r7, #8]
 801deca:	4a1c      	ldr	r2, [pc, #112]	; (801df3c <USB_SetTurnaroundTime+0x140>)
 801decc:	4293      	cmp	r3, r2
 801dece:	d202      	bcs.n	801ded6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801ded0:	2307      	movs	r3, #7
 801ded2:	617b      	str	r3, [r7, #20]
 801ded4:	e00a      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801ded6:	2306      	movs	r3, #6
 801ded8:	617b      	str	r3, [r7, #20]
 801deda:	e007      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801dedc:	79fb      	ldrb	r3, [r7, #7]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d102      	bne.n	801dee8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801dee2:	2309      	movs	r3, #9
 801dee4:	617b      	str	r3, [r7, #20]
 801dee6:	e001      	b.n	801deec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801dee8:	2309      	movs	r3, #9
 801deea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	68db      	ldr	r3, [r3, #12]
 801def0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	68da      	ldr	r2, [r3, #12]
 801defc:	697b      	ldr	r3, [r7, #20]
 801defe:	029b      	lsls	r3, r3, #10
 801df00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801df04:	431a      	orrs	r2, r3
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801df0a:	2300      	movs	r3, #0
}
 801df0c:	4618      	mov	r0, r3
 801df0e:	371c      	adds	r7, #28
 801df10:	46bd      	mov	sp, r7
 801df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df16:	4770      	bx	lr
 801df18:	00d8acbf 	.word	0x00d8acbf
 801df1c:	00e4e1c0 	.word	0x00e4e1c0
 801df20:	00f42400 	.word	0x00f42400
 801df24:	01067380 	.word	0x01067380
 801df28:	011a499f 	.word	0x011a499f
 801df2c:	01312cff 	.word	0x01312cff
 801df30:	014ca43f 	.word	0x014ca43f
 801df34:	016e3600 	.word	0x016e3600
 801df38:	01a6ab1f 	.word	0x01a6ab1f
 801df3c:	01e84800 	.word	0x01e84800

0801df40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801df40:	b480      	push	{r7}
 801df42:	b083      	sub	sp, #12
 801df44:	af00      	add	r7, sp, #0
 801df46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	689b      	ldr	r3, [r3, #8]
 801df4c:	f043 0201 	orr.w	r2, r3, #1
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801df54:	2300      	movs	r3, #0
}
 801df56:	4618      	mov	r0, r3
 801df58:	370c      	adds	r7, #12
 801df5a:	46bd      	mov	sp, r7
 801df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df60:	4770      	bx	lr

0801df62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801df62:	b480      	push	{r7}
 801df64:	b083      	sub	sp, #12
 801df66:	af00      	add	r7, sp, #0
 801df68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	689b      	ldr	r3, [r3, #8]
 801df6e:	f023 0201 	bic.w	r2, r3, #1
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801df76:	2300      	movs	r3, #0
}
 801df78:	4618      	mov	r0, r3
 801df7a:	370c      	adds	r7, #12
 801df7c:	46bd      	mov	sp, r7
 801df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df82:	4770      	bx	lr

0801df84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b082      	sub	sp, #8
 801df88:	af00      	add	r7, sp, #0
 801df8a:	6078      	str	r0, [r7, #4]
 801df8c:	460b      	mov	r3, r1
 801df8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	68db      	ldr	r3, [r3, #12]
 801df94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801df9c:	78fb      	ldrb	r3, [r7, #3]
 801df9e:	2b01      	cmp	r3, #1
 801dfa0:	d106      	bne.n	801dfb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	68db      	ldr	r3, [r3, #12]
 801dfa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	60da      	str	r2, [r3, #12]
 801dfae:	e00b      	b.n	801dfc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801dfb0:	78fb      	ldrb	r3, [r7, #3]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d106      	bne.n	801dfc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	68db      	ldr	r3, [r3, #12]
 801dfba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	60da      	str	r2, [r3, #12]
 801dfc2:	e001      	b.n	801dfc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801dfc4:	2301      	movs	r3, #1
 801dfc6:	e003      	b.n	801dfd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801dfc8:	2032      	movs	r0, #50	; 0x32
 801dfca:	f7fa f9a7 	bl	801831c <HAL_Delay>

  return HAL_OK;
 801dfce:	2300      	movs	r3, #0
}
 801dfd0:	4618      	mov	r0, r3
 801dfd2:	3708      	adds	r7, #8
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801dfd8:	b084      	sub	sp, #16
 801dfda:	b580      	push	{r7, lr}
 801dfdc:	b086      	sub	sp, #24
 801dfde:	af00      	add	r7, sp, #0
 801dfe0:	6078      	str	r0, [r7, #4]
 801dfe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801dfe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801dfea:	2300      	movs	r3, #0
 801dfec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801dff2:	2300      	movs	r3, #0
 801dff4:	613b      	str	r3, [r7, #16]
 801dff6:	e009      	b.n	801e00c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801dff8:	687a      	ldr	r2, [r7, #4]
 801dffa:	693b      	ldr	r3, [r7, #16]
 801dffc:	3340      	adds	r3, #64	; 0x40
 801dffe:	009b      	lsls	r3, r3, #2
 801e000:	4413      	add	r3, r2
 801e002:	2200      	movs	r2, #0
 801e004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801e006:	693b      	ldr	r3, [r7, #16]
 801e008:	3301      	adds	r3, #1
 801e00a:	613b      	str	r3, [r7, #16]
 801e00c:	693b      	ldr	r3, [r7, #16]
 801e00e:	2b0e      	cmp	r3, #14
 801e010:	d9f2      	bls.n	801dff8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801e012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e014:	2b00      	cmp	r3, #0
 801e016:	d11c      	bne.n	801e052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e01e:	685b      	ldr	r3, [r3, #4]
 801e020:	68fa      	ldr	r2, [r7, #12]
 801e022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e026:	f043 0302 	orr.w	r3, r3, #2
 801e02a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	601a      	str	r2, [r3, #0]
 801e050:	e005      	b.n	801e05e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801e052:	687b      	ldr	r3, [r7, #4]
 801e054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e064:	461a      	mov	r2, r3
 801e066:	2300      	movs	r3, #0
 801e068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e070:	4619      	mov	r1, r3
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e078:	461a      	mov	r2, r3
 801e07a:	680b      	ldr	r3, [r1, #0]
 801e07c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801e07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e080:	2b01      	cmp	r3, #1
 801e082:	d10c      	bne.n	801e09e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e086:	2b00      	cmp	r3, #0
 801e088:	d104      	bne.n	801e094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801e08a:	2100      	movs	r1, #0
 801e08c:	6878      	ldr	r0, [r7, #4]
 801e08e:	f000 f949 	bl	801e324 <USB_SetDevSpeed>
 801e092:	e008      	b.n	801e0a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801e094:	2101      	movs	r1, #1
 801e096:	6878      	ldr	r0, [r7, #4]
 801e098:	f000 f944 	bl	801e324 <USB_SetDevSpeed>
 801e09c:	e003      	b.n	801e0a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e09e:	2103      	movs	r1, #3
 801e0a0:	6878      	ldr	r0, [r7, #4]
 801e0a2:	f000 f93f 	bl	801e324 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801e0a6:	2110      	movs	r1, #16
 801e0a8:	6878      	ldr	r0, [r7, #4]
 801e0aa:	f000 f8f3 	bl	801e294 <USB_FlushTxFifo>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d001      	beq.n	801e0b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801e0b4:	2301      	movs	r3, #1
 801e0b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e0b8:	6878      	ldr	r0, [r7, #4]
 801e0ba:	f000 f911 	bl	801e2e0 <USB_FlushRxFifo>
 801e0be:	4603      	mov	r3, r0
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d001      	beq.n	801e0c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0ce:	461a      	mov	r2, r3
 801e0d0:	2300      	movs	r3, #0
 801e0d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0da:	461a      	mov	r2, r3
 801e0dc:	2300      	movs	r3, #0
 801e0de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e0e6:	461a      	mov	r2, r3
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	613b      	str	r3, [r7, #16]
 801e0f0:	e043      	b.n	801e17a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e0f2:	693b      	ldr	r3, [r7, #16]
 801e0f4:	015a      	lsls	r2, r3, #5
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	4413      	add	r3, r2
 801e0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e108:	d118      	bne.n	801e13c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801e10a:	693b      	ldr	r3, [r7, #16]
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d10a      	bne.n	801e126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e110:	693b      	ldr	r3, [r7, #16]
 801e112:	015a      	lsls	r2, r3, #5
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	4413      	add	r3, r2
 801e118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e11c:	461a      	mov	r2, r3
 801e11e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e122:	6013      	str	r3, [r2, #0]
 801e124:	e013      	b.n	801e14e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e126:	693b      	ldr	r3, [r7, #16]
 801e128:	015a      	lsls	r2, r3, #5
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	4413      	add	r3, r2
 801e12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e132:	461a      	mov	r2, r3
 801e134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e138:	6013      	str	r3, [r2, #0]
 801e13a:	e008      	b.n	801e14e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801e13c:	693b      	ldr	r3, [r7, #16]
 801e13e:	015a      	lsls	r2, r3, #5
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	4413      	add	r3, r2
 801e144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e148:	461a      	mov	r2, r3
 801e14a:	2300      	movs	r3, #0
 801e14c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e14e:	693b      	ldr	r3, [r7, #16]
 801e150:	015a      	lsls	r2, r3, #5
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	4413      	add	r3, r2
 801e156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e15a:	461a      	mov	r2, r3
 801e15c:	2300      	movs	r3, #0
 801e15e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e160:	693b      	ldr	r3, [r7, #16]
 801e162:	015a      	lsls	r2, r3, #5
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	4413      	add	r3, r2
 801e168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e16c:	461a      	mov	r2, r3
 801e16e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e174:	693b      	ldr	r3, [r7, #16]
 801e176:	3301      	adds	r3, #1
 801e178:	613b      	str	r3, [r7, #16]
 801e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e17c:	693a      	ldr	r2, [r7, #16]
 801e17e:	429a      	cmp	r2, r3
 801e180:	d3b7      	bcc.n	801e0f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e182:	2300      	movs	r3, #0
 801e184:	613b      	str	r3, [r7, #16]
 801e186:	e043      	b.n	801e210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e188:	693b      	ldr	r3, [r7, #16]
 801e18a:	015a      	lsls	r2, r3, #5
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	4413      	add	r3, r2
 801e190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e19a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e19e:	d118      	bne.n	801e1d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801e1a0:	693b      	ldr	r3, [r7, #16]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d10a      	bne.n	801e1bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e1a6:	693b      	ldr	r3, [r7, #16]
 801e1a8:	015a      	lsls	r2, r3, #5
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	4413      	add	r3, r2
 801e1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e1b2:	461a      	mov	r2, r3
 801e1b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801e1b8:	6013      	str	r3, [r2, #0]
 801e1ba:	e013      	b.n	801e1e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e1bc:	693b      	ldr	r3, [r7, #16]
 801e1be:	015a      	lsls	r2, r3, #5
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	4413      	add	r3, r2
 801e1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e1c8:	461a      	mov	r2, r3
 801e1ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801e1ce:	6013      	str	r3, [r2, #0]
 801e1d0:	e008      	b.n	801e1e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e1d2:	693b      	ldr	r3, [r7, #16]
 801e1d4:	015a      	lsls	r2, r3, #5
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	4413      	add	r3, r2
 801e1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e1de:	461a      	mov	r2, r3
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e1e4:	693b      	ldr	r3, [r7, #16]
 801e1e6:	015a      	lsls	r2, r3, #5
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	4413      	add	r3, r2
 801e1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e1f0:	461a      	mov	r2, r3
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e1f6:	693b      	ldr	r3, [r7, #16]
 801e1f8:	015a      	lsls	r2, r3, #5
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	4413      	add	r3, r2
 801e1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e202:	461a      	mov	r2, r3
 801e204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801e208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e20a:	693b      	ldr	r3, [r7, #16]
 801e20c:	3301      	adds	r3, #1
 801e20e:	613b      	str	r3, [r7, #16]
 801e210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e212:	693a      	ldr	r2, [r7, #16]
 801e214:	429a      	cmp	r2, r3
 801e216:	d3b7      	bcc.n	801e188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e21e:	691b      	ldr	r3, [r3, #16]
 801e220:	68fa      	ldr	r2, [r7, #12]
 801e222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801e226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e22a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	2200      	movs	r2, #0
 801e230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801e238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801e23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d105      	bne.n	801e24c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	699b      	ldr	r3, [r3, #24]
 801e244:	f043 0210 	orr.w	r2, r3, #16
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	699a      	ldr	r2, [r3, #24]
 801e250:	4b0f      	ldr	r3, [pc, #60]	; (801e290 <USB_DevInit+0x2b8>)
 801e252:	4313      	orrs	r3, r2
 801e254:	687a      	ldr	r2, [r7, #4]
 801e256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801e258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d005      	beq.n	801e26a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	699b      	ldr	r3, [r3, #24]
 801e262:	f043 0208 	orr.w	r2, r3, #8
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801e26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e26c:	2b01      	cmp	r3, #1
 801e26e:	d107      	bne.n	801e280 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	699b      	ldr	r3, [r3, #24]
 801e274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e278:	f043 0304 	orr.w	r3, r3, #4
 801e27c:	687a      	ldr	r2, [r7, #4]
 801e27e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801e280:	7dfb      	ldrb	r3, [r7, #23]
}
 801e282:	4618      	mov	r0, r3
 801e284:	3718      	adds	r7, #24
 801e286:	46bd      	mov	sp, r7
 801e288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e28c:	b004      	add	sp, #16
 801e28e:	4770      	bx	lr
 801e290:	803c3800 	.word	0x803c3800

0801e294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801e294:	b480      	push	{r7}
 801e296:	b085      	sub	sp, #20
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
 801e29c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801e29e:	2300      	movs	r3, #0
 801e2a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e2a2:	683b      	ldr	r3, [r7, #0]
 801e2a4:	019b      	lsls	r3, r3, #6
 801e2a6:	f043 0220 	orr.w	r2, r3, #32
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	60fb      	str	r3, [r7, #12]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	4a09      	ldr	r2, [pc, #36]	; (801e2dc <USB_FlushTxFifo+0x48>)
 801e2b8:	4293      	cmp	r3, r2
 801e2ba:	d901      	bls.n	801e2c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801e2bc:	2303      	movs	r3, #3
 801e2be:	e006      	b.n	801e2ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	691b      	ldr	r3, [r3, #16]
 801e2c4:	f003 0320 	and.w	r3, r3, #32
 801e2c8:	2b20      	cmp	r3, #32
 801e2ca:	d0f0      	beq.n	801e2ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801e2cc:	2300      	movs	r3, #0
}
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	3714      	adds	r7, #20
 801e2d2:	46bd      	mov	sp, r7
 801e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2d8:	4770      	bx	lr
 801e2da:	bf00      	nop
 801e2dc:	00030d40 	.word	0x00030d40

0801e2e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801e2e0:	b480      	push	{r7}
 801e2e2:	b085      	sub	sp, #20
 801e2e4:	af00      	add	r7, sp, #0
 801e2e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801e2e8:	2300      	movs	r3, #0
 801e2ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	2210      	movs	r2, #16
 801e2f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	3301      	adds	r3, #1
 801e2f6:	60fb      	str	r3, [r7, #12]
 801e2f8:	68fb      	ldr	r3, [r7, #12]
 801e2fa:	4a09      	ldr	r2, [pc, #36]	; (801e320 <USB_FlushRxFifo+0x40>)
 801e2fc:	4293      	cmp	r3, r2
 801e2fe:	d901      	bls.n	801e304 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801e300:	2303      	movs	r3, #3
 801e302:	e006      	b.n	801e312 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	691b      	ldr	r3, [r3, #16]
 801e308:	f003 0310 	and.w	r3, r3, #16
 801e30c:	2b10      	cmp	r3, #16
 801e30e:	d0f0      	beq.n	801e2f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801e310:	2300      	movs	r3, #0
}
 801e312:	4618      	mov	r0, r3
 801e314:	3714      	adds	r7, #20
 801e316:	46bd      	mov	sp, r7
 801e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e31c:	4770      	bx	lr
 801e31e:	bf00      	nop
 801e320:	00030d40 	.word	0x00030d40

0801e324 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801e324:	b480      	push	{r7}
 801e326:	b085      	sub	sp, #20
 801e328:	af00      	add	r7, sp, #0
 801e32a:	6078      	str	r0, [r7, #4]
 801e32c:	460b      	mov	r3, r1
 801e32e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e33a:	681a      	ldr	r2, [r3, #0]
 801e33c:	78fb      	ldrb	r3, [r7, #3]
 801e33e:	68f9      	ldr	r1, [r7, #12]
 801e340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e344:	4313      	orrs	r3, r2
 801e346:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801e348:	2300      	movs	r3, #0
}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3714      	adds	r7, #20
 801e34e:	46bd      	mov	sp, r7
 801e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e354:	4770      	bx	lr

0801e356 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801e356:	b480      	push	{r7}
 801e358:	b087      	sub	sp, #28
 801e35a:	af00      	add	r7, sp, #0
 801e35c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e362:	693b      	ldr	r3, [r7, #16]
 801e364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e368:	689b      	ldr	r3, [r3, #8]
 801e36a:	f003 0306 	and.w	r3, r3, #6
 801e36e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	2b00      	cmp	r3, #0
 801e374:	d102      	bne.n	801e37c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801e376:	2300      	movs	r3, #0
 801e378:	75fb      	strb	r3, [r7, #23]
 801e37a:	e00a      	b.n	801e392 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	2b02      	cmp	r3, #2
 801e380:	d002      	beq.n	801e388 <USB_GetDevSpeed+0x32>
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	2b06      	cmp	r3, #6
 801e386:	d102      	bne.n	801e38e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801e388:	2302      	movs	r3, #2
 801e38a:	75fb      	strb	r3, [r7, #23]
 801e38c:	e001      	b.n	801e392 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801e38e:	230f      	movs	r3, #15
 801e390:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801e392:	7dfb      	ldrb	r3, [r7, #23]
}
 801e394:	4618      	mov	r0, r3
 801e396:	371c      	adds	r7, #28
 801e398:	46bd      	mov	sp, r7
 801e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e39e:	4770      	bx	lr

0801e3a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e3a0:	b480      	push	{r7}
 801e3a2:	b085      	sub	sp, #20
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
 801e3a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e3ae:	683b      	ldr	r3, [r7, #0]
 801e3b0:	781b      	ldrb	r3, [r3, #0]
 801e3b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801e3b4:	683b      	ldr	r3, [r7, #0]
 801e3b6:	785b      	ldrb	r3, [r3, #1]
 801e3b8:	2b01      	cmp	r3, #1
 801e3ba:	d13a      	bne.n	801e432 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e3c2:	69da      	ldr	r2, [r3, #28]
 801e3c4:	683b      	ldr	r3, [r7, #0]
 801e3c6:	781b      	ldrb	r3, [r3, #0]
 801e3c8:	f003 030f 	and.w	r3, r3, #15
 801e3cc:	2101      	movs	r1, #1
 801e3ce:	fa01 f303 	lsl.w	r3, r1, r3
 801e3d2:	b29b      	uxth	r3, r3
 801e3d4:	68f9      	ldr	r1, [r7, #12]
 801e3d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e3da:	4313      	orrs	r3, r2
 801e3dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e3de:	68bb      	ldr	r3, [r7, #8]
 801e3e0:	015a      	lsls	r2, r3, #5
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	4413      	add	r3, r2
 801e3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d155      	bne.n	801e4a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e3f4:	68bb      	ldr	r3, [r7, #8]
 801e3f6:	015a      	lsls	r2, r3, #5
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	4413      	add	r3, r2
 801e3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e400:	681a      	ldr	r2, [r3, #0]
 801e402:	683b      	ldr	r3, [r7, #0]
 801e404:	689b      	ldr	r3, [r3, #8]
 801e406:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e40a:	683b      	ldr	r3, [r7, #0]
 801e40c:	78db      	ldrb	r3, [r3, #3]
 801e40e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e410:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e412:	68bb      	ldr	r3, [r7, #8]
 801e414:	059b      	lsls	r3, r3, #22
 801e416:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e418:	4313      	orrs	r3, r2
 801e41a:	68ba      	ldr	r2, [r7, #8]
 801e41c:	0151      	lsls	r1, r2, #5
 801e41e:	68fa      	ldr	r2, [r7, #12]
 801e420:	440a      	add	r2, r1
 801e422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e42e:	6013      	str	r3, [r2, #0]
 801e430:	e036      	b.n	801e4a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e438:	69da      	ldr	r2, [r3, #28]
 801e43a:	683b      	ldr	r3, [r7, #0]
 801e43c:	781b      	ldrb	r3, [r3, #0]
 801e43e:	f003 030f 	and.w	r3, r3, #15
 801e442:	2101      	movs	r1, #1
 801e444:	fa01 f303 	lsl.w	r3, r1, r3
 801e448:	041b      	lsls	r3, r3, #16
 801e44a:	68f9      	ldr	r1, [r7, #12]
 801e44c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e450:	4313      	orrs	r3, r2
 801e452:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e454:	68bb      	ldr	r3, [r7, #8]
 801e456:	015a      	lsls	r2, r3, #5
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	4413      	add	r3, r2
 801e45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e466:	2b00      	cmp	r3, #0
 801e468:	d11a      	bne.n	801e4a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e46a:	68bb      	ldr	r3, [r7, #8]
 801e46c:	015a      	lsls	r2, r3, #5
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	4413      	add	r3, r2
 801e472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e476:	681a      	ldr	r2, [r3, #0]
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	689b      	ldr	r3, [r3, #8]
 801e47c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801e480:	683b      	ldr	r3, [r7, #0]
 801e482:	78db      	ldrb	r3, [r3, #3]
 801e484:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e486:	430b      	orrs	r3, r1
 801e488:	4313      	orrs	r3, r2
 801e48a:	68ba      	ldr	r2, [r7, #8]
 801e48c:	0151      	lsls	r1, r2, #5
 801e48e:	68fa      	ldr	r2, [r7, #12]
 801e490:	440a      	add	r2, r1
 801e492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e49a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e49e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801e4a0:	2300      	movs	r3, #0
}
 801e4a2:	4618      	mov	r0, r3
 801e4a4:	3714      	adds	r7, #20
 801e4a6:	46bd      	mov	sp, r7
 801e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ac:	4770      	bx	lr
	...

0801e4b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801e4b0:	b480      	push	{r7}
 801e4b2:	b085      	sub	sp, #20
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	6078      	str	r0, [r7, #4]
 801e4b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801e4be:	683b      	ldr	r3, [r7, #0]
 801e4c0:	781b      	ldrb	r3, [r3, #0]
 801e4c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801e4c4:	683b      	ldr	r3, [r7, #0]
 801e4c6:	785b      	ldrb	r3, [r3, #1]
 801e4c8:	2b01      	cmp	r3, #1
 801e4ca:	d161      	bne.n	801e590 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e4cc:	68bb      	ldr	r3, [r7, #8]
 801e4ce:	015a      	lsls	r2, r3, #5
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	4413      	add	r3, r2
 801e4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e4de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e4e2:	d11f      	bne.n	801e524 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e4e4:	68bb      	ldr	r3, [r7, #8]
 801e4e6:	015a      	lsls	r2, r3, #5
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	4413      	add	r3, r2
 801e4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	68ba      	ldr	r2, [r7, #8]
 801e4f4:	0151      	lsls	r1, r2, #5
 801e4f6:	68fa      	ldr	r2, [r7, #12]
 801e4f8:	440a      	add	r2, r1
 801e4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e4fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e502:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e504:	68bb      	ldr	r3, [r7, #8]
 801e506:	015a      	lsls	r2, r3, #5
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	4413      	add	r3, r2
 801e50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	68ba      	ldr	r2, [r7, #8]
 801e514:	0151      	lsls	r1, r2, #5
 801e516:	68fa      	ldr	r2, [r7, #12]
 801e518:	440a      	add	r2, r1
 801e51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e51e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e52c:	683b      	ldr	r3, [r7, #0]
 801e52e:	781b      	ldrb	r3, [r3, #0]
 801e530:	f003 030f 	and.w	r3, r3, #15
 801e534:	2101      	movs	r1, #1
 801e536:	fa01 f303 	lsl.w	r3, r1, r3
 801e53a:	b29b      	uxth	r3, r3
 801e53c:	43db      	mvns	r3, r3
 801e53e:	68f9      	ldr	r1, [r7, #12]
 801e540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e544:	4013      	ands	r3, r2
 801e546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e54e:	69da      	ldr	r2, [r3, #28]
 801e550:	683b      	ldr	r3, [r7, #0]
 801e552:	781b      	ldrb	r3, [r3, #0]
 801e554:	f003 030f 	and.w	r3, r3, #15
 801e558:	2101      	movs	r1, #1
 801e55a:	fa01 f303 	lsl.w	r3, r1, r3
 801e55e:	b29b      	uxth	r3, r3
 801e560:	43db      	mvns	r3, r3
 801e562:	68f9      	ldr	r1, [r7, #12]
 801e564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e568:	4013      	ands	r3, r2
 801e56a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e56c:	68bb      	ldr	r3, [r7, #8]
 801e56e:	015a      	lsls	r2, r3, #5
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	4413      	add	r3, r2
 801e574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e578:	681a      	ldr	r2, [r3, #0]
 801e57a:	68bb      	ldr	r3, [r7, #8]
 801e57c:	0159      	lsls	r1, r3, #5
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	440b      	add	r3, r1
 801e582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e586:	4619      	mov	r1, r3
 801e588:	4b35      	ldr	r3, [pc, #212]	; (801e660 <USB_DeactivateEndpoint+0x1b0>)
 801e58a:	4013      	ands	r3, r2
 801e58c:	600b      	str	r3, [r1, #0]
 801e58e:	e060      	b.n	801e652 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e590:	68bb      	ldr	r3, [r7, #8]
 801e592:	015a      	lsls	r2, r3, #5
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	4413      	add	r3, r2
 801e598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801e5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801e5a6:	d11f      	bne.n	801e5e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e5a8:	68bb      	ldr	r3, [r7, #8]
 801e5aa:	015a      	lsls	r2, r3, #5
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	4413      	add	r3, r2
 801e5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	68ba      	ldr	r2, [r7, #8]
 801e5b8:	0151      	lsls	r1, r2, #5
 801e5ba:	68fa      	ldr	r2, [r7, #12]
 801e5bc:	440a      	add	r2, r1
 801e5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e5c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e5c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e5c8:	68bb      	ldr	r3, [r7, #8]
 801e5ca:	015a      	lsls	r2, r3, #5
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	4413      	add	r3, r2
 801e5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	68ba      	ldr	r2, [r7, #8]
 801e5d8:	0151      	lsls	r1, r2, #5
 801e5da:	68fa      	ldr	r2, [r7, #12]
 801e5dc:	440a      	add	r2, r1
 801e5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e5e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801e5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e5f0:	683b      	ldr	r3, [r7, #0]
 801e5f2:	781b      	ldrb	r3, [r3, #0]
 801e5f4:	f003 030f 	and.w	r3, r3, #15
 801e5f8:	2101      	movs	r1, #1
 801e5fa:	fa01 f303 	lsl.w	r3, r1, r3
 801e5fe:	041b      	lsls	r3, r3, #16
 801e600:	43db      	mvns	r3, r3
 801e602:	68f9      	ldr	r1, [r7, #12]
 801e604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e608:	4013      	ands	r3, r2
 801e60a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e60c:	68fb      	ldr	r3, [r7, #12]
 801e60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e612:	69da      	ldr	r2, [r3, #28]
 801e614:	683b      	ldr	r3, [r7, #0]
 801e616:	781b      	ldrb	r3, [r3, #0]
 801e618:	f003 030f 	and.w	r3, r3, #15
 801e61c:	2101      	movs	r1, #1
 801e61e:	fa01 f303 	lsl.w	r3, r1, r3
 801e622:	041b      	lsls	r3, r3, #16
 801e624:	43db      	mvns	r3, r3
 801e626:	68f9      	ldr	r1, [r7, #12]
 801e628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e62c:	4013      	ands	r3, r2
 801e62e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e630:	68bb      	ldr	r3, [r7, #8]
 801e632:	015a      	lsls	r2, r3, #5
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	4413      	add	r3, r2
 801e638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e63c:	681a      	ldr	r2, [r3, #0]
 801e63e:	68bb      	ldr	r3, [r7, #8]
 801e640:	0159      	lsls	r1, r3, #5
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	440b      	add	r3, r1
 801e646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e64a:	4619      	mov	r1, r3
 801e64c:	4b05      	ldr	r3, [pc, #20]	; (801e664 <USB_DeactivateEndpoint+0x1b4>)
 801e64e:	4013      	ands	r3, r2
 801e650:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801e652:	2300      	movs	r3, #0
}
 801e654:	4618      	mov	r0, r3
 801e656:	3714      	adds	r7, #20
 801e658:	46bd      	mov	sp, r7
 801e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e65e:	4770      	bx	lr
 801e660:	ec337800 	.word	0xec337800
 801e664:	eff37800 	.word	0xeff37800

0801e668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801e668:	b580      	push	{r7, lr}
 801e66a:	b08a      	sub	sp, #40	; 0x28
 801e66c:	af02      	add	r7, sp, #8
 801e66e:	60f8      	str	r0, [r7, #12]
 801e670:	60b9      	str	r1, [r7, #8]
 801e672:	4613      	mov	r3, r2
 801e674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801e67a:	68bb      	ldr	r3, [r7, #8]
 801e67c:	781b      	ldrb	r3, [r3, #0]
 801e67e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801e680:	68bb      	ldr	r3, [r7, #8]
 801e682:	785b      	ldrb	r3, [r3, #1]
 801e684:	2b01      	cmp	r3, #1
 801e686:	f040 815c 	bne.w	801e942 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801e68a:	68bb      	ldr	r3, [r7, #8]
 801e68c:	695b      	ldr	r3, [r3, #20]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d132      	bne.n	801e6f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e692:	69bb      	ldr	r3, [r7, #24]
 801e694:	015a      	lsls	r2, r3, #5
 801e696:	69fb      	ldr	r3, [r7, #28]
 801e698:	4413      	add	r3, r2
 801e69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e69e:	691b      	ldr	r3, [r3, #16]
 801e6a0:	69ba      	ldr	r2, [r7, #24]
 801e6a2:	0151      	lsls	r1, r2, #5
 801e6a4:	69fa      	ldr	r2, [r7, #28]
 801e6a6:	440a      	add	r2, r1
 801e6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e6b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e6b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e6b6:	69bb      	ldr	r3, [r7, #24]
 801e6b8:	015a      	lsls	r2, r3, #5
 801e6ba:	69fb      	ldr	r3, [r7, #28]
 801e6bc:	4413      	add	r3, r2
 801e6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6c2:	691b      	ldr	r3, [r3, #16]
 801e6c4:	69ba      	ldr	r2, [r7, #24]
 801e6c6:	0151      	lsls	r1, r2, #5
 801e6c8:	69fa      	ldr	r2, [r7, #28]
 801e6ca:	440a      	add	r2, r1
 801e6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e6d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e6d6:	69bb      	ldr	r3, [r7, #24]
 801e6d8:	015a      	lsls	r2, r3, #5
 801e6da:	69fb      	ldr	r3, [r7, #28]
 801e6dc:	4413      	add	r3, r2
 801e6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e6e2:	691b      	ldr	r3, [r3, #16]
 801e6e4:	69ba      	ldr	r2, [r7, #24]
 801e6e6:	0151      	lsls	r1, r2, #5
 801e6e8:	69fa      	ldr	r2, [r7, #28]
 801e6ea:	440a      	add	r2, r1
 801e6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e6f0:	0cdb      	lsrs	r3, r3, #19
 801e6f2:	04db      	lsls	r3, r3, #19
 801e6f4:	6113      	str	r3, [r2, #16]
 801e6f6:	e074      	b.n	801e7e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e6f8:	69bb      	ldr	r3, [r7, #24]
 801e6fa:	015a      	lsls	r2, r3, #5
 801e6fc:	69fb      	ldr	r3, [r7, #28]
 801e6fe:	4413      	add	r3, r2
 801e700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e704:	691b      	ldr	r3, [r3, #16]
 801e706:	69ba      	ldr	r2, [r7, #24]
 801e708:	0151      	lsls	r1, r2, #5
 801e70a:	69fa      	ldr	r2, [r7, #28]
 801e70c:	440a      	add	r2, r1
 801e70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e712:	0cdb      	lsrs	r3, r3, #19
 801e714:	04db      	lsls	r3, r3, #19
 801e716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e718:	69bb      	ldr	r3, [r7, #24]
 801e71a:	015a      	lsls	r2, r3, #5
 801e71c:	69fb      	ldr	r3, [r7, #28]
 801e71e:	4413      	add	r3, r2
 801e720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e724:	691b      	ldr	r3, [r3, #16]
 801e726:	69ba      	ldr	r2, [r7, #24]
 801e728:	0151      	lsls	r1, r2, #5
 801e72a:	69fa      	ldr	r2, [r7, #28]
 801e72c:	440a      	add	r2, r1
 801e72e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e732:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e736:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e73a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801e73c:	69bb      	ldr	r3, [r7, #24]
 801e73e:	015a      	lsls	r2, r3, #5
 801e740:	69fb      	ldr	r3, [r7, #28]
 801e742:	4413      	add	r3, r2
 801e744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e748:	691a      	ldr	r2, [r3, #16]
 801e74a:	68bb      	ldr	r3, [r7, #8]
 801e74c:	6959      	ldr	r1, [r3, #20]
 801e74e:	68bb      	ldr	r3, [r7, #8]
 801e750:	689b      	ldr	r3, [r3, #8]
 801e752:	440b      	add	r3, r1
 801e754:	1e59      	subs	r1, r3, #1
 801e756:	68bb      	ldr	r3, [r7, #8]
 801e758:	689b      	ldr	r3, [r3, #8]
 801e75a:	fbb1 f3f3 	udiv	r3, r1, r3
 801e75e:	04d9      	lsls	r1, r3, #19
 801e760:	4b9d      	ldr	r3, [pc, #628]	; (801e9d8 <USB_EPStartXfer+0x370>)
 801e762:	400b      	ands	r3, r1
 801e764:	69b9      	ldr	r1, [r7, #24]
 801e766:	0148      	lsls	r0, r1, #5
 801e768:	69f9      	ldr	r1, [r7, #28]
 801e76a:	4401      	add	r1, r0
 801e76c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e770:	4313      	orrs	r3, r2
 801e772:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e774:	69bb      	ldr	r3, [r7, #24]
 801e776:	015a      	lsls	r2, r3, #5
 801e778:	69fb      	ldr	r3, [r7, #28]
 801e77a:	4413      	add	r3, r2
 801e77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e780:	691a      	ldr	r2, [r3, #16]
 801e782:	68bb      	ldr	r3, [r7, #8]
 801e784:	695b      	ldr	r3, [r3, #20]
 801e786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e78a:	69b9      	ldr	r1, [r7, #24]
 801e78c:	0148      	lsls	r0, r1, #5
 801e78e:	69f9      	ldr	r1, [r7, #28]
 801e790:	4401      	add	r1, r0
 801e792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801e796:	4313      	orrs	r3, r2
 801e798:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801e79a:	68bb      	ldr	r3, [r7, #8]
 801e79c:	78db      	ldrb	r3, [r3, #3]
 801e79e:	2b01      	cmp	r3, #1
 801e7a0:	d11f      	bne.n	801e7e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e7a2:	69bb      	ldr	r3, [r7, #24]
 801e7a4:	015a      	lsls	r2, r3, #5
 801e7a6:	69fb      	ldr	r3, [r7, #28]
 801e7a8:	4413      	add	r3, r2
 801e7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7ae:	691b      	ldr	r3, [r3, #16]
 801e7b0:	69ba      	ldr	r2, [r7, #24]
 801e7b2:	0151      	lsls	r1, r2, #5
 801e7b4:	69fa      	ldr	r2, [r7, #28]
 801e7b6:	440a      	add	r2, r1
 801e7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801e7c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801e7c2:	69bb      	ldr	r3, [r7, #24]
 801e7c4:	015a      	lsls	r2, r3, #5
 801e7c6:	69fb      	ldr	r3, [r7, #28]
 801e7c8:	4413      	add	r3, r2
 801e7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7ce:	691b      	ldr	r3, [r3, #16]
 801e7d0:	69ba      	ldr	r2, [r7, #24]
 801e7d2:	0151      	lsls	r1, r2, #5
 801e7d4:	69fa      	ldr	r2, [r7, #28]
 801e7d6:	440a      	add	r2, r1
 801e7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e7dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e7e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801e7e2:	79fb      	ldrb	r3, [r7, #7]
 801e7e4:	2b01      	cmp	r3, #1
 801e7e6:	d14b      	bne.n	801e880 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801e7e8:	68bb      	ldr	r3, [r7, #8]
 801e7ea:	691b      	ldr	r3, [r3, #16]
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d009      	beq.n	801e804 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801e7f0:	69bb      	ldr	r3, [r7, #24]
 801e7f2:	015a      	lsls	r2, r3, #5
 801e7f4:	69fb      	ldr	r3, [r7, #28]
 801e7f6:	4413      	add	r3, r2
 801e7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e7fc:	461a      	mov	r2, r3
 801e7fe:	68bb      	ldr	r3, [r7, #8]
 801e800:	691b      	ldr	r3, [r3, #16]
 801e802:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801e804:	68bb      	ldr	r3, [r7, #8]
 801e806:	78db      	ldrb	r3, [r3, #3]
 801e808:	2b01      	cmp	r3, #1
 801e80a:	d128      	bne.n	801e85e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e80c:	69fb      	ldr	r3, [r7, #28]
 801e80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e812:	689b      	ldr	r3, [r3, #8]
 801e814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d110      	bne.n	801e83e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e81c:	69bb      	ldr	r3, [r7, #24]
 801e81e:	015a      	lsls	r2, r3, #5
 801e820:	69fb      	ldr	r3, [r7, #28]
 801e822:	4413      	add	r3, r2
 801e824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	69ba      	ldr	r2, [r7, #24]
 801e82c:	0151      	lsls	r1, r2, #5
 801e82e:	69fa      	ldr	r2, [r7, #28]
 801e830:	440a      	add	r2, r1
 801e832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e83a:	6013      	str	r3, [r2, #0]
 801e83c:	e00f      	b.n	801e85e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e83e:	69bb      	ldr	r3, [r7, #24]
 801e840:	015a      	lsls	r2, r3, #5
 801e842:	69fb      	ldr	r3, [r7, #28]
 801e844:	4413      	add	r3, r2
 801e846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	69ba      	ldr	r2, [r7, #24]
 801e84e:	0151      	lsls	r1, r2, #5
 801e850:	69fa      	ldr	r2, [r7, #28]
 801e852:	440a      	add	r2, r1
 801e854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e85c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e85e:	69bb      	ldr	r3, [r7, #24]
 801e860:	015a      	lsls	r2, r3, #5
 801e862:	69fb      	ldr	r3, [r7, #28]
 801e864:	4413      	add	r3, r2
 801e866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	69ba      	ldr	r2, [r7, #24]
 801e86e:	0151      	lsls	r1, r2, #5
 801e870:	69fa      	ldr	r2, [r7, #28]
 801e872:	440a      	add	r2, r1
 801e874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e87c:	6013      	str	r3, [r2, #0]
 801e87e:	e12f      	b.n	801eae0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e880:	69bb      	ldr	r3, [r7, #24]
 801e882:	015a      	lsls	r2, r3, #5
 801e884:	69fb      	ldr	r3, [r7, #28]
 801e886:	4413      	add	r3, r2
 801e888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	69ba      	ldr	r2, [r7, #24]
 801e890:	0151      	lsls	r1, r2, #5
 801e892:	69fa      	ldr	r2, [r7, #28]
 801e894:	440a      	add	r2, r1
 801e896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e89a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801e89e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e8a0:	68bb      	ldr	r3, [r7, #8]
 801e8a2:	78db      	ldrb	r3, [r3, #3]
 801e8a4:	2b01      	cmp	r3, #1
 801e8a6:	d015      	beq.n	801e8d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801e8a8:	68bb      	ldr	r3, [r7, #8]
 801e8aa:	695b      	ldr	r3, [r3, #20]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	f000 8117 	beq.w	801eae0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e8b2:	69fb      	ldr	r3, [r7, #28]
 801e8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e8ba:	68bb      	ldr	r3, [r7, #8]
 801e8bc:	781b      	ldrb	r3, [r3, #0]
 801e8be:	f003 030f 	and.w	r3, r3, #15
 801e8c2:	2101      	movs	r1, #1
 801e8c4:	fa01 f303 	lsl.w	r3, r1, r3
 801e8c8:	69f9      	ldr	r1, [r7, #28]
 801e8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801e8ce:	4313      	orrs	r3, r2
 801e8d0:	634b      	str	r3, [r1, #52]	; 0x34
 801e8d2:	e105      	b.n	801eae0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e8d4:	69fb      	ldr	r3, [r7, #28]
 801e8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801e8da:	689b      	ldr	r3, [r3, #8]
 801e8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d110      	bne.n	801e906 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e8e4:	69bb      	ldr	r3, [r7, #24]
 801e8e6:	015a      	lsls	r2, r3, #5
 801e8e8:	69fb      	ldr	r3, [r7, #28]
 801e8ea:	4413      	add	r3, r2
 801e8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	69ba      	ldr	r2, [r7, #24]
 801e8f4:	0151      	lsls	r1, r2, #5
 801e8f6:	69fa      	ldr	r2, [r7, #28]
 801e8f8:	440a      	add	r2, r1
 801e8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e8fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801e902:	6013      	str	r3, [r2, #0]
 801e904:	e00f      	b.n	801e926 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e906:	69bb      	ldr	r3, [r7, #24]
 801e908:	015a      	lsls	r2, r3, #5
 801e90a:	69fb      	ldr	r3, [r7, #28]
 801e90c:	4413      	add	r3, r2
 801e90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	69ba      	ldr	r2, [r7, #24]
 801e916:	0151      	lsls	r1, r2, #5
 801e918:	69fa      	ldr	r2, [r7, #28]
 801e91a:	440a      	add	r2, r1
 801e91c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801e920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e924:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801e926:	68bb      	ldr	r3, [r7, #8]
 801e928:	68d9      	ldr	r1, [r3, #12]
 801e92a:	68bb      	ldr	r3, [r7, #8]
 801e92c:	781a      	ldrb	r2, [r3, #0]
 801e92e:	68bb      	ldr	r3, [r7, #8]
 801e930:	695b      	ldr	r3, [r3, #20]
 801e932:	b298      	uxth	r0, r3
 801e934:	79fb      	ldrb	r3, [r7, #7]
 801e936:	9300      	str	r3, [sp, #0]
 801e938:	4603      	mov	r3, r0
 801e93a:	68f8      	ldr	r0, [r7, #12]
 801e93c:	f000 fa2b 	bl	801ed96 <USB_WritePacket>
 801e940:	e0ce      	b.n	801eae0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e942:	69bb      	ldr	r3, [r7, #24]
 801e944:	015a      	lsls	r2, r3, #5
 801e946:	69fb      	ldr	r3, [r7, #28]
 801e948:	4413      	add	r3, r2
 801e94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e94e:	691b      	ldr	r3, [r3, #16]
 801e950:	69ba      	ldr	r2, [r7, #24]
 801e952:	0151      	lsls	r1, r2, #5
 801e954:	69fa      	ldr	r2, [r7, #28]
 801e956:	440a      	add	r2, r1
 801e958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e95c:	0cdb      	lsrs	r3, r3, #19
 801e95e:	04db      	lsls	r3, r3, #19
 801e960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e962:	69bb      	ldr	r3, [r7, #24]
 801e964:	015a      	lsls	r2, r3, #5
 801e966:	69fb      	ldr	r3, [r7, #28]
 801e968:	4413      	add	r3, r2
 801e96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e96e:	691b      	ldr	r3, [r3, #16]
 801e970:	69ba      	ldr	r2, [r7, #24]
 801e972:	0151      	lsls	r1, r2, #5
 801e974:	69fa      	ldr	r2, [r7, #28]
 801e976:	440a      	add	r2, r1
 801e978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e97c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801e980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801e984:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801e986:	68bb      	ldr	r3, [r7, #8]
 801e988:	695b      	ldr	r3, [r3, #20]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d126      	bne.n	801e9dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e98e:	69bb      	ldr	r3, [r7, #24]
 801e990:	015a      	lsls	r2, r3, #5
 801e992:	69fb      	ldr	r3, [r7, #28]
 801e994:	4413      	add	r3, r2
 801e996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e99a:	691a      	ldr	r2, [r3, #16]
 801e99c:	68bb      	ldr	r3, [r7, #8]
 801e99e:	689b      	ldr	r3, [r3, #8]
 801e9a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e9a4:	69b9      	ldr	r1, [r7, #24]
 801e9a6:	0148      	lsls	r0, r1, #5
 801e9a8:	69f9      	ldr	r1, [r7, #28]
 801e9aa:	4401      	add	r1, r0
 801e9ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801e9b0:	4313      	orrs	r3, r2
 801e9b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e9b4:	69bb      	ldr	r3, [r7, #24]
 801e9b6:	015a      	lsls	r2, r3, #5
 801e9b8:	69fb      	ldr	r3, [r7, #28]
 801e9ba:	4413      	add	r3, r2
 801e9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e9c0:	691b      	ldr	r3, [r3, #16]
 801e9c2:	69ba      	ldr	r2, [r7, #24]
 801e9c4:	0151      	lsls	r1, r2, #5
 801e9c6:	69fa      	ldr	r2, [r7, #28]
 801e9c8:	440a      	add	r2, r1
 801e9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801e9ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e9d2:	6113      	str	r3, [r2, #16]
 801e9d4:	e036      	b.n	801ea44 <USB_EPStartXfer+0x3dc>
 801e9d6:	bf00      	nop
 801e9d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e9dc:	68bb      	ldr	r3, [r7, #8]
 801e9de:	695a      	ldr	r2, [r3, #20]
 801e9e0:	68bb      	ldr	r3, [r7, #8]
 801e9e2:	689b      	ldr	r3, [r3, #8]
 801e9e4:	4413      	add	r3, r2
 801e9e6:	1e5a      	subs	r2, r3, #1
 801e9e8:	68bb      	ldr	r3, [r7, #8]
 801e9ea:	689b      	ldr	r3, [r3, #8]
 801e9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801e9f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e9f2:	69bb      	ldr	r3, [r7, #24]
 801e9f4:	015a      	lsls	r2, r3, #5
 801e9f6:	69fb      	ldr	r3, [r7, #28]
 801e9f8:	4413      	add	r3, r2
 801e9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801e9fe:	691a      	ldr	r2, [r3, #16]
 801ea00:	8afb      	ldrh	r3, [r7, #22]
 801ea02:	04d9      	lsls	r1, r3, #19
 801ea04:	4b39      	ldr	r3, [pc, #228]	; (801eaec <USB_EPStartXfer+0x484>)
 801ea06:	400b      	ands	r3, r1
 801ea08:	69b9      	ldr	r1, [r7, #24]
 801ea0a:	0148      	lsls	r0, r1, #5
 801ea0c:	69f9      	ldr	r1, [r7, #28]
 801ea0e:	4401      	add	r1, r0
 801ea10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ea14:	4313      	orrs	r3, r2
 801ea16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801ea18:	69bb      	ldr	r3, [r7, #24]
 801ea1a:	015a      	lsls	r2, r3, #5
 801ea1c:	69fb      	ldr	r3, [r7, #28]
 801ea1e:	4413      	add	r3, r2
 801ea20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea24:	691a      	ldr	r2, [r3, #16]
 801ea26:	68bb      	ldr	r3, [r7, #8]
 801ea28:	689b      	ldr	r3, [r3, #8]
 801ea2a:	8af9      	ldrh	r1, [r7, #22]
 801ea2c:	fb01 f303 	mul.w	r3, r1, r3
 801ea30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ea34:	69b9      	ldr	r1, [r7, #24]
 801ea36:	0148      	lsls	r0, r1, #5
 801ea38:	69f9      	ldr	r1, [r7, #28]
 801ea3a:	4401      	add	r1, r0
 801ea3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ea40:	4313      	orrs	r3, r2
 801ea42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ea44:	79fb      	ldrb	r3, [r7, #7]
 801ea46:	2b01      	cmp	r3, #1
 801ea48:	d10d      	bne.n	801ea66 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ea4a:	68bb      	ldr	r3, [r7, #8]
 801ea4c:	68db      	ldr	r3, [r3, #12]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d009      	beq.n	801ea66 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ea52:	68bb      	ldr	r3, [r7, #8]
 801ea54:	68d9      	ldr	r1, [r3, #12]
 801ea56:	69bb      	ldr	r3, [r7, #24]
 801ea58:	015a      	lsls	r2, r3, #5
 801ea5a:	69fb      	ldr	r3, [r7, #28]
 801ea5c:	4413      	add	r3, r2
 801ea5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea62:	460a      	mov	r2, r1
 801ea64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801ea66:	68bb      	ldr	r3, [r7, #8]
 801ea68:	78db      	ldrb	r3, [r3, #3]
 801ea6a:	2b01      	cmp	r3, #1
 801ea6c:	d128      	bne.n	801eac0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ea6e:	69fb      	ldr	r3, [r7, #28]
 801ea70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ea74:	689b      	ldr	r3, [r3, #8]
 801ea76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d110      	bne.n	801eaa0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801ea7e:	69bb      	ldr	r3, [r7, #24]
 801ea80:	015a      	lsls	r2, r3, #5
 801ea82:	69fb      	ldr	r3, [r7, #28]
 801ea84:	4413      	add	r3, r2
 801ea86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	69ba      	ldr	r2, [r7, #24]
 801ea8e:	0151      	lsls	r1, r2, #5
 801ea90:	69fa      	ldr	r2, [r7, #28]
 801ea92:	440a      	add	r2, r1
 801ea94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ea98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ea9c:	6013      	str	r3, [r2, #0]
 801ea9e:	e00f      	b.n	801eac0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801eaa0:	69bb      	ldr	r3, [r7, #24]
 801eaa2:	015a      	lsls	r2, r3, #5
 801eaa4:	69fb      	ldr	r3, [r7, #28]
 801eaa6:	4413      	add	r3, r2
 801eaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	69ba      	ldr	r2, [r7, #24]
 801eab0:	0151      	lsls	r1, r2, #5
 801eab2:	69fa      	ldr	r2, [r7, #28]
 801eab4:	440a      	add	r2, r1
 801eab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eaba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801eabe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801eac0:	69bb      	ldr	r3, [r7, #24]
 801eac2:	015a      	lsls	r2, r3, #5
 801eac4:	69fb      	ldr	r3, [r7, #28]
 801eac6:	4413      	add	r3, r2
 801eac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	69ba      	ldr	r2, [r7, #24]
 801ead0:	0151      	lsls	r1, r2, #5
 801ead2:	69fa      	ldr	r2, [r7, #28]
 801ead4:	440a      	add	r2, r1
 801ead6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801eade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801eae0:	2300      	movs	r3, #0
}
 801eae2:	4618      	mov	r0, r3
 801eae4:	3720      	adds	r7, #32
 801eae6:	46bd      	mov	sp, r7
 801eae8:	bd80      	pop	{r7, pc}
 801eaea:	bf00      	nop
 801eaec:	1ff80000 	.word	0x1ff80000

0801eaf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801eaf0:	b480      	push	{r7}
 801eaf2:	b087      	sub	sp, #28
 801eaf4:	af00      	add	r7, sp, #0
 801eaf6:	60f8      	str	r0, [r7, #12]
 801eaf8:	60b9      	str	r1, [r7, #8]
 801eafa:	4613      	mov	r3, r2
 801eafc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801eb02:	68bb      	ldr	r3, [r7, #8]
 801eb04:	781b      	ldrb	r3, [r3, #0]
 801eb06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801eb08:	68bb      	ldr	r3, [r7, #8]
 801eb0a:	785b      	ldrb	r3, [r3, #1]
 801eb0c:	2b01      	cmp	r3, #1
 801eb0e:	f040 80cd 	bne.w	801ecac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801eb12:	68bb      	ldr	r3, [r7, #8]
 801eb14:	695b      	ldr	r3, [r3, #20]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d132      	bne.n	801eb80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801eb1a:	693b      	ldr	r3, [r7, #16]
 801eb1c:	015a      	lsls	r2, r3, #5
 801eb1e:	697b      	ldr	r3, [r7, #20]
 801eb20:	4413      	add	r3, r2
 801eb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb26:	691b      	ldr	r3, [r3, #16]
 801eb28:	693a      	ldr	r2, [r7, #16]
 801eb2a:	0151      	lsls	r1, r2, #5
 801eb2c:	697a      	ldr	r2, [r7, #20]
 801eb2e:	440a      	add	r2, r1
 801eb30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801eb38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801eb3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801eb3e:	693b      	ldr	r3, [r7, #16]
 801eb40:	015a      	lsls	r2, r3, #5
 801eb42:	697b      	ldr	r3, [r7, #20]
 801eb44:	4413      	add	r3, r2
 801eb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb4a:	691b      	ldr	r3, [r3, #16]
 801eb4c:	693a      	ldr	r2, [r7, #16]
 801eb4e:	0151      	lsls	r1, r2, #5
 801eb50:	697a      	ldr	r2, [r7, #20]
 801eb52:	440a      	add	r2, r1
 801eb54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801eb5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	015a      	lsls	r2, r3, #5
 801eb62:	697b      	ldr	r3, [r7, #20]
 801eb64:	4413      	add	r3, r2
 801eb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb6a:	691b      	ldr	r3, [r3, #16]
 801eb6c:	693a      	ldr	r2, [r7, #16]
 801eb6e:	0151      	lsls	r1, r2, #5
 801eb70:	697a      	ldr	r2, [r7, #20]
 801eb72:	440a      	add	r2, r1
 801eb74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb78:	0cdb      	lsrs	r3, r3, #19
 801eb7a:	04db      	lsls	r3, r3, #19
 801eb7c:	6113      	str	r3, [r2, #16]
 801eb7e:	e04e      	b.n	801ec1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801eb80:	693b      	ldr	r3, [r7, #16]
 801eb82:	015a      	lsls	r2, r3, #5
 801eb84:	697b      	ldr	r3, [r7, #20]
 801eb86:	4413      	add	r3, r2
 801eb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eb8c:	691b      	ldr	r3, [r3, #16]
 801eb8e:	693a      	ldr	r2, [r7, #16]
 801eb90:	0151      	lsls	r1, r2, #5
 801eb92:	697a      	ldr	r2, [r7, #20]
 801eb94:	440a      	add	r2, r1
 801eb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eb9a:	0cdb      	lsrs	r3, r3, #19
 801eb9c:	04db      	lsls	r3, r3, #19
 801eb9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801eba0:	693b      	ldr	r3, [r7, #16]
 801eba2:	015a      	lsls	r2, r3, #5
 801eba4:	697b      	ldr	r3, [r7, #20]
 801eba6:	4413      	add	r3, r2
 801eba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ebac:	691b      	ldr	r3, [r3, #16]
 801ebae:	693a      	ldr	r2, [r7, #16]
 801ebb0:	0151      	lsls	r1, r2, #5
 801ebb2:	697a      	ldr	r2, [r7, #20]
 801ebb4:	440a      	add	r2, r1
 801ebb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ebba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ebbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ebc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801ebc4:	68bb      	ldr	r3, [r7, #8]
 801ebc6:	695a      	ldr	r2, [r3, #20]
 801ebc8:	68bb      	ldr	r3, [r7, #8]
 801ebca:	689b      	ldr	r3, [r3, #8]
 801ebcc:	429a      	cmp	r2, r3
 801ebce:	d903      	bls.n	801ebd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801ebd0:	68bb      	ldr	r3, [r7, #8]
 801ebd2:	689a      	ldr	r2, [r3, #8]
 801ebd4:	68bb      	ldr	r3, [r7, #8]
 801ebd6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801ebd8:	693b      	ldr	r3, [r7, #16]
 801ebda:	015a      	lsls	r2, r3, #5
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	4413      	add	r3, r2
 801ebe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ebe4:	691b      	ldr	r3, [r3, #16]
 801ebe6:	693a      	ldr	r2, [r7, #16]
 801ebe8:	0151      	lsls	r1, r2, #5
 801ebea:	697a      	ldr	r2, [r7, #20]
 801ebec:	440a      	add	r2, r1
 801ebee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ebf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ebf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801ebf8:	693b      	ldr	r3, [r7, #16]
 801ebfa:	015a      	lsls	r2, r3, #5
 801ebfc:	697b      	ldr	r3, [r7, #20]
 801ebfe:	4413      	add	r3, r2
 801ec00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec04:	691a      	ldr	r2, [r3, #16]
 801ec06:	68bb      	ldr	r3, [r7, #8]
 801ec08:	695b      	ldr	r3, [r3, #20]
 801ec0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ec0e:	6939      	ldr	r1, [r7, #16]
 801ec10:	0148      	lsls	r0, r1, #5
 801ec12:	6979      	ldr	r1, [r7, #20]
 801ec14:	4401      	add	r1, r0
 801ec16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801ec1a:	4313      	orrs	r3, r2
 801ec1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801ec1e:	79fb      	ldrb	r3, [r7, #7]
 801ec20:	2b01      	cmp	r3, #1
 801ec22:	d11e      	bne.n	801ec62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801ec24:	68bb      	ldr	r3, [r7, #8]
 801ec26:	691b      	ldr	r3, [r3, #16]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d009      	beq.n	801ec40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801ec2c:	693b      	ldr	r3, [r7, #16]
 801ec2e:	015a      	lsls	r2, r3, #5
 801ec30:	697b      	ldr	r3, [r7, #20]
 801ec32:	4413      	add	r3, r2
 801ec34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec38:	461a      	mov	r2, r3
 801ec3a:	68bb      	ldr	r3, [r7, #8]
 801ec3c:	691b      	ldr	r3, [r3, #16]
 801ec3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ec40:	693b      	ldr	r3, [r7, #16]
 801ec42:	015a      	lsls	r2, r3, #5
 801ec44:	697b      	ldr	r3, [r7, #20]
 801ec46:	4413      	add	r3, r2
 801ec48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	693a      	ldr	r2, [r7, #16]
 801ec50:	0151      	lsls	r1, r2, #5
 801ec52:	697a      	ldr	r2, [r7, #20]
 801ec54:	440a      	add	r2, r1
 801ec56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ec5e:	6013      	str	r3, [r2, #0]
 801ec60:	e092      	b.n	801ed88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801ec62:	693b      	ldr	r3, [r7, #16]
 801ec64:	015a      	lsls	r2, r3, #5
 801ec66:	697b      	ldr	r3, [r7, #20]
 801ec68:	4413      	add	r3, r2
 801ec6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	693a      	ldr	r2, [r7, #16]
 801ec72:	0151      	lsls	r1, r2, #5
 801ec74:	697a      	ldr	r2, [r7, #20]
 801ec76:	440a      	add	r2, r1
 801ec78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ec7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ec80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801ec82:	68bb      	ldr	r3, [r7, #8]
 801ec84:	695b      	ldr	r3, [r3, #20]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d07e      	beq.n	801ed88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801ec8a:	697b      	ldr	r3, [r7, #20]
 801ec8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ec90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801ec92:	68bb      	ldr	r3, [r7, #8]
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	f003 030f 	and.w	r3, r3, #15
 801ec9a:	2101      	movs	r1, #1
 801ec9c:	fa01 f303 	lsl.w	r3, r1, r3
 801eca0:	6979      	ldr	r1, [r7, #20]
 801eca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801eca6:	4313      	orrs	r3, r2
 801eca8:	634b      	str	r3, [r1, #52]	; 0x34
 801ecaa:	e06d      	b.n	801ed88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ecac:	693b      	ldr	r3, [r7, #16]
 801ecae:	015a      	lsls	r2, r3, #5
 801ecb0:	697b      	ldr	r3, [r7, #20]
 801ecb2:	4413      	add	r3, r2
 801ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecb8:	691b      	ldr	r3, [r3, #16]
 801ecba:	693a      	ldr	r2, [r7, #16]
 801ecbc:	0151      	lsls	r1, r2, #5
 801ecbe:	697a      	ldr	r2, [r7, #20]
 801ecc0:	440a      	add	r2, r1
 801ecc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ecc6:	0cdb      	lsrs	r3, r3, #19
 801ecc8:	04db      	lsls	r3, r3, #19
 801ecca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801eccc:	693b      	ldr	r3, [r7, #16]
 801ecce:	015a      	lsls	r2, r3, #5
 801ecd0:	697b      	ldr	r3, [r7, #20]
 801ecd2:	4413      	add	r3, r2
 801ecd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ecd8:	691b      	ldr	r3, [r3, #16]
 801ecda:	693a      	ldr	r2, [r7, #16]
 801ecdc:	0151      	lsls	r1, r2, #5
 801ecde:	697a      	ldr	r2, [r7, #20]
 801ece0:	440a      	add	r2, r1
 801ece2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ece6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801ecea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801ecee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801ecf0:	68bb      	ldr	r3, [r7, #8]
 801ecf2:	695b      	ldr	r3, [r3, #20]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d003      	beq.n	801ed00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801ecf8:	68bb      	ldr	r3, [r7, #8]
 801ecfa:	689a      	ldr	r2, [r3, #8]
 801ecfc:	68bb      	ldr	r3, [r7, #8]
 801ecfe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ed00:	693b      	ldr	r3, [r7, #16]
 801ed02:	015a      	lsls	r2, r3, #5
 801ed04:	697b      	ldr	r3, [r7, #20]
 801ed06:	4413      	add	r3, r2
 801ed08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed0c:	691b      	ldr	r3, [r3, #16]
 801ed0e:	693a      	ldr	r2, [r7, #16]
 801ed10:	0151      	lsls	r1, r2, #5
 801ed12:	697a      	ldr	r2, [r7, #20]
 801ed14:	440a      	add	r2, r1
 801ed16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ed1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801ed20:	693b      	ldr	r3, [r7, #16]
 801ed22:	015a      	lsls	r2, r3, #5
 801ed24:	697b      	ldr	r3, [r7, #20]
 801ed26:	4413      	add	r3, r2
 801ed28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed2c:	691a      	ldr	r2, [r3, #16]
 801ed2e:	68bb      	ldr	r3, [r7, #8]
 801ed30:	689b      	ldr	r3, [r3, #8]
 801ed32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ed36:	6939      	ldr	r1, [r7, #16]
 801ed38:	0148      	lsls	r0, r1, #5
 801ed3a:	6979      	ldr	r1, [r7, #20]
 801ed3c:	4401      	add	r1, r0
 801ed3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801ed42:	4313      	orrs	r3, r2
 801ed44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801ed46:	79fb      	ldrb	r3, [r7, #7]
 801ed48:	2b01      	cmp	r3, #1
 801ed4a:	d10d      	bne.n	801ed68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801ed4c:	68bb      	ldr	r3, [r7, #8]
 801ed4e:	68db      	ldr	r3, [r3, #12]
 801ed50:	2b00      	cmp	r3, #0
 801ed52:	d009      	beq.n	801ed68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801ed54:	68bb      	ldr	r3, [r7, #8]
 801ed56:	68d9      	ldr	r1, [r3, #12]
 801ed58:	693b      	ldr	r3, [r7, #16]
 801ed5a:	015a      	lsls	r2, r3, #5
 801ed5c:	697b      	ldr	r3, [r7, #20]
 801ed5e:	4413      	add	r3, r2
 801ed60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed64:	460a      	mov	r2, r1
 801ed66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801ed68:	693b      	ldr	r3, [r7, #16]
 801ed6a:	015a      	lsls	r2, r3, #5
 801ed6c:	697b      	ldr	r3, [r7, #20]
 801ed6e:	4413      	add	r3, r2
 801ed70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	693a      	ldr	r2, [r7, #16]
 801ed78:	0151      	lsls	r1, r2, #5
 801ed7a:	697a      	ldr	r2, [r7, #20]
 801ed7c:	440a      	add	r2, r1
 801ed7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ed82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801ed86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ed88:	2300      	movs	r3, #0
}
 801ed8a:	4618      	mov	r0, r3
 801ed8c:	371c      	adds	r7, #28
 801ed8e:	46bd      	mov	sp, r7
 801ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed94:	4770      	bx	lr

0801ed96 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801ed96:	b480      	push	{r7}
 801ed98:	b089      	sub	sp, #36	; 0x24
 801ed9a:	af00      	add	r7, sp, #0
 801ed9c:	60f8      	str	r0, [r7, #12]
 801ed9e:	60b9      	str	r1, [r7, #8]
 801eda0:	4611      	mov	r1, r2
 801eda2:	461a      	mov	r2, r3
 801eda4:	460b      	mov	r3, r1
 801eda6:	71fb      	strb	r3, [r7, #7]
 801eda8:	4613      	mov	r3, r2
 801edaa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801edac:	68fb      	ldr	r3, [r7, #12]
 801edae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801edb0:	68bb      	ldr	r3, [r7, #8]
 801edb2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801edb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d11a      	bne.n	801edf2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801edbc:	88bb      	ldrh	r3, [r7, #4]
 801edbe:	3303      	adds	r3, #3
 801edc0:	089b      	lsrs	r3, r3, #2
 801edc2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801edc4:	2300      	movs	r3, #0
 801edc6:	61bb      	str	r3, [r7, #24]
 801edc8:	e00f      	b.n	801edea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801edca:	79fb      	ldrb	r3, [r7, #7]
 801edcc:	031a      	lsls	r2, r3, #12
 801edce:	697b      	ldr	r3, [r7, #20]
 801edd0:	4413      	add	r3, r2
 801edd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801edd6:	461a      	mov	r2, r3
 801edd8:	69fb      	ldr	r3, [r7, #28]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	6013      	str	r3, [r2, #0]
      pSrc++;
 801edde:	69fb      	ldr	r3, [r7, #28]
 801ede0:	3304      	adds	r3, #4
 801ede2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801ede4:	69bb      	ldr	r3, [r7, #24]
 801ede6:	3301      	adds	r3, #1
 801ede8:	61bb      	str	r3, [r7, #24]
 801edea:	69ba      	ldr	r2, [r7, #24]
 801edec:	693b      	ldr	r3, [r7, #16]
 801edee:	429a      	cmp	r2, r3
 801edf0:	d3eb      	bcc.n	801edca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801edf2:	2300      	movs	r3, #0
}
 801edf4:	4618      	mov	r0, r3
 801edf6:	3724      	adds	r7, #36	; 0x24
 801edf8:	46bd      	mov	sp, r7
 801edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edfe:	4770      	bx	lr

0801ee00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801ee00:	b480      	push	{r7}
 801ee02:	b089      	sub	sp, #36	; 0x24
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	60f8      	str	r0, [r7, #12]
 801ee08:	60b9      	str	r1, [r7, #8]
 801ee0a:	4613      	mov	r3, r2
 801ee0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801ee12:	68bb      	ldr	r3, [r7, #8]
 801ee14:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801ee16:	88fb      	ldrh	r3, [r7, #6]
 801ee18:	3303      	adds	r3, #3
 801ee1a:	089b      	lsrs	r3, r3, #2
 801ee1c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801ee1e:	2300      	movs	r3, #0
 801ee20:	61bb      	str	r3, [r7, #24]
 801ee22:	e00b      	b.n	801ee3c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ee2a:	681a      	ldr	r2, [r3, #0]
 801ee2c:	69fb      	ldr	r3, [r7, #28]
 801ee2e:	601a      	str	r2, [r3, #0]
    pDest++;
 801ee30:	69fb      	ldr	r3, [r7, #28]
 801ee32:	3304      	adds	r3, #4
 801ee34:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801ee36:	69bb      	ldr	r3, [r7, #24]
 801ee38:	3301      	adds	r3, #1
 801ee3a:	61bb      	str	r3, [r7, #24]
 801ee3c:	69ba      	ldr	r2, [r7, #24]
 801ee3e:	693b      	ldr	r3, [r7, #16]
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d3ef      	bcc.n	801ee24 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801ee44:	69fb      	ldr	r3, [r7, #28]
}
 801ee46:	4618      	mov	r0, r3
 801ee48:	3724      	adds	r7, #36	; 0x24
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee50:	4770      	bx	lr

0801ee52 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ee52:	b480      	push	{r7}
 801ee54:	b085      	sub	sp, #20
 801ee56:	af00      	add	r7, sp, #0
 801ee58:	6078      	str	r0, [r7, #4]
 801ee5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ee60:	683b      	ldr	r3, [r7, #0]
 801ee62:	781b      	ldrb	r3, [r3, #0]
 801ee64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ee66:	683b      	ldr	r3, [r7, #0]
 801ee68:	785b      	ldrb	r3, [r3, #1]
 801ee6a:	2b01      	cmp	r3, #1
 801ee6c:	d12c      	bne.n	801eec8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ee6e:	68bb      	ldr	r3, [r7, #8]
 801ee70:	015a      	lsls	r2, r3, #5
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	4413      	add	r3, r2
 801ee76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	db12      	blt.n	801eea6 <USB_EPSetStall+0x54>
 801ee80:	68bb      	ldr	r3, [r7, #8]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d00f      	beq.n	801eea6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ee86:	68bb      	ldr	r3, [r7, #8]
 801ee88:	015a      	lsls	r2, r3, #5
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	4413      	add	r3, r2
 801ee8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	68ba      	ldr	r2, [r7, #8]
 801ee96:	0151      	lsls	r1, r2, #5
 801ee98:	68fa      	ldr	r2, [r7, #12]
 801ee9a:	440a      	add	r2, r1
 801ee9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801eea4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801eea6:	68bb      	ldr	r3, [r7, #8]
 801eea8:	015a      	lsls	r2, r3, #5
 801eeaa:	68fb      	ldr	r3, [r7, #12]
 801eeac:	4413      	add	r3, r2
 801eeae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	68ba      	ldr	r2, [r7, #8]
 801eeb6:	0151      	lsls	r1, r2, #5
 801eeb8:	68fa      	ldr	r2, [r7, #12]
 801eeba:	440a      	add	r2, r1
 801eebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801eec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801eec4:	6013      	str	r3, [r2, #0]
 801eec6:	e02b      	b.n	801ef20 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801eec8:	68bb      	ldr	r3, [r7, #8]
 801eeca:	015a      	lsls	r2, r3, #5
 801eecc:	68fb      	ldr	r3, [r7, #12]
 801eece:	4413      	add	r3, r2
 801eed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	db12      	blt.n	801ef00 <USB_EPSetStall+0xae>
 801eeda:	68bb      	ldr	r3, [r7, #8]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d00f      	beq.n	801ef00 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801eee0:	68bb      	ldr	r3, [r7, #8]
 801eee2:	015a      	lsls	r2, r3, #5
 801eee4:	68fb      	ldr	r3, [r7, #12]
 801eee6:	4413      	add	r3, r2
 801eee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	68ba      	ldr	r2, [r7, #8]
 801eef0:	0151      	lsls	r1, r2, #5
 801eef2:	68fa      	ldr	r2, [r7, #12]
 801eef4:	440a      	add	r2, r1
 801eef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801eefa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801eefe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ef00:	68bb      	ldr	r3, [r7, #8]
 801ef02:	015a      	lsls	r2, r3, #5
 801ef04:	68fb      	ldr	r3, [r7, #12]
 801ef06:	4413      	add	r3, r2
 801ef08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	68ba      	ldr	r2, [r7, #8]
 801ef10:	0151      	lsls	r1, r2, #5
 801ef12:	68fa      	ldr	r2, [r7, #12]
 801ef14:	440a      	add	r2, r1
 801ef16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ef1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801ef1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801ef20:	2300      	movs	r3, #0
}
 801ef22:	4618      	mov	r0, r3
 801ef24:	3714      	adds	r7, #20
 801ef26:	46bd      	mov	sp, r7
 801ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef2c:	4770      	bx	lr

0801ef2e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801ef2e:	b480      	push	{r7}
 801ef30:	b085      	sub	sp, #20
 801ef32:	af00      	add	r7, sp, #0
 801ef34:	6078      	str	r0, [r7, #4]
 801ef36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801ef3c:	683b      	ldr	r3, [r7, #0]
 801ef3e:	781b      	ldrb	r3, [r3, #0]
 801ef40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	785b      	ldrb	r3, [r3, #1]
 801ef46:	2b01      	cmp	r3, #1
 801ef48:	d128      	bne.n	801ef9c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ef4a:	68bb      	ldr	r3, [r7, #8]
 801ef4c:	015a      	lsls	r2, r3, #5
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	4413      	add	r3, r2
 801ef52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	68ba      	ldr	r2, [r7, #8]
 801ef5a:	0151      	lsls	r1, r2, #5
 801ef5c:	68fa      	ldr	r2, [r7, #12]
 801ef5e:	440a      	add	r2, r1
 801ef60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ef64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ef68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ef6a:	683b      	ldr	r3, [r7, #0]
 801ef6c:	78db      	ldrb	r3, [r3, #3]
 801ef6e:	2b03      	cmp	r3, #3
 801ef70:	d003      	beq.n	801ef7a <USB_EPClearStall+0x4c>
 801ef72:	683b      	ldr	r3, [r7, #0]
 801ef74:	78db      	ldrb	r3, [r3, #3]
 801ef76:	2b02      	cmp	r3, #2
 801ef78:	d138      	bne.n	801efec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ef7a:	68bb      	ldr	r3, [r7, #8]
 801ef7c:	015a      	lsls	r2, r3, #5
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	4413      	add	r3, r2
 801ef82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	68ba      	ldr	r2, [r7, #8]
 801ef8a:	0151      	lsls	r1, r2, #5
 801ef8c:	68fa      	ldr	r2, [r7, #12]
 801ef8e:	440a      	add	r2, r1
 801ef90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ef94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ef98:	6013      	str	r3, [r2, #0]
 801ef9a:	e027      	b.n	801efec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ef9c:	68bb      	ldr	r3, [r7, #8]
 801ef9e:	015a      	lsls	r2, r3, #5
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	4413      	add	r3, r2
 801efa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	68ba      	ldr	r2, [r7, #8]
 801efac:	0151      	lsls	r1, r2, #5
 801efae:	68fa      	ldr	r2, [r7, #12]
 801efb0:	440a      	add	r2, r1
 801efb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801efb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801efba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801efbc:	683b      	ldr	r3, [r7, #0]
 801efbe:	78db      	ldrb	r3, [r3, #3]
 801efc0:	2b03      	cmp	r3, #3
 801efc2:	d003      	beq.n	801efcc <USB_EPClearStall+0x9e>
 801efc4:	683b      	ldr	r3, [r7, #0]
 801efc6:	78db      	ldrb	r3, [r3, #3]
 801efc8:	2b02      	cmp	r3, #2
 801efca:	d10f      	bne.n	801efec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801efcc:	68bb      	ldr	r3, [r7, #8]
 801efce:	015a      	lsls	r2, r3, #5
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	4413      	add	r3, r2
 801efd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	68ba      	ldr	r2, [r7, #8]
 801efdc:	0151      	lsls	r1, r2, #5
 801efde:	68fa      	ldr	r2, [r7, #12]
 801efe0:	440a      	add	r2, r1
 801efe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801efe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801efea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801efec:	2300      	movs	r3, #0
}
 801efee:	4618      	mov	r0, r3
 801eff0:	3714      	adds	r7, #20
 801eff2:	46bd      	mov	sp, r7
 801eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eff8:	4770      	bx	lr

0801effa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801effa:	b480      	push	{r7}
 801effc:	b085      	sub	sp, #20
 801effe:	af00      	add	r7, sp, #0
 801f000:	6078      	str	r0, [r7, #4]
 801f002:	460b      	mov	r3, r1
 801f004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	68fa      	ldr	r2, [r7, #12]
 801f014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f018:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801f01c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f024:	681a      	ldr	r2, [r3, #0]
 801f026:	78fb      	ldrb	r3, [r7, #3]
 801f028:	011b      	lsls	r3, r3, #4
 801f02a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801f02e:	68f9      	ldr	r1, [r7, #12]
 801f030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801f034:	4313      	orrs	r3, r2
 801f036:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801f038:	2300      	movs	r3, #0
}
 801f03a:	4618      	mov	r0, r3
 801f03c:	3714      	adds	r7, #20
 801f03e:	46bd      	mov	sp, r7
 801f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f044:	4770      	bx	lr

0801f046 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f046:	b480      	push	{r7}
 801f048:	b085      	sub	sp, #20
 801f04a:	af00      	add	r7, sp, #0
 801f04c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f052:	68fb      	ldr	r3, [r7, #12]
 801f054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	68fa      	ldr	r2, [r7, #12]
 801f05c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f060:	f023 0303 	bic.w	r3, r3, #3
 801f064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f06c:	685b      	ldr	r3, [r3, #4]
 801f06e:	68fa      	ldr	r2, [r7, #12]
 801f070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f074:	f023 0302 	bic.w	r3, r3, #2
 801f078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f07a:	2300      	movs	r3, #0
}
 801f07c:	4618      	mov	r0, r3
 801f07e:	3714      	adds	r7, #20
 801f080:	46bd      	mov	sp, r7
 801f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f086:	4770      	bx	lr

0801f088 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801f088:	b480      	push	{r7}
 801f08a:	b085      	sub	sp, #20
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	68fa      	ldr	r2, [r7, #12]
 801f09e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f0a2:	f023 0303 	bic.w	r3, r3, #3
 801f0a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801f0a8:	68fb      	ldr	r3, [r7, #12]
 801f0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f0ae:	685b      	ldr	r3, [r3, #4]
 801f0b0:	68fa      	ldr	r2, [r7, #12]
 801f0b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f0b6:	f043 0302 	orr.w	r3, r3, #2
 801f0ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f0bc:	2300      	movs	r3, #0
}
 801f0be:	4618      	mov	r0, r3
 801f0c0:	3714      	adds	r7, #20
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0c8:	4770      	bx	lr

0801f0ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801f0ca:	b480      	push	{r7}
 801f0cc:	b085      	sub	sp, #20
 801f0ce:	af00      	add	r7, sp, #0
 801f0d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	695b      	ldr	r3, [r3, #20]
 801f0d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	699b      	ldr	r3, [r3, #24]
 801f0dc:	68fa      	ldr	r2, [r7, #12]
 801f0de:	4013      	ands	r3, r2
 801f0e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801f0e2:	68fb      	ldr	r3, [r7, #12]
}
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	3714      	adds	r7, #20
 801f0e8:	46bd      	mov	sp, r7
 801f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ee:	4770      	bx	lr

0801f0f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f0f0:	b480      	push	{r7}
 801f0f2:	b085      	sub	sp, #20
 801f0f4:	af00      	add	r7, sp, #0
 801f0f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f102:	699b      	ldr	r3, [r3, #24]
 801f104:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f10c:	69db      	ldr	r3, [r3, #28]
 801f10e:	68ba      	ldr	r2, [r7, #8]
 801f110:	4013      	ands	r3, r2
 801f112:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801f114:	68bb      	ldr	r3, [r7, #8]
 801f116:	0c1b      	lsrs	r3, r3, #16
}
 801f118:	4618      	mov	r0, r3
 801f11a:	3714      	adds	r7, #20
 801f11c:	46bd      	mov	sp, r7
 801f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f122:	4770      	bx	lr

0801f124 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801f124:	b480      	push	{r7}
 801f126:	b085      	sub	sp, #20
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801f130:	68fb      	ldr	r3, [r7, #12]
 801f132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f136:	699b      	ldr	r3, [r3, #24]
 801f138:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801f13a:	68fb      	ldr	r3, [r7, #12]
 801f13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f140:	69db      	ldr	r3, [r3, #28]
 801f142:	68ba      	ldr	r2, [r7, #8]
 801f144:	4013      	ands	r3, r2
 801f146:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801f148:	68bb      	ldr	r3, [r7, #8]
 801f14a:	b29b      	uxth	r3, r3
}
 801f14c:	4618      	mov	r0, r3
 801f14e:	3714      	adds	r7, #20
 801f150:	46bd      	mov	sp, r7
 801f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f156:	4770      	bx	lr

0801f158 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f158:	b480      	push	{r7}
 801f15a:	b085      	sub	sp, #20
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	6078      	str	r0, [r7, #4]
 801f160:	460b      	mov	r3, r1
 801f162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801f168:	78fb      	ldrb	r3, [r7, #3]
 801f16a:	015a      	lsls	r2, r3, #5
 801f16c:	68fb      	ldr	r3, [r7, #12]
 801f16e:	4413      	add	r3, r2
 801f170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f174:	689b      	ldr	r3, [r3, #8]
 801f176:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801f178:	68fb      	ldr	r3, [r7, #12]
 801f17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f17e:	695b      	ldr	r3, [r3, #20]
 801f180:	68ba      	ldr	r2, [r7, #8]
 801f182:	4013      	ands	r3, r2
 801f184:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f186:	68bb      	ldr	r3, [r7, #8]
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3714      	adds	r7, #20
 801f18c:	46bd      	mov	sp, r7
 801f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f192:	4770      	bx	lr

0801f194 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801f194:	b480      	push	{r7}
 801f196:	b087      	sub	sp, #28
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
 801f19c:	460b      	mov	r3, r1
 801f19e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801f1a4:	697b      	ldr	r3, [r7, #20]
 801f1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1aa:	691b      	ldr	r3, [r3, #16]
 801f1ac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801f1ae:	697b      	ldr	r3, [r7, #20]
 801f1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1b6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801f1b8:	78fb      	ldrb	r3, [r7, #3]
 801f1ba:	f003 030f 	and.w	r3, r3, #15
 801f1be:	68fa      	ldr	r2, [r7, #12]
 801f1c0:	fa22 f303 	lsr.w	r3, r2, r3
 801f1c4:	01db      	lsls	r3, r3, #7
 801f1c6:	b2db      	uxtb	r3, r3
 801f1c8:	693a      	ldr	r2, [r7, #16]
 801f1ca:	4313      	orrs	r3, r2
 801f1cc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801f1ce:	78fb      	ldrb	r3, [r7, #3]
 801f1d0:	015a      	lsls	r2, r3, #5
 801f1d2:	697b      	ldr	r3, [r7, #20]
 801f1d4:	4413      	add	r3, r2
 801f1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f1da:	689b      	ldr	r3, [r3, #8]
 801f1dc:	693a      	ldr	r2, [r7, #16]
 801f1de:	4013      	ands	r3, r2
 801f1e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801f1e2:	68bb      	ldr	r3, [r7, #8]
}
 801f1e4:	4618      	mov	r0, r3
 801f1e6:	371c      	adds	r7, #28
 801f1e8:	46bd      	mov	sp, r7
 801f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1ee:	4770      	bx	lr

0801f1f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801f1f0:	b480      	push	{r7}
 801f1f2:	b083      	sub	sp, #12
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	695b      	ldr	r3, [r3, #20]
 801f1fc:	f003 0301 	and.w	r3, r3, #1
}
 801f200:	4618      	mov	r0, r3
 801f202:	370c      	adds	r7, #12
 801f204:	46bd      	mov	sp, r7
 801f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f20a:	4770      	bx	lr

0801f20c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801f20c:	b480      	push	{r7}
 801f20e:	b085      	sub	sp, #20
 801f210:	af00      	add	r7, sp, #0
 801f212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	68fa      	ldr	r2, [r7, #12]
 801f222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801f226:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801f22a:	f023 0307 	bic.w	r3, r3, #7
 801f22e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801f236:	685b      	ldr	r3, [r3, #4]
 801f238:	68fa      	ldr	r2, [r7, #12]
 801f23a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801f23e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801f244:	2300      	movs	r3, #0
}
 801f246:	4618      	mov	r0, r3
 801f248:	3714      	adds	r7, #20
 801f24a:	46bd      	mov	sp, r7
 801f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f250:	4770      	bx	lr
	...

0801f254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801f254:	b480      	push	{r7}
 801f256:	b087      	sub	sp, #28
 801f258:	af00      	add	r7, sp, #0
 801f25a:	60f8      	str	r0, [r7, #12]
 801f25c:	460b      	mov	r3, r1
 801f25e:	607a      	str	r2, [r7, #4]
 801f260:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	333c      	adds	r3, #60	; 0x3c
 801f26a:	3304      	adds	r3, #4
 801f26c:	681b      	ldr	r3, [r3, #0]
 801f26e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801f270:	693b      	ldr	r3, [r7, #16]
 801f272:	4a26      	ldr	r2, [pc, #152]	; (801f30c <USB_EP0_OutStart+0xb8>)
 801f274:	4293      	cmp	r3, r2
 801f276:	d90a      	bls.n	801f28e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801f278:	697b      	ldr	r3, [r7, #20]
 801f27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801f288:	d101      	bne.n	801f28e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801f28a:	2300      	movs	r3, #0
 801f28c:	e037      	b.n	801f2fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f294:	461a      	mov	r2, r3
 801f296:	2300      	movs	r3, #0
 801f298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801f29a:	697b      	ldr	r3, [r7, #20]
 801f29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2a0:	691b      	ldr	r3, [r3, #16]
 801f2a2:	697a      	ldr	r2, [r7, #20]
 801f2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801f2ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801f2ae:	697b      	ldr	r3, [r7, #20]
 801f2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2b4:	691b      	ldr	r3, [r3, #16]
 801f2b6:	697a      	ldr	r2, [r7, #20]
 801f2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2bc:	f043 0318 	orr.w	r3, r3, #24
 801f2c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801f2c2:	697b      	ldr	r3, [r7, #20]
 801f2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2c8:	691b      	ldr	r3, [r3, #16]
 801f2ca:	697a      	ldr	r2, [r7, #20]
 801f2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801f2d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801f2d6:	7afb      	ldrb	r3, [r7, #11]
 801f2d8:	2b01      	cmp	r3, #1
 801f2da:	d10f      	bne.n	801f2fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2e2:	461a      	mov	r2, r3
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801f2e8:	697b      	ldr	r3, [r7, #20]
 801f2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	697a      	ldr	r2, [r7, #20]
 801f2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801f2f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801f2fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801f2fc:	2300      	movs	r3, #0
}
 801f2fe:	4618      	mov	r0, r3
 801f300:	371c      	adds	r7, #28
 801f302:	46bd      	mov	sp, r7
 801f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f308:	4770      	bx	lr
 801f30a:	bf00      	nop
 801f30c:	4f54300a 	.word	0x4f54300a

0801f310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801f310:	b480      	push	{r7}
 801f312:	b085      	sub	sp, #20
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801f318:	2300      	movs	r3, #0
 801f31a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	3301      	adds	r3, #1
 801f320:	60fb      	str	r3, [r7, #12]
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	4a13      	ldr	r2, [pc, #76]	; (801f374 <USB_CoreReset+0x64>)
 801f326:	4293      	cmp	r3, r2
 801f328:	d901      	bls.n	801f32e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801f32a:	2303      	movs	r3, #3
 801f32c:	e01b      	b.n	801f366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	691b      	ldr	r3, [r3, #16]
 801f332:	2b00      	cmp	r3, #0
 801f334:	daf2      	bge.n	801f31c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801f336:	2300      	movs	r3, #0
 801f338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	691b      	ldr	r3, [r3, #16]
 801f33e:	f043 0201 	orr.w	r2, r3, #1
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	3301      	adds	r3, #1
 801f34a:	60fb      	str	r3, [r7, #12]
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	4a09      	ldr	r2, [pc, #36]	; (801f374 <USB_CoreReset+0x64>)
 801f350:	4293      	cmp	r3, r2
 801f352:	d901      	bls.n	801f358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801f354:	2303      	movs	r3, #3
 801f356:	e006      	b.n	801f366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	691b      	ldr	r3, [r3, #16]
 801f35c:	f003 0301 	and.w	r3, r3, #1
 801f360:	2b01      	cmp	r3, #1
 801f362:	d0f0      	beq.n	801f346 <USB_CoreReset+0x36>

  return HAL_OK;
 801f364:	2300      	movs	r3, #0
}
 801f366:	4618      	mov	r0, r3
 801f368:	3714      	adds	r7, #20
 801f36a:	46bd      	mov	sp, r7
 801f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f370:	4770      	bx	lr
 801f372:	bf00      	nop
 801f374:	00030d40 	.word	0x00030d40

0801f378 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f378:	b580      	push	{r7, lr}
 801f37a:	b084      	sub	sp, #16
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	6078      	str	r0, [r7, #4]
 801f380:	460b      	mov	r3, r1
 801f382:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f384:	f44f 701d 	mov.w	r0, #628	; 0x274
 801f388:	f003 fc6e 	bl	8022c68 <USBD_static_malloc>
 801f38c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d105      	bne.n	801f3a0 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	2200      	movs	r2, #0
 801f398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801f39c:	2302      	movs	r3, #2
 801f39e:	e034      	b.n	801f40a <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	68fa      	ldr	r2, [r7, #12]
 801f3a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	7c1b      	ldrb	r3, [r3, #16]
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d115      	bne.n	801f3dc <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f3b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f3b4:	2202      	movs	r2, #2
 801f3b6:	2101      	movs	r1, #1
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	f003 fac4 	bl	8022946 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	2201      	movs	r2, #1
 801f3c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f3ca:	2202      	movs	r2, #2
 801f3cc:	2181      	movs	r1, #129	; 0x81
 801f3ce:	6878      	ldr	r0, [r7, #4]
 801f3d0:	f003 fab9 	bl	8022946 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	2201      	movs	r2, #1
 801f3d8:	871a      	strh	r2, [r3, #56]	; 0x38
 801f3da:	e012      	b.n	801f402 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f3dc:	2340      	movs	r3, #64	; 0x40
 801f3de:	2202      	movs	r2, #2
 801f3e0:	2101      	movs	r1, #1
 801f3e2:	6878      	ldr	r0, [r7, #4]
 801f3e4:	f003 faaf 	bl	8022946 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801f3e8:	687b      	ldr	r3, [r7, #4]
 801f3ea:	2201      	movs	r2, #1
 801f3ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f3f0:	2340      	movs	r3, #64	; 0x40
 801f3f2:	2202      	movs	r2, #2
 801f3f4:	2181      	movs	r1, #129	; 0x81
 801f3f6:	6878      	ldr	r0, [r7, #4]
 801f3f8:	f003 faa5 	bl	8022946 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	2201      	movs	r2, #1
 801f400:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801f402:	6878      	ldr	r0, [r7, #4]
 801f404:	f000 f999 	bl	801f73a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801f408:	2300      	movs	r3, #0
}
 801f40a:	4618      	mov	r0, r3
 801f40c:	3710      	adds	r7, #16
 801f40e:	46bd      	mov	sp, r7
 801f410:	bd80      	pop	{r7, pc}

0801f412 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801f412:	b580      	push	{r7, lr}
 801f414:	b082      	sub	sp, #8
 801f416:	af00      	add	r7, sp, #0
 801f418:	6078      	str	r0, [r7, #4]
 801f41a:	460b      	mov	r3, r1
 801f41c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801f41e:	2101      	movs	r1, #1
 801f420:	6878      	ldr	r0, [r7, #4]
 801f422:	f003 fab6 	bl	8022992 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	2200      	movs	r2, #0
 801f42a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801f42e:	2181      	movs	r1, #129	; 0x81
 801f430:	6878      	ldr	r0, [r7, #4]
 801f432:	f003 faae 	bl	8022992 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	2200      	movs	r2, #0
 801f43a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f442:	2b00      	cmp	r3, #0
 801f444:	d00c      	beq.n	801f460 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801f446:	6878      	ldr	r0, [r7, #4]
 801f448:	f000 f9d5 	bl	801f7f6 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f452:	4618      	mov	r0, r3
 801f454:	f003 fc16 	bl	8022c84 <USBD_static_free>
    pdev->pClassData = NULL;
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	2200      	movs	r2, #0
 801f45c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801f460:	2300      	movs	r3, #0
}
 801f462:	4618      	mov	r0, r3
 801f464:	3708      	adds	r7, #8
 801f466:	46bd      	mov	sp, r7
 801f468:	bd80      	pop	{r7, pc}
	...

0801f46c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f46c:	b580      	push	{r7, lr}
 801f46e:	b086      	sub	sp, #24
 801f470:	af00      	add	r7, sp, #0
 801f472:	6078      	str	r0, [r7, #4]
 801f474:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f47c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801f47e:	2300      	movs	r3, #0
 801f480:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801f482:	2300      	movs	r3, #0
 801f484:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801f486:	693b      	ldr	r3, [r7, #16]
 801f488:	2b00      	cmp	r3, #0
 801f48a:	d101      	bne.n	801f490 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801f48c:	2303      	movs	r3, #3
 801f48e:	e0db      	b.n	801f648 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	781b      	ldrb	r3, [r3, #0]
 801f494:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d04e      	beq.n	801f53a <USBD_MSC_Setup+0xce>
 801f49c:	2b20      	cmp	r3, #32
 801f49e:	f040 80cb 	bne.w	801f638 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801f4a2:	683b      	ldr	r3, [r7, #0]
 801f4a4:	785b      	ldrb	r3, [r3, #1]
 801f4a6:	2bfe      	cmp	r3, #254	; 0xfe
 801f4a8:	d002      	beq.n	801f4b0 <USBD_MSC_Setup+0x44>
 801f4aa:	2bff      	cmp	r3, #255	; 0xff
 801f4ac:	d025      	beq.n	801f4fa <USBD_MSC_Setup+0x8e>
 801f4ae:	e03c      	b.n	801f52a <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f4b0:	683b      	ldr	r3, [r7, #0]
 801f4b2:	885b      	ldrh	r3, [r3, #2]
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d119      	bne.n	801f4ec <USBD_MSC_Setup+0x80>
 801f4b8:	683b      	ldr	r3, [r7, #0]
 801f4ba:	88db      	ldrh	r3, [r3, #6]
 801f4bc:	2b01      	cmp	r3, #1
 801f4be:	d115      	bne.n	801f4ec <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 801f4c0:	683b      	ldr	r3, [r7, #0]
 801f4c2:	781b      	ldrb	r3, [r3, #0]
 801f4c4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	da10      	bge.n	801f4ec <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f4d0:	699b      	ldr	r3, [r3, #24]
 801f4d2:	4798      	blx	r3
 801f4d4:	4603      	mov	r3, r0
 801f4d6:	461a      	mov	r2, r3
 801f4d8:	693b      	ldr	r3, [r7, #16]
 801f4da:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801f4dc:	693b      	ldr	r3, [r7, #16]
 801f4de:	2201      	movs	r2, #1
 801f4e0:	4619      	mov	r1, r3
 801f4e2:	6878      	ldr	r0, [r7, #4]
 801f4e4:	f002 fe3d 	bl	8022162 <USBD_CtlSendData>
 801f4e8:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f4ea:	e025      	b.n	801f538 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f4ec:	6839      	ldr	r1, [r7, #0]
 801f4ee:	6878      	ldr	r0, [r7, #4]
 801f4f0:	f002 fdc6 	bl	8022080 <USBD_CtlError>
            ret = USBD_FAIL;
 801f4f4:	2303      	movs	r3, #3
 801f4f6:	75fb      	strb	r3, [r7, #23]
          break;
 801f4f8:	e01e      	b.n	801f538 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f4fa:	683b      	ldr	r3, [r7, #0]
 801f4fc:	885b      	ldrh	r3, [r3, #2]
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d10c      	bne.n	801f51c <USBD_MSC_Setup+0xb0>
 801f502:	683b      	ldr	r3, [r7, #0]
 801f504:	88db      	ldrh	r3, [r3, #6]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d108      	bne.n	801f51c <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801f50a:	683b      	ldr	r3, [r7, #0]
 801f50c:	781b      	ldrb	r3, [r3, #0]
 801f50e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801f510:	2b00      	cmp	r3, #0
 801f512:	db03      	blt.n	801f51c <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801f514:	6878      	ldr	r0, [r7, #4]
 801f516:	f000 f948 	bl	801f7aa <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f51a:	e00d      	b.n	801f538 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801f51c:	6839      	ldr	r1, [r7, #0]
 801f51e:	6878      	ldr	r0, [r7, #4]
 801f520:	f002 fdae 	bl	8022080 <USBD_CtlError>
            ret = USBD_FAIL;
 801f524:	2303      	movs	r3, #3
 801f526:	75fb      	strb	r3, [r7, #23]
          break;
 801f528:	e006      	b.n	801f538 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801f52a:	6839      	ldr	r1, [r7, #0]
 801f52c:	6878      	ldr	r0, [r7, #4]
 801f52e:	f002 fda7 	bl	8022080 <USBD_CtlError>
          ret = USBD_FAIL;
 801f532:	2303      	movs	r3, #3
 801f534:	75fb      	strb	r3, [r7, #23]
          break;
 801f536:	bf00      	nop
      }
      break;
 801f538:	e085      	b.n	801f646 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f53a:	683b      	ldr	r3, [r7, #0]
 801f53c:	785b      	ldrb	r3, [r3, #1]
 801f53e:	2b0b      	cmp	r3, #11
 801f540:	d871      	bhi.n	801f626 <USBD_MSC_Setup+0x1ba>
 801f542:	a201      	add	r2, pc, #4	; (adr r2, 801f548 <USBD_MSC_Setup+0xdc>)
 801f544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f548:	0801f579 	.word	0x0801f579
 801f54c:	0801f5f5 	.word	0x0801f5f5
 801f550:	0801f627 	.word	0x0801f627
 801f554:	0801f627 	.word	0x0801f627
 801f558:	0801f627 	.word	0x0801f627
 801f55c:	0801f627 	.word	0x0801f627
 801f560:	0801f627 	.word	0x0801f627
 801f564:	0801f627 	.word	0x0801f627
 801f568:	0801f627 	.word	0x0801f627
 801f56c:	0801f627 	.word	0x0801f627
 801f570:	0801f5a3 	.word	0x0801f5a3
 801f574:	0801f5cd 	.word	0x0801f5cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f578:	687b      	ldr	r3, [r7, #4]
 801f57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f57e:	b2db      	uxtb	r3, r3
 801f580:	2b03      	cmp	r3, #3
 801f582:	d107      	bne.n	801f594 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801f584:	f107 030e 	add.w	r3, r7, #14
 801f588:	2202      	movs	r2, #2
 801f58a:	4619      	mov	r1, r3
 801f58c:	6878      	ldr	r0, [r7, #4]
 801f58e:	f002 fde8 	bl	8022162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f592:	e050      	b.n	801f636 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f594:	6839      	ldr	r1, [r7, #0]
 801f596:	6878      	ldr	r0, [r7, #4]
 801f598:	f002 fd72 	bl	8022080 <USBD_CtlError>
            ret = USBD_FAIL;
 801f59c:	2303      	movs	r3, #3
 801f59e:	75fb      	strb	r3, [r7, #23]
          break;
 801f5a0:	e049      	b.n	801f636 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f5a8:	b2db      	uxtb	r3, r3
 801f5aa:	2b03      	cmp	r3, #3
 801f5ac:	d107      	bne.n	801f5be <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801f5ae:	693b      	ldr	r3, [r7, #16]
 801f5b0:	3304      	adds	r3, #4
 801f5b2:	2201      	movs	r2, #1
 801f5b4:	4619      	mov	r1, r3
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f002 fdd3 	bl	8022162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f5bc:	e03b      	b.n	801f636 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f5be:	6839      	ldr	r1, [r7, #0]
 801f5c0:	6878      	ldr	r0, [r7, #4]
 801f5c2:	f002 fd5d 	bl	8022080 <USBD_CtlError>
            ret = USBD_FAIL;
 801f5c6:	2303      	movs	r3, #3
 801f5c8:	75fb      	strb	r3, [r7, #23]
          break;
 801f5ca:	e034      	b.n	801f636 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f5d2:	b2db      	uxtb	r3, r3
 801f5d4:	2b03      	cmp	r3, #3
 801f5d6:	d106      	bne.n	801f5e6 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801f5d8:	683b      	ldr	r3, [r7, #0]
 801f5da:	885b      	ldrh	r3, [r3, #2]
 801f5dc:	b2db      	uxtb	r3, r3
 801f5de:	461a      	mov	r2, r3
 801f5e0:	693b      	ldr	r3, [r7, #16]
 801f5e2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801f5e4:	e027      	b.n	801f636 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 801f5e6:	6839      	ldr	r1, [r7, #0]
 801f5e8:	6878      	ldr	r0, [r7, #4]
 801f5ea:	f002 fd49 	bl	8022080 <USBD_CtlError>
            ret = USBD_FAIL;
 801f5ee:	2303      	movs	r3, #3
 801f5f0:	75fb      	strb	r3, [r7, #23]
          break;
 801f5f2:	e020      	b.n	801f636 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801f5fa:	b2db      	uxtb	r3, r3
 801f5fc:	2b03      	cmp	r3, #3
 801f5fe:	d119      	bne.n	801f634 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801f600:	683b      	ldr	r3, [r7, #0]
 801f602:	885b      	ldrh	r3, [r3, #2]
 801f604:	2b00      	cmp	r3, #0
 801f606:	d115      	bne.n	801f634 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801f608:	683b      	ldr	r3, [r7, #0]
 801f60a:	889b      	ldrh	r3, [r3, #4]
 801f60c:	b2db      	uxtb	r3, r3
 801f60e:	4619      	mov	r1, r3
 801f610:	6878      	ldr	r0, [r7, #4]
 801f612:	f003 f9dd 	bl	80229d0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801f616:	683b      	ldr	r3, [r7, #0]
 801f618:	889b      	ldrh	r3, [r3, #4]
 801f61a:	b2db      	uxtb	r3, r3
 801f61c:	4619      	mov	r1, r3
 801f61e:	6878      	ldr	r0, [r7, #4]
 801f620:	f000 fa82 	bl	801fb28 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801f624:	e006      	b.n	801f634 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801f626:	6839      	ldr	r1, [r7, #0]
 801f628:	6878      	ldr	r0, [r7, #4]
 801f62a:	f002 fd29 	bl	8022080 <USBD_CtlError>
          ret = USBD_FAIL;
 801f62e:	2303      	movs	r3, #3
 801f630:	75fb      	strb	r3, [r7, #23]
          break;
 801f632:	e000      	b.n	801f636 <USBD_MSC_Setup+0x1ca>
          break;
 801f634:	bf00      	nop
      }
      break;
 801f636:	e006      	b.n	801f646 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801f638:	6839      	ldr	r1, [r7, #0]
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f002 fd20 	bl	8022080 <USBD_CtlError>
      ret = USBD_FAIL;
 801f640:	2303      	movs	r3, #3
 801f642:	75fb      	strb	r3, [r7, #23]
      break;
 801f644:	bf00      	nop
  }

  return (uint8_t)ret;
 801f646:	7dfb      	ldrb	r3, [r7, #23]
}
 801f648:	4618      	mov	r0, r3
 801f64a:	3718      	adds	r7, #24
 801f64c:	46bd      	mov	sp, r7
 801f64e:	bd80      	pop	{r7, pc}

0801f650 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f650:	b580      	push	{r7, lr}
 801f652:	b082      	sub	sp, #8
 801f654:	af00      	add	r7, sp, #0
 801f656:	6078      	str	r0, [r7, #4]
 801f658:	460b      	mov	r3, r1
 801f65a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801f65c:	78fb      	ldrb	r3, [r7, #3]
 801f65e:	4619      	mov	r1, r3
 801f660:	6878      	ldr	r0, [r7, #4]
 801f662:	f000 f8dc 	bl	801f81e <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801f666:	2300      	movs	r3, #0
}
 801f668:	4618      	mov	r0, r3
 801f66a:	3708      	adds	r7, #8
 801f66c:	46bd      	mov	sp, r7
 801f66e:	bd80      	pop	{r7, pc}

0801f670 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f670:	b580      	push	{r7, lr}
 801f672:	b082      	sub	sp, #8
 801f674:	af00      	add	r7, sp, #0
 801f676:	6078      	str	r0, [r7, #4]
 801f678:	460b      	mov	r3, r1
 801f67a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801f67c:	78fb      	ldrb	r3, [r7, #3]
 801f67e:	4619      	mov	r1, r3
 801f680:	6878      	ldr	r0, [r7, #4]
 801f682:	f000 f902 	bl	801f88a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801f686:	2300      	movs	r3, #0
}
 801f688:	4618      	mov	r0, r3
 801f68a:	3708      	adds	r7, #8
 801f68c:	46bd      	mov	sp, r7
 801f68e:	bd80      	pop	{r7, pc}

0801f690 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801f690:	b480      	push	{r7}
 801f692:	b083      	sub	sp, #12
 801f694:	af00      	add	r7, sp, #0
 801f696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	2220      	movs	r2, #32
 801f69c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801f69e:	4b03      	ldr	r3, [pc, #12]	; (801f6ac <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	370c      	adds	r7, #12
 801f6a4:	46bd      	mov	sp, r7
 801f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6aa:	4770      	bx	lr
 801f6ac:	200005cc 	.word	0x200005cc

0801f6b0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801f6b0:	b480      	push	{r7}
 801f6b2:	b083      	sub	sp, #12
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	2220      	movs	r2, #32
 801f6bc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801f6be:	4b03      	ldr	r3, [pc, #12]	; (801f6cc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 801f6c0:	4618      	mov	r0, r3
 801f6c2:	370c      	adds	r7, #12
 801f6c4:	46bd      	mov	sp, r7
 801f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ca:	4770      	bx	lr
 801f6cc:	200005ec 	.word	0x200005ec

0801f6d0 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801f6d0:	b480      	push	{r7}
 801f6d2:	b083      	sub	sp, #12
 801f6d4:	af00      	add	r7, sp, #0
 801f6d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	2220      	movs	r2, #32
 801f6dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801f6de:	4b03      	ldr	r3, [pc, #12]	; (801f6ec <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	370c      	adds	r7, #12
 801f6e4:	46bd      	mov	sp, r7
 801f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ea:	4770      	bx	lr
 801f6ec:	2000060c 	.word	0x2000060c

0801f6f0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801f6f0:	b480      	push	{r7}
 801f6f2:	b083      	sub	sp, #12
 801f6f4:	af00      	add	r7, sp, #0
 801f6f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	220a      	movs	r2, #10
 801f6fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801f6fe:	4b03      	ldr	r3, [pc, #12]	; (801f70c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801f700:	4618      	mov	r0, r3
 801f702:	370c      	adds	r7, #12
 801f704:	46bd      	mov	sp, r7
 801f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f70a:	4770      	bx	lr
 801f70c:	2000062c 	.word	0x2000062c

0801f710 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801f710:	b480      	push	{r7}
 801f712:	b083      	sub	sp, #12
 801f714:	af00      	add	r7, sp, #0
 801f716:	6078      	str	r0, [r7, #4]
 801f718:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801f71a:	683b      	ldr	r3, [r7, #0]
 801f71c:	2b00      	cmp	r3, #0
 801f71e:	d101      	bne.n	801f724 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801f720:	2303      	movs	r3, #3
 801f722:	e004      	b.n	801f72e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	683a      	ldr	r2, [r7, #0]
 801f728:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801f72c:	2300      	movs	r3, #0
}
 801f72e:	4618      	mov	r0, r3
 801f730:	370c      	adds	r7, #12
 801f732:	46bd      	mov	sp, r7
 801f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f738:	4770      	bx	lr

0801f73a <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801f73a:	b580      	push	{r7, lr}
 801f73c:	b084      	sub	sp, #16
 801f73e:	af00      	add	r7, sp, #0
 801f740:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f748:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f74a:	68fb      	ldr	r3, [r7, #12]
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	d028      	beq.n	801f7a2 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801f750:	68fb      	ldr	r3, [r7, #12]
 801f752:	2200      	movs	r2, #0
 801f754:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801f756:	68fb      	ldr	r3, [r7, #12]
 801f758:	2200      	movs	r2, #0
 801f75a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801f75c:	68fb      	ldr	r3, [r7, #12]
 801f75e:	2200      	movs	r2, #0
 801f760:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801f764:	68fb      	ldr	r3, [r7, #12]
 801f766:	2200      	movs	r2, #0
 801f768:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	2200      	movs	r2, #0
 801f770:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	2000      	movs	r0, #0
 801f77e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801f780:	2101      	movs	r1, #1
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f003 f924 	bl	80229d0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801f788:	2181      	movs	r1, #129	; 0x81
 801f78a:	6878      	ldr	r0, [r7, #4]
 801f78c:	f003 f920 	bl	80229d0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f790:	68fb      	ldr	r3, [r7, #12]
 801f792:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f796:	231f      	movs	r3, #31
 801f798:	2101      	movs	r1, #1
 801f79a:	6878      	ldr	r0, [r7, #4]
 801f79c:	f003 f9e1 	bl	8022b62 <USBD_LL_PrepareReceive>
 801f7a0:	e000      	b.n	801f7a4 <MSC_BOT_Init+0x6a>
    return;
 801f7a2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f7a4:	3710      	adds	r7, #16
 801f7a6:	46bd      	mov	sp, r7
 801f7a8:	bd80      	pop	{r7, pc}

0801f7aa <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801f7aa:	b580      	push	{r7, lr}
 801f7ac:	b084      	sub	sp, #16
 801f7ae:	af00      	add	r7, sp, #0
 801f7b0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f7b8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f7ba:	68fb      	ldr	r3, [r7, #12]
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d016      	beq.n	801f7ee <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801f7c0:	68fb      	ldr	r3, [r7, #12]
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	2201      	movs	r2, #1
 801f7ca:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 801f7cc:	2181      	movs	r1, #129	; 0x81
 801f7ce:	6878      	ldr	r0, [r7, #4]
 801f7d0:	f003 f93c 	bl	8022a4c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 801f7d4:	2101      	movs	r1, #1
 801f7d6:	6878      	ldr	r0, [r7, #4]
 801f7d8:	f003 f938 	bl	8022a4c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801f7e2:	231f      	movs	r3, #31
 801f7e4:	2101      	movs	r1, #1
 801f7e6:	6878      	ldr	r0, [r7, #4]
 801f7e8:	f003 f9bb 	bl	8022b62 <USBD_LL_PrepareReceive>
 801f7ec:	e000      	b.n	801f7f0 <MSC_BOT_Reset+0x46>
    return;
 801f7ee:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801f7f0:	3710      	adds	r7, #16
 801f7f2:	46bd      	mov	sp, r7
 801f7f4:	bd80      	pop	{r7, pc}

0801f7f6 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801f7f6:	b480      	push	{r7}
 801f7f8:	b085      	sub	sp, #20
 801f7fa:	af00      	add	r7, sp, #0
 801f7fc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f804:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801f806:	68fb      	ldr	r3, [r7, #12]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d002      	beq.n	801f812 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	2200      	movs	r2, #0
 801f810:	721a      	strb	r2, [r3, #8]
  }
}
 801f812:	bf00      	nop
 801f814:	3714      	adds	r7, #20
 801f816:	46bd      	mov	sp, r7
 801f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f81c:	4770      	bx	lr

0801f81e <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f81e:	b580      	push	{r7, lr}
 801f820:	b084      	sub	sp, #16
 801f822:	af00      	add	r7, sp, #0
 801f824:	6078      	str	r0, [r7, #4]
 801f826:	460b      	mov	r3, r1
 801f828:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f830:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	2b00      	cmp	r3, #0
 801f836:	d020      	beq.n	801f87a <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	7a1b      	ldrb	r3, [r3, #8]
 801f83c:	2b02      	cmp	r3, #2
 801f83e:	d005      	beq.n	801f84c <MSC_BOT_DataIn+0x2e>
 801f840:	2b02      	cmp	r3, #2
 801f842:	db1c      	blt.n	801f87e <MSC_BOT_DataIn+0x60>
 801f844:	3b03      	subs	r3, #3
 801f846:	2b01      	cmp	r3, #1
 801f848:	d819      	bhi.n	801f87e <MSC_BOT_DataIn+0x60>
 801f84a:	e011      	b.n	801f870 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f852:	68fb      	ldr	r3, [r7, #12]
 801f854:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f858:	461a      	mov	r2, r3
 801f85a:	6878      	ldr	r0, [r7, #4]
 801f85c:	f000 f992 	bl	801fb84 <SCSI_ProcessCmd>
 801f860:	4603      	mov	r3, r0
 801f862:	2b00      	cmp	r3, #0
 801f864:	da0d      	bge.n	801f882 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f866:	2101      	movs	r1, #1
 801f868:	6878      	ldr	r0, [r7, #4]
 801f86a:	f000 f8fb 	bl	801fa64 <MSC_BOT_SendCSW>
      }
      break;
 801f86e:	e008      	b.n	801f882 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f870:	2100      	movs	r1, #0
 801f872:	6878      	ldr	r0, [r7, #4]
 801f874:	f000 f8f6 	bl	801fa64 <MSC_BOT_SendCSW>
      break;
 801f878:	e004      	b.n	801f884 <MSC_BOT_DataIn+0x66>
    return;
 801f87a:	bf00      	nop
 801f87c:	e002      	b.n	801f884 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801f87e:	bf00      	nop
 801f880:	e000      	b.n	801f884 <MSC_BOT_DataIn+0x66>
      break;
 801f882:	bf00      	nop
  }
}
 801f884:	3710      	adds	r7, #16
 801f886:	46bd      	mov	sp, r7
 801f888:	bd80      	pop	{r7, pc}

0801f88a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801f88a:	b580      	push	{r7, lr}
 801f88c:	b084      	sub	sp, #16
 801f88e:	af00      	add	r7, sp, #0
 801f890:	6078      	str	r0, [r7, #4]
 801f892:	460b      	mov	r3, r1
 801f894:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f89c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	2b00      	cmp	r3, #0
 801f8a2:	d01c      	beq.n	801f8de <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	7a1b      	ldrb	r3, [r3, #8]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d002      	beq.n	801f8b2 <MSC_BOT_DataOut+0x28>
 801f8ac:	2b01      	cmp	r3, #1
 801f8ae:	d004      	beq.n	801f8ba <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801f8b0:	e018      	b.n	801f8e4 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 801f8b2:	6878      	ldr	r0, [r7, #4]
 801f8b4:	f000 f81a 	bl	801f8ec <MSC_BOT_CBW_Decode>
      break;
 801f8b8:	e014      	b.n	801f8e4 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f8c0:	68fb      	ldr	r3, [r7, #12]
 801f8c2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f8c6:	461a      	mov	r2, r3
 801f8c8:	6878      	ldr	r0, [r7, #4]
 801f8ca:	f000 f95b 	bl	801fb84 <SCSI_ProcessCmd>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	da06      	bge.n	801f8e2 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f8d4:	2101      	movs	r1, #1
 801f8d6:	6878      	ldr	r0, [r7, #4]
 801f8d8:	f000 f8c4 	bl	801fa64 <MSC_BOT_SendCSW>
      break;
 801f8dc:	e001      	b.n	801f8e2 <MSC_BOT_DataOut+0x58>
    return;
 801f8de:	bf00      	nop
 801f8e0:	e000      	b.n	801f8e4 <MSC_BOT_DataOut+0x5a>
      break;
 801f8e2:	bf00      	nop
  }
}
 801f8e4:	3710      	adds	r7, #16
 801f8e6:	46bd      	mov	sp, r7
 801f8e8:	bd80      	pop	{r7, pc}
	...

0801f8ec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801f8ec:	b580      	push	{r7, lr}
 801f8ee:	b084      	sub	sp, #16
 801f8f0:	af00      	add	r7, sp, #0
 801f8f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f8fa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	2b00      	cmp	r3, #0
 801f900:	d077      	beq.n	801f9f2 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801f902:	68fb      	ldr	r3, [r7, #12]
 801f904:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801f908:	68fb      	ldr	r3, [r7, #12]
 801f90a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801f90e:	68fb      	ldr	r3, [r7, #12]
 801f910:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801f914:	68fb      	ldr	r3, [r7, #12]
 801f916:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f91a:	2101      	movs	r1, #1
 801f91c:	6878      	ldr	r0, [r7, #4]
 801f91e:	f003 f941 	bl	8022ba4 <USBD_LL_GetRxDataSize>
 801f922:	4603      	mov	r3, r0
 801f924:	2b1f      	cmp	r3, #31
 801f926:	d114      	bne.n	801f952 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801f92e:	4a34      	ldr	r2, [pc, #208]	; (801fa00 <MSC_BOT_CBW_Decode+0x114>)
 801f930:	4293      	cmp	r3, r2
 801f932:	d10e      	bne.n	801f952 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801f93a:	2b01      	cmp	r3, #1
 801f93c:	d809      	bhi.n	801f952 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f93e:	68fb      	ldr	r3, [r7, #12]
 801f940:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801f944:	2b00      	cmp	r3, #0
 801f946:	d004      	beq.n	801f952 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801f94e:	2b10      	cmp	r3, #16
 801f950:	d90e      	bls.n	801f970 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801f952:	68fb      	ldr	r3, [r7, #12]
 801f954:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f958:	2320      	movs	r3, #32
 801f95a:	2205      	movs	r2, #5
 801f95c:	6878      	ldr	r0, [r7, #4]
 801f95e:	f000 fdbc 	bl	80204da <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801f962:	68fb      	ldr	r3, [r7, #12]
 801f964:	2202      	movs	r2, #2
 801f966:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801f968:	6878      	ldr	r0, [r7, #4]
 801f96a:	f000 f8ab 	bl	801fac4 <MSC_BOT_Abort>
 801f96e:	e043      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801f97c:	461a      	mov	r2, r3
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	f000 f900 	bl	801fb84 <SCSI_ProcessCmd>
 801f984:	4603      	mov	r3, r0
 801f986:	2b00      	cmp	r3, #0
 801f988:	da0c      	bge.n	801f9a4 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	7a1b      	ldrb	r3, [r3, #8]
 801f98e:	2b05      	cmp	r3, #5
 801f990:	d104      	bne.n	801f99c <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801f992:	2101      	movs	r1, #1
 801f994:	6878      	ldr	r0, [r7, #4]
 801f996:	f000 f865 	bl	801fa64 <MSC_BOT_SendCSW>
 801f99a:	e02d      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f99c:	6878      	ldr	r0, [r7, #4]
 801f99e:	f000 f891 	bl	801fac4 <MSC_BOT_Abort>
 801f9a2:	e029      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f9a4:	68fb      	ldr	r3, [r7, #12]
 801f9a6:	7a1b      	ldrb	r3, [r3, #8]
 801f9a8:	2b02      	cmp	r3, #2
 801f9aa:	d024      	beq.n	801f9f6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801f9b0:	2b01      	cmp	r3, #1
 801f9b2:	d020      	beq.n	801f9f6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801f9b4:	68fb      	ldr	r3, [r7, #12]
 801f9b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801f9b8:	2b03      	cmp	r3, #3
 801f9ba:	d01c      	beq.n	801f9f6 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	68db      	ldr	r3, [r3, #12]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d009      	beq.n	801f9d8 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801f9c4:	68fb      	ldr	r3, [r7, #12]
 801f9c6:	f103 0110 	add.w	r1, r3, #16
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	68db      	ldr	r3, [r3, #12]
 801f9ce:	461a      	mov	r2, r3
 801f9d0:	6878      	ldr	r0, [r7, #4]
 801f9d2:	f000 f817 	bl	801fa04 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801f9d6:	e00f      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	68db      	ldr	r3, [r3, #12]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d104      	bne.n	801f9ea <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801f9e0:	2100      	movs	r1, #0
 801f9e2:	6878      	ldr	r0, [r7, #4]
 801f9e4:	f000 f83e 	bl	801fa64 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801f9e8:	e006      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801f9ea:	6878      	ldr	r0, [r7, #4]
 801f9ec:	f000 f86a 	bl	801fac4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801f9f0:	e002      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801f9f2:	bf00      	nop
 801f9f4:	e000      	b.n	801f9f8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801f9f6:	bf00      	nop
    }
  }
}
 801f9f8:	3710      	adds	r7, #16
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	bd80      	pop	{r7, pc}
 801f9fe:	bf00      	nop
 801fa00:	43425355 	.word	0x43425355

0801fa04 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801fa04:	b580      	push	{r7, lr}
 801fa06:	b086      	sub	sp, #24
 801fa08:	af00      	add	r7, sp, #0
 801fa0a:	60f8      	str	r0, [r7, #12]
 801fa0c:	60b9      	str	r1, [r7, #8]
 801fa0e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa10:	68fb      	ldr	r3, [r7, #12]
 801fa12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa16:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 801fa18:	697b      	ldr	r3, [r7, #20]
 801fa1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fa1e:	687a      	ldr	r2, [r7, #4]
 801fa20:	4293      	cmp	r3, r2
 801fa22:	bf28      	it	cs
 801fa24:	4613      	movcs	r3, r2
 801fa26:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fa28:	697b      	ldr	r3, [r7, #20]
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d015      	beq.n	801fa5a <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 801fa2e:	697b      	ldr	r3, [r7, #20]
 801fa30:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	1ad2      	subs	r2, r2, r3
 801fa38:	697b      	ldr	r3, [r7, #20]
 801fa3a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fa3e:	697b      	ldr	r3, [r7, #20]
 801fa40:	2200      	movs	r2, #0
 801fa42:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fa46:	697b      	ldr	r3, [r7, #20]
 801fa48:	2204      	movs	r2, #4
 801fa4a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 801fa4c:	693b      	ldr	r3, [r7, #16]
 801fa4e:	68ba      	ldr	r2, [r7, #8]
 801fa50:	2181      	movs	r1, #129	; 0x81
 801fa52:	68f8      	ldr	r0, [r7, #12]
 801fa54:	f003 f864 	bl	8022b20 <USBD_LL_Transmit>
 801fa58:	e000      	b.n	801fa5c <MSC_BOT_SendData+0x58>
    return;
 801fa5a:	bf00      	nop
}
 801fa5c:	3718      	adds	r7, #24
 801fa5e:	46bd      	mov	sp, r7
 801fa60:	bd80      	pop	{r7, pc}
	...

0801fa64 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801fa64:	b580      	push	{r7, lr}
 801fa66:	b084      	sub	sp, #16
 801fa68:	af00      	add	r7, sp, #0
 801fa6a:	6078      	str	r0, [r7, #4]
 801fa6c:	460b      	mov	r3, r1
 801fa6e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fa76:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d01b      	beq.n	801fab6 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	4a0f      	ldr	r2, [pc, #60]	; (801fac0 <MSC_BOT_SendCSW+0x5c>)
 801fa82:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	78fa      	ldrb	r2, [r7, #3]
 801fa8a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	2200      	movs	r2, #0
 801fa92:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801fa9a:	230d      	movs	r3, #13
 801fa9c:	2181      	movs	r1, #129	; 0x81
 801fa9e:	6878      	ldr	r0, [r7, #4]
 801faa0:	f003 f83e 	bl	8022b20 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801faaa:	231f      	movs	r3, #31
 801faac:	2101      	movs	r1, #1
 801faae:	6878      	ldr	r0, [r7, #4]
 801fab0:	f003 f857 	bl	8022b62 <USBD_LL_PrepareReceive>
 801fab4:	e000      	b.n	801fab8 <MSC_BOT_SendCSW+0x54>
    return;
 801fab6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801fab8:	3710      	adds	r7, #16
 801faba:	46bd      	mov	sp, r7
 801fabc:	bd80      	pop	{r7, pc}
 801fabe:	bf00      	nop
 801fac0:	53425355 	.word	0x53425355

0801fac4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801fac4:	b580      	push	{r7, lr}
 801fac6:	b084      	sub	sp, #16
 801fac8:	af00      	add	r7, sp, #0
 801faca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fad2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fad4:	68fb      	ldr	r3, [r7, #12]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d022      	beq.n	801fb20 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fada:	68fb      	ldr	r3, [r7, #12]
 801fadc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d10c      	bne.n	801fafe <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 801fae4:	68fb      	ldr	r3, [r7, #12]
 801fae6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801faea:	2b00      	cmp	r3, #0
 801faec:	d007      	beq.n	801fafe <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d103      	bne.n	801fafe <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801faf6:	2101      	movs	r1, #1
 801faf8:	6878      	ldr	r0, [r7, #4]
 801fafa:	f002 ff88 	bl	8022a0e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fafe:	2181      	movs	r1, #129	; 0x81
 801fb00:	6878      	ldr	r0, [r7, #4]
 801fb02:	f002 ff84 	bl	8022a0e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	7a5b      	ldrb	r3, [r3, #9]
 801fb0a:	2b02      	cmp	r3, #2
 801fb0c:	d109      	bne.n	801fb22 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fb0e:	2181      	movs	r1, #129	; 0x81
 801fb10:	6878      	ldr	r0, [r7, #4]
 801fb12:	f002 ff7c 	bl	8022a0e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fb16:	2101      	movs	r1, #1
 801fb18:	6878      	ldr	r0, [r7, #4]
 801fb1a:	f002 ff78 	bl	8022a0e <USBD_LL_StallEP>
 801fb1e:	e000      	b.n	801fb22 <MSC_BOT_Abort+0x5e>
    return;
 801fb20:	bf00      	nop
  }
}
 801fb22:	3710      	adds	r7, #16
 801fb24:	46bd      	mov	sp, r7
 801fb26:	bd80      	pop	{r7, pc}

0801fb28 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801fb28:	b580      	push	{r7, lr}
 801fb2a:	b084      	sub	sp, #16
 801fb2c:	af00      	add	r7, sp, #0
 801fb2e:	6078      	str	r0, [r7, #4]
 801fb30:	460b      	mov	r3, r1
 801fb32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb3a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d019      	beq.n	801fb76 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801fb42:	68fb      	ldr	r3, [r7, #12]
 801fb44:	7a5b      	ldrb	r3, [r3, #9]
 801fb46:	2b02      	cmp	r3, #2
 801fb48:	d108      	bne.n	801fb5c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801fb4a:	2181      	movs	r1, #129	; 0x81
 801fb4c:	6878      	ldr	r0, [r7, #4]
 801fb4e:	f002 ff5e 	bl	8022a0e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801fb52:	2101      	movs	r1, #1
 801fb54:	6878      	ldr	r0, [r7, #4]
 801fb56:	f002 ff5a 	bl	8022a0e <USBD_LL_StallEP>
 801fb5a:	e00f      	b.n	801fb7c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fb5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	da0a      	bge.n	801fb7a <MSC_BOT_CplClrFeature+0x52>
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	7a5b      	ldrb	r3, [r3, #9]
 801fb68:	2b01      	cmp	r3, #1
 801fb6a:	d006      	beq.n	801fb7a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fb6c:	2101      	movs	r1, #1
 801fb6e:	6878      	ldr	r0, [r7, #4]
 801fb70:	f7ff ff78 	bl	801fa64 <MSC_BOT_SendCSW>
 801fb74:	e002      	b.n	801fb7c <MSC_BOT_CplClrFeature+0x54>
    return;
 801fb76:	bf00      	nop
 801fb78:	e000      	b.n	801fb7c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 801fb7a:	bf00      	nop
  }
}
 801fb7c:	3710      	adds	r7, #16
 801fb7e:	46bd      	mov	sp, r7
 801fb80:	bd80      	pop	{r7, pc}
	...

0801fb84 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b086      	sub	sp, #24
 801fb88:	af00      	add	r7, sp, #0
 801fb8a:	60f8      	str	r0, [r7, #12]
 801fb8c:	460b      	mov	r3, r1
 801fb8e:	607a      	str	r2, [r7, #4]
 801fb90:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fb92:	68fb      	ldr	r3, [r7, #12]
 801fb94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fb98:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801fb9a:	693b      	ldr	r3, [r7, #16]
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d102      	bne.n	801fba6 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 801fba0:	f04f 33ff 	mov.w	r3, #4294967295
 801fba4:	e168      	b.n	801fe78 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	781b      	ldrb	r3, [r3, #0]
 801fbaa:	2baa      	cmp	r3, #170	; 0xaa
 801fbac:	f000 8144 	beq.w	801fe38 <SCSI_ProcessCmd+0x2b4>
 801fbb0:	2baa      	cmp	r3, #170	; 0xaa
 801fbb2:	f300 8153 	bgt.w	801fe5c <SCSI_ProcessCmd+0x2d8>
 801fbb6:	2ba8      	cmp	r3, #168	; 0xa8
 801fbb8:	f000 812c 	beq.w	801fe14 <SCSI_ProcessCmd+0x290>
 801fbbc:	2ba8      	cmp	r3, #168	; 0xa8
 801fbbe:	f300 814d 	bgt.w	801fe5c <SCSI_ProcessCmd+0x2d8>
 801fbc2:	2b5a      	cmp	r3, #90	; 0x5a
 801fbc4:	f300 80c0 	bgt.w	801fd48 <SCSI_ProcessCmd+0x1c4>
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	f2c0 8147 	blt.w	801fe5c <SCSI_ProcessCmd+0x2d8>
 801fbce:	2b5a      	cmp	r3, #90	; 0x5a
 801fbd0:	f200 8144 	bhi.w	801fe5c <SCSI_ProcessCmd+0x2d8>
 801fbd4:	a201      	add	r2, pc, #4	; (adr r2, 801fbdc <SCSI_ProcessCmd+0x58>)
 801fbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbda:	bf00      	nop
 801fbdc:	0801fd4f 	.word	0x0801fd4f
 801fbe0:	0801fe5d 	.word	0x0801fe5d
 801fbe4:	0801fe5d 	.word	0x0801fe5d
 801fbe8:	0801fd61 	.word	0x0801fd61
 801fbec:	0801fe5d 	.word	0x0801fe5d
 801fbf0:	0801fe5d 	.word	0x0801fe5d
 801fbf4:	0801fe5d 	.word	0x0801fe5d
 801fbf8:	0801fe5d 	.word	0x0801fe5d
 801fbfc:	0801fe5d 	.word	0x0801fe5d
 801fc00:	0801fe5d 	.word	0x0801fe5d
 801fc04:	0801fe5d 	.word	0x0801fe5d
 801fc08:	0801fe5d 	.word	0x0801fe5d
 801fc0c:	0801fe5d 	.word	0x0801fe5d
 801fc10:	0801fe5d 	.word	0x0801fe5d
 801fc14:	0801fe5d 	.word	0x0801fe5d
 801fc18:	0801fe5d 	.word	0x0801fe5d
 801fc1c:	0801fe5d 	.word	0x0801fe5d
 801fc20:	0801fe5d 	.word	0x0801fe5d
 801fc24:	0801fd73 	.word	0x0801fd73
 801fc28:	0801fe5d 	.word	0x0801fe5d
 801fc2c:	0801fe5d 	.word	0x0801fe5d
 801fc30:	0801fe5d 	.word	0x0801fe5d
 801fc34:	0801fe5d 	.word	0x0801fe5d
 801fc38:	0801fe5d 	.word	0x0801fe5d
 801fc3c:	0801fe5d 	.word	0x0801fe5d
 801fc40:	0801fe5d 	.word	0x0801fe5d
 801fc44:	0801fda9 	.word	0x0801fda9
 801fc48:	0801fd85 	.word	0x0801fd85
 801fc4c:	0801fe5d 	.word	0x0801fe5d
 801fc50:	0801fe5d 	.word	0x0801fe5d
 801fc54:	0801fd97 	.word	0x0801fd97
 801fc58:	0801fe5d 	.word	0x0801fe5d
 801fc5c:	0801fe5d 	.word	0x0801fe5d
 801fc60:	0801fe5d 	.word	0x0801fe5d
 801fc64:	0801fe5d 	.word	0x0801fe5d
 801fc68:	0801fdcd 	.word	0x0801fdcd
 801fc6c:	0801fe5d 	.word	0x0801fe5d
 801fc70:	0801fddf 	.word	0x0801fddf
 801fc74:	0801fe5d 	.word	0x0801fe5d
 801fc78:	0801fe5d 	.word	0x0801fe5d
 801fc7c:	0801fe03 	.word	0x0801fe03
 801fc80:	0801fe5d 	.word	0x0801fe5d
 801fc84:	0801fe27 	.word	0x0801fe27
 801fc88:	0801fe5d 	.word	0x0801fe5d
 801fc8c:	0801fe5d 	.word	0x0801fe5d
 801fc90:	0801fe5d 	.word	0x0801fe5d
 801fc94:	0801fe5d 	.word	0x0801fe5d
 801fc98:	0801fe4b 	.word	0x0801fe4b
 801fc9c:	0801fe5d 	.word	0x0801fe5d
 801fca0:	0801fe5d 	.word	0x0801fe5d
 801fca4:	0801fe5d 	.word	0x0801fe5d
 801fca8:	0801fe5d 	.word	0x0801fe5d
 801fcac:	0801fe5d 	.word	0x0801fe5d
 801fcb0:	0801fe5d 	.word	0x0801fe5d
 801fcb4:	0801fe5d 	.word	0x0801fe5d
 801fcb8:	0801fe5d 	.word	0x0801fe5d
 801fcbc:	0801fe5d 	.word	0x0801fe5d
 801fcc0:	0801fe5d 	.word	0x0801fe5d
 801fcc4:	0801fe5d 	.word	0x0801fe5d
 801fcc8:	0801fe5d 	.word	0x0801fe5d
 801fccc:	0801fe5d 	.word	0x0801fe5d
 801fcd0:	0801fe5d 	.word	0x0801fe5d
 801fcd4:	0801fe5d 	.word	0x0801fe5d
 801fcd8:	0801fe5d 	.word	0x0801fe5d
 801fcdc:	0801fe5d 	.word	0x0801fe5d
 801fce0:	0801fe5d 	.word	0x0801fe5d
 801fce4:	0801fe5d 	.word	0x0801fe5d
 801fce8:	0801fe5d 	.word	0x0801fe5d
 801fcec:	0801fe5d 	.word	0x0801fe5d
 801fcf0:	0801fe5d 	.word	0x0801fe5d
 801fcf4:	0801fe5d 	.word	0x0801fe5d
 801fcf8:	0801fe5d 	.word	0x0801fe5d
 801fcfc:	0801fe5d 	.word	0x0801fe5d
 801fd00:	0801fe5d 	.word	0x0801fe5d
 801fd04:	0801fe5d 	.word	0x0801fe5d
 801fd08:	0801fe5d 	.word	0x0801fe5d
 801fd0c:	0801fe5d 	.word	0x0801fe5d
 801fd10:	0801fe5d 	.word	0x0801fe5d
 801fd14:	0801fe5d 	.word	0x0801fe5d
 801fd18:	0801fe5d 	.word	0x0801fe5d
 801fd1c:	0801fe5d 	.word	0x0801fe5d
 801fd20:	0801fe5d 	.word	0x0801fe5d
 801fd24:	0801fe5d 	.word	0x0801fe5d
 801fd28:	0801fe5d 	.word	0x0801fe5d
 801fd2c:	0801fe5d 	.word	0x0801fe5d
 801fd30:	0801fe5d 	.word	0x0801fe5d
 801fd34:	0801fe5d 	.word	0x0801fe5d
 801fd38:	0801fe5d 	.word	0x0801fe5d
 801fd3c:	0801fe5d 	.word	0x0801fe5d
 801fd40:	0801fe5d 	.word	0x0801fe5d
 801fd44:	0801fdbb 	.word	0x0801fdbb
 801fd48:	2b9e      	cmp	r3, #158	; 0x9e
 801fd4a:	d051      	beq.n	801fdf0 <SCSI_ProcessCmd+0x26c>
 801fd4c:	e086      	b.n	801fe5c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801fd4e:	7afb      	ldrb	r3, [r7, #11]
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	4619      	mov	r1, r3
 801fd54:	68f8      	ldr	r0, [r7, #12]
 801fd56:	f000 f893 	bl	801fe80 <SCSI_TestUnitReady>
 801fd5a:	4603      	mov	r3, r0
 801fd5c:	75fb      	strb	r3, [r7, #23]
      break;
 801fd5e:	e089      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801fd60:	7afb      	ldrb	r3, [r7, #11]
 801fd62:	687a      	ldr	r2, [r7, #4]
 801fd64:	4619      	mov	r1, r3
 801fd66:	68f8      	ldr	r0, [r7, #12]
 801fd68:	f000 fb38 	bl	80203dc <SCSI_RequestSense>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	75fb      	strb	r3, [r7, #23]
      break;
 801fd70:	e080      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801fd72:	7afb      	ldrb	r3, [r7, #11]
 801fd74:	687a      	ldr	r2, [r7, #4]
 801fd76:	4619      	mov	r1, r3
 801fd78:	68f8      	ldr	r0, [r7, #12]
 801fd7a:	f000 f8d1 	bl	801ff20 <SCSI_Inquiry>
 801fd7e:	4603      	mov	r3, r0
 801fd80:	75fb      	strb	r3, [r7, #23]
      break;
 801fd82:	e077      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801fd84:	7afb      	ldrb	r3, [r7, #11]
 801fd86:	687a      	ldr	r2, [r7, #4]
 801fd88:	4619      	mov	r1, r3
 801fd8a:	68f8      	ldr	r0, [r7, #12]
 801fd8c:	f000 fbec 	bl	8020568 <SCSI_StartStopUnit>
 801fd90:	4603      	mov	r3, r0
 801fd92:	75fb      	strb	r3, [r7, #23]
      break;
 801fd94:	e06e      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801fd96:	7afb      	ldrb	r3, [r7, #11]
 801fd98:	687a      	ldr	r2, [r7, #4]
 801fd9a:	4619      	mov	r1, r3
 801fd9c:	68f8      	ldr	r0, [r7, #12]
 801fd9e:	f000 fc34 	bl	802060a <SCSI_AllowPreventRemovable>
 801fda2:	4603      	mov	r3, r0
 801fda4:	75fb      	strb	r3, [r7, #23]
      break;
 801fda6:	e065      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 801fda8:	7afb      	ldrb	r3, [r7, #11]
 801fdaa:	687a      	ldr	r2, [r7, #4]
 801fdac:	4619      	mov	r1, r3
 801fdae:	68f8      	ldr	r0, [r7, #12]
 801fdb0:	f000 fabc 	bl	802032c <SCSI_ModeSense6>
 801fdb4:	4603      	mov	r3, r0
 801fdb6:	75fb      	strb	r3, [r7, #23]
      break;
 801fdb8:	e05c      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801fdba:	7afb      	ldrb	r3, [r7, #11]
 801fdbc:	687a      	ldr	r2, [r7, #4]
 801fdbe:	4619      	mov	r1, r3
 801fdc0:	68f8      	ldr	r0, [r7, #12]
 801fdc2:	f000 fadf 	bl	8020384 <SCSI_ModeSense10>
 801fdc6:	4603      	mov	r3, r0
 801fdc8:	75fb      	strb	r3, [r7, #23]
      break;
 801fdca:	e053      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801fdcc:	7afb      	ldrb	r3, [r7, #11]
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	4619      	mov	r1, r3
 801fdd2:	68f8      	ldr	r0, [r7, #12]
 801fdd4:	f000 fa37 	bl	8020246 <SCSI_ReadFormatCapacity>
 801fdd8:	4603      	mov	r3, r0
 801fdda:	75fb      	strb	r3, [r7, #23]
      break;
 801fddc:	e04a      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801fdde:	7afb      	ldrb	r3, [r7, #11]
 801fde0:	687a      	ldr	r2, [r7, #4]
 801fde2:	4619      	mov	r1, r3
 801fde4:	68f8      	ldr	r0, [r7, #12]
 801fde6:	f000 f90f 	bl	8020008 <SCSI_ReadCapacity10>
 801fdea:	4603      	mov	r3, r0
 801fdec:	75fb      	strb	r3, [r7, #23]
      break;
 801fdee:	e041      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801fdf0:	7afb      	ldrb	r3, [r7, #11]
 801fdf2:	687a      	ldr	r2, [r7, #4]
 801fdf4:	4619      	mov	r1, r3
 801fdf6:	68f8      	ldr	r0, [r7, #12]
 801fdf8:	f000 f97b 	bl	80200f2 <SCSI_ReadCapacity16>
 801fdfc:	4603      	mov	r3, r0
 801fdfe:	75fb      	strb	r3, [r7, #23]
      break;
 801fe00:	e038      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801fe02:	7afb      	ldrb	r3, [r7, #11]
 801fe04:	687a      	ldr	r2, [r7, #4]
 801fe06:	4619      	mov	r1, r3
 801fe08:	68f8      	ldr	r0, [r7, #12]
 801fe0a:	f000 fc27 	bl	802065c <SCSI_Read10>
 801fe0e:	4603      	mov	r3, r0
 801fe10:	75fb      	strb	r3, [r7, #23]
      break;
 801fe12:	e02f      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801fe14:	7afb      	ldrb	r3, [r7, #11]
 801fe16:	687a      	ldr	r2, [r7, #4]
 801fe18:	4619      	mov	r1, r3
 801fe1a:	68f8      	ldr	r0, [r7, #12]
 801fe1c:	f000 fcbe 	bl	802079c <SCSI_Read12>
 801fe20:	4603      	mov	r3, r0
 801fe22:	75fb      	strb	r3, [r7, #23]
      break;
 801fe24:	e026      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801fe26:	7afb      	ldrb	r3, [r7, #11]
 801fe28:	687a      	ldr	r2, [r7, #4]
 801fe2a:	4619      	mov	r1, r3
 801fe2c:	68f8      	ldr	r0, [r7, #12]
 801fe2e:	f000 fd60 	bl	80208f2 <SCSI_Write10>
 801fe32:	4603      	mov	r3, r0
 801fe34:	75fb      	strb	r3, [r7, #23]
      break;
 801fe36:	e01d      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801fe38:	7afb      	ldrb	r3, [r7, #11]
 801fe3a:	687a      	ldr	r2, [r7, #4]
 801fe3c:	4619      	mov	r1, r3
 801fe3e:	68f8      	ldr	r0, [r7, #12]
 801fe40:	f000 fe1c 	bl	8020a7c <SCSI_Write12>
 801fe44:	4603      	mov	r3, r0
 801fe46:	75fb      	strb	r3, [r7, #23]
      break;
 801fe48:	e014      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801fe4a:	7afb      	ldrb	r3, [r7, #11]
 801fe4c:	687a      	ldr	r2, [r7, #4]
 801fe4e:	4619      	mov	r1, r3
 801fe50:	68f8      	ldr	r0, [r7, #12]
 801fe52:	f000 fee8 	bl	8020c26 <SCSI_Verify10>
 801fe56:	4603      	mov	r3, r0
 801fe58:	75fb      	strb	r3, [r7, #23]
      break;
 801fe5a:	e00b      	b.n	801fe74 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801fe5c:	7af9      	ldrb	r1, [r7, #11]
 801fe5e:	2320      	movs	r3, #32
 801fe60:	2205      	movs	r2, #5
 801fe62:	68f8      	ldr	r0, [r7, #12]
 801fe64:	f000 fb39 	bl	80204da <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fe68:	693b      	ldr	r3, [r7, #16]
 801fe6a:	2202      	movs	r2, #2
 801fe6c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801fe6e:	23ff      	movs	r3, #255	; 0xff
 801fe70:	75fb      	strb	r3, [r7, #23]
      break;
 801fe72:	bf00      	nop
  }

  return ret;
 801fe74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fe78:	4618      	mov	r0, r3
 801fe7a:	3718      	adds	r7, #24
 801fe7c:	46bd      	mov	sp, r7
 801fe7e:	bd80      	pop	{r7, pc}

0801fe80 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801fe80:	b580      	push	{r7, lr}
 801fe82:	b086      	sub	sp, #24
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	60f8      	str	r0, [r7, #12]
 801fe88:	460b      	mov	r3, r1
 801fe8a:	607a      	str	r2, [r7, #4]
 801fe8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801fe8e:	68fb      	ldr	r3, [r7, #12]
 801fe90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801fe94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801fe96:	697b      	ldr	r3, [r7, #20]
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d102      	bne.n	801fea2 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 801fe9c:	f04f 33ff 	mov.w	r3, #4294967295
 801fea0:	e03a      	b.n	801ff18 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d00a      	beq.n	801fec2 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801feac:	697b      	ldr	r3, [r7, #20]
 801feae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801feb2:	2320      	movs	r3, #32
 801feb4:	2205      	movs	r2, #5
 801feb6:	68f8      	ldr	r0, [r7, #12]
 801feb8:	f000 fb0f 	bl	80204da <SCSI_SenseCode>

    return -1;
 801febc:	f04f 33ff 	mov.w	r3, #4294967295
 801fec0:	e02a      	b.n	801ff18 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801fec2:	697b      	ldr	r3, [r7, #20]
 801fec4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801fec8:	2b02      	cmp	r3, #2
 801feca:	d10b      	bne.n	801fee4 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fecc:	7af9      	ldrb	r1, [r7, #11]
 801fece:	233a      	movs	r3, #58	; 0x3a
 801fed0:	2202      	movs	r2, #2
 801fed2:	68f8      	ldr	r0, [r7, #12]
 801fed4:	f000 fb01 	bl	80204da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801fed8:	697b      	ldr	r3, [r7, #20]
 801feda:	2205      	movs	r2, #5
 801fedc:	721a      	strb	r2, [r3, #8]
    return -1;
 801fede:	f04f 33ff 	mov.w	r3, #4294967295
 801fee2:	e019      	b.n	801ff18 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801fee4:	68fb      	ldr	r3, [r7, #12]
 801fee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801feea:	689b      	ldr	r3, [r3, #8]
 801feec:	7afa      	ldrb	r2, [r7, #11]
 801feee:	4610      	mov	r0, r2
 801fef0:	4798      	blx	r3
 801fef2:	4603      	mov	r3, r0
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d00b      	beq.n	801ff10 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801fef8:	7af9      	ldrb	r1, [r7, #11]
 801fefa:	233a      	movs	r3, #58	; 0x3a
 801fefc:	2202      	movs	r2, #2
 801fefe:	68f8      	ldr	r0, [r7, #12]
 801ff00:	f000 faeb 	bl	80204da <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801ff04:	697b      	ldr	r3, [r7, #20]
 801ff06:	2205      	movs	r2, #5
 801ff08:	721a      	strb	r2, [r3, #8]

    return -1;
 801ff0a:	f04f 33ff 	mov.w	r3, #4294967295
 801ff0e:	e003      	b.n	801ff18 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801ff10:	697b      	ldr	r3, [r7, #20]
 801ff12:	2200      	movs	r2, #0
 801ff14:	60da      	str	r2, [r3, #12]

  return 0;
 801ff16:	2300      	movs	r3, #0
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	3718      	adds	r7, #24
 801ff1c:	46bd      	mov	sp, r7
 801ff1e:	bd80      	pop	{r7, pc}

0801ff20 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801ff20:	b580      	push	{r7, lr}
 801ff22:	b088      	sub	sp, #32
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	60f8      	str	r0, [r7, #12]
 801ff28:	460b      	mov	r3, r1
 801ff2a:	607a      	str	r2, [r7, #4]
 801ff2c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801ff2e:	68fb      	ldr	r3, [r7, #12]
 801ff30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801ff34:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801ff36:	69bb      	ldr	r3, [r7, #24]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d102      	bne.n	801ff42 <SCSI_Inquiry+0x22>
  {
    return -1;
 801ff3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ff40:	e05a      	b.n	801fff8 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801ff42:	69bb      	ldr	r3, [r7, #24]
 801ff44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d10a      	bne.n	801ff62 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801ff4c:	69bb      	ldr	r3, [r7, #24]
 801ff4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ff52:	2320      	movs	r3, #32
 801ff54:	2205      	movs	r2, #5
 801ff56:	68f8      	ldr	r0, [r7, #12]
 801ff58:	f000 fabf 	bl	80204da <SCSI_SenseCode>
    return -1;
 801ff5c:	f04f 33ff 	mov.w	r3, #4294967295
 801ff60:	e04a      	b.n	801fff8 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	3301      	adds	r3, #1
 801ff66:	781b      	ldrb	r3, [r3, #0]
 801ff68:	f003 0301 	and.w	r3, r3, #1
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d020      	beq.n	801ffb2 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	3302      	adds	r3, #2
 801ff74:	781b      	ldrb	r3, [r3, #0]
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d105      	bne.n	801ff86 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801ff7a:	2206      	movs	r2, #6
 801ff7c:	4920      	ldr	r1, [pc, #128]	; (8020000 <SCSI_Inquiry+0xe0>)
 801ff7e:	69b8      	ldr	r0, [r7, #24]
 801ff80:	f000 ffb4 	bl	8020eec <SCSI_UpdateBotData>
 801ff84:	e037      	b.n	801fff6 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	3302      	adds	r3, #2
 801ff8a:	781b      	ldrb	r3, [r3, #0]
 801ff8c:	2b80      	cmp	r3, #128	; 0x80
 801ff8e:	d105      	bne.n	801ff9c <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801ff90:	2208      	movs	r2, #8
 801ff92:	491c      	ldr	r1, [pc, #112]	; (8020004 <SCSI_Inquiry+0xe4>)
 801ff94:	69b8      	ldr	r0, [r7, #24]
 801ff96:	f000 ffa9 	bl	8020eec <SCSI_UpdateBotData>
 801ff9a:	e02c      	b.n	801fff6 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801ff9c:	69bb      	ldr	r3, [r7, #24]
 801ff9e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801ffa2:	2324      	movs	r3, #36	; 0x24
 801ffa4:	2205      	movs	r2, #5
 801ffa6:	68f8      	ldr	r0, [r7, #12]
 801ffa8:	f000 fa97 	bl	80204da <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 801ffac:	f04f 33ff 	mov.w	r3, #4294967295
 801ffb0:	e022      	b.n	801fff8 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ffb8:	69d9      	ldr	r1, [r3, #28]
 801ffba:	7afa      	ldrb	r2, [r7, #11]
 801ffbc:	4613      	mov	r3, r2
 801ffbe:	00db      	lsls	r3, r3, #3
 801ffc0:	4413      	add	r3, r2
 801ffc2:	009b      	lsls	r3, r3, #2
 801ffc4:	440b      	add	r3, r1
 801ffc6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801ffc8:	697b      	ldr	r3, [r7, #20]
 801ffca:	3304      	adds	r3, #4
 801ffcc:	781b      	ldrb	r3, [r3, #0]
 801ffce:	b29b      	uxth	r3, r3
 801ffd0:	3305      	adds	r3, #5
 801ffd2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	3304      	adds	r3, #4
 801ffd8:	781b      	ldrb	r3, [r3, #0]
 801ffda:	b29b      	uxth	r3, r3
 801ffdc:	8bfa      	ldrh	r2, [r7, #30]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d303      	bcc.n	801ffea <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	3304      	adds	r3, #4
 801ffe6:	781b      	ldrb	r3, [r3, #0]
 801ffe8:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801ffea:	8bfb      	ldrh	r3, [r7, #30]
 801ffec:	461a      	mov	r2, r3
 801ffee:	6979      	ldr	r1, [r7, #20]
 801fff0:	69b8      	ldr	r0, [r7, #24]
 801fff2:	f000 ff7b 	bl	8020eec <SCSI_UpdateBotData>
  }

  return 0;
 801fff6:	2300      	movs	r3, #0
}
 801fff8:	4618      	mov	r0, r3
 801fffa:	3720      	adds	r7, #32
 801fffc:	46bd      	mov	sp, r7
 801fffe:	bd80      	pop	{r7, pc}
 8020000:	20000638 	.word	0x20000638
 8020004:	20000640 	.word	0x20000640

08020008 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020008:	b580      	push	{r7, lr}
 802000a:	b086      	sub	sp, #24
 802000c:	af00      	add	r7, sp, #0
 802000e:	60f8      	str	r0, [r7, #12]
 8020010:	460b      	mov	r3, r1
 8020012:	607a      	str	r2, [r7, #4]
 8020014:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020016:	68fb      	ldr	r3, [r7, #12]
 8020018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802001c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802001e:	697b      	ldr	r3, [r7, #20]
 8020020:	2b00      	cmp	r3, #0
 8020022:	d102      	bne.n	802002a <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8020024:	f04f 33ff 	mov.w	r3, #4294967295
 8020028:	e05f      	b.n	80200ea <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020030:	685b      	ldr	r3, [r3, #4]
 8020032:	697a      	ldr	r2, [r7, #20]
 8020034:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020038:	697a      	ldr	r2, [r7, #20]
 802003a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 802003e:	7af8      	ldrb	r0, [r7, #11]
 8020040:	4798      	blx	r3
 8020042:	4603      	mov	r3, r0
 8020044:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d104      	bne.n	8020058 <SCSI_ReadCapacity10+0x50>
 802004e:	697b      	ldr	r3, [r7, #20]
 8020050:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020054:	2b02      	cmp	r3, #2
 8020056:	d108      	bne.n	802006a <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020058:	7af9      	ldrb	r1, [r7, #11]
 802005a:	233a      	movs	r3, #58	; 0x3a
 802005c:	2202      	movs	r2, #2
 802005e:	68f8      	ldr	r0, [r7, #12]
 8020060:	f000 fa3b 	bl	80204da <SCSI_SenseCode>
    return -1;
 8020064:	f04f 33ff 	mov.w	r3, #4294967295
 8020068:	e03f      	b.n	80200ea <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 802006a:	697b      	ldr	r3, [r7, #20]
 802006c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020070:	3b01      	subs	r3, #1
 8020072:	0e1b      	lsrs	r3, r3, #24
 8020074:	b2da      	uxtb	r2, r3
 8020076:	697b      	ldr	r3, [r7, #20]
 8020078:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 802007a:	697b      	ldr	r3, [r7, #20]
 802007c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020080:	3b01      	subs	r3, #1
 8020082:	0c1b      	lsrs	r3, r3, #16
 8020084:	b2da      	uxtb	r2, r3
 8020086:	697b      	ldr	r3, [r7, #20]
 8020088:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020090:	3b01      	subs	r3, #1
 8020092:	0a1b      	lsrs	r3, r3, #8
 8020094:	b2da      	uxtb	r2, r3
 8020096:	697b      	ldr	r3, [r7, #20]
 8020098:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 802009a:	697b      	ldr	r3, [r7, #20]
 802009c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80200a0:	b2db      	uxtb	r3, r3
 80200a2:	3b01      	subs	r3, #1
 80200a4:	b2da      	uxtb	r2, r3
 80200a6:	697b      	ldr	r3, [r7, #20]
 80200a8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80200aa:	697b      	ldr	r3, [r7, #20]
 80200ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200b0:	161b      	asrs	r3, r3, #24
 80200b2:	b2da      	uxtb	r2, r3
 80200b4:	697b      	ldr	r3, [r7, #20]
 80200b6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80200b8:	697b      	ldr	r3, [r7, #20]
 80200ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200be:	141b      	asrs	r3, r3, #16
 80200c0:	b2da      	uxtb	r2, r3
 80200c2:	697b      	ldr	r3, [r7, #20]
 80200c4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80200c6:	697b      	ldr	r3, [r7, #20]
 80200c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200cc:	0a1b      	lsrs	r3, r3, #8
 80200ce:	b29b      	uxth	r3, r3
 80200d0:	b2da      	uxtb	r2, r3
 80200d2:	697b      	ldr	r3, [r7, #20]
 80200d4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80200d6:	697b      	ldr	r3, [r7, #20]
 80200d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80200dc:	b2da      	uxtb	r2, r3
 80200de:	697b      	ldr	r3, [r7, #20]
 80200e0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80200e2:	697b      	ldr	r3, [r7, #20]
 80200e4:	2208      	movs	r2, #8
 80200e6:	60da      	str	r2, [r3, #12]

  return 0;
 80200e8:	2300      	movs	r3, #0

}
 80200ea:	4618      	mov	r0, r3
 80200ec:	3718      	adds	r7, #24
 80200ee:	46bd      	mov	sp, r7
 80200f0:	bd80      	pop	{r7, pc}

080200f2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80200f2:	b580      	push	{r7, lr}
 80200f4:	b088      	sub	sp, #32
 80200f6:	af00      	add	r7, sp, #0
 80200f8:	60f8      	str	r0, [r7, #12]
 80200fa:	460b      	mov	r3, r1
 80200fc:	607a      	str	r2, [r7, #4]
 80200fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020100:	68fb      	ldr	r3, [r7, #12]
 8020102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020106:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8020108:	69bb      	ldr	r3, [r7, #24]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d102      	bne.n	8020114 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 802010e:	f04f 33ff 	mov.w	r3, #4294967295
 8020112:	e094      	b.n	802023e <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802011a:	685b      	ldr	r3, [r3, #4]
 802011c:	69ba      	ldr	r2, [r7, #24]
 802011e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8020122:	69ba      	ldr	r2, [r7, #24]
 8020124:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8020128:	7af8      	ldrb	r0, [r7, #11]
 802012a:	4798      	blx	r3
 802012c:	4603      	mov	r3, r0
 802012e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d104      	bne.n	8020142 <SCSI_ReadCapacity16+0x50>
 8020138:	69bb      	ldr	r3, [r7, #24]
 802013a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802013e:	2b02      	cmp	r3, #2
 8020140:	d108      	bne.n	8020154 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020142:	7af9      	ldrb	r1, [r7, #11]
 8020144:	233a      	movs	r3, #58	; 0x3a
 8020146:	2202      	movs	r2, #2
 8020148:	68f8      	ldr	r0, [r7, #12]
 802014a:	f000 f9c6 	bl	80204da <SCSI_SenseCode>
    return -1;
 802014e:	f04f 33ff 	mov.w	r3, #4294967295
 8020152:	e074      	b.n	802023e <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	330a      	adds	r3, #10
 8020158:	781b      	ldrb	r3, [r3, #0]
 802015a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	330b      	adds	r3, #11
 8020160:	781b      	ldrb	r3, [r3, #0]
 8020162:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020164:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	330c      	adds	r3, #12
 802016a:	781b      	ldrb	r3, [r3, #0]
 802016c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802016e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020170:	687a      	ldr	r2, [r7, #4]
 8020172:	320d      	adds	r2, #13
 8020174:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020176:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020178:	69bb      	ldr	r3, [r7, #24]
 802017a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802017c:	2300      	movs	r3, #0
 802017e:	77fb      	strb	r3, [r7, #31]
 8020180:	e007      	b.n	8020192 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8020182:	7ffb      	ldrb	r3, [r7, #31]
 8020184:	69ba      	ldr	r2, [r7, #24]
 8020186:	4413      	add	r3, r2
 8020188:	2200      	movs	r2, #0
 802018a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802018c:	7ffb      	ldrb	r3, [r7, #31]
 802018e:	3301      	adds	r3, #1
 8020190:	77fb      	strb	r3, [r7, #31]
 8020192:	7ffa      	ldrb	r2, [r7, #31]
 8020194:	69bb      	ldr	r3, [r7, #24]
 8020196:	68db      	ldr	r3, [r3, #12]
 8020198:	429a      	cmp	r2, r3
 802019a:	d3f2      	bcc.n	8020182 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 802019c:	69bb      	ldr	r3, [r7, #24]
 802019e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201a2:	3b01      	subs	r3, #1
 80201a4:	0e1b      	lsrs	r3, r3, #24
 80201a6:	b2da      	uxtb	r2, r3
 80201a8:	69bb      	ldr	r3, [r7, #24]
 80201aa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80201ac:	69bb      	ldr	r3, [r7, #24]
 80201ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201b2:	3b01      	subs	r3, #1
 80201b4:	0c1b      	lsrs	r3, r3, #16
 80201b6:	b2da      	uxtb	r2, r3
 80201b8:	69bb      	ldr	r3, [r7, #24]
 80201ba:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80201bc:	69bb      	ldr	r3, [r7, #24]
 80201be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201c2:	3b01      	subs	r3, #1
 80201c4:	0a1b      	lsrs	r3, r3, #8
 80201c6:	b2da      	uxtb	r2, r3
 80201c8:	69bb      	ldr	r3, [r7, #24]
 80201ca:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80201cc:	69bb      	ldr	r3, [r7, #24]
 80201ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80201d2:	b2db      	uxtb	r3, r3
 80201d4:	3b01      	subs	r3, #1
 80201d6:	b2da      	uxtb	r2, r3
 80201d8:	69bb      	ldr	r3, [r7, #24]
 80201da:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80201dc:	69bb      	ldr	r3, [r7, #24]
 80201de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201e2:	161b      	asrs	r3, r3, #24
 80201e4:	b2da      	uxtb	r2, r3
 80201e6:	69bb      	ldr	r3, [r7, #24]
 80201e8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80201ea:	69bb      	ldr	r3, [r7, #24]
 80201ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201f0:	141b      	asrs	r3, r3, #16
 80201f2:	b2da      	uxtb	r2, r3
 80201f4:	69bb      	ldr	r3, [r7, #24]
 80201f6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80201f8:	69bb      	ldr	r3, [r7, #24]
 80201fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80201fe:	0a1b      	lsrs	r3, r3, #8
 8020200:	b29b      	uxth	r3, r3
 8020202:	b2da      	uxtb	r2, r3
 8020204:	69bb      	ldr	r3, [r7, #24]
 8020206:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8020208:	69bb      	ldr	r3, [r7, #24]
 802020a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 802020e:	b2da      	uxtb	r2, r3
 8020210:	69bb      	ldr	r3, [r7, #24]
 8020212:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	330a      	adds	r3, #10
 8020218:	781b      	ldrb	r3, [r3, #0]
 802021a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	330b      	adds	r3, #11
 8020220:	781b      	ldrb	r3, [r3, #0]
 8020222:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020224:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	330c      	adds	r3, #12
 802022a:	781b      	ldrb	r3, [r3, #0]
 802022c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 802022e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8020230:	687a      	ldr	r2, [r7, #4]
 8020232:	320d      	adds	r2, #13
 8020234:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8020236:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020238:	69bb      	ldr	r3, [r7, #24]
 802023a:	60da      	str	r2, [r3, #12]

  return 0;
 802023c:	2300      	movs	r3, #0
}
 802023e:	4618      	mov	r0, r3
 8020240:	3720      	adds	r7, #32
 8020242:	46bd      	mov	sp, r7
 8020244:	bd80      	pop	{r7, pc}

08020246 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020246:	b580      	push	{r7, lr}
 8020248:	b088      	sub	sp, #32
 802024a:	af00      	add	r7, sp, #0
 802024c:	60f8      	str	r0, [r7, #12]
 802024e:	460b      	mov	r3, r1
 8020250:	607a      	str	r2, [r7, #4]
 8020252:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020254:	68fb      	ldr	r3, [r7, #12]
 8020256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802025a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 802025c:	69bb      	ldr	r3, [r7, #24]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d102      	bne.n	8020268 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8020262:	f04f 33ff 	mov.w	r3, #4294967295
 8020266:	e05c      	b.n	8020322 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802026e:	685b      	ldr	r3, [r3, #4]
 8020270:	f107 0214 	add.w	r2, r7, #20
 8020274:	f107 0110 	add.w	r1, r7, #16
 8020278:	7af8      	ldrb	r0, [r7, #11]
 802027a:	4798      	blx	r3
 802027c:	4603      	mov	r3, r0
 802027e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8020284:	2b00      	cmp	r3, #0
 8020286:	d104      	bne.n	8020292 <SCSI_ReadFormatCapacity+0x4c>
 8020288:	69bb      	ldr	r3, [r7, #24]
 802028a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 802028e:	2b02      	cmp	r3, #2
 8020290:	d108      	bne.n	80202a4 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020292:	7af9      	ldrb	r1, [r7, #11]
 8020294:	233a      	movs	r3, #58	; 0x3a
 8020296:	2202      	movs	r2, #2
 8020298:	68f8      	ldr	r0, [r7, #12]
 802029a:	f000 f91e 	bl	80204da <SCSI_SenseCode>
    return -1;
 802029e:	f04f 33ff 	mov.w	r3, #4294967295
 80202a2:	e03e      	b.n	8020322 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80202a4:	2300      	movs	r3, #0
 80202a6:	83fb      	strh	r3, [r7, #30]
 80202a8:	e007      	b.n	80202ba <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80202aa:	8bfb      	ldrh	r3, [r7, #30]
 80202ac:	69ba      	ldr	r2, [r7, #24]
 80202ae:	4413      	add	r3, r2
 80202b0:	2200      	movs	r2, #0
 80202b2:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80202b4:	8bfb      	ldrh	r3, [r7, #30]
 80202b6:	3301      	adds	r3, #1
 80202b8:	83fb      	strh	r3, [r7, #30]
 80202ba:	8bfb      	ldrh	r3, [r7, #30]
 80202bc:	2b0b      	cmp	r3, #11
 80202be:	d9f4      	bls.n	80202aa <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80202c0:	69bb      	ldr	r3, [r7, #24]
 80202c2:	2208      	movs	r2, #8
 80202c4:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80202c6:	693b      	ldr	r3, [r7, #16]
 80202c8:	3b01      	subs	r3, #1
 80202ca:	0e1b      	lsrs	r3, r3, #24
 80202cc:	b2da      	uxtb	r2, r3
 80202ce:	69bb      	ldr	r3, [r7, #24]
 80202d0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80202d2:	693b      	ldr	r3, [r7, #16]
 80202d4:	3b01      	subs	r3, #1
 80202d6:	0c1b      	lsrs	r3, r3, #16
 80202d8:	b2da      	uxtb	r2, r3
 80202da:	69bb      	ldr	r3, [r7, #24]
 80202dc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80202de:	693b      	ldr	r3, [r7, #16]
 80202e0:	3b01      	subs	r3, #1
 80202e2:	0a1b      	lsrs	r3, r3, #8
 80202e4:	b2da      	uxtb	r2, r3
 80202e6:	69bb      	ldr	r3, [r7, #24]
 80202e8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80202ea:	693b      	ldr	r3, [r7, #16]
 80202ec:	b2db      	uxtb	r3, r3
 80202ee:	3b01      	subs	r3, #1
 80202f0:	b2da      	uxtb	r2, r3
 80202f2:	69bb      	ldr	r3, [r7, #24]
 80202f4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80202f6:	69bb      	ldr	r3, [r7, #24]
 80202f8:	2202      	movs	r2, #2
 80202fa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80202fc:	8abb      	ldrh	r3, [r7, #20]
 80202fe:	141b      	asrs	r3, r3, #16
 8020300:	b2da      	uxtb	r2, r3
 8020302:	69bb      	ldr	r3, [r7, #24]
 8020304:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8020306:	8abb      	ldrh	r3, [r7, #20]
 8020308:	0a1b      	lsrs	r3, r3, #8
 802030a:	b29b      	uxth	r3, r3
 802030c:	b2da      	uxtb	r2, r3
 802030e:	69bb      	ldr	r3, [r7, #24]
 8020310:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8020312:	8abb      	ldrh	r3, [r7, #20]
 8020314:	b2da      	uxtb	r2, r3
 8020316:	69bb      	ldr	r3, [r7, #24]
 8020318:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 802031a:	69bb      	ldr	r3, [r7, #24]
 802031c:	220c      	movs	r2, #12
 802031e:	60da      	str	r2, [r3, #12]

  return 0;
 8020320:	2300      	movs	r3, #0
}
 8020322:	4618      	mov	r0, r3
 8020324:	3720      	adds	r7, #32
 8020326:	46bd      	mov	sp, r7
 8020328:	bd80      	pop	{r7, pc}
	...

0802032c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802032c:	b580      	push	{r7, lr}
 802032e:	b086      	sub	sp, #24
 8020330:	af00      	add	r7, sp, #0
 8020332:	60f8      	str	r0, [r7, #12]
 8020334:	460b      	mov	r3, r1
 8020336:	607a      	str	r2, [r7, #4]
 8020338:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020340:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8020342:	2317      	movs	r3, #23
 8020344:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020346:	693b      	ldr	r3, [r7, #16]
 8020348:	2b00      	cmp	r3, #0
 802034a:	d102      	bne.n	8020352 <SCSI_ModeSense6+0x26>
  {
    return -1;
 802034c:	f04f 33ff 	mov.w	r3, #4294967295
 8020350:	e011      	b.n	8020376 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	3304      	adds	r3, #4
 8020356:	781b      	ldrb	r3, [r3, #0]
 8020358:	b29b      	uxth	r3, r3
 802035a:	8afa      	ldrh	r2, [r7, #22]
 802035c:	429a      	cmp	r2, r3
 802035e:	d303      	bcc.n	8020368 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	3304      	adds	r3, #4
 8020364:	781b      	ldrb	r3, [r3, #0]
 8020366:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020368:	8afb      	ldrh	r3, [r7, #22]
 802036a:	461a      	mov	r2, r3
 802036c:	4904      	ldr	r1, [pc, #16]	; (8020380 <SCSI_ModeSense6+0x54>)
 802036e:	6938      	ldr	r0, [r7, #16]
 8020370:	f000 fdbc 	bl	8020eec <SCSI_UpdateBotData>

  return 0;
 8020374:	2300      	movs	r3, #0
}
 8020376:	4618      	mov	r0, r3
 8020378:	3718      	adds	r7, #24
 802037a:	46bd      	mov	sp, r7
 802037c:	bd80      	pop	{r7, pc}
 802037e:	bf00      	nop
 8020380:	20000648 	.word	0x20000648

08020384 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020384:	b580      	push	{r7, lr}
 8020386:	b086      	sub	sp, #24
 8020388:	af00      	add	r7, sp, #0
 802038a:	60f8      	str	r0, [r7, #12]
 802038c:	460b      	mov	r3, r1
 802038e:	607a      	str	r2, [r7, #4]
 8020390:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020392:	68fb      	ldr	r3, [r7, #12]
 8020394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020398:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 802039a:	231b      	movs	r3, #27
 802039c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 802039e:	693b      	ldr	r3, [r7, #16]
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d102      	bne.n	80203aa <SCSI_ModeSense10+0x26>
  {
    return -1;
 80203a4:	f04f 33ff 	mov.w	r3, #4294967295
 80203a8:	e011      	b.n	80203ce <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	3308      	adds	r3, #8
 80203ae:	781b      	ldrb	r3, [r3, #0]
 80203b0:	b29b      	uxth	r3, r3
 80203b2:	8afa      	ldrh	r2, [r7, #22]
 80203b4:	429a      	cmp	r2, r3
 80203b6:	d303      	bcc.n	80203c0 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	3308      	adds	r3, #8
 80203bc:	781b      	ldrb	r3, [r3, #0]
 80203be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80203c0:	8afb      	ldrh	r3, [r7, #22]
 80203c2:	461a      	mov	r2, r3
 80203c4:	4904      	ldr	r1, [pc, #16]	; (80203d8 <SCSI_ModeSense10+0x54>)
 80203c6:	6938      	ldr	r0, [r7, #16]
 80203c8:	f000 fd90 	bl	8020eec <SCSI_UpdateBotData>

  return 0;
 80203cc:	2300      	movs	r3, #0
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	3718      	adds	r7, #24
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}
 80203d6:	bf00      	nop
 80203d8:	20000660 	.word	0x20000660

080203dc <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80203dc:	b580      	push	{r7, lr}
 80203de:	b086      	sub	sp, #24
 80203e0:	af00      	add	r7, sp, #0
 80203e2:	60f8      	str	r0, [r7, #12]
 80203e4:	460b      	mov	r3, r1
 80203e6:	607a      	str	r2, [r7, #4]
 80203e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80203f0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80203f2:	693b      	ldr	r3, [r7, #16]
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d102      	bne.n	80203fe <SCSI_RequestSense+0x22>
  {
    return -1;
 80203f8:	f04f 33ff 	mov.w	r3, #4294967295
 80203fc:	e069      	b.n	80204d2 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80203fe:	693b      	ldr	r3, [r7, #16]
 8020400:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020404:	2b00      	cmp	r3, #0
 8020406:	d10a      	bne.n	802041e <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020408:	693b      	ldr	r3, [r7, #16]
 802040a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802040e:	2320      	movs	r3, #32
 8020410:	2205      	movs	r2, #5
 8020412:	68f8      	ldr	r0, [r7, #12]
 8020414:	f000 f861 	bl	80204da <SCSI_SenseCode>
    return -1;
 8020418:	f04f 33ff 	mov.w	r3, #4294967295
 802041c:	e059      	b.n	80204d2 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802041e:	2300      	movs	r3, #0
 8020420:	75fb      	strb	r3, [r7, #23]
 8020422:	e007      	b.n	8020434 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8020424:	7dfb      	ldrb	r3, [r7, #23]
 8020426:	693a      	ldr	r2, [r7, #16]
 8020428:	4413      	add	r3, r2
 802042a:	2200      	movs	r2, #0
 802042c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 802042e:	7dfb      	ldrb	r3, [r7, #23]
 8020430:	3301      	adds	r3, #1
 8020432:	75fb      	strb	r3, [r7, #23]
 8020434:	7dfb      	ldrb	r3, [r7, #23]
 8020436:	2b11      	cmp	r3, #17
 8020438:	d9f4      	bls.n	8020424 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 802043a:	693b      	ldr	r3, [r7, #16]
 802043c:	2270      	movs	r2, #112	; 0x70
 802043e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020440:	693b      	ldr	r3, [r7, #16]
 8020442:	220c      	movs	r2, #12
 8020444:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8020446:	693b      	ldr	r3, [r7, #16]
 8020448:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 802044c:	693b      	ldr	r3, [r7, #16]
 802044e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020452:	429a      	cmp	r2, r3
 8020454:	d02e      	beq.n	80204b4 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8020456:	693b      	ldr	r3, [r7, #16]
 8020458:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 802045c:	461a      	mov	r2, r3
 802045e:	693b      	ldr	r3, [r7, #16]
 8020460:	3248      	adds	r2, #72	; 0x48
 8020462:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8020466:	693b      	ldr	r3, [r7, #16]
 8020468:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 802046a:	693b      	ldr	r3, [r7, #16]
 802046c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020470:	693a      	ldr	r2, [r7, #16]
 8020472:	3348      	adds	r3, #72	; 0x48
 8020474:	00db      	lsls	r3, r3, #3
 8020476:	4413      	add	r3, r2
 8020478:	791a      	ldrb	r2, [r3, #4]
 802047a:	693b      	ldr	r3, [r7, #16]
 802047c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 802047e:	693b      	ldr	r3, [r7, #16]
 8020480:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020484:	693a      	ldr	r2, [r7, #16]
 8020486:	3348      	adds	r3, #72	; 0x48
 8020488:	00db      	lsls	r3, r3, #3
 802048a:	4413      	add	r3, r2
 802048c:	795a      	ldrb	r2, [r3, #5]
 802048e:	693b      	ldr	r3, [r7, #16]
 8020490:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8020492:	693b      	ldr	r3, [r7, #16]
 8020494:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8020498:	3301      	adds	r3, #1
 802049a:	b2da      	uxtb	r2, r3
 802049c:	693b      	ldr	r3, [r7, #16]
 802049e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80204a2:	693b      	ldr	r3, [r7, #16]
 80204a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80204a8:	2b04      	cmp	r3, #4
 80204aa:	d103      	bne.n	80204b4 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80204ac:	693b      	ldr	r3, [r7, #16]
 80204ae:	2200      	movs	r2, #0
 80204b0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80204b4:	693b      	ldr	r3, [r7, #16]
 80204b6:	2212      	movs	r2, #18
 80204b8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80204ba:	687b      	ldr	r3, [r7, #4]
 80204bc:	3304      	adds	r3, #4
 80204be:	781b      	ldrb	r3, [r3, #0]
 80204c0:	2b12      	cmp	r3, #18
 80204c2:	d805      	bhi.n	80204d0 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80204c4:	687b      	ldr	r3, [r7, #4]
 80204c6:	3304      	adds	r3, #4
 80204c8:	781b      	ldrb	r3, [r3, #0]
 80204ca:	461a      	mov	r2, r3
 80204cc:	693b      	ldr	r3, [r7, #16]
 80204ce:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80204d0:	2300      	movs	r3, #0
}
 80204d2:	4618      	mov	r0, r3
 80204d4:	3718      	adds	r7, #24
 80204d6:	46bd      	mov	sp, r7
 80204d8:	bd80      	pop	{r7, pc}

080204da <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80204da:	b480      	push	{r7}
 80204dc:	b085      	sub	sp, #20
 80204de:	af00      	add	r7, sp, #0
 80204e0:	6078      	str	r0, [r7, #4]
 80204e2:	4608      	mov	r0, r1
 80204e4:	4611      	mov	r1, r2
 80204e6:	461a      	mov	r2, r3
 80204e8:	4603      	mov	r3, r0
 80204ea:	70fb      	strb	r3, [r7, #3]
 80204ec:	460b      	mov	r3, r1
 80204ee:	70bb      	strb	r3, [r7, #2]
 80204f0:	4613      	mov	r3, r2
 80204f2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80204fa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80204fc:	68fb      	ldr	r3, [r7, #12]
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d02c      	beq.n	802055c <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8020508:	461a      	mov	r2, r3
 802050a:	68fb      	ldr	r3, [r7, #12]
 802050c:	3248      	adds	r2, #72	; 0x48
 802050e:	78b9      	ldrb	r1, [r7, #2]
 8020510:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8020514:	68fb      	ldr	r3, [r7, #12]
 8020516:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802051a:	68fa      	ldr	r2, [r7, #12]
 802051c:	3348      	adds	r3, #72	; 0x48
 802051e:	00db      	lsls	r3, r3, #3
 8020520:	4413      	add	r3, r2
 8020522:	787a      	ldrb	r2, [r7, #1]
 8020524:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802052c:	68fa      	ldr	r2, [r7, #12]
 802052e:	3348      	adds	r3, #72	; 0x48
 8020530:	00db      	lsls	r3, r3, #3
 8020532:	4413      	add	r3, r2
 8020534:	2200      	movs	r2, #0
 8020536:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802053e:	3301      	adds	r3, #1
 8020540:	b2da      	uxtb	r2, r3
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8020548:	68fb      	ldr	r3, [r7, #12]
 802054a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 802054e:	2b04      	cmp	r3, #4
 8020550:	d105      	bne.n	802055e <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8020552:	68fb      	ldr	r3, [r7, #12]
 8020554:	2200      	movs	r2, #0
 8020556:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 802055a:	e000      	b.n	802055e <SCSI_SenseCode+0x84>
    return;
 802055c:	bf00      	nop
  }
}
 802055e:	3714      	adds	r7, #20
 8020560:	46bd      	mov	sp, r7
 8020562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020566:	4770      	bx	lr

08020568 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020568:	b580      	push	{r7, lr}
 802056a:	b086      	sub	sp, #24
 802056c:	af00      	add	r7, sp, #0
 802056e:	60f8      	str	r0, [r7, #12]
 8020570:	460b      	mov	r3, r1
 8020572:	607a      	str	r2, [r7, #4]
 8020574:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802057c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 802057e:	697b      	ldr	r3, [r7, #20]
 8020580:	2b00      	cmp	r3, #0
 8020582:	d102      	bne.n	802058a <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8020584:	f04f 33ff 	mov.w	r3, #4294967295
 8020588:	e03b      	b.n	8020602 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 802058a:	697b      	ldr	r3, [r7, #20]
 802058c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8020590:	2b01      	cmp	r3, #1
 8020592:	d10f      	bne.n	80205b4 <SCSI_StartStopUnit+0x4c>
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	3304      	adds	r3, #4
 8020598:	781b      	ldrb	r3, [r3, #0]
 802059a:	f003 0303 	and.w	r3, r3, #3
 802059e:	2b02      	cmp	r3, #2
 80205a0:	d108      	bne.n	80205b4 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80205a2:	7af9      	ldrb	r1, [r7, #11]
 80205a4:	2324      	movs	r3, #36	; 0x24
 80205a6:	2205      	movs	r2, #5
 80205a8:	68f8      	ldr	r0, [r7, #12]
 80205aa:	f7ff ff96 	bl	80204da <SCSI_SenseCode>

    return -1;
 80205ae:	f04f 33ff 	mov.w	r3, #4294967295
 80205b2:	e026      	b.n	8020602 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	3304      	adds	r3, #4
 80205b8:	781b      	ldrb	r3, [r3, #0]
 80205ba:	f003 0303 	and.w	r3, r3, #3
 80205be:	2b01      	cmp	r3, #1
 80205c0:	d104      	bne.n	80205cc <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80205c2:	697b      	ldr	r3, [r7, #20]
 80205c4:	2200      	movs	r2, #0
 80205c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80205ca:	e016      	b.n	80205fa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	3304      	adds	r3, #4
 80205d0:	781b      	ldrb	r3, [r3, #0]
 80205d2:	f003 0303 	and.w	r3, r3, #3
 80205d6:	2b02      	cmp	r3, #2
 80205d8:	d104      	bne.n	80205e4 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80205da:	697b      	ldr	r3, [r7, #20]
 80205dc:	2202      	movs	r2, #2
 80205de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80205e2:	e00a      	b.n	80205fa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	3304      	adds	r3, #4
 80205e8:	781b      	ldrb	r3, [r3, #0]
 80205ea:	f003 0303 	and.w	r3, r3, #3
 80205ee:	2b03      	cmp	r3, #3
 80205f0:	d103      	bne.n	80205fa <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80205f2:	697b      	ldr	r3, [r7, #20]
 80205f4:	2200      	movs	r2, #0
 80205f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80205fa:	697b      	ldr	r3, [r7, #20]
 80205fc:	2200      	movs	r2, #0
 80205fe:	60da      	str	r2, [r3, #12]

  return 0;
 8020600:	2300      	movs	r3, #0
}
 8020602:	4618      	mov	r0, r3
 8020604:	3718      	adds	r7, #24
 8020606:	46bd      	mov	sp, r7
 8020608:	bd80      	pop	{r7, pc}

0802060a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802060a:	b480      	push	{r7}
 802060c:	b087      	sub	sp, #28
 802060e:	af00      	add	r7, sp, #0
 8020610:	60f8      	str	r0, [r7, #12]
 8020612:	460b      	mov	r3, r1
 8020614:	607a      	str	r2, [r7, #4]
 8020616:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802061e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020620:	697b      	ldr	r3, [r7, #20]
 8020622:	2b00      	cmp	r3, #0
 8020624:	d102      	bne.n	802062c <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8020626:	f04f 33ff 	mov.w	r3, #4294967295
 802062a:	e011      	b.n	8020650 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	3304      	adds	r3, #4
 8020630:	781b      	ldrb	r3, [r3, #0]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d104      	bne.n	8020640 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020636:	697b      	ldr	r3, [r7, #20]
 8020638:	2200      	movs	r2, #0
 802063a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 802063e:	e003      	b.n	8020648 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8020640:	697b      	ldr	r3, [r7, #20]
 8020642:	2201      	movs	r2, #1
 8020644:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	2200      	movs	r2, #0
 802064c:	60da      	str	r2, [r3, #12]

  return 0;
 802064e:	2300      	movs	r3, #0
}
 8020650:	4618      	mov	r0, r3
 8020652:	371c      	adds	r7, #28
 8020654:	46bd      	mov	sp, r7
 8020656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065a:	4770      	bx	lr

0802065c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802065c:	b580      	push	{r7, lr}
 802065e:	b086      	sub	sp, #24
 8020660:	af00      	add	r7, sp, #0
 8020662:	60f8      	str	r0, [r7, #12]
 8020664:	460b      	mov	r3, r1
 8020666:	607a      	str	r2, [r7, #4]
 8020668:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020670:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020672:	697b      	ldr	r3, [r7, #20]
 8020674:	2b00      	cmp	r3, #0
 8020676:	d102      	bne.n	802067e <SCSI_Read10+0x22>
  {
    return -1;
 8020678:	f04f 33ff 	mov.w	r3, #4294967295
 802067c:	e08a      	b.n	8020794 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802067e:	697b      	ldr	r3, [r7, #20]
 8020680:	7a1b      	ldrb	r3, [r3, #8]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d17c      	bne.n	8020780 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020686:	697b      	ldr	r3, [r7, #20]
 8020688:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 802068c:	b25b      	sxtb	r3, r3
 802068e:	2b00      	cmp	r3, #0
 8020690:	db0a      	blt.n	80206a8 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020692:	697b      	ldr	r3, [r7, #20]
 8020694:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020698:	2320      	movs	r3, #32
 802069a:	2205      	movs	r2, #5
 802069c:	68f8      	ldr	r0, [r7, #12]
 802069e:	f7ff ff1c 	bl	80204da <SCSI_SenseCode>
      return -1;
 80206a2:	f04f 33ff 	mov.w	r3, #4294967295
 80206a6:	e075      	b.n	8020794 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80206a8:	697b      	ldr	r3, [r7, #20]
 80206aa:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80206ae:	2b02      	cmp	r3, #2
 80206b0:	d108      	bne.n	80206c4 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206b2:	7af9      	ldrb	r1, [r7, #11]
 80206b4:	233a      	movs	r3, #58	; 0x3a
 80206b6:	2202      	movs	r2, #2
 80206b8:	68f8      	ldr	r0, [r7, #12]
 80206ba:	f7ff ff0e 	bl	80204da <SCSI_SenseCode>

      return -1;
 80206be:	f04f 33ff 	mov.w	r3, #4294967295
 80206c2:	e067      	b.n	8020794 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80206ca:	689b      	ldr	r3, [r3, #8]
 80206cc:	7afa      	ldrb	r2, [r7, #11]
 80206ce:	4610      	mov	r0, r2
 80206d0:	4798      	blx	r3
 80206d2:	4603      	mov	r3, r0
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d008      	beq.n	80206ea <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80206d8:	7af9      	ldrb	r1, [r7, #11]
 80206da:	233a      	movs	r3, #58	; 0x3a
 80206dc:	2202      	movs	r2, #2
 80206de:	68f8      	ldr	r0, [r7, #12]
 80206e0:	f7ff fefb 	bl	80204da <SCSI_SenseCode>
      return -1;
 80206e4:	f04f 33ff 	mov.w	r3, #4294967295
 80206e8:	e054      	b.n	8020794 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	3302      	adds	r3, #2
 80206ee:	781b      	ldrb	r3, [r3, #0]
 80206f0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	3303      	adds	r3, #3
 80206f6:	781b      	ldrb	r3, [r3, #0]
 80206f8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80206fa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	3304      	adds	r3, #4
 8020700:	781b      	ldrb	r3, [r3, #0]
 8020702:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020704:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020706:	687a      	ldr	r2, [r7, #4]
 8020708:	3205      	adds	r2, #5
 802070a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 802070c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802070e:	697b      	ldr	r3, [r7, #20]
 8020710:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	3307      	adds	r3, #7
 8020718:	781b      	ldrb	r3, [r3, #0]
 802071a:	021b      	lsls	r3, r3, #8
 802071c:	687a      	ldr	r2, [r7, #4]
 802071e:	3208      	adds	r2, #8
 8020720:	7812      	ldrb	r2, [r2, #0]
 8020722:	431a      	orrs	r2, r3
 8020724:	697b      	ldr	r3, [r7, #20]
 8020726:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802072a:	697b      	ldr	r3, [r7, #20]
 802072c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020736:	7af9      	ldrb	r1, [r7, #11]
 8020738:	68f8      	ldr	r0, [r7, #12]
 802073a:	f000 faad 	bl	8020c98 <SCSI_CheckAddressRange>
 802073e:	4603      	mov	r3, r0
 8020740:	2b00      	cmp	r3, #0
 8020742:	da02      	bge.n	802074a <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020744:	f04f 33ff 	mov.w	r3, #4294967295
 8020748:	e024      	b.n	8020794 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 802074a:	697b      	ldr	r3, [r7, #20]
 802074c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020756:	6979      	ldr	r1, [r7, #20]
 8020758:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 802075c:	fb01 f303 	mul.w	r3, r1, r3
 8020760:	429a      	cmp	r2, r3
 8020762:	d00a      	beq.n	802077a <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020764:	697b      	ldr	r3, [r7, #20]
 8020766:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802076a:	2320      	movs	r3, #32
 802076c:	2205      	movs	r2, #5
 802076e:	68f8      	ldr	r0, [r7, #12]
 8020770:	f7ff feb3 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020774:	f04f 33ff 	mov.w	r3, #4294967295
 8020778:	e00c      	b.n	8020794 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 802077a:	697b      	ldr	r3, [r7, #20]
 802077c:	2202      	movs	r2, #2
 802077e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020780:	697b      	ldr	r3, [r7, #20]
 8020782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020786:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8020788:	7afb      	ldrb	r3, [r7, #11]
 802078a:	4619      	mov	r1, r3
 802078c:	68f8      	ldr	r0, [r7, #12]
 802078e:	f000 faab 	bl	8020ce8 <SCSI_ProcessRead>
 8020792:	4603      	mov	r3, r0
}
 8020794:	4618      	mov	r0, r3
 8020796:	3718      	adds	r7, #24
 8020798:	46bd      	mov	sp, r7
 802079a:	bd80      	pop	{r7, pc}

0802079c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 802079c:	b580      	push	{r7, lr}
 802079e:	b086      	sub	sp, #24
 80207a0:	af00      	add	r7, sp, #0
 80207a2:	60f8      	str	r0, [r7, #12]
 80207a4:	460b      	mov	r3, r1
 80207a6:	607a      	str	r2, [r7, #4]
 80207a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80207b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80207b2:	697b      	ldr	r3, [r7, #20]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d102      	bne.n	80207be <SCSI_Read12+0x22>
  {
    return -1;
 80207b8:	f04f 33ff 	mov.w	r3, #4294967295
 80207bc:	e095      	b.n	80208ea <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80207be:	697b      	ldr	r3, [r7, #20]
 80207c0:	7a1b      	ldrb	r3, [r3, #8]
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	f040 8087 	bne.w	80208d6 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80207c8:	697b      	ldr	r3, [r7, #20]
 80207ca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80207ce:	b25b      	sxtb	r3, r3
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	db0a      	blt.n	80207ea <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80207d4:	697b      	ldr	r3, [r7, #20]
 80207d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80207da:	2320      	movs	r3, #32
 80207dc:	2205      	movs	r2, #5
 80207de:	68f8      	ldr	r0, [r7, #12]
 80207e0:	f7ff fe7b 	bl	80204da <SCSI_SenseCode>
      return -1;
 80207e4:	f04f 33ff 	mov.w	r3, #4294967295
 80207e8:	e07f      	b.n	80208ea <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80207ea:	697b      	ldr	r3, [r7, #20]
 80207ec:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80207f0:	2b02      	cmp	r3, #2
 80207f2:	d108      	bne.n	8020806 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80207f4:	7af9      	ldrb	r1, [r7, #11]
 80207f6:	233a      	movs	r3, #58	; 0x3a
 80207f8:	2202      	movs	r2, #2
 80207fa:	68f8      	ldr	r0, [r7, #12]
 80207fc:	f7ff fe6d 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020800:	f04f 33ff 	mov.w	r3, #4294967295
 8020804:	e071      	b.n	80208ea <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802080c:	689b      	ldr	r3, [r3, #8]
 802080e:	7afa      	ldrb	r2, [r7, #11]
 8020810:	4610      	mov	r0, r2
 8020812:	4798      	blx	r3
 8020814:	4603      	mov	r3, r0
 8020816:	2b00      	cmp	r3, #0
 8020818:	d008      	beq.n	802082c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 802081a:	7af9      	ldrb	r1, [r7, #11]
 802081c:	233a      	movs	r3, #58	; 0x3a
 802081e:	2202      	movs	r2, #2
 8020820:	68f8      	ldr	r0, [r7, #12]
 8020822:	f7ff fe5a 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020826:	f04f 33ff 	mov.w	r3, #4294967295
 802082a:	e05e      	b.n	80208ea <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	3302      	adds	r3, #2
 8020830:	781b      	ldrb	r3, [r3, #0]
 8020832:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	3303      	adds	r3, #3
 8020838:	781b      	ldrb	r3, [r3, #0]
 802083a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802083c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	3304      	adds	r3, #4
 8020842:	781b      	ldrb	r3, [r3, #0]
 8020844:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020846:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020848:	687a      	ldr	r2, [r7, #4]
 802084a:	3205      	adds	r2, #5
 802084c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 802084e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020850:	697b      	ldr	r3, [r7, #20]
 8020852:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	3306      	adds	r3, #6
 802085a:	781b      	ldrb	r3, [r3, #0]
 802085c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	3307      	adds	r3, #7
 8020862:	781b      	ldrb	r3, [r3, #0]
 8020864:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020866:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	3308      	adds	r3, #8
 802086c:	781b      	ldrb	r3, [r3, #0]
 802086e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020870:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020872:	687a      	ldr	r2, [r7, #4]
 8020874:	3209      	adds	r2, #9
 8020876:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020878:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802087a:	697b      	ldr	r3, [r7, #20]
 802087c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020880:	697b      	ldr	r3, [r7, #20]
 8020882:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020886:	697b      	ldr	r3, [r7, #20]
 8020888:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 802088c:	7af9      	ldrb	r1, [r7, #11]
 802088e:	68f8      	ldr	r0, [r7, #12]
 8020890:	f000 fa02 	bl	8020c98 <SCSI_CheckAddressRange>
 8020894:	4603      	mov	r3, r0
 8020896:	2b00      	cmp	r3, #0
 8020898:	da02      	bge.n	80208a0 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 802089a:	f04f 33ff 	mov.w	r3, #4294967295
 802089e:	e024      	b.n	80208ea <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80208a0:	697b      	ldr	r3, [r7, #20]
 80208a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80208a6:	697b      	ldr	r3, [r7, #20]
 80208a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80208ac:	6979      	ldr	r1, [r7, #20]
 80208ae:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80208b2:	fb01 f303 	mul.w	r3, r1, r3
 80208b6:	429a      	cmp	r2, r3
 80208b8:	d00a      	beq.n	80208d0 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80208ba:	697b      	ldr	r3, [r7, #20]
 80208bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80208c0:	2320      	movs	r3, #32
 80208c2:	2205      	movs	r2, #5
 80208c4:	68f8      	ldr	r0, [r7, #12]
 80208c6:	f7ff fe08 	bl	80204da <SCSI_SenseCode>
      return -1;
 80208ca:	f04f 33ff 	mov.w	r3, #4294967295
 80208ce:	e00c      	b.n	80208ea <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80208d0:	697b      	ldr	r3, [r7, #20]
 80208d2:	2202      	movs	r2, #2
 80208d4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80208d6:	697b      	ldr	r3, [r7, #20]
 80208d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80208dc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80208de:	7afb      	ldrb	r3, [r7, #11]
 80208e0:	4619      	mov	r1, r3
 80208e2:	68f8      	ldr	r0, [r7, #12]
 80208e4:	f000 fa00 	bl	8020ce8 <SCSI_ProcessRead>
 80208e8:	4603      	mov	r3, r0
}
 80208ea:	4618      	mov	r0, r3
 80208ec:	3718      	adds	r7, #24
 80208ee:	46bd      	mov	sp, r7
 80208f0:	bd80      	pop	{r7, pc}

080208f2 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80208f2:	b580      	push	{r7, lr}
 80208f4:	b086      	sub	sp, #24
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	60f8      	str	r0, [r7, #12]
 80208fa:	460b      	mov	r3, r1
 80208fc:	607a      	str	r2, [r7, #4]
 80208fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020906:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	2b00      	cmp	r3, #0
 802090c:	d102      	bne.n	8020914 <SCSI_Write10+0x22>
  {
    return -1;
 802090e:	f04f 33ff 	mov.w	r3, #4294967295
 8020912:	e0af      	b.n	8020a74 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020914:	697b      	ldr	r3, [r7, #20]
 8020916:	7a1b      	ldrb	r3, [r3, #8]
 8020918:	2b00      	cmp	r3, #0
 802091a:	f040 80a5 	bne.w	8020a68 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 802091e:	697b      	ldr	r3, [r7, #20]
 8020920:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020924:	2b00      	cmp	r3, #0
 8020926:	d10a      	bne.n	802093e <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020928:	697b      	ldr	r3, [r7, #20]
 802092a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 802092e:	2320      	movs	r3, #32
 8020930:	2205      	movs	r2, #5
 8020932:	68f8      	ldr	r0, [r7, #12]
 8020934:	f7ff fdd1 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020938:	f04f 33ff 	mov.w	r3, #4294967295
 802093c:	e09a      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020944:	b25b      	sxtb	r3, r3
 8020946:	2b00      	cmp	r3, #0
 8020948:	da0a      	bge.n	8020960 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 802094a:	697b      	ldr	r3, [r7, #20]
 802094c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020950:	2320      	movs	r3, #32
 8020952:	2205      	movs	r2, #5
 8020954:	68f8      	ldr	r0, [r7, #12]
 8020956:	f7ff fdc0 	bl	80204da <SCSI_SenseCode>
      return -1;
 802095a:	f04f 33ff 	mov.w	r3, #4294967295
 802095e:	e089      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020960:	68fb      	ldr	r3, [r7, #12]
 8020962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020966:	689b      	ldr	r3, [r3, #8]
 8020968:	7afa      	ldrb	r2, [r7, #11]
 802096a:	4610      	mov	r0, r2
 802096c:	4798      	blx	r3
 802096e:	4603      	mov	r3, r0
 8020970:	2b00      	cmp	r3, #0
 8020972:	d008      	beq.n	8020986 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020974:	7af9      	ldrb	r1, [r7, #11]
 8020976:	233a      	movs	r3, #58	; 0x3a
 8020978:	2202      	movs	r2, #2
 802097a:	68f8      	ldr	r0, [r7, #12]
 802097c:	f7ff fdad 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020980:	f04f 33ff 	mov.w	r3, #4294967295
 8020984:	e076      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020986:	68fb      	ldr	r3, [r7, #12]
 8020988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 802098c:	68db      	ldr	r3, [r3, #12]
 802098e:	7afa      	ldrb	r2, [r7, #11]
 8020990:	4610      	mov	r0, r2
 8020992:	4798      	blx	r3
 8020994:	4603      	mov	r3, r0
 8020996:	2b00      	cmp	r3, #0
 8020998:	d008      	beq.n	80209ac <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802099a:	7af9      	ldrb	r1, [r7, #11]
 802099c:	2327      	movs	r3, #39	; 0x27
 802099e:	2202      	movs	r2, #2
 80209a0:	68f8      	ldr	r0, [r7, #12]
 80209a2:	f7ff fd9a 	bl	80204da <SCSI_SenseCode>
      return -1;
 80209a6:	f04f 33ff 	mov.w	r3, #4294967295
 80209aa:	e063      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	3302      	adds	r3, #2
 80209b0:	781b      	ldrb	r3, [r3, #0]
 80209b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	3303      	adds	r3, #3
 80209b8:	781b      	ldrb	r3, [r3, #0]
 80209ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	3304      	adds	r3, #4
 80209c2:	781b      	ldrb	r3, [r3, #0]
 80209c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80209c6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80209c8:	687a      	ldr	r2, [r7, #4]
 80209ca:	3205      	adds	r2, #5
 80209cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80209ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80209d0:	697b      	ldr	r3, [r7, #20]
 80209d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	3307      	adds	r3, #7
 80209da:	781b      	ldrb	r3, [r3, #0]
 80209dc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80209de:	687a      	ldr	r2, [r7, #4]
 80209e0:	3208      	adds	r2, #8
 80209e2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80209e4:	431a      	orrs	r2, r3
 80209e6:	697b      	ldr	r3, [r7, #20]
 80209e8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80209ec:	697b      	ldr	r3, [r7, #20]
 80209ee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80209f2:	697b      	ldr	r3, [r7, #20]
 80209f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80209f8:	7af9      	ldrb	r1, [r7, #11]
 80209fa:	68f8      	ldr	r0, [r7, #12]
 80209fc:	f000 f94c 	bl	8020c98 <SCSI_CheckAddressRange>
 8020a00:	4603      	mov	r3, r0
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	da02      	bge.n	8020a0c <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020a06:	f04f 33ff 	mov.w	r3, #4294967295
 8020a0a:	e033      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020a12:	697a      	ldr	r2, [r7, #20]
 8020a14:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020a18:	fb02 f303 	mul.w	r3, r2, r3
 8020a1c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020a1e:	697b      	ldr	r3, [r7, #20]
 8020a20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020a24:	693a      	ldr	r2, [r7, #16]
 8020a26:	429a      	cmp	r2, r3
 8020a28:	d00a      	beq.n	8020a40 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020a2a:	697b      	ldr	r3, [r7, #20]
 8020a2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020a30:	2320      	movs	r3, #32
 8020a32:	2205      	movs	r2, #5
 8020a34:	68f8      	ldr	r0, [r7, #12]
 8020a36:	f7ff fd50 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8020a3e:	e019      	b.n	8020a74 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020a40:	693b      	ldr	r3, [r7, #16]
 8020a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a46:	bf28      	it	cs
 8020a48:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020a4c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020a4e:	697b      	ldr	r3, [r7, #20]
 8020a50:	2201      	movs	r2, #1
 8020a52:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020a54:	697b      	ldr	r3, [r7, #20]
 8020a56:	f103 0210 	add.w	r2, r3, #16
 8020a5a:	693b      	ldr	r3, [r7, #16]
 8020a5c:	2101      	movs	r1, #1
 8020a5e:	68f8      	ldr	r0, [r7, #12]
 8020a60:	f002 f87f 	bl	8022b62 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020a64:	2300      	movs	r3, #0
 8020a66:	e005      	b.n	8020a74 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8020a68:	7afb      	ldrb	r3, [r7, #11]
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	68f8      	ldr	r0, [r7, #12]
 8020a6e:	f000 f9b4 	bl	8020dda <SCSI_ProcessWrite>
 8020a72:	4603      	mov	r3, r0
}
 8020a74:	4618      	mov	r0, r3
 8020a76:	3718      	adds	r7, #24
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	bd80      	pop	{r7, pc}

08020a7c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b086      	sub	sp, #24
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	60f8      	str	r0, [r7, #12]
 8020a84:	460b      	mov	r3, r1
 8020a86:	607a      	str	r2, [r7, #4]
 8020a88:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020a8a:	68fb      	ldr	r3, [r7, #12]
 8020a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020a90:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8020a92:	697b      	ldr	r3, [r7, #20]
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d102      	bne.n	8020a9e <SCSI_Write12+0x22>
  {
    return -1;
 8020a98:	f04f 33ff 	mov.w	r3, #4294967295
 8020a9c:	e0bf      	b.n	8020c1e <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020a9e:	697b      	ldr	r3, [r7, #20]
 8020aa0:	7a1b      	ldrb	r3, [r3, #8]
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	f040 80b5 	bne.w	8020c12 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8020aa8:	697b      	ldr	r3, [r7, #20]
 8020aaa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d10a      	bne.n	8020ac8 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ab2:	697b      	ldr	r3, [r7, #20]
 8020ab4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ab8:	2320      	movs	r3, #32
 8020aba:	2205      	movs	r2, #5
 8020abc:	68f8      	ldr	r0, [r7, #12]
 8020abe:	f7ff fd0c 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8020ac6:	e0aa      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8020ac8:	697b      	ldr	r3, [r7, #20]
 8020aca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8020ace:	b25b      	sxtb	r3, r3
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	da0a      	bge.n	8020aea <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020ad4:	697b      	ldr	r3, [r7, #20]
 8020ad6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020ada:	2320      	movs	r3, #32
 8020adc:	2205      	movs	r2, #5
 8020ade:	68f8      	ldr	r0, [r7, #12]
 8020ae0:	f7ff fcfb 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8020ae8:	e099      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8020aea:	68fb      	ldr	r3, [r7, #12]
 8020aec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020af0:	689b      	ldr	r3, [r3, #8]
 8020af2:	7afa      	ldrb	r2, [r7, #11]
 8020af4:	4610      	mov	r0, r2
 8020af6:	4798      	blx	r3
 8020af8:	4603      	mov	r3, r0
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d00b      	beq.n	8020b16 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020afe:	7af9      	ldrb	r1, [r7, #11]
 8020b00:	233a      	movs	r3, #58	; 0x3a
 8020b02:	2202      	movs	r2, #2
 8020b04:	68f8      	ldr	r0, [r7, #12]
 8020b06:	f7ff fce8 	bl	80204da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020b0a:	697b      	ldr	r3, [r7, #20]
 8020b0c:	2205      	movs	r2, #5
 8020b0e:	721a      	strb	r2, [r3, #8]
      return -1;
 8020b10:	f04f 33ff 	mov.w	r3, #4294967295
 8020b14:	e083      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8020b16:	68fb      	ldr	r3, [r7, #12]
 8020b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020b1c:	68db      	ldr	r3, [r3, #12]
 8020b1e:	7afa      	ldrb	r2, [r7, #11]
 8020b20:	4610      	mov	r0, r2
 8020b22:	4798      	blx	r3
 8020b24:	4603      	mov	r3, r0
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d00b      	beq.n	8020b42 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020b2a:	7af9      	ldrb	r1, [r7, #11]
 8020b2c:	2327      	movs	r3, #39	; 0x27
 8020b2e:	2202      	movs	r2, #2
 8020b30:	68f8      	ldr	r0, [r7, #12]
 8020b32:	f7ff fcd2 	bl	80204da <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020b36:	697b      	ldr	r3, [r7, #20]
 8020b38:	2205      	movs	r2, #5
 8020b3a:	721a      	strb	r2, [r3, #8]
      return -1;
 8020b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8020b40:	e06d      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	3302      	adds	r3, #2
 8020b46:	781b      	ldrb	r3, [r3, #0]
 8020b48:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	3303      	adds	r3, #3
 8020b4e:	781b      	ldrb	r3, [r3, #0]
 8020b50:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b52:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	3304      	adds	r3, #4
 8020b58:	781b      	ldrb	r3, [r3, #0]
 8020b5a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8020b5c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8020b5e:	687a      	ldr	r2, [r7, #4]
 8020b60:	3205      	adds	r2, #5
 8020b62:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8020b64:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020b66:	697b      	ldr	r3, [r7, #20]
 8020b68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	3306      	adds	r3, #6
 8020b70:	781b      	ldrb	r3, [r3, #0]
 8020b72:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	3307      	adds	r3, #7
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b7c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	3308      	adds	r3, #8
 8020b82:	781b      	ldrb	r3, [r3, #0]
 8020b84:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8020b86:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8020b88:	687a      	ldr	r2, [r7, #4]
 8020b8a:	3209      	adds	r2, #9
 8020b8c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8020b8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020b90:	697b      	ldr	r3, [r7, #20]
 8020b92:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020b9c:	697b      	ldr	r3, [r7, #20]
 8020b9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ba2:	7af9      	ldrb	r1, [r7, #11]
 8020ba4:	68f8      	ldr	r0, [r7, #12]
 8020ba6:	f000 f877 	bl	8020c98 <SCSI_CheckAddressRange>
 8020baa:	4603      	mov	r3, r0
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	da02      	bge.n	8020bb6 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8020bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8020bb4:	e033      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020bbc:	697a      	ldr	r2, [r7, #20]
 8020bbe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020bc2:	fb02 f303 	mul.w	r3, r2, r3
 8020bc6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8020bc8:	697b      	ldr	r3, [r7, #20]
 8020bca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8020bce:	693a      	ldr	r2, [r7, #16]
 8020bd0:	429a      	cmp	r2, r3
 8020bd2:	d00a      	beq.n	8020bea <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8020bda:	2320      	movs	r3, #32
 8020bdc:	2205      	movs	r2, #5
 8020bde:	68f8      	ldr	r0, [r7, #12]
 8020be0:	f7ff fc7b 	bl	80204da <SCSI_SenseCode>
      return -1;
 8020be4:	f04f 33ff 	mov.w	r3, #4294967295
 8020be8:	e019      	b.n	8020c1e <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8020bea:	693b      	ldr	r3, [r7, #16]
 8020bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020bf0:	bf28      	it	cs
 8020bf2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020bf6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020bf8:	697b      	ldr	r3, [r7, #20]
 8020bfa:	2201      	movs	r2, #1
 8020bfc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020bfe:	697b      	ldr	r3, [r7, #20]
 8020c00:	f103 0210 	add.w	r2, r3, #16
 8020c04:	693b      	ldr	r3, [r7, #16]
 8020c06:	2101      	movs	r1, #1
 8020c08:	68f8      	ldr	r0, [r7, #12]
 8020c0a:	f001 ffaa 	bl	8022b62 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8020c0e:	2300      	movs	r3, #0
 8020c10:	e005      	b.n	8020c1e <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8020c12:	7afb      	ldrb	r3, [r7, #11]
 8020c14:	4619      	mov	r1, r3
 8020c16:	68f8      	ldr	r0, [r7, #12]
 8020c18:	f000 f8df 	bl	8020dda <SCSI_ProcessWrite>
 8020c1c:	4603      	mov	r3, r0
}
 8020c1e:	4618      	mov	r0, r3
 8020c20:	3718      	adds	r7, #24
 8020c22:	46bd      	mov	sp, r7
 8020c24:	bd80      	pop	{r7, pc}

08020c26 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8020c26:	b580      	push	{r7, lr}
 8020c28:	b086      	sub	sp, #24
 8020c2a:	af00      	add	r7, sp, #0
 8020c2c:	60f8      	str	r0, [r7, #12]
 8020c2e:	460b      	mov	r3, r1
 8020c30:	607a      	str	r2, [r7, #4]
 8020c32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020c3a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020c3c:	697b      	ldr	r3, [r7, #20]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d102      	bne.n	8020c48 <SCSI_Verify10+0x22>
  {
    return -1;
 8020c42:	f04f 33ff 	mov.w	r3, #4294967295
 8020c46:	e023      	b.n	8020c90 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	3301      	adds	r3, #1
 8020c4c:	781b      	ldrb	r3, [r3, #0]
 8020c4e:	f003 0302 	and.w	r3, r3, #2
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	d008      	beq.n	8020c68 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8020c56:	7af9      	ldrb	r1, [r7, #11]
 8020c58:	2324      	movs	r3, #36	; 0x24
 8020c5a:	2205      	movs	r2, #5
 8020c5c:	68f8      	ldr	r0, [r7, #12]
 8020c5e:	f7ff fc3c 	bl	80204da <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8020c62:	f04f 33ff 	mov.w	r3, #4294967295
 8020c66:	e013      	b.n	8020c90 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020c68:	697b      	ldr	r3, [r7, #20]
 8020c6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020c6e:	697b      	ldr	r3, [r7, #20]
 8020c70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020c74:	7af9      	ldrb	r1, [r7, #11]
 8020c76:	68f8      	ldr	r0, [r7, #12]
 8020c78:	f000 f80e 	bl	8020c98 <SCSI_CheckAddressRange>
 8020c7c:	4603      	mov	r3, r0
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	da02      	bge.n	8020c88 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8020c82:	f04f 33ff 	mov.w	r3, #4294967295
 8020c86:	e003      	b.n	8020c90 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	60da      	str	r2, [r3, #12]

  return 0;
 8020c8e:	2300      	movs	r3, #0
}
 8020c90:	4618      	mov	r0, r3
 8020c92:	3718      	adds	r7, #24
 8020c94:	46bd      	mov	sp, r7
 8020c96:	bd80      	pop	{r7, pc}

08020c98 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b086      	sub	sp, #24
 8020c9c:	af00      	add	r7, sp, #0
 8020c9e:	60f8      	str	r0, [r7, #12]
 8020ca0:	607a      	str	r2, [r7, #4]
 8020ca2:	603b      	str	r3, [r7, #0]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020cae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8020cb0:	697b      	ldr	r3, [r7, #20]
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d102      	bne.n	8020cbc <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8020cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8020cba:	e011      	b.n	8020ce0 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020cbc:	687a      	ldr	r2, [r7, #4]
 8020cbe:	683b      	ldr	r3, [r7, #0]
 8020cc0:	441a      	add	r2, r3
 8020cc2:	697b      	ldr	r3, [r7, #20]
 8020cc4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8020cc8:	429a      	cmp	r2, r3
 8020cca:	d908      	bls.n	8020cde <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020ccc:	7af9      	ldrb	r1, [r7, #11]
 8020cce:	2321      	movs	r3, #33	; 0x21
 8020cd0:	2205      	movs	r2, #5
 8020cd2:	68f8      	ldr	r0, [r7, #12]
 8020cd4:	f7ff fc01 	bl	80204da <SCSI_SenseCode>
    return -1;
 8020cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8020cdc:	e000      	b.n	8020ce0 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8020cde:	2300      	movs	r3, #0
}
 8020ce0:	4618      	mov	r0, r3
 8020ce2:	3718      	adds	r7, #24
 8020ce4:	46bd      	mov	sp, r7
 8020ce6:	bd80      	pop	{r7, pc}

08020ce8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020ce8:	b590      	push	{r4, r7, lr}
 8020cea:	b085      	sub	sp, #20
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	6078      	str	r0, [r7, #4]
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020cfa:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020cfc:	68fb      	ldr	r3, [r7, #12]
 8020cfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020d02:	68fa      	ldr	r2, [r7, #12]
 8020d04:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020d08:	fb02 f303 	mul.w	r3, r2, r3
 8020d0c:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020d0e:	68fb      	ldr	r3, [r7, #12]
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	d102      	bne.n	8020d1a <SCSI_ProcessRead+0x32>
  {
    return -1;
 8020d14:	f04f 33ff 	mov.w	r3, #4294967295
 8020d18:	e05b      	b.n	8020dd2 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020d1a:	68bb      	ldr	r3, [r7, #8]
 8020d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d20:	bf28      	it	cs
 8020d22:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020d26:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020d2e:	691c      	ldr	r4, [r3, #16]
 8020d30:	68fb      	ldr	r3, [r7, #12]
 8020d32:	f103 0110 	add.w	r1, r3, #16
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8020d3c:	68fb      	ldr	r3, [r7, #12]
 8020d3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d42:	4618      	mov	r0, r3
 8020d44:	68bb      	ldr	r3, [r7, #8]
 8020d46:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8020d4a:	b29b      	uxth	r3, r3
 8020d4c:	78f8      	ldrb	r0, [r7, #3]
 8020d4e:	47a0      	blx	r4
 8020d50:	4603      	mov	r3, r0
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	da08      	bge.n	8020d68 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020d56:	78f9      	ldrb	r1, [r7, #3]
 8020d58:	2311      	movs	r3, #17
 8020d5a:	2204      	movs	r2, #4
 8020d5c:	6878      	ldr	r0, [r7, #4]
 8020d5e:	f7ff fbbc 	bl	80204da <SCSI_SenseCode>
    return -1;
 8020d62:	f04f 33ff 	mov.w	r3, #4294967295
 8020d66:	e034      	b.n	8020dd2 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	f103 0210 	add.w	r2, r3, #16
 8020d6e:	68bb      	ldr	r3, [r7, #8]
 8020d70:	2181      	movs	r1, #129	; 0x81
 8020d72:	6878      	ldr	r0, [r7, #4]
 8020d74:	f001 fed4 	bl	8022b20 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020d78:	68fb      	ldr	r3, [r7, #12]
 8020d7a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020d7e:	68fb      	ldr	r3, [r7, #12]
 8020d80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020d84:	4619      	mov	r1, r3
 8020d86:	68bb      	ldr	r3, [r7, #8]
 8020d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8020d8c:	441a      	add	r2, r3
 8020d8e:	68fb      	ldr	r3, [r7, #12]
 8020d90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020da0:	4619      	mov	r1, r3
 8020da2:	68bb      	ldr	r3, [r7, #8]
 8020da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8020da8:	1ad2      	subs	r2, r2, r3
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020db6:	68bb      	ldr	r3, [r7, #8]
 8020db8:	1ad2      	subs	r2, r2, r3
 8020dba:	68fb      	ldr	r3, [r7, #12]
 8020dbc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020dc0:	68fb      	ldr	r3, [r7, #12]
 8020dc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d102      	bne.n	8020dd0 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020dca:	68fb      	ldr	r3, [r7, #12]
 8020dcc:	2203      	movs	r2, #3
 8020dce:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8020dd0:	2300      	movs	r3, #0
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	3714      	adds	r7, #20
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	bd90      	pop	{r4, r7, pc}

08020dda <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8020dda:	b590      	push	{r4, r7, lr}
 8020ddc:	b085      	sub	sp, #20
 8020dde:	af00      	add	r7, sp, #0
 8020de0:	6078      	str	r0, [r7, #4]
 8020de2:	460b      	mov	r3, r1
 8020de4:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8020dec:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020df4:	68fa      	ldr	r2, [r7, #12]
 8020df6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020dfa:	fb02 f303 	mul.w	r3, r2, r3
 8020dfe:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8020e00:	68fb      	ldr	r3, [r7, #12]
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	d102      	bne.n	8020e0c <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8020e06:	f04f 33ff 	mov.w	r3, #4294967295
 8020e0a:	e06b      	b.n	8020ee4 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8020e0c:	68bb      	ldr	r3, [r7, #8]
 8020e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e12:	bf28      	it	cs
 8020e14:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020e18:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8020e20:	695c      	ldr	r4, [r3, #20]
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	f103 0110 	add.w	r1, r3, #16
 8020e28:	68fb      	ldr	r3, [r7, #12]
 8020e2a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020e34:	4618      	mov	r0, r3
 8020e36:	68bb      	ldr	r3, [r7, #8]
 8020e38:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8020e3c:	b29b      	uxth	r3, r3
 8020e3e:	78f8      	ldrb	r0, [r7, #3]
 8020e40:	47a0      	blx	r4
 8020e42:	4603      	mov	r3, r0
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	da08      	bge.n	8020e5a <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8020e48:	78f9      	ldrb	r1, [r7, #3]
 8020e4a:	2303      	movs	r3, #3
 8020e4c:	2204      	movs	r2, #4
 8020e4e:	6878      	ldr	r0, [r7, #4]
 8020e50:	f7ff fb43 	bl	80204da <SCSI_SenseCode>
    return -1;
 8020e54:	f04f 33ff 	mov.w	r3, #4294967295
 8020e58:	e044      	b.n	8020ee4 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020e5a:	68fb      	ldr	r3, [r7, #12]
 8020e5c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8020e60:	68fb      	ldr	r3, [r7, #12]
 8020e62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020e66:	4619      	mov	r1, r3
 8020e68:	68bb      	ldr	r3, [r7, #8]
 8020e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8020e6e:	441a      	add	r2, r3
 8020e70:	68fb      	ldr	r3, [r7, #12]
 8020e72:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020e76:	68fb      	ldr	r3, [r7, #12]
 8020e78:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8020e7c:	68fb      	ldr	r3, [r7, #12]
 8020e7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8020e82:	4619      	mov	r1, r3
 8020e84:	68bb      	ldr	r3, [r7, #8]
 8020e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8020e8a:	1ad2      	subs	r2, r2, r3
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8020e92:	68fb      	ldr	r3, [r7, #12]
 8020e94:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8020e98:	68bb      	ldr	r3, [r7, #8]
 8020e9a:	1ad2      	subs	r2, r2, r3
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8020ea2:	68fb      	ldr	r3, [r7, #12]
 8020ea4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	d104      	bne.n	8020eb6 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8020eac:	2100      	movs	r1, #0
 8020eae:	6878      	ldr	r0, [r7, #4]
 8020eb0:	f7fe fdd8 	bl	801fa64 <MSC_BOT_SendCSW>
 8020eb4:	e015      	b.n	8020ee2 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8020eb6:	68fb      	ldr	r3, [r7, #12]
 8020eb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8020ebc:	68fa      	ldr	r2, [r7, #12]
 8020ebe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8020ec2:	fb02 f303 	mul.w	r3, r2, r3
 8020ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020eca:	bf28      	it	cs
 8020ecc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8020ed0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8020ed2:	68fb      	ldr	r3, [r7, #12]
 8020ed4:	f103 0210 	add.w	r2, r3, #16
 8020ed8:	68bb      	ldr	r3, [r7, #8]
 8020eda:	2101      	movs	r1, #1
 8020edc:	6878      	ldr	r0, [r7, #4]
 8020ede:	f001 fe40 	bl	8022b62 <USBD_LL_PrepareReceive>
  }

  return 0;
 8020ee2:	2300      	movs	r3, #0
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	3714      	adds	r7, #20
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd90      	pop	{r4, r7, pc}

08020eec <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8020eec:	b480      	push	{r7}
 8020eee:	b087      	sub	sp, #28
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	60f8      	str	r0, [r7, #12]
 8020ef4:	60b9      	str	r1, [r7, #8]
 8020ef6:	4613      	mov	r3, r2
 8020ef8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8020efa:	88fb      	ldrh	r3, [r7, #6]
 8020efc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8020efe:	68fb      	ldr	r3, [r7, #12]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d102      	bne.n	8020f0a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8020f04:	f04f 33ff 	mov.w	r3, #4294967295
 8020f08:	e013      	b.n	8020f32 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8020f0a:	8afa      	ldrh	r2, [r7, #22]
 8020f0c:	68fb      	ldr	r3, [r7, #12]
 8020f0e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8020f10:	e00b      	b.n	8020f2a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8020f12:	8afb      	ldrh	r3, [r7, #22]
 8020f14:	3b01      	subs	r3, #1
 8020f16:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8020f18:	8afb      	ldrh	r3, [r7, #22]
 8020f1a:	68ba      	ldr	r2, [r7, #8]
 8020f1c:	441a      	add	r2, r3
 8020f1e:	8afb      	ldrh	r3, [r7, #22]
 8020f20:	7811      	ldrb	r1, [r2, #0]
 8020f22:	68fa      	ldr	r2, [r7, #12]
 8020f24:	4413      	add	r3, r2
 8020f26:	460a      	mov	r2, r1
 8020f28:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8020f2a:	8afb      	ldrh	r3, [r7, #22]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d1f0      	bne.n	8020f12 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8020f30:	2300      	movs	r3, #0
}
 8020f32:	4618      	mov	r0, r3
 8020f34:	371c      	adds	r7, #28
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr

08020f3e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020f3e:	b580      	push	{r7, lr}
 8020f40:	b086      	sub	sp, #24
 8020f42:	af00      	add	r7, sp, #0
 8020f44:	60f8      	str	r0, [r7, #12]
 8020f46:	60b9      	str	r1, [r7, #8]
 8020f48:	4613      	mov	r3, r2
 8020f4a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020f4c:	68fb      	ldr	r3, [r7, #12]
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d101      	bne.n	8020f56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020f52:	2303      	movs	r3, #3
 8020f54:	e01f      	b.n	8020f96 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8020f56:	68fb      	ldr	r3, [r7, #12]
 8020f58:	2200      	movs	r2, #0
 8020f5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8020f5e:	68fb      	ldr	r3, [r7, #12]
 8020f60:	2200      	movs	r2, #0
 8020f62:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	2200      	movs	r2, #0
 8020f6a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020f6e:	68bb      	ldr	r3, [r7, #8]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d003      	beq.n	8020f7c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020f74:	68fb      	ldr	r3, [r7, #12]
 8020f76:	68ba      	ldr	r2, [r7, #8]
 8020f78:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	2201      	movs	r2, #1
 8020f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020f84:	68fb      	ldr	r3, [r7, #12]
 8020f86:	79fa      	ldrb	r2, [r7, #7]
 8020f88:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020f8a:	68f8      	ldr	r0, [r7, #12]
 8020f8c:	f001 fc74 	bl	8022878 <USBD_LL_Init>
 8020f90:	4603      	mov	r3, r0
 8020f92:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8020f96:	4618      	mov	r0, r3
 8020f98:	3718      	adds	r7, #24
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	bd80      	pop	{r7, pc}

08020f9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020f9e:	b580      	push	{r7, lr}
 8020fa0:	b084      	sub	sp, #16
 8020fa2:	af00      	add	r7, sp, #0
 8020fa4:	6078      	str	r0, [r7, #4]
 8020fa6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8020fa8:	2300      	movs	r3, #0
 8020faa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8020fac:	683b      	ldr	r3, [r7, #0]
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d101      	bne.n	8020fb6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8020fb2:	2303      	movs	r3, #3
 8020fb4:	e016      	b.n	8020fe4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	683a      	ldr	r2, [r7, #0]
 8020fba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d00b      	beq.n	8020fe2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020fd2:	f107 020e 	add.w	r2, r7, #14
 8020fd6:	4610      	mov	r0, r2
 8020fd8:	4798      	blx	r3
 8020fda:	4602      	mov	r2, r0
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8020fe2:	2300      	movs	r3, #0
}
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	3710      	adds	r7, #16
 8020fe8:	46bd      	mov	sp, r7
 8020fea:	bd80      	pop	{r7, pc}

08020fec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b082      	sub	sp, #8
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8020ff4:	6878      	ldr	r0, [r7, #4]
 8020ff6:	f001 fc8b 	bl	8022910 <USBD_LL_Start>
 8020ffa:	4603      	mov	r3, r0
}
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	3708      	adds	r7, #8
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}

08021004 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021004:	b480      	push	{r7}
 8021006:	b083      	sub	sp, #12
 8021008:	af00      	add	r7, sp, #0
 802100a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802100c:	2300      	movs	r3, #0
}
 802100e:	4618      	mov	r0, r3
 8021010:	370c      	adds	r7, #12
 8021012:	46bd      	mov	sp, r7
 8021014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021018:	4770      	bx	lr

0802101a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802101a:	b580      	push	{r7, lr}
 802101c:	b084      	sub	sp, #16
 802101e:	af00      	add	r7, sp, #0
 8021020:	6078      	str	r0, [r7, #4]
 8021022:	460b      	mov	r3, r1
 8021024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021026:	2303      	movs	r3, #3
 8021028:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021030:	2b00      	cmp	r3, #0
 8021032:	d009      	beq.n	8021048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	78fa      	ldrb	r2, [r7, #3]
 802103e:	4611      	mov	r1, r2
 8021040:	6878      	ldr	r0, [r7, #4]
 8021042:	4798      	blx	r3
 8021044:	4603      	mov	r3, r0
 8021046:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8021048:	7bfb      	ldrb	r3, [r7, #15]
}
 802104a:	4618      	mov	r0, r3
 802104c:	3710      	adds	r7, #16
 802104e:	46bd      	mov	sp, r7
 8021050:	bd80      	pop	{r7, pc}

08021052 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8021052:	b580      	push	{r7, lr}
 8021054:	b082      	sub	sp, #8
 8021056:	af00      	add	r7, sp, #0
 8021058:	6078      	str	r0, [r7, #4]
 802105a:	460b      	mov	r3, r1
 802105c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021064:	2b00      	cmp	r3, #0
 8021066:	d007      	beq.n	8021078 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802106e:	685b      	ldr	r3, [r3, #4]
 8021070:	78fa      	ldrb	r2, [r7, #3]
 8021072:	4611      	mov	r1, r2
 8021074:	6878      	ldr	r0, [r7, #4]
 8021076:	4798      	blx	r3
  }

  return USBD_OK;
 8021078:	2300      	movs	r3, #0
}
 802107a:	4618      	mov	r0, r3
 802107c:	3708      	adds	r7, #8
 802107e:	46bd      	mov	sp, r7
 8021080:	bd80      	pop	{r7, pc}

08021082 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021082:	b580      	push	{r7, lr}
 8021084:	b084      	sub	sp, #16
 8021086:	af00      	add	r7, sp, #0
 8021088:	6078      	str	r0, [r7, #4]
 802108a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8021092:	6839      	ldr	r1, [r7, #0]
 8021094:	4618      	mov	r0, r3
 8021096:	f000 ffb9 	bl	802200c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	2201      	movs	r2, #1
 802109e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80210a8:	461a      	mov	r2, r3
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80210b6:	f003 031f 	and.w	r3, r3, #31
 80210ba:	2b02      	cmp	r3, #2
 80210bc:	d01a      	beq.n	80210f4 <USBD_LL_SetupStage+0x72>
 80210be:	2b02      	cmp	r3, #2
 80210c0:	d822      	bhi.n	8021108 <USBD_LL_SetupStage+0x86>
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d002      	beq.n	80210cc <USBD_LL_SetupStage+0x4a>
 80210c6:	2b01      	cmp	r3, #1
 80210c8:	d00a      	beq.n	80210e0 <USBD_LL_SetupStage+0x5e>
 80210ca:	e01d      	b.n	8021108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210d2:	4619      	mov	r1, r3
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f000 fa61 	bl	802159c <USBD_StdDevReq>
 80210da:	4603      	mov	r3, r0
 80210dc:	73fb      	strb	r3, [r7, #15]
      break;
 80210de:	e020      	b.n	8021122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210e6:	4619      	mov	r1, r3
 80210e8:	6878      	ldr	r0, [r7, #4]
 80210ea:	f000 fac5 	bl	8021678 <USBD_StdItfReq>
 80210ee:	4603      	mov	r3, r0
 80210f0:	73fb      	strb	r3, [r7, #15]
      break;
 80210f2:	e016      	b.n	8021122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80210fa:	4619      	mov	r1, r3
 80210fc:	6878      	ldr	r0, [r7, #4]
 80210fe:	f000 fb04 	bl	802170a <USBD_StdEPReq>
 8021102:	4603      	mov	r3, r0
 8021104:	73fb      	strb	r3, [r7, #15]
      break;
 8021106:	e00c      	b.n	8021122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802110e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021112:	b2db      	uxtb	r3, r3
 8021114:	4619      	mov	r1, r3
 8021116:	6878      	ldr	r0, [r7, #4]
 8021118:	f001 fc79 	bl	8022a0e <USBD_LL_StallEP>
 802111c:	4603      	mov	r3, r0
 802111e:	73fb      	strb	r3, [r7, #15]
      break;
 8021120:	bf00      	nop
  }

  return ret;
 8021122:	7bfb      	ldrb	r3, [r7, #15]
}
 8021124:	4618      	mov	r0, r3
 8021126:	3710      	adds	r7, #16
 8021128:	46bd      	mov	sp, r7
 802112a:	bd80      	pop	{r7, pc}

0802112c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802112c:	b580      	push	{r7, lr}
 802112e:	b086      	sub	sp, #24
 8021130:	af00      	add	r7, sp, #0
 8021132:	60f8      	str	r0, [r7, #12]
 8021134:	460b      	mov	r3, r1
 8021136:	607a      	str	r2, [r7, #4]
 8021138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 802113a:	7afb      	ldrb	r3, [r7, #11]
 802113c:	2b00      	cmp	r3, #0
 802113e:	d138      	bne.n	80211b2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8021140:	68fb      	ldr	r3, [r7, #12]
 8021142:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8021146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802114e:	2b03      	cmp	r3, #3
 8021150:	d14a      	bne.n	80211e8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8021152:	693b      	ldr	r3, [r7, #16]
 8021154:	689a      	ldr	r2, [r3, #8]
 8021156:	693b      	ldr	r3, [r7, #16]
 8021158:	68db      	ldr	r3, [r3, #12]
 802115a:	429a      	cmp	r2, r3
 802115c:	d913      	bls.n	8021186 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802115e:	693b      	ldr	r3, [r7, #16]
 8021160:	689a      	ldr	r2, [r3, #8]
 8021162:	693b      	ldr	r3, [r7, #16]
 8021164:	68db      	ldr	r3, [r3, #12]
 8021166:	1ad2      	subs	r2, r2, r3
 8021168:	693b      	ldr	r3, [r7, #16]
 802116a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802116c:	693b      	ldr	r3, [r7, #16]
 802116e:	68da      	ldr	r2, [r3, #12]
 8021170:	693b      	ldr	r3, [r7, #16]
 8021172:	689b      	ldr	r3, [r3, #8]
 8021174:	4293      	cmp	r3, r2
 8021176:	bf28      	it	cs
 8021178:	4613      	movcs	r3, r2
 802117a:	461a      	mov	r2, r3
 802117c:	6879      	ldr	r1, [r7, #4]
 802117e:	68f8      	ldr	r0, [r7, #12]
 8021180:	f001 f81b 	bl	80221ba <USBD_CtlContinueRx>
 8021184:	e030      	b.n	80211e8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802118c:	b2db      	uxtb	r3, r3
 802118e:	2b03      	cmp	r3, #3
 8021190:	d10b      	bne.n	80211aa <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021198:	691b      	ldr	r3, [r3, #16]
 802119a:	2b00      	cmp	r3, #0
 802119c:	d005      	beq.n	80211aa <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211a4:	691b      	ldr	r3, [r3, #16]
 80211a6:	68f8      	ldr	r0, [r7, #12]
 80211a8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80211aa:	68f8      	ldr	r0, [r7, #12]
 80211ac:	f001 f816 	bl	80221dc <USBD_CtlSendStatus>
 80211b0:	e01a      	b.n	80211e8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80211b2:	68fb      	ldr	r3, [r7, #12]
 80211b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80211b8:	b2db      	uxtb	r3, r3
 80211ba:	2b03      	cmp	r3, #3
 80211bc:	d114      	bne.n	80211e8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211c4:	699b      	ldr	r3, [r3, #24]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d00e      	beq.n	80211e8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80211ca:	68fb      	ldr	r3, [r7, #12]
 80211cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80211d0:	699b      	ldr	r3, [r3, #24]
 80211d2:	7afa      	ldrb	r2, [r7, #11]
 80211d4:	4611      	mov	r1, r2
 80211d6:	68f8      	ldr	r0, [r7, #12]
 80211d8:	4798      	blx	r3
 80211da:	4603      	mov	r3, r0
 80211dc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80211de:	7dfb      	ldrb	r3, [r7, #23]
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d001      	beq.n	80211e8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80211e4:	7dfb      	ldrb	r3, [r7, #23]
 80211e6:	e000      	b.n	80211ea <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80211e8:	2300      	movs	r3, #0
}
 80211ea:	4618      	mov	r0, r3
 80211ec:	3718      	adds	r7, #24
 80211ee:	46bd      	mov	sp, r7
 80211f0:	bd80      	pop	{r7, pc}

080211f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80211f2:	b580      	push	{r7, lr}
 80211f4:	b086      	sub	sp, #24
 80211f6:	af00      	add	r7, sp, #0
 80211f8:	60f8      	str	r0, [r7, #12]
 80211fa:	460b      	mov	r3, r1
 80211fc:	607a      	str	r2, [r7, #4]
 80211fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8021200:	7afb      	ldrb	r3, [r7, #11]
 8021202:	2b00      	cmp	r3, #0
 8021204:	d16b      	bne.n	80212de <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8021206:	68fb      	ldr	r3, [r7, #12]
 8021208:	3314      	adds	r3, #20
 802120a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802120c:	68fb      	ldr	r3, [r7, #12]
 802120e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8021212:	2b02      	cmp	r3, #2
 8021214:	d156      	bne.n	80212c4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021216:	693b      	ldr	r3, [r7, #16]
 8021218:	689a      	ldr	r2, [r3, #8]
 802121a:	693b      	ldr	r3, [r7, #16]
 802121c:	68db      	ldr	r3, [r3, #12]
 802121e:	429a      	cmp	r2, r3
 8021220:	d914      	bls.n	802124c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8021222:	693b      	ldr	r3, [r7, #16]
 8021224:	689a      	ldr	r2, [r3, #8]
 8021226:	693b      	ldr	r3, [r7, #16]
 8021228:	68db      	ldr	r3, [r3, #12]
 802122a:	1ad2      	subs	r2, r2, r3
 802122c:	693b      	ldr	r3, [r7, #16]
 802122e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8021230:	693b      	ldr	r3, [r7, #16]
 8021232:	689b      	ldr	r3, [r3, #8]
 8021234:	461a      	mov	r2, r3
 8021236:	6879      	ldr	r1, [r7, #4]
 8021238:	68f8      	ldr	r0, [r7, #12]
 802123a:	f000 ffad 	bl	8022198 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802123e:	2300      	movs	r3, #0
 8021240:	2200      	movs	r2, #0
 8021242:	2100      	movs	r1, #0
 8021244:	68f8      	ldr	r0, [r7, #12]
 8021246:	f001 fc8c 	bl	8022b62 <USBD_LL_PrepareReceive>
 802124a:	e03b      	b.n	80212c4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802124c:	693b      	ldr	r3, [r7, #16]
 802124e:	68da      	ldr	r2, [r3, #12]
 8021250:	693b      	ldr	r3, [r7, #16]
 8021252:	689b      	ldr	r3, [r3, #8]
 8021254:	429a      	cmp	r2, r3
 8021256:	d11c      	bne.n	8021292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8021258:	693b      	ldr	r3, [r7, #16]
 802125a:	685a      	ldr	r2, [r3, #4]
 802125c:	693b      	ldr	r3, [r7, #16]
 802125e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8021260:	429a      	cmp	r2, r3
 8021262:	d316      	bcc.n	8021292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8021264:	693b      	ldr	r3, [r7, #16]
 8021266:	685a      	ldr	r2, [r3, #4]
 8021268:	68fb      	ldr	r3, [r7, #12]
 802126a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802126e:	429a      	cmp	r2, r3
 8021270:	d20f      	bcs.n	8021292 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021272:	2200      	movs	r2, #0
 8021274:	2100      	movs	r1, #0
 8021276:	68f8      	ldr	r0, [r7, #12]
 8021278:	f000 ff8e 	bl	8022198 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802127c:	68fb      	ldr	r3, [r7, #12]
 802127e:	2200      	movs	r2, #0
 8021280:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021284:	2300      	movs	r3, #0
 8021286:	2200      	movs	r2, #0
 8021288:	2100      	movs	r1, #0
 802128a:	68f8      	ldr	r0, [r7, #12]
 802128c:	f001 fc69 	bl	8022b62 <USBD_LL_PrepareReceive>
 8021290:	e018      	b.n	80212c4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021292:	68fb      	ldr	r3, [r7, #12]
 8021294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021298:	b2db      	uxtb	r3, r3
 802129a:	2b03      	cmp	r3, #3
 802129c:	d10b      	bne.n	80212b6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 802129e:	68fb      	ldr	r3, [r7, #12]
 80212a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212a4:	68db      	ldr	r3, [r3, #12]
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	d005      	beq.n	80212b6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80212aa:	68fb      	ldr	r3, [r7, #12]
 80212ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212b0:	68db      	ldr	r3, [r3, #12]
 80212b2:	68f8      	ldr	r0, [r7, #12]
 80212b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80212b6:	2180      	movs	r1, #128	; 0x80
 80212b8:	68f8      	ldr	r0, [r7, #12]
 80212ba:	f001 fba8 	bl	8022a0e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80212be:	68f8      	ldr	r0, [r7, #12]
 80212c0:	f000 ff9f 	bl	8022202 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80212ca:	2b01      	cmp	r3, #1
 80212cc:	d122      	bne.n	8021314 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f7ff fe98 	bl	8021004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80212d4:	68fb      	ldr	r3, [r7, #12]
 80212d6:	2200      	movs	r2, #0
 80212d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80212dc:	e01a      	b.n	8021314 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80212de:	68fb      	ldr	r3, [r7, #12]
 80212e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212e4:	b2db      	uxtb	r3, r3
 80212e6:	2b03      	cmp	r3, #3
 80212e8:	d114      	bne.n	8021314 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80212ea:	68fb      	ldr	r3, [r7, #12]
 80212ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212f0:	695b      	ldr	r3, [r3, #20]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d00e      	beq.n	8021314 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80212fc:	695b      	ldr	r3, [r3, #20]
 80212fe:	7afa      	ldrb	r2, [r7, #11]
 8021300:	4611      	mov	r1, r2
 8021302:	68f8      	ldr	r0, [r7, #12]
 8021304:	4798      	blx	r3
 8021306:	4603      	mov	r3, r0
 8021308:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 802130a:	7dfb      	ldrb	r3, [r7, #23]
 802130c:	2b00      	cmp	r3, #0
 802130e:	d001      	beq.n	8021314 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8021310:	7dfb      	ldrb	r3, [r7, #23]
 8021312:	e000      	b.n	8021316 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8021314:	2300      	movs	r3, #0
}
 8021316:	4618      	mov	r0, r3
 8021318:	3718      	adds	r7, #24
 802131a:	46bd      	mov	sp, r7
 802131c:	bd80      	pop	{r7, pc}

0802131e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802131e:	b580      	push	{r7, lr}
 8021320:	b082      	sub	sp, #8
 8021322:	af00      	add	r7, sp, #0
 8021324:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	2201      	movs	r2, #1
 802132a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	2200      	movs	r2, #0
 8021332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	2200      	movs	r2, #0
 802133a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	2200      	movs	r2, #0
 8021340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802134a:	2b00      	cmp	r3, #0
 802134c:	d101      	bne.n	8021352 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 802134e:	2303      	movs	r3, #3
 8021350:	e02f      	b.n	80213b2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8021358:	2b00      	cmp	r3, #0
 802135a:	d00f      	beq.n	802137c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021362:	685b      	ldr	r3, [r3, #4]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d009      	beq.n	802137c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021368:	687b      	ldr	r3, [r7, #4]
 802136a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802136e:	685b      	ldr	r3, [r3, #4]
 8021370:	687a      	ldr	r2, [r7, #4]
 8021372:	6852      	ldr	r2, [r2, #4]
 8021374:	b2d2      	uxtb	r2, r2
 8021376:	4611      	mov	r1, r2
 8021378:	6878      	ldr	r0, [r7, #4]
 802137a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802137c:	2340      	movs	r3, #64	; 0x40
 802137e:	2200      	movs	r2, #0
 8021380:	2100      	movs	r1, #0
 8021382:	6878      	ldr	r0, [r7, #4]
 8021384:	f001 fadf 	bl	8022946 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	2201      	movs	r2, #1
 802138c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	2240      	movs	r2, #64	; 0x40
 8021394:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021398:	2340      	movs	r3, #64	; 0x40
 802139a:	2200      	movs	r2, #0
 802139c:	2180      	movs	r1, #128	; 0x80
 802139e:	6878      	ldr	r0, [r7, #4]
 80213a0:	f001 fad1 	bl	8022946 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	2201      	movs	r2, #1
 80213a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	2240      	movs	r2, #64	; 0x40
 80213ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80213b0:	2300      	movs	r3, #0
}
 80213b2:	4618      	mov	r0, r3
 80213b4:	3708      	adds	r7, #8
 80213b6:	46bd      	mov	sp, r7
 80213b8:	bd80      	pop	{r7, pc}

080213ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80213ba:	b480      	push	{r7}
 80213bc:	b083      	sub	sp, #12
 80213be:	af00      	add	r7, sp, #0
 80213c0:	6078      	str	r0, [r7, #4]
 80213c2:	460b      	mov	r3, r1
 80213c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	78fa      	ldrb	r2, [r7, #3]
 80213ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80213cc:	2300      	movs	r3, #0
}
 80213ce:	4618      	mov	r0, r3
 80213d0:	370c      	adds	r7, #12
 80213d2:	46bd      	mov	sp, r7
 80213d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d8:	4770      	bx	lr

080213da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80213da:	b480      	push	{r7}
 80213dc:	b083      	sub	sp, #12
 80213de:	af00      	add	r7, sp, #0
 80213e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213e8:	b2da      	uxtb	r2, r3
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	2204      	movs	r2, #4
 80213f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80213f8:	2300      	movs	r3, #0
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	370c      	adds	r7, #12
 80213fe:	46bd      	mov	sp, r7
 8021400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021404:	4770      	bx	lr

08021406 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8021406:	b480      	push	{r7}
 8021408:	b083      	sub	sp, #12
 802140a:	af00      	add	r7, sp, #0
 802140c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021414:	b2db      	uxtb	r3, r3
 8021416:	2b04      	cmp	r3, #4
 8021418:	d106      	bne.n	8021428 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8021420:	b2da      	uxtb	r2, r3
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8021428:	2300      	movs	r3, #0
}
 802142a:	4618      	mov	r0, r3
 802142c:	370c      	adds	r7, #12
 802142e:	46bd      	mov	sp, r7
 8021430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021434:	4770      	bx	lr

08021436 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8021436:	b580      	push	{r7, lr}
 8021438:	b082      	sub	sp, #8
 802143a:	af00      	add	r7, sp, #0
 802143c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021444:	2b00      	cmp	r3, #0
 8021446:	d101      	bne.n	802144c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8021448:	2303      	movs	r3, #3
 802144a:	e012      	b.n	8021472 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021452:	b2db      	uxtb	r3, r3
 8021454:	2b03      	cmp	r3, #3
 8021456:	d10b      	bne.n	8021470 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8021458:	687b      	ldr	r3, [r7, #4]
 802145a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802145e:	69db      	ldr	r3, [r3, #28]
 8021460:	2b00      	cmp	r3, #0
 8021462:	d005      	beq.n	8021470 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802146a:	69db      	ldr	r3, [r3, #28]
 802146c:	6878      	ldr	r0, [r7, #4]
 802146e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021470:	2300      	movs	r3, #0
}
 8021472:	4618      	mov	r0, r3
 8021474:	3708      	adds	r7, #8
 8021476:	46bd      	mov	sp, r7
 8021478:	bd80      	pop	{r7, pc}

0802147a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802147a:	b580      	push	{r7, lr}
 802147c:	b082      	sub	sp, #8
 802147e:	af00      	add	r7, sp, #0
 8021480:	6078      	str	r0, [r7, #4]
 8021482:	460b      	mov	r3, r1
 8021484:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802148c:	2b00      	cmp	r3, #0
 802148e:	d101      	bne.n	8021494 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8021490:	2303      	movs	r3, #3
 8021492:	e014      	b.n	80214be <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802149a:	b2db      	uxtb	r3, r3
 802149c:	2b03      	cmp	r3, #3
 802149e:	d10d      	bne.n	80214bc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214a6:	6a1b      	ldr	r3, [r3, #32]
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d007      	beq.n	80214bc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80214ac:	687b      	ldr	r3, [r7, #4]
 80214ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214b2:	6a1b      	ldr	r3, [r3, #32]
 80214b4:	78fa      	ldrb	r2, [r7, #3]
 80214b6:	4611      	mov	r1, r2
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80214bc:	2300      	movs	r3, #0
}
 80214be:	4618      	mov	r0, r3
 80214c0:	3708      	adds	r7, #8
 80214c2:	46bd      	mov	sp, r7
 80214c4:	bd80      	pop	{r7, pc}

080214c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80214c6:	b580      	push	{r7, lr}
 80214c8:	b082      	sub	sp, #8
 80214ca:	af00      	add	r7, sp, #0
 80214cc:	6078      	str	r0, [r7, #4]
 80214ce:	460b      	mov	r3, r1
 80214d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214d8:	2b00      	cmp	r3, #0
 80214da:	d101      	bne.n	80214e0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80214dc:	2303      	movs	r3, #3
 80214de:	e014      	b.n	802150a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80214e6:	b2db      	uxtb	r3, r3
 80214e8:	2b03      	cmp	r3, #3
 80214ea:	d10d      	bne.n	8021508 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214f4:	2b00      	cmp	r3, #0
 80214f6:	d007      	beq.n	8021508 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80214fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021500:	78fa      	ldrb	r2, [r7, #3]
 8021502:	4611      	mov	r1, r2
 8021504:	6878      	ldr	r0, [r7, #4]
 8021506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8021508:	2300      	movs	r3, #0
}
 802150a:	4618      	mov	r0, r3
 802150c:	3708      	adds	r7, #8
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}

08021512 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8021512:	b480      	push	{r7}
 8021514:	b083      	sub	sp, #12
 8021516:	af00      	add	r7, sp, #0
 8021518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802151a:	2300      	movs	r3, #0
}
 802151c:	4618      	mov	r0, r3
 802151e:	370c      	adds	r7, #12
 8021520:	46bd      	mov	sp, r7
 8021522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021526:	4770      	bx	lr

08021528 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8021528:	b580      	push	{r7, lr}
 802152a:	b082      	sub	sp, #8
 802152c:	af00      	add	r7, sp, #0
 802152e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	2201      	movs	r2, #1
 8021534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802153e:	2b00      	cmp	r3, #0
 8021540:	d009      	beq.n	8021556 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021548:	685b      	ldr	r3, [r3, #4]
 802154a:	687a      	ldr	r2, [r7, #4]
 802154c:	6852      	ldr	r2, [r2, #4]
 802154e:	b2d2      	uxtb	r2, r2
 8021550:	4611      	mov	r1, r2
 8021552:	6878      	ldr	r0, [r7, #4]
 8021554:	4798      	blx	r3
  }

  return USBD_OK;
 8021556:	2300      	movs	r3, #0
}
 8021558:	4618      	mov	r0, r3
 802155a:	3708      	adds	r7, #8
 802155c:	46bd      	mov	sp, r7
 802155e:	bd80      	pop	{r7, pc}

08021560 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021560:	b480      	push	{r7}
 8021562:	b087      	sub	sp, #28
 8021564:	af00      	add	r7, sp, #0
 8021566:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802156c:	697b      	ldr	r3, [r7, #20]
 802156e:	781b      	ldrb	r3, [r3, #0]
 8021570:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021572:	697b      	ldr	r3, [r7, #20]
 8021574:	3301      	adds	r3, #1
 8021576:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021578:	697b      	ldr	r3, [r7, #20]
 802157a:	781b      	ldrb	r3, [r3, #0]
 802157c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802157e:	8a3b      	ldrh	r3, [r7, #16]
 8021580:	021b      	lsls	r3, r3, #8
 8021582:	b21a      	sxth	r2, r3
 8021584:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021588:	4313      	orrs	r3, r2
 802158a:	b21b      	sxth	r3, r3
 802158c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802158e:	89fb      	ldrh	r3, [r7, #14]
}
 8021590:	4618      	mov	r0, r3
 8021592:	371c      	adds	r7, #28
 8021594:	46bd      	mov	sp, r7
 8021596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802159a:	4770      	bx	lr

0802159c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802159c:	b580      	push	{r7, lr}
 802159e:	b084      	sub	sp, #16
 80215a0:	af00      	add	r7, sp, #0
 80215a2:	6078      	str	r0, [r7, #4]
 80215a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80215a6:	2300      	movs	r3, #0
 80215a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80215aa:	683b      	ldr	r3, [r7, #0]
 80215ac:	781b      	ldrb	r3, [r3, #0]
 80215ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80215b2:	2b40      	cmp	r3, #64	; 0x40
 80215b4:	d005      	beq.n	80215c2 <USBD_StdDevReq+0x26>
 80215b6:	2b40      	cmp	r3, #64	; 0x40
 80215b8:	d853      	bhi.n	8021662 <USBD_StdDevReq+0xc6>
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d00b      	beq.n	80215d6 <USBD_StdDevReq+0x3a>
 80215be:	2b20      	cmp	r3, #32
 80215c0:	d14f      	bne.n	8021662 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80215c8:	689b      	ldr	r3, [r3, #8]
 80215ca:	6839      	ldr	r1, [r7, #0]
 80215cc:	6878      	ldr	r0, [r7, #4]
 80215ce:	4798      	blx	r3
 80215d0:	4603      	mov	r3, r0
 80215d2:	73fb      	strb	r3, [r7, #15]
      break;
 80215d4:	e04a      	b.n	802166c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80215d6:	683b      	ldr	r3, [r7, #0]
 80215d8:	785b      	ldrb	r3, [r3, #1]
 80215da:	2b09      	cmp	r3, #9
 80215dc:	d83b      	bhi.n	8021656 <USBD_StdDevReq+0xba>
 80215de:	a201      	add	r2, pc, #4	; (adr r2, 80215e4 <USBD_StdDevReq+0x48>)
 80215e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215e4:	08021639 	.word	0x08021639
 80215e8:	0802164d 	.word	0x0802164d
 80215ec:	08021657 	.word	0x08021657
 80215f0:	08021643 	.word	0x08021643
 80215f4:	08021657 	.word	0x08021657
 80215f8:	08021617 	.word	0x08021617
 80215fc:	0802160d 	.word	0x0802160d
 8021600:	08021657 	.word	0x08021657
 8021604:	0802162f 	.word	0x0802162f
 8021608:	08021621 	.word	0x08021621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802160c:	6839      	ldr	r1, [r7, #0]
 802160e:	6878      	ldr	r0, [r7, #4]
 8021610:	f000 f9de 	bl	80219d0 <USBD_GetDescriptor>
          break;
 8021614:	e024      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021616:	6839      	ldr	r1, [r7, #0]
 8021618:	6878      	ldr	r0, [r7, #4]
 802161a:	f000 fb6d 	bl	8021cf8 <USBD_SetAddress>
          break;
 802161e:	e01f      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8021620:	6839      	ldr	r1, [r7, #0]
 8021622:	6878      	ldr	r0, [r7, #4]
 8021624:	f000 fbac 	bl	8021d80 <USBD_SetConfig>
 8021628:	4603      	mov	r3, r0
 802162a:	73fb      	strb	r3, [r7, #15]
          break;
 802162c:	e018      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802162e:	6839      	ldr	r1, [r7, #0]
 8021630:	6878      	ldr	r0, [r7, #4]
 8021632:	f000 fc4b 	bl	8021ecc <USBD_GetConfig>
          break;
 8021636:	e013      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021638:	6839      	ldr	r1, [r7, #0]
 802163a:	6878      	ldr	r0, [r7, #4]
 802163c:	f000 fc7c 	bl	8021f38 <USBD_GetStatus>
          break;
 8021640:	e00e      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8021642:	6839      	ldr	r1, [r7, #0]
 8021644:	6878      	ldr	r0, [r7, #4]
 8021646:	f000 fcab 	bl	8021fa0 <USBD_SetFeature>
          break;
 802164a:	e009      	b.n	8021660 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802164c:	6839      	ldr	r1, [r7, #0]
 802164e:	6878      	ldr	r0, [r7, #4]
 8021650:	f000 fcba 	bl	8021fc8 <USBD_ClrFeature>
          break;
 8021654:	e004      	b.n	8021660 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8021656:	6839      	ldr	r1, [r7, #0]
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f000 fd11 	bl	8022080 <USBD_CtlError>
          break;
 802165e:	bf00      	nop
      }
      break;
 8021660:	e004      	b.n	802166c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8021662:	6839      	ldr	r1, [r7, #0]
 8021664:	6878      	ldr	r0, [r7, #4]
 8021666:	f000 fd0b 	bl	8022080 <USBD_CtlError>
      break;
 802166a:	bf00      	nop
  }

  return ret;
 802166c:	7bfb      	ldrb	r3, [r7, #15]
}
 802166e:	4618      	mov	r0, r3
 8021670:	3710      	adds	r7, #16
 8021672:	46bd      	mov	sp, r7
 8021674:	bd80      	pop	{r7, pc}
 8021676:	bf00      	nop

08021678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021678:	b580      	push	{r7, lr}
 802167a:	b084      	sub	sp, #16
 802167c:	af00      	add	r7, sp, #0
 802167e:	6078      	str	r0, [r7, #4]
 8021680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021682:	2300      	movs	r3, #0
 8021684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021686:	683b      	ldr	r3, [r7, #0]
 8021688:	781b      	ldrb	r3, [r3, #0]
 802168a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802168e:	2b40      	cmp	r3, #64	; 0x40
 8021690:	d005      	beq.n	802169e <USBD_StdItfReq+0x26>
 8021692:	2b40      	cmp	r3, #64	; 0x40
 8021694:	d82f      	bhi.n	80216f6 <USBD_StdItfReq+0x7e>
 8021696:	2b00      	cmp	r3, #0
 8021698:	d001      	beq.n	802169e <USBD_StdItfReq+0x26>
 802169a:	2b20      	cmp	r3, #32
 802169c:	d12b      	bne.n	80216f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80216a4:	b2db      	uxtb	r3, r3
 80216a6:	3b01      	subs	r3, #1
 80216a8:	2b02      	cmp	r3, #2
 80216aa:	d81d      	bhi.n	80216e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80216ac:	683b      	ldr	r3, [r7, #0]
 80216ae:	889b      	ldrh	r3, [r3, #4]
 80216b0:	b2db      	uxtb	r3, r3
 80216b2:	2b01      	cmp	r3, #1
 80216b4:	d813      	bhi.n	80216de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80216bc:	689b      	ldr	r3, [r3, #8]
 80216be:	6839      	ldr	r1, [r7, #0]
 80216c0:	6878      	ldr	r0, [r7, #4]
 80216c2:	4798      	blx	r3
 80216c4:	4603      	mov	r3, r0
 80216c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80216c8:	683b      	ldr	r3, [r7, #0]
 80216ca:	88db      	ldrh	r3, [r3, #6]
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d110      	bne.n	80216f2 <USBD_StdItfReq+0x7a>
 80216d0:	7bfb      	ldrb	r3, [r7, #15]
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d10d      	bne.n	80216f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80216d6:	6878      	ldr	r0, [r7, #4]
 80216d8:	f000 fd80 	bl	80221dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80216dc:	e009      	b.n	80216f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80216de:	6839      	ldr	r1, [r7, #0]
 80216e0:	6878      	ldr	r0, [r7, #4]
 80216e2:	f000 fccd 	bl	8022080 <USBD_CtlError>
          break;
 80216e6:	e004      	b.n	80216f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80216e8:	6839      	ldr	r1, [r7, #0]
 80216ea:	6878      	ldr	r0, [r7, #4]
 80216ec:	f000 fcc8 	bl	8022080 <USBD_CtlError>
          break;
 80216f0:	e000      	b.n	80216f4 <USBD_StdItfReq+0x7c>
          break;
 80216f2:	bf00      	nop
      }
      break;
 80216f4:	e004      	b.n	8021700 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80216f6:	6839      	ldr	r1, [r7, #0]
 80216f8:	6878      	ldr	r0, [r7, #4]
 80216fa:	f000 fcc1 	bl	8022080 <USBD_CtlError>
      break;
 80216fe:	bf00      	nop
  }

  return ret;
 8021700:	7bfb      	ldrb	r3, [r7, #15]
}
 8021702:	4618      	mov	r0, r3
 8021704:	3710      	adds	r7, #16
 8021706:	46bd      	mov	sp, r7
 8021708:	bd80      	pop	{r7, pc}

0802170a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802170a:	b580      	push	{r7, lr}
 802170c:	b084      	sub	sp, #16
 802170e:	af00      	add	r7, sp, #0
 8021710:	6078      	str	r0, [r7, #4]
 8021712:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021714:	2300      	movs	r3, #0
 8021716:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8021718:	683b      	ldr	r3, [r7, #0]
 802171a:	889b      	ldrh	r3, [r3, #4]
 802171c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802171e:	683b      	ldr	r3, [r7, #0]
 8021720:	781b      	ldrb	r3, [r3, #0]
 8021722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021726:	2b40      	cmp	r3, #64	; 0x40
 8021728:	d007      	beq.n	802173a <USBD_StdEPReq+0x30>
 802172a:	2b40      	cmp	r3, #64	; 0x40
 802172c:	f200 8145 	bhi.w	80219ba <USBD_StdEPReq+0x2b0>
 8021730:	2b00      	cmp	r3, #0
 8021732:	d00c      	beq.n	802174e <USBD_StdEPReq+0x44>
 8021734:	2b20      	cmp	r3, #32
 8021736:	f040 8140 	bne.w	80219ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021740:	689b      	ldr	r3, [r3, #8]
 8021742:	6839      	ldr	r1, [r7, #0]
 8021744:	6878      	ldr	r0, [r7, #4]
 8021746:	4798      	blx	r3
 8021748:	4603      	mov	r3, r0
 802174a:	73fb      	strb	r3, [r7, #15]
      break;
 802174c:	e13a      	b.n	80219c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802174e:	683b      	ldr	r3, [r7, #0]
 8021750:	785b      	ldrb	r3, [r3, #1]
 8021752:	2b03      	cmp	r3, #3
 8021754:	d007      	beq.n	8021766 <USBD_StdEPReq+0x5c>
 8021756:	2b03      	cmp	r3, #3
 8021758:	f300 8129 	bgt.w	80219ae <USBD_StdEPReq+0x2a4>
 802175c:	2b00      	cmp	r3, #0
 802175e:	d07f      	beq.n	8021860 <USBD_StdEPReq+0x156>
 8021760:	2b01      	cmp	r3, #1
 8021762:	d03c      	beq.n	80217de <USBD_StdEPReq+0xd4>
 8021764:	e123      	b.n	80219ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802176c:	b2db      	uxtb	r3, r3
 802176e:	2b02      	cmp	r3, #2
 8021770:	d002      	beq.n	8021778 <USBD_StdEPReq+0x6e>
 8021772:	2b03      	cmp	r3, #3
 8021774:	d016      	beq.n	80217a4 <USBD_StdEPReq+0x9a>
 8021776:	e02c      	b.n	80217d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021778:	7bbb      	ldrb	r3, [r7, #14]
 802177a:	2b00      	cmp	r3, #0
 802177c:	d00d      	beq.n	802179a <USBD_StdEPReq+0x90>
 802177e:	7bbb      	ldrb	r3, [r7, #14]
 8021780:	2b80      	cmp	r3, #128	; 0x80
 8021782:	d00a      	beq.n	802179a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021784:	7bbb      	ldrb	r3, [r7, #14]
 8021786:	4619      	mov	r1, r3
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f001 f940 	bl	8022a0e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802178e:	2180      	movs	r1, #128	; 0x80
 8021790:	6878      	ldr	r0, [r7, #4]
 8021792:	f001 f93c 	bl	8022a0e <USBD_LL_StallEP>
 8021796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021798:	e020      	b.n	80217dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 802179a:	6839      	ldr	r1, [r7, #0]
 802179c:	6878      	ldr	r0, [r7, #4]
 802179e:	f000 fc6f 	bl	8022080 <USBD_CtlError>
              break;
 80217a2:	e01b      	b.n	80217dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80217a4:	683b      	ldr	r3, [r7, #0]
 80217a6:	885b      	ldrh	r3, [r3, #2]
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	d10e      	bne.n	80217ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80217ac:	7bbb      	ldrb	r3, [r7, #14]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	d00b      	beq.n	80217ca <USBD_StdEPReq+0xc0>
 80217b2:	7bbb      	ldrb	r3, [r7, #14]
 80217b4:	2b80      	cmp	r3, #128	; 0x80
 80217b6:	d008      	beq.n	80217ca <USBD_StdEPReq+0xc0>
 80217b8:	683b      	ldr	r3, [r7, #0]
 80217ba:	88db      	ldrh	r3, [r3, #6]
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d104      	bne.n	80217ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80217c0:	7bbb      	ldrb	r3, [r7, #14]
 80217c2:	4619      	mov	r1, r3
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f001 f922 	bl	8022a0e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80217ca:	6878      	ldr	r0, [r7, #4]
 80217cc:	f000 fd06 	bl	80221dc <USBD_CtlSendStatus>

              break;
 80217d0:	e004      	b.n	80217dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80217d2:	6839      	ldr	r1, [r7, #0]
 80217d4:	6878      	ldr	r0, [r7, #4]
 80217d6:	f000 fc53 	bl	8022080 <USBD_CtlError>
              break;
 80217da:	bf00      	nop
          }
          break;
 80217dc:	e0ec      	b.n	80219b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80217e4:	b2db      	uxtb	r3, r3
 80217e6:	2b02      	cmp	r3, #2
 80217e8:	d002      	beq.n	80217f0 <USBD_StdEPReq+0xe6>
 80217ea:	2b03      	cmp	r3, #3
 80217ec:	d016      	beq.n	802181c <USBD_StdEPReq+0x112>
 80217ee:	e030      	b.n	8021852 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80217f0:	7bbb      	ldrb	r3, [r7, #14]
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d00d      	beq.n	8021812 <USBD_StdEPReq+0x108>
 80217f6:	7bbb      	ldrb	r3, [r7, #14]
 80217f8:	2b80      	cmp	r3, #128	; 0x80
 80217fa:	d00a      	beq.n	8021812 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80217fc:	7bbb      	ldrb	r3, [r7, #14]
 80217fe:	4619      	mov	r1, r3
 8021800:	6878      	ldr	r0, [r7, #4]
 8021802:	f001 f904 	bl	8022a0e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021806:	2180      	movs	r1, #128	; 0x80
 8021808:	6878      	ldr	r0, [r7, #4]
 802180a:	f001 f900 	bl	8022a0e <USBD_LL_StallEP>
 802180e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021810:	e025      	b.n	802185e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8021812:	6839      	ldr	r1, [r7, #0]
 8021814:	6878      	ldr	r0, [r7, #4]
 8021816:	f000 fc33 	bl	8022080 <USBD_CtlError>
              break;
 802181a:	e020      	b.n	802185e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802181c:	683b      	ldr	r3, [r7, #0]
 802181e:	885b      	ldrh	r3, [r3, #2]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d11b      	bne.n	802185c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021824:	7bbb      	ldrb	r3, [r7, #14]
 8021826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802182a:	2b00      	cmp	r3, #0
 802182c:	d004      	beq.n	8021838 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802182e:	7bbb      	ldrb	r3, [r7, #14]
 8021830:	4619      	mov	r1, r3
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	f001 f90a 	bl	8022a4c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021838:	6878      	ldr	r0, [r7, #4]
 802183a:	f000 fccf 	bl	80221dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021844:	689b      	ldr	r3, [r3, #8]
 8021846:	6839      	ldr	r1, [r7, #0]
 8021848:	6878      	ldr	r0, [r7, #4]
 802184a:	4798      	blx	r3
 802184c:	4603      	mov	r3, r0
 802184e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8021850:	e004      	b.n	802185c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8021852:	6839      	ldr	r1, [r7, #0]
 8021854:	6878      	ldr	r0, [r7, #4]
 8021856:	f000 fc13 	bl	8022080 <USBD_CtlError>
              break;
 802185a:	e000      	b.n	802185e <USBD_StdEPReq+0x154>
              break;
 802185c:	bf00      	nop
          }
          break;
 802185e:	e0ab      	b.n	80219b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021866:	b2db      	uxtb	r3, r3
 8021868:	2b02      	cmp	r3, #2
 802186a:	d002      	beq.n	8021872 <USBD_StdEPReq+0x168>
 802186c:	2b03      	cmp	r3, #3
 802186e:	d032      	beq.n	80218d6 <USBD_StdEPReq+0x1cc>
 8021870:	e097      	b.n	80219a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021872:	7bbb      	ldrb	r3, [r7, #14]
 8021874:	2b00      	cmp	r3, #0
 8021876:	d007      	beq.n	8021888 <USBD_StdEPReq+0x17e>
 8021878:	7bbb      	ldrb	r3, [r7, #14]
 802187a:	2b80      	cmp	r3, #128	; 0x80
 802187c:	d004      	beq.n	8021888 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 802187e:	6839      	ldr	r1, [r7, #0]
 8021880:	6878      	ldr	r0, [r7, #4]
 8021882:	f000 fbfd 	bl	8022080 <USBD_CtlError>
                break;
 8021886:	e091      	b.n	80219ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802188c:	2b00      	cmp	r3, #0
 802188e:	da0b      	bge.n	80218a8 <USBD_StdEPReq+0x19e>
 8021890:	7bbb      	ldrb	r3, [r7, #14]
 8021892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021896:	4613      	mov	r3, r2
 8021898:	009b      	lsls	r3, r3, #2
 802189a:	4413      	add	r3, r2
 802189c:	009b      	lsls	r3, r3, #2
 802189e:	3310      	adds	r3, #16
 80218a0:	687a      	ldr	r2, [r7, #4]
 80218a2:	4413      	add	r3, r2
 80218a4:	3304      	adds	r3, #4
 80218a6:	e00b      	b.n	80218c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80218a8:	7bbb      	ldrb	r3, [r7, #14]
 80218aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80218ae:	4613      	mov	r3, r2
 80218b0:	009b      	lsls	r3, r3, #2
 80218b2:	4413      	add	r3, r2
 80218b4:	009b      	lsls	r3, r3, #2
 80218b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80218ba:	687a      	ldr	r2, [r7, #4]
 80218bc:	4413      	add	r3, r2
 80218be:	3304      	adds	r3, #4
 80218c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80218c2:	68bb      	ldr	r3, [r7, #8]
 80218c4:	2200      	movs	r2, #0
 80218c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80218c8:	68bb      	ldr	r3, [r7, #8]
 80218ca:	2202      	movs	r2, #2
 80218cc:	4619      	mov	r1, r3
 80218ce:	6878      	ldr	r0, [r7, #4]
 80218d0:	f000 fc47 	bl	8022162 <USBD_CtlSendData>
              break;
 80218d4:	e06a      	b.n	80219ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80218d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80218da:	2b00      	cmp	r3, #0
 80218dc:	da11      	bge.n	8021902 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80218de:	7bbb      	ldrb	r3, [r7, #14]
 80218e0:	f003 020f 	and.w	r2, r3, #15
 80218e4:	6879      	ldr	r1, [r7, #4]
 80218e6:	4613      	mov	r3, r2
 80218e8:	009b      	lsls	r3, r3, #2
 80218ea:	4413      	add	r3, r2
 80218ec:	009b      	lsls	r3, r3, #2
 80218ee:	440b      	add	r3, r1
 80218f0:	3324      	adds	r3, #36	; 0x24
 80218f2:	881b      	ldrh	r3, [r3, #0]
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d117      	bne.n	8021928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80218f8:	6839      	ldr	r1, [r7, #0]
 80218fa:	6878      	ldr	r0, [r7, #4]
 80218fc:	f000 fbc0 	bl	8022080 <USBD_CtlError>
                  break;
 8021900:	e054      	b.n	80219ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021902:	7bbb      	ldrb	r3, [r7, #14]
 8021904:	f003 020f 	and.w	r2, r3, #15
 8021908:	6879      	ldr	r1, [r7, #4]
 802190a:	4613      	mov	r3, r2
 802190c:	009b      	lsls	r3, r3, #2
 802190e:	4413      	add	r3, r2
 8021910:	009b      	lsls	r3, r3, #2
 8021912:	440b      	add	r3, r1
 8021914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8021918:	881b      	ldrh	r3, [r3, #0]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d104      	bne.n	8021928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 802191e:	6839      	ldr	r1, [r7, #0]
 8021920:	6878      	ldr	r0, [r7, #4]
 8021922:	f000 fbad 	bl	8022080 <USBD_CtlError>
                  break;
 8021926:	e041      	b.n	80219ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802192c:	2b00      	cmp	r3, #0
 802192e:	da0b      	bge.n	8021948 <USBD_StdEPReq+0x23e>
 8021930:	7bbb      	ldrb	r3, [r7, #14]
 8021932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021936:	4613      	mov	r3, r2
 8021938:	009b      	lsls	r3, r3, #2
 802193a:	4413      	add	r3, r2
 802193c:	009b      	lsls	r3, r3, #2
 802193e:	3310      	adds	r3, #16
 8021940:	687a      	ldr	r2, [r7, #4]
 8021942:	4413      	add	r3, r2
 8021944:	3304      	adds	r3, #4
 8021946:	e00b      	b.n	8021960 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021948:	7bbb      	ldrb	r3, [r7, #14]
 802194a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802194e:	4613      	mov	r3, r2
 8021950:	009b      	lsls	r3, r3, #2
 8021952:	4413      	add	r3, r2
 8021954:	009b      	lsls	r3, r3, #2
 8021956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802195a:	687a      	ldr	r2, [r7, #4]
 802195c:	4413      	add	r3, r2
 802195e:	3304      	adds	r3, #4
 8021960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021962:	7bbb      	ldrb	r3, [r7, #14]
 8021964:	2b00      	cmp	r3, #0
 8021966:	d002      	beq.n	802196e <USBD_StdEPReq+0x264>
 8021968:	7bbb      	ldrb	r3, [r7, #14]
 802196a:	2b80      	cmp	r3, #128	; 0x80
 802196c:	d103      	bne.n	8021976 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 802196e:	68bb      	ldr	r3, [r7, #8]
 8021970:	2200      	movs	r2, #0
 8021972:	601a      	str	r2, [r3, #0]
 8021974:	e00e      	b.n	8021994 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8021976:	7bbb      	ldrb	r3, [r7, #14]
 8021978:	4619      	mov	r1, r3
 802197a:	6878      	ldr	r0, [r7, #4]
 802197c:	f001 f885 	bl	8022a8a <USBD_LL_IsStallEP>
 8021980:	4603      	mov	r3, r0
 8021982:	2b00      	cmp	r3, #0
 8021984:	d003      	beq.n	802198e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8021986:	68bb      	ldr	r3, [r7, #8]
 8021988:	2201      	movs	r2, #1
 802198a:	601a      	str	r2, [r3, #0]
 802198c:	e002      	b.n	8021994 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 802198e:	68bb      	ldr	r3, [r7, #8]
 8021990:	2200      	movs	r2, #0
 8021992:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021994:	68bb      	ldr	r3, [r7, #8]
 8021996:	2202      	movs	r2, #2
 8021998:	4619      	mov	r1, r3
 802199a:	6878      	ldr	r0, [r7, #4]
 802199c:	f000 fbe1 	bl	8022162 <USBD_CtlSendData>
              break;
 80219a0:	e004      	b.n	80219ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80219a2:	6839      	ldr	r1, [r7, #0]
 80219a4:	6878      	ldr	r0, [r7, #4]
 80219a6:	f000 fb6b 	bl	8022080 <USBD_CtlError>
              break;
 80219aa:	bf00      	nop
          }
          break;
 80219ac:	e004      	b.n	80219b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80219ae:	6839      	ldr	r1, [r7, #0]
 80219b0:	6878      	ldr	r0, [r7, #4]
 80219b2:	f000 fb65 	bl	8022080 <USBD_CtlError>
          break;
 80219b6:	bf00      	nop
      }
      break;
 80219b8:	e004      	b.n	80219c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80219ba:	6839      	ldr	r1, [r7, #0]
 80219bc:	6878      	ldr	r0, [r7, #4]
 80219be:	f000 fb5f 	bl	8022080 <USBD_CtlError>
      break;
 80219c2:	bf00      	nop
  }

  return ret;
 80219c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	3710      	adds	r7, #16
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd80      	pop	{r7, pc}
	...

080219d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80219d0:	b580      	push	{r7, lr}
 80219d2:	b084      	sub	sp, #16
 80219d4:	af00      	add	r7, sp, #0
 80219d6:	6078      	str	r0, [r7, #4]
 80219d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80219da:	2300      	movs	r3, #0
 80219dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80219de:	2300      	movs	r3, #0
 80219e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80219e2:	2300      	movs	r3, #0
 80219e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80219e6:	683b      	ldr	r3, [r7, #0]
 80219e8:	885b      	ldrh	r3, [r3, #2]
 80219ea:	0a1b      	lsrs	r3, r3, #8
 80219ec:	b29b      	uxth	r3, r3
 80219ee:	3b01      	subs	r3, #1
 80219f0:	2b0e      	cmp	r3, #14
 80219f2:	f200 8152 	bhi.w	8021c9a <USBD_GetDescriptor+0x2ca>
 80219f6:	a201      	add	r2, pc, #4	; (adr r2, 80219fc <USBD_GetDescriptor+0x2c>)
 80219f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80219fc:	08021a6d 	.word	0x08021a6d
 8021a00:	08021a85 	.word	0x08021a85
 8021a04:	08021ac5 	.word	0x08021ac5
 8021a08:	08021c9b 	.word	0x08021c9b
 8021a0c:	08021c9b 	.word	0x08021c9b
 8021a10:	08021c3b 	.word	0x08021c3b
 8021a14:	08021c67 	.word	0x08021c67
 8021a18:	08021c9b 	.word	0x08021c9b
 8021a1c:	08021c9b 	.word	0x08021c9b
 8021a20:	08021c9b 	.word	0x08021c9b
 8021a24:	08021c9b 	.word	0x08021c9b
 8021a28:	08021c9b 	.word	0x08021c9b
 8021a2c:	08021c9b 	.word	0x08021c9b
 8021a30:	08021c9b 	.word	0x08021c9b
 8021a34:	08021a39 	.word	0x08021a39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a3e:	69db      	ldr	r3, [r3, #28]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d00b      	beq.n	8021a5c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a4a:	69db      	ldr	r3, [r3, #28]
 8021a4c:	687a      	ldr	r2, [r7, #4]
 8021a4e:	7c12      	ldrb	r2, [r2, #16]
 8021a50:	f107 0108 	add.w	r1, r7, #8
 8021a54:	4610      	mov	r0, r2
 8021a56:	4798      	blx	r3
 8021a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021a5a:	e126      	b.n	8021caa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021a5c:	6839      	ldr	r1, [r7, #0]
 8021a5e:	6878      	ldr	r0, [r7, #4]
 8021a60:	f000 fb0e 	bl	8022080 <USBD_CtlError>
        err++;
 8021a64:	7afb      	ldrb	r3, [r7, #11]
 8021a66:	3301      	adds	r3, #1
 8021a68:	72fb      	strb	r3, [r7, #11]
      break;
 8021a6a:	e11e      	b.n	8021caa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	687a      	ldr	r2, [r7, #4]
 8021a76:	7c12      	ldrb	r2, [r2, #16]
 8021a78:	f107 0108 	add.w	r1, r7, #8
 8021a7c:	4610      	mov	r0, r2
 8021a7e:	4798      	blx	r3
 8021a80:	60f8      	str	r0, [r7, #12]
      break;
 8021a82:	e112      	b.n	8021caa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	7c1b      	ldrb	r3, [r3, #16]
 8021a88:	2b00      	cmp	r3, #0
 8021a8a:	d10d      	bne.n	8021aa8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021a8c:	687b      	ldr	r3, [r7, #4]
 8021a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a94:	f107 0208 	add.w	r2, r7, #8
 8021a98:	4610      	mov	r0, r2
 8021a9a:	4798      	blx	r3
 8021a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021a9e:	68fb      	ldr	r3, [r7, #12]
 8021aa0:	3301      	adds	r3, #1
 8021aa2:	2202      	movs	r2, #2
 8021aa4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021aa6:	e100      	b.n	8021caa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ab0:	f107 0208 	add.w	r2, r7, #8
 8021ab4:	4610      	mov	r0, r2
 8021ab6:	4798      	blx	r3
 8021ab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	3301      	adds	r3, #1
 8021abe:	2202      	movs	r2, #2
 8021ac0:	701a      	strb	r2, [r3, #0]
      break;
 8021ac2:	e0f2      	b.n	8021caa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021ac4:	683b      	ldr	r3, [r7, #0]
 8021ac6:	885b      	ldrh	r3, [r3, #2]
 8021ac8:	b2db      	uxtb	r3, r3
 8021aca:	2b05      	cmp	r3, #5
 8021acc:	f200 80ac 	bhi.w	8021c28 <USBD_GetDescriptor+0x258>
 8021ad0:	a201      	add	r2, pc, #4	; (adr r2, 8021ad8 <USBD_GetDescriptor+0x108>)
 8021ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ad6:	bf00      	nop
 8021ad8:	08021af1 	.word	0x08021af1
 8021adc:	08021b25 	.word	0x08021b25
 8021ae0:	08021b59 	.word	0x08021b59
 8021ae4:	08021b8d 	.word	0x08021b8d
 8021ae8:	08021bc1 	.word	0x08021bc1
 8021aec:	08021bf5 	.word	0x08021bf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021af6:	685b      	ldr	r3, [r3, #4]
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	d00b      	beq.n	8021b14 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b02:	685b      	ldr	r3, [r3, #4]
 8021b04:	687a      	ldr	r2, [r7, #4]
 8021b06:	7c12      	ldrb	r2, [r2, #16]
 8021b08:	f107 0108 	add.w	r1, r7, #8
 8021b0c:	4610      	mov	r0, r2
 8021b0e:	4798      	blx	r3
 8021b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b12:	e091      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b14:	6839      	ldr	r1, [r7, #0]
 8021b16:	6878      	ldr	r0, [r7, #4]
 8021b18:	f000 fab2 	bl	8022080 <USBD_CtlError>
            err++;
 8021b1c:	7afb      	ldrb	r3, [r7, #11]
 8021b1e:	3301      	adds	r3, #1
 8021b20:	72fb      	strb	r3, [r7, #11]
          break;
 8021b22:	e089      	b.n	8021c38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b2a:	689b      	ldr	r3, [r3, #8]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d00b      	beq.n	8021b48 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b36:	689b      	ldr	r3, [r3, #8]
 8021b38:	687a      	ldr	r2, [r7, #4]
 8021b3a:	7c12      	ldrb	r2, [r2, #16]
 8021b3c:	f107 0108 	add.w	r1, r7, #8
 8021b40:	4610      	mov	r0, r2
 8021b42:	4798      	blx	r3
 8021b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b46:	e077      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b48:	6839      	ldr	r1, [r7, #0]
 8021b4a:	6878      	ldr	r0, [r7, #4]
 8021b4c:	f000 fa98 	bl	8022080 <USBD_CtlError>
            err++;
 8021b50:	7afb      	ldrb	r3, [r7, #11]
 8021b52:	3301      	adds	r3, #1
 8021b54:	72fb      	strb	r3, [r7, #11]
          break;
 8021b56:	e06f      	b.n	8021c38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b5e:	68db      	ldr	r3, [r3, #12]
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	d00b      	beq.n	8021b7c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b6a:	68db      	ldr	r3, [r3, #12]
 8021b6c:	687a      	ldr	r2, [r7, #4]
 8021b6e:	7c12      	ldrb	r2, [r2, #16]
 8021b70:	f107 0108 	add.w	r1, r7, #8
 8021b74:	4610      	mov	r0, r2
 8021b76:	4798      	blx	r3
 8021b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021b7a:	e05d      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021b7c:	6839      	ldr	r1, [r7, #0]
 8021b7e:	6878      	ldr	r0, [r7, #4]
 8021b80:	f000 fa7e 	bl	8022080 <USBD_CtlError>
            err++;
 8021b84:	7afb      	ldrb	r3, [r7, #11]
 8021b86:	3301      	adds	r3, #1
 8021b88:	72fb      	strb	r3, [r7, #11]
          break;
 8021b8a:	e055      	b.n	8021c38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b92:	691b      	ldr	r3, [r3, #16]
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	d00b      	beq.n	8021bb0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021b9e:	691b      	ldr	r3, [r3, #16]
 8021ba0:	687a      	ldr	r2, [r7, #4]
 8021ba2:	7c12      	ldrb	r2, [r2, #16]
 8021ba4:	f107 0108 	add.w	r1, r7, #8
 8021ba8:	4610      	mov	r0, r2
 8021baa:	4798      	blx	r3
 8021bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021bae:	e043      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021bb0:	6839      	ldr	r1, [r7, #0]
 8021bb2:	6878      	ldr	r0, [r7, #4]
 8021bb4:	f000 fa64 	bl	8022080 <USBD_CtlError>
            err++;
 8021bb8:	7afb      	ldrb	r3, [r7, #11]
 8021bba:	3301      	adds	r3, #1
 8021bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8021bbe:	e03b      	b.n	8021c38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bc6:	695b      	ldr	r3, [r3, #20]
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d00b      	beq.n	8021be4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bd2:	695b      	ldr	r3, [r3, #20]
 8021bd4:	687a      	ldr	r2, [r7, #4]
 8021bd6:	7c12      	ldrb	r2, [r2, #16]
 8021bd8:	f107 0108 	add.w	r1, r7, #8
 8021bdc:	4610      	mov	r0, r2
 8021bde:	4798      	blx	r3
 8021be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021be2:	e029      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021be4:	6839      	ldr	r1, [r7, #0]
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	f000 fa4a 	bl	8022080 <USBD_CtlError>
            err++;
 8021bec:	7afb      	ldrb	r3, [r7, #11]
 8021bee:	3301      	adds	r3, #1
 8021bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8021bf2:	e021      	b.n	8021c38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021bfa:	699b      	ldr	r3, [r3, #24]
 8021bfc:	2b00      	cmp	r3, #0
 8021bfe:	d00b      	beq.n	8021c18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021c06:	699b      	ldr	r3, [r3, #24]
 8021c08:	687a      	ldr	r2, [r7, #4]
 8021c0a:	7c12      	ldrb	r2, [r2, #16]
 8021c0c:	f107 0108 	add.w	r1, r7, #8
 8021c10:	4610      	mov	r0, r2
 8021c12:	4798      	blx	r3
 8021c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021c16:	e00f      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021c18:	6839      	ldr	r1, [r7, #0]
 8021c1a:	6878      	ldr	r0, [r7, #4]
 8021c1c:	f000 fa30 	bl	8022080 <USBD_CtlError>
            err++;
 8021c20:	7afb      	ldrb	r3, [r7, #11]
 8021c22:	3301      	adds	r3, #1
 8021c24:	72fb      	strb	r3, [r7, #11]
          break;
 8021c26:	e007      	b.n	8021c38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8021c28:	6839      	ldr	r1, [r7, #0]
 8021c2a:	6878      	ldr	r0, [r7, #4]
 8021c2c:	f000 fa28 	bl	8022080 <USBD_CtlError>
          err++;
 8021c30:	7afb      	ldrb	r3, [r7, #11]
 8021c32:	3301      	adds	r3, #1
 8021c34:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8021c36:	bf00      	nop
      }
      break;
 8021c38:	e037      	b.n	8021caa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	7c1b      	ldrb	r3, [r3, #16]
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d109      	bne.n	8021c56 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021c4a:	f107 0208 	add.w	r2, r7, #8
 8021c4e:	4610      	mov	r0, r2
 8021c50:	4798      	blx	r3
 8021c52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021c54:	e029      	b.n	8021caa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021c56:	6839      	ldr	r1, [r7, #0]
 8021c58:	6878      	ldr	r0, [r7, #4]
 8021c5a:	f000 fa11 	bl	8022080 <USBD_CtlError>
        err++;
 8021c5e:	7afb      	ldrb	r3, [r7, #11]
 8021c60:	3301      	adds	r3, #1
 8021c62:	72fb      	strb	r3, [r7, #11]
      break;
 8021c64:	e021      	b.n	8021caa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	7c1b      	ldrb	r3, [r3, #16]
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d10d      	bne.n	8021c8a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c76:	f107 0208 	add.w	r2, r7, #8
 8021c7a:	4610      	mov	r0, r2
 8021c7c:	4798      	blx	r3
 8021c7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021c80:	68fb      	ldr	r3, [r7, #12]
 8021c82:	3301      	adds	r3, #1
 8021c84:	2207      	movs	r2, #7
 8021c86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8021c88:	e00f      	b.n	8021caa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8021c8a:	6839      	ldr	r1, [r7, #0]
 8021c8c:	6878      	ldr	r0, [r7, #4]
 8021c8e:	f000 f9f7 	bl	8022080 <USBD_CtlError>
        err++;
 8021c92:	7afb      	ldrb	r3, [r7, #11]
 8021c94:	3301      	adds	r3, #1
 8021c96:	72fb      	strb	r3, [r7, #11]
      break;
 8021c98:	e007      	b.n	8021caa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8021c9a:	6839      	ldr	r1, [r7, #0]
 8021c9c:	6878      	ldr	r0, [r7, #4]
 8021c9e:	f000 f9ef 	bl	8022080 <USBD_CtlError>
      err++;
 8021ca2:	7afb      	ldrb	r3, [r7, #11]
 8021ca4:	3301      	adds	r3, #1
 8021ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8021ca8:	bf00      	nop
  }

  if (err != 0U)
 8021caa:	7afb      	ldrb	r3, [r7, #11]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d11e      	bne.n	8021cee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021cb0:	683b      	ldr	r3, [r7, #0]
 8021cb2:	88db      	ldrh	r3, [r3, #6]
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	d016      	beq.n	8021ce6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8021cb8:	893b      	ldrh	r3, [r7, #8]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d00e      	beq.n	8021cdc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021cbe:	683b      	ldr	r3, [r7, #0]
 8021cc0:	88da      	ldrh	r2, [r3, #6]
 8021cc2:	893b      	ldrh	r3, [r7, #8]
 8021cc4:	4293      	cmp	r3, r2
 8021cc6:	bf28      	it	cs
 8021cc8:	4613      	movcs	r3, r2
 8021cca:	b29b      	uxth	r3, r3
 8021ccc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021cce:	893b      	ldrh	r3, [r7, #8]
 8021cd0:	461a      	mov	r2, r3
 8021cd2:	68f9      	ldr	r1, [r7, #12]
 8021cd4:	6878      	ldr	r0, [r7, #4]
 8021cd6:	f000 fa44 	bl	8022162 <USBD_CtlSendData>
 8021cda:	e009      	b.n	8021cf0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021cdc:	6839      	ldr	r1, [r7, #0]
 8021cde:	6878      	ldr	r0, [r7, #4]
 8021ce0:	f000 f9ce 	bl	8022080 <USBD_CtlError>
 8021ce4:	e004      	b.n	8021cf0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8021ce6:	6878      	ldr	r0, [r7, #4]
 8021ce8:	f000 fa78 	bl	80221dc <USBD_CtlSendStatus>
 8021cec:	e000      	b.n	8021cf0 <USBD_GetDescriptor+0x320>
    return;
 8021cee:	bf00      	nop
  }
}
 8021cf0:	3710      	adds	r7, #16
 8021cf2:	46bd      	mov	sp, r7
 8021cf4:	bd80      	pop	{r7, pc}
 8021cf6:	bf00      	nop

08021cf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021cf8:	b580      	push	{r7, lr}
 8021cfa:	b084      	sub	sp, #16
 8021cfc:	af00      	add	r7, sp, #0
 8021cfe:	6078      	str	r0, [r7, #4]
 8021d00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021d02:	683b      	ldr	r3, [r7, #0]
 8021d04:	889b      	ldrh	r3, [r3, #4]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d131      	bne.n	8021d6e <USBD_SetAddress+0x76>
 8021d0a:	683b      	ldr	r3, [r7, #0]
 8021d0c:	88db      	ldrh	r3, [r3, #6]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d12d      	bne.n	8021d6e <USBD_SetAddress+0x76>
 8021d12:	683b      	ldr	r3, [r7, #0]
 8021d14:	885b      	ldrh	r3, [r3, #2]
 8021d16:	2b7f      	cmp	r3, #127	; 0x7f
 8021d18:	d829      	bhi.n	8021d6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021d1a:	683b      	ldr	r3, [r7, #0]
 8021d1c:	885b      	ldrh	r3, [r3, #2]
 8021d1e:	b2db      	uxtb	r3, r3
 8021d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021d24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021d2c:	b2db      	uxtb	r3, r3
 8021d2e:	2b03      	cmp	r3, #3
 8021d30:	d104      	bne.n	8021d3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8021d32:	6839      	ldr	r1, [r7, #0]
 8021d34:	6878      	ldr	r0, [r7, #4]
 8021d36:	f000 f9a3 	bl	8022080 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d3a:	e01d      	b.n	8021d78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	7bfa      	ldrb	r2, [r7, #15]
 8021d40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021d44:	7bfb      	ldrb	r3, [r7, #15]
 8021d46:	4619      	mov	r1, r3
 8021d48:	6878      	ldr	r0, [r7, #4]
 8021d4a:	f000 feca 	bl	8022ae2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8021d4e:	6878      	ldr	r0, [r7, #4]
 8021d50:	f000 fa44 	bl	80221dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021d54:	7bfb      	ldrb	r3, [r7, #15]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d004      	beq.n	8021d64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	2202      	movs	r2, #2
 8021d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d62:	e009      	b.n	8021d78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	2201      	movs	r2, #1
 8021d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021d6c:	e004      	b.n	8021d78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021d6e:	6839      	ldr	r1, [r7, #0]
 8021d70:	6878      	ldr	r0, [r7, #4]
 8021d72:	f000 f985 	bl	8022080 <USBD_CtlError>
  }
}
 8021d76:	bf00      	nop
 8021d78:	bf00      	nop
 8021d7a:	3710      	adds	r7, #16
 8021d7c:	46bd      	mov	sp, r7
 8021d7e:	bd80      	pop	{r7, pc}

08021d80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021d80:	b580      	push	{r7, lr}
 8021d82:	b084      	sub	sp, #16
 8021d84:	af00      	add	r7, sp, #0
 8021d86:	6078      	str	r0, [r7, #4]
 8021d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021d8a:	2300      	movs	r3, #0
 8021d8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021d8e:	683b      	ldr	r3, [r7, #0]
 8021d90:	885b      	ldrh	r3, [r3, #2]
 8021d92:	b2da      	uxtb	r2, r3
 8021d94:	4b4c      	ldr	r3, [pc, #304]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021d96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021d98:	4b4b      	ldr	r3, [pc, #300]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021d9a:	781b      	ldrb	r3, [r3, #0]
 8021d9c:	2b01      	cmp	r3, #1
 8021d9e:	d905      	bls.n	8021dac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021da0:	6839      	ldr	r1, [r7, #0]
 8021da2:	6878      	ldr	r0, [r7, #4]
 8021da4:	f000 f96c 	bl	8022080 <USBD_CtlError>
    return USBD_FAIL;
 8021da8:	2303      	movs	r3, #3
 8021daa:	e088      	b.n	8021ebe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021db2:	b2db      	uxtb	r3, r3
 8021db4:	2b02      	cmp	r3, #2
 8021db6:	d002      	beq.n	8021dbe <USBD_SetConfig+0x3e>
 8021db8:	2b03      	cmp	r3, #3
 8021dba:	d025      	beq.n	8021e08 <USBD_SetConfig+0x88>
 8021dbc:	e071      	b.n	8021ea2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021dbe:	4b42      	ldr	r3, [pc, #264]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021dc0:	781b      	ldrb	r3, [r3, #0]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d01c      	beq.n	8021e00 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8021dc6:	4b40      	ldr	r3, [pc, #256]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021dc8:	781b      	ldrb	r3, [r3, #0]
 8021dca:	461a      	mov	r2, r3
 8021dcc:	687b      	ldr	r3, [r7, #4]
 8021dce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021dd0:	4b3d      	ldr	r3, [pc, #244]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021dd2:	781b      	ldrb	r3, [r3, #0]
 8021dd4:	4619      	mov	r1, r3
 8021dd6:	6878      	ldr	r0, [r7, #4]
 8021dd8:	f7ff f91f 	bl	802101a <USBD_SetClassConfig>
 8021ddc:	4603      	mov	r3, r0
 8021dde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021de0:	7bfb      	ldrb	r3, [r7, #15]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d004      	beq.n	8021df0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8021de6:	6839      	ldr	r1, [r7, #0]
 8021de8:	6878      	ldr	r0, [r7, #4]
 8021dea:	f000 f949 	bl	8022080 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021dee:	e065      	b.n	8021ebc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021df0:	6878      	ldr	r0, [r7, #4]
 8021df2:	f000 f9f3 	bl	80221dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	2203      	movs	r2, #3
 8021dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021dfe:	e05d      	b.n	8021ebc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021e00:	6878      	ldr	r0, [r7, #4]
 8021e02:	f000 f9eb 	bl	80221dc <USBD_CtlSendStatus>
      break;
 8021e06:	e059      	b.n	8021ebc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021e08:	4b2f      	ldr	r3, [pc, #188]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e0a:	781b      	ldrb	r3, [r3, #0]
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d112      	bne.n	8021e36 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021e10:	687b      	ldr	r3, [r7, #4]
 8021e12:	2202      	movs	r2, #2
 8021e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021e18:	4b2b      	ldr	r3, [pc, #172]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e1a:	781b      	ldrb	r3, [r3, #0]
 8021e1c:	461a      	mov	r2, r3
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021e22:	4b29      	ldr	r3, [pc, #164]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e24:	781b      	ldrb	r3, [r3, #0]
 8021e26:	4619      	mov	r1, r3
 8021e28:	6878      	ldr	r0, [r7, #4]
 8021e2a:	f7ff f912 	bl	8021052 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8021e2e:	6878      	ldr	r0, [r7, #4]
 8021e30:	f000 f9d4 	bl	80221dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8021e34:	e042      	b.n	8021ebc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8021e36:	4b24      	ldr	r3, [pc, #144]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e38:	781b      	ldrb	r3, [r3, #0]
 8021e3a:	461a      	mov	r2, r3
 8021e3c:	687b      	ldr	r3, [r7, #4]
 8021e3e:	685b      	ldr	r3, [r3, #4]
 8021e40:	429a      	cmp	r2, r3
 8021e42:	d02a      	beq.n	8021e9a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	685b      	ldr	r3, [r3, #4]
 8021e48:	b2db      	uxtb	r3, r3
 8021e4a:	4619      	mov	r1, r3
 8021e4c:	6878      	ldr	r0, [r7, #4]
 8021e4e:	f7ff f900 	bl	8021052 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8021e52:	4b1d      	ldr	r3, [pc, #116]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e54:	781b      	ldrb	r3, [r3, #0]
 8021e56:	461a      	mov	r2, r3
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021e5c:	4b1a      	ldr	r3, [pc, #104]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021e5e:	781b      	ldrb	r3, [r3, #0]
 8021e60:	4619      	mov	r1, r3
 8021e62:	6878      	ldr	r0, [r7, #4]
 8021e64:	f7ff f8d9 	bl	802101a <USBD_SetClassConfig>
 8021e68:	4603      	mov	r3, r0
 8021e6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8021e6c:	7bfb      	ldrb	r3, [r7, #15]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d00f      	beq.n	8021e92 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8021e72:	6839      	ldr	r1, [r7, #0]
 8021e74:	6878      	ldr	r0, [r7, #4]
 8021e76:	f000 f903 	bl	8022080 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	b2db      	uxtb	r3, r3
 8021e80:	4619      	mov	r1, r3
 8021e82:	6878      	ldr	r0, [r7, #4]
 8021e84:	f7ff f8e5 	bl	8021052 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	2202      	movs	r2, #2
 8021e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021e90:	e014      	b.n	8021ebc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8021e92:	6878      	ldr	r0, [r7, #4]
 8021e94:	f000 f9a2 	bl	80221dc <USBD_CtlSendStatus>
      break;
 8021e98:	e010      	b.n	8021ebc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8021e9a:	6878      	ldr	r0, [r7, #4]
 8021e9c:	f000 f99e 	bl	80221dc <USBD_CtlSendStatus>
      break;
 8021ea0:	e00c      	b.n	8021ebc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8021ea2:	6839      	ldr	r1, [r7, #0]
 8021ea4:	6878      	ldr	r0, [r7, #4]
 8021ea6:	f000 f8eb 	bl	8022080 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021eaa:	4b07      	ldr	r3, [pc, #28]	; (8021ec8 <USBD_SetConfig+0x148>)
 8021eac:	781b      	ldrb	r3, [r3, #0]
 8021eae:	4619      	mov	r1, r3
 8021eb0:	6878      	ldr	r0, [r7, #4]
 8021eb2:	f7ff f8ce 	bl	8021052 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021eb6:	2303      	movs	r3, #3
 8021eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8021eba:	bf00      	nop
  }

  return ret;
 8021ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8021ebe:	4618      	mov	r0, r3
 8021ec0:	3710      	adds	r7, #16
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	bd80      	pop	{r7, pc}
 8021ec6:	bf00      	nop
 8021ec8:	200007a8 	.word	0x200007a8

08021ecc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ecc:	b580      	push	{r7, lr}
 8021ece:	b082      	sub	sp, #8
 8021ed0:	af00      	add	r7, sp, #0
 8021ed2:	6078      	str	r0, [r7, #4]
 8021ed4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021ed6:	683b      	ldr	r3, [r7, #0]
 8021ed8:	88db      	ldrh	r3, [r3, #6]
 8021eda:	2b01      	cmp	r3, #1
 8021edc:	d004      	beq.n	8021ee8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021ede:	6839      	ldr	r1, [r7, #0]
 8021ee0:	6878      	ldr	r0, [r7, #4]
 8021ee2:	f000 f8cd 	bl	8022080 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021ee6:	e023      	b.n	8021f30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021eee:	b2db      	uxtb	r3, r3
 8021ef0:	2b02      	cmp	r3, #2
 8021ef2:	dc02      	bgt.n	8021efa <USBD_GetConfig+0x2e>
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	dc03      	bgt.n	8021f00 <USBD_GetConfig+0x34>
 8021ef8:	e015      	b.n	8021f26 <USBD_GetConfig+0x5a>
 8021efa:	2b03      	cmp	r3, #3
 8021efc:	d00b      	beq.n	8021f16 <USBD_GetConfig+0x4a>
 8021efe:	e012      	b.n	8021f26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	2200      	movs	r2, #0
 8021f04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	3308      	adds	r3, #8
 8021f0a:	2201      	movs	r2, #1
 8021f0c:	4619      	mov	r1, r3
 8021f0e:	6878      	ldr	r0, [r7, #4]
 8021f10:	f000 f927 	bl	8022162 <USBD_CtlSendData>
        break;
 8021f14:	e00c      	b.n	8021f30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	3304      	adds	r3, #4
 8021f1a:	2201      	movs	r2, #1
 8021f1c:	4619      	mov	r1, r3
 8021f1e:	6878      	ldr	r0, [r7, #4]
 8021f20:	f000 f91f 	bl	8022162 <USBD_CtlSendData>
        break;
 8021f24:	e004      	b.n	8021f30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021f26:	6839      	ldr	r1, [r7, #0]
 8021f28:	6878      	ldr	r0, [r7, #4]
 8021f2a:	f000 f8a9 	bl	8022080 <USBD_CtlError>
        break;
 8021f2e:	bf00      	nop
}
 8021f30:	bf00      	nop
 8021f32:	3708      	adds	r7, #8
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd80      	pop	{r7, pc}

08021f38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b082      	sub	sp, #8
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	6078      	str	r0, [r7, #4]
 8021f40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021f48:	b2db      	uxtb	r3, r3
 8021f4a:	3b01      	subs	r3, #1
 8021f4c:	2b02      	cmp	r3, #2
 8021f4e:	d81e      	bhi.n	8021f8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021f50:	683b      	ldr	r3, [r7, #0]
 8021f52:	88db      	ldrh	r3, [r3, #6]
 8021f54:	2b02      	cmp	r3, #2
 8021f56:	d004      	beq.n	8021f62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021f58:	6839      	ldr	r1, [r7, #0]
 8021f5a:	6878      	ldr	r0, [r7, #4]
 8021f5c:	f000 f890 	bl	8022080 <USBD_CtlError>
        break;
 8021f60:	e01a      	b.n	8021f98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	2201      	movs	r2, #1
 8021f66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d005      	beq.n	8021f7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	68db      	ldr	r3, [r3, #12]
 8021f76:	f043 0202 	orr.w	r2, r3, #2
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	330c      	adds	r3, #12
 8021f82:	2202      	movs	r2, #2
 8021f84:	4619      	mov	r1, r3
 8021f86:	6878      	ldr	r0, [r7, #4]
 8021f88:	f000 f8eb 	bl	8022162 <USBD_CtlSendData>
      break;
 8021f8c:	e004      	b.n	8021f98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021f8e:	6839      	ldr	r1, [r7, #0]
 8021f90:	6878      	ldr	r0, [r7, #4]
 8021f92:	f000 f875 	bl	8022080 <USBD_CtlError>
      break;
 8021f96:	bf00      	nop
  }
}
 8021f98:	bf00      	nop
 8021f9a:	3708      	adds	r7, #8
 8021f9c:	46bd      	mov	sp, r7
 8021f9e:	bd80      	pop	{r7, pc}

08021fa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fa0:	b580      	push	{r7, lr}
 8021fa2:	b082      	sub	sp, #8
 8021fa4:	af00      	add	r7, sp, #0
 8021fa6:	6078      	str	r0, [r7, #4]
 8021fa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021faa:	683b      	ldr	r3, [r7, #0]
 8021fac:	885b      	ldrh	r3, [r3, #2]
 8021fae:	2b01      	cmp	r3, #1
 8021fb0:	d106      	bne.n	8021fc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	2201      	movs	r2, #1
 8021fb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021fba:	6878      	ldr	r0, [r7, #4]
 8021fbc:	f000 f90e 	bl	80221dc <USBD_CtlSendStatus>
  }
}
 8021fc0:	bf00      	nop
 8021fc2:	3708      	adds	r7, #8
 8021fc4:	46bd      	mov	sp, r7
 8021fc6:	bd80      	pop	{r7, pc}

08021fc8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021fc8:	b580      	push	{r7, lr}
 8021fca:	b082      	sub	sp, #8
 8021fcc:	af00      	add	r7, sp, #0
 8021fce:	6078      	str	r0, [r7, #4]
 8021fd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021fd8:	b2db      	uxtb	r3, r3
 8021fda:	3b01      	subs	r3, #1
 8021fdc:	2b02      	cmp	r3, #2
 8021fde:	d80b      	bhi.n	8021ff8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021fe0:	683b      	ldr	r3, [r7, #0]
 8021fe2:	885b      	ldrh	r3, [r3, #2]
 8021fe4:	2b01      	cmp	r3, #1
 8021fe6:	d10c      	bne.n	8022002 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	2200      	movs	r2, #0
 8021fec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021ff0:	6878      	ldr	r0, [r7, #4]
 8021ff2:	f000 f8f3 	bl	80221dc <USBD_CtlSendStatus>
      }
      break;
 8021ff6:	e004      	b.n	8022002 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021ff8:	6839      	ldr	r1, [r7, #0]
 8021ffa:	6878      	ldr	r0, [r7, #4]
 8021ffc:	f000 f840 	bl	8022080 <USBD_CtlError>
      break;
 8022000:	e000      	b.n	8022004 <USBD_ClrFeature+0x3c>
      break;
 8022002:	bf00      	nop
  }
}
 8022004:	bf00      	nop
 8022006:	3708      	adds	r7, #8
 8022008:	46bd      	mov	sp, r7
 802200a:	bd80      	pop	{r7, pc}

0802200c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802200c:	b580      	push	{r7, lr}
 802200e:	b084      	sub	sp, #16
 8022010:	af00      	add	r7, sp, #0
 8022012:	6078      	str	r0, [r7, #4]
 8022014:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8022016:	683b      	ldr	r3, [r7, #0]
 8022018:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	781a      	ldrb	r2, [r3, #0]
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8022022:	68fb      	ldr	r3, [r7, #12]
 8022024:	3301      	adds	r3, #1
 8022026:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	781a      	ldrb	r2, [r3, #0]
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8022030:	68fb      	ldr	r3, [r7, #12]
 8022032:	3301      	adds	r3, #1
 8022034:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8022036:	68f8      	ldr	r0, [r7, #12]
 8022038:	f7ff fa92 	bl	8021560 <SWAPBYTE>
 802203c:	4603      	mov	r3, r0
 802203e:	461a      	mov	r2, r3
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	3301      	adds	r3, #1
 8022048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802204a:	68fb      	ldr	r3, [r7, #12]
 802204c:	3301      	adds	r3, #1
 802204e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8022050:	68f8      	ldr	r0, [r7, #12]
 8022052:	f7ff fa85 	bl	8021560 <SWAPBYTE>
 8022056:	4603      	mov	r3, r0
 8022058:	461a      	mov	r2, r3
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	3301      	adds	r3, #1
 8022062:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	3301      	adds	r3, #1
 8022068:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 802206a:	68f8      	ldr	r0, [r7, #12]
 802206c:	f7ff fa78 	bl	8021560 <SWAPBYTE>
 8022070:	4603      	mov	r3, r0
 8022072:	461a      	mov	r2, r3
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	80da      	strh	r2, [r3, #6]
}
 8022078:	bf00      	nop
 802207a:	3710      	adds	r7, #16
 802207c:	46bd      	mov	sp, r7
 802207e:	bd80      	pop	{r7, pc}

08022080 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022080:	b580      	push	{r7, lr}
 8022082:	b082      	sub	sp, #8
 8022084:	af00      	add	r7, sp, #0
 8022086:	6078      	str	r0, [r7, #4]
 8022088:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 802208a:	2180      	movs	r1, #128	; 0x80
 802208c:	6878      	ldr	r0, [r7, #4]
 802208e:	f000 fcbe 	bl	8022a0e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8022092:	2100      	movs	r1, #0
 8022094:	6878      	ldr	r0, [r7, #4]
 8022096:	f000 fcba 	bl	8022a0e <USBD_LL_StallEP>
}
 802209a:	bf00      	nop
 802209c:	3708      	adds	r7, #8
 802209e:	46bd      	mov	sp, r7
 80220a0:	bd80      	pop	{r7, pc}

080220a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80220a2:	b580      	push	{r7, lr}
 80220a4:	b086      	sub	sp, #24
 80220a6:	af00      	add	r7, sp, #0
 80220a8:	60f8      	str	r0, [r7, #12]
 80220aa:	60b9      	str	r1, [r7, #8]
 80220ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80220ae:	2300      	movs	r3, #0
 80220b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d036      	beq.n	8022126 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80220bc:	6938      	ldr	r0, [r7, #16]
 80220be:	f000 f836 	bl	802212e <USBD_GetLen>
 80220c2:	4603      	mov	r3, r0
 80220c4:	3301      	adds	r3, #1
 80220c6:	b29b      	uxth	r3, r3
 80220c8:	005b      	lsls	r3, r3, #1
 80220ca:	b29a      	uxth	r2, r3
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80220d0:	7dfb      	ldrb	r3, [r7, #23]
 80220d2:	68ba      	ldr	r2, [r7, #8]
 80220d4:	4413      	add	r3, r2
 80220d6:	687a      	ldr	r2, [r7, #4]
 80220d8:	7812      	ldrb	r2, [r2, #0]
 80220da:	701a      	strb	r2, [r3, #0]
  idx++;
 80220dc:	7dfb      	ldrb	r3, [r7, #23]
 80220de:	3301      	adds	r3, #1
 80220e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80220e2:	7dfb      	ldrb	r3, [r7, #23]
 80220e4:	68ba      	ldr	r2, [r7, #8]
 80220e6:	4413      	add	r3, r2
 80220e8:	2203      	movs	r2, #3
 80220ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80220ec:	7dfb      	ldrb	r3, [r7, #23]
 80220ee:	3301      	adds	r3, #1
 80220f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80220f2:	e013      	b.n	802211c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80220f4:	7dfb      	ldrb	r3, [r7, #23]
 80220f6:	68ba      	ldr	r2, [r7, #8]
 80220f8:	4413      	add	r3, r2
 80220fa:	693a      	ldr	r2, [r7, #16]
 80220fc:	7812      	ldrb	r2, [r2, #0]
 80220fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8022100:	693b      	ldr	r3, [r7, #16]
 8022102:	3301      	adds	r3, #1
 8022104:	613b      	str	r3, [r7, #16]
    idx++;
 8022106:	7dfb      	ldrb	r3, [r7, #23]
 8022108:	3301      	adds	r3, #1
 802210a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 802210c:	7dfb      	ldrb	r3, [r7, #23]
 802210e:	68ba      	ldr	r2, [r7, #8]
 8022110:	4413      	add	r3, r2
 8022112:	2200      	movs	r2, #0
 8022114:	701a      	strb	r2, [r3, #0]
    idx++;
 8022116:	7dfb      	ldrb	r3, [r7, #23]
 8022118:	3301      	adds	r3, #1
 802211a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 802211c:	693b      	ldr	r3, [r7, #16]
 802211e:	781b      	ldrb	r3, [r3, #0]
 8022120:	2b00      	cmp	r3, #0
 8022122:	d1e7      	bne.n	80220f4 <USBD_GetString+0x52>
 8022124:	e000      	b.n	8022128 <USBD_GetString+0x86>
    return;
 8022126:	bf00      	nop
  }
}
 8022128:	3718      	adds	r7, #24
 802212a:	46bd      	mov	sp, r7
 802212c:	bd80      	pop	{r7, pc}

0802212e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802212e:	b480      	push	{r7}
 8022130:	b085      	sub	sp, #20
 8022132:	af00      	add	r7, sp, #0
 8022134:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022136:	2300      	movs	r3, #0
 8022138:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 802213e:	e005      	b.n	802214c <USBD_GetLen+0x1e>
  {
    len++;
 8022140:	7bfb      	ldrb	r3, [r7, #15]
 8022142:	3301      	adds	r3, #1
 8022144:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8022146:	68bb      	ldr	r3, [r7, #8]
 8022148:	3301      	adds	r3, #1
 802214a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 802214c:	68bb      	ldr	r3, [r7, #8]
 802214e:	781b      	ldrb	r3, [r3, #0]
 8022150:	2b00      	cmp	r3, #0
 8022152:	d1f5      	bne.n	8022140 <USBD_GetLen+0x12>
  }

  return len;
 8022154:	7bfb      	ldrb	r3, [r7, #15]
}
 8022156:	4618      	mov	r0, r3
 8022158:	3714      	adds	r7, #20
 802215a:	46bd      	mov	sp, r7
 802215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022160:	4770      	bx	lr

08022162 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8022162:	b580      	push	{r7, lr}
 8022164:	b084      	sub	sp, #16
 8022166:	af00      	add	r7, sp, #0
 8022168:	60f8      	str	r0, [r7, #12]
 802216a:	60b9      	str	r1, [r7, #8]
 802216c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	2202      	movs	r2, #2
 8022172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8022176:	68fb      	ldr	r3, [r7, #12]
 8022178:	687a      	ldr	r2, [r7, #4]
 802217a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 802217c:	68fb      	ldr	r3, [r7, #12]
 802217e:	687a      	ldr	r2, [r7, #4]
 8022180:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	68ba      	ldr	r2, [r7, #8]
 8022186:	2100      	movs	r1, #0
 8022188:	68f8      	ldr	r0, [r7, #12]
 802218a:	f000 fcc9 	bl	8022b20 <USBD_LL_Transmit>

  return USBD_OK;
 802218e:	2300      	movs	r3, #0
}
 8022190:	4618      	mov	r0, r3
 8022192:	3710      	adds	r7, #16
 8022194:	46bd      	mov	sp, r7
 8022196:	bd80      	pop	{r7, pc}

08022198 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8022198:	b580      	push	{r7, lr}
 802219a:	b084      	sub	sp, #16
 802219c:	af00      	add	r7, sp, #0
 802219e:	60f8      	str	r0, [r7, #12]
 80221a0:	60b9      	str	r1, [r7, #8]
 80221a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	68ba      	ldr	r2, [r7, #8]
 80221a8:	2100      	movs	r1, #0
 80221aa:	68f8      	ldr	r0, [r7, #12]
 80221ac:	f000 fcb8 	bl	8022b20 <USBD_LL_Transmit>

  return USBD_OK;
 80221b0:	2300      	movs	r3, #0
}
 80221b2:	4618      	mov	r0, r3
 80221b4:	3710      	adds	r7, #16
 80221b6:	46bd      	mov	sp, r7
 80221b8:	bd80      	pop	{r7, pc}

080221ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80221ba:	b580      	push	{r7, lr}
 80221bc:	b084      	sub	sp, #16
 80221be:	af00      	add	r7, sp, #0
 80221c0:	60f8      	str	r0, [r7, #12]
 80221c2:	60b9      	str	r1, [r7, #8]
 80221c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	68ba      	ldr	r2, [r7, #8]
 80221ca:	2100      	movs	r1, #0
 80221cc:	68f8      	ldr	r0, [r7, #12]
 80221ce:	f000 fcc8 	bl	8022b62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80221d2:	2300      	movs	r3, #0
}
 80221d4:	4618      	mov	r0, r3
 80221d6:	3710      	adds	r7, #16
 80221d8:	46bd      	mov	sp, r7
 80221da:	bd80      	pop	{r7, pc}

080221dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80221dc:	b580      	push	{r7, lr}
 80221de:	b082      	sub	sp, #8
 80221e0:	af00      	add	r7, sp, #0
 80221e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	2204      	movs	r2, #4
 80221e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80221ec:	2300      	movs	r3, #0
 80221ee:	2200      	movs	r2, #0
 80221f0:	2100      	movs	r1, #0
 80221f2:	6878      	ldr	r0, [r7, #4]
 80221f4:	f000 fc94 	bl	8022b20 <USBD_LL_Transmit>

  return USBD_OK;
 80221f8:	2300      	movs	r3, #0
}
 80221fa:	4618      	mov	r0, r3
 80221fc:	3708      	adds	r7, #8
 80221fe:	46bd      	mov	sp, r7
 8022200:	bd80      	pop	{r7, pc}

08022202 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022202:	b580      	push	{r7, lr}
 8022204:	b082      	sub	sp, #8
 8022206:	af00      	add	r7, sp, #0
 8022208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802220a:	687b      	ldr	r3, [r7, #4]
 802220c:	2205      	movs	r2, #5
 802220e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022212:	2300      	movs	r3, #0
 8022214:	2200      	movs	r2, #0
 8022216:	2100      	movs	r1, #0
 8022218:	6878      	ldr	r0, [r7, #4]
 802221a:	f000 fca2 	bl	8022b62 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802221e:	2300      	movs	r3, #0
}
 8022220:	4618      	mov	r0, r3
 8022222:	3708      	adds	r7, #8
 8022224:	46bd      	mov	sp, r7
 8022226:	bd80      	pop	{r7, pc}

08022228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022228:	b580      	push	{r7, lr}
 802222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802222c:	2200      	movs	r2, #0
 802222e:	4912      	ldr	r1, [pc, #72]	; (8022278 <MX_USB_DEVICE_Init+0x50>)
 8022230:	4812      	ldr	r0, [pc, #72]	; (802227c <MX_USB_DEVICE_Init+0x54>)
 8022232:	f7fe fe84 	bl	8020f3e <USBD_Init>
 8022236:	4603      	mov	r3, r0
 8022238:	2b00      	cmp	r3, #0
 802223a:	d001      	beq.n	8022240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802223c:	f7f5 fc5e 	bl	8017afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8022240:	490f      	ldr	r1, [pc, #60]	; (8022280 <MX_USB_DEVICE_Init+0x58>)
 8022242:	480e      	ldr	r0, [pc, #56]	; (802227c <MX_USB_DEVICE_Init+0x54>)
 8022244:	f7fe feab 	bl	8020f9e <USBD_RegisterClass>
 8022248:	4603      	mov	r3, r0
 802224a:	2b00      	cmp	r3, #0
 802224c:	d001      	beq.n	8022252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802224e:	f7f5 fc55 	bl	8017afc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8022252:	490c      	ldr	r1, [pc, #48]	; (8022284 <MX_USB_DEVICE_Init+0x5c>)
 8022254:	4809      	ldr	r0, [pc, #36]	; (802227c <MX_USB_DEVICE_Init+0x54>)
 8022256:	f7fd fa5b 	bl	801f710 <USBD_MSC_RegisterStorage>
 802225a:	4603      	mov	r3, r0
 802225c:	2b00      	cmp	r3, #0
 802225e:	d001      	beq.n	8022264 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8022260:	f7f5 fc4c 	bl	8017afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022264:	4805      	ldr	r0, [pc, #20]	; (802227c <MX_USB_DEVICE_Init+0x54>)
 8022266:	f7fe fec1 	bl	8020fec <USBD_Start>
 802226a:	4603      	mov	r3, r0
 802226c:	2b00      	cmp	r3, #0
 802226e:	d001      	beq.n	8022274 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8022270:	f7f5 fc44 	bl	8017afc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022274:	bf00      	nop
 8022276:	bd80      	pop	{r7, pc}
 8022278:	2000067c 	.word	0x2000067c
 802227c:	20006c78 	.word	0x20006c78
 8022280:	20000594 	.word	0x20000594
 8022284:	200006dc 	.word	0x200006dc

08022288 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022288:	b480      	push	{r7}
 802228a:	b083      	sub	sp, #12
 802228c:	af00      	add	r7, sp, #0
 802228e:	4603      	mov	r3, r0
 8022290:	6039      	str	r1, [r7, #0]
 8022292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022294:	683b      	ldr	r3, [r7, #0]
 8022296:	2212      	movs	r2, #18
 8022298:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802229a:	4b03      	ldr	r3, [pc, #12]	; (80222a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 802229c:	4618      	mov	r0, r3
 802229e:	370c      	adds	r7, #12
 80222a0:	46bd      	mov	sp, r7
 80222a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a6:	4770      	bx	lr
 80222a8:	2000069c 	.word	0x2000069c

080222ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222ac:	b480      	push	{r7}
 80222ae:	b083      	sub	sp, #12
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	4603      	mov	r3, r0
 80222b4:	6039      	str	r1, [r7, #0]
 80222b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80222b8:	683b      	ldr	r3, [r7, #0]
 80222ba:	2204      	movs	r2, #4
 80222bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80222be:	4b03      	ldr	r3, [pc, #12]	; (80222cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80222c0:	4618      	mov	r0, r3
 80222c2:	370c      	adds	r7, #12
 80222c4:	46bd      	mov	sp, r7
 80222c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ca:	4770      	bx	lr
 80222cc:	200006bc 	.word	0x200006bc

080222d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222d0:	b580      	push	{r7, lr}
 80222d2:	b082      	sub	sp, #8
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	4603      	mov	r3, r0
 80222d8:	6039      	str	r1, [r7, #0]
 80222da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80222dc:	79fb      	ldrb	r3, [r7, #7]
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d105      	bne.n	80222ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80222e2:	683a      	ldr	r2, [r7, #0]
 80222e4:	4907      	ldr	r1, [pc, #28]	; (8022304 <USBD_FS_ProductStrDescriptor+0x34>)
 80222e6:	4808      	ldr	r0, [pc, #32]	; (8022308 <USBD_FS_ProductStrDescriptor+0x38>)
 80222e8:	f7ff fedb 	bl	80220a2 <USBD_GetString>
 80222ec:	e004      	b.n	80222f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80222ee:	683a      	ldr	r2, [r7, #0]
 80222f0:	4904      	ldr	r1, [pc, #16]	; (8022304 <USBD_FS_ProductStrDescriptor+0x34>)
 80222f2:	4805      	ldr	r0, [pc, #20]	; (8022308 <USBD_FS_ProductStrDescriptor+0x38>)
 80222f4:	f7ff fed5 	bl	80220a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80222f8:	4b02      	ldr	r3, [pc, #8]	; (8022304 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80222fa:	4618      	mov	r0, r3
 80222fc:	3708      	adds	r7, #8
 80222fe:	46bd      	mov	sp, r7
 8022300:	bd80      	pop	{r7, pc}
 8022302:	bf00      	nop
 8022304:	20006f48 	.word	0x20006f48
 8022308:	08000a84 	.word	0x08000a84

0802230c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802230c:	b580      	push	{r7, lr}
 802230e:	b082      	sub	sp, #8
 8022310:	af00      	add	r7, sp, #0
 8022312:	4603      	mov	r3, r0
 8022314:	6039      	str	r1, [r7, #0]
 8022316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8022318:	683a      	ldr	r2, [r7, #0]
 802231a:	4904      	ldr	r1, [pc, #16]	; (802232c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802231c:	4804      	ldr	r0, [pc, #16]	; (8022330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802231e:	f7ff fec0 	bl	80220a2 <USBD_GetString>
  return USBD_StrDesc;
 8022322:	4b02      	ldr	r3, [pc, #8]	; (802232c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022324:	4618      	mov	r0, r3
 8022326:	3708      	adds	r7, #8
 8022328:	46bd      	mov	sp, r7
 802232a:	bd80      	pop	{r7, pc}
 802232c:	20006f48 	.word	0x20006f48
 8022330:	08000a98 	.word	0x08000a98

08022334 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022334:	b580      	push	{r7, lr}
 8022336:	b082      	sub	sp, #8
 8022338:	af00      	add	r7, sp, #0
 802233a:	4603      	mov	r3, r0
 802233c:	6039      	str	r1, [r7, #0]
 802233e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022340:	683b      	ldr	r3, [r7, #0]
 8022342:	221a      	movs	r2, #26
 8022344:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022346:	f000 f855 	bl	80223f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802234a:	4b02      	ldr	r3, [pc, #8]	; (8022354 <USBD_FS_SerialStrDescriptor+0x20>)
}
 802234c:	4618      	mov	r0, r3
 802234e:	3708      	adds	r7, #8
 8022350:	46bd      	mov	sp, r7
 8022352:	bd80      	pop	{r7, pc}
 8022354:	200006c0 	.word	0x200006c0

08022358 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022358:	b580      	push	{r7, lr}
 802235a:	b082      	sub	sp, #8
 802235c:	af00      	add	r7, sp, #0
 802235e:	4603      	mov	r3, r0
 8022360:	6039      	str	r1, [r7, #0]
 8022362:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022364:	79fb      	ldrb	r3, [r7, #7]
 8022366:	2b00      	cmp	r3, #0
 8022368:	d105      	bne.n	8022376 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802236a:	683a      	ldr	r2, [r7, #0]
 802236c:	4907      	ldr	r1, [pc, #28]	; (802238c <USBD_FS_ConfigStrDescriptor+0x34>)
 802236e:	4808      	ldr	r0, [pc, #32]	; (8022390 <USBD_FS_ConfigStrDescriptor+0x38>)
 8022370:	f7ff fe97 	bl	80220a2 <USBD_GetString>
 8022374:	e004      	b.n	8022380 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8022376:	683a      	ldr	r2, [r7, #0]
 8022378:	4904      	ldr	r1, [pc, #16]	; (802238c <USBD_FS_ConfigStrDescriptor+0x34>)
 802237a:	4805      	ldr	r0, [pc, #20]	; (8022390 <USBD_FS_ConfigStrDescriptor+0x38>)
 802237c:	f7ff fe91 	bl	80220a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022380:	4b02      	ldr	r3, [pc, #8]	; (802238c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8022382:	4618      	mov	r0, r3
 8022384:	3708      	adds	r7, #8
 8022386:	46bd      	mov	sp, r7
 8022388:	bd80      	pop	{r7, pc}
 802238a:	bf00      	nop
 802238c:	20006f48 	.word	0x20006f48
 8022390:	08000aac 	.word	0x08000aac

08022394 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	b082      	sub	sp, #8
 8022398:	af00      	add	r7, sp, #0
 802239a:	4603      	mov	r3, r0
 802239c:	6039      	str	r1, [r7, #0]
 802239e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80223a0:	79fb      	ldrb	r3, [r7, #7]
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d105      	bne.n	80223b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80223a6:	683a      	ldr	r2, [r7, #0]
 80223a8:	4907      	ldr	r1, [pc, #28]	; (80223c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80223aa:	4808      	ldr	r0, [pc, #32]	; (80223cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80223ac:	f7ff fe79 	bl	80220a2 <USBD_GetString>
 80223b0:	e004      	b.n	80223bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80223b2:	683a      	ldr	r2, [r7, #0]
 80223b4:	4904      	ldr	r1, [pc, #16]	; (80223c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80223b6:	4805      	ldr	r0, [pc, #20]	; (80223cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80223b8:	f7ff fe73 	bl	80220a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80223bc:	4b02      	ldr	r3, [pc, #8]	; (80223c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80223be:	4618      	mov	r0, r3
 80223c0:	3708      	adds	r7, #8
 80223c2:	46bd      	mov	sp, r7
 80223c4:	bd80      	pop	{r7, pc}
 80223c6:	bf00      	nop
 80223c8:	20006f48 	.word	0x20006f48
 80223cc:	08000ab8 	.word	0x08000ab8

080223d0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223d0:	b480      	push	{r7}
 80223d2:	b083      	sub	sp, #12
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	4603      	mov	r3, r0
 80223d8:	6039      	str	r1, [r7, #0]
 80223da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80223dc:	683b      	ldr	r3, [r7, #0]
 80223de:	220c      	movs	r2, #12
 80223e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80223e2:	4b03      	ldr	r3, [pc, #12]	; (80223f0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80223e4:	4618      	mov	r0, r3
 80223e6:	370c      	adds	r7, #12
 80223e8:	46bd      	mov	sp, r7
 80223ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ee:	4770      	bx	lr
 80223f0:	200006b0 	.word	0x200006b0

080223f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80223f4:	b580      	push	{r7, lr}
 80223f6:	b084      	sub	sp, #16
 80223f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80223fa:	4b0f      	ldr	r3, [pc, #60]	; (8022438 <Get_SerialNum+0x44>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022400:	4b0e      	ldr	r3, [pc, #56]	; (802243c <Get_SerialNum+0x48>)
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8022406:	4b0e      	ldr	r3, [pc, #56]	; (8022440 <Get_SerialNum+0x4c>)
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802240c:	68fa      	ldr	r2, [r7, #12]
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	4413      	add	r3, r2
 8022412:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022414:	68fb      	ldr	r3, [r7, #12]
 8022416:	2b00      	cmp	r3, #0
 8022418:	d009      	beq.n	802242e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802241a:	2208      	movs	r2, #8
 802241c:	4909      	ldr	r1, [pc, #36]	; (8022444 <Get_SerialNum+0x50>)
 802241e:	68f8      	ldr	r0, [r7, #12]
 8022420:	f000 f814 	bl	802244c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022424:	2204      	movs	r2, #4
 8022426:	4908      	ldr	r1, [pc, #32]	; (8022448 <Get_SerialNum+0x54>)
 8022428:	68b8      	ldr	r0, [r7, #8]
 802242a:	f000 f80f 	bl	802244c <IntToUnicode>
  }
}
 802242e:	bf00      	nop
 8022430:	3710      	adds	r7, #16
 8022432:	46bd      	mov	sp, r7
 8022434:	bd80      	pop	{r7, pc}
 8022436:	bf00      	nop
 8022438:	1fff7a10 	.word	0x1fff7a10
 802243c:	1fff7a14 	.word	0x1fff7a14
 8022440:	1fff7a18 	.word	0x1fff7a18
 8022444:	200006c2 	.word	0x200006c2
 8022448:	200006d2 	.word	0x200006d2

0802244c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802244c:	b480      	push	{r7}
 802244e:	b087      	sub	sp, #28
 8022450:	af00      	add	r7, sp, #0
 8022452:	60f8      	str	r0, [r7, #12]
 8022454:	60b9      	str	r1, [r7, #8]
 8022456:	4613      	mov	r3, r2
 8022458:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802245a:	2300      	movs	r3, #0
 802245c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802245e:	2300      	movs	r3, #0
 8022460:	75fb      	strb	r3, [r7, #23]
 8022462:	e027      	b.n	80224b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	0f1b      	lsrs	r3, r3, #28
 8022468:	2b09      	cmp	r3, #9
 802246a:	d80b      	bhi.n	8022484 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802246c:	68fb      	ldr	r3, [r7, #12]
 802246e:	0f1b      	lsrs	r3, r3, #28
 8022470:	b2da      	uxtb	r2, r3
 8022472:	7dfb      	ldrb	r3, [r7, #23]
 8022474:	005b      	lsls	r3, r3, #1
 8022476:	4619      	mov	r1, r3
 8022478:	68bb      	ldr	r3, [r7, #8]
 802247a:	440b      	add	r3, r1
 802247c:	3230      	adds	r2, #48	; 0x30
 802247e:	b2d2      	uxtb	r2, r2
 8022480:	701a      	strb	r2, [r3, #0]
 8022482:	e00a      	b.n	802249a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8022484:	68fb      	ldr	r3, [r7, #12]
 8022486:	0f1b      	lsrs	r3, r3, #28
 8022488:	b2da      	uxtb	r2, r3
 802248a:	7dfb      	ldrb	r3, [r7, #23]
 802248c:	005b      	lsls	r3, r3, #1
 802248e:	4619      	mov	r1, r3
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	440b      	add	r3, r1
 8022494:	3237      	adds	r2, #55	; 0x37
 8022496:	b2d2      	uxtb	r2, r2
 8022498:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802249a:	68fb      	ldr	r3, [r7, #12]
 802249c:	011b      	lsls	r3, r3, #4
 802249e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80224a0:	7dfb      	ldrb	r3, [r7, #23]
 80224a2:	005b      	lsls	r3, r3, #1
 80224a4:	3301      	adds	r3, #1
 80224a6:	68ba      	ldr	r2, [r7, #8]
 80224a8:	4413      	add	r3, r2
 80224aa:	2200      	movs	r2, #0
 80224ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80224ae:	7dfb      	ldrb	r3, [r7, #23]
 80224b0:	3301      	adds	r3, #1
 80224b2:	75fb      	strb	r3, [r7, #23]
 80224b4:	7dfa      	ldrb	r2, [r7, #23]
 80224b6:	79fb      	ldrb	r3, [r7, #7]
 80224b8:	429a      	cmp	r2, r3
 80224ba:	d3d3      	bcc.n	8022464 <IntToUnicode+0x18>
  }
}
 80224bc:	bf00      	nop
 80224be:	bf00      	nop
 80224c0:	371c      	adds	r7, #28
 80224c2:	46bd      	mov	sp, r7
 80224c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c8:	4770      	bx	lr

080224ca <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80224ca:	b480      	push	{r7}
 80224cc:	b083      	sub	sp, #12
 80224ce:	af00      	add	r7, sp, #0
 80224d0:	4603      	mov	r3, r0
 80224d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80224d4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80224d6:	4618      	mov	r0, r3
 80224d8:	370c      	adds	r7, #12
 80224da:	46bd      	mov	sp, r7
 80224dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224e0:	4770      	bx	lr

080224e2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80224e2:	b480      	push	{r7}
 80224e4:	b085      	sub	sp, #20
 80224e6:	af00      	add	r7, sp, #0
 80224e8:	4603      	mov	r3, r0
 80224ea:	60b9      	str	r1, [r7, #8]
 80224ec:	607a      	str	r2, [r7, #4]
 80224ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80224f0:	68bb      	ldr	r3, [r7, #8]
 80224f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80224f6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80224fe:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8022500:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022502:	4618      	mov	r0, r3
 8022504:	3714      	adds	r7, #20
 8022506:	46bd      	mov	sp, r7
 8022508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802250c:	4770      	bx	lr

0802250e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 802250e:	b480      	push	{r7}
 8022510:	b083      	sub	sp, #12
 8022512:	af00      	add	r7, sp, #0
 8022514:	4603      	mov	r3, r0
 8022516:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022518:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802251a:	4618      	mov	r0, r3
 802251c:	370c      	adds	r7, #12
 802251e:	46bd      	mov	sp, r7
 8022520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022524:	4770      	bx	lr

08022526 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8022526:	b480      	push	{r7}
 8022528:	b083      	sub	sp, #12
 802252a:	af00      	add	r7, sp, #0
 802252c:	4603      	mov	r3, r0
 802252e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8022530:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8022532:	4618      	mov	r0, r3
 8022534:	370c      	adds	r7, #12
 8022536:	46bd      	mov	sp, r7
 8022538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802253c:	4770      	bx	lr

0802253e <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 802253e:	b580      	push	{r7, lr}
 8022540:	b084      	sub	sp, #16
 8022542:	af00      	add	r7, sp, #0
 8022544:	60b9      	str	r1, [r7, #8]
 8022546:	607a      	str	r2, [r7, #4]
 8022548:	461a      	mov	r2, r3
 802254a:	4603      	mov	r3, r0
 802254c:	73fb      	strb	r3, [r7, #15]
 802254e:	4613      	mov	r3, r2
 8022550:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	ExtFlash_PageRD( (char *)buf, blk_addr*STORAGE_BLK_SIZ, blk_len);
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	025b      	lsls	r3, r3, #9
 8022556:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 802255a:	4619      	mov	r1, r3
 802255c:	68b8      	ldr	r0, [r7, #8]
 802255e:	f7ec fb41 	bl	800ebe4 <ExtFlash_PageRD>
  return (USBD_OK);
 8022562:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022564:	4618      	mov	r0, r3
 8022566:	3710      	adds	r7, #16
 8022568:	46bd      	mov	sp, r7
 802256a:	bd80      	pop	{r7, pc}

0802256c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b084      	sub	sp, #16
 8022570:	af00      	add	r7, sp, #0
 8022572:	60b9      	str	r1, [r7, #8]
 8022574:	607a      	str	r2, [r7, #4]
 8022576:	461a      	mov	r2, r3
 8022578:	4603      	mov	r3, r0
 802257a:	73fb      	strb	r3, [r7, #15]
 802257c:	4613      	mov	r3, r2
 802257e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	ExtFlash_PageWR( (char *)buf, blk_addr*STORAGE_BLK_SIZ);
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	025b      	lsls	r3, r3, #9
 8022584:	4619      	mov	r1, r3
 8022586:	68b8      	ldr	r0, [r7, #8]
 8022588:	f7ec fc04 	bl	800ed94 <ExtFlash_PageWR>
	return (USBD_OK);
 802258c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 802258e:	4618      	mov	r0, r3
 8022590:	3710      	adds	r7, #16
 8022592:	46bd      	mov	sp, r7
 8022594:	bd80      	pop	{r7, pc}

08022596 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8022596:	b480      	push	{r7}
 8022598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 802259a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 802259c:	4618      	mov	r0, r3
 802259e:	46bd      	mov	sp, r7
 80225a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225a4:	4770      	bx	lr
	...

080225a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b0a0      	sub	sp, #128	; 0x80
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80225b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80225b4:	2200      	movs	r2, #0
 80225b6:	601a      	str	r2, [r3, #0]
 80225b8:	605a      	str	r2, [r3, #4]
 80225ba:	609a      	str	r2, [r3, #8]
 80225bc:	60da      	str	r2, [r3, #12]
 80225be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80225c0:	f107 0310 	add.w	r3, r7, #16
 80225c4:	225c      	movs	r2, #92	; 0x5c
 80225c6:	2100      	movs	r1, #0
 80225c8:	4618      	mov	r0, r3
 80225ca:	f000 fbd9 	bl	8022d80 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80225d6:	d154      	bne.n	8022682 <HAL_PCD_MspInit+0xda>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80225d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80225dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 25;
 80225de:	2319      	movs	r3, #25
 80225e0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80225e2:	23c0      	movs	r3, #192	; 0xc0
 80225e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80225e6:	2302      	movs	r3, #2
 80225e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80225ea:	2304      	movs	r3, #4
 80225ec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80225ee:	2301      	movs	r3, #1
 80225f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80225f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80225f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80225f8:	f107 0310 	add.w	r3, r7, #16
 80225fc:	4618      	mov	r0, r3
 80225fe:	f7f8 fef5 	bl	801b3ec <HAL_RCCEx_PeriphCLKConfig>
 8022602:	4603      	mov	r3, r0
 8022604:	2b00      	cmp	r3, #0
 8022606:	d001      	beq.n	802260c <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8022608:	f7f5 fa78 	bl	8017afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802260c:	2300      	movs	r3, #0
 802260e:	60fb      	str	r3, [r7, #12]
 8022610:	4b1e      	ldr	r3, [pc, #120]	; (802268c <HAL_PCD_MspInit+0xe4>)
 8022612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022614:	4a1d      	ldr	r2, [pc, #116]	; (802268c <HAL_PCD_MspInit+0xe4>)
 8022616:	f043 0301 	orr.w	r3, r3, #1
 802261a:	6313      	str	r3, [r2, #48]	; 0x30
 802261c:	4b1b      	ldr	r3, [pc, #108]	; (802268c <HAL_PCD_MspInit+0xe4>)
 802261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022620:	f003 0301 	and.w	r3, r3, #1
 8022624:	60fb      	str	r3, [r7, #12]
 8022626:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = D__Pin|D_A12_Pin;
 8022628:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802262c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802262e:	2302      	movs	r3, #2
 8022630:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022632:	2300      	movs	r3, #0
 8022634:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022636:	2303      	movs	r3, #3
 8022638:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802263a:	230a      	movs	r3, #10
 802263c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802263e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8022642:	4619      	mov	r1, r3
 8022644:	4812      	ldr	r0, [pc, #72]	; (8022690 <HAL_PCD_MspInit+0xe8>)
 8022646:	f7f7 f8cd 	bl	80197e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802264a:	4b10      	ldr	r3, [pc, #64]	; (802268c <HAL_PCD_MspInit+0xe4>)
 802264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802264e:	4a0f      	ldr	r2, [pc, #60]	; (802268c <HAL_PCD_MspInit+0xe4>)
 8022650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022654:	6353      	str	r3, [r2, #52]	; 0x34
 8022656:	2300      	movs	r3, #0
 8022658:	60bb      	str	r3, [r7, #8]
 802265a:	4b0c      	ldr	r3, [pc, #48]	; (802268c <HAL_PCD_MspInit+0xe4>)
 802265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802265e:	4a0b      	ldr	r2, [pc, #44]	; (802268c <HAL_PCD_MspInit+0xe4>)
 8022660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022664:	6453      	str	r3, [r2, #68]	; 0x44
 8022666:	4b09      	ldr	r3, [pc, #36]	; (802268c <HAL_PCD_MspInit+0xe4>)
 8022668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802266e:	60bb      	str	r3, [r7, #8]
 8022670:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8022672:	2200      	movs	r2, #0
 8022674:	2100      	movs	r1, #0
 8022676:	2043      	movs	r0, #67	; 0x43
 8022678:	f7f6 f9e5 	bl	8018a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802267c:	2043      	movs	r0, #67	; 0x43
 802267e:	f7f6 f9fe 	bl	8018a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8022682:	bf00      	nop
 8022684:	3780      	adds	r7, #128	; 0x80
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop
 802268c:	40023800 	.word	0x40023800
 8022690:	40020000 	.word	0x40020000

08022694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022694:	b580      	push	{r7, lr}
 8022696:	b082      	sub	sp, #8
 8022698:	af00      	add	r7, sp, #0
 802269a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80226a8:	4619      	mov	r1, r3
 80226aa:	4610      	mov	r0, r2
 80226ac:	f7fe fce9 	bl	8021082 <USBD_LL_SetupStage>
}
 80226b0:	bf00      	nop
 80226b2:	3708      	adds	r7, #8
 80226b4:	46bd      	mov	sp, r7
 80226b6:	bd80      	pop	{r7, pc}

080226b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226b8:	b580      	push	{r7, lr}
 80226ba:	b082      	sub	sp, #8
 80226bc:	af00      	add	r7, sp, #0
 80226be:	6078      	str	r0, [r7, #4]
 80226c0:	460b      	mov	r3, r1
 80226c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80226ca:	78fa      	ldrb	r2, [r7, #3]
 80226cc:	6879      	ldr	r1, [r7, #4]
 80226ce:	4613      	mov	r3, r2
 80226d0:	00db      	lsls	r3, r3, #3
 80226d2:	1a9b      	subs	r3, r3, r2
 80226d4:	009b      	lsls	r3, r3, #2
 80226d6:	440b      	add	r3, r1
 80226d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80226dc:	681a      	ldr	r2, [r3, #0]
 80226de:	78fb      	ldrb	r3, [r7, #3]
 80226e0:	4619      	mov	r1, r3
 80226e2:	f7fe fd23 	bl	802112c <USBD_LL_DataOutStage>
}
 80226e6:	bf00      	nop
 80226e8:	3708      	adds	r7, #8
 80226ea:	46bd      	mov	sp, r7
 80226ec:	bd80      	pop	{r7, pc}

080226ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80226ee:	b580      	push	{r7, lr}
 80226f0:	b082      	sub	sp, #8
 80226f2:	af00      	add	r7, sp, #0
 80226f4:	6078      	str	r0, [r7, #4]
 80226f6:	460b      	mov	r3, r1
 80226f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8022700:	78fa      	ldrb	r2, [r7, #3]
 8022702:	6879      	ldr	r1, [r7, #4]
 8022704:	4613      	mov	r3, r2
 8022706:	00db      	lsls	r3, r3, #3
 8022708:	1a9b      	subs	r3, r3, r2
 802270a:	009b      	lsls	r3, r3, #2
 802270c:	440b      	add	r3, r1
 802270e:	3348      	adds	r3, #72	; 0x48
 8022710:	681a      	ldr	r2, [r3, #0]
 8022712:	78fb      	ldrb	r3, [r7, #3]
 8022714:	4619      	mov	r1, r3
 8022716:	f7fe fd6c 	bl	80211f2 <USBD_LL_DataInStage>
}
 802271a:	bf00      	nop
 802271c:	3708      	adds	r7, #8
 802271e:	46bd      	mov	sp, r7
 8022720:	bd80      	pop	{r7, pc}

08022722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022722:	b580      	push	{r7, lr}
 8022724:	b082      	sub	sp, #8
 8022726:	af00      	add	r7, sp, #0
 8022728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022730:	4618      	mov	r0, r3
 8022732:	f7fe fe80 	bl	8021436 <USBD_LL_SOF>
}
 8022736:	bf00      	nop
 8022738:	3708      	adds	r7, #8
 802273a:	46bd      	mov	sp, r7
 802273c:	bd80      	pop	{r7, pc}

0802273e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802273e:	b580      	push	{r7, lr}
 8022740:	b084      	sub	sp, #16
 8022742:	af00      	add	r7, sp, #0
 8022744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022746:	2301      	movs	r3, #1
 8022748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	68db      	ldr	r3, [r3, #12]
 802274e:	2b00      	cmp	r3, #0
 8022750:	d102      	bne.n	8022758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8022752:	2300      	movs	r3, #0
 8022754:	73fb      	strb	r3, [r7, #15]
 8022756:	e008      	b.n	802276a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	68db      	ldr	r3, [r3, #12]
 802275c:	2b02      	cmp	r3, #2
 802275e:	d102      	bne.n	8022766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8022760:	2301      	movs	r3, #1
 8022762:	73fb      	strb	r3, [r7, #15]
 8022764:	e001      	b.n	802276a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8022766:	f7f5 f9c9 	bl	8017afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022770:	7bfa      	ldrb	r2, [r7, #15]
 8022772:	4611      	mov	r1, r2
 8022774:	4618      	mov	r0, r3
 8022776:	f7fe fe20 	bl	80213ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022780:	4618      	mov	r0, r3
 8022782:	f7fe fdcc 	bl	802131e <USBD_LL_Reset>
}
 8022786:	bf00      	nop
 8022788:	3710      	adds	r7, #16
 802278a:	46bd      	mov	sp, r7
 802278c:	bd80      	pop	{r7, pc}
	...

08022790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b082      	sub	sp, #8
 8022794:	af00      	add	r7, sp, #0
 8022796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802279e:	4618      	mov	r0, r3
 80227a0:	f7fe fe1b 	bl	80213da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	687a      	ldr	r2, [r7, #4]
 80227b0:	6812      	ldr	r2, [r2, #0]
 80227b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80227b6:	f043 0301 	orr.w	r3, r3, #1
 80227ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	6a1b      	ldr	r3, [r3, #32]
 80227c0:	2b00      	cmp	r3, #0
 80227c2:	d005      	beq.n	80227d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80227c4:	4b04      	ldr	r3, [pc, #16]	; (80227d8 <HAL_PCD_SuspendCallback+0x48>)
 80227c6:	691b      	ldr	r3, [r3, #16]
 80227c8:	4a03      	ldr	r2, [pc, #12]	; (80227d8 <HAL_PCD_SuspendCallback+0x48>)
 80227ca:	f043 0306 	orr.w	r3, r3, #6
 80227ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80227d0:	bf00      	nop
 80227d2:	3708      	adds	r7, #8
 80227d4:	46bd      	mov	sp, r7
 80227d6:	bd80      	pop	{r7, pc}
 80227d8:	e000ed00 	.word	0xe000ed00

080227dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b082      	sub	sp, #8
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80227ea:	4618      	mov	r0, r3
 80227ec:	f7fe fe0b 	bl	8021406 <USBD_LL_Resume>
}
 80227f0:	bf00      	nop
 80227f2:	3708      	adds	r7, #8
 80227f4:	46bd      	mov	sp, r7
 80227f6:	bd80      	pop	{r7, pc}

080227f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80227f8:	b580      	push	{r7, lr}
 80227fa:	b082      	sub	sp, #8
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	6078      	str	r0, [r7, #4]
 8022800:	460b      	mov	r3, r1
 8022802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802280a:	78fa      	ldrb	r2, [r7, #3]
 802280c:	4611      	mov	r1, r2
 802280e:	4618      	mov	r0, r3
 8022810:	f7fe fe59 	bl	80214c6 <USBD_LL_IsoOUTIncomplete>
}
 8022814:	bf00      	nop
 8022816:	3708      	adds	r7, #8
 8022818:	46bd      	mov	sp, r7
 802281a:	bd80      	pop	{r7, pc}

0802281c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802281c:	b580      	push	{r7, lr}
 802281e:	b082      	sub	sp, #8
 8022820:	af00      	add	r7, sp, #0
 8022822:	6078      	str	r0, [r7, #4]
 8022824:	460b      	mov	r3, r1
 8022826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802282e:	78fa      	ldrb	r2, [r7, #3]
 8022830:	4611      	mov	r1, r2
 8022832:	4618      	mov	r0, r3
 8022834:	f7fe fe21 	bl	802147a <USBD_LL_IsoINIncomplete>
}
 8022838:	bf00      	nop
 802283a:	3708      	adds	r7, #8
 802283c:	46bd      	mov	sp, r7
 802283e:	bd80      	pop	{r7, pc}

08022840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b082      	sub	sp, #8
 8022844:	af00      	add	r7, sp, #0
 8022846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022848:	687b      	ldr	r3, [r7, #4]
 802284a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802284e:	4618      	mov	r0, r3
 8022850:	f7fe fe5f 	bl	8021512 <USBD_LL_DevConnected>
}
 8022854:	bf00      	nop
 8022856:	3708      	adds	r7, #8
 8022858:	46bd      	mov	sp, r7
 802285a:	bd80      	pop	{r7, pc}

0802285c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802285c:	b580      	push	{r7, lr}
 802285e:	b082      	sub	sp, #8
 8022860:	af00      	add	r7, sp, #0
 8022862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 802286a:	4618      	mov	r0, r3
 802286c:	f7fe fe5c 	bl	8021528 <USBD_LL_DevDisconnected>
}
 8022870:	bf00      	nop
 8022872:	3708      	adds	r7, #8
 8022874:	46bd      	mov	sp, r7
 8022876:	bd80      	pop	{r7, pc}

08022878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022878:	b580      	push	{r7, lr}
 802287a:	b082      	sub	sp, #8
 802287c:	af00      	add	r7, sp, #0
 802287e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	781b      	ldrb	r3, [r3, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	d13c      	bne.n	8022902 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8022888:	4a20      	ldr	r2, [pc, #128]	; (802290c <USBD_LL_Init+0x94>)
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	4a1e      	ldr	r2, [pc, #120]	; (802290c <USBD_LL_Init+0x94>)
 8022894:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8022898:	4b1c      	ldr	r3, [pc, #112]	; (802290c <USBD_LL_Init+0x94>)
 802289a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802289e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80228a0:	4b1a      	ldr	r3, [pc, #104]	; (802290c <USBD_LL_Init+0x94>)
 80228a2:	2206      	movs	r2, #6
 80228a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80228a6:	4b19      	ldr	r3, [pc, #100]	; (802290c <USBD_LL_Init+0x94>)
 80228a8:	2202      	movs	r2, #2
 80228aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80228ac:	4b17      	ldr	r3, [pc, #92]	; (802290c <USBD_LL_Init+0x94>)
 80228ae:	2200      	movs	r2, #0
 80228b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80228b2:	4b16      	ldr	r3, [pc, #88]	; (802290c <USBD_LL_Init+0x94>)
 80228b4:	2202      	movs	r2, #2
 80228b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80228b8:	4b14      	ldr	r3, [pc, #80]	; (802290c <USBD_LL_Init+0x94>)
 80228ba:	2200      	movs	r2, #0
 80228bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80228be:	4b13      	ldr	r3, [pc, #76]	; (802290c <USBD_LL_Init+0x94>)
 80228c0:	2200      	movs	r2, #0
 80228c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80228c4:	4b11      	ldr	r3, [pc, #68]	; (802290c <USBD_LL_Init+0x94>)
 80228c6:	2200      	movs	r2, #0
 80228c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80228ca:	4b10      	ldr	r3, [pc, #64]	; (802290c <USBD_LL_Init+0x94>)
 80228cc:	2200      	movs	r2, #0
 80228ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80228d0:	4b0e      	ldr	r3, [pc, #56]	; (802290c <USBD_LL_Init+0x94>)
 80228d2:	2200      	movs	r2, #0
 80228d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80228d6:	480d      	ldr	r0, [pc, #52]	; (802290c <USBD_LL_Init+0x94>)
 80228d8:	f7f7 fa49 	bl	8019d6e <HAL_PCD_Init>
 80228dc:	4603      	mov	r3, r0
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d001      	beq.n	80228e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80228e2:	f7f5 f90b 	bl	8017afc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80228e6:	2180      	movs	r1, #128	; 0x80
 80228e8:	4808      	ldr	r0, [pc, #32]	; (802290c <USBD_LL_Init+0x94>)
 80228ea:	f7f8 fc08 	bl	801b0fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80228ee:	2240      	movs	r2, #64	; 0x40
 80228f0:	2100      	movs	r1, #0
 80228f2:	4806      	ldr	r0, [pc, #24]	; (802290c <USBD_LL_Init+0x94>)
 80228f4:	f7f8 fbbc 	bl	801b070 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80228f8:	2280      	movs	r2, #128	; 0x80
 80228fa:	2101      	movs	r1, #1
 80228fc:	4803      	ldr	r0, [pc, #12]	; (802290c <USBD_LL_Init+0x94>)
 80228fe:	f7f8 fbb7 	bl	801b070 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022902:	2300      	movs	r3, #0
}
 8022904:	4618      	mov	r0, r3
 8022906:	3708      	adds	r7, #8
 8022908:	46bd      	mov	sp, r7
 802290a:	bd80      	pop	{r7, pc}
 802290c:	20007148 	.word	0x20007148

08022910 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022910:	b580      	push	{r7, lr}
 8022912:	b084      	sub	sp, #16
 8022914:	af00      	add	r7, sp, #0
 8022916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022918:	2300      	movs	r3, #0
 802291a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802291c:	2300      	movs	r3, #0
 802291e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022926:	4618      	mov	r0, r3
 8022928:	f7f7 fb45 	bl	8019fb6 <HAL_PCD_Start>
 802292c:	4603      	mov	r3, r0
 802292e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022930:	7bfb      	ldrb	r3, [r7, #15]
 8022932:	4618      	mov	r0, r3
 8022934:	f000 f9b0 	bl	8022c98 <USBD_Get_USB_Status>
 8022938:	4603      	mov	r3, r0
 802293a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802293c:	7bbb      	ldrb	r3, [r7, #14]
}
 802293e:	4618      	mov	r0, r3
 8022940:	3710      	adds	r7, #16
 8022942:	46bd      	mov	sp, r7
 8022944:	bd80      	pop	{r7, pc}

08022946 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022946:	b580      	push	{r7, lr}
 8022948:	b084      	sub	sp, #16
 802294a:	af00      	add	r7, sp, #0
 802294c:	6078      	str	r0, [r7, #4]
 802294e:	4608      	mov	r0, r1
 8022950:	4611      	mov	r1, r2
 8022952:	461a      	mov	r2, r3
 8022954:	4603      	mov	r3, r0
 8022956:	70fb      	strb	r3, [r7, #3]
 8022958:	460b      	mov	r3, r1
 802295a:	70bb      	strb	r3, [r7, #2]
 802295c:	4613      	mov	r3, r2
 802295e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022960:	2300      	movs	r3, #0
 8022962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022964:	2300      	movs	r3, #0
 8022966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 802296e:	78bb      	ldrb	r3, [r7, #2]
 8022970:	883a      	ldrh	r2, [r7, #0]
 8022972:	78f9      	ldrb	r1, [r7, #3]
 8022974:	f7f7 ff56 	bl	801a824 <HAL_PCD_EP_Open>
 8022978:	4603      	mov	r3, r0
 802297a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802297c:	7bfb      	ldrb	r3, [r7, #15]
 802297e:	4618      	mov	r0, r3
 8022980:	f000 f98a 	bl	8022c98 <USBD_Get_USB_Status>
 8022984:	4603      	mov	r3, r0
 8022986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022988:	7bbb      	ldrb	r3, [r7, #14]
}
 802298a:	4618      	mov	r0, r3
 802298c:	3710      	adds	r7, #16
 802298e:	46bd      	mov	sp, r7
 8022990:	bd80      	pop	{r7, pc}

08022992 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022992:	b580      	push	{r7, lr}
 8022994:	b084      	sub	sp, #16
 8022996:	af00      	add	r7, sp, #0
 8022998:	6078      	str	r0, [r7, #4]
 802299a:	460b      	mov	r3, r1
 802299c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802299e:	2300      	movs	r3, #0
 80229a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229a2:	2300      	movs	r3, #0
 80229a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229ac:	78fa      	ldrb	r2, [r7, #3]
 80229ae:	4611      	mov	r1, r2
 80229b0:	4618      	mov	r0, r3
 80229b2:	f7f7 ff9f 	bl	801a8f4 <HAL_PCD_EP_Close>
 80229b6:	4603      	mov	r3, r0
 80229b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229ba:	7bfb      	ldrb	r3, [r7, #15]
 80229bc:	4618      	mov	r0, r3
 80229be:	f000 f96b 	bl	8022c98 <USBD_Get_USB_Status>
 80229c2:	4603      	mov	r3, r0
 80229c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80229c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80229c8:	4618      	mov	r0, r3
 80229ca:	3710      	adds	r7, #16
 80229cc:	46bd      	mov	sp, r7
 80229ce:	bd80      	pop	{r7, pc}

080229d0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80229d0:	b580      	push	{r7, lr}
 80229d2:	b084      	sub	sp, #16
 80229d4:	af00      	add	r7, sp, #0
 80229d6:	6078      	str	r0, [r7, #4]
 80229d8:	460b      	mov	r3, r1
 80229da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229dc:	2300      	movs	r3, #0
 80229de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229e0:	2300      	movs	r3, #0
 80229e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80229ea:	78fa      	ldrb	r2, [r7, #3]
 80229ec:	4611      	mov	r1, r2
 80229ee:	4618      	mov	r0, r3
 80229f0:	f7f8 f931 	bl	801ac56 <HAL_PCD_EP_Flush>
 80229f4:	4603      	mov	r3, r0
 80229f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229f8:	7bfb      	ldrb	r3, [r7, #15]
 80229fa:	4618      	mov	r0, r3
 80229fc:	f000 f94c 	bl	8022c98 <USBD_Get_USB_Status>
 8022a00:	4603      	mov	r3, r0
 8022a02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022a04:	7bbb      	ldrb	r3, [r7, #14]
}
 8022a06:	4618      	mov	r0, r3
 8022a08:	3710      	adds	r7, #16
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	bd80      	pop	{r7, pc}

08022a0e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a0e:	b580      	push	{r7, lr}
 8022a10:	b084      	sub	sp, #16
 8022a12:	af00      	add	r7, sp, #0
 8022a14:	6078      	str	r0, [r7, #4]
 8022a16:	460b      	mov	r3, r1
 8022a18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a1a:	2300      	movs	r3, #0
 8022a1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a1e:	2300      	movs	r3, #0
 8022a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a28:	78fa      	ldrb	r2, [r7, #3]
 8022a2a:	4611      	mov	r1, r2
 8022a2c:	4618      	mov	r0, r3
 8022a2e:	f7f8 f858 	bl	801aae2 <HAL_PCD_EP_SetStall>
 8022a32:	4603      	mov	r3, r0
 8022a34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a36:	7bfb      	ldrb	r3, [r7, #15]
 8022a38:	4618      	mov	r0, r3
 8022a3a:	f000 f92d 	bl	8022c98 <USBD_Get_USB_Status>
 8022a3e:	4603      	mov	r3, r0
 8022a40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8022a44:	4618      	mov	r0, r3
 8022a46:	3710      	adds	r7, #16
 8022a48:	46bd      	mov	sp, r7
 8022a4a:	bd80      	pop	{r7, pc}

08022a4c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a4c:	b580      	push	{r7, lr}
 8022a4e:	b084      	sub	sp, #16
 8022a50:	af00      	add	r7, sp, #0
 8022a52:	6078      	str	r0, [r7, #4]
 8022a54:	460b      	mov	r3, r1
 8022a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a58:	2300      	movs	r3, #0
 8022a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a5c:	2300      	movs	r3, #0
 8022a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a66:	78fa      	ldrb	r2, [r7, #3]
 8022a68:	4611      	mov	r1, r2
 8022a6a:	4618      	mov	r0, r3
 8022a6c:	f7f8 f89d 	bl	801abaa <HAL_PCD_EP_ClrStall>
 8022a70:	4603      	mov	r3, r0
 8022a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a74:	7bfb      	ldrb	r3, [r7, #15]
 8022a76:	4618      	mov	r0, r3
 8022a78:	f000 f90e 	bl	8022c98 <USBD_Get_USB_Status>
 8022a7c:	4603      	mov	r3, r0
 8022a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8022a82:	4618      	mov	r0, r3
 8022a84:	3710      	adds	r7, #16
 8022a86:	46bd      	mov	sp, r7
 8022a88:	bd80      	pop	{r7, pc}

08022a8a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a8a:	b480      	push	{r7}
 8022a8c:	b085      	sub	sp, #20
 8022a8e:	af00      	add	r7, sp, #0
 8022a90:	6078      	str	r0, [r7, #4]
 8022a92:	460b      	mov	r3, r1
 8022a94:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022a9c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	da0b      	bge.n	8022abe <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022aa6:	78fb      	ldrb	r3, [r7, #3]
 8022aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022aac:	68f9      	ldr	r1, [r7, #12]
 8022aae:	4613      	mov	r3, r2
 8022ab0:	00db      	lsls	r3, r3, #3
 8022ab2:	1a9b      	subs	r3, r3, r2
 8022ab4:	009b      	lsls	r3, r3, #2
 8022ab6:	440b      	add	r3, r1
 8022ab8:	333e      	adds	r3, #62	; 0x3e
 8022aba:	781b      	ldrb	r3, [r3, #0]
 8022abc:	e00b      	b.n	8022ad6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022abe:	78fb      	ldrb	r3, [r7, #3]
 8022ac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8022ac4:	68f9      	ldr	r1, [r7, #12]
 8022ac6:	4613      	mov	r3, r2
 8022ac8:	00db      	lsls	r3, r3, #3
 8022aca:	1a9b      	subs	r3, r3, r2
 8022acc:	009b      	lsls	r3, r3, #2
 8022ace:	440b      	add	r3, r1
 8022ad0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8022ad4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022ad6:	4618      	mov	r0, r3
 8022ad8:	3714      	adds	r7, #20
 8022ada:	46bd      	mov	sp, r7
 8022adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae0:	4770      	bx	lr

08022ae2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8022ae2:	b580      	push	{r7, lr}
 8022ae4:	b084      	sub	sp, #16
 8022ae6:	af00      	add	r7, sp, #0
 8022ae8:	6078      	str	r0, [r7, #4]
 8022aea:	460b      	mov	r3, r1
 8022aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022aee:	2300      	movs	r3, #0
 8022af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022af2:	2300      	movs	r3, #0
 8022af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022afc:	78fa      	ldrb	r2, [r7, #3]
 8022afe:	4611      	mov	r1, r2
 8022b00:	4618      	mov	r0, r3
 8022b02:	f7f7 fe6a 	bl	801a7da <HAL_PCD_SetAddress>
 8022b06:	4603      	mov	r3, r0
 8022b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b0a:	7bfb      	ldrb	r3, [r7, #15]
 8022b0c:	4618      	mov	r0, r3
 8022b0e:	f000 f8c3 	bl	8022c98 <USBD_Get_USB_Status>
 8022b12:	4603      	mov	r3, r0
 8022b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8022b18:	4618      	mov	r0, r3
 8022b1a:	3710      	adds	r7, #16
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	bd80      	pop	{r7, pc}

08022b20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022b20:	b580      	push	{r7, lr}
 8022b22:	b086      	sub	sp, #24
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	60f8      	str	r0, [r7, #12]
 8022b28:	607a      	str	r2, [r7, #4]
 8022b2a:	603b      	str	r3, [r7, #0]
 8022b2c:	460b      	mov	r3, r1
 8022b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b30:	2300      	movs	r3, #0
 8022b32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b34:	2300      	movs	r3, #0
 8022b36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022b38:	68fb      	ldr	r3, [r7, #12]
 8022b3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022b3e:	7af9      	ldrb	r1, [r7, #11]
 8022b40:	683b      	ldr	r3, [r7, #0]
 8022b42:	687a      	ldr	r2, [r7, #4]
 8022b44:	f7f7 ff83 	bl	801aa4e <HAL_PCD_EP_Transmit>
 8022b48:	4603      	mov	r3, r0
 8022b4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b4c:	7dfb      	ldrb	r3, [r7, #23]
 8022b4e:	4618      	mov	r0, r3
 8022b50:	f000 f8a2 	bl	8022c98 <USBD_Get_USB_Status>
 8022b54:	4603      	mov	r3, r0
 8022b56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022b58:	7dbb      	ldrb	r3, [r7, #22]
}
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	3718      	adds	r7, #24
 8022b5e:	46bd      	mov	sp, r7
 8022b60:	bd80      	pop	{r7, pc}

08022b62 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022b62:	b580      	push	{r7, lr}
 8022b64:	b086      	sub	sp, #24
 8022b66:	af00      	add	r7, sp, #0
 8022b68:	60f8      	str	r0, [r7, #12]
 8022b6a:	607a      	str	r2, [r7, #4]
 8022b6c:	603b      	str	r3, [r7, #0]
 8022b6e:	460b      	mov	r3, r1
 8022b70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022b72:	2300      	movs	r3, #0
 8022b74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b76:	2300      	movs	r3, #0
 8022b78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022b7a:	68fb      	ldr	r3, [r7, #12]
 8022b7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8022b80:	7af9      	ldrb	r1, [r7, #11]
 8022b82:	683b      	ldr	r3, [r7, #0]
 8022b84:	687a      	ldr	r2, [r7, #4]
 8022b86:	f7f7 feff 	bl	801a988 <HAL_PCD_EP_Receive>
 8022b8a:	4603      	mov	r3, r0
 8022b8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022b8e:	7dfb      	ldrb	r3, [r7, #23]
 8022b90:	4618      	mov	r0, r3
 8022b92:	f000 f881 	bl	8022c98 <USBD_Get_USB_Status>
 8022b96:	4603      	mov	r3, r0
 8022b98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8022b9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8022b9c:	4618      	mov	r0, r3
 8022b9e:	3718      	adds	r7, #24
 8022ba0:	46bd      	mov	sp, r7
 8022ba2:	bd80      	pop	{r7, pc}

08022ba4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022ba4:	b580      	push	{r7, lr}
 8022ba6:	b082      	sub	sp, #8
 8022ba8:	af00      	add	r7, sp, #0
 8022baa:	6078      	str	r0, [r7, #4]
 8022bac:	460b      	mov	r3, r1
 8022bae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8022bb6:	78fa      	ldrb	r2, [r7, #3]
 8022bb8:	4611      	mov	r1, r2
 8022bba:	4618      	mov	r0, r3
 8022bbc:	f7f7 ff2f 	bl	801aa1e <HAL_PCD_EP_GetRxCount>
 8022bc0:	4603      	mov	r3, r0
}
 8022bc2:	4618      	mov	r0, r3
 8022bc4:	3708      	adds	r7, #8
 8022bc6:	46bd      	mov	sp, r7
 8022bc8:	bd80      	pop	{r7, pc}
	...

08022bcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8022bcc:	b580      	push	{r7, lr}
 8022bce:	b082      	sub	sp, #8
 8022bd0:	af00      	add	r7, sp, #0
 8022bd2:	6078      	str	r0, [r7, #4]
 8022bd4:	460b      	mov	r3, r1
 8022bd6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8022bd8:	78fb      	ldrb	r3, [r7, #3]
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d002      	beq.n	8022be4 <HAL_PCDEx_LPM_Callback+0x18>
 8022bde:	2b01      	cmp	r3, #1
 8022be0:	d01f      	beq.n	8022c22 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8022be2:	e03b      	b.n	8022c5c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	6a1b      	ldr	r3, [r3, #32]
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d007      	beq.n	8022bfc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8022bec:	f7f4 fb20 	bl	8017230 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022bf0:	4b1c      	ldr	r3, [pc, #112]	; (8022c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8022bf2:	691b      	ldr	r3, [r3, #16]
 8022bf4:	4a1b      	ldr	r2, [pc, #108]	; (8022c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8022bf6:	f023 0306 	bic.w	r3, r3, #6
 8022bfa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	687a      	ldr	r2, [r7, #4]
 8022c08:	6812      	ldr	r2, [r2, #0]
 8022c0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022c0e:	f023 0301 	bic.w	r3, r3, #1
 8022c12:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	f7fe fbf3 	bl	8021406 <USBD_LL_Resume>
    break;
 8022c20:	e01c      	b.n	8022c5c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	687a      	ldr	r2, [r7, #4]
 8022c2e:	6812      	ldr	r2, [r2, #0]
 8022c30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022c34:	f043 0301 	orr.w	r3, r3, #1
 8022c38:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8022c40:	4618      	mov	r0, r3
 8022c42:	f7fe fbca 	bl	80213da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	6a1b      	ldr	r3, [r3, #32]
 8022c4a:	2b00      	cmp	r3, #0
 8022c4c:	d005      	beq.n	8022c5a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022c4e:	4b05      	ldr	r3, [pc, #20]	; (8022c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8022c50:	691b      	ldr	r3, [r3, #16]
 8022c52:	4a04      	ldr	r2, [pc, #16]	; (8022c64 <HAL_PCDEx_LPM_Callback+0x98>)
 8022c54:	f043 0306 	orr.w	r3, r3, #6
 8022c58:	6113      	str	r3, [r2, #16]
    break;
 8022c5a:	bf00      	nop
}
 8022c5c:	bf00      	nop
 8022c5e:	3708      	adds	r7, #8
 8022c60:	46bd      	mov	sp, r7
 8022c62:	bd80      	pop	{r7, pc}
 8022c64:	e000ed00 	.word	0xe000ed00

08022c68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022c68:	b480      	push	{r7}
 8022c6a:	b083      	sub	sp, #12
 8022c6c:	af00      	add	r7, sp, #0
 8022c6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022c70:	4b03      	ldr	r3, [pc, #12]	; (8022c80 <USBD_static_malloc+0x18>)
}
 8022c72:	4618      	mov	r0, r3
 8022c74:	370c      	adds	r7, #12
 8022c76:	46bd      	mov	sp, r7
 8022c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c7c:	4770      	bx	lr
 8022c7e:	bf00      	nop
 8022c80:	200007ac 	.word	0x200007ac

08022c84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022c84:	b480      	push	{r7}
 8022c86:	b083      	sub	sp, #12
 8022c88:	af00      	add	r7, sp, #0
 8022c8a:	6078      	str	r0, [r7, #4]

}
 8022c8c:	bf00      	nop
 8022c8e:	370c      	adds	r7, #12
 8022c90:	46bd      	mov	sp, r7
 8022c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c96:	4770      	bx	lr

08022c98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022c98:	b480      	push	{r7}
 8022c9a:	b085      	sub	sp, #20
 8022c9c:	af00      	add	r7, sp, #0
 8022c9e:	4603      	mov	r3, r0
 8022ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022ca2:	2300      	movs	r3, #0
 8022ca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022ca6:	79fb      	ldrb	r3, [r7, #7]
 8022ca8:	2b03      	cmp	r3, #3
 8022caa:	d817      	bhi.n	8022cdc <USBD_Get_USB_Status+0x44>
 8022cac:	a201      	add	r2, pc, #4	; (adr r2, 8022cb4 <USBD_Get_USB_Status+0x1c>)
 8022cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022cb2:	bf00      	nop
 8022cb4:	08022cc5 	.word	0x08022cc5
 8022cb8:	08022ccb 	.word	0x08022ccb
 8022cbc:	08022cd1 	.word	0x08022cd1
 8022cc0:	08022cd7 	.word	0x08022cd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8022cc8:	e00b      	b.n	8022ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022cca:	2303      	movs	r3, #3
 8022ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8022cce:	e008      	b.n	8022ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022cd0:	2301      	movs	r3, #1
 8022cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8022cd4:	e005      	b.n	8022ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022cd6:	2303      	movs	r3, #3
 8022cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8022cda:	e002      	b.n	8022ce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8022cdc:	2303      	movs	r3, #3
 8022cde:	73fb      	strb	r3, [r7, #15]
    break;
 8022ce0:	bf00      	nop
  }
  return usb_status;
 8022ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ce4:	4618      	mov	r0, r3
 8022ce6:	3714      	adds	r7, #20
 8022ce8:	46bd      	mov	sp, r7
 8022cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cee:	4770      	bx	lr

08022cf0 <__errno>:
 8022cf0:	4b01      	ldr	r3, [pc, #4]	; (8022cf8 <__errno+0x8>)
 8022cf2:	6818      	ldr	r0, [r3, #0]
 8022cf4:	4770      	bx	lr
 8022cf6:	bf00      	nop
 8022cf8:	200006fc 	.word	0x200006fc

08022cfc <__libc_init_array>:
 8022cfc:	b570      	push	{r4, r5, r6, lr}
 8022cfe:	4d0d      	ldr	r5, [pc, #52]	; (8022d34 <__libc_init_array+0x38>)
 8022d00:	4c0d      	ldr	r4, [pc, #52]	; (8022d38 <__libc_init_array+0x3c>)
 8022d02:	1b64      	subs	r4, r4, r5
 8022d04:	10a4      	asrs	r4, r4, #2
 8022d06:	2600      	movs	r6, #0
 8022d08:	42a6      	cmp	r6, r4
 8022d0a:	d109      	bne.n	8022d20 <__libc_init_array+0x24>
 8022d0c:	4d0b      	ldr	r5, [pc, #44]	; (8022d3c <__libc_init_array+0x40>)
 8022d0e:	4c0c      	ldr	r4, [pc, #48]	; (8022d40 <__libc_init_array+0x44>)
 8022d10:	f000 f906 	bl	8022f20 <_init>
 8022d14:	1b64      	subs	r4, r4, r5
 8022d16:	10a4      	asrs	r4, r4, #2
 8022d18:	2600      	movs	r6, #0
 8022d1a:	42a6      	cmp	r6, r4
 8022d1c:	d105      	bne.n	8022d2a <__libc_init_array+0x2e>
 8022d1e:	bd70      	pop	{r4, r5, r6, pc}
 8022d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d24:	4798      	blx	r3
 8022d26:	3601      	adds	r6, #1
 8022d28:	e7ee      	b.n	8022d08 <__libc_init_array+0xc>
 8022d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8022d2e:	4798      	blx	r3
 8022d30:	3601      	adds	r6, #1
 8022d32:	e7f2      	b.n	8022d1a <__libc_init_array+0x1e>
 8022d34:	08022f40 	.word	0x08022f40
 8022d38:	08022f40 	.word	0x08022f40
 8022d3c:	08022f40 	.word	0x08022f40
 8022d40:	08022f44 	.word	0x08022f44

08022d44 <malloc>:
 8022d44:	4b02      	ldr	r3, [pc, #8]	; (8022d50 <malloc+0xc>)
 8022d46:	4601      	mov	r1, r0
 8022d48:	6818      	ldr	r0, [r3, #0]
 8022d4a:	f000 b871 	b.w	8022e30 <_malloc_r>
 8022d4e:	bf00      	nop
 8022d50:	200006fc 	.word	0x200006fc

08022d54 <free>:
 8022d54:	4b02      	ldr	r3, [pc, #8]	; (8022d60 <free+0xc>)
 8022d56:	4601      	mov	r1, r0
 8022d58:	6818      	ldr	r0, [r3, #0]
 8022d5a:	f000 b819 	b.w	8022d90 <_free_r>
 8022d5e:	bf00      	nop
 8022d60:	200006fc 	.word	0x200006fc

08022d64 <memcpy>:
 8022d64:	440a      	add	r2, r1
 8022d66:	4291      	cmp	r1, r2
 8022d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8022d6c:	d100      	bne.n	8022d70 <memcpy+0xc>
 8022d6e:	4770      	bx	lr
 8022d70:	b510      	push	{r4, lr}
 8022d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022d7a:	4291      	cmp	r1, r2
 8022d7c:	d1f9      	bne.n	8022d72 <memcpy+0xe>
 8022d7e:	bd10      	pop	{r4, pc}

08022d80 <memset>:
 8022d80:	4402      	add	r2, r0
 8022d82:	4603      	mov	r3, r0
 8022d84:	4293      	cmp	r3, r2
 8022d86:	d100      	bne.n	8022d8a <memset+0xa>
 8022d88:	4770      	bx	lr
 8022d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8022d8e:	e7f9      	b.n	8022d84 <memset+0x4>

08022d90 <_free_r>:
 8022d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022d92:	2900      	cmp	r1, #0
 8022d94:	d048      	beq.n	8022e28 <_free_r+0x98>
 8022d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022d9a:	9001      	str	r0, [sp, #4]
 8022d9c:	2b00      	cmp	r3, #0
 8022d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8022da2:	bfb8      	it	lt
 8022da4:	18e4      	addlt	r4, r4, r3
 8022da6:	f000 f8ad 	bl	8022f04 <__malloc_lock>
 8022daa:	4a20      	ldr	r2, [pc, #128]	; (8022e2c <_free_r+0x9c>)
 8022dac:	9801      	ldr	r0, [sp, #4]
 8022dae:	6813      	ldr	r3, [r2, #0]
 8022db0:	4615      	mov	r5, r2
 8022db2:	b933      	cbnz	r3, 8022dc2 <_free_r+0x32>
 8022db4:	6063      	str	r3, [r4, #4]
 8022db6:	6014      	str	r4, [r2, #0]
 8022db8:	b003      	add	sp, #12
 8022dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022dbe:	f000 b8a7 	b.w	8022f10 <__malloc_unlock>
 8022dc2:	42a3      	cmp	r3, r4
 8022dc4:	d90b      	bls.n	8022dde <_free_r+0x4e>
 8022dc6:	6821      	ldr	r1, [r4, #0]
 8022dc8:	1862      	adds	r2, r4, r1
 8022dca:	4293      	cmp	r3, r2
 8022dcc:	bf04      	itt	eq
 8022dce:	681a      	ldreq	r2, [r3, #0]
 8022dd0:	685b      	ldreq	r3, [r3, #4]
 8022dd2:	6063      	str	r3, [r4, #4]
 8022dd4:	bf04      	itt	eq
 8022dd6:	1852      	addeq	r2, r2, r1
 8022dd8:	6022      	streq	r2, [r4, #0]
 8022dda:	602c      	str	r4, [r5, #0]
 8022ddc:	e7ec      	b.n	8022db8 <_free_r+0x28>
 8022dde:	461a      	mov	r2, r3
 8022de0:	685b      	ldr	r3, [r3, #4]
 8022de2:	b10b      	cbz	r3, 8022de8 <_free_r+0x58>
 8022de4:	42a3      	cmp	r3, r4
 8022de6:	d9fa      	bls.n	8022dde <_free_r+0x4e>
 8022de8:	6811      	ldr	r1, [r2, #0]
 8022dea:	1855      	adds	r5, r2, r1
 8022dec:	42a5      	cmp	r5, r4
 8022dee:	d10b      	bne.n	8022e08 <_free_r+0x78>
 8022df0:	6824      	ldr	r4, [r4, #0]
 8022df2:	4421      	add	r1, r4
 8022df4:	1854      	adds	r4, r2, r1
 8022df6:	42a3      	cmp	r3, r4
 8022df8:	6011      	str	r1, [r2, #0]
 8022dfa:	d1dd      	bne.n	8022db8 <_free_r+0x28>
 8022dfc:	681c      	ldr	r4, [r3, #0]
 8022dfe:	685b      	ldr	r3, [r3, #4]
 8022e00:	6053      	str	r3, [r2, #4]
 8022e02:	4421      	add	r1, r4
 8022e04:	6011      	str	r1, [r2, #0]
 8022e06:	e7d7      	b.n	8022db8 <_free_r+0x28>
 8022e08:	d902      	bls.n	8022e10 <_free_r+0x80>
 8022e0a:	230c      	movs	r3, #12
 8022e0c:	6003      	str	r3, [r0, #0]
 8022e0e:	e7d3      	b.n	8022db8 <_free_r+0x28>
 8022e10:	6825      	ldr	r5, [r4, #0]
 8022e12:	1961      	adds	r1, r4, r5
 8022e14:	428b      	cmp	r3, r1
 8022e16:	bf04      	itt	eq
 8022e18:	6819      	ldreq	r1, [r3, #0]
 8022e1a:	685b      	ldreq	r3, [r3, #4]
 8022e1c:	6063      	str	r3, [r4, #4]
 8022e1e:	bf04      	itt	eq
 8022e20:	1949      	addeq	r1, r1, r5
 8022e22:	6021      	streq	r1, [r4, #0]
 8022e24:	6054      	str	r4, [r2, #4]
 8022e26:	e7c7      	b.n	8022db8 <_free_r+0x28>
 8022e28:	b003      	add	sp, #12
 8022e2a:	bd30      	pop	{r4, r5, pc}
 8022e2c:	20000a24 	.word	0x20000a24

08022e30 <_malloc_r>:
 8022e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e32:	1ccd      	adds	r5, r1, #3
 8022e34:	f025 0503 	bic.w	r5, r5, #3
 8022e38:	3508      	adds	r5, #8
 8022e3a:	2d0c      	cmp	r5, #12
 8022e3c:	bf38      	it	cc
 8022e3e:	250c      	movcc	r5, #12
 8022e40:	2d00      	cmp	r5, #0
 8022e42:	4606      	mov	r6, r0
 8022e44:	db01      	blt.n	8022e4a <_malloc_r+0x1a>
 8022e46:	42a9      	cmp	r1, r5
 8022e48:	d903      	bls.n	8022e52 <_malloc_r+0x22>
 8022e4a:	230c      	movs	r3, #12
 8022e4c:	6033      	str	r3, [r6, #0]
 8022e4e:	2000      	movs	r0, #0
 8022e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e52:	f000 f857 	bl	8022f04 <__malloc_lock>
 8022e56:	4921      	ldr	r1, [pc, #132]	; (8022edc <_malloc_r+0xac>)
 8022e58:	680a      	ldr	r2, [r1, #0]
 8022e5a:	4614      	mov	r4, r2
 8022e5c:	b99c      	cbnz	r4, 8022e86 <_malloc_r+0x56>
 8022e5e:	4f20      	ldr	r7, [pc, #128]	; (8022ee0 <_malloc_r+0xb0>)
 8022e60:	683b      	ldr	r3, [r7, #0]
 8022e62:	b923      	cbnz	r3, 8022e6e <_malloc_r+0x3e>
 8022e64:	4621      	mov	r1, r4
 8022e66:	4630      	mov	r0, r6
 8022e68:	f000 f83c 	bl	8022ee4 <_sbrk_r>
 8022e6c:	6038      	str	r0, [r7, #0]
 8022e6e:	4629      	mov	r1, r5
 8022e70:	4630      	mov	r0, r6
 8022e72:	f000 f837 	bl	8022ee4 <_sbrk_r>
 8022e76:	1c43      	adds	r3, r0, #1
 8022e78:	d123      	bne.n	8022ec2 <_malloc_r+0x92>
 8022e7a:	230c      	movs	r3, #12
 8022e7c:	6033      	str	r3, [r6, #0]
 8022e7e:	4630      	mov	r0, r6
 8022e80:	f000 f846 	bl	8022f10 <__malloc_unlock>
 8022e84:	e7e3      	b.n	8022e4e <_malloc_r+0x1e>
 8022e86:	6823      	ldr	r3, [r4, #0]
 8022e88:	1b5b      	subs	r3, r3, r5
 8022e8a:	d417      	bmi.n	8022ebc <_malloc_r+0x8c>
 8022e8c:	2b0b      	cmp	r3, #11
 8022e8e:	d903      	bls.n	8022e98 <_malloc_r+0x68>
 8022e90:	6023      	str	r3, [r4, #0]
 8022e92:	441c      	add	r4, r3
 8022e94:	6025      	str	r5, [r4, #0]
 8022e96:	e004      	b.n	8022ea2 <_malloc_r+0x72>
 8022e98:	6863      	ldr	r3, [r4, #4]
 8022e9a:	42a2      	cmp	r2, r4
 8022e9c:	bf0c      	ite	eq
 8022e9e:	600b      	streq	r3, [r1, #0]
 8022ea0:	6053      	strne	r3, [r2, #4]
 8022ea2:	4630      	mov	r0, r6
 8022ea4:	f000 f834 	bl	8022f10 <__malloc_unlock>
 8022ea8:	f104 000b 	add.w	r0, r4, #11
 8022eac:	1d23      	adds	r3, r4, #4
 8022eae:	f020 0007 	bic.w	r0, r0, #7
 8022eb2:	1ac2      	subs	r2, r0, r3
 8022eb4:	d0cc      	beq.n	8022e50 <_malloc_r+0x20>
 8022eb6:	1a1b      	subs	r3, r3, r0
 8022eb8:	50a3      	str	r3, [r4, r2]
 8022eba:	e7c9      	b.n	8022e50 <_malloc_r+0x20>
 8022ebc:	4622      	mov	r2, r4
 8022ebe:	6864      	ldr	r4, [r4, #4]
 8022ec0:	e7cc      	b.n	8022e5c <_malloc_r+0x2c>
 8022ec2:	1cc4      	adds	r4, r0, #3
 8022ec4:	f024 0403 	bic.w	r4, r4, #3
 8022ec8:	42a0      	cmp	r0, r4
 8022eca:	d0e3      	beq.n	8022e94 <_malloc_r+0x64>
 8022ecc:	1a21      	subs	r1, r4, r0
 8022ece:	4630      	mov	r0, r6
 8022ed0:	f000 f808 	bl	8022ee4 <_sbrk_r>
 8022ed4:	3001      	adds	r0, #1
 8022ed6:	d1dd      	bne.n	8022e94 <_malloc_r+0x64>
 8022ed8:	e7cf      	b.n	8022e7a <_malloc_r+0x4a>
 8022eda:	bf00      	nop
 8022edc:	20000a24 	.word	0x20000a24
 8022ee0:	20000a28 	.word	0x20000a28

08022ee4 <_sbrk_r>:
 8022ee4:	b538      	push	{r3, r4, r5, lr}
 8022ee6:	4d06      	ldr	r5, [pc, #24]	; (8022f00 <_sbrk_r+0x1c>)
 8022ee8:	2300      	movs	r3, #0
 8022eea:	4604      	mov	r4, r0
 8022eec:	4608      	mov	r0, r1
 8022eee:	602b      	str	r3, [r5, #0]
 8022ef0:	f7f5 f930 	bl	8018154 <_sbrk>
 8022ef4:	1c43      	adds	r3, r0, #1
 8022ef6:	d102      	bne.n	8022efe <_sbrk_r+0x1a>
 8022ef8:	682b      	ldr	r3, [r5, #0]
 8022efa:	b103      	cbz	r3, 8022efe <_sbrk_r+0x1a>
 8022efc:	6023      	str	r3, [r4, #0]
 8022efe:	bd38      	pop	{r3, r4, r5, pc}
 8022f00:	20007550 	.word	0x20007550

08022f04 <__malloc_lock>:
 8022f04:	4801      	ldr	r0, [pc, #4]	; (8022f0c <__malloc_lock+0x8>)
 8022f06:	f000 b809 	b.w	8022f1c <__retarget_lock_acquire_recursive>
 8022f0a:	bf00      	nop
 8022f0c:	20007558 	.word	0x20007558

08022f10 <__malloc_unlock>:
 8022f10:	4801      	ldr	r0, [pc, #4]	; (8022f18 <__malloc_unlock+0x8>)
 8022f12:	f000 b804 	b.w	8022f1e <__retarget_lock_release_recursive>
 8022f16:	bf00      	nop
 8022f18:	20007558 	.word	0x20007558

08022f1c <__retarget_lock_acquire_recursive>:
 8022f1c:	4770      	bx	lr

08022f1e <__retarget_lock_release_recursive>:
 8022f1e:	4770      	bx	lr

08022f20 <_init>:
 8022f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f22:	bf00      	nop
 8022f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f26:	bc08      	pop	{r3}
 8022f28:	469e      	mov	lr, r3
 8022f2a:	4770      	bx	lr

08022f2c <_fini>:
 8022f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f2e:	bf00      	nop
 8022f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f32:	bc08      	pop	{r3}
 8022f34:	469e      	mov	lr, r3
 8022f36:	4770      	bx	lr
